[
  {
    "owner": "coder",
    "repo": "coder",
    "content": "TITLE: Defining Coder Agent Resource\nDESCRIPTION: This Terraform code defines a `coder_agent` resource, which is essential for users to connect to a workspace. The agent facilitates workspace connections via SSH, port forwarding, and IDEs. It also displays real-time workspace metadata such as resource usage. The example configures the agent for a Linux environment with amd64 architecture and specifies VS Code as a display app.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/index.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\nresource \"coder_agent\" \"dev\" {\n  os   = \"linux\"\n  arch = \"amd64\"\n  dir  = \"/workspace\"\n  display_apps {\n    vscode = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Coder CLI (Shell)\nDESCRIPTION: Installs the Coder CLI using a shell script. The Coder CLI is required to login and configure SSH access to a Coder workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder Agent for code-server\nDESCRIPTION: This Terraform resource configures a Coder agent to install and run code-server. It includes a startup script that downloads and installs code-server, then starts it on a specific port with authentication disabled. This allows users to access code-server within their Coder workspace. It assumes a Linux/macOS environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n    arch           = \"amd64\"\n    os             = \"linux\"\n    startup_script = <<EOF\n    #!/bin/sh\n    # install code-server\n    # add '-s -- --version x.x.x' to install a specific code-server version\n    curl -fsSL https://code-server.dev/install.sh | sh -s -- --method=standalone --prefix=/tmp/code-server\n\n    # start code-server on a specific port\n    # authn is off since the user already authn-ed into the coder deployment\n    # & is used to run the process in the background\n    /tmp/code-server/bin/code-server --auth none --port 13337 &\n    EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Encryption Key (Base64)\nDESCRIPTION: This shell command generates a 32-byte random key using /dev/urandom and then base64-encodes it. This provides a secure, random key suitable for use as an encryption key. The output should be stored securely.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/database-encryption.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndd if=/dev/urandom bs=32 count=1 | base64\n```\n\n----------------------------------------\n\nTITLE: Coder Configuration JSON Response\nDESCRIPTION: This JSON snippet illustrates a sample response for the Coder configuration, detailing various settings from access URLs and security policies to authentication mechanisms like OAuth2 and OIDC. It encompasses options for logging, notifications, databases, proxy configurations, rate limits, session management, SSH, TLS, telemetry, update checks, and workspace settings. The config section defines how the Coder instance operates, while options provides metadata about configurable parameters.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"config\": {\n    \"access_url\": {\n      \"forceQuery\": true,\n      \"fragment\": \"string\",\n      \"host\": \"string\",\n      \"omitHost\": true,\n      \"opaque\": \"string\",\n      \"path\": \"string\",\n      \"rawFragment\": \"string\",\n      \"rawPath\": \"string\",\n      \"rawQuery\": \"string\",\n      \"scheme\": \"string\",\n      \"user\": {}\n    },\n    \"additional_csp_policy\": [\n      \"string\"\n    ],\n    \"address\": {\n      \"host\": \"string\",\n      \"port\": \"string\"\n    },\n    \"agent_fallback_troubleshooting_url\": {\n      \"forceQuery\": true,\n      \"fragment\": \"string\",\n      \"host\": \"string\",\n      \"omitHost\": true,\n      \"opaque\": \"string\",\n      \"path\": \"string\",\n      \"rawFragment\": \"string\",\n      \"rawPath\": \"string\",\n      \"rawQuery\": \"string\",\n      \"scheme\": \"string\",\n      \"user\": {}\n    },\n    \"agent_stat_refresh_interval\": 0,\n    \"allow_workspace_renames\": true,\n    \"autobuild_poll_interval\": 0,\n    \"browser_only\": true,\n    \"cache_directory\": \"string\",\n    \"cli_upgrade_message\": \"string\",\n    \"config\": \"string\",\n    \"config_ssh\": {\n      \"deploymentName\": \"string\",\n      \"sshconfigOptions\": [\n        \"string\"\n      ]\n    },\n    \"dangerous\": {\n      \"allow_all_cors\": true,\n      \"allow_path_app_sharing\": true,\n      \"allow_path_app_site_owner_access\": true\n    },\n    \"derp\": {\n      \"config\": {\n        \"block_direct\": true,\n        \"force_websockets\": true,\n        \"path\": \"string\",\n        \"url\": \"string\"\n      },\n      \"server\": {\n        \"enable\": true,\n        \"region_code\": \"string\",\n        \"region_id\": 0,\n        \"region_name\": \"string\",\n        \"relay_url\": {\n          \"forceQuery\": true,\n          \"fragment\": \"string\",\n          \"host\": \"string\",\n          \"omitHost\": true,\n          \"opaque\": \"string\",\n          \"path\": \"string\",\n          \"rawFragment\": \"string\",\n          \"rawPath\": \"string\",\n          \"rawQuery\": \"string\",\n          \"scheme\": \"string\",\n          \"user\": {}\n        },\n        \"stun_addresses\": [\n          \"string\"\n        ]\n      }\n    },\n    \"disable_owner_workspace_exec\": true,\n    \"disable_password_auth\": true,\n    \"disable_path_apps\": true,\n    \"docs_url\": {\n      \"forceQuery\": true,\n      \"fragment\": \"string\",\n      \"host\": \"string\",\n      \"omitHost\": true,\n      \"opaque\": \"string\",\n      \"path\": \"string\",\n      \"rawFragment\": \"string\",\n      \"rawPath\": \"string\",\n      \"rawQuery\": \"string\",\n      \"scheme\": \"string\",\n      \"user\": {}\n    },\n    \"enable_terraform_debug_mode\": true,\n    \"ephemeral_deployment\": true,\n    \"experiments\": [\n      \"string\"\n    ],\n    \"external_auth\": {\n      \"value\": [\n        {\n          \"app_install_url\": \"string\",\n          \"app_installations_url\": \"string\",\n          \"auth_url\": \"string\",\n          \"client_id\": \"string\",\n          \"device_code_url\": \"string\",\n          \"device_flow\": true,\n          \"display_icon\": \"string\",\n          \"display_name\": \"string\",\n          \"id\": \"string\",\n          \"no_refresh\": true,\n          \"regex\": \"string\",\n          \"scopes\": [\n            \"string\"\n          ],\n          \"token_url\": \"string\",\n          \"type\": \"string\",\n          \"validate_url\": \"string\"\n        }\n      ]\n    },\n    \"external_token_encryption_keys\": [\n      \"string\"\n    ],\n    \"healthcheck\": {\n      \"refresh\": 0,\n      \"threshold_database\": 0\n    },\n    \"http_address\": \"string\",\n    \"http_cookies\": {\n      \"same_site\": \"string\",\n      \"secure_auth_cookie\": true\n    },\n    \"in_memory_database\": true,\n    \"job_hang_detector_interval\": 0,\n    \"logging\": {\n      \"human\": \"string\",\n      \"json\": \"string\",\n      \"log_filter\": [\n        \"string\"\n      ],\n      \"stackdriver\": \"string\"\n    },\n    \"metrics_cache_refresh_interval\": 0,\n    \"notifications\": {\n      \"dispatch_timeout\": 0,\n      \"email\": {\n        \"auth\": {\n          \"identity\": \"string\",\n          \"password\": \"string\",\n          \"password_file\": \"string\",\n          \"username\": \"string\"\n        },\n        \"force_tls\": true,\n        \"from\": \"string\",\n        \"hello\": \"string\",\n        \"smarthost\": \"string\",\n        \"tls\": {\n          \"ca_file\": \"string\",\n          \"cert_file\": \"string\",\n          \"insecure_skip_verify\": true,\n          \"key_file\": \"string\",\n          \"server_name\": \"string\",\n          \"start_tls\": true\n        }\n      },\n      \"fetch_interval\": 0,\n      \"inbox\": {\n        \"enabled\": true\n      },\n      \"lease_count\": 0,\n      \"lease_period\": 0,\n      \"max_send_attempts\": 0,\n      \"method\": \"string\",\n      \"retry_interval\": 0,\n      \"sync_buffer_size\": 0,\n      \"sync_interval\": 0,\n      \"webhook\": {\n        \"endpoint\": {\n          \"forceQuery\": true,\n          \"fragment\": \"string\",\n          \"host\": \"string\",\n          \"omitHost\": true,\n          \"opaque\": \"string\",\n          \"path\": \"string\",\n          \"rawFragment\": \"string\",\n          \"rawPath\": \"string\",\n          \"rawQuery\": \"string\",\n          \"scheme\": \"string\",\n          \"user\": {}\n        }\n      }\n    },\n    \"oauth2\": {\n      \"github\": {\n        \"allow_everyone\": true,\n        \"allow_signups\": true,\n        \"allowed_orgs\": [\n          \"string\"\n        ],\n        \"allowed_teams\": [\n          \"string\"\n        ],\n        \"client_id\": \"string\",\n        \"client_secret\": \"string\",\n        \"default_provider_enable\": true,\n        \"device_flow\": true,\n        \"enterprise_base_url\": \"string\"\n      }\n    },\n    \"oidc\": {\n      \"allow_signups\": true,\n      \"auth_url_params\": {},\n      \"client_cert_file\": \"string\",\n      \"client_id\": \"string\",\n      \"client_key_file\": \"string\",\n      \"client_secret\": \"string\",\n      \"email_domain\": [\n        \"string\"\n      ],\n      \"email_field\": \"string\",\n      \"group_allow_list\": [\n        \"string\"\n      ],\n      \"group_auto_create\": true,\n      \"group_mapping\": {},\n      \"group_regex_filter\": {},\n      \"groups_field\": \"string\",\n      \"icon_url\": {\n        \"forceQuery\": true,\n        \"fragment\": \"string\",\n        \"host\": \"string\",\n        \"omitHost\": true,\n        \"opaque\": \"string\",\n        \"path\": \"string\",\n        \"rawFragment\": \"string\",\n        \"rawPath\": \"string\",\n        \"rawQuery\": \"string\",\n        \"scheme\": \"string\",\n        \"user\": {}\n      },\n      \"ignore_email_verified\": true,\n      \"ignore_user_info\": true,\n      \"issuer_url\": \"string\",\n      \"name_field\": \"string\",\n      \"organization_assign_default\": true,\n      \"organization_field\": \"string\",\n      \"organization_mapping\": {},\n      \"scopes\": [\n        \"string\"\n      ],\n      \"sign_in_text\": \"string\",\n      \"signups_disabled_text\": \"string\",\n      \"skip_issuer_checks\": true,\n      \"source_user_info_from_access_token\": true,\n      \"user_role_field\": \"string\",\n      \"user_role_mapping\": {},\n      \"user_roles_default\": [\n        \"string\"\n      ],\n      \"username_field\": \"string\"\n    },\n    \"pg_auth\": \"string\",\n    \"pg_connection_url\": \"string\",\n    \"pprof\": {\n      \"address\": {\n        \"host\": \"string\",\n        \"port\": \"string\"\n      },\n      \"enable\": true\n    },\n    \"prometheus\": {\n      \"address\": {\n        \"host\": \"string\",\n        \"port\": \"string\"\n      },\n      \"aggregate_agent_stats_by\": [\n        \"string\"\n      ],\n      \"collect_agent_stats\": true,\n      \"collect_db_metrics\": true,\n      \"enable\": true\n    },\n    \"provisioner\": {\n      \"daemon_poll_interval\": 0,\n      \"daemon_poll_jitter\": 0,\n      \"daemon_psk\": \"string\",\n      \"daemon_types\": [\n        \"string\"\n      ],\n      \"daemons\": 0,\n      \"force_cancel_interval\": 0\n    },\n    \"proxy_health_status_interval\": 0,\n    \"proxy_trusted_headers\": [\n      \"string\"\n    ],\n    \"proxy_trusted_origins\": [\n      \"string\"\n    ],\n    \"rate_limit\": {\n      \"api\": 0,\n      \"disable_all\": true\n    },\n    \"redirect_to_access_url\": true,\n    \"scim_api_key\": \"string\",\n    \"session_lifetime\": {\n      \"default_duration\": 0,\n      \"default_token_lifetime\": 0,\n      \"disable_expiry_refresh\": true,\n      \"max_token_lifetime\": 0\n    },\n    \"ssh_keygen_algorithm\": \"string\",\n    \"strict_transport_security\": 0,\n    \"strict_transport_security_options\": [\n      \"string\"\n    ],\n    \"support\": {\n      \"links\": {\n        \"value\": [\n          {\n            \"icon\": \"bug\",\n            \"name\": \"string\",\n            \"target\": \"string\"\n          }\n        ]\n      }\n    },\n    \"swagger\": {\n      \"enable\": true\n    },\n    \"telemetry\": {\n      \"enable\": true,\n      \"trace\": true,\n      \"url\": {\n        \"forceQuery\": true,\n        \"fragment\": \"string\",\n        \"host\": \"string\",\n        \"omitHost\": true,\n        \"opaque\": \"string\",\n        \"path\": \"string\",\n        \"rawFragment\": \"string\",\n        \"rawPath\": \"string\",\n        \"rawQuery\": \"string\",\n        \"scheme\": \"string\",\n        \"user\": {}\n      }\n    },\n    \"terms_of_service_url\": \"string\",\n    \"tls\": {\n      \"address\": {\n        \"host\": \"string\",\n        \"port\": \"string\"\n      },\n      \"allow_insecure_ciphers\": true,\n      \"cert_file\": [\n        \"string\"\n      ],\n      \"client_auth\": \"string\",\n      \"client_ca_file\": \"string\",\n      \"client_cert_file\": \"string\",\n      \"client_key_file\": \"string\",\n      \"enable\": true,\n      \"key_file\": [\n        \"string\"\n      ],\n      \"min_version\": \"string\",\n      \"redirect_http\": true,\n      \"supported_ciphers\": [\n        \"string\"\n      ]\n    },\n    \"trace\": {\n      \"capture_logs\": true,\n      \"data_dog\": true,\n      \"enable\": true,\n      \"honeycomb_api_key\": \"string\"\n    },\n    \"update_check\": true,\n    \"user_quiet_hours_schedule\": {\n      \"allow_user_custom\": true,\n      \"default_schedule\": \"string\"\n    },\n    \"verbose\": true,\n    \"web_terminal_renderer\": \"string\",\n    \"wgtunnel_host\": \"string\",\n    \"wildcard_access_url\": \"string\",\n    \"workspace_hostname_suffix\": \"string\",\n    \"write_config\": true\n  },\n  \"options\": [\n    {\n      \"annotations\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"default\": \"string\",\n      \"description\": \"string\",\n      \"env\": \"string\",\n      \"flag\": \"string\",\n      \"flag_shorthand\": \"string\",\n      \"group\": {\n        \"description\": \"string\",\n        \"name\": \"string\",\n        \"parent\": {\n          \"description\": \"string\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Namespace\nDESCRIPTION: This command creates a dedicated Kubernetes namespace called `coder` for the Coder control plane. Namespaces provide a way to isolate resources within a cluster. The `kubectl create namespace` command is used to achieve this.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create namespace coder\n```\n\n----------------------------------------\n\nTITLE: Installing Coder via Install Script (Linux/macOS)\nDESCRIPTION: This script downloads and executes the Coder installation script. It is the quickest method for installing Coder on Linux and macOS systems. It retrieves the install.sh script from coder.com and executes it using the sh interpreter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cli.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Workspace creation request body - JSON\nDESCRIPTION: This JSON object defines the request body for creating a workspace. It includes properties such as `automatic_updates`, `autostart_schedule`, `template_id`, `template_version_id`, `template_version_preset_id`, `enable_dynamic_parameters`, `name`, `rich_parameter_values`, and `ttl_ms`.  Either `template_id` or `template_version_id` must be specified.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"automatic_updates\": \"always\",\n  \"autostart_schedule\": \"string\",\n  \"enable_dynamic_parameters\": true,\n  \"name\": \"string\",\n  \"rich_parameter_values\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n  \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n  \"ttl_ms\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Container with Sysbox Runtime in Terraform\nDESCRIPTION: This Terraform snippet configures a Docker container resource to use the Sysbox container runtime within a Coder workspace. It sets the runtime to \"sysbox-runc\", specifies the container name, image, environment variables (including the Coder agent token), and the command to execute. Requires the coder and docker providers to be configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"docker_container\" \"workspace\" {\n  # ...\n  name    = \"coder-${data.coder_workspace.me.owner}-${lower(data.coder_workspace.me.name)}\"\n  image   = \"codercom/enterprise-base:ubuntu\"\n  env     = [\"CODER_AGENT_TOKEN=${coder_agent.main.token}\"]\n  command = [\"sh\", \"-c\", coder_agent.main.init_script]\n  # Use the Sysbox container runtime (required)\n  runtime = \"sysbox-runc\"\n}\n\nresource \"coder_agent\" \"main\" {\n  arch           = data.coder_provisioner.me.arch\n  os             = \"linux\"\n  startup_script = <<EOF\n    #!/bin/sh\n\n    # Start Docker\n    sudo dockerd &\n\n    # ...\n    EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Portainer App to Coder\nDESCRIPTION: This Terraform resource defines a Coder application for Portainer. It specifies the agent ID, slug, display name, icon, and URL. It also includes a healthcheck configuration to ensure the application is running correctly. Portainer must already be running in the workspace to be added as a Coder app.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_app\" \"portainer\" {\n  agent_id      = coder_agent.main.id\n  slug          = \"portainer\"\n  display_name  = \"Portainer\"\n  icon          = \"https://simpleicons.org/icons/portainer.svg\"\n  url           = \"https://localhost:9443/api/status\"\n\n  healthcheck {\n    url       = \"https://localhost:9443/api/status\"\n    interval  = 6\n    threshold = 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning Dynamic Secrets with Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to provision dynamic secrets (specifically, a Twilio API key) and inject them into the workspace environment using the `coder_agent` resource. It defines a Twilio API key resource and then exposes its secret as an environment variable within the Coder agent.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/secrets.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\nresource \"twilio_iam_api_key\" \"api_key\" {\n  account_sid   = \"ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n  friendly_name = \"Test API Key\"\n}\n\nresource \"coder_agent\" \"main\" {\n  # ...\n  env = {\n    # Let users access the secret via $TWILIO_API_SECRET\n    TWILIO_API_SECRET = \"${twilio_iam_api_key.api_key.secret}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Code-Server Coder App\nDESCRIPTION: This Terraform code defines a `coder_app` resource for Code-Server, which allows users to access VS Code in their browser. The `agent_id` links the app to the Coder agent. The `url` specifies the address of the Code-Server instance, incorporating the username and workspace folder. It utilizes the icon from the specified path and sets subdomain to false with share set to owner.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/index.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"coder_app\" \"code-server\" {\n  agent_id     = coder_agent.main.id\n  slug         = \"code-server\"\n  display_name = \"code-server\"\n  url          = \"http://localhost:13337/?folder=/home/${local.username}\"\n  icon         = \"/icon/code.svg\"\n  subdomain    = false\n  share        = \"owner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Coderd Terraform Provider\nDESCRIPTION: This snippet demonstrates how to configure the coderd Terraform provider to manage Coder templates. It includes setting up the required providers, a backend for storing Terraform state, and the provider configuration with the Coder URL and token. The Terraform state is stored remotely in a Google Cloud Storage bucket.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/change-management.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\nterraform {\n  required_providers {\n    coderd = {\n      source = \"coder/coderd\"\n    }\n  }\n  backend \"gcs\" {\n    bucket = \"example-bucket\"\n    prefix = \"terraform/state\"\n  }\n}\n\nprovider \"coderd\" {\n  // Can be populated from environment variables\n  url   = \"https://coder.example.com\"\n  token = \"****\"\n}\n\n// Get the commit SHA of the configuration's git repository\nvariable \"TFC_CONFIGURATION_VERSION_GIT_COMMIT_SHA\" {\n  type = string\n}\n\nresource \"coderd_template\" \"kubernetes\" {\n  name = \"kubernetes\"\n  description = \"Develop in Kubernetes!\"\n  versions = [{\n    directory = \".coder/templates/kubernetes\"\n    active    = true\n    # Version name is optional\n    name = var.TFC_CONFIGURATION_VERSION_GIT_COMMIT_SHA\n    tf_vars = [{\n      name  = \"namespace\"\n      value = \"default4\"\n    }]\n  }]\n  /* ... Additional template configuration */\n}\n```\n\n----------------------------------------\n\nTITLE: Custom OAuth Scopes - Environment Variables\nDESCRIPTION: This snippet shows how to request custom OAuth scopes for authentication. It defines the `CODER_EXTERNAL_AUTH_0_SCOPES` environment variable to specify scopes like read/write access to repositories and writing GPG keys. These scopes provide more granular control over user permissions when authenticating.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_14\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_SCOPES=\"repo:read repo:write write:gpg_key\"\n```\n\n----------------------------------------\n\nTITLE: Running an external provisioner on a VM (sh)\nDESCRIPTION: This snippet shows how to install and start a Coder provisioner directly on a virtual machine. It uses curl to download and execute the installation script, then sets environment variables for the Coder URL and session token before starting the provisioner.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\nexport CODER_URL=https://coder.example.com\nexport CODER_SESSION_TOKEN=your_token\ncoder provisioner start\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Credentials via Environment Variables\nDESCRIPTION: These environment variables are used to configure Coder to use an OpenID Connect provider for authentication.  `CODER_OIDC_ISSUER_URL` specifies the URL of the OIDC issuer. `CODER_OIDC_EMAIL_DOMAIN` lists allowed email domains.  `CODER_OIDC_CLIENT_ID` and `CODER_OIDC_CLIENT_SECRET` contain the client ID and secret provided by the OIDC provider.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/oidc-auth.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nCODER_OIDC_ISSUER_URL=\"https://issuer.corp.com\"\nCODER_OIDC_EMAIL_DOMAIN=\"your-domain-1,your-domain-2\"\nCODER_OIDC_CLIENT_ID=\"533...des\"\nCODER_OIDC_CLIENT_SECRET=\"G0CSP...7qSM\"\n```\n\n----------------------------------------\n\nTITLE: Example User Object Schema\nDESCRIPTION: This JSON snippet describes the schema for a user object as returned by the Coder API. It includes fields such as avatar URL, creation timestamp, email, ID, last seen timestamp, login type, name, organization IDs, role, roles, status, theme preference, updated timestamp, and username.  This is a sample representation of a user within the Coder platform, demonstrating the structure of user data in API responses. The login_type field has enumerated values such as password, github, oidc, token and none.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_108\n\nLANGUAGE: json\nCODE:\n```\n[{\"avatar_url\": \"http://example.com\",\"created_at\": \"2019-08-24T14:15:22Z\",\"email\": \"user@example.com\",\"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\"last_seen_at\": \"2019-08-24T14:15:22Z\",\"login_type\": \"\",\"name\": \"string\",\"organization_ids\": [\"497f6eca-6276-4993-bfeb-53cbbbba6f08\"],\"role\": \"admin\",\"roles\": [{\"display_name\": \"string\",\"name\": \"string\",\"organization_id\": \"string\"}],\"status\": \"active\",\"theme_preference\": \"string\",\"updated_at\": \"2019-08-24T14:15:22Z\",\"username\": \"string\"}]\n```\n\n----------------------------------------\n\nTITLE: Overriding Template Settings with terraform.tfvars\nDESCRIPTION: This Terraform snippet shows an example `terraform.tfvars` file that overrides the `coder_image` variable. This allows for customizing template settings without modifying the original template code.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/variables.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ncoder_image = newimage:tag\n```\n\n----------------------------------------\n\nTITLE: Setting Bitbucket Server Environment Variables\nDESCRIPTION: This code snippet shows the environment variables required for Bitbucket Server external authentication. It includes the ID, type, client ID, client secret, and authentication URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_7\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"primary-bitbucket-server\"\nCODER_EXTERNAL_AUTH_0_TYPE=bitbucket-server\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxx\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxx\nCODER_EXTERNAL_AUTH_0_AUTH_URL=https://bitbucket.example.com/rest/oauth2/latest/authorize\n```\n\n----------------------------------------\n\nTITLE: Update User Password with curl\nDESCRIPTION: This shell command shows how to update a user's password using curl. It sends a PUT request to the specified endpoint, including the Content-Type header and the Coder-Session-Token for authentication. The request body must be a JSON object containing the old_password and the new password.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/password \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configure SSH for Coder Workspace\nDESCRIPTION: This command configures SSH access to your Coder workspace. It automatically sets up the necessary SSH configurations.  It relies on the successful completion of the `coder login` command for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder config-ssh\n```\n\n----------------------------------------\n\nTITLE: Restarting Coder system service (Shell)\nDESCRIPTION: These commands reload the systemd daemon and restart the Coder service. This is necessary to apply changes after upgrading the Coder binary. Requires systemd to be the system's init system.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/upgrade.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsystemctl daemon-reload\nsystemctl restart coder\n```\n\n----------------------------------------\n\nTITLE: Personalize Script Example\nDESCRIPTION: This bash script demonstrates a `personalize` script that can be used to customize a Coder workspace. It updates the apt package list and installs several tools, like neovim, fish, and cargo.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-dotfiles.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nsudo apt update\n# Install some of my favorite tools every time my workspace boots\nsudo apt install -y neovim fish cargo\n```\n\n----------------------------------------\n\nTITLE: Workspace API Response Example\nDESCRIPTION: This JSON snippet shows an example response from the Workspace API endpoint. It provides a structure for the workspace object and its nested properties, including information about build status, resources, agents, and other relevant workspace details. This is useful for understanding the data format returned by the API.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 0,\n  \"workspaces\": [\n    {\n      \"allow_renames\": true,\n      \"automatic_updates\": \"always\",\n      \"autostart_schedule\": \"string\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"deleting_at\": \"2019-08-24T14:15:22Z\",\n      \"dormant_at\": \"2019-08-24T14:15:22Z\",\n      \"favorite\": true,\n      \"health\": {\n        \"failing_agents\": [\n          \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n        ],\n        \"healthy\": false\n      },\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"last_used_at\": \"2019-08-24T14:15:22Z\",\n      \"latest_app_status\": {\n        \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n        \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"message\": \"string\",\n        \"needs_user_attention\": true,\n        \"state\": \"working\",\n        \"uri\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n      },\n      \"latest_build\": {\n        \"build_number\": 0,\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"daily_cost\": 0,\n        \"deadline\": \"2019-08-24T14:15:22Z\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n        \"initiator_name\": \"string\",\n        \"job\": {\n          \"available_workers\": [\n            \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n          ],\n          \"canceled_at\": \"2019-08-24T14:15:22Z\",\n          \"completed_at\": \"2019-08-24T14:15:22Z\",\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"error\": \"string\",\n          \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n          \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"input\": {\n            \"error\": \"string\",\n            \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n            \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n          },\n          \"metadata\": {\n            \"template_display_name\": \"string\",\n            \"template_icon\": \"string\",\n            \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n            \"template_name\": \"string\",\n            \"template_version_name\": \"string\",\n            \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n            \"workspace_name\": \"string\"\n          },\n          \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n          \"queue_position\": 0,\n          \"queue_size\": 0,\n          \"started_at\": \"2019-08-24T14:15:22Z\",\n          \"status\": \"pending\",\n          \"tags\": {\n            \"property1\": \"string\",\n            \"property2\": \"string\"\n          },\n          \"type\": \"template_version_import\",\n          \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n        },\n        \"matched_provisioners\": {\n          \"available\": 0,\n          \"count\": 0,\n          \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n        },\n        \"max_deadline\": \"2019-08-24T14:15:22Z\",\n        \"reason\": \"initiator\",\n        \"resources\": [\n          {\n            \"agents\": [\n              {\n                \"api_version\": \"string\",\n                \"apps\": [\n                  {\n                    \"command\": \"string\",\n                    \"display_name\": \"string\",\n                    \"external\": true,\n                    \"health\": \"disabled\",\n                    \"healthcheck\": {},\n                    \"hidden\": true,\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"open_in\": \"slim-window\",\n                    \"sharing_level\": \"owner\",\n                    \"slug\": \"string\",\n                    \"statuses\": [],\n                    \"subdomain\": true,\n                    \"subdomain_name\": \"string\",\n                    \"url\": \"string\"\n                  }\n                ],\n                \"architecture\": \"string\",\n                \"connection_timeout_seconds\": 0,\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"directory\": \"string\",\n                \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n                \"display_apps\": [\n                  \"vscode\"\n                ],\n                \"environment_variables\": {\n                  \"property1\": \"string\",\n                  \"property2\": \"string\"\n                },\n                \"expanded_directory\": \"string\",\n                \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n                \"health\": {\n                  \"healthy\": false,\n                  \"reason\": \"agent has lost connection\"\n                },\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"instance_id\": \"string\",\n                \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n                \"latency\": {\n                  \"property1\": {\n                    \"latency_ms\": 0,\n                    \"preferred\": true\n                  },\n                  \"property2\": {\n                    \"latency_ms\": 0,\n                    \"preferred\": true\n                  }\n                },\n                \"lifecycle_state\": \"created\",\n                \"log_sources\": [\n                  {\n                    \"created_at\": \"2019-08-24T14:15:22Z\",\n                    \"display_name\": \"string\",\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n                  }\n                ],\n                \"logs_length\": 0,\n                \"logs_overflowed\": true,\n                \"name\": \"string\",\n                \"operating_system\": \"string\",\n                \"ready_at\": \"2019-08-24T14:15:22Z\",\n                \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n                \"scripts\": [\n                  {\n                    \"cron\": \"string\",\n                    \"display_name\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"log_path\": \"string\",\n                    \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n                    \"run_on_start\": true,\n                    \"run_on_stop\": true,\n                    \"script\": \"string\",\n                    \"start_blocks_login\": true,\n                    \"timeout\": 0\n                  }\n                ],\n                \"started_at\": \"2019-08-24T14:15:22Z\",\n                \"startup_script_behavior\": \"blocking\",\n                \"status\": \"connecting\",\n                \"subsystems\": [\n                  \"envbox\"\n                ],\n                \"troubleshooting_url\": \"string\",\n                \"updated_at\": \"2019-08-24T14:15:22Z\",\n                \"version\": \"string\"\n              }\n            ],\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"daily_cost\": 0,\n            \"hide\": true,\n            \"icon\": \"string\",\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n            \"metadata\": [\n              {\n                \"key\": \"string\",\n                \"sensitive\": true,\n                \"value\": \"string\"\n              }\n            ],\n            \"name\": \"string\",\n            \"type\": \"string\",\n            \"workspace_transition\": \"start\"\n          }\n        ],\n        \"status\": \"pending\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"template_version_name\": \"string\",\n        \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n        \"transition\": \"start\",\n        \"updated_at\": \"2019-08-24T14:15:22Z\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\",\n        \"workspace_owner_avatar_url\": \"string\",\n        \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n        \"workspace_owner_name\": \"string\"\n      },\n      \"name\": \"string\",\n      \"next_start_at\": \"2019-08-24T14:15:22Z\",\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"organization_name\": \"string\",\n      \"outdated\": true,\n      \"owner_avatar_url\": \"string\",\n      \"owner_id\": \"8826ee2e-7933-4665-aef2-2393f84a0d05\",\n      \"owner_name\": \"string\",\n      \"template_active_version_id\": \"b0da9c29-67d8-4c87-888c-bafe356f7f3c\",\n      \"template_allow_user_cancel_workspace_jobs\": true,\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_require_active_version\": true,\n      \"ttl_ms\": 0,\n      \"updated_at\": \"2019-08-24T14:15:22Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Environment Variables\nDESCRIPTION: This code snippet provides the environment variables necessary to integrate Coder with GitHub's authentication, including ID, type, client ID, and client secret. The `CODER_EXTERNAL_AUTH_0_ID` value must match the corresponding section in the authorization callback URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_9\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"primary-github\"\nCODER_EXTERNAL_AUTH_0_TYPE=github\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxxxxx\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Forwarding ports with coder CLI\nDESCRIPTION: The `coder port-forward` command forwards TCP or UDP ports from a remote workspace to be accessible locally. This snippet demonstrates forwarding the remote TCP port `8080` to local port `8000`. It requires the Coder CLI to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward myworkspace --tcp 8000:8080\n```\n\n----------------------------------------\n\nTITLE: Embed Open in Coder Button\nDESCRIPTION: This Markdown snippet demonstrates how to embed an \"Open in Coder\" button into a document. It uses an image link that points to the Coder instance and template, allowing users to quickly create a workspace. Replace `YOUR_ACCESS_URL` with the Coder instance URL and `YOUR_TEMPLATE` with the template name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/open-in-coder.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in Coder](https://YOUR_ACCESS_URL/open-in-coder.svg)](https://YOUR_ACCESS_URL/templates/YOUR_TEMPLATE/workspace)\n```\n\n----------------------------------------\n\nTITLE: Validating a Number Parameter with Min, Max, and Monotonicity\nDESCRIPTION: This code defines a `coder_parameter` resource named `instances` of type `number`. It uses the `validation` block to set a `min` and `max` value, as well as specify that the value must be monotonically increasing.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_8\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"instances\" {\n  name        = \"Instances\"\n  type        = \"number\"\n  description = \"Number of compute instances\"\n  validation {\n    min       = 1\n    max       = 8\n    monotonic = \"increasing\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Enterprise Environment Variables\nDESCRIPTION: This code snippet presents the environment variables needed for configuring Coder to use GitHub Enterprise's authentication. It includes ID, type, client ID, client secret, validation URL, authentication URL, and token URL. Ensure the authorization callback URL matches the `CODER_EXTERNAL_AUTH_0_ID` value.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_10\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"primary-github\"\nCODER_EXTERNAL_AUTH_0_TYPE=github\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxxxxx\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxxxxxx\nCODER_EXTERNAL_AUTH_0_VALIDATE_URL=\"https://github.example.com/api/v3/user\"\nCODER_EXTERNAL_AUTH_0_AUTH_URL=\"https://github.example.com/login/oauth/authorize\"\nCODER_EXTERNAL_AUTH_0_TOKEN_URL=\"https://github.example.com/login/oauth/access_token\"\n```\n\n----------------------------------------\n\nTITLE: Create Coder Agent\nDESCRIPTION: Creates a Coder agent resource that runs inside the Docker container, installs code-server, sets environment variables, and provides metadata for CPU and RAM usage. This allows developers to connect to their workspaces and provides useful information.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_3\n\nLANGUAGE: tf\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n  arch                   = data.coder_provisioner.me.arch\n  os                     = \"linux\"\n  startup_script         = <<-EOT\n    set -e\n\n    # install and start code-server\n    curl -fsSL https://code-server.dev/install.sh | sh -s -- --method=standalone --prefix=/tmp/code-server\n    /tmp/code-server/bin/code-server --auth none --port 13337 >/tmp/code-server.log 2>&1 &\n  EOT\n\n  env = {\n    GIT_AUTHOR_NAME     = coalesce(data.coder_workspace_owner.me.full_name, data.coder_workspace_owner.me.name)\n    GIT_AUTHOR_EMAIL    = \"${data.coder_workspace_owner.me.email}\"\n    GIT_COMMITTER_NAME  = coalesce(data.coder_workspace_owner.me.full_name, data.coder_workspace_owner.me.name)\n    GIT_COMMITTER_EMAIL = \"${data.coder_workspace_owner.me.email}\"\n  }\n\n  metadata {\n    display_name = \"CPU Usage\"\n    key          = \"0_cpu_usage\"\n    script       = \"coder stat cpu\"\n    interval     = 10\n    timeout      = 1\n  }\n\n  metadata {\n    display_name = \"RAM Usage\"\n    key          = \"1_ram_usage\"\n    script       = \"coder stat mem\"\n    interval     = 10\n    timeout      = 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Coder with Helm\nDESCRIPTION: Installs Coder using Helm with specified values. The commands add the Coder Helm repository, update the repository, and install the Coder chart, specifying the namespace and values file. The `values.yaml` file contains configuration overrides.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add coder-v2 https://helm.coder.com/v2\nhelm repo update\nhelm install coder coder-v2/coder \\\n  --namespace coder \\\n  --values values.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace\nDESCRIPTION: This command demonstrates how to create a workspace using the `coder create` command-line tool. The workspace can be created for the current user or another user if the necessary permissions are available.  The command takes the workspace name as an argument, optionally prefixed with the username.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder create [flags] [workspace]\n```\n\n----------------------------------------\n\nTITLE: Using immutable IDs for docker_volume\nDESCRIPTION: This snippet demonstrates the corrected approach of using the immutable workspace ID (`coder_workspace.id`) to prevent the recreation of a `docker_volume` when the workspace owner changes.  By using the workspace ID in the volume name, the volume persists across owner changes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-persistence.md#_snippet_2\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_workspace\" \"me\" {\n}\n\nresource \"docker_volume\" \"home_volume\" {\n  # This volume will survive until the Workspace is deleted or the template\n  # admin changes this resource block.\n  name = \"coder-${data.coder_workspace.id}-home\"\n}\n```\n\n----------------------------------------\n\nTITLE: User Response Example (JSON)\nDESCRIPTION: This JSON snippet represents a sample response when retrieving user information.  It includes fields such as `avatar_url`, `created_at`, `email`, `id`, `username`, and roles.  The response provides details about the user's profile and organization memberships.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"http://example.com\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"email\": \"user@example.com\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"status\": \"active\",\n  \"theme_preference\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Password - JSON Body\nDESCRIPTION: This JSON payload contains the user's password for validation via the `/users/validate-password` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Coder Tokens with REST API\nDESCRIPTION: This command demonstrates how to use a Coder token to authenticate with the Coder REST API. The token is passed in the `Coder-Session-Token` HTTP header. It retrieves a list of workspaces from the specified Coder server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authentication.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://coder-server:8080/api/v2/workspaces' \\\n  -H 'Coder-Session-Token: *****'\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Example (Condensed Syntax)\nDESCRIPTION: This example demonstrates how to forward multiple TCP or UDP ports in a condensed syntax using the `coder port-forward` command. It requires the `coder` CLI tool to be installed and configured. The workspace must be running and accessible. This syntax allows specifying ranges like 9090-9092. No specific output is generated, the forwarded ports will be accessible on localhost.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/port-forward.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward <workspace> --tcp 8080,9000:3000,9090-9092,10000-10002:10010-10012\n```\n\n----------------------------------------\n\nTITLE: Creating Apache configuration file for Coder\nDESCRIPTION: This command opens the nano text editor to create a new Apache configuration file for Coder.  The configuration file will define how Apache proxies requests to the Coder backend, configures TLS and enables websockets.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo nano /etc/apache2/sites-available/coder.conf\n```\n\n----------------------------------------\n\nTITLE: Coder CLI External Auth Usage\nDESCRIPTION: This code snippet shows how to use the `coder external-auth` command in the Coder CLI. It serves as the main entry point for managing external authentication within a workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/external-auth.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder external-auth\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Example (Multiple Ports)\nDESCRIPTION: This example demonstrates how to forward multiple TCP and UDP ports using the `coder port-forward` command. It requires the `coder` CLI tool to be installed and configured. The workspace must be running and accessible. The syntax allows mapping multiple ports and using port ranges. No specific output is generated, the forwarded ports will be accessible on localhost.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/port-forward.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward <workspace> --tcp 8080:8080 --tcp 9000:3000 --udp 5353:53\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameter with a Default Value in Terraform\nDESCRIPTION: This code defines a `coder_parameter` resource named `base_image` with a `default` property set to `ubuntu:latest`. If the user doesn't specify a value for this parameter, Coder will use the default value.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"base_image\" {\n  name        = \"Base image\"\n  description = \"Base machine image to download\"\n  default     = \"ubuntu:latest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Role Request Body - JSON\nDESCRIPTION: This JSON payload defines the structure for a custom role request. It includes display name, name, and permissions (organization, site, and user). Each permission entry consists of an action, negate flag, and resource type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"display_name\": \"string\",\n  \"name\": \"string\",\n  \"organization_permissions\": [\n    {\n      \"action\": \"application_connect\",\n      \"negate\": true,\n      \"resource_type\": \"*\"\n    }\n  ],\n  \"site_permissions\": [\n    {\n      \"action\": \"application_connect\",\n      \"negate\": true,\n      \"resource_type\": \"*\"\n    }\n  ],\n  \"user_permissions\": [\n    {\n      \"action\": \"application_connect\",\n      \"negate\": true,\n      \"resource_type\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as a Reverse Proxy for Coder\nDESCRIPTION: This snippet configures NGINX as a reverse proxy for Coder, including redirecting HTTP to HTTPS, setting SSL certificates, and forwarding requests to the Coder backend.  It assumes that Coder is running on `127.0.0.1:3000`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    server_name coder.example.com *.coder.example.com;\n\n    # HTTP configuration\n    listen 80;\n    listen [::]:80;\n\n    # HTTP to HTTPS\n    if ($scheme != \"https\") {\n        return 301 https://$host$request_uri;\n    }\n\n    # HTTPS configuration\n    listen [::]:443 ssl ipv6only=on;\n    listen 443 ssl;\n    ssl_certificate /etc/letsencrypt/live/coder.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/coder.example.com/privkey.pem;\n\n    location / {\n        proxy_pass  http://127.0.0.1:3000; # Change this to your coder deployment port default is 3000\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection upgrade;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;\n        add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\" always;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI User Creation Command\nDESCRIPTION: This code snippet shows the usage of the `coder users create` command.  It outlines the command's structure and flags available for creating new users. The flags include options for specifying email, username, full name, password, login type, and organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder users create [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Workspace Response JSON\nDESCRIPTION: This JSON represents an example response from the Coder API when querying a workspace. It includes various details such as IDs, names, creation timestamps, health information, latest build status, resource allocation, template information, and owner details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow_renames\": true,\n  \"automatic_updates\": \"always\",\n  \"autostart_schedule\": \"string\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleting_at\": \"2019-08-24T14:15:22Z\",\n  \"dormant_at\": \"2019-08-24T14:15:22Z\",\n  \"favorite\": true,\n  \"health\": {\n    \"failing_agents\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"healthy\": false\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_used_at\": \"2019-08-24T14:15:22Z\",\n  \"latest_app_status\": {\n    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"message\": \"string\",\n    \"needs_user_attention\": true,\n    \"state\": \"working\",\n    \"uri\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n  },\n  \"latest_build\": {\n    \"build_number\": 0,\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"deadline\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n    \"initiator_name\": \"string\",\n    \"job\": {\n      \"available_workers\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"canceled_at\": \"2019-08-24T14:15:22Z\",\n      \"completed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"error\": \"string\",\n      \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n      \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"input\": {\n        \"error\": \"string\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n      },\n      \"metadata\": {\n        \"template_display_name\": \"string\",\n        \"template_icon\": \"string\",\n        \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n        \"template_name\": \"string\",\n        \"template_version_name\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"queue_position\": 0,\n      \"queue_size\": 0,\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"pending\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"type\": \"template_version_import\",\n      \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n    },\n    \"matched_provisioners\": {\n      \"available\": 0,\n      \"count\": 0,\n      \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n    },\n    \"max_deadline\": \"2019-08-24T14:15:22Z\",\n    \"reason\": \"initiator\",\n    \"resources\": [\n      {\n        \"agents\": [\n          {\n            \"api_version\": \"string\",\n            \"apps\": [\n              {\n                \"command\": \"string\",\n                \"display_name\": \"string\",\n                \"external\": true,\n                \"health\": \"disabled\",\n                \"healthcheck\": {\n                  \"interval\": 0,\n                  \"threshold\": 0,\n                  \"url\": \"string\"\n                },\n                \"hidden\": true,\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"open_in\": \"slim-window\",\n                \"sharing_level\": \"owner\",\n                \"slug\": \"string\",\n                \"statuses\": [\n                  {\n                    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                    \"created_at\": \"2019-08-24T14:15:22Z\",\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"message\": \"string\",\n                    \"needs_user_attention\": true,\n                    \"state\": \"working\",\n                    \"uri\": \"string\",\n                    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                  }\n                ],\n                \"subdomain\": true,\n                \"subdomain_name\": \"string\",\n                \"url\": \"string\"\n              }\n            ],\n            \"architecture\": \"string\",\n            \"connection_timeout_seconds\": 0,\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"directory\": \"string\",\n            \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n            \"display_apps\": [\n              \"vscode\"\n            ],\n            \"environment_variables\": {\n              \"property1\": \"string\",\n              \"property2\": \"string\"\n            },\n            \"expanded_directory\": \"string\",\n            \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"health\": {\n              \"healthy\": false,\n              \"reason\": \"agent has lost connection\"\n            },\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"instance_id\": \"string\",\n            \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"latency\": {\n              \"property1\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              },\n              \"property2\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              }\n            },\n            \"lifecycle_state\": \"created\",\n            \"log_sources\": [\n              {\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"display_name\": \"string\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n              }\n            ],\n            \"logs_length\": 0,\n            \"logs_overflowed\": true,\n            \"name\": \"string\",\n            \"operating_system\": \"string\",\n            \"ready_at\": \"2019-08-24T14:15:22Z\",\n            \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n            \"scripts\": [\n              {\n                \"cron\": \"string\",\n                \"display_name\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"log_path\": \"string\",\n                \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n                \"run_on_start\": true,\n                \"run_on_stop\": true,\n                \"script\": \"string\",\n                \"start_blocks_login\": true,\n                \"timeout\": 0\n              }\n            ],\n            \"started_at\": \"2019-08-24T14:15:22Z\",\n            \"startup_script_behavior\": \"blocking\",\n            \"status\": \"connecting\",\n            \"subsystems\": [\n              \"envbox\"\n            ],\n            \"troubleshooting_url\": \"string\",\n            \"updated_at\": \"2019-08-24T14:15:22Z\",\n            \"version\": \"string\"\n          }\n        ],\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"daily_cost\": 0,\n        \"hide\": true,\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n        \"metadata\": [\n          {\n            \"key\": \"string\",\n            \"sensitive\": true,\n            \"value\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"workspace_transition\": \"start\"\n      }\n    ],\n    \"status\": \"pending\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"template_version_name\": \"string\",\n    \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n    \"transition\": \"start\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\",\n    \"workspace_owner_avatar_url\": \"string\",\n    \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n    \"workspace_owner_name\": \"string\"\n  },\n  \"name\": \"string\",\n  \"next_start_at\": \"2019-08-24T14:15:22Z\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"outdated\": true,\n  \"owner_avatar_url\": \"string\",\n  \"owner_id\": \"8826ee2e-7933-4665-aef2-2393f84a0d05\",\n  \"owner_name\": \"string\",\n  \"template_active_version_id\": \"b0da9c29-67d8-4c87-888c-bafe356f7f3c\",\n  \"template_allow_user_cancel_workspace_jobs\": true,\n  \"template_display_name\": \"string\",\n  \"template_icon\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"template_name\": \"string\",\n  \"template_require_active_version\": true,\n  \"ttl_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a String Parameter with Options in Terraform\nDESCRIPTION: This code defines a `coder_parameter` resource named `docker_host` of type `string`. It allows the user to select a Docker host from a predefined list of options, each associated with a region, value, and icon. The `default` property specifies the initial Docker host.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"docker_host\" {\n  name        = \"Region\"\n  description = \"Which region would you like to deploy to?\"\n  icon        = \"/emojis/1f30f.png\"\n  type        = \"string\"\n  default     = \"tcp://100.94.74.63:2375\"\n\n  option {\n    name = \"Pittsburgh, USA\"\n    value = \"tcp://100.94.74.63:2375\"\n    icon = \"/emojis/1f1fa-1f1f8.png\"\n  }\n\n  option {\n    name = \"Helsinki, Finland\"\n    value = \"tcp://100.117.102.81:2375\"\n    icon = \"/emojis/1f1eb-1f1ee.png\"\n  }\n\n  option {\n    name = \"Sydney, Australia\"\n    value = \"tcp://100.127.2.1:2375\"\n    icon = \"/emojis/1f1e6-1f1f9.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create New Session Key with curl\nDESCRIPTION: This snippet demonstrates how to create a new session key using `curl`.  It makes a POST request to the `/users/{user}/keys` endpoint, setting the `Accept` header to `application/json` and the `Coder-Session-Token` header for authentication. The `{user}` path parameter should be replaced with the actual user ID, name, or \"me\".\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/{user}/keys \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Schedule Stop Usage\nDESCRIPTION: This command schedules a workspace to stop after a specified duration or manually.  The duration is measured from the workspace build completion. It accepts duration in formats like `3h2m`, `3h`, `2m`, or `2` (interpreted as minutes).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule_stop.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder schedule stop <workspace-name> { <duration> | manual }\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Workspace Tags using Terraform\nDESCRIPTION: This Terraform code snippet defines a `coder_workspace_tags` data resource with several workspace tags. It demonstrates static values, string-type parameters, formatted strings, and boolean-type parameters to dynamically configure workspace tags based on user input and conditions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/workspace-tags.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_workspace_tags\" \"custom_workspace_tags\" {\n  tags = {\n    \"az\"          = var.az\n    \"zone\"        = \"developers\"\n    \"runtime\"     = data.coder_parameter.runtime_selector.value\n    \"project_id\"  = \"PROJECT_${data.coder_parameter.project_name.value}\"\n    \"cache\"       = data.coder_parameter.feature_cache_enabled.value == \"true\" ? \"with-cache\" : \"no-cache\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Coder State Pull Command Usage\nDESCRIPTION: Shows how to use the `coder state pull` command to retrieve a Terraform state file. The command requires specifying the workspace name and optionally the output file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/state_pull.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder state pull [flags] <workspace> [file]\n```\n\n----------------------------------------\n\nTITLE: Disabling Password Authentication via Environment Variable\nDESCRIPTION: This environment variable disables the built-in email and password login functionality.  Setting `CODER_DISABLE_PASSWORD_AUTH` to `true` removes the option for users to log in with an email address and password.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/oidc-auth.md#_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nCODER_DISABLE_PASSWORD_AUTH=true\n```\n\n----------------------------------------\n\nTITLE: Self-Managed Git Provider Authentication - Environment Variables\nDESCRIPTION: This snippet configures custom authentication and token URLs for self-managed Git provider deployments within Coder. It includes environment variables for the authentication URL, token URL, validation URL, and a regex for the custom Git domain. The `REGEX` variable is mandatory for custom Git domains.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_13\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_AUTH_URL=\"https://github.example.com/oauth/authorize\"\nCODER_EXTERNAL_AUTH_0_TOKEN_URL=\"https://github.example.com/oauth/token\"\nCODER_EXTERNAL_AUTH_0_VALIDATE_URL=\"https://example.com/oauth/token/info\"\nCODER_EXTERNAL_AUTH_0_REGEX=github\\.company\\.com\n```\n\n----------------------------------------\n\nTITLE: Terraform: Locking Module Version\nDESCRIPTION: This Terraform configuration shows how to lock a module to a specific version. This guarantees that the same version of the module is used across multiple deployments, preventing unexpected changes due to module updates.  The `source` attribute defines the module's location, and the `version` attribute specifies the exact version to use.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/dependencies.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nmodule \"razzledazzle\" {\n  source  = \"registry.example.com/modules/razzle/dazzle\"\n  version = \"1.2.3\"\n  foo     = \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Connection Info via curl\nDESCRIPTION: This snippet demonstrates how to get connection information for a workspace agent using a curl command. It requires a valid Coder-Session-Token for authentication. The {workspaceagent} path parameter needs to be replaced with the actual agent ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent}/connection \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Setting the Coder PostgreSQL Connection URL with Custom Schema\nDESCRIPTION: This shell command sets the `CODER_PG_CONNECTION_URL` environment variable to use a custom schema. The `search_path` parameter specifies the order in which schemas are searched for tables. It configures Coder to use the 'myschema' schema.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nexport CODER_PG_CONNECTION_URL=\"postgres://coder:secret42@localhost/coder?sslmode=disable&search_path=myschema\"\n```\n\n----------------------------------------\n\nTITLE: Define Dockerfile for Ubuntu Workspace\nDESCRIPTION: Defines a Dockerfile that uses the official Ubuntu image, installs necessary packages like sudo and curl, and adds a coder user with a home directory. This sets up the base environment for the workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu\n\nRUN apt-get update \\\n    && apt-get install -y \\\n    sudo \\\n    curl \\\n    && rm -rf /var/lib/apt/lists/*\n\nARG USER=coder\nRUN useradd --groups sudo --no-create-home --shell /bin/bash ${USER} \\\n    && echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >/etc/sudoers.d/${USER} \\\n    && chmod 0440 /etc/sudoers.d/${USER}\nUSER ${USER}\nWORKDIR /home/${USER}\n```\n\n----------------------------------------\n\nTITLE: Example Create Initial User Request Body\nDESCRIPTION: This is an example JSON payload for creating the initial user, including email, name, password, trial information, and username.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"string\",\n  \"name\": \"string\",\n  \"password\": \"string\",\n  \"trial\": true,\n  \"trial_info\": {\n    \"company_name\": \"string\",\n    \"country\": \"string\",\n    \"developers\": \"string\",\n    \"first_name\": \"string\",\n    \"job_title\": \"string\",\n    \"last_name\": \"string\",\n    \"phone_number\": \"string\"\n  },\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Coder Helm values.yaml\nDESCRIPTION: This is an example `values.yaml` file used to configure the Coder Helm chart. It sets environment variables for the Coder server, including the PostgreSQL connection URL from a Kubernetes secret and disables the default GitHub OAuth2 provider. The file also comments out optional settings such as the access URL and TLS configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  # You can specify any environment variables you'd like to pass to Coder\n  # here. Coder consumes environment variables listed in\n  # `coder server --help`, and these environment variables are also passed\n  # to the workspace provisioner (so you can consume them in your Terraform\n  # templates for auth keys etc.).\n  #\n  # Please keep in mind that you should not set `CODER_HTTP_ADDRESS`,\n  # `CODER_TLS_ENABLE`, `CODER_TLS_CERT_FILE` or `CODER_TLS_KEY_FILE` as\n  # they are already set by the Helm chart and will cause conflicts.\n  env:\n    - name: CODER_PG_CONNECTION_URL\n      valueFrom:\n        secretKeyRef:\n          # You'll need to create a secret called coder-db-url with your\n          # Postgres connection URL like:\n          # postgres://coder:password@postgres:5432/coder?sslmode=disable\n          name: coder-db-url\n          key: url\n    # For production deployments, we recommend configuring your own GitHub\n    # OAuth2 provider and disabling the default one.\n    - name: CODER_OAUTH2_GITHUB_DEFAULT_PROVIDER_ENABLE\n      value: \"false\"\n\n    # (Optional) For production deployments the access URL should be set.\n    # If you're just trying Coder, access the dashboard via the service IP.\n    # - name: CODER_ACCESS_URL\n    #   value: \"https://coder.example.com\"\n\n  #tls:\n  #  secretNames:\n  #    - my-tls-secret-name\n```\n\n----------------------------------------\n\nTITLE: Deleting a Workspace\nDESCRIPTION: This command deletes a Coder workspace. It accepts the workspace name as an argument. If deleting another user's workspace, the username should be included in the workspace name (e.g., username/workspace_name).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder delete [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Example (UDP)\nDESCRIPTION: This example demonstrates how to forward a single UDP port from port 9000 to port 9000 on your local machine using the `coder port-forward` command. It requires the `coder` CLI tool to be installed and configured.  The workspace must be running and accessible.  The connection uses TCP-like semantics. No specific output is generated, the forwarded port will be accessible on localhost.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/port-forward.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward <workspace> --udp 9000\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Plugin for Privileged Access in Nomad\nDESCRIPTION: This Terraform snippet configures the Docker plugin in Nomad to allow privileged access. This is required for the CSI Host Volume plugin to function correctly.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/nomad-docker/README.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\nplugin \"docker\" {\n  config {\n    allow_privileged = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Coder as System Service\nDESCRIPTION: This shell command enables and starts the Coder service using systemctl. Enabling ensures that the service starts automatically on boot, and --now starts the service immediately.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/azure-vm.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl enable --now coder\n```\n\n----------------------------------------\n\nTITLE: Multiple External Providers - Environment Variables\nDESCRIPTION: This snippet demonstrates the configuration for multiple external authentication providers in Coder. It defines environment variables for two GitHub providers, specifying their IDs, types, client credentials, and regex patterns. Custom auth, token and validation URLs are shown for provider 2, useful for enterprise Github deployments.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_15\n\nLANGUAGE: env\nCODE:\n```\n# Provider 1) github.com\nCODER_EXTERNAL_AUTH_0_ID=primary-github\nCODER_EXTERNAL_AUTH_0_TYPE=github\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxxxxx\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxxxxxx\nCODER_EXTERNAL_AUTH_0_REGEX=github\\.com/org\n\n# Provider 2) github.example.com\nCODER_EXTERNAL_AUTH_1_ID=secondary-github\nCODER_EXTERNAL_AUTH_1_TYPE=github\nCODER_EXTERNAL_AUTH_1_CLIENT_ID=xxxxxx\nCODER_EXTERNAL_AUTH_1_CLIENT_SECRET=xxxxxxx\nCODER_EXTERNAL_AUTH_1_REGEX=github\\.example\\.com\nCODER_EXTERNAL_AUTH_1_AUTH_URL=\"https://github.example.com/login/oauth/authorize\"\nCODER_EXTERNAL_AUTH_1_TOKEN_URL=\"https://github.example.com/login/oauth/access_token\"\nCODER_EXTERNAL_AUTH_1_VALIDATE_URL=\"https://github.example.com/api/v3/user\"\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Listing tokens\nDESCRIPTION: Shows how to list all the existing personal access tokens associated with the user's account using the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/tokens.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ coder tokens ls\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Headers for Client IP Preservation - YAML\nDESCRIPTION: This YAML snippet configures Coder to trust the `X-Forwarded-For` header for client IP addresses and specify the trusted origins. This setup allows the application to accurately determine the client's IP address when behind a proxy or load balancer. Requires setting the CIDR range of the Load Balancer IP address.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    - name: CODER_PROXY_TRUSTED_HEADERS\n      value: X-Forwarded-For\n    - name: CODER_PROXY_TRUSTED_ORIGINS\n      value: 10.0.0.1/8 # this will be the CIDR range of your Load Balancer IP address\n```\n\n----------------------------------------\n\nTITLE: Disabling Email Verification via Environment Variable\nDESCRIPTION: This environment variable disables the requirement for OIDC email addresses to be verified by the identity provider. Setting `CODER_OIDC_IGNORE_EMAIL_VERIFIED` to `true` causes Coder to treat all OIDC emails as verified.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/oidc-auth.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nCODER_OIDC_IGNORE_EMAIL_VERIFIED=true\n```\n\n----------------------------------------\n\nTITLE: Installing Coder with Helm (Stable)\nDESCRIPTION: This command installs the stable version of Coder using Helm. It specifies the chart name, namespace, and values file. It also sets the version of the chart to install. It requires the Coder Helm repository to be configured and the `values.yaml` file to be created.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm install coder coder-v2/coder \\\n      --namespace coder \\\n      --values values.yaml \\\n      --version 2.19.0\n```\n\n----------------------------------------\n\nTITLE: Validating a String Parameter with Regular Expression\nDESCRIPTION: This code defines a `coder_parameter` resource named `project_id` of type `string`. It uses the `validation` block to validate the parameter against a regular expression. The `regex` property specifies the regular expression, and the `error` property provides a custom error message.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_10\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"project_id\" {\n  name        = \"Project ID\"\n  description = \"Alpha-numeric project ID\"\n  validation {\n    regex = \"^[a-z0-9]+$\"\n    error = \"Unfortunately, this isn't a valid project ID\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a coder_app Resource\nDESCRIPTION: This Terraform configuration defines a `coder_app` resource for a Node React application. It configures the application's agent ID, slug, icon, URL, subdomain, share settings, and a health check.  Requires the Coder Terraform provider.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_2\n\nLANGUAGE: tf\nCODE:\n```\n# node app\nresource \"coder_app\" \"node-react-app\" {\n  agent_id  = coder_agent.dev.id\n  slug      = \"node-react-app\"\n  icon      = \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\"\n  url       = \"http://localhost:3000\"\n  subdomain = true\n  share     = \"authenticated\"\n\n  healthcheck {\n    url       = \"http://localhost:3000/healthz\"\n    interval  = 10\n    threshold = 30\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Forwarding multiple TCP ports with coder CLI\nDESCRIPTION: This snippet shows how to forward multiple TCP ports, including a single port and a port range, using the `coder port-forward` command. It forwards the remote TCP port `3000` and all ports from `9990` to `9999` to their respective local ports. Requires the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward myworkspace --tcp 3000,9990-9999\n```\n\n----------------------------------------\n\nTITLE: Show Role Sync Settings via Coder CLI\nDESCRIPTION: This command retrieves the current role sync settings for a specified organization using the Coder CLI. It requires the user to be logged in with Owner or Organization Admin role. The output is a JSON object containing the `field` and `mapping` configurations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncoder organizations settings show role-sync \\\n  --org <org-name> \\\n  > role-sync.json\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection URL with CA certificate\nDESCRIPTION: Example PostgreSQL connection URL that specifies the SSL mode as `verify-full` and points to the CA certificate file mounted in the `$HOME/.postgresql` directory. This URL will be used by Coder to connect to the PostgreSQL database over SSL, performing server verification.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/postgres-ssl.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npostgres://<user>:<password>@databasehost:<port>/<db-name>?sslmode=verify-full&sslrootcert=\"/home/coder/.postgresql/postgres-root.crt\"\n```\n\n----------------------------------------\n\nTITLE: Defining Coder App for code-server\nDESCRIPTION: This Terraform resource defines a Coder application for code-server. It specifies the agent ID, slug, display name, URL, and icon. It also includes a healthcheck configuration to ensure code-server is running correctly within the Coder workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_app\" \"code-server\" {\n  agent_id     = coder_agent.main.id\n  slug         = \"code-server\"\n  display_name = \"code-server\"\n  url          = \"http://localhost:13337/?folder=/home/coder\"\n  icon         = \"/icon/code.svg\"\n  subdomain    = false\n\n  healthcheck {\n    url       = \"http://localhost:13337/healthz\"\n    interval  = 2\n    threshold = 10\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting the Coder PostgreSQL Connection URL\nDESCRIPTION: This shell command sets the `CODER_PG_CONNECTION_URL` environment variable. This variable is required by the Coder server to connect to the PostgreSQL database. The connection string includes the username, password, host, database name, and SSL mode.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexport CODER_PG_CONNECTION_URL=\"postgres://coder:secret42@localhost/coder?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Private Registry Authentication in Bash\nDESCRIPTION: This Bash snippet creates a Kubernetes secret of type `docker-registry` to store credentials for authenticating with a private container registry. It uses `kubectl create secret docker-registry` with the necessary parameters like server, username, password, and email. Requires `kubectl` to be configured and have access to the Kubernetes cluster.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n# Create the secret\n$ kubectl create secret docker-registry <name> \\\n  --docker-server=us.gcr.io \\\n  --docker-username=_json_key \\\n  --docker-password=\"$(cat ./json-key-file.yaml)\" \\\n  --docker-email=<service-account-email>\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Coder Docker Image\nDESCRIPTION: This Dockerfile extends the official Coder image to include a specific version of Terraform and configures a Terraform mirror (filesystem or network).  It sets up the environment for offline Terraform provider installation, downloading and configuring provider plugins. It assumes that the base image is `ghcr.io/coder/coder:latest` and installs common providers into the image.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/offline.md#_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ghcr.io/coder/coder:latest\n\nUSER root\n\nRUN apk add curl unzip\n\n# Create directory for the Terraform CLI (and assets)\nRUN mkdir -p /opt/terraform\n\n# Terraform is already included in the official Coder image.\n# See https://github.com/coder/coder/blob/main/scripts/Dockerfile.base#L15\n# If you need to install a different version of Terraform, you can do so here.\n# The below step is optional if you wish to keep the existing version.\n# See https://github.com/coder/coder/blob/main/provisioner/terraform/install.go#L23-L24\n# for supported Terraform versions.\nARG TERRAFORM_VERSION=1.11.0\nRUN apk update && \\\n    curl -LOs https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip \\\n    && unzip -o terraform_${TERRAFORM_VERSION}_linux_amd64.zip \\\n    && mv terraform /opt/terraform \\\n    && rm terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nENV PATH=/opt/terraform:${PATH}\n\n# Additionally, a Terraform mirror needs to be configured\n# to download the Terraform providers used in Coder templates.\n# There are two options:\n\n# Option 1) Use a filesystem mirror.\n#  We can seed this at build-time or by mounting a volume to\n#  /opt/terraform/plugins in the container.\n#  https://developer.hashicorp.com/terraform/cli/config/config-file#filesystem_mirror\n#  Be sure to add all the providers you use in your templates to /opt/terraform/plugins\n\nRUN mkdir -p /home/coder/.terraform.d/plugins/registry.terraform.io\nADD filesystem-mirror-example.tfrc /home/coder/.terraformrc\n\n# Optionally, we can \"seed\" the filesystem mirror with common providers.\n# Comment out lines 40-49 if you plan on only using a volume or network mirror:\nWORKDIR /home/coder/.terraform.d/plugins/registry.terraform.io\nARG CODER_PROVIDER_VERSION=2.2.0\nRUN echo \"Adding coder/coder v${CODER_PROVIDER_VERSION}\" \\\n    && mkdir -p coder/coder && cd coder/coder \\\n    && curl -LOs https://github.com/coder/terraform-provider-coder/releases/download/v${CODER_PROVIDER_VERSION}/terraform-provider-coder_${CODER_PROVIDER_VERSION}_linux_amd64.zip\nARG DOCKER_PROVIDER_VERSION=3.0.2\nRUN echo \"Adding kreuzwerker/docker v${DOCKER_PROVIDER_VERSION}\" \\\n    && mkdir -p kreuzwerker/docker && cd kreuzwerker/docker \\\n    && curl -LOs https://github.com/kreuzwerker/terraform-provider-docker/releases/download/v${DOCKER_PROVIDER_VERSION}/terraform-provider-docker_${DOCKER_PROVIDER_VERSION}_linux_amd64.zip\nARG KUBERNETES_PROVIDER_VERSION=2.36.0\nRUN echo \"Adding kubernetes/kubernetes v${KUBERNETES_PROVIDER_VERSION}\" \\\n    && mkdir -p hashicorp/kubernetes && cd hashicorp/kubernetes \\\n    && curl -LOs https://releases.hashicorp.com/terraform-provider-kubernetes/${KUBERNETES_PROVIDER_VERSION}/terraform-provider-kubernetes_${KUBERNETES_PROVIDER_VERSION}_linux_amd64.zip\nARG AWS_PROVIDER_VERSION=5.89.0\nRUN echo \"Adding aws/aws v${AWS_PROVIDER_VERSION}\" \\\n    && mkdir -p aws/aws && cd aws/aws \\\n    && curl -LOs https://releases.hashicorp.com/terraform-provider-aws/${AWS_PROVIDER_VERSION}/terraform-provider-aws_${AWS_PROVIDER_VERSION}_linux_amd64.zip\n\nRUN chown -R coder:coder /home/coder/.terraform*\nWORKDIR /home/coder\n\n# Option 2) Use a network mirror.\n#  https://developer.hashicorp.com/terraform/cli/config/config-file#network_mirror\n#  Be sure uncomment line 60 and edit network-mirror-example.tfrc to\n#  specify the HTTPS base URL of your mirror.\n\n# ADD network-mirror-example.tfrc /home/coder/.terraformrc\n\nUSER coder\n```\n\n----------------------------------------\n\nTITLE: SCIM User Replace Body Example\nDESCRIPTION: This JSON payload represents the structure for replacing an existing SCIM user. It includes fields such as active status, emails, groups, ID, meta information, name, schemas, and username. The example shows sample values for each field which will replace the existing user data.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_87\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"emails\": [\n    {\n      \"display\": \"string\",\n      \"primary\": true,\n      \"type\": \"string\",\n      \"value\": \"user@example.com\"\n    }\n  ],\n  \"groups\": [\n    null\n  ],\n  \"id\": \"string\",\n  \"meta\": {\n    \"resourceType\": \"string\"\n  },\n  \"name\": {\n    \"familyName\": \"string\",\n    \"givenName\": \"string\"\n  },\n  \"schemas\": [\n    \"string\"\n  ],\n  \"userName\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create workspace with curl - Shell\nDESCRIPTION: This snippet demonstrates how to create a user workspace using a `curl` command. It specifies the API endpoint, content type, and required headers, including the `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X POST http://coder-server:8080/api/v2/organizations/{organization}/members/{user}/workspaces \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Create Organization: Curl Example\nDESCRIPTION: This example shows how to create a new organization on the Coder server using a curl command. It includes the necessary headers for content type, accept type, and the Coder session token for authentication. The API endpoint is `/api/v2/organizations` with the POST method.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/organizations \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Showing Organizations: Usage Example\nDESCRIPTION: Demonstrates how to use the `coder organizations show` command with different arguments to display organization information. It covers showing the selected organization, listing organizations the user is a member of, showing a specific organization by name, and showing an organization by UUID.  It highlights the various ways to target a specific organization for viewing in Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations show [flags] [\"selected\"|\"me\"|uuid|org_name]\n```\n\n----------------------------------------\n\nTITLE: Coder Agent for JupyterLab (Startup Script)\nDESCRIPTION: This Terraform resource configures a Coder agent to install and run JupyterLab. The startup script installs JupyterLab using pip3 and starts the JupyterLab server with a blank token and allowing access from any IP.  The directory is set to /home/coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"coder_workspace\" \"me\" {}\n\nresource \"coder_agent\" \"coder\" {\n  os             = \"linux\"\n  arch           = \"amd64\"\n  dir            = \"/home/coder\"\n  startup_script = <<-EOF\npip3 install jupyterlab\n$HOME/.local/bin/jupyter lab --ServerApp.token='' --ip='*'\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing a Terraform Module in Coder Template\nDESCRIPTION: This Terraform snippet demonstrates how to reference a module from a Coder template. It includes the data source for the Coder workspace, the module definition with source and variables, and the coder_agent resource that utilizes an output from the module. The module source can point to a Git repository or a Terraform registry.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_workspace\" \"me\" {}\n\nmodule \"coder-base\" {\n  source = \"github.com/my-organization/coder-base\"\n\n  # Modules take in variables and can provision infrastructure\n  vpc_name            = \"devex-3\"\n  subnet_tags         = { \"name\": data.coder_workspace.me.name }\n  code_server_version = 4.14.1\n}\n\nresource \"coder_agent\" \"dev\" {\n  # Modules can provide outputs, such as helper scripts\n  startup_script=<<EOF\n  #!/bin/sh\n  ${module.coder-base.code_server_install_command}\n  EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Replace SCIM User with curl\nDESCRIPTION: This curl command replaces an existing SCIM user. It sends a PUT request to the specified endpoint, including the user ID in the path and headers for content type, accept type and authorization. It expects a JSON payload in the request body conforming to the SCIM user schema and a valid API key for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_86\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/scim/v2/Users/{id} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/scim+json' \\\n  -H 'Authorizaiton: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Executing whoami command in Coder\nDESCRIPTION: This command fetches authenticated user info for a Coder deployment. It allows users to retrieve their identity information within the Coder environment using the CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/whoami.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder whoami\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Resources with Terraform\nDESCRIPTION: This Terraform configuration defines resources for a Docker-based Coder workspace, including a private network, a privileged DinD (Docker in Docker) container, and a workspace container. The dind container is configured to expose dockerd on port 2375, and the workspace container connects to it.  Requires docker provider.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n  os             = \"linux\"\n  arch           = \"amd64\"\n}\n\nresource \"docker_network\" \"private_network\" {\n  name = \"network-${data.coder_workspace.me.id}\"\n}\n\nresource \"docker_container\" \"dind\" {\n  image      = \"docker:dind\"\n  privileged = true\n  name       = \"dind-${data.coder_workspace.me.id}\"\n  entrypoint = [\"dockerd\", \"-H\", \"tcp://0.0.0.0:2375\"]\n  networks_advanced {\n    name = docker_network.private_network.name\n  }\n}\n\nresource \"docker_container\" \"workspace\" {\n  count   = data.coder_workspace.me.start_count\n  image   = \"codercom/enterprise-base:ubuntu\"\n  name    = \"dev-${data.coder_workspace.me.id}\"\n  command = [\"sh\", \"-c\", coder_agent.main.init_script]\n  env = [\n    \"CODER_AGENT_TOKEN=${coder_agent.main.token}\",\n    \"DOCKER_HOST=${docker_container.dind.name}:2375\"\n  ]\n  networks_advanced {\n    name = docker_network.private_network.name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define Artifactory Access Token Variable (Terraform)\nDESCRIPTION: This snippet defines a Terraform variable to store the Artifactory access token. The `sensitive = true` attribute prevents the token from being displayed in plain text in the Terraform state. This is required for the JFrog-Token module.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-artifactory.md#_snippet_3\n\nLANGUAGE: tf\nCODE:\n```\nvariable \"artifactory_access_token\" {\n  type      = string\n  sensitive = true\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Example (TCP)\nDESCRIPTION: This example demonstrates how to forward a single TCP port from 1234 in the workspace to port 5678 on your local machine using the `coder port-forward` command. It requires the `coder` CLI tool to be installed and configured.  The workspace must be running and accessible. The format is `<local_port>:<workspace_port>`. No specific output is generated, the forwarded port will be accessible on localhost.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/port-forward.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward <workspace> --tcp 5678:1234\n```\n\n----------------------------------------\n\nTITLE: Create API token via CLI\nDESCRIPTION: This command creates an API token with a specified name and lifetime using the Coder CLI. The `--name` parameter sets the token's name, and the `--lifetime` parameter sets the token's duration in hours.  It assumes the Coder CLI is already installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/sessions-tokens.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncoder tokens create --name=my-token --lifetime=720h\n```\n\n----------------------------------------\n\nTITLE: Referencing a Parameter Value in a Provider Configuration\nDESCRIPTION: This code snippet demonstrates how to refer to the value of a `coder_parameter` resource (specifically, `docker_host`) within a Docker provider configuration. The `host` attribute of the provider is set to the value of the `docker_host` parameter, allowing the user's selection to dynamically configure the provider.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider \"docker\" {\n  host = data.coder_parameter.docker_host.value\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Coder Server with GitHub OAuth Flags\nDESCRIPTION: This command demonstrates how to start the Coder server with flags to configure GitHub OAuth. It includes flags for allowing sign-ups, specifying allowed organizations, and providing the client ID and secret.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder server --oauth2-github-allow-signups=true --oauth2-github-allowed-orgs=\"your-org\" --oauth2-github-client-id=\"8d1...e05\" --oauth2-github-client-secret=\"57ebc9...02c24c\"\n```\n\n----------------------------------------\n\nTITLE: Coder Templates Push Command Usage\nDESCRIPTION: Shows the basic syntax for using the `coder templates push` command. The command is used to create or update a template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_push.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates push [flags] [template]\n```\n\n----------------------------------------\n\nTITLE: Example API Key by Token Name Response\nDESCRIPTION: This is an example JSON response when retrieving an API key by its token name. It includes fields such as `created_at`, `expires_at`, `id`, `last_used`, `lifetime_seconds`, `login_type`, `scope`, `token_name`, `updated_at`, and `user_id`, representing the API key's attributes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"expires_at\": \"2019-08-24T14:15:22Z\",\n  \"id\": \"string\",\n  \"last_used\": \"2019-08-24T14:15:22Z\",\n  \"lifetime_seconds\": 0,\n  \"login_type\": \"password\",\n  \"scope\": \"all\",\n  \"token_name\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n}\n```\n\n----------------------------------------\n\nTITLE: SSH connection via coder alias\nDESCRIPTION: This command establishes an SSH connection to your Coder workspace using the automatically configured alias.  The <workspaceName> should be replaced with the actual name of your workspace, for example, `myEnv`. It assumes that `coder config-ssh` has already been run successfully.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/index.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ ssh coder.<workspaceName>\n```\n\n----------------------------------------\n\nTITLE: Setting Autoupdate Policy - Coder CLI\nDESCRIPTION: This command sets the auto-update policy for a specified workspace. It requires the workspace name and the desired policy (`always` or `never`).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/autoupdate.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder autoupdate [flags] <workspace> <always|never>\n```\n\n----------------------------------------\n\nTITLE: Running Workspace Proxy in Docker with Entrypoint\nDESCRIPTION: This snippet shows how to run the workspace proxy server in a Docker container by specifying the entrypoint. It requires Docker. The `docker run` command sets the entrypoint to `/opt/coder` and passes `wsproxy server` as arguments to start the proxy server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it --entrypoint /opt/coder ghcr.io/coder/coder:latest wsproxy server\n```\n\n----------------------------------------\n\nTITLE: Testing Access URL Reachability with curl\nDESCRIPTION: This command tests the reachability of the configured Access URL from the server running Coder.  It is used for troubleshooting issues with reverse proxies, DNS resolution, and SSL/TLS configuration. A successful connection returns the HTTP response from the Access URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/health-check.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v \"https://coder.company.com\"\n```\n\n----------------------------------------\n\nTITLE: Push local Coder template to server\nDESCRIPTION: This command pushes a local template directory to the Coder server, creating a new template or updating an existing one.  It requires that you have the Coder CLI installed and configured to connect to your Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncoder templates push <new-template-name> -d ./<new-template-name>\n```\n\n----------------------------------------\n\nTITLE: Create Docker Config JSON - JSON\nDESCRIPTION: This JSON snippet defines the Docker configuration file required for authenticating with a private registry. It includes the registry URL, username, and password within the `auths` section. Replace placeholders with actual credentials before using.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/image-pull-secret.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"<your-registry>\": {\n            \"username\": \"<your-username>\",\n            \"password\": \"<your-password>\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace Proxy with Coder CLI\nDESCRIPTION: This snippet shows how to create a new workspace proxy using the Coder CLI.  It requires the Coder CLI to be installed and authenticated with Owner privileges.  The command creates a proxy with a specified name, display name, and icon, and returns an authentication token that needs to be saved for subsequent steps.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ coder wsproxy create --name=newyork --display-name=\"USA East\" --icon=\"/emojis/2194.png\"\nWorkspace Proxy \"newyork\" created successfully. Save this token, it will not be shown again.\nToken: 2fb6500b-bb47-4783-a0db-dedde895b865:05271b4ef9432bac14c02b3c56b5a2d7f05453718a1f85ba7e772c0a096c7175\n```\n\n----------------------------------------\n\nTITLE: Viewing Coder Logs - Bash\nDESCRIPTION: This bash command sequence is used to view Coder's logs within a Kubernetes environment. It first retrieves the pod name using `kubectl get pods` and then uses `kubectl logs <pod name>` to display the logs for the specified pod.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl logs <pod name>\n```\n\n----------------------------------------\n\nTITLE: SSH Port Forwarding Configuration\nDESCRIPTION: This command sets up an SSH tunnel, forwarding local port 8080 to port 8000 on the localhost of the Coder workspace. The `coder.myworkspace` is the address of the Coder workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nssh -L 8080:localhost:8000 coder.myworkspace\n```\n\n----------------------------------------\n\nTITLE: Configure OIDC Scopes, Role Field, and Role Mapping\nDESCRIPTION: This `env` snippet shows configuration settings needed to sync roles from an Identity Provider (IdP). The configuration includes setting the OIDC Scopes, the user role field, and user role mapping. These settings are essential for proper role-based authorization within the Coder environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_16\n\nLANGUAGE: env\nCODE:\n```\n   # Depending on your identity provider configuration, you may need to explicitly request a \"roles\" scope\n  CODER_OIDC_SCOPES=openid,profile,email,roles\n\n  # The following fields are required for role sync:\n  CODER_OIDC_USER_ROLE_FIELD=roles\n  CODER_OIDC_USER_ROLE_MAPPING='{\"TemplateAuthor\":[\"template-admin\",\"user-admin\"]}'\n```\n\n----------------------------------------\n\nTITLE: Defining Coder App for VS Code Web\nDESCRIPTION: This Terraform resource defines a Coder application for VS Code Web. It specifies the agent ID, slug, display name, URL, and icon. Subdomain is set to true to work around current issue. The share is set to owner.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_app\" \"vscode-web\" {\n     agent_id     = coder_agent.coder.id\n     slug         = \"vscode-web\"\n     display_name = \"VS Code Web\"\n     icon         = \"/icon/code.svg\"\n     url          = \"http://localhost:13338?folder=/home/coder\"\n     subdomain    = true  # VS Code Web does currently does not work with a subpath https://github.com/microsoft/vscode/issues/192947\n     share        = \"owner\"\n   }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Audit Logs via curl - Shell\nDESCRIPTION: This shell command demonstrates how to retrieve audit logs using `curl`. It sends a GET request to the `/api/v2/audit` endpoint, specifying the `limit` parameter.  It requires the `Coder-Session-Token` header for authentication. The output will be a JSON response containing the audit logs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/audit.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/audit?limit=0 \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Starting the Coder Server\nDESCRIPTION: This command starts the Coder server. This is a necessary step after installation to run the Coder platform. The server is run from the command line using the 'coder server' command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cli.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncoder server\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources with Terraform for Privileged Docker\nDESCRIPTION: This Terraform configuration defines resources for a Kubernetes-based Coder workspace with a privileged Docker sidecar.  It creates a Kubernetes Pod with two containers: a privileged `docker:dind` container and a workspace container. The workspace container connects to the Docker daemon in the sidecar container via localhost:2375. It requires the coder and kubernetes terraform providers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    coder = {\n      source  = \"coder/coder\"\n    }\n    kubernetes = {\n      source = \"hashicorp/kubernetes\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nvariable \"workspaces_namespace\" {\n  default = \"coder-namespace\"\n}\n\ndata \"coder_workspace\" \"me\" {}\n\nresource \"coder_agent\" \"main\" {\n  os             = \"linux\"\n  arch           = \"amd64\"\n}\n\nresource \"kubernetes_pod\" \"main\" {\n  count = data.coder_workspace.me.start_count\n  metadata {\n    name      = \"coder-${data.coder_workspace.me.owner}-${data.coder_workspace.me.name}\"\n    namespace = var.namespace\n  }\n  spec {\n    # Run a privileged dind (Docker in Docker) container\n    container {\n      name  = \"docker-sidecar\"\n      image = \"docker:dind\"\n      security_context {\n        privileged = true\n        run_as_user = 0\n      }\n      command = [\"dockerd\", \"-H\", \"tcp://127.0.0.1:2375\"]\n    }\n    container {\n      name    = \"dev\"\n      image   = \"codercom/enterprise-base:ubuntu\"\n      command = [\"sh\", \"-c\", coder_agent.main.init_script]\n      security_context {\n        run_as_user = \"1000\"\n      }\n      env {\n        name  = \"CODER_AGENT_TOKEN\"\n        value = coder_agent.main.token\n      }\n      # Use the Docker daemon in the \"docker-sidecar\" container\n      env {\n        name  = \"DOCKER_HOST\"\n        value = \"localhost:2375\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Git URL with Template Parameter (Terraform)\nDESCRIPTION: This Terraform configuration shows how to create a dynamic Git URL using a Coder template parameter.  It defines a parameter named 'git_repo' with a default value and then uses that parameter's value in the Git Clone module's 'url' attribute, allowing users to specify the Git repository when creating a workspace from the template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/cloning-git-repositories.md#_snippet_1\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_parameter\" \"git_repo\" {\n  name         = \"git_repo\"\n  display_name = \"Git repository\"\n  default      = \"https://github.com/coder/coder\"\n}\n\nmodule \"git-clone\" {\n  source   = \"registry.coder.com/modules/git-clone/coder\"\n  version  = \"1.0.12\"\n  agent_id = coder_agent.example.id\n  url      = data.coder_parameter.git_repo.value\n}\n```\n\n----------------------------------------\n\nTITLE: Configure JFrog-OAuth Coder Module (Terraform)\nDESCRIPTION: This snippet configures the JFrog-OAuth Coder module to integrate with Artifactory using OAuth.  It requires the `coder_agent.example.id` for identifying the Coder agent, the Artifactory URL, and the username field. It defines the package managers to be configured, including npm, go, pypi, and docker. The `count` argument ensures the module is only provisioned when a workspace is starting.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-artifactory.md#_snippet_2\n\nLANGUAGE: tf\nCODE:\n```\nmodule \"jfrog\" {\n  count          = data.coder_workspace.me.start_count\n  source         = \"registry.coder.com/modules/jfrog-oauth/coder\"\n  version        = \"1.0.19\"\n  agent_id       = coder_agent.example.id\n  jfrog_url      = \"https://example.jfrog.io\"\n  username_field = \"username\" # If you are using GitHub to login to both Coder and Artifactory, use username_field = \"username\"\n\n  package_managers = {\n    npm    = [\"npm\", \"@scoped:npm-scoped\"]\n    go     = [\"go\", \"another-go-repo\"]\n    pypi   = [\"pypi\", \"extra-index-pypi\"]\n    docker = [\"example-docker-staging.jfrog.io\", \"example-docker-production.jfrog.io\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab OAuth Configuration - Environment Variables\nDESCRIPTION: This snippet defines environment variables required to configure GitLab OAuth authentication with Coder. It includes the client ID, client secret, validate URL, authentication URL, token URL, and a regex for matching the GitLab domain. This setup enables users to authenticate with Coder using their GitLab accounts.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxxxxx\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxxxxxx\nCODER_EXTERNAL_AUTH_0_VALIDATE_URL=\"https://gitlab.example.com/oauth/token/info\"\nCODER_EXTERNAL_AUTH_0_AUTH_URL=\"https://gitlab.example.com/oauth/authorize\"\nCODER_EXTERNAL_AUTH_0_TOKEN_URL=\"https://gitlab.example.com/oauth/token\"\nCODER_EXTERNAL_AUTH_0_REGEX=gitlab\\.example\\.com\n```\n\n----------------------------------------\n\nTITLE: Auto-Clone Repo with External Auth\nDESCRIPTION: This HCL snippet configures a Coder template to automatically clone a specific git repository. It requires external authentication to use the template. It defines a `coder_external_auth` data source, a `coder_agent` resource, and sets up a startup script to clone the repository if it doesn't exist. The `dir` attribute specifies the directory for the cloned repository.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/open-in-coder.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Require external authentication to use this template\ndata \"coder_external_auth\" \"github\" {\n    id = \"primary-github\"\n}\n\nresource \"coder_agent\" \"dev\" {\n    # ...\n    dir = \"~/coder\"\n    startup_script =<<EOF\n\n    # Clone repo from GitHub\n    if [ ! -d \"coder\" ]\n    then\n        git clone https://github.com/coder/coder\n    fi\n\n    EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform External Authentication with GitHub\nDESCRIPTION: This Terraform configuration retrieves an external authentication token for GitHub and uses it to configure a Coder agent. The agent clones a repository into the `~/coder` directory during startup.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/external-auth.md#_snippet_1\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_external_auth\" \"github\" {\n  # Matches the ID of the external auth provider in Coder.\n  id = \"github\"\n}\n\nresource \"coder_agent\" \"dev\" {\n  os   = \"linux\"\n  arch = \"amd64\"\n  dir  = \"~/coder\"\n  env = {\n    GITHUB_TOKEN : data.coder_external_auth.github.access_token\n  }\n  startup_script = <<EOF\nif [ ! -d ~/coder ]; then\n    git clone https://github.com/coder/coder\nfi\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Volume Recreation with immutable IDs\nDESCRIPTION: This snippet highlights a pitfall where a `docker_volume` is recreated if the workspace owner changes their username. To prevent this, the example shows how to use immutable IDs like `coder_workspace.me.owner_id` or `coder_workspace.me.id` instead of mutable attributes like `coder_workspace.me.owner` when defining the volume's name.  Using the workspace ID ensures that the volume's name remains consistent even if the workspace owner changes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-persistence.md#_snippet_1\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_workspace\" \"me\" {\n}\n\nresource \"docker_volume\" \"home_volume\" {\n  name = \"coder-${data.coder_workspace.me.owner}-home\"\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection URL with client certificate\nDESCRIPTION: Example PostgreSQL connection URL that specifies the SSL mode as `require` and points to the client certificate and key files mounted in the `$HOME/.postgresql` directory. This URL will be used by Coder to connect to the PostgreSQL database over SSL, performing client verification.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/postgres-ssl.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npostgres://<user>:<password>@databasehost:<port>/<db-name>?sslmode=require&sslcert=\"$HOME/.postgresql/postgres.crt&sslkey=$HOME/.postgresql/postgres.key\"\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace with Curl - Shell\nDESCRIPTION: This curl command demonstrates how to create a workspace in Coder using the API. It sends a POST request to the specified endpoint with the content type set to 'application/json'. It includes headers for authentication and accepts JSON responses.  API_KEY must be replaced with a valid Coder session token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/{user}/workspaces \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Rich Parameters by Template Version with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve rich parameters for a specific template version using a curl command. It includes setting the Accept header to application/json and providing the Coder-Session-Token for authentication. The templateversion parameter specifies the ID of the template version.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/rich-parameters \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI State Push Command Usage\nDESCRIPTION: Shows how to use the `coder state push` command to upload a Terraform state file to a specific workspace.  The command requires the workspace name and the path to the state file as arguments.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/state_push.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder state push [flags] <workspace> <file>\n```\n\n----------------------------------------\n\nTITLE: Creating Template with Curl - Shell\nDESCRIPTION: This code snippet demonstrates how to create a template using a curl command. It sends a POST request to the `/organizations/{organization}/templates` endpoint with the necessary headers, including the content type, accept type, and Coder session token for authentication. The request includes a JSON body containing the template definition.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/organizations/{organization}/templates \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Regenerate User SSH Key with Curl\nDESCRIPTION: This code snippet demonstrates how to regenerate a user's SSH key using a curl command. It sends a PUT request to the `/users/{user}/gitsshkey` endpoint, including the user identifier in the path. The request requires `Accept: application/json` and `Coder-Session-Token` headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/gitsshkey \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Vault Module Configuration with Terraform\nDESCRIPTION: This Terraform module authenticates with Vault using a GitHub token. It uses the existing GitHub external authentication to get the token and authenticate with Vault. It installs and authenticates the vault CLI in the Coder workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/vault.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"vault\" {\n  source               = \"registry.coder.com/modules/vault-github/coder\"\n  version              = \"1.0.7\"\n  agent_id             = coder_agent.example.id\n  vault_addr           = \"https://vault.example.com\"\n  coder_github_auth_id = \"my-github-auth-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing speedtest command\nDESCRIPTION: Demonstrates how to execute the `coder speedtest` command with a workspace name. This command runs a speed test between the local machine and the specified workspace, using default settings unless overridden by flags.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/speedtest.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder speedtest [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Configure Coder External Authentication (ENV)\nDESCRIPTION: This snippet configures Coder's external authentication to use JFrog Artifactory. It sets environment variables for the authentication ID, type, client ID, client secret, display name, icon, authentication URL, and scopes. Requires replacing `JFROG_URL` with the Artifactory base URL and setting appropriate client ID and secret.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-artifactory.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# JFrog Artifactory External Auth\nCODER_EXTERNAL_AUTH_1_ID=\"jfrog\"\nCODER_EXTERNAL_AUTH_1_TYPE=\"jfrog\"\nCODER_EXTERNAL_AUTH_1_CLIENT_ID=\"YYYYYYYYYYYYYYY\"\nCODER_EXTERNAL_AUTH_1_CLIENT_SECRET=\"XXXXXXXXXXXXXXXXXXX\"\nCODER_EXTERNAL_AUTH_1_DISPLAY_NAME=\"JFrog Artifactory\"\nCODER_EXTERNAL_AUTH_1_DISPLAY_ICON=\"/icon/jfrog.svg\"\nCODER_EXTERNAL_AUTH_1_AUTH_URL=\"https://JFROG_URL/ui/authorization\"\nCODER_EXTERNAL_AUTH_1_SCOPES=\"applied-permissions/user\"\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Members with curl\nDESCRIPTION: This snippet demonstrates how to use the curl command-line tool to retrieve a list of members from a specific organization in the Coder platform. It requires an API key passed via the Coder-Session-Token header and specifies that the response should be in JSON format. The organization ID must be provided in the URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/members \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Upserting Workspace Agent Port Share - Body Parameter\nDESCRIPTION: This JSON snippet defines the body parameter for upserting a workspace agent's port share. It includes the agent's name, port number, protocol, and share level.  These values are used to configure the port share settings. `agent_name` is a string, `port` is an integer, `protocol` is a string, and `share_level` is a string.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/portsharing.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_name\": \"string\",\n  \"port\": 0,\n  \"protocol\": \"http\",\n  \"share_level\": \"owner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get applications host using curl\nDESCRIPTION: This code snippet demonstrates how to use curl to make a GET request to the `/applications/host` endpoint.  It requires the `Coder-Session-Token` header with the API key for authentication and the `Accept: application/json` header to specify the expected response format. A successful request returns a JSON response containing the application host.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/applications.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/applications/host \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace for Another User\nDESCRIPTION: This command illustrates how to create a workspace on behalf of another user.  This operation requires the necessary permissions and uses the `<username>/<workspace_name>` format to specify the target user and workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/create.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder create <username>/<workspace_name>\n```\n\n----------------------------------------\n\nTITLE: Viewing Coder Metrics via Curl\nDESCRIPTION: This command-line instruction demonstrates how to preview the metrics endpoint exposed by the Coder server using `curl`. It fetches metrics data from the specified address, which is `http://localhost:2112/` by default, enabling administrators to inspect the current state of a Coder deployment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/prometheus.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl http://localhost:2112/\n# HELP coderd_api_active_users_duration_hour The number of users that have been active within the last hour.\n# TYPE coderd_api_active_users_duration_hour gauge\ncoderd_api_active_users_duration_hour 0\n...\n```\n\n----------------------------------------\n\nTITLE: Terraform: Declaring Required Providers without Version Constraint\nDESCRIPTION: This Terraform configuration shows how to declare required providers without specifying a version. Terraform will fetch the latest version, which may introduce breaking changes. It is recommended to include version constraints.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/dependencies.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform {\n  required_providers {\n    coder = {\n      source = \"coder/coder\"\n    }\n    frobnicate = {\n      source = \"acme/frobnicate\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activate User with Curl\nDESCRIPTION: This code snippet demonstrates how to activate a user using a curl command. It requires authentication via the 'Coder-Session-Token' header. The request uses the PUT method with the Accept header set to 'application/json'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/status/activate \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing JetBrains Gateway (Dockerfile)\nDESCRIPTION: Installs JetBrains Gateway and its dependencies within a Dockerfile.  It downloads the client downloader, extracts it, uses it to download the backend, extracts the backend, and cleans up temporary files.  It installs necessary apt packages and configures a user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/jetbrains-gateway.md#_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu\n\n# Combine all apt operations in a single RUN command\n# Install only necessary packages\n# Clean up apt cache in the same layer\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    curl \\\n    git \\\n    golang \\\n    sudo \\\n    vim \\\n    wget \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create user in a single layer\nARG USER=coder\nRUN useradd --groups sudo --no-create-home --shell /bin/bash ${USER} \\\n    && echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >/etc/sudoers.d/${USER} \\\n    && chmod 0440 /etc/sudoers.d/${USER}\n\nUSER ${USER}\nWORKDIR /home/${USER}\n\n# Install JetBrains Gateway in a single RUN command to reduce layers\n# Download, extract, use, and clean up in the same layer\nRUN mkdir -p ~/JetBrains \\\n    && wget -q https://download.jetbrains.com/idea/code-with-me/backend/jetbrains-clients-downloader-linux-x86_64-1867.tar.gz -P /tmp \\\n    && tar -xzf /tmp/jetbrains-clients-downloader-linux-x86_64-1867.tar.gz -C /tmp \\\n    && /tmp/jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader \\\n       --products-filter IU \\\n       --build-filter 243.26053.27 \\\n       --platforms-filter linux-x64 \\\n       --download-backends ~/JetBrains \\\n    && tar -xzf ~/JetBrains/backends/IU/*.tar.gz -C ~/JetBrains/backends/IU \\\n    && rm -f ~/JetBrains/backends/IU/*.tar.gz \\\n    && rm -rf /tmp/jetbrains-clients-downloader-linux-x86_64-1867* \\\n    && rm -rf /tmp/*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Coder Rename Workspace Command\nDESCRIPTION: This command allows a user to rename a Coder workspace. The required arguments are the existing workspace name and the desired new name. The `-y` or `--yes` flag can be used to bypass interactive prompts.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/rename.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder rename [flags] <workspace> <new name>\n```\n\n----------------------------------------\n\nTITLE: Set Group Sync Settings via Coder CLI\nDESCRIPTION: This command sets the group sync settings for a specified organization using the Coder CLI.  It reads the settings from a JSON file (group-sync.json) and applies them to the specified organization.  The user must be an Owner or have Organization Admin privileges.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncoder organizations settings set group-sync \\\n  --org <org-name> \\\n  < group-sync.json\n```\n\n----------------------------------------\n\nTITLE: Creating templates in Coder\nDESCRIPTION: This console command is used to create a template from the current directory or from a specified location in the Coder platform. It provides various options to configure the template, such as setting default TTLs, defining Terraform variables, and controlling access permissions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates create [flags] [name]\n```\n\n----------------------------------------\n\nTITLE: Configure Coder Agent Resource Monitoring - Terraform\nDESCRIPTION: This Terraform configuration defines a `coder_agent` resource and enables resource monitoring for memory and specific volumes. It sets thresholds for memory and volume utilization to trigger alerts. Ensure SMTP is configured for notifications. The `arch` and `os` attributes are sourced from `data.coder_provisioner.dev`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-monitoring.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n  arch = data.coder_provisioner.dev.arch\n  os   = data.coder_provisioner.dev.os\n  resources_monitoring {\n    memory {\n      enabled   = true\n      threshold = 90\n    }\n    volume {\n      path      = \"/volume1\"\n      enabled   = true\n      threshold = 80\n    }\n    volume {\n      path      = \"/volume2\"\n      enabled   = true\n      threshold = 95\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Appearance Settings with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve user appearance settings using a curl command. It sends a GET request to the `/users/{user}/appearance` endpoint, specifying the user identifier in the path. Headers include `Accept: application/json` and `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/appearance \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder with Encryption Keys (Helm)\nDESCRIPTION: This YAML snippet shows how to configure Coder with the encryption keys stored in a Kubernetes secret using Helm. The `CODER_EXTERNAL_TOKEN_ENCRYPTION_KEYS` environment variable is set to the value stored in the `keys` field of the secret. Ensure the `values.yaml` file is properly formatted.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/database-encryption.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    [...]\n    - name: CODER_EXTERNAL_TOKEN_ENCRYPTION_KEYS\n      valueFrom:\n        secretKeyRef:\n          name: coder-external-token-encryption-keys\n          key: keys\n```\n\n----------------------------------------\n\nTITLE: Reset Password via Coder CLI\nDESCRIPTION: This command resets a user's password in Coder via the command-line interface. The administrator must provide the username of the user whose password is being reset. It's recommended to run `coder reset-password <username> --help` to understand the available options.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder reset-password <username>\n```\n\n----------------------------------------\n\nTITLE: Example Group Sync Settings JSON with Explicit Mappings\nDESCRIPTION: This JSON snippet demonstrates explicit mapping of IdP groups (`coder-admins`, `coder-users`) to specific Coder group UUIDs. The `mapping` field contains key-value pairs where keys are IdP group names, and values are arrays of Coder group UUIDs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"field\": \"groups\",\n    \"mapping\": {\n        \"coder-admins\": [\n            \"2ba2a4ff-ddfb-4493-b7cd-1aec2fa4c830\",\n            \"93371154-150f-4b12-b5f0-261bb1326bb4\"\n        ],\n        \"coder-users\": [\"2f4bde93-0179-4815-ba50-b757fb3d43dd\"]\n    },\n    \"regex_filter\": null,\n    \"auto_create_missing_groups\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing OIDC Login Button via Environment Variables\nDESCRIPTION: These environment variables customize the text and icon displayed on the OpenID Connect login button.  `CODER_OIDC_SIGN_IN_TEXT` sets the button text, and `CODER_OIDC_ICON_URL` specifies the URL of the button icon.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/oidc-auth.md#_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nCODER_OIDC_SIGN_IN_TEXT=\"Sign in with Gitea\"\nCODER_OIDC_ICON_URL=https://gitea.io/images/gitea.png\n```\n\n----------------------------------------\n\nTITLE: Updating Workspace TTL - cURL Example\nDESCRIPTION: Shows how to update a workspace's Time-To-Live (TTL) using a PUT request with cURL.  It requires a JSON body specifying the new TTL in milliseconds (`ttl_ms`). Authentication is necessary via the `Coder-Session-Token` header, and the Content-Type header must be set to `application/json`. The target endpoint is `/workspaces/{workspace}/ttl`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/workspaces/{workspace}/ttl \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pushing Template Version with Coder CLI\nDESCRIPTION: This snippet outlines the steps to push a new template version to Coder using the Coder CLI. It includes installing the CLI, setting environment variables for the Coder URL, session token, template name, directory, and version, and then executing the `coder templates push` command.  The version name is derived from the git commit SHA.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/change-management.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# Install the Coder CLI\ncurl -L https://coder.com/install.sh | sh\n# curl -L https://coder.com/install.sh | sh -s -- --version=0.x\n\n# To create API tokens, use `coder tokens create`.\n# If no `--lifetime` flag is passed during creation, the default token lifetime\n# will be 30 days.\n# These variables are consumed by Coder\nexport CODER_URL=https://coder.example.com\nexport CODER_SESSION_TOKEN=*****\n\n# Template details\nexport CODER_TEMPLATE_NAME=kubernetes\nexport CODER_TEMPLATE_DIR=.coder/templates/kubernetes\nexport CODER_TEMPLATE_VERSION=$(git rev-parse --short HEAD)\n\n# Push the new template version to Coder\ncoder templates push --yes $CODER_TEMPLATE_NAME \\\n    --directory $CODER_TEMPLATE_DIR \\\n    --name=$CODER_TEMPLATE_VERSION # Version name is optional\n```\n\n----------------------------------------\n\nTITLE: Coder Templates Push Example\nDESCRIPTION: Demonstrates how to push a template to Coder. This action typically involves uploading the template definition (likely Terraform code) to the Coder server for deployment and management. Assumes the Coder CLI is configured with access to the Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder templates push my-template\n```\n\n----------------------------------------\n\nTITLE: Create OpenShift Route\nDESCRIPTION: Creates an OpenShift route to expose the Coder service. The route maps traffic to the HTTP port of the Coder service, configures TLS termination, and sets the insecure edge termination policy. Replace `https://coder-example.apps.openshiftapps.com` with the desired host.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Route\napiVersion: route.openshift.io/v1\nmetadata:\n  namespace: coder\nspec:\n  host: https://coder-example.apps.openshiftapps.com\n  to:\n    kind: Service\n    name: coder\n  tls:\n    # if set to edge, OpenShift will terminate TLS prior to the traffic reaching\n    # the service.\n    termination: edge\n    # if set to Redirect, insecure client connections are redirected to the secure\n    # port\n    insecureEdgeTerminationPolicy: Redirect\n  port:\n    targetPort: http\n```\n\n----------------------------------------\n\nTITLE: Get Templates by Organization using curl\nDESCRIPTION: This code snippet demonstrates how to retrieve templates for a specific organization using a curl command. It includes setting the HTTP method to GET, specifying the endpoint URL, setting the Accept header to application/json, and providing the Coder-Session-Token for authentication. The organization ID is passed as a path parameter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/templates \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Listing Workspace Proxies with Coder CLI\nDESCRIPTION: This snippet demonstrates how to list existing workspace proxies using the Coder CLI. It requires the Coder CLI. It displays the name, URL, and status of each registered workspace proxy, providing an overview of their current state.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ coder wsproxy ls\nNAME         URL                    STATUS STATUS\nnewyork                             unregistered\n```\n\n----------------------------------------\n\nTITLE: Upgrading Coder using Docker Compose (Shell)\nDESCRIPTION: This command pulls the latest Coder image from the registry and restarts the Coder container using docker-compose. Assumes a docker-compose.yml file exists that defines the Coder service. It requires Docker and Docker Compose to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/upgrade.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker-compose pull coder && docker-compose up -d coder\n```\n\n----------------------------------------\n\nTITLE: Disable built-in provisioners (sh)\nDESCRIPTION: This snippet shows how to disable the built-in provisioners in the Coder server. It uses the `--provisioner-daemons=0` flag when starting the Coder server. This can also be achieved with an environment variable.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncoder server --provisioner-daemons=0\n```\n\n----------------------------------------\n\nTITLE: Viewing Coder Git SSH Key\nDESCRIPTION: This command shows how to view the Coder-generated public SSH key using the Coder CLI. This key needs to be added to the Git provider account for SSH authentication to work.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncoder publickey\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Provider with Kubeconfig Context\nDESCRIPTION: This Terraform code configures the Kubernetes provider to use the selected kubeconfig context. It sets the config_path to ~/.kube/config (or /mnt/secrets/kube/config for Kubernetes) and config_context to the value of the kube_context parameter. This assumes the kubeconfig file is correctly configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"kubernetes\" {\n  config_path    = \"~/.kube/config\" # or /mnt/secrets/kube/config for Kubernetes\n  config_context = data.coder_parameter.kube_context.value\n}\n```\n\n----------------------------------------\n\nTITLE: SSH connection via Coder CLI\nDESCRIPTION: This command uses the Coder CLI to establish an SSH connection to a specified workspace.  It leverages the optimal SSH path based on the deployment's networking configuration. It requires the Coder CLI to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder ssh my-workspace\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Sync Settings\nDESCRIPTION: This command is used to configure organization synchronization settings, allowing Coder to sync organization memberships from an Identity Provider (IdP). The specific options for configuring the sync are not detailed in this snippet, but would follow the command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_set_organization-sync.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings set organization-sync\n```\n\n----------------------------------------\n\nTITLE: Suspend User via Coder CLI\nDESCRIPTION: This command suspends an existing user in Coder, revoking their access to the platform. It requires either the username or user ID as an argument. The user is prompted to confirm the action.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoder users suspend <username|user_id>\n```\n\n----------------------------------------\n\nTITLE: Setting Coder Environment Variables\nDESCRIPTION: This snippet sets the necessary environment variables for a Coder deployment, including the HTTP address, access URL, and wildcard access URL. These variables are crucial for Coder to function correctly with the configured domain and reverse proxy.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nCODER_HTTP_ADDRESS=127.0.0.1:3000\nCODER_ACCESS_URL=https://coder.example.com\nCODER_WILDCARD_ACCESS_URL=*.coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Defining Coder App for JupyterLab\nDESCRIPTION: This Terraform resource defines a Coder application for JupyterLab. It specifies the agent ID, slug, display name, URL, and icon. Subdomain is set to true. The share is set to owner. It also includes a healthcheck configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_9\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_app\" \"jupyter\" {\n  agent_id     = coder_agent.coder.id\n  slug         = \"jupyter\"\n  display_name = \"JupyterLab\"\n  url          = \"http://localhost:8888\"\n  icon         = \"/icon/jupyter.svg\"\n  share        = \"owner\"\n  subdomain    = true\n\n  healthcheck {\n    url       = \"http://localhost:8888/healthz\"\n    interval  = 5\n    threshold = 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure DevOps (via Entra ID) Environment Variables\nDESCRIPTION: This code snippet shows the environment variables needed to configure Azure DevOps authentication via Entra ID. It includes the ID, type, client ID, client secret, and authentication URL, where the authentication URL requires the Tenant ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"primary-azure-devops\"\nCODER_EXTERNAL_AUTH_0_TYPE=azure-devops-entra\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxxxxx\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxxxxxx\nCODER_EXTERNAL_AUTH_0_AUTH_URL=\"https://login.microsoftonline.com/<TENANT ID>/oauth2/authorize\"\n```\n\n----------------------------------------\n\nTITLE: Display Workspace Details with Coder CLI\nDESCRIPTION: This command is used to display the details of a specific workspace, including its resources and agents, using the Coder command-line interface. The user must specify the workspace name as an argument.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder show <workspace>\n```\n\n----------------------------------------\n\nTITLE: Create Workspace Proxy with Curl\nDESCRIPTION: This snippet demonstrates how to create a workspace proxy using a curl command. It sends a POST request to the `/api/v2/workspaceproxies` endpoint with a JSON payload and requires a valid `Coder-Session-Token` for authentication. The request also specifies `Content-Type` and `Accept` headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_123\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/workspaceproxies \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Organization IdP Sync Mapping with curl\nDESCRIPTION: This code snippet demonstrates how to update the organization IdP Sync mapping using a curl command. It sends a PATCH request to the specified endpoint with the appropriate headers, including 'Content-Type' set to 'application/json' and providing the Coder session token for authentication. The request body contains the mappings to add and remove in JSON format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_104\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/settings/idpsync/organization/mapping \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder Environment Variables in Helm Values YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure Coder's environment variables within the Helm chart's `values.yaml` file. It includes examples for setting the access URL, database connection URL (retrieved from a Kubernetes secret), Prometheus metrics endpoint, and disabling the default GitHub OAuth2 provider. The secret `coder-db-url` needs to be pre-created with the Postgres connection URL.\nSOURCE: https://github.com/coder/coder/blob/main/helm/coder/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoder:\n  # You can specify any environment variables you'd like to pass to Coder\n  # here. Coder consumes environment variables listed in\n  # `coder server --help`, and these environment variables are also passed\n  # to the workspace provisioner (so you can consume them in your Terraform\n  # templates for auth keys etc.).\n  #\n  # Please keep in mind that you should not set `CODER_HTTP_ADDRESS`,\n  # `CODER_TLS_ENABLE`, `CODER_TLS_CERT_FILE` or `CODER_TLS_KEY_FILE` as\n  # they are already set by the Helm chart and will cause conflicts.\n  env:\n    - name: CODER_ACCESS_URL\n      value: \"https://coder.example.com\"\n    - name: CODER_PG_CONNECTION_URL\n      valueFrom:\n        secretKeyRef:\n          # You'll need to create a secret called coder-db-url with your\n          # Postgres connection URL like:\n          # postgres://coder:password@postgres:5432/coder?sslmode=disable\n          name: coder-db-url\n          key: url\n\n    # This env enables the Prometheus metrics endpoint.\n    - name: CODER_PROMETHEUS_ADDRESS\n      value: \"0.0.0.0:2112\"\n    # For production deployments, we recommend configuring your own GitHub\n    # OAuth2 provider and disabling the default one.\n    - name: CODER_OAUTH2_GITHUB_DEFAULT_PROVIDER_ENABLE\n      value: \"false\"\n  tls:\n    secretNames:\n      - my-tls-secret-name\n```\n\n----------------------------------------\n\nTITLE: Checking MTU issues with Coder Ping\nDESCRIPTION: This command executes `coder ping` against a workspace to inspect the MTU settings on both the client and the workspace agent. This helps identify potential MTU issues that could degrade direct connections.  The output will indicate if any network interfaces have an MTU smaller than 1378.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/troubleshooting.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ coder ping my-workspace\n```\n\n----------------------------------------\n\nTITLE: Creating a Provisioner Key in Coder (Shell)\nDESCRIPTION: This command creates a provisioner key in Coder, assigning it to a specified organization (default in this case).  Optionally, tags can be associated with the provisioner key. The key is used for authentication when starting an external provisioner. The key will only be shown once and needs to be stored securely.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncoder provisioner keys create my-cool-key --org default\n# Optionally, you can specify tags for the provisioner key:\n# coder provisioner keys create my-cool-key --org default --tag location=auh --tag kind=k8s\n\nSuccessfully created provisioner key kubernetes-key! Save this authentication\ntoken, it will not be shown again.\n\n<key omitted>\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Data Source for Coder Parameter\nDESCRIPTION: This Terraform code defines a coder_parameter data source to allow users to select a Kubernetes cluster. It creates a parameter named kube_context with two options: US Central and Europe West. The default value is workspaces-us-central1-a. It depends on the Coder provider being configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"coder_parameter\" \"kube_context\" {\n  name         = \"kube_context\"\n  display_name = \"Cluster\"\n  default      = \"workspaces-us-central1-a\"\n  mutable      = false\n  option {\n    name  = \"US Central\"\n    icon  = \"/emojis/1f33d.png\"\n    value = \"workspaces-us-central1-a\"\n  }\n  option {\n    name  = \"Europe West\"\n    icon  = \"/emojis/1f482.png\"\n    value = \"workspaces-europe-west2-c\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform: Declaring Required Providers with Version Constraint\nDESCRIPTION: This Terraform configuration demonstrates how to declare required providers with version constraints. This limits the versions that Terraform can use and helps to prevent breaking changes when new provider versions are released.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/dependencies.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform {\n  required_providers {\n    coder = {\n      source = \"coder/coder\"\n      version = \">= 0.2, < 0.3\"\n    }\n    frobnicate = {\n      source = \"acme/frobnicate\"\n      version = \"~> 1.0.0\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Start Workspace Usage\nDESCRIPTION: Shows the basic usage of the `coder start` command from the command line, including the required argument of the workspace name and the optional flags that can be passed. The workspace name is mandatory and it must be provided when executing the command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/start.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder start [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Updating a Group via API with Curl\nDESCRIPTION: This snippet demonstrates how to update a group using the Coder API v2 with a PATCH request. It employs curl to send the request to the `/groups/{group}` endpoint, requiring the group name as a path parameter, a JSON body with the updated group data, and a valid `Coder-Session-Token` for authentication.  The `Content-Type` header must be set to `application/json`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/groups/{group} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configure Terraform Providers (Coder, Docker)\nDESCRIPTION: Configures the Terraform providers for Coder and Docker. This allows Terraform to interact with the Coder and Docker APIs to provision resources.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_2\n\nLANGUAGE: tf\nCODE:\n```\nterraform {\n  required_providers {\n    coder = {\n      source  = \"coder/coder\"\n    }\n    docker = {\n      source  = \"kreuzwerker/docker\"\n    }\n  }\n}\n\nlocals {\n  username = data.coder_workspace_owner.me.name\n}\n\ndata \"coder_provisioner\" \"me\" {\n}\n\nprovider \"docker\" {\n}\n\nprovider \"coder\" {\n}\n\ndata \"coder_workspace\" \"me\" {\n}\n\ndata \"coder_workspace_owner\" \"me\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Convert User Login to OAuth - JSON Response\nDESCRIPTION: This JSON response from the `/users/{user}/convert-login` endpoint contains details about the OAuth conversion process, including the expiration time, state string, and user ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expires_at\": \"2019-08-24T14:15:22Z\",\n  \"state_string\": \"string\",\n  \"to_type\": \"\",\n  \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Persistence with coder_workspace and count\nDESCRIPTION: This snippet demonstrates how to disable persistence for a resource by using the `coder_workspace` data source to determine the `start_count` and assigning it to the `count` meta-argument of a `docker_container` resource.  When the workspace is stopped, `start_count` will be 0, so the container will be destroyed. When started it will be 1, and the container will be created.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-persistence.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_workspace\" \"me\" {\n}\n\nresource \"docker_container\" \"workspace\" {\n  # When `start_count` is 0, `count` is 0, so no `docker_container` is created.\n  count = data.coder_workspace.me.start_count # 0 (stopped), 1 (started)\n  # ... other config\n}\n```\n\n----------------------------------------\n\nTITLE: Create Template Version - cURL\nDESCRIPTION: This cURL command shows how to create a new template version in the Coder platform.  It sends a POST request to the `/organizations/{organization}/templateversions` endpoint, with the request body (defined in the JSON example above) as the input.  The `Content-Type` header is set to `application/json`, and a valid `Coder-Session-Token` is required for authorization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/organizations/{organization}/templateversions \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Workspace via SSH\nDESCRIPTION: This command uses SSH to connect to a Coder workspace agent.  It assumes that an SSH server is running in the workspace and that `your-workspace.coder` is resolvable. Replace `your-workspace.coder` with the actual hostname of your workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/desktop/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nssh your-workspace.coder\n```\n\n----------------------------------------\n\nTITLE: Example Create Token API Key Response\nDESCRIPTION: This JSON response is returned after successfully creating a token API key.  It contains a single `key` field, which provides the newly generated API key as a string. This value should be stored securely for authenticating future API calls.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth via Helm Values\nDESCRIPTION: This YAML snippet demonstrates how to configure GitHub OAuth using environment variables within a Helm `values.yaml` file. It shows setting the `ALLOW_SIGNUPS`, `CLIENT_ID`, `CLIENT_SECRET`, and `ALLOWED_ORGS` variables.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    - name: CODER_OAUTH2_GITHUB_ALLOW_SIGNUPS\n      value: \"true\"\n    - name: CODER_OAUTH2_GITHUB_CLIENT_ID\n      value: \"533...des\"\n    - name: CODER_OAUTH2_GITHUB_CLIENT_SECRET\n      value: \"G0CSP...7qSM\"\n    # If setting allowed orgs, comment out CODER_OAUTH2_GITHUB_ALLOW_EVERYONE and its value\n    - name: CODER_OAUTH2_GITHUB_ALLOWED_ORGS\n      value: \"your-org\"\n    # If allowing everyone, comment out CODER_OAUTH2_GITHUB_ALLOWED_ORGS and it's value\n    #- name: CODER_OAUTH2_GITHUB_ALLOW_EVERYONE\n    #  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Open PTY - Curl Request\nDESCRIPTION: This `curl` command is used to establish a PTY (pseudo-terminal) connection to a workspace agent. The `workspaceagent` ID must be provided as part of the URL path. The `Coder-Session-Token` header handles the authentication process.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent}/pty \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Adding License to Coder Deployment\nDESCRIPTION: Demonstrates the command-line usage for adding a license to a Coder deployment. It includes options for specifying the license string directly or loading it from a file. The `--debug` flag allows for outputting license claims for debugging purposes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/licenses_add.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder licenses add [flags] [-f file | -l license]\n```\n\n----------------------------------------\n\nTITLE: Get Authentication Methods using curl\nDESCRIPTION: This snippet shows how to retrieve available authentication methods using the curl command-line tool. It sends an HTTP GET request to the `/api/v2/users/authmethods` endpoint, including the `Accept: application/json` header and a `Coder-Session-Token` for authentication. The response provides information about enabled authentication methods, such as GitHub, OIDC, and password-based authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/authmethods \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Expose Resource Metadata (PVC, Deployment) in Kubernetes\nDESCRIPTION: This Terraform configuration exposes the disk size, deployment name, and persistent directory of Kubernetes resources (persistent volume claim and deployment) in a Coder workspace. It utilizes the `coder_metadata` resource and `kubernetes_persistent_volume_claim` and `kubernetes_deployment` resources. The `count` attribute ensures the deployment is created only when the workspace is started.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-metadata.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"kubernetes_persistent_volume_claim\" \"root\" {\n    ...\n}\n\nresource \"kubernetes_deployment\" \"coder\" {\n  # My deployment is ephemeral\n  count = data.coder_workspace.me.start_count\n  ...\n}\n\nresource \"coder_metadata\" \"pvc\" {\n  resource_id = kubernetes_persistent_volume_claim.root.id\n  item {\n    key = \"size\"\n    value = kubernetes_persistent_volume_claim.root.spec[0].resources[0].requests.storage\n  }\n  item {\n    key = \"dir\"\n    value = \"/home/coder\"\n  }\n}\n\nresource \"coder_metadata\" \"deployment\" {\n  count = data.coder_workspace.me.start_count\n  resource_id = kubernetes_deployment.coder[0].id\n  item {\n    key = \"name\"\n    value = kubernetes_deployment.coder[0].metadata[0].name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub using Coder CLI\nDESCRIPTION: This shell script demonstrates how to authenticate with GitHub using the coder external-auth access-token command. It captures the output of the command and checks the exit code to determine if authentication was successful. If successful, it prints \"Authenticated with GitHub\"; otherwise, it prints instructions and the authentication URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/external-auth_access-token.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n#!/usr/bin/env sh\n\nOUTPUT=$(coder external-auth access-token github)\nif [ $? -eq 0 ]; then\n  echo \"Authenticated with GitHub\"\nelse\n  echo \"Please authenticate with GitHub:\"\n  echo $OUTPUT\nfi\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Create Token Command Usage\nDESCRIPTION: Shows how to use the `coder tokens create` command in the console. This command is used to generate a new token. There are no dependencies besides having the Coder CLI installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/tokens_create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder tokens create [flags]\n```\n\n----------------------------------------\n\nTITLE: Get Member Roles with curl\nDESCRIPTION: This snippet demonstrates a curl command used to retrieve member roles within a specified organization. The command sends a GET request to the appropriate API endpoint, including the organization ID in the path and providing the Coder-Session-Token for authentication. The 'Accept' header specifies that the response should be in JSON format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/members/roles \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration for Artifactory\nDESCRIPTION: This Terraform configuration snippet defines the provider installation settings for using Artifactory as a Terraform module registry.  It configures direct exclusion for the public Terraform registry and specifies the Artifactory URL to resolve modules.  This `.terraformrc` file should be placed in the provisioner's home directory.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_2\n\nLANGUAGE: tf\nCODE:\n```\nprovider_installation {\n  direct {\n      exclude = [\"registry.terraform.io/*/*\"]\n  }\n  network_mirror {\n      url = \"https://example.jfrog.io/artifactory/api/terraform/tf/providers/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Tokens with curl\nDESCRIPTION: This snippet shows how to retrieve user tokens using `curl`.  It sends a GET request to the `/users/{user}/keys/tokens` endpoint, including the `Accept` header for specifying the response type and the `Coder-Session-Token` for authentication. The `{user}` path parameter represents the user whose tokens are being requested.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/keys/tokens \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Define Workspace Preset with Terraform\nDESCRIPTION: This Terraform code defines a workspace preset named \"GoLand with GPU\". It sets default values for parameters like machine_type, attach_gpu, gcp_region, and jetbrains_ide. This allows developers to easily create a workspace with pre-configured settings. Requires Terraform Coder provider.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_11\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_workspace_preset\" \"goland-gpu\" {\n  name        = \"GoLand with GPU\"\n  parameters = {\n    \"machine_type\"  = \"n1-standard-1\"\n    \"attach_gpu\"    = \"true\"\n    \"gcp_region\"    = \"europe-west4-c\"\n    \"jetbrains_ide\" = \"GO\"\n  }\n}\n\ndata \"coder_parameter\" \"machine_type\" {\n  name          = \"machine_type\"\n  display_name  = \"Machine Type\"\n  type          = \"string\"\n  default       = \"n1-standard-2\"\n}\n\ndata \"coder_parameter\" \"attach_gpu\" {\n  name          = \"attach_gpu\"\n  display_name  = \"Attach GPU?\"\n  type          = \"bool\"\n  default       = \"false\"\n}\n\ndata \"coder_parameter\" \"gcp_region\" {\n  name          = \"gcp_region\"\n  display_name  = \"Machine Type\"\n  type          = \"string\"\n  default       = \"n1-standard-2\"\n}\n\ndata \"coder_parameter\" \"jetbrains_ide\" {\n  name          = \"jetbrains_ide\"\n  display_name  = \"Machine Type\"\n  type          = \"string\"\n  default       = \"n1-standard-2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Get Authentication Methods Response\nDESCRIPTION: This is an example JSON response returned when requesting authentication methods. It shows the status of various methods like GitHub (enabled and configured), OIDC (enabled with icon and sign-in text), and password (enabled). It also includes a `terms_of_service_url`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"github\": {\n    \"default_provider_configured\": true,\n    \"enabled\": true\n  },\n  \"oidc\": {\n    \"enabled\": true,\n    \"iconUrl\": \"string\",\n    \"signInText\": \"string\"\n  },\n  \"password\": {\n    \"enabled\": true\n  },\n  \"terms_of_service_url\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret for PostgreSQL URL\nDESCRIPTION: This command creates a Kubernetes secret named `coder-db-url` in the `coder` namespace, storing the PostgreSQL database connection URL. The URL includes the username, password, host, port, database name, and SSL mode. This secret is used by Coder to connect to the database.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl create secret generic coder-db-url -n coder \\\n  --from-literal=url=\"postgres://coder:coder@coder-db-postgresql.coder.svc.cluster.local:5432/coder?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Resources for ServiceAccount Authentication\nDESCRIPTION: This command applies a YAML manifest to create a ServiceAccount, Secret, Role, and RoleBinding in the coder-workspaces namespace. It grants the ServiceAccount necessary permissions to manage resources in the cluster. It requires kubectl.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -n coder-workspaces -f - <<EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: coder-v2\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: coder-v2\n  annotations:\n    kubernetes.io/service-account.name: coder-v2\ntype: kubernetes.io/service-account-token\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: coder-v2\nrules:\n  - apiGroups: [\"\", \"apps\", \"networking.k8s.io\"]\n    resources: [\"persistentvolumeclaims\", \"pods\", \"deployments\", \"services\", \"secrets\", \"pods/exec\",\"pods/log\", \"events\", \"networkpolicies\", \"serviceaccounts\"]\n    verbs: [\"create\", \"get\", \"list\", \"watch\", \"update\", \"patch\", \"delete\", \"deletecollection\"]\n  - apiGroups: [\"metrics.k8s.io\", \"storage.k8s.io\"]\n    resources: [\"pods\", \"storageclasses\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: coder-v2\nsubjects:\n  - kind: ServiceAccount\n    name: coder-v2\nroleRef:\n  kind: Role\n  name: coder-v2\n  apiGroup: rbac.authorization.k8s.io\nEOF\n```\n\n----------------------------------------\n\nTITLE: Starting a User-Scoped Provisioner and Pushing a Template (Shell)\nDESCRIPTION: These commands demonstrate starting a user-scoped Coder provisioner and pushing a template that requires this provisioner.  The first command starts the provisioner with the `scope=user` tag. The second command pushes a template 'on-prem' which requires a provisioner with tag `scope=user`.  User-scoped provisioners can only pick up build jobs created from templates with `scope=user`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncoder provisioner start \\\n  --tag scope=user\n\n# In another terminal, create/push\n# a template that requires user provisioners\ncoder templates push on-prem \\\n  --provisioner-tag scope=user\n```\n\n----------------------------------------\n\nTITLE: Extending Workspace Deadline via PUT Request\nDESCRIPTION: This shell snippet demonstrates how to extend a workspace's deadline using a PUT request to the Coder API. It uses `curl` to send the request with necessary headers like `Content-Type`, `Accept`, and `Coder-Session-Token` for authentication. The request targets the `/workspaces/{workspace}/extend` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X PUT http://coder-server:8080/api/v2/workspaces/{workspace}/extend \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n\n```\n\n----------------------------------------\n\nTITLE: Initializing template with Coder CLI\nDESCRIPTION: This command initializes a template using the Coder CLI. It uses the `template init` command with the `--id` flag to specify the template to initialize. A list of available templates is shown in the templates_init reference.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/devcontainers/add-devcontainer.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder template init --id kubernetes-devcontainer\n```\n\n----------------------------------------\n\nTITLE: Installing code-server in Dockerfile\nDESCRIPTION: This Dockerfile installs code-server using the install script. It also pre-installs the gitlens extension. It extends the codercom/enterprise-base:ubuntu base image, which provides a pre-configured environment for Coder workspaces.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM codercom/enterprise-base:ubuntu\n\n# install the latest version\nUSER root\nRUN curl -fsSL https://code-server.dev/install.sh | sh\nUSER coder\n\n# pre-install VS Code extensions\nRUN code-server --install-extension eamodio.gitlens\n\n# directly start code-server with the agent's startup_script (see above),\n# or use a process manager like supervisord\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Organization Usage\nDESCRIPTION: This code snippet shows the general usage of the `coder organizations` command in the command line.  It illustrates how to invoke the command with optional flags and subcommands. It is the entry point for performing organization-related operations using the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations [flags] [subcommand]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Pod with Sysbox RuntimeClass in Terraform\nDESCRIPTION: This Terraform snippet configures a Kubernetes Pod resource to use the Sysbox runtime via the RuntimeClass within a Coder workspace. It sets the runtime_class_name to \"sysbox-runc\", specifies security context (run_as_user and fs_group), container name, image, environment variables (including the Coder agent token), and the command to execute. It also includes annotations for cri-o. Requires the coder and kubernetes providers to be configured. Version 2.16.0 or greater of the Kubernetes provider is needed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform {\n  required_providers {\n    coder = {\n      source  = \"coder/coder\"\n    }\n    kubernetes = {\n      source = \"hashicorp/kubernetes\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nvariable \"workspaces_namespace\" {\n  default = \"coder-namespace\"\n}\n\ndata \"coder_workspace\" \"me\" {}\n\nresource \"coder_agent\" \"main\" {\n  os   = \"linux\"\n  arch = \"amd64\"\n  dir  = \"/home/coder\"\n  startup_script = <<EOF\n    #!/bin/sh\n\n    # Start Docker\n    sudo dockerd &\n\n    # ...\n  EOF\n}\n\nresource \"kubernetes_pod\" \"dev\" {\n  count = data.coder_workspace.me.start_count\n  metadata {\n    name      = \"coder-${data.coder_workspace.me.owner}-${data.coder_workspace.me.name}\"\n    namespace = var.workspaces_namespace\n    annotations = {\n      \"io.kubernetes.cri-o.userns-mode\" = \"auto:size=65536\"\n    }\n  }\n\n  spec {\n  runtime_class_name = \"sysbox-runc\"\n  # Use the Sysbox container runtime (required)\n    security_context {\n      run_as_user = 1000\n      fs_group    = 1000\n    }\n    container {\n      name = \"dev\"\n      env {\n        name  = \"CODER_AGENT_TOKEN\"\n        value = coder_agent.main.token\n      }\n      image = \"codercom/enterprise-base:ubuntu\"\n      command = [\"sh\", \"-c\", coder_agent.main.init_script]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Workspace Request Body Schema - JSON\nDESCRIPTION: This JSON snippet defines the schema for the request body when creating a new workspace via the Coder API. It includes parameters such as automatic updates, autostart schedule, enable dynamic parameters, workspace name, rich parameter values, template ID or version ID and TTL. Only either template_id or template_version_id must be set.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"automatic_updates\": \"always\",\n  \"autostart_schedule\": \"string\",\n  \"enable_dynamic_parameters\": true,\n  \"name\": \"string\",\n  \"rich_parameter_values\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n  \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n  \"ttl_ms\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Push Coder template to Coder instance\nDESCRIPTION: This shell snippet pushes a template to the Coder platform using the Coder CLI. It assumes you have logged in to the Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncoder templates push\n```\n\n----------------------------------------\n\nTITLE: Assign Role to User with Curl\nDESCRIPTION: This code snippet demonstrates how to assign a role to a user using a curl command. It requires authentication via the 'Coder-Session-Token' header. The request uses the PUT method with the Content-Type and Accept headers set to 'application/json'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/roles \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Syncing Okta Groups with Coder via Environment Variables\nDESCRIPTION: This snippet demonstrates how to configure Coder to sync groups from Okta using environment variables. It sets the `CODER_OIDC_SCOPES` to include the `groups` scope and `CODER_OIDC_GROUP_FIELD` to match the \"Claim name\" configured in Okta.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/configuring-okta.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add the 'groups' scope.\nCODER_OIDC_SCOPES=openid,profile,email,groups\n# This name needs to match the \"Claim name\" in the configuration above.\nCODER_OIDC_GROUP_FIELD=groups\n```\n\n----------------------------------------\n\nTITLE: Adding a Volume Mount to Docker Compose\nDESCRIPTION: This Docker Compose snippet demonstrates how to mount a local directory (`./plugins`) into the container at `/opt/terraform/plugins`. This enables the use of a filesystem mirror for Terraform providers within the Coder container. It also shows how to set environment variables to disable telemetry, force SSH traffic through a DERP proxy, disable automatic update checks and configure external PostgreSQL database.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/offline.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# compose.yaml\nservices:\n  coder:\n    image: registry.example.com/coder:latest\n    volumes:\n      - ./plugins:/opt/terraform/plugins\n    # ...\n  environment:\n    CODER_TELEMETRY_ENABLE: \"false\" # Disable telemetry\n    CODER_BLOCK_DIRECT: \"true\" # force SSH traffic through control plane's DERP proxy\n    CODER_DERP_SERVER_STUN_ADDRESSES: \"disable\" # Only use relayed connections\n    CODER_UPDATE_CHECK: \"false\" # Disable automatic update checks\n  database:\n    image: registry.example.com/postgres:17\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Installing Stable Release with Install Script - Shell\nDESCRIPTION: This snippet shows how to install the latest stable release of Coder using the `install.sh` script. It downloads the script from coder.com, and executes it with the `--stable` flag, triggering the installation of the stable version.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/releases/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://coder.com/install.sh | sh -s -- --stable\n```\n\n----------------------------------------\n\nTITLE: Enabling Apache modules\nDESCRIPTION: This code snippet enables required Apache modules such as `proxy`, `proxy_http`, `ssl`, and `rewrite`. These modules are necessary for reverse proxy functionality, HTTPS support, and URL rewriting for Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo a2enmod proxy\nsudo a2enmod proxy_http\nsudo a2enmod ssl\nsudo a2enmod rewrite\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Early Access Features via Coder CLI\nDESCRIPTION: This snippet shows how to enable multiple specific early access features using the Coder CLI.  The `--experiments` flag is used with a comma-separated list of feature names (e.g., `feature1,feature2`). This allows for targeted testing of particular experimental functionalities.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/releases/feature-stages.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoder server --experiments=feature1,feature2\n```\n\n----------------------------------------\n\nTITLE: Deploying File Browser with coder_agent in Terraform\nDESCRIPTION: This Terraform configuration defines a coder_agent resource to install and run File Browser. The startup script downloads and executes File Browser, configuring it to serve the /home/coder directory on port 13339 without authentication. It also defines a coder_app resource to expose File Browser within the Coder IDE.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_17\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_agent\" \"coder\" {\n  os   = \"linux\"\n  arch = \"amd64\"\n  dir  = \"/home/coder\"\n  startup_script = <<EOT\n#!/bin/bash\n\ncurl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash\nfilebrowser --noauth --root /home/coder --port 13339 >/tmp/filebrowser.log 2>&1 &\n\nEOT\n}\n\nresource \"coder_app\" \"filebrowser\" {\n  agent_id     = coder_agent.coder.id\n  display_name = \"file browser\"\n  slug         = \"filebrowser\"\n  url          = \"http://localhost:13339\"\n  icon         = \"https://raw.githubusercontent.com/matifali/logos/main/database.svg\"\n  subdomain    = true\n  share        = \"owner\"\n\n  healthcheck {\n    url       = \"http://localhost:13339/healthz\"\n    interval  = 3\n    threshold = 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a GET Request with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve template metadata by ID using a GET request with curl. It includes the required headers for accepting JSON responses and providing the Coder Session Token for authentication. The template ID is passed as a path parameter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates/{template} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Workspace TTL Body Parameter\nDESCRIPTION: Defines the structure of the request body for updating a workspace's TTL. It contains a single field, `ttl_ms`, which represents the new TTL value in milliseconds. This value determines how long the workspace will remain active before being automatically terminated.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ttl_ms\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Run Coder with external database (Docker)\nDESCRIPTION: This script runs a Coder instance using an external PostgreSQL database. It sets the CODER_ACCESS_URL and CODER_PG_CONNECTION_URL environment variables.  Requires Docker to be installed, a PostgreSQL database, and the user to be part of the docker group.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/docker.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DOCKER_GROUP=$(getent group docker | cut -d: -f3)\ndocker run --rm -it \\\n  -e CODER_ACCESS_URL=\"https://coder.example.com\" \\\n  -e CODER_PG_CONNECTION_URL=\"postgresql://username:password@database/coder\" \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $DOCKER_GROUP \\\n  ghcr.io/coder/coder:latest\n```\n\n----------------------------------------\n\nTITLE: Creating a Workspace via CLI - Shell\nDESCRIPTION: This command creates a new workspace from a specified template, allowing for the specification of variables. It's executed from the command line using the Coder CLI.  The user needs to have the Coder CLI installed and configured. The <templateName> and <workspaceName> must be replaced with actual values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-management.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# create a workspace from the template; specify any variables\ncoder create --template=\"<templateName>\" <workspaceName>\n\n# show the resources behind the workspace and how to connect\ncoder show <workspace-name>\n```\n\n----------------------------------------\n\nTITLE: Creating a Coder Organization\nDESCRIPTION: This command creates a new organization within the Coder platform. It requires the organization name as an argument. The `--yes` or `-y` flag can be used to bypass interactive prompts during the creation process.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations create [flags] <organization name>\n```\n\n----------------------------------------\n\nTITLE: Creating a headless user with Coder CLI\nDESCRIPTION: This shell script creates a headless user with the username 'machine-user' and then generates a token for that user with a lifetime of 8760 hours. The token should be stored securely in your CI environment as `CODER_SESSION_TOKEN`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/testing-templates.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncoder users create \\\n  --username machine-user \\\n  --email machine-user@example.com \\\n  --login-type none\n\ncoder tokens create --user machine-user --lifetime 8760h\n# Copy the token and store it in a secret in your CI environment with the name `CODER_SESSION_TOKEN`\n```\n\n----------------------------------------\n\nTITLE: Creating Workspace Build with Curl\nDESCRIPTION: This example demonstrates how to create a workspace build using a curl command. It sends a POST request to the specified endpoint with the necessary headers, including the Content-Type, Accept, and Coder-Session-Token. The workspace ID must be passed in the URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/workspaces/{workspace}/builds \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Initialize Terraform\nDESCRIPTION: This command initializes Terraform within the template directory, generating a `.terraform.lock.hcl` file. This lock file instructs Coder provisioners to cache specific provider versions, which can improve build times.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/speed-up-templates.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\n```\n\n----------------------------------------\n\nTITLE: Get Template Version with Curl - Shell\nDESCRIPTION: This curl command retrieves a specific version of a template, given the organization ID, template name, and template version name. The request is sent to the `/organizations/{organization}/templates/{templatename}/versions/{templateversionname}` endpoint, including the required headers for accepting JSON and authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/templates/{templatename}/versions/{templateversionname} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace Builds with curl\nDESCRIPTION: This shell script provides an example of using curl to retrieve workspace builds associated with a specific workspace ID from the Coder API. The script sends a GET request to the API endpoint, including headers to accept JSON and provide authentication via the Coder-Session-Token. The {workspace} parameter must be substituted with the correct workspace UUID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaces/{workspace}/builds \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating a User using curl\nDESCRIPTION: This snippet demonstrates how to create a new user using the curl command-line tool. It sends an HTTP POST request to the `/api/v2/users` endpoint with a JSON payload in the request body. The `Content-Type` header is set to `application/json`, and a `Coder-Session-Token` is included for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Ordering Coder Agent Metadata\nDESCRIPTION: This snippet demonstrates how to order operational metrics displayed in the UI for a Coder agent using the `order` property within the `metadata` block. If the `order` property is not specified, the metrics are sorted by `key`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-ordering.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n  ...\n\n  metadata {\n    display_name = \"CPU Usage\"\n    key          = \"cpu_usage\"\n    script       = \"coder stat cpu\"\n    interval     = 10\n    timeout      = 1\n    order        = 1\n  }\n  metadata {\n    display_name = \"CPU Usage (Host)\"\n    key          = \"cpu_usage_host\"\n    script       = \"coder stat cpu --host\"\n    interval     = 10\n    timeout      = 1\n    order        = 2\n  }\n  metadata {\n    display_name = \"RAM Usage\"\n    key          = \"ram_usage\"\n    script       = \"coder stat mem\"\n    interval     = 10\n    timeout      = 1\n    order        = 1\n  }\n  metadata {\n    display_name = \"RAM Usage (Host)\"\n    key          = \"ram_usage_host\"\n    script       = \"coder stat mem --host\"\n    interval     = 10\n    timeout      = 1\n    order        = 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd in Docker with Sysbox using Terraform\nDESCRIPTION: This Terraform configuration sets up a Coder workspace with Systemd inside a Docker container using Sysbox. It configures a Kubernetes Pod to use the `sysbox-runc` RuntimeClass, runs the container as root, and starts the Coder agent after Systemd has initialized. It requires the coder and kubernetes terraform providers, and version 2.16.0 or greater for kubernetes provider.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_9\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    coder = {\n      source  = \"coder/coder\"\n    }\n    kubernetes = {\n      source = \"hashicorp/kubernetes\"\n      version = \"2.16.0\"\n    }\n  }\n}\n\nvariable \"workspaces_namespace\" {\n  default = \"coder-namespace\"\n}\n\ndata \"coder_workspace\" \"me\" {}\n\nresource \"coder_agent\" \"main\" {\n  os   = \"linux\"\n  arch = \"amd64\"\n  dir  = \"/home/coder\"\n}\n\nresource \"kubernetes_pod\" \"dev\" {\n  count = data.coder_workspace.me.start_count\n  metadata {\n    name      = \"coder-${data.coder_workspace.me.owner}-${data.coder_workspace.me.name}\"\n    namespace = var.workspaces_namespace\n    annotations = {\n      \"io.kubernetes.cri-o.userns-mode\" = \"auto:size=65536\"\n    }\n  }\n\n  spec {\n\n    # Use Sysbox container runtime (required)\n    runtime_class_name = \"sysbox-runc\"\n\n    # Run as root in order to start systemd (required)\n    security_context {\n      run_as_user = 0\n      fs_group    = 0\n    }\n\n    container {\n      name = \"dev\"\n      env {\n        name  = \"CODER_AGENT_TOKEN\"\n        value = coder_agent.main.token\n      }\n      image = \"codercom/enterprise-base:ubuntu\"\n      command = [\"sh\", \"-c\", <<EOF\n    # Start the Coder agent as the \"coder\" user\n    # once systemd has started up\n    sudo -u coder --preserve-env=CODER_AGENT_TOKEN /bin/bash -- <<-'    EOT' &\n    while [[ ! $(systemctl is-system-running) =~ ^(running|degraded) ]]\n    do\n      echo \"Waiting for system to start... $(systemctl is-system-running)\"\n      sleep 2\n    done\n    ${coder_agent.main.init_script}\n    EOT\n\n    exec /sbin/init\n    EOF\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect URI with encrypted API Key using curl\nDESCRIPTION: This code snippet demonstrates how to use curl to make a GET request to the `/applications/auth-redirect` endpoint. It requires the `Coder-Session-Token` header with the API key for authentication.  The `redirect_uri` parameter can be passed as a query parameter to specify the redirect destination. A successful request results in a 307 Temporary Redirect.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/applications.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/applications/auth-redirect \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Insert Custom Organization Role using curl\nDESCRIPTION: This code snippet demonstrates how to insert a custom organization role using a curl request.  It includes the necessary headers for content type, accepted response type, and the Coder session token. It sends a POST request to the specified API endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/organizations/{organization}/members/roles \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Bash script to install and run File Browser\nDESCRIPTION: This bash script is used within the coder_agent's startup_script. It downloads File Browser using curl, configures it to run without authentication on port 13339 and serves content from /home/coder. Logs are redirected to /tmp/filebrowser.log.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\ncurl -fsSL https://raw.githubusercontent.com/filebrowser/get/master/get.sh | bash\nfilebrowser --noauth --root /home/coder --port 13339 >/tmp/filebrowser.log 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Installing JetBrains Gateway Backend (Shell)\nDESCRIPTION: Downloads and extracts the JetBrains Gateway backend for a specified product and build number. It requires the JetBrains Client Downloader to be installed. The product code, build number, and platforms filter are specified as arguments.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/jetbrains-gateway.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/JetBrains\n./jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader --products-filter <product-code> --build-filter <build-number> --platforms-filter linux-x64 --download-backends ~/JetBrains\n```\n\n----------------------------------------\n\nTITLE: Get workspace build by user/workspace/build number using curl\nDESCRIPTION: This code snippet demonstrates how to retrieve a workspace build using curl. It requires specifying the user, workspace name, and build number in the URL, along with the Coder-Session-Token in the header for authentication.  The expected response is a JSON object containing the build details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/workspace/{workspacename}/builds/{buildnumber} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Apply OpenShift Route\nDESCRIPTION: Applies the OpenShift route configuration from the `route.yaml` file.  This command creates the route within the OpenShift cluster, making Coder accessible via the configured hostname.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\noc apply -f route.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Certbot Renewal Command\nDESCRIPTION: This snippet adds the command to renew the certificates automatically using Certbot.  The `-q` flag suppresses output.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nsudo certbot renew -q\n```\n\n----------------------------------------\n\nTITLE: Updating a Workspace with Coder CLI\nDESCRIPTION: This snippet demonstrates the basic usage of the `coder update` command in the command-line interface. It is used to update and start a specific workspace. The workspace name is passed as an argument to the command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/update.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder update [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Configure Artifactory Helm Chart for Coder Integration (YAML)\nDESCRIPTION: This snippet configures the JFrog Artifactory Helm chart to enable integration with Coder using OAuth. It sets up the necessary environment variables and integration templates to allow Coder to authenticate with Artifactory. It requires updating the `CODER_URL` with the correct Coder instance URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-artifactory.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nartifactory:\n  enabled: true\n  frontend:\n    extraEnvironmentVariables:\n      - name: JF_FRONTEND_FEATURETOGGLER_ACCESSINTEGRATION\n        value: \"true\"\n  access:\n    accessConfig:\n      integrations-enabled: true\n      integration-templates:\n        - id: \"1\"\n          name: \"CODER\"\n          redirect-uri: \"https://CODER_URL/external-auth/jfrog/callback\"\n          scope: \"applied-permissions/user\"\n```\n\n----------------------------------------\n\nTITLE: Starting a provisioner with explicit tags\nDESCRIPTION: Starts a provisioner with explicit tags using the `--tag` flag. This allows the provisioner to pick up build jobs from templates with matching tags.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Start a provisioner with the explicit tags\n# environment=on_prem and datacenter=chicago\ncoder provisioner start \\\n  --tag environment=on_prem \\\n  --tag datacenter=chicago\n```\n\n----------------------------------------\n\nTITLE: Update Organization IdP Sync Settings with curl\nDESCRIPTION: This code snippet demonstrates how to update the organization IdP Sync settings using a curl command. It sends a PATCH request to the specified endpoint with the appropriate headers, including 'Content-Type' set to 'application/json' and providing the Coder session token for authentication.  The request body should contain the new settings in JSON format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_98\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/settings/idpsync/organization \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Roles via CLI\nDESCRIPTION: This command creates a new custom role within a Coder organization. It accepts a role name as an argument and supports various flags for bypassing prompts, dry-run testing, and reading role definitions from stdin using a JSON file. This feature allows administrators to define granular access control policies for organization members.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_roles_create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations roles create [flags] <role_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Classic Load Balancer with sessionAffinity: None - YAML\nDESCRIPTION: This YAML snippet configures the Coder service to use a Classic Load Balancer on AWS EKS. Setting `sessionAffinity` to `None` prevents the load balancer external IP from getting stuck in a pending state. This is a workaround for an AWS Classic Load Balancer issue.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  service:\n    type: LoadBalancer\n    sessionAffinity: None\n```\n\n----------------------------------------\n\nTITLE: Setting Coder environment variables\nDESCRIPTION: This code snippet sets the environment variables required for Coder, including the HTTP address, access URL, and wildcard access URL. These variables configure how Coder is accessed and determine the domain used for the Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nCODER_HTTP_ADDRESS=127.0.0.1:3000\nCODER_ACCESS_URL=https://coder.example.com\nCODER_WILDCARD_ACCESS_URL=*coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Reset Password Usage\nDESCRIPTION: This code snippet demonstrates the usage of the `coder reset-password` command. The `<username>` argument specifies the user whose password should be reset, and `[flags]` represent optional parameters for configuring the database connection, such as `--postgres-url` and `--postgres-connection-auth`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/reset-password.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder reset-password [flags] <username>\n```\n\n----------------------------------------\n\nTITLE: Run Coder with built-in database (Docker)\nDESCRIPTION: This script runs a Coder instance using a built-in database, suitable for proof-of-concept deployments. It sets the CODER_DATA environment variable to a local directory and mounts the Docker socket. Requires Docker to be installed and the user to be part of the docker group.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/docker.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport CODER_DATA=$HOME/.config/coderv2-docker\nexport DOCKER_GROUP=$(getent group docker | cut -d: -f3)\nmkdir -p $CODER_DATA\ndocker run --rm -it \\\n  -v $CODER_DATA:/home/coder/.config \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $DOCKER_GROUP \\\n  ghcr.io/coder/coder:latest\n```\n\n----------------------------------------\n\nTITLE: Modifying Helm Values to Mount Kubeconfig Secret\nDESCRIPTION: This YAML snippet modifies the Helm values to mount the kubeconfig secret into the Coder pod. It creates a volume and a volume mount to make the kubeconfig available at /mnt/secrets/kube. This assumes a Helm deployment of Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  # ...\n  volumes:\n    - name: \"kubeconfig-mount\"\n      secret:\n        secretName: \"kubeconfig-secret\"\n  volumeMounts:\n    - name: \"kubeconfig-mount\"\n      mountPath: \"/mnt/secrets/kube\"\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Upgrading Coder with Helm\nDESCRIPTION: This command upgrades an existing Coder deployment using Helm. It updates the Helm repositories, then runs the upgrade command with the chart name, namespace, and values file. This allows you to apply changes to your Coder configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo update\nhelm upgrade coder coder-v2/coder \\\n  --namespace coder \\\n  -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Start Provisioner with Coder CLI\nDESCRIPTION: This set of commands configures and starts a provisioner using the Coder CLI. It sets the Coder URL and the provisioner daemon key as environment variables, then executes the `coder provisionerd start` command, specifying the target organization. This assumes the Coder CLI is installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/organizations.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport CODER_URL=https://<your-coder-url>\nexport CODER_PROVISIONER_DAEMON_KEY=<key>\ncoder provisionerd start --org <org-name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provisioner Job using curl\nDESCRIPTION: This curl command demonstrates how to send a GET request to retrieve a provisioner job from the Coder API. It requires the `organization` and `job` IDs as path parameters, an `Accept` header set to `application/json`, and a `Coder-Session-Token` header for authentication.  The server expects a valid API key for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_19\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/provisionerjobs/{job} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Client Download URL (Shell)\nDESCRIPTION: Defines the clientDownloadUrl, used by JetBrains Gateway to locate the client files. This URL provides the location of the client files obtained from the clients' downloader. The URL can be http://, https://, or file://.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cat clientDownloadUrl # a path for clients that you got from the clients' downloader (it could be http://, https://, or file://)\n\nhttps://internal.site/clients/\n```\n\n----------------------------------------\n\nTITLE: Validating a Number Parameter with Custom Error Message\nDESCRIPTION: This code defines a `coder_parameter` resource named `instances` of type `number`. It uses the `validation` block to set a `min` and `max` value, and overrides the default error message with a custom message that includes the `{min}`, `{max}`, and `{value}` placeholders.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_9\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"instances\" {\n  name        = \"Instances\"\n  type        = \"number\"\n  description = \"Number of compute instances\"\n  validation {\n    min       = 1\n    max       = 4\n    error     = \"Sorry, we can't provision too many instances - maximum limit: {max}, wanted: {value}.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Group Sync Settings JSON\nDESCRIPTION: This JSON snippet represents the default group sync settings for an organization in Coder. It includes fields for the OIDC claim (`field`), group mappings (`mapping`), a regex filter (`regex_filter`), and a flag to auto-create missing groups (`auto_create_missing_groups`).\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"field\": \"\",\n    \"mapping\": null,\n    \"regex_filter\": null,\n    \"auto_create_missing_groups\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting NGINX Service\nDESCRIPTION: This command restarts the NGINX service.  This applies the new configuration and enables the reverse proxy.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Workspace Proxy Configuration (Helm Values)\nDESCRIPTION: This snippet demonstrates the Kubernetes configuration for a workspace proxy using Helm values. It sets environment variables, TLS secret names, and enables the workspace proxy. This requires Helm and a Kubernetes cluster. The configuration specifies the primary Coder URL, proxy session token, access URLs, and TLS settings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    - name: CODER_PRIMARY_ACCESS_URL\n      value: \"https://<url_of_coderd_dashboard>\"\n    - name: CODER_PROXY_SESSION_TOKEN\n      value: \"<session_token_from_proxy_create>\"\n    # Example: https://east.coderd.example.com\n    - name: CODER_ACCESS_URL\n      value: \"https://<access_url_of_proxy>\"\n    # Example: *.east.coderd.example.com\n    - name: CODER_WILDCARD_ACCESS_URL\n      value: \"*.<app_hostname_of_proxy>\"\n\n  tls:\n    secretNames:\n      - kubernetes-wsproxy-secret\n\n  # enable workspace proxy\n  workspaceProxy: true\n```\n\n----------------------------------------\n\nTITLE: Get Template Variables with curl\nDESCRIPTION: This curl command sends a GET request to the `/templateversions/{templateversion}/variables` endpoint to retrieve variables associated with a specific template version. It requires a `templateversion` UUID, an 'Accept' header for JSON, and a 'Coder-Session-Token' header for authentication. The expected response is a JSON array of template variables.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_71\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/variables \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Creating a token\nDESCRIPTION: Demonstrates how to create a new personal access token using the Coder CLI. The token can then be used for authenticating automated clients.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/tokens.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder tokens create\n```\n\n----------------------------------------\n\nTITLE: Setting Slack API environment variables\nDESCRIPTION: These commands set the environment variables required for the Bolt application to authenticate with the Slack API. `SLACK_BOT_TOKEN` is the Bot User OAuth Token obtained from the Slack app settings, and `SLACK_SIGNING_SECRET` is the signing secret used to verify requests from Slack.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/slack.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport SLACK_BOT_TOKEN=xoxb-...\nexport SLACK_SIGNING_SECRET=0da4b...\n```\n\n----------------------------------------\n\nTITLE: Defining a Terraform Variable\nDESCRIPTION: This Terraform snippet defines a template-wide variable named `CLOUD_API_KEY`. The variable is of type string, has a description for its purpose, a default value, and is marked as sensitive to prevent it from being displayed in the UI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/variables.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nvariable \"CLOUD_API_KEY\" {\n  type        = string\n  description = \"API key for the service\"\n  default     = \"1234567890\"\n  sensitive   = true\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Edit Organization Member Roles Command\nDESCRIPTION: This command is used to edit the roles of a member within an organization. It takes the username or user ID of the member and a list of roles to assign.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_members_edit-roles.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations members edit-roles <username | user_id> [roles...]\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Autostart Schedule with curl\nDESCRIPTION: This curl command demonstrates how to update the autostart schedule for a workspace using the PUT method. It requires the workspace ID and a JSON payload specifying the new schedule.  Authentication is required via the 'Coder-Session-Token' header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/workspaces/{workspace}/autostart \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Defining a Parameter with an Empty Default Value\nDESCRIPTION: This code defines a `coder_parameter` resource named `dotfiles_url` with the `default` property set to an empty string (`\"\"`). This allows the parameter field to remain empty if the user does not provide a value.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"dotfiles_url\" {\n  name        = \"dotfiles URL\"\n  description = \"Git repository with dotfiles\"\n  mutable     = true\n  default     = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nomad Job for CSI Hostpath Plugin\nDESCRIPTION: This Terraform snippet defines a Nomad job for deploying the CSI Host Volume plugin. It specifies the Docker image to use, the arguments to pass to the plugin, and the resources to allocate for the task.  It requires Docker and Nomad.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/nomad-docker/README.md#_snippet_2\n\nLANGUAGE: tf\nCODE:\n```\njob \"hostpath-csi-plugin\" {\n  datacenters = [\"dc1\"]\n  type = \"system\"\n\n  group \"csi\" {\n    task \"plugin\" {\n      driver = \"docker\"\n\n      config {\n        image = \"registry.k8s.io/sig-storage/hostpathplugin:v1.10.0\"\n\n        args = [\n          \"--drivername=csi-hostpath\",\n          \"--v=5\",\n          \"--endpoint=${CSI_ENDPOINT}\",\n          \"--nodeid=node-${NOMAD_ALLOC_INDEX}\",\n        ]\n\n        privileged = true\n      }\n\n      csi_plugin {\n        id   = \"hostpath\"\n        type = \"monolith\"\n        mount_dir = \"/csi\"\n      }\n\n      resources {\n        cpu    = 256\n        memory = 128\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Agent Containers - Curl Request\nDESCRIPTION: This `curl` command retrieves the running containers for a specified workspace agent.  It requires the `workspaceagent` ID as a path parameter and accepts an optional `label` query parameter. The command sets the `Accept` header to `application/json` and includes the `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent}/containers?label=string \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Create Provisioner Key Request using Curl\nDESCRIPTION: This curl command creates a new provisioner key for a specific organization. The organization ID is placed in the URL path, and requests must include the 'Accept' and 'Coder-Session-Token' headers for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/organizations/{organization}/provisionerkeys \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Watching Workspace (Event Stream) - cURL Example\nDESCRIPTION: Shows how to watch a workspace for events using a GET request with cURL.  The `Accept` header should be set to `text/event-stream` to receive server-sent events. The request requires authentication via the `Coder-Session-Token` header and is sent to `/workspaces/{workspace}/watch`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaces/{workspace}/watch \\\n  -H 'Accept: text/event-stream' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Create Initial User using curl\nDESCRIPTION: This snippet shows how to create the initial user using the curl command-line tool, sending a POST request to `/api/v2/users/first` with a JSON body containing user details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/first \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get User by Name with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve user information by name using a curl command. It sends a GET request to the `/users/{user}` endpoint, specifying the user identifier in the path. It includes headers for accepting JSON responses and providing the `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Signups via Env Variable\nDESCRIPTION: This environment variable allows new users to sign up for Coder using their GitHub accounts. Setting this variable to `true` enables the sign-up functionality.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nCODER_OAUTH2_GITHUB_ALLOW_SIGNUPS=true\n```\n\n----------------------------------------\n\nTITLE: Installing IntelliJ IDEA Backend (Shell)\nDESCRIPTION: Downloads and extracts the IntelliJ IDEA backend (IU) for a specific build number. This involves using the jetbrains-clients-downloader, then extracting the downloaded archive and cleaning up the archive file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/jetbrains-gateway.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader --products-filter IU --build-filter 243.26053.27 --platforms-filter linux-x64 --download-backends ~/JetBrains\ntar -xzvf ~/JetBrains/backends/IU/*.tar.gz -C ~/JetBrains/backends/IU\nrm -rf ~/JetBrains/backends/IU/*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Starting a provisioner with a scoped key\nDESCRIPTION: Starts the provisioner daemon using a scoped key for authentication. Requires setting the `CODER_URL` and `CODER_PROVISIONER_DAEMON_KEY` environment variables before running the `coder provisioner start` command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport CODER_URL=https://<your-coder-url>\nexport CODER_PROVISIONER_DAEMON_KEY=<key>\ncoder provisioner start\n```\n\n----------------------------------------\n\nTITLE: Deleting a Token Using Coder CLI\nDESCRIPTION: This command deletes a token from Coder using the CLI. You can identify the token by its name, ID, or the token itself. The `remove` command has aliases `delete` and `rm`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/tokens_remove.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder tokens remove <name|id|token>\n```\n\n----------------------------------------\n\nTITLE: Delete External Auth User Link by ID with Curl\nDESCRIPTION: This snippet shows how to delete an external authentication user link by its ID using a `curl` command. It sends a DELETE request to the `/api/v2/external-auth/{externalauth}` endpoint, with `{externalauth}` representing the ID of the external authentication to be deleted. The request must include the `Coder-Session-Token` header for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/external-auth/{externalauth} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Check Initial User Created using curl\nDESCRIPTION: This snippet shows how to check if an initial user has already been created using the curl command-line tool. It sends a GET request to `/api/v2/users/first` including authentication token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/first \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Getting Entitlements with curl\nDESCRIPTION: This shell command retrieves the entitlements for the Coder server. It sends a GET request to the `/api/v2/entitlements` endpoint. The `Coder-Session-Token` header with the API key is required for authentication, and the `Accept` header specifies the expected response type as `application/json`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/entitlements \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Network Load Balancer (NLB) - YAML\nDESCRIPTION: This YAML snippet configures Coder to use an AWS Network Load Balancer (NLB) instead of the Classic Load Balancer.  It sets `externalTrafficPolicy` to `Local`, `sessionAffinity` to `None`, and includes an annotation specifying the load balancer type. `externalTrafficPolicy: Local` preserves the client IP address.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  service:\n    externalTrafficPolicy: Local\n    sessionAffinity: None\n    annotations: { service.beta.kubernetes.io/aws-load-balancer-type: \"nlb\" }\n```\n\n----------------------------------------\n\nTITLE: Disabling Default GitHub Provider via Env Variable\nDESCRIPTION: This environment variable disables the default Coder-managed GitHub OAuth app. This is recommended for production deployments when configuring a custom GitHub OAuth application.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nCODER_OAUTH2_GITHUB_DEFAULT_PROVIDER_ENABLE=false\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Container with Terraform\nDESCRIPTION: This Terraform resource defines a Docker container that utilizes the previously built Docker image.  It configures the container's name, hostname, entrypoint (using coder agent), environment variables (including the coder agent token), host entries, and volume mounts for persistent storage. The container starts only if the `start_count` is greater than zero.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"docker_container\" \"workspace\" {\n  count = data.coder_workspace.me.start_count\n  image = docker_image.main.name\n  # Uses lower() to avoid Docker restriction on container names.\n  name = \"coder-${data.coder_workspace_owner.me.name}-${lower(data.coder_workspace.me.name)}\"\n  # Hostname makes the shell more user friendly: coder@my-workspace:~$\n  hostname = data.coder_workspace.me.name\n  # Use the docker gateway if the access URL is 127.0.0.1\n  entrypoint = [\"sh\", \"-c\", replace(coder_agent.main.init_script, \"/localhost|127\\\\.0\\\\.0\\\\.1/\", \"host.docker.internal\")]\n  env = [\n    \"CODER_AGENT_TOKEN=${coder_agent.main.token}\",\n  ]\n  host {\n    host = \"host.docker.internal\"\n    ip   = \"host-gateway\"\n  }\n  volumes {\n    container_path = \"/home/${local.username}\"\n    volume_name    = docker_volume.home_volume.name\n    read_only      = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Organization Roles Usage - Coder CLI\nDESCRIPTION: This command shows organization roles within the Coder CLI. It accepts optional role names as arguments and supports flags for customizing the output format and displayed columns.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_roles_show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations roles show [flags] [role_names ...]\n```\n\n----------------------------------------\n\nTITLE: Creating a cron job for Certbot renewal\nDESCRIPTION: This command creates a new file in the `/etc/cron.weekly/` directory for automated Let's Encrypt certificate renewal.  This file will be executed weekly, automatically renewing certs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo touch /etc/cron.weekly/certbot\n```\n\n----------------------------------------\n\nTITLE: Assigning Role - Request Body Example\nDESCRIPTION: This JSON snippet shows the expected body parameter for the PUT request that assigns roles to an organization member.  It contains an array of role names to be assigned to the user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": [\n    \"string\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing a Template with Provisioner Tags in Coder (Shell)\nDESCRIPTION: This command pushes a Coder template named 'on-prem-chicago' with specific provisioner tags.  The `--provisioner-tag` flags specify the required tags for provisioners to execute jobs for this template. The provisioner must have both the 'environment=on_prem' and 'datacenter=chicago' tags to be eligible.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates push on-prem-chicago \\\n  --provisioner-tag environment=on_prem \\\n  --provisioner-tag datacenter=chicago\n```\n\n----------------------------------------\n\nTITLE: Launching Coder Server with Tailscale DERP URLs\nDESCRIPTION: This code snippet demonstrates how to launch the Coder server with Tailscale's global DERP relay servers. This configuration leverages Tailscale's WireGuard integration for improved relay performance. The `--derp-config-url` flag specifies the URL to fetch the DERP configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncoder server --derp-config-url https://controlplane.tailscale.com/derpmap/default\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Provider with ServiceAccount\nDESCRIPTION: This Terraform code configures the Kubernetes provider using the host, cluster CA certificate, and token variables. It decodes the base64 encoded certificate and token before passing them to the provider. It assumes the variables are properly set.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"kubernetes\" {\n  host                   = var.host\n  cluster_ca_certificate = base64decode(var.cluster_ca_certificate)\n  token                  = base64decode(var.token)\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic Group Creation in Coder (Environment Variable)\nDESCRIPTION: This snippet shows how to enable automatic creation of groups in Coder if they do not already exist via environment variable. It can be useful if groups are not pre-created in Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_23\n\nLANGUAGE: env\nCODE:\n```\n# as an environment variable\nCODER_OIDC_GROUP_AUTO_CREATE=true\n```\n\n----------------------------------------\n\nTITLE: Running a Local Docker Registry for Caching\nDESCRIPTION: This snippet runs a detached Docker registry container, mounting a volume for persistent storage, publishing port 5000 for access, and configuring networking to use the host network.  It enables caching of Docker images to speed up subsequent builds within the Coder environment.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/docker-devcontainer/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --detach \\\n  --volume registry-cache:/var/lib/registry \\\n  --publish 5000:5000 \\\n  --name registry-cache \\\n  --net=host \\\n  registry:2\n```\n\n----------------------------------------\n\nTITLE: Querying SSH Config using curl\nDESCRIPTION: This code snippet illustrates how to fetch the SSH configuration using a curl request.  It uses a Coder-Session-Token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/deployment/ssh \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pushing Template Revision with Coder CLI\nDESCRIPTION: This shell command shows how to push a new template revision to Coder using the Coder CLI. The `-y` flag bypasses confirmation prompts. The `terraform.tfvars` file (if present) will be automatically loaded.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/variables.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates push my-template -y # no need to use --var\n```\n\n----------------------------------------\n\nTITLE: Testing Access URL with curl\nDESCRIPTION: This command is used to test if the Coder Access URL is reachable from the server running Coder. It checks for connectivity issues, DNS resolution, and proper SSL certificate configuration. The expected output includes information about the connection and the 'OK' response body.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/health-check.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v ${CODER_ACCESS_URL}/healthz\n# Expected output:\n# *   Trying XXX.XXX.XXX.XXX:443\n# * Connected to https://coder.company.com (XXX.XXX.XXX.XXX) port 443 (#0)\n# [...]\n# OK\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Metrics - YAML\nDESCRIPTION: This snippet shows how to enable collection of database metrics for Coder Server using Prometheus. It is enabled via a configuration parameter in the `values.yaml` file when deploying Coder using Helm.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/scale-coder.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nCODER_PROMETHEUS_COLLECT_DB_METRICS=true\n```\n\n----------------------------------------\n\nTITLE: Get Organization IdP Sync Settings with curl\nDESCRIPTION: This code snippet demonstrates how to retrieve the organization IdP Sync settings using a curl command. It sends a GET request to the specified endpoint with the appropriate headers for accepting JSON responses and providing the Coder session token for authentication. The expected response is a JSON object representing the organization's IdP Sync settings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_96\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/settings/idpsync/organization \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing the Coder Provisioner Helm Chart (Shell)\nDESCRIPTION: This command installs the Coder provisioner Helm chart named 'coder-provisioner' in the 'coder' namespace. It specifies the chart version, the values file, and the location of the Helm chart repository (`coder-v2/coder-provisioner`). Replace `<your version>` with the actual chart version you wish to deploy.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nhelm install coder-provisioner coder-v2/coder-provisioner \\\n    --namespace coder \\\n    --version <your version> \\\n    --values provisioner-values.yaml\n```\n\n----------------------------------------\n\nTITLE: CORS Headers\nDESCRIPTION: These are example CORS headers set by Coder, allowing credentials, specifying allowed methods and headers, and setting the allowed origin. These headers are applied when forwarding via the dashboard to permit cross-origin requests between apps of the same user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\naccess-control-allow-credentials: true\naccess-control-allow-methods: PUT\naccess-control-allow-headers: X-Custom-Header\naccess-control-allow-origin: https://8000--dev--user--apps.coder.example.com\nvary: Origin\nvary: Access-Control-Request-Method\nvary: Access-Control-Request-Headers\n```\n\n----------------------------------------\n\nTITLE: Example Git Config for Coder User\nDESCRIPTION: This snippet shows the required `.gitconfig` file to store the Git credentials for the Coder user. The `credential.helper` is set to `store` to use the `.git-credentials` file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# /home/coder/.gitconfig\n[credential]\n  helper = store\n```\n\n----------------------------------------\n\nTITLE: Listing Tokens Usage (Coder CLI)\nDESCRIPTION: This code snippet shows the basic usage of the `coder tokens list` command in the Coder CLI. It does not have any dependencies other than the Coder CLI being installed and configured. The command lists tokens associated with the current user or, with appropriate permissions, all users.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/tokens_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder tokens list [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve a list of template versions by template ID using a GET request with curl. It includes the standard headers.  It also illustrates the use of query parameters such as `after_id`, `include_archived`, `limit`, and `offset` for pagination and filtering.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates/{template}/versions \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: SCIM User Update Body Example\nDESCRIPTION: This JSON payload represents the structure for updating an existing SCIM user. It includes fields such as active status, emails, groups, ID, meta information, name, schemas, and username. The example shows sample values for each field. Only provided fields are updated. Not provided fields remain unchanged.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"emails\": [\n    {\n      \"display\": \"string\",\n      \"primary\": true,\n      \"type\": \"string\",\n      \"value\": \"user@example.com\"\n    }\n  ],\n  \"groups\": [\n    null\n  ],\n  \"id\": \"string\",\n  \"meta\": {\n    \"resourceType\": \"string\"\n  },\n  \"name\": {\n    \"familyName\": \"string\",\n    \"givenName\": \"string\"\n  },\n  \"schemas\": [\n    \"string\"\n  ],\n  \"userName\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Workspace Metadata with curl\nDESCRIPTION: This shell snippet demonstrates how to use the `curl` command-line tool to retrieve workspace metadata from the Coder API. It sends an HTTP GET request to the specified endpoint, including necessary headers for authentication (Coder-Session-Token) and content negotiation (Accept). Replace `{user}` and `{workspacename}` with the appropriate values for your environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/workspace/{workspacename} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n\n```\n\n----------------------------------------\n\nTITLE: Promoting Template Versions using Coder CLI\nDESCRIPTION: This command promotes a specified template version to be the active version for a given template. It requires specifying the template name and the template version name to promote using the `--template` and `--template-version` flags, respectively. The `--org` flag allows selecting an organization to use.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_versions_promote.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates versions promote [flags] --template=<template_name> --template-version=<template_version_name>\n```\n\nLANGUAGE: console\nCODE:\n```\nPromote an existing template version to be the active version for the specified template.\n```\n\n----------------------------------------\n\nTITLE: Installing coder-logstream-kube Helm Chart\nDESCRIPTION: This snippet shows how to install the coder-logstream-kube Helm chart on the Kubernetes cluster. It adds the Helm repository, and installs the chart setting the Coder URL. Replace <your-coder-url-including-http-or-https> with the actual Coder URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/kubernetes-logs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add coder-logstream-kube https://helm.coder.com/logstream-kube\nhelm install coder-logstream-kube coder-logstream-kube/coder-logstream-kube \\\n    --namespace coder \\\n    --set url=<your-coder-url-including-http-or-https>\n```\n\n----------------------------------------\n\nTITLE: Delete User with Curl\nDESCRIPTION: This code snippet demonstrates how to delete a user using a curl command. It sends a DELETE request to the `/users/{user}` endpoint, specifying the user identifier in the path. The `Coder-Session-Token` header is required for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/users/{user} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder Organizations Settings Usage\nDESCRIPTION: This command allows users to manage organization settings within the Coder environment. It serves as a parent command for subcommands that show and update specific settings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings\n```\n\n----------------------------------------\n\nTITLE: Upserting Workspace Agent Port Share - Shell\nDESCRIPTION: This code snippet shows how to upsert (update or create) a workspace agent's port share using a POST request to the Coder API. It uses curl to send the request, including the workspace ID, content type, Accept header, and API key. The `workspace` parameter is required in the URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/portsharing.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/workspaces/{workspace}/port-share \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder Image and Environment Variables in Kubernetes\nDESCRIPTION: This Kubernetes Helm values snippet shows how to specify a custom Coder image and set environment variables. The image is defined by its repository and tag. Environment variables are used to disable telemetry, disable automatic update checks, force SSH traffic through a DERP proxy, disable relayed connections, and set up an external PostgreSQL database connection.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/offline.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# values.yaml\ncoder:\n  image:\n    repo: \"registry.example.com/coder\"\n    tag: \"latest\"\n  env:\n    # Disable telemetry\n    - name: \"CODER_TELEMETRY_ENABLE\"\n      value: \"false\"\n    # Disable automatic update checks\n    - name: \"CODER_UPDATE_CHECK\"\n      value: \"false\"\n    # force SSH traffic through control plane's DERP proxy\n    - name: CODER_BLOCK_DIRECT\n      value: \"true\"\n    # Only use relayed connections\n    - name: \"CODER_DERP_SERVER_STUN_ADDRESSES\"\n      value: \"disable\"\n    # You must set up an external PostgreSQL database\n    - name: \"CODER_PG_CONNECTION_URL\"\n      value: \"\"\n# ...\n```\n\n----------------------------------------\n\nTITLE: Querying Token Config using curl\nDESCRIPTION: This snippet shows how to retrieve token configuration for a specific user using a curl request, and requires a Coder-Session-Token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/keys/tokens/tokenconfig \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update User Appearance Body Parameter (JSON)\nDESCRIPTION: This JSON snippet represents the request body for updating user appearance settings. It includes the `terminal_font` and `theme_preference` fields, which define the desired appearance settings. This JSON is sent as the body of a PUT request to the `/users/{user}/appearance` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal_font\": \"\",\n  \"theme_preference\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JetBrains Gateway Module (Terraform)\nDESCRIPTION: Configures the `jetbrains-gateway` Coder module within a Terraform template. It defines the module source, version, agent ID, folder, JetBrains IDEs, default IDE, and JetBrains IDE versions with corresponding build numbers and versions. Requires the `coder_agent` resource to be defined.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/jetbrains-gateway.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"jetbrains_gateway\" {\n  count          = data.coder_workspace.me.start_count\n  source         = \"registry.coder.com/modules/jetbrains-gateway/coder\"\n  version        = \"1.0.28\"\n  agent_id       = coder_agent.main.id\n  folder         = \"/home/coder/example\"\n  jetbrains_ides = [\"IU\"]\n  default        = \"IU\"\n  latest         = false\n  jetbrains_ide_versions = {\n    \"IU\" = {\n      build_number = \"243.26053.27\"\n      version      = \"2024.3\"\n    }\n  }\n}\n\nresource \"coder_agent\" \"main\" {\n    ...\n    startup_script = <<-EOF\n    ~/JetBrains/backends/IU/ideaIU-243.26053.27/bin/remote-dev-server.sh registerBackendLocationForGateway\n    EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Coder Parameters\nDESCRIPTION: This snippet demonstrates how to specify the order of Coder parameters in UI forms using the `order` property. Lower order values are displayed before higher values. `account_id` will be displayed before `project_id`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-ordering.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"project_id\" {\n  name         = \"project_id\"\n  display_name = \"Project ID\"\n  description  = \"Specify cloud provider project ID.\"\n  order = 2\n}\n\ndata \"coder_parameter\" \"account_id\" {\n  name         = \"account_id\"\n  display_name = \"Account ID\"\n  description  = \"Specify cloud provider account ID.\"\n  order = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a provisioner key for an organization\nDESCRIPTION: Creates a provisioner key for an organization, allowing it to handle untagged jobs. The key is generated using the `coder provisioner keys create` command with the `--org` flag.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncoder provisioner keys create my-key \\\n  --org default\n\nSuccessfully created provisioner key   my-key! Save this authentication token, it   will not be shown    again.\n\n<key omitted>\n```\n\n----------------------------------------\n\nTITLE: Request OTP - JSON Body\nDESCRIPTION: This JSON payload contains the user's email address for requesting a one-time passcode via the `/users/otp/request` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"user@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Group Request using Curl\nDESCRIPTION: This curl command demonstrates how to send a request to create a new group within an organization. It includes necessary headers such as 'Accept' and 'Coder-Session-Token' for authentication. The request body should conform to the `codersdk.CreateGroupRequest` schema.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/organizations/{organization}/groups \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY' \\\n  -d '{\"name\":\"example_group\",\"display_name\":\"Example Group\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Deployment for Coder Workspace with Terraform\nDESCRIPTION: This Terraform snippet defines a Kubernetes deployment for a Coder workspace. It sets affinity rules, tolerations, and node selectors to ensure the workspace is deployed on the appropriate node group. The resource uses the `kubernetes_deployment` resource and configures the specification, template, metadata, and container details for deploying coder workspaces.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/infrastructure/validated-architectures/index.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\nresource \"kubernetes_deployment\" \"coder\" {\n  spec {\n    template {\n      metadata {\n        labels = {\n          app = \"coder-workspace\"\n        }\n      }\n\n      spec {\n        affinity {\n          pod_anti_affinity {\n            preferred_during_scheduling_ignored_during_execution {\n              weight = 1\n              pod_affinity_term {\n                label_selector {\n                  match_expressions {\n                    key      = \"app.kubernetes.io/instance\"\n                    operator = \"In\"\n                    values   = [\"coder-workspace\"]\n                  }\n                }\n                topology_key = # add your node group label here\n              }\n            }\n          }\n        }\n\n        tolerations {\n          # Add your tolerations here\n        }\n\n        node_selector {\n          # Add your node selectors here\n        }\n\n        container {\n          image = \"coder-workspace:latest\"\n          name  = \"dev\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Kubernetes Secret in Terraform\nDESCRIPTION: This Terraform snippet shows how to reference a Kubernetes secret created earlier, so that the container image can be pulled from the private registry. Requires Kubernetes provider to be configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nenv {\n  name = \"CODER_IMAGE_PULL_SECRET\"\n  value_from {\n    secret_key_ref {\n      name = \"<name>\"\n      key = \".dockerconfigjson\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using coder organizations settings set command\nDESCRIPTION: This command is used to update organization settings in the Coder platform. It includes the use of subcommands to update group sync settings. The command is typically used in the console.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_set.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings set\n```\n\n----------------------------------------\n\nTITLE: Getting Workspace Resources with Curl\nDESCRIPTION: This curl command demonstrates how to retrieve workspace resources for a specific workspace build. It includes the necessary headers for accepting JSON responses and authenticating the request.  The `workspacebuild` path parameter must be replaced with the ID of the desired workspace build.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild}/resources \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Encryption Keys\nDESCRIPTION: This shell command creates a Kubernetes secret named `coder-external-token-encryption-keys` from a literal containing the encryption key. This allows storing the key securely within a Kubernetes cluster. Replace `<key>` with the actual base64-encoded key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/database-encryption.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic coder-external-token-encryption-keys --from-literal=keys=<key>\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Member using Coder CLI\nDESCRIPTION: This snippet demonstrates how to remove a member from the current organization using the Coder CLI. It requires the Coder CLI to be installed and configured with appropriate authentication. The command accepts either a username or a user ID as an argument to identify the member to be removed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_members_remove.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations members remove <username | user_id>\n```\n\n----------------------------------------\n\nTITLE: OIDC Group Mapping in Helm Chart\nDESCRIPTION: This YAML snippet demonstrates how to configure the OIDC group mapping within a Coder Helm chart. It sets the `CODER_OIDC_GROUP_MAPPING` environment variable with a JSON string defining the mapping between an OIDC group ID and a Coder group name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    - name: CODER_OIDC_GROUP_MAPPING\n      value: >\n        {\"myOIDCGroupID\": \"myCoderGroupName\"}\n```\n\n----------------------------------------\n\nTITLE: Reset Password on Kubernetes via Coder CLI\nDESCRIPTION: This command executes a shell within the Coder deployment on Kubernetes and then resets a user's password using the Coder CLI.  It requires `kubectl` to be configured to access the Kubernetes cluster. It's recommended to run `coder reset-password <username> --help` to understand the available options.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/index.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -it deployment/coder /bin/bash -n coder\n\ncoder reset-password <username>\n```\n\n----------------------------------------\n\nTITLE: Logging in to Coder deployment\nDESCRIPTION: This command is used to log in to an existing Coder deployment. Replace `https://coder.example.com` with the actual URL of your Coder deployment. The Coder CLI must be installed and accessible.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncoder login https://coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Referencing Existing Service Account - Coder Helm\nDESCRIPTION: This YAML snippet configures a provisioner to reference an existing service account. It disables service account creation and workspace permissions, and sets the `nameOverride` to a new name.\nSOURCE: https://github.com/coder/coder/blob/main/helm/provisioner/README.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  # ...\n  serviceAccount:\n    name: preexisting-service-account\n    disableCreate: true\n    workspacePerms: false\nprovisionerDaemon:\n  # ...\nnameOverride: \"other-coder-provisioner\"\n```\n\n----------------------------------------\n\nTITLE: Stopping Azure VM with Azure CLI in Terraform\nDESCRIPTION: This Terraform snippet defines a `null_resource` that stops an Azure VM when the Coder workspace transitions to the 'stop' state. It uses the `az vm deallocate` command to deallocate the VM, preventing charges while it's stopped. It depends on the `azurerm_windows_virtual_machine.main` resource.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/azure-windows/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"null_resource\" \"stop_vm\" {\n  count      = data.coder_workspace.me.transition == \"stop\" ? 1 : 0\n  depends_on = [azurerm_windows_virtual_machine.main]\n  provisioner \"local-exec\" {\n    # Use deallocate so the VM is not charged\n    command = \"az vm deallocate --ids ${azurerm_windows_virtual_machine.main.id}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Caddy and Coder\nDESCRIPTION: This Docker Compose file defines services for Coder, a PostgreSQL database, and Caddy. It configures environment variables for Coder, database credentials, and volume mounts for persistent data and Caddy configuration.  It also defines healthcheck for postgres and port mappings for Caddy.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  coder:\n    image: ghcr.io/coder/coder:${CODER_VERSION:-latest}\n    environment:\n      CODER_PG_CONNECTION_URL: \"postgresql://${POSTGRES_USER:-username}:${POSTGRES_PASSWORD:-password}@database/${POSTGRES_DB:-coder}?sslmode=disable\"\n      CODER_HTTP_ADDRESS: \"0.0.0.0:7080\"\n      # You'll need to set CODER_ACCESS_URL to an IP or domain\n      # that workspaces can reach. This cannot be localhost\n      # or 127.0.0.1 for non-Docker templates!\n      CODER_ACCESS_URL: \"${CODER_ACCESS_URL}\"\n      # Optional) Enable wildcard apps/dashboard port forwarding\n      CODER_WILDCARD_ACCESS_URL: \"${CODER_WILDCARD_ACCESS_URL}\"\n      # If the coder user does not have write permissions on\n      # the docker socket, you can uncomment the following\n      # lines and set the group ID to one that has write\n      # permissions on the docker socket.\n      #group_add:\n      #  - \"998\" # docker group on host\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    depends_on:\n      database:\n        condition: service_healthy\n\n  database:\n    image: \"postgres:16\"\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: ${POSTGRES_USER:-username} # The PostgreSQL user (useful to connect to the database)\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password} # The PostgreSQL password (useful to connect to the database)\n      POSTGRES_DB: ${POSTGRES_DB:-coder} # The PostgreSQL default database (automatically created at first launch)\n    volumes:\n      - coder_data:/var/lib/postgresql/data # Use \"docker volume rm coder_coder_data\" to reset Coder\n    healthcheck:\n      test:\n        [\n          \"CMD-SHELL\",\n          \"pg_isready -U ${POSTGRES_USER:-username} -d ${POSTGRES_DB:-coder}\",\n        ]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  caddy:\n    image: caddy:2.6.2\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"443:443/udp\"\n    volumes:\n      - $PWD/Caddyfile:/etc/caddy/Caddyfile\n      - caddy_data:/data\n      - caddy_config:/config\n\nvolumes:\n  coder_data:\n  caddy_data:\n  caddy_config:\n```\n\n----------------------------------------\n\nTITLE: Prometheus Scrape Configuration Example\nDESCRIPTION: This YAML snippet provides an example `scrape_config` for Prometheus, allowing it to collect metrics from a Coder instance. It defines a `job_name` as `coder`, the `scheme` as `http`, and configures `static_configs` with the target Coder pod or server IP address and port 2112.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/prometheus.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nscrape_configs:\n  - job_name: \"coder\"\n    scheme: \"http\"\n    static_configs:\n      # replace with the the IP address of the Coder pod or server\n      - targets: [\"<ip>:2112\"]\n        labels:\n          apps: \"coder\"\n```\n\n----------------------------------------\n\nTITLE: Starting a provisioner with a global PSK\nDESCRIPTION: Starts a provisioner using a global pre-shared key (PSK) for authentication. Requires the Coder server to have a provisioner daemon PSK configured. The `--psk` flag specifies the PSK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncoder provisioner start --psk <your-psk>\n```\n\n----------------------------------------\n\nTITLE: Configuring SCIM Authentication via Environment Variable\nDESCRIPTION: This environment variable configures the authentication header for SCIM 2.0. Setting `CODER_SCIM_AUTH_HEADER` to the API key allows user provisioning and deprovisioning via SCIM.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/oidc-auth.md#_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nCODER_SCIM_AUTH_HEADER=\"your-api-key\"\n```\n\n----------------------------------------\n\nTITLE: Create Token API Key with curl\nDESCRIPTION: This snippet illustrates how to create a new token API key using `curl`.  It performs a POST request to the `/users/{user}/keys/tokens` endpoint, specifying the `Content-Type` and `Accept` headers as `application/json`, and including the `Coder-Session-Token` for authentication.  The request body, defined in JSON, contains the `lifetime`, `scope`, and `token_name` for the new key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/{user}/keys/tokens \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Login User via API - Shell\nDESCRIPTION: This shell script demonstrates how to log in a user using the `/users/login` endpoint.  It sends a POST request with a JSON payload containing the user's email and password.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/login \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Template Creation Request Body - JSON\nDESCRIPTION: This JSON snippet represents the request body for creating a template. It defines various properties such as activity bump time, user autostart/autostop settings, autostart/autostop requirements, default/delete TTLs, description, display name, dormant TTL, failure TTL, icon, maximum port share level, name, active version requirement, and template version ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"activity_bump_ms\": 0,\n  \"allow_user_autostart\": true,\n  \"allow_user_autostop\": true,\n  \"allow_user_cancel_workspace_jobs\": true,\n  \"autostart_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ]\n  },\n  \"autostop_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ],\n    \"weeks\": 0\n  },\n  \"default_ttl_ms\": 0,\n  \"delete_ttl_ms\": 0,\n  \"description\": \"string\",\n  \"disable_everyone_group_access\": true,\n  \"display_name\": \"string\",\n  \"dormant_ttl_ms\": 0,\n  \"failure_ttl_ms\": 0,\n  \"icon\": \"string\",\n  \"max_port_share_level\": \"owner\",\n  \"name\": \"string\",\n  \"require_active_version\": true,\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update group sync settings\nDESCRIPTION: This command updates the group sync settings for an organization. It requires an input.json file containing the new settings.  It's typically used in the console to pipe the JSON content into the command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_set.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder organization settings set groupsync < input.json\n```\n\n----------------------------------------\n\nTITLE: Workspace Proxy Configuration (Environment Variables)\nDESCRIPTION: This snippet presents a set of environment variables used to configure a workspace proxy. It requires the primary Coder instance URL and the session token obtained when creating the proxy. Additional variables control the HTTP/TLS addresses, access URLs, TLS settings, and other parameters.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Proxy specific configuration. These are REQUIRED\n# Example: https://coderd.example.com\nCODER_PRIMARY_ACCESS_URL=\"https://<url_of_coderd_dashboard>\"\nCODER_PROXY_SESSION_TOKEN=\"<session_token_from_proxy_create>\"\n\n# Runtime variables for \"coder start\".\nCODER_HTTP_ADDRESS=0.0.0.0:80\nCODER_TLS_ADDRESS=0.0.0.0:443\n# Example: https://east.coderd.example.com\nCODER_ACCESS_URL=\"https://<access_url_of_proxy>\"\n# Example: *.east.coderd.example.com\nCODER_WILDCARD_ACCESS_URL=\"*.<app_hostname_of_proxy>\"\n\nCODER_TLS_ENABLE=true\nCODER_TLS_CLIENT_AUTH=none\nCODER_TLS_CERT_FILE=\"<cert_file_location>\"\nCODER_TLS_KEY_FILE=\"<key_file_location>\"\n\n# Additional configuration options are available.\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Example (Local Address Binding)\nDESCRIPTION: This example demonstrates how to forward a TCP port and specify the local address to bind to using the `coder port-forward` command. It requires the `coder` CLI tool to be installed and configured. The workspace must be running and accessible. The syntax specifies the local address before the local port. No specific output is generated, the forwarded ports will be accessible on the specified local address.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/port-forward.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward <workspace> --tcp 1.2.3.4:8080:8080\n```\n\n----------------------------------------\n\nTITLE: Push Coder Template - Bash\nDESCRIPTION: These commands authenticate with Coder and push a new version of a template. `coder login` requires the access URL of your Coder instance. `coder templates push` updates the specified template with the changes.  Assumes the Coder CLI is installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/image-pull-secret.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncoder login <access-url>\ncoder templates push <template-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Cloudflare API token configuration\nDESCRIPTION: This code snippet creates a configuration file for the Cloudflare DNS provider, used by Certbot for DNS challenge verification when obtaining Let's Encrypt certificates.  The `dns_cloudflare_api_token` variable should be replaced with a valid Cloudflare API token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\ndns_cloudflare_api_token = YOUR_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder Parameter Icon with Terraform\nDESCRIPTION: This code snippet demonstrates how to configure the icon for a coder_parameter data source in Terraform. It sets the icon attribute directly and within an option block, pointing to bundled SVG and PNG icons respectively.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/icons.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_parameter\" \"my_parameter\" {\n  icon = \"/icon/coder.svg\"\n\n  option {\n    icon = \"/emojis/1f3f3-fe0f-200d-26a7-fe0f.png\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adaptive Card Template for Teams Notifications\nDESCRIPTION: This JSON template defines the structure of the Adaptive Card used to display notifications in Microsoft Teams. It includes elements for an image (Coder logo), a title, a body, and a set of actions. The template uses expressions to dynamically populate the title, body, and actions from the parsed JSON payload.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/teams.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://adaptivecards.io/schemas/adaptive-card.json\",\n    \"type\": \"AdaptiveCard\",\n    \"version\": \"1.0\",\n    \"body\": [\n        {\n            \"type\": \"Image\",\n            \"url\": \"https://coder.com/coder-logo-horizontal.png\",\n            \"height\": \"40px\",\n            \"altText\": \"Coder\",\n            \"horizontalAlignment\": \"center\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"**@{replace(body('Parse_JSON')?['title_markdown'], '\\\"', '\\\"')}**\"\n        },\n        {\n            \"type\": \"TextBlock\",\n            \"text\": \"@{replace(body('Parse_JSON')?['body_markdown'], '\\\"', '\\\"')}\",\n            \"wrap\": true\n        },\n        {\n            \"type\": \"ActionSet\",\n            \"actions\": [@{replace(replace(join(body('Parse_JSON')?['payload']?['actions'], ','), '{', '{\\\"type\\\": \\\"Action.OpenUrl\\\",'), '\\\"label\\\"', '\\\"title\\\"')}]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Workspace Stop Time via Coder CLI\nDESCRIPTION: This command extends the stop time of a workspace.  It requires the workspace name and a duration from the current time. The new stop time must be at least 30 minutes in the future, and workspace templates may restrict maximum runtimes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule_extend.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncoder schedule extend <workspace-name> <duration from now>\n```\n\n----------------------------------------\n\nTITLE: Listing workspaces using Coder CLI\nDESCRIPTION: This command lists workspaces using the coder CLI tool. It accepts flags to modify the output and the listing criteria. It supports filtering, output formatting, and displaying specific columns.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder list [flags]\n```\n\n----------------------------------------\n\nTITLE: Get Organizations: Example Response\nDESCRIPTION: This is an example JSON response representing a list of organizations. Each organization object includes fields such as `created_at`, `description`, `display_name`, `icon`, `id`, `is_default`, `name`, and `updated_at`. The HTTP status code for a successful retrieval is 200.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"description\": \"string\",\n    \"display_name\": \"string\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"is_default\": true,\n    \"name\": \"string\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configure SecurityContext values for Coder\nDESCRIPTION: Defines the `securityContext` values for the Coder deployment to align with OpenShift's Security Context Constraints (SCC). It sets `runAsNonRoot`, `runAsUser`, `runAsGroup`, `readOnlyRootFilesystem`, and `seccompProfile`.  It's crucial to adjust UID/GID to match the project's constraints.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  securityContext:\n    runAsNonRoot: true # Unchanged from default\n    runAsUser: <project-specific UID> # Default: 1000, replace this with the correct UID for your project.\n    runAsGroup: <project-specific GID> # Default: 1000, replace this with the correct GID for your project.\n    readOnlyRootFilesystem: true # Default: false, this is often required in OpenShift environments.\n    seccompProfile: RuntimeDefault # Unchanged from default\n```\n\n----------------------------------------\n\nTITLE: Helm Values for Mounting Git Credentials in Kubernetes\nDESCRIPTION: This YAML snippet configures Coder's Helm values to mount the `git-secrets` secret. It defines the volume and volume mounts for the `.gitconfig` and `.git-credentials` files, ensuring they are mounted at the correct paths within the Coder provisioner and set to read-only.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  volumes:\n    - name: git-secrets\n      secret:\n        secretName: git-secrets\n  volumeMounts:\n    - name: git-secrets\n      mountPath: \"/home/coder/.gitconfig\"\n      subPath: .gitconfig\n      readOnly: true\n    - name: git-secrets\n      mountPath: \"/home/coder/.git-credentials\"\n      subPath: .git-credentials\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Update Organization Sync Settings using Coder CLI\nDESCRIPTION: This snippet shows how to update the organization synchronization settings using a JSON payload with the Coder CLI.  It requires the Coder CLI to be installed and configured and a valid settings.json file. It updates the sync field, mapping, and default organization assignment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\ncoder organization settings set org-sync < settings.json\n{\n   \"field\": \"organizations\",\n   \"mapping\": {\n      \"product\": [\n         \"868e5b23-dc6e-46ab-be74-a891e9bd784b\",\n         \"cbdcf774-4123-4118-8cd9-b3f502c84dfb\"\n      ],\n      \"sales\": [\n         \"d79144d9-b30a-555a-9af8-7dac83b2q4ec\",\n      ]\n   },\n   \"organization_assign_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Organization Sync Settings - Coder CLI\nDESCRIPTION: This command retrieves organization sync settings to synchronize organization memberships from an Identity Provider (IdP). It is used to display the current configuration for synchronizing organization memberships. No specific dependencies are mentioned beyond the Coder CLI itself.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_show_organization-sync.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings show organization-sync\n```\n\n----------------------------------------\n\nTITLE: Clone and rename Coder template (macOS/Linux)\nDESCRIPTION: This shell snippet renames the pulled template directory using the mv command and then navigates into the renamed directory. This is useful when you want to customize a template and give it a more descriptive name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmv aws-linux universal-template\ncd universal-template\n```\n\n----------------------------------------\n\nTITLE: Pushing template to Coder using specific path\nDESCRIPTION: This command pushes a template to Coder using the Coder CLI, specifying the template name and the path to the folder containing the `main.tf` file. Requires the Coder CLI to be configured and authenticated.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/devcontainers/add-devcontainer.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates push <template-name> -d <path to folder containing main.tf>\n```\n\n----------------------------------------\n\nTITLE: Custom Scopes and Claims via Environment Variables\nDESCRIPTION: This snippet configures Coder to use custom scopes and claims from an Okta authorization server. `CODER_OIDC_ISSUER_URL` must point to the authorization server's issuer URL, and `CODER_OIDC_SCOPES` should include the custom scope.  The user role field and mappings are also configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/configuring-okta.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Grab this value from the Authorization Server > Settings > Issuer\n# DO NOT USE the application issuer URL. Make sure to use the newly configured\n# authorization server.\nCODER_OIDC_ISSUER_URL=https://dev-12222860.okta.com/oauth2/default\n# Add the new scope you just configured\nCODER_OIDC_SCOPES=openid,profile,email,roles\n# Use the claim you just configured\nCODER_OIDC_USER_ROLE_FIELD=roles\n# See our docs for mapping okta roles to coder roles.\nCODER_OIDC_USER_ROLE_MAPPING='{\"admin-group\":[\"template-admin\",\"user-admin\"]}'\n```\n\n----------------------------------------\n\nTITLE: Console: Upgrading Terraform Provider Versions\nDESCRIPTION: This command updates the Terraform provider versions based on the version constraints specified in the Terraform configuration.  It checks for the newest satisfiable version and updates the `.terraform.lock.hcl` file. This requires Terraform to be initialized in the directory first.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/dependencies.md#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\nterraform init -upgrade\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Build Logs with Curl\nDESCRIPTION: This shell command retrieves workspace build logs using `curl`. It sends a GET request to the `/workspacebuilds/{workspacebuild}/logs` endpoint, requiring the `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild}/logs \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Setting Coder Access URLs\nDESCRIPTION: These shell commands set the `CODER_ACCESS_URL` and `CODER_WILDCARD_ACCESS_URL` environment variables, which are required for Coder to function correctly. They specify the domain used for Coder and its wildcard subdomains.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport CODER_ACCESS_URL=https://coder.example.com\nexport CODER_WILDCARD_ACCESS_URL=*.coder.example.com\ndocker compose up -d # Run on startup\n```\n\n----------------------------------------\n\nTITLE: Referencing Terraform Module from GitHub (Template 2)\nDESCRIPTION: This Terraform code demonstrates how to reference a Terraform module from a GitHub repository within a Coder template. It allows for code reuse and customization by passing template-specific parameters. It also includes a template-specific resource for each template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_13\n\nLANGUAGE: Terraform\nCODE:\n```\n# template2/main.tf\nmodule \"central-coder-module\" {\n  source = \"github.com/org/central-coder-module\"\n  myparam = \"custom-for-template2\"\n  myparam2 = \"bar\"\n}\n\nresource \"aws_instance\" \"custom_template2_only_resource\" {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for External Authentication\nDESCRIPTION: This code snippet demonstrates how to set environment variables to configure Coder for external authentication using OAuth 2.0. It defines the ID, type, client ID, and client secret for the authentication provider, along with optional display name and icon configurations. The `CODER_EXTERNAL_AUTH_0_ID` variable is crucial for the callback URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"<USER_DEFINED_ID>\"\nCODER_EXTERNAL_AUTH_0_TYPE=<github|gitlab|azure-devops|bitbucket-cloud|bitbucket-server|etc>\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=<OAuth app client ID>\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=<OAuth app client secret>\n\n# Optionally, configure a custom display name and icon:\nCODER_EXTERNAL_AUTH_0_DISPLAY_NAME=\"Google Calendar\"\nCODER_EXTERNAL_AUTH_0_DISPLAY_ICON=\"https://mycustomicon.com/google.svg\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics in Coder Server - YAML\nDESCRIPTION: This snippet demonstrates how to enable Prometheus metrics in Coder Server by modifying the Helm `values.yaml` file. It includes enabling Prometheus itself and optionally enabling database metrics. It also provides options for configuring or disabling agent stats for high-scale deployments to avoid large cardinality.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/scale-coder.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nCODER_PROMETHEUS_ENABLE=true\n```\n\n----------------------------------------\n\nTITLE: Example Workspace JSON Response\nDESCRIPTION: This JSON snippet illustrates the structure and fields of a workspace object returned by the Coder API. It includes details such as IDs, creation timestamps, health status, resource information, and template configurations. This is a sample 200 response and provides a comprehensive view of the workspace properties.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow_renames\": true,\n  \"automatic_updates\": \"always\",\n  \"autostart_schedule\": \"string\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleting_at\": \"2019-08-24T14:15:22Z\",\n  \"dormant_at\": \"2019-08-24T14:15:22Z\",\n  \"favorite\": true,\n  \"health\": {\n    \"failing_agents\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"healthy\": false\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_used_at\": \"2019-08-24T14:15:22Z\",\n  \"latest_app_status\": {\n    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"message\": \"string\",\n    \"needs_user_attention\": true,\n    \"state\": \"working\",\n    \"uri\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n  },\n  \"latest_build\": {\n    \"build_number\": 0,\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"deadline\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n    \"initiator_name\": \"string\",\n    \"job\": {\n      \"available_workers\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"canceled_at\": \"2019-08-24T14:15:22Z\",\n      \"completed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"error\": \"string\",\n      \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n      \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"input\": {\n        \"error\": \"string\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n      },\n      \"metadata\": {\n        \"template_display_name\": \"string\",\n        \"template_icon\": \"string\",\n        \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n        \"template_name\": \"string\",\n        \"template_version_name\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"queue_position\": 0,\n      \"queue_size\": 0,\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"pending\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"type\": \"template_version_import\",\n      \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n    },\n    \"matched_provisioners\": {\n      \"available\": 0,\n      \"count\": 0,\n      \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n    },\n    \"max_deadline\": \"2019-08-24T14:15:22Z\",\n    \"reason\": \"initiator\",\n    \"resources\": [\n      {\n        \"agents\": [\n          {\n            \"api_version\": \"string\",\n            \"apps\": [\n              {\n                \"command\": \"string\",\n                \"display_name\": \"string\",\n                \"external\": true,\n                \"health\": \"disabled\",\n                \"healthcheck\": {\n                  \"interval\": 0,\n                  \"threshold\": 0,\n                  \"url\": \"string\"\n                },\n                \"hidden\": true,\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"open_in\": \"slim-window\",\n                \"sharing_level\": \"owner\",\n                \"slug\": \"string\",\n                \"statuses\": [\n                  {\n                    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                    \"created_at\": \"2019-08-24T14:15:22Z\",\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"message\": \"string\",\n                    \"needs_user_attention\": true,\n                    \"state\": \"working\",\n                    \"uri\": \"string\",\n                    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                  }\n                ],\n                \"subdomain\": true,\n                \"subdomain_name\": \"string\",\n                \"url\": \"string\"\n              }\n            ],\n            \"architecture\": \"string\",\n            \"connection_timeout_seconds\": 0,\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"directory\": \"string\",\n            \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n            \"display_apps\": [\n              \"vscode\"\n            ],\n            \"environment_variables\": {\n              \"property1\": \"string\",\n              \"property2\": \"string\"\n            ],\n            \"expanded_directory\": \"string\",\n            \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"health\": {\n              \"healthy\": false,\n              \"reason\": \"agent has lost connection\"\n            },\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"instance_id\": \"string\",\n            \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"latency\": {\n              \"property1\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              },\n              \"property2\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              }\n            },\n            \"lifecycle_state\": \"created\",\n            \"log_sources\": [\n              {\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"display_name\": \"string\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n              }\n            ],\n            \"logs_length\": 0,\n            \"logs_overflowed\": true,\n            \"name\": \"string\",\n            \"operating_system\": \"string\",\n            \"ready_at\": \"2019-08-24T14:15:22Z\",\n            \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n            \"scripts\": [\n              {\n                \"cron\": \"string\",\n                \"display_name\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"log_path\": \"string\",\n                \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n                \"run_on_start\": true,\n                \"run_on_stop\": true,\n                \"script\": \"string\",\n                \"start_blocks_login\": true,\n                \"timeout\": 0\n              }\n            ],\n            \"started_at\": \"2019-08-24T14:15:22Z\",\n            \"startup_script_behavior\": \"blocking\",\n            \"status\": \"connecting\",\n            \"subsystems\": [\n              \"envbox\"\n            ],\n            \"troubleshooting_url\": \"string\",\n            \"updated_at\": \"2019-08-24T14:15:22Z\",\n            \"version\": \"string\"\n          }\n        ],\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"daily_cost\": 0,\n        \"hide\": true,\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n        \"metadata\": [\n          {\n            \"key\": \"string\",\n            \"sensitive\": true,\n            \"value\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"workspace_transition\": \"start\"\n      }\n    ],\n    \"status\": \"pending\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"template_version_name\": \"string\",\n    \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n    \"transition\": \"start\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\",\n    \"workspace_owner_avatar_url\": \"string\",\n    \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n    \"workspace_owner_name\": \"string\"\n  },\n  \"name\": \"string\",\n  \"next_start_at\": \"2019-08-24T14:15:22Z\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"outdated\": true,\n  \"owner_avatar_url\": \"string\",\n  \"owner_id\": \"8826ee2e-7933-4665-aef2-2393f84a0d05\",\n  \"owner_name\": \"string\",\n  \"template_active_version_id\": \"b0da9c29-67d8-4c87-888c-bafe356f7f3c\",\n  \"template_allow_user_cancel_workspace_jobs\": true,\n  \"template_display_name\": \"string\",\n  \"template_icon\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"template_name\": \"string\",\n  \"template_require_active_version\": true,\n  \"ttl_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Post Workspace Agent Log Source via curl\nDESCRIPTION: This snippet demonstrates how to post a log source to a workspace agent using a curl command. It requires a valid Coder-Session-Token for authentication and a JSON body containing the log source details (display_name, icon, id).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/workspaceagents/me/log-source \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wireguard Coordinator Info with curl\nDESCRIPTION: This snippet demonstrates how to retrieve Wireguard coordinator debug information using a curl request. It requires a Coder-Session-Token for authentication and sends a GET request to the `/api/v2/debug/coordinator` endpoint. The expected response is a 200 OK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/debug.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/debug/coordinator \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Setting Gitea Environment Variables\nDESCRIPTION: This code snippet shows the environment variables required for Gitea external authentication, including ID, type, client ID, client secret, and authentication URL. For self-managed Gitea instances, the Auth URL should be set to the instance's URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_8\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"gitea\"\nCODER_EXTERNAL_AUTH_0_TYPE=gitea\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxxxxxx\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxxxxxx\n# If self managed, set the Auth URL to your Gitea instance\nCODER_EXTERNAL_AUTH_0_AUTH_URL=\"https://gitea.com/login/oauth/authorize\"\n```\n\n----------------------------------------\n\nTITLE: Installing Slack Bolt library\nDESCRIPTION: This command installs the `@slack/bolt` package, which is the official Bolt framework for building Slack apps in JavaScript. It adds the package as a dependency in the `package.json` file and downloads the necessary files to the `node_modules` directory.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/slack.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @slack/bolt\n```\n\n----------------------------------------\n\nTITLE: Copying Azure Credentials for Coder User\nDESCRIPTION: These shell commands copy the Azure credentials from the current user's home directory to the coder user's home directory and then change the ownership of the copied credentials to the coder user. This is necessary because Coder runs as a system service with the `coder` user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/azure-vm.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp -r ~/.azure /home/coder/.azure\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown -R coder:coder /home/coder/.azure/\n```\n\n----------------------------------------\n\nTITLE: Convert User Login to OAuth via API - Shell\nDESCRIPTION: This shell script demonstrates how to convert a user's login from password-based to OAuth-based authentication via the `/users/{user}/convert-login` endpoint. It requires a Coder session token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/{user}/convert-login \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Getting Workspace Agent External Auth using curl\nDESCRIPTION: This snippet demonstrates retrieving external authentication information for a workspace agent. It makes a GET request to the `/api/v2/workspaceagents/me/external-auth` endpoint, including `match` and `id` query parameters and the `Coder-Session-Token` in the header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/me/external-auth?match=string&id=string \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Archive Template Versions Request Body (JSON)\nDESCRIPTION: This JSON snippet represents the request body for archiving template versions. Setting `all` to `true` will archive all unused template versions. This request will archive all unused versions of the specified template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"all\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Coder with Helm (Mainline)\nDESCRIPTION: This command installs the mainline version of Coder using Helm. It specifies the chart name, namespace, and values file. It also sets the version of the chart to install.  It requires the Coder Helm repository to be configured and the `values.yaml` file to be created.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm install coder coder-v2/coder \\\n      --namespace coder \\\n      --values values.yaml \\\n      --version 2.20.0\n```\n\n----------------------------------------\n\nTITLE: Mark All Unread Notifications as Read - cURL\nDESCRIPTION: This cURL command marks all unread notifications in the inbox as read. It sends a PUT request to `/api/v2/notifications/inbox/mark-all-as-read` with the `Coder-Session-Token` header. A successful request returns a 204 No Content status.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/notifications/inbox/mark-all-as-read \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Requesting DERP Map Updates using curl\nDESCRIPTION: This snippet demonstrates how to retrieve DERP map updates from the Coder Server using a GET request. It uses `curl` to send the request and includes the `Coder-Session-Token` header for authentication. The request is sent to the `/api/v2/derp-map` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/derp-map \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Role for Coder\nDESCRIPTION: This SQL snippet creates a new role named 'coder' with login privileges, superuser status, and a password.  It's used to grant Coder access to the PostgreSQL database.  Requires PostgreSQL server to be running and accessible.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE ROLE coder LOGIN SUPERUSER PASSWORD 'secret42';\n```\n\n----------------------------------------\n\nTITLE: Change Password with OTP - JSON Body\nDESCRIPTION: This JSON payload contains the user's email, one-time passcode, and new password for changing the password via the `/users/otp/change-password` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"user@example.com\",\n  \"one_time_passcode\": \"string\",\n  \"password\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for RDP with Coder CLI\nDESCRIPTION: This command forwards the RDP port (3389) from the workspace to the local machine's port 3399 using the Coder CLI. Replace <workspace-name> with the actual name of the Coder workspace. This allows you to connect to the workspace's RDP server from your local machine.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/remote-desktops.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward <workspace-name> --tcp 3399:3389\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Source Configuration for Artifactory\nDESCRIPTION: This Terraform snippet shows how to define the module source URL when using Artifactory as a Terraform module registry. The source URL points to the specific module within the Artifactory repository, including the module name, provider, and version.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_3\n\nLANGUAGE: tf\nCODE:\n```\nmodule \"module-name\" {\n  source = \"https://example.jfrog.io/tf__coder/module-name/coder\"\n  version = \"1.0.0\"\n  agent_id = coder_agent.example.id\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Audit Logs Response - JSON\nDESCRIPTION: This JSON snippet represents the expected response format when retrieving audit logs.  It includes an array of `audit_logs` and a `count` representing the total number of audit logs. Each audit log entry contains information about an action, resource, user, and organization involved in the audited event. Diff fields represent the changes made and may contain secret information.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/audit.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"audit_logs\": [\n    {\n      \"action\": \"create\",\n      \"additional_fields\": {},\n      \"description\": \"string\",\n      \"diff\": {\n        \"property1\": {\n          \"new\": null,\n          \"old\": null,\n          \"secret\": true\n        },\n        \"property2\": {\n          \"new\": null,\n          \"old\": null,\n          \"secret\": true\n        }\n      },\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"ip\": \"string\",\n      \"is_deleted\": true,\n      \"organization\": {\n        \"display_name\": \"string\",\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"request_id\": \"266ea41d-adf5-480b-af50-15b940c2b846\",\n      \"resource_icon\": \"string\",\n      \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n      \"resource_link\": \"string\",\n      \"resource_target\": \"string\",\n      \"resource_type\": \"template\",\n      \"status_code\": 0,\n      \"time\": \"2019-08-24T14:15:22Z\",\n      \"user\": {\n        \"avatar_url\": \"http://example.com\",\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"email\": \"user@example.com\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n        \"login_type\": \"\",\n        \"name\": \"string\",\n        \"organization_ids\": [\n          \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n        ],\n        \"roles\": [\n          {\n            \"display_name\": \"string\",\n            \"name\": \"string\",\n            \"organization_id\": \"string\"\n          }\n        ],\n        \"status\": \"active\",\n        \"theme_preference\": \"string\",\n        \"updated_at\": \"2019-08-24T14:15:22Z\",\n        \"username\": \"string\"\n      },\n      \"user_agent\": \"string\"\n    }\n  ],\n  \"count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Workspace Proxy on Kubernetes with Helm\nDESCRIPTION: This snippet shows how to install the workspace proxy on Kubernetes using Helm. It requires Helm to be installed and configured to connect to the Kubernetes cluster. The command installs the Coder Helm chart with a specific values file, enabling the workspace proxy in a designated namespace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install coder coder-v2/coder --namespace <your workspace proxy namespace> -f ./values-wsproxy.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Coder Server\nDESCRIPTION: This command starts the Coder server. This command needs to be run after Coder is successfully installed to initiate the server process. The Coder CLI must be in your system's PATH.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncoder server\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Login Command Usage\nDESCRIPTION: Shows the basic usage of the coder login command, including the optional URL parameter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/login.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder login [flags] [<url>]\n```\n\n----------------------------------------\n\nTITLE: Coder Templates Command Usage\nDESCRIPTION: Shows the basic usage of the `coder templates` command in the console.  This command serves as the entry point for managing templates within the Coder environment.  It doesn't require any specific dependencies but relies on the Coder CLI being installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates\n```\n\n----------------------------------------\n\nTITLE: Enabling Early Access Features via Coder CLI\nDESCRIPTION: This snippet demonstrates how to enable all early access features using the Coder CLI. The `--experiments=*` flag instructs the Coder server to activate all available experimental features. This is useful for staging environments, but not recommended for production.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/releases/feature-stages.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder server --experiments=*\n```\n\n----------------------------------------\n\nTITLE: Getting Workspace Agent Git Auth using curl\nDESCRIPTION: This snippet shows how to retrieve Git authentication information for a workspace agent. It sends a GET request to `/api/v2/workspaceagents/me/gitauth` with the `match` and `id` query parameters. Authentication requires the `Coder-Session-Token` in the header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/me/gitauth?match=string&id=string \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Image with Terraform\nDESCRIPTION: This Terraform resource defines a Docker image using a Dockerfile. It specifies the image name, build context, build arguments, and triggers for rebuilding the image when the Dockerfile or related files change. The image is tagged with the Coder workspace ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"docker_image\" \"main\" {\n  name = \"coder-${data.coder_workspace.me.id}\"\n  build {\n    context = \"./build\"\n    build_args = {\n      USER = local.username\n    }\n  }\n  triggers = {\n    dir_sha1 = sha1(join(\"\", [for f in fileset(path.module, \"build/*\") : filesha1(f)]))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Proxy with Curl\nDESCRIPTION: This example demonstrates how to update a workspace proxy using a curl command. It sends a PATCH request to the specified endpoint, including the `Content-Type` and `Accept` headers, and the `Coder-Session-Token` for authentication.  The `{workspaceproxy}` path parameter should be replaced with the actual Proxy ID or name.  A JSON body containing the fields to be updated is required.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_130\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/workspaceproxies/{workspaceproxy} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Preset Response JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a successful response (200 OK) when querying preset data. It contains an array of objects, each representing a preset with an ID, name, and a list of parameters, each having a name and a value. This is useful for understanding the expected format of preset information returned by the API.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"string\",\n    \"name\": \"string\",\n    \"parameters\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Coordinate Agent - Curl Request\nDESCRIPTION: This `curl` command initiates a coordination process with the specified workspace agent. It only requires the `workspaceagent` ID as a path parameter. The `Coder-Session-Token` header is necessary for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent}/coordinate \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Enabling Workspace Proxy as System Service\nDESCRIPTION: This snippet demonstrates how to enable and start the workspace proxy as a system service using systemd. It requires Coder to be installed via a system package. The commands enable the service to start on boot, start it immediately, and display the logs to ensure a successful start.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Use systemd to start workspace proxy now and on reboot\nsudo systemctl enable --now coder-workspace-proxy\n\n# View the logs to ensure a successful start\njournalctl -u coder-workspace-proxy.service -b\n```\n\n----------------------------------------\n\nTITLE: Posting Workspace Usage - cURL Example\nDESCRIPTION: Demonstrates how to post workspace usage information using a POST request with cURL. It requires a JSON body containing the agent ID (`agent_id`) and application name (`app_name`).  The request must include `Content-Type: application/json` and the `Coder-Session-Token` header for authentication. The endpoint is `/workspaces/{workspace}/usage`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/workspaces/{workspace}/usage \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Getting Template by Org and Name with Curl - Shell\nDESCRIPTION: This curl command is used to retrieve a specific template by its organization ID and template name. It sends a GET request to the `/organizations/{organization}/templates/{templatename}` endpoint, using the `Accept` and `Coder-Session-Token` headers for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/templates/{templatename} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Built-in Server\nDESCRIPTION: This command runs the built-in PostgreSQL deployment in the Coder server environment.  It is used to start the PostgreSQL server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server_postgres-builtin-serve.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server postgres-builtin-serve [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Git Credentials File for Coder User\nDESCRIPTION: This snippet shows the structure and formatting requirements for the `.git-credentials` file. Ensure the username, password, and git host are properly encoded in the URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# /home/coder/.git-credentials\n\n# GitHub example:\nhttps://your-github-username:your-github-pat@github.com\n```\n\n----------------------------------------\n\nTITLE: Update Organization IdP Sync Config with curl\nDESCRIPTION: This code snippet demonstrates how to update the organization IdP Sync config using a curl command. It sends a PATCH request to the specified endpoint with the appropriate headers, including 'Content-Type' set to 'application/json' and providing the Coder session token for authentication. The request body contains the new config values in JSON format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_101\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/settings/idpsync/organization/config \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Basic Bolt app structure\nDESCRIPTION: This JavaScript code defines the basic structure of a Bolt application for receiving and processing Slack webhooks. It initializes the Bolt app with the necessary credentials and sets up a webhook endpoint to handle incoming notifications from Coder. It requires the `@slack/bolt` and `body-parser` packages. The code handles incoming POST requests to `/v1/webhook`, validates the request body, and uses the Slack API to send messages to users based on their email addresses.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/slack.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { App, LogLevel, ExpressReceiver } = require(\"@slack/bolt\");\nconst bodyParser = require(\"body-parser\");\n\nconst port = process.env.PORT || 6000;\n\n// Create a Bolt Receiver\nconst receiver = new ExpressReceiver({\n    signingSecret: process.env.SLACK_SIGNING_SECRET,\n});\nreceiver.router.use(bodyParser.json());\n\n// Create the Bolt App, using the receiver\nconst app = new App({\n    token: process.env.SLACK_BOT_TOKEN,\n    logLevel: LogLevel.DEBUG,\n    receiver,\n});\n\nreceiver.router.post(\"/v1/webhook\", async (req, res) => {\n    try {\n        if (!req.body) {\n            return res.status(400).send(\"Error: request body is missing\");\n        }\n\n        const { title_markdown, body_markdown } = req.body;\n           if (!title_markdown || !body_markdown) {\n               return res\n                   .status(400)\n                   .send('Error: missing fields: \"title_markdown\", or \"body_markdown\"');\n        }\n\n        const payload = req.body.payload;\n        if (!payload) {\n            return res.status(400).send('Error: missing \"payload\" field');\n        }\n\n        const { user_email, actions } = payload;\n        if (!user_email || !actions) {\n            return res\n                .status(400)\n                .send('Error: missing fields: \"user_email\", \"actions\"');\n        }\n\n        // Get the user ID using Slack API\n        const userByEmail = await app.client.users.lookupByEmail({\n            email: user_email,\n        });\n\n        const slackMessage = {\n            channel: userByEmail.user.id,\n            text: body,\n            blocks: [\n                {\n                    type: \"header\",\n                    text: { type: \"mrkdwn\", text: title_markdown },\n                },\n                {\n                    type: \"section\",\n                    text: { type: \"mrkdwn\", text: body_markdown },\n                },\n            ],\n        };\n\n        // Add action buttons if they exist\n        if (actions && actions.length > 0) {\n            slackMessage.blocks.push({\n                type: \"actions\",\n                elements: actions.map((action) => ({\n                    type: \"button\",\n                    text: { type: \"plain_text\", text: action.label },\n                    url: action.url,\n                })),\n            });\n        }\n\n        // Post message to the user on Slack\n        await app.client.chat.postMessage(slackMessage);\n\n        res.status(204).send();\n    } catch (error) {\n        console.error(\"Error sending message:\", error);\n        res.status(500).send();\n    }\n});\n\n// Acknowledge clicks on link_button, otherwise Slack UI\n// complains about missing events.\napp.action(\"button_click\", async ({ body, ack, say }) => {\n    await ack(); // no specific action needed\n});\n\n// Start the Bolt app\n(async () => {\n    await app.start(port);\n    console.log(\"⚡️ Coder Slack bot is running!\");\n})();\n```\n\n----------------------------------------\n\nTITLE: Example GET Response\nDESCRIPTION: This JSON snippet is an example response from a GET request to retrieve template metadata. It includes various template attributes, such as active user count, versions, resource limits, and deprecation details.  It illustrates the structure of a successful API response when retrieving a template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active_user_count\": 0,\n  \"active_version_id\": \"eae64611-bd53-4a80-bb77-df1e432c0fbc\",\n  \"activity_bump_ms\": 0,\n  \"allow_user_autostart\": true,\n  \"allow_user_autostop\": true,\n  \"allow_user_cancel_workspace_jobs\": true,\n  \"autostart_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ]\n  },\n  \"autostop_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ],\n    \"weeks\": 0\n  },\n  \"build_time_stats\": {\n    \"property1\": {\n      \"p50\": 123,\n      \"p95\": 146\n    },\n    \"property2\": {\n      \"p50\": 123,\n      \"p95\": 146\n    }\n  },\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"created_by_id\": \"9377d689-01fb-4abf-8450-3368d2c1924f\",\n  \"created_by_name\": \"string\",\n  \"default_ttl_ms\": 0,\n  \"deprecated\": true,\n  \"deprecation_message\": \"string\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"failure_ttl_ms\": 0,\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"max_port_share_level\": \"owner\",\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_icon\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"provisioner\": \"terraform\",\n  \"require_active_version\": true,\n  \"time_til_dormant_autodelete_ms\": 0,\n  \"time_til_dormant_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete OAuth2 Application Tokens with curl\nDESCRIPTION: Deletes OAuth2 application tokens using a DELETE request. Requires the `client_id` as a query parameter and a valid Coder session token for authentication. Returns a 204 No Content status upon successful deletion.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/oauth2/tokens?client_id=string \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Push Template\nDESCRIPTION: These commands uploads the template files to the Coder deployment using the Coder CLI. It first navigates to the directory containing the template files and then executes the `coder templates push` command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ pwd\n/home/docs/template-tour\n$ coder templates push\n> Upload \".\"? (yes/no) yes\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Template Version using curl\nDESCRIPTION: This code snippet demonstrates how to retrieve a template version by its ID using a curl command. It includes the required headers for accepting JSON and providing an API key for authentication. The templateversion parameter in the URL must be a valid UUID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pushing Envbox Template with Terraform Variables (Coder CLI)\nDESCRIPTION: This command pushes an envbox template to Coder, specifying values for Terraform variables using the `-V` flag. This allows you to configure the template with specific values, such as namespace, CPU limits, and memory limits.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/kubernetes-envbox/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncoder templates push envbox --var namespace=\"mynamespace\" --var max_cpus=2 --var min_cpus=1 --var max_memory=4 --var min_memory=1\n```\n\n----------------------------------------\n\nTITLE: Sending custom workspace logs using Coder REST API\nDESCRIPTION: This snippet shows how to send custom workspace logs to the Coder API using curl. It requires a valid Coder-Session-Token for the agent. The request includes a JSON payload containing the log data (created_at, level, output).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH https://coder.example.com/api/v2/workspaceagents/me/logs \\\n  -H \"Coder-Session-Token: $CODER_AGENT_TOKEN\" \\\n  -d \"{\n  \\\"logs\\\": [\n    {\n      \\\"created_at\\\": \\\"$(date -u +'%Y-%m-%dT%H:%M:%SZ')\\\",\n      \\\"level\\\": \\\"info\\\",\n      \\\"output\\\": \\\"Restoring workspace from snapshot: 05%...\\\"\n    }\n  ]\n  }\"\n```\n\n----------------------------------------\n\nTITLE: Provisioner Job Response Example\nDESCRIPTION: This JSON snippet shows an example response for a provisioner job. It provides details such as available workers, creation and completion times, error information, associated file ID, input parameters, metadata related to the template and workspace, organization ID, queue position, status, tags, job type, and worker ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"available_workers\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"canceled_at\": \"2019-08-24T14:15:22Z\",\n  \"completed_at\": \"2019-08-24T14:15:22Z\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"error\": \"string\",\n  \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n  \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"input\": {\n    \"error\": \"string\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n  },\n  \"metadata\": {\n    \"template_display_name\": \"string\",\n    \"template_icon\": \"string\",\n    \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n    \"template_name\": \"string\",\n    \"template_version_name\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\"\n  },\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"queue_position\": 0,\n  \"queue_size\": 0,\n  \"started_at\": \"2019-08-24T14:15:22Z\",\n  \"status\": \"pending\",\n  \"tags\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"type\": \"template_version_import\",\n  \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Request with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve user quiet hours using a curl command. It sends a GET request to the specified endpoint with necessary headers for authentication and content type. The endpoint requires a user ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_114\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/quiet-hours \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Logging into a Coder Deployment\nDESCRIPTION: This command logs into an existing Coder deployment using the provided URL. It allows the CLI to authenticate and interact with the specified Coder server.  The URL specifies the address of the Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cli.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncoder login https://coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Listing Pending Provisioner Jobs via CLI\nDESCRIPTION: This command lists all provisioner jobs that are currently in a 'pending' state. The `-s pending` flag filters the jobs to only show those with the status 'pending'. This is useful for identifying jobs that are stuck or have not been picked up by a provisioner.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/manage-provisioner-jobs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncoder provisioner jobs list -s pending\n```\n\n----------------------------------------\n\nTITLE: Defining a List of Strings Parameter with a Default Value\nDESCRIPTION: This code defines a `coder_parameter` resource named `security_groups` of type `list(string)`. It uses the `jsonencode` function to specify a default value for the list. The `mutable` attribute is set to `true`, indicating that the user can change the value of this parameter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"security_groups\" {\n  name        = \"Security groups\"\n  icon        = \"/icon/aws.png\"\n  type        = \"list(string)\"\n  description = \"Select appropriate security groups.\"\n  mutable     = true\n  default = jsonencode([\n    \"Web Server Security Group\",\n    \"Database Security Group\",\n    \"Backend Security Group\"\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Create Template Version Dry-Run Response (201 Created)\nDESCRIPTION: This JSON snippet represents a successful (201 Created) response from the API when creating a template version dry-run. It contains the details of the created provisioner job.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"available_workers\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"canceled_at\": \"2019-08-24T14:15:22Z\",\n  \"completed_at\": \"2019-08-24T14:15:22Z\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"error\": \"string\",\n  \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n  \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"input\": {\n    \"error\": \"string\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n  },\n  \"metadata\": {\n    \"template_display_name\": \"string\",\n    \"template_icon\": \"string\",\n    \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n    \"template_name\": \"string\",\n    \"template_version_name\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\"\n  },\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"queue_position\": 0,\n  \"queue_size\": 0,\n  \"started_at\": \"2019-08-24T14:15:22Z\",\n  \"status\": \"pending\",\n  \"tags\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"type\": \"template_version_import\",\n  \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Application Secrets with curl\nDESCRIPTION: Retrieves OAuth2 application secrets using a GET request. Requires the `app` ID as a path parameter and a valid Coder session token for authentication. Returns an array of OAuth2 application secrets.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/oauth2-provider/apps/{app}/secrets \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Coder via Winget (PowerShell)\nDESCRIPTION: This command installs or upgrades Coder on Windows using the Winget package manager. Requires Winget to be installed and configured. The Coder package must be available in the Winget repository.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/upgrade.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Coder.Coder\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes secret for PostgreSQL client certs\nDESCRIPTION: Creates a Kubernetes secret named `postgres-certs` in the `coder` namespace containing the client certificate and key for SSL connection to PostgreSQL.  This is used when the PostgreSQL server requires client verification.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/postgres-ssl.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret tls postgres-certs -n coder --key=\"postgres.key\" --cert=\"postgres.crt\"\n```\n\n----------------------------------------\n\nTITLE: Connect to workspace via SSH using Zed\nDESCRIPTION: This command opens a remote workspace in Zed via SSH. It requires Zed to be installed and configured with SSH. The workspace name needs to be specified.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/zed.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nzed ssh://coder.workspace-name\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Roles with JSON input\nDESCRIPTION: This command updates an organization's custom role using a JSON input file. The `--stdin` flag reads the role definition from standard input, allowing for programmatic role updates.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_roles_update.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder roles update --stdin < role.json\n```\n\n----------------------------------------\n\nTITLE: Example API Key by ID Response\nDESCRIPTION: This is an example JSON response when retrieving an API key by its ID. It shows the structure of the API key object, containing fields like `created_at`, `expires_at`, `id`, `last_used`, `lifetime_seconds`, `login_type`, `scope`, `token_name`, `updated_at`, and `user_id`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"expires_at\": \"2019-08-24T14:15:22Z\",\n  \"id\": \"string\",\n  \"last_used\": \"2019-08-24T14:15:22Z\",\n  \"lifetime_seconds\": 0,\n  \"login_type\": \"password\",\n  \"scope\": \"all\",\n  \"token_name\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Organization: Curl Example\nDESCRIPTION: This example demonstrates how to update an organization on the Coder server using a curl command with the PATCH method. It requires the `Content-Type`, `Accept` headers and `Coder-Session-Token` for authentication. The API endpoint is `/api/v2/organizations/{organization}`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/organizations/{organization} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Automatic Updates with curl\nDESCRIPTION: This curl command shows how to update the automatic updates setting for a workspace using the PUT method. It requires the workspace ID and a JSON payload defining the new automatic updates configuration. Authentication is required via the 'Coder-Session-Token' header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/workspaces/{workspace}/autoupdates \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Add License Key from Text String using Coder CLI\nDESCRIPTION: This command adds a Coder license key from a text string using the Coder CLI.  It requires the Coder CLI to be installed and the user to be logged in.  The `-l` flag specifies the license key string.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/licensing/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder licenses add -l 1f5...765\n```\n\n----------------------------------------\n\nTITLE: Enable Autofill Parameters with Shell\nDESCRIPTION: This shell command enables the `auto-fill-parameters` experiment on the Coder server. It allows Coder to automatically fill in missing parameter values during workspace creation. Requires Coder CLI tool.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ncoder server --experiments=auto-fill-parameters\n```\n\n----------------------------------------\n\nTITLE: Inspect Kubernetes Secret - Bash\nDESCRIPTION: This bash script uses `kubectl` to retrieve and decode the contents of the `regcred` secret. It pipes the base64-encoded `.dockerconfigjson` data to `base64 --decode` for human-readable output.  It requires `kubectl` to be configured and the `regcred` secret to exist in the specified namespace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/image-pull-secret.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkubectl get secret -n <workspaces-namespace> regcred --output=\"jsonpath={.data.\\.dockerconfigjson}\" | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Apache configuration for Coder\nDESCRIPTION: This Apache configuration file defines virtual hosts for both HTTP (port 80) and HTTPS (port 443) traffic. It redirects all HTTP traffic to HTTPS, proxies requests to the Coder backend running on `127.0.0.1:3000`, enables websockets via rewrite rules, and configures SSL using Let's Encrypt certificates.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_9\n\nLANGUAGE: apache\nCODE:\n```\n # Redirect HTTP to HTTPS\n    <VirtualHost *:80>\n        ServerName coder.example.com\n        ServerAlias *.coder.example.com\n        Redirect permanent / https://coder.example.com/\n    </VirtualHost>\n\n    <VirtualHost *:443>\n        ServerName coder.example.com\n        ServerAlias *.coder.example.com\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n        ProxyPass / http://127.0.0.1:3000/ upgrade=any # required for websockets\n        ProxyPassReverse / http://127.0.0.1:3000/\n        ProxyRequests Off\n        ProxyPreserveHost On\n\n        RewriteEngine On\n        # Websockets are required for workspace connectivity\n        RewriteCond %{HTTP:Connection} Upgrade [NC]\n        RewriteCond %{HTTP:Upgrade} websocket [NC]\n        RewriteRule /(.*) ws://127.0.0.1:3000/$1 [P,L]\n\n        SSLCertificateFile /etc/letsencrypt/live/coder.example.com/fullchain.pem\n        SSLCertificateKeyFile /etc/letsencrypt/live/coder.example.com/privkey.pem\n    </VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Coder State Pull Build Flag\nDESCRIPTION: Describes the `-b` or `--build` flag, which is used to specify a particular workspace build to target. This allows pulling the state from a specific build rather than the latest.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/state_pull.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|      |                  |\n|------|------------------|\n| Type | <code>int</code> |\n```\n\n----------------------------------------\n\nTITLE: Managing Persistent Azure VM Lifecycle with Terraform\nDESCRIPTION: This snippet adds Terraform resources to stop and start an Azure VM based on the Coder workspace transition state. It uses `null_resource` with `local-exec` provisioners to run Azure CLI commands for deallocating (stopping) and starting the VM, ensuring that the VM is not charged when stopped. It depends on the `azurerm_linux_virtual_machine` resource.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/azure-linux/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Stop the VM\nresource \"null_resource\" \"stop_vm\" {\n  count      = data.coder_workspace.me.transition == \"stop\" ? 1 : 0\n  depends_on = [azurerm_linux_virtual_machine.main]\n  provisioner \"local-exec\" {\n    # Use deallocate so the VM is not charged\n    command = \"az vm deallocate --ids ${azurerm_linux_virtual_machine.main.id}\"\n  }\n}\n\n# Start the VM\nresource \"null_resource\" \"start\" {\n  count      = data.coder_workspace.me.transition == \"start\" ? 1 : 0\n  depends_on = [azurerm_linux_virtual_machine.main]\n  provisioner \"local-exec\" {\n    command = \"az vm start --ids ${azurerm_linux_virtual_machine.main.id}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Secrets in the Coder UI with Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to display secrets in the Coder Workspace UI using the `coder_metadata` resource. It creates a Twilio API key and then defines metadata to display the username and password (API key secret), marking the password as sensitive.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/secrets.md#_snippet_1\n\nLANGUAGE: tf\nCODE:\n```\nresource \"twilio_iam_api_key\" \"api_key\" {\n  account_sid   = \"ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n  friendly_name = \"Test API Key\"\n}\n\n\nresource \"coder_metadata\" \"twilio_key\" {\n  resource_id = twilio_iam_api_key.api_key.id\n  item {\n    key   = \"Username\"\n    value = \"Administrator\"\n  }\n  item {\n    key       = \"Password\"\n    value     = twilio_iam_api_key.api_key.secret\n    sensitive = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Coder Notifications\nDESCRIPTION: This command allows administrators to send a test notification to verify the notification target settings. It helps ensure that notifications are being delivered correctly.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/notifications.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ coder notifications test\n```\n\n----------------------------------------\n\nTITLE: Installing Apache\nDESCRIPTION: This command installs the Apache web server on a Debian/Ubuntu system. Apache is used as a reverse proxy for the Coder application.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install apache2\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication Token via Coder CLI (manual)\nDESCRIPTION: This command demonstrates how to manually access authentication tokens within a workspace using the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder external-auth access-token <USER_DEFINED_ID>\n```\n\n----------------------------------------\n\nTITLE: Set OIDC Group Field as a Flag\nDESCRIPTION: This flag configures the Coder server to read group information from the specified OIDC claim name. It serves the same purpose as the environment variable `CODER_OIDC_GROUP_FIELD` but is passed as a command-line argument.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n--oidc-group-field groups\n```\n\n----------------------------------------\n\nTITLE: Forwarding Multiple Remote TCP Ports using `coder port-forward`\nDESCRIPTION: This command forwards the remote TCP port 3000 and all ports from 9990 to 9999 on the specified Coder workspace to their respective local ports. This allows developers to access multiple services running on these ports within the workspace from their local machine.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/port-forwarding.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward myworkspace --tcp 3000,9990-9999\n```\n\n----------------------------------------\n\nTITLE: Git Clone Module Configuration (Terraform)\nDESCRIPTION: This Terraform configuration snippet demonstrates how to use the Git Clone module from the Coder Registry. It specifies the module source, version, agent ID, and the Git repository URL. The agent ID is required for the module to interact with the Coder agent within the workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/cloning-git-repositories.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\nmodule \"git-clone\" {\n  source   = \"registry.coder.com/modules/git-clone/coder\"\n  version  = \"1.0.12\"\n  agent_id = coder_agent.example.id\n  url      = \"https://github.com/coder/coder\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Coder using install script (Linux/macOS)\nDESCRIPTION: This script downloads and executes the Coder installation script from the official website. It's a convenient way to quickly install Coder on Linux and macOS systems. Ensure curl is installed and accessible in your environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Notification with Coder CLI\nDESCRIPTION: This command is used to send a test notification within the Coder environment. It is executed from the command line using the Coder CLI tool. No specific dependencies are mentioned beyond the availability of the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/notifications_test.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder notifications test\n```\n\n----------------------------------------\n\nTITLE: Set Role Sync Settings via Coder CLI\nDESCRIPTION: This command sets the role sync settings for a specified organization using the Coder CLI. It reads the settings from a JSON file (role-sync.json) and applies them to the specified organization. The user must be an Owner or have Organization Admin privileges.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncoder organizations settings set role-sync \\\n  --org <org-name> \\\n  < role-sync.json\n```\n\n----------------------------------------\n\nTITLE: SSH Config Response Example\nDESCRIPTION: This JSON snippet presents an example of the response structure when querying the SSH configuration.  It features hostname prefixes, suffixes, and configurable SSH options.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hostname_prefix\": \"string\",\n  \"hostname_suffix\": \"string\",\n  \"ssh_config_options\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Custom Icon for Resource Metadata\nDESCRIPTION: This Terraform configuration demonstrates how to use a custom icon for a resource metadata entry in Coder.  It utilizes the `coder_metadata` resource with the `icon` attribute, which accepts a valid path or URL to the icon. The `count` attribute ensures the resource is only provisioned when the workspace starts. The example utilizes a `kubernetes_service_account`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-metadata.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"coder_metadata\" \"resource_with_icon\" {\n  count = data.coder_workspace.me.start_count\n  resource_id = kubernetes_service_account.user_data.id\n  icon = \"/icon/database.svg\"\n  item {\n    key = \"name\"\n    value = kubernetes_deployment.coder[0].metadata[0].name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filter Coder Server Logs for Group/Role Sync\nDESCRIPTION: This snippet demonstrates how to filter the Coder server logs to show only the entries related to group/role synchronization. It requires shell access to the Coder server. It helps in troubleshooting sync-related issues by reducing log noise.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nCODER_VERBOSE=true\nCODER_LOG_FILTER=\".*userauth.*|.*groups returned.*\"\n```\n\n----------------------------------------\n\nTITLE: Installing JetBrains Gateway in Dockerfile\nDESCRIPTION: Installs JetBrains Gateway backend within a Dockerfile. Downloads and extracts the JetBrains Client Downloader, then uses it to download and install the IntelliJ IDEA backend. Performs cleanup to reduce image size. Requires `wget`, `tar`, and other common utilities.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-pre-install.md#_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu\n\n# Combine all apt operations in a single RUN command\n# Install only necessary packages\n# Clean up apt cache in the same layer\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    curl \\\n    git \\\n    golang \\\n    sudo \\\n    vim \\\n    wget \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Create user in a single layer\nARG USER=coder\nRUN useradd --groups sudo --no-create-home --shell /bin/bash ${USER} \\\n    && echo \"${USER} ALL=(ALL) NOPASSWD:ALL\" >/etc/sudoers.d/${USER} \\\n    && chmod 0440 /etc/sudoers.d/${USER}\n\nUSER ${USER}\nWORKDIR /home/${USER}\n\n# Install JetBrains Gateway in a single RUN command to reduce layers\n# Download, extract, use, and clean up in the same layer\nRUN mkdir -p ~/JetBrains \\\n    && wget -q https://download.jetbrains.com/idea/code-with-me/backend/jetbrains-clients-downloader-linux-x86_64-1867.tar.gz -P /tmp \\\n    && tar -xzf /tmp/jetbrains-clients-downloader-linux-x86_64-1867.tar.gz -C /tmp \\\n    && /tmp/jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader \\\n       --products-filter IU \\\n       --build-filter 243.26053.27 \\\n       --platforms-filter linux-x64 \\\n       --download-backends ~/JetBrains \\\n    && tar -xzf ~/JetBrains/backends/IU/*.tar.gz -C ~/JetBrains/backends/IU \\\n    && rm -f ~/JetBrains/backends/IU/*.tar.gz \\\n    && rm -rf /tmp/jetbrains-clients-downloader-linux-x86_64-1867* \\\n    && rm -rf /tmp/*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Querying affected API keys\nDESCRIPTION: This SQL query identifies users who have been deleted and whose API keys have been used since their deletion. It helps determine if the vulnerability has been exploited in a Coder environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/0001_user_apikeys_invalidation.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n  users.email,\n  users.updated_at,\n  api_keys.id,\n  api_keys.last_used\nFROM\n  users\nLEFT JOIN\n  api_keys\nON\n  api_keys.user_id = users.id\nWHERE\n  users.deleted\nAND\n  api_keys.last_used > users.updated_at\n;\n```\n\n----------------------------------------\n\nTITLE: Jupyter Notebook Module Integration\nDESCRIPTION: This Terraform module integrates Jupyter Notebook into the Coder environment. It requires the `agent_id` of the Coder agent. The module handles the installation and configuration of Jupyter Notebook.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"jupyter-notebook\" {\n  source   = \"registry.coder.com/modules/jupyter-notebook/coder\"\n  version  = \"1.0.19\"\n  agent_id = coder_agent.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Example Get Users Response\nDESCRIPTION: This is an example JSON response returned when getting a list of users. It includes an array of user objects, each containing properties like `avatar_url`, `created_at`, `email`, `id`, `last_seen_at`, `name`, `organization_ids`, `roles`, `status`, `theme_preference`, `updated_at`, and `username`. It also includes a `count` field representing the total number of users.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 0,\n  \"users\": [\n    {\n      \"avatar_url\": \"http://example.com\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"email\": \"user@example.com\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n      \"login_type\": \"\",\n      \"name\": \"string\",\n      \"organization_ids\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"roles\": [\n        {\n          \"display_name\": \"string\",\n          \"name\": \"string\",\n          \"organization_id\": \"string\"\n        }\n      ],\n      \"status\": \"active\",\n      \"theme_preference\": \"string\",\n      \"updated_at\": \"2019-08-24T14:15:22Z\",\n      \"username\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Coder SSH Command\nDESCRIPTION: The `coder ssh` command is used to start a shell session within a specified workspace. The `<workspace>` argument identifies the target workspace. Optional flags modify the connection behavior such as agent forwarding, GPG forwarding, and environment variable configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/ssh.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder ssh [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Provider Installation with Network Mirror\nDESCRIPTION: This snippet configures Terraform to use a network mirror for provider installation.  It specifies the URL of the mirror server where Terraform can download the necessary provider plugins.  The mirror URL is `https://terraform.example.com/providers/`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/offline.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n# network-mirror-example.tfrc\nprovider_installation {\n  network_mirror {\n    url = \"https://terraform.example.com/providers/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying build info with curl\nDESCRIPTION: This code snippet demonstrates how to query the build info endpoint using curl. It sends a GET request to the `/api/v2/buildinfo` endpoint, specifying that it accepts JSON.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/buildinfo \\\n  -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions workflow for testing and publishing Coder template\nDESCRIPTION: This YAML file defines a GitHub Actions workflow to test and publish a Coder template. It checks out the repository, sets up Terraform and Coder CLI, validates the Terraform template, pushes the template, creates a test workspace, runs example commands within the workspace, deletes the test workspace, and promotes the template version if the tests are successful.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/testing-templates.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nname: Test and Publish Coder Template\n\non:\n  push:\n    branches:\n      - main\n  workflow_dispatch:\n\njobs:\n  test-and-publish:\n    runs-on: ubuntu-latest\n    env:\n      TEMPLATE_NAME: \"my-template\"\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n\n      - name: Set up Terraform\n        uses: hashicorp/setup-terraform@v2\n        with:\n          terraform_version: latest\n\n      - name: Set up Coder CLI\n        uses: coder/setup-action@v1\n        with:\n          access_url: \"https://coder.example.com\"\n          coder_session_token: ${{ secrets.CODER_SESSION_TOKEN }}\n\n      - name: Validate Terraform template\n        run: terraform validate\n\n      - name: Get short commit SHA to use as template version name\n        id: name\n        run: echo \"version_name=$(git rev-parse --short HEAD)\" >> $GITHUB_OUTPUT\n\n      - name: Get latest commit title to use as template version description\n        id: message\n        run:\n          echo \"pr_title=$(git log --format=%s -n 1 ${{ github.sha }})\" >>\n          $GITHUB_OUTPUT\n\n      - name: Push template to Coder\n        run: |\n          coder templates push $TEMPLATE_NAME --activate=false --name ${{ steps.name.outputs.version_name }} --message \"${{ steps.message.outputs.pr_title }}\" --yes\n\n      - name: Create a test workspace and run some example commands\n        run: |\n          coder create -t $TEMPLATE_NAME --template-version ${{ steps.name.outputs.version_name }} test-${{ steps.name.outputs.version_name }} --yes\n          coder config-ssh --yes\n          # run some example commands\n          ssh coder.test-${{ steps.name.outputs.version_name }} -- make build\n\n      - name: Delete the test workspace\n        if: always()\n        run: coder delete test-${{ steps.name.outputs.version_name }} --yes\n\n      - name: Promote template version\n        if: success()\n        run: |\n          coder template version promote --template=$TEMPLATE_NAME --template-version=${{ steps.name.outputs.version_name }} --yes\n```\n\n----------------------------------------\n\nTITLE: Send Test Notification - cURL\nDESCRIPTION: This cURL command sends a test notification via the Coder API. It requires an API key for authentication via the `Coder-Session-Token` header. No specific request body is required.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X POST http://coder-server:8080/api/v2/notifications/test \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Active Replicas Response Body (JSON)\nDESCRIPTION: Defines the JSON structure of an active replica object returned when fetching the replicas. It contains replica details such as creation time, database latency, error messages, hostname, ID, region ID, and relay address. The response is an array of replica objects.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"database_latency\": 0,\n    \"error\": \"string\",\n    \"hostname\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"region_id\": 0,\n    \"relay_address\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get User Activity Insights with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve insights about user activity using a cURL request. It requires `start_time` and `end_time` parameters. A valid Coder API key is required. The API returns a JSON response containing a report with user activity data.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/insights/user-activity?start_time=2019-08-24T14%3A15%3A22Z&end_time=2019-08-24T14%3A15%3A22Z \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Updating a Template with Curl\nDESCRIPTION: This snippet demonstrates how to update template metadata using a PATCH request with curl. The request requires headers for accepting JSON and providing the Coder Session Token. The template ID is specified as a path parameter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/templates/{template} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for Wildcard Domain\nDESCRIPTION: This Caddyfile configuration sets up a reverse proxy with a wildcard domain for Coder. It uses the ACME issuer with a DNS challenge (Google Cloud DNS in this example) to obtain a wildcard certificate. Replace `coder.example.com`, `user@example.com`, and `my-gcp-project` with your actual domain, email, and GCP project ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n*.coder.example.com, coder.example.com {\n\n  reverse_proxy 127.0.0.1:3000\n\n  tls {\n    issuer acme {\n      email user@example.com\n      dns googleclouddns {\n        gcp_project my-gcp-project\n      }\n    }\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Get External Auth by ID with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve a specific external authentication by its ID using a `curl` command. It sends a GET request to the `/api/v2/external-auth/{externalauth}` endpoint, where `{externalauth}` is the ID of the external authentication. It requires the `Coder-Session-Token` header for authentication and expects a JSON response containing the external authentication details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/external-auth/{externalauth} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Extending Workspace Stop Time Example\nDESCRIPTION: This example shows how to extend the stop time of a workspace named 'my-workspace' by 90 minutes from the current time. This command is executed using the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule_extend.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ coder schedule extend my-workspace 90m\n```\n\n----------------------------------------\n\nTITLE: Coder Agent Resource with Metadata Snippets (Terraform)\nDESCRIPTION: This code defines a Coder agent resource with multiple metadata blocks. Each metadata block defines a metric to be displayed, including CPU usage, memory usage, disk usage, and load average. The `script` attribute specifies the command to be executed to retrieve the metric value, and the `interval` attribute specifies how often the command should be executed. `coder stat` command to get container CPU and memory usage.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/agent-metadata.md#_snippet_0\n\nLANGUAGE: tf\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n  os             = \"linux\"\n  ...\n  metadata {\n    display_name = \"CPU Usage\"\n    key  = \"cpu\"\n    # Uses the coder stat command to get container CPU usage.\n    script = \"coder stat cpu\"\n    interval = 1\n    timeout = 1\n  }\n\n  metadata {\n    display_name = \"Memory Usage\"\n    key  = \"mem\"\n    # Uses the coder stat command to get container memory usage in GiB.\n    script = \"coder stat mem --prefix Gi\"\n    interval = 1\n    timeout = 1\n  }\n\n  metadata {\n    display_name = \"CPU Usage (Host)\"\n    key  = \"cpu_host\"\n    # calculates CPU usage by summing the \"us\", \"sy\" and \"id\" columns of\n    # top.\n    script = <<EOT\n    top -bn1 | awk 'FNR==3 {printf \"%2.0f%%\", $2+$3+$4}'\n    EOT\n    interval = 1\n    timeout = 1\n  }\n\n    metadata {\n    display_name = \"Memory Usage (Host)\"\n    key  = \"mem_host\"\n    script = <<EOT\n    free | awk '/^Mem/ { printf(\"%.0f%%\", $4/$2 * 100.0) }'\n    EOT\n    interval = 1\n    timeout = 1\n  }\n\n  metadata {\n    display_name = \"Disk Usage\"\n    key  = \"disk\"\n    script = \"df -h | awk '$6 ~ /^\\/$/ { print $5 }'\"\n    interval = 1\n    timeout = 1\n  }\n\n  metadata {\n    display_name = \"Load Average\"\n    key  = \"load\"\n    script = <<EOT\n        awk '{print $1,$2,$3}' /proc/loadavg\n    EOT\n    interval = 1\n    timeout = 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling and Pushing Terraform State - Shell\nDESCRIPTION: These commands allow a Coder admin to manually pull and push the Terraform state for a workspace.  It's executed from the command line using the Coder CLI.  This is advanced usage and can cause issues if not done correctly.  <username> and <workspace name> must be replaced with the actual values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-management.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder state pull <username>/<workspace name>\n# Make changes\ncoder state push <username>/<workspace name>\n```\n\n----------------------------------------\n\nTITLE: Create Coder Project in OpenShift\nDESCRIPTION: Creates a new OpenShift project named 'coder'. This isolates Coder's resources within the OpenShift cluster.  This provides a dedicated namespace for the Coder deployment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\noc new-project coder\n```\n\n----------------------------------------\n\nTITLE: Available ACL Users/Groups Response - JSON\nDESCRIPTION: This JSON snippet presents the structure of the response when retrieving available users and groups for template ACL assignment. It contains a list of groups and users with their associated details.  It includes fields like avatar URL, ID, display name, email, and membership information.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_113\n\nLANGUAGE: json\nCODE:\n```\n[{\"groups\": [{\"avatar_url\": \"string\",\"display_name\": \"string\",\"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\"members\": [{\"avatar_url\": \"http://example.com\",\"created_at\": \"2019-08-24T14:15:22Z\",\"email\": \"user@example.com\",\"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\"last_seen_at\": \"2019-08-24T14:15:22Z\",\"login_type\": \"\",\"name\": \"string\",\"status\": \"active\",\"theme_preference\": \"string\",\"updated_at\": \"2019-08-24T14:15:22Z\",\"username\": \"string\"}],\"name\": \"string\",\"organization_display_name\": \"string\",\"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\"organization_name\": \"string\",\"quota_allowance\": 0,\"source\": \"user\",\"total_member_count\": 0}],\"users\": [{\"avatar_url\": \"http://example.com\",\"created_at\": \"2019-08-24T14:15:22Z\",\"email\": \"user@example.com\",\"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\"last_seen_at\": \"2019-08-24T14:15:22Z\",\"login_type\": \"\",\"name\": \"string\",\"status\": \"active\",\"theme_preference\": \"string\",\"updated_at\": \"2019-08-24T14:15:22Z\",\"username\": \"string\"}]}]\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Adding Workspace to Favorites\nDESCRIPTION: This command adds a specified workspace to the user's list of favorite workspaces within the Coder environment. The command takes the workspace name as an argument. It has aliases 'fav' and 'favourite' for easier use.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/favorite.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder favorite <workspace>\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variable\nDESCRIPTION: This HCL snippet adds an environment variable named `CODER_AGENT_SUBSYSTEM` with the value `exectrace` to the workspace pod specification. This allows the coder agent to know to look for the exectrace subsystem.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"kubernetes_pod\" \"main\" {\n  ...\n  spec {\n    ...\n    env {\n      name = \"CODER_AGENT_SUBSYSTEM\"\n      value = \"exectrace\"\n    }\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for Coder Reverse Proxy\nDESCRIPTION: This Caddyfile configures Caddy as a reverse proxy for Coder, enabling on-demand TLS certificate generation using Let's Encrypt/ZeroSSL. It defines the Coder domain and wildcard domain, specifying the upstream Coder service address and email for certificate requests.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_1\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n    on_demand_tls {\n        ask http://example.com\n    }\n}\n\ncoder.example.com, *.coder.example.com {\n  reverse_proxy coder:7080\n  tls {\n        on_demand\n      issuer acme {\n         email email@example.com\n      }\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Restart Workspace Usage - Coder CLI\nDESCRIPTION: Shows the basic usage of the `coder restart` command in the command-line interface (CLI). It requires specifying the workspace name as an argument. This command restarts the specified workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/restart.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder restart [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Workspace Build Request Body Example\nDESCRIPTION: This is an example of the JSON request body used to create a workspace build.  It includes parameters such as dry_run (boolean), log_level (string), orphan (boolean), rich_parameter_values (array of name/value pairs), state (array of integers), template_version_id (UUID), template_version_preset_id (UUID) and transition (string).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dry_run\": true,\n  \"log_level\": \"debug\",\n  \"orphan\": true,\n  \"rich_parameter_values\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"state\": [\n    0\n  ],\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n  \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n  \"transition\": \"start\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exchange OAuth2 Tokens with curl\nDESCRIPTION: Exchanges OAuth2 tokens using a POST request to the `/oauth2/tokens` endpoint. Requires parameters in the body, such as `client_id`, `client_secret`, `code`, `refresh_token`, and `grant_type`. Returns a JSON response with access token, refresh token, and expiry details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/oauth2/tokens \\\n  -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Making a Setup Script Executable\nDESCRIPTION: This shell script shows how to make a setup script executable within a dotfiles repository.  It changes the permissions of the script using `chmod`, commits the changes to Git, and pushes them to the remote repository. This is required for Coder to automatically execute the script during workspace setup.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-dotfiles.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd <path_to_dotfiles_repo>\nchmod +x <script_name>\ngit commit -m \"Make <script_name> executable\" <script_name>\ngit push\n```\n\n----------------------------------------\n\nTITLE: Add Organization Member - Coder CLI\nDESCRIPTION: This command adds a new member to the current organization using the Coder CLI. It requires either the username or user ID of the user to be added as an argument.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_members_add.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations members add <username | user_id>\n```\n\n----------------------------------------\n\nTITLE: Example Workspace Quota Response JSON\nDESCRIPTION: This JSON represents the response (200 OK) from the get workspace quota request. It shows the user's budget and credits consumed, conforming to the `codersdk.WorkspaceQuota` schema.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"budget\": 0,\n  \"credits_consumed\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Login\nDESCRIPTION: This command logs in to a Coder deployment using the Coder CLI. It requires the URL of the Coder deployment and a valid session token obtained through the web browser.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ coder login https://coder.example.com\nAttempting to authenticate with config URL: 'https://coder.example.com'\nOpen the following in your browser:\n\n    https://coder.example.com/cli-auth\n\n> Paste your token here:\n```\n\n----------------------------------------\n\nTITLE: Disabling default Apache site and stopping Apache\nDESCRIPTION: This code snippet disables the default Apache site configuration and stops the Apache service.  This prepares the server for the Coder-specific Apache configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo a2dissite 000-default.conf\nsudo systemctl stop apache2\n```\n\n----------------------------------------\n\nTITLE: Adding cgroup entries to cmdline.txt - bash\nDESCRIPTION: This bash command uses `sed` to add the cgroup entries (`cgroup_memory=1 cgroup_enable=memory`) to the `/boot/firmware/cmdline.txt` file. It automatically modifies the file to include the parameters needed for memory cgroup functionality, and needs `sudo` to work.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo sed -i '$s/$/ cgroup_memory=1 cgroup_enable=memory/' /boot/firmware/cmdline.txt\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Database for Coder\nDESCRIPTION: This SQL snippet creates a new database named 'coder'. The 'coder' role created earlier needs access to this database.  It assumes you are connected to the PostgreSQL server as the 'coder' user (using `psql -U coder`).\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE DATABASE coder;\n```\n\n----------------------------------------\n\nTITLE: Suspend Example User via Coder CLI\nDESCRIPTION: This example demonstrates how to suspend a user with the username 'example_user'.  It uses the `coder users suspend` command. No dependencies are listed other than the Coder CLI installation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_suspend.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder users suspend example_user\n```\n\n----------------------------------------\n\nTITLE: Suspend User via Coder CLI\nDESCRIPTION: This command updates a user's status to 'suspended', preventing them from logging into the Coder platform. It takes either the username or user ID as an argument. No specific dependencies beyond the Coder CLI are required.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_suspend.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder users suspend [flags] <username|user_id>\n```\n\n----------------------------------------\n\nTITLE: Example Workspace Start Schedule\nDESCRIPTION: This example shows how to schedule a workspace named `my-workspace` to start at 9:30 AM, from Monday to Friday, in the Europe/Dublin timezone. It uses the `coder schedule start` command with the appropriate parameters.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule_start.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder schedule start my-workspace 9:30AM Mon-Fri Europe/Dublin\n```\n\n----------------------------------------\n\nTITLE: Pushing Coder Template with Managed Variables\nDESCRIPTION: This command pushes a Coder template with the host, CA certificate, token, and namespace as managed variables. It uses the coder templates push command. It depends on the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates push \\\n    --variable host=$CLUSTER_ADDRESS \\\n    --variable cluster_ca_certificate=$CLUSTER_CA_CERTIFICATE \\\n    --variable token=$CLUSTER_SERVICEACCOUNT_TOKEN \\\n    --variable namespace=coder-workspaces\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace Build Timings with curl\nDESCRIPTION: This shell script demonstrates how to use curl to retrieve workspace build timings from the Coder API. It makes a GET request to the specified endpoint, including headers for accepting JSON and providing an API key for authentication using the Coder-Session-Token header. The {workspacebuild} parameter in the URL path must be replaced with the appropriate UUID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild}/timings \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example devcontainer.json Configuration\nDESCRIPTION: This JSON snippet shows an example configuration for the `devcontainer.json` file. It includes the `features` property, which specifies features to be included in the development container. The content must be placed in a `devcontainer.json` file in the root of a project.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/devcontainers/add-devcontainer.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n# …\n{\n  \"features\": {\n      \"ghcr.io/devcontainers/features/common-utils:2\": {}\n  }\n}\n# …\n```\n\n----------------------------------------\n\nTITLE: Get User External Auths with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve a list of user external authentications using a `curl` command. It sends a GET request to the `/api/v2/external-auth` endpoint with the `Coder-Session-Token` header for authentication.  The expected response is a JSON array of external authentication objects.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/external-auth \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: G-Suite SMTP Email Configuration\nDESCRIPTION: This snippet shows how to configure Coder to send emails using G-Suite SMTP.  It involves setting the `CODER_EMAIL_SMARTHOST`, `CODER_EMAIL_AUTH_USERNAME`, and `CODER_EMAIL_AUTH_PASSWORD` environment variables. You will need to create an App Password in your Google account.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCODER_EMAIL_SMARTHOST=smtp.gmail.com:465\nCODER_EMAIL_AUTH_USERNAME=<user>@<domain>\nCODER_EMAIL_AUTH_PASSWORD=\"<app password created above>\"\n```\n\n----------------------------------------\n\nTITLE: Forwarding a Remote TCP Port using `coder port-forward`\nDESCRIPTION: This command forwards the remote TCP port 8080 on the specified Coder workspace to the local port 8000. This allows developers to access services running on port 8080 within the workspace from their local machine on port 8000.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/port-forwarding.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder port-forward myworkspace --tcp 8000:8080\n```\n\n----------------------------------------\n\nTITLE: Example Template Variables Response (JSON)\nDESCRIPTION: This JSON snippet represents a possible response from the `/templateversions/{templateversion}/variables` endpoint.  It's an array of objects, where each object represents a template variable. Each variable includes properties like 'default_value', 'description', 'name', 'required', 'sensitive', 'type', and 'value'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"default_value\": \"string\",\n    \"description\": \"string\",\n    \"name\": \"string\",\n    \"required\": true,\n    \"sensitive\": true,\n    \"type\": \"string\",\n    \"value\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying File Browser with Coder Registry Module in Terraform\nDESCRIPTION: This Terraform configuration uses the filebrowser module from the Coder registry to deploy File Browser. It simplifies the deployment process by using a pre-built module, requiring only the agent_id to be specified. It uses version 1.0.8 of the module.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_19\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"filebrowser\" {\n  source   = \"registry.coder.com/modules/filebrowser/coder\"\n  version  = \"1.0.8\"\n  agent_id = coder_agent.main.id\n}\n```\n\n----------------------------------------\n\nTITLE: Check Security Context Constraints\nDESCRIPTION: Displays the Security Context Constraints (SCC) available in the OpenShift cluster. This helps determine if `readOnlyRootFilesystem` is required. The output shows which SCCs enforce a read-only root filesystem.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\noc get scc -o wide\nNAME               PRIV    CAPS                   SELINUX     RUNASUSER          FSGROUP     SUPGROUP    PRIORITY     READONLYROOTFS   VOLUMES\nrestricted-custom   false   [\"NET_BIND_SERVICE\"]   MustRunAs   MustRunAsRange     MustRunAs   RunAsAny    <no value>   true             [\"configMap\",\"downwardAPI\",\"emptyDir\",\"ephemeral\",\"persistentVolumeClaim\",\"projected\",\"secret\"]\nrestricted-v2       false   [\"NET_BIND_SERVICE\"]   MustRunAs   MustRunAsRange     MustRunAs   RunAsAny    <no value>   false            [\"configMap\",\"downwardAPI\",\"emptyDir\",\"ephemeral\",\"persistentVolumeClaim\",\"projected\",\"secret\"]\n```\n\n----------------------------------------\n\nTITLE: Set OIDC Group Mapping Environment Variable\nDESCRIPTION: This environment variable configures a mapping between OIDC group IDs and Coder group names. It's a JSON string where keys are OIDC group IDs and values are corresponding Coder group names.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nCODER_OIDC_GROUP_MAPPING='{\"myOIDCGroupID\": \"myCoderGroupName\"}'\n```\n\n----------------------------------------\n\nTITLE: Coder Agent for VS Code Web (Startup Script)\nDESCRIPTION: This Terraform resource configures a Coder agent to install and run VS Code Web. The startup script downloads and extracts the VS Code CLI, then starts the web server on a specified port. It disables the connection token and accepts the server license terms.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n       arch           = \"amd64\"\n       os             = \"linux\"\n       startup_script = <<EOF\n       #!/bin/sh\n       # install VS Code\n       curl -Lk 'https://code.visualstudio.com/sha/download?build=stable&os=cli-alpine-x64' --output vscode_cli.tar.gz\n       mkdir -p /tmp/vscode-cli\n       tar -xf vscode_cli.tar.gz -C /tmp/vscode-cli\n       rm vscode_cli.tar.gz\n       # start the web server on a specific port\n       /tmp/vscode-cli/code serve-web --port 13338 --without-connection-token  --accept-server-license-terms >/tmp/vscode-web.log 2>&1 &\n       EOF\n   }\n```\n\n----------------------------------------\n\nTITLE: Starting a Coder Server\nDESCRIPTION: Demonstrates how to start the Coder server using the CLI. This initiates the Coder server process, allowing users to access and manage development environments. This command will start the Coder server application.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/index.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder server\n```\n\n----------------------------------------\n\nTITLE: Retrieving Workspace Metadata using Curl\nDESCRIPTION: This example demonstrates how to retrieve workspace metadata using a curl command. It requires a valid API key to be included in the 'Coder-Session-Token' header and the workspace ID in the URL path. The expected response is a JSON object containing the workspace metadata.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaces/{workspace} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update User Profile with curl\nDESCRIPTION: This shell command demonstrates how to update a user's profile using curl. It sends a PUT request to the specified endpoint, and the request requires the Content-Type header, Accept header and the Coder-Session-Token for authentication. The request body should be a JSON object containing the updated profile information.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/profile \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Coder using Shell Script\nDESCRIPTION: This shell command downloads and executes the Coder installation script from the coder.com website. It uses curl to fetch the script and pipes it to sh for execution. This is the recommended method for installing Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/azure-vm.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Updating Organization Roles via CLI\nDESCRIPTION: This command updates an organization's custom role. It can be executed with a role name and flags to modify the role's properties. The command supports reading the role definition from stdin using a JSON file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_roles_update.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations roles update [flags] <role_name>\n```\n\n----------------------------------------\n\nTITLE: Example Get Group Response JSON\nDESCRIPTION: This JSON payload represents the response (200 OK) when successfully retrieving a group. It includes the group's details such as its ID, name, display name, and associated members. This response corresponds to the `codersdk.Group` schema.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"string\",\n  \"display_name\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"members\": [\n    {\n      \"avatar_url\": \"http://example.com\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"email\": \"user@example.com\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n      \"login_type\": \"\",\n      \"name\": \"string\",\n      \"status\": \"active\",\n      \"theme_preference\": \"string\",\n      \"updated_at\": \"2019-08-24T14:15:22Z\",\n      \"username\": \"string\"\n    }\n  ],\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"quota_allowance\": 0,\n  \"source\": \"user\",\n  \"total_member_count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a headless user with Coder CLI\nDESCRIPTION: This command creates a headless user account in Coder using the CLI. It requires the User Admin role or above. The `--email` flag specifies the email address, `--username` the username, and `--login-type=\"none\"` indicates that the user is a headless account.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/headless-auth.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncoder users create \\\n  --email=\"coder-bot@coder.com\" \\\n  --username=\"coder-bot\" \\\n  --login-type=\"none \\\n\n```\n\n----------------------------------------\n\nTITLE: Checking cgroup controllers - List existing controllers\nDESCRIPTION: This shell command checks the currently available cgroup controllers. It's used to verify if `memory` is enabled before enabling it in Raspberry Pi OS. The expected output without `memory` includes `cpuset cpu io pids`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cat /sys/fs/cgroup/cgroup.controllers\ncpuset cpu io pids\n\n$ cat /sys/fs/cgroup/cgroup.subtree_control\ncpuset cpu io pids\n```\n\n----------------------------------------\n\nTITLE: Downloading CLI from Coder Deployment\nDESCRIPTION: This script downloads the appropriate Coder CLI for the user's machine from the specified Coder deployment. This ensures that the CLI version matches the server version. It retrieves the install.sh script from the Coder deployment and executes it using the sh interpreter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cli.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://coder.example.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Defining Coder Provider URL in Terraform\nDESCRIPTION: This snippet shows how to overwrite the site-wide access URL at the template level when defining the Coder provider in Terraform. The `url` argument allows you to specify a custom URL for the Coder server, which is particularly useful for debugging connectivity issues between the workspace agent and the Coder server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/index.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"coder\" {\n  url = \"https://coder.namespace.svc.cluster.local\"\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Extra Property from Access Token with Coder CLI\nDESCRIPTION: This example demonstrates how to obtain an extra property (e.g., authed_user.id) from an access token using the coder external-auth access-token command with the --extra flag.  It shows how to retrieve additional metadata associated with the token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/external-auth_access-token.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncoder external-auth access-token slack --extra \"authed_user.id\"\n```\n\n----------------------------------------\n\nTITLE: Opening a workspace with coder CLI in console\nDESCRIPTION: Opens a workspace in VS Code Desktop using the coder CLI.  The command takes the workspace name and optionally a directory within the workspace as arguments.  The `--generate-token` flag can be used for automatic configuration of VS Code Desktop, especially useful when running the command on a remote machine.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/open_vscode.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder open vscode [flags] <workspace> [<directory in workspace>]\n```\n\n----------------------------------------\n\nTITLE: Update Role IdP Sync Settings with PATCH (curl)\nDESCRIPTION: Updates role IdP (Identity Provider) synchronization settings for a specific organization using a PATCH request. Requires the organization ID and a valid Coder session token for authentication. The request body should be a JSON object defining the new settings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_70\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/roles \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Starting a provisioner with specific tags (user token)\nDESCRIPTION: Starts a provisioner with specific tags using a user's authentication token after logging in with `coder login`. The `--tag` flag specifies the tags for the provisioner.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncoder login https://<your-coder-url>\ncoder provisioner start \\\n  --tag environment=kubernetes\n```\n\n----------------------------------------\n\nTITLE: Example External Auth Response (JSON)\nDESCRIPTION: This JSON snippet provides an example of the response received when retrieving external authentication details for a template version. It includes fields such as `authenticate_url`, `authenticated`, `display_icon`, `display_name`, `id`, `optional`, and `type`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"authenticate_url\": \"string\",\n    \"authenticated\": true,\n    \"display_icon\": \"string\",\n    \"display_name\": \"string\",\n    \"id\": \"string\",\n    \"optional\": true,\n    \"type\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom PostgreSQL Schema\nDESCRIPTION: This SQL snippet creates a new schema named 'myschema' within the PostgreSQL database. This allows for isolating Coder's data from other applications.  Requires connection to the database as the 'coder' user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE SCHEMA myschema;\n```\n\n----------------------------------------\n\nTITLE: Kubernetes ServiceMonitor Configuration\nDESCRIPTION: This YAML defines a `ServiceMonitor` resource in Kubernetes for use with the Prometheus Operator, enabling automatic discovery and scraping of Coder metrics.  It specifies the endpoint `prom-http` on port 2112, the namespace `coder`, and uses labels to select the Coder service.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/prometheus.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: coder-service-monitor\n  namespace: coder\nspec:\n  endpoints:\n    - port: prom-http\n      interval: 10s\n      scrapeTimeout: 10s\n  namespaceSelector:\n    matchNames:\n    - coder\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: coder\n```\n\n----------------------------------------\n\nTITLE: Reporting CSP violations with curl\nDESCRIPTION: This code snippet shows how to report CSP violations using curl. It sends a POST request to `/api/v2/csp/reports` with a JSON payload and includes the `Content-Type` and `Coder-Session-Token` headers for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X POST http://coder-server:8080/api/v2/csp/reports \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Schedule Workspace Start\nDESCRIPTION: This command schedules a Coder workspace to start regularly at a specific time. The schedule is defined by a start time, an optional day-of-week, and an optional timezone location. It specifies that the start time must be in either 12-hour or 24-hour format. Day-of-week should be specified in cron format. The location must be a valid IANA timezone database location.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule_start.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder schedule start <workspace-name> { <start-time> [day-of-week] [location] | manual }\n```\n\n----------------------------------------\n\nTITLE: Push Coder Template\nDESCRIPTION: This command pushes the modified Coder template located in the `./openshift-k8s` directory to the Coder server. The template is named \"kubernetes\".  This command assumes you have the coder cli tool installed and are authenticated to a coder deployment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncoder template push kubernetes -d .\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Dormancy Status with curl\nDESCRIPTION: This curl command demonstrates how to update the dormancy status of a workspace using the PUT method. It requires the workspace ID and a JSON payload indicating whether the workspace should be dormant or active. The 'Coder-Session-Token' header is necessary for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/workspaces/{workspace}/dormant \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Starting an Organization-Scoped Provisioner (Shell)\nDESCRIPTION: This command starts a Coder provisioner with organization scope. It assigns the provisioner to a specific organization.  If the `--org` flag is omitted, the provisioner will be assigned to the default organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncoder provisioner start --org <organization_name>\n```\n\nLANGUAGE: shell\nCODE:\n```\ncoder provisioner start\n```\n\n----------------------------------------\n\nTITLE: Getting Available ACL Users/Groups - Shell\nDESCRIPTION: This shell script shows how to retrieve available users and groups for a template's ACL using the GET method with curl.  It requires the Coder-Session-Token for authentication and specifies that it accepts JSON format responses.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_112\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates/{template}/acl/available \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Adding a license via Coder CLI (JWT File)\nDESCRIPTION: This snippet demonstrates how to add a Coder license using the Coder CLI by specifying the path to a .jwt license file. It assumes the Coder CLI is already installed and the user has logged in to their Coder deployment. The `-f` flag specifies the path to the license file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder licenses add -f <path to your license key>\n```\n\n----------------------------------------\n\nTITLE: Request OTP via API - Shell\nDESCRIPTION: This shell script demonstrates how to request a one-time passcode via the `/users/otp/request` endpoint. It sends a POST request with the user's email in the JSON payload.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/otp/request \\\n  -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Generating a Support Bundle\nDESCRIPTION: This command generates a file containing detailed troubleshooting information about the Coder deployment and workspace connections. It takes a workspace name (and optionally an agent name) as input and generates a zip file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/support_bundle.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder support bundle [flags] <workspace> [<agent>]\n```\n\n----------------------------------------\n\nTITLE: Setting the Webhook Endpoint in Bash\nDESCRIPTION: This bash command sets the environment variable `CODER_NOTIFICATIONS_WEBHOOK_ENDPOINT` to the URL of the Microsoft Teams webhook endpoint. This endpoint is used by Coder to send notification payloads to the Teams workflow.  The URL should be replaced with the actual webhook endpoint URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/teams.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CODER_NOTIFICATIONS_WEBHOOK_ENDPOINT=https://prod-16.eastus.logic.azure.com:443/workflows/f8fbe3e8211e4b638...`\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Role Trust Relationship with JSON\nDESCRIPTION: Configures the trust relationship for an AWS role to allow Google Cloud service accounts to assume the role using web identity federation.  It specifies the Google accounts as the federated principal and requires the OAuth 2 Client ID to match.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/gcp-to-aws.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Federated\": \"accounts.google.com\"\n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"accounts.google.com:aud\": \"<enter-OAuth-client-ID-here\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Template Version Dry-Run by Job ID with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve a template version dry-run job using a curl command. It requires the templateversion ID, the jobID of the dry-run, a valid Accept header, and a Coder-Session-Token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/dry-run/{jobID} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Workspace Resources Response Example\nDESCRIPTION: This JSON snippet exemplifies the structure of the response when querying workspace resources. It provides detailed information about agents, applications, and other resources associated with the workspace. The information provided by this endpoint includes agent configuration, installed applications, resource health, and network configurations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"agents\": [\n      {\n        \"api_version\": \"string\",\n        \"apps\": [\n          {\n            \"command\": \"string\",\n            \"display_name\": \"string\",\n            \"external\": true,\n            \"health\": \"disabled\",\n            \"healthcheck\": {\n              \"interval\": 0,\n              \"threshold\": 0,\n              \"url\": \"string\"\n            },\n            \"hidden\": true,\n            \"icon\": \"string\",\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"open_in\": \"slim-window\",\n            \"sharing_level\": \"owner\",\n            \"slug\": \"string\",\n            \"statuses\": [\n              {\n                \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"message\": \"string\",\n                \"needs_user_attention\": true,\n                \"state\": \"working\",\n                \"uri\": \"string\",\n                \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n              }\n            ],\n            \"subdomain\": true,\n            \"subdomain_name\": \"string\",\n            \"url\": \"string\"\n          }\n        ],\n        \"architecture\": \"string\",\n        \"connection_timeout_seconds\": 0,\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"directory\": \"string\",\n        \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n        \"display_apps\": [\n          \"vscode\"\n        ],\n        \"environment_variables\": {\n          \"property1\": \"string\",\n          \"property2\": \"string\"\n        },\n        \"expanded_directory\": \"string\",\n        \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n        \"health\": {\n          \"healthy\": false,\n          \"reason\": \"agent has lost connection\"\n        },\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"instance_id\": \"string\",\n        \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n        \"latency\": {\n          \"property1\": {\n            \"latency_ms\": 0,\n            \"preferred\": true\n          },\n          \"property2\": {\n            \"latency_ms\": 0,\n            \"preferred\": true\n          }\n        },\n        \"lifecycle_state\": \"created\",\n        \"log_sources\": [\n          {\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"display_name\": \"string\",\n            \"icon\": \"string\",\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n          }\n        ],\n        \"logs_length\": 0,\n        \"logs_overflowed\": true,\n        \"name\": \"string\",\n        \"operating_system\": \"string\",\n        \"ready_at\": \"2019-08-24T14:15:22Z\",\n        \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"scripts\": [\n          {\n            \"cron\": \"string\",\n            \"display_name\": \"string\",\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"log_path\": \"string\",\n            \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n            \"run_on_start\": true,\n            \"run_on_stop\": true,\n            \"script\": \"string\",\n            \"start_blocks_login\": true,\n            \"timeout\": 0\n          }\n        ],\n        \"started_at\": \"2019-08-24T14:15:22Z\",\n        \"startup_script_behavior\": \"blocking\",\n        \"status\": \"connecting\",\n        \"subsystems\": [\n          \"envbox\"\n        ],\n        \"troubleshooting_url\": \"string\",\n        \"updated_at\": \"2019-08-24T14:15:22Z\",\n        \"version\": \"string\"\n      }\n    ],\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"hide\": true,\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n    \"metadata\": [\n      {\n        \"key\": \"string\",\n        \"sensitive\": true,\n        \"value\": \"string\"\n      }\n    ],\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"workspace_transition\": \"start\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get SCIM User By ID with curl\nDESCRIPTION: This curl command retrieves a specific SCIM user by their ID. It sends a GET request to the specified endpoint, including the user ID in the path, and an authorization header.  It depends on a valid API key for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_85\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/scim/v2/Users/{id} \\\n  -H 'Authorizaiton: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Template Insights with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve insights about templates using a cURL request. It requires `start_time`, `end_time`, and `interval` parameters. A valid Coder API key is also required for authentication.  The API returns a JSON response containing interval reports and overall reports on template usage.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/insights/templates?start_time=2019-08-24T14%3A15%3A22Z&end_time=2019-08-24T14%3A15%3A22Z&interval=week \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Coder Token (Bash)\nDESCRIPTION: This command creates a Kubernetes secret named `coder-token` using the `kubectl create secret generic` command. The secret stores the Coder token, which is necessary for the integration to authenticate with the Coder platform. Replace `<token>` with the actual Coder token value.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-xray.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic coder-token \\\n  --from-literal=coder-token='<token>'\n```\n\n----------------------------------------\n\nTITLE: Rotate DB Encryption Keys\nDESCRIPTION: Executes the `coder server dbcrypt rotate` command to rotate database encryption keys. This command requires specifying the Postgres connection URL, authentication method, a new encryption key, and old encryption keys. The keys must be base64-encoded. Bypassing prompts with the `--yes` flag is also supported.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server_dbcrypt_rotate.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server dbcrypt rotate [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Dotfiles with Bypass Prompt\nDESCRIPTION: Installs a dotfiles repository non-interactively using the --yes flag, which bypasses any prompts. This is useful for automated setups or when user interaction is not desired.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/dotfiles.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder dotfiles --yes git@github.com:example/dotfiles.git\n```\n\n----------------------------------------\n\nTITLE: Getting Licenses via API with Curl\nDESCRIPTION: This snippet showcases how to retrieve a list of licenses using the Coder API v2 with a GET request. It utilizes curl to send the request to the `/licenses` endpoint and requires a valid `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/licenses \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Notification Dispatch Methods - Example Response\nDESCRIPTION: This is an example JSON response for the Get Notification Dispatch Methods endpoint. It shows the structure of the JSON that the server returns, including the available dispatch methods and the default method.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"available\": [\n      \"string\"\n    ],\n    \"default\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get User Git SSH Key with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve a user's Git SSH key using a curl command. It sends a GET request to the `/users/{user}/gitsshkey` endpoint, including the user identifier in the path. The request requires `Accept: application/json` and `Coder-Session-Token` headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/gitsshkey \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Workspace Agent Response\nDESCRIPTION: This JSON snippet provides an example of the comprehensive response returned when retrieving a workspace agent by ID. It includes details such as API version, apps, architecture, environment variables, health status, and various IDs and timestamps.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_version\": \"string\",\n  \"apps\": [\n    {\n      \"command\": \"string\",\n      \"display_name\": \"string\",\n      \"external\": true,\n      \"health\": \"disabled\",\n      \"healthcheck\": {\n        \"interval\": 0,\n        \"threshold\": 0,\n        \"url\": \"string\"\n      },\n      \"hidden\": true,\n      \"icon\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"open_in\": \"slim-window\",\n      \"sharing_level\": \"owner\",\n      \"slug\": \"string\",\n      \"statuses\": [\n        {\n          \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n          \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"icon\": \"string\",\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"message\": \"string\",\n          \"needs_user_attention\": true,\n          \"state\": \"working\",\n          \"uri\": \"string\",\n          \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n        }\n      ],\n      \"subdomain\": true,\n      \"subdomain_name\": \"string\",\n      \"url\": \"string\"\n    }\n  ],\n  \"architecture\": \"string\",\n  \"connection_timeout_seconds\": 0,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"directory\": \"string\",\n  \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n  \"display_apps\": [\n    \"vscode\"\n  ],\n  \"environment_variables\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"expanded_directory\": \"string\",\n  \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n  \"health\": {\n    \"healthy\": false,\n    \"reason\": \"agent has lost connection\"\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"instance_id\": \"string\",\n  \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n  \"latency\": {\n    \"property1\": {\n      \"latency_ms\": 0,\n      \"preferred\": true\n    },\n    \"property2\": {\n      \"latency_ms\": 0,\n      \"preferred\": true\n    }\n  },\n  \"lifecycle_state\": \"created\",\n  \"log_sources\": [\n    {\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"display_name\": \"string\",\n      \"icon\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n    }\n  ],\n  \"logs_length\": 0,\n  \"logs_overflowed\": true,\n  \"name\": \"string\",\n  \"operating_system\": \"string\",\n  \"ready_at\": \"2019-08-24T14:15:22Z\",\n  \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n  \"scripts\": [\n    {\n      \"cron\": \"string\",\n      \"display_name\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"log_path\": \"string\",\n      \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n      \"run_on_start\": true,\n      \"run_on_stop\": true,\n      \"script\": \"string\",\n      \"start_blocks_login\": true,\n      \"timeout\": 0\n    }\n  ],\n  \"started_at\": \"2019-08-24T14:15:22Z\",\n  \"startup_script_behavior\": \"blocking\",\n  \"status\": \"connecting\",\n  \"subsystems\": [\n    \"envbox\"\n  ],\n  \"troubleshooting_url\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"version\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioner Keys Usage\nDESCRIPTION: Shows the general usage of the `coder provisioner keys` command. This command serves as a parent command for managing provisioner keys.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_keys.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner keys\n```\n\n----------------------------------------\n\nTITLE: Authenticate to OpenShift\nDESCRIPTION: Authenticates to the OpenShift cluster using a token and server URL.  The token provides authentication credentials, and the server URL specifies the cluster's API endpoint. Replace `<cluster-url>` with the actual URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\noc login --token=w4r...04s --server=<cluster-url>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Agent on Google Cloud Instance using curl\nDESCRIPTION: This snippet details the process of authenticating an agent running on a Google Cloud instance.  It uses a POST request to `/api/v2/workspaceagents/google-instance-identity` along with the required headers to indicate JSON format, and the `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X POST http://coder-server:8080/api/v2/workspaceagents/google-instance-identity \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Authenticate Coder CLI with Web UI\nDESCRIPTION: This command authenticates the Coder CLI with the Coder web UI. It is required before configuring SSH access. The <accessURL> parameter should be replaced with the actual URL of your Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncoder login <accessURL>\n```\n\n----------------------------------------\n\nTITLE: Defining Filebrowser Coder App\nDESCRIPTION: This Terraform code defines a `coder_app` resource for Filebrowser, which provides a web-based file management interface. The `agent_id` links the app to the Coder agent. The `url` specifies the address of the Filebrowser instance and it uses database.svg for its icon. Subdomain is enabled and the share is set to owner.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/index.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"coder_app\" \"filebrowser\" {\n  agent_id     = coder_agent.main.id\n  display_name = \"file browser\"\n  slug         = \"filebrowser\"\n  url          = \"http://localhost:13339\"\n  icon         = \"/icon/database.svg\"\n  subdomain    = true\n  share        = \"owner\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Address for Coder Server\nDESCRIPTION: This snippet shows how to configure the Coder server to listen on port 80 for HTTP connections, enable TLS and listen on port 443 for HTTPS connections, and redirect HTTP traffic to HTTPS. It also shows how to start the Coder server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/setup/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Listen on port 80\nexport CODER_HTTP_ADDRESS=0.0.0.0:80\n\n# Enable TLS and listen on port 443)\nexport CODER_TLS_ENABLE=true\nexport CODER_TLS_ADDRESS=0.0.0.0:443\n\n## Redirect from HTTP to HTTPS\nexport CODER_REDIRECT_TO_ACCESS_URL=true\n\n# Start the Coder server\ncoder server\n```\n\n----------------------------------------\n\nTITLE: Get Template Version Presets using curl\nDESCRIPTION: This snippet demonstrates retrieving template version presets with a curl request. It requires a template version ID and Coder Session Token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/presets \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Patching a Template Version with Curl\nDESCRIPTION: This snippet demonstrates how to patch a template version using a curl command. It requires the templateversion ID, a valid Content-Type, Accept header, and a Coder-Session-Token. The request body contains the updated information for the template version such as message and name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/templateversions/{templateversion} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Mapping Okta Profile Attributes via Environment Variables\nDESCRIPTION: This snippet demonstrates configuring Coder to retrieve user roles from Okta profile attributes via the `/userinfo` endpoint.  `CODER_OIDC_IGNORE_USERINFO` must be set to `false`.  `CODER_OIDC_USER_ROLE_FIELD` is set to the attribute name in the Okta application, and `CODER_OIDC_USER_ROLE_MAPPING` defines the role mappings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/configuring-okta.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# This must be set to false. Coder uses this endpoint to grab the attributes.\nCODER_OIDC_IGNORE_USERINFO=false\n# No custom scopes are required.\nCODER_OIDC_SCOPES=openid,profile,email\n# Configure the group/role field using the attribute name in the application.\nCODER_OIDC_USER_ROLE_FIELD=approles\n# See our docs for mapping okta roles to coder roles.\nCODER_OIDC_USER_ROLE_MAPPING='{\"admin-group\":[\"template-admin\",\"user-admin\"]}'\n\n# If you added an attribute for groups, set that here.\n# CODER_OIDC_GROUP_FIELD=...\n```\n\n----------------------------------------\n\nTITLE: Get External Auth by Template Version using curl\nDESCRIPTION: This snippet demonstrates how to retrieve external authentication details for a specific template version using a curl request. The request requires a template version ID and a Coder Session Token for authentication. It returns a JSON array of external authentication objects.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/external-auth \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Button in Terraform\nDESCRIPTION: This code snippet shows how to add an authentication button to a Coder workspace template using Terraform.  It utilizes the `coder_external_auth` data source to fetch external authentication information, enabling users to authenticate with their chosen provider. The `id` attribute must match the `CODER_EXTERNAL_AUTH_0_ID` environment variable.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"coder_external_auth\" \"<github|gitlab|azure-devops|bitbucket-cloud|bitbucket-server|other>\" {\n    id = \"<USER_DEFINED_ID>\"\n}\n\n# GitHub Example (CODER_EXTERNAL_AUTH_0_ID=\"primary-github\")\n# makes a GitHub authentication token available at data.coder_external_auth.github.access_token\ndata \"coder_external_auth\" \"github\" {\n   id = \"primary-github\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add License: Curl Example\nDESCRIPTION: This example shows how to add a new license to the Coder server using a curl command. It includes the necessary headers for content type, accept type, and the Coder session token for authentication. The API endpoint is `/api/v2/licenses` with the POST method.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/licenses \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Embed Open in Coder Button with Pre-filled Parameters\nDESCRIPTION: This Markdown snippet demonstrates how to embed an \"Open in Coder\" button and pre-fill parameters in the \"Create Workspace\" page. It uses URL parameters to specify values for git_repo and home_disk_size. Replace `YOUR_ACCESS_URL` and `YOUR_TEMPLATE` accordingly.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/open-in-coder.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in Coder](https://YOUR_ACCESS_URL/open-in-coder.svg)](https://YOUR_ACCESS_URL/templates/YOUR_TEMPLATE/workspace?param.git_repo=https://github.com/coder/slog&param.home_disk_size%20%28GB%29=20)\n```\n\n----------------------------------------\n\nTITLE: Dry Run of config-ssh Command\nDESCRIPTION: This shows how to use the `--dry-run` (or `-n`) flag to preview the changes that `coder config-ssh` would make without actually applying them.  This is useful for verifying configurations before modifying the SSH config file. No explicit dependencies are required.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/config-ssh.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ coder config-ssh --dry-run\n```\n\n----------------------------------------\n\nTITLE: Template Example List Response\nDESCRIPTION: This JSON snippet presents an example response from the `/api/v2/templates/examples` endpoint. It showcases the structure of a template example object, which includes properties like description, icon, id, markdown, name, tags, and URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"description\": \"string\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"markdown\": \"string\",\n    \"name\": \"string\",\n    \"tags\": [\n      \"string\"\n    ],\n    \"url\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Getting deployment config with curl\nDESCRIPTION: This code snippet shows how to retrieve the deployment configuration using curl.  It performs a GET request to the `/api/v2/deployment/config` endpoint, requiring authentication via the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/deployment/config \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Workspace Process Logging Init Script\nDESCRIPTION: This HCL snippet defines a local variable containing a shell script used as an init script for the main workspace container. It determines the process ID namespace inum and sends it to the exectrace sidecar container via a curl request. It retries the curl request up to 5 times if it fails.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  # This is the init script for the main workspace container that runs before the\n  # agent starts to configure workspace process logging.\n  exectrace_init_script = <<EOT\n    set -eu\n    pidns_inum=$(readlink /proc/self/ns/pid | sed 's/[^0-9]//g')\n    if [ -z \"$pidns_inum\" ]; then\n      echo \"Could not determine process ID namespace inum\"\n      exit 1\n    fi\n\n    # Before we start the script, does curl exist?\n    if ! command -v curl >/dev/null 2>&1; then\n      echo \"curl is required to download the Coder binary\"\n      echo \"Please install curl to your image and try again\"\n      # 127 is command not found.\n      exit 127\n    fi\n\n    echo \"Sending process ID namespace inum to exectrace sidecar\"\n    rc=0\n    max_retry=5\n    counter=0\n    until [ $counter -ge $max_retry ]; do\n      set +e\n      curl \\\n        --fail \\\n        --silent \\\n        --connect-timeout 5 \\\n        -X POST \\\n        -H \"Content-Type: text/plain\" \\\n        --data \"$pidns_inum\" \\\n        http://127.0.0.1:56123\n      rc=$?\n      set -e\n      if [ $rc -eq 0 ]; then\n        break\n      fi\n\n      counter=$((counter+1))\n      echo \"Curl failed with exit code $${rc}, attempt $${counter}/$${max_retry}; Retrying in 3 seconds...\"\n      sleep 3\n    done\n    if [ $rc -ne 0 ]; then\n      echo \"Failed to send process ID namespace inum to exectrace sidecar\"\n      exit $rc\n    fi\n\n  EOT\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group with curl\nDESCRIPTION: This snippet shows how to retrieve a group using curl. It requires the group ID and an API key. It sends a GET request to the specified endpoint with the 'Accept' and 'Coder-Session-Token' headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/groups/{group} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Usage\nDESCRIPTION: Shows the basic command structure for interacting with the Coder CLI. This provides a user with the structure to execute a command with global flags and a specific subcommand. It is the entry point for all Coder CLI operations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/index.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder [global-flags] <subcommand>\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Standalone\nDESCRIPTION: This shell command starts Caddy in standalone mode, which is useful for testing and development. It allows Caddy to run without being managed by a system service.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncaddy run\n```\n\n----------------------------------------\n\nTITLE: Connecting to Workspace via SSH\nDESCRIPTION: This shell command is used to configure SSH for connecting to a Coder workspace. Running `coder config-ssh` sets up the necessary SSH configuration to allow Emacs TRAMP to connect.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/emacs-tramp.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncoder config-ssh\n```\n\n----------------------------------------\n\nTITLE: Deleting Workspace Agent Port Share - Shell\nDESCRIPTION: This code snippet shows how to delete a workspace agent's port share using a DELETE request to the Coder API.  It uses curl to send the request with the workspace ID, content type, and API key. The `workspace` parameter is required in the URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/portsharing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/workspaces/{workspace}/port-share \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Listing workspaces using Coder REST API with curl\nDESCRIPTION: This snippet shows how to list workspaces using the Coder REST API with curl. It requires a Coder URL and a valid Coder-Session-Token.  The request includes filtering for workspaces owned by the user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://coder.example.com/api/v2/workspaces?q=owner:me \\\n  -H \"Coder-Session-Token: <your-token>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JetBrains Gateway Module - Terraform\nDESCRIPTION: Configures the JetBrains Gateway module in a Coder template. Sets parameters such as agent ID, folder, and JetBrains IDE versions. Requires the `coder_agent` resource to be defined. The `jetbrains_ide_versions` map allows to specify the build number and version for a given IDE.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-pre-install.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"jetbrains_gateway\" {\n  count          = data.coder_workspace.me.start_count\n  source         = \"registry.coder.com/modules/jetbrains-gateway/coder\"\n  version        = \"1.0.28\"\n  agent_id       = coder_agent.main.id\n  folder         = \"/home/coder/example\"\n  jetbrains_ides = [\"IU\"]\n  default        = \"IU\"\n  latest         = false\n  jetbrains_ide_versions = {\n    \"IU\" = {\n      build_number = \"243.26053.27\"\n      version      = \"2024.3\"\n    }\n  }\n}\n\nresource \"coder_agent\" \"main\" {\n    ...\n    startup_script = <<-EOF\n    ~/JetBrains/backends/IU/ideaIU-243.26053.27/bin/remote-dev-server.sh registerBackendLocationForGateway\n    EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Activating a user\nDESCRIPTION: This example shows how to activate a user with username 'example_user'. The command assumes the Coder CLI is already authenticated and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_activate.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder users activate example_user\n```\n\n----------------------------------------\n\nTITLE: Pulling Coder Docker Image\nDESCRIPTION: This command pulls the specified Coder Docker image from the GitHub Container Registry. It is used to obtain the Coder v2.7.2 release.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v2.7.2.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull ghcr.io/coder/coder:v2.7.2\n```\n\n----------------------------------------\n\nTITLE: Zipping template files via CLI\nDESCRIPTION: This command creates a zip archive named `templates.zip` containing the `Dockerfile` and `main.tf` files. This is used when uploading a template through the Coder dashboard. The user should be in the directory containing Dockerfile and main.tf.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/devcontainers/add-devcontainer.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nzip templates.zip Dockerfile main.tf\n```\n\n----------------------------------------\n\nTITLE: Update Organization: Request Body\nDESCRIPTION: This JSON snippet represents the request body for updating an organization.  It includes fields such as `description`, `display_name`, `icon`, and `name`, which can be updated. This data is sent in the body of the PATCH request to `/api/v2/organizations/{organization}`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder Helm Chart\nDESCRIPTION: This YAML snippet shows the configuration of Coder's Helm chart to use the client certificate and other Azure credentials. It defines environment variables pointing to Kubernetes secrets and configures volume mounts to make the certificate available within the Coder deployment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/azure-federation.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    - name: ARM_CLIENT_ID\n      valueFrom:\n        secretKeyRef:\n          key: id\n          name: arm-client-id\n    - name: ARM_CLIENT_CERTIFICATE_PATH\n      value: /home/coder/az/\n    - name: ARM_CLIENT_CERTIFICATE_PASSWORD\n      valueFrom:\n        secretKeyRef:\n          key: password\n          name: arm-client-cert-password\n    - name: ARM_TENANT_ID\n      valueFrom:\n        secretKeyRef:\n          key: id\n          name: arm-tenant-id\n    - name: ARM_SUBSCRIPTION_ID\n      valueFrom:\n        secretKeyRef:\n          key: id\n          name: arm-subscription-id\n  volumes:\n    - name: \"azure-client-cert\"\n      secret:\n        secretName: \"azure-client-cert-secret\"\n  volumeMounts:\n    - name: \"azure-client-cert\"\n      mountPath: \"/home/coder/az/\"\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding with SSH\nDESCRIPTION: This command forwards the local port 8080 to the remote port 8000 on the Coder workspace using SSH. This enables secure access to services running on port 8000 within the workspace from the local machine.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/port-forwarding.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nssh -L 8080:localhost:8000 coder.myworkspace\n```\n\n----------------------------------------\n\nTITLE: Get Template Version via curl\nDESCRIPTION: This curl command demonstrates how to retrieve a template version using the Coder API.  It requires authentication via the 'Coder-Session-Token' header.  Replace 'API_KEY' with a valid API key, '{template}' with the template ID, and '{templateversionname}' with the template version name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates/{template}/versions/{templateversionname} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Variables for ServiceAccount Authentication\nDESCRIPTION: This Terraform code defines variables for the Kubernetes cluster host, CA certificate, token, and namespace. These variables are used to configure the Kubernetes provider. The sensitive attribute is set to true for host, cluster_ca_certificate and token to prevent them from being displayed in the UI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nvariable \"host\" {\n  description = \"Cluster host address\"\n  sensitive   = true\n}\n\nvariable \"cluster_ca_certificate\" {\n  description = \"Cluster CA certificate (base64 encoded)\"\n  sensitive   = true\n}\n\nvariable \"token\" {\n  description = \"Cluster CA token (base64 encoded)\"\n  sensitive   = true\n}\n\nvariable \"namespace\" {\n  description = \"Namespace\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create OAuth2 Application Response Example JSON\nDESCRIPTION: This JSON snippet shows an example response after successfully creating an OAuth2 application using the `POST /oauth2-provider/apps` endpoint.  It includes the application's `callback_url`, `endpoints`, `icon`, `id`, and `name`. The `endpoints` contain authorization, device_authorization, and token URLs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"callback_url\": \"string\",\n  \"endpoints\": {\n    \"authorization\": \"string\",\n    \"device_authorization\": \"string\",\n    \"token\": \"string\"\n  },\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Object Response (JSON)\nDESCRIPTION: This JSON snippet represents a successful response containing a user object. It includes details such as avatar URL, creation timestamp, email, ID, last seen timestamp, login type, name, organization IDs, roles, status, theme preference, update timestamp, and username.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"http://example.com\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"email\": \"user@example.com\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"status\": \"active\",\n  \"theme_preference\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Azure Client Certificate\nDESCRIPTION: This command creates a Kubernetes secret named `azure-client-cert-secret` in the `coder` namespace. The secret contains the client.pfx file, which is needed for Azure authentication. Replace `/path/to/your/client.pfx` with the actual path to the .pfx file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/azure-federation.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic -n coder azure-client-cert-secret --from-file=client.pfx=/path/to/your/client.pfx\n```\n\n----------------------------------------\n\nTITLE: Running Workspace Proxy Server with Coder CLI\nDESCRIPTION: This snippet shows how to start the workspace proxy server using the Coder CLI.  It requires the Coder CLI and configuration via environment variables, a config file, or command-line flags.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Set configuration options via environment variables, a config file, or cmd flags\ncoder wsproxy server\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Provisioner Job with Coder CLI\nDESCRIPTION: This code snippet shows how to cancel a provisioner job using the coder CLI. It requires a job ID to identify the job to be canceled. The optional `--org` flag allows specifying an organization, with the environment variable `$CODER_ORGANIZATION` serving as a default.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_jobs_cancel.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner jobs cancel [flags] <job_id>\n```\n\n----------------------------------------\n\nTITLE: Showing PostgreSQL Search Path\nDESCRIPTION: This SQL query displays the current search path for the database connection. It shows the order in which schemas are searched when looking for tables.  Requires connection to the database.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nSHOW search_path;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Pushing Coder Template\nDESCRIPTION: These shell commands initialize a new Coder template named `nomad-docker`, navigate into the newly created directory, and push the template to Coder.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/nomad-docker/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncoder template init nomad-docker\ncd nomad-docker\ncoder template push\n```\n\n----------------------------------------\n\nTITLE: Get Organization Groups with curl\nDESCRIPTION: Retrieves groups by organization using a GET request. Requires the `organization` ID as a path parameter and a valid Coder session token for authentication. Returns a list of groups associated with the specified organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/groups \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating a Template Version Dry-Run with Curl\nDESCRIPTION: This snippet demonstrates how to create a template version dry-run using a curl command. It requires the templateversion ID, a valid Content-Type, Accept header, and a Coder-Session-Token. The request body contains configurations for the dry-run.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/templateversions/{templateversion}/dry-run \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: users edit-roles Usage\nDESCRIPTION: Shows how to use the `coder users edit-roles` command to edit a user's roles by username or ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_edit-roles.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder users edit-roles [flags] <username|user_id>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Workspace Metadata\nDESCRIPTION: This JSON snippet demonstrates the structure and content of a successful (200 OK) response from the Coder API when retrieving workspace metadata. It includes fields related to workspace configuration, health, builds, resources, and associated agents. The response provides comprehensive information about the workspace's current state and configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"allow_renames\": true,\n  \"automatic_updates\": \"always\",\n  \"autostart_schedule\": \"string\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleting_at\": \"2019-08-24T14:15:22Z\",\n  \"dormant_at\": \"2019-08-24T14:15:22Z\",\n  \"favorite\": true,\n  \"health\": {\n    \"failing_agents\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"healthy\": false\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_used_at\": \"2019-08-24T14:15:22Z\",\n  \"latest_app_status\": {\n    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"message\": \"string\",\n    \"needs_user_attention\": true,\n    \"state\": \"working\",\n    \"uri\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n  },\n  \"latest_build\": {\n    \"build_number\": 0,\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"deadline\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n    \"initiator_name\": \"string\",\n    \"job\": {\n      \"available_workers\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"canceled_at\": \"2019-08-24T14:15:22Z\",\n      \"completed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"error\": \"string\",\n      \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n      \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"input\": {\n        \"error\": \"string\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n      },\n      \"metadata\": {\n        \"template_display_name\": \"string\",\n        \"template_icon\": \"string\",\n        \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n        \"template_name\": \"string\",\n        \"template_version_name\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"queue_position\": 0,\n      \"queue_size\": 0,\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"pending\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"type\": \"template_version_import\",\n      \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n    },\n    \"matched_provisioners\": {\n      \"available\": 0,\n      \"count\": 0,\n      \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n    },\n    \"max_deadline\": \"2019-08-24T14:15:22Z\",\n    \"reason\": \"initiator\",\n    \"resources\": [\n      {\n        \"agents\": [\n          {\n            \"api_version\": \"string\",\n            \"apps\": [\n              {\n                \"command\": \"string\",\n                \"display_name\": \"string\",\n                \"external\": true,\n                \"health\": \"disabled\",\n                \"healthcheck\": {\n                  \"interval\": 0,\n                  \"threshold\": 0,\n                  \"url\": \"string\"\n                },\n                \"hidden\": true,\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"open_in\": \"slim-window\",\n                \"sharing_level\": \"owner\",\n                \"slug\": \"string\",\n                \"statuses\": [\n                  {\n                    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                    \"created_at\": \"2019-08-24T14:15:22Z\",\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"message\": \"string\",\n                    \"needs_user_attention\": true,\n                    \"state\": \"working\",\n                    \"uri\": \"string\",\n                    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                  }\n                ],\n                \"subdomain\": true,\n                \"subdomain_name\": \"string\",\n                \"url\": \"string\"\n              }\n            ],\n            \"architecture\": \"string\",\n            \"connection_timeout_seconds\": 0,\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"directory\": \"string\",\n            \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n            \"display_apps\": [\n              \"vscode\"\n            ],\n            \"environment_variables\": {\n              \"property1\": \"string\",\n              \"property2\": \"string\"\n            },\n            \"expanded_directory\": \"string\",\n            \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"health\": {\n              \"healthy\": false,\n              \"reason\": \"agent has lost connection\"\n            },\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"instance_id\": \"string\",\n            \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"latency\": {\n              \"property1\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              },\n              \"property2\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              }\n            },\n            \"lifecycle_state\": \"created\",\n            \"log_sources\": [\n              {\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"display_name\": \"string\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n              }\n            ],\n            \"logs_length\": 0,\n            \"logs_overflowed\": true,\n            \"name\": \"string\",\n            \"operating_system\": \"string\",\n            \"ready_at\": \"2019-08-24T14:15:22Z\",\n            \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n            \"scripts\": [\n              {\n                \"cron\": \"string\",\n                \"display_name\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"log_path\": \"string\",\n                \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n                \"run_on_start\": true,\n                \"run_on_stop\": true,\n                \"script\": \"string\",\n                \"start_blocks_login\": true,\n                \"timeout\": 0\n              }\n            ],\n            \"started_at\": \"2019-08-24T14:15:22Z\",\n            \"startup_script_behavior\": \"blocking\",\n            \"status\": \"connecting\",\n            \"subsystems\": [\n              \"envbox\"\n            ],\n            \"troubleshooting_url\": \"string\",\n            \"updated_at\": \"2019-08-24T14:15:22Z\",\n            \"version\": \"string\"\n          }\n        ],\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"daily_cost\": 0,\n        \"hide\": true,\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n        \"metadata\": [\n          {\n            \"key\": \"string\",\n            \"sensitive\": true,\n            \"value\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"workspace_transition\": \"start\"\n      }\n    ],\n    \"status\": \"pending\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"template_version_name\": \"string\",\n    \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n    \"transition\": \"start\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\",\n    \"workspace_owner_avatar_url\": \"string\",\n    \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n    \"workspace_owner_name\": \"string\"\n  },\n  \"name\": \"string\",\n  \"next_start_at\": \"2019-08-24T14:15:22Z\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"outdated\": true,\n  \"owner_avatar_url\": \"string\",\n  \"owner_id\": \"8826ee2e-7933-4665-aef2-2393f84a0d05\",\n  \"owner_name\": \"string\",\n  \"template_active_version_id\": \"b0da9c29-67d8-4c87-888c-bafe356f7f3c\",\n  \"template_allow_user_cancel_workspace_jobs\": true,\n  \"template_display_name\": \"string\",\n  \"template_icon\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"template_name\": \"string\",\n  \"template_require_active_version\": true,\n  \"ttl_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Create SCIM User with curl\nDESCRIPTION: This curl command creates a new SCIM user. It sends a POST request to the specified endpoint and includes headers for content type, accept type and authorization. It expects a JSON payload in the request body conforming to the SCIM user schema and a valid API key for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/scim/v2/Users \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Authorizaiton: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Create Template Version - Request Body JSON\nDESCRIPTION: This JSON payload represents the request body for creating a new template version. It includes essential details such as `file_id`, `message`, `name`, `provisioner`, `storage_method`, `template_id`, and `user_variable_values`.  The `user_variable_values` allows setting values for template variables during creation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"example_id\": \"string\",\n  \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n  \"message\": \"string\",\n  \"name\": \"string\",\n  \"provisioner\": \"terraform\",\n  \"storage_method\": \"file\",\n  \"tags\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"user_variable_values\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Signups to Specific GitHub Organizations via Env Variable\nDESCRIPTION: This environment variable restricts sign-ups to members of specific GitHub organizations. Replace `your-org` with the actual GitHub organization name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nCODER_OAUTH2_GITHUB_ALLOWED_ORGS=\"your-org\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Pod Definition - Terraform\nDESCRIPTION: This Terraform code defines a Kubernetes pod resource named `dev`. It includes the `image_pull_secrets` block to specify the `regcred` secret for pulling images from the private registry. The `namespace` parameter must match the namespace where workspaces will be deployed. This example requires the Kubernetes provider to be configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/image-pull-secret.md#_snippet_4\n\nLANGUAGE: tf\nCODE:\n```\nresource \"kubernetes_pod\" \"dev\" {\n  metadata {\n    # this must be the same namespace where workspaces will be deployed\n    namespace = \"workspaces-namespace\"\n  }\n\n  spec {\n    image_pull_secrets {\n      name = \"regcred\"\n    }\n    container {\n      name  = \"dev\"\n      image = \"your-image:latest\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile for Workspace Proxy\nDESCRIPTION: This snippet shows how to define a Dockerfile to run the workspace proxy server. It requires Docker. The `ENTRYPOINT` instruction is set to `[\"/opt/coder\", \"wsproxy\", \"server\"]` to start the proxy server when the container is run.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_11\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM ghcr.io/coder/coder:latest\nENTRYPOINT [\"/opt/coder\", \"wsproxy\", \"server\"]\n```\n\n----------------------------------------\n\nTITLE: Terraform: Kubernetes Deployment Image Definition\nDESCRIPTION: This Terraform configuration defines a Kubernetes deployment and specifies the image to use for the container. This allows you to specify a custom image with pre-installed VS Code extensions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_3\n\nLANGUAGE: tf\nCODE:\n```\nresource \"kubernetes_deployment\" \"main\" {\n  spec {\n    template {\n      spec {\n        container {\n          name   = \"dev\"\n          image  = \"registry.internal/image-name:tag\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Display Postgres Built-in URL\nDESCRIPTION: This command retrieves and displays the connection URL for the built-in PostgreSQL deployment within the Coder server environment. The `--raw-url` flag controls whether the output is a raw URL or a psql command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server_postgres-builtin-url.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server postgres-builtin-url [flags]\n```\n\n----------------------------------------\n\nTITLE: Showing Organization Role Sync Settings\nDESCRIPTION: This command is used to display the role synchronization settings for an organization in Coder. The settings define how roles are synchronized from an external Identity Provider (IdP) into the Coder organization. It provides insight into the current configuration for role management.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_show_role-sync.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings show role-sync\n```\n\n----------------------------------------\n\nTITLE: Update Organization IdP Sync Settings Body\nDESCRIPTION: This JSON snippet represents the body of a PATCH request to the /settings/idpsync/organization endpoint, used to update organization IdP sync settings. It includes fields like 'field', 'mapping' (which is a nested object with string arrays), and 'organization_assign_default'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": \"string\",\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"organization_assign_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Throughput to Coder Workspace\nDESCRIPTION: This command measures the throughput between the client and the workspace agent using a speed test.  The test runs for a specified duration, providing interval-based transfer rates and bandwidth, as well as the overall throughput.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/troubleshooting.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ coder speedtest workspace\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Coder - Windows\nDESCRIPTION: This command uninstalls Coder on Windows using the winget package manager, assuming it was installed via winget.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nwinget uninstall Coder.Coder\n```\n\n----------------------------------------\n\nTITLE: Create OpenShift ImageStream\nDESCRIPTION: This command creates an OpenShift ImageStream named `enterprise-base`. ImageStreams are used to track images over time.  It acts as a pointer to the actual image in the registry. Requires OpenShift CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\noc create imagestream enterprise-base\n```\n\n----------------------------------------\n\nTITLE: Example Resource Response JSON\nDESCRIPTION: This JSON snippet showcases the format of a successful response (200 OK) when requesting resources for a template version. It contains detailed information about agents, including their apps, architecture, health, and connected subsystems. This structure enables developers to understand the complete representation of a resource and its associated components.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"agents\": [\n      {\n        \"api_version\": \"string\",\n        \"apps\": [\n          {\n            \"command\": \"string\",\n            \"display_name\": \"string\",\n            \"external\": true,\n            \"health\": \"disabled\",\n            \"healthcheck\": {\n              \"interval\": 0,\n              \"threshold\": 0,\n              \"url\": \"string\"\n            },\n            \"hidden\": true,\n            \"icon\": \"string\",\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"open_in\": \"slim-window\",\n            \"sharing_level\": \"owner\",\n            \"slug\": \"string\",\n            \"statuses\": [\n              {\n                \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"message\": \"string\",\n                \"needs_user_attention\": true,\n                \"state\": \"working\",\n                \"uri\": \"string\",\n                \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n              }\n            ],\n            \"subdomain\": true,\n            \"subdomain_name\": \"string\",\n            \"url\": \"string\"\n          }\n        ],\n        \"architecture\": \"string\",\n        \"connection_timeout_seconds\": 0,\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"directory\": \"string\",\n        \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n        \"display_apps\": [\n          \"vscode\"\n        ],\n        \"environment_variables\": {\n          \"property1\": \"string\",\n          \"property2\": \"string\"\n        },\n        \"expanded_directory\": \"string\",\n        \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n        \"health\": {\n          \"healthy\": false,\n          \"reason\": \"agent has lost connection\"\n        },\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"instance_id\": \"string\",\n        \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n        \"latency\": {\n          \"property1\": {\n            \"latency_ms\": 0,\n            \"preferred\": true\n          },\n          \"property2\": {\n            \"latency_ms\": 0,\n            \"preferred\": true\n          }\n        },\n        \"lifecycle_state\": \"created\",\n        \"log_sources\": [\n          {\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"display_name\": \"string\",\n            \"icon\": \"string\",\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n          }\n        ],\n        \"logs_length\": 0,\n        \"logs_overflowed\": true,\n        \"name\": \"string\",\n        \"operating_system\": \"string\",\n        \"ready_at\": \"2019-08-24T14:15:22Z\",\n        \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n        \"scripts\": [\n          {\n            \"cron\": \"string\",\n            \"display_name\": \"string\",\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"log_path\": \"string\",\n            \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n            \"run_on_start\": true,\n            \"run_on_stop\": true,\n            \"script\": \"string\",\n            \"start_blocks_login\": true,\n            \"timeout\": 0\n          }\n        ],\n        \"started_at\": \"2019-08-24T14:15:22Z\",\n        \"startup_script_behavior\": \"blocking\",\n        \"status\": \"connecting\",\n        \"subsystems\": [\n          \"envbox\"\n        ],\n        \"troubleshooting_url\": \"string\",\n        \"updated_at\": \"2019-08-24T14:15:22Z\",\n        \"version\": \"string\"\n      }\n    ],\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"hide\": true,\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n    \"metadata\": [\n      {\n        \"key\": \"string\",\n        \"sensitive\": true,\n        \"value\": \"string\"\n      }\n    ],\n    \"name\": \"string\",\n    \"type\": \"string\",\n    \"workspace_transition\": \"start\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: List Provisioner Keys Request using Curl\nDESCRIPTION: This curl command retrieves a list of provisioner keys associated with a given organization.  The organization ID is part of the URL path. Authentication requires the 'Accept' and 'Coder-Session-Token' headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/provisionerkeys \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Appearance Config Body Schema\nDESCRIPTION: This JSON schema defines the expected format for the request body when updating the appearance configuration. It includes fields for announcement banners, application name, logo URL, and service banner. These fields allow customization of the Coder application's look and feel.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"announcement_banners\": [\n    {\n      \"background_color\": \"string\",\n      \"enabled\": true,\n      \"message\": \"string\"\n    }\n  ],\n  \"application_name\": \"string\",\n  \"logo_url\": \"string\",\n  \"service_banner\": {\n    \"background_color\": \"string\",\n    \"enabled\": true,\n    \"message\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Previous Template Version - cURL\nDESCRIPTION: This cURL command demonstrates how to retrieve the previous version of a template using the Coder API.  It sends a GET request to the specified endpoint, including the organization ID, template name, and template version name in the URL. It requires a valid `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/templates/{templatename}/versions/{templateversionname}/previous \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Getting Coder Launch Service Information\nDESCRIPTION: This shell command retrieves information about the Coder launch service using journalctl. It filters logs for the coder.service unit and shows logs from the current boot (-b).\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/azure-vm.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njournalctl -u coder.service -b\n```\n\n----------------------------------------\n\nTITLE: Example: Installing IntelliJ IDEA Backend - Shell\nDESCRIPTION: Example of installing a specific build of IntelliJ IDEA using the client downloader. Extracts the downloaded backend and removes the archive. Requires `mkdir`, client downloader, `tar`, and `rm`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-pre-install.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader --products-filter IU --build-filter 243.26053.27 --platforms-filter linux-x64 --download-backends ~/JetBrains\ntar -xzvf ~/JetBrains/backends/IU/*.tar.gz -C ~/JetBrains/backends/IU\nrm -rf ~/JetBrains/backends/IU/*.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Define Coder Parameter for Optional Code-Server Installation\nDESCRIPTION: This Terraform code defines a `coder_parameter` of type `bool` that allows a user to choose whether or not to install code-server in their workspace. The parameter has a default value of `false`, a description, and an icon.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_20\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"code_server\" {\n    name        = \"Do you want code-server in your workspace?\"\n    description = \"Use VS Code in a browser.\"\n    type        = \"bool\"\n    default     = false\n    mutable     = true\n    icon        = \"/icon/code.svg\"\n    order       = 6\n}\n```\n\n----------------------------------------\n\nTITLE: Get OpenShift Project Annotations (UID Range)\nDESCRIPTION: This command retrieves the annotations for the specified OpenShift project in JSON format using `oc get project` and then parses the JSON to extract the UID range using `jq`. The UID range is crucial for creating OpenShift-compatible images with correct user and group IDs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\noc get project coder -o json | jq -r '.metadata.annotations'\n\n```\n\n----------------------------------------\n\nTITLE: Update Role IdP Sync Config with PATCH (curl)\nDESCRIPTION: Updates the configuration for Role IdP (Identity Provider) synchronization using a PATCH request. Requires the organization ID and a valid Coder session token. The request body is expected to be JSON format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_72\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/roles/config \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Removing Organization Member with Curl\nDESCRIPTION: This snippet demonstrates removing a user from an organization's membership using a curl command. It sends a DELETE request to the specified endpoint, including the necessary authentication header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/organizations/{organization}/members/{user} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Agent Logs - Curl Request\nDESCRIPTION: This `curl` command fetches logs from a specified workspace agent. It requires the `workspaceagent` ID and supports optional query parameters such as `before`, `after`, `follow`, and `no_compression`.  Authentication is handled using the `Coder-Session-Token` header. The `Accept` header is set to expect a JSON response.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent}/logs \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configure JFrog-Token Coder Module (Terraform)\nDESCRIPTION: This snippet configures the JFrog-Token Coder module to integrate with Artifactory using an admin-scoped access token to provision user-scoped tokens. It requires the `coder_agent.example.id` for identifying the Coder agent, the Artifactory URL, and the access token (passed via a variable). It defines the package managers to be configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-artifactory.md#_snippet_4\n\nLANGUAGE: tf\nCODE:\n```\nmodule \"jfrog\" {\n  source                   = \"registry.coder.com/modules/jfrog-token/coder\"\n  version                  = \"1.0.30\"\n  agent_id                 = coder_agent.example.id\n  jfrog_url                = \"https://XXXX.jfrog.io\"\n  artifactory_access_token = var.artifactory_access_token\n  package_managers = {\n    npm    = [\"npm\", \"@scoped:npm-scoped\"]\n    go     = [\"go\", \"another-go-repo\"]\n    pypi   = [\"pypi\", \"extra-index-pypi\"]\n    docker = [\"example-docker-staging.jfrog.io\", \"example-docker-production.jfrog.io\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Secret for Coder Provisioner Keys (Shell)\nDESCRIPTION: This command creates a Kubernetes secret named 'coder-provisioner-keys' to store the provisioner key.  The key is stored as a literal value within the secret, allowing the provisioner daemon to authenticate with Coder. Replace `<key omitted>` with the actual provisioner key obtained from the `coder provisioner keys create` command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic coder-provisioner-keys --from-literal=my-cool-key=`<key omitted>`\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Volume Configuration\nDESCRIPTION: This YAML snippet configures Docker Compose to mount the Incus socket into the Coder container and add the `incus-admin` group.  It allows Coder running within Docker to interact with the Incus daemon.  The user needs to replace the example group ID (996) with the actual group ID of the `incus-admin` group on their system.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/incus/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  coder:\n    volumes:\n      - /var/lib/incus/unix.socket:/var/lib/incus/unix.socket\n    group_add:\n      - 996 # Replace with the group ID of the `incus-admin` group\n```\n\n----------------------------------------\n\nTITLE: Creating a Fuse Device Plugin DaemonSet in Kubernetes\nDESCRIPTION: This snippet creates a DaemonSet in Kubernetes to deploy a FUSE device plugin. This enables securely exposing FUSE devices to pods.  It requires the smart-device-manager to be installed and properly configured.  It uses the soolaugust/fuse-device-plugin:v1.0 image.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | kubectl create -f -\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fuse-device-plugin-daemonset\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      name: fuse-device-plugin-ds\n  template:\n    metadata:\n      labels:\n        name: fuse-device-plugin-ds\n    spec:\n      hostNetwork: true\n      containers:\n      - name: fuse-device-plugin-ctr\n        image: soolaugust/fuse-device-plugin:v1.0\n        securityContext:\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop: [\"ALL\"]\n        volumeMounts:\n        - name: device-plugin\n          mountPath: /var/lib/kubelet/device-plugins\n      volumes:\n      - name: device-plugin\n        hostPath:\n          path: /var/lib/kubelet/device-plugins\n      imagePullSecrets:\n      - name: registry-secret\nEOF\n```\n\n----------------------------------------\n\nTITLE: Getting Users using curl\nDESCRIPTION: This snippet shows how to retrieve a list of users using the curl command-line tool. It sends an HTTP GET request to the `/api/v2/users` endpoint with the `Accept` header set to `application/json` and a `Coder-Session-Token` for authentication. The server will respond with a JSON array of user objects, potentially paginated based on query parameters.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Updating Template ACL with PATCH - Shell\nDESCRIPTION: This shell script demonstrates how to update a template's ACL using the PATCH method with curl. It sets the Content-Type and Accept headers to application/json, and includes the Coder-Session-Token for authentication.  The script sends a JSON payload to the specified endpoint to modify the template's access control list.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_109\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/templates/{template}/acl \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: External Authentication Response (JSON)\nDESCRIPTION: This JSON snippet shows the response structure when getting external authentication information. Fields include `access_token`, `password`, `token_extra`, `type`, `url`, and `username` to provide authentication details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"string\",\n  \"password\": \"string\",\n  \"token_extra\": {},\n  \"type\": \"string\",\n  \"url\": \"string\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioner Key Creation Command\nDESCRIPTION: This command creates a new provisioner key. It requires a name and supports optional flags for filtering provisioner jobs by tags and selecting an organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_keys_create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner keys create [flags] <name>\n```\n\n----------------------------------------\n\nTITLE: Adding Helm Repository for Coder Xray (Bash)\nDESCRIPTION: This command adds the Helm repository for the Coder Xray integration to the Helm configuration.  This step is a prerequisite for deploying the integration using Helm. It allows Helm to locate and download the necessary chart.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-xray.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add coder-xray https://helm.coder.com/coder-xray\n```\n\n----------------------------------------\n\nTITLE: Configuring UFW Firewall\nDESCRIPTION: These shell commands configure the Uncomplicated Firewall (ufw) to allow SSH, HTTP, and HTTPS traffic while denying direct access to the Coder server. This improves security by restricting external access to necessary ports only.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# Check status of UncomplicatedFirewall\nsudo ufw status\n\n# Allow SSH\nsudo ufw allow 22\n\n# Allow HTTP, HTTPS (Caddy)\nsudo ufw allow 80\nsudo ufw allow 443\n\n# Deny direct access to Coder server\nsudo ufw deny 3000\n\n# Enable UncomplicatedFirewall\nsudo ufw enable\n```\n\n----------------------------------------\n\nTITLE: Querying Deployment Config using curl\nDESCRIPTION: This code snippet demonstrates how to retrieve the deployment configuration using a curl request. It requires authentication via a Coder-Session-Token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/deployment/config \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Setting Coder webhook endpoint\nDESCRIPTION: This command sets the `CODER_NOTIFICATIONS_WEBHOOK_ENDPOINT` environment variable, which specifies the URL where Coder will send notifications. This should match the public URL of the deployed Slack bot's `/v1/webhook` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/slack.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport CODER_NOTIFICATIONS_WEBHOOK_ENDPOINT=http://localhost:6000/v1/webhook`\n```\n\n----------------------------------------\n\nTITLE: Querying Template Examples with curl\nDESCRIPTION: This snippet shows how to retrieve template examples using curl. It performs a GET request on the `/api/v2/templates/examples` endpoint, including the required headers for request content type and coder session token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates/examples \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Organization by ID: Curl Example\nDESCRIPTION: This example shows how to retrieve an organization by its ID from the Coder server using a curl command. It includes the `Accept` header and `Coder-Session-Token` for authentication. The API endpoint is `/api/v2/organizations/{organization}` with the GET method.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Running Custom Agent in Coder Workspace\nDESCRIPTION: This shell script demonstrates how to start a custom agent within a Coder workspace using the Coder CLI and the Model Context Protocol (MCP). It first authenticates with the Coder CLI, then sets the `CODER_MCP_APP_STATUS_SLUG` environment variable to match the slug in the coder_app resource. Finally, it runs the custom agent, configuring it to use the MCP server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/ai-coder/custom-agents.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncoder login # be sure to be authenticated with the Coder CLI\nexport CODER_MCP_APP_STATUS_SLUG=my-agent # needs to be the same as the slug in the coder_app resource\n\n# Use your own agent's logic and syntax here:\nany-custom-agent configure-mcp --name \"coder\" --command \"coder exp mcp server\"\n```\n\n----------------------------------------\n\nTITLE: Get User Organizations with curl\nDESCRIPTION: This shell command demonstrates how to retrieve a list of organizations associated with a user using curl. It sends a GET request to the specified endpoint, including the Coder-Session-Token for authentication. The expected response is a JSON array of organization objects.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/organizations \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Getting Groups with curl\nDESCRIPTION: This shell command retrieves groups from the Coder server. It uses a GET request to the `/api/v2/groups` endpoint and accepts query parameters for filtering based on organization, member, and group IDs. The `Coder-Session-Token` header with the API key is required for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/groups?organization=string&has_member=string&group_ids=string \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Unarchive Response (JSON)\nDESCRIPTION: This JSON snippet represents a possible response from the `/templateversions/{templateversion}/unarchive` endpoint. It contains fields for 'detail', 'message', and 'validations', which provide information about the outcome of the unarchive operation. Each validation object includes 'detail' and 'field' properties indicating specific validation issues.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Release Notes via Shell Script\nDESCRIPTION: This shell script generates release notes for a specified version range. It requires setting environment variables and executing the generate_release_notes.sh script with the old and new versions, as well as a git reference. The output is redirected to a markdown file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout main; git pull; git fetch --all\nexport CODER_IGNORE_MISSING_COMMIT_METADATA=1\nexport BRANCH=main\n./scripts/release/generate_release_notes.sh \\\n  --old-version=v2.8.0 \\\n  --new-version=v2.9.0 \\\n  --ref=$(git rev-parse --short \"${ref:-origin/$BRANCH}\") \\\n  > ./docs/changelogs/v2.9.0.md\n```\n\n----------------------------------------\n\nTITLE: Default Role Sync Settings JSON\nDESCRIPTION: This JSON snippet represents the default role sync settings for an organization in Coder. It includes fields for the OIDC claim (`field`) and role mappings (`mapping`).\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"field\": \"\",\n    \"mapping\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining codersdk.WorkspaceAgentMetadataDescription Schema (JSON)\nDESCRIPTION: Defines the JSON schema for the `codersdk.WorkspaceAgentMetadataDescription` object. This schema specifies the structure of metadata descriptions for workspace agents. It includes properties for display name, key, script, interval, and timeout. All properties are required and define attributes for metadata associated with the workspace agent.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/agent-api/schemas.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"display_name\": \"string\",\n    \"key\": \"string\",\n    \"script\": \"string\",\n    \"interval\": 10,\n    \"timeout\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Appearance Config with curl\nDESCRIPTION: This shell command retrieves the appearance configuration from the Coder server. It uses a GET request to the `/api/v2/appearance` endpoint and requires an API key in the `Coder-Session-Token` header. The `Accept` header is set to `application/json` to specify the expected response format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/appearance \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pull Template from Coder\nDESCRIPTION: This command pulls a specified template from the Coder deployment to the local device. This is the first step to building the lock file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/speed-up-templates.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates pull <template>\n```\n\n----------------------------------------\n\nTITLE: Getting Template DAUs with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve the Daily Active Users (DAUs) for a template using a GET request with curl. It includes the necessary headers for accepting JSON and authenticating with the Coder Session Token.  The template ID is passed as a path parameter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates/{template}/daus \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for Coder Reverse Proxy (Standalone)\nDESCRIPTION: This Caddyfile configures Caddy as a reverse proxy for Coder, enabling on-demand TLS certificate generation. It defines the Coder domain and wildcard domain, specifying the upstream Coder service address.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_2\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n    on_demand_tls {\n        ask http://example.com\n    }\n}\n\ncoder.example.com, *.coder.example.com {\n  reverse_proxy coder:7080\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 Github Callback using curl\nDESCRIPTION: This snippet demonstrates making a request to the GitHub OAuth 2.0 callback endpoint using curl. It's a GET request to `/api/v2/users/oauth2/github/callback` and is expected to return a redirect.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/oauth2/github/callback \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Executing Coder Users Command\nDESCRIPTION: This command executes the `coder users` command, which is the main entry point for managing users within the Coder platform. Subcommands can be appended to this command to perform specific actions like creating, listing, or deleting users.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncoder users [subcommand]\n```\n\n----------------------------------------\n\nTITLE: Update Check Response Example\nDESCRIPTION: This JSON snippet provides an example response structure when checking for updates, including current status, URL, and version information.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"current\": true,\n  \"url\": \"string\",\n  \"version\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relay URL in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to set the `CODER_DERP_SERVER_RELAY_URL` environment variable in a Kubernetes deployment.  It retrieves the pod's IP address using a field reference and constructs the relay URL. This is important for inter-node communication in a HA setup using the embedded relay.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/high-availability.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: POD_IP\n    valueFrom:\n      fieldRef:\n        fieldPath: status.podIP\n  - name: CODER_DERP_SERVER_RELAY_URL\n    value: http://$(POD_IP)\n```\n\n----------------------------------------\n\nTITLE: Install Coder on Linux/macOS with install.sh\nDESCRIPTION: This command downloads and executes the Coder installation script.  It uses curl to fetch the script from coder.com and pipes it to sh for execution.  Requires curl and sh to be installed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/start/local-deploy.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Callback with Curl\nDESCRIPTION: This code snippet demonstrates how to initiate an OpenID Connect callback using a curl command. It sends a GET request to the `/users/oidc/callback` endpoint, including the `Coder-Session-Token` for authentication. The server responds with a temporary redirect (307).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/oidc/callback \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Dockerfile: Add and Install VS Code Extension\nDESCRIPTION: These Dockerfile instructions are used to add a VS Code extension to a custom image. It creates a directory, copies the extension file (`.vsix`) into it, and then installs it in a subsequent step within the Coder workspace's `startup_script`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM codercom/enterprise-base:ubuntu\n\n# Run below commands as root user\nUSER root\n\n# Download and install VS Code extensions into the container\nRUN mkdir -p /vsix\nADD ./GitHub.copilot.vsix /vsix\n\nUSER coder\n```\n\n----------------------------------------\n\nTITLE: Ordering Coder Applications\nDESCRIPTION: This snippet illustrates how to organize button apps within a `coder_agent` in the workspace view using the `order` property. The order applies to template-defined applications, while static buttons like VS Code or Terminal are not affected. `filebrowser` will show before `code-server`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-ordering.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"coder_app\" \"code-server\" {\n  agent_id     = coder_agent.main.id\n  slug         = \"code-server\"\n  display_name = \"code-server\"\n  ...\n\n  order = 2\n}\n\nresource \"coder_app\" \"filebrowser\" {\n  agent_id     = coder_agent.main.id\n  display_name = \"File Browser\"\n  slug         = \"filebrowser\"\n  ...\n\n  order = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Get Deployment DAUs with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve deployment Daily Active Users (DAUs) using a cURL request. It requires the `tz_offset` parameter to specify the timezone offset, and a valid Coder API key for authentication. The API returns a JSON response containing an array of DAU entries and the timezone hour offset.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/insights/daus?tz_offset=0 \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Git Configuration for Path Matching - Shell Script\nDESCRIPTION: This snippet provides a shell command to configure Git for proper path matching when using regex for external authentication.  It sets the `credential.useHttpPath` option to `true` globally, which is necessary for regex matching paths such as `github.com/org`. This command is intended to be added to the Coder agent startup script.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngit config --global credential.useHttpPath true\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Provider Icons via Environment Variables\nDESCRIPTION: This code snippet shows how to configure icons for external authentication providers using environment variables.  The `CODER_EXTERNAL_AUTH_X_ICON` variable is used, where `X` is the provider number, to specify the icon's URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/icons.md#_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ICON=/icon/github.svg\nCODER_EXTERNAL_AUTH_1_ICON=/icon/google.svg\n```\n\n----------------------------------------\n\nTITLE: Get User Notification Preferences - cURL\nDESCRIPTION: This cURL command retrieves user notification preferences from the Coder API. It requires an API key for authentication via the `Coder-Session-Token` header and the `Accept` header set to `application/json`. The `user` parameter must be specified in the URL path.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/notifications/preferences \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Assigning EC2 Permissions to AWS Role with JSON\nDESCRIPTION: Assigns permissions to an AWS role, allowing the Coder control plane to manage EC2 instances. It allows actions like creating, describing, and modifying EC2 instances, including conditional access based on the 'Coder_Provisioned' tag.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/gcp-to-aws.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:GetDefaultCreditSpecification\",\n                \"ec2:DescribeIamInstanceProfileAssociations\",\n                \"ec2:DescribeTags\",\n                \"ec2:DescribeInstances\",\n                \"ec2:DescribeInstanceTypes\",\n                \"ec2:CreateTags\",\n                \"ec2:RunInstances\",\n                \"ec2:DescribeInstanceCreditSpecifications\",\n                \"ec2:DescribeImages\",\n                \"ec2:ModifyDefaultCreditSpecification\",\n                \"ec2:DescribeVolumes\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Sid\": \"CoderResources\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:DescribeInstanceAttribute\",\n                \"ec2:UnmonitorInstances\",\n                \"ec2:TerminateInstances\",\n                \"ec2:StartInstances\",\n                \"ec2:StopInstances\",\n                \"ec2:DeleteTags\",\n                \"ec2:MonitorInstances\",\n                \"ec2:CreateTags\",\n                \"ec2:RunInstances\",\n                \"ec2:ModifyInstanceAttribute\",\n                \"ec2:ModifyInstanceCreditSpecification\"\n            ],\n            \"Resource\": \"arn:aws:ec2:*:*:instance/*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"aws:ResourceTag/Coder_Provisioned\": \"true\"\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: SCIM User Creation Body Example\nDESCRIPTION: This JSON payload represents the structure for creating a new SCIM user. It includes fields such as active status, emails, groups, ID, meta information, name, schemas, and username. The example shows sample values for each field.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"emails\": [\n    {\n      \"display\": \"string\",\n      \"primary\": true,\n      \"type\": \"string\",\n      \"value\": \"user@example.com\"\n    }\n  ],\n  \"groups\": [\n    null\n  ],\n  \"id\": \"string\",\n  \"meta\": {\n    \"resourceType\": \"string\"\n  },\n  \"name\": {\n    \"familyName\": \"string\",\n    \"givenName\": \"string\"\n  },\n  \"schemas\": [\n    \"string\"\n  ],\n  \"userName\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TLS Secret in Kubernetes\nDESCRIPTION: This snippet demonstrates how to create a TLS secret in a Kubernetes cluster using kubectl.  It requires having the TLS certificate `.key` and `.crt` files available. Replace `<coder-namespace>` with the appropriate namespace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/setup/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret tls coder-tls -n <coder-namespace> --key=\"tls.key\" --cert=\"tls.crt\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to RDP via mstsc\nDESCRIPTION: This command uses the mstsc (Microsoft Terminal Services Client) to connect to the forwarded RDP port on the local machine. It assumes that the port has been forwarded using the `coder port-forward` command. This allows you to access the workspace's RDP session.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/remote-desktops.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nmstsc /v localhost:3399\n```\n\n----------------------------------------\n\nTITLE: Create Organization: Request Body\nDESCRIPTION: This JSON snippet represents the request body required when creating a new organization. The fields `description`, `display_name`, `icon`, and `name` are included. This JSON is sent as the body of a POST request to `/api/v2/organizations`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Workspace Container Command\nDESCRIPTION: This HCL snippet updates the command of the workspace container to include the exectrace init script. It prepends the exectrace init script to the coder agent's init script.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"kubernetes_pod\" \"main\" {\n  ...\n  spec {\n    ...\n    container {\n      ...\n      // NOTE: this command is changed compared to the upstream kubernetes\n      // template\n      command = [\n        \"sh\",\n        \"-c\",\n        \"${local.exectrace_init_script}\\n\\n${coder_agent.main.init_script}\",\n      ]\n      ...\n    }\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Links via System Package\nDESCRIPTION: This snippet demonstrates how to configure support links for Coder when running as a system service.  It involves setting the `CODER_SUPPORT_LINKS` environment variable within the `/etc/coder.d/coder.env` file.  The value is a JSON array defining the name, target, and icon for each support link. The links will be shown in the user dropdown menu.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/setup/appearance.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nCODER_SUPPORT_LINKS='[{\"name\": \"Hello GitHub\", \"target\": \"https://github.com/coder/coder\", \"icon\": \"bug\"}, {\"name\": \"Hello Slack\", \"target\": \"https://codercom.slack.com/archives/C014JH42DBJ\", \"icon\": \"https://raw.githubusercontent.com/coder/coder/main/site/static/icon/slack.svg\"}, {\"name\": \"Hello Discord\", \"target\": \"https://discord.gg/coder\", \"icon\": \"https://raw.githubusercontent.com/coder/coder/main/site/static/icon/discord.svg\"}, {\"name\": \"Hello Foobar\", \"target\": \"https://discord.gg/coder\", \"icon\": \"/emojis/1f3e1.png\"}]'\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Quota Request using Curl\nDESCRIPTION: This curl command retrieves the workspace quota for a specific user within an organization.  The URL requires the organization ID and the user's ID, name, or 'me'.  Authentication is done using the 'Accept' and 'Coder-Session-Token' headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/members/{user}/workspace-quota \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Template Details Response - JSON\nDESCRIPTION: This JSON snippet is an example response containing details of a template, similar to the Create Template Response.  It contains metadata about the template, its configuration, and organizational associations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active_user_count\": 0,\n  \"active_version_id\": \"eae64611-bd53-4a80-bb77-df1e432c0fbc\",\n  \"activity_bump_ms\": 0,\n  \"allow_user_autostart\": true,\n  \"allow_user_autostop\": true,\n  \"allow_user_cancel_workspace_jobs\": true,\n  \"autostart_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ]\n  },\n  \"autostop_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ],\n    \"weeks\": 0\n  },\n  \"build_time_stats\": {\n    \"property1\": {\n      \"p50\": 123,\n      \"p95\": 146\n    },\n    \"property2\": {\n      \"p50\": 123,\n      \"p95\": 146\n    }\n  },\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"created_by_id\": \"9377d689-01fb-4abf-8450-3368d2c1924f\",\n  \"created_by_name\": \"string\",\n  \"default_ttl_ms\": 0,\n  \"deprecated\": true,\n  \"deprecation_message\": \"string\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"failure_ttl_ms\": 0,\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"max_port_share_level\": \"owner\",\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_icon\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"provisioner\": \"terraform\",\n  \"require_active_version\": true,\n  \"time_til_dormant_autodelete_ms\": 0,\n  \"time_til_dormant_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example OAuth2 Application Response (200 OK)\nDESCRIPTION: This JSON snippet represents a successful (200 OK) response from the Coder API when retrieving OAuth2 applications. It includes details for each application, such as the callback URL, endpoints (authorization, device authorization, token), icon, ID, and name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"callback_url\": \"string\",\n    \"endpoints\": {\n      \"authorization\": \"string\",\n      \"device_authorization\": \"string\",\n      \"token\": \"string\"\n    },\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"name\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Bulletproofing with lifecycle ignore_changes\nDESCRIPTION: This snippet shows how to prevent Terraform from recreating a resource, such as a `docker_volume`, by using the `ignore_changes = all` directive within the `lifecycle` block. This ensures that changes to any attribute of the resource will not trigger a recreation, providing maximum persistence. This is useful when the resource is critical and should never be recreated unless explicitly deleted or the entire Terraform block is removed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-persistence.md#_snippet_3\n\nLANGUAGE: tf\nCODE:\n```\ndata \"coder_workspace\" \"me\" {\n}\n\nresource \"docker_volume\" \"home_volume\" {\n  # This resource will survive until either the entire block is deleted\n  # or the workspace is.\n  name = \"coder-${data.coder_workspace.me.id}-home\"\n  lifecycle {\n    ignore_changes = all\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Workspace Agent App Status using curl\nDESCRIPTION: This snippet illustrates how to patch the application status of a workspace agent. It performs a PATCH request to the `/api/v2/workspaceagents/me/app-status` endpoint. The request includes `Content-Type` and `Accept` headers, and the `Coder-Session-Token` for authorization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X PATCH http://coder-server:8080/api/v2/workspaceagents/me/app-status \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Group IDP Sync Config Body\nDESCRIPTION: This JSON snippet represents the request body for updating the group IDP sync configuration. It includes settings for auto-creating missing groups, the field to sync, and a regex filter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_create_missing_groups\": true,\n  \"field\": \"string\",\n  \"regex_filter\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Provisioner Resources in Helm Values\nDESCRIPTION: This YAML snippet shows how to configure CPU and memory limits and requests for provisioners within a Helm chart's values.yaml file. This configuration affects resource allocation for workspace provisioning tasks.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/speed-up-templates.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n…\n  resources:\n    limits:\n      cpu: \"0.25\"\n      memory: \"1Gi\"\n    requests:\n      cpu: \"0.25\"\n      memory: \"1Gi\"\n…\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Device Flow via Env Variable\nDESCRIPTION: This environment variable enables device flow for GitHub OAuth. Device flow is optional for custom GitHub OAuth apps and enabled by setting this variable to `true`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_8\n\nLANGUAGE: env\nCODE:\n```\nCODER_OAUTH2_GITHUB_DEVICE_FLOW=true\n```\n\n----------------------------------------\n\nTITLE: Unfavoriting Workspace - cURL Example\nDESCRIPTION: Illustrates how to unfavorite a workspace using a DELETE request with cURL.  It uses the `Coder-Session-Token` header for authentication and targets the `/workspaces/{workspace}/favorite` endpoint. The `{workspace}` placeholder should be replaced with the workspace's UUID. A successful operation returns a 204 No Content.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/workspaces/{workspace}/favorite \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Postgres Connection URL\nDESCRIPTION: This command retrieves the connection URL for the built-in Postgres database used by Coder. This URL includes the database user, password, and other connection details. This is followed by example usage of psql to connect.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncoder server postgres-builtin-url\npsql \"postgres://coder@localhost:53737/coder?sslmode=disable&password=I2S...pTk\"\n```\n\n----------------------------------------\n\nTITLE: Example Create Provisioner Key Response JSON\nDESCRIPTION: This JSON response (201 Created) represents the successful creation of a provisioner key. It contains the generated key, which must conform to the `codersdk.CreateProvisionerKeyResponse` schema.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Role Syncing based on Group Membership via Environment Variables\nDESCRIPTION: This snippet configures Coder for role syncing based on Okta group membership. It requires the `groups` scope and sets `CODER_OIDC_USER_ROLE_FIELD` to the same claim name as in Okta.  `CODER_OIDC_USER_ROLE_MAPPING` maps Okta groups to Coder roles.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/configuring-okta.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Requires the \"groups\" scope\nCODER_OIDC_SCOPES=openid,profile,email,groups\n# This name needs to match the \"Claim name\" in the configuration above.\nCODER_OIDC_USER_ROLE_FIELD=groups\n# Example configuration to map a group to some roles\nCODER_OIDC_USER_ROLE_MAPPING='{\"admin-group\":[\"template-admin\",\"user-admin\"]}'\n```\n\n----------------------------------------\n\nTITLE: Get Logs by Template Version using curl\nDESCRIPTION: This snippet demonstrates how to retrieve logs for a specific template version using a curl request. The request requires a template version ID and a Coder Session Token for authentication.  Optional parameters include `before`, `after`, and `follow` for filtering or streaming logs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/logs \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Setting Azure DevOps Environment Variables\nDESCRIPTION: This code snippet shows the environment variables required for Azure DevOps external authentication. It includes the ID, type, client ID, client secret, authentication URL, and token URL. The client secret should be the \"Client Secret\", not the \"App Secret\".\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"primary-azure-devops\"\nCODER_EXTERNAL_AUTH_0_TYPE=azure-devops\nCODER_EXTERNAL_AUTH_0_CLIENT_ID=xxxxxx\n# Ensure this value is your \"Client Secret\", not \"App Secret\"\nCODER_EXTERNAL_AUTH_0_CLIENT_SECRET=xxxxxxx\nCODER_EXTERNAL_AUTH_0_AUTH_URL=\"https://app.vssps.visualstudio.com/oauth2/authorize\"\nCODER_EXTERNAL_AUTH_0_TOKEN_URL=\"https://app.vssps.visualstudio.com/oauth2/token\"\n```\n\n----------------------------------------\n\nTITLE: Check OpenShift Permissions\nDESCRIPTION: Lists the permissions of the current OpenShift user. This is useful for debugging RBAC (Role-Based Access Control) errors during Helm installation.  It shows the resources and verbs the user is authorized to use.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\noc auth can-i --list\nResources                                          Non-Resource URLs   Resource Names    Verbs\nselfsubjectaccessreviews.authorization.k8s.io      []                  []                [create]\nselfsubjectrulesreviews.authorization.k8s.io       []                  []                [create]\n*                                                  []                  []                [get list watch create update patch delete deletecollection]\n*.apps                                             []                  []                [get list watch create update patch delete deletecollection]\n*.rbac.authorization.k8s.io                        []                  []                [get list watch create update patch delete deletecollection]\n                                                   [/.well-known/*]    []                [get]\n                                                   [/.well-known]      []                [get]\n                                                   [/api/*]            []                [get]\n                                                   [/api]              []                [get]\n                                                   [/apis/*]           []                [get]\n                                                   [/apis]             []                [get]\n                                                   [/healthz]          []                [get]\n                                                   [/healthz]          []                [get]\n                                                   [/livez]           []                [get]\n                                                   [/livez]            []                [get]\n                                                   [/openapi/*]        []                [get]\n                                                   [/openapi]        []                [get]\n                                                   [/readyz]           []                [get]\n                                                   [/readyz]            []                [get]\n                                                   [/version/]         []                [get]\n                                                   [/version/]          []                [get]\n                                                   [/version]          []                [get]\n                                                   [/version]          []                [get]\nsecuritycontextconstraints.security.openshift.io   []                  [restricted-v2]   [use]\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder with IDP Authentication\nDESCRIPTION: This command configures the Coder instance with the external authentication provider details from the IDP service. It uses the `develop.sh` script to pass the `--external-auth-providers` flag, which specifies the authentication details, including client ID, client secret, auth URL, token URL, validate URL, and scopes for the fake provider.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/testidp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevelop.sh -- --external-auth-providers='[{\"type\":\"fake\",\"client_id\":\"f2df566b-a1c9-407a-8b75-480db45c6476\",\"client_secret\":\"55aca4e3-7b94-44b6-9f45-ecb5e81c560d\",\"auth_url\":\"http://127.0.0.1:44517/oauth2/authorize\",\"token_url\":\"http://127.0.0.1:44517/oauth2/token\",\"validate_url\":\"http://127.0.0.1:44517/oauth2/userinfo\",\"scopes\":[\"openid\",\"email\",\"profile\"]}]'\n```\n\n----------------------------------------\n\nTITLE: Autofill Build Parameters Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response containing autofill build parameters for a user. It includes an array of objects, each with a `name` and `value` field representing the parameter name and its value. These parameters are used to pre-populate build configurations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"string\",\n    \"value\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP for Claude Desktop/Cursor via Coder CLI\nDESCRIPTION: These commands configure MCP servers for Claude Desktop and Cursor to enable interaction with a Coder deployment. They facilitate listing workspaces, creating/starting/stopping workspaces, running commands, and checking agent activity. The commands are executed on the local machine.\nSOURCE: https://github.com/coder/coder/blob/main/docs/ai-coder/headless.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncoder exp mcp configure claude-desktop # Configure Claude Desktop to interact with Coder\ncoder exp mcp configure cursor # Configure Cursor to interact with Coder\n```\n\n----------------------------------------\n\nTITLE: AWS Authentication Success Response (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure of a successful authentication response from the Coder Server when authenticating an AWS instance. It includes a `session_token` that the agent can use for subsequent requests.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"session_token\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Coder Application Resource in Terraform\nDESCRIPTION: This Terraform resource defines a Coder application, specifying its agent ID, slug, icon, URL, subdomain, share settings, and health check configuration. It allows developers to visually manage applications in the Coder dashboard and configure port forwarding options.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/port-forwarding.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n# node app\nresource \"coder_app\" \"node-react-app\" {\n  agent_id  = coder_agent.dev.id\n  slug      = \"node-react-app\"\n  icon      = \"https://upload.wikimedia.org/wikipedia/commons/a/a7/React-icon.svg\"\n  url       = \"http://localhost:3000\"\n  subdomain = true\n  share     = \"authenticated\"\n\n  healthcheck {\n    url       = \"http://localhost:3000/healthz\"\n    interval  = 10\n    threshold = 30\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting User-Scoped Tailnet RPC Connection using curl\nDESCRIPTION: This snippet shows how to establish a user-scoped tailnet RPC connection to the Coder Server. It utilizes `curl` with a GET request to the `/api/v2/tailnet` endpoint. Authentication is handled through the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/tailnet \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Health Settings Update Example (JSON)\nDESCRIPTION: This JSON snippet represents the body of a PUT request to update health settings. The `dismissed_healthchecks` array contains a list of health check identifiers to be dismissed. This example shows how to format the request body for the `/debug/health/settings` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/debug.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dismissed_healthchecks\": [\n    \"DERP\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Notification Dispatch Methods - cURL\nDESCRIPTION: This cURL command retrieves the available notification dispatch methods from the Coder server. It sends a GET request to `/api/v2/notifications/dispatch-methods` with the `Coder-Session-Token` header for authentication. The expected response is a JSON array of dispatch method objects.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/notifications/dispatch-methods \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Authenticating Agent on Azure Instance using curl\nDESCRIPTION: This snippet demonstrates how to authenticate an agent running on an Azure instance against the Coder Server. It sends a POST request to the `/api/v2/workspaceagents/azure-instance-identity` endpoint, including necessary headers for JSON content and acceptance. Authentication is performed using the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X POST http://coder-server:8080/api/v2/workspaceagents/azure-instance-identity \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Clients (Shell)\nDESCRIPTION: Downloads JetBrains IDE clients using the jetbrains-clients-downloader tool. The script creates a clients directory and uses product code, build number and platform filters. It downloads the clients to the specified directory for access by JetBrains Gateway. This command omits the `--download-backends` flag.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/clients\n./jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader --products-filter <product-code> --build-filter <build-number> --platforms-filter linux-x64,windows-x64,osx-x64 ~/clients\n```\n\n----------------------------------------\n\nTITLE: Deleting a Group via API with Curl\nDESCRIPTION: This snippet demonstrates how to delete a group using the Coder API v2 with a DELETE request. It uses curl to send the request to the `/groups/{group}` endpoint, requiring the group name as a path parameter and a valid `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/groups/{group} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example External Auth Response (GET)\nDESCRIPTION: This JSON snippet shows an example response for a successful GET request to retrieve external authentication details. It includes fields such as `authenticated`, `created_at`, `expires`, `has_refresh_token`, `provider_id`, `updated_at`, and `validate_error`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"authenticated\": true,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"expires\": \"2019-08-24T14:15:22Z\",\n  \"has_refresh_token\": true,\n  \"provider_id\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"validate_error\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Autofill Build Parameters with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve autofill build parameters for a user using a curl command. It sends a GET request to the `/users/{user}/autofill-parameters` endpoint, including the user identifier in the path and the `template_id` as a query parameter. The request requires `Accept: application/json` and `Coder-Session-Token` headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/autofill-parameters?template_id=string \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Updating a Coder Workspace\nDESCRIPTION: This command updates a Coder workspace, prompting the user to re-enter input variables. This can resolve issues where a template has been updated and existing workspaces based on that template fail to start due to inconsistencies in the Terraform state.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncoder update --always-prompt <workspace name>\n```\n\n----------------------------------------\n\nTITLE: Validate Password via API - Shell\nDESCRIPTION: This shell script demonstrates how to validate a user's password using the `/users/validate-password` endpoint. It requires a Coder session token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/validate-password \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions - Coder CLI\nDESCRIPTION: This command lists all versions of a specified template.  It accepts a template name as an argument and allows for filtering archived versions.  The output can be customized using the `--output` and `--column` flags.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_versions_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates versions list [flags] <template>\n```\n\n----------------------------------------\n\nTITLE: Executing Coder Templates Versions Command\nDESCRIPTION: This command is used to manage different versions of a specified template within the Coder environment. It provides subcommands for listing, archiving, unarchiving, and promoting template versions. No specific dependencies are mentioned, but the Coder CLI is a prerequisite.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_versions.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates versions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Paginated Organization Members with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve a paginated list of organization members using a curl command. It sends a GET request to the specified endpoint, including the organization ID in the path and optional limit and offset query parameters.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/paginated-members \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Provisioner Daemons via API call with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve provisioner daemons using a `curl` command.  It makes a GET request to the specified endpoint, including headers for accepting JSON and providing an API key. The organization ID is passed as a path parameter, and an API key is required for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/provisioning.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/provisionerdaemons \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Kubeconfig\nDESCRIPTION: This command creates a Kubernetes secret named kubeconfig-secret in the coder namespace, using your local kubeconfig file. It assumes Coder is deployed in the coder namespace and your kubeconfig is located at ~/.kube/config. It requires kubectl.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic kubeconfig-secret -n coder --from-file=~/.kube/config\n```\n\n----------------------------------------\n\nTITLE: Example Provisioner Jobs Response\nDESCRIPTION: This is an example response containing an array of provisioner job objects in JSON format. Each object contains details such as available_workers, canceled_at, completed_at, created_at, error, error_code, file_id, id, input, metadata, organization_id, queue_position, queue_size, started_at, status, tags, type, and worker_id.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Altering PostgreSQL Role Search Path\nDESCRIPTION: This SQL statement modifies the `search_path` setting for the 'coder' role. It ensures that the 'myschema' is used by default when the 'coder' role connects to the database. Requires connection to the database with sufficient privileges.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_7\n\nLANGUAGE: SQL\nCODE:\n```\nALTER ROLE coder SET search_path = myschema;\n```\n\n----------------------------------------\n\nTITLE: Create OAuth2 Application Secret with curl\nDESCRIPTION: Creates a new OAuth2 application secret using a POST request. Requires the `app` ID as a path parameter and a valid Coder session token for authentication. Returns an array containing the newly created secret.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/oauth2-provider/apps/{app}/secrets \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Starting Colima on an M3 MacBook Pro\nDESCRIPTION: This shell script starts Colima on an M3 MacBook Pro with specific compute options and architecture: x86_64 architecture, 4 CPUs, 8GB of memory and 10 GB of disk. This is necessary for some containers that are not yet compatible with the ARM architecture of Apple Silicon.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\ncolima start --arch x86_64  --cpu 4 --memory 8 --disk 10\n```\n\n----------------------------------------\n\nTITLE: Upgrading Coder via Helm\nDESCRIPTION: This command shows how to upgrade a Coder deployment using Helm, referencing the `values.yaml` file for configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade <release-name> coder-v2/coder -n <namespace> -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Get User Status Counts with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve insights about user status counts using a cURL request. It requires the `tz_offset` parameter to specify the timezone offset, and a valid Coder API key for authentication. The API returns a JSON response containing status counts for various properties.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/insights/user-status-counts?tz_offset=0 \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Defining Zed Coder App\nDESCRIPTION: This Terraform code defines a `coder_app` resource for Zed, an external editor. The `agent_id` links the app to the Coder agent. The `url` uses a custom Zed URI scheme to connect via SSH to the workspace and specifies the icon location.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/index.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"coder_app\" \"zed\" {\n    agent_id = coder_agent.main.id\n    slug          = \"slug\"\n    display_name  = \"Zed\"\n    external = true\n    url      = \"zed://ssh/coder.${data.coder_workspace.me.name}\"\n    icon     = \"/icon/zed.svg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Workspace Build Parameters with Curl\nDESCRIPTION: This snippet provides a curl command to fetch build parameters associated with a specific workspace build. It specifies the request method (GET), the API endpoint, headers for accepting JSON and providing an authentication token.  The `workspacebuild` parameter in the URL must be replaced with the correct workspace build ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild}/parameters \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Create User via Coder CLI\nDESCRIPTION: This command creates a new user in Coder via the command-line interface.  It prompts for the username and email of the new user. The user then receives instructions to log in.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder users create\n```\n\n----------------------------------------\n\nTITLE: Auto-Clone Repo with Parameter and External Auth\nDESCRIPTION: This HCL snippet configures a Coder template to clone a git repository from a user-provided parameter. It requires external authentication and prompts the user for the git repository URL using a `coder_parameter` data source. The `coder_agent` resource then clones the repository to a directory based on the repository name. The `try` function is used to safely extract the repository name from the URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/open-in-coder.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# Require external authentication to use this template\ndata \"coder_external_auth\" \"github\" {\n    id = \"primary-github\"\n}\n\n# Prompt the user for the git repo URL\ndata \"coder_parameter\" \"git_repo\" {\n    name          = \"git_repo\"\n    display_name  = \"Git repository\"\n    default       = \"https://github.com/coder/coder\"\n}\n\nlocals {\n    folder_name = try(element(split(\"/\", data.coder_parameter.git_repo.value), length(split(\"/\", data.coder_parameter.git_repo.value)) - 1), \"\")\n}\n\nresource \"coder_agent\" \"dev\" {\n    # ...\n    dir = \"~/${local.folder_name}\"\n    startup_script =<<EOF\n\n    # Clone repo from GitHub\n    if [ ! -d \"${local.folder_name}\" ]\n    then\n        git clone ${data.coder_parameter.git_repo.value}\n    fi\n\n    EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Example OAuth2 Secret Response (POST)\nDESCRIPTION: Example JSON response structure for a successful POST request to create an OAuth2 application secret. Shows the format and fields returned, including `client_secret_full` and `id`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_secret_full\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Plugins Directory\nDESCRIPTION: This shell command creates an empty directory named `plugins` in the user's home directory. This directory is intended to be used as a local filesystem mirror for Terraform providers in an offline environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/offline.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmkdir $HOME/plugins\n```\n\n----------------------------------------\n\nTITLE: Using --always-prompt Flag\nDESCRIPTION: This snippet describes the use of the `--always-prompt` flag with the `coder update` command.  This flag forces the CLI to prompt for all parameter values, even if they are already defined in the existing workspace. This ensures the user can modify the workspace's parameters during the update process.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/update.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nUse --always-prompt to change the parameter values of the workspace.\n```\n\n----------------------------------------\n\nTITLE: Template Creation Response - JSON\nDESCRIPTION: This JSON snippet represents a successful response after creating a template. It includes details like active user count, active version ID, various TTL settings, build time statistics, creation timestamps, deprecation status, description, display name, icon, ID, maximum port share level, name, organization details, provisioner, active version requirement, and update timestamp.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active_user_count\": 0,\n  \"active_version_id\": \"eae64611-bd53-4a80-bb77-df1e432c0fbc\",\n  \"activity_bump_ms\": 0,\n  \"allow_user_autostart\": true,\n  \"allow_user_autostop\": true,\n  \"allow_user_cancel_workspace_jobs\": true,\n  \"autostart_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ]\n  },\n  \"autostop_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ],\n    \"weeks\": 0\n  },\n  \"build_time_stats\": {\n    \"property1\": {\n      \"p50\": 123,\n      \"p95\": 146\n    },\n    \"property2\": {\n      \"p50\": 123,\n      \"p95\": 146\n    }\n  },\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"created_by_id\": \"9377d689-01fb-4abf-8450-3368d2c1924f\",\n  \"created_by_name\": \"string\",\n  \"default_ttl_ms\": 0,\n  \"deprecated\": true,\n  \"deprecation_message\": \"string\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"failure_ttl_ms\": 0,\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"max_port_share_level\": \"owner\",\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_icon\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"provisioner\": \"terraform\",\n  \"require_active_version\": true,\n  \"time_til_dormant_autodelete_ms\": 0,\n  \"time_til_dormant_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Template Version Dry-Run Logs (curl)\nDESCRIPTION: This curl command shows how to retrieve logs for a template version dry-run job using a GET request.  It requires the template version ID and job ID. Optional parameters include 'before', 'after', and 'follow' for filtering and streaming the logs. The command includes headers for accepting JSON and providing the Coder session token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/dry-run/{jobID}/logs \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configure Regex Filter for OIDC Groups (Environment Variable)\nDESCRIPTION: This snippet demonstrates how to configure a regex filter for OIDC groups to allow only specific groups to be created via environment variable. It prevents the creation of unnecessary groups that do not match the pattern.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_25\n\nLANGUAGE: env\nCODE:\n```\n# as an environment variable\nCODER_OIDC_GROUP_REGEX_FILTER=\"^my-group-.*$\"\n```\n\n----------------------------------------\n\nTITLE: Example User Latency Response JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the `/insights/user-latency` endpoint. It includes a report with user latency statistics, including p50 and p95 latency values in milliseconds.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"report\": {\n    \"end_time\": \"2019-08-24T14:15:22Z\",\n    \"start_time\": \"2019-08-24T14:15:22Z\",\n    \"template_ids\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"users\": [\n      {\n        \"avatar_url\": \"http://example.com\",\n        \"latency_ms\": {\n          \"p50\": 31.312,\n          \"p95\": 119.832\n        },\n        \"template_ids\": [\n          \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n        ],\n        \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\",\n        \"username\": \"string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update SCIM User with curl\nDESCRIPTION: This curl command updates an existing SCIM user using a PATCH request. It requires the user ID in the endpoint URL, content type and accept type headers set to application/json and application/scim+json respectively.  It also includes an authorization header. It expects a JSON payload in the request body conforming to the SCIM user schema and a valid API key for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/scim/v2/Users/{id} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/scim+json' \\\n  -H 'Authorizaiton: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Terraform Provider\nDESCRIPTION: Configures the AWS Terraform provider to assume a role using web identity federation with a Google Cloud service account.  It specifies the role ARN, session name, and the location of the identity token file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/gcp-to-aws.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider \"aws\" {\n  assume_role_with_web_identity {\n    # enter role ARN here - copy from AWS console\n    role_arn = \"arn:aws:iam::123456789:role/gcp-to-aws\"\n    # arbitrary value for logging\n    session_name = \"coder-session\"\n    # define location of token file on control plane here\n    web_identity_token_file = \"/home/coder/.aws/gcp-identity-token\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pause Coder Notifications via CLI\nDESCRIPTION: This command pauses all notifications in the Coder application. It can be used to temporarily silence notifications when they are not needed or are becoming disruptive.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/notifications_pause.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder notifications pause\n```\n\n----------------------------------------\n\nTITLE: Defining an Immutable Parameter in Terraform\nDESCRIPTION: This code defines a `coder_parameter` resource named `region` with the `mutable` attribute set to `false`. This makes the parameter immutable, meaning the user can only set it when creating the workspace or updating to a new template version.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"region\" {\n  name        = \"Region\"\n  description = \"Region where the workspace is hosted\"\n  mutable     = false\n  default     = \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding coder user to Docker group\nDESCRIPTION: Adds the `coder` user to the Docker group, restarts the Coder server, and tests Docker functionality. This ensures that the Coder user has the necessary permissions to interact with the Docker daemon.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/docker/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Add coder user to Docker group\nsudo adduser coder docker\n\n# Restart Coder server\nsudo systemctl restart coder\n\n# Test Docker\nsudo -u coder docker ps\n```\n\n----------------------------------------\n\nTITLE: Get Available IDP Sync Claim Fields Response (JSON)\nDESCRIPTION: This JSON snippet is an example response of the API endpoint for getting the available IDP sync claim fields. It returns an array of strings representing the available claim fields.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"string\"\n]\n```\n\n----------------------------------------\n\nTITLE: Cancel Template Version Response (200 OK)\nDESCRIPTION: This JSON snippet represents a successful (200 OK) response from the API when cancelling a template version. It contains details about the operation's outcome, including messages and potential validation errors.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel Workspace Build Response Example\nDESCRIPTION: This is an example of a successful (200) response when cancelling a workspace build. It includes details and a message indicating the outcome of the cancel operation, as well as any validation errors that may have occurred.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Workspace Deadline Extension Request Body\nDESCRIPTION: This JSON snippet defines the request body required to extend a workspace's deadline. It includes a single parameter, `deadline`, which specifies the new deadline for the workspace in ISO 8601 format. This body is sent in the PUT request to the `/workspaces/{workspace}/extend` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deadline\": \"2019-08-24T14:15:22Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enable Automatic Group Creation in Coder (Flag)\nDESCRIPTION: This snippet shows how to enable automatic creation of groups in Coder if they do not already exist via command-line flag. It can be useful if groups are not pre-created in Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n# as a flag\n--oidc-group-auto-create=true\n```\n\n----------------------------------------\n\nTITLE: Install Coder Remote Extension\nDESCRIPTION: This command is used to install the Coder Remote extension in VS Code.  It is intended to be executed from the VS Code command palette. This extension enables the VS Code desktop client to connect to Coder workspaces.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\next install coder.coder-remote\n```\n\n----------------------------------------\n\nTITLE: Get OpenShift ImageStreamTag\nDESCRIPTION: This command retrieves the details of the `enterprise-base:latest` ImageStreamTag.  It shows the IMAGE REFERENCE, which is the full path to the image in the OpenShift internal registry, and the last time the tag was updated. Requires OpenShift CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\noc get imagestreamtag\n\n```\n\n----------------------------------------\n\nTITLE: Create OAuth2 Application using curl\nDESCRIPTION: This code snippet demonstrates how to create a new OAuth2 application using a `curl` command. It sends a POST request to the `/oauth2-provider/apps` endpoint with the application details in JSON format within the request body.  The request requires authentication via the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/oauth2-provider/apps \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Fetching Cluster CA Certificate and Token\nDESCRIPTION: These commands fetch the CA certificate and token from the Kubernetes secret and store them in environment variables. They use kubectl and jsonpath to extract the values. This is for setting up ServiceAccount authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nexport CLUSTER_CA_CERTIFICATE=$(kubectl get secrets coder-v2 -n coder-workspaces -o jsonpath=\"{.data.ca\\.crt}\")\n\nexport CLUSTER_SERVICEACCOUNT_TOKEN=$(kubectl get secrets coder-v2 -n coder-workspaces -o jsonpath=\"{.data.token}\")\n```\n\n----------------------------------------\n\nTITLE: Delete Workspace Proxy with Curl\nDESCRIPTION: This example demonstrates how to delete a workspace proxy using a curl command. It sends a DELETE request to the specified endpoint, including the `Accept` header and the `Coder-Session-Token` for authentication. The `{workspaceproxy}` path parameter should be replaced with the actual Proxy ID or name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_128\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/workspaceproxies/{workspaceproxy} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Group by Name Request using Curl\nDESCRIPTION: This curl command retrieves a group by its name within a specific organization. The organization and group names are specified in the URL path. The 'Accept' and 'Coder-Session-Token' headers are required for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/groups/{groupName} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Logs\nDESCRIPTION: This code snippet illustrates the structure of a JSON response returned by the API when retrieving workspace agent logs. The response is an array of log objects, each containing fields like 'created_at', 'id', 'level', 'output', and 'source_id'. It provides a clear representation of the data format expected from the API endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"id\": 0,\n    \"level\": \"trace\",\n    \"output\": \"string\",\n    \"source_id\": \"ae50a35c-df42-4eff-ba26-f8bc28d2af81\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Activating NGINX Configuration File\nDESCRIPTION: This command creates a symbolic link to the NGINX configuration file in the `sites-enabled` directory.  This activates the configuration for use by NGINX.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/coder.example.com /etc/nginx/sites-enabled/coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Coder Templates Init Usage\nDESCRIPTION: Shows how to use the `coder templates init` command with optional flags and a directory. This allows a user to quickly create the necessary configuration files to use a specific template in the given directory.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_init.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates init [flags] [directory]\n```\n\n----------------------------------------\n\nTITLE: Creating Cloudflare API token file\nDESCRIPTION: These commands create the directory and file to store the Cloudflare API token, and then open the file with the nano editor to allow the user to paste in their API token.  These commands setup a secure location to store the credentials required by Certbot to update DNS records.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.secrets/certbot\ntouch ~/.secrets/certbot/cloudflare.ini\nnano ~/.secrets/certbot/cloudflare.ini\n```\n\n----------------------------------------\n\nTITLE: Adding the Coder Helm Repository\nDESCRIPTION: This command adds the Coder Helm repository to your local Helm configuration. This allows you to install Coder charts from the official Coder repository.  It requires Helm to be installed and configured to connect to your Kubernetes cluster.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add coder-v2 https://helm.coder.com/v2\n```\n\n----------------------------------------\n\nTITLE: Listing Provisioner Key Daemons using curl\nDESCRIPTION: This snippet shows how to list provisioner key daemons using a curl request. It requires an organization ID and a Coder session token. The API returns a JSON array containing details of the provisioner key daemons.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/provisionerkeys/daemons \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Post External Auth Device by ID with Curl\nDESCRIPTION: This snippet illustrates how to initiate the device authentication process by sending a POST request to the `/api/v2/external-auth/{externalauth}/device` endpoint, where `{externalauth}` represents the external authentication ID.  The request includes the `Coder-Session-Token` header for authentication. A successful request returns a 204 No Content status.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/external-auth/{externalauth}/device \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure - 200 OK\nDESCRIPTION: Defines the structure of a typical 200 OK response from the Coder API.  It includes fields for detail, message and validations, with the validations themselves having a detail and field property.  This is a common schema used across different API endpoints.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example External Auth Device Response (GET)\nDESCRIPTION: This JSON snippet presents an example response for a successful GET request to retrieve device information related to external authentication. The response includes fields such as `device_code`, `expires_in`, `interval`, `user_code`, and `verification_uri`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_code\": \"string\",\n  \"expires_in\": 0,\n  \"interval\": 0,\n  \"user_code\": \"string\",\n  \"verification_uri\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Delete Workspace Proxy Response\nDESCRIPTION: This is an example JSON response when successfully deleting a workspace proxy. It includes fields such as `detail`, `message`, and `validations`, providing details about the operation's outcome.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_129\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking cgroup controllers - Verify enabled memory\nDESCRIPTION: This shell command checks the currently available cgroup controllers again. It's used to verify that `memory` has been successfully enabled after modifying the `cmdline.txt` file and rebooting. The expected output should include `cpuset cpu io memory pids`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cat /sys/fs/cgroup/cgroup.controllers\ncpuset cpu io memory pids\n\n$ cat /sys/fs/cgroup/cgroup.subtree_control\ncpuset cpu io memory pids\n```\n\n----------------------------------------\n\nTITLE: User Git SSH Key Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response containing a user's Git SSH key information. It includes fields such as `created_at`, `public_key`, `updated_at`, and `user_id`. This response provides the necessary information to access the user's Git repositories.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"public_key\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Colima with Default Settings\nDESCRIPTION: This shell script starts Colima with its default settings. It is a simple command to initiate Colima after installation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\ncolima start\n```\n\n----------------------------------------\n\nTITLE: Stopping a Coder workspace\nDESCRIPTION: This command stops a specified Coder workspace. The `<workspace>` argument is the name of the workspace to stop. The `-y` or `--yes` flag can be used to bypass prompts, assuming a 'yes' response to any confirmation prompts.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/stop.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder stop [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Defining an Ephemeral Parameter in Terraform\nDESCRIPTION: This code defines a `coder_parameter` resource named `force_rebuild` with the `ephemeral` attribute set to `true`. Ephemeral parameters are only settable when starting, updating, or restarting a workspace and do not persist after the workspace is stopped.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"force_rebuild\" {\n  name         = \"force_rebuild\"\n  type         = \"bool\"\n  description  = \"Rebuild the Docker image rather than use the cached one.\"\n  mutable      = true\n  default      = false\n  ephemeral    = true\n}\n```\n\n----------------------------------------\n\nTITLE: Updating User Quiet Hours via PUT Request\nDESCRIPTION: This curl command demonstrates how to update a user's quiet hours schedule using a PUT request.  It requires the `Content-Type`, `Accept`, and `Coder-Session-Token` headers. The API key should be replaced with a valid authentication token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_116\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/quiet-hours \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Push Template using coder-dev.sh\nDESCRIPTION: This bash command pushes the template to Coder using the coder-dev.sh script. It specifies the template directory, variables file, and confirms the action with -y.\nSOURCE: https://github.com/coder/coder/blob/main/examples/parameters-dynamic-options/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/coder-dev.sh templates push examples-parameters-dynamic-options \\\n  -d examples/parameters-dynamic-options \\\n  --variables-file examples/parameters-dynamic-options/variables.yml \\\n  -y\n```\n\n----------------------------------------\n\nTITLE: Example Response for Adding/Assigning Org Member\nDESCRIPTION: This JSON snippet shows an example response for adding an organization member or assigning a role. It includes information about the user, organization, and assigned roles.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Stats Aggregation - YAML\nDESCRIPTION: This snippet demonstrates how to configure the aggregation of agent statistics in Coder Server when using Prometheus. This is relevant for high-scale deployments to manage cardinality. The example aggregates by agent name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/scale-coder.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nCODER_PROMETHEUS_AGGREGATE_AGENT_STATS_BY=agent_name\n```\n\n----------------------------------------\n\nTITLE: Deleting Provisioner Key using curl\nDESCRIPTION: This snippet shows how to delete a provisioner key using a curl request. It requires an organization ID and a provisioner key. The API returns a 204 No Content response if the deletion is successful.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/organizations/{organization}/provisionerkeys/{provisionerkey} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Getting Kubernetes Cluster Info\nDESCRIPTION: This command retrieves information about the Kubernetes cluster, including the API server address. It is used to obtain the cluster host address for configuring the Kubernetes provider. It requires kubectl.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl cluster-info\n```\n\n----------------------------------------\n\nTITLE: Get Magicsock Debug Information using curl\nDESCRIPTION: Fetches debug information for magicsock, which is part of the Tailscale wgengine. Requires the CODER_AGENT_DEBUG_ADDRESS environment variable to be set. Refer to Tailscale's documentation for details on the output.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/agent-api/debug.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl $CODER_AGENT_DEBUG_ADDRESS/debug/magicsock\n```\n\n----------------------------------------\n\nTITLE: Making the Certbot cron job executable\nDESCRIPTION: This command sets the execution permission for the Certbot renewal script, allowing the system to execute it as a cron job.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo chmod +x /etc/cron.weekly/certbot\n```\n\n----------------------------------------\n\nTITLE: Querying Enabled Experiments using curl\nDESCRIPTION: This snippet demonstrates fetching enabled experiments with a curl request, requiring a Coder-Session-Token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/experiments \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Template ACL Request Body - JSON\nDESCRIPTION: This JSON snippet represents the request body for updating a template's ACL. It includes `group_perms` and `user_perms` which define the permissions for specific groups and users respectively.  Permissions can be set to 'use' or 'admin'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_110\n\nLANGUAGE: json\nCODE:\n```\n{\"group_perms\": {\"8bd26b20-f3e8-48be-a903-46bb920cf671\": \"use\", \"<user_id>>\": \"admin\"},\"user_perms\": {\"4df59e74-c027-470b-ab4d-cbba8963a5e9\": \"use\", \"<group_id>\": \"admin\"}}\n```\n\n----------------------------------------\n\nTITLE: Example Group IDP Sync Settings Response\nDESCRIPTION: This JSON snippet shows the structure of a successful response when retrieving group IDP sync settings. It includes properties like auto_create_missing_groups, field, legacy_group_name_mapping, mapping, and regex_filter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_create_missing_groups\": true,\n  \"field\": \"string\",\n  \"legacy_group_name_mapping\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"regex_filter\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Workspace Proxy Status with Coder CLI\nDESCRIPTION: This snippet shows how to check the status of workspace proxies using the Coder CLI. It requires the Coder CLI. The output displays the status of each proxy, indicating whether it is registered, reachable, healthy, or experiencing issues. The status codes provide insights into the proxy's operational state.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ coder wsproxy ls\nNAME              URL                         STATUS STATUS\nprimary           https://dev.coder.com        ok\nbrazil-saopaulo   https://brazil.example.com   ok\neurope-frankfurt  https://europe.example.com   ok\nsydney            https://sydney.example.com   ok\n```\n\n----------------------------------------\n\nTITLE: Get workspace build by ID using curl\nDESCRIPTION: This code snippet shows how to retrieve a workspace build by its unique ID using curl. The workspace build ID is specified in the URL.  Authentication via the 'Coder-Session-Token' header is mandatory.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Resume Notifications using Coder CLI\nDESCRIPTION: This command resumes the display of notifications within the Coder CLI. There are no explicit dependencies besides the Coder CLI being installed and configured.  It assumes a properly configured environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/notifications_resume.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder notifications resume\n```\n\n----------------------------------------\n\nTITLE: Sharing Coder App with Authentication in Terraform\nDESCRIPTION: This Terraform snippet demonstrates how to configure a `coder_app` resource to be shared with authenticated users. When applied, workspaces built using the template will expose the app (e.g., code-server) behind authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_app\" \"code-server\" {\n  ...\n  share        = \"authenticated\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Usage of 'coder tokens' command\nDESCRIPTION: Shows the basic usage of the 'coder tokens' command within the Coder CLI. This is the root command for managing tokens.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/tokens.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder tokens\n```\n\n----------------------------------------\n\nTITLE: Example User Roles Response\nDESCRIPTION: This JSON snippet is an example response body for the get user roles endpoint. It shows the structure of the returned user object, including fields such as avatar_url, created_at, email, and roles.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"http://example.com\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"email\": \"user@example.com\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"status\": \"active\",\n  \"theme_preference\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a template using Coder CLI\nDESCRIPTION: This code snippet demonstrates how to delete a Coder template using the Coder CLI. It requires the user to be logged in to Coder and have template admin or owner permissions. The `<template-name>` placeholder needs to be replaced with the actual name of the template to be deleted.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates delete <template-name>\n```\n\n----------------------------------------\n\nTITLE: Update User Quiet Hours 200 Response\nDESCRIPTION: This JSON represents a successful (200 OK) response after updating a user's quiet hours schedule.  It contains information about the next scheduled quiet hours, the raw schedule string, time, timezone, and user preferences regarding setting the schedule.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_118\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"next\": \"2019-08-24T14:15:22Z\",\n    \"raw_schedule\": \"string\",\n    \"time\": \"string\",\n    \"timezone\": \"string\",\n    \"user_can_set\": true,\n    \"user_set\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining agentsdk.Manifest Schema (JSON)\nDESCRIPTION: Defines the JSON schema for the `agentsdk.Manifest` object. This schema outlines the structure and properties of the agent manifest, including agent ID, name, workspace details, apps, DERP configurations, environment variables, metadata, and scripts. It specifies the required fields and their data types. The `apps` property contains an array of `codersdk.WorkspaceApp` objects, and the `derpmap` property refers to a `tailcfg.DERPMap` object.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/agent-api/schemas.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"agent_id\": \"151321db-0713-473c-ab42-2cc6ddeab1a4\",\n    \"agent_name\": \"string\",\n    \"owner_name\": \"string\",\n    \"workspace_id\": \"8ef13a0d-a5c9-4fb4-abf2-f8f65c3830fb\",\n    \"workspace_name\": \"string\",\n    \"git_auth_configs\": 1,\n    \"vscode_port_proxy_uri\": \"string\",\n    \"apps\": [\n        {\n            \"id\": \"c488c933-688a-444e-a55d-f1e88ecc78f5\",\n            \"url\": \"string\",\n            \"external\": false,\n            \"slug\": \"string\",\n            \"display_name\": \"string\",\n            \"icon\": \"string\",\n            \"subdomain\": false,\n            \"sharing_level\": \"owner\",\n            \"healthcheck\": {\n                \"url\": \"string\",\n                \"interval\": 5,\n                \"threshold\": 6\n            },\n            \"health\": \"initializing\"\n        }\n    ],\n    \"derpmap\": {\n        \"HomeParams\": {},\n        \"Regions\": {\n            \"1000\": {\n                \"EmbeddedRelay\": false,\n                \"RegionID\": 1000,\n                \"RegionCode\": \"string\",\n                \"RegionName\": \"string\",\n                \"Nodes\": [\n                    {\n                        \"Name\": \"string\",\n                        \"RegionID\": 1000,\n                        \"HostName\": \"string\",\n                        \"STUNPort\": 19302,\n                        \"STUNOnly\": true\n                    }\n                ]\n            }\n        }\n    },\n    \"derp_force_websockets\": false,\n    \"environment_variables\": {\n        \"OIDC_TOKEN\": \"string\"\n    },\n    \"directory\": \"string\",\n    \"motd_file\": \"string\",\n    \"disable_direct_connections\": false,\n    \"metadata\": [\n        {\n            \"display_name\": \"string\",\n            \"key\": \"string\",\n            \"script\": \"string\",\n            \"interval\": 10,\n            \"timeout\": 1\n        }\n    ],\n    \"scripts\": [\n        {\n            \"log_source_id\": \"3e79c8da-08ae-48f4-b73e-11e194cdea06\",\n            \"log_path\": \"string\",\n            \"script\": \"string\",\n            \"cron\": \"string\",\n            \"run_on_start\": true,\n            \"run_on_stop\": false,\n            \"start_blocks_login\": true,\n            \"timeout\": 0\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Organization IDs via API\nDESCRIPTION: This snippet shows the API endpoint used to fetch the corresponding organization IDs. It requires access to the Coder instance. It is used to properly configure the organization sync.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_17\n\nLANGUAGE: text\nCODE:\n```\nhttps://[coder.example.com]/api/v2/organizations\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL with Helm (Bitnami)\nDESCRIPTION: This set of commands installs a PostgreSQL database instance on the Kubernetes cluster using the Bitnami Helm chart. It configures the database with a username, password, database name, and persistent storage. This is intended for proof-of-concept deployments and requires the Bitnami Helm repository to be added.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/kubernetes.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# Install PostgreSQL\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install coder-db bitnami/postgresql \\\n    --namespace coder \\\n    --set auth.username=coder \\\n    --set auth.password=coder \\\n    --set auth.database=coder \\\n    --set persistence.size=10Gi\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Template Dispatch Method with Curl\nDESCRIPTION: This snippet demonstrates how to update the dispatch method for a notification template using the Coder API v2 with a PUT request. It uses curl to send the request to the `/notifications/templates/{notification_template}/method` endpoint, requiring the notification template UUID as a path parameter and a valid `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/notifications/templates/{notification_template}/method \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Adding Exectrace Container to Pod Spec\nDESCRIPTION: This HCL snippet adds a container named \"exectrace\" to the workspace pod specification. It specifies the image, image pull policy, command, and security context for the container.  The container requires root privileges and a privileged security context.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"kubernetes_pod\" \"main\" {\n  ...\n  spec {\n    ...\n    // NOTE: this container is added compared to the upstream kubernetes\n    // template\n    container {\n      name              = \"exectrace\"\n      image             = \"ghcr.io/coder/exectrace:latest\"\n      image_pull_policy = \"Always\"\n      command = [\n        \"/opt/exectrace\",\n        \"--init-address\", \"127.0.0.1:56123\",\n        \"--label\", \"workspace_id=${data.coder_workspace.me.id}\",\n        \"--label\", \"workspace_name=${data.coder_workspace.me.name}\",\n        \"--label\", \"user_id=${data.coder_workspace_owner.me.id}\",\n        \"--label\", \"username=${data.coder_workspace_owner.me.name}\",\n        \"--label\", \"user_email=${data.coder_workspace_owner.me.email}\",\n      ]\n      security_context {\n        // exectrace must be started as root so it can attach probes into the\n        // kernel to record process events with high throughput.\n        run_as_user  = \"0\"\n        run_as_group = \"0\"\n        // exectrace requires a privileged container so it can control mounts\n        // and perform privileged syscalls against the host kernel to attach\n        // probes.\n        privileged = true\n      }\n    }\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Get Matched Provisioners (curl)\nDESCRIPTION: This curl command retrieves information about matched provisioners for a template version dry-run job.  It requires the template version ID and job ID. The command includes headers for accepting JSON and providing the Coder session token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/dry-run/{jobID}/matched-provisioners \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Role Sync Settings JSON with Mappings\nDESCRIPTION: This JSON demonstrates how to map IdP roles to Coder roles. The `mapping` field contains key-value pairs, where keys are IdP role names, and values are arrays of corresponding Coder role names.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"field\": \"roles\",\n    \"mapping\": {\n        \"coder-admins\": [\"organization-admin\"],\n        \"infra-admins\": [\"provisioner-admin\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Colima with Specific Compute Options\nDESCRIPTION: This shell script starts Colima with specific compute options: 4 CPUs and 8GB of memory. This allows for customizing the resources allocated to Colima based on the host machine's capabilities and the needs of the Docker containers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\ncolima start --cpu 4 --memory 8\n```\n\n----------------------------------------\n\nTITLE: Terraform Error Message\nDESCRIPTION: This snippet is an example of an error message that can occur when using Terraform to manage Coder workspaces. It highlights an issue where a Docker container exits immediately after being created, which can be caused by a variety of misconfigurations or issues within the container's setup. The error message includes the exit status, indicating the failure of the terraform apply operation.\nSOURCE: https://github.com/coder/coder/blob/main/dogfood/coder/guide.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\n✔ Queued [236ms]\n✔ Setting up [5ms]\n⧗  Starting workspace\n  Terraform 1.1.9\n  coder_agent.dev: Plan to create\n  docker_volume.home_volume: Plan to create\n  docker_container.workspace[0]: Plan to create\n  Plan: 3 to add, 0 to change, 0 to destroy.\n  coder_agent.dev: Creating...\n  coder_agent.dev: Creation complete after 0s [id=b2f132bd-9af1-48a7-81dc-187a18ee00d5]\n  docker_volume.home_volume: Creating...\n  docker_volume.home_volume: Creation complete after 0s [id=coder-maf-mywork-root]\n  docker_container.workspace[0]: Creating...\n  docker_container.workspace[0]: Creation errored after 0s\n  Error: container exited immediately\n\n✘ Starting workspace [2045ms]\nterraform apply: exit status 1\nRun 'coder create --help' for usage.\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder via SSH\nDESCRIPTION: This snippet demonstrates how to connect to an EC2 instance via SSH and configure Coder by editing the configuration file. It includes commands for restarting the Coder service after making changes.  It assumes the user has SSH access to the EC2 instance and sudo privileges.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/ec2.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh ubuntu@<ec2-public-IPv4>\nsudo vim /etc/coder.d/coder.env # edit config\nsudo systemctl daemon-reload\nsudo systemctl restart coder # restart Coder\n```\n\n----------------------------------------\n\nTITLE: Create Database Fixture Script\nDESCRIPTION: This shell script creates a new database fixture file for testing database migrations.  It generates an `.up.sql` script to insert data, with the specified name.  The fixture file will be created in `coderd/database/migrations/testdata/fixtures/`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./coderd/database/migrations/create_fixture.sh my fixture\n```\n\n----------------------------------------\n\nTITLE: Certbot certificate renewal script\nDESCRIPTION: This is a shell script that runs Certbot to renew Let's Encrypt certificates in quiet mode, ensuring automatic certificate renewal without user interaction.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nsudo certbot renew -q\n```\n\n----------------------------------------\n\nTITLE: Terraform: Coder Agent Startup Script\nDESCRIPTION: This Terraform configuration snippet shows how to define a `coder_agent` resource and include a `startup_script` that installs a VS Code extension using `code-server`. The script is executed when the workspace starts.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_2\n\nLANGUAGE: tf\nCODE:\n```\nresource \"coder_agent\" \"main\" {\n  ...\n  startup_script = \"code-server --install-extension /vsix/GitHub.copilot.vsix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Workspace Proxy System Service\nDESCRIPTION: This snippet demonstrates how to restart the workspace proxy as a system service using systemd after changes. It requires Coder to be installed via a system package.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart coder-workspace-proxy\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Quota via GET Request\nDESCRIPTION: This curl command retrieves the workspace quota for a specified user using a GET request.  It requires the `Accept` header specifying the expected response type and the `Coder-Session-Token` header for authentication. The API key should be replaced with a valid authentication token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_119\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspace-quota/{user} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: List Inbox Notifications - cURL\nDESCRIPTION: This cURL command retrieves a list of inbox notifications from the Coder server. It sends a GET request to `/api/v2/notifications/inbox` with the `Coder-Session-Token` header for authentication.  Query parameters like `targets`, `templates`, `read_status`, and `starting_before` can be used to filter the notifications.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/notifications/inbox \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Template ACLs with curl\nDESCRIPTION: This code snippet demonstrates how to get template ACLs using a curl command. It sends a GET request to the specified endpoint, replacing `{template}` with the actual Template ID, using the appropriate headers for accepting JSON responses and providing the Coder session token for authentication. The expected response is a JSON object representing the ACLs for the template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_107\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates/{template}/acl \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Template Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response when retrieving templates for an organization. It contains detailed information about a template, including its ID, name, description, provisioning settings, active user count, autostart/autostop requirements, build time statistics, and other relevant metadata. This can be used to understand the structure of the template object returned by the API.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"active_user_count\": 0,\n    \"active_version_id\": \"eae64611-bd53-4a80-bb77-df1e432c0fbc\",\n    \"activity_bump_ms\": 0,\n    \"allow_user_autostart\": true,\n    \"allow_user_autostop\": true,\n    \"allow_user_cancel_workspace_jobs\": true,\n    \"autostart_requirement\": {\n      \"days_of_week\": [\n        \"monday\"\n      ]\n    },\n    \"autostop_requirement\": {\n      \"days_of_week\": [\n        \"monday\"\n      ],\n      \"weeks\": 0\n    },\n    \"build_time_stats\": {\n      \"property1\": {\n        \"p50\": 123,\n        \"p95\": 146\n      },\n      \"property2\": {\n        \"p50\": 123,\n        \"p95\": 146\n      }\n    },\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"created_by_id\": \"9377d689-01fb-4abf-8450-3368d2c1924f\",\n    \"created_by_name\": \"string\",\n    \"default_ttl_ms\": 0,\n    \"deprecated\": true,\n    \"deprecation_message\": \"string\",\n    \"description\": \"string\",\n    \"display_name\": \"string\",\n    \"failure_ttl_ms\": 0,\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"max_port_share_level\": \"owner\",\n    \"name\": \"string\",\n    \"organization_display_name\": \"string\",\n    \"organization_icon\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_name\": \"string\",\n    \"provisioner\": \"terraform\",\n    \"require_active_version\": true,\n    \"time_til_dormant_autodelete_ms\": 0,\n    \"time_til_dormant_ms\": 0,\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get Github Device Auth using curl\nDESCRIPTION: This code snippet retrieves GitHub device authentication details by sending a GET request to `/api/v2/users/oauth2/github/device` using curl. It includes the `Accept: application/json` header and a Coder session token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/oauth2/github/device \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Showing group sync settings\nDESCRIPTION: Illustrates how to display group sync settings using the `coder organization settings show groupsync` command. This shows the group synchronization settings for an organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_show.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder organization settings show groupsync\n```\n\n----------------------------------------\n\nTITLE: Example License Response (200 OK)\nDESCRIPTION: This JSON snippet represents a successful (200 OK) response from the Coder API when retrieving licenses. It includes details for each license, such as claims (JWT claims), ID, upload timestamp, and UUID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"claims\": {},\n    \"id\": 0,\n    \"uploaded_at\": \"2019-08-24T14:15:22Z\",\n    \"uuid\": \"095be615-a8ad-4c33-8e9c-c7612fbf6c9f\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Workspace Agent App Status Body Parameter (JSON)\nDESCRIPTION: This JSON snippet defines the structure of the request body for patching an application's status on a workspace agent. It contains fields like `app_slug`, `icon`, `message`, `needs_user_attention`, `state`, and `uri` to represent the app's current condition.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app_slug\": \"string\",\n  \"icon\": \"string\",\n  \"message\": \"string\",\n  \"needs_user_attention\": true,\n  \"state\": \"working\",\n  \"uri\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading JetBrains Client Downloader (Shell)\nDESCRIPTION: Downloads the JetBrains Client Downloader, extracts the archive, and removes the archive file. This is a necessary prerequisite for installing the JetBrains Gateway backend.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/jetbrains-gateway.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://download.jetbrains.com/idea/code-with-me/backend/jetbrains-clients-downloader-linux-x86_64-1867.tar.gz && \\\ntar -xzvf jetbrains-clients-downloader-linux-x86_64-1867.tar.gz\nrm jetbrains-clients-downloader-linux-x86_64-1867.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Get API Key by ID with curl\nDESCRIPTION: This snippet shows how to fetch an API key by its unique ID using `curl`. It performs a GET request to the `/users/{user}/keys/{keyid}` endpoint, including the `Accept` header and `Coder-Session-Token` for authentication.  The `{keyid}` path parameter represents the UUID of the API key to retrieve.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/keys/{keyid} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Assuming AWS Role with Web Identity via CLI\nDESCRIPTION: Demonstrates using the AWS CLI to assume a role with web identity federation, using the identity token obtained from Google Cloud. This is provided as a validation or troubleshooting command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/gcp-to-aws.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\naws sts assume-role-with-web-identity \\\n  --role-arn arn:aws:iam::123456789:role/gcp-to-aws \\\n  --role-session-name coder-session \\\n  --web-identity-token xxx\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Provider Installation with Filesystem Mirror\nDESCRIPTION: This snippet demonstrates how to configure Terraform to use a local filesystem mirror for provider installation. It defines the path to the directory containing the necessary Terraform provider plugins. The providers should be available in the `/home/coder/.terraform.d/plugins` directory.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/offline.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n# filesystem-mirror-example.tfrc\nprovider_installation {\n  filesystem_mirror {\n    path = \"/home/coder/.terraform.d/plugins\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get API Key by Token Name with curl\nDESCRIPTION: This snippet showcases how to retrieve an API key by its token name using `curl`.  It executes a GET request to the `/users/{user}/keys/tokens/{keyname}` endpoint, including `Accept` and `Coder-Session-Token` headers. The `{keyname}` path parameter specifies the token name of the API key to retrieve.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/keys/tokens/{keyname} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Workspace Build Timings Response (JSON)\nDESCRIPTION: This JSON snippet presents an example response containing workspace build timings, broken down into agent connection timings, agent script timings, and provisioner timings. Each timing entry includes start and end timestamps, stage information, and identifiers for the associated agent or job. The schema codersdk.WorkspaceBuildTimings is referenced.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"agent_connection_timings\": [\n    {\n      \"ended_at\": \"2019-08-24T14:15:22Z\",\n      \"stage\": \"init\",\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"workspace_agent_id\": \"string\",\n      \"workspace_agent_name\": \"string\"\n    }\n  ],\n  \"agent_script_timings\": [\n    {\n      \"display_name\": \"string\",\n      \"ended_at\": \"2019-08-24T14:15:22Z\",\n      \"exit_code\": 0,\n      \"stage\": \"init\",\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"string\",\n      \"workspace_agent_id\": \"string\",\n      \"workspace_agent_name\": \"string\"\n    }\n  ],\n  \"provisioner_timings\": [\n    {\n      \"action\": \"string\",\n      \"ended_at\": \"2019-08-24T14:15:22Z\",\n      \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n      \"resource\": \"string\",\n      \"source\": \"string\",\n      \"stage\": \"init\",\n      \"started_at\": \"2019-08-24T14:15:22Z\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Group Sync Settings JSON with Regex Filter\nDESCRIPTION: This JSON configures group synchronization using the `groups` claim and applies a regex filter `^coder-.*$` to map groups prefixed with `coder-`. It also enables the auto-creation of missing groups in Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"field\": \"groups\",\n    \"mapping\": null,\n    \"regex_filter\": \"^coder-.*$\",\n    \"auto_create_missing_groups\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a provisioner key with specific tags\nDESCRIPTION: Creates a provisioner key restricted to jobs with specific tags. The key is generated using the `coder provisioner keys create` command with the `--org` and `--tag` flags.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncoder provisioner keys create kubernetes-key \\\n  --org default \\\n  --tag environment=kubernetes\n\nSuccessfully created provisioner key kubernetes-key! Save this    authentication token, it will not be    shown again.\n\n<key omitted>\n```\n\n----------------------------------------\n\nTITLE: Toggle Magicsock Debug Logging using curl\nDESCRIPTION: Enables or disables debug logging for magicsock. The {state} parameter determines whether debug logging is enabled (true) or disabled (false). Requires the CODER_AGENT_DEBUG_ADDRESS environment variable. Consult Tailscale documentation for more information.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/agent-api/debug.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl $CODER_AGENT_DEBUG_ADDRESS/debug/magicsock/debug-logging/true\n```\n\n----------------------------------------\n\nTITLE: Airflow Module Integration\nDESCRIPTION: This Terraform module integrates Airflow into the Coder environment. It requires the `agent_id` of the Coder agent. The module handles the installation and configuration of Airflow.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_15\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"airflow\" {\n  source   = \"registry.coder.com/modules/airflow/coder\"\n  version  = \"1.0.13\"\n  agent_id = coder_agent.main.id\n}\n```\n\n----------------------------------------\n\nTITLE: Example Group Response (200 OK)\nDESCRIPTION: This JSON snippet represents a successful (200 OK) response from the Coder API when retrieving or updating a group. It includes details like the group's avatar URL, display name, ID, members, organization information, quota allowance, and source.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"string\",\n  \"display_name\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"members\": [\n    {\n      \"avatar_url\": \"http://example.com\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"email\": \"user@example.com\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n      \"login_type\": \"\",\n      \"name\": \"string\",\n      \"status\": \"active\",\n      \"theme_preference\": \"string\",\n      \"updated_at\": \"2019-08-24T14:15:22Z\",\n      \"username\": \"string\"\n    }\n  ],\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"quota_allowance\": 0,\n  \"source\": \"user\",\n  \"total_member_count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Metadata Request Body\nDESCRIPTION: This JSON payload defines the structure for updating workspace metadata. It contains a 'name' field, which allows updating the workspace's name. This payload is sent in the body of the PATCH request to the /workspaces/{workspace} endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Automatically Instantiate Development Environment with Direnv\nDESCRIPTION: This set of shell commands configures Direnv to automatically instantiate the Nix-based development environment when entering the Coder project directory. It requires Direnv to be installed and configured.  It creates a `.envrc` file and tells Direnv to allow it.\nSOURCE: https://github.com/coder/coder/blob/main/docs/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd ~/code/coder\necho \"use nix\" >.envrc\ndirenv allow\n```\n\n----------------------------------------\n\nTITLE: SCIM User Replace Response Example\nDESCRIPTION: This JSON payload represents the successful response after replacing a SCIM user. It contains details about the updated user, including fields like avatar URL, creation and update timestamps, email, ID, login type, name, organization IDs, roles, status, theme preference, and username.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"http://example.com\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"email\": \"user@example.com\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"status\": \"active\",\n  \"theme_preference\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Coder Templates\nDESCRIPTION: This code snippet shows the basic usage of the `coder templates list` command in the console. It lists all available templates for the organization. The command can be run directly from the command line interface where the coder CLI is installed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates list [flags]\n```\n\n----------------------------------------\n\nTITLE: Update User Notification Preferences Body\nDESCRIPTION: Example JSON request body for updating user notification preferences. It uses a map to specify whether a template is disabled.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template_disabled_map\": {\n    \"property1\": true,\n    \"property2\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Provisioners via Coder CLI\nDESCRIPTION: This snippet shows the general usage of the `coder provisioner list` command. No specific language is tied to this usage instruction, it represents a CLI command execution.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner list [flags]\n```\n\n----------------------------------------\n\nTITLE: Get System Notification Templates Response\nDESCRIPTION: Example JSON response containing an array of system notification templates. Each template includes details like actions, body_template, enabled_by_default, group, id, kind, method, name, and title_template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"actions\": \"string\",\n    \"body_template\": \"string\",\n    \"enabled_by_default\": true,\n    \"group\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"kind\": \"string\",\n    \"method\": \"string\",\n    \"name\": \"string\",\n    \"title_template\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Proxies 200 Response\nDESCRIPTION: This JSON represents a successful (200 OK) response containing the details of the workspace proxies. It includes information such as regions, their status, display name, health, and URLs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_122\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"regions\": [\n      {\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"deleted\": true,\n        \"derp_enabled\": true,\n        \"derp_only\": true,\n        \"display_name\": \"string\",\n        \"healthy\": true,\n        \"icon_url\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"name\": \"string\",\n        \"path_app_url\": \"string\",\n        \"status\": {\n          \"checked_at\": \"2019-08-24T14:15:22Z\",\n          \"report\": {\n            \"errors\": [\n              \"string\"\n            ],\n            \"warnings\": [\n              \"string\"\n            ]\n          },\n          \"status\": \"ok\"\n        },\n        \"updated_at\": \"2019-08-24T14:15:22Z\",\n        \"version\": \"string\",\n        \"wildcard_hostname\": \"string\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Removing Coder binary manually\nDESCRIPTION: This command manually removes the Coder binary from the /usr/local/bin directory.  This is used if Coder was installed manually or via an unsupported operating system.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm /usr/local/bin/coder\n```\n\n----------------------------------------\n\nTITLE: Pull Coder template\nDESCRIPTION: This command pulls an existing template from Coder into a local directory.  It requires that you have the Coder CLI installed and configured to connect to your Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ncoder templates pull <template-name> ./<new-template-name>\n```\n\n----------------------------------------\n\nTITLE: Example Github Device Auth Response\nDESCRIPTION: This JSON snippet is an example response from the `/api/v2/users/oauth2/github/device` endpoint. It includes fields like `device_code`, `expires_in`, `interval`, `user_code`, and `verification_uri`, used in the GitHub device authorization flow.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"device_code\": \"string\",\n  \"expires_in\": 0,\n  \"interval\": 0,\n  \"user_code\": \"string\",\n  \"verification_uri\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Organization Role Sync\nDESCRIPTION: This command is used to configure role synchronization settings for an organization, allowing roles to be synced from an Identity Provider (IdP). The command `coder organizations settings set role-sync` is the primary way to initiate this configuration. The `rolesync` alias provides a shorter alternative for the same command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_set_role-sync.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings set role-sync\n```\n\n----------------------------------------\n\nTITLE: Watching Workspace (WebSocket) - cURL Example\nDESCRIPTION: Demonstrates how to watch a workspace for events using a GET request with cURL, establishing a WebSocket connection. The `Accept` header is set to `application/json`.  Authentication is required via the `Coder-Session-Token` header, and the request is sent to `/workspaces/{workspace}/watch-ws`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaces/{workspace}/watch-ws \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Exporting Cluster Address\nDESCRIPTION: This command exports the cluster address to the CLUSTER_ADDRESS environment variable. This variable is then used when pushing the Coder template. Requires shell access.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport CLUSTER_ADDRESS=https://example.domain:6443\n```\n\n----------------------------------------\n\nTITLE: Deleting Organization Role via Curl - Shell\nDESCRIPTION: This snippet demonstrates how to delete a custom organization role using the curl command-line tool. It requires the organization ID and role name as path parameters, along with the 'Coder-Session-Token' header for authentication.  The endpoint expects a DELETE request.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/organizations/{organization}/members/roles/{roleName} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Deployment Stats Response Example\nDESCRIPTION: This JSON snippet showcases the structure of the response when querying deployment stats. It includes data about session counts and workspace status.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aggregated_from\": \"2019-08-24T14:15:22Z\",\n  \"collected_at\": \"2019-08-24T14:15:22Z\",\n  \"next_update_at\": \"2019-08-24T14:15:22Z\",\n  \"session_count\": {\n    \"jetbrains\": 0,\n    \"reconnecting_pty\": 0,\n    \"ssh\": 0,\n    \"vscode\": 0\n  },\n  \"workspaces\": {\n    \"building\": 0,\n    \"connection_latency_ms\": {\n      \"p50\": 0,\n      \"p95\": 0\n    },\n    \"failed\": 0,\n    \"pending\": 0,\n    \"running\": 0,\n    \"rx_bytes\": 0,\n    \"stopped\": 0,\n    \"tx_bytes\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List Inbox Notifications - Example Response\nDESCRIPTION: This example JSON response shows the structure of the data returned when listing inbox notifications. It contains an array of notification objects, each with details such as actions, content, creation timestamp, icon, ID, read timestamp, targets, template ID, title, and user ID.  It also includes the `unread_count`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notifications\": [\n    {\n      \"actions\": [\n        {\n          \"label\": \"string\",\n          \"url\": \"string\"\n        }\n      ],\n      \"content\": \"string\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"icon\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"read_at\": \"string\",\n      \"targets\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"title\": \"string\",\n      \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n    }\n  ],\n  \"unread_count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example Template Insights Response JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the `/insights/templates` endpoint.  It includes interval reports providing usage data over specified intervals (e.g. week or day) and also a full report providing active users, apps usage and parameters usage.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"interval_reports\": [\n    {\n      \"active_users\": 14,\n      \"end_time\": \"2019-08-24T14:15:22Z\",\n      \"interval\": \"week\",\n      \"start_time\": \"2019-08-24T14:15:22Z\",\n      \"template_ids\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ]\n    }\n  ],\n  \"report\": {\n    \"active_users\": 22,\n    \"apps_usage\": [\n      {\n        \"display_name\": \"Visual Studio Code\",\n        \"icon\": \"string\",\n        \"seconds\": 80500,\n        \"slug\": \"vscode\",\n        \"template_ids\": [\n          \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n        ],\n        \"times_used\": 2,\n        \"type\": \"builtin\"\n      }\n    ],\n    \"end_time\": \"2019-08-24T14:15:22Z\",\n    \"parameters_usage\": [\n      {\n        \"description\": \"string\",\n        \"display_name\": \"string\",\n        \"name\": \"string\",\n        \"options\": [\n          {\n            \"description\": \"string\",\n            \"icon\": \"string\",\n            \"name\": \"string\",\n            \"value\": \"string\"\n          }\n        ],\n        \"template_ids\": [\n          \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n        ],\n        \"type\": \"string\",\n        \"values\": [\n          {\n            \"count\": 0,\n            \"value\": \"string\"\n          }\n        ]\n      }\n    ],\n    \"start_time\": \"2019-08-24T14:15:22Z\",\n    \"template_ids\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Logs Request Body Example\nDESCRIPTION: This JSON snippet shows the expected format for the request body when patching logs. It includes the log_source_id and an array of logs, each containing created_at, level, and output.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"log_source_id\": \"string\",\n  \"logs\": [\n    {\n      \"created_at\": \"string\",\n      \"level\": \"trace\",\n      \"output\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: File Content Definition\nDESCRIPTION: This YAML snippet defines the 'file' parameter as a string. It represents the file content to be uploaded, typically as a tar archive or zip file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/files.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfile: string\n```\n\n----------------------------------------\n\nTITLE: Coder Licenses Command Usage\nDESCRIPTION: This command provides access to license management functionalities in Coder. It is the main entry point for managing licenses within the Coder deployment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/licenses.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder licenses\n```\n\n----------------------------------------\n\nTITLE: Getting Workspace Timings - cURL Example\nDESCRIPTION: Provides an example of retrieving workspace timings using a GET request with cURL. Authentication is needed via the `Coder-Session-Token` header. The request targets `/workspaces/{workspace}/timings`, where `{workspace}` is the workspace UUID. The response includes timings for agent connections, agent scripts, and provisioning actions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaces/{workspace}/timings \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Organization IdP Sync Config Body\nDESCRIPTION: This JSON snippet represents the body of a PATCH request to the /settings/idpsync/organization/config endpoint, used to update specific configuration values. It includes fields like 'assign_default' (boolean) and 'field' (string).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_102\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assign_default\": true,\n  \"field\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Convert User Login to OAuth - JSON Body\nDESCRIPTION: This JSON payload contains the user's password and the target authentication type for converting the login via the `/users/{user}/convert-login` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password\": \"string\",\n  \"to_type\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Efficient React Testing Library Button Click\nDESCRIPTION: This code snippet illustrates a more efficient way to click a button within a specific form element using React Testing Library's `within` function. By scoping the `getByRole` query to a smaller part of the DOM (the form), it reduces the number of elements the query needs to examine, improving performance. This approach leverages `getByTestId` to target the form element and then uses `within` to limit the scope of the `getByRole` query.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst form = screen.getByTestId(\"form\");\nuser.click(within(form).getByRole(\"button\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing npm project for Slack bot\nDESCRIPTION: This command initializes a new Node.js project with default settings. It creates a `package.json` file in the current directory, which is used to manage project dependencies and metadata.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/slack.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Installing Coder Helm Chart\nDESCRIPTION: This shell command installs the Coder Helm chart into a Kubernetes cluster.  It specifies the chart name (coder), the chart location (coder-v2/coder), the namespace (coder), a custom values file (values.yaml), and the chart version (2.10.0).  It requires Helm to be installed and configured to connect to the Kubernetes cluster.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/release/testdata/autoversion/docs/random.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install coder coder-v2/coder \\\n    --namespace coder \\\n    --values values.yaml \\\n    --version 2.10.0 # trailing comment!\n```\n\n----------------------------------------\n\nTITLE: Update Notifications Settings - cURL\nDESCRIPTION: This cURL command updates the notification settings. It sends a PUT request to `/api/v2/notifications/settings` with the `Coder-Session-Token` header and a JSON payload in the request body. The `Content-Type` header must be set to `application/json`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/notifications/settings \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Generating Workspace Traffic with Coder CLI\nDESCRIPTION: This command generates traffic similar to Coder's Web Terminal against existing workspaces. It uses `coder exp scaletest workspace-traffic` with options to define traffic parameters like bytes per tick, tick interval, timeout, target workspaces, tracing, Prometheus address, and output formatting. Environment variables and command arguments control traffic intensity, target workspaces, and monitoring endpoints.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/infrastructure/scale-utility.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Produce load at about 1000MB/s (25MB/40ms).\ncoder exp scaletest workspace-traffic \\\n    --template \"${SCALETEST_PARAM_GREEDY_AGENT_TEMPLATE}\" \\\n    --bytes-per-tick $((1024 * 1024 * 25)) \\\n    --tick-interval 40ms \\\n    --timeout \"$((delay))s\" \\\n    --job-timeout \"$((delay))s\" \\\n    --scaletest-prometheus-address 0.0.0.0:21113 \\\n    --target-workspaces \"0:100\" \\\n    --trace=false \\\n  --output json:\"${SCALETEST_RESULTS_DIR}/traffic-${type}-greedy-agent.json\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Headless Service for Prometheus\nDESCRIPTION: This YAML configuration defines a headless service in Kubernetes named `coder-prom` within the `coder` namespace, enabling Prometheus to discover and scrape metrics.  The service exposes port 2112 for Prometheus to scrape metrics. The `clusterIP: None` setting makes it headless.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/prometheus.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: coder-prom\n  namespace: coder\nspec:\n  clusterIP: None\n  ports:\n    - name: prom-http\n      port: 2112\n      protocol: TCP\n      targetPort: 2112\n  selector:\n    app.kubernetes.io/instance: coder\n    app.kubernetes.io/name: coder\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Patch Group Request Body Example\nDESCRIPTION: This JSON snippet illustrates the structure of the request body for updating a group using the PATCH method. It allows modifications such as adding or removing users, updating the avatar URL, display name, group name, and quota allowance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add_users\": [\n    \"string\"\n  ],\n  \"avatar_url\": \"string\",\n  \"display_name\": \"string\",\n  \"name\": \"string\",\n  \"quota_allowance\": 0,\n  \"remove_users\": [\n    \"string\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Get User Tokens Response\nDESCRIPTION: This is an example JSON response containing an array of user tokens. Each token object includes details such as `created_at`, `expires_at`, `id`, `last_used`, `lifetime_seconds`, `login_type`, `scope`, `token_name`, `updated_at`, and `user_id`.  The `login_type` and `scope` fields have enumerated values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"expires_at\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"string\",\n    \"last_used\": \"2019-08-24T14:15:22Z\",\n    \"lifetime_seconds\": 0,\n    \"login_type\": \"password\",\n    \"scope\": \"all\",\n    \"token_name\": \"string\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Provisioner Job Response (200 OK)\nDESCRIPTION: This JSON snippet shows the expected format of a successful (200 OK) response when retrieving a provisioner job from the Coder API. It includes details such as available workers, creation timestamps, error information, input parameters, metadata, organization ID, status, tags, and worker ID.  The IDs are UUIDs and timestamps are in RFC3339 format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"available_workers\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"canceled_at\": \"2019-08-24T14:15:22Z\",\n  \"completed_at\": \"2019-08-24T14:15:22Z\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"error\": \"string\",\n  \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n  \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"input\": {\n    \"error\": \"string\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n  },\n  \"metadata\": {\n    \"template_display_name\": \"string\",\n    \"template_icon\": \"string\",\n    \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n    \"template_name\": \"string\",\n    \"template_version_name\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\"\n  },\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"queue_position\": 0,\n  \"queue_size\": 0,\n  \"started_at\": \"2019-08-24T14:15:22Z\",\n  \"status\": \"pending\",\n  \"tags\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"type\": \"template_version_import\",\n  \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Password - JSON Response\nDESCRIPTION: This JSON response from the `/users/validate-password` endpoint indicates whether the password is valid and provides additional details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"details\": \"string\",\n  \"valid\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Archiving Templates using Coder CLI\nDESCRIPTION: This command archives templates within the Coder environment. It supports specifying target templates by name or using flags to include all unused versions. The `-y` flag bypasses prompts, and `--all` includes all unused templates, not just failed ones. The `-O` flag allows selecting the organization to use.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_archive.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates archive [flags] [template-name...] \n```\n\n----------------------------------------\n\nTITLE: Get Listening Ports - Curl Request\nDESCRIPTION: This `curl` command retrieves the listening ports for a particular workspace agent. The `workspaceagent` ID is a required path parameter.  The command specifies `application/json` as the accepted response format and requires authentication via the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent}/listening-ports \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Notifications Settings - cURL\nDESCRIPTION: This cURL command retrieves the current notification settings. It sends a GET request to `/api/v2/notifications/settings` with the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/notifications/settings \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Deploying Coder Xray Integration via Helm (Bash)\nDESCRIPTION: This command deploys the Coder Xray integration using Helm. It installs or upgrades the `coder-xray` chart from the `coder-xray` repository in the specified namespace. The command sets several configuration parameters, including the Coder URL, Artifactory URL, and the names of the Kubernetes secrets created earlier. Replace placeholders with actual values for your environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-xray.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade --install coder-xray coder-xray/coder-xray \\\n  --namespace coder-xray \\\n  --create-namespace \\\n  --set namespace=\"<your-coder-workspaces-namespace-name>\" \\\n  --set coder.url=\"https://<your-coder-url>\" \\\n  --set coder.secretName=\"coder-token\" \\\n  --set artifactory.url=\"https://<your-artifactory-url>\" \\\n  --set artifactory.secretName=\"jfrog-token\"\n```\n\n----------------------------------------\n\nTITLE: Unarchive Template Version with curl\nDESCRIPTION: This curl command sends a POST request to the `/templateversions/{templateversion}/unarchive` endpoint to unarchive a specific template version.  It requires a `templateversion` UUID, an 'Accept' header for JSON, and a 'Coder-Session-Token' header for authentication. The expected response is a JSON object containing details about the unarchiving process.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_69\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/templateversions/{templateversion}/unarchive \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Autostart Schedule Request Body\nDESCRIPTION: This JSON payload defines the structure for updating the workspace's autostart schedule. It contains a 'schedule' field as a string, which specifies the new autostart schedule. It's sent as the body of a PUT request to /workspaces/{workspace}/autostart.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schedule\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rebooting the system\nDESCRIPTION: This command reboots the system. It's required after modifying the `cmdline.txt` file to apply the cgroup changes.  This ensures the memory cgroup is properly enabled.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo reboot\n```\n\n----------------------------------------\n\nTITLE: Install VS Code Extension from Open VSX Marketplace\nDESCRIPTION: This command installs a VS Code extension from the Open VSX marketplace using `code-server`.  The command sets the `SERVICE_URL` and `ITEM_URL` environment variables to point to the Open VSX marketplace. This should be executed within the workspace's terminal or `code-server` terminal.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nSERVICE_URL=https://open-vsx.org/vscode/gallery ITEM_URL=https://open-vsx.org/vscode/item /path/to/code-server --install-extension GitHub.copilot\n```\n\n----------------------------------------\n\nTITLE: Starting the Node.js web application\nDESCRIPTION: This command starts the Node.js application using the `node` runtime. It executes the `app.js` file, which contains the Bolt application code. The application listens for incoming webhooks on the specified port (default 6000).\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/slack.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Running Coder Stat Command\nDESCRIPTION: This command shows how to run the `coder stat` command in the console. It's used to display the resource usage of the current workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/stat.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder stat [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Workspace as another user\nDESCRIPTION: This example shows how to delete a workspace belonging to another user. This requires appropriate permissions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/delete.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder delete <username>/<workspace_name>\n```\n\n----------------------------------------\n\nTITLE: Defining Coder App for RStudio\nDESCRIPTION: This Terraform resource defines a Coder application for RStudio. It specifies the agent ID, slug, display name, URL, and icon. Subdomain is set to true. The share is set to owner. It also includes a healthcheck configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_12\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_app\" \"rstudio\" {\n  agent_id      = coder_agent.coder.id\n  slug          = \"rstudio\"\n  display_name  = \"R Studio\"\n  icon          = \"https://upload.wikimedia.org/wikipedia/commons/d/d0/RStudio_logo_flat.svg\"\n  url           = \"http://localhost:8787\"\n  subdomain     = true\n  share         = \"owner\"\n\n  healthcheck {\n    url       = \"http://localhost:8787/healthz\"\n    interval  = 3\n    threshold = 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Multiple API Calls - Typescript\nDESCRIPTION: This snippet demonstrates a function that encapsulates multiple API calls into a single, higher-level operation. The `updateWorkspaceVersion` function first retrieves a template using `getTemplate` and then starts a workspace using `startWorkspace`, combining the results into a `WorkspaceBuild` object.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nexport const updateWorkspaceVersion = async (\n    workspace: TypesGen.Workspace,\n): Promise<TypesGen.WorkspaceBuild> => {\n    const template = await getTemplate(workspace.template_id);\n    return startWorkspace(workspace.id, template.active_version_id);\n};\n```\n\n----------------------------------------\n\nTITLE: Ordering Coder Parameter Options\nDESCRIPTION: This snippet demonstrates that the order of options defined for Coder parameters is inherited from the file structure. This ensures that the order of options in the UI matches the order in the Terraform configuration file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-ordering.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"database_region\" {\n  name         = \"database_region\"\n  display_name = \"Database Region\"\n\n  icon        = \"/icon/database.svg\"\n  description = \"These are options.\"\n  mutable     = true\n  default     = \"us-east1-a\"\n\n  // The order of options is stable and inherited from .tf file.\n  option {\n    name        = \"US Central\"\n    description = \"Select for central!\"\n    value       = \"us-central1-a\"\n  }\n  option {\n    name        = \"US East\"\n    description = \"Select for east!\"\n    value       = \"us-east1-a\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Template Examples with Curl - Shell\nDESCRIPTION: This curl command retrieves template examples for a specific organization. It sends a GET request to the `/organizations/{organization}/templates/examples` endpoint, including the `Accept` header and the `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/templates/examples \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pushing a template with provisioner tags\nDESCRIPTION: Pushes a template with a specific provisioner tag using the `--provisioner-tag` flag. This ensures that only provisioners with matching tags can handle builds for this template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# In another terminal, create/push\n# a template that requires the explicit\n# tag environment=on_prem\ncoder templates push on-prem \\\n  --provisioner-tag environment=on_prem\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for Reverse Proxy\nDESCRIPTION: This Caddyfile configuration sets up Caddy as a reverse proxy for Coder, automatically creating certificates from Let's Encrypt. Replace `coder.example.com` with your domain and `127.0.0.1:3000` with your `CODER_ACCESS_URL`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncoder.example.com {\n\n  reverse_proxy 127.0.0.1:3000\n\n  tls {\n\n    issuer acme {\n      email user@example.com\n    }\n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Coder Templates Edit Usage Example\nDESCRIPTION: Demonstrates the basic syntax for using the `coder templates edit` command in the console. This command allows users to modify the metadata of a specific template within the Coder environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_edit.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates edit [flags] <template>\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication Token via Coder CLI\nDESCRIPTION: This command demonstrates how to use the Coder CLI to access an authentication token within a workspace. The `<USER_DEFINED_ID>` parameter corresponds to the `CODER_EXTERNAL_AUTH_0_ID` used when configuring the external authentication provider.  This allows programmatic access to the token for various operations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder external-auth access-token <USER_DEFINED_ID>\n```\n\n----------------------------------------\n\nTITLE: Example List Provisioner Keys Response JSON\nDESCRIPTION: This JSON array shows a successful (200 OK) response containing a list of provisioner keys. Each key includes its creation timestamp, ID, name, associated organization, and optional tags, corresponding to an array of `codersdk.ProvisionerKey` objects.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"name\": \"string\",\n    \"organization\": \"452c1a86-a0af-475b-b03f-724878b0f387\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get Template Version Resources - Curl Example\nDESCRIPTION: This shell script demonstrates how to retrieve resources associated with a template version using curl. It specifies the HTTP GET method, the endpoint URL with a template version ID, and the necessary headers for accepting JSON responses and providing an API session token for authentication. This snippet provides a practical example of how to interact with the template version resources endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_64\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/resources \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pulling Container Image\nDESCRIPTION: This command pulls the Coder v2.7.3 container image from the GitHub Container Registry. It is used to deploy or update the Coder application.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v2.7.3.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull ghcr.io/coder/coder:v2.7.3\n```\n\n----------------------------------------\n\nTITLE: Executing Coder Support Command\nDESCRIPTION: This command is used to access the support functionalities of the Coder CLI. It provides various subcommands for troubleshooting and diagnostics.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/support.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder support\n```\n\n----------------------------------------\n\nTITLE: Get Health Settings with curl\nDESCRIPTION: This curl command retrieves health settings from the Coder server. It sends a GET request to the `/api/v2/debug/health/settings` endpoint, specifying that it accepts JSON responses and includes an API key via the `Coder-Session-Token` header for authentication. Make sure to replace `API_KEY` with a valid token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/debug.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/debug/health/settings \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Incorrect XState Service Definition\nDESCRIPTION: This code snippet shows an incorrect implementation of an XState service definition.  By directly passing the `getUpdateCheck` function, the service will be invoked during machine creation rather than during state transitions.  This is a common mistake that can lead to unexpected behavior.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { getUpdateCheck } from \"api/api\"\n\ncreateMachine({ ... }, {\n  services: {\n    getUpdateCheck,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Pushing Coder Template (Manual)\nDESCRIPTION: Alternative commands for fetching Kubernetes secrets and pushing a Coder template when the automatic methods fail. This is particularly useful for Windows or when the jsonpath commands don't work as expected.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Get cluster API address\nkubectl cluster-info\n\n# Get cluster CA and token (base64 encoded)\nkubectl get secrets coder-service-account-token -n coder-workspaces -o jsonpath=\"{.data}\"\n\ncoder templates push \\\n    --variable host=API_ADDRESS \\\n    --variable cluster_ca_certificate=CLUSTER_CA_CERTIFICATE \\\n    --variable token=CLUSTER_SERVICEACCOUNT_TOKEN \\\n    --variable namespace=coder-workspaces\n```\n\n----------------------------------------\n\nTITLE: Update OAuth2 Application using curl\nDESCRIPTION: This code snippet demonstrates how to update an existing OAuth2 application using a `curl` command. It sends a PUT request to the `/oauth2-provider/apps/{app}` endpoint, where `{app}` should be replaced with the application ID. The request requires authentication via the `Coder-Session-Token` header and includes the updated application details in JSON format within the request body.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/oauth2-provider/apps/{app} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Notification Settings Response\nDESCRIPTION: Example JSON response showing notification settings, specifically indicating if the notifier is paused. This data is returned upon successfully fetching notification settings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notifier_paused\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Derp Map Response Example\nDESCRIPTION: This JSON snippet represents a successful (200) response containing DERP (Discovery, Enumeration, Relay Protocol) map information.  It includes details about regions, nodes, and configuration settings for establishing connections through relays. The response indicates settings like websocket usage and region prioritization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"derp_force_websockets\": true,\n  \"derp_map\": {\n    \"homeParams\": {\n      \"regionScore\": {\n        \"property1\": 0,\n        \"property2\": 0\n      }\n    },\n    \"omitDefaultRegions\": true,\n    \"regions\": {\n      \"property1\": {\n        \"avoid\": true,\n        \"embeddedRelay\": true,\n        \"nodes\": [\n          {\n            \"canPort80\": true,\n            \"certName\": \"string\",\n            \"derpport\": 0,\n            \"forceHTTP\": true,\n            \"hostName\": \"string\",\n            \"insecureForTests\": true,\n            \"ipv4\": \"string\",\n            \"ipv6\": \"string\",\n            \"name\": \"string\",\n            \"regionID\": 0,\n            \"stunonly\": true,\n            \"stunport\": 0,\n            \"stuntestIP\": \"string\"\n          }\n        ],\n        \"regionCode\": \"string\",\n        \"regionID\": 0,\n        \"regionName\": \"string\"\n      },\n      \"property2\": {\n        \"avoid\": true,\n        \"embeddedRelay\": true,\n        \"nodes\": [\n          {\n            \"canPort80\": true,\n            \"certName\": \"string\",\n            \"derpport\": 0,\n            \"forceHTTP\": true,\n            \"hostName\": \"string\",\n            \"insecureForTests\": true,\n            \"ipv4\": \"string\",\n            \"ipv6\": \"string\",\n            \"name\": \"string\",\n            \"regionID\": 0,\n            \"stunonly\": true,\n            \"stunport\": 0,\n            \"stuntestIP\": \"string\"\n          }\n        ],\n        \"regionCode\": \"string\",\n        \"regionID\": 0,\n        \"regionName\": \"string\"\n      }\n    }\n  },\n  \"disable_direct_connections\": true,\n  \"hostname_suffix\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update User Quiet Hours Request Body\nDESCRIPTION: This JSON snippet represents the request body for updating a user's quiet hours schedule. The `schedule` parameter is a string defining the new quiet hours schedule. This is used in conjunction with the PUT request to the `/users/{user}/quiet-hours` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_117\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schedule\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Secret from Vault via CLI\nDESCRIPTION: This shell command fetches a secret stored in the KV backend of Vault using the Vault CLI. The user needs to provide the namespace, mount name, and secret name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/vault.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault kv get -namespace=YOUR_NAMESPACE -mount=MOUNT_NAME SECRET_NAME\n```\n\n----------------------------------------\n\nTITLE: Example DAUs Response JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the /insights/daus endpoint. It includes an array of entries, each representing the DAU count for a specific date, along with the timezone hour offset.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entries\": [\n    {\n      \"amount\": 0,\n      \"date\": \"string\"\n    }\n  ],\n  \"tz_hour_offset\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiate Development Environment with Nix\nDESCRIPTION: This shell command uses Nix to instantiate the development environment for the Coder project. It sets up the necessary dependencies and environment variables for development. It requires Nix to be installed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd ~/code/coder\n\n# https://nix.dev/tutorials/declarative-and-reproducible-developer-environments\nnix-shell\n```\n\n----------------------------------------\n\nTITLE: OpenShift BuildConfig Creation (Dockerfile)\nDESCRIPTION: This command creates an OpenShift BuildConfig from a YAML definition provided via standard input. The BuildConfig defines how to build a Docker image from a Dockerfile. It specifies the source image, Dockerfile instructions to modify the user and group IDs, and the target ImageStreamTag where the built image will be stored. Requires OpenShift CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\noc create -f - <<EOF\nkind: BuildConfig\napiVersion: build.openshift.io/v1\nmetadata:\n  name: enterprise-base\n  namespace: coder\nspec:\n  output:\n    to:\n      kind: ImageStreamTag\n      name: 'enterprise-base:latest'\n  strategy:\n    type: Docker\n    dockerStrategy:\n      imageOptimizationPolicy: SkipLayers\n  source:\n    type: Dockerfile\n    dockerfile: |\n      # Specify the source image.\n      FROM docker.io/codercom/enterprise-base:ubuntu\n\n      # Switch to root\n      USER root\n\n      # As root:\n      # 1) Remove the original coder user with UID 1000\n      # 2) Add a coder group with an allowed UID\n      # 3) Add a coder user as a member of the above group\n      # 4) Fix ownership on the user's home directory\n      RUN userdel coder && \\\n          groupadd coder -g 1000680000 && \\\n          useradd -l -u 1000680000 coder -g 1000680000 && \\\n          chown -R coder:coder /home/coder\n\n      # Go back to the user 'coder'\n      USER coder\n  triggers:\n    - type: ConfigChange\n  runPolicy: Serial\nEOF\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Specify the source image.\nFROM docker.io/codercom/enterprise-base:ubuntu\n\n# Switch to root\nUSER root\n\n# As root:\n# 1) Remove the original coder user with UID 1000\n# 2) Add a coder group with an allowed UID\n# 3) Add a coder user as a member of the above group\n# 4) Fix ownership on the user's home directory\nRUN userdel coder && \\\n    groupadd coder -g 1000680000 && \\\n    useradd -l -u 1000680000 coder -g 1000680000 && \\\n    chown -R coder:coder /home/coder\n\n# Go back to the user 'coder'\nUSER coder\n```\n\n----------------------------------------\n\nTITLE: Labeling Kubernetes Nodes for Smarter Device Manager\nDESCRIPTION: These commands retrieve all Kubernetes nodes and labels them with `smarter-device-manager=enabled`.  This allows the smarter-device-manager to manage devices on these nodes.  Ensure proper node labeling via the cloud provider for managed Kubernetes services to avoid losing labels.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get nodes\nkubectl label nodes --all smarter-device-manager=enabled\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication Success Response (JSON)\nDESCRIPTION: This JSON snippet represents a successful authentication response for an Azure instance.  The response contains a `session_token` which is used for future agent communications with the Coder Server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"session_token\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Safe Experiments using curl\nDESCRIPTION: This snippet demonstrates how to retrieve safe experiments using a curl request, requiring authentication via Coder-Session-Token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/experiments/available \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Define Terraform Variables (HCL)\nDESCRIPTION: This HCL snippet defines Terraform variables for a small deployment scenario of Coder. It sets the machine types for the Coder control plane and workspaces, as well as CPU and memory limits for the Coder deployment. These variables override the default Terraform variables, allowing for customized deployments.\nSOURCE: https://github.com/coder/coder/blob/main/scaletest/README.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nnodepool_machine_type_coder      = \"t2d-standard-2\"\nnodepool_machine_type_workspaces = \"t2d-standard-2\"\ncoder_cpu                        = \"1000m\" # Leaving 1 CPU for system workloads\ncoder_mem                        = \"4Gi\"   # Leaving 4GB for system workloads\n```\n\n----------------------------------------\n\nTITLE: Update Roles Request Body (JSON)\nDESCRIPTION: This JSON snippet represents the request body for updating user roles.  The `roles` field is an array of strings, each string representing a role to be assigned to the user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": [\n    \"string\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Profile Response\nDESCRIPTION: This JSON snippet is an example response body for the update user profile endpoint. It shows the structure of the returned user object, including fields such as avatar_url, created_at, email, and roles.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"http://example.com\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"email\": \"user@example.com\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"status\": \"active\",\n  \"theme_preference\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Groups Response Schema\nDESCRIPTION: This JSON schema describes the structure of the group information returned by the Coder server. It includes details like avatar URL, display name, ID, members (with their attributes), name, organization details, quota allowance, source, and total member count. It returns a list of group objects.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"avatar_url\": \"string\",\n    \"display_name\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"members\": [\n      {\n        \"avatar_url\": \"http://example.com\",\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"email\": \"user@example.com\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n        \"login_type\": \"\",\n        \"name\": \"string\",\n        \"status\": \"active\",\n        \"theme_preference\": \"string\",\n        \"updated_at\": \"2019-08-24T14:15:22Z\",\n        \"username\": \"string\"\n      }\n    ],\n    \"name\": \"string\",\n    \"organization_display_name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_name\": \"string\",\n    \"quota_allowance\": 0,\n    \"source\": \"user\",\n    \"total_member_count\": 0\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Post Workspace Usage Body Parameter\nDESCRIPTION: Defines the structure for the request body of the post workspace usage endpoint. Includes the `agent_id` which identifies the agent and the `app_name` that identifies the application the agent is using.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n  \"app_name\": \"vscode\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update License Entitlements: Curl Example\nDESCRIPTION: This example demonstrates how to refresh license entitlements on the Coder server using a curl command. It requires the `Accept` header and `Coder-Session-Token` for authentication. The API endpoint is `/api/v2/licenses/refresh-entitlements` with the POST method.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/licenses/refresh-entitlements \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing Coder via Winget (Windows)\nDESCRIPTION: This command uses the winget package manager to install the Coder CLI on Windows. It requires winget to be installed on the system. This is an alternative method to using the Windows installer or standalone binary.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cli.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Coder.Coder\n```\n\n----------------------------------------\n\nTITLE: Setting permissions for Cloudflare API token file\nDESCRIPTION: This command sets the file permissions to 600 for the Cloudflare API token configuration file, ensuring that only the owner can read and write to it, enhancing security.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo chmod 600 ~/.secrets/certbot/cloudflare.ini\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Quota 200 Response\nDESCRIPTION: This JSON represents a successful (200 OK) response containing the workspace quota information.  It includes the user's budget and credits consumed, which are represented as integer values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_120\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"budget\": 0,\n  \"credits_consumed\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace Proxy Creation Request Body\nDESCRIPTION: This JSON snippet defines the structure of the request body used to create a workspace proxy. It includes fields for `display_name`, `icon`, and `name`. These parameters are essential for configuring the new workspace proxy.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_124\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Instance Identity Token Body Parameter (JSON)\nDESCRIPTION: This JSON snippet describes the request body for authenticating a Google Cloud instance. It contains a single field, `json_web_token`, which must be a string representing the JWT.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json_web_token\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Matched Provisioners Response Example\nDESCRIPTION: This JSON snippet shows an example response for matched provisioners. It shows the available, count, and the most recently seen time.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"available\": 0,\n  \"count\": 0,\n  \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Template with Curl\nDESCRIPTION: This snippet shows how to delete a template by ID using a DELETE request with curl. It includes the necessary headers for accepting JSON and authenticating with the Coder Session Token. The template ID is specified as a path parameter in the request URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/templates/{template} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Role IdP Sync Settings Body (JSON)\nDESCRIPTION: Defines the structure of the JSON body required for updating Role IdP Sync Settings.  It contains a \"field\" of type string and a \"mapping\" object. The mapping object defines key-value pairs where the values are arrays of strings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": \"string\",\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Token API Key Body Example\nDESCRIPTION: This is an example JSON body for creating a new token API key.  It contains the `lifetime`, `scope`, and `token_name` properties.  `lifetime` is specified in seconds. The `scope` determines the permissions granted to the token. The `token_name` allows for easier identification.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lifetime\": 0,\n  \"scope\": \"all\",\n  \"token_name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Organization by UUID\nDESCRIPTION: Illustrates how to display a specific organization by providing its UUID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_show.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncoder org show 90ee1875-3db5-43b3-828e-af3687522e43:\n\n   $ Show organization with the given ID.\n```\n\n----------------------------------------\n\nTITLE: Removing Coder System Service Configuration\nDESCRIPTION: This command removes the Coder system service configuration file, ensuring that Coder no longer runs as a service.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm /etc/coder.d/coder.env\n```\n\n----------------------------------------\n\nTITLE: Example Template Version Response\nDESCRIPTION: This JSON snippet is an example of the response returned by the Coder API when retrieving a template version. It contains details about the template version, including its ID, name, creation date, associated job, and other metadata. This response corresponds to a 200 OK status.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"archived\": true,\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"created_by\": {\n      \"avatar_url\": \"http://example.com\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"username\": \"string\"\n    },\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"job\": {\n      \"available_workers\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"canceled_at\": \"2019-08-24T14:15:22Z\",\n      \"completed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"error\": \"string\",\n      \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n      \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"input\": {\n        \"error\": \"string\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n      },\n      \"metadata\": {\n        \"template_display_name\": \"string\",\n        \"template_icon\": \"string\",\n        \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n        \"template_name\": \"string\",\n        \"template_version_name\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"queue_position\": 0,\n      \"queue_size\": 0,\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"pending\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"type\": \"template_version_import\",\n      \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n    },\n    \"matched_provisioners\": {\n      \"available\": 0,\n      \"count\": 0,\n      \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n    },\n    \"message\": \"string\",\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"readme\": \"string\",\n    \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"warnings\": [\n      \"UNSUPPORTED_WORKSPACES\"\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Edit Coder template metadata\nDESCRIPTION: This shell snippet edits the display name, description, and icon of a Coder template using the Coder CLI. It requires that you have the Coder CLI installed and configured to connect to your Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncoder templates edit universal-template \\\n  --display-name \"Universal Template\" \\\n  --description \"Virtual machine configured with Java, Python, Typescript, IntelliJ IDEA, and Ruby. Use this for starter projects. \" \\\n  --icon \"/emojis/2b50.png\"\n```\n\n----------------------------------------\n\nTITLE: Coder Quickstart Installation\nDESCRIPTION: This snippet outlines the steps for a quickstart installation of Coder, including installing Coder, starting the server, and accessing the web interface. This is intended for local machine installation using Docker.\nSOURCE: https://github.com/coder/coder/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# First, install Coder\ncurl -L https://coder.com/install.sh | sh\n\n# Start the Coder server (caches data in ~/.cache/coder)\ncoder server\n\n# Navigate to http://localhost:3000 to create your initial user,\n# create a Docker template and provision a workspace\n```\n\n----------------------------------------\n\nTITLE: Successful File Upload Response\nDESCRIPTION: This JSON snippet shows the response body returned after a successful file upload. It includes a 'hash' which is a unique identifier assigned to the uploaded file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/files.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"19686d84-b10d-4f90-b18e-84fd3fa038fd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Coder package - Debian/Ubuntu\nDESCRIPTION: This command removes the Coder package from Debian or Ubuntu-based systems using the apt package manager.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt remove coder\n```\n\n----------------------------------------\n\nTITLE: Restarting Apache\nDESCRIPTION: This command restarts the Apache web server, applying the changes made to the configuration, including the newly enabled Coder site.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Metadata with curl\nDESCRIPTION: This curl command demonstrates how to update workspace metadata using the PATCH method. It requires the workspace ID and a JSON payload containing the updated metadata, specifically the name. The 'Coder-Session-Token' header is required for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/workspaces/{workspace} \\\n  -H 'Content-Type: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Linux System-Wide Settings Path (Console)\nDESCRIPTION: Shows the directory for system-wide settings on Linux for JetBrains RemoteDev.  Settings in this path will affect all users on the system.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n# System-wide settings\n/etc/xdg/JetBrains/RemoteDev/\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Links via CLI\nDESCRIPTION: This shell snippet shows how to set the `CODER_SUPPORT_LINKS` environment variable directly via the command line before starting the Coder server. The value is a JSON array that defines the name, target URL, and icon for each support link to be displayed in the user dropdown menu.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/setup/appearance.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nexport CODER_SUPPORT_LINKS='[{\"name\": \"Hello GitHub\", \"target\": \"https://github.com/coder/coder\", \"icon\": \"bug\"}, {\"name\": \"Hello Slack\", \"target\": \"https://codercom.slack.com/archives/C014JH42DBJ\", \"icon\": \"https://raw.githubusercontent.com/coder/coder/main/site/static/icon/slack.svg\"}, {\"name\": \"Hello Discord\", \"target\": \"https://discord.gg/coder\", \"icon\": \"https://raw.githubusercontent.com/coder/coder/main/site/static/icon/discord.svg\"}, {\"name\": \"Hello Foobar\", \"target\": \"https://discord.gg/coder\", \"icon\": \"/emojis/1f3e1.png\"}]'\ncoder-server\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Payload\nDESCRIPTION: This JSON snippet shows an example of the payload that Coder sends to a configured webhook endpoint. It includes information about the event that triggered the notification, the user involved, and any relevant actions or labels.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/index.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_version\": \"1.0\",\n    \"msg_id\": \"88750cad-77d4-4663-8bc0-f46855f5019b\",\n    \"payload\": {\n        \"_version\": \"1.0\",\n        \"notification_name\": \"Workspace Deleted\",\n        \"user_id\": \"4ac34fcb-8155-44d5-8301-e3cd46e88b35\",\n        \"user_email\": \"danny@coder.com\",\n        \"user_name\": \"danny\",\n        \"user_username\": \"danny\",\n        \"actions\": [\n            {\n                \"label\": \"View workspaces\",\n                \"url\": \"https://et23ntkhpueak.pit-1.try.coder.app/workspaces\"\n            },\n            {\n                \"label\": \"View templates\",\n                \"url\": \"https://et23ntkhpueak.pit-1.try.coder.app/templates\"\n            }\n        ],\n        \"labels\": {\n            \"initiator\": \"danny\",\n            \"name\": \"my-workspace\",\n            \"reason\": \"initiated by user\"\n        }\n    },\n    \"title\": \"Workspace \\\"my-workspace\\\" deleted\",\n    \"body\": \"Hi danny\\n\\nYour workspace my-workspace was deleted.\\nThe specified reason was \\\"initiated by user (danny)\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Symlink and Tarring a Template\nDESCRIPTION: This shell script creates a symbolic link to a local Terraform module directory within a Coder template directory, then archives the template using `tar`. This allows for including local modules in Coder templates. The archive is then pushed to Coder using the `coder templates` command.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nln -s modules template_1/modules\ntar -cvh -C ./template_1 | coder templates <push|create> -d - <name>\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret Definition for Git Credentials\nDESCRIPTION: This YAML snippet shows how to create a Kubernetes secret named `git-secrets` that contains the `.gitconfig` and `.git-credentials` files. The files are base64 encoded and stored as data within the secret. The namespace must be defined before applying the configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: git-secrets\n  namespace: $NAMESPACE\ntype: Opaque\ndata:\n  .gitconfig: $(cat .gitconfig | base64 | tr -d '\\n')\n  .git-credentials: $(cat .git-credentials | base64 | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Update Organization IdP Sync Mapping Body\nDESCRIPTION: This JSON snippet represents the body of a PATCH request to the /settings/idpsync/organization/mapping endpoint, used to update the mappings.  It contains two arrays: 'add' and 'remove', each containing objects with 'gets' and 'given' fields.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_105\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add\": [\n    {\n      \"gets\": \"string\",\n      \"given\": \"string\"\n    }\n  ],\n  \"remove\": [\n    {\n      \"gets\": \"string\",\n      \"given\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Coder App Creation for Code-Server\nDESCRIPTION: This Terraform code conditionally creates a `coder_app` resource for code-server based on the value of `data.coder_parameter.code_server.value`. If the parameter is `true`, the `coder_app` resource will be created; otherwise, it will not be created.  This uses the count meta-argument.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_22\n\nLANGUAGE: Terraform\nCODE:\n```\n# code-server\nresource \"coder_app\" \"code-server\" {\ncount         = data.coder_parameter.code_server.value ? 1 : 0\nagent_id      = coder_agent.coder.id\nslug          = \"code-server\"\ndisplay_name  = \"code-server\"\nicon          = \"/icon/code.svg\"\nurl           = \"http://localhost:13337?folder=/home/coder\"\nsubdomain = false\nshare     = \"owner\"\n\nhealthcheck {\n    url       = \"http://localhost:13337/healthz\"\n    interval  = 3\n    threshold = 10\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for Wildcard Certificates (Route53)\nDESCRIPTION: This Caddyfile snippet configures Caddy to use AWS Route53 for DNS challenges when generating wildcard TLS certificates. It includes necessary credentials and settings for Route53, such as the AWS profile, access key ID, secret access key, token, and region.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_7\n\nLANGUAGE: caddyfile\nCODE:\n```\ntls {\n-  on_demand\n-  issuer acme {\n-      email email@example.com\n-  }\n\n+  dns route53 {\n+     max_retries 10\n+     aws_profile \"real-profile\"\n+     access_key_id \"AKI...\"\n+     secret_access_key \"wJa...\"\n+     token \"TOKEN...\"\n+     region \"us-east-1\"\n+  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Updated Group IDP Sync Settings Response\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response after updating group IDP sync settings. It includes properties reflecting the updated settings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_create_missing_groups\": true,\n  \"field\": \"string\",\n  \"legacy_group_name_mapping\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"regex_filter\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Install Coder CLI on Linux/macOS\nDESCRIPTION: This script downloads and executes the Coder installation script. It provides a quick and easy way to install Coder on Linux or macOS systems. It uses curl to download the script and sh to execute it.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/zed.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Example workspace build response\nDESCRIPTION: This JSON snippet provides an example of the response received when successfully retrieving a workspace build. The response includes various details about the build, such as its ID, status, resources, job information, and associated metadata. Understanding this structure helps in parsing the API response and extracting relevant data.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build_number\": 0,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"daily_cost\": 0,\n  \"deadline\": \"2019-08-24T14:15:22Z\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n  \"initiator_name\": \"string\",\n  \"job\": {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  },\n  \"matched_provisioners\": {\n    \"available\": 0,\n    \"count\": 0,\n    \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n  },\n  \"max_deadline\": \"2019-08-24T14:15:22Z\",\n  \"reason\": \"initiator\",\n  \"resources\": [\n    {\n      \"agents\": [\n        {\n          \"api_version\": \"string\",\n          \"apps\": [\n            {\n              \"command\": \"string\",\n              \"display_name\": \"string\",\n              \"external\": true,\n              \"health\": \"disabled\",\n              \"healthcheck\": {\n                \"interval\": 0,\n                \"threshold\": 0,\n                \"url\": \"string\"\n              },\n              \"hidden\": true,\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"open_in\": \"slim-window\",\n              \"sharing_level\": \"owner\",\n              \"slug\": \"string\",\n              \"statuses\": [\n                {\n                  \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                  \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                  \"created_at\": \"2019-08-24T14:15:22Z\",\n                  \"icon\": \"string\",\n                  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                  \"message\": \"string\",\n                  \"needs_user_attention\": true,\n                  \"state\": \"working\",\n                  \"uri\": \"string\",\n                  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                }\n              ],\n              \"subdomain\": true,\n              \"subdomain_name\": \"string\",\n              \"url\": \"string\"\n            }\n          ],\n          \"architecture\": \"string\",\n          \"connection_timeout_seconds\": 0,\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"directory\": \"string\",\n          \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n          \"display_apps\": [\n            \"vscode\"\n          ],\n          \"environment_variables\": {\n            \"property1\": \"string\",\n            \"property2\": \"string\"\n          },\n          \"expanded_directory\": \"string\",\n          \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"health\": {\n            \"healthy\": false,\n            \"reason\": \"agent has lost connection\"\n          },\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"instance_id\": \"string\",\n          \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"latency\": {\n            \"property1\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            },\n            \"property2\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            }\n          },\n          \"lifecycle_state\": \"created\",\n          \"log_sources\": [\n            {\n              \"created_at\": \"2019-08-24T14:15:22Z\",\n              \"display_name\": \"string\",\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n            }\n          ],\n          \"logs_length\": 0,\n          \"logs_overflowed\": true,\n          \"name\": \"string\",\n          \"operating_system\": \"string\",\n          \"ready_at\": \"2019-08-24T14:15:22Z\",\n          \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n          \"scripts\": [\n            {\n              \"cron\": \"string\",\n              \"display_name\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"log_path\": \"string\",\n              \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n              \"run_on_start\": true,\n              \"run_on_stop\": true,\n              \"script\": \"string\",\n              \"start_blocks_login\": true,\n              \"timeout\": 0\n            }\n          ],\n          \"started_at\": \"2019-08-24T14:15:22Z\",\n          \"startup_script_behavior\": \"blocking\",\n          \"status\": \"connecting\",\n          \"subsystems\": [\n            \"envbox\"\n          ],\n          \"troubleshooting_url\": \"string\",\n          \"updated_at\": \"2019-08-24T14:15:22Z\",\n          \"version\": \"string\"\n        }\n      ],\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"daily_cost\": 0,\n      \"hide\": true,\n      \"icon\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n      \"metadata\": [\n        {\n          \"key\": \"string\",\n          \"sensitive\": true,\n          \"value\": \"string\"\n        }\n      ],\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"workspace_transition\": \"start\"\n    }\n  ],\n  \"status\": \"pending\",\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n  \"template_version_name\": \"string\",\n  \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n  \"transition\": \"start\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n  \"workspace_name\": \"string\",\n  \"workspace_owner_avatar_url\": \"string\",\n  \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n  \"workspace_owner_name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding cgroup entries to cmdline.txt - text\nDESCRIPTION: This snippet shows the line that needs to be added to `/boot/firmware/cmdline.txt` or `/boot/cmdline.txt` to enable memory cgroup. It's crucial for resolving ContainerMemory query errors on Raspberry Pi OS and older Debian systems. It contains the parameters `cgroup_memory=1 cgroup_enable=memory`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncgroup_memory=1 cgroup_enable=memory\n```\n\n----------------------------------------\n\nTITLE: Get Agent Debug Logs using curl\nDESCRIPTION: Retrieves the first 10MiB of data from the coder-agent.log file. Requires the CODER_AGENT_DEBUG_ADDRESS environment variable to be set to the address of the debug endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/agent-api/debug.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl $CODER_AGENT_DEBUG_ADDRESS/debug/logs\n```\n\n----------------------------------------\n\nTITLE: Open Coder App Usage\nDESCRIPTION: This command opens a workspace application within Coder. It requires the workspace name and the application slug as arguments.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/open_app.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder open app [flags] <workspace> <app slug>\n```\n\n----------------------------------------\n\nTITLE: Appearance Config Response Schema\nDESCRIPTION: This JSON schema describes the structure of the appearance configuration response from the Coder server. It includes fields for announcement banners, application name, documentation URL, logo URL, service banner, and support links. Each field has a specific data type, such as string or boolean.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"announcement_banners\": [\n    {\n      \"background_color\": \"string\",\n      \"enabled\": true,\n      \"message\": \"string\"\n    }\n  ],\n  \"application_name\": \"string\",\n  \"docs_url\": \"string\",\n  \"logo_url\": \"string\",\n  \"service_banner\": {\n    \"background_color\": \"string\",\n    \"enabled\": true,\n    \"message\": \"string\"\n  },\n  \"support_links\": [\n    {\n      \"icon\": \"bug\",\n      \"name\": \"string\",\n      \"target\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Database using Coder CLI\nDESCRIPTION: This command decrypts a previously encrypted database using the Coder CLI. It requires specifying connection details for the Postgres database and the decryption keys.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server_dbcrypt_decrypt.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server dbcrypt decrypt [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing provisioner keys via CLI\nDESCRIPTION: This code snippet shows the basic usage of the `coder provisioner keys list` command in the console. It does not include any flags and will output a table of provisioner keys in the default format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_keys_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner keys list [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Get Workspace Proxy Response\nDESCRIPTION: This is an example JSON response when successfully retrieving a workspace proxy. It includes fields such as `created_at`, `deleted`, `display_name`, `id`, and `status`, providing details about the workspace proxy.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_127\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleted\": true,\n  \"derp_enabled\": true,\n  \"derp_only\": true,\n  \"display_name\": \"string\",\n  \"healthy\": true,\n  \"icon_url\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\",\n  \"path_app_url\": \"string\",\n  \"status\": {\n    \"checked_at\": \"2019-08-24T14:15:22Z\",\n    \"report\": {\n      \"errors\": [\n        \"string\"\n      ],\n      \"warnings\": [\n        \"string\"\n      ]\n    },\n    \"status\": \"ok\"\n  },\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"version\": \"string\",\n  \"wildcard_hostname\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pinging Coder Workspace Agent with Verbose Logs\nDESCRIPTION: This command pings the workspace agent and prints diagnostics about the connection state, including client-side debugging logs, to assist in identifying connection problems.  The `-v` or `--verbose` flag enables the logging.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/troubleshooting.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder ping dev -v\n```\n\n----------------------------------------\n\nTITLE: Update User Appearance Settings with Curl\nDESCRIPTION: This code snippet demonstrates how to update user appearance settings using a curl command. It sends a PUT request to the `/users/{user}/appearance` endpoint, including the user identifier in the path and a JSON body with the new settings. The request requires `Content-Type: application/json`, `Accept: application/json`, and `Coder-Session-Token` headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/appearance \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Workspace Build Response Example (JSON)\nDESCRIPTION: This JSON snippet shows a sample response for a workspace build, including details such as build number, creation timestamp, daily cost, associated job information, resource details (agents), and current status. It demonstrates the structure of the workspace build object returned by the API.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build_number\": 0,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"daily_cost\": 0,\n  \"deadline\": \"2019-08-24T14:15:22Z\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n  \"initiator_name\": \"string\",\n  \"job\": {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  },\n  \"matched_provisioners\": {\n    \"available\": 0,\n    \"count\": 0,\n    \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n  },\n  \"max_deadline\": \"2019-08-24T14:15:22Z\",\n  \"reason\": \"initiator\",\n  \"resources\": [\n    {\n      \"agents\": [\n        {\n          \"api_version\": \"string\",\n          \"apps\": [\n            {\n              \"command\": \"string\",\n              \"display_name\": \"string\",\n              \"external\": true,\n              \"health\": \"disabled\",\n              \"healthcheck\": {\n                \"interval\": 0,\n                \"threshold\": 0,\n                \"url\": \"string\"\n              },\n              \"hidden\": true,\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"open_in\": \"slim-window\",\n              \"sharing_level\": \"owner\",\n              \"slug\": \"string\",\n              \"statuses\": [\n                {\n                  \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                  \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                  \"created_at\": \"2019-08-24T14:15:22Z\",\n                  \"icon\": \"string\",\n                  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                  \"message\": \"string\",\n                  \"needs_user_attention\": true,\n                  \"state\": \"working\",\n                  \"uri\": \"string\",\n                  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                }\n              ],\n              \"subdomain\": true,\n              \"subdomain_name\": \"string\",\n              \"url\": \"string\"\n            }\n          ],\n          \"architecture\": \"string\",\n          \"connection_timeout_seconds\": 0,\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"directory\": \"string\",\n          \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n          \"display_apps\": [\n            \"vscode\"\n          ],\n          \"environment_variables\": {\n            \"property1\": \"string\",\n            \"property2\": \"string\"\n          },\n          \"expanded_directory\": \"string\",\n          \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"health\": {\n            \"healthy\": false,\n            \"reason\": \"agent has lost connection\"\n          },\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"instance_id\": \"string\",\n          \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"latency\": {\n            \"property1\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            },\n            \"property2\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            }\n          },\n          \"lifecycle_state\": \"created\",\n          \"log_sources\": [\n            {\n              \"created_at\": \"2019-08-24T14:15:22Z\",\n              \"display_name\": \"string\",\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n            }\n          ],\n          \"logs_length\": 0,\n          \"logs_overflowed\": true,\n          \"name\": \"string\",\n          \"operating_system\": \"string\",\n          \"ready_at\": \"2019-08-24T14:15:22Z\",\n          \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n          \"scripts\": [\n            {\n              \"cron\": \"string\",\n              \"display_name\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"log_path\": \"string\",\n              \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n              \"run_on_start\": true,\n              \"run_on_stop\": true,\n              \"script\": \"string\",\n              \"start_blocks_login\": true,\n              \"timeout\": 0\n            }\n          ],\n          \"started_at\": \"2019-08-24T14:15:22Z\",\n          \"startup_script_behavior\": \"blocking\",\n          \"status\": \"connecting\",\n          \"subsystems\": [\n            \"envbox\"\n          ],\n          \"troubleshooting_url\": \"string\",\n          \"updated_at\": \"2019-08-24T14:15:22Z\",\n          \"version\": \"string\"\n        }\n      ],\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"daily_cost\": 0,\n      \"hide\": true,\n      \"icon\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n      \"metadata\": [\n        {\n          \"key\": \"string\",\n          \"sensitive\": true,\n          \"value\": \"string\"\n        }\n      ],\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"workspace_transition\": \"start\"\n    }\n  ],\n  \"status\": \"pending\",\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n  \"template_version_name\": \"string\",\n  \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n  \"transition\": \"start\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n  \"workspace_name\": \"string\",\n  \"workspace_owner_avatar_url\": \"string\",\n  \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n  \"workspace_owner_name\": \"string\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Coder Templates\nDESCRIPTION: Shows how to initialize Coder templates using the CLI. This command allows users to create a template from an example, which can be used to provision development environments. This initializes the coder templates.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/index.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ coder templates init\n```\n\n----------------------------------------\n\nTITLE: Example Updated Organization IdP Sync Settings Response\nDESCRIPTION: This JSON snippet shows an example response after successfully updating the organization IdP sync settings using the /settings/idpsync/organization endpoint. It mirrors the structure of the request body, confirming the changes. The expected status code is 200 OK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_100\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": \"string\",\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"organization_assign_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Coder Helm Chart Configuration\nDESCRIPTION: This YAML snippet provides a basic configuration example for the Coder Helm chart, setting environment variables like the Coder URL and Prometheus address. It also defines the replica count and secret names for the provisioner daemon.\nSOURCE: https://github.com/coder/coder/blob/main/helm/provisioner/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    - name: CODER_URL\n      value: \"https://coder.example.com\"\n    # This env enables the Prometheus metrics endpoint.\n    - name: CODER_PROMETHEUS_ADDRESS\n      value: \"0.0.0.0:2112\"\n  replicaCount: 10\nprovisionerDaemon:\n  keySecretName: \"coder-provisionerd-key\"\n  keySecretKey: \"provisionerd-key\"\n```\n\n----------------------------------------\n\nTITLE: Executing Ping Command\nDESCRIPTION: Illustrates the basic syntax for executing the 'coder ping' command on a specified workspace. The command sends ping requests to the designated workspace to check its availability and responsiveness.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/ping.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder ping [flags] <workspace>\n```\n\n----------------------------------------\n\nTITLE: Unfavorite Workspace Usage - Coder CLI\nDESCRIPTION: Removes a specified workspace from the user's list of favorite workspaces. The `<workspace>` argument refers to the name of the workspace to be unfavorited.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/unfavorite.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder unfavorite <workspace>\n```\n\n----------------------------------------\n\nTITLE: Activating a User with Coder CLI\nDESCRIPTION: This command activates a user in the Coder platform. It requires the Coder CLI to be installed and configured. The user can be identified by username or user ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_activate.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder users activate [flags] <username|user_id>\n```\n\n----------------------------------------\n\nTITLE: User Appearance Settings Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample response containing user appearance settings.  It includes fields such as `terminal_font` and `theme_preference`.  These settings define the user's visual preferences within the Coder environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"terminal_font\": \"\",\n  \"theme_preference\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: List Users Usage\nDESCRIPTION: Shows the basic usage of the `coder users list` command in the console.  It illustrates the command syntax and indicates the use of flags for modifying the command's behavior.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder users list [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing GET Request with Curl\nDESCRIPTION: This code snippet demonstrates how to use curl to perform a GET request to retrieve workspace agent startup logs. It includes the endpoint URL with a placeholder for the workspace agent ID, as well as headers for accepting JSON and providing the Coder session token for authentication. This example provides a basic template for querying the API endpoint from a command line environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent}/startup-logs \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Initializing Coder templates\nDESCRIPTION: This snippet shows how to initialize Coder templates using the `coder-dev.sh` script. Running this command allows you to set up the basic structure for creating new workspace templates. The script prompts you to choose a template type, such as “Develop in Docker”, which generates a new folder containing the necessary files for the chosen template.\nSOURCE: https://github.com/coder/coder/blob/main/dogfood/coder/guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/coder-dev.sh templates init\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX on Debian/Ubuntu\nDESCRIPTION: This command installs the NGINX web server on Debian/Ubuntu-based systems.  NGINX will act as a reverse proxy for the Coder deployment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install nginx\n```\n\n----------------------------------------\n\nTITLE: Product Information URL (Shell)\nDESCRIPTION: Defines the productsInfoUrl, used by JetBrains Gateway to locate products.json.  This file, generated by the backend downloader, provides information about available products. The URL can be http://, https://, or file://.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cat productsInfoUrl # a path to products.json that was generated by the backend's downloader (it could be http://, https://, or file://)\n\nhttps://internal.site/backends/<PRODUCT_CODE>/products.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Support Links in Kubernetes with YAML\nDESCRIPTION: This YAML snippet configures support links within a Coder Kubernetes deployment by updating the Helm chart values. It sets the `CODER_SUPPORT_LINKS` environment variable to a JSON array defining the names, targets, and icons for each support link. The support links will then appear in the user dropdown menu.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/setup/appearance.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ncoder:\n  env:\n    - name: CODER_SUPPORT_LINKS\n      value: >\n        [{\"name\": \"Hello GitHub\", \"target\": \"https://github.com/coder/coder\",\n        \"icon\": \"bug\"},\n         {\"name\": \"Hello Slack\", \"target\":\n        \"https://codercom.slack.com/archives/C014JH42DBJ\", \"icon\":\n        \"/icon/slack.svg\"},\n         {\"name\": \"Hello Discord\", \"target\": \"https://discord.gg/coder\", \"icon\":\n        \"/icon/discord.svg\"},\n         {\"name\": \"Hello Foobar\", \"target\": \"https://foo.com/bar\", \"icon\":\n        \"/emojis/1f3e1.png\"}]\n```\n\n----------------------------------------\n\nTITLE: Canceling a Template Version with Curl\nDESCRIPTION: This snippet demonstrates how to cancel a template version using a curl command. It requires the templateversion ID, a valid Accept header, and a Coder-Session-Token. Canceling halts any pending or ongoing operations related to the specified template version.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/templateversions/{templateversion}/cancel \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: SSH Configuration for JetBrains Gateway Connection\nDESCRIPTION: This SSH configuration snippet adds a `ServerAliveInterval` setting to the SSH config file for JetBrains Gateway connections to Coder. This setting ensures that the SSH connection is checked periodically, preventing disconnects due to network changes. This setting prevents a hung session when a network disconnect occurs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_23\n\nLANGUAGE: Text\nCODE:\n```\nHost coder-jetbrains--*\n  ServerAliveInterval 5\n```\n\n----------------------------------------\n\nTITLE: Pulling Coder Docker Image\nDESCRIPTION: This command is used to pull the Coder Docker image for version 2.7.1 from the GitHub Container Registry. It allows users to deploy or update their Coder instances using Docker. This command requires Docker to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v2.7.1.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull ghcr.io/coder/coder:v2.7.1\n```\n\n----------------------------------------\n\nTITLE: Executing the netcheck command\nDESCRIPTION: This command is used to execute the netcheck tool. It prints network debug information for DERP and STUN, which can be useful for troubleshooting network connectivity issues.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/netcheck.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder netcheck\n```\n\n----------------------------------------\n\nTITLE: Example response for getting Provisioner Daemons\nDESCRIPTION: This JSON snippet represents an example response from the `/organizations/{organization}/provisionerdaemons` endpoint when successfully retrieving provisioner daemons. It includes details such as API version, creation timestamp, current and previous job information, IDs, key details, last seen timestamp, name, organization ID, provisioners, status, tags, and version. The response provides a snapshot of the provisioner daemon's state and configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/provisioning.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"api_version\": \"string\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"current_job\": {\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"status\": \"pending\",\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_name\": \"string\"\n    },\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"key_id\": \"1e779c8a-6786-4c89-b7c3-a6666f5fd6b5\",\n    \"key_name\": \"string\",\n    \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"previous_job\": {\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"status\": \"pending\",\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_name\": \"string\"\n    },\n    \"provisioners\": [\n      \"string\"\n    ],\n    \"status\": \"offline\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"version\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Check Authorization - JSON Body\nDESCRIPTION: This JSON payload specifies the structure for authorization checks to be sent to the `/authcheck` endpoint. Each property contains an action and an object with details about the resource being accessed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"checks\": {\n    \"property1\": {\n      \"action\": \"create\",\n      \"object\": {\n        \"any_org\": true,\n        \"organization_id\": \"string\",\n        \"owner_id\": \"string\",\n        \"resource_id\": \"string\",\n        \"resource_type\": \"*\"\n      }\n    },\n    \"property2\": {\n      \"action\": \"create\",\n      \"object\": {\n        \"any_org\": true,\n        \"organization_id\": \"string\",\n        \"owner_id\": \"string\",\n        \"resource_id\": \"string\",\n        \"resource_type\": \"*\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Provisioners - Coder Helm\nDESCRIPTION: This YAML snippet configures the deployment of multiple provisioners in the same namespace, using `nameOverride` and `serviceAccount.name` to avoid conflicts.  It also shows how `nameOverride` does not apply to `extraTemplates`.\nSOURCE: https://github.com/coder/coder/blob/main/helm/provisioner/README.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  # ...\n  serviceAccount:\n    name: other-coder-provisioner\nprovisionerDaemon:\n  # ...\nnameOverride: \"other-coder-provisioner\"\nextraTemplates:\n\t- |\n\t\tapiVersion: v1\n\t\tkind: ConfigMap\n\t\tmetadata:\n\t\t  name: some-other-config\n\t\t  namespace: {{ .Release.Namespace }}\n\t\tdata:\n\t\t  key: some-other-value\n```\n\n----------------------------------------\n\nTITLE: Provisioner Key Response Body (JSON)\nDESCRIPTION: The JSON response body returned when fetching provisioner key details. It contains details such as the creation timestamp, ID, name, organization ID, and associated tags. The tags object is a simple key-value map.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\",\n  \"organization\": \"452c1a86-a0af-475b-b03f-724878b0f387\",\n  \"tags\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Organization: Curl Example\nDESCRIPTION: This example shows how to delete an organization from the Coder server using a curl command. It includes the `Accept` header and `Coder-Session-Token` for authentication. The API endpoint is `/api/v2/organizations/{organization}` with the DELETE method.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/organizations/{organization} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Template Version Response Example\nDESCRIPTION: This JSON snippet shows an example response for a template version object. It includes various fields like `archived`, `created_at`, `created_by`, `job`, `matched_provisioners`, `message`, `name`, `organization_id`, `readme`, `template_id`, `updated_at`, and `warnings`. It provides a structured view of a template version and its associated metadata.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"archived\": true,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"created_by\": {\n    \"avatar_url\": \"http://example.com\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"username\": \"string\"\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"job\": {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  },\n  \"matched_provisioners\": {\n    \"available\": 0,\n    \"count\": 0,\n    \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n  },\n  \"message\": \"string\",\n  \"name\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"readme\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"warnings\": [\n    \"UNSUPPORTED_WORKSPACES\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get Git SSH Key via curl\nDESCRIPTION: This snippet demonstrates how to retrieve the Git SSH key for a workspace agent using a curl command. It requires a valid Coder-Session-Token for authentication. The expected response is a JSON object containing the private and public keys.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/me/gitsshkey \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes Secret for Database Connection URL\nDESCRIPTION: This command creates a Kubernetes secret named 'coder-db-url' in the 'coder' namespace. This secret stores the PostgreSQL connection URL, which is essential for Coder to connect to the database. Ensure the URL is updated if a managed PostgreSQL is used.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/rancher.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret generic coder-db-url -n coder \\\n  --from-literal=url=\"postgres://coder:coder@coder-db-postgresql.coder.svc.cluster.local:5432/coder?sslmode=disable\"\n```\n\n----------------------------------------\n\nTITLE: Example Response - Role Object - JSON\nDESCRIPTION: This JSON snippet shows the structure of a successful response (200 OK) after deleting an organization role. It includes the display name, name, organization ID, and permissions associated with the role. Permissions are defined at the organization, site, and user levels and may include negation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"display_name\": \"string\",\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"site_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"user_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Hiding Default Workspace Icons in Coder Template\nDESCRIPTION: This Terraform snippet shows how to configure the visibility of Coder apps within a template, specifically hiding VS Code Desktop, VS Code Insiders, SSH, and Ports while displaying the web terminal. This configuration goes inside the `coder_agent` resource within the template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\n  display_apps {\n    vscode = false\n    vscode_insiders = false\n    ssh_helper = false\n    port_forwarding_helper = false\n    web_terminal = true\n  }\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Pull Template Usage\nDESCRIPTION: Shows the basic usage of the `coder templates pull` command in the command line. It allows the user to download a template to a specified destination.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_pull.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates pull [flags] <name> [destination]\n```\n\n----------------------------------------\n\nTITLE: List Containers Response Example\nDESCRIPTION: This JSON snippet shows an example of a successful response (200) when listing containers. It presents an array of container objects, each containing details such as ID, image, labels, ports, status, and volumes. It also includes an array of warnings, if any.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"containers\": [\n    {\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"id\": \"string\",\n      \"image\": \"string\",\n      \"labels\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"name\": \"string\",\n      \"ports\": [\n        {\n          \"host_ip\": \"string\",\n          \"host_port\": 0,\n          \"network\": \"string\",\n          \"port\": 0\n        }\n      ],\n      \"running\": true,\n      \"status\": \"string\",\n      \"volumes\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      }\n    }\n  ],\n  \"warnings\": [\n    \"string\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing config-ssh Command\nDESCRIPTION: This snippet shows the basic usage of the `coder config-ssh` command. No specific dependencies are listed as the command itself is the main focus.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/config-ssh.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder config-ssh [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling Path-Based App Sharing in Kubernetes\nDESCRIPTION: These Kubernetes deployment environment variables enable path-based workspace app sharing, allowing authenticated users and Coder owners to access applications like code-server via paths. These environment variables should be added to the Coder deployment configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# allow authenticated users to access path-based workspace apps\n- name: CODER_DANGEROUS_ALLOW_PATH_APP_SHARING\n  value: \"true\"\n# allow Coder owner roles to access path-based workspace apps\n- name: CODER_DANGEROUS_ALLOW_PATH_APP_SITE_OWNER_ACCESS\n  value: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Indicate Gateway Installation Directory (macOS)\nDESCRIPTION: Specifies the default installation directories of the JetBrains Gateway under macOS. This is needed when attempting to locate the `cacerts` file which is a Java trust store.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n<Gateway installation directory>/jbr/lib/security/cacerts\n/Library/Application Support/JetBrains/Toolbox/apps/JetBrainsGateway/ch-0/<app-id>/JetBrains Gateway.app/Contents/jbr/Contents/Home/lib/security/cacerts # Path for Toolbox installation\n```\n\n----------------------------------------\n\nTITLE: Accessing a Port with HTTP or HTTPS via URL\nDESCRIPTION: This shows accessing ports on the workspace and configuring the port protocol manually by appending a `s` to the port in the URL for HTTPS.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/port-forwarding.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# Uses HTTP\nhttps://33295--agent--workspace--user--apps.example.com/\n# Uses HTTPS\nhttps://33295s--agent--workspace--user--apps.example.com/\n```\n\n----------------------------------------\n\nTITLE: Executing release migrations script for all releases\nDESCRIPTION: This command executes the `releasemigrations` script to list all migrations for all release types (patch, minor, and major). The `--patches`, `--minors`, `--majors`, and `--list` flags are used. It assumes the `releasemigrations` script is located in the `scripts/releasemigrations/` directory and requires `go` to be installed.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/releasemigrations/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ go run scripts/releasemigrations/main.go --patches --minors --majors --list\n```\n\n----------------------------------------\n\nTITLE: Removing Coder package - macOS\nDESCRIPTION: This command removes the Coder package from macOS if installed with Homebrew.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbrew uninstall coder\n```\n\n----------------------------------------\n\nTITLE: Check Authorization - JSON Response\nDESCRIPTION: This JSON response shows the expected output from the `/authcheck` endpoint.  It returns a boolean value for each property in the request, indicating whether the action is authorized.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"property1\": true,\n  \"property2\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Get Organization Members using curl\nDESCRIPTION: This code snippet demonstrates how to retrieve organization members using a curl request. It includes the necessary headers for accepting JSON responses and providing a Coder session token for authentication. Replace `http://coder-server:8080/api/v2/users/roles` with the appropriate endpoint for retrieving organization members and `API_KEY` with the actual API key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/roles \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Group Creation Response JSON\nDESCRIPTION: This JSON snippet represents a successful response (201 Created) after creating a group. It contains details about the newly created group, such as its ID, name, display name, and members. The structure matches the `codersdk.Group` schema.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"string\",\n  \"display_name\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"members\": [\n    {\n      \"avatar_url\": \"http://example.com\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"email\": \"user@example.com\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n      \"login_type\": \"\",\n      \"name\": \"string\",\n      \"status\": \"active\",\n      \"theme_preference\": \"string\",\n      \"updated_at\": \"2019-08-24T14:15:22Z\",\n      \"username\": \"string\"\n    }\n  ],\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"quota_allowance\": 0,\n  \"source\": \"user\",\n  \"total_member_count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Remote Path for LSP Servers\nDESCRIPTION: This Emacs Lisp snippet adds a directory to the `tramp-remote-path` when connecting to a specific machine via TRAMP. This allows `lsp-mode` to find LSP server binaries that are not in the default path. A connection profile named 'remote-path-lsp-servers' is created, setting `tramp-remote-path` to include the specified `<PATH TO ADD>`. This profile is then associated with connections to `coder.<WORKSPACE NAME>`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/emacs-tramp.md#_snippet_5\n\nLANGUAGE: Lisp\nCODE:\n```\n(connection-local-set-profile-variables 'remote-path-lsp-servers\n                                 '((tramp-remote-path . (\"<PATH TO ADD>\" tramp-default-remote-path))))\n(connection-local-set-profiles '(:machine \"coder.<WORKSPACE NAME>\") 'remote-path-lsp-servers)\n```\n\n----------------------------------------\n\nTITLE: Define volume and volumeMounts in Helm chart (client)\nDESCRIPTION: Defines a volume and volumeMounts in the Coder Helm chart to mount the PostgreSQL client certificate secret to the `$HOME/.postgresql` directory within the Coder workspace.  This allows Coder to access the client certificate for SSL connection.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/postgres-ssl.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  volumes:\n    - name: \"pg-certs-mount\"\n      secret:\n        secretName: \"postgres-certs\"\n  volumeMounts:\n    - name: \"pg-certs-mount\"\n      mountPath: \"$HOME/.postgresql\"\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Getting OAuth2 Applications via API with Curl\nDESCRIPTION: This snippet showcases how to retrieve a list of OAuth2 applications using the Coder API v2 with a GET request. It utilizes curl to send the request to the `/oauth2-provider/apps` endpoint and requires a valid `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/oauth2-provider/apps \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Waiting for agent connection Coder SSH\nDESCRIPTION: This snippet shows the message displayed when the Coder agent is not connected to the workspace.  It indicates that the agent or init script has failed on the resource. Troubleshooting steps depend on the resource, but generally involve ensuring `curl` is installed and can access the Coder access URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ coder ssh myworkspace\n⢄⡱ Waiting for connection from [agent]...\n```\n\n----------------------------------------\n\nTITLE: Running Coder Server with Specific Access URL\nDESCRIPTION: This command starts the Coder server with a specified access URL and address. It's useful for standalone installations, such as on a MacBook with Docker Desktop, where workspaces need to reach the Coder server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncoder server --access-url http://localhost:3000 --address 0.0.0.0:3000\n```\n\n----------------------------------------\n\nTITLE: Watch for New Inbox Notifications - Example Response\nDESCRIPTION: This example JSON response shows the structure of the data returned when watching for new inbox notifications. It includes a `notification` object with details and an `unread_count`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notification\": {\n    \"actions\": [\n      {\n        \"label\": \"string\",\n        \"url\": \"string\"\n      }\n    ],\n    \"content\": \"string\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"read_at\": \"string\",\n    \"targets\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n    \"title\": \"string\",\n    \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n  },\n  \"unread_count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the IDP Service with Go\nDESCRIPTION: This command starts the IDP service using Go.  It executes the `main.go` file, initializing the service and printing information such as the IDP Issuer URL and OAuth flags.  The output shows the service configuration including a fake external authentication provider.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/testidp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go run main.go\n2024-01-10 16:48:01.415 [info]  stdlib: 2024/01/10 10:48:01 IDP Issuer URL http://127.0.0.1:44517\n2024-01-10 16:48:01.415 [info]  stdlib: 2024/01/10 10:48:01 Oauth Flags\n2024-01-10 16:48:01.415 [info]  stdlib: 2024/01/10 10:48:01 --external-auth-providers='[{\"type\":\"fake\",\"client_id\":\"f2df566b-a1c9-407a-8b75-480db45c6476\",\"client_secret\":\"55aca4e3-7b94-44b6-9f45-ecb5e81c560d\",\"auth_url\":\"http://127.0.0.1:44517/oauth2/authorize\",\"token_url\":\"http://127.0.0.1:44517/oauth2/token\",\"validate_url\":\"http://127.0.0.1:44517/oauth2/userinfo\",\"scopes\":[\"openid\",\"email\",\"profile\"]}]'\n2024-01-10 16:48:01.415 [info]  stdlib: 2024/01/10 10:48:01 Press Ctrl+C to exit\n```\n\n----------------------------------------\n\nTITLE: Login to Coder and Configure SSH (Shell)\nDESCRIPTION: Logs in to a Coder deployment using the Coder CLI and configures SSH access. This step is necessary before connecting to the Coder workspace via SSH.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncoder login coder.example.com\ncoder config-ssh\n```\n\n----------------------------------------\n\nTITLE: Login to Coder Deployment using Coder CLI\nDESCRIPTION: This command logs you into your Coder deployment using the Coder CLI.  You'll need your access URL.  It is a prerequisite to other CLI license management commands.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/licensing/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder login <access url>\n```\n\n----------------------------------------\n\nTITLE: Removing Coder settings - macOS\nDESCRIPTION: This command removes the Coder settings directory on macOS.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/Library/Application\\ Support/coderv2\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Get Member Roles\nDESCRIPTION: This JSON snippet represents the expected response when retrieving member roles for an organization. It includes details about each role, such as whether it's assignable and built-in, its display name and name, the organization ID it belongs to, and associated organization, site, and user permissions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"assignable\": true,\n    \"built_in\": true,\n    \"display_name\": \"string\",\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"site_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"user_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Testing NGINX Configuration\nDESCRIPTION: This command tests the NGINX configuration file for syntax errors.  This is important to do before restarting NGINX to ensure that the configuration is valid.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: Create Template Version Dry-Run Request Body (JSON)\nDESCRIPTION: This JSON snippet shows the expected structure for the request body when creating a template version dry-run. It includes rich parameter values, user variable values, and the workspace name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rich_parameter_values\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"user_variable_values\": [\n    {\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"workspace_name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Azure VM with Azure CLI in Terraform\nDESCRIPTION: This Terraform snippet defines a `null_resource` that starts an Azure VM when the Coder workspace transitions to the 'start' state. It uses the `az vm start` command to start the VM.  It depends on the `azurerm_windows_virtual_machine.main` resource.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/azure-windows/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"null_resource\" \"start\" {\n  count      = data.coder_workspace.me.transition == \"start\" ? 1 : 0\n  depends_on = [azurerm_windows_virtual_machine.main]\n  provisioner \"local-exec\" {\n    command = \"az vm start --ids ${azurerm_windows_virtual_machine.main.id}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a License via API with Curl\nDESCRIPTION: This snippet demonstrates how to delete a license using the Coder API v2 with a DELETE request. It uses curl to send the request to the `/licenses/{id}` endpoint, requiring the license ID as a path parameter and a valid `Coder-Session-Token` for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/licenses/{id} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Import Certificate to Java Trust Store (macOS)\nDESCRIPTION: Imports a given certificate to the Java trust store of a JetBrains Gateway installation in macOS. This is used to establish a secure connection to Coder deployments utilizing internally signed certificates. It requires the `keytool` utility which comes with the JetBrains Gateway installation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -import -alias coder -file cacert.pem -keystore /Applications/JetBrains\\ Gateway.app/Contents/jbr/Contents/Home/lib/security/cacerts\n```\n\n----------------------------------------\n\nTITLE: Dry run SSH configuration with Coder CLI\nDESCRIPTION: This command performs a dry run of the SSH configuration process using the Coder CLI. It allows users to preview the changes that will be made to their SSH configuration without actually applying them. It requires the Coder CLI to be installed and authenticated.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder config-ssh --dry-run\n```\n\n----------------------------------------\n\nTITLE: Showing Member Organizations\nDESCRIPTION: Explains how to list all organizations to which the user is a member.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_show.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncoder org show me:\n\n   $ List of all organizations you are a member of.\n```\n\n----------------------------------------\n\nTITLE: Delete API Key with curl\nDESCRIPTION: This snippet demonstrates how to delete an API key using `curl`. It sends a DELETE request to the `/users/{user}/keys/{keyid}` endpoint and requires the `Coder-Session-Token` header for authentication.  The `{keyid}` path parameter specifies the ID of the API key to be deleted.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/users/{user}/keys/{keyid} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Timings Response - 200 OK\nDESCRIPTION: Details the format of a successful response containing workspace build timings. It includes sections for `agent_connection_timings`, `agent_script_timings`, and `provisioner_timings`. Each timing entry contains information like the start and end times, stage, related IDs, and other context specific information. This allows for detailed analysis of the workspace creation process.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_connection_timings\": [\n    {\n      \"ended_at\": \"2019-08-24T14:15:22Z\",\n      \"stage\": \"init\",\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"workspace_agent_id\": \"string\",\n      \"workspace_agent_name\": \"string\"\n    }\n  ],\n  \"agent_script_timings\": [\n    {\n      \"display_name\": \"string\",\n      \"ended_at\": \"2019-08-24T14:15:22Z\",\n      \"exit_code\": 0,\n      \"stage\": \"init\",\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"string\",\n      \"workspace_agent_id\": \"string\",\n      \"workspace_agent_name\": \"string\"\n    }\n  ],\n  \"provisioner_timings\": [\n    {\n      \"action\": \"string\",\n      \"ended_at\": \"2019-08-24T14:15:22Z\",\n      \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n      \"resource\": \"string\",\n      \"source\": \"string\",\n      \"stage\": \"init\",\n      \"started_at\": \"2019-08-24T14:15:22Z\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Get Active Replicas with GET (curl)\nDESCRIPTION: Retrieves a list of active replicas using a GET request. Requires a valid Coder session token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_78\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/replicas \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Active Template Version Request Body (JSON)\nDESCRIPTION: This JSON snippet represents the request body required to update the active version of a template. The `id` field specifies the UUID of the template version to be activated. The `id` must be a valid UUID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Regex Filter for OIDC Groups (Flag)\nDESCRIPTION: This snippet demonstrates how to configure a regex filter for OIDC groups to allow only specific groups to be created via command-line flag. It prevents the creation of unnecessary groups that do not match the pattern.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n# as a flag\n--oidc-group-regex-filter=\"^my-group-.*$\"\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Agent by ID via curl\nDESCRIPTION: This snippet demonstrates how to retrieve a workspace agent by its ID using a curl command. It requires a valid Coder-Session-Token for authentication. The {workspaceagent} path parameter needs to be replaced with the actual agent ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceagents/{workspaceagent} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update OAuth2 Application Response Example JSON\nDESCRIPTION: This JSON snippet shows an example response after successfully updating an OAuth2 application using the `PUT /oauth2-provider/apps/{app}` endpoint.  It includes the application's `callback_url`, `endpoints`, `icon`, `id`, and `name`. The `endpoints` contain authorization, device_authorization, and token URLs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"callback_url\": \"string\",\n  \"endpoints\": {\n    \"authorization\": \"string\",\n    \"device_authorization\": \"string\",\n    \"token\": \"string\"\n  },\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body for Inserting Custom Organization Role\nDESCRIPTION: This JSON snippet defines the request body required to insert a custom organization role. It includes fields for display name, name, and permission arrays for organization, site, and user scopes. The permissions arrays contain action, negate, and resource_type fields to define the role's access rights.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"display_name\": \"string\",\n  \"name\": \"string\",\n  \"organization_permissions\": [\n    {\n      \"action\": \"application_connect\",\n      \"negate\": true,\n      \"resource_type\": \"*\"\n    }\n  ],\n  \"site_permissions\": [\n    {\n      \"action\": \"application_connect\",\n      \"negate\": true,\n      \"resource_type\": \"*\"\n    }\n  ],\n  \"user_permissions\": [\n    {\n      \"action\": \"application_connect\",\n      \"negate\": true,\n      \"resource_type\": \"*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Coder Modules to Artifactory via Shell Script\nDESCRIPTION: This shell script demonstrates how to publish Coder modules to Artifactory. It involves cloning the `coder/modules` repository, navigating into the `modules` directory, configuring the JFrog CLI with `jf tfc`, and then publishing the module using `jf tf p`.  It assumes JFrog CLI is already configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/modules.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/coder/modules\ncd modules\njf tfc\njf tf p --namespace=\"coder\" --provider=\"coder\" --tag=\"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Update Active Template Version with PATCH (Shell)\nDESCRIPTION: This code snippet shows how to update the active version of a template using a PATCH request with curl. It includes setting the content type, accepting JSON responses, and passing the Coder session token for authentication. Replace `API_KEY` with your actual API key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/templates/{template}/versions \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get SCIM Service Provider Config with curl\nDESCRIPTION: This curl command retrieves the SCIM Service Provider Configuration. It sends a GET request to the specified endpoint. No specific parameters or authentication details are shown, but it implies a standard configuration endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/scim/v2/ServiceProviderConfig\n```\n\n----------------------------------------\n\nTITLE: Template Example Response - JSON\nDESCRIPTION: This JSON snippet represents the structure of a template example returned by the API. It includes fields like description, icon, ID, markdown content, name, tags, and URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"description\": \"string\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"markdown\": \"string\",\n    \"name\": \"string\",\n    \"tags\": [\n      \"string\"\n    ],\n    \"url\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: List Files in Shell\nDESCRIPTION: A simple shell command to list files in a directory. This is provided as context to show a directory listing containing a Dockerfile and a VSIX file.  No actual code is being installed in this snippit.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n~/images/base\n ➜  ls -l\n -rw-r--r-- 1 coder coder       0 Aug 1 19:23 Dockerfile\n -rw-r--r-- 1 coder coder 8925314 Aug 1 19:40 GitHub.copilot.vsix\n```\n\n----------------------------------------\n\nTITLE: Building Frontend Assets for E2E Tests (pnpm)\nDESCRIPTION: This snippet demonstrates how to build the frontend assets required for end-to-end tests using pnpm. The `pnpm build` command builds the assets. Adding `--watch` allows for automatic rebuilding when changes are detected.  Alternatively, building with debug info and source maps can be achieved using `NODE_ENV=development pnpm vite build --mode=development`.\nSOURCE: https://github.com/coder/coder/blob/main/site/e2e/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd site\n# Build the frontend assets. If you are actively changing\n# the site to debug an issue, add `--watch`.\npnpm build\n# Alternatively, build with debug info and source maps:\nNODE_ENV=development pnpm vite build --mode=development\n```\n\n----------------------------------------\n\nTITLE: Configuring Guide Route in manifest.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to add a route for a new guide within the `docs/manifest.json` file.  It specifies the title, description, and file path of the guide.  The `title` overrides the guide's main title, `description` provides a brief overview, and `path` points to the Markdown file containing the guide's content.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/example-guide.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Overrides the \"# Guide Title\" at the top of this file\n  \"title\": \"Contributing to Guides\",\n  \"description\": \"How to add a guide\",\n  \"path\": \"./guides/my-guide-file.md\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Decoded Secret - JSON\nDESCRIPTION: This JSON snippet shows an example of a decoded Kubernetes secret. It contains authentication information, including the username, password, and auth token, for a specific private registry. The `auth` field is a base64 encoded string of the username and password.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/image-pull-secret.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auths\": {\n        \"your.private.registry.com\": {\n            \"username\": \"ericpaulsen\",\n            \"password\": \"xxxx\",\n            \"auth\": \"c3R...zE2\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTPS URL Example\nDESCRIPTION: This is an example of a URL that uses HTTPS protocol for accessing a port on the workspace.  By adding an 's' to the port number in the URL, you are specifying to connect to the port using HTTPS.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttps://33295s--agent--workspace--user--apps.example.com/\n```\n\n----------------------------------------\n\nTITLE: Canceling a Provisioner Job via CLI\nDESCRIPTION: This command cancels a specific provisioner job using its unique ID. The `<job-id>` placeholder should be replaced with the actual ID of the job to be cancelled. This is useful for stopping jobs that are stuck, failing, or no longer needed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/manage-provisioner-jobs.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoder provisioner jobs cancel <job-id>\n```\n\n----------------------------------------\n\nTITLE: Update User Profile Body Parameter\nDESCRIPTION: This JSON snippet represents the body parameter required to update a user's profile. It includes the user's desired name and username.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Coder package - Alpine\nDESCRIPTION: This command removes the Coder package from Alpine Linux using the apk package manager.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apk del coder\n```\n\n----------------------------------------\n\nTITLE: Restarting Nomad Service\nDESCRIPTION: This shell command restarts the Nomad service to apply the changes made to the Nomad server configuration file, specifically the Docker plugin configuration.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/nomad-docker/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart nomad\n```\n\n----------------------------------------\n\nTITLE: Executing release migrations script with version range\nDESCRIPTION: This command executes the `releasemigrations` script to find all migrations included between versions v2.3.0 and v2.4.0. The `--list` flag displays the migrations. It assumes the `releasemigrations` script is located in the `scripts/releasemigrations/` directory and requires `go` to be installed.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/releasemigrations/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go run scripts/releasemigrations/main.go --list --versions=v2.3.0,v2.4.0\n```\n\n----------------------------------------\n\nTITLE: Create Provisioner Key with Coder CLI\nDESCRIPTION: This command uses the Coder CLI to create a new provisioner key associated with a specific organization. The key is used to authenticate the provisioner when it connects to the Coder instance. The `--org` flag specifies the target organization for which the key is being created.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/organizations.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder provisioner keys create data-cluster-key --org data-platform\nSuccessfully created provisioner key data-cluster! Save this authentication token, it will not be shown again.\n\n< key omitted >\n```\n\n----------------------------------------\n\nTITLE: Example Log out User Response\nDESCRIPTION: This is an example JSON response returned when logging out a user. Includes a `detail`, `message`, and array of `validations`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Workspaces with cURL Shell\nDESCRIPTION: This code snippet demonstrates how to list workspaces using the `curl` command-line tool. It sends a GET request to the specified Coder API endpoint and includes the necessary headers for accepting JSON responses and providing the API key for authentication. Replace `API_KEY` with your actual API key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/workspaces \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Template Version Logs Response (JSON)\nDESCRIPTION: This JSON snippet provides an example of the response received when retrieving logs for a template version. It includes fields such as `created_at`, `id`, `log_level`, `log_source`, `output`, and `stage`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"id\": 0,\n    \"log_level\": \"trace\",\n    \"log_source\": \"provisioner_daemon\",\n    \"output\": \"string\",\n    \"stage\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Workspace Name to Terraform Template\nDESCRIPTION: This Terraform configuration retrieves the workspace name and makes it available as an environment variable for the Coder agent. This is a prerequisite for enabling directory tracking in ansi-term.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/emacs-tramp.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_workspace\" \"me\" {\n}\n\nresource \"coder_agent\" \"main\" {\n  # ...\n  env = {\n    name = \"CODER_WORKSPACE_NAME\"\n    value = data.coder_workspace.me.name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Proxy with Curl\nDESCRIPTION: This example demonstrates how to retrieve a workspace proxy using a curl command. It sends a GET request to the specified endpoint, including the `Accept` header and the `Coder-Session-Token` for authentication. The `{workspaceproxy}` path parameter should be replaced with the actual Proxy ID or name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_126\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceproxies/{workspaceproxy} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Retrieve Workspace Build Timings via API\nDESCRIPTION: This command retrieves detailed timing information for a specific workspace build from the Coder API. It uses a GET request with required headers for authentication and data format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/speed-up-templates.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET https://coder.example.com/api/v2/workspacebuilds/{workspacebuild}/timings \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Group Response\nDESCRIPTION: This JSON snippet provides an example response for a group retrieval request. It includes details such as avatar URL, display name, ID, members (with their properties), name, organization information, quota allowance, source, and total member count.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"string\",\n  \"display_name\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"members\": [\n    {\n      \"avatar_url\": \"http://example.com\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"email\": \"user@example.com\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n      \"login_type\": \"\",\n      \"name\": \"string\",\n      \"status\": \"active\",\n      \"theme_preference\": \"string\",\n      \"updated_at\": \"2019-08-24T14:15:22Z\",\n      \"username\": \"string\"\n    }\n  ],\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"quota_allowance\": 0,\n  \"source\": \"user\",\n  \"total_member_count\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Indicate Gateway Installation Directory (Windows)\nDESCRIPTION: Specifies the default installation directories of the JetBrains Gateway under Windows operating systems. This is needed when attempting to locate the `cacerts` file which is a Java trust store.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nC:\\Program Files (x86)\\<Gateway installation directory>\\jre\\lib\\security\\cacerts\\%USERPROFILE%\\AppData\\Local\\JetBrains\\Toolbox\\bin\\jre\\lib\\security\\cacerts # Path for Toolbox installation\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Container to Block File Transfers (Terraform)\nDESCRIPTION: This Terraform snippet configures a Docker container within a Coder workspace to block file transfers. It sets the `CODER_AGENT_BLOCK_FILE_TRANSFER` environment variable to `true`, which instructs the Coder agent to block applications like `scp`, `rsync`, `ftp`, and `nc` from transferring files. The `CODER_AGENT_TOKEN` is also included for proper agent authentication and operation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_24\n\nLANGUAGE: tf\nCODE:\n```\nresource \"docker_container\" \"workspace\" {\n  ...\n  env = [\n    \"CODER_AGENT_TOKEN=${coder_agent.main.token}\",\n    \"CODER_AGENT_BLOCK_FILE_TRANSFER=true\",\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Display CPU usage in cores\nDESCRIPTION: Displays CPU usage in cores using the `coder stat cpu` command. The command can be used with optional flags to control the output format and specify whether to force host CPU measurement.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/stat_cpu.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder stat cpu [flags]\n```\n\n----------------------------------------\n\nTITLE: Create OAuth2 Application Request Body JSON\nDESCRIPTION: This JSON snippet represents the request body required to create a new OAuth2 application using the `POST /oauth2-provider/apps` endpoint.  It includes the `callback_url`, `icon`, and `name` parameters. All fields are strings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"callback_url\": \"string\",\n  \"icon\": \"string\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Workspace Build API 200 Response\nDESCRIPTION: This JSON snippet shows the structure of a successful response (200 OK) when querying the Workspace Build API. It contains details such as build number, creation timestamps, associated job information (including status, errors, and metadata), resource allocations, and agent configurations. Understanding this structure is crucial for parsing and utilizing the API response effectively.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"build_number\": 0,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"daily_cost\": 0,\n  \"deadline\": \"2019-08-24T14:15:22Z\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n  \"initiator_name\": \"string\",\n  \"job\": {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  },\n  \"matched_provisioners\": {\n    \"available\": 0,\n    \"count\": 0,\n    \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n  },\n  \"max_deadline\": \"2019-08-24T14:15:22Z\",\n  \"reason\": \"initiator\",\n  \"resources\": [\n    {\n      \"agents\": [\n        {\n          \"api_version\": \"string\",\n          \"apps\": [\n            {\n              \"command\": \"string\",\n              \"display_name\": \"string\",\n              \"external\": true,\n              \"health\": \"disabled\",\n              \"healthcheck\": {\n                \"interval\": 0,\n                \"threshold\": 0,\n                \"url\": \"string\"\n              },\n              \"hidden\": true,\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"open_in\": \"slim-window\",\n              \"sharing_level\": \"owner\",\n              \"slug\": \"string\",\n              \"statuses\": [\n                {\n                  \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                  \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                  \"created_at\": \"2019-08-24T14:15:22Z\",\n                  \"icon\": \"string\",\n                  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                  \"message\": \"string\",\n                  \"needs_user_attention\": true,\n                  \"state\": \"working\",\n                  \"uri\": \"string\",\n                  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                }\n              ],\n              \"subdomain\": true,\n              \"subdomain_name\": \"string\",\n              \"url\": \"string\"\n            }\n          ],\n          \"architecture\": \"string\",\n          \"connection_timeout_seconds\": 0,\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"directory\": \"string\",\n          \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n          \"display_apps\": [\n            \"vscode\"\n          ],\n          \"environment_variables\": {\n            \"property1\": \"string\",\n            \"property2\": \"string\"\n          },\n          \"expanded_directory\": \"string\",\n          \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"health\": {\n            \"healthy\": false,\n            \"reason\": \"agent has lost connection\"\n          },\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"instance_id\": \"string\",\n          \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"latency\": {\n            \"property1\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            },\n            \"property2\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            }\n          },\n          \"lifecycle_state\": \"created\",\n          \"log_sources\": [\n            {\n              \"created_at\": \"2019-08-24T14:15:22Z\",\n              \"display_name\": \"string\",\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n            }\n          ],\n          \"logs_length\": 0,\n          \"logs_overflowed\": true,\n          \"name\": \"string\",\n          \"operating_system\": \"string\",\n          \"ready_at\": \"2019-08-24T14:15:22Z\",\n          \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n          \"scripts\": [\n            {\n              \"cron\": \"string\",\n              \"display_name\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"log_path\": \"string\",\n              \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n              \"run_on_start\": true,\n              \"run_on_stop\": true,\n              \"script\": \"string\",\n              \"start_blocks_login\": true,\n              \"timeout\": 0\n            }\n          ],\n          \"started_at\": \"2019-08-24T14:15:22Z\",\n          \"startup_script_behavior\": \"blocking\",\n          \"status\": \"connecting\",\n          \"subsystems\": [\n            \"envbox\"\n          ],\n          \"troubleshooting_url\": \"string\",\n          \"updated_at\": \"2019-08-24T14:15:22Z\",\n          \"version\": \"string\"\n        }\n      ],\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"daily_cost\": 0,\n      \"hide\": true,\n      \"icon\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n      \"metadata\": [\n        {\n          \"key\": \"string\",\n          \"sensitive\": true,\n          \"value\": \"string\"\n        }\n      ],\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"workspace_transition\": \"start\"\n    }\n  ],\n  \"status\": \"pending\",\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n  \"template_version_name\": \"string\",\n  \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n  \"transition\": \"start\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n  \"workspace_name\": \"string\",\n  \"workspace_owner_avatar_url\": \"string\",\n  \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n  \"workspace_owner_name\": \"string\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching data with axios - Typescript\nDESCRIPTION: This snippet shows an example of fetching data using axios in a TypeScript environment. The function `getAgentListeningPorts` takes an agentID as input and makes a GET request to the specified endpoint. It then returns a Promise that resolves to a `ListeningPortsResponse` type defined in `TypesGen`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nexport const getAgentListeningPorts = async (\n    agentID: string,\n): Promise<TypesGen.ListeningPortsResponse> => {\n    const response = await axiosInstance.get(\n        `/api/v2/workspaceagents/${agentID}/listening-ports`,\n    );\n    return response.data;\n};\n```\n\n----------------------------------------\n\nTITLE: Successful Workspace Proxy Creation Response\nDESCRIPTION: This JSON snippet shows the response body returned upon successful creation of a workspace proxy (HTTP 201). It provides comprehensive information about the newly created proxy, including its ID, status, and configuration details. The response also includes nested objects detailing health and reporting.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_125\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleted\": true,\n  \"derp_enabled\": true,\n  \"derp_only\": true,\n  \"display_name\": \"string\",\n  \"healthy\": true,\n  \"icon_url\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\",\n  \"path_app_url\": \"string\",\n  \"status\": {\n    \"checked_at\": \"2019-08-24T14:15:22Z\",\n    \"report\": {\n      \"errors\": [\n        \"string\"\n      ],\n      \"warnings\": [\n        \"string\"\n      ]\n    },\n    \"status\": \"ok\"\n  },\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"version\": \"string\",\n  \"wildcard_hostname\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Schema for Teams Notification Payload\nDESCRIPTION: This JSON schema is used to parse the notification payload received from Coder in a Microsoft Teams workflow. It defines the structure of the JSON object, including properties for the version, user email, actions, title, and body. This schema is used in the 'Parse JSON' action within the Teams workflow.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/teams.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"_version\": {\n            \"type\": \"string\"\n        },\n        \"payload\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"_version\": {\n                    \"type\": \"string\"\n                },\n                \"user_email\": {\n                    \"type\": \"string\"\n                },\n                \"actions\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"label\": {\n                                \"type\": \"string\"\n                            },\n                            \"url\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        \"required\": [\"label\", \"url\"]\n                    }\n                }\n            }\n        },\n        \"title_markdown\": {\n            \"type\": \"string\"\n        },\n        \"body_markdown\": {\n            \"type\": \"string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get File by ID with Curl\nDESCRIPTION: This code snippet shows how to retrieve a file by its ID using curl. The request is made to the /files/{fileID} endpoint using the GET method and requires a valid Coder Session Token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/files.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/files/{fileID} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI External Auth Description\nDESCRIPTION: This code snippet provides a description of the `coder external-auth` command. It explains that the command is used to authenticate with external services inside a workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/external-auth.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nAuthenticate with external services inside of a workspace.\n```\n\n----------------------------------------\n\nTITLE: Coder Provisioner Helm Values Configuration (YAML)\nDESCRIPTION: This YAML configuration file (`provisioner-values.yaml`) defines the settings for deploying Coder provisioner daemons using Helm. It specifies the Coder URL, replica count, and authentication using a provisioner key stored in a Kubernetes secret.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  env:\n    - name: CODER_URL\n      value: \"https://coder.example.com\"\n  replicaCount: 10\nprovisionerDaemon:\n  # NOTE: in older versions of the Helm chart (2.17.0 and below), it is required to set this to an empty string.\n  pskSecretName: \"\"\n  keySecretName: \"coder-provisioner-keys\"\n  keySecretKey: \"my-cool-key\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Provisioner Daemons in Coder Server - YAML\nDESCRIPTION: This snippet disables the internal provisioner daemons within the Coder Server.  It's recommended to run external provisioner daemons for scalability. This configuration is set in the Helm `values.yaml` file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/scale-coder.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nCODER_PROVISIONER_DAEMONS=0\n```\n\n----------------------------------------\n\nTITLE: Change Password with OTP via API - Shell\nDESCRIPTION: This shell script demonstrates how to change a user's password using a one-time passcode via the `/users/otp/change-password` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/otp/change-password \\\n  -H 'Content-Type: application/json'\n```\n\n----------------------------------------\n\nTITLE: Get Organizations: Curl Example\nDESCRIPTION: This example shows how to retrieve a list of organizations from the Coder server using a curl command. It includes the `Accept` header and `Coder-Session-Token` for authentication. The API endpoint is `/api/v2/organizations` with the GET method.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing JetBrains Gateway Backend - Shell\nDESCRIPTION: Downloads and installs the JetBrains Gateway backend using the client downloader.  Requires the client downloader binary to be available. Accepts parameters for product code and build number to specify the IDE backend to download and install. Uses `mkdir`, the client downloader, and `tar`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-pre-install.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/JetBrains\n./jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader --products-filter <product-code> --build-filter <build-number> --platforms-filter linux-x64 --download-backends ~/JetBrains\n```\n\n----------------------------------------\n\nTITLE: Enabling the Coder Apache site configuration\nDESCRIPTION: This command enables the newly created Apache site configuration file for Coder, making it active in Apache.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo a2ensite coder.conf\n```\n\n----------------------------------------\n\nTITLE: Checking External Authentication Token - Shell\nDESCRIPTION: This shell command checks if the user is authenticated with the external provider by attempting to retrieve the access token. A non-zero exit code indicates that the user is not authenticated.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/external-auth.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# If the exit code is non-zero, then the user is not authenticated with the\n# external provider.\ncoder external-auth access-token <external-auth-id>\n```\n\n----------------------------------------\n\nTITLE: Installing Coder Desktop using Homebrew on macOS\nDESCRIPTION: This command uses Homebrew to install Coder Desktop on macOS. Homebrew is a package manager for macOS that simplifies the installation of software.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/desktop/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install --cask coder/coder/coder-desktop\n```\n\n----------------------------------------\n\nTITLE: Role IdP Sync Mapping Body (JSON)\nDESCRIPTION: Defines the structure of the JSON body for updating Role IDP Sync Mapping. The body contains \"add\" and \"remove\" fields which are both arrays of objects. Each object in both arrays have properties named \"gets\" and \"given\" both of type string.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add\": [\n    {\n      \"gets\": \"string\",\n      \"given\": \"string\"\n    }\n  ],\n  \"remove\": [\n    {\n      \"gets\": \"string\",\n      \"given\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Updated Group IDP Sync Config Response\nDESCRIPTION: This JSON snippet shows the structure of a successful response after updating group IDP sync config, showcasing properties like auto_create_missing_groups, field, legacy_group_name_mapping, mapping, and regex_filter.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_create_missing_groups\": true,\n  \"field\": \"string\",\n  \"legacy_group_name_mapping\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"regex_filter\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Get Docker group ID\nDESCRIPTION: This script retrieves the group ID (GID) of the docker group. It is used for configuring the docker-compose.yaml file to ensure that Coder has the necessary permissions to interact with the Docker daemon.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/docker.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngetent group docker | cut -d: -f3\n```\n\n----------------------------------------\n\nTITLE: Coder values.yaml example configuration\nDESCRIPTION: This YAML configuration snippet demonstrates how to configure Coder via the values.yaml file when installing Coder through the Rancher UI. It sets the CODER_PG_CONNECTION_URL environment variable using the previously created secret and provides commented-out examples for setting the CODER_ACCESS_URL and TLS configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/rancher.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  # Environment variables for Coder\n  env:\n    - name: CODER_PG_CONNECTION_URL\n      valueFrom:\n        secretKeyRef:\n          name: coder-db-url\n          key: url\n\n    # For production, uncomment and set your access URL\n    # - name: CODER_ACCESS_URL\n    #   value: \"https://coder.example.com\"\n\n  # For TLS configuration (uncomment if needed)\n  #tls:\n  #  secretNames:\n  #    - my-tls-secret-name\n```\n\n----------------------------------------\n\nTITLE: Ordering Coder Agents\nDESCRIPTION: This snippet shows how to order Coder agents within the UI using the `order` property. Agents are sorted based on the `order` property and then by their `name`. The agent with the lower order is presented at the top in the workspace view.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-ordering.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"coder_agent\" \"primary\" {\n  ...\n\n  order = 1\n}\n\nresource \"coder_agent\" \"secondary\" {\n  ...\n\n  order = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Example Create User Response\nDESCRIPTION: This is an example JSON response returned after successfully creating a new user. It contains details of the newly created user, including `avatar_url`, `created_at`, `email`, `id`, `last_seen_at`, `login_type`, `name`, `organization_ids`, `roles`, `status`, `theme_preference`, `updated_at`, and `username`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"http://example.com\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"email\": \"user@example.com\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"status\": \"active\",\n  \"theme_preference\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing User Groups with Coder CLI\nDESCRIPTION: This command lists user groups using the Coder CLI. It demonstrates the basic usage of the `coder groups list` command. No specific dependencies are listed other than the Coder CLI being installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/groups_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder groups list [flags]\n```\n\n----------------------------------------\n\nTITLE: macOS System-Wide Settings Path (Console)\nDESCRIPTION: Shows the directory for system-wide settings on macOS for JetBrains RemoteDev. Configuration files placed here will affect all users on the system.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n# System-wide settings\n/Library/Application Support/JetBrains/RemoteDev/\n```\n\n----------------------------------------\n\nTITLE: Setting GitLab Self-Managed Environment Variables\nDESCRIPTION: This code snippet provides the start of the environment variables necessary to integrate Coder with a self-managed GitLab instance. The snippet includes the external auth ID and type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/external-auth.md#_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nCODER_EXTERNAL_AUTH_0_ID=\"primary-gitlab\"\nCODER_EXTERNAL_AUTH_0_TYPE=gitlab\n```\n\n----------------------------------------\n\nTITLE: Patch Logs Response Example\nDESCRIPTION: This JSON snippet shows an example of the response after patching logs, including detail, message and validations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Token Exchange Body Parameters\nDESCRIPTION: Defines the body parameters required for the `/oauth2/tokens` endpoint when exchanging OAuth2 tokens. Includes fields like `client_id`, `client_secret`, `code`, `refresh_token`, and the required `grant_type`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nclient_id: string\nclient_secret: string\ncode: string\nrefresh_token: string\ngrant_type: authorization_code\n```\n\n----------------------------------------\n\nTITLE: Generating Client Certificate with OpenSSL\nDESCRIPTION: This command generates a private key and a self-signed certificate using OpenSSL. The certificate is valid for 730 days and includes subject information such as the organization and location.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/azure-federation.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nopenssl req -subj '/CN=myclientcertificate/O=MyCompany, Inc./ST=CA/C=US' \\\n  -new -newkey rsa:4096 -sha256 -days 730 -nodes -x509 -keyout client.key -out client.crt\n```\n\n----------------------------------------\n\nTITLE: Installing Coder with install.sh\nDESCRIPTION: This snippet demonstrates how to install Coder using the provided install script.  It downloads and executes the script. It is intended for Linux and macOS.  Windows installation uses a separate installer.\nSOURCE: https://github.com/coder/coder/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Correct XState Service Definition\nDESCRIPTION: This code snippet demonstrates the correct way to define an XState service that fetches data. By wrapping `getUpdateCheck` in an anonymous function, the service is invoked only when it's needed during state transitions. This ensures that the data is fetched at the appropriate time.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { getUpdateCheck } from \"api/api\"\n\ncreateMachine({ ... }, {\n  services: {\n    getUpdateCheck: () => getUpdateCheck(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Pull Docker Container Image\nDESCRIPTION: This command is used to pull the specified Docker container image for Coder version 2.1.2 from the GitHub Container Registry. It downloads the image to your local machine, allowing you to run Coder in a containerized environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v2.1.2.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull ghcr.io/coder/coder:v2.1.2\n```\n\n----------------------------------------\n\nTITLE: Example Updated Organization IdP Sync Config Response\nDESCRIPTION: This JSON snippet shows an example response after successfully updating the organization IdP sync config using the /settings/idpsync/organization/config endpoint.  The response contains the complete organization sync settings, including updated configurations. The expected status code is 200 OK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_103\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": \"string\",\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"organization_assign_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Get Available IDP Sync Claim Fields using curl\nDESCRIPTION: This snippet shows how to get the available organization idp sync claim fields using a curl request. It requires an organization ID and a Coder session token. The API returns a JSON array containing available fields.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/available-fields \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example IDP Sync Claim Field Response\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response when retrieving IDP sync claim field values. The response is an array of strings, representing the claim field values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"string\"\n]\n```\n\n----------------------------------------\n\nTITLE: Display Disk Usage\nDESCRIPTION: Shows the basic usage of the `coder stat disk` command. This command, when executed, displays disk usage information.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/stat_disk.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder stat disk [flags]\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Application using curl\nDESCRIPTION: This code snippet demonstrates how to retrieve an existing OAuth2 application using a `curl` command. It sends a GET request to the `/oauth2-provider/apps/{app}` endpoint, where `{app}` should be replaced with the application ID. The request requires authentication via the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/oauth2-provider/apps/{app} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Requesting Regions with curl\nDESCRIPTION: This code snippet demonstrates how to retrieve workspace regions using a curl command. It sends a GET request to the `/api/v2/regions` endpoint, including headers for JSON acceptance and API key authentication. The coder-server address and API_KEY should be replaced with the actual values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaceproxies.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/regions \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Dump Database for Full Dump\nDESCRIPTION: This shell script dumps the contents of a PostgreSQL database to a SQL file which represents a full database dump. It includes data and inserts. It requires `pg_dump` to be installed and the connection string to be properly configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nmkdir -p coderd/database/migrations/testdata/full_dumps/v0.12.2 && cd $$\npg_dump \"postgres://coder@localhost:...\" -a --inserts >000069_dump_v0.12.2.up.sql\n```\n\n----------------------------------------\n\nTITLE: Executing release migrations script for patches after v2\nDESCRIPTION: This command executes the `releasemigrations` script to find all patch releases after v2.0.0 and list the associated migrations. The `--patches` and `--after-v2` flags are used. It assumes the `releasemigrations` script is located in the `scripts/releasemigrations/` directory and requires `go` to be installed.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/releasemigrations/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go run scripts/releasemigrations/main.go --patches --after-v2\n```\n\n----------------------------------------\n\nTITLE: Example YAML Variables File\nDESCRIPTION: This YAML snippet demonstrates a `values.yml` file for setting Terraform variable values. The file includes examples for string, numeric, and JSON-formatted string variables. This allows setting multiple variables in an organized way.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/variables.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nregion: us-east-1\nbucket_name: magic\nzone_types: '{\"us-east-1\":\"US East\", \"eu-west-1\": \"EU West\"}'\ncpu: 1\n```\n\n----------------------------------------\n\nTITLE: Get Organization by ID: Example Response\nDESCRIPTION: This is an example JSON response representing an organization retrieved by its ID. It includes fields such as `created_at`, `description`, `display_name`, `icon`, `id`, `is_default`, `name`, and `updated_at`. The HTTP status code for a successful retrieval is 200.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"is_default\": true,\n  \"name\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete OAuth2 Application Secret with curl\nDESCRIPTION: Deletes an OAuth2 application secret using a DELETE request. Requires the `app` ID and `secretID` as path parameters, along with a valid Coder session token for authentication. Returns a 204 No Content status upon successful deletion.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/oauth2-provider/apps/{app}/secrets/{secretID} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder Server Usage\nDESCRIPTION: Shows how to start the Coder server from the command line.  This is the entry point for the Coder application server. No dependencies beyond having the Coder binary.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Update Workspace Proxy Body\nDESCRIPTION: This is an example JSON body for updating a workspace proxy.  It includes fields such as `display_name`, `icon`, `id`, `name`, and `regenerate_token` that can be updated. The `id` field should match the ID of the workspace proxy to be updated.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_131\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\",\n  \"regenerate_token\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Coder Workspace Creation\nDESCRIPTION: This command displays the help documentation for the `coder exp scaletest create-workspaces` command. It provides information on available options and their usage for creating workspaces.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/infrastructure/scale-utility.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoder exp scaletest create-workspaces --help\n```\n\n----------------------------------------\n\nTITLE: Create Docker Volume for Persistent Home Directory\nDESCRIPTION: Creates a Docker volume resource for the workspace's home directory, ensuring it persists after the workspace is stopped. It uses the lifecycle block to prevent accidental deletions and an immutable parameter to prevent destruction on workspace name changes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_6\n\nLANGUAGE: tf\nCODE:\n```\nresource \"docker_volume\" \"home_volume\" {\n  name = \"coder-${data.coder_workspace.me.id}-home\"\n  # Protect the volume from being deleted due to changes in attributes.\n  lifecycle {\n    ignore_changes = all\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Coder and Refreshing Systemd Service\nDESCRIPTION: These commands update Coder and refresh the systemd service. This prevents the systemd daemon from referencing the previous Coder release service after the unit file has been changed. Requires root privileges.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL https://coder.com/install.sh | sh\nsudo systemctl daemon-reload\nsudo systemctl restart coder.service\n```\n\n----------------------------------------\n\nTITLE: Install VS Code Extension via Command Line\nDESCRIPTION: This command line instruction shows how to install a VS Code extension using `code-server`. It expects the extension `.vsix` file to be present at the specified path.  This should be executed within the workspace's terminal or `code-server` terminal.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n/path/to/code-server --install-extension /vsix/GitHub.copilot.vsix\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Contexts\nDESCRIPTION: This command lists the available Kubernetes contexts in your kubeconfig file.  It's used to verify the available cluster configurations before configuring Coder. No dependencies are required other than kubectl being installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/multiple-kube-clusters.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl config get-contexts\n\nCURRENT   NAME                        CLUSTER\n          workspaces-europe-west2-c   workspaces-europe-west2-c\n*         workspaces-us-central1-a    workspaces-us-central1-a\n```\n\n----------------------------------------\n\nTITLE: Outputting PostgreSQL Connection URL\nDESCRIPTION: This command retrieves and displays the PostgreSQL connection URL when using the built-in PostgreSQL deployment. The output can be used with `psql` to access the database.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/setup/index.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ coder server postgres-builtin-url\npsql \"postgres://coder@localhost:49627/coder?sslmode=disable&password=feU...yI1\"\n```\n\n----------------------------------------\n\nTITLE: Removing Coder settings/cache - Linux\nDESCRIPTION: This command removes the Coder settings and cache directories in the user's home directory on Linux systems.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.config/coderv2\n```\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf ~/.cache/coder\n```\n\n----------------------------------------\n\nTITLE: Workspace Response Schema Example\nDESCRIPTION: This JSON snippet provides an example of the response received when querying a workspace in the Coder platform. It includes various details like IDs, health status, latest build information, resource allocation, agent configurations, and template details. It shows the structure of the Workspace object returned by the API.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow_renames\": true,\n  \"automatic_updates\": \"always\",\n  \"autostart_schedule\": \"string\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleting_at\": \"2019-08-24T14:15:22Z\",\n  \"dormant_at\": \"2019-08-24T14:15:22Z\",\n  \"favorite\": true,\n  \"health\": {\n    \"failing_agents\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"healthy\": false\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_used_at\": \"2019-08-24T14:15:22Z\",\n  \"latest_app_status\": {\n    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"message\": \"string\",\n    \"needs_user_attention\": true,\n    \"state\": \"working\",\n    \"uri\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n  },\n  \"latest_build\": {\n    \"build_number\": 0,\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"deadline\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n    \"initiator_name\": \"string\",\n    \"job\": {\n      \"available_workers\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"canceled_at\": \"2019-08-24T14:15:22Z\",\n      \"completed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"error\": \"string\",\n      \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n      \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"input\": {\n        \"error\": \"string\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n      },\n      \"metadata\": {\n        \"template_display_name\": \"string\",\n        \"template_icon\": \"string\",\n        \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n        \"template_name\": \"string\",\n        \"template_version_name\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"queue_position\": 0,\n      \"queue_size\": 0,\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"pending\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"type\": \"template_version_import\",\n      \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n    },\n    \"matched_provisioners\": {\n      \"available\": 0,\n      \"count\": 0,\n      \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n    },\n    \"max_deadline\": \"2019-08-24T14:15:22Z\",\n    \"reason\": \"initiator\",\n    \"resources\": [\n      {\n        \"agents\": [\n          {\n            \"api_version\": \"string\",\n            \"apps\": [\n              {\n                \"command\": \"string\",\n                \"display_name\": \"string\",\n                \"external\": true,\n                \"health\": \"disabled\",\n                \"healthcheck\": {\n                  \"interval\": 0,\n                  \"threshold\": 0,\n                  \"url\": \"string\"\n                },\n                \"hidden\": true,\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"open_in\": \"slim-window\",\n                \"sharing_level\": \"owner\",\n                \"slug\": \"string\",\n                \"statuses\": [\n                  {\n                    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                    \"created_at\": \"2019-08-24T14:15:22Z\",\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"message\": \"string\",\n                    \"needs_user_attention\": true,\n                    \"state\": \"working\",\n                    \"uri\": \"string\",\n                    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                  }\n                ],\n                \"subdomain\": true,\n                \"subdomain_name\": \"string\",\n                \"url\": \"string\"\n              }\n            ],\n            \"architecture\": \"string\",\n            \"connection_timeout_seconds\": 0,\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"directory\": \"string\",\n            \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n            \"display_apps\": [\n              \"vscode\"\n            ],\n            \"environment_variables\": {\n              \"property1\": \"string\",\n              \"property2\": \"string\"\n            },\n            \"expanded_directory\": \"string\",\n            \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"health\": {\n              \"healthy\": false,\n              \"reason\": \"agent has lost connection\"\n            },\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"instance_id\": \"string\",\n            \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"latency\": {\n              \"property1\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              },\n              \"property2\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              }\n            },\n            \"lifecycle_state\": \"created\",\n            \"log_sources\": [\n              {\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"display_name\": \"string\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n              }\n            ],\n            \"logs_length\": 0,\n            \"logs_overflowed\": true,\n            \"name\": \"string\",\n            \"operating_system\": \"string\",\n            \"ready_at\": \"2019-08-24T14:15:22Z\",\n            \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n            \"scripts\": [\n              {\n                \"cron\": \"string\",\n                \"display_name\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"log_path\": \"string\",\n                \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n                \"run_on_start\": true,\n                \"run_on_stop\": true,\n                \"script\": \"string\",\n                \"start_blocks_login\": true,\n                \"timeout\": 0\n              }\n            ],\n            \"started_at\": \"2019-08-24T14:15:22Z\",\n            \"startup_script_behavior\": \"blocking\",\n            \"status\": \"connecting\",\n            \"subsystems\": [\n              \"envbox\"\n            ],\n            \"troubleshooting_url\": \"string\",\n            \"updated_at\": \"2019-08-24T14:15:22Z\",\n            \"version\": \"string\"\n          }\n        ],\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"daily_cost\": 0,\n        \"hide\": true,\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n        \"metadata\": [\n          {\n            \"key\": \"string\",\n            \"sensitive\": true,\n            \"value\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"workspace_transition\": \"start\"\n      }\n    ],\n    \"status\": \"pending\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"template_version_name\": \"string\",\n    \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n    \"transition\": \"start\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\",\n    \"workspace_owner_avatar_url\": \"string\",\n    \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n    \"workspace_owner_name\": \"string\"\n  },\n  \"name\": \"string\",\n  \"next_start_at\": \"2019-08-24T14:15:22Z\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"outdated\": true,\n  \"owner_avatar_url\": \"string\",\n  \"owner_id\": \"8826ee2e-7933-4665-aef2-2393f84a0d05\",\n  \"owner_name\": \"string\",\n  \"template_active_version_id\": \"b0da9c29-67d8-4c87-888c-bafe356f7f3c\",\n  \"template_allow_user_cancel_workspace_jobs\": true,\n  \"template_display_name\": \"string\",\n  \"template_icon\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"template_name\": \"string\",\n  \"template_require_active_version\": true,\n  \"ttl_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cloudflare API Token INI File\nDESCRIPTION: This snippet shows the expected content for the Cloudflare API token file used by Certbot. Replace `YOUR_API_TOKEN` with the actual API token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\ndns_cloudflare_api_token = YOUR_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Request OAuth2 Authorization with curl\nDESCRIPTION: Requests OAuth2 authorization using a POST request to the `/oauth2/authorize` endpoint. Requires parameters like `client_id`, `state`, and `response_type`. Returns a 302 Found status, redirecting the user after authorization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/oauth2/authorize?client_id=string&state=string&response_type=code \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Display Memory Usage Statistics\nDESCRIPTION: This command displays memory usage statistics. It supports flags to force host memory measurement (--host), specify the SI prefix for memory measurement (--prefix), and control the output format (--output). The default output format is text, and the default prefix is Gi (gigabytes).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/stat_mem.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder stat mem [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for GCP Identity Token\nDESCRIPTION: Creates a Kubernetes secret to store the Google Cloud service account identity token.  The secret is named `gcp-identity-token` and resides in the `coder` namespace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/gcp-to-aws.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic gcp-identity-token -n coder --from-literal=token=<enter-token-here>\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Features Usage\nDESCRIPTION: This code snippet shows the basic usage of the 'coder features' command in the Coder CLI. It's used to list Enterprise features.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/features.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder features\n```\n\n----------------------------------------\n\nTITLE: List Files for Version\nDESCRIPTION: This git command lists the database migrations files associated with the specified version of the codebase.\nSOURCE: https://github.com/coder/coder/blob/main/docs/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngit ls-files v0.12.2 -- coderd/database/migrations/*.up.sql\n```\n\n----------------------------------------\n\nTITLE: Set OIDC Group Mapping as a Flag\nDESCRIPTION: This flag configures a mapping between OIDC group IDs and Coder group names. It serves the same purpose as the environment variable `CODER_OIDC_GROUP_MAPPING` but is passed as a command-line argument.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n--oidc-group-mapping '{\"myOIDCGroupID\": \"myCoderGroupName\"}'\n```\n\n----------------------------------------\n\nTITLE: Listing Provisioner Key Daemons Response (JSON)\nDESCRIPTION: This JSON snippet is an example response of the API endpoint for listing provisioner key daemons. It contains details of each daemon, including its API version, creation timestamp, current and previous jobs, ID, key ID, key name, last seen timestamp, name, organization ID, provisioners, status, tags, and version. It also contains details of the key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"daemons\": [\n      {\n        \"api_version\": \"string\",\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"current_job\": {\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"status\": \"pending\",\n          \"template_display_name\": \"string\",\n          \"template_icon\": \"string\",\n          \"template_name\": \"string\"\n        },\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"key_id\": \"1e779c8a-6786-4c89-b7c3-a6666f5fd6b5\",\n        \"key_name\": \"string\",\n        \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n        \"name\": \"string\",\n        \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n        \"previous_job\": {\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"status\": \"pending\",\n          \"template_display_name\": \"string\",\n          \"template_icon\": \"string\",\n          \"template_name\": \"string\"\n        },\n        \"provisioners\": [\n          \"string\"\n        ],\n        \"status\": \"offline\",\n        \"tags\": {\n          \"property1\": \"string\",\n          \"property2\": \"string\"\n        },\n        \"version\": \"string\"\n      }\n    ],\n    \"key\": {\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"name\": \"string\",\n      \"organization\": \"452c1a86-a0af-475b-b03f-724878b0f387\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Create a Kubernetes Namespace for Coder\nDESCRIPTION: This command creates a dedicated namespace named 'coder' in your Kubernetes cluster. This namespace will house all the Coder-related resources, providing isolation and organization.  It is a necessary first step before deploying Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/rancher.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace coder\n```\n\n----------------------------------------\n\nTITLE: Example Updated Group IDP Sync Mapping Response\nDESCRIPTION: This JSON snippet illustrates the structure of the response after successfully updating the Group IDP Sync mapping.  It includes settings for groups.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_create_missing_groups\": true,\n  \"field\": \"string\",\n  \"legacy_group_name_mapping\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"regex_filter\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Workspace Connection with ping on Windows\nDESCRIPTION: This command uses `ping` to verify the connection to a Coder workspace from Windows.  Replace `your-workspace.coder` with the actual hostname of your workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/desktop/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nping -n 5 your-workspace.coder\n```\n\n----------------------------------------\n\nTITLE: Organizations Members Usage (Coder CLI)\nDESCRIPTION: This code snippet shows the basic usage of the `coder organizations members` command in the Coder CLI. It serves as the entry point for managing organization members through various subcommands.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_members.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations members\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Verbose Logging\nDESCRIPTION: This snippet provides instructions for enabling verbose logging in Docker by modifying the `daemon.json` file. This involves copying the original file, adding debug settings, and restarting the Docker service. This increased logging helps in troubleshooting container issues by providing more detailed information in the journald logs.\nSOURCE: https://github.com/coder/coder/blob/main/dogfood/coder/guide.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp /etc/docker/daemon.json /etc/docker/daemon.json.orig\nsudo cat > /etc/docker/daemon.json << EOF\n{\n        \"debug\": true,\n        \"log-driver\": \"journald\"\n}\nEOF\nsudo systemctl restart docker\n# You should now see container logs in journald.\n# Try starting a workspace again and see what the actual error is!\nsudo journalctl -u docker -f\n```\n\n----------------------------------------\n\nTITLE: Running Playwright E2E Tests (pnpm)\nDESCRIPTION: This snippet demonstrates how to run the Playwright end-to-end tests using pnpm. The `pnpm playwright:test` command executes all the tests defined in the project.  To run a specific test, use `pnpm playwright:test -g '<your test here>'`, where `-g` (grep) accepts a regex to filter the tests.\nSOURCE: https://github.com/coder/coder/blob/main/site/e2e/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Run E2E tests. You can see the configuration of the server\n# in `playwright.config.ts`. This uses `go run -tags embed ...`.\npnpm playwright:test\n# Run a specific test (`-g` stands for grep. It accepts regex).\npnpm playwright:test -g '<your test here>'\n```\n\n----------------------------------------\n\nTITLE: Get OAuth2 Application Response Example JSON\nDESCRIPTION: This JSON snippet shows an example response after successfully retrieving an OAuth2 application using the `GET /oauth2-provider/apps/{app}` endpoint. It includes the application's `callback_url`, `endpoints`, `icon`, `id`, and `name`. The `endpoints` contain authorization, device_authorization, and token URLs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"callback_url\": \"string\",\n  \"endpoints\": {\n    \"authorization\": \"string\",\n    \"device_authorization\": \"string\",\n    \"token\": \"string\"\n  },\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Agent API Response Example\nDESCRIPTION: This JSON snippet showcases a successful (200) response from an Agent API. It includes detailed information about agents, their associated apps, statuses, health information, environment variables, log sources, and scripts. This example is used to understand the structure of the API response and the data that can be retrieved.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_56\n\nLANGUAGE: JSON\nCODE:\n```\n[ { \"agents\": [ { \"api_version\": \"string\", \"apps\": [ { \"command\": \"string\", \"display_name\": \"string\", \"external\": true, \"health\": \"disabled\", \"healthcheck\": { \"interval\": 0, \"threshold\": 0, \"url\": \"string\" }, \"hidden\": true, \"icon\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"open_in\": \"slim-window\", \"sharing_level\": \"owner\", \"slug\": \"string\", \"statuses\": [ { \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\", \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\", \"created_at\": \"2019-08-24T14:15:22Z\", \"icon\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"message\": \"string\", \"needs_user_attention\": true, \"state\": \"working\", \"uri\": \"string\", \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\" } ], \"subdomain\": true, \"subdomain_name\": \"string\", \"url\": \"string\" } ], \"architecture\": \"string\", \"connection_timeout_seconds\": 0, \"created_at\": \"2019-08-24T14:15:22Z\", \"directory\": \"string\", \"disconnected_at\": \"2019-08-24T14:15:22Z\", \"display_apps\": [ \"vscode\" ], \"environment_variables\": { \"property1\": \"string\", \"property2\": \"string\" }, \"expanded_directory\": \"string\", \"first_connected_at\": \"2019-08-24T14:15:22Z\", \"health\": { \"healthy\": false, \"reason\": \"agent has lost connection\" }, \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"instance_id\": \"string\", \"last_connected_at\": \"2019-08-24T14:15:22Z\", \"latency\": { \"property1\": { \"latency_ms\": 0, \"preferred\": true }, \"property2\": { \"latency_ms\": 0, \"preferred\": true } }, \"lifecycle_state\": \"created\", \"log_sources\": [ { \"created_at\": \"2019-08-24T14:15:22Z\", \"display_name\": \"string\", \"icon\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\" } ], \"logs_length\": 0, \"logs_overflowed\": true, \"name\": \"string\", \"operating_system\": \"string\", \"ready_at\": \"2019-08-24T14:15:22Z\", \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\", \"scripts\": [ { \"cron\": \"string\", \"display_name\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"log_path\": \"string\", \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\", \"run_on_start\": true, \"run_on_stop\": true, \"script\": \"string\", \"start_blocks_login\": true, \"timeout\": 0 } ], \"started_at\": \"2019-08-24T14:15:22Z\", \"startup_script_behavior\": \"blocking\", \"status\": \"connecting\", \"subsystems\": [ \"envbox\" ], \"troubleshooting_url\": \"string\", \"updated_at\": \"2019-08-24T14:15:22Z\", \"version\": \"string\" } ], \"created_at\": \"2019-08-24T14:15:22Z\", \"daily_cost\": 0, \"hide\": true, \"icon\": \"string\", \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\", \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\", \"metadata\": [ { \"key\": \"string\", \"sensitive\": true, \"value\": \"string\" } ], \"name\": \"string\", \"type\": \"string\", \"workspace_transition\": \"start\" } ]\n```\n\n----------------------------------------\n\nTITLE: Create API token for user via CLI\nDESCRIPTION: This command creates an API token for a specified user using the Coder CLI. The `--user` parameter specifies the username for whom the token is created. This requires the user to have the Owner role. Assumes the Coder CLI is already installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/sessions-tokens.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncoder tokens create my-token --user <username>\n```\n\n----------------------------------------\n\nTITLE: Example PostgreSQL error message\nDESCRIPTION: This code snippet shows an error message that may be encountered when running `make bin`.  It indicates a version mismatch between the `pg_dump` client and the PostgreSQL server.  The error occurs because the `pg_dump` client is an older version than the PostgreSQL server that is being used.\nSOURCE: https://github.com/coder/coder/blob/main/dogfood/coder/guide.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\npg_dump: server version: 13.7 (Debian 13.7-1.pgdg110+1); pg_dump version: 11.16 (Ubuntu 11.16-1.pgdg20.04+1)\npg_dump: aborting because of server version mismatch\n```\n\n----------------------------------------\n\nTITLE: List Coder templates\nDESCRIPTION: This command lists the available templates in your Coder deployment using the Coder CLI. It requires that you have the Coder CLI installed and configured to connect to your Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncoder templates list\n```\n\n----------------------------------------\n\nTITLE: Initializing a Coder Template with Kubernetes and Podman\nDESCRIPTION: These commands initialize a Coder template using the `kubernetes-with-podman` example.  This creates a new template that includes configurations for running Podman inside Kubernetes.  It requires the Coder CLI to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/docker-in-workspaces.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho \"kubernetes-with-podman\" | coder templates init\ncd ./kubernetes-with-podman\ncoder templates create\n```\n\n----------------------------------------\n\nTITLE: Running Nomad Job\nDESCRIPTION: This shell command runs the Nomad job defined in the `hostpath.nomad` file, deploying the CSI Host Volume plugin to the Nomad cluster.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/nomad-docker/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnomad job run hostpath.nomad\n```\n\n----------------------------------------\n\nTITLE: Activate User via Coder CLI\nDESCRIPTION: This command activates a suspended user in Coder, restoring their access to the platform. It requires either the username or user ID as an argument.  The user is prompted to confirm the action.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/index.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder users activate <username|user_id>\n```\n\n----------------------------------------\n\nTITLE: Developing in Nix Environment for E2E Tests\nDESCRIPTION: This snippet explains how to set up a development environment using Nix for end-to-end testing. It involves entering the Nix development environment, installing dependencies with pnpm, building the project, and running the Playwright tests.\nSOURCE: https://github.com/coder/coder/blob/main/site/e2e/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Optionally add '--command zsh' to choose your shell.\nnix develop\ncd site\npnpm install\npnpm build\npnpm playwright:test\n```\n\n----------------------------------------\n\nTITLE: Upgrading Coder Deployment with Helm\nDESCRIPTION: This command upgrades the Coder deployment using Helm. It specifies the chart location, namespace, and a values file for custom configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/azure-federation.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nhelm upgrade coder coder-v2/coder -n coder -f values.yaml\n```\n\n----------------------------------------\n\nTITLE: Extending workspace deadline using Coder REST API\nDESCRIPTION: This script demonstrates how to keep a workspace active by extending its deadline using the Coder REST API. It sends a PUT request to the /extend endpoint with a new deadline. The script checks if a specific process is running and extends the deadline only if it is.  It requires the WORKSPACE_ID and CODER_AGENT_TOKEN environment variables to be set.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n# Send workspace activity as long as the job is still running\n\nwhile true\ndo\n  if pgrep -f \"my_training_script.py\" > /dev/null\n  then\n    curl -X PUT \"https://coder.example.com/api/v2/workspaces/$WORKSPACE_ID/extend\" \\\n    -H \"Coder-Session-Token: $CODER_AGENT_TOKEN\" \\\n    -d '{\n      \"deadline\": \"2019-08-24T14:15:22Z\"\n    }'\n\n    # Sleep for 30 minutes (1800 seconds) if the job is running\n    sleep 1800\n  else\n    # Sleep for 1 minute (60 seconds) if the job is not running\n    sleep 60\n  fi\ndone\n```\n\n----------------------------------------\n\nTITLE: Re-entering Template Variables - Shell\nDESCRIPTION: This command updates a workspace and prompts for template input variables, which can be helpful if a workspace fails to build due to a state out of sync.  It's executed from the command line using the Coder CLI. The user needs to have the Coder CLI installed and configured. <your workspace name> must be replaced with the actual workspace name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-management.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder update <your workspace name> --always-prompt\n```\n\n----------------------------------------\n\nTITLE: Configure ADFS Auth URL Parameters in JSON\nDESCRIPTION: This code snippet configures the CODER_OIDC_AUTH_URL_PARAMS environment variable to include the resource parameter, which is essential for ADFS to return the requested claims. The $CLIENT_ID placeholder should be replaced with the actual Client ID from the ADFS application group configuration. The `resource` parameter specifies the client ID that the claims are intended for.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\"resource\":\"$CLIENT_ID\"}\n```\n\n----------------------------------------\n\nTITLE: Update User Notification Preferences - cURL\nDESCRIPTION: This cURL command updates user notification preferences via the Coder API. It requires an API key for authentication via the `Coder-Session-Token` header and the `Content-Type` header set to `application/json`. The `user` parameter must be specified in the URL path. The request body must contain the preferences to update.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/notifications/preferences \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Group IDP Sync Settings\nDESCRIPTION: This code snippet shows how to retrieve group IDP sync settings for an organization using a GET request. It requires the organization ID as a parameter and includes the necessary headers for authentication and content type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_58\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/groups \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Authenticated\nDESCRIPTION: Example output after successful authentication with Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n> Welcome to Coder, marc! You're authenticated.\n$\n```\n\n----------------------------------------\n\nTITLE: Generating Provisioner Tag Matching Table (Go)\nDESCRIPTION: This command runs a Go test within the Coder repository to generate a table illustrating how provisioner and job tags are matched.  The output is intended to be copied and pasted into the documentation. It runs the `TestAcquirer_MatchTags/GenTable` test in the `coderd/provisionerdserver` package.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ngo test -v -count=1 ./coderd/provisionerdserver/ -test.run='^TestAcquirer_MatchTags/GenTable$'\n```\n\n----------------------------------------\n\nTITLE: Updating a Workspace via CLI - Shell\nDESCRIPTION: This command updates an existing workspace to the latest version of its template. It's executed from the command line using the Coder CLI.  The user needs to have the Coder CLI installed and configured.  <workspace-name> must be replaced with the actual workspace name.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-management.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoder update <workspace-name>\n```\n\n----------------------------------------\n\nTITLE: Querying Deployment Stats using curl\nDESCRIPTION: This snippet provides an example of a curl request used to obtain deployment statistics. Authentication is required via the Coder-Session-Token header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/deployment/stats \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: CORS Error Message\nDESCRIPTION: This is an example CORS error message. This indicates that a cross-origin request was blocked due to missing 'Access-Control-Allow-Origin' header on the requested resource.  Setting the request's mode to 'no-cors' will disable CORS.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nAccess to fetch at\n'<https://coder.example.com/api/v2/applications/auth-redirect>' from origin\n'<https://8000--dev--user--apps.coder.example.com>' has been blocked by CORS\npolicy: No 'Access-Control-Allow-Origin' header is present on the requested\nresource. If an opaque response serves your needs, set the request's mode to\n'no-cors' to fetch the resource with CORS disabled.\n```\n\n----------------------------------------\n\nTITLE: Tailnet Info Retrieval with Curl\nDESCRIPTION: This shell snippet demonstrates how to use curl to make a GET request to the `/debug/tailnet` endpoint. It includes setting the `Coder-Session-Token` header for authentication. The example shows how to retrieve debugging information about the tailnet using the command line.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/debug.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/debug/tailnet \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Setting SSH Options with config-ssh\nDESCRIPTION: This example demonstrates setting SSH options using the `-o` or `--ssh-option` flag with the `coder config-ssh` command.  It sets the `ForwardAgent=yes` option, enabling SSH agent forwarding for all workspaces.  No dependencies are directly listed, but SSH must be properly configured on the client machine.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/config-ssh.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder config-ssh -o ForwardAgent=yes\n```\n\n----------------------------------------\n\nTITLE: Get Provisioner Jobs - cURL Example\nDESCRIPTION: This is a cURL example to retrieve provisioner jobs for a given organization. It requires the organization ID and a Coder-Session-Token (API_KEY) for authentication. It specifies the Accept header for JSON format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/provisionerjobs \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Workspace Agent Token Scope Example\nDESCRIPTION: This JavaScript snippet defines the structure of a scope for a workspace agent token.  It includes the scope's name, display name, and an allow_list containing the specific resource ID of the workspace the agent is associated with. The site, org, and user fields define the permissions associated with this scope at different levels.\nSOURCE: https://github.com/coder/coder/blob/main/coderd/rbac/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    \"scope\": {\n      \"name\": \"workspace_agent\",\n      \"display_name\": \"Workspace_Agent\",\n      // The ID of the given workspace the agent token correlates to.\n      \"allow_list\": [\"10d03e62-7703-4df5-a358-4f76577d4e2f\"],\n      \"site\": [/* ... perms ... */],\n      \"org\": {/* ... perms ... */},\n      \"user\": [/* ... perms ... */]\n    }\n```\n\n----------------------------------------\n\nTITLE: Viewing Process Logs\nDESCRIPTION: This command uses `kubectl` to print the logs from the `exectrace` container of a specified pod.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs pod-name --container exectrace\n```\n\n----------------------------------------\n\nTITLE: Open Dynamic Parameters WebSocket with curl\nDESCRIPTION: This curl command initiates a GET request to the `/users/{user}/templateversions/{templateversion}/parameters` endpoint, attempting to establish a WebSocket connection for dynamic parameters. It requires both `user` and `templateversion` UUIDs, along with a 'Coder-Session-Token' header for authentication. A successful upgrade returns status 101 Switching Protocols.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_73\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/templateversions/{templateversion}/parameters \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder Agent for RStudio (Startup Script)\nDESCRIPTION: This Terraform resource configures a Coder agent to run RStudio. The startup script starts the RStudio server in daemon mode with authentication disabled. The directory is set to /home/coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_11\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_agent\" \"coder\" {\n  os             = \"linux\"\n  arch           = \"amd64\"\n  dir            = \"/home/coder\"\n  startup_script = <<EOT\n#!/bin/bash\n# start rstudio\n/usr/lib/rstudio-server/bin/rserver --server-daemonize=1 --auth-none=1 &\nEOT\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Code-Server Installation in Startup Script\nDESCRIPTION: This shell script conditionally installs and starts code-server based on the value of the `coder_parameter.code_server`. If the parameter is `true`, code-server will be downloaded, installed, and started on port 13337.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\n# install and start code-server, VS Code in a browser\n\nif [ ${data.coder_parameter.code_server.value} = true ]; then\necho \"🧑🏼‍💻 Downloading and installing the latest code-server IDE...\"\ncurl -fsSL https://code-server.dev/install.sh | sh\ncode-server --auth none --port 13337 >/dev/null 2>&1 &\nfi\n```\n\n----------------------------------------\n\nTITLE: Debug Link to View OIDC Claims\nDESCRIPTION: This endpoint allows you to view the OIDC claims sent by your provider after logging in. It requires an Owner account and provides insights into available claims like `id_token_claims` and `user_info_claims` which contain the user's OIDC groups.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://[coder.example.com]/api/v2/debug/[your-username]/debug-link\n```\n\n----------------------------------------\n\nTITLE: Getting Workspace Build Logs with Curl\nDESCRIPTION: This code snippet demonstrates how to retrieve workspace build logs using a curl command. It includes the endpoint URL, request headers for accepting JSON responses, and an API key for authentication. The workspacebuild path parameter needs to be replaced with the actual workspace build ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild}/logs \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pinging Coder Workspace Agent\nDESCRIPTION: This command pings the workspace agent and prints diagnostics about the connection state, helping identify potential issues with direct connections. The `-v` flag provides verbose debugging logs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/troubleshooting.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ coder ping dev\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Browsers (pnpm)\nDESCRIPTION: This snippet shows how to install the necessary browsers for Playwright end-to-end tests using pnpm. The `pnpm playwright:install` command installs the browsers to `~/.cache/ms-playwright`. This command is a prerequisite to running the tests.\nSOURCE: https://github.com/coder/coder/blob/main/site/e2e/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Install the browsers to `~/.cache/ms-playwright`.\npnpm playwright:install\n```\n\n----------------------------------------\n\nTITLE: Import Certificate to Java Trust Store (Windows)\nDESCRIPTION: Imports a given certificate to the Java trust store of a JetBrains Gateway installation in Windows. This is used to establish a secure connection to Coder deployments utilizing internally signed certificates. It requires the `keytool` utility which comes with the JetBrains Gateway installation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n& 'C:\\Program Files\\JetBrains\\JetBrains Gateway <version>/jbr/bin/keytool.exe' 'C:\\Program Files\\JetBrains\\JetBrains Gateway <version>/jre/lib/security/cacerts' -import -alias coder -file <cert>\n\n# command for Toolbox installation\n& '%USERPROFILE%\\AppData\\Local\\JetBrains\\Toolbox\\apps\\Gateway\\ch-0\\<VERSION>\\jbr\\bin/keytool.exe' '%USERPROFILE%\\AppData\\Local\\JetBrains\\Toolbox\\bin\\jre\\lib\\security\\cacerts' -import -alias coder -file <cert>\n```\n\n----------------------------------------\n\nTITLE: Docker Container Memory Query Error - Console\nDESCRIPTION: This snippet shows the error message displayed when querying `ContainerMemory` and encountering the error.  It is triggered when the cgroup memory controller is not enabled. This is especially relevant in Raspberry Pi OS.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nopen /sys/fs/cgroup/memory.max: no such file or directory\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode (pnpm)\nDESCRIPTION: This snippet demonstrates how to run the Playwright tests in UI mode for debugging purposes. The `pnpm playwright:test-ui` command launches the Playwright UI, which provides a graphical interface for inspecting and debugging tests.\nSOURCE: https://github.com/coder/coder/blob/main/site/e2e/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm playwright:test-ui\n```\n\n----------------------------------------\n\nTITLE: Example Response for User Quiet Hours\nDESCRIPTION: This JSON snippet shows the structure of the response received when querying a user's quiet hours. It contains information about the next quiet hour, the raw schedule, time, timezone, and user settings related to quiet hours.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_115\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"next\": \"2019-08-24T14:15:22Z\",\n    \"raw_schedule\": \"string\",\n    \"time\": \"string\",\n    \"timezone\": \"string\",\n    \"user_can_set\": true,\n    \"user_set\": true\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for JFrog Token (Bash)\nDESCRIPTION: This command creates a Kubernetes secret named `jfrog-token` using `kubectl create secret generic`.  This secret stores the JFrog user and access token, allowing the integration to authenticate with the JFrog platform. Replace `<user>` and `<token>` with the JFrog username and token values, respectively.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/jfrog-xray.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create secret generic jfrog-token \\\n  --from-literal=user='<user>' \\\n  --from-literal=token='<token>'\n```\n\n----------------------------------------\n\nTITLE: Serving Provisioner Daemon Request using Curl\nDESCRIPTION: This curl command initiates the serving of a provisioner daemon for a specific organization. The organization ID is included in the URL path, and authentication is done using the 'Coder-Session-Token' header. This endpoint typically uses the Switching Protocols (101) status code.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/provisionerdaemons/serve \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder Notifications Usage\nDESCRIPTION: This command shows the basic usage for interacting with Coder notifications through the command-line interface. It serves as the entry point for notification management operations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/notifications.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder notifications\n```\n\n----------------------------------------\n\nTITLE: Example Updated Organization IdP Sync Mapping Response\nDESCRIPTION: This JSON snippet shows an example response after successfully updating the organization IdP sync mapping using the /settings/idpsync/organization/mapping endpoint. The response contains the complete organization sync settings, reflecting updated mappings. The expected status code is 200 OK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_106\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": \"string\",\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"organization_assign_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cloudflare API Token Configuration\nDESCRIPTION: This snippet creates a file containing the Cloudflare API token for Certbot to use.  It assumes the user will replace `YOUR_API_TOKEN` with their actual API token. The file needs to be created and edited using `nano` after the `mkdir` and `touch` commands.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.secrets/certbot\ntouch ~/.secrets/certbot/cloudflare.ini\nnano ~/.secrets/certbot/cloudflare.ini\n```\n\n----------------------------------------\n\nTITLE: Querying API root with curl\nDESCRIPTION: This code snippet demonstrates how to query the API root using curl.  It sends a GET request to the `/api/v2/` endpoint with the `Accept: application/json` header.  It expects a JSON response.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/ \\\n  -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Push Template to Coder\nDESCRIPTION: This command pushes the template and the lock file back to the Coder deployment, bundling them together for use in workspace builds. The lock file ensures that Terraform will attempt to cache specific provider versions during future builds.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/speed-up-templates.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates push <template>\n```\n\n----------------------------------------\n\nTITLE: Archive Unused Template Versions with POST (Shell)\nDESCRIPTION: This code snippet shows how to archive unused versions of a template using a POST request with curl. It includes setting the content type, accepting JSON responses, and passing the Coder session token for authentication. Replace `API_KEY` with your actual API key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/templates/{template}/versions/archive \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Listing Template Versions\nDESCRIPTION: This command lists all versions of a specific template. The template name (e.g., 'my-template') must be provided as an argument. This assumes the user has the Coder CLI configured and authenticated.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_versions.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder templates versions list my-template\n```\n\n----------------------------------------\n\nTITLE: HTTP URL Example\nDESCRIPTION: This is an example of a URL that uses HTTP protocol for accessing a port on the workspace. The URL points to port 33295 and is for an app running on the agent, workspace, and user within Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/port-forwarding.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://33295--agent--workspace--user--apps.example.com/\n```\n\n----------------------------------------\n\nTITLE: Get Available IdP Sync Claim Fields with curl\nDESCRIPTION: This code snippet demonstrates how to retrieve the available IdP sync claim fields using a curl command. It sends a GET request to the specified endpoint with the appropriate headers for accepting JSON responses and providing the Coder session token for authentication.  The expected response is a JSON array of strings representing the available claim fields.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/settings/idpsync/available-fields \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Rotating Encryption Keys (Kubernetes Secret)\nDESCRIPTION: This YAML snippet demonstrates how to update the Kubernetes secret with multiple encryption keys during key rotation. The newest key should be listed first, followed by older keys. This allows Coder to decrypt data encrypted with older keys while encrypting new data with the new key.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/database-encryption.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: coder-external-token-encryption-keys\n  namespace: coder-namespace\ndata:\n  keys: <new-key>,<old-key1>,<old-key2>,...\n```\n\n----------------------------------------\n\nTITLE: Update Role IdP Sync Mapping with PATCH (curl)\nDESCRIPTION: Updates Role IdP (Identity Provider) synchronization mappings using a PATCH request. Requires the organization ID and a valid Coder session token. The request body specifies mappings to add and remove.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_74\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/roles/mapping \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example New Session Key Response\nDESCRIPTION: This is an example JSON response returned after successfully creating a new session key. The response contains a single field, `key`, which holds the newly generated API key as a string. This key should be securely stored and used for subsequent authenticated requests.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Template Example (Coder Dev Script)\nDESCRIPTION: This shell command demonstrates how to update and push a template to Coder using the `coder-dev.sh` script.  It specifies the template name, the directory containing the template files, and uses the `-y` flag to bypass confirmation prompts. It assumes the script `coder-dev.sh` is available in the `./scripts` directory.\nSOURCE: https://github.com/coder/coder/blob/main/examples/workspace-tags/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/coder-dev.sh templates push examples-workspace-tags \\\n  -d examples/workspace-tags \\\n  -y\n```\n\n----------------------------------------\n\nTITLE: Workspace Build Parameters Response Example\nDESCRIPTION: This JSON example displays the expected structure of the response when querying workspace build parameters. It is an array of objects, where each object represents a build parameter and has `name` and `value` properties, both of which are strings. These parameters can be used to configure the workspace build process.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"string\",\n    \"value\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Create User Request Body\nDESCRIPTION: This is an example JSON payload for creating a new user. It includes required fields such as `email`, `login_type`, `name`, `organization_ids`, `password`, `user_status`, and `username`. The server expects this data in the request body when creating a new user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"user@example.com\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"password\": \"string\",\n  \"user_status\": \"active\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Required Parameter in Terraform\nDESCRIPTION: This code defines a `coder_parameter` resource named `account_name` without a `default` property. This makes the parameter required, meaning the user must provide a value for it when creating a workspace. The `mutable` attribute is set to `true`, allowing the user to modify the value after creation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/parameters.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"coder_parameter\" \"account_name\" {\n  name        = \"Account name\"\n  description = \"Cloud account name\"\n  mutable     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Organization: Example Response\nDESCRIPTION: This is an example JSON response received after attempting to delete an organization. It may contain details, a message, and validation errors if the deletion fails. A successful HTTP status code should be 200.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Group Sync Settings via CLI\nDESCRIPTION: This command displays the current group synchronization settings for the Coder organization. It retrieves the configuration used to sync groups from a specified Identity Provider. No specific dependencies are mentioned but requires access to a configured Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_show_group-sync.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings show group-sync\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Build Response Example\nDESCRIPTION: This is an example of a successful (200) response when retrieving details for a specific workspace build. It contains information such as the build number, creation date, job details, resources, and status.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build_number\": 0,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"daily_cost\": 0,\n  \"deadline\": \"2019-08-24T14:15:22Z\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n  \"initiator_name\": \"string\",\n  \"job\": {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  },\n  \"matched_provisioners\": {\n    \"available\": 0,\n    \"count\": 0,\n    \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n  },\n  \"max_deadline\": \"2019-08-24T14:15:22Z\",\n  \"reason\": \"initiator\",\n  \"resources\": [\n    {\n      \"agents\": [\n        {\n          \"api_version\": \"string\",\n          \"apps\": [\n            {\n              \"command\": \"string\",\n              \"display_name\": \"string\",\n              \"external\": true,\n              \"health\": \"disabled\",\n              \"healthcheck\": {\n                \"interval\": 0,\n                \"threshold\": 0,\n                \"url\": \"string\"\n              },\n              \"hidden\": true,\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"open_in\": \"slim-window\",\n              \"sharing_level\": \"owner\",\n              \"slug\": \"string\",\n              \"statuses\": [\n                {\n                  \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                  \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                  \"created_at\": \"2019-08-24T14:15:22Z\",\n                  \"icon\": \"string\",\n                  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                  \"message\": \"string\",\n                  \"needs_user_attention\": true,\n                  \"state\": \"working\",\n                  \"uri\": \"string\",\n                  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                }\n              ],\n              \"subdomain\": true,\n              \"subdomain_name\": \"string\",\n              \"url\": \"string\"\n            }\n          ],\n          \"architecture\": \"string\",\n          \"connection_timeout_seconds\": 0,\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"directory\": \"string\",\n          \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n          \"display_apps\": [\n            \"vscode\"\n          ],\n          \"environment_variables\": {\n            \"property1\": \"string\",\n            \"property2\": \"string\"\n          },\n          \"expanded_directory\": \"string\",\n          \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"health\": {\n            \"healthy\": false,\n            \"reason\": \"agent has lost connection\"\n          },\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"instance_id\": \"string\",\n          \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n          \"latency\": {\n            \"property1\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            },\n            \"property2\": {\n              \"latency_ms\": 0,\n              \"preferred\": true\n            }\n          },\n          \"lifecycle_state\": \"created\",\n          \"log_sources\": [\n            {\n              \"created_at\": \"2019-08-24T14:15:22Z\",\n              \"display_name\": \"string\",\n              \"icon\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n            }\n          ],\n          \"logs_length\": 0,\n          \"logs_overflowed\": true,\n          \"name\": \"string\",\n          \"operating_system\": \"string\",\n          \"ready_at\": \"2019-08-24T14:15:22Z\",\n          \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n          \"scripts\": [\n            {\n              \"cron\": \"string\",\n              \"display_name\": \"string\",\n              \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n              \"log_path\": \"string\",\n              \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n              \"run_on_start\": true,\n              \"run_on_stop\": true,\n              \"script\": \"string\",\n              \"start_blocks_login\": true,\n              \"timeout\": 0\n            }\n          ],\n          \"started_at\": \"2019-08-24T14:15:22Z\",\n          \"startup_script_behavior\": \"blocking\",\n          \"status\": \"connecting\",\n          \"subsystems\": [\n            \"envbox\"\n          ],\n          \"troubleshooting_url\": \"string\",\n          \"updated_at\": \"2019-08-24T14:15:22Z\",\n          \"version\": \"string\"\n        }\n      ],\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"daily_cost\": 0,\n      \"hide\": true,\n      \"icon\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n      \"metadata\": [\n        {\n          \"key\": \"string\",\n          \"sensitive\": true,\n          \"value\": \"string\"\n        }\n      ],\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"workspace_transition\": \"start\"\n    }\n  ],\n  \"status\": \"pending\",\n  \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n  \"template_version_name\": \"string\",\n  \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n  \"transition\": \"start\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n  \"workspace_name\": \"string\",\n  \"workspace_owner_avatar_url\": \"string\",\n  \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n  \"workspace_owner_name\": \"string\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Workspaces with Coder CLI\nDESCRIPTION: This command cleans up workspaces created with the scaletest utility. It deletes all workspaces and users with the prefix `scaletest-`. The `coder exp scaletest cleanup` command is used with options to specify cleanup job timeout and cleanup timeout.  This assumes that the workspaces were created using the scaletest utility and are prefixed with 'scaletest-'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/infrastructure/scale-utility.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder exp scaletest cleanup \\\n    --cleanup-job-timeout 2h \\\n    --cleanup-timeout 15min\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Roles from JSON Input\nDESCRIPTION: This command allows creating an organization role by reading the role definition from a JSON file provided via stdin. The `-O <organization_name>` flag specifies the target organization. The `--stdin` flag indicates that the input should be read from stdin. This method enables the creation of complex roles with detailed configurations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_roles_create.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder organization -O <organization_name> roles create --stidin < role.json\n```\n\n----------------------------------------\n\nTITLE: Example User Organizations Response\nDESCRIPTION: This JSON snippet is an example response body for the get organizations by user endpoint. It shows the structure of the returned organization objects, including fields such as created_at, description, display_name, and id.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"description\": \"string\",\n    \"display_name\": \"string\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"is_default\": true,\n    \"name\": \"string\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Usage for Organization Roles\nDESCRIPTION: This snippet demonstrates the basic command structure for managing organization roles using the Coder CLI. It serves as the entry point for accessing subcommands such as show, update, and create.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_roles.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations roles\n```\n\n----------------------------------------\n\nTITLE: Validating Kernel Configuration\nDESCRIPTION: These commands validate that the required kernel config `CONFIG_DEBUG_INFO_BTF=y` is enabled. The config must be enabled for the workspace process logging feature to work.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/config.gz | gunzip | grep CONFIG_DEBUG_INFO_BTF\n```\n\nLANGUAGE: shell\nCODE:\n```\ncat \"/boot/config-$(uname -r)\" | grep CONFIG_DEBUG_INFO_BTF\n```\n\n----------------------------------------\n\nTITLE: Example Update Workspace Proxy Response\nDESCRIPTION: This is an example JSON response when successfully updating a workspace proxy. It includes fields such as `created_at`, `deleted`, `display_name`, `id`, and `status`, providing details about the updated workspace proxy.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_132\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleted\": true,\n  \"derp_enabled\": true,\n  \"derp_only\": true,\n  \"display_name\": \"string\",\n  \"healthy\": true,\n  \"icon_url\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"name\": \"string\",\n  \"path_app_url\": \"string\",\n  \"status\": {\n    \"checked_at\": \"2019-08-24T14:15:22Z\",\n    \"report\": {\n      \"errors\": [\n        \"string\"\n      ],\n      \"warnings\": [\n        \"string\"\n      ]\n    },\n    \"status\": \"ok\"\n  },\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"version\": \"string\",\n  \"wildcard_hostname\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Coder SSH\nDESCRIPTION: This command configures SSH for connecting to Coder workspaces. It requires the Coder CLI to be installed and the user to be logged in. It sets up the necessary SSH keys and configurations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/zed.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder config-ssh\n```\n\n----------------------------------------\n\nTITLE: Starting Coder Provisioner Daemon\nDESCRIPTION: This command is used to start the Coder provisioner daemon. It can be customized using various flags to configure caching, authentication, logging, and metrics.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_start.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner start [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying Templates with curl\nDESCRIPTION: This snippet demonstrates how to retrieve a list of templates using curl. It sends a GET request to the `/api/v2/templates` endpoint with the necessary headers for authentication and content negotiation. The `Coder-Session-Token` header is required for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templates \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Showing Organization by Name\nDESCRIPTION: Demonstrates how to display a specific organization by providing its name (e.g., 'developers').\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_show.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncoder org show developers:\n\n   $ Show organization with name 'developers'\n```\n\n----------------------------------------\n\nTITLE: Update Password Body Parameter\nDESCRIPTION: This JSON snippet represents the body parameter required for updating a user's password. It includes the user's current password (old_password) and the new password.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"old_password\": \"string\",\n  \"password\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NGINX Configuration File\nDESCRIPTION: This command creates a new NGINX configuration file for the Coder subdomain.  This file will contain the reverse proxy configuration for Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo touch /etc/nginx/sites-available/coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Example Resolve Autostart Response - 200 OK\nDESCRIPTION: Shows an example response for resolving the autostart status of a workspace. The `parameter_mismatch` field indicates whether there were any issues with the parameters provided. This boolean indicates whether the requested autostart behavior could be achieved.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parameter_mismatch\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Coder Features with CLI\nDESCRIPTION: This code snippet showcases the basic usage of the `coder features list` command. It has no specific programming language but illustrates how to execute the command in a console environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/features_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder features list [flags]\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Coder with install.sh script (Shell)\nDESCRIPTION: This command downloads and executes the install.sh script from coder.com, which reinstalls Coder and upgrades it to the latest version. This method assumes Coder was initially installed using the same script. There are no specific input parameters; it relies on the script's internal logic.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/upgrade.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://coder.com/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Group - coder groups delete\nDESCRIPTION: Deletes a user group specified by name using the `coder groups delete` command. The command also provides an alias `rm`. The `-O` or `--org` flag allows specifying the organization (UUID or name) in which the group should be deleted. The organization can also be set using the `$CODER_ORGANIZATION` environment variable.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/groups_delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder groups delete [flags] <name>\n```\n\n----------------------------------------\n\nTITLE: Assigning Role to Organization Member with Curl\nDESCRIPTION: This snippet shows how to assign a role to an organization member using a curl command. It sends a PUT request to the specified endpoint with the role to assign in the request body, including the necessary authentication and content type headers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/organizations/{organization}/members/{user}/roles \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Running an external provisioner via Docker (sh)\nDESCRIPTION: This snippet demonstrates how to run a Coder provisioner within a Docker container. It uses the `docker run` command with environment variables for the Coder URL and session token.  It executes the `/opt/coder provisioner start` command within the Coder Docker image.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm -it \\\n  -e CODER_URL=https://coder.example.com/ \\\n  -e CODER_SESSION_TOKEN=your_token \\\n  --entrypoint /opt/coder \\\n  ghcr.io/coder/coder:latest \\\n  provisioner start\n```\n\n----------------------------------------\n\nTITLE: Archive Template Versions (Coder CLI)\nDESCRIPTION: This command archives one or more template versions within the Coder environment. It requires the template name and optionally accepts a list of template version names to archive. The `-y` or `--yes` flag bypasses prompts, and the `-O` or `--org` flag specifies the organization to use.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_versions_archive.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates versions archive [flags] <template-name> [template-version-names...] \n```\n\n----------------------------------------\n\nTITLE: Installing Coder using winget (Windows)\nDESCRIPTION: This command uses the winget package manager to install Coder on Windows. It assumes that winget is configured and available in your environment. It directly installs the Coder package provided through winget.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/index.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Coder.Coder\n```\n\n----------------------------------------\n\nTITLE: Stopping NGINX Service\nDESCRIPTION: This command stops the NGINX service.  This is done to allow configuration changes to be applied without conflicts.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl stop nginx\n```\n\n----------------------------------------\n\nTITLE: Update Group IDP Sync Mapping\nDESCRIPTION: This code snippet demonstrates updating group IDP sync mapping using a PATCH request. The request requires the organization ID, authentication token, and a JSON body with mappings to add or remove.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_66\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/groups/mapping \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Organization by User and Name with curl\nDESCRIPTION: This shell command shows how to retrieve a specific organization by user and organization name using curl. It sends a GET request to the specified endpoint and needs the Coder-Session-Token for authentication. It returns a JSON object representing the organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/organizations/{organizationname} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Outlook.com SMTP Email Configuration\nDESCRIPTION: This snippet provides the configuration for sending emails using Outlook.com SMTP. It sets the `CODER_EMAIL_SMARTHOST`, `CODER_EMAIL_TLS_STARTTLS`, `CODER_EMAIL_AUTH_USERNAME`, and `CODER_EMAIL_AUTH_PASSWORD` environment variables. Ensure that you have a Microsoft 365 or outlook.com account.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/notifications/index.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nCODER_EMAIL_SMARTHOST=smtp-mail.outlook.com:587\nCODER_EMAIL_TLS_STARTTLS=true\nCODER_EMAIL_AUTH_USERNAME=<user>@<domain>\nCODER_EMAIL_AUTH_PASSWORD=\"<account password>\"\n```\n\n----------------------------------------\n\nTITLE: Get User Login Type with curl\nDESCRIPTION: This shell command demonstrates how to retrieve a user's login type using curl. It sends a GET request to the specified endpoint, including the Coder-Session-Token for authentication. The expected response is a JSON object containing the login type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/login-type \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example DAUs Response\nDESCRIPTION: This JSON snippet provides an example response containing Daily Active User (DAU) data for a template. It includes an array of entries, each containing the DAU amount and the corresponding date. The response also includes the timezone hour offset.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entries\": [\n    {\n      \"amount\": 0,\n      \"date\": \"string\"\n    }\n  ],\n  \"tz_hour_offset\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Coder Agent for Airflow (Startup Script)\nDESCRIPTION: This Terraform resource configures a Coder agent to install and run Airflow. The startup script installs Airflow using pip3 and starts the Airflow standalone server. The directory is set to /home/coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_13\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_agent\" \"coder\" {\n  os   = \"linux\"\n  arch = \"amd64\"\n  dir  = \"/home/coder\"\n  startup_script = <<EOT\n#!/bin/bash\n# install and start airflow\npip3 install apache-airflow\n/home/coder/.local/bin/airflow standalone &\nEOT\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a User via Coder CLI\nDESCRIPTION: This command deletes a user in the Coder CLI using the `coder users delete` command. It accepts either a username or a user ID as an argument to identify the user to be deleted. The alias `rm` can also be used.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder users delete <username|user_id>\n```\n\n----------------------------------------\n\nTITLE: Agent Logs Response Example\nDESCRIPTION: This JSON snippet illustrates the structure of a successful (200) response when fetching logs from a workspace agent. It returns an array of log entries. Each entry includes the creation timestamp, unique ID, log level, output message, and source ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"id\": 0,\n    \"level\": \"trace\",\n    \"output\": \"string\",\n    \"source_id\": \"ae50a35c-df42-4eff-ba26-f8bc28d2af81\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Coder Server via SSH\nDESCRIPTION: This snippet demonstrates how to configure the Coder server by connecting via SSH, editing the configuration file, reloading the daemon, and restarting the Coder service. It assumes the user has already launched the instance and has the necessary SSH keys. The config is edited via vim.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/compute-engine.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh ubuntu@<gcp-public-IPv4>\nsudo vim /etc/coder.d/coder.env # edit config\nsudo systemctl daemon-reload\nsudo systemctl restart coder # restart Coder\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes Secret - Bash\nDESCRIPTION: This bash script uses `kubectl` to create a Kubernetes secret named `regcred` from a Docker config JSON file.  It specifies the secret type as `kubernetes.io/dockerconfigjson` and the namespace where the workspaces are deployed. It requires `kubectl` to be configured to connect to the target Kubernetes cluster.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/image-pull-secret.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nkubectl create secret generic regcred \\\n  --from-file=.dockerconfigjson=<path-to-docker-config.json> \\\n  --type=kubernetes.io/dockerconfigjson \\\n  --namespace=<workspaces-namespace>\n```\n\n----------------------------------------\n\nTITLE: Create Admin User Usage (CLI)\nDESCRIPTION: Shows the basic usage of the `coder server create-admin-user` command-line interface command. This command is used to create a new administrator user within the Coder environment. It accepts various flags to configure the new user's credentials, database connection, and SSH key generation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server_create-admin-user.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server create-admin-user [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Kubernetes Templates - Coder Helm\nDESCRIPTION: This YAML snippet shows how to include extra Kubernetes manifests in the Helm chart using `extraTemplates`.  It creates a ConfigMap along with the Helm release, demonstrating how to extend the deployed resources.\nSOURCE: https://github.com/coder/coder/blob/main/helm/provisioner/README.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  # ...\nprovisionerDaemon:\n  # ...\nextraTemplates:\n  - |\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: some-config\n      namespace: {{ .Release.Namespace }}\n    data:\n      key: some-value\n```\n\n----------------------------------------\n\nTITLE: Coder Logout Command Usage\nDESCRIPTION: This snippet demonstrates the basic usage of the `coder logout` command within the Coder CLI. The command is used to unauthenticate the current local session. It can be invoked with optional flags to modify its behavior.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/logout.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder logout [flags]\n```\n\n----------------------------------------\n\nTITLE: Build info response example\nDESCRIPTION: This JSON snippet shows an example response from the build info endpoint. It includes various build-related parameters such as agent API version, dashboard URL, deployment ID, external URL, provisioner API version, telemetry status, upgrade message, version, webpush public key, and workspace proxy status.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_api_version\": \"string\",\n  \"dashboard_url\": \"string\",\n  \"deployment_id\": \"string\",\n  \"external_url\": \"string\",\n  \"provisioner_api_version\": \"string\",\n  \"telemetry\": true,\n  \"upgrade_message\": \"string\",\n  \"version\": \"string\",\n  \"webpush_public_key\": \"string\",\n  \"workspace_proxy\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Favoriting Workspace - cURL Example\nDESCRIPTION: Shows an example of how to favorite a workspace using a PUT request with cURL. It requires the `Coder-Session-Token` header for authentication and sends a request to the `/workspaces/{workspace}/favorite` endpoint, where `{workspace}` should be replaced with the UUID of the desired workspace. A 204 No Content response indicates success.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/workspaces/{workspace}/favorite \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Canceling Template Version Dry-Run (curl)\nDESCRIPTION: This curl command demonstrates how to cancel a template version dry-run job using a PATCH request.  It requires the template version ID and the job ID. The command includes headers for accepting JSON and providing the Coder session token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/templateversions/{templateversion}/dry-run/{jobID}/cancel \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Zipping template files for Coder\nDESCRIPTION: This command zips the Dockerfile and main.tf files into a single archive named templates.zip, for uploading into Coder template through dashboard\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nzip templates.zip Dockerfile main.tf\n```\n\n----------------------------------------\n\nTITLE: Install VS Code Extension from Marketplace\nDESCRIPTION: This command demonstrates installing a VS Code extension from a marketplace using `code-server`. It sets the `SERVICE_URL` and `ITEM_URL` environment variables to point to the desired marketplace before installing the extension. This command needs to be executed from the workspace's terminal or `code-server` terminal.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nSERVICE_URL=https://extensions.coder.com/api ITEM_URL=https://extensions.coder.com/item /path/to/code-server --install-extension GitHub.copilot\n```\n\n----------------------------------------\n\nTITLE: Update Group IDP Sync Config\nDESCRIPTION: This code snippet demonstrates how to update group IDP sync config using a PATCH request. The request specifies an organization and the required authentication token. The content type is set to application/json.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/groups/config \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Canceling Workspace Build with Curl\nDESCRIPTION: This shell command demonstrates how to cancel a workspace build using the `curl` command-line tool. It sends a PATCH request to the `/workspacebuilds/{workspacebuild}/cancel` endpoint, including the required `Coder-Session-Token` header for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild}/cancel \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: OPA Policy Evaluation Command\nDESCRIPTION: This bash command uses the Open Policy Agent (OPA) CLI to evaluate the authorization policy.  It specifies the policy file (policy.rego), the input data file (input.json), and the query to evaluate (data.authz.allow). The output will be formatted as pretty JSON.\nSOURCE: https://github.com/coder/coder/blob/main/coderd/rbac/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nopa eval --format=pretty \"data.authz.allow\" -d policy.rego -i input.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Workspace Agent Port Share - Body Parameter\nDESCRIPTION: This JSON snippet defines the body parameter for deleting a workspace agent's port share. It includes the agent's name and port number. These values are used to identify the specific port share to delete. `agent_name` is a string and `port` is an integer.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/portsharing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_name\": \"string\",\n  \"port\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Upsert Organization Role via PUT Request - cURL\nDESCRIPTION: This cURL command sends a PUT request to the Coder API endpoint for upserting an organization role. It requires the organization ID, Content-Type, Accept header, and the Coder-Session-Token for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/organizations/{organization}/members/roles \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Coder State Command Usage\nDESCRIPTION: The `coder state` command is used to manage Terraform state.  It requires the Coder CLI to be installed.  The expected output is the tool executing with its available subcommands.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/state.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder state\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Confirm Template Creation\nDESCRIPTION: This is the CLI output after pushing a template, waiting for confirmation to create it.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n> Confirm create? (yes/no) yes\n\nThe template-tour template has been created! Developers can provision a workspace with this template using:\n\ncoder create --template=\"template-tour\" [workspace name]\n```\n\n----------------------------------------\n\nTITLE: File Upload with Curl\nDESCRIPTION: This code snippet demonstrates how to upload a file to the Coder server using a curl command.  It specifies the endpoint, content type (application/x-tar), and the Coder Session Token. The API requires authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/files.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X POST http://coder-server:8080/api/v2/files \\\n  -H 'Accept: application/json' \\\n  -H 'Content-Type: application/x-tar' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Ordering Coder Metadata Items\nDESCRIPTION: This snippet illustrates how the order of items within the `coder_metadata` resource is inherited from the file structure. This ensures that the order of metadata items displayed in the UI matches the order in the Terraform configuration file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-ordering.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"coder_metadata\" \"attached_volumes\" {\n  resource_id = docker_image.main.id\n\n  // Items will be presented in the UI in the following order.\n  item {\n    key   = \"disk-a\"\n    value = \"60 GiB\"\n  }\n  item {\n    key   = \"disk-b\"\n    value = \"128 GiB\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example OAuth2 Secrets Response (GET)\nDESCRIPTION: Example JSON response structure for a successful GET request to retrieve OAuth2 application secrets. Shows the format and fields returned, including `client_secret_truncated`, `id`, and `last_used_at`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"client_secret_truncated\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"last_used_at\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get provisioner state using curl\nDESCRIPTION: This code snippet demonstrates how to retrieve the provisioner state for a workspace build using the `curl` command-line tool. It specifies the GET method, the API endpoint, and the required headers for accepting JSON responses and authenticating the request using a Coder-Session-Token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspacebuilds/{workspacebuild}/state \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Patch Workspace Agent Logs via curl\nDESCRIPTION: This snippet demonstrates how to patch workspace agent logs using a curl command. It requires a valid Coder-Session-Token for authentication and a JSON body containing the log_source_id and logs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/workspaceagents/me/logs \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Response for Cancel Template Version Dry-Run\nDESCRIPTION: This JSON snippet shows an example response for canceling a template version dry-run. It provides details like the message, detail and validations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unarchiving template versions using coder CLI\nDESCRIPTION: This command unarchives template versions using the Coder CLI. It requires the template name and optionally the template version names to be unarchived. The `-y` or `--yes` flag bypasses prompts, and the `-O` or `--org` flag specifies the organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_versions_unarchive.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates versions unarchive [flags] <template-name> [template-version-names...]\n```\n\n----------------------------------------\n\nTITLE: JSON Response for List Organization Members\nDESCRIPTION: This JSON snippet shows the expected response structure when listing organization members. It includes details about each member, such as their avatar URL, creation and update timestamps, email, roles (both global and organization-specific), name, organization ID, user ID, and username.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"avatar_url\": \"string\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"email\": \"string\",\n    \"global_roles\": [\n      {\n        \"display_name\": \"string\",\n        \"name\": \"string\",\n        \"organization_id\": \"string\"\n      }\n    ],\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"roles\": [\n      {\n        \"display_name\": \"string\",\n        \"name\": \"string\",\n        \"organization_id\": \"string\"\n      }\n    ],\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\",\n    \"username\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Coder Tokens\nDESCRIPTION: This command generates a long-lived token that can be used to authenticate with the Coder REST API on behalf of a user account. It requires the Coder CLI to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authentication.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder tokens create\n```\n\n----------------------------------------\n\nTITLE: Configuring Ansi Term Directory Tracking\nDESCRIPTION: This bash script configures the shell to announce the hostname, user, and working directory to Emacs via escape codes. This enables directory tracking in Emacs's ansi-term mode, allowing Emacs to automatically update its `default-directory` when the shell's working directory changes.  It overrides the `cd`, `pushd`, and `popd` commands to ensure the escape codes are sent after each directory change.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/emacs-tramp.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nansi_term_announce_host() {\n    printf '\\033AnSiTh %s\\n' \"coder.$CODER_WORKSPACE_NAME\"\n}\n\nansi_term_announce_user() {\n    printf '\\033AnSiTu %s\\n' \"$USER\"\n}\n\nansi_term_announce_pwd() {\n    printf '\\033AnSiTc %s\\n' \"$PWD\"\n}\n\nansi_term_announce() {\n    ansi_term_announce_host\n    ansi_term_announce_user\n    ansi_term_announce_pwd\n}\n\ncd()    { command cd    \"$@\"; ansi_term_announce_pwd; }\npushd() { command pushd \"$@\"; ansi_term_announce_pwd; }\npopd()  { command popd  \"$@\"; ansi_term_announce_pwd; }\n\nansi_term_announce\n```\n\n----------------------------------------\n\nTITLE: Using the 'coder open' Command\nDESCRIPTION: This command is used to open a Coder workspace. It provides the base command for interacting with workspaces. The user should use a subcommand to specify how the workspace should be opened (e.g., in VS Code or a specific application).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/open.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder open\n```\n\n----------------------------------------\n\nTITLE: Setting Labels and Annotations - Coder Helm\nDESCRIPTION: This YAML snippet demonstrates how to set deployment- and pod-level labels and annotations using the `coder.{annotations,labels}` and `coder.{podAnnotations,podLabels}` configurations in the Coder Helm chart.\nSOURCE: https://github.com/coder/coder/blob/main/helm/provisioner/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  # ...\n  annotations:\n    com.coder/annotation/foo: bar\n    com.coder/annotation/baz: qux\n  labels:\n    com.coder/label/foo: bar\n    com.coder/label/baz: qux\n  podAnnotations:\n    com.coder/podAnnotation/foo: bar\n    com.coder/podAnnotation/baz: qux\n  podLabels:\n    com.coder/podLabel/foo: bar\n    com.coder/podLabel/baz: qux\n```\n\n----------------------------------------\n\nTITLE: Define volume and volumeMounts in Helm chart (server)\nDESCRIPTION: Defines a volume and volumeMounts in the Coder Helm chart to mount the PostgreSQL CA certificate secret to the `$HOME/.postgresql/postgres-root.crt` directory within the Coder workspace.  This allows Coder to access the CA certificate for SSL connection and server verification.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/postgres-ssl.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  volumes:\n    - name: \"pg-certs-mount\"\n      secret:\n        secretName: \"postgres-certs\"\n  volumeMounts:\n    - name: \"pg-certs-mount\"\n      mountPath: \"$HOME/.postgresql/postgres-root.crt\"\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Launching Coder Server with Custom DERP Configuration File\nDESCRIPTION: This command line invocation launches the Coder server using a custom DERP configuration file specified by the `--derp-config-path` flag. The file should be in JSON format, defining the custom DERP relay servers to be used. This is useful for offline deployments or when lower latency is required.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncoder server --derp-config-path derpmap.json\n```\n\n----------------------------------------\n\nTITLE: Install Coder CLI using winget on Windows\nDESCRIPTION: This command installs the Coder CLI on Windows using the winget package manager. It offers an alternative to using the Windows installer or standalone binary. Winget must be installed and configured on the system for this command to work.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/zed.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Coder.Coder\n```\n\n----------------------------------------\n\nTITLE: Suspend User with Curl\nDESCRIPTION: This code snippet demonstrates how to suspend a user using a curl command. It requires authentication via the 'Coder-Session-Token' header. The request uses the PUT method with the Accept header set to 'application/json'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/users/{user}/status/suspend \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Archive Template Versions Response (JSON)\nDESCRIPTION: This JSON snippet represents a successful response to the archive template versions request. It contains a detail message, a general message, and a validations array. The `detail` and `message` provide information on the action performed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub OAuth with Environment Variables in /etc/coder.d/coder.env\nDESCRIPTION: This snippet shows how to configure GitHub OAuth using environment variables in the `/etc/coder.d/coder.env` file. This is an alternative to using command-line flags when running Coder as a system service.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nCODER_OAUTH2_GITHUB_ALLOW_SIGNUPS=true\nCODER_OAUTH2_GITHUB_ALLOWED_ORGS=\"your-org\"\nCODER_OAUTH2_GITHUB_CLIENT_ID=\"8d1...e05\"\nCODER_OAUTH2_GITHUB_CLIENT_SECRET=\"57ebc9...02c24c\"\n```\n\n----------------------------------------\n\nTITLE: Creating a user group with coder groups create\nDESCRIPTION: This command creates a user group using the Coder CLI.  It takes the group's name as an argument and supports flags to set the avatar URL, display name, and organization. The command requires the Coder CLI to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/groups_create.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder groups create [flags] <name>\n```\n\n----------------------------------------\n\nTITLE: Check Authorization via API - Shell\nDESCRIPTION: This shell script demonstrates how to check user authorization using the `/authcheck` endpoint. It requires a Coder session token for authentication and sends a JSON payload containing authorization checks.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/authcheck \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Get Role IDP Sync Settings\nDESCRIPTION: This code snippet demonstrates retrieving role IDP sync settings for an organization using a GET request. It requires the organization ID as a parameter and includes the necessary headers for authentication and content type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_69\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/roles \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Authenticate with Coder\nDESCRIPTION: This command logs you into your Coder deployment using the Coder CLI. It requires that you have the Coder CLI installed and configured to connect to your Coder instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ncoder login\n```\n\n----------------------------------------\n\nTITLE: Listing Schemas using psql\nDESCRIPTION: This shell command executes a psql command to list all schemas. It is used to verify if the desired schema exists and if the user has permissions to access it. It is used for troubleshooting purposes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\npsql -U coder -c '\\dn'\n```\n\n----------------------------------------\n\nTITLE: Initialize Coder Template\nDESCRIPTION: This command initializes a Coder template from the default \"Kubernetes\" template, creating a new directory named `openshift-k8s` in the current directory. It uses the `coderv2` CLI tool. Assumes the coder cli tool is installed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\necho kubernetes | coderv2 templates init ./openshift-k8s\ncd ./openshift-k8s\n```\n\n----------------------------------------\n\nTITLE: Downloading JetBrains Client Downloader - Shell\nDESCRIPTION: Downloads and extracts the JetBrains Client Downloader binary for Linux.  Removes the downloaded archive after extraction. Requires `wget` and `tar` utilities.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-pre-install.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://download.jetbrains.com/idea/code-with-me/backend/jetbrains-clients-downloader-linux-x86_64-1867.tar.gz && \\\ntar -xzvf jetbrains-clients-downloader-linux-x86_64-1867.tar.gz\nrm jetbrains-clients-downloader-linux-x86_64-1867.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Client Certificates via Environment Variables\nDESCRIPTION: These environment variables configure Coder to use client TLS certificates for authentication with the OpenID Connect provider. `CODER_TLS_CLIENT_CERT_FILE` specifies the path to the certificate file, and `CODER_TLS_CLIENT_KEY_FILE` specifies the path to the key file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/oidc-auth.md#_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nCODER_TLS_CLIENT_CERT_FILE=/path/to/cert.pem\nCODER_TLS_CLIENT_KEY_FILE=/path/to/key.pem\n```\n\n----------------------------------------\n\nTITLE: Generating Google Service Account Identity Token\nDESCRIPTION: Generates a JWT identity token for a Google Cloud service account, intended for use with AWS. Requires the `gcloud` CLI. The token includes the service account email and specifies the AWS audience.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/gcp-to-aws.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngcloud auth print-identity-token --audiences=https://aws.amazon.com --impersonate-service-account 12345-compute@developer.gserviceaccount.com  --include-email\n```\n\n----------------------------------------\n\nTITLE: Creating PKCS bundle with OpenSSL\nDESCRIPTION: This command generates a .pfx file (PKCS#12 format) from the private key and certificate, which will be used by Coder's Provisioner to authenticate with Azure. A password is set for the bundle.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/azure-federation.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nopenssl pkcs12 -export -password pass:\"Pa55w0rd123\" -out client.pfx -inkey client.key -in client.crt\n```\n\n----------------------------------------\n\nTITLE: Get SCIM Users with curl\nDESCRIPTION: This curl command retrieves a list of SCIM users. It sends a GET request to the specified endpoint and includes an authorization header.  It depends on a valid API key for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_81\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/scim/v2/Users \\\n  -H 'Authorizaiton: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Installing netcat using apt-get in Debian/Ubuntu\nDESCRIPTION: This snippet shows how to install netcat using the apt package manager on Debian or Ubuntu-based systems. Netcat is a utility for reading from and writing to network connections using TCP or UDP. It's used to diagnose network connectivity issues and perform other network-related tasks. It requires root privileges to install packages.\nSOURCE: https://github.com/coder/coder/blob/main/dogfood/coder/guide.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install -y netcat\n```\n\n----------------------------------------\n\nTITLE: Example Process Log\nDESCRIPTION: This JSON snippet shows the format of the logs produced by the `exectrace` container. It includes the timestamp, log level, message, and fields containing labels and event details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ts\": \"2022-02-28T20:29:38.038452202Z\",\n    \"level\": \"INFO\",\n    \"msg\": \"exec\",\n    \"fields\": {\n        \"labels\": {\n            \"user_email\": \"jessie@coder.com\",\n            \"user_id\": \"5e876e9a-121663f01ebd1522060d5270\",\n            \"username\": \"jessie\",\n            \"workspace_id\": \"621d2e52-a6987ef6c56210058ee2593c\",\n            \"workspace_name\": \"main\"\n        },\n        \"cmdline\": \"uname -a\",\n        \"event\": {\n            \"filename\": \"/usr/bin/uname\",\n            \"argv\": [\"uname\", \"-a\"],\n            \"truncated\": false,\n            \"pid\": 920684,\n            \"uid\": 101000,\n            \"gid\": 101000,\n            \"comm\": \"bash\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Roles with curl\nDESCRIPTION: This shell command shows how to retrieve a user's roles using curl. It sends a GET request to the specified endpoint, including the Coder-Session-Token for authentication. The expected response is a JSON object containing the user's information and roles.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/users/{user}/roles \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Registering LSP Client for Remote Use\nDESCRIPTION: This Emacs Lisp snippet registers an LSP client for use with a language server running on a remote machine accessed via TRAMP. It defines how to connect to the LSP server binary, the Emacs major mode for which the server should be used, and a unique server ID. This configures lsp-mode to find and use the specified language server within the Coder workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/emacs-tramp.md#_snippet_4\n\nLANGUAGE: Lisp\nCODE:\n```\n(lsp-register-client (make-lsp-client :new-connection (lsp-tramp-connection \"<LSP SERVER BINARY>\")\n              :major-modes '(<LANGUAGE MODE>)\n              :remote? t\n              :server-id '<LANGUAGE SERVER ID>))\n```\n\n----------------------------------------\n\nTITLE: Get User Latency Insights with cURL\nDESCRIPTION: This snippet demonstrates how to retrieve insights about user latency using a cURL request. It requires `start_time` and `end_time` parameters. A valid Coder API key is required for authentication.  The API returns a JSON response containing a report with user latency data.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/insights/user-latency?start_time=2019-08-24T14%3A15%3A22Z&end_time=2019-08-24T14%3A15%3A22Z \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: HealthcheckReport JSON Example\nDESCRIPTION: This JSON represents a sample HealthcheckReport. It contains information about various components such as access URL, database health, DERP server status, provisioner daemons, websocket connection, and workspace proxy details. The example showcases the expected structure and data types for a successful 200 response.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/debug.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_url\": {\n    \"access_url\": \"string\",\n    \"dismissed\": true,\n    \"error\": \"string\",\n    \"healthy\": true,\n    \"healthz_response\": \"string\",\n    \"reachable\": true,\n    \"severity\": \"ok\",\n    \"status_code\": 0,\n    \"warnings\": [\n      {\n        \"code\": \"EUNKNOWN\",\n        \"message\": \"string\"\n      }\n    ]\n  },\n  \"coder_version\": \"string\",\n  \"database\": {\n    \"dismissed\": true,\n    \"error\": \"string\",\n    \"healthy\": true,\n    \"latency\": \"string\",\n    \"latency_ms\": 0,\n    \"reachable\": true,\n    \"severity\": \"ok\",\n    \"threshold_ms\": 0,\n    \"warnings\": [\n      {\n        \"code\": \"EUNKNOWN\",\n        \"message\": \"string\"\n      }\n    ]\n  },\n  \"derp\": {\n    \"dismissed\": true,\n    \"error\": \"string\",\n    \"healthy\": true,\n    \"netcheck\": {\n      \"captivePortal\": \"string\",\n      \"globalV4\": \"string\",\n      \"globalV6\": \"string\",\n      \"hairPinning\": \"string\",\n      \"icmpv4\": true,\n      \"ipv4\": true,\n      \"ipv4CanSend\": true,\n      \"ipv6\": true,\n      \"ipv6CanSend\": true,\n      \"mappingVariesByDestIP\": \"string\",\n      \"oshasIPv6\": true,\n      \"pcp\": \"string\",\n      \"pmp\": \"string\",\n      \"preferredDERP\": 0,\n      \"regionLatency\": {\n        \"property1\": 0,\n        \"property2\": 0\n      },\n      \"regionV4Latency\": {\n        \"property1\": 0,\n        \"property2\": 0\n      },\n      \"regionV6Latency\": {\n        \"property1\": 0,\n        \"property2\": 0\n      },\n      \"udp\": true,\n      \"upnP\": \"string\"\n    },\n    \"netcheck_err\": \"string\",\n    \"netcheck_logs\": [\n      \"string\"\n    ],\n    \"regions\": {\n      \"property1\": {\n        \"error\": \"string\",\n        \"healthy\": true,\n        \"node_reports\": [\n          {\n            \"can_exchange_messages\": true,\n            \"client_errs\": [\n              [\n                \"string\"\n              ]\n            ],\n            \"client_logs\": [\n              [\n                \"string\"\n              ]\n            ],\n            \"error\": \"string\",\n            \"healthy\": true,\n            \"node\": {\n              \"canPort80\": true,\n              \"certName\": \"string\",\n              \"derpport\": 0,\n              \"forceHTTP\": true,\n              \"hostName\": \"string\",\n              \"insecureForTests\": true,\n              \"ipv4\": \"string\",\n              \"ipv6\": \"string\",\n              \"name\": \"string\",\n              \"regionID\": 0,\n              \"stunonly\": true,\n              \"stunport\": 0,\n              \"stuntestIP\": \"string\"\n            },\n            \"node_info\": {\n              \"tokenBucketBytesBurst\": 0,\n              \"tokenBucketBytesPerSecond\": 0\n            },\n            \"round_trip_ping\": \"string\",\n            \"round_trip_ping_ms\": 0,\n            \"severity\": \"ok\",\n            \"stun\": {\n              \"canSTUN\": true,\n              \"enabled\": true,\n              \"error\": \"string\"\n            },\n            \"uses_websocket\": true,\n            \"warnings\": [\n              {\n                \"code\": \"EUNKNOWN\",\n                \"message\": \"string\"\n              }\n            ]\n          }\n        ],\n        \"region\": {\n          \"avoid\": true,\n          \"embeddedRelay\": true,\n          \"nodes\": [\n            {\n              \"canPort80\": true,\n              \"certName\": \"string\",\n              \"derpport\": 0,\n              \"forceHTTP\": true,\n              \"hostName\": \"string\",\n              \"insecureForTests\": true,\n              \"ipv4\": \"string\",\n              \"ipv6\": \"string\",\n              \"name\": \"string\",\n              \"regionID\": 0,\n              \"stunonly\": true,\n              \"stunport\": 0,\n              \"stuntestIP\": \"string\"\n            }\n          ],\n          \"regionCode\": \"string\",\n          \"regionID\": 0,\n          \"regionName\": \"string\"\n        },\n        \"severity\": \"ok\",\n        \"warnings\": [\n          {\n            \"code\": \"EUNKNOWN\",\n            \"message\": \"string\"\n          }\n        ]\n      },\n      \"property2\": {\n        \"error\": \"string\",\n        \"healthy\": true,\n        \"node_reports\": [\n          {\n            \"can_exchange_messages\": true,\n            \"client_errs\": [\n              [\n                \"string\"\n              ]\n            ],\n            \"client_logs\": [\n              [\n                \"string\"\n              ]\n            ],\n            \"error\": \"string\",\n            \"healthy\": true,\n            \"node\": {\n              \"canPort80\": true,\n              \"certName\": \"string\",\n              \"derpport\": 0,\n              \"forceHTTP\": true,\n              \"hostName\": \"string\",\n              \"insecureForTests\": true,\n              \"ipv4\": \"string\",\n              \"ipv6\": \"string\",\n              \"name\": \"string\",\n              \"regionID\": 0,\n              \"stunonly\": true,\n              \"stunport\": 0,\n              \"stuntestIP\": \"string\"\n            },\n            \"node_info\": {\n              \"tokenBucketBytesBurst\": 0,\n              \"tokenBucketBytesPerSecond\": 0\n            },\n            \"round_trip_ping\": \"string\",\n            \"round_trip_ping_ms\": 0,\n            \"severity\": \"ok\",\n            \"stun\": {\n              \"canSTUN\": true,\n              \"enabled\": true,\n              \"error\": \"string\"\n            },\n            \"uses_websocket\": true,\n            \"warnings\": [\n              {\n                \"code\": \"EUNKNOWN\",\n                \"message\": \"string\"\n              }\n            ]\n          }\n        ],\n        \"region\": {\n          \"avoid\": true,\n          \"embeddedRelay\": true,\n          \"nodes\": [\n            {\n              \"canPort80\": true,\n              \"certName\": \"string\",\n              \"derpport\": 0,\n              \"forceHTTP\": true,\n              \"hostName\": \"string\",\n              \"insecureForTests\": true,\n              \"ipv4\": \"string\",\n              \"ipv6\": \"string\",\n              \"name\": \"string\",\n              \"regionID\": 0,\n              \"stunonly\": true,\n              \"stunport\": 0,\n              \"stuntestIP\": \"string\"\n            }\n          ],\n          \"regionCode\": \"string\",\n          \"regionID\": 0,\n          \"regionName\": \"string\"\n        },\n        \"severity\": \"ok\",\n        \"warnings\": [\n          {\n            \"code\": \"EUNKNOWN\",\n            \"message\": \"string\"\n          }\n        ]\n      }\n    },\n    \"severity\": \"ok\",\n    \"warnings\": [\n      {\n        \"code\": \"EUNKNOWN\",\n        \"message\": \"string\"\n      }\n    ]\n  },\n  \"healthy\": true,\n  \"provisioner_daemons\": {\n    \"dismissed\": true,\n    \"error\": \"string\",\n    \"items\": [\n      {\n        \"provisioner_daemon\": {\n          \"api_version\": \"string\",\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"current_job\": {\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"status\": \"pending\",\n            \"template_display_name\": \"string\",\n            \"template_icon\": \"string\",\n            \"template_name\": \"string\"\n          },\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"key_id\": \"1e779c8a-6786-4c89-b7c3-a6666f5fd6b5\",\n          \"key_name\": \"string\",\n          \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n          \"name\": \"string\",\n          \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n          \"previous_job\": {\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"status\": \"pending\",\n            \"template_display_name\": \"string\",\n            \"template_icon\": \"string\",\n            \"template_name\": \"string\"\n          },\n          \"provisioners\": [\n            \"string\"\n          ],\n          \"status\": \"offline\",\n          \"tags\": {\n            \"property1\": \"string\",\n            \"property2\": \"string\"\n          },\n          \"version\": \"string\"\n        },\n        \"warnings\": [\n          {\n            \"code\": \"EUNKNOWN\",\n            \"message\": \"string\"\n          }\n        ]\n      }\n    ],\n    \"severity\": \"ok\",\n    \"warnings\": [\n      {\n        \"code\": \"EUNKNOWN\",\n        \"message\": \"string\"\n      }\n    ]\n  },\n  \"severity\": \"ok\",\n  \"time\": \"2019-08-24T14:15:22Z\",\n  \"websocket\": {\n    \"body\": \"string\",\n    \"code\": 0,\n    \"dismissed\": true,\n    \"error\": \"string\",\n    \"healthy\": true,\n    \"severity\": \"ok\",\n    \"warnings\": [\n      {\n        \"code\": \"EUNKNOWN\",\n        \"message\": \"string\"\n      }\n    ]\n  },\n  \"workspace_proxy\": {\n    \"dismissed\": true,\n    \"error\": \"string\",\n    \"healthy\": true,\n    \"severity\": \"ok\",\n    \"warnings\": [\n      {\n        \"code\": \"EUNKNOWN\",\n        \"message\": \"string\"\n      }\n    ],\n    \"workspace_proxies\": {\n      \"regions\": [\n        {\n          \"created_at\": \"2019-08-24T14:15:22Z\",\n          \"deleted\": true,\n          \"derp_enabled\": true,\n          \"derp_only\": true,\n          \"display_name\": \"string\",\n          \"healthy\": true,\n          \"icon_url\": \"string\",\n          \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n          \"name\": \"string\",\n          \"path_app_url\": \"string\",\n          \"status\": {\n            \"checked_at\": \"2019-08-24T14:15:22Z\",\n            \"report\": {\n              \"errors\": [\n                \"string\"\n              ],\n              \"warnings\": [\n                \"string\"\n              ]\n            },\n            \"status\": \"ok\"\n          },\n          \"updated_at\": \"2019-08-24T14:15:22Z\",\n          \"version\": \"string\",\n          \"wildcard_hostname\": \"string\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deployment Config Response Example\nDESCRIPTION: This JSON snippet shows the structure of a successful response when querying the deployment configuration. It includes properties like name, parent, and yaml.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\",\n  \"parent\": {},\n  \"yaml\": \"string\"\n},\n\"yaml\": \"string\"\n},\n\"hidden\": true,\n\"name\": \"string\",\n\"required\": true,\n\"use_instead\": [\n  {}\n],\n\"value\": null,\n\"value_source\": \"\",\n\"yaml\": \"string\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Coder workspace\nDESCRIPTION: This snippet demonstrates how to create a new Coder workspace using the `coder-dev.sh` script.  It takes the workspace name and a template name as arguments. The template argument specifies the base image or configuration to use for the new workspace. This command assumes that the `coder-dev.sh` script is executable and accessible in the current directory.\nSOURCE: https://github.com/coder/coder/blob/main/dogfood/coder/guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/coder-dev.sh create myworkspace -t docker-amd64\n```\n\n----------------------------------------\n\nTITLE: Setting the CODER_E2E_LICENSE environment variable\nDESCRIPTION: This snippet shows how to set the `CODER_E2E_LICENSE` environment variable, which is required to run enterprise tests. Replace `<license key>` with the actual license key.\nSOURCE: https://github.com/coder/coder/blob/main/site/e2e/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport CODER_E2E_LICENSE=<license key>\n```\n\n----------------------------------------\n\nTITLE: Creating Let's Encrypt Wildcard Certificate\nDESCRIPTION: This command uses Certbot to create a Let's Encrypt wildcard certificate for the Coder subdomain.  It uses the Cloudflare DNS plugin and the API token to complete the DNS challenge.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo certbot certonly --dns-cloudflare --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini -d coder.example.com -d *.coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Executing dbcrypt command\nDESCRIPTION: This command is used to manage database encryption within the Coder server. It serves as the entry point for various subcommands related to encryption management. No specific dependencies are listed, but access to the Coder server CLI is required.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server_dbcrypt.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server dbcrypt\n```\n\n----------------------------------------\n\nTITLE: Showing a User with Coder CLI\nDESCRIPTION: This command shows information about a specified user.  The user can be identified by username, user ID, or using 'me' to represent the currently authenticated user. The output format can be specified via the `--output` flag.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder users show [flags] <username|user_id|'me'>\n```\n\n----------------------------------------\n\nTITLE: Update Group IDP Sync Mapping Body\nDESCRIPTION: This JSON snippet represents the request body for updating group IDP sync mapping. It allows adding and removing mappings between claims.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add\": [\n    {\n      \"gets\": \"string\",\n      \"given\": \"string\"\n    }\n  ],\n  \"remove\": [\n    {\n      \"gets\": \"string\",\n      \"given\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Add License: Request Body\nDESCRIPTION: This JSON snippet represents the request body required when adding a new license. The `license` field should contain the license string. This is sent in the body of the POST request to `/api/v2/licenses`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"license\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Login User - JSON Response\nDESCRIPTION: This JSON response contains the session token for the logged-in user, returned from the `/users/login` endpoint upon successful authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"session_token\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Caddyfile Configuration for Wildcard Certificates (CloudFlare)\nDESCRIPTION: This Caddyfile snippet configures Caddy to use CloudFlare for DNS challenges when generating wildcard TLS certificates.  It uses a Cloudflare API token with zone edit permissions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_8\n\nLANGUAGE: caddyfile\nCODE:\n```\ntls {\n-  on_demand\n-  issuer acme {\n-      email email@example.com\n-  }\n\n+  dns cloudflare CLOUDFLARE_API_TOKEN\n}\n```\n\n----------------------------------------\n\nTITLE: Removing obsolete coder provider block\nDESCRIPTION: This code snippet shows the removal of the `feature_use_managed_variables` attribute from the Coder provider block in Terraform templates. This attribute is no longer required as managed variables are enabled by default.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v0.26.0.md#_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nprovider \"coder\" {\n-  feature_use_managed_variables = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Add License Key from File using Coder CLI\nDESCRIPTION: This command adds a Coder license key from a `.jwt` file using the Coder CLI.  It requires the Coder CLI to be installed and the user to be logged in. The `-f` flag specifies the path to the license file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/licensing/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoder licenses add -f <path to your license key>\n```\n\n----------------------------------------\n\nTITLE: Coder Schedule Usage Command\nDESCRIPTION: This command is the main entrypoint for scheduling actions on Coder workspaces. It allows for showing, starting, stopping, or extending schedules. The `<workspace>` argument specifies the target workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder schedule { show | start | stop | extend } <workspace>\n```\n\n----------------------------------------\n\nTITLE: VS Code Web Module Integration\nDESCRIPTION: This Terraform module integrates VS Code Web into the Coder environment. It requires the `agent_id` of the Coder agent and acceptance of the license. The module handles the installation and configuration of VS Code Web.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"vscode-web\" {\n  source         = \"registry.coder.com/modules/vscode-web/coder\"\n  version        = \"1.0.14\"\n  agent_id       = coder_agent.main.id\n  accept_license = true\n}\n```\n\n----------------------------------------\n\nTITLE: API root response example\nDESCRIPTION: This JSON snippet shows an example response from the API root endpoint. It includes details, a message, and potential validation errors with details and field names.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI Command Usage\nDESCRIPTION: Shows how to execute the `coder server dbcrypt delete` command from the console. This command deletes all encrypted data from the database. This is a destructive operation, so use with caution.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/server_dbcrypt_delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder server dbcrypt delete [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Successful Sync Logs\nDESCRIPTION: This snippet provides an example of successful sync logs from the Coder server. These logs show successful retrieval of OIDC claims and group information, which is essential for successful group/role/organization sync.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n[debu]  coderd.userauth: got oidc claims  request_id=49e86507-6842-4b0b-94d4-f245e62e49f3  source=id_token  claim_fields=\"[aio aud email exp groups iat idp iss name nbf oid preferred_username rh sub tid uti ver]\"  blank=[]\n\n[debu]  coderd.userauth: got oidc claims  request_id=49e86507-6842-4b0b-94d4-f245e62e49f3  source=userinfo  claim_fields=\"[email family_name given_name name picture sub]\"  blank=[]\n\n[debu]  coderd.userauth: got oidc claims  request_id=49e86507-6842-4b0b-94d4-f245e62e49f3  source=merged  claim_fields=\"[aio aud email exp family_name given_name groups iat idp iss name nbf oid picture preferred_username rh sub tid uti ver]\"  blank=[]\n\n[debu]  coderd: groups returned in oidc claims  request_id=49e86507-6842-4b0b-94d4-f245e62e49f3  email=ben@coder.com  username=ben  len=3  groups=\"[c8048e91-f5c3-47e5-9693-834de84034ad 66ad2cc3-a42f-4574-a281-40d1922e5b65 70b48175-107b-4ad8-b405-4d888a1c466f]\"\n```\n\n----------------------------------------\n\nTITLE: Show Group Sync Settings via Coder CLI\nDESCRIPTION: This command retrieves the current group sync settings for a specified organization using the Coder CLI. It requires the user to be logged in with Owner or Organization Admin role. The output is a JSON object containing the `field`, `mapping`, `regex_filter`, and `auto_create_missing_groups` configurations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncoder organizations settings show group-sync \\\n  --org <org-name> \\\n  > group-sync.json\n```\n\n----------------------------------------\n\nTITLE: Entitlements Response Schema\nDESCRIPTION: This JSON schema outlines the structure of the entitlements response from the Coder server. It includes information about errors, features (with actual, enabled, entitlement, and limit properties), license status, refresh timestamp, telemetry requirement, trial status, and warnings. The features are represented as a dictionary where the keys are feature names.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"errors\": [\n    \"string\"\n  ],\n  \"features\": {\n    \"property1\": {\n      \"actual\": 0,\n      \"enabled\": true,\n      \"entitlement\": \"entitled\",\n      \"limit\": 0\n    },\n    \"property2\": {\n      \"actual\": 0,\n      \"enabled\": true,\n      \"entitlement\": \"entitled\",\n      \"limit\": 0\n    }\n  },\n  \"has_license\": true,\n  \"refreshed_at\": \"2019-08-24T14:15:22Z\",\n  \"require_telemetry\": true,\n  \"trial\": true,\n  \"warnings\": [\n    \"string\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Coder templates delete command usage\nDESCRIPTION: Displays the usage of the coder templates delete command. This command allows users to delete templates by specifying their names. It includes options for bypassing prompts and selecting the target organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/templates_delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder templates delete [flags] [name...]\n```\n\n----------------------------------------\n\nTITLE: JupyterLab Module Integration\nDESCRIPTION: This Terraform module integrates JupyterLab into the Coder environment. It requires the `agent_id` of the Coder agent. The module handles the installation and configuration of JupyterLab.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_10\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"jupyter\" {\n  source   = \"registry.coder.com/modules/jupyter-lab/coder\"\n  version  = \"1.0.0\"\n  agent_id = coder_agent.main.id\n}\n```\n\n----------------------------------------\n\nTITLE: Get System Notification Templates - cURL\nDESCRIPTION: This cURL command retrieves system notification templates from the Coder API. It requires an API key for authentication via the `Coder-Session-Token` header. The response is expected to be a JSON array of notification templates.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X GET http://coder-server:8080/api/v2/notifications/templates/system \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example OAuth2 Token Response (POST)\nDESCRIPTION: Example JSON response structure for a successful POST request to exchange OAuth2 tokens.  Shows the returned `access_token`, `expires_in`, `expiry`, `refresh_token`, and `token_type` fields.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"string\",\n  \"expires_in\": 0,\n  \"expiry\": \"string\",\n  \"refresh_token\": \"string\",\n  \"token_type\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Group Sync in Coder Organizations (CLI)\nDESCRIPTION: This command is used to set group synchronization settings within Coder organizations using the Coder CLI. It enables the synchronization of user groups from an Identity Provider (IdP). No specific parameters are shown in the provided code snippet, but the command likely accepts various flags/options to configure the synchronization process (e.g., specifying the IdP, group mappings, sync intervals).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_set_group-sync.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings set group-sync\n```\n\n----------------------------------------\n\nTITLE: Listing PostgreSQL Schemas\nDESCRIPTION: This SQL query lists all available schemas in the PostgreSQL database. It's used to verify that the custom schema has been created successfully. Requires connection to the database.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/external-database.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nList of schemas\n Name      | Owner\n-----------+----------\n myschema  | coder\n public    | postgres\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Registering JetBrains Gateway Backend - Shell\nDESCRIPTION: Registers the installed JetBrains Gateway backend with the remote development server.  Assumes the IDE backend is located at the specified path.  Intended to be run as part of the template's `startup_script`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-pre-install.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n~/JetBrains/backends/IU/ideaIU-243.26053.27/bin/remote-dev-server.sh registerBackendLocationForGateway\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Schedule Stop Example\nDESCRIPTION: An example of using the `coder schedule stop` command to schedule the workspace 'my-workspace' to stop after 2 hours and 30 minutes. This demonstrates the syntax for specifying the workspace name and the desired shutdown duration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule_stop.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder schedule stop my-workspace 2h30m\n```\n\n----------------------------------------\n\nTITLE: Disabling Agent Stats Collection - YAML\nDESCRIPTION: This snippet demonstrates how to disable the collection of agent statistics in Coder Server when using Prometheus. This is useful in high-scale deployments to avoid large cardinality when agent stats are not needed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/best-practices/scale-coder.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nCODER_PROMETHEUS_COLLECT_AGENT_STATS=false\n```\n\n----------------------------------------\n\nTITLE: Listing Coder workspaces with curl\nDESCRIPTION: Example of using curl to list workspaces owned by the current user (me) through the Coder API v2. Requires a valid Coder session token in the header for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://coder.example.com/api/v2/workspaces?q=owner:me \\\n-H \"Coder-Session-Token: <your-token>\"\n```\n\n----------------------------------------\n\nTITLE: Searching workspaces based on last activity\nDESCRIPTION: This code snippet shows the format for searching workspaces based on their last activity using the Coder platform. It defines the `last_seen_before` and `last_seen_after` parameters to specify a time range for the last activity.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v0.25.0.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nlast_seen_before:\"2023-01-14T23:59:59Z\" last_seen_after:\"2023-01-08T00:00:00Z\"\n```\n\n----------------------------------------\n\nTITLE: Log out User using curl\nDESCRIPTION: This snippet demonstrates logging out a user using the curl command-line tool. It sends a POST request to `/api/v2/users/logout` including authentication token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/users/logout \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Showing the Current User with Coder CLI\nDESCRIPTION: This command shows information about the currently authenticated user, using the 'me' alias.  It retrieves and displays the details of the user currently logged into the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/users_show.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder users show me\n```\n\n----------------------------------------\n\nTITLE: Fetch Group IDs Using Coder API\nDESCRIPTION: This endpoint is used to fetch the corresponding group IDs within Coder. These IDs are required when configuring group synchronization to map IdP groups to Coder groups.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://[coder.example.com]/api/v2/groups\n```\n\n----------------------------------------\n\nTITLE: Registering Gateway Backend (Shell)\nDESCRIPTION: Registers the location of the installed JetBrains Gateway backend with the remote-dev-server script.  This allows JetBrains Gateway to locate and connect to the backend IDE instance.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/jetbrains-gateway.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n~/JetBrains/backends/IU/ideaIU-243.26053.27/bin/remote-dev-server.sh registerBackendLocationForGateway\n```\n\n----------------------------------------\n\nTITLE: Resolving Autostart - cURL Example\nDESCRIPTION: Demonstrates how to resolve workspace autostart settings using a GET request with cURL. Authentication is required via the `Coder-Session-Token` header. The request is sent to `/workspaces/{workspace}/resolve-autostart`, with `{workspace}` representing the workspace UUID.  It expects a JSON response indicating if there are any parameter mismatches.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaces/{workspace}/resolve-autostart \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pulling the Coder container image\nDESCRIPTION: This command pulls the Coder v0.26.0 container image from the GitHub Container Registry. This is a standard Docker command to retrieve the specified image.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v0.26.0.md#_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull ghcr.io/coder/coder:v0.26.0\n```\n\n----------------------------------------\n\nTITLE: Starting a provisioner with user tokens\nDESCRIPTION: Starts a provisioner using a user's authentication token after logging in with `coder login`. The user must have the `Template Admin` or `Owner` role.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/provisioners/index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncoder login https://<your-coder-url>\ncoder provisioner start\n```\n\n----------------------------------------\n\nTITLE: Showing Workspace Schedules\nDESCRIPTION: The `coder schedule show` command displays information about a workspace's automatic start schedule, next scheduled start time, stop duration, and next scheduled stop time. It can target a specific workspace, search for workspaces via a query, or list schedules for all workspaces.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/schedule_show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder schedule show [flags] <workspace | --search <query> | --all>\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Build Logs Response Example\nDESCRIPTION: This JSON array provides an example of a successful (200) response when retrieving workspace build logs. Each entry in the array represents a log entry, containing its creation timestamp, ID, log level, source, output, and stage.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"id\": 0,\n    \"log_level\": \"trace\",\n    \"log_source\": \"provisioner_daemon\",\n    \"output\": \"string\",\n    \"stage\": \"string\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Editing Coder User Groups\nDESCRIPTION: This code snippet illustrates the basic usage of the `coder groups edit` command. The command is used to modify the properties of an existing user group. This requires the Coder CLI to be installed and configured.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/groups_edit.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder groups edit [flags] <name>\n```\n\n----------------------------------------\n\nTITLE: Safe Experiments Response Example\nDESCRIPTION: This JSON snippet represents the response when querying for safe experiments. It's presented as an array of experiment names.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"example\"\n]\n```\n\n----------------------------------------\n\nTITLE: Start the Coder server\nDESCRIPTION: This command starts the Coder server. The Coder binary must be installed and accessible in the system's PATH. The server will provide an access URL for creating an administrator account.\nSOURCE: https://github.com/coder/coder/blob/main/docs/start/local-deploy.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder server\n```\n\n----------------------------------------\n\nTITLE: Mounting GCP Identity Token in Kubernetes Pod\nDESCRIPTION: Configures a Kubernetes pod to mount the Google Cloud service account identity token from a secret. It defines a volume and volume mount to expose the token file at `/home/coder/.aws/gcp-identity-token` within the pod.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/gcp-to-aws.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\ncoder:\n  volumes:\n    - name: \"gcp-identity-mount\"\n      secret:\n        secretName: \"gcp-identity-token\"\n  volumeMounts:\n    - name: \"gcp-identity-mount\"\n      mountPath: \"/home/coder/.aws/gcp-identity-token\"\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Cloning and Pushing Coder Template\nDESCRIPTION: This code snippet demonstrates how to clone the Coder repository, navigate to the AWS Linux template example, and push the template to Coder. It uses standard Git commands and the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/coder/coder\ncd examples/templates/aws-linux\ncoder templates push\n```\n\n----------------------------------------\n\nTITLE: Making Certbot Renewal File Executable\nDESCRIPTION: This command makes the Certbot renewal file executable.  This is required for cron to be able to execute the file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo chmod +x /etc/cron.weekly/certbot\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key URL (Shell)\nDESCRIPTION: Defines the pgpPublicKeyUrl, which provides the URL to the KEYS file. This file contains PGP public keys for verifying the integrity of downloaded client builds. JetBrains Gateway uses it to ensure that downloaded files are authentic and have not been tampered with.  The URL can be http://, https://, or file://.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ cat pgpPublicKeyUrl # a URL to the KEYS file that was downloaded with the clients builds.\n\nhttps://internal.site/KEYS\n```\n\n----------------------------------------\n\nTITLE: Deleting a Coder License via CLI\nDESCRIPTION: This command deletes a Coder license using its unique ID.  The ID is passed as an argument to the `coder licenses delete` command. It provides aliases like `del` and `rm` for convenience.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/licenses_delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder licenses delete <id>\n```\n\n----------------------------------------\n\nTITLE: Get Site Member Roles Response Example\nDESCRIPTION: This JSON snippet shows an example response for the GET /users/roles endpoint. It demonstrates the structure of the response, including assignable roles, built-in status, display name, name, organization ID, and associated permissions for organizations, sites, and users.  It returns an array of role objects, each containing properties that define the role's attributes and permissions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"assignable\": true,\n    \"built_in\": true,\n    \"display_name\": \"string\",\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"site_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"user_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessibility with MUI visuallyHidden - Typescript\nDESCRIPTION: This snippet demonstrates how to use MUI's `visuallyHidden` utility to add accessible text to a component. The text \"Settings\" is visually hidden but is still present in the HTML markup, making it accessible to screen readers.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { visuallyHidden } from \"@mui/utils\";\n\n<Button>\n    <GearIcon />\n    <Box component=\"span\" sx={visuallyHidden}>\n        Settings\n    </Box>\n</Button>;\n```\n\n----------------------------------------\n\nTITLE: Example App Host Response\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the `/applications/host` endpoint. The response contains a single `host` field, which is a string representing the application host.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/applications.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Coder Helm Chart (Mainline)\nDESCRIPTION: This command installs the mainline version of the Coder Helm chart. It uses the `helm install` command, specifying the release name (`coder`), chart location (`coder-v2/coder`), namespace (`coder`), values file (`values.yaml`), and version (`2.10.0`). Ensure Helm is installed and configured to connect to your Kubernetes cluster.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/release/testdata/autoversion/docs/kubernetes.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install coder coder-v2/coder \\\n    --namespace coder \\\n    --values values.yaml \\\n    --version 2.10.0\n```\n\n----------------------------------------\n\nTITLE: Provisioner Jobs Usage\nDESCRIPTION: Displays the basic usage of the `coder provisioner jobs` command.  This is the entry point for managing provisioner jobs via the command line. It does not require any specific dependencies beyond the Coder CLI itself.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_jobs.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner jobs\n```\n\n----------------------------------------\n\nTITLE: Configure Coder Service and Cache\nDESCRIPTION: Configures the Coder service, connection URLs, and cache directory using environment variables and volumes. It sets the service type to `ClusterIP`, defines environment variables for PostgreSQL connection, access URL, and cache directory, and mounts a temporary volume for the cache.  The `CODER_CACHE_DIRECTORY` is mapped to `/tmp/coder` to address read-only filesystem constraints.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  service:\n    type: ClusterIP\n  env:\n    - name: CODER_CACHE_DIRECTORY\n      value: /tmp/coder\n    - name: CODER_PG_CONNECTION_URL\n      valueFrom:\n        secretKeyRef:\n          key: url\n          name: coder-db-url\n    - name: CODER_ACCESS_URL\n      value: \"https://coder-example.apps.openshiftapps.com\"\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: <project-specific UID>\n    runAsGroup: <project-specific GID>\n    readOnlyRootFilesystem: true\n  volumes:\n    - name: \"cache\"\n      emptyDir:\n        sizeLimit: 1Gi\n  volumeMounts:\n    - name: \"cache\"\n      mountPath: \"/tmp\"\n      readOnly: false\n```\n\n----------------------------------------\n\nTITLE: Hide Resource in Coder Dashboard\nDESCRIPTION: This Terraform configuration demonstrates how to hide a resource in the Coder dashboard UI.  It uses the `coder_metadata` resource with the `hide = true` attribute to prevent the `kubernetes_service_account` from being displayed, keeping the workspace view clean. The `count` attribute ensures the resource is only present when the workspace is active.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/resource-metadata.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"coder_metadata\" \"hide_serviceaccount\" {\n  count = data.coder_workspace.me.start_count\n  resource_id = kubernetes_service_account.user_data.id\n  hide = true\n  item {\n    key = \"name\"\n    value = kubernetes_deployment.coder[0].metadata[0].name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Dormancy Status Request Body\nDESCRIPTION: This JSON payload sets the dormancy status of a workspace. The 'dormant' field, a boolean value, indicates whether the workspace should be set to dormant (true) or active (false). It's used in the body of the PUT request to /workspaces/{workspace}/dormant.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dormant\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Update Notifications Settings - Example Request Body\nDESCRIPTION: This JSON represents the body of the PUT request to update notification settings.  It can be used to, for example, pause the notification service.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notifier_paused\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabled Experiments Response Example\nDESCRIPTION: This JSON snippet shows a basic example of the response structure returned by the experiments endpoint, which is a simple array of experiment names.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"example\"\n]\n```\n\n----------------------------------------\n\nTITLE: JRE Download URL (Shell)\nDESCRIPTION: Defines the jreDownloadUrl, which points to the JBR (JetBrains Runtime) files for the JetBrains IDE.  This URL is used by JetBrains Gateway to download the correct JRE. The URL can be http://, https://, or file://.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cat jreDownloadUrl # a path for JBR that you got from the clients' downloader (it could be http://, https://, or file://)\n\nhttps://internal.site/jre/\n```\n\n----------------------------------------\n\nTITLE: Displaying Coder Public Key\nDESCRIPTION: This command displays the user's Coder public key used for Git operations. It is invoked via the command line using 'coder publickey'.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/publickey.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder publickey [flags]\n```\n\n----------------------------------------\n\nTITLE: Login User - JSON Body\nDESCRIPTION: This JSON payload contains the user's email and password for authentication via the `/users/login` endpoint.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/authorization.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Terraform Module from GitHub\nDESCRIPTION: This Terraform code demonstrates how to reference a Terraform module from a GitHub repository within a Coder template. It allows for code reuse and customization by passing template-specific parameters. It also includes a template-specific resource for each template.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_12\n\nLANGUAGE: Terraform\nCODE:\n```\n# template1/main.tf\nmodule \"central-coder-module\" {\n  source = \"github.com/org/central-coder-module\"\n  myparam = \"custom-for-template1\"\n}\n\nresource \"ebs_volume\" \"custom_template1_only_resource\" {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Dotfiles Command\nDESCRIPTION: Executes the coder dotfiles command with specified flags and a Git repository URL. The git_repo_url argument is required and specifies the location of the dotfiles repository.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/dotfiles.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder dotfiles [flags] <git_repo_url>\n```\n\n----------------------------------------\n\nTITLE: Allowing Everyone to Sign Up Using GitHub via Env Variable\nDESCRIPTION: This environment variable allows anyone with a GitHub account to sign up for Coder. Setting this variable to `true` removes the restriction to specific organizations.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/github-auth.md#_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nCODER_OAUTH2_GITHUB_ALLOW_EVERYONE=true\n```\n\n----------------------------------------\n\nTITLE: Patch Template Version Request Body (JSON)\nDESCRIPTION: This JSON snippet shows the expected structure for the request body when patching a template version. It includes fields such as \"message\" and \"name\". These fields are used to update the corresponding template version.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"message\": \"string\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Coder Helm Chart (Stable)\nDESCRIPTION: This command installs the stable version of the Coder Helm chart.  It uses the `helm install` command, specifying the release name (`coder`), chart location (`coder-v2/coder`), namespace (`coder`), values file (`values.yaml`), and version (`2.9.1`). Ensure Helm is installed and configured to connect to your Kubernetes cluster.\nSOURCE: https://github.com/coder/coder/blob/main/scripts/release/testdata/autoversion/docs/kubernetes.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install coder coder-v2/coder \\\n    --namespace coder \\\n    --values values.yaml \\\n    --version 2.9.1\n```\n\n----------------------------------------\n\nTITLE: Adding Organization Member with Curl\nDESCRIPTION: This snippet demonstrates how to add a user as a member to an organization using a curl command. It sends a POST request to the specified endpoint with the required headers for authentication.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/organizations/{organization}/members/{user} \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update Health Settings with Curl\nDESCRIPTION: This shell snippet demonstrates how to use curl to make a PUT request to the `/debug/health/settings` endpoint. It includes setting the `Content-Type` and `Accept` headers to `application/json`, and uses the `Coder-Session-Token` header for authentication.  The example shows how to send a request to update health settings using the command line.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/debug.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/debug/health/settings \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Pushing Coder Template to Instance\nDESCRIPTION: This shell command pushes the Coder template to the running Coder instance.  It assumes you are in the correct directory where the template was created (e.g., `./azure-linux`).\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/azure-vm.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncoder templates push\n```\n\n----------------------------------------\n\nTITLE: Update OAuth2 Application Request Body JSON\nDESCRIPTION: This JSON snippet represents the request body required to update an existing OAuth2 application using the `PUT /oauth2-provider/apps/{app}` endpoint.  It includes the `callback_url`, `icon`, and `name` parameters. All fields are strings.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"callback_url\": \"string\",\n  \"icon\": \"string\",\n  \"name\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resume Coder Notifications\nDESCRIPTION: This command allows administrators to resume Coder notifications after they have been paused. It re-enables the dispatching of messages.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/notifications.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ coder notifications resume\n```\n\n----------------------------------------\n\nTITLE: Import Certificate to Java Trust Store (Linux)\nDESCRIPTION: Imports a given certificate to the Java trust store of a JetBrains Gateway installation in Linux. This is used to establish a secure connection to Coder deployments utilizing internally signed certificates. It requires the `keytool` utility which comes with Java.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkeytool -import -alias coder -file <certificate> -keystore /path/to/trust/store\n```\n\n----------------------------------------\n\nTITLE: Update Active Template Version Response (JSON)\nDESCRIPTION: This JSON snippet is an example of a successful response after updating a template version. It includes a detail message, a general message, and potential validation errors, each containing a detail message and a field name. The `detail` and `message` fields provide information about the operation's status, while the `validations` array highlights any issues encountered during the update process.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: SCIM User Update Response Example\nDESCRIPTION: This JSON payload represents the successful response after updating a SCIM user. It contains details about the updated user, including fields like avatar URL, creation and update timestamps, email, ID, login type, name, organization IDs, roles, status, theme preference, and username.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"avatar_url\": \"http://example.com\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"email\": \"user@example.com\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_seen_at\": \"2019-08-24T14:15:22Z\",\n  \"login_type\": \"\",\n  \"name\": \"string\",\n  \"organization_ids\": [\n    \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n  ],\n  \"roles\": [\n    {\n      \"display_name\": \"string\",\n      \"name\": \"string\",\n      \"organization_id\": \"string\"\n    }\n  ],\n  \"status\": \"active\",\n  \"theme_preference\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"username\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Check Initial User Created Response\nDESCRIPTION: This is an example JSON response returned when checking if the initial user has been created. Includes a `detail`, `message`, and array of `validations`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DERP Relay Configuration (JSON)\nDESCRIPTION: This JSON configuration defines a custom DERP relay server for Coder. It specifies the region ID, code, name, and node details, including the hostname. This configuration is used when you want lower latency than what Tailscale offers or need additional DERP relays for offline deployments.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/index.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Regions\": {\n    \"1\": {\n      \"RegionID\": 1,\n      \"RegionCode\": \"myderp\",\n      \"RegionName\": \"My DERP\",\n      \"Nodes\": [\n        {\n          \"Name\": \"1\",\n          \"RegionID\": 1,\n          \"HostName\": \"your-hostname.com\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing TLS Secret in Coder Helm Chart Values\nDESCRIPTION: This snippet shows how to reference the TLS secret created in Kubernetes within the Coder Helm chart values. It also shows how to configure the Ingress controller if it is used to terminate TLS.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/setup/index.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncoder:\n  tls:\n    secretName:\n      - coder-tls\n\n  # Alternatively, if you use an Ingress controller to terminate TLS,\n  # set the following values:\n  ingress:\n    enable: true\n    secretName: coder-tls\n    wildcardSecretName: coder-tls\n```\n\n----------------------------------------\n\nTITLE: Get Resources (curl)\nDESCRIPTION: This curl command retrieves resources for a template version dry-run job.  It requires the template version ID and job ID. The command includes headers for accepting JSON and providing the Coder session token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/dry-run/{jobID}/resources \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: This YAML snippet shows how to define Terraform variables for Docker image references. It is part of the configuration file used in the Coder template to specify the Docker images for Go and Java SDKs.\nSOURCE: https://github.com/coder/coder/blob/main/examples/parameters-dynamic-options/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo_image: \"bitnami/golang:1.20-debian-11\"\njava_image: \"bitnami/java:1.8-debian-11\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Authentication Success Response (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful authentication response from a Google Cloud instance. The response includes a `session_token` that should be used by the agent for further requests.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"session_token\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Editing NGINX Configuration File\nDESCRIPTION: This command opens the NGINX configuration file for editing.  This allows the user to add the reverse proxy configuration for Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo nano /etc/nginx/sites-available/coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Example Coder API 200 Response\nDESCRIPTION: This is an example of a successful (200) response from the Coder API. It details the structure of the response, including fields like build number, creation timestamps, IDs, job details (status, errors, metadata), resource information (agents, scripts), and workspace details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_19\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"build_number\": 0,\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"deadline\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n    \"initiator_name\": \"string\",\n    \"job\": {\n      \"available_workers\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"canceled_at\": \"2019-08-24T14:15:22Z\",\n      \"completed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"error\": \"string\",\n      \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n      \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"input\": {\n        \"error\": \"string\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n      },\n      \"metadata\": {\n        \"template_display_name\": \"string\",\n        \"template_icon\": \"string\",\n        \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n        \"template_name\": \"string\",\n        \"template_version_name\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"queue_position\": 0,\n      \"queue_size\": 0,\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"pending\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"type\": \"template_version_import\",\n      \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n    },\n    \"matched_provisioners\": {\n      \"available\": 0,\n      \"count\": 0,\n      \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n    },\n    \"max_deadline\": \"2019-08-24T14:15:22Z\",\n    \"reason\": \"initiator\",\n    \"resources\": [\n      {\n        \"agents\": [\n          {\n            \"api_version\": \"string\",\n            \"apps\": [\n              {\n                \"command\": \"string\",\n                \"display_name\": \"string\",\n                \"external\": true,\n                \"health\": \"disabled\",\n                \"healthcheck\": {\n                  \"interval\": 0,\n                  \"threshold\": 0,\n                  \"url\": \"string\"\n                },\n                \"hidden\": true,\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"open_in\": \"slim-window\",\n                \"sharing_level\": \"owner\",\n                \"slug\": \"string\",\n                \"statuses\": [\n                  {\n                    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                    \"created_at\": \"2019-08-24T14:15:22Z\",\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"message\": \"string\",\n                    \"needs_user_attention\": true,\n                    \"state\": \"working\",\n                    \"uri\": \"string\",\n                    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                  }\n                ],\n                \"subdomain\": true,\n                \"subdomain_name\": \"string\",\n                \"url\": \"string\"\n              }\n            ],\n            \"architecture\": \"string\",\n            \"connection_timeout_seconds\": 0,\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"directory\": \"string\",\n            \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n            \"display_apps\": [\n              \"vscode\"\n            ],\n            \"environment_variables\": {\n              \"property1\": \"string\",\n              \"property2\": \"string\"\n            },\n            \"expanded_directory\": \"string\",\n            \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"health\": {\n              \"healthy\": false,\n              \"reason\": \"agent has lost connection\"\n            },\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"instance_id\": \"string\",\n            \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"latency\": {\n              \"property1\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              },\n              \"property2\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              }\n            },\n            \"lifecycle_state\": \"created\",\n            \"log_sources\": [\n              {\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"display_name\": \"string\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n              }\n            ],\n            \"logs_length\": 0,\n            \"logs_overflowed\": true,\n            \"name\": \"string\",\n            \"operating_system\": \"string\",\n            \"ready_at\": \"2019-08-24T14:15:22Z\",\n            \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n            \"scripts\": [\n              {\n                \"cron\": \"string\",\n                \"display_name\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"log_path\": \"string\",\n                \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n                \"run_on_start\": true,\n                \"run_on_stop\": true,\n                \"script\": \"string\",\n                \"start_blocks_login\": true,\n                \"timeout\": 0\n              }\n            ],\n            \"started_at\": \"2019-08-24T14:15:22Z\",\n            \"startup_script_behavior\": \"blocking\",\n            \"status\": \"connecting\",\n            \"subsystems\": [\n              \"envbox\"\n            ],\n            \"troubleshooting_url\": \"string\",\n            \"updated_at\": \"2019-08-24T14:15:22Z\",\n            \"version\": \"string\"\n          }\n        ],\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"daily_cost\": 0,\n        \"hide\": true,\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n        \"metadata\": [\n          {\n            \"key\": \"string\",\n            \"sensitive\": true,\n            \"value\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"workspace_transition\": \"start\"\n      }\n    ],\n    \"status\": \"pending\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"template_version_name\": \"string\",\n    \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n    \"transition\": \"start\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\",\n    \"workspace_owner_avatar_url\": \"string\",\n    \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n    \"workspace_owner_name\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: CloudWatch Log Insights Query\nDESCRIPTION: This is an example query to be run in AWS CloudWatch Log Insights to view workspace process logs. It filters the logs by container name, username, and workspace name and displays the timestamp and command line.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nfields @timestamp, log_processed.fields.cmdline\n| sort @timestamp asc\n| filter kubernetes.container_name=\"exectrace\"\n| filter log_processed.fields.labels.username=\"zac\"\n| filter log_processed.fields.labels.workspace_name=\"code\"\n```\n\n----------------------------------------\n\nTITLE: Update Workspace Automatic Updates Request Body\nDESCRIPTION: This JSON payload defines the structure for updating the automatic updates setting for a workspace. It contains an 'automatic_updates' field, which can be set to 'always'. This payload is included in the body of the PUT request to /workspaces/{workspace}/autoupdates.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"automatic_updates\": \"always\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create template directory and navigate to it (macOS/Linux)\nDESCRIPTION: This shell snippet creates a directory named `coder-templates` in the user's home directory and then navigates into that directory. This is typically the first step when managing templates using the Coder CLI on macOS or Linux.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/creating-templates.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir $HOME/coder-templates\ncd $HOME/coder-templates\n```\n\n----------------------------------------\n\nTITLE: Log Source Request Body Example\nDESCRIPTION: This JSON snippet shows the expected format for the request body when posting a log source. It contains the display_name, icon, and id of the log source.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"id\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Colima and Docker with Homebrew\nDESCRIPTION: This shell script installs Colima and Docker using Homebrew, a package manager for macOS. Colima is a Docker Desktop alternative, suitable for users who want to try Coder on a macOS device without installing Docker Desktop.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install colima\nbrew install docker\n```\n\n----------------------------------------\n\nTITLE: Coder Provisioner Usage\nDESCRIPTION: This command provides the base usage instructions for the `coder provisioner` command. It serves as the entry point for managing provisioner daemons and jobs within Coder.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner\n```\n\n----------------------------------------\n\nTITLE: Workspace Build Log Response Schema Example\nDESCRIPTION: This JSON snippet is an example of the response schema when retrieving workspace build logs. It's an array of log entries, each containing details such as the creation timestamp, ID, log level, log source, output message, and stage. These logs are useful for debugging and monitoring workspace build processes.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/builds.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[{\"created_at\":\"string(date-time)\",\"id\":0,\"log_level\":\"trace\",\"log_source\":\"provisioner_daemon\",\"output\":\"string\",\"stage\":\"string\"}]\n```\n\n----------------------------------------\n\nTITLE: Log in to Coder deployment\nDESCRIPTION: This command logs the user into a specified Coder deployment. It requires the Coder CLI to be installed and configured. The user will be prompted to authenticate.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/zed.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncoder login coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Delete OAuth2 Application using curl\nDESCRIPTION: This code snippet demonstrates how to delete an existing OAuth2 application using a `curl` command. It sends a DELETE request to the `/oauth2-provider/apps/{app}` endpoint, where `{app}` should be replaced with the application ID. The request requires authentication via the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X DELETE http://coder-server:8080/api/v2/oauth2-provider/apps/{app} \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Removing Coder settings - Windows\nDESCRIPTION: This command removes the Coder settings directory located in the user's AppData directory on Windows systems.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nrmdir %AppData%\\coderv2\n```\n\n----------------------------------------\n\nTITLE: Querying Update Check using curl\nDESCRIPTION: This code snippet illustrates how to perform an update check with a curl request. No specific authentication is detailed.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/updatecheck \\\n  -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Update Read Status of Notification - Example Response\nDESCRIPTION: This example JSON response illustrates a possible structure after attempting to update the notification status. It includes details for error handling and validation.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Coder App for External Link\nDESCRIPTION: Creates a Coder app resource for an external link, such as a link to Coder documentation.  This app is external and points to the given url.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_5\n\nLANGUAGE: tf\nCODE:\n```\nresource \"coder_app\" \"coder-server-doc\" {\n  agent_id     = coder_agent.main.id\n  icon         = \"/emojis/1f4dd.png\"\n  slug         = \"getting-started\"\n  url          = \"https://coder.com/docs/code-server\"\n  external     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Update Read Status of Notification - cURL\nDESCRIPTION: This cURL command updates the read status of a specific notification. It sends a PUT request to `/api/v2/notifications/inbox/{id}/read-status` with the `Coder-Session-Token` header. The `{id}` path parameter specifies the notification ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/notifications/inbox/{id}/read-status \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Create Database Migration Script\nDESCRIPTION: This shell script creates a new database migration file with `.up.sql` and `.down.sql` scripts for Coder.  It accepts the migration name as an argument and generates the corresponding SQL files. The migration files will be created in the `coderd/database/migrations/` directory.\nSOURCE: https://github.com/coder/coder/blob/main/docs/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./coderd/database/migrations/create_migration.sh my name\n```\n\n----------------------------------------\n\nTITLE: Coder Groups Usage\nDESCRIPTION: Shows the basic usage of the `coder groups` command. This command is the entry point for managing groups in the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/groups.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder groups\n```\n\n----------------------------------------\n\nTITLE: Downloading JetBrains Client Downloader (Shell)\nDESCRIPTION: Downloads and extracts the JetBrains Client Downloader using wget and tar. The downloaded tool is used to obtain JetBrains IDE clients and backends for offline use. This is the initial step in setting up JetBrains Gateway in an air-gapped environment.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwget https://download.jetbrains.com/idea/code-with-me/backend/jetbrains-clients-downloader-linux-x86_64-1867.tar.gz && \\\ntar -xzvf jetbrains-clients-downloader-linux-x86_64-1867.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining Coder App for Airflow\nDESCRIPTION: This Terraform resource defines a Coder application for Airflow. It specifies the agent ID, slug, display name, URL, and icon. Subdomain is set to true. The share is set to owner. It also includes a healthcheck configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_14\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"coder_app\" \"airflow\" {\n  agent_id      = coder_agent.coder.id\n  slug          = \"airflow\"\n  display_name  = \"Airflow\"\n  icon          = \"/icon/airflow.svg\"\n  url           = \"http://localhost:8080\"\n  subdomain     = true\n  share         = \"owner\"\n\n  healthcheck {\n    url       = \"http://localhost:8080/healthz\"\n    interval  = 10\n    threshold = 60\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Coder App for Code-Server\nDESCRIPTION: Creates a Coder app resource for code-server, allowing developers to access it from the workspace's Coder dashboard. It defines the URL, icon, and healthcheck for the app.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_4\n\nLANGUAGE: tf\nCODE:\n```\nresource \"coder_app\" \"code-server\" {\n  agent_id     = coder_agent.main.id\n  slug         = \"code-server\"\n  display_name = \"code-server\"\n  url          = \"http://localhost:13337/?folder=/home/${local.username}\"\n  icon         = \"/icon/code.svg\"\n  subdomain    = false\n  share        = \"owner\"\n\n  healthcheck {\n    url       = \"http://localhost:13337/healthz\"\n    interval  = 5\n    threshold = 6\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Shell Script: Navigate to Template Directory\nDESCRIPTION: This snippet shows commands to navigate into a coder template directory.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/web-ides.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n# edit your template\ncd your-template/\nvim main.tf\n```\n\n----------------------------------------\n\nTITLE: Watch for New Inbox Notifications - cURL\nDESCRIPTION: This cURL command watches for new inbox notifications. It sends a GET request to `/api/v2/notifications/inbox/watch` with the `Coder-Session-Token` header. Query parameters such as `targets`, `templates`, `read_status`, and `format` can be used to filter the notifications and define the output format.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/notifications/inbox/watch \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Push Template to Coder CLI\nDESCRIPTION: This command pushes the updated template to the Coder CLI. The `-d` flag specifies the directory containing the template definition. The `--create` flag creates the template if it does not already exist.\nSOURCE: https://github.com/coder/coder/blob/main/examples/parameters/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/coder-dev.sh templates push examples-parameters -d examples/parameters --create\n```\n\n----------------------------------------\n\nTITLE: Show Organization Sync Settings using Coder CLI\nDESCRIPTION: This snippet demonstrates how to display the current organization synchronization settings using the Coder CLI. It requires the Coder CLI to be installed and configured. The output is a JSON payload showing the current sync configuration.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_18\n\nLANGUAGE: console\nCODE:\n```\ncoder organization settings show org-sync\n{\n   \"field\": \"organizations\",\n   \"mapping\": {\n      \"product\": [\"868e9b76-dc6e-46ab-be74-a891e9bd784b\", \"cbdcf774-9412-4118-8cd9-b3f502c84dfb\"]\n   },\n   \"organization_assign_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deployment Health with curl\nDESCRIPTION: This snippet shows how to retrieve deployment health information using a curl request. It requires a Coder-Session-Token for authentication and accepts an optional `force` query parameter to trigger a new health check. The request is sent to the `/api/v2/debug/health` endpoint, expecting a 200 OK response with application/json content.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/debug.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/debug/health \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example IdP Sync Claim Field Values Response\nDESCRIPTION: This JSON snippet shows an example response from the /settings/idpsync/field-values endpoint. It represents an array of strings, where each string is a claim field value. The expected status code is 200 OK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"string\"\n]\n```\n\n----------------------------------------\n\nTITLE: Create Organization: Example Response\nDESCRIPTION: This is an example JSON response received after successfully creating a new organization. It includes fields such as `created_at`, `description`, `display_name`, `icon`, `id`, `is_default`, `name`, and `updated_at`. The HTTP status code for a successful creation is 201.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"is_default\": true,\n  \"name\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Workspaces with Coder CLI\nDESCRIPTION: This command creates a number of Coder workspaces using the specified template and extra parameters. It uses the `coder exp scaletest create-workspaces` command with options for retries, workspace count, template selection, concurrency, timeouts, cleanup, and output formatting.  The environment variables control the number of workspaces created, the template used for workspace creation, the concurrency level for workspace creation, and the directory where the results are stored.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/infrastructure/scale-utility.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder exp scaletest create-workspaces \\\n        --retry 5 \\\n        --count \"${SCALETEST_PARAM_NUM_WORKSPACES}\" \\\n        --template \"${SCALETEST_PARAM_TEMPLATE}\" \\\n        --concurrency \"${SCALETEST_PARAM_CREATE_CONCURRENCY}\" \\\n        --timeout 5h \\\n        --job-timeout 5h \\\n        --no-cleanup \\\n        --output json:\"${SCALETEST_RESULTS_DIR}/create-workspaces.json\"\n```\n\n----------------------------------------\n\nTITLE: Archiving a Template Version with Curl\nDESCRIPTION: This snippet demonstrates how to archive a template version using a curl command. It requires the templateversion ID, a valid Accept header, and a Coder-Session-Token. Archiving sets the template version to a read-only state.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://coder-server:8080/api/v2/templateversions/{templateversion}/archive \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Install VS Code Extension for Desktop Client\nDESCRIPTION: This command installs a VS Code extension for use with the VS Code desktop client connected to a Coder workspace.  It uses the `code` command-line tool. Include this in the `startup_script`, or run it manually in the workspace terminal.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/vscode.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncode --extensions-dir ~/.vscode-server/extensions --install-extension \"$extension\"\n```\n\n----------------------------------------\n\nTITLE: Showing Selected Organization\nDESCRIPTION: Illustrates how to display the organization selected using the `--org` flag. This organization is the one currently in use by the Coder CLI.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_show.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncoder org show selected:\n\n   $ Shows the organizations selected with '--org=<org_name>'. This organization is the organization used by the cli.\n```\n\n----------------------------------------\n\nTITLE: Updating Appearance Config with curl\nDESCRIPTION: This shell command updates the appearance configuration on the Coder server. It uses a PUT request to the `/api/v2/appearance` endpoint, sending the new configuration in the request body. The command requires an API key in the `Coder-Session-Token` header and sets the `Content-Type` header to `application/json`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT http://coder-server:8080/api/v2/appearance \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Install PostgreSQL using Helm (In-Cluster)\nDESCRIPTION: This set of commands adds the Bitnami Helm repository and then installs PostgreSQL into the Kubernetes cluster within the 'coder' namespace. The installation configures a PostgreSQL instance with specific credentials (username, password, database name) and allocates 10Gi of persistent storage. It's used for development/PoC deployments.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/rancher.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add bitnami https://charts.bitnami.com/bitnami\nhelm install coder-db bitnami/postgresql \\\n    --namespace coder \\\n    --set auth.username=coder \\\n    --set auth.password=coder \\\n    --set auth.database=coder \\\n    --set persistence.size=10Gi\n```\n\n----------------------------------------\n\nTITLE: Get Workspace Proxies via GET Request\nDESCRIPTION: This curl command retrieves the workspace proxies using a GET request.  It requires the `Accept` header specifying the expected response type and the `Coder-Session-Token` header for authentication. The API key should be replaced with a valid authentication token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_121\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/workspaceproxies \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example Organization Response\nDESCRIPTION: This is an example response for an organization object in JSON format. It includes fields such as created_at, description, display_name, icon, id, is_default, name, and updated_at.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"is_default\": true,\n  \"name\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Workspace Connection with ping6 on macOS\nDESCRIPTION: This command uses `ping6` to verify the IPv6 connection to a Coder workspace from macOS.  Replace `your-workspace.coder` with the actual hostname of your workspace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/desktop/index.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nping6 -c 5 your-workspace.coder\n```\n\n----------------------------------------\n\nTITLE: Pause Coder Notifications\nDESCRIPTION: This command allows administrators to temporarily stop Coder notifications from being dispatched. This is useful in scenarios such as target outages (e.g., unavailable SMTP server or unresponsive Webhook).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/notifications.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ coder notifications pause\n```\n\n----------------------------------------\n\nTITLE: Create Custom Claim Rule for Email Verification in ADFS\nDESCRIPTION: This snippet demonstrates a custom claim rule for ADFS that sets the `email_verified` claim to `true`. This rule issues a static claim with the type `email_verified` and sets its value to `true`. This is necessary for Coder to properly handle email verification.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n=> issue(Type = \"email_verified\", Value = \"true\")\n```\n\n----------------------------------------\n\nTITLE: Get IDP Sync Claim Field Values\nDESCRIPTION: This code snippet demonstrates how to retrieve the available organization IDP sync claim field values using a GET request. It requires the organization ID and claim field as parameters and includes the necessary headers for authentication and content type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_56\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/field-values?claimField=string \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Starting Coder server\nDESCRIPTION: This snippet demonstrates how to start the Coder server. The first command starts the server with automatic external access URL setup. The second command requires a PostgreSQL instance and an external access URL.\nSOURCE: https://github.com/coder/coder/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Automatically sets up an external access URL on *.try.coder.app\ncoder server\n\n# Requires a PostgreSQL instance (version 13 or higher) and external access URL\ncoder server --postgres-url <url> --access-url <url>\n```\n\n----------------------------------------\n\nTITLE: Get Notifications Settings - Example Response\nDESCRIPTION: This example JSON response represents the notification settings. In this example, `notifier_paused` indicates whether notifications are paused.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notifier_paused\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DERP server connectivity with curl\nDESCRIPTION: This command is used to check the connectivity to a DERP server. It verifies that the DERP server is available and reachable over the network. The expected output includes information about the connection and the 'DERP requires connection upgrade' message.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/monitoring/health-check.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v \"https://coder.company.com/derp\"\n# Expected output:\n# *   Trying XXX.XXX.XXX.XXX\n# * Connected to https://coder.company.com (XXX.XXX.XXX.XXX) port 443 (#0)\n# DERP requires connection upgrade\n```\n\n----------------------------------------\n\nTITLE: Patch App Status Success Response (JSON)\nDESCRIPTION: This JSON snippet shows the successful response from patching an application's status. The response contains details and validation messages.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Update Group IDP Sync Settings Body\nDESCRIPTION: This JSON snippet represents the request body for updating group IDP sync settings. It includes properties like auto_create_missing_groups, field, legacy_group_name_mapping, mapping, and regex_filter, allowing for modification of the group synchronization behavior.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auto_create_missing_groups\": true,\n  \"field\": \"string\",\n  \"legacy_group_name_mapping\": {\n    \"property1\": \"string\",\n    \"property2\": \"string\"\n  },\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"regex_filter\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Role IdP Sync Config Body (JSON)\nDESCRIPTION: Defines the structure of the JSON body required for updating Role IdP Sync Configuration. It includes a single field called \"field\" which has type string.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_73\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upserted Workspace Agent Port Share - Response Example\nDESCRIPTION: This JSON snippet shows an example response after successfully upserting a workspace agent's port share. It includes the agent's name, port number, protocol, share level, and workspace ID. The response confirms the port share configuration. `agent_name`, `protocol`, `share_level`, and `workspace_id` are strings and `port` is an integer.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/portsharing.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"agent_name\": \"string\",\n  \"port\": 0,\n  \"protocol\": \"http\",\n  \"share_level\": \"owner\",\n  \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Template Version Response Example\nDESCRIPTION: This JSON snippet shows a sample response for a successful template version retrieval. It details the structure of the response, including fields like id, created_at, created_by, job, matched_provisioners, and more. The response includes nested objects providing detailed information about the template version's associated job and provisioner status.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"archived\": true,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"created_by\": {\n    \"avatar_url\": \"http://example.com\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"username\": \"string\"\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"job\": {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  },\n  \"matched_provisioners\": {\n    \"available\": 0,\n    \"count\": 0,\n    \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n  },\n  \"message\": \"string\",\n  \"name\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"readme\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"warnings\": [\n    \"UNSUPPORTED_WORKSPACES\"\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging into Coder via CLI\nDESCRIPTION: This shell command initiates the Coder login process via the command line. It requires a URL as an argument, which is typically the Coder Access URL found in the logs. Replace `<url***.try.coder.app>` with the correct URL.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/cloud/azure-vm.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncoder login <url***.try.coder.app>\n```\n\n----------------------------------------\n\nTITLE: Example Git SSH Key Response\nDESCRIPTION: This is an example JSON response for a Git SSH key. It showcases the structure of the response, including fields like `created_at`, `public_key`, `updated_at`, and `user_id`.  This response is returned after a successful operation involving Git SSH keys.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"public_key\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a license via Coder CLI (Text String)\nDESCRIPTION: This snippet demonstrates how to add a Coder license using the Coder CLI by providing the license as a text string. It assumes the Coder CLI is already installed and the user has logged in to their Coder deployment. The `-l` flag specifies the license string.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncoder licenses add -l 1f5...765\n```\n\n----------------------------------------\n\nTITLE: Regions Response Example\nDESCRIPTION: This JSON snippet represents the expected response format when successfully retrieving workspace regions. It includes an array of region objects, each containing properties like display name, health status, icon URL, ID, name, path app URL, and wildcard hostname. The response is structured within a 'regions' array.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaceproxies.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"regions\": [\n    {\n      \"display_name\": \"string\",\n      \"healthy\": true,\n      \"icon_url\": \"string\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"name\": \"string\",\n      \"path_app_url\": \"string\",\n      \"wildcard_hostname\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes secret for PostgreSQL CA certificate\nDESCRIPTION: Creates a Kubernetes secret named `postgres-certs` in the `coder` namespace containing the CA certificate for SSL connection to PostgreSQL.  This is used when Coder needs to verify the PostgreSQL server's certificate.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/postgres-ssl.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create secret tls postgres-certs -n coder --key=\"postgres-root.key\" --cert=\"postgres-root.crt\"\n```\n\n----------------------------------------\n\nTITLE: Example Git SSH Key Response\nDESCRIPTION: This JSON snippet shows the expected response format when retrieving the Git SSH key. It includes the private and public keys as string values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"private_key\": \"string\",\n  \"public_key\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Instance Identity Token Body Parameter (JSON)\nDESCRIPTION: This JSON snippet defines the structure of the request body for authenticating an agent on an AWS instance. It consists of two string parameters: `document` and `signature`. These parameters are required for validating the agent's identity.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"document\": \"string\",\n  \"signature\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Config Response Example\nDESCRIPTION: This JSON snippet details the response structure when requesting token configuration, containing information such as the maximum token lifetime.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_token_lifetime\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Template Version Response (200 OK)\nDESCRIPTION: This JSON snippet represents a successful (200 OK) response from the API when retrieving a template version. It contains various fields detailing the template version's properties, including its ID, creation timestamps, associated job information, and other metadata.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"archived\": true,\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"created_by\": {\n    \"avatar_url\": \"http://example.com\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"username\": \"string\"\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"job\": {\n    \"available_workers\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"canceled_at\": \"2019-08-24T14:15:22Z\",\n    \"completed_at\": \"2019-08-24T14:15:22Z\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"error\": \"string\",\n    \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n    \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"input\": {\n      \"error\": \"string\",\n      \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n      \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n    },\n    \"metadata\": {\n      \"template_display_name\": \"string\",\n      \"template_icon\": \"string\",\n      \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n      \"template_name\": \"string\",\n      \"template_version_name\": \"string\",\n      \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n      \"workspace_name\": \"string\"\n    },\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"queue_position\": 0,\n    \"queue_size\": 0,\n    \"started_at\": \"2019-08-24T14:15:22Z\",\n    \"status\": \"pending\",\n    \"tags\": {\n      \"property1\": \"string\",\n      \"property2\": \"string\"\n    },\n    \"type\": \"template_version_import\",\n    \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n  },\n  \"matched_provisioners\": {\n    \"available\": 0,\n    \"count\": 0,\n    \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n  },\n  \"message\": \"string\",\n  \"name\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"readme\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\",\n  \"warnings\": [\n    \"UNSUPPORTED_WORKSPACES\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Organization IdP Sync Settings Response\nDESCRIPTION: This JSON snippet shows an example response from the /settings/idpsync/organization endpoint.  It includes fields such as 'field', 'mapping' (which is a nested object with string arrays), and 'organization_assign_default'. The expected status code is 200 OK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"field\": \"string\",\n  \"mapping\": {\n    \"property1\": [\n      \"string\"\n    ],\n    \"property2\": [\n      \"string\"\n    ]\n  },\n  \"organization_assign_default\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Update Template ACL Response - JSON\nDESCRIPTION: This JSON snippet represents the response body received after updating a template's ACL. It includes details, a message, and an array of validations if any errors occurred during the update process. Each validation includes a detail and a field.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n{\"detail\": \"string\",\"message\": \"string\",\"validations\": [{\"detail\": \"string\",\"field\": \"string\"}]}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Costs with coder_metadata - HCL\nDESCRIPTION: This snippet demonstrates how to define costs for Docker volumes and containers within Coder using the `coder_metadata` resource. The `daily_cost` attribute specifies the number of credits consumed per day. When a workspace is shut down, associated resources (like containers) are deleted, reducing the overall cost. The code snippet also illustrates the usage of coder_workspace_owner and coder_workspace data sources to dynamically name resources.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/quotas.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"docker_volume\" \"home_volume\" {\n  name = \"coder-${data.coder_workspace_owner.me.name}-${data.coder_workspace.me.name}-root\"\n}\n\nresource \"coder_metadata\" \"home_volume\" {\n    resource_id = docker_volume.home_volume.id\n    daily_cost  = 10\n}\n\nresource \"docker_container\" \"workspace\" {\n  count = data.coder_workspace.me.start_count\n  image = \"codercom/code-server:latest\"\n  ...\n  volumes {\n    container_path = \"/home/coder/\"\n    volume_name    = docker_volume.home_volume.name\n    read_only      = false\n  }\n}\n\nresource \"coder_metadata\" \"workspace\" {\n    count       = data.coder_workspace.me.start_count\n    resource_id = docker_container.workspace.id\n    daily_cost  = 20\n}\n```\n\n----------------------------------------\n\nTITLE: macOS User-Specific Settings Path (Console)\nDESCRIPTION: Shows the directory for user-specific settings on macOS for JetBrains RemoteDev. This is where configuration files can be placed to affect only a single user's experience.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n# User-specific settings\n/Users/UserName/Library/Application Support/JetBrains/RemoteDev\n```\n\n----------------------------------------\n\nTITLE: Display Usage Instructions for scaletest.sh (Shell)\nDESCRIPTION: This shell script snippet displays the usage instructions for the `scaletest.sh` script. It outlines the required and optional arguments for running load tests on Coder, including specifying the load test name, Google Cloud project, number of workspaces, and deployment scenario. The output includes options for dry runs and skipping cleanup.\nSOURCE: https://github.com/coder/coder/blob/main/scaletest/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ scaletest.sh --help\nUsage: scaletest.sh --name <name> --project <project> --num-workspaces <num-workspaces> --scenario <scenario> [--dry-run] [--skip-cleanup]\n```\n\n----------------------------------------\n\nTITLE: Example Informative Startup Script - Shell\nDESCRIPTION: This shell script demonstrates an informative startup script. It echoes messages indicating the command being run and its exit status, and exits if the command fails. This helps debugging by providing clear output in the startup logs.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/troubleshooting.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho \"Running startup script...\"\necho \"Run: long-running-command\"\n/path/to/long-running-command\nstatus=$?\necho \"Done: long-running-command, exit status: ${status}\"\nif [ $status -ne 0 ]; then\n  echo \"Startup script failed, exiting...\"\n  exit $status\nfi\n```\n\n----------------------------------------\n\nTITLE: Azure Instance Identity Token Body Parameter (JSON)\nDESCRIPTION: This JSON snippet defines the structure of the request body for authenticating an agent on an Azure instance. It requires `encoding` and `signature` parameters of type string. These values contain information required to establish the agent's identity.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"encoding\": \"string\",\n  \"signature\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing for Computer Name Generation in Azure\nDESCRIPTION: This Terraform code generates a unique, truncated hash value based on the workspace name and owner name. This is used to create a randomized computer name for Azure VMs, avoiding naming conflicts due to the 15-character limit. It uses the `md5` function and `substr` to create the hash.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_15\n\nLANGUAGE: Terraform\nCODE:\n```\nlocals {\n  concatenated_string = \"${data.coder_workspace.me.name}+${data.coder_workspace_owner.me.name}\"\n  hashed_string = md5(local.concatenated_string)\n  truncated_hash = substr(local.hashed_string, 0, 16)\n}\n```\n\n----------------------------------------\n\nTITLE: Listing workspaces using Coder CLI\nDESCRIPTION: This snippet demonstrates how to list workspaces using the Coder CLI. It requires a Coder URL and a valid token. The output is formatted as JSON.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncoder ls \\\n  --url https://coder.example.com \\\n  --token <your-token> \\\n  --output json\n```\n\n----------------------------------------\n\nTITLE: Add License: Example Response\nDESCRIPTION: This is an example JSON response received after successfully adding a new license. It includes fields such as `claims`, `id`, `uploaded_at`, and `uuid`. The HTTP status code for a successful creation is 201.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"claims\": {},\n  \"id\": 0,\n  \"uploaded_at\": \"2019-08-24T14:15:22Z\",\n  \"uuid\": \"095be615-a8ad-4c33-8e9c-c7612fbf6c9f\"\n}\n```\n\n----------------------------------------\n\nTITLE: CSP violation report body parameter example\nDESCRIPTION: This JSON snippet provides an example structure for the body parameter used when reporting CSP violations. It contains a single key, `csp-report`, with an empty object as its value.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/general.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"csp-report\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: SCIM User Creation Response Example\nDESCRIPTION: This JSON payload represents the successful response after creating a new SCIM user. It mirrors the structure of the request body and confirms the successful creation of the user with the provided details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_84\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": true,\n  \"emails\": [\n    {\n      \"display\": \"string\",\n      \"primary\": true,\n      \"type\": \"string\",\n      \"value\": \"user@example.com\"\n    }\n  ],\n  \"groups\": [\n    null\n  ],\n  \"id\": \"string\",\n  \"meta\": {\n    \"resourceType\": \"string\"\n  },\n  \"name\": {\n    \"familyName\": \"string\",\n    \"givenName\": \"string\"\n  },\n  \"schemas\": [\n    \"string\"\n  ],\n  \"userName\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Project UID and GID\nDESCRIPTION: Retrieves the project UID and GID from the OpenShift project's annotations. It uses `oc` to fetch the project information in JSON format and `jq` to extract the annotation values. These values are needed for the `runAsUser` and `runAsGroup` settings in the security context.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/openshift.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\noc get project coder -o json | jq -r '.metadata.annotations'\n{\n    \"openshift.io/sa.scc.supplemental-groups\": \"1000680000/10000\",\n    \"openshift.io/sa.scc.uid-range\": \"1000680000/10000\"\n}\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration (Console)\nDESCRIPTION: Configures NGINX to serve the downloaded client and backend files. The configuration sets up a basic HTTP server that listens on port 80 and routes all requests to the /home/ubuntu directory, where the client and backend files are located. This enables JetBrains Gateway to download the required components from the local server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n\n        root /var/www/html;\n\n        index index.html index.htm index.nginx-debian.html;\n\n        server_name _;\n\n        location / {\n                root /home/ubuntu;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Coder Version\nDESCRIPTION: The `coder version` command is used to display the current version of the Coder application. It accepts an optional flag `--output` to specify the output format (text or json).  The default output format is text.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/version.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder version [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding User to Docker Group and Restarting Coder\nDESCRIPTION: This snippet adds the 'coder' user to the 'docker' group, restarts the Coder server to apply the changes, and tests the Docker configuration to ensure proper functionality.  It is essential for granting the necessary permissions to Coder for managing Docker containers.\nSOURCE: https://github.com/coder/coder/blob/main/examples/templates/docker-devcontainer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Add coder user to Docker group\nsudo usermod -aG docker coder\n\n# Restart Coder server\nsudo systemctl restart coder\n\n# Test Docker\nsudo -u coder docker ps\n```\n\n----------------------------------------\n\nTITLE: Get External Auth Device by ID with Curl\nDESCRIPTION: This snippet demonstrates how to retrieve device information associated with an external authentication by its ID using a `curl` command. It sends a GET request to the `/api/v2/external-auth/{externalauth}/device` endpoint, where `{externalauth}` is the external authentication ID. The request requires the `Coder-Session-Token` header for authentication and expects a JSON response containing device details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/external-auth/{externalauth}/device \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example User Login Type Response\nDESCRIPTION: This JSON snippet provides an example response body for the get user login type endpoint. It demonstrates the structure of the expected response, which contains a single field login_type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"login_type\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Rich Parameters Response Schema (200 OK)\nDESCRIPTION: This JSON schema represents the structure of the successful (200 OK) response when retrieving rich parameters for a template version. It includes fields like default_value, description, display_name, and options for each parameter. Each option also contains description, icon, name and value. The API requires authentication using a Coder-Session-Token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"default_value\": \"string\",\n    \"description\": \"string\",\n    \"description_plaintext\": \"string\",\n    \"display_name\": \"string\",\n    \"ephemeral\": true,\n    \"icon\": \"string\",\n    \"mutable\": true,\n    \"name\": \"string\",\n    \"options\": [\n      {\n        \"description\": \"string\",\n        \"icon\": \"string\",\n        \"name\": \"string\",\n        \"value\": \"string\"\n      }\n    ],\n    \"required\": true,\n    \"type\": \"string\",\n    \"validation_error\": \"string\",\n    \"validation_max\": 0,\n    \"validation_min\": 0,\n    \"validation_monotonic\": \"increasing\",\n    \"validation_regex\": \"string\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Get Schema by Template Version with Curl (Removed)\nDESCRIPTION: This code snippet demonstrates a curl command intended to fetch the schema for a template version. However, the documentation indicates that this endpoint has been removed. The command still requires authentication using a Coder-Session-Token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_68\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/schema \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Modifying Docker Compose for Workspace Proxy\nDESCRIPTION: This snippet shows how to modify a Docker Compose file to run the workspace proxy server by changing the entrypoint.  It requires Docker Compose. The `entrypoint` directive is changed to `/opt/coder wsproxy server` to start the proxy server instead of the default Coder server.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/networking/workspace-proxies.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n  image: ghcr.io/coder/coder:${CODER_VERSION:-latest}\n+ entrypoint: /opt/coder wsproxy server\n```\n\n----------------------------------------\n\nTITLE: Adding mkdir to .envrc to fix Nix on macOS\nDESCRIPTION: This code snippet provides a workaround for a `direnv` bug on macOS that can cause `nix-shell` to fail when building or running Coder. Adding the `mkdir` line to the `.envrc` file resolves the `error: creating directory` issue.\nSOURCE: https://github.com/coder/coder/blob/main/docs/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nuse nix\nmkdir -p \"$TMPDIR\"\n```\n\n----------------------------------------\n\nTITLE: Get User Notification Preferences Response\nDESCRIPTION: Example JSON response containing an array of user notification preferences.  Each preference includes whether it is disabled, the notification ID, and the last updated timestamp.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"disabled\": true,\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Update Group IDP Sync Settings\nDESCRIPTION: This code snippet demonstrates how to update group IDP sync settings for an organization using a PATCH request. It requires the organization ID as a parameter and a JSON body containing the new settings.  The request includes the necessary headers for authentication and content type.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_60\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PATCH http://coder-server:8080/api/v2/organizations/{organization}/settings/idpsync/groups \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Example User Status Counts Response JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the `/insights/user-status-counts` endpoint. It includes status counts for different properties, with a date associated with each count.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status_counts\": {\n    \"property1\": [\n      {\n        \"count\": 10,\n        \"date\": \"2019-08-24T14:15:22Z\"\n      }\n    ],\n    \"property2\": [\n      {\n        \"count\": 10,\n        \"date\": \"2019-08-24T14:15:22Z\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Agent on AWS Instance using curl\nDESCRIPTION: This snippet demonstrates how to authenticate an agent running on an AWS instance against the Coder Server. A POST request is made to the `/api/v2/workspaceagents/aws-instance-identity` endpoint, including the `Content-Type` and `Accept` headers for JSON. The authentication token is passed via the `Coder-Session-Token` header.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Example request using curl\ncurl -X POST http://coder-server:8080/api/v2/workspaceagents/aws-instance-identity \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Code Block Example\nDESCRIPTION: Demonstrates the use of code blocks for displaying code samples. The language should be specified to enable proper syntax highlighting.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/documentation.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nThis is a codeblock.\n```\n\n----------------------------------------\n\nTITLE: Template List Response Example\nDESCRIPTION: This JSON snippet shows an example response from the `/api/v2/templates` endpoint. It represents an array of template objects, each containing details such as ID, name, description, and other configuration properties. The structure defines the information returned when querying templates.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"active_user_count\": 0,\n    \"active_version_id\": \"eae64611-bd53-4a80-bb77-df1e432c0fbc\",\n    \"activity_bump_ms\": 0,\n    \"allow_user_autostart\": true,\n    \"allow_user_autostop\": true,\n    \"allow_user_cancel_workspace_jobs\": true,\n    \"autostart_requirement\": {\n      \"days_of_week\": [\n        \"monday\"\n      ]\n    },\n    \"autostop_requirement\": {\n      \"days_of_week\": [\n        \"monday\"\n      ],\n      \"weeks\": 0\n    },\n    \"build_time_stats\": {\n      \"property1\": {\n        \"p50\": 123,\n        \"p95\": 146\n      },\n      \"property2\": {\n        \"p50\": 123,\n        \"p95\": 146\n      }\n    },\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"created_by_id\": \"9377d689-01fb-4abf-8450-3368d2c1924f\",\n    \"created_by_name\": \"string\",\n    \"default_ttl_ms\": 0,\n    \"deprecated\": true,\n    \"deprecation_message\": \"string\",\n    \"description\": \"string\",\n    \"display_name\": \"string\",\n    \"failure_ttl_ms\": 0,\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"max_port_share_level\": \"owner\",\n    \"name\": \"string\",\n    \"organization_display_name\": \"string\",\n    \"organization_icon\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_name\": \"string\",\n    \"provisioner\": \"terraform\",\n    \"require_active_version\": true,\n    \"time_til_dormant_autodelete_ms\": 0,\n    \"time_til_dormant_ms\": 0,\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Showing organization settings\nDESCRIPTION: Demonstrates how to display group sync settings using the `coder organization settings show groupsync` command. This command is used to output the group sync configurations for an organization.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_settings_show.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations settings show\n```\n\n----------------------------------------\n\nTITLE: Install Coder on Windows using winget\nDESCRIPTION: This command installs Coder on Windows using the winget package manager. It directly installs the Coder package. Requires winget and internet access.\nSOURCE: https://github.com/coder/coder/blob/main/docs/start/local-deploy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nwinget install Coder.Coder\n```\n\n----------------------------------------\n\nTITLE: Set OIDC Group Field Environment Variable\nDESCRIPTION: This environment variable configures the Coder server to read group information from the specified OIDC claim name.  It is used for deployments with a single organization.  The value `groups` indicates that the group information is expected in the `groups` claim.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nCODER_OIDC_GROUP_FIELD=groups\n```\n\n----------------------------------------\n\nTITLE: Pulling Container Image\nDESCRIPTION: This command pulls the Coder v2.8.4 container image from the GitHub Container Registry.  It allows users to obtain the latest version of Coder as a Docker image.\nSOURCE: https://github.com/coder/coder/blob/main/docs/changelogs/v2.8.4.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker pull ghcr.io/coder/coder:v2.8.4\n```\n\n----------------------------------------\n\nTITLE: Setting TRAMP Default Method to SSH\nDESCRIPTION: This Emacs Lisp snippet configures TRAMP to use SSH as the default method for accessing remote files. This is useful when a jumpbox or complex network setup is required. Setting `tramp-default-method` affects how `ansi-term` accesses remotes for directory tracking.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/emacs-tramp.md#_snippet_1\n\nLANGUAGE: Lisp\nCODE:\n```\n(setq tramp-default-method \"ssh\")\n```\n\n----------------------------------------\n\nTITLE: Example User Activity Response JSON\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by the `/insights/user-activity` endpoint.  It contains a report with a users array that provides activity information for each user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/insights.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"report\": {\n    \"end_time\": \"2019-08-24T14:15:22Z\",\n    \"start_time\": \"2019-08-24T14:15:22Z\",\n    \"template_ids\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"users\": [\n      {\n        \"avatar_url\": \"http://example.com\",\n        \"seconds\": 80500,\n        \"template_ids\": [\n          \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n        ],\n        \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\",\n        \"username\": \"string\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Human-Readable Audit Log Entry\nDESCRIPTION: This is an example of a human-readable audit log entry from Coder. It provides a more easily readable format for debugging and monitoring. The log includes fields like timestamp, log level, coderd instance, audit log details, UserID, OrganizationID, ResourceType, ResourceID, Action, and AdditionalFields, which provide context such as workspace_name, build_number, and build_reason.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/audit-logs.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n2023-06-13 03:43:29.233 [info]  coderd: audit_log  ID=95f7c392-da3e-480c-a579-8909f145fbe2  Time=\"2023-06-13T03:43:29.230422Z\"  UserID=6c405053-27e3-484a-9ad7-bcb64e7bfde6  OrganizationID=00000000-0000-0000-0000-000000000000  Ip=<nil>  UserAgent=<nil>  ResourceType=workspace_build  ResourceID=988ae133-5b73-41e3-a55e-e1e9d3ef0b66  ResourceTarget=\"\"  Action=start  Diff=\"{}\"  StatusCode=200  AdditionalFields=\"{\\\"workspace_name\\\":\\\"linux-container\\\",\\\"build_number\\\":\\\"7\\\",\\\"build_reason\\\":\\\"initiator\\\",\\\"workspace_owner\\\":\\\"\\\"}\"  RequestID=9682b1b5-7b9f-4bf2-9a39-9463f8e41cd6  ResourceIcon=\"\"\n```\n\n----------------------------------------\n\nTITLE: Removed: Get Parameters by Template Version using curl\nDESCRIPTION: This snippet shows the curl command to retrieve parameters for a template version, but it is noted as removed. It includes a template version ID and requires a Coder Session Token. The API does not specify a response schema.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/templateversions/{templateversion}/parameters \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Update License Entitlements: Example Response\nDESCRIPTION: This is an example JSON response received after attempting to refresh license entitlements. It may contain details, a message, and validation errors if the operation fails. A successful HTTP status code will be 201.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/organizations.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response for Insert Custom Organization Role\nDESCRIPTION: This JSON snippet shows an example response after successfully inserting a custom organization role.  It includes the display name, name, organization ID, and permission arrays for the organization, site, and user scopes. Each permission array contains action, negate, and resource_type fields indicating the role's defined permissions.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"display_name\": \"string\",\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"site_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"user_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Listening Ports Response Example\nDESCRIPTION: This JSON snippet shows the format of a successful (200) response when retrieving listening ports.  It provides an array of port objects, each detailing the network protocol, port number, and process name associated with the listening port.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ports\": [\n    {\n      \"network\": \"string\",\n      \"port\": 0,\n      \"process_name\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Indicate Gateway Installation Directory (Linux)\nDESCRIPTION: Specifies the default installation directory of the JetBrains Gateway under Linux operating systems. This is needed when attempting to locate the `cacerts` file which is a Java trust store.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/index.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n<Gateway installation directory>/jbr/lib/security/cacerts\n```\n\n----------------------------------------\n\nTITLE: Installing Backends (Shell)\nDESCRIPTION: Downloads JetBrains IDE backends using the jetbrains-clients-downloader tool.  The script creates a backends directory, filters by product code, build number, and platform.  The backends are downloaded to the specified directory for later access by JetBrains Gateway.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/backends\n./jetbrains-clients-downloader-linux-x86_64-1867/bin/jetbrains-clients-downloader --products-filter <product-code> --build-filter <build-number> --platforms-filter linux-x64,windows-x64,osx-x64 --download-backends ~/backends\n```\n\n----------------------------------------\n\nTITLE: Checking Kernel Version\nDESCRIPTION: This command checks the kernel version of the host machine. The workspace process logging feature requires a Linux kernel >= 5.8.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/extending-templates/process-logging.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nuname -r\n```\n\n----------------------------------------\n\nTITLE: Delete Provisioner Key\nDESCRIPTION: Deletes a provisioner key using the `coder provisioner keys delete` command. The `<name>` argument specifies the name of the key to delete. The `-y` or `--yes` flag bypasses prompts, and the `-O` or `--org` flag specifies the organization to use.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_keys_delete.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner keys delete [flags] <name>\n```\n\n----------------------------------------\n\nTITLE: Successful Response - JSON\nDESCRIPTION: This JSON represents a successful response (200 OK) after upserting an organization role. It includes the details of the role like display name, name, organization ID, and permissions (organization, site, and user).\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"display_name\": \"string\",\n    \"name\": \"string\",\n    \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n    \"organization_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"site_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ],\n    \"user_permissions\": [\n      {\n        \"action\": \"application_connect\",\n        \"negate\": true,\n        \"resource_type\": \"*\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Provisioner Job Log Response Example\nDESCRIPTION: This JSON snippet is an example response containing a list of logs. Each log includes timestamp, id, log level, source, output and stage\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"id\": 0,\n    \"log_level\": \"trace\",\n    \"log_source\": \"provisioner_daemon\",\n    \"output\": \"string\",\n    \"stage\": \"string\"\n  }\n]\n\n```\n\n----------------------------------------\n\nTITLE: Example Create Initial User Response\nDESCRIPTION: This is an example JSON response returned after creating the initial user successfully. It includes the `organization_id` and `user_id`.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\"\n}\n```\n\n----------------------------------------\n\nTITLE: OPA Partial Evaluation Command\nDESCRIPTION: This bash command performs a partial evaluation of the authorization policy using OPA. It defines unknowns to be used in the policy decision using `--unknowns`. It specifies the policy file (policy.rego), the input data file (input.json), and the query to evaluate (data.authz.allow). The output will be formatted as pretty JSON.\nSOURCE: https://github.com/coder/coder/blob/main/coderd/rbac/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nopa eval --partial --format=pretty 'data.authz.allow' -d policy.rego --unknowns input.object.owner --unknowns input.object.org_owner --unknowns input.object.acl_user_list --unknowns input.object.acl_group_list -i input.json\n```\n\n----------------------------------------\n\nTITLE: Embed Open in Coder Button with Disabled Parameters\nDESCRIPTION: This Markdown snippet demonstrates how to embed an \"Open in Coder\" button and disable specific parameter fields. It utilizes the `disable_params` search parameter to specify a comma-separated list of parameter names to disable. Replace `YOUR_ACCESS_URL` and `YOUR_TEMPLATE` accordingly.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/open-in-coder.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[![Open in Coder](https://YOUR_ACCESS_URL/open-in-coder.svg)](https://YOUR_ACCESS_URL/templates/YOUR_TEMPLATE/workspace?disable_params=first_parameter,second_parameter)\n```\n\n----------------------------------------\n\nTITLE: Disabling Direct Connections and Forcing Websockets\nDESCRIPTION: This configuration snippet illustrates how to disable direct connections, disable STUN, and force websockets over Tailscale DERP in Coder by setting environment variables. This is useful for troubleshooting networking issues. Requires setting these environment variables before coder server starts.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/faqs.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| Flag                                                                                          | Value       | Meaning                               |\n|-----------------------------------------------------------------------------------------------|-------------|---------------------------------------|\n| [`CODER_BLOCK_DIRECT`](../reference/cli/server.md#--block-direct-connections)                 | `true`      | Blocks direct connections             |\n| [`CODER_DERP_SERVER_STUN_ADDRESSES`](../reference/cli/server.md#--derp-server-stun-addresses) | `\"disable\"` | Disables STUN                         |\n| [`CODER_DERP_FORCE_WEBSOCKETS`](../reference/cli/server.md#--derp-force-websockets)           | `true`      | Forces websockets over Tailscale DERP |\n```\n\n----------------------------------------\n\nTITLE: Fetch Provisioner Key Details with GET (curl)\nDESCRIPTION: Fetches details for a specific provisioner key using a GET request. Requires the provisioner key ID. No authentication token is explicitly provided in the sample.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/provisionerkeys/{provisionerkey} \\\n  -H 'Accept: application/json'\n```\n\n----------------------------------------\n\nTITLE: Setting React Query parameters for visual testing - Typescript\nDESCRIPTION: This snippet demonstrates how to set parameters for React Query within a Storybook story, enabling easy visual testing of components that fetch data. It defines a 'WithQuota' story that sets the data for a query identified by the 'getWorkspaceQuotaQueryKey' function. This allows simulating different query states for visual testing.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const WithQuota: Story = {\n    parameters: {\n        queries: [\n            {\n                key: getWorkspaceQuotaQueryKey(MockUser.username),\n                data: {\n                    credits_consumed: 2,\n                    budget: 40,\n                },\n            },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Provisioner Jobs Usage\nDESCRIPTION: Shows the basic usage of the `coder provisioner jobs list` command. It indicates the command syntax and specifies that flags can be used to modify the command's behavior.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/provisioner_jobs_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder provisioner jobs list [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Certbot Automatic Renewal File\nDESCRIPTION: This command creates a new file in `/etc/cron.weekly` for automatic certificate renewal using Certbot.  This file will be executed weekly by cron.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo touch /etc/cron.weekly/certbot\n```\n\n----------------------------------------\n\nTITLE: Example PATCH Response\nDESCRIPTION: This JSON snippet provides an example response from a successful PATCH request to update template metadata. It contains various template attributes, reflecting the updated state of the template after the PATCH operation.  The response structure mirrors the GET response.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active_user_count\": 0,\n  \"active_version_id\": \"eae64611-bd53-4a80-bb77-df1e432c0fbc\",\n  \"activity_bump_ms\": 0,\n  \"allow_user_autostart\": true,\n  \"allow_user_autostop\": true,\n  \"allow_user_cancel_workspace_jobs\": true,\n  \"autostart_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ]\n  },\n  \"autostop_requirement\": {\n    \"days_of_week\": [\n      \"monday\"\n    ],\n    \"weeks\": 0\n  },\n  \"build_time_stats\": {\n    \"property1\": {\n      \"p50\": 123,\n      \"p95\": 146\n    },\n    \"property2\": {\n      \"p50\": 123,\n      \"p95\": 146\n    }\n  },\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"created_by_id\": \"9377d689-01fb-4abf-8450-3368d2c1924f\",\n  \"created_by_name\": \"string\",\n  \"default_ttl_ms\": 0,\n  \"deprecated\": true,\n  \"deprecation_message\": \"string\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"failure_ttl_ms\": 0,\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"max_port_share_level\": \"owner\",\n  \"name\": \"string\",\n  \"organization_display_name\": \"string\",\n  \"organization_icon\": \"string\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"provisioner\": \"terraform\",\n  \"require_active_version\": true,\n  \"time_til_dormant_autodelete_ms\": 0,\n  \"time_til_dormant_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Coder API token\nDESCRIPTION: Instructions on how to generate an API token from the Coder deployment settings page. This token is required for authenticating API requests.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/index.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttps://coder.example.com/settings/tokens\n```\n\n----------------------------------------\n\nTITLE: Launching VSCode from Nix Environment\nDESCRIPTION: This snippet illustrates how to launch VSCode from within the Nix development environment. This allows developers to utilize VSCode features with the environment's dependencies. The command `code .` opens the current directory in VSCode.\nSOURCE: https://github.com/coder/coder/blob/main/site/e2e/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Optionally add '--command zsh' to choose your shell.\nnix develop\ncode .\n```\n\n----------------------------------------\n\nTITLE: Example Log Source Response\nDESCRIPTION: This JSON snippet shows the expected response format after successfully posting a log source. It includes the created_at timestamp, display_name, icon, id, and workspace_agent_id.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/agents.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example DELETE Response\nDESCRIPTION: This JSON snippet represents a typical response after a successful DELETE request for a template.  It contains fields for detail, message, and validations, which can provide information about the outcome of the deletion operation and any potential issues encountered.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Endpoint for OIDC Claims\nDESCRIPTION: This snippet demonstrates the endpoint for users with the Owner role to view the full claim after logging in. It helps in debugging OIDC claim-related issues and identifying the correct claim names.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/users/idp-sync.md#_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nhttps://[coder.example.com]/api/v2/debug/[username]/debug-link\n```\n\n----------------------------------------\n\nTITLE: Archive Template Version Response (200 OK)\nDESCRIPTION: This JSON snippet represents a successful (200 OK) response from the API when archiving a template version. It contains details about the operation's outcome, including messages and potential validation errors.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/templates.md#_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": \"string\",\n  \"message\": \"string\",\n  \"validations\": [\n    {\n      \"detail\": \"string\",\n      \"field\": \"string\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Organization Members in Coder CLI\nDESCRIPTION: This command lists all organization members using the Coder CLI. It allows users to specify the output format (table or JSON) and customize the columns displayed in the table output. The default output format is table, and the default columns are username and organization roles.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/organizations_members_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder organizations members list [flags]\n```\n\n----------------------------------------\n\nTITLE: Linux User-Specific Settings Path (Console)\nDESCRIPTION: Shows the directory for user-specific settings on Linux for JetBrains RemoteDev. This is where configuration files should be placed to apply to a single user.\nSOURCE: https://github.com/coder/coder/blob/main/docs/user-guides/workspace-access/jetbrains/jetbrains-airgapped.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n# User-specific settings\n$HOME/.config/JetBrains/RemoteDev\n```\n\n----------------------------------------\n\nTITLE: Get Agent Manifest using curl\nDESCRIPTION: Retrieves the manifest fetched by the agent from coderd upon startup. Requires the CODER_AGENT_DEBUG_ADDRESS environment variable to be set. The manifest schema is defined in agentsdk.Manifest.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/agent-api/debug.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl $CODER_AGENT_DEBUG_ADDRESS/debug/manifest\n```\n\n----------------------------------------\n\nTITLE: Example Response for Paginated Members\nDESCRIPTION: This JSON snippet shows an example response for retrieving paginated members. It provides a count and a list of members, including details about each member.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/members.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"count\": 0,\n    \"members\": [\n      {\n        \"avatar_url\": \"string\",\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"email\": \"string\",\n        \"global_roles\": [\n          {\n            \"display_name\": \"string\",\n            \"name\": \"string\",\n            \"organization_id\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n        \"roles\": [\n          {\n            \"display_name\": \"string\",\n            \"name\": \"string\",\n            \"organization_id\": \"string\"\n          }\n        ],\n        \"updated_at\": \"2019-08-24T14:15:22Z\",\n        \"user_id\": \"a169451c-8525-4352-b8ca-070dd449a1a5\",\n        \"username\": \"string\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Audit Log Entry\nDESCRIPTION: This is an example of a JSON-formatted audit log entry from Coder. It includes fields such as timestamp, log level, message, caller, function, logger names, and various fields related to the audit event, such as UserID, OrganizationID, ResourceType, ResourceID, Action, and AdditionalFields. The AdditionalFields provides more context-specific information, such as workspace_name, build_number, and build_reason.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/security/audit-logs.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ts\": \"2023-06-13T03:45:37.294730279Z\",\n    \"level\": \"INFO\",\n    \"msg\": \"audit_log\",\n    \"caller\": \"/home/runner/work/coder/coder/enterprise/audit/backends/slog.go:36\",\n    \"func\": \"github.com/coder/coder/enterprise/audit/backends.slogBackend.Export\",\n    \"logger_names\": [\"coderd\"],\n    \"fields\": {\n        \"ID\": \"033a9ffa-b54d-4c10-8ec3-2aaf9e6d741a\",\n        \"Time\": \"2023-06-13T03:45:37.288506Z\",\n        \"UserID\": \"6c405053-27e3-484a-9ad7-bcb64e7bfde6\",\n        \"OrganizationID\": \"00000000-0000-0000-0000-000000000000\",\n        \"Ip\": \"{IPNet:{IP:\\u003cnil\\u003e Mask:\\u003cnil\\u003e} Valid:false}\",\n        \"UserAgent\": \"{String: Valid:false}\",\n        \"ResourceType\": \"workspace_build\",\n        \"ResourceID\": \"ca5647e0-ef50-4202-a246-717e04447380\",\n        \"ResourceTarget\": \"\",\n        \"Action\": \"start\",\n        \"Diff\": {},\n        \"StatusCode\": 200,\n        \"AdditionalFields\": {\n            \"workspace_name\": \"linux-container\",\n            \"build_number\": \"9\",\n            \"build_reason\": \"initiator\",\n            \"workspace_owner\": \"\"\n        },\n        \"RequestID\": \"bb791ac3-f6ee-4da8-8ec2-f54e87013e93\",\n        \"ResourceIcon\": \"\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example WebSocket Ping Response - 200 OK\nDESCRIPTION: Illustrates the format of a ping response received through the WebSocket connection when watching a workspace. It contains a `type` field set to \"ping\" and a `data` field which is null, indicating a keep-alive message.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": null,\n  \"type\": \"ping\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example External Auth Response (GET by ID)\nDESCRIPTION: This JSON snippet shows an example response for a successful GET request to retrieve a specific external authentication by its ID. It includes fields related to application installation, authentication status, device information, display name, installations, and user details.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/git.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"app_install_url\": \"string\",\n  \"app_installable\": true,\n  \"authenticated\": true,\n  \"device\": true,\n  \"display_name\": \"string\",\n  \"installations\": [\n    {\n      \"account\": {\n        \"avatar_url\": \"string\",\n        \"id\": 0,\n        \"login\": \"string\",\n        \"name\": \"string\",\n        \"profile_url\": \"string\"\n      },\n      \"configure_url\": \"string\",\n      \"id\": 0\n    }\n  ],\n  \"user\": {\n    \"avatar_url\": \"string\",\n    \"id\": 0,\n    \"login\": \"string\",\n    \"name\": \"string\",\n    \"profile_url\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Coder CLI: Removing a token\nDESCRIPTION: Demonstrates how to remove a specific personal access token by its ID using the Coder CLI. Replace 'WuoWs4ZsMX' with the actual token ID.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/tokens.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ coder tokens rm WuoWs4ZsMX\n```\n\n----------------------------------------\n\nTITLE: Example Available IdP Sync Claim Fields Response\nDESCRIPTION: This JSON snippet shows an example response from the /settings/idpsync/available-fields endpoint. It represents an array of strings, where each string is a possible claim field available for IDP synchronization. The expected status code is 200 OK.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"string\"\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Let's Encrypt wildcard certificate\nDESCRIPTION: This command uses Certbot to obtain a wildcard certificate for the specified domain (`coder.example.com` and `*.coder.example.com`) using the Cloudflare DNS provider for the DNS challenge. It utilizes the credentials stored in the `cloudflare.ini` file.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-apache.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo certbot certonly --dns-cloudflare --dns-cloudflare-credentials ~/.secrets/certbot/cloudflare.ini -d coder.example.com -d *.coder.example.com\n```\n\n----------------------------------------\n\nTITLE: Removing Coder package - Fedora/CentOS/RHEL/SUSE\nDESCRIPTION: This command removes the Coder package from Fedora, CentOS, RHEL, or SUSE-based systems using the yum package manager.\nSOURCE: https://github.com/coder/coder/blob/main/docs/install/uninstall.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum remove coder\n```\n\n----------------------------------------\n\nTITLE: Get IdP Sync Claim Field Values with curl\nDESCRIPTION: This code snippet demonstrates how to retrieve the IdP sync claim field values using a curl command. It sends a GET request to the specified endpoint with the appropriate headers for accepting JSON responses and providing the Coder session token for authentication, including a query parameter 'claimField'. The expected response is a JSON array of strings representing the claim field values.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/enterprise.md#_snippet_94\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X GET http://coder-server:8080/api/v2/settings/idpsync/field-values?claimField=string \\\n  -H 'Accept: application/json' \\\n  -H 'Coder-Session-Token: API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Running Playwright tests remotely\nDESCRIPTION: This bash script is used to start a Playwright server on a local machine, forward ports to a workspace, and set environment variables to allow running Playwright tests within the workspace. It simplifies the process of debugging Playwright tests by enabling headful mode and local execution.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbash <(curl -sSL https://raw.githubusercontent.com/coder/coder/main/scripts/remote_playwright.sh) [workspace]\n```\n\n----------------------------------------\n\nTITLE: Create Template Directory and Navigate\nDESCRIPTION: Creates a directory for the template and navigates into it. This prepares the environment for creating the template files.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/template-from-scratch.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p template-tour/build && cd $_\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Cloudflare API Token File\nDESCRIPTION: This command sets the permissions for the Cloudflare API token file to ensure it is only readable by the owner.  This is important for security to prevent unauthorized access to the API token.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-nginx.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo chmod 600 ~/.secrets/certbot/cloudflare.ini\n```\n\n----------------------------------------\n\nTITLE: Example Workspace Metadata Response\nDESCRIPTION: This JSON snippet shows an example of the data returned when retrieving workspace metadata. It provides detailed information about the workspace, including its ID, name, health status, latest build information, and template details. This can be used for debugging or to understand the structure of the data returned by the API.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/workspaces.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow_renames\": true,\n  \"automatic_updates\": \"always\",\n  \"autostart_schedule\": \"string\",\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"deleting_at\": \"2019-08-24T14:15:22Z\",\n  \"dormant_at\": \"2019-08-24T14:15:22Z\",\n  \"favorite\": true,\n  \"health\": {\n    \"failing_agents\": [\n      \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n    ],\n    \"healthy\": false\n  },\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"last_used_at\": \"2019-08-24T14:15:22Z\",\n  \"latest_app_status\": {\n    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"icon\": \"string\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"message\": \"string\",\n    \"needs_user_attention\": true,\n    \"state\": \"working\",\n    \"uri\": \"string\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n  },\n  \"latest_build\": {\n    \"build_number\": 0,\n    \"created_at\": \"2019-08-24T14:15:22Z\",\n    \"daily_cost\": 0,\n    \"deadline\": \"2019-08-24T14:15:22Z\",\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"initiator_id\": \"06588898-9a84-4b35-ba8f-f9cbd64946f3\",\n    \"initiator_name\": \"string\",\n    \"job\": {\n      \"available_workers\": [\n        \"497f6eca-6276-4993-bfeb-53cbbbba6f08\"\n      ],\n      \"canceled_at\": \"2019-08-24T14:15:22Z\",\n      \"completed_at\": \"2019-08-24T14:15:22Z\",\n      \"created_at\": \"2019-08-24T14:15:22Z\",\n      \"error\": \"string\",\n      \"error_code\": \"REQUIRED_TEMPLATE_VARIABLES\",\n      \"file_id\": \"8a0cfb4f-ddc9-436d-91bb-75133c583767\",\n      \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n      \"input\": {\n        \"error\": \"string\",\n        \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n        \"workspace_build_id\": \"badaf2eb-96c5-4050-9f1d-db2d39ca5478\"\n      },\n      \"metadata\": {\n        \"template_display_name\": \"string\",\n        \"template_icon\": \"string\",\n        \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n        \"template_name\": \"string\",\n        \"template_version_name\": \"string\",\n        \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n        \"workspace_name\": \"string\"\n      },\n      \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n      \"queue_position\": 0,\n      \"queue_size\": 0,\n      \"started_at\": \"2019-08-24T14:15:22Z\",\n      \"status\": \"pending\",\n      \"tags\": {\n        \"property1\": \"string\",\n        \"property2\": \"string\"\n      },\n      \"type\": \"template_version_import\",\n      \"worker_id\": \"ae5fa6f7-c55b-40c1-b40a-b36ac467652b\"\n    },\n    \"matched_provisioners\": {\n      \"available\": 0,\n      \"count\": 0,\n      \"most_recently_seen\": \"2019-08-24T14:15:22Z\"\n    },\n    \"max_deadline\": \"2019-08-24T14:15:22Z\",\n    \"reason\": \"initiator\",\n    \"resources\": [\n      {\n        \"agents\": [\n          {\n            \"api_version\": \"string\",\n            \"apps\": [\n              {\n                \"command\": \"string\",\n                \"display_name\": \"string\",\n                \"external\": true,\n                \"health\": \"disabled\",\n                \"healthcheck\": {\n                  \"interval\": 0,\n                  \"threshold\": 0,\n                  \"url\": \"string\"\n                },\n                \"hidden\": true,\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"open_in\": \"slim-window\",\n                \"sharing_level\": \"owner\",\n                \"slug\": \"string\",\n                \"statuses\": [\n                  {\n                    \"agent_id\": \"2b1e3b65-2c04-4fa2-a2d7-467901e98978\",\n                    \"app_id\": \"affd1d10-9538-4fc8-9e0b-4594a28c1335\",\n                    \"created_at\": \"2019-08-24T14:15:22Z\",\n                    \"icon\": \"string\",\n                    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                    \"message\": \"string\",\n                    \"needs_user_attention\": true,\n                    \"state\": \"working\",\n                    \"uri\": \"string\",\n                    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\"\n                  }\n                ],\n                \"subdomain\": true,\n                \"subdomain_name\": \"string\",\n                \"url\": \"string\"\n              }\n            ],\n            \"architecture\": \"string\",\n            \"connection_timeout_seconds\": 0,\n            \"created_at\": \"2019-08-24T14:15:22Z\",\n            \"directory\": \"string\",\n            \"disconnected_at\": \"2019-08-24T14:15:22Z\",\n            \"display_apps\": [\n              \"vscode\"\n            ],\n            \"environment_variables\": {\n              \"property1\": \"string\",\n              \"property2\": \"string\"\n            },\n            \"expanded_directory\": \"string\",\n            \"first_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"health\": {\n              \"healthy\": false,\n              \"reason\": \"agent has lost connection\"\n            },\n            \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n            \"instance_id\": \"string\",\n            \"last_connected_at\": \"2019-08-24T14:15:22Z\",\n            \"latency\": {\n              \"property1\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              },\n              \"property2\": {\n                \"latency_ms\": 0,\n                \"preferred\": true\n              }\n            },\n            \"lifecycle_state\": \"created\",\n            \"log_sources\": [\n              {\n                \"created_at\": \"2019-08-24T14:15:22Z\",\n                \"display_name\": \"string\",\n                \"icon\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"workspace_agent_id\": \"7ad2e618-fea7-4c1a-b70a-f501566a72f1\"\n              }\n            ],\n            \"logs_length\": 0,\n            \"logs_overflowed\": true,\n            \"name\": \"string\",\n            \"operating_system\": \"string\",\n            \"ready_at\": \"2019-08-24T14:15:22Z\",\n            \"resource_id\": \"4d5215ed-38bb-48ed-879a-fdb9ca58522f\",\n            \"scripts\": [\n              {\n                \"cron\": \"string\",\n                \"display_name\": \"string\",\n                \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n                \"log_path\": \"string\",\n                \"log_source_id\": \"4197ab25-95cf-4b91-9c78-f7f2af5d353a\",\n                \"run_on_start\": true,\n                \"run_on_stop\": true,\n                \"script\": \"string\",\n                \"start_blocks_login\": true,\n                \"timeout\": 0\n              }\n            ],\n            \"started_at\": \"2019-08-24T14:15:22Z\",\n            \"startup_script_behavior\": \"blocking\",\n            \"status\": \"connecting\",\n            \"subsystems\": [\n              \"envbox\"\n            ],\n            \"troubleshooting_url\": \"string\",\n            \"updated_at\": \"2019-08-24T14:15:22Z\",\n            \"version\": \"string\"\n          }\n        ],\n        \"created_at\": \"2019-08-24T14:15:22Z\",\n        \"daily_cost\": 0,\n        \"hide\": true,\n        \"icon\": \"string\",\n        \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n        \"job_id\": \"453bd7d7-5355-4d6d-a38e-d9e7eb218c3f\",\n        \"metadata\": [\n          {\n            \"key\": \"string\",\n            \"sensitive\": true,\n            \"value\": \"string\"\n          }\n        ],\n        \"name\": \"string\",\n        \"type\": \"string\",\n        \"workspace_transition\": \"start\"\n      }\n    ],\n    \"status\": \"pending\",\n    \"template_version_id\": \"0ba39c92-1f1b-4c32-aa3e-9925d7713eb1\",\n    \"template_version_name\": \"string\",\n    \"template_version_preset_id\": \"512a53a7-30da-446e-a1fc-713c630baff1\",\n    \"transition\": \"start\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\",\n    \"workspace_id\": \"0967198e-ec7b-4c6b-b4d3-f71244cadbe9\",\n    \"workspace_name\": \"string\",\n    \"workspace_owner_avatar_url\": \"string\",\n    \"workspace_owner_id\": \"e7078695-5279-4c86-8774-3ac2367a2fc7\",\n    \"workspace_owner_name\": \"string\"\n  },\n  \"name\": \"string\",\n  \"next_start_at\": \"2019-08-24T14:15:22Z\",\n  \"organization_id\": \"7c60d51f-b44e-4682-87d6-449835ea4de6\",\n  \"organization_name\": \"string\",\n  \"outdated\": true,\n  \"owner_avatar_url\": \"string\",\n  \"owner_id\": \"8826ee2e-7933-4665-aef2-2393f84a0d05\",\n  \"owner_name\": \"string\",\n  \"template_active_version_id\": \"b0da9c29-67d8-4c87-888c-bafe356f7f3c\",\n  \"template_allow_user_cancel_workspace_jobs\": true,\n  \"template_display_name\": \"string\",\n  \"template_icon\": \"string\",\n  \"template_id\": \"c6d67e98-83ea-49f0-8812-e4abae2b68bc\",\n  \"template_name\": \"string\",\n  \"template_require_active_version\": true,\n  \"ttl_ms\": 0,\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring EnvoyFilter for Coder with Istio Ingress (YAML)\nDESCRIPTION: This YAML configuration creates an EnvoyFilter resource within the Istio service mesh to modify the HTTP connection manager. It enables support for the 'derp' upgrade type, likely required for specific Coder functionality when deployed behind an Istio ingress controller. The filter operates within the 'istio-system' namespace.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/integrations/istio.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: EnvoyFilter\nmetadata:\n  name: tailscale-behind-istio-ingress\n  namespace: istio-system\nspec:\n  configPatches:\n    - applyTo: NETWORK_FILTER\n      match:\n        listener:\n          filterChain:\n            filter:\n              name: envoy.filters.network.http_connection_manager\n      patch:\n        operation: MERGE\n        value:\n          typed_config:\n            \"@type\": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n            upgrade_configs:\n              - upgrade_type: derp\n```\n\n----------------------------------------\n\nTITLE: Inefficient React Testing Library Button Click\nDESCRIPTION: This code snippet demonstrates an inefficient way to click a button using `screen.getByRole` in React Testing Library.  Due to the way `getByRole` calculates roles across the entire screen, this approach can lead to slow test execution, especially when the screen contains a large number of elements. The snippet serves as a negative example to avoid.\nSOURCE: https://github.com/coder/coder/blob/main/docs/contributing/frontend.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nuser.click(screen.getByRole(\"button\"));\n```\n\n----------------------------------------\n\nTITLE: Coder Licenses List Usage\nDESCRIPTION: This snippet shows the basic usage of the `coder licenses list` command in the console. It doesn't require any specific dependencies, but it assumes that the Coder CLI is installed and configured. The expected output is a list of licenses based on the specified flags.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/cli/licenses_list.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncoder licenses list [flags]\n```\n\n----------------------------------------\n\nTITLE: Pushing template to Coder deployment\nDESCRIPTION: This command navigates into the directory and pushes the template to the Coder deployment. You can edit or make changes to the files before pushing. Requires the Coder CLI to be configured and authenticated.\nSOURCE: https://github.com/coder/coder/blob/main/docs/admin/templates/managing-templates/devcontainers/add-devcontainer.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd kubernetes-devcontainer && coder templates push\n```\n\n----------------------------------------\n\nTITLE: Example Organization Response\nDESCRIPTION: This JSON snippet is an example response body for the get organization by user and organization name endpoint. It shows the structure of the returned organization object, including fields such as created_at, description, display_name, and id.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/users.md#_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": \"2019-08-24T14:15:22Z\",\n  \"description\": \"string\",\n  \"display_name\": \"string\",\n  \"icon\": \"string\",\n  \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n  \"is_default\": true,\n  \"name\": \"string\",\n  \"updated_at\": \"2019-08-24T14:15:22Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update User Notification Preferences Response\nDESCRIPTION: Example JSON response after updating user notification preferences, containing an array of updated preferences. Each preference includes whether it is disabled, the notification ID, and the last updated timestamp.\nSOURCE: https://github.com/coder/coder/blob/main/docs/reference/api/notifications.md#_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"disabled\": true,\n    \"id\": \"497f6eca-6276-4993-bfeb-53cbbbba6f08\",\n    \"updated_at\": \"2019-08-24T14:15:22Z\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Restarting Caddy Service\nDESCRIPTION: This shell command restarts the Caddy service using systemctl, which is necessary after modifying the Caddyfile or other configuration files.\nSOURCE: https://github.com/coder/coder/blob/main/docs/tutorials/reverse-proxy-caddy.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart caddy\n```"
  }
]