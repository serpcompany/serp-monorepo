[
  {
    "owner": "cve-search",
    "repo": "cve-search",
    "content": "TITLE: Searching Vulnerabilities using search.py in Python\nDESCRIPTION: This script is used to search for vulnerabilities in the National Vulnerability Database, which contains data from http://nvd.nist.org. It takes arguments for specifying the product, free text search in vulnerability summary, CVE-ID, output format, sorting options, Common Platform Enumeration (CPE) name lookup, ranking, CAPEC lookup, vendor name, and search terms.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nusage: search.py [-h] [-q Q] [-p P [P ...]] [--only_if_vulnerable] [--strict_vendor_product] [--lax] [-f F] [-c C] [-o O]\n                 [-l] [-n] [-r] [-a] [-v V] [-s S] [-t T] [-i I]\n\nSearch for vulnerabilities in the National Vulnerability DB. Data from http://nvd.nist.org.\n\noptions:\n  -h, --help            show this help message and exit\n  -p P [P ...]          P = search one or more products, e.g. o:microsoft:windows_7 or o:cisco:ios:12.1 or\n                        o:microsoft:windows_7 o:cisco:ios:12.1. Add --only_if_vulnerable if only vulnerabilities that\n                        directly affect the product are wanted.\n  --only_if_vulnerable  With this option, \"-p\" will only return vulnerabilities directly assigned to the product. I.e.\n                        it will not consider \"windows_7\" if it is only mentioned as affected OS in an adobe:reader\n                        vulnerability.\n  --strict_vendor_product\n                        With this option, a strict vendor product search is executed. The values in \"-p\" should be\n                        formatted as vendor:product, e.g. microsoft:windows_7\n  --lax                 Strict search for software version is disabled. Likely gives false positives for earlier\n                        versions that were not yet vulnerable. Note that version comparison for non-numeric values\n                        is done with simplifications.\n  -f F                  F = free text search in vulnerability summary\n  -c C                  search one or more CVE-ID\n  -o O                  O = output format [csv|html|json|xml|cveid]\n  -l                    sort in descending mode\n  -n                    lookup complete cpe (Common Platform Enumeration) name for vulnerable configuration\n  -r                    lookup ranking of vulnerable configuration\n  -a                    Lookup CAPEC for related CWE weaknesses\n  -v V                  vendor name to lookup in reference URLs\n  -s S                  search in summary text\n  -t T                  search in last n day (published)\n  -T T                  search in last n day (modified)\n  -i I                  Limit output to n elements (default: unlimited)\n  -q [Q]                Removed. Was used to search pip requirements file for CVEs.\n```\n\n----------------------------------------\n\nTITLE: Searching Vulnerabilities by Product Example in Bash\nDESCRIPTION: This command searches for vulnerabilities associated with cisco:ios:12.4 using the search.py script. The script is located in the ./bin/ directory.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search.py -p cisco:ios:12.4\n```\n\n----------------------------------------\n\nTITLE: Searching Vulnerabilities by Product and Outputting HTML in Bash\nDESCRIPTION: This command searches for vulnerabilities associated with microsoft:windows_7 and outputs the results in HTML format using the search.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search.py -p microsoft:windows_7 -o html\n```\n\n----------------------------------------\n\nTITLE: Querying the Fulltext Index and Outputting JSON in Bash\nDESCRIPTION: This command queries the fulltext index for CVEs matching the terms 'NFS' and 'Linux' and outputs the JSON object for each matching CVE-ID using the search_fulltext.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search_fulltext.py -q NFS -q Linux -f\n```\n\n----------------------------------------\n\nTITLE: Search Script Usage Example\nDESCRIPTION: This command demonstrates how to use the `search.py` script to search for a specific product (Joomla) and output the results in JSON format with ranking and CPE name lookup enabled. The `-p` option specifies the product to search for, `-o json` sets the output format to JSON, `-r` enables ranking lookup, and `-n` enables CPE name lookup.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npython3.3 search.py -p joomla: -o json -r -n\n```\n\n----------------------------------------\n\nTITLE: Looking up Ranking for a Specific CVE-ID in Bash\nDESCRIPTION: This command looks up the ranking and CPE name for a specific CVE-ID (CVE-2012-4341) using the search.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search.py -c CVE-2012-4341  -r  -n\n```\n\n----------------------------------------\n\nTITLE: JSON Processing Example with jq\nDESCRIPTION: This example demonstrates how to process the JSON output from the `search_fulltext.py` and `search.py` scripts using `jq`. The `search_fulltext.py` script searches for Java-related CVEs. The output is then piped to multiple instances of `search.py`, each configured with `-r` (ranking lookup) and `-c` (CPE redis cache).  Finally, `jq` is used to extract the `cvss` and `summary` fields from the JSON results.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npython3.3 search_fulltext.py -q Java | parallel -j 10 python3.3 search.py -r -c | jq '. | {cvss, summary}'\n```\n\n----------------------------------------\n\nTITLE: Comparing CVSS Values for Oracle Java in Bash\nDESCRIPTION: This command searches for vulnerabilities associated with oracle:java, extracts the CVSS values, and uses Rscript to calculate summary statistics (Min, 1st Qu, Median, Mean, 3rd Qu, Max) for the CVSS values.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython3 bin/search.py -p oracle:java -o json \\\n  | jq -r '.cvss' | Rscript -e 'summary(as.numeric(read.table(file(\"stdin\"))[,1]))'\n```\n\n----------------------------------------\n\nTITLE: Searching Fulltext and Analyzing Vendors in Bash\nDESCRIPTION: This command searches for vulnerabilities using the term 'unknown' and extracts the vendor names from the vulnerable configurations, then counts and sorts them to find the top 10 vendors. It uses python, jq, cut, sort, and uniq commands.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython3 bin/search_fulltext.py -q unknown -f \\\n    | jq -c '. | .vulnerable_configuration[0]' \\\n    | cut -f5 -d: | sort  | uniq -c  | sort -nr | head -10\n```\n\n----------------------------------------\n\nTITLE: Dumping Last CVE Entries to Atom Feed in Bash\nDESCRIPTION: This command dumps the last 2 CVE entries in Atom format using the dump_last.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./bin/dump_last.py -f atom -l 2\n```\n\n----------------------------------------\n\nTITLE: Search CVE with CPE Resolution - Python\nDESCRIPTION: This example demonstrates how to search for a specific CVE (CVE-2012-2897) with and without CPE resolution. The -n option enables CPE name resolution, replacing the CPE name with a human-readable description if available.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsearch.py -c CVE-2012-2897 -n\n```\n\nLANGUAGE: bash\nCODE:\n```\nsearch.py -c CVE-2012-2897\n```\n\n----------------------------------------\n\nTITLE: Fulltext Search Example Python\nDESCRIPTION: This example demonstrates how to perform a full-text search using `search_fulltext.py`. The `-q` option specifies the query terms, and the `-j` option outputs the results in JSON format. It relies on Python 3.3.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npython3.3 search_fulltext.py -q NFS -q Linux\npython3.3 search_fulltext.py -q NFS -q Linux -j\n```\n\n----------------------------------------\n\nTITLE: Search Vendor References (CSV Output) - Python\nDESCRIPTION: This command searches for vulnerabilities related to 'webex' products and outputs the vendor links in CSV format, filtering for references containing 'cisco' in their hostname.  The -p option specifies the product, -o csv sets the output format to CSV, and -v filters vendor references by hostname.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n./search.py -p webex: -o csv  -v \"cisco\"\n```\n\n----------------------------------------\n\nTITLE: Ranking Database Example Python\nDESCRIPTION: This snippet demonstrates how to add a ranking to the ranking database using `db_ranking.py`. The `-c` parameter specifies the CPE name, `-g` the group, and `-r` the rank. It uses Python 3.3. The example also shows how to perform a ranking lookup with cpe name resolution using `search.py`.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n./python3.3 db_ranking.py  -c \"sap:netweaver\" -g \"accounting\" -r 3\n./python3.3 search.py -c CVE-2012-4341  -r  -n\n```\n\n----------------------------------------\n\nTITLE: Finding Vulnerabilities for Vendor and Product via API in Bash\nDESCRIPTION: This command uses curl to retrieve a JSON list of vulnerabilities associated with a specific vendor (zyxel) and product (p-660hw) from the web API, and jq to format the output.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://127.0.0.1:5000/api/search/zyxel/p-660hw\" | jq .\n[\n  {\n    \"cwe\": \"CWE-352\",\n    \"references\": [\n      \"http://www.exploit-db.com/exploits/33518\",\n      \"http://secunia.com/advisories/58513\",\n      \"http://packetstormsecurity.com/files/126812/Zyxel-P-660HW-T1-Cross-Site-Request-Forgery.html\",\n      \"http://osvdb.org/show/osvdb/107449\"\n    ],\n    \"vulnerable_configuration\": [\n      \"cpe:/h:zyxel:p-660hw:_t1:v3\"\n    ],\n    \"Published\": \"2014-06-16T14:55:09.713-04:00\",\n    \"id\": \"CVE-2014-4162\",\n    \"Modified\": \"2014-07-17T01:07:29.683-04:00\",\n    \"cvss\": 6.8,\n    \"summary\": \"Multiple cross-site request forgery (CSRF) vulnerabilities in the Zyxel P-660HW-T1 (v3) wireless router allow remote attackers to hijack the authentication of administrators for requests that change the (1) wifi password or (2) SSID via a request to Forms/WLAN_General_1.\"\n  },\n  {\n    \"cwe\": \"CWE-20\",\n    \"references\": [\n      \"http://www.kb.cert.org/vuls/id/893726\"\n    ],\n    \"vulnerable_configuration\": [\n      \"cpe:/h:zyxel:p-660h-63:-\",\n      \"cpe:/h:zyxel:p-660h-t1:-\",\n      \"cpe:/h:zyxel:p-660h-d3:-\",\n      \"cpe:/h:zyxel:p-660h-t3:v2\",\n      \"cpe:/h:zyxel:p-660h-t1:v2\",\n      \"cpe:/h:zyxel:p-660h-d1:-\",\n      \"cpe:/h:zyxel:p-660h-67:-\",\n      \"cpe:/h:zyxel:p-660h-61:-\",\n      \"cpe:/h:zyxel:p-660hw_t3:v2\",\n      \"cpe:/h:zyxel:p-660hw_t3:-\",\n      \"cpe:/h:zyxel:p-660hw_d3:-\",\n      \"cpe:/h:zyxel:p-660hw_d1:v2\",\n      \"cpe:/h:zyxel:p-660hw_d1:-\",\n      \"cpe:/h:zyxel:p-660hw:_t1:v2\",\n      \"cpe:/h:zyxel:p-660hw:_t1:-\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Indexing Last New CVE Entries Python\nDESCRIPTION: This snippet shows how to index the newest entries from CVE using the `db_fulltext.py` script. It accepts the `-l` parameter to specify the number of entries to index, along with the verbosity flag `-v`. It relies on Python 3.3.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n%python3.3 db_fulltext.py -l 5 -v\n```\n\n----------------------------------------\n\nTITLE: Updating CVE Database for Recent Days\nDESCRIPTION: This command updates the CVE database for entries added or modified within the last 7 days.  The `-d` flag specifies the number of days to update from the NVD API.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/db_updater.py -d 7\n```\n\n----------------------------------------\n\nTITLE: Updating CVE Database\nDESCRIPTION: This command updates the CVE database to keep it up-to-date. It downloads changes to CVEs and CPEs since the last update and checks for file changes for other sources.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/db_updater.py\n```\n\n----------------------------------------\n\nTITLE: Updating Database with Specific Sources\nDESCRIPTION: This command updates the database with data from specific sources: CWE, CAPEC, VIA4, and EPSS. The `-s` flag specifies the list of sources to be updated.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/db_updater.py -s cwe capec via4 epss\n```\n\n----------------------------------------\n\nTITLE: Database Update - Python\nDESCRIPTION: This command updates the CVE database using the db_updater.py script with the -civ options. More information can be obtained by running the script with the -h flag.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\npython3 db_updater.py -civ\n```\n\n----------------------------------------\n\nTITLE: Searching Vulnerabilities by Free Text and CPE Lookup in Bash\nDESCRIPTION: This command searches for vulnerabilities with 'nagios' in the summary text and looks up the complete CPE name for the vulnerable configuration using the search.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search.py -f nagios -n\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies (pip)\nDESCRIPTION: This command installs Python dependencies for CVE-Search using `pip3`. It reads the list of packages from the `requirements.txt` file.  This ensures that all necessary Python libraries are installed within the Python environment.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/getting_started/installation.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: User Management Script Usage\nDESCRIPTION: This snippet demonstrates how to create a user account using the db_mgmt_admin.py script. The script takes various parameters to manage user accounts, including adding, changing passwords, removing, promoting, and demoting users.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPython3 db_mgmt_admin.py -a user\n```\n\n----------------------------------------\n\nTITLE: Dumping Specific CVE ID to JSON in Bash\nDESCRIPTION: This command dumps the JSON data for a specific CVE ID (CVE-2010-3333) using the search.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search.py -c CVE-2010-3333 -o json\n```\n\n----------------------------------------\n\nTITLE: Installing MongoDB Community Edition 7.0 (Ubuntu 22.04)\nDESCRIPTION: These commands install MongoDB Community Edition 7.0 on Ubuntu 22.04. It involves importing the MongoDB public key, creating a list file, updating the package database, and installing the MongoDB package. Finally, the service is started and enabled.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/getting_started/installation.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Import the public key used by the package management system\nsudo apt-get install gnupg curl\ncurl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \\\n    sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \\\n        --dearmor\n\n# Create a list file for MongoDB\necho \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse\" \\\n     sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n\n# Reload local package database & install the MongoDB package\nsudo apt-get update\nsudo apt-get install -y mongodb-org\n\n# Run MongoDB\nsudo systemctl daemon-reload\nsudo systemctl start mongod\n\n# Verify status of mongodb\nsudo systemctl status mongod\n\n# If all is ok, enable mongodb to start on system startup\nsudo systemctl enable mongod\n```\n\n----------------------------------------\n\nTITLE: Repopulating CVE Database\nDESCRIPTION: This command drops and repopulates the entire CVE database, reimporting all external sources.  The `-f` flag triggers the full repopulation.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/db_updater.py -f\n```\n\n----------------------------------------\n\nTITLE: JSON Output Processing with jq (Single Field)\nDESCRIPTION: This example shows how to use `jq` to extract a single field (`cvss`) from the JSON output of the `search_fulltext.py` script. The `-q Java` option specifies a search query for 'Java', and the `-f` option likely specifies a full-text search. The `jq '.cvss'` command filters the JSON output to only include the value of the `cvss` field.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\npython3.3 search_fulltext.py -q Java -f | jq '.cvss'\n```\n\n----------------------------------------\n\nTITLE: Adding Authentication Database Variables\nDESCRIPTION: This commit adds authentication database variables, specifically `authSource`, to the database connection call within the cve-search project. This enhancement allows for specifying the authentication database when connecting to MongoDB, improving security and flexibility. The configuration sample is updated with the new variable, and the documentation is updated to reflect this change.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Dumping Product of Specific Vendor via API in Bash\nDESCRIPTION: This command uses curl to retrieve a JSON list of products for a specific vendor (zyxel) from the web API, and jq to format the output.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://127.0.0.1:5000/api/browse/zyxel\"\n{\n  \"product\": [\n    \"n300_netusb_nbg-419n\",\n    \"n300_netusb_nbg-419n_firmware\",\n    \"p-660h-61\",\n    \"p-660h-63\",\n    \"p-660h-67\",\n    \"p-660h-d1\",\n    \"p-660h-d3\",\n    \"p-660h-t1\",\n    \"p-660h-t3\",\n    \"p-660hw\",\n    \"p-660hw_d1\",\n    \"p-660hw_d3\",\n    \"p-660hw_t3\"\n  ],\n  \"vendor\": \"zyxel\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB SRV Connection\nDESCRIPTION: This commit enables the use of MongoDB SRV URI records for database connectivity. It involves modifications to `Config.py` and `mongodb.py` to support SRV connections, and the addition of `dnspython` to `requirements.txt` as a dependency.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Querying NIST Ref Database with cve_refs.py (no URL expansion)\nDESCRIPTION: This snippet shows how to use the `cve_refs.py` script to query the Redis database for NIST references associated with a specific CVE ID, without expanding URLs. The `-c` option specifies the CVE ID to query. It requires python3 and a Redis database populated with NIST reference data.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\npython3 cve_refs.py -c CVE-2016-3100\n```\n\n----------------------------------------\n\nTITLE: Promoting User Accounts - Python\nDESCRIPTION: This script promotes user accounts using the db_mgmt_admin.py tool.  It requires Master account privileges and grants the user privileges to manage other users. The script needs to be executed with Python3.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPython3 db_mgmt_admin.py -p user\n```\n\n----------------------------------------\n\nTITLE: Setting Up OIDC Login Flow\nDESCRIPTION: This commit implements the initial setup for an OIDC (OpenID Connect) login flow within the cve-search project. The implementation likely involves adding necessary libraries to `requirements.txt` and configuring the application to interact with an OIDC provider for authentication. It also includes adding SSL verification to config and a corresponding method to retrieve the value.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Creating and activating a Python virtual environment\nDESCRIPTION: These commands create and activate a Python virtual environment named `cve-env` in the home directory of the `cve` user. This isolates the Python dependencies of CVE-Search from the system's Python installation.  The virtual environment ensures that CVE-Search has its own set of dependencies without affecting the system's libraries.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/getting_started/installation.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo su - cve\n\nvirtualenv cve-env\n\nsource ./cve-env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: PIP Installation Command\nDESCRIPTION: This snippet shows how to install the required Python packages for the cve-search project using pip.  It reads the list of packages from the `requirements.txt` file and installs them using `pip3`. This ensures that all necessary dependencies are available before running the application.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo pip3 install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Demoting User Accounts - Python\nDESCRIPTION: This script demotes user accounts using the db_mgmt_admin.py tool. It requires Master account privileges and will not demote the last Master account.  Demoted users will only be able to change their own password. The script needs to be executed with Python3.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nPython3 db_mgmt_admin.py -d user\n```\n\n----------------------------------------\n\nTITLE: Indexing all CVEs from MongoDB Collection in Bash\nDESCRIPTION: This command indexes all the CVEs from the current MongoDB collection using the db_fulltext.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/db_fulltext.py -l 0\n```\n\n----------------------------------------\n\nTITLE: Populating CVE Database\nDESCRIPTION: This command populates the CVE database by fetching Common Vulnerabilities and Exposures (CVE) and Common Platform Enumeration (CPE) data from the NVD NIST API and additional sources. The `-f` flag forces the update and `-c` checks for new CPEs.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/db_updater.py -f -c\n```\n\n----------------------------------------\n\nTITLE: Listing Project Dependencies\nDESCRIPTION: This code snippet lists the Python package dependencies for the cve-search project. These dependencies include pytest for testing, codecov for code coverage reporting, beautifulsoup4 for HTML parsing, and sphinx with sphinx-rtd-theme for documentation generation.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/requirements-dev.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npytest==7.1.1\npytest-cov==3.0.0\ncodecov==2.1.13\nbeautifulsoup4==4.11.0\nsphinx==5.3.0\nsphinx-rtd-theme==1.0.0\n```\n\n----------------------------------------\n\nTITLE: MongoDB Index Creation\nDESCRIPTION: Ensures an index exists on the 'Modified' key in the 'cves' collection of the MongoDB database. This index improves query performance when filtering or sorting CVEs by their modification date.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_11\n\nLANGUAGE: mongodb\nCODE:\n```\ndb.cves.ensureIndex( {Modified:1} )\n```\n\n----------------------------------------\n\nTITLE: Installing System Dependencies (apt)\nDESCRIPTION: This command installs system dependencies required by CVE-Search.  It uses `xargs` to pass the list of packages from `requirements.system` to `apt-get install`. This assumes the `requirements.system` file contains a list of package names, one per line.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/getting_started/installation.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install system dependencies by running\nxargs sudo apt-get install -y < requirements.system\n```\n\n----------------------------------------\n\nTITLE: Creating a dedicated user for CVE-Search\nDESCRIPTION: This command creates a new user named `cve` with a home directory at `/opt/cve`. This is done for security reasons, to avoid running the CVE-Search service as root.  It is recommended to run the CVE-Search service under an unprivileged user account.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/getting_started/installation.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser cve --home /opt/cve\n```\n\n----------------------------------------\n\nTITLE: Searching WebEx Vulnerabilities with Vendor Filtering in Bash\nDESCRIPTION: This command searches for vulnerabilities related to 'webex:' and outputs the results in CSV format, filtering references to only include 'cisco' as the vendor using the search.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search.py -p webex: -o csv  -v \"cisco\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX Proxy - Production\nDESCRIPTION: These commands configure NGINX to proxy connections to the UWSGI socket. It disables the default NGINX configuration, copies the sample nginx.conf configuration, creates symbolic links to enable the configuration, and restarts the NGINX service.  It assumes the availability of the sample configuration file.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/nginx/sites-enabled/default\n    \n    sudo cat /opt/cve/cve-search/etc/nginx.conf.sample \\\n        > /etc/nginx/sites-available/cve-search.conf\n    \n    sudo ln -s /etc/nginx/sites-available/cve-search.conf \\\n        /etc/nginx/sites-enabled/\n\n    sudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Starting SystemD Timer for DB Updater\nDESCRIPTION: These commands start and enable a SystemD timer for automatically updating the CVE database at regular intervals. The `start` command initiates the timer, and the `enable` command ensures that the timer starts on boot.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start cvesearch.db_updater.timer\nsudo systemctl enable cvesearch.db_updater.timer\n```\n\n----------------------------------------\n\nTITLE: Starting Web Server in Background - Standard - Python\nDESCRIPTION: This command starts the CVE-Search web server in the background using nohup.  It allows the server to run independently of the terminal session.  Stopping the server requires finding and killing the associated processes.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnohup python3 web/index.py &\n```\n\n----------------------------------------\n\nTITLE: Installing CVE-Search in the user's home directory\nDESCRIPTION: These commands clone the CVE-Search repository from GitHub, navigate to the cloned directory, and install the Python dependencies using `pip3`. The repository is cloned to `/home/cve/cve-search`.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/getting_started/installation.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd\n\ngit clone https://github.com/cve-search/cve-search.git\n\ncd cve-search\n\npip3 install -r requirements.txt\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Removing User Accounts - Python\nDESCRIPTION: This script removes user accounts using the db_mgmt_admin.py tool.  It requires Master account privileges and will not remove the last Master account. The script needs to be executed with Python3.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPython3 db_mgmt_admin.py -r user\n```\n\n----------------------------------------\n\nTITLE: Configuring UWSGI App - Production\nDESCRIPTION: These commands configure CVE-Search as a UWSGI application. It copies the sample wsgi.ini configuration, creates symbolic links to enable the app, and restarts the UWSGI service.  It assumes the availability of the sample configuration file.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo cat /opt/cve/cve-search/etc/wsgi.ini.sample \\\n        > /etc/uwsgi/apps-available/cve-search.ini\n    \n    sudo ln -s /etc/uwsgi/apps-available/cve-search.ini \\\n        /etc/uwsgi/apps-enabled/\n    \n    sudo systemctl restart uwsgi\n```\n\n----------------------------------------\n\nTITLE: Change User Password Script Usage\nDESCRIPTION: This snippet demonstrates how to change a user account's password using the db_mgmt_admin.py script.  It requires the user to input their current password before setting a new one.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPython3 db_mgmt_admin.py -c user\n```\n\n----------------------------------------\n\nTITLE: Starting SystemD Service for DB Initialization\nDESCRIPTION: This command starts a SystemD target for initializing the CVE database. The `--no-block` option ensures that the command returns immediately without waiting for the service to complete.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start --no-block cvesearch.db_init.target\n```\n\n----------------------------------------\n\nTITLE: Searching Vulnerabilities by Product and Outputting JSON in Bash\nDESCRIPTION: This command searches for vulnerabilities associated with cisco:ios:12.4 and outputs the results in JSON format using the search.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search.py -p cisco:ios:12.4 -o json\n```\n\n----------------------------------------\n\nTITLE: Adding Vulnerable Product Field Support\nDESCRIPTION: Adds support for parsing the 'vulnerable_product' field from NVD XML feeds. Introduces a new option '--vulnerable-product-only' to filter results based on direct product assignments.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Example Usage of Vulnerable Product Option\nDESCRIPTION: Demonstrates how to use the '--vulnerable-product-only' option with the '-p' flag to retrieve vulnerabilities directly assigned to a specific product, excluding those mentioned only as affected OS in other vulnerabilities.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Search Multiple CVE-IDs - Python\nDESCRIPTION: This command shows how to search for multiple CVE-IDs at once. The -c option is used to specify each CVE-ID that needs to be searched.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nsearch.py -c CVE-2012-2897 -c CVE-2012-2553\n```\n\n----------------------------------------\n\nTITLE: Generating Fulltext Visualization Data in Bash\nDESCRIPTION: This command generates data for fulltext visualization by searching for CVEs and outputting the results to cve.json.  Requires NLTK.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search_fulltext.py  -g -s >cve.json\n```\n\n----------------------------------------\n\nTITLE: Querying the Fulltext Index in Bash\nDESCRIPTION: This command queries the fulltext index for CVEs matching the terms 'NFS' and 'Linux' using the search_fulltext.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./bin/search_fulltext.py -q NFS -q Linux\n```\n\n----------------------------------------\n\nTITLE: Help for Database Update Script - Python\nDESCRIPTION: This command displays the help message for the db_updater.py script. This can be used to get more info on the available parameters.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nPython3 db_updater -h\n```\n\n----------------------------------------\n\nTITLE: Adding Ranking to CPE Name in Bash\nDESCRIPTION: This command adds a ranking of 3 to the CPE name \"sap:netweaver\" for the group \"accounting\" using the db_ranking.py script.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./sbin/db_ranking.py  -c \"sap:netweaver\" -g \"accounting\" -r 3\n```\n\n----------------------------------------\n\nTITLE: Starting Web Server - Standard - Python\nDESCRIPTION: This command starts the CVE-Search web server using Python3. It requires the configurations.ini file to be set up.  The server can be stopped using CTRL+C.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython3 web/index.py\n```\n\n----------------------------------------\n\nTITLE: Listing Known Vendors via API in Bash\nDESCRIPTION: This command uses curl to retrieve a JSON list of known vendors from the web API.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"http://127.0.0.1:5000/api/browse/\"\n```\n\n----------------------------------------\n\nTITLE: Running the Web Interface in Python\nDESCRIPTION: This command navigates to the ./web directory and executes the index.py script, starting the web interface.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncd ./web\n./index.py\n```\n\n----------------------------------------\n\nTITLE: CVE Retrieval Sample Code Python\nDESCRIPTION: This code demonstrates how to retrieve the last CVE entries from the database using the `cves` module.  It shows how to enable ranking lookup. It assumes the existence of a `cves` module.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nimport cves\nl = cves.last(rankinglookup=True)\nl.get()\n```\n\n----------------------------------------\n\nTITLE: Running the Web Interface in Bash\nDESCRIPTION: This command starts the web interface by executing the index.py script in the ./web directory.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./web/index.py\n```\n\n----------------------------------------\n\nTITLE: Starting SystemD Service for DB Repopulation\nDESCRIPTION: This command starts a SystemD target to drop and repopulate the entire CVE database. The `--no-block` option runs the process in the background.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/database/database.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start --no-block cvesearch.db_repopulate.target\n```\n\n----------------------------------------\n\nTITLE: Starting Web Server via SystemD - Bash\nDESCRIPTION: This command starts the CVE-Search web server as a SystemD service. Assumes that the cvesearch.web.service unit file is properly configured. It uses systemctl to start the service in a non-blocking manner.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start --no-block cvesearch.web.service\n```\n\n----------------------------------------\n\nTITLE: Implementing CPE Version Conversion Library\nDESCRIPTION: This commit introduces a library designed to correctly convert CPE (Common Platform Enumeration) versions. It involves adding the library, renaming it for clarity, and using it within the `Toolkit.py` file. This aims to improve the accuracy of CPE version handling in the cve-search project.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Querying NIST Ref Database with cve_refs.py\nDESCRIPTION: This snippet shows how to use the `cve_refs.py` script to query the Redis database for NIST references associated with a specific CVE ID. The `-u` option expands the URLs, while `-c` specifies the CVE ID to query. It requires python3 and a Redis database populated with NIST reference data.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\npython3 cve_refs.py -u -c CVE-2016-3100\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificate - OpenSSL\nDESCRIPTION: This command generates a self-signed SSL certificate and key for enabling TLS.  It specifies the validity period, key algorithm, and output paths for the key and certificate files. Ensure the output paths match the configuration.ini file.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/docs/source/webgui/webgui.rst#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n        -keyout /ssl/cve-search.key -out /ssl/cve-search.crt\n```\n\n----------------------------------------\n\nTITLE: Comparing CVSS Values for Sun JRE in Bash\nDESCRIPTION: This command searches for vulnerabilities associated with sun:jre, extracts the CVSS values, and uses Rscript to calculate summary statistics (Min, 1st Qu, Median, Mean, 3rd Qu, Max) for the CVSS values.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython3 bin/search.py -p sun:jre -o json \\\n  | jq -r '.cvss' | Rscript -e 'summary(as.numeric(read.table(file(\"stdin\"))[,1]))'\n```\n\n----------------------------------------\n\nTITLE: Generating HTML from asciidoc (Python)\nDESCRIPTION: This commit log excerpt describes the addition of a CVE converter to asciidoc. The provided Python script can fetch CVE information via the web API and generate an asciidoc file, which can then be converted into various formats like HTML using asciidoctor.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\npython3 cve_doc.py  -c CVE-2015-0003 | asciidoctor - >test.html\n```\n\n----------------------------------------\n\nTITLE: Fixing ImportError in db_mgmt_d2sec.py (Python)\nDESCRIPTION: This commit log excerpt shows a fix for an ImportError in the db_mgmt_d2sec.py script. The error occurred because the 'DatabaseLayer' module was not found. The fix involves ensuring that the necessary database layer module is correctly imported.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nFile \"/home/laurens/Source/cve-search/sbin/db_mgmt_d2sec.py\", line 22, in <module>\n      import DatabaseLayer as dbLayer\n  ImportError: No module named 'DatabaseLayer'\n```\n\n----------------------------------------\n\nTITLE: Fixing NameError in db_mgmt_capec.py (Python)\nDESCRIPTION: This commit log excerpt indicates a fix for a NameError in the db_mgmt_capec.py script.  The error occurred because the 'dbLayer' variable was not defined before being used.  The fix ensures that the database layer is properly initialized before being accessed.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/ChangeLog.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nFile \"/home/laurens/Source/cve-search/sbin/db_mgmt_capec.py\", line 172, in <module>\n      i = dbLayer.getLastModified('capec')\n  NameError: name 'dbLayer' is not defined\n```\n\n----------------------------------------\n\nTITLE: Copyright Notice\nDESCRIPTION: This snippet represents the copyright notice for the cve-search project, attributing authorship to various contributors over different periods. It specifies the copyright holders and their respective GitHub profiles.\nSOURCE: https://github.com/cve-search/cve-search/blob/master/README.md#_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2012 Wim Remes - https://github.com/wimremes/\nCopyright (c) 2012-2024 Alexandre Dulaunoy - https://github.com/adulau/\nCopyright (c) 2015-2019 Pieter-Jan Moreels - https://github.com/pidgeyl/\nCopyright (c) 2020-2024 Paul Tikken - https://github.com/P-T-I\n```"
  }
]