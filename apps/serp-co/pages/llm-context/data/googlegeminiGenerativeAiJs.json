[
  {
    "owner": "google-gemini",
    "repo": "generative-ai-js",
    "content": "TITLE: Defining FunctionDeclarationsTool Property Type in TypeScript\nDESCRIPTION: Type definition for the functionDeclarations property that accepts an optional array of FunctionDeclaration objects. This property enables passing up to 64 function declarations to the model which can be called during model responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationstool.functiondeclarations.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclarations?: FunctionDeclaration[];\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclarationsTool Interface in TypeScript\nDESCRIPTION: The FunctionDeclarationsTool interface definition enables a system to interact with external systems to perform actions outside the model's knowledge and scope. It contains an optional functionDeclarations property that accepts an array of FunctionDeclaration objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationstool.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FunctionDeclarationsTool \n```\n\n----------------------------------------\n\nTITLE: GenerativeModel Class Definition in TypeScript\nDESCRIPTION: Base class definition for generative model APIs that provides core functionality for interacting with Google's generative AI models. This class serves as the main entry point for making API calls to generate content, embed content, and manage chat sessions.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GenerativeModel\n```\n\n----------------------------------------\n\nTITLE: Defining the ChatSession.sendMessageStream() Method Signature in TypeScript\nDESCRIPTION: Method signature for sendMessageStream which sends a chat message and receives the response as a GenerateContentStreamResult. The method accepts a string or array of string/Part objects as the request, and optional SingleRequestOptions that override global RequestOptions.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.chatsession.sendmessagestream.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsendMessageStream(request: string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentStreamResult>;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclaration Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionDeclaration interface, which represents a function that can be used as a Tool by the model and executed by the client. It includes properties for the function name, description, and parameters.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclaration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FunctionDeclaration \n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentStreamResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the GenerateContentStreamResult interface, which contains two properties: 'response' for the aggregated response promise, and 'stream' for iterating over content chunks as they arrive.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentstreamresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentStreamResult \n{\n  response: Promise<EnhancedGenerateContentResponse>;\n  stream: AsyncGenerator<EnhancedGenerateContentResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentRequest Interface in TypeScript\nDESCRIPTION: This code snippet defines the GenerateContentRequest interface, which extends BaseParams and includes properties for content generation requests. It specifies optional properties for cached content, system instructions, tool configurations, and an array of content items.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentrequest.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentRequest extends BaseParams {\n  cachedContent?: string;\n  contents: Content[];\n  systemInstruction?: string | Part | Content;\n  toolConfig?: ToolConfig;\n  tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallingConfig Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the configuration options for function calling in the Generative AI library. It includes optional properties for specifying allowed function names and the function calling mode.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallingconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCallingConfig \n```\n\n----------------------------------------\n\nTITLE: Instantiating a GenerativeModel in TypeScript\nDESCRIPTION: Constructor signature for creating a new instance of the GenerativeModel class. It requires an API key, model parameters, and optional request options for configuration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apiKey: string, modelParams: ModelParams, _requestOptions?: RequestOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining systemInstruction Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the systemInstruction property of the StartChatParams interface. It is an optional property that can accept a string, Part, or Content type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.startchatparams.systeminstruction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: string | Part | Content;\n```\n\n----------------------------------------\n\nTITLE: Defining the GoogleGenerativeAI Class in Typescript\nDESCRIPTION: Defines the `GoogleGenerativeAI` class, which serves as the main entry point for the library. It allows users to obtain a `GenerativeModel` instance and to retrieve a generative model instance from cached content.  The constructor accepts an API key.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport class GoogleGenerativeAI {\n    constructor(apiKey: string);\n    // (undocumented)\n    apiKey: string;\n    getGenerativeModel(modelParams: ModelParams, requestOptions?: RequestOptions): GenerativeModel;\n    getGenerativeModelFromCachedContent(cachedContent: CachedContent, modelParams?: Partial<ModelParams>, requestOptions?: RequestOptions): GenerativeModel;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Code Language Enum in TypeScript\nDESCRIPTION: This snippet exports a TypeScript enum named ExecutableCodeLanguage, which categorizes the languages that can be utilized within the generative AI model. The enum provides a way to refer to the language types in a structured manner, enhancing type safety and readability within the API documentation. The members include 'LANGUAGE_UNSPECIFIED' for unspecified languages and 'PYTHON' for Python language.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodelanguage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ExecutableCodeLanguage \n\n```\n\n----------------------------------------\n\nTITLE: Initializing Generative Model with TypeScript\nDESCRIPTION: Method signature for creating a GenerativeModel instance with optional model parameters and request options. Used to configure and instantiate AI model interactions in the Google Generative AI framework.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeai.getgenerativemodel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetGenerativeModel(modelParams: ModelParams, requestOptions?: RequestOptions): GenerativeModel;\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Samples with Node.js\nDESCRIPTION: This snippet demonstrates how to run the provided JavaScript sample files using Node.js from the command line. It serves as the basic execution instruction for each sample file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/samples/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"node function_calling.js\"\n```\n\n----------------------------------------\n\nTITLE: ChatSession Class Declaration\nDESCRIPTION: This code snippet shows the declaration of the `ChatSession` class in TypeScript. The class is exported, making it available for use in other modules. It serves as a container for managing chat sessions with a generative AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.chatsession.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class ChatSession \n```\n\n----------------------------------------\n\nTITLE: Constructing a new ChatSession instance in TypeScript\nDESCRIPTION: Creates a new instance of the ChatSession class with required API key and model parameters, plus optional parameters for chat configuration and request options.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.chatsession._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apiKey: string, model: string, params?: StartChatParams, _requestOptions?: RequestOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Function Calling Interfaces for Google Generative AI\nDESCRIPTION: TypeScript interfaces for function calling features in the Google Generative AI API. Includes function declarations, calls, responses, and configuration options.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface FunctionCall {\n    // (undocumented)\n    args: object;\n    // (undocumented)\n    name: string;\n}\n\n// @public (undocumented)\nexport interface FunctionCallingConfig {\n    // (undocumented)\n    allowedFunctionNames?: string[];\n    // (undocumented)\n    mode?: FunctionCallingMode;\n}\n\n// @public (undocumented)\nexport enum FunctionCallingMode {\n    // (undocumented)\n    ANY = \"ANY\",\n    // (undocumented)\n    AUTO = \"AUTO\",\n    // (undocumented)\n    MODE_UNSPECIFIED = \"MODE_UNSPECIFIED\",\n    // (undocumented)\n    NONE = \"NONE\"\n}\n\n// @public\nexport interface FunctionCallPart {\n    // (undocumented)\n    codeExecutionResult?: never;\n    // (undocumented)\n    executableCode?: never;\n    // (undocumented)\n    fileData?: never;\n    // (undocumented)\n    functionCall: FunctionCall;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData?: never;\n    // (undocumented)\n    text?: never;\n}\n\n// @public\nexport interface FunctionDeclaration {\n    description?: string;\n    name: string;\n    parameters?: FunctionDeclarationSchema;\n}\n\n// @public\nexport interface FunctionDeclarationSchema {\n    description?: string;\n    properties: {\n        [k: string]: FunctionDeclarationSchemaProperty;\n    };\n    required?: string[];\n    type: SchemaType;\n}\n\n// @public\nexport type FunctionDeclarationSchemaProperty = Schema;\n\n// @public\nexport interface FunctionDeclarationsTool {\n    functionDeclarations?: FunctionDeclaration[];\n}\n\n// @public\nexport interface FunctionResponse {\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    response: object;\n}\n\n// @public\nexport interface FunctionResponsePart {\n    // (undocumented)\n    codeExecutionResult?: never;\n    // (undocumented)\n    executableCode?: never;\n    // (undocumented)\n    fileData?: never;\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse: FunctionResponse;\n    // (undocumented)\n    inlineData?: never;\n    // (undocumented)\n    text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: TextPart.text Property Signature\nDESCRIPTION: This code snippet shows the TypeScript signature of the `text` property of the `TextPart` class. The property is of type string and represents the text content associated with the TextPart.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.textpart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"text: string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectSchema Interface in TypeScript\nDESCRIPTION: This code snippet defines the ObjectSchema interface, which extends BaseSchema. It specifies the structure for describing JSON objects with properties, optional required fields, and a fixed type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.objectschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ObjectSchema extends BaseSchema {\n  properties: { [k: string]: Schema };\n  required?: string[];\n  type: typeof SchemaType.OBJECT;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining generateContent() Method Signature in TypeScript\nDESCRIPTION: This code snippet defines the signature of the generateContent() method for the GenerativeModel class. It accepts a request parameter of various types and an optional requestOptions parameter, returning a Promise that resolves to a GenerateContentResult.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.generatecontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateContent(request: GenerateContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentResult>;\n```\n\n----------------------------------------\n\nTITLE: Defining BaseParams Interface in TypeScript\nDESCRIPTION: This code snippet defines the BaseParams interface, which includes optional properties for generationConfig and safetySettings. It serves as a base structure for parameters used in various methods of the generative AI package.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.baseparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BaseParams {\n  generationConfig?: GenerationConfig;\n  safetySettings?: SafetySetting[];\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Content Method Signature in TypeScript\nDESCRIPTION: Method signature for embedContent that accepts content to be embedded in various formats (EmbedContentRequest, string, or array of strings/Parts) and optional request configuration. Returns a Promise containing the embedding response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.embedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nembedContent(request: EmbedContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<EmbedContentResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining the GenerateContentResponse Interface in Typescript\nDESCRIPTION: Defines the structure of a `GenerateContentResponse`. It includes optional `candidates` (an array of `GenerateContentCandidate` objects), `promptFeedback` (of type `PromptFeedback`), and `usageMetadata` (of type `UsageMetadata`). It represents the standard response format from a generate content request.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport interface GenerateContentResponse {\n    candidates?: GenerateContentCandidate[];\n    promptFeedback?: PromptFeedback;\n    usageMetadata?: UsageMetadata;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerationConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the GenerationConfig interface, which includes various optional properties for configuring content generation requests. The interface provides options for controlling output tokens, penalties, response formats, and other generation parameters.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerationConfig \n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCodePart TypeScript Interface\nDESCRIPTION: Declares an interface for capturing executable code parts with various optional properties for code execution, function calls, and data management\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodepart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExecutableCodePart {\n  codeExecutionResult?: never;\n  executableCode: ExecutableCode;\n  fileData?: never;\n  functionCall?: never;\n  functionResponse?: never;\n  inlineData?: never;\n  text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for GenerateContentResponse that specifies the structure of content generation responses. It includes optional properties for candidates (array of possible responses), promptFeedback (content filter feedback), and usageMetadata (token usage information).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentResponse \n```\n\n----------------------------------------\n\nTITLE: Uploading Files with GoogleAIFileManager in TypeScript\nDESCRIPTION: Method signature for uploading a file with the GoogleAIFileManager class. Takes a file path, file metadata, and optional request options. Returns a Promise that resolves to an UploadFileResponse object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.googleaifilemanager.uploadfile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuploadFile(filePath: string, fileMetadata: FileMetadata, requestOptions?: SingleRequestOptions): Promise<UploadFileResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining toolConfig Property in GenerateContentRequest Interface (TypeScript)\nDESCRIPTION: This code snippet defines the optional toolConfig property of type ToolConfig in the GenerateContentRequest interface. It is part of the type definition for configuring tool-related options in content generation requests.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentrequest.toolconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoolConfig?: ToolConfig;\n```\n\n----------------------------------------\n\nTITLE: Declaring GoogleGenerativeAI Class in TypeScript\nDESCRIPTION: This snippet shows the TypeScript declaration for the GoogleGenerativeAI class, which is the main entry point for the Google Generative AI SDK.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeai.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleGenerativeAI \n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclarationSchema Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionDeclarationSchema interface, which includes properties for description, properties, required parameters, and type. It is used to specify the structure of parameters for function declarations in the generative AI context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionDeclarationSchema \n```\n\n----------------------------------------\n\nTITLE: Defining the GenerateContentRequest Interface in Typescript\nDESCRIPTION: Defines the structure for a `GenerateContentRequest`, which extends `BaseParams`. It includes properties for cached content, the content itself (`Content[]`), an optional system instruction which could be string, Part or Content, an optional ToolConfig, and an optional array of Tools.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport interface GenerateContentRequest extends BaseParams {\n    cachedContent?: string;\n    // (undocumented)\n    contents: Content[];\n    // (undocumented)\n    systemInstruction?: string | Part | Content;\n    // (undocumented)\n    toolConfig?: ToolConfig;\n    // (undocumented)\n    tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: ModelParams Interface Definition\nDESCRIPTION: This code snippet defines the `ModelParams` interface in TypeScript. It extends the `BaseParams` interface and includes optional properties for cached content, model name, system instructions, tool configurations, and a list of tools. This interface is used to configure generative models within the Google Generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.modelparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ModelParams extends BaseParams \n```\n\n----------------------------------------\n\nTITLE: Defining StartChatParams Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for StartChatParams which extends BaseParams and provides parameters for initializing a chat session with a generative model. This interface includes optional properties for configuring history, system instructions, tool configurations, and cached content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.startchatparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StartChatParams extends BaseParams \n```\n\n----------------------------------------\n\nTITLE: Defining response Property in GenerateContentResult Class (TypeScript)\nDESCRIPTION: This code snippet defines the 'response' property for the GenerateContentResult class. The property is of type EnhancedGenerateContentResponse, which likely contains detailed information about the generated content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentresult.response.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponse: EnhancedGenerateContentResponse;\n```\n\n----------------------------------------\n\nTITLE: Defining EnhancedGenerateContentResponse Interface in TypeScript\nDESCRIPTION: Interface definition that extends GenerateContentResponse and provides helper methods for accessing generated content. Includes methods for retrieving function calls and text content from response candidates.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enhancedgeneratecontentresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EnhancedGenerateContentResponse extends GenerateContentResponse \n```\n\n----------------------------------------\n\nTITLE: StartChatParams.tools property in TypeScript\nDESCRIPTION: The `tools` property is an optional array of `Tool` objects. It allows you to provide tools that the model can use during the chat session. If no tools are provided, the model will not have access to any external functionalities.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.startchatparams.tools.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"tools?: Tool[];\"\n```\n\n----------------------------------------\n\nTITLE: Defining Content Interface in TypeScript for @google/generative-ai\nDESCRIPTION: This code snippet defines the Content interface used for both prompts and response candidates in the @google/generative-ai package. It includes two properties: parts (an array of Part objects) and role (a string).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.content.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Content \n{\n  parts: Part[];\n  role: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UsageMetadata Interface in Typescript\nDESCRIPTION: This TypeScript interface, UsageMetadata, is intended for use in generative AI frameworks. Its purpose is to track and provide metadata on token usage in generation requests. It depends on the TypeScript environment and requires no additional libraries. Key properties include `promptTokenCount`, `cachedContentTokenCount`, `candidatesTokenCount`, and `totalTokenCount`, which represent different token counts associated with a generation request. The interface expects numeric counts as inputs and outputs and has optional and required fields. Token count details may constrain its implementation.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.usagemetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UsageMetadata \n```\n\n----------------------------------------\n\nTITLE: Defining Content Parts Array in TypeScript\nDESCRIPTION: Declares a parts property as an array of Part objects, used for handling different content types in generative AI interactions\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.content.parts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparts: Part[];\n```\n\n----------------------------------------\n\nTITLE: Defining Generative AI Tool Type (TypeScript)\nDESCRIPTION: This code defines the `Tool` type as a union of `FunctionDeclarationsTool`, `CodeExecutionTool`, and `GoogleSearchRetrievalTool`. This allows the model to use functions, execute code, or perform Google searches to access external information.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.tool.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare type Tool = FunctionDeclarationsTool | CodeExecutionTool | GoogleSearchRetrievalTool;\n```\n\n----------------------------------------\n\nTITLE: ChatSession.sendMessage() method signature\nDESCRIPTION: This code snippet shows the method signature of `sendMessage` in the `ChatSession` class. It takes a request (either a string or an array of strings/Parts) and optional request options, returning a Promise that resolves to a `GenerateContentResult`. The `SingleRequestOptions` allows overriding the global `RequestOptions`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.chatsession.sendmessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nsendMessage(request: string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentResult>;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining contents Property in GenerateContentRequest Interface (TypeScript)\nDESCRIPTION: This code snippet defines the contents property for the GenerateContentRequest interface. It specifies that contents is an array of Content objects, which likely represent the input data for content generation.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentrequest.contents.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: Content[];\n```\n\n----------------------------------------\n\nTITLE: RequestOptions Interface Definition in TypeScript\nDESCRIPTION: Defines the `RequestOptions` interface used for configuring requests to the Generative Language API. It includes optional properties for specifying the API client, API version, base URL, custom headers, and request timeout. This interface is used when calling `getGenerativeModel()` or `GoogleAIFileManager()` to customize the API request.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.requestoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RequestOptions \n```\n\n----------------------------------------\n\nTITLE: Defining Harm Probability Enum - TypeScript\nDESCRIPTION: This TypeScript code defines an enumeration, HarmProbability, which categorizes the probability levels (UNSPECIFIED, HIGH, LOW, MEDIUM, NEGLIGIBLE) of content being unsafe. It is part of the @google/generative-ai module and helps in hazard assessment frameworks within generative AI systems.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.harmprobability.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum HarmProbability\n```\n\nLANGUAGE: typescript\nCODE:\n```\nHARM_PROBABILITY_UNSPECIFIED = \"HARM_PROBABILITY_UNSPECIFIED\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nHIGH = \"HIGH\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nLOW = \"LOW\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nMEDIUM = \"MEDIUM\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nNEGLIGIBLE = \"NEGLIGIBLE\"\n```\n\n----------------------------------------\n\nTITLE: Building and Testing the generative-ai-js Project Locally\nDESCRIPTION: A sequence of commands to set up the development environment, build the project, run tests, generate documentation, format code, and create a changeset summary. These steps ensure that contributions meet the project's standards before submission.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd generative-ai-js\nnpm install\nnpm run build\nnpm run test\nnpm run docs\nnpm run format\nnpx @changesets/cli\n```\n\n----------------------------------------\n\nTITLE: Defining functionCallingConfig Property in ToolConfig Interface in TypeScript\nDESCRIPTION: TypeScript signature for the functionCallingConfig property within the ToolConfig interface. This property is typed as FunctionCallingConfig and is used to configure function calling capabilities.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.toolconfig.functioncallingconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCallingConfig: FunctionCallingConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining BatchEmbedContentsResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the BatchEmbedContentsResponse interface, which is used as the return type for the GenerativeModel.batchEmbedContents() method. It contains a single property 'embeddings' of type ContentEmbedding[].\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.batchembedcontentsresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BatchEmbedContentsResponse {\n    embeddings: ContentEmbedding[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmbedContentResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the EmbedContentResponse interface, which is the response type for the GenerativeModel.embedContent() method. It contains a single property 'embedding' of type ContentEmbedding.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.embedcontentresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EmbedContentResponse \n{\n  embedding: ContentEmbedding;\n}\n```\n\n----------------------------------------\n\nTITLE: Content Parts Property Definition in Typescript\nDESCRIPTION: Defines the `parts` property as an array of `Part` objects within the `Content` class. This property is essential for representing structured content in generative AI models, allowing for multiple distinct parts within a single content object. Each element in the array should conform to the `Part` interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.content.parts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"parts: Part[];\"\n```\n\n----------------------------------------\n\nTITLE: Defining EnhancedGenerateContentResponse.text Property in TypeScript\nDESCRIPTION: Defines the 'text' property as a method that returns a string. This method assembles text from all Parts of the first candidate in the response. It throws an exception if the prompt or candidate was blocked.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enhancedgeneratecontentresponse.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext: () => string;\n```\n\n----------------------------------------\n\nTITLE: Streaming Content Generation Result in TypeScript\nDESCRIPTION: Defines an asynchronous generator interface for streaming content generation responses from the Generative AI library. Allows iterative processing of generated content with enhanced type support.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentstreamresult.stream.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstream: AsyncGenerator<EnhancedGenerateContentResponse>;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chat History in TypeScript with Google Generative AI SDK\nDESCRIPTION: Gets the chat history from a ChatSession. This method returns a Promise that resolves to an array of Content objects. It excludes blocked prompts and candidates, as well as prompts that generated blocked candidates.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.chatsession.gethistory.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetHistory(): Promise<Content[]>;\n```\n\n----------------------------------------\n\nTITLE: Defining mode Property in FunctionCallingConfig Interface - TypeScript\nDESCRIPTION: Signature definition for the optional mode property in the FunctionCallingConfig interface, which accepts a value of type FunctionCallingMode.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallingconfig.mode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: FunctionCallingMode;\n```\n\n----------------------------------------\n\nTITLE: Defining Possible Roles in TypeScript\nDESCRIPTION: This code snippet defines a read-only array named `POSSIBLE_ROLES` containing string literals representing the possible roles: 'user', 'model', 'function', and 'system'. It is a constant declaration which aims to standardize the roles available within the generative AI model. This avoids the use of arbitrary strings, promoting type safety and consistency in role assignments.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.possible_roles.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nPOSSIBLE_ROLES: readonly [\"user\", \"model\", \"function\", \"system\"]\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Content Part Type in TypeScript\nDESCRIPTION: Union type representing multiple part types including text, data, function call/response, file data, and code execution parts\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.part.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Part = TextPart | InlineDataPart | FunctionCallPart | FunctionResponsePart | FileDataPart | ExecutableCodePart | CodeExecutionResultPart;\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadata Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure for metadata that can be provided during a file upload. It includes optional properties for display name and name, along with a required property for MIME type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileMetadata {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SafetySetting Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SafetySetting which can be included in request parameters to control content safety filtering. It contains two properties: category (specifying the type of harm to check for) and threshold (defining the level at which content should be blocked).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.safetysetting.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetySetting \n```\n\n----------------------------------------\n\nTITLE: Defining Schema Type Using TypeScript\nDESCRIPTION: This snippet exports a type definition for Schema that can represent multiple types of data structures. It allows for flexibility in defining data according to OpenAPI standards and can handle various data formats such as strings, numbers, booleans, arrays, and objects. This type is foundational for constructing a flexible generative AI API.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.schema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Schema = StringSchema | NumberSchema | IntegerSchema | BooleanSchema | ArraySchema | ObjectSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining HarmCategory Enum - TypeScript\nDESCRIPTION: This snippet declares an enumeration named HarmCategory in TypeScript, which categorizes potential harmful content prompts that the application should block. The enum members represent different types of harm categories such as civic integrity, dangerous content, harassment, hate speech, sexually explicit content, and unspecified harm. These values are essential for enforcing content guidelines in generative AI applications.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.harmcategory.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare enum HarmCategory {\n    HARM_CATEGORY_CIVIC_INTEGRITY = \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n    HARM_CATEGORY_DANGEROUS_CONTENT = \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    HARM_CATEGORY_HARASSMENT = \"HARM_CATEGORY_HARASSMENT\",\n    HARM_CATEGORY_HATE_SPEECH = \"HARM_CATEGORY_HATE_SPEECH\",\n    HARM_CATEGORY_SEXUALLY_EXPLICIT = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    HARM_CATEGORY_UNSPECIFIED = \"HARM_CATEGORY_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Chat Session in Generative AI\nDESCRIPTION: Initializes a new ChatSession with optional configuration parameters. Enables multi-turn conversational interactions with the generative AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.startchat.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstartChat(startChatParams?: StartChatParams): ChatSession;\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadata Interface in TypeScript for Google Generative AI\nDESCRIPTION: This code snippet defines the FileMetadata interface which specifies the metadata structure required when uploading files to the Generative AI API. It includes a required mimeType property and optional displayName and name properties.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileMetadata \n\n```\n\n----------------------------------------\n\nTITLE: Defining Content Interfaces for Google Generative AI\nDESCRIPTION: TypeScript interfaces for content management in the Google Generative AI API. These interfaces define the structure for cached content and related operations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface CachedContent extends CachedContentBase {\n    createTime?: string;\n    // (undocumented)\n    name?: string;\n    ttl?: string;\n    updateTime?: string;\n}\n\n// @public (undocumented)\nexport interface CachedContentBase {\n    // (undocumented)\n    contents: Content[];\n    // (undocumented)\n    displayName?: string;\n    expireTime?: string;\n    // (undocumented)\n    model?: string;\n    // (undocumented)\n    systemInstruction?: string | Part | Content;\n    // (undocumented)\n    toolConfig?: ToolConfig;\n    // (undocumented)\n    tools?: Tool[];\n}\n\n// @public\nexport interface CachedContentCreateParams extends CachedContentBase {\n    ttlSeconds?: number;\n}\n\n// @public\nexport interface CachedContentUpdateInputFields {\n    // (undocumented)\n    expireTime?: string;\n    // (undocumented)\n    ttlSeconds?: number;\n}\n\n// @public\nexport interface CachedContentUpdateParams {\n    // (undocumented)\n    cachedContent: CachedContentUpdateInputFields;\n    updateMask?: string[];\n}\n\n// @internal\nexport interface _CachedContentUpdateRequest {\n    // (undocumented)\n    cachedContent: _CachedContentUpdateRequestFields;\n    updateMask?: string[];\n}\n\n// @internal\nexport interface _CachedContentUpdateRequestFields {\n    // (undocumented)\n    expireTime?: string;\n    // (undocumented)\n    ttl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SafetySetting.category Property\nDESCRIPTION: This snippet defines the 'category' property of type 'HarmCategory' for the SafetySetting. The property is essential for categorizing harm levels in generative AI's safety settings. This enables developers to specify the category of harm when implementing safety measures in AI models.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.safetysetting.category.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncategory: HarmCategory;\n```\n\n----------------------------------------\n\nTITLE: Defining SafetyRating Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for SafetyRating which represents a safety rating associated with content generated by the Generative AI API. It contains two properties: category of type HarmCategory and probability of type HarmProbability.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.safetyrating.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SafetyRating \n```\n\n----------------------------------------\n\nTITLE: Example Function Parameters Schema Definition\nDESCRIPTION: Example showing how to define required and optional parameters in the schema format. Demonstrates defining a required string parameter 'param1' and an optional integer parameter 'param2'.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclaration.parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nparam1:\n  type: STRING\nparam2:\n type: INTEGER\nrequired:\n  - param1\n```\n\n----------------------------------------\n\nTITLE: Example of FunctionDeclaration Parameters Schema\nDESCRIPTION: An example showing how to define function parameters with one required parameter ('param1') and one optional parameter ('param2'). The schema uses the object type with property definitions and a required array.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclaration.parameters.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nparam1:\n\n  type: STRING\nparam2:\n\n type: INTEGER\nrequired:\n\n  - param1\n```\n\n----------------------------------------\n\nTITLE: Constructing GoogleAIFileManager Instance in TypeScript\nDESCRIPTION: This code snippet shows the constructor signature for creating a new instance of the GoogleAIFileManager class. It takes an apiKey as a required parameter and an optional _requestOptions parameter.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apiKey: string, _requestOptions?: RequestOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining functionCallingConfig Property in TypeScript\nDESCRIPTION: This snippet defines the 'functionCallingConfig' property within the ToolConfig interface, which holds configuration options for function calling in TypeScript. It is a key part of the tool's setup for handling function calls. The main parameter is 'FunctionCallingConfig', which outlines the necessary structure for the configuration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.toolconfig.functioncallingconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCallingConfig: FunctionCallingConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining FinishReason Enum in TypeScript for Google Generative AI\nDESCRIPTION: Declaration of the FinishReason enum which provides standardized codes for why a generative model's response terminated. This includes reasons like reaching token limits, safety boundaries, or natural stopping points.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.finishreason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FinishReason \n```\n\n----------------------------------------\n\nTITLE: Defining Candidates Property in TypeScript\nDESCRIPTION: This snippet declares the candidates property within the GenerateContentResponse interface. It is defined as an optional array of GenerateContentCandidate objects, which represent the various candidate responses generated by the AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentresponse.candidates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncandidates?: GenerateContentCandidate[];\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in FunctionDeclarationSchema in TypeScript\nDESCRIPTION: TypeScript signature for the properties field of the FunctionDeclarationSchema interface. This field defines a dictionary of properties where the keys are property names and values are FunctionDeclarationSchemaProperty objects that describe the format and constraints of each parameter.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationschema.properties.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nproperties: {\n        [k: string]: FunctionDeclarationSchemaProperty;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining Property in GenerateContentRequest\nDESCRIPTION: This TypeScript snippet defines an optional 'tools' property in the GenerateContentRequest type, expecting an array of 'Tool' objects. It allows specifying tools that can be used in a generative AI request. The 'Tool' type must be defined elsewhere in the codebase. This snippet appears in the context of an automatically generated documentation file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentrequest.tools.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tool[];\n```\n\n----------------------------------------\n\nTITLE: Defining TextPart Interface in TypeScript\nDESCRIPTION: This code snippet defines the TextPart interface, which represents a content part for a text string. It includes several optional properties and one required 'text' property of type string.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.textpart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextPart \n{\n  codeExecutionResult?: never;\n  executableCode?: never;\n  fileData?: never;\n  functionCall?: never;\n  functionResponse?: never;\n  inlineData?: never;\n  text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining functionDeclarations Property in FunctionDeclarationsTool Class in TypeScript\nDESCRIPTION: Optional property that accepts an array of FunctionDeclaration objects to be passed to the model with the current user query. The model may call these functions in its response, and the user should provide function responses in the next turn. Limited to a maximum of 64 function declarations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationstool.functiondeclarations.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionDeclarations?: FunctionDeclaration[];\n```\n\n----------------------------------------\n\nTITLE: Defining the GenerativeModel Class in Typescript\nDESCRIPTION: Defines the `GenerativeModel` class, which is used to interact with generative AI models. It includes methods for generating content, embedding content, counting tokens, and starting a chat session. The constructor takes an API key, model parameters, and optional request options.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport class GenerativeModel {\n    constructor(apiKey: string, modelParams: ModelParams, _requestOptions?: RequestOptions);\n    // (undocumented)\n    apiKey: string;\n    batchEmbedContents(batchEmbedContentRequest: BatchEmbedContentsRequest, requestOptions?: SingleRequestOptions): Promise<BatchEmbedContentsResponse>;\n    // (undocumented)\n    cachedContent: CachedContent;\n    countTokens(request: CountTokensRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<CountTokensResponse>;\n    embedContent(request: EmbedContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<EmbedContentResponse>;\n    generateContent(request: GenerateContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentResult>;\n    generateContentStream(request: GenerateContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentStreamResult>;\n    // (undocumented)\n    generationConfig: GenerationConfig;\n    // (undocumented)\n    model: string;\n    // (undocumented)\n    safetySettings: SafetySetting[];\n    startChat(startChatParams?: StartChatParams): ChatSession;\n    // (undocumented)\n    systemInstruction?: Content;\n    // (undocumented)\n    toolConfig?: ToolConfig;\n    // (undocumented)\n    tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart Interface in TypeScript\nDESCRIPTION: The TypeScript interface definition for FileDataPart in the @google/generative-ai library. It specifies a content part interface that represents FileData with a required fileData property and several optional properties marked as 'never' type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileDataPart \n\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclaration.name Property in TypeScript\nDESCRIPTION: The TypeScript signature for the name property in the FunctionDeclaration interface. This property specifies the name of the function to call and must follow specific formatting rules: it must start with a letter or underscore, contain only alphanumeric characters, underscores, or dashes, and have a maximum length of 64 characters.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclaration.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the HarmCategory Enum in Typescript\nDESCRIPTION: Defines the `HarmCategory` enum, which represents different categories of harm. These categories are used in safety settings to filter or block content based on its potential for harm.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport enum HarmCategory {\n    // (undocumented)\n    HARM_CATEGORY_CIVIC_INTEGRITY = \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n    // (undocumented)\n    HARM_CATEGORY_DANGEROUS_CONTENT = \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    // (undocumented)\n    HARM_CATEGORY_HARASSMENT = \"HARM_CATEGORY_HARASSMENT\",\n    // (undocumented)\n    HARM_CATEGORY_HATE_SPEECH = \"HARM_CATEGORY_HATE_SPEECH\",\n    // (undocumented)\n    HARM_CATEGORY_SEXUALLY_EXPLICIT = \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    // (undocumented)\n    HARM_CATEGORY_UNSPECIFIED = \"HARM_CATEGORY_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallPart Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionCallPart interface, which represents a content part for a function call. It includes optional properties like codeExecutionResult, executableCode, fileData, functionResponse, inlineData, and text, as well as a required functionCall property of type FunctionCall.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCallPart \n```\n\n----------------------------------------\n\nTITLE: Defining FileData Interface in TypeScript\nDESCRIPTION: Defines the FileData interface structure used for handling file data in the Google Generative AI library. The interface includes fileUri and mimeType properties as strings.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileData \n```\n\n----------------------------------------\n\nTITLE: Defining HarmBlockThreshold Enum\nDESCRIPTION: This code snippet exports the HarmBlockThreshold enum which contains preset constants representing various blocking thresholds for content moderation related to harm levels. Each member of the enum defines a specific level of harm tolerance for the content, which can aid in automated filtering mechanisms.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.harmblockthreshold.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum HarmBlockThreshold {\n    BLOCK_LOW_AND_ABOVE = \"BLOCK_LOW_AND_ABOVE\",\n    BLOCK_MEDIUM_AND_ABOVE = \"BLOCK_MEDIUM_AND_ABOVE\",\n    BLOCK_NONE = \"BLOCK_NONE\",\n    BLOCK_ONLY_HIGH = \"BLOCK_ONLY_HIGH\",\n    HARM_BLOCK_THRESHOLD_UNSPECIFIED = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GroundingMetadata Interface in TypeScript\nDESCRIPTION: This code snippet defines the 'GroundingMetadata' interface, outlining the structure of metadata returned when grounding is enabled. The interface includes properties like groundingChunks, groundingSupports, retrievalMetadata, searchEntryPoint, and webSearchQueries, each serving specific purposes in handling grounding data.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingmetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface GroundingMetadata \n\n```\n\n----------------------------------------\n\nTITLE: Defining SingleRequestOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for SingleRequestOptions that extends the RequestOptions interface. It includes an optional signal property of type AbortSignal for aborting asynchronous requests.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.singlerequestoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SingleRequestOptions extends RequestOptions \n```\n\n----------------------------------------\n\nTITLE: Implementing Batch Content Embedding with GenerativeModel in TypeScript\nDESCRIPTION: Method signature for batchEmbedContents that processes multiple embed content requests simultaneously. Takes a BatchEmbedContentsRequest object and optional SingleRequestOptions, returning a Promise of BatchEmbedContentsResponse.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.batchembedcontents.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbatchEmbedContents(batchEmbedContentRequest: BatchEmbedContentsRequest, requestOptions?: SingleRequestOptions): Promise<BatchEmbedContentsResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining RequestOptions Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for RequestOptions which contains optional configuration parameters for API requests in the Google Generative AI JavaScript SDK. It includes properties for API client identification, version selection, base URL configuration, custom headers, and request timeout settings.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.requestoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RequestOptions \n\n```\n\n----------------------------------------\n\nTITLE: Defining generationConfig Property in BaseParams Interface (TypeScript)\nDESCRIPTION: Property signature definition for the generationConfig property in the BaseParams interface. This optional property accepts a GenerationConfig object that controls generation settings for AI text generation.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.baseparams.generationconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerationConfig?: GenerationConfig;\n```\n\n----------------------------------------\n\nTITLE: Streaming Content Generation Method Signature\nDESCRIPTION: Method signature for generateContentStream() that enables streaming responses from the generative model. Takes a content request parameter and optional request options, returning a promise that resolves to a stream result object containing both the streaming iterator and final aggregated response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.generatecontentstream.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateContentStream(request: GenerateContentRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentStreamResult>;\n```\n\n----------------------------------------\n\nTITLE: Constructing GoogleGenerativeAI Instance in TypeScript\nDESCRIPTION: This snippet constructs a new instance of the `GoogleGenerativeAI` class, requiring an API key for authentication. The constructor method initializes the instance with the provided API key. There are no additional parameters or return values defined.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeai._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apiKey: string);\n```\n\n----------------------------------------\n\nTITLE: Declaring OpenAPI Schema Types Enumeration\nDESCRIPTION: The code snippet defines an enumeration named SchemaType in TypeScript, listing various data types used in OpenAPI such as ARRAY, BOOLEAN, INTEGER, NUMBER, OBJECT, and STRING. These enumerated types help in structuring data models in OpenAPI specifications. No external dependencies are required for this enumeration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.schematype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum SchemaType\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails Interface in TypeScript\nDESCRIPTION: Defines the interface for error details that may be included in an error response. The interface includes optional properties for type, domain, metadata, and reason.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.errordetails.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ErrorDetails \n```\n\n----------------------------------------\n\nTITLE: Implementing Token Counter Method in TypeScript\nDESCRIPTION: Method signature for counting tokens in provided content using Google's Generative AI model. Accepts either a CountTokensRequest object, string, or array of strings/Parts, with optional request configuration. Returns a Promise containing the token count response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.counttokens.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncountTokens(request: CountTokensRequest | string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<CountTokensResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining GroundingSupport Interface\nDESCRIPTION: This snippet declares the GroundingSupport interface, which is used to represent grounding support in the generative AI library. It includes optional properties related to confidence scores and grounding chunk indices. The interface aids in structuring the data related to grounding support effectively in TypeScript.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupport.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface GroundingSupport {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SchemaType Enum in TypeScript\nDESCRIPTION: This code snippet defines the SchemaType enum, which contains the list of OpenAPI data types as specified by the Swagger documentation. It includes six enum members representing different data types.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.schematype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum SchemaType \n{\n  ARRAY = \"array\",\n  BOOLEAN = \"boolean\",\n  INTEGER = \"integer\",\n  NUMBER = \"number\",\n  OBJECT = \"object\",\n  STRING = \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallingMode Enum in TypeScript\nDESCRIPTION: Declaration of the FunctionCallingMode enum which specifies the available modes for function calling in the Google Generative AI API. The enum includes options for AUTO, ANY, NONE, and MODE_UNSPECIFIED.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallingmode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FunctionCallingMode \n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails Interface in TypeScript for Google Generative AI\nDESCRIPTION: TypeScript interface definition for the ErrorDetails object that may be included in error responses from the Google Generative AI API. It contains optional properties for type information, domain, metadata, and reason for the error.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.errordetails.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ErrorDetails \n\n```\n\n----------------------------------------\n\nTITLE: Defining GroundingSupportSegment Interface\nDESCRIPTION: This TypeScript code declares the GroundingSupportSegment interface, which serves as a model for content segments used in generative AI. It includes optional properties that define the start and end indices within a part, the part index, and the text content relevant to the segment.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupportsegment.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface GroundingSupportSegment \n\n```\n\n----------------------------------------\n\nTITLE: Defining the GoogleGenerativeAIError Class in Typescript\nDESCRIPTION: Defines the base `GoogleGenerativeAIError` class, which extends the standard `Error` class. It serves as the parent class for more specific error types within the library, providing a consistent way to handle errors.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport class GoogleGenerativeAIError extends Error {\n    constructor(message: string);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclarationSchemaProperty Type in TypeScript\nDESCRIPTION: Declares a type alias FunctionDeclarationSchemaProperty that references the Schema type. Used for defining the schema structure of top-level function declarations in the Google Generative AI JavaScript library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationschemaproperty.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FunctionDeclarationSchemaProperty = Schema;\n```\n\n----------------------------------------\n\nTITLE: Defining allowedFunctionNames Property in FunctionCallingConfig Interface\nDESCRIPTION: This code snippet shows the TypeScript signature for the allowedFunctionNames property. It is an optional array of strings that likely specifies which function names are allowed to be called within the configuration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallingconfig.allowedfunctionnames.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nallowedFunctionNames?: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining the Part type in TypeScript\nDESCRIPTION: This code snippet defines the `Part` type as a union of several other types, including `TextPart`, `InlineDataPart`, `FunctionCallPart`, `FunctionResponsePart`, `FileDataPart`, `ExecutableCodePart`, and `CodeExecutionResultPart`. This allows a `Part` to represent different kinds of content that can be used within a generative AI model. The type is exported for use in other modules.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.part.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Part = TextPart | InlineDataPart | FunctionCallPart | FunctionResponsePart | FileDataPart | ExecutableCodePart | CodeExecutionResultPart;\n```\n\n----------------------------------------\n\nTITLE: GroundingSupport Properties Table\nDESCRIPTION: This snippet provides a summary of properties included in the GroundingSupport interface, detailing their types, modifiers, and descriptions. Notably, properties like confidenceScores and groundingChunkIndices help in assessing the reliability and attribution of claims made by the AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupport.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n|  Property | Modifiers | Type | Description |\n|  --- | --- | --- | --- |\n|  [confidenceScores?](./generative-ai.groundingsupport.confidencescores.md) |  | number\\[\\] | _(Optional)_ Confidence score of the support references. Ranges from 0 to 1. 1 is the most confident. This list must have the same size as the grounding_chunk_indices. |\n|  [groundingChunckIndices?](./generative-ai.groundingsupport.groundingchunckindices.md) |  | number\\[\\] | _(Optional)_ A list of indices (into 'grounding_chunk') specifying the citations associated with the claim. For instance \\[1,3,4\\] means that grounding_chunk\\[1\\], grounding_chunk\\[3\\], grounding_chunk\\[4\\] are the retrieved content attributed to the claim. |\n|  [segment?](./generative-ai.groundingsupport.segment.md) |  | string | _(Optional)_ URI reference of the chunk. |\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallingConfig Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionCallingConfig interface, which includes optional properties for specifying allowed function names and the function calling mode.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallingconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCallingConfig {\n    allowedFunctionNames?: string[];\n    mode?: FunctionCallingMode;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BatchEmbedContentsRequest Interface in TypeScript\nDESCRIPTION: This code snippet defines the BatchEmbedContentsRequest interface, which is used as parameters for the GenerativeModel.batchEmbedContents() method. It contains a single property 'requests' of type EmbedContentRequest[].\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.batchembedcontentsrequest.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BatchEmbedContentsRequest \n{\n    requests: EmbedContentRequest[];\n}\n```\n\n----------------------------------------\n\nTITLE: SimpleStringSchema Interface Definition in TypeScript\nDESCRIPTION: TypeScript interface definition for SimpleStringSchema which extends BaseSchema. It represents a simple string schema that may optionally include format specifications.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.simplestringschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SimpleStringSchema extends BaseSchema \n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclaration Interface in TypeScript\nDESCRIPTION: Interface declaration for FunctionDeclaration type that includes optional description, required name, and optional parameters properties following OpenAPI 3.0 specification.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclaration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FunctionDeclaration\n```\n\n----------------------------------------\n\nTITLE: Defining Text Part Interface\nDESCRIPTION: This interface defines the structure for a text part of content. It includes a `text` property, which is a string, and other properties that are set to `never`.  This likely means only text is expected in this specific implementation.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextPart {\n    // (undocumented)\n    codeExecutionResult?: never;\n    // (undocumented)\n    executableCode?: never;\n    // (undocumented)\n    fileData?: never;\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData?: never;\n    // (undocumented)\n    text: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleGenerativeAIResponseError Class in TypeScript\nDESCRIPTION: This snippet defines the GoogleGenerativeAIResponseError class, which extends GoogleGenerativeAIError. It is used for errors in the contents of a response from the model, including parsing errors or responses with safety block reasons.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeairesponseerror.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleGenerativeAIResponseError<T> extends GoogleGenerativeAIError \n```\n\n----------------------------------------\n\nTITLE: ArraySchema Interface Definition in TypeScript\nDESCRIPTION: Defines the ArraySchema interface that extends BaseSchema to describe an ordered list of values. It includes properties for specifying the schema of array items and constraints on array length.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.arrayschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ArraySchema extends BaseSchema \n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Headers Property for HTTP Requests - Typescript\nDESCRIPTION: This TypeScript snippet defines the optional 'customHeaders' property in the RequestOptions interface, allowing users to specify custom HTTP request headers. This property can either be a 'Headers' object or a record of key-value pairs where both key and value are strings. There are no additional dependencies required for this snippet as it uses basic TypeScript types. This functionality is crucial for customizing headers in outgoing HTTP requests and extracting headers from incoming responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.requestoptions.customheaders.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncustomHeaders?: Headers | Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseMimeType Property in GenerationConfig\nDESCRIPTION: TypeScript property definition for responseMimeType that specifies the output format of generated responses. Supports 'text/plain' (default) for text output and 'application/json' for JSON responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.responsemimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponseMimeType?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining toolConfig Property in CachedContentBase Class (TypeScript)\nDESCRIPTION: This code snippet defines the toolConfig property for the CachedContentBase class. It is an optional property of type ToolConfig.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentbase.toolconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoolConfig?: ToolConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining StringSchema Union Type in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias named StringSchema which is a union of SimpleStringSchema and EnumStringSchema types. This type is used to describe string values in the Google Generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.stringschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StringSchema = SimpleStringSchema | EnumStringSchema;\n```\n\n----------------------------------------\n\nTITLE: NumberSchema Interface Definition\nDESCRIPTION: Defines the NumberSchema interface, which extends BaseSchema and describes a JSON-encodable floating-point number.  It includes properties for specifying the number's format (optional) and type.  The type property is a reference to SchemaType.NUMBER.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.numberschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NumberSchema extends BaseSchema \n```\n\n----------------------------------------\n\nTITLE: Defining Tool Configuration Interface in TypeScript\nDESCRIPTION: This TypeScript interface 'ToolConfig' defines configuration settings shared across tools in a request within the generative AI framework. It requires no specific dependencies, outside of its integration within the 'generative-ai' package, and is meant to standardize configuration parameters. There are no parameters taken directly by this interface as it serves as a structural definition. Its intended use is during the initialization of tools.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.toolconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ToolConfig \n```\n\n----------------------------------------\n\nTITLE: Defining UsageMetadata Property Type in GenerateContentResponse\nDESCRIPTION: TypeScript property definition that specifies an optional UsageMetadata type which contains information about token usage for content generation requests.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentresponse.usagemetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nusageMetadata?: UsageMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionTool TypeScript Interface\nDESCRIPTION: Declares an interface that allows code execution functionality in the generative AI model, with a flexible configuration for future extensions\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutiontool.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CodeExecutionTool {\n  codeExecution: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting SimpleStringSchema Interface in TypeScript\nDESCRIPTION: Defines an interface named SimpleStringSchema which extends BaseSchema. This interface describes a schema for simple strings with optional properties like format and enumeration, aimed at representing structured data in generative AI contexts. The type is intended to provide a foundation for specifying string-based data with potential date-time format support.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.simplestringschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SimpleStringSchema extends BaseSchema\n```\n\n----------------------------------------\n\nTITLE: Defining SystemInstruction Property Type in TypeScript\nDESCRIPTION: Type definition for the systemInstruction property that can accept a string, Part, or Content type. This property is optional as indicated by the '?' modifier.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentrequest.systeminstruction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: string | Part | Content;\n```\n\n----------------------------------------\n\nTITLE: Defining candidateCount Property in GenerationConfig Interface (TypeScript)\nDESCRIPTION: The signature for the candidateCount optional property in the GenerationConfig interface. This property determines the number of candidate responses to generate for each prompt.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.candidatecount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncandidateCount?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining LogprobsResult Interface TypeScript\nDESCRIPTION: The purpose of this snippet is to declare the LogprobsResult interface within the @google/generative-ai package, which captures potential results in generative AI models' log probability decoding steps. The snippet outlines properties like chosenCandidates and topCandidates that represent the path and best candidates in decoding, with arrays indicating the number of decoding steps. Considering TypeScript, it assumes familiarity with interface declaration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.logprobsresult.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface LogprobsResult \n```\n\n----------------------------------------\n\nTITLE: Defining GenerationConfig Property in GenerativeModel Class (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript signature for the generationConfig property of the GenerativeModel class. The property is of type GenerationConfig, which likely contains configuration settings for generating content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.generationconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerationConfig: GenerationConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining the ToolConfig Interface - TypeScript\nDESCRIPTION: This code snippet defines the ToolConfig interface, which serves as a configuration structure for tools in the Google generative AI framework. It outlines potential properties and types that can be used to configure function calling within tools.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.toolconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ToolConfig \n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cached Content with GoogleAICacheManager in TypeScript\nDESCRIPTION: This method retrieves a content cache by name. It takes a string parameter 'name' and returns a Promise that resolves to a CachedContent object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager.get.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget(name: string): Promise<CachedContent>;\n```\n\n----------------------------------------\n\nTITLE: Defining Outcome Enum in TypeScript\nDESCRIPTION: An enumeration that represents different possible outcomes of code execution, including success, failure, timeout, and unspecified states. Used for tracking and reporting code execution results.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.outcome.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum Outcome {\n  OUTCOME_DEADLINE_EXCEEDED = \"outcome_deadline_exceeded\",\n  OUTCOME_FAILED = \"outcome_failed\",\n  OUTCOME_OK = \"outcome_ok\",\n  OUTCOME_UNSPECIFIED = \"outcome_unspecified\"\n}\n```\n\n----------------------------------------\n\nTITLE: InlineDataPart Interface Definition\nDESCRIPTION: Defines the structure of the `InlineDataPart` interface. This interface is designed to represent a content part that contains inline data, such as an image. The interface includes optional properties for different data types, ensuring flexibility in representing various content formats.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InlineDataPart \n```\n\n----------------------------------------\n\nTITLE: Exporting IntegerSchema Interface in TypeScript\nDESCRIPTION: Defines the IntegerSchema interface which encapsulates a JSON-encodable integer. This interface extends BaseSchema and includes properties for defining the format (such as 'int32' or 'int64') and the type as SchemaType.INTEGER. This snippet is part of the generative AI library and requires the base schema to be defined.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.integerschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IntegerSchema extends BaseSchema\n```\n\n----------------------------------------\n\nTITLE: ContentEmbedding Interface Definition\nDESCRIPTION: This TypeScript interface defines the structure of a content embedding. It includes a single property, `values`, which is an array of numbers representing the embedding vector. This interface is part of the `@google/generative-ai` package.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.contentembedding.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ContentEmbedding \n```\n\n----------------------------------------\n\nTITLE: Defining GenerativeModel.cachedContent Property Type in TypeScript\nDESCRIPTION: Type definition showing the signature of the cachedContent property which is of type CachedContent.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.cachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncachedContent: CachedContent;\n```\n\n----------------------------------------\n\nTITLE: Defining Temperature Property in GenerationConfig\nDESCRIPTION: TypeScript type definition for the optional temperature property that controls randomness in model generation. The temperature is specified as a number value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.temperature.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntemperature?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining ListFilesResponse.files Property Type in TypeScript\nDESCRIPTION: Type definition for the files property in the ListFilesResponse interface. The property is an array of FileMetadataResponse objects that contains metadata about files.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.listfilesresponse.files.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfiles: FileMetadataResponse[];\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleAIFileManager Constructor - TypeScript\nDESCRIPTION: Constructor signature for creating a new instance of the GoogleAIFileManager class. Takes an API key as a required parameter and optional request options.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.googleaifilemanager._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apiKey: string, _requestOptions?: RequestOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Base URL in TypeScript\nDESCRIPTION: This TypeScript snippet defines a 'baseUrl' property for managing the endpoint URL in request options. The property can be a string and defaults to 'https://generativelanguage.googleapis.com', providing a base endpoint for the Generative AI API if not specified otherwise. This setup allows for flexible configuration of API requests while providing a sensible default.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.requestoptions.baseurl.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbaseUrl?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring GoogleGenerativeAIRequestInputError Class in TypeScript\nDESCRIPTION: This snippet defines the GoogleGenerativeAIRequestInputError class, which extends GoogleGenerativeAIError. It is used to represent errors in the contents of a request originating from user input when interacting with the Google Generative AI API.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeairequestinputerror.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleGenerativeAIRequestInputError extends GoogleGenerativeAIError \n```\n\n----------------------------------------\n\nTITLE: Defining RetrievalMetadata Interface in TypeScript\nDESCRIPTION: Declaration of the RetrievalMetadata interface which contains metadata related to retrieval in the grounding flow. This interface is exported from the @google/generative-ai package.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.retrievalmetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface RetrievalMetadata \n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties Structure in TypeScript\nDESCRIPTION: This code snippet defines a structure for JSON object properties within the @google/generative-ai namespace. It uses a dictionary pattern where each key represents a string and is associated with a Schema type, ensuring each object's properties are non-empty and well-defined. Dependencies include the TypeScript language and an assumed definition for Schema.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.objectschema.properties.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nproperties: {\n        [k: string]: Schema;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining stopSequences Property in GenerationConfig Interface in TypeScript\nDESCRIPTION: TypeScript signature for the stopSequences property in the GenerationConfig interface. This optional property accepts an array of strings that define sequences at which text generation should stop.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.stopsequences.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstopSequences?: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining BatchEmbedContentsResponse Embeddings Array\nDESCRIPTION: A TypeScript property that represents an array of ContentEmbedding objects, typically used to store embedding results for multiple content items in a batch processing scenario\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.batchembedcontentsresponse.embeddings.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nembeddings: ContentEmbedding[];\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclarationsTool Interface in TypeScript\nDESCRIPTION: The TypeScript interface definition for FunctionDeclarationsTool, which enables interaction with external systems to perform actions outside the model's knowledge and scope.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationstool.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface FunctionDeclarationsTool \n```\n\n----------------------------------------\n\nTITLE: Defining responseSchema Property in TypeScript for GenerationConfig\nDESCRIPTION: TypeScript signature for the responseSchema property in the GenerationConfig class. This property allows specifying an output response schema when the responseMIMEType is set to application/json.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.responseschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponseSchema?: ResponseSchema;\n```\n\n----------------------------------------\n\nTITLE: Declaring SafetySettings Property in TypeScript\nDESCRIPTION: Type definition for the safetySettings property that specifies an array of SafetySetting objects used to configure model safety parameters.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.safetysettings.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsafetySettings: SafetySetting[];\n```\n\n----------------------------------------\n\nTITLE: Defining mimeType Property in FileMetadata Interface in TypeScript\nDESCRIPTION: Property signature for the mimeType field in the FileMetadata interface. This property specifies the MIME type of a file as a string value when working with file operations in the Google Generative AI SDK.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadata.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Task Type Enum\nDESCRIPTION: This enum defines the possible task types for a model. It includes values like CLASSIFICATION, CLUSTERING, RETRIEVAL_DOCUMENT, RETRIEVAL_QUERY, SEMANTIC_SIMILARITY, and TASK_TYPE_UNSPECIFIED.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum TaskType {\n    // (undocumented)\n    CLASSIFICATION = \"CLASSIFICATION\",\n    // (undocumented)\n    CLUSTERING = \"CLUSTERING\",\n    // (undocumented)\n    RETRIEVAL_DOCUMENT = \"RETRIEVAL_DOCUMENT\",\n    // (undocumented)\n    RETRIEVAL_QUERY = \"RETRIEVAL_QUERY\",\n    // (undocumented)\n    SEMANTIC_SIMILARITY = \"SEMANTIC_SIMILARITY\",\n    // (undocumented)\n    TASK_TYPE_UNSPECIFIED = \"TASK_TYPE_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AbortSignal Property in SingleRequestOptions Interface (TypeScript)\nDESCRIPTION: This code snippet defines the 'signal' property in the SingleRequestOptions interface. It is an optional property of type AbortSignal, used for aborting asynchronous requests. The property can be used to cancel operations, but it's important to note that this cancellation only occurs client-side and does not affect the service-side execution or billing.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.singlerequestoptions.signal.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignal?: AbortSignal;\n```\n\n----------------------------------------\n\nTITLE: CachedContentBase Interface Definition\nDESCRIPTION: Defines the structure of the `CachedContentBase` interface.  This interface is used to represent the base structure of cached content with properties for content, display name, expiration time, model, system instruction, tool configuration, and tools.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentbase.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CachedContentBase \n```\n\n----------------------------------------\n\nTITLE: Listing Uploaded Files - TypeScript\nDESCRIPTION: This method lists all uploaded files using optional parameters to modify the request. The method returns a promise that resolves to a ListFilesResponse. It accepts optional parameters for list specifications and request options that can override default settings.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager.listfiles.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlistFiles(listParams?: ListParams, requestOptions?: SingleRequestOptions): Promise<ListFilesResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall.args Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'args' property in the 'FunctionCall' class. This property takes an object type that likely contains the arguments for a function call.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncall.args.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nargs: object;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Required Parameters Array in TypeScript\nDESCRIPTION: This TypeScript signature defines an optional property 'required' that accepts an array of strings. The property is used to specify which parameters are required when declaring functions in the Generative AI framework.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationschema.required.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequired?: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining topK Property in GenerationConfig TypeScript Interface\nDESCRIPTION: TypeScript signature for the optional topK property in the GenerationConfig class. The topK parameter controls top-K sampling, which limits token selection to the K most likely next tokens.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.topk.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntopK?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining logprobsResult Property in GenerateContentCandidate Class - TypeScript\nDESCRIPTION: This code snippet defines the logprobsResult property in the GenerateContentCandidate class. It is an optional property of type LogprobsResult, which contains log-likelihood scores for the response tokens and top tokens.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.logprobsresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogprobsResult?: LogprobsResult;\n```\n\n----------------------------------------\n\nTITLE: Defining the Dynamic Retrieval Configuration Interface in TypeScript\nDESCRIPTION: The code snippet declares the 'DynamicRetrievalConfig' interface, which is part of the generative AI library and specifies the dynamic retrieval configurations. There are optional properties such as 'dynamicThreshold', a numeric value that determines the threshold for retrieval, and 'mode', which determines the mode of dynamic retrieval. This interface facilitates customizing retrieval behaviors in generative AI applications. No explicit dependencies are required for this snippet.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.dynamicretrievalconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface DynamicRetrievalConfig\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart.fileData Property in TypeScript\nDESCRIPTION: Declaration of the fileData property within the FileDataPart class. This property has a type of FileData and likely stores file content for processing by the generative AI services.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData: FileData;\n```\n\n----------------------------------------\n\nTITLE: Declaring mimeType Property in FileMetadataResponse Class in TypeScript\nDESCRIPTION: TypeScript signature for the mimeType property which is a string field in the FileMetadataResponse class. This property likely stores the MIME type of a file processed by the Generative AI API.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TextPart Interface in Typescript\nDESCRIPTION: This code defines the `TextPart` interface using TypeScript.  It specifies the structure for representing a text string within the generative AI content. The interface includes a required `text` property of type string, and several optional properties that are set to `never`, indicating they're not applicable to TextPart.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.textpart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TextPart \n```\n\n----------------------------------------\n\nTITLE: Retrieving File Metadata using GoogleAIFileManager in TypeScript\nDESCRIPTION: The getFile method retrieves metadata for a specified file using its ID in a TypeScript application. It accepts a file ID as a string and an optional requestOptions object of SingleRequestOptions type. This allows the user to specify request parameters overriding the default RequestOptions set during GoogleAIFileManager initialization. It returns a promise that resolves with a FileMetadataResponse object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager.getfile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetFile(fileId: string, requestOptions?: SingleRequestOptions): Promise<FileMetadataResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleGenerativeAIFetchError Class in TypeScript\nDESCRIPTION: This code snippet defines the GoogleGenerativeAIFetchError class, which extends GoogleGenerativeAIError. It is used to handle HTTP errors when calling the server, including HTTP status, statusText, and optional error details from the server response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaifetcherror.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleGenerativeAIFetchError extends GoogleGenerativeAIError \n```\n\n----------------------------------------\n\nTITLE: Defining SafetySetting.threshold Property in TypeScript\nDESCRIPTION: This code snippet defines the 'threshold' property for the SafetySetting interface. It specifies that the property is of type HarmBlockThreshold, which likely represents different levels of safety thresholds for content filtering or blocking.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.safetysetting.threshold.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthreshold: HarmBlockThreshold;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclaration.parameters Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'parameters' property in the FunctionDeclaration interface. This optional property uses the FunctionDeclarationSchema type to define function parameters in JSON Schema Object format following Open API 3.03.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclaration.parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparameters?: FunctionDeclarationSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCode.language Property in TypeScript\nDESCRIPTION: Declares the 'language' property of the ExecutableCode interface. It is of type ExecutableCodeLanguage, which likely represents an enum or union type of supported programming languages.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecode.language.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlanguage: ExecutableCodeLanguage;\n```\n\n----------------------------------------\n\nTITLE: Defining Top Candidates Array in TypeScript\nDESCRIPTION: This TypeScript snippet defines the topCandidates property, which is an array of TopCandidates objects. It is a part of the LogprobsResult interface within a generative AI module. The property is intended to hold candidates generated during the decoding process, where the length of the array corresponds to the total number of decoding steps. The TopCandidates refers to an array of objects representing individual decoding steps.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.logprobsresult.topcandidates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntopCandidates: TopCandidates[];\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Type Alias\nDESCRIPTION: This type alias defines `Tool` as one of the allowed tool types: FunctionDeclarationsTool, CodeExecutionTool, or GoogleSearchRetrievalTool.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Tool = FunctionDeclarationsTool | CodeExecutionTool | GoogleSearchRetrievalTool;\n```\n\n----------------------------------------\n\nTITLE: Defining customHeaders property in TypeScript\nDESCRIPTION: The `customHeaders` property allows setting custom HTTP request headers. It accepts either a `Headers` object or a simple record (object) where keys and values are strings. This provides flexibility in how headers are specified.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.requestoptions.customheaders.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ncustomHeaders?: Headers | Record<string, string>;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCodeLanguage Enum in TypeScript\nDESCRIPTION: This enum defines the supported executable code languages for the generative AI API. It includes options for unspecified language and Python.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodelanguage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum ExecutableCodeLanguage \n{\n  LANGUAGE_UNSPECIFIED = \"language_unspecified\",\n  PYTHON = \"python\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the params Property in ChatSession Class with TypeScript\nDESCRIPTION: Signature definition for the optional params property in the ChatSession class. This property is of type StartChatParams and is used to configure a chat session.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.chatsession.params.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparams?: StartChatParams;\n```\n\n----------------------------------------\n\nTITLE: Defining ArraySchema Interface in TypeScript\nDESCRIPTION: This code snippet defines the ArraySchema interface, which extends BaseSchema. It includes properties for specifying the schema of array items, maximum and minimum number of items, and the type of the schema.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.arrayschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ArraySchema extends BaseSchema \n{\n  items: Schema;\n  maxItems?: number;\n  minItems?: number;\n  type: typeof SchemaType.ARRAY;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContent Interface in TypeScript\nDESCRIPTION: This code snippet defines the CachedContent interface, which extends CachedContentBase. It includes optional properties for creation time, name, TTL, and update time.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CachedContent extends CachedContentBase \n{\n    createTime?: string;\n    name?: string;\n    ttl?: string;\n    updateTime?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional SystemInstruction in TypeScript\nDESCRIPTION: Declares a system instruction property with multiple possible type definitions, allowing flexibility in specifying model instructions\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.modelparams.systeminstruction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: string | Part | Content;\n```\n\n----------------------------------------\n\nTITLE: Defining Base URL in TypeScript\nDESCRIPTION: This snippet defines an optional base URL property for request options in the Google Generative AI framework. The base URL defaults to 'https://generativelanguage.googleapis.com', allowing users to specify a different endpoint if needed. The property is declared as an optional string to accommodate various use cases.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.requestoptions.baseurl.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbaseUrl?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Description Property in FunctionDeclaration Interface - TypeScript\nDESCRIPTION: TypeScript interface property definition for an optional description field that provides information about the function's purpose. This description helps the AI model determine when and how to call the function.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclaration.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Content Property\nDESCRIPTION: This snippet defines a property named 'content' in the EmbedContentRequest type, specifying that it should adhere to the Content interface/type. This is crucial for ensuring type safety and clarity in the use of embedded content within generative AI requests.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.embedcontentrequest.content.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: Content;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall.name Property in TypeScript\nDESCRIPTION: This code snippet defines the 'name' property of the FunctionCall interface. It specifies that 'name' is a string type, which likely represents the name of the function being called.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncall.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: TopCandidates candidates property definition in TypeScript\nDESCRIPTION: This snippet shows the definition of the `candidates` property within the `TopCandidates` class. The `candidates` property is an array of `LogprobsCandidate` objects. These candidates are sorted by their log probability in descending order, indicating the most likely candidates are listed first.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.topcandidates.candidates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ncandidates: LogprobsCandidate[];\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring FunctionCallingConfig Mode Property in TypeScript\nDESCRIPTION: Type definition for the optional mode property that accepts a FunctionCallingMode value within the FunctionCallingConfig interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallingconfig.mode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: FunctionCallingMode;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResult Property in TypeScript\nDESCRIPTION: Declares a property of type CodeExecutionResult within the CodeExecutionResultPart interface, used for storing the outcome of code execution in the Google Generative AI library\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresultpart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult: CodeExecutionResult;\n```\n\n----------------------------------------\n\nTITLE: Defining SearchEntryPoint Interface in TypeScript\nDESCRIPTION: Interface declaration for SearchEntryPoint that defines the structure of Google search entry points. Contains optional properties for rendered web content and base64 encoded search data.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.searchentrypoint.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface SearchEntryPoint \n```\n\n----------------------------------------\n\nTITLE: Gemini AI Response JSON Structure\nDESCRIPTION: This JSON snippet shows the structure of a response from the Gemini AI model. It includes a list of candidate responses, each with content, a finish reason, an index, and safety ratings. It also provides feedback on the safety of the input prompt, including safety ratings.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-basic-reply-short.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"candidates\": [{\n    \"content\": {\n      \"parts\": [{\n        \"text\": \"Cheyenne\"\n      }]\n    },\n    \"finishReason\": \"STOP\",\n    \"index\": 0,\n    \"safetyRatings\": [{\n      \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HARASSMENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }]\n  }],\n  \"promptFeedback\": {\n    \"safetyRatings\": [{\n      \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HARASSMENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expiration Time for Cached Content in TypeScript\nDESCRIPTION: This TypeScript snippet defines an optional expiration time for cached content, expressed as an ISO string. Either this property or 'ttlSeconds' should be provided when creating a 'CachedContent'. This setup allows for precise control over when cached data should be considered stale, relying on ISO 8601 string format for time representation. No external dependencies are needed besides Typescript itself.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentbase.expiretime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexpireTime?: string;\n```\n\n----------------------------------------\n\nTITLE: Listing Uploaded Files - TypeScript\nDESCRIPTION: The listFiles method allows users to list all uploaded files. It accepts optional parameters to customize the request. The method returns a Promise that resolves to a ListFilesResponse, which contains the details of the files listed. The method considers any fields set in the optional requestOptions parameter over default requestOptions during initialization.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.googleaifilemanager.listfiles.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlistFiles(listParams?: ListParams, requestOptions?: SingleRequestOptions): Promise<ListFilesResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining apiKey Property in GenerativeModel Class (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript signature for the apiKey property of the GenerativeModel class. It is defined as a string type, likely used to store the API key for authentication with the generative AI service.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.apikey.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: string;\n```\n\n----------------------------------------\n\nTITLE: Defining history property type in StartChatParams interface\nDESCRIPTION: TypeScript type definition for the optional history property that accepts an array of Content objects used to initialize a chat session.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.startchatparams.history.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhistory?: Content[];\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCode Property Signature in TypeScript\nDESCRIPTION: Defines the executableCode property on the ExecutableCodePart interface, specifying that it contains an ExecutableCode object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode: ExecutableCode;\n```\n\n----------------------------------------\n\nTITLE: Exporting CachedContentBase Interface in TypeScript\nDESCRIPTION: The CachedContentBase interface serves as a blueprint for managing cached content with generative AI models. Key properties include contents (an array of Content), displayName, expireTime (in ISO format), model, systemInstruction (which can be a string, Part, or Content), toolConfig, and tools (an array of Tool). Dependencies include references to Content, Part, ToolConfig, and Tool types. Optional properties provide flexibility for specifying instructions and configurations for AI content generation.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CachedContentBase\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResult Interface in TypeScript\nDESCRIPTION: This code snippet defines the GenerateContentResult interface, which has a single property 'response' of type EnhancedGenerateContentResponse. This interface represents the structure of the result returned by the generateContent() function.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentResult \n{\n  response: EnhancedGenerateContentResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EnumStringSchema enum Property Type in TypeScript\nDESCRIPTION: Type definition for the enum property that specifies an array of possible string values for an enumeration. This property is used to define the valid values that can be used in an enum-type string field.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enumstringschema.enum.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining codeExecutionResult Property in TypeScript\nDESCRIPTION: This code snippet defines the codeExecutionResult property of the CodeExecutionResultPart interface. It specifies that the property is of type CodeExecutionResult.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult: CodeExecutionResult;\n```\n\n----------------------------------------\n\nTITLE: Defining Required Properties in ObjectSchema - TypeScript\nDESCRIPTION: This code snippet declares the 'required' property for an ObjectSchema in TypeScript. It indicates that the required property is an optional array of strings, each representing a key that must be present in the generated object. This ensures that developers know which properties are essential for the schema's functionality.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.objectschema.required.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequired?: string[];\n```\n\n----------------------------------------\n\nTITLE: Parsing Gemini AI Safety Ratings in JSON\nDESCRIPTION: Represents a Gemini AI response with candidate content, safety ratings, and prompt feedback. Includes safety probability assessments for different harm categories.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-failure-finish-reason-safety.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"candidates\": [{\n    \"content\": {\"parts\": [{\"text\": \"No\"}]},\n    \"finishReason\": \"SAFETY\",\n    \"index\": 0,\n    \"safetyRatings\": [\n      {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"probability\": \"NEGLIGIBLE\"},\n      {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"probability\": \"HIGH\"},\n      {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"probability\": \"NEGLIGIBLE\"},\n      {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"probability\": \"NEGLIGIBLE\"}\n    ]\n  }],\n  \"promptFeedback\": {\n    \"safetyRatings\": [\n      {\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\", \"probability\": \"NEGLIGIBLE\"},\n      {\"category\": \"HARM_CATEGORY_HATE_SPEECH\", \"probability\": \"NEGLIGIBLE\"},\n      {\"category\": \"HARM_CATEGORY_HARASSMENT\", \"probability\": \"NEGLIGIBLE\"},\n      {\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\", \"probability\": \"NEGLIGIBLE\"}\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining expireTime Property in CachedContentUpdateInputFields Interface (TypeScript)\nDESCRIPTION: This code snippet defines the expireTime property as an optional string within the CachedContentUpdateInputFields interface. It represents the expiration time for cached content updates.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentupdateinputfields.expiretime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexpireTime?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining safetySettings Property in TypeScript\nDESCRIPTION: Declares the safetySettings property as an optional array of SafetySetting objects within the BaseParams interface. This property allows configuration of safety settings for the generative AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.baseparams.safetysettings.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsafetySettings?: SafetySetting[];\n```\n\n----------------------------------------\n\nTITLE: Constructing GoogleGenerativeAIFetchError Class - TypeScript\nDESCRIPTION: This TypeScript constructor initializes a new instance of the GoogleGenerativeAIFetchError class. It accepts a message parameter, and optionally accepts status, statusText, and errorDetails to provide more context about the error. The errorDetails parameter is an array of ErrorDetails objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaifetcherror._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(message: string, status?: number, statusText?: string, errorDetails?: ErrorDetails[]);\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentResponse.promptFeedback Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the promptFeedback optional property that returns PromptFeedback related to content filtering results.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentresponse.promptfeedback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npromptFeedback?: PromptFeedback;\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseSchema Type in TypeScript\nDESCRIPTION: This snippet defines the `ResponseSchema` type as an alias for the `Schema` type. It's used to specify the structure of the expected response from the Generative AI API when provided in the `GenerationConfig`. This allows for structured data extraction from the model's response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.responseschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResponseSchema = Schema;\n```\n\n----------------------------------------\n\nTITLE: Defining totalTokens Property in TypeScript\nDESCRIPTION: This code snippet defines the `totalTokens` property within the `CountTokensResponse` interface. The property is of type `number`, indicating that it represents a numerical value. This property likely represents the total number of tokens counted in a given text or prompt processed by the Generative AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.counttokensresponse.totaltokens.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"totalTokens: number;\"\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadataResponse Interface in TypeScript\nDESCRIPTION: Type definition for the FileMetadataResponse interface which contains metadata information for a file returned from the Google Generative AI API. It includes properties for file identification, timestamps, state, and optional fields for errors and video metadata.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileMetadataResponse \n```\n\n----------------------------------------\n\nTITLE: Defining the apiClient Property in RequestOptions Interface using TypeScript\nDESCRIPTION: This code snippet defines the optional apiClient property of the RequestOptions interface, which allows including additional attribution information in the x-goog-api-client header when using wrapper SDKs.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.requestoptions.apiclient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiClient?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining maxOutputTokens Property in GenerationConfig Interface (TypeScript)\nDESCRIPTION: Type definition for the optional maxOutputTokens property in the GenerationConfig interface. This property allows developers to limit the maximum number of tokens that the model can generate in its response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.maxoutputtokens.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmaxOutputTokens?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Usage Metadata Interface\nDESCRIPTION: This interface defines the structure for usage metadata, including token counts for cached content, candidates, prompt, and total count.  The `cachedContentTokenCount` is optional, while the other three are required numbers.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UsageMetadata {\n    cachedContentTokenCount?: number;\n    candidatesTokenCount: number;\n    promptTokenCount: number;\n    totalTokenCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stock Price Data in JSON\nDESCRIPTION: This snippet contains a JSON object that encapsulates the candidates' responses with the text representation of the current stock price of Alphabet Inc. It includes metadata about token counts used in the inquiry.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-search-grounding.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"candidates\": [{\"content\": {\"parts\": [{\"text\": \"The\"}], \"role\": \"model\"}, \"finishReason\": \"STOP\", \"index\": 0}], \"usageMetadata\": {\"promptTokenCount\": 8, \"candidatesTokenCount\": 1, \"totalTokenCount\": 9}}\n```\n\n----------------------------------------\n\nTITLE: Defining mimeType Property in FileMetadataResponse Class in TypeScript\nDESCRIPTION: TypeScript signature for the mimeType property of the FileMetadataResponse class. This property stores the MIME type of a file as a string value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Deleting Files with GoogleAIFileManager in TypeScript\nDESCRIPTION: Method signature for deleting a file using its ID. Takes a required fileId parameter as string and optional requestOptions parameter for customizing the request behavior. Returns a Promise that resolves to void when deletion is complete.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.googleaifilemanager.deletefile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteFile(fileId: string, requestOptions?: SingleRequestOptions): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining Content.role Property in TypeScript\nDESCRIPTION: This snippet defines the role property of the Content object as a string type. It is part of a larger API documentation generated for the Google Gemini project, specifically for the generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.content.role.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrole: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Top Candidates Interface\nDESCRIPTION: This interface defines the structure for top candidate results, including an array of `LogprobsCandidate` objects stored in the `candidates` property.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TopCandidates {\n    candidates: LogprobsCandidate[];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleAIFileManager TypeScript Class\nDESCRIPTION: Defines the GoogleAIFileManager class for handling file operations with GoogleAI, including constructor with API key and request options\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleAIFileManager\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with GoogleAIFileManager in TypeScript\nDESCRIPTION: This method allows uploading a file to the Google AI service. It takes file data as either a string or Buffer, along with file metadata, and returns a Promise that resolves to an UploadFileResponse.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager.uploadfile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuploadFile(fileData: string | Buffer, fileMetadata: FileMetadata): Promise<UploadFileResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall.name Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the 'name' property of the FunctionCall class. The property is of type string and is likely used to store the name of the function being called.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncall.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Task Type for Content Embedding\nDESCRIPTION: Defines an optional TaskType property in the EmbedContentRequest interface, allowing specification of the semantic context or purpose of the content being embedded\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.embedcontentrequest.tasktype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntaskType?: TaskType;\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart Interface in TypeScript\nDESCRIPTION: The `FileDataPart` interface represents a component of a file's data within the Google Gemini generative AI framework. This interface includes optional properties such as code execution results and executable code, as well as mandatory file data properties. The properties are primarily links to additional documentation for further details.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileDataPart \n```\n\n----------------------------------------\n\nTITLE: Defining Custom Headers in TypeScript\nDESCRIPTION: This code snippet defines the optional 'customHeaders' property in the RequestOptions interface for making HTTP requests. It can be either a Headers object or a Record of string pairs, allowing flexibility in how custom headers are specified for requests.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.requestoptions.customheaders.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncustomHeaders?: Headers | Record<string, string>;\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadataResponse Expiration Time in TypeScript\nDESCRIPTION: A string property that represents the expiration time for file metadata in a strongly typed TypeScript interface or class\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.expirationtime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexpirationTime: string;\n```\n\n----------------------------------------\n\nTITLE: Defining PromptFeedback Interface\nDESCRIPTION: This snippet exports the PromptFeedback interface which includes properties related to prompt feedback management in the generative AI framework. It includes mandatory and optional properties for handling blocking reasons and associated safety ratings. The interface is essential for type safety within TypeScript applications utilizing the generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.promptfeedback.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PromptFeedback \\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Metadata with GoogleAIFileManager in TypeScript\nDESCRIPTION: This method retrieves metadata for a file using its ID. The optional requestOptions parameter allows overriding the default RequestOptions values set during GoogleAIFileManager initialization.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.googleaifilemanager.getfile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetFile(fileId: string, requestOptions?: SingleRequestOptions): Promise<FileMetadataResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining responseLogprobs Property in GenerationConfig Interface (TypeScript)\nDESCRIPTION: This code snippet defines the responseLogprobs property in the GenerationConfig interface. It is an optional boolean property that, when set to true, indicates that the logprobs results should be exported in the response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.responselogprobs.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponseLogprobs?: boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining chosenCandidates Property in TypeScript\nDESCRIPTION: This code snippet defines the chosenCandidates property of the LogprobsResult object as an array of LogprobsCandidate objects. It specifies that the length of this array corresponds to the total number of decoding steps and emphasizes that these candidates may not necessarily be limited to the top candidates.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.logprobsresult.chosencandidates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchosenCandidates: LogprobsCandidate[];\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall Property in FunctionCallPart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the functionCall property of the FunctionCallPart interface. The property is of type FunctionCall, indicating that it holds a function call object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall: FunctionCall;\n```\n\n----------------------------------------\n\nTITLE: Defining CountTokensRequest Interface\nDESCRIPTION: This TypeScript interface is used to define the parameters for the countTokens method of the GenerativeModel. The interface includes optional properties for contents and a GenerateContentRequest, enforcing the rule that only one of them can be provided to prevent errors.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.counttokensrequest.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CountTokensRequest {\n  contents?: Content[];\n  generateContentRequest?: GenerateContentRequest;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCode Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for executable code generated by the model. The interface specifies two properties: code (the executable code string) and language (the programming language of the code).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExecutableCode \n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponse.name Property in TypeScript\nDESCRIPTION: This code snippet defines the 'name' property of the FunctionResponse interface. It is a string type, representing the name of the function response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponse.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the topP Property in GenerationConfig Interface in TypeScript\nDESCRIPTION: The topP property is an optional number parameter in the GenerationConfig interface that controls nucleus sampling. It affects the randomness and diversity of generated content by considering only the tokens with top probability mass.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.topp.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntopP?: number;\n```\n\n----------------------------------------\n\nTITLE: VideoMetadata Interface Definition\nDESCRIPTION: Defines the VideoMetadata interface, which includes properties that describe the metadata of a video after it has been processed. Currently, it only contains the videoDuration property, which represents the duration of the video.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.videometadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VideoMetadata \n```\n\n----------------------------------------\n\nTITLE: Defining GoogleSearchRetrievalTool Interface in TypeScript\nDESCRIPTION: This code snippet defines the GoogleSearchRetrievalTool interface, which represents a retrieval tool powered by Google search. It contains an optional property 'googleSearchRetrieval' of type GoogleSearchRetrieval for configuring the search retrieval tool.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlesearchretrievaltool.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface GoogleSearchRetrievalTool {\n    googleSearchRetrieval?: GoogleSearchRetrieval;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileState Enum in TypeScript for Google Generative AI SDK\nDESCRIPTION: Declaration of the FileState enum which tracks the processing state of File objects in the Google Generative AI JavaScript SDK. The enum defines four possible states: ACTIVE (when file processing is complete), FAILED (when processing encountered errors), PROCESSING (when file is being processed), and STATE_UNSPECIFIED (default or unknown state).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filestate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FileState \n\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclarationSchema Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FunctionDeclarationSchema that specifies the structure of parameters passed to function declarations. It includes optional description and required fields, properties object, and type specification.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionDeclarationSchema \n```\n\n----------------------------------------\n\nTITLE: Constructing GoogleGenerativeAIResponseError in TypeScript\nDESCRIPTION: This constructor creates a new instance of the GoogleGenerativeAIResponseError class. It takes a required message parameter of type string and an optional response parameter of type T.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeairesponseerror._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(message: string, response?: T);\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.functionResponse Property in TypeScript\nDESCRIPTION: Declaration of the functionResponse property in the FunctionResponsePart interface. The property is of type FunctionResponse and is used for handling function responses in the Generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse: FunctionResponse;\n```\n\n----------------------------------------\n\nTITLE: Defining EnhancedGenerateContentResponse.functionCalls Property Type Signature\nDESCRIPTION: Type signature for the functionCalls property that returns an array of FunctionCall objects or undefined. The property is a method that throws an error if the prompt or candidate was blocked.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enhancedgeneratecontentresponse.functioncalls.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCalls: () => FunctionCall[] | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectSchema Interface in TypeScript\nDESCRIPTION: This snippet exports the ObjectSchema interface which extends BaseSchema, outlining the blueprint for JSON objects in the application. It includes properties for defining required keys and describes the structure of the object using schemas.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.objectschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ObjectSchema extends BaseSchema \n\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionCall interface, which represents a predicted function call returned from a generative AI model. It includes two properties: 'args' for the function arguments and 'name' for the function name.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCall \n{\n  args: object;\n  name: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Code Execution Property in TypeScript\nDESCRIPTION: This snippet defines the 'codeExecution' property as an empty object. It is intended to enable code execution features and may be extended in future developments.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutiontool.codeexecution.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecution: {};  \n```\n\n----------------------------------------\n\nTITLE: Defining Optional Tool Configuration in TypeScript\nDESCRIPTION: Declares an optional toolConfig property of type ToolConfig in the StartChatParams interface, allowing flexible configuration for chat interactions\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.startchatparams.toolconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoolConfig?: ToolConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining videoMetadata Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the videoMetadata property of the FileMetadataResponse interface. It is an optional property of type VideoMetadata, which contains video metadata populated after processing is complete.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.videometadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvideoMetadata?: VideoMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleSearchRetrieval Interface in TypeScript\nDESCRIPTION: This code snippet defines the GoogleSearchRetrieval interface, which represents a retrieval tool powered by Google search. It includes an optional property 'dynamicRetrievalConfig' of type DynamicRetrievalConfig.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlesearchretrieval.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface GoogleSearchRetrieval \n\n```\n\n----------------------------------------\n\nTITLE: Defining fileUri Property\nDESCRIPTION: This snippet declares the fileUri property of the FileData interface in TypeScript. It specifies that fileUri is of type string, which is essential for representing the URI of a file. No additional dependencies are required for defining this property, but it should be utilized within the context of the FileData interface in the @google/generative-ai module.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedata.fileuri.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileUri: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponse Interface in TypeScript\nDESCRIPTION: Interface definition for FunctionResponse that includes name and response properties. The interface captures the result output from a FunctionCall, containing the function name and a structured JSON response object that provides context back to the model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionResponse \n```\n\n----------------------------------------\n\nTITLE: Defining UploadFileResponse Interface in TypeScript\nDESCRIPTION: The UploadFileResponse interface is defined to structure the response from the uploadFile method of the GoogleAIFileManager. It includes one property, 'file', which is of the type FileMetadataResponse. This interface is used to handle responses from the API call and provide metadata about the uploaded file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.uploadfileresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface UploadFileResponse \n```\n\n----------------------------------------\n\nTITLE: Defining GoogleGenerativeAIResponseError.response Property in TypeScript\nDESCRIPTION: This code snippet defines the 'response' property for the GoogleGenerativeAIResponseError class. The property is optional and has a generic type T.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeairesponseerror.response.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponse?: T;\n```\n\n----------------------------------------\n\nTITLE: FileData Interface Definition\nDESCRIPTION: Defines the structure of the FileData interface.  This interface contains information about an uploaded file, specifically its URI and MIME type. It's used to represent file data within the Generative AI API.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileData \n```\n\n----------------------------------------\n\nTITLE: Defining endIndex Property\nDESCRIPTION: This snippet defines an optional property endIndex of type number within the CitationSource interface. It is used to indicate the ending index of a citation in the Generative AI framework.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.citationsource.endindex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nendIndex?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Array Schema Items Property in TypeScript\nDESCRIPTION: Property definition that specifies the schema type for array entries in the ArraySchema class. The items property uses the Schema type to describe the structure of each element in the array.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.arrayschema.items.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nitems: Schema;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResult Output in TypeScript\nDESCRIPTION: A string property that captures the output of code execution, including standard output for successful executions or error messages for failed executions\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresult.output.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noutput: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Code Execution Outcome Property in TypeScript\nDESCRIPTION: This snippet defines the 'outcome' property as part of the CodeExecutionResult, indicating the result of a code execution process. It is essential for understanding what the result of executed code will be, specifically in the Generative AI realm. The property is typed as 'Outcome', which should be defined elsewhere in the codebase to capture various execution results.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresult.outcome.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noutcome: Outcome;\n```\n\n----------------------------------------\n\nTITLE: Defining cachedContent Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript definition of the `cachedContent` property within the `ModelParams` interface. The `cachedContent` property is optional, as indicated by the `?`, and its type is `CachedContent`. This allows the model to utilize or store cached content, likely for performance optimizations or consistent responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.modelparams.cachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"cachedContent?: CachedContent;\"\n```\n\n----------------------------------------\n\nTITLE: EmbedContentRequest title property\nDESCRIPTION: Defines the optional `title` property of the `EmbedContentRequest` interface. This property accepts a string value, presumably used to provide a descriptive title for the content being embedded. The title may be used for organization or retrieval purposes.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.embedcontentrequest.title.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"title?: string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining ListCacheResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the ListCacheResponse interface in TypeScript. It includes two properties: cachedContents (an array of CachedContent objects) and an optional nextPageToken (string).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listcacheresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ListCacheResponse {\n  cachedContents: CachedContent[];\n  nextPageToken?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerativeContentBlob Interface in TypeScript\nDESCRIPTION: This code snippet defines the GenerativeContentBlob interface, which is used for sending image data. It includes two properties: 'data' for the base64-encoded image string, and 'mimeType' for the image format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativecontentblob.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerativeContentBlob \n{\n    data: string;\n    mimeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskType Enum in TypeScript for Google Generative AI\nDESCRIPTION: This TypeScript enum defines different task types for embedding content in the Google Generative AI library. It includes options for classification, clustering, document retrieval, query retrieval, semantic similarity, and an unspecified type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.tasktype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum TaskType \n\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Block Reason Message in TypeScript\nDESCRIPTION: This code snippet declares an optional property 'blockReasonMessage' of type string in TypeScript. The property is part of the PromptFeedback interface, used in a generative AI context to potentially hold messages explaining why a prompt was blocked.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.promptfeedback.blockreasonmessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nblockReasonMessage?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring GoogleAICacheManager Class - TypeScript\nDESCRIPTION: Class declaration for GoogleAICacheManager that provides functionality for managing Google AI content caches. The class includes methods for CRUD operations on content caches and requires an API key for initialization.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleAICacheManager \n```\n\n----------------------------------------\n\nTITLE: Defining SafetyRatings Array in TypeScript\nDESCRIPTION: Declares a property of type SafetyRating array on the PromptFeedback class, allowing access to safety ratings for a generated prompt\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.promptfeedback.safetyratings.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsafetyRatings: SafetyRating[];\n```\n\n----------------------------------------\n\nTITLE: Defining EnumStringSchema Interface in TypeScript\nDESCRIPTION: This code snippet defines the EnumStringSchema interface, which extends BaseSchema. It specifies the structure for describing a string enum, including its possible values, format, and type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enumstringschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EnumStringSchema extends BaseSchema \n{\n    enum: string[];\n    format: \"enum\";\n    type: typeof SchemaType.STRING;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCode.code Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the 'code' property of the ExecutableCode interface. It represents the actual code string to be executed.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecode.code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncode: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Prompt Token Count in TypeScript\nDESCRIPTION: Declares a numeric property to track the number of tokens used in a generative AI prompt. This property helps measure input complexity and resource usage.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.usagemetadata.prompttokencount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npromptTokenCount: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Tools Array in TypeScript\nDESCRIPTION: This snippet defines the 'tools' property as an optional array of Tool objects in the CachedContentBase class. It is used to specify a set of tools that can be associated with cached content. The 'tools' property is not mandatory, meaning that an instance of CachedContentBase may or may not include it.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.tools.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntools?: Tool[];\n\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Contents Property\nDESCRIPTION: This snippet defines an optional property 'contents' in the 'CountTokensRequest' interface, which can hold an array of 'Content' type elements. The usage of the '?' character indicates that this property may be undefined.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.counttokensrequest.contents.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontents?: Content[];\n```\n\n----------------------------------------\n\nTITLE: Defining Optional GroundingSupports Property in TypeScript\nDESCRIPTION: This snippet defines an optional property `groundingSupports` within the `GroundingMetadata` module. It is an array of `GroundingSupport` objects, which implies it can hold multiple entities that provide grounding support, if any. The property is optional, denoted by the `?`, meaning its presence is not mandatory.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingmetadata.groundingsupports.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngroundingSupports?: GroundingSupport[];\n```\n\n----------------------------------------\n\nTITLE: Defining GenerativeContentBlob Interface in TypeScript\nDESCRIPTION: This code snippet defines the GenerativeContentBlob interface, which is used for sending an image. It includes two properties: data for the base64-encoded image string, and mimeType for specifying the image format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.generativecontentblob.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerativeContentBlob {\n    data: string;\n    mimeType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModelParams Tools Property in TypeScript\nDESCRIPTION: The snippet documents the tools property of the ModelParams interface in TypeScript. This property is optional and is expected to be an array of Tool objects, where each Tool represents a specific functionality. This setup assumes a dependency on the Tool type being defined elsewhere in the project.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.modelparams.tools.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tool[];\n```\n\n----------------------------------------\n\nTITLE: Defining LogprobsCandidate Interface TypeScript\nDESCRIPTION: Defines the interface LogprobsCandidate for use in a generative AI setting. This interface includes properties for log probability, token string value, and token ID, which are essential for determining candidate details in probabilistic models. All properties are primitive types with `number` and `string`. No external dependencies are required.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.logprobscandidate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface LogprobsCandidate\n```\n\n----------------------------------------\n\nTITLE: Defining fileData Property in ExecutableCodePart Interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the fileData property in the ExecutableCodePart interface. The property is optional and has a type of 'never', indicating it should never be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleAICacheManager in TypeScript\nDESCRIPTION: Constructor signature for creating a new instance of the GoogleAICacheManager class. It requires an API key string parameter and accepts an optional RequestOptions parameter.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(apiKey: string, _requestOptions?: RequestOptions);\n```\n\n----------------------------------------\n\nTITLE: Declaring cachedContentTokenCount Property in TypeScript\nDESCRIPTION: Defines an optional number property that represents the total token count in the cached portion of a prompt within the UsageMetadata interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.usagemetadata.cachedcontenttokencount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncachedContentTokenCount?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining SafetyRating.probability Property in TypeScript\nDESCRIPTION: This code snippet defines the probability property for the SafetyRating class. The property is of type HarmProbability, which likely represents a measure of potential harm or safety risk.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.safetyrating.probability.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nprobability: HarmProbability;\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCodePart Interface in TypeScript\nDESCRIPTION: This code snippet defines the ExecutableCodePart interface, which represents content parts containing executable code generated by a model. It includes properties for executable code and optional properties for various related data.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExecutableCodePart \n{\n  codeExecutionResult?: never;\n  executableCode: ExecutableCode;\n  fileData?: never;\n  functionCall?: never;\n  functionResponse?: never;\n  inlineData?: never;\n  text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining candidatesTokenCount Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the candidatesTokenCount property of the UsageMetadata interface. It represents the total number of tokens across the generated candidates and is of type number.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.usagemetadata.candidatestokencount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncandidatesTokenCount: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Role Property in TypeScript\nDESCRIPTION: This snippet defines a property 'role' as a string type, which is part of the content structure used in the Generative AI framework. It requires TypeScript as a dependency for proper type checking and structure. The expected input is a string value that represents the role, while the output is the definition of the role within the content framework.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.content.role.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrole: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional System Instruction Property\nDESCRIPTION: This snippet declares the 'systemInstruction' property, which can optionally be a string, a 'Part', or 'Content'. This property is part of the 'CachedContentBase' interface, and it is designed to hold various content types depending on the use case. The property helps in managing different forms of data that can be cached for generative AI applications.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.systeminstruction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: string | Part | Content;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property groundingChunks in TypeScript\nDESCRIPTION: This snippet defines the optional property groundingChunks for the GroundingMetadata interface, allowing the property to hold an array of GroundingChunk objects. The use of the '?' indicates that this property is optional, and it may not be present in every instance of GroundingMetadata.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingmetadata.groundingchunks.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngroundingChunks?: GroundingChunk[];\n```\n\n----------------------------------------\n\nTITLE: Defining GenerativeContentBlob Data Property in TypeScript\nDESCRIPTION: This code snippet defines the 'data' property for the GenerativeContentBlob class. It specifies that the property is of type string and is intended to store image data as a base64-encoded string.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativecontentblob.data.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndata: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FileState enum in TypeScript for @google/generative-ai\nDESCRIPTION: Declaration of the FileState enum which represents different processing states of a File object. The states include ACTIVE (successfully processed), FAILED (processing failed), PROCESSING (currently being processed), and STATE_UNSPECIFIED (default/unknown state).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filestate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FileState \n\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Property Definition for FunctionCallingConfig.allowedFunctionNames\nDESCRIPTION: Defines the optional allowedFunctionNames property that accepts an array of strings representing the function names that are allowed to be called in the function calling configuration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallingconfig.allowedfunctionnames.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nallowedFunctionNames?: string[];\n```\n\n----------------------------------------\n\nTITLE: Uploading Content to Cache using GoogleAICacheManager in TypeScript\nDESCRIPTION: Method signature for the create() function in the GoogleAICacheManager class that allows uploading a new content cache. It accepts createOptions of type CachedContentCreateParams and returns a Promise that resolves to a CachedContent object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager.create.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(createOptions: CachedContentCreateParams): Promise<CachedContent>;\n```\n\n----------------------------------------\n\nTITLE: Defining metadata property in TypeScript for ErrorDetails interface\nDESCRIPTION: This code snippet defines an optional property 'metadata' in the ErrorDetails interface. The property is a record that can store any key-value pairs with unknown types. It is flexible to accommodate various data structures as needed for error details.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.errordetails.metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata?: Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Defining BlockReason Enum in TypeScript\nDESCRIPTION: Enumerates the possible reasons why a prompt may be blocked in the generative AI system. Contains three possible values: BLOCKED_REASON_UNSPECIFIED, OTHER, and SAFETY.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.blockreason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum BlockReason \n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionResponse interface, which has two properties: 'name' of type string and 'response' of type object. It represents the result output from a FunctionCall, containing the function name and a structured JSON object with the function's output.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionResponse \n{\n  name: string;\n  response: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining 'name' Property in CachedContent Interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the optional 'name' property of the CachedContent interface. It is defined as an optional string type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontent.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining groundingMetadata Property in TypeScript\nDESCRIPTION: Declares the groundingMetadata property of the GenerateContentCandidate class. It is an optional property of type GroundingMetadata, which likely contains metadata related to search grounding for the generated content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.groundingmetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngroundingMetadata?: GroundingMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining searchEntryPoint Property in TypeScript\nDESCRIPTION: This snippet defines the searchEntryPoint property of the GroundingMetadata interface, which allows for specifying a Google search entry point for follow-up web searches. It ensures that this property can be optionally included in the metadata structure.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingmetadata.searchentrypoint.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsearchEntryPoint?: SearchEntryPoint;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResult.output Property in TypeScript\nDESCRIPTION: Defines the 'output' property of the CodeExecutionResult class. This property contains the stdout when code execution is successful, or stderr or other description otherwise.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresult.output.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noutput: string;\n```\n\n----------------------------------------\n\nTITLE: GroundingSupportSegment.startIndex Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the `startIndex` property within the `GroundingSupportSegment` class. It is an optional number representing the start index in bytes from the beginning of the Part.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupportsegment.startindex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"startIndex?: number;\"\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadataResponse Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for FileMetadataResponse which encapsulates file metadata returned from the server. The interface defines various properties related to file information and status.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FileMetadataResponse \n```\n\n----------------------------------------\n\nTITLE: Defining totalTokenCount Property in TypeScript Interface\nDESCRIPTION: TypeScript interface property definition for tracking the total number of tokens used in a generation request, including both the prompt and response candidates.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.usagemetadata.totaltokencount.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntotalTokenCount: number;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallingMode Enum in TypeScript\nDESCRIPTION: This code snippet defines the FunctionCallingMode enum, which specifies different modes for function calling in the Google Generative AI library. It includes options like ANY, AUTO, MODE_UNSPECIFIED, and NONE.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallingmode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum FunctionCallingMode \n```\n\n----------------------------------------\n\nTITLE: GoogleAIFileManager Class Declaration in TypeScript\nDESCRIPTION: Class declaration for the GoogleAIFileManager which provides functionality for managing Google AI file uploads. This includes methods for uploading, retrieving, listing, and deleting files.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.googleaifilemanager.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleAIFileManager \n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property in TypeScript Interface\nDESCRIPTION: This code snippet declares an optional property generateContentRequest within the CountTokensRequest interface. This property is of the type GenerateContentRequest, which should be defined elsewhere in the codebase. It leverages TypeScript's optional chaining to indicate that this property is not mandatory.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.counttokensrequest.generatecontentrequest.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateContentRequest?: GenerateContentRequest;\n```\n\n----------------------------------------\n\nTITLE: Defining citationSources in TypeScript Interface\nDESCRIPTION: Defines the citationSources property as an array of CitationSource objects. This property is part of the CitationMetadata interface, used to store a list of citation sources in generative AI contexts. The CitationSource type must be defined elsewhere in the application. There are no direct input or output functions associated with this property; it's purely a data structure definition.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.citationmetadata.citationsources.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncitationSources: CitationSource[];\n```\n\n----------------------------------------\n\nTITLE: Defining ChatSession.model Property in TypeScript\nDESCRIPTION: TypeScript signature for the model property of the ChatSession class, which is defined as a string type that likely references the specific generative model being used in the chat session.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.chatsession.model.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: string;\n```\n\n----------------------------------------\n\nTITLE: Defining systemInstruction Property in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the systemInstruction property of the CachedContentBase class. It is an optional property that can be a string, Part, or Content type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentbase.systeminstruction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: string | Part | Content;\n```\n\n----------------------------------------\n\nTITLE: Defining frequencyPenalty Property in GenerationConfig Interface (TypeScript)\nDESCRIPTION: Declares the frequencyPenalty property as an optional number in the GenerationConfig interface. This property is used to apply a penalty to the probability of generating tokens that have already appeared in the response, based on their frequency.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.frequencypenalty.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfrequencyPenalty?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Function Declaration Properties Schema in TypeScript\nDESCRIPTION: Defines a properties object that maps string keys to FunctionDeclarationSchemaProperty values. This schema is used to specify the format and structure of function parameters in the Google Generative AI JavaScript library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationschema.properties.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nproperties: {\n        [k: string]: FunctionDeclarationSchemaProperty;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining maxItems Property in ArraySchema Class (TypeScript)\nDESCRIPTION: This code snippet defines the maxItems property for the ArraySchema class. It is an optional number property that represents the maximum number of items allowed in the array.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.arrayschema.maxitems.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmaxItems?: number;\n```\n\n----------------------------------------\n\nTITLE: GroundingSupportSegment.text Property Definition\nDESCRIPTION: This code snippet shows the definition of the `text` property within the `GroundingSupportSegment` class. The `text` property is an optional string, meaning it can either contain a string value or be undefined. It represents the text associated with a specific segment of the response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupportsegment.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntext?: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the 'category' Property Type in SafetyRating Class (TypeScript)\nDESCRIPTION: This code defines the 'category' property of the SafetyRating class in the @google/generative-ai package. The property is typed as HarmCategory, which represents different categories of potentially harmful content that can be identified by the model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.safetyrating.category.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncategory: HarmCategory;\n```\n\n----------------------------------------\n\nTITLE: Deleting a file using GoogleAIFileManager (TypeScript)\nDESCRIPTION: This snippet shows the signature of the `deleteFile` method within the `GoogleAIFileManager` class. It accepts a `fileId` as a string and returns a Promise that resolves to void, indicating that the file deletion operation is asynchronous and doesn't return a value upon completion.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager.deletefile.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ndeleteFile(fileId: string): Promise<void>;\n```\n```\n\n----------------------------------------\n\nTITLE: CitationSource license property definition\nDESCRIPTION: This code snippet defines the `license` property within the `CitationSource` class. The property is optional (indicated by the `?` symbol) and is of type `string`. It likely represents the license information associated with a citation source.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.citationsource.license.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"license?: string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Start Index Property\nDESCRIPTION: This snippet defines an optional property 'startIndex' in the CitationSource interface, indicating the starting index value which is expected to be a number. This property is utilized for pagination or indexing purposes within the context of generative AI citations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.citationsource.startindex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstartIndex?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Config Interface\nDESCRIPTION: This interface defines the configuration for a tool. It includes a `functionCallingConfig` property of type `FunctionCallingConfig`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ToolConfig {\n    // (undocumented)\n    functionCallingConfig: FunctionCallingConfig;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadata.mimeType property\nDESCRIPTION: This code snippet shows the definition of the `mimeType` property within the `FileMetadata` class. The property is of type string and represents the MIME type of a file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadata.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nmimeType: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Retrieval Threshold Property in TypeScript\nDESCRIPTION: This TypeScript code snippet defines a property `dynamicThreshold` within the `DynamicRetrievalConfig` interface or class. The property is optional and is of the type `number`. If not specified, a system-defined default value will be applied. It is used for setting thresholds in dynamic retrieval operations, which are part of generative AI configurations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.dynamicretrievalconfig.dynamicthreshold.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndynamicThreshold?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining 'tools' Property in CachedContentBase Class (TypeScript)\nDESCRIPTION: This code snippet defines the 'tools' property for the CachedContentBase class. It is an optional property that accepts an array of Tool objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentbase.tools.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tool[];\n```\n\n----------------------------------------\n\nTITLE: ArraySchema.minItems Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the `minItems` property within the `ArraySchema` class.  It is an optional numeric property that indicates the minimum number of elements expected in the array it describes.  If absent, there is no minimum limit.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.arrayschema.minitems.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"minItems?: number;\"\n```\n\n----------------------------------------\n\nTITLE: Defining EmbedContentResponse.embedding Property Type in TypeScript\nDESCRIPTION: Type definition for the embedding property of the EmbedContentResponse class. The property returns a ContentEmbedding object that contains the embedded representation of content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.embedcontentresponse.embedding.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nembedding: ContentEmbedding;\n```\n\n----------------------------------------\n\nTITLE: CitationMetadata Interface Definition\nDESCRIPTION: Defines the `CitationMetadata` interface in TypeScript. This interface is used to represent citation information associated with generated content. It contains a single property, `citationSources`, which is an array of `CitationSource` objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.citationmetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CitationMetadata \n```\n\n----------------------------------------\n\nTITLE: TopCandidates Interface Declaration\nDESCRIPTION: This code snippet defines the `TopCandidates` interface in TypeScript.  It's used to represent a set of candidate results from a generative AI model, specifically those with the highest log probabilities. The interface contains a single property, `candidates`, which is an array of `LogprobsCandidate` objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.topcandidates.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface TopCandidates \n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResult.outcome Property in TypeScript\nDESCRIPTION: This code snippet defines the 'outcome' property for the CodeExecutionResult class. The property is of type Outcome, which likely represents the possible results of a code execution.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresult.outcome.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\noutcome: Outcome;\n```\n\n----------------------------------------\n\nTITLE: Defining ListFilesResponse Interface in TypeScript\nDESCRIPTION: This snippet defines the ListFilesResponse interface, which contains an array of FileMetadataResponse objects and an optional nextPageToken string. It represents the structure of the response returned when listing files using the GoogleAIFileManager.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listfilesresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ListFilesResponse \n{\n  files: FileMetadataResponse[];\n  nextPageToken?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring TTL Property in TypeScript\nDESCRIPTION: Defines an optional string property 'ttl' that accepts a protobuf Duration format value (e.g. '3.0001s') to specify cache duration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontent.ttl.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nttl?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring URI Property in GroundingChunkWeb - TypeScript\nDESCRIPTION: Declares an optional URI property as part of the GroundingChunkWeb class, intended to hold a string reference to a URI. This snippet illustrates the structure of the URI property within the GroundingChunkWeb component. No additional dependencies are required as it is a part of the TypeScript code base. The property does not enforce an input value (optional) and has no specific constraints except the type requirement of being a string.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingchunkweb.uri.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuri?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionResponsePart interface, which includes various optional properties and a required functionResponse property of type FunctionResponse.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionResponsePart \n{\n  codeExecutionResult?: never;\n  executableCode?: never;\n  fileData?: never;\n  functionCall?: never;\n  functionResponse: FunctionResponse;\n  inlineData?: never;\n  text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining displayName Property in FileMetadataResponse Interface in TypeScript\nDESCRIPTION: Defines an optional displayName property of type string within the FileMetadataResponse interface from the @google/generative-ai package.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.displayname.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayName?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanSchema Type Property in TypeScript\nDESCRIPTION: Type definition for the type property of BooleanSchema class that explicitly sets it to SchemaType.BOOLEAN. This property is used to identify the schema as a boolean type schema.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.booleanschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.BOOLEAN;\n```\n\n----------------------------------------\n\nTITLE: CachedContent ttl property\nDESCRIPTION: Defines the `ttl` property within the `CachedContent` class. This property represents the duration for which the content should be cached, expressed as a string in protobuf.Duration format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontent.ttl.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"ttl?: string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining ArraySchema Type Property in TypeScript\nDESCRIPTION: Defines the 'type' property for the ArraySchema class which is set to the ARRAY constant from the SchemaType enum. This property specifies that the schema is of array type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.arrayschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.ARRAY;\n```\n\n----------------------------------------\n\nTITLE: Defining nextPageToken Property in TypeScript\nDESCRIPTION: TypeScript type definition for the optional nextPageToken property in the ListCacheResponse interface. This property is used for pagination purposes when listing cached responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listcacheresponse.nextpagetoken.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnextPageToken?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FunctionCall that specifies the structure of predicted function calls. It contains a name string property and an args object property for parameters and their values.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCall \n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCode Interface\nDESCRIPTION: This snippet defines the ExecutableCode interface, which represents code generated by the model to be executed, with properties specifying the code and its language. It is utilized in the context of automatically executing code and receiving results. The primary dependencies are related to the types defined within the package, particularly ExecutableCodeLanguage.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ExecutableCode \\n\n```\n\n----------------------------------------\n\nTITLE: ListFilesResponse nextPageToken property\nDESCRIPTION: Defines the `nextPageToken` property as an optional string within the `ListFilesResponse` interface. This token is used for pagination, allowing retrieval of subsequent pages of file listings. If present, it indicates that more files are available.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listfilesresponse.nextpagetoken.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nnextPageToken?: string;\n```\n```\n\n----------------------------------------\n\nTITLE: ArraySchema Items Property Definition\nDESCRIPTION: Defines the `items` property within the `ArraySchema` class.  This property is of type `Schema`, indicating that it holds the schema definition for the array's elements. It allows specification of the expected structure and data types of elements contained within the array.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.arrayschema.items.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"items: Schema;\"\n```\n\n----------------------------------------\n\nTITLE: Declaring mimeType Property in GenerativeContentBlob Class in TypeScript\nDESCRIPTION: Type definition for the mimeType property of the GenerativeContentBlob class. The property is declared as a string type and is used to specify the MIME type of the blob content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativecontentblob.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentCandidate Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for GenerateContentCandidate that specifies the structure of content generation responses. Contains properties for content, metadata, safety ratings, and various probability scores.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GenerateContentCandidate \n```\n\n----------------------------------------\n\nTITLE: Defining Cached Content Property\nDESCRIPTION: This snippet defines the 'cachedContent' property within the 'CachedContentUpdateParams' interface, which is a crucial part of managing content updates in the generative AI framework. The property is typed as 'CachedContentUpdateInputFields', representing the structure of the content that can be cached. It is essential for ensuring type safety and clarity in the use of cached content within the API.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentupdateparams.cachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncachedContent: CachedContentUpdateInputFields;\n```\n\n----------------------------------------\n\nTITLE: Specifying Object Type in TypeScript\nDESCRIPTION: The `ObjectSchema.type` property is defined as a type of `SchemaType.OBJECT`. This signifies that the type property is expected to be an OBJECT schema type as defined in the SchemaType enum. No additional setup is required as it directly makes use of the existing SchemaType object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.objectschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.OBJECT;\n```\n\n----------------------------------------\n\nTITLE: Defining finishReason Property in TypeScript\nDESCRIPTION: This snippet defines the finishReason property as an optional member of the GenerateContentCandidate class. It indicates the reason a content generation operation finished, if applicable. The property is typed as FinishReason. The implementation suggests that it is part of a broader API related to generative AI capabilities.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.finishreason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfinishReason?: FinishReason;\n```\n\n----------------------------------------\n\nTITLE: Defining mimeType Property in GenerativeContentBlob Class (TypeScript)\nDESCRIPTION: This code snippet defines the mimeType property for the GenerativeContentBlob class. The property is of type string and represents the MIME type of the content blob.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.generativecontentblob.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Defining RpcStatus Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for standard RPC error status object. Contains properties for error code, error message, and optional array of error details.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.rpcstatus.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RpcStatus \n```\n\n----------------------------------------\n\nTITLE: ExecutableCode.code Property Definition\nDESCRIPTION: This code snippet defines the `code` property within the `ExecutableCode` class. The `code` property is a string that represents the code to be executed. It is a core part of the ExecutableCode interface for specifying the actual code.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecode.code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"code: string;\"\n```\n\n----------------------------------------\n\nTITLE: Outcome Enum for Operation Results\nDESCRIPTION: Enum defining possible outcomes of AI operations, including success, failure, and timeout scenarios\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum Outcome {\n    OUTCOME_DEADLINE_EXCEEDED = \"outcome_deadline_exceeded\",\n    OUTCOME_FAILED = \"outcome_failed\",\n    OUTCOME_OK = \"outcome_ok\",\n    OUTCOME_UNSPECIFIED = \"outcome_unspecified\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCall Property in FunctionCallPart Interface in TypeScript\nDESCRIPTION: Property signature for the functionCall property of the FunctionCallPart interface. This property has a type of FunctionCall which is likely used for storing function call information in generative AI responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall: FunctionCall;\n```\n\n----------------------------------------\n\nTITLE: Defining createTime Property in FileMetadataResponse Interface (TypeScript)\nDESCRIPTION: TypeScript signature for the createTime property which is part of the FileMetadataResponse interface. This property stores the creation timestamp of a file as a string value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.createtime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateTime: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Single Request Options Interface\nDESCRIPTION: This interface extends the `RequestOptions` interface and adds an optional `signal` property of type `AbortSignal`.  The signal allows for cancellation of the request.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SingleRequestOptions extends RequestOptions {\n    signal?: AbortSignal;\n}\n```\n\n----------------------------------------\n\nTITLE: VideoMetadata videoDuration Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the `videoDuration` property within the `VideoMetadata` class. It's a string that follows the Google Protobuf Duration format. It represents how long the video is.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.videometadata.videoduration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"videoDuration: string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Type in TypeScript for Generative AI Library\nDESCRIPTION: This code snippet defines the Schema type as a union of various schema types. It represents a subset of OpenAPI 3.0 schema object used for defining input/output data formats in the @google/generative-ai library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.schema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Schema = StringSchema | NumberSchema | IntegerSchema | BooleanSchema | ArraySchema | ObjectSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContentUpdateParams Interface in TypeScript\nDESCRIPTION: Interface definition for CachedContentUpdateParams that specifies the structure of parameters used when updating cached content. Contains two properties: cachedContent of type CachedContentUpdateInputFields and an optional updateMask array of strings for protobuf field masking.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentupdateparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CachedContentUpdateParams \n```\n\n----------------------------------------\n\nTITLE: Defining maxItems Property in ArraySchema Class (TypeScript)\nDESCRIPTION: This code snippet defines the maxItems property for the ArraySchema class. It is an optional number property that specifies the maximum number of items allowed in the array.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.arrayschema.maxitems.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmaxItems?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining cachedContent Property in GenerateContentRequest Class\nDESCRIPTION: Type definition for the optional cachedContent property that accepts a string identifier referencing a cached content object. This property stores the name of a CachedContent rather than the actual cache object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentrequest.cachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncachedContent?: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring avgLogprobs Property in TypeScript\nDESCRIPTION: This code snippet defines the avgLogprobs property for the GenerateContentCandidate class. It is an optional number property that represents the average log probability score of the candidate.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.avglogprobs.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\navgLogprobs?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining the message property in RpcStatus interface in TypeScript\nDESCRIPTION: TypeScript definition for the 'message' property of the RpcStatus interface, which stores a developer-facing error message. This property is part of RPC status information typically used in error handling.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.rpcstatus.message.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmessage: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ListFilesResponse Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines the structure of the response from the listFiles() method of GoogleAIFileManager. It includes an array of FileMetadataResponse objects and an optional nextPageToken string for pagination.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.listfilesresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ListFilesResponse \n{\n  files: FileMetadataResponse[];\n  nextPageToken?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart Interface in TypeScript\nDESCRIPTION: This code snippet defines the FunctionResponsePart interface, which represents content parts for function responses. It includes properties for function response, optional code execution results, executable code, file data, function calls, inline data, and text.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponsepart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionResponsePart \n{\n  codeExecutionResult?: never;\n  executableCode?: never;\n  fileData?: never;\n  functionCall?: never;\n  functionResponse: FunctionResponse;\n  inlineData?: never;\n  text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoMetadata Property in FileMetadataResponse Interface (TypeScript)\nDESCRIPTION: This code snippet defines the videoMetadata property in the FileMetadataResponse interface. It is an optional property of type VideoMetadata, which contains video metadata information after processing is complete.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.videometadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvideoMetadata?: VideoMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining NumberSchema.format Property in TypeScript\nDESCRIPTION: This code snippet defines the 'format' property for the NumberSchema class. It is an optional property that specifies the format of a number, which can be either 'float' or 'double'.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.numberschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat?: \"float\" | \"double\";\n```\n\n----------------------------------------\n\nTITLE: Defining GenerativeModel.tools Property in TypeScript\nDESCRIPTION: This code snippet defines the 'tools' property for the GenerativeModel class. It is an optional array of Tool objects, allowing for flexibility in model configuration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.tools.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntools?: Tool[];\n```\n\n----------------------------------------\n\nTITLE: Defining CountTokensResponse Interface TypeScript\nDESCRIPTION: This TypeScript snippet defines the CountTokensResponse interface, which is used as a response when invoking the countTokens method from GenerativeModel. It includes a property totalTokens, which is of number type and presumably represents the total number of tokens counted. There are no specified dependencies beyond the TypeScript language.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.counttokensresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CountTokensResponse \n```\n\n----------------------------------------\n\nTITLE: Defining the UploadFileResponse interface in TypeScript\nDESCRIPTION: This code snippet defines the `UploadFileResponse` interface in TypeScript.  It specifies that the response contains a `file` property, which is of type `FileMetadataResponse`. This interface is the expected return type from the `GoogleAIFileManager.uploadFile()` method.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.uploadfileresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface UploadFileResponse \n```\n\n----------------------------------------\n\nTITLE: Defining EnumStringSchema Type Property in Google Generative AI - TypeScript\nDESCRIPTION: Defines the type property of EnumStringSchema in TypeScript, associated with the SchemaType.STRING constant. This property is part of the Google Generative AI library's structure for representing schemas. It requires the inclusion of the EnumStringSchema module and proper installation of the Google Generative AI package.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.enumstringschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype: typeof SchemaType.STRING;\n```\n\n----------------------------------------\n\nTITLE: Defining status Property in GoogleGenerativeAIFetchError Class (TypeScript)\nDESCRIPTION: This code snippet defines the status property for the GoogleGenerativeAIFetchError class. The property is of type number and is optional, as indicated by the question mark.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaifetcherror.status.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatus?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Model Property Type in GenerativeModel\nDESCRIPTION: TypeScript type definition for the model property in the GenerativeModel class. The property is defined as a string type that represents the model identifier.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.model.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: string;\n```\n\n----------------------------------------\n\nTITLE: Defining statusText Property in GoogleGenerativeAIFetchError Class (TypeScript)\nDESCRIPTION: This code snippet defines the statusText property for the GoogleGenerativeAIFetchError class. It is an optional string property that likely represents the status text of an HTTP response when a fetch error occurs.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaifetcherror.statustext.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatusText?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Model Property in TypeScript\nDESCRIPTION: This snippet defines the 'model' property as a string within the ModelParams interface. It is essential for specifying the model type when using the Generative AI library. The defined structure ensures type safety and clarity in API usage.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.modelparams.model.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodel: string;\n```\n\n----------------------------------------\n\nTITLE: Updating Cache Content with GoogleAICacheManager in TypeScript\nDESCRIPTION: Method signature for updating existing cached content through the GoogleAICacheManager. Takes a name identifier and update parameters, returns a Promise resolving to the updated CachedContent object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager.update.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdate(name: string, updateParams: CachedContentUpdateParams): Promise<CachedContent>;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.functionResponse Property in TypeScript\nDESCRIPTION: TypeScript signature for the functionResponse property of the FunctionResponsePart interface, indicating it has a type of FunctionResponse.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponsepart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse: FunctionResponse;\n```\n\n----------------------------------------\n\nTITLE: GroundingChunk Interface Declaration\nDESCRIPTION: Defines the `GroundingChunk` interface in TypeScript. It is used to represent a chunk of grounding data, potentially obtained from the web. The interface currently has one optional property `web` of type `GroundingChunkWeb`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingchunk.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface GroundingChunk \n```\n\n----------------------------------------\n\nTITLE: Defining Timeout Property for RequestOptions in TypeScript\nDESCRIPTION: This snippet defines an optional timeout property of type number for the RequestOptions interface. This allows setting a limit on the duration of requests made to the API. The property is defined as optional (using the '?' operator), meaning it may or may not be included when creating a RequestOptions object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.requestoptions.timeout.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntimeout?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Base URL Property in TypeScript\nDESCRIPTION: This snippet defines an optional property 'baseUrl' of type string for request options in the Generative AI API. If not specified, it defaults to 'https://generativelanguage.googleapis.com'. This property is crucial for ensuring API requests are directed to the correct endpoint.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.requestoptions.baseurl.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbaseUrl?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the HarmBlockThreshold Enum in Typescript\nDESCRIPTION: Defines the `HarmBlockThreshold` enum, which specifies different levels of harm blocking. These thresholds can be used to configure the safety settings of the Generative AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport enum HarmBlockThreshold {\n    BLOCK_LOW_AND_ABOVE = \"BLOCK_LOW_AND_ABOVE\",\n    BLOCK_MEDIUM_AND_ABOVE = \"BLOCK_MEDIUM_AND_ABOVE\",\n    BLOCK_NONE = \"BLOCK_NONE\",\n    BLOCK_ONLY_HIGH = \"BLOCK_ONLY_HIGH\",\n    HARM_BLOCK_THRESHOLD_UNSPECIFIED = \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Content Caches in Google AI TypeScript SDK\nDESCRIPTION: Method signature for listing all uploaded content caches in the Google AI service. Accepts optional ListParams for filtering and returns a Promise containing ListCacheResponse.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager.list.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlist(listParams?: ListParams): Promise<ListCacheResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining SimpleStringSchema.format Property in TypeScript\nDESCRIPTION: This code snippet defines the type of the 'format' property for the SimpleStringSchema class. It is an optional property that can either be the string 'date-time' or undefined.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.simplestringschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat?: \"date-time\" | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContentUpdateInputFields TypeScript Interface\nDESCRIPTION: Defines an interface with optional properties for updating cache expiration parameters. Allows setting expiration time or time-to-live (TTL) seconds for cached content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentupdateinputfields.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CachedContentUpdateInputFields {\n  expireTime?: string;\n  ttlSeconds?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining systemInstruction Property in GenerativeModel Class (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the systemInstruction property of the GenerativeModel class. It is an optional property of type Content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.systeminstruction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsystemInstruction?: Content;\n```\n\n----------------------------------------\n\nTITLE: Analyzing Gemini API Prompt Feedback\nDESCRIPTION: This JSON snippet represents the feedback from the Gemini API regarding a submitted prompt. It provides details on why the prompt might have been blocked and the safety ratings associated with different harm categories. The `probability` field indicates the likelihood of the prompt violating the specified safety category.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-failure-prompt-blocked-safety.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"promptFeedback\": {\n    \"blockReason\": \"SAFETY\",\n    \"safetyRatings\": [\n      {\n        \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        \"probability\": \"NEGLIGIBLE\"\n      },\n      {\n        \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n        \"probability\": \"HIGH\"\n      },\n      {\n        \"category\": \"HARM_CATEGORY_HARASSMENT\",\n        \"probability\": \"NEGLIGIBLE\"\n      },\n      {\n        \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        \"probability\": \"NEGLIGIBLE\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResultPart Interface in TypeScript\nDESCRIPTION: This code snippet defines the CodeExecutionResultPart interface, which contains properties related to code execution results. It includes a required codeExecutionResult property and several optional properties.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CodeExecutionResultPart {\n  codeExecutionResult: CodeExecutionResult;\n  executableCode?: never;\n  fileData?: never;\n  functionCall?: never;\n  functionResponse?: never;\n  inlineData?: never;\n  text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining executableCode Property in TypeScript Interface\nDESCRIPTION: Defines an optional executableCode property that is typed as 'never', indicating this property cannot actually contain a value when implemented.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponsepart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Title Property in GroundingChunkWeb\nDESCRIPTION: This code snippet defines an optional property 'title' of type string for the GroundingChunkWeb interface. It allows consumers of the interface to optionally specify a title for the chunk. The signature indicates that 'title' can be omitted when implementing the interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingchunkweb.title.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntitle?: string;\n```\n\n----------------------------------------\n\nTITLE: FileMetadata.name property in TypeScript\nDESCRIPTION: This code snippet defines the `name` property of the `FileMetadata` interface or class. The `name` property is an optional string, indicated by the `?` symbol. It likely represents the name of a file associated with the `FileMetadata` object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadata.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nname?: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining the apiKey Property in GoogleAIFileManager Class in TypeScript\nDESCRIPTION: TypeScript signature for the apiKey property in the GoogleAIFileManager class, which stores the API key used for authentication with Google AI services.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.googleaifilemanager.apikey.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the SafetySetting Interface in Typescript\nDESCRIPTION: Defines the `SafetySetting` interface, which represents the safety settings for content generation. It includes the `category` of harm and the `threshold` for blocking content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport interface SafetySetting {\n    // (undocumented)\n    category: HarmCategory;\n    // (undocumented)\n    threshold: HarmBlockThreshold;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining presencePenalty Property in GenerationConfig Class (TypeScript)\nDESCRIPTION: This code snippet defines the presencePenalty property in the GenerationConfig class. It is an optional number that represents the penalty applied to the next token's logprobs if the token has already been seen in the response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.presencepenalty.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npresencePenalty?: number;\n```\n\n----------------------------------------\n\nTITLE: SimpleStringSchema Enum Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the `enum` property within the `SimpleStringSchema` interface using TypeScript. The `never` type indicates that this property should not be used.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.simplestringschema.enum.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"enum?: never;\"\n```\n\n----------------------------------------\n\nTITLE: Defining SimpleStringSchema Type Property\nDESCRIPTION: This code snippet defines the 'type' property of the SimpleStringSchema. It is a static property that specifies the type of the schema as 'STRING' using the SchemaType enum. This indicates that the schema is designed to handle string values.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.simplestringschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntype: typeof SchemaType.STRING;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining ttlSeconds Property in CachedContentCreateParams Interface (TypeScript)\nDESCRIPTION: This code snippet defines the ttlSeconds property in the CachedContentCreateParams interface. It's an optional number property used to specify the time-to-live for CachedContent in seconds. Either this property or expireTime should be specified when creating a CachedContent object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentcreateparams.ttlseconds.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nttlSeconds?: number;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Stock Price Information\nDESCRIPTION: This snippet details a JSON response regarding the current stock price for Alphabet Inc. (GOOG). It includes the price change percentage and token usage details, indicating its effectiveness in the context of generative AI.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-search-grounding.txt#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"candidates\": [{\"content\": {\"parts\": [{\"text\": \" current stock price for Alphabet Inc. (Google) Class C (GOOG)\"}], \"role\": \"model\"}, \"finishReason\": \"STOP\", \"index\": 0}], \"usageMetadata\": {\"promptTokenCount\": 8, \"candidatesTokenCount\": 17, \"totalTokenCount\": 25}}\n```\n\n----------------------------------------\n\nTITLE: Defining Property for API Key in TypeScript\nDESCRIPTION: This snippet defines the apiKey property within the GoogleGenerativeAI class as a string. It's essential for enabling authentication and access to the Google Generative AI services. The property does not have additional dependencies but requires the class to be properly initialized with a valid API key.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeai.apikey.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the updateTime Property in TypeScript for the CachedContent Class\nDESCRIPTION: TypeScript definition for the optional updateTime property of the CachedContent class. This property stores the update time of cached content in ISO string format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontent.updatetime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateTime?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining InlineDataPart Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for InlineDataPart that specifies the structure for content parts representing images. Includes optional properties for code execution, function calls, and a required inlineData property of type GenerativeContentBlob.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface InlineDataPart \n```\n\n----------------------------------------\n\nTITLE: Defining SearchEntryPoint.sdkBlob Property Type in TypeScript\nDESCRIPTION: Type definition for the sdkBlob optional property that stores base64 encoded JSON representing an array of search term and search URL tuples.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.searchentrypoint.sdkblob.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsdkBlob?: string;\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional API Client Header in TypeScript\nDESCRIPTION: Defines an optional string property for including additional attribution information in the x-goog-api-client header, typically used by wrapper SDKs to provide metadata about the client environment\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.requestoptions.apiclient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiClient?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining apiKey Property in GoogleAIFileManager Class (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the apiKey property in the GoogleAIFileManager class. It is defined as a string type, representing the API key used for authentication with the Google AI services.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager.apikey.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the SafetyRating Interface in Typescript\nDESCRIPTION: Defines the `SafetyRating` interface, which represents the safety rating for a particular content. It includes the `category` of harm and the `probability` of harm.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport interface SafetyRating {\n    // (undocumented)\n    category: HarmCategory;\n    // (undocumented)\n    probability: HarmProbability;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Class for Google Generative AI\nDESCRIPTION: Extends the standard Error class to create a specialized error type for the Google Generative AI SDK, allowing for more precise error handling and differentiation from generic JavaScript errors\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaierror.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare class GoogleGenerativeAIError extends Error\n```\n\n----------------------------------------\n\nTITLE: Defining ListParams.pageToken Property in TypeScript\nDESCRIPTION: This code snippet defines the 'pageToken' property in TypeScript. It is part of the ListParams structure and is utilized to handle pagination in API requests for the Google Generative AI JavaScript library. The property is optional and accepts a string value representing a token for fetching subsequent pages of results. Prerequisites include understanding of TypeScript optional properties and API pagination conventions.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.listparams.pagetoken.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npageToken?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Integer Schema Format in TypeScript\nDESCRIPTION: Specifies an optional format property for integer schemas that can be either 32-bit or 64-bit integers. This allows precise type definition and range specification.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.integerschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat?: \"int32\" | \"int64\";\n```\n\n----------------------------------------\n\nTITLE: Defining contents Property Type in TypeScript\nDESCRIPTION: Type definition for the contents property in the CachedContentBase class, representing an array of Content objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentbase.contents.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: Content[];\n```\n\n----------------------------------------\n\nTITLE: Providing Timestamp for Stock Price Data\nDESCRIPTION: This snippet includes a JSON structure that specifies the timestamp for the stock price response, emphasizing the importance of date and time in financial statistics.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-search-grounding.txt#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"candidates\": [{\"content\": {\"parts\": [{\"text\": \" October 2, 2024, at 5:58 PM UTC.  You can find the most up-to-date information on\"}], \"role\": \"model\"}, \"finishReason\": \"STOP\", \"index\": 0}], \"usageMetadata\": {\"promptTokenCount\": 8, \"candidatesTokenCount\": 97, \"totalTokenCount\": 105}}\n```\n\n----------------------------------------\n\nTITLE: Defining GenerateContentStreamResult Response Promise\nDESCRIPTION: Declares a Promise that resolves to an EnhancedGenerateContentResponse, providing asynchronous access to generated content stream results\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentstreamresult.response.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponse: Promise<EnhancedGenerateContentResponse>;\n```\n\n----------------------------------------\n\nTITLE: Defining executableCode Property in InlineDataPart Interface (TypeScript)\nDESCRIPTION: Declares the executableCode property as an optional member of the InlineDataPart interface. The type is set to 'never', suggesting this property should not be used or assigned a value in implementations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: CodeExecutionTool Interface Definition\nDESCRIPTION: Defines the CodeExecutionTool interface in TypeScript. This interface is used to enable code execution within the Generative AI model. The `codeExecution` property is an empty object that signals the capability to execute code and may have subfields added in the future.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutiontool.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CodeExecutionTool \n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclaration Name Property Type in TypeScript\nDESCRIPTION: Type definition for the name property of a FunctionDeclaration. The name must start with a letter or underscore, can only contain alphanumeric characters, underscores, and dashes, with a maximum length of 64 characters.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclaration.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Deleting Content Cache in GoogleAICacheManager with TypeScript\nDESCRIPTION: Method signature for deleting content from the cache using a specified name. The method accepts a string name parameter and returns a Promise that resolves to void when the deletion is complete.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager.delete.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(name: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining values Property in TypeScript\nDESCRIPTION: This snippet defines the 'values' property within the ContentEmbedding class as an array of numbers, which indicates that it holds multiple numerical values for some form of embedding content. This property facilitates the representation of complex data structures where numerical values are essential.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.contentembedding.values.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nvalues: number[];\n```\n\n----------------------------------------\n\nTITLE: Defining webSearchQueries Property in TypeScript\nDESCRIPTION: This code snippet defines the `webSearchQueries` property as a string array within the `GroundingMetadata` class.  It indicates that the property is intended to hold a list of search queries.  These queries can be utilized for performing follow-up web searches, likely related to grounding or enhancing the generative AI model's responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingmetadata.websearchqueries.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nwebSearchQueries: string[];\n```\n```\n\n----------------------------------------\n\nTITLE: Defining RpcStatus.message Property in TypeScript\nDESCRIPTION: This code snippet defines a property 'message' of type string in the RpcStatus interface, intended to represent a developer-facing error message. The property is crucial for error handling and provides a way to convey specific error details to developers. It requires a context where RpcStatus is utilized to structure response messages appropriately.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.rpcstatus.message.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmessage: string;\n```\n\n----------------------------------------\n\nTITLE: Defining groundingChunckIndices Property in TypeScript\nDESCRIPTION: This snippet defines the groundingChunckIndices property as an optional array of numbers. It is used to specify indices that point to the relevant 'grounding_chunk' elements which are the citations related to a specific claim.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupport.groundingchunckindices.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngroundingChunckIndices?: number[];\n```\n\n----------------------------------------\n\nTITLE: Including Stock Price Change Warning\nDESCRIPTION: This snippet features a JSON response expressing a warning regarding the rapid changes in stock prices. It reinforces the necessity of current data and includes token usage statistics.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-search-grounding.txt#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"candidates\": [{\"content\": {\"parts\": [{\"text\": \" -0.97% over the last 24 hours. \\n\\nPlease note that stock prices can change rapidly.  This information is current as of\"}], \"role\": \"model\"}, \"finishReason\": \"STOP\", \"index\": 0}], \"usageMetadata\": {\"promptTokenCount\": 8, \"candidatesTokenCount\": 65, \"totalTokenCount\": 73}}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclarationSchemaProperty Type in TypeScript\nDESCRIPTION: Type definition for the FunctionDeclarationSchemaProperty which represents the schema for top-level function declarations. It's a direct alias to the Schema type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationschemaproperty.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type FunctionDeclarationSchemaProperty = Schema;\n```\n\n----------------------------------------\n\nTITLE: Creating GenerativeModel from Cached Content in TypeScript\nDESCRIPTION: This TypeScript function `getGenerativeModelFromCachedContent` creates a `GenerativeModel` instance using provided cached content. It optionally accepts model parameters and request options. The function returns a `GenerativeModel`, and it requires `CachedContent` as a mandatory input, with optional `ModelParams` and `RequestOptions`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeai.getgenerativemodelfromcachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetGenerativeModelFromCachedContent(cachedContent: CachedContent, modelParams?: Partial<ModelParams>, requestOptions?: RequestOptions): GenerativeModel;\n```\n\n----------------------------------------\n\nTITLE: Defining name Property in FileMetadataResponse Class in TypeScript\nDESCRIPTION: TypeScript signature for the 'name' property within the FileMetadataResponse class in the @google/generative-ai package. The property is defined as a string type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining inlineData Property in InlineDataPart Class (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the inlineData property of the InlineDataPart class. The property is of type GenerativeContentBlob.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData: GenerativeContentBlob;\n```\n\n----------------------------------------\n\nTITLE: Defining functionCall Property in CodeExecutionResultPart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the optional functionCall property of the CodeExecutionResultPart interface. The property is typed as 'never', indicating it should never have a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining updateTime Property in Generative AI TypeScript\nDESCRIPTION: The purpose of this snippet is to define the updateTime property as a string within the FileMetadataResponse type. This property is intended to store metadata regarding the last update time of a file. Given its automatic generation, developers should avoid manual edits as it is maintained by an API documentation tool. The updateTime does not include any parameters as it is a property definition.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.updatetime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateTime: string;\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContent.createTime Property in TypeScript\nDESCRIPTION: Declaration of the optional createTime property on the CachedContent interface. This property stores the creation timestamp of a CachedContent object in ISO string format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontent.createtime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateTime?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallPart Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for FunctionCallPart that represents a content part containing a function call. It includes the required functionCall property of type FunctionCall and several optional properties with 'never' type to indicate they are not applicable in this part type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface FunctionCallPart \n```\n\n----------------------------------------\n\nTITLE: Declaring RequestOptions.apiVersion Property Type in TypeScript\nDESCRIPTION: TypeScript type definition for the apiVersion property which allows specifying the API version for Generative AI requests. The property is optional and accepts string values like 'v1' or 'v1beta', defaulting to the latest stable version if not specified.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.requestoptions.apiversion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiVersion?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails Metadata Property Type in TypeScript\nDESCRIPTION: Type definition for the optional metadata property that can store arbitrary key-value pairs of additional error information. The property uses Record<string, unknown> to allow for flexible storage of error metadata.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.errordetails.metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata?: Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Defining Index Property in TypeScript\nDESCRIPTION: This code snippet defines an optional property 'partIndex' of type number, which represents the index position of a Part object within a parent Content object. It is part of the GroundingSupportSegment interface within a generative AI framework. This property is used to track the position of sub-content within a larger content structure.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupportsegment.partindex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npartIndex?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining ResponseSchema Type in TypeScript\nDESCRIPTION: Exports ResponseSchema as an alias for the Schema type, used in generation configuration for specifying response structure and constraints\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.responseschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ResponseSchema = Schema;\n```\n\n----------------------------------------\n\nTITLE: Defining IntegerSchema Type Property\nDESCRIPTION: Defines the `type` property of the `IntegerSchema` within the `@google/generative-ai` library. This property specifies that the schema represents an integer type, referencing a constant from the `SchemaType` enum.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.integerschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntype: typeof SchemaType.INTEGER;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining googleSearchDynamicRetrievalScore Property in TypeScript\nDESCRIPTION: This code snippet defines the googleSearchDynamicRetrievalScore property as an optional number in the RetrievalMetadata interface. It represents a score indicating the likelihood that information from Google search could help answer the prompt, ranging from 0 (least likely) to 1 (most likely). This score is only populated when Google search grounding and dynamic retrieval is enabled.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.retrievalmetadata.googlesearchdynamicretrievalscore.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngoogleSearchDynamicRetrievalScore?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Required Properties in ObjectSchema - TypeScript\nDESCRIPTION: The 'required' property is an optional array of strings that specifies which properties defined in the 'properties' object are required. These properties will always be present in the generated object.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.objectschema.required.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequired?: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Code Property\nDESCRIPTION: This snippet defines the 'executableCode' property as an optional property in TypeScript that cannot be assigned a value. It serves as a placeholder to indicate the absence of this property.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.textpart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: CachedContentCreateParams Interface Definition\nDESCRIPTION: Defines the `CachedContentCreateParams` interface, which extends `CachedContentBase`. It includes an optional `ttlSeconds` property to specify the time-to-live for the cached content in seconds. Alternatively, `expireTime` (defined in CachedContentBase) can be used.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentcreateparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CachedContentCreateParams extends CachedContentBase \n```\n\n----------------------------------------\n\nTITLE: Constructing GoogleGenerativeAIError in TypeScript\nDESCRIPTION: This snippet shows how to construct a new instance of the GoogleGenerativeAIError class. The constructor accepts a single parameter, 'message', which is a string used to initialize the error instance. This is part of the Google generative AI library, requiring the installation of '@google/generative-ai' package as a prerequisite. The code does not include any additional functionality beyond instantiation and is meant for use in environments that support TypeScript.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaierror._constructor_.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(message: string);\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponse.response Property Type in TypeScript\nDESCRIPTION: Type definition for the response property of the FunctionResponse interface. The property is defined as an object type, representing the response data structure returned by a function call.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponse.response.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponse: object;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional API Version Property in TypeScript\nDESCRIPTION: This snippet defines an optional property 'apiVersion' for the RequestOptions interface in TypeScript. It allows the user to specify which API version to call (e.g., 'v1' or 'v1beta'). If this property is not set, the API will default to the latest stable version. This enables flexibility in using different versions of the API based on the user's requirements.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.requestoptions.apiversion.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiVersion?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails.domain Property in TypeScript\nDESCRIPTION: TypeScript interface property definition for the optional 'domain' property of the ErrorDetails interface. This property is of type string and is marked as optional.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.errordetails.domain.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndomain?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ttlSeconds property in TypeScript\nDESCRIPTION: This snippet defines the 'ttlSeconds' optional property, which is of type 'number', representing the time-to-live in seconds for cached content updates. It is part of the 'CachedContentUpdateInputFields' interface in the Google Generative AI project.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentupdateinputfields.ttlseconds.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nttlSeconds?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining NumberSchema Type Property in TypeScript\nDESCRIPTION: Type definition for the NumberSchema.type property that specifies it as a SchemaType.NUMBER constant.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.numberschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.NUMBER;\n```\n\n----------------------------------------\n\nTITLE: Defining IntegerSchema Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for IntegerSchema that extends BaseSchema. It provides structure for JSON-encodable integers with optional format specification supporting int32 or int64.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.integerschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IntegerSchema extends BaseSchema {\n    format?: \"int32\" | \"int64\";\n    type: typeof SchemaType.INTEGER;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoMetadata Interface in TypeScript\nDESCRIPTION: This snippet defines the VideoMetadata interface, which contains metadata for processed video content. It includes a single property 'videoDuration' of type string, representing the video duration in protobuf Duration format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.videometadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface VideoMetadata \n{\n  videoDuration: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BooleanSchema.type Property in TypeScript\nDESCRIPTION: This code snippet defines the 'type' property for the BooleanSchema class. It is a readonly property that is always set to SchemaType.BOOLEAN, indicating that this schema represents a boolean value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.booleanschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.BOOLEAN;\n```\n\n----------------------------------------\n\nTITLE: Defining updateMask Property in TypeScript\nDESCRIPTION: The purpose of this TypeScript snippet is to demonstrate the definition of the updateMask property, which is an optional array of strings used to specify fields for protobuf FieldMask updates. This property helps in selectively updating specific fields in an object, whereas if not specified, all fields provided are updated. It is a part of the CachedContentUpdateParams.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentupdateparams.updatemask.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateMask?: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart.functionCall Property in TypeScript\nDESCRIPTION: Declaration of the functionCall property in the FileDataPart interface. The property is optional and typed as 'never', indicating that FileDataPart objects should not use this property.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: ErrorDetails '@type' Property Definition\nDESCRIPTION: This code snippet shows the definition of the `@type` property within the `ErrorDetails` class.  It is an optional string property that is likely intended to specify the type or category of the error that occurred. The `?` indicates that it may be undefined.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.errordetails.__type_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"@type\"?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining SingleRequestOptions Interface in TypeScript\nDESCRIPTION: This snippet defines the SingleRequestOptions interface, which extends RequestOptions and includes an optional signal property of type AbortSignal. This interface is used for params passed to atomic asynchronous operations in the Google Generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.singlerequestoptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SingleRequestOptions extends RequestOptions \n{\n    signal?: AbortSignal;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PageSize Property in ListParams Interface - TypeScript\nDESCRIPTION: TypeScript type definition for the optional pageSize property that accepts a number value within the ListParams interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.listparams.pagesize.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npageSize?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining updateTime Property in CachedContent Interface (TypeScript)\nDESCRIPTION: Declares the optional updateTime property of type string in the CachedContent interface. This property represents the update time of the CachedContent in ISO string format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontent.updatetime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateTime?: string;\n```\n\n----------------------------------------\n\nTITLE: Documenting TypeScript Property Signing\nDESCRIPTION: The snippet documents the 'createTime' property of the 'CachedContent' object. It indicates the property type and that it might be optional, represented in ISO string format. No specific dependencies or external packages are required to understand this property signature as it solely relies on basic TypeScript syntax for optional properties.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontent.createtime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncreateTime?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleSearchRetrievalTool Property in TypeScript\nDESCRIPTION: This code snippet defines the googleSearchRetrieval property of the GoogleSearchRetrievalTool interface. It is an optional property of type GoogleSearchRetrieval, which configures the Google search retrieval tool.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlesearchretrievaltool.googlesearchretrieval.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngoogleSearchRetrieval?: GoogleSearchRetrieval;\n```\n\n----------------------------------------\n\nTITLE: BooleanSchema Interface Definition\nDESCRIPTION: Defines the `BooleanSchema` interface in TypeScript.  It specifies that the schema represents a boolean value and extends the `BaseSchema` interface, inheriting its properties. It includes a `type` property with a specific value from the `SchemaType` enum.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.booleanschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BooleanSchema extends BaseSchema \n```\n\n----------------------------------------\n\nTITLE: Defining ObjectSchema Properties in TypeScript\nDESCRIPTION: This code snippet defines the 'properties' property of the ObjectSchema class. It represents a key-value pair where keys are strings and values are of type Schema. This property is used to describe the properties of a JSON object and must not be empty.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.objectschema.properties.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nproperties: {\n        [k: string]: Schema;\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContent Interface\nDESCRIPTION: This snippet defines the CachedContent interface which extends CachedContentBase for interfacing with server communications. It outlines optional properties such as creation time, name, TTL, and update time with their respective types.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CachedContent extends CachedContentBase {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining inlineData Property in TextPart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the inlineData property for the TextPart interface. The property is optional and of type 'never', indicating it should not be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.textpart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart.functionResponse Property in TypeScript\nDESCRIPTION: This code snippet defines the functionResponse property for the FileDataPart interface. The property is optional and has a type of 'never', indicating it should not be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: EnumStringSchema Interface Definition\nDESCRIPTION: Defines the structure of the EnumStringSchema interface in TypeScript. It specifies that it extends the BaseSchema interface and describes a string enum.  The interface includes properties for enum values, format (specifically \"enum\"), and the schema type (SchemaType.STRING).\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.enumstringschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EnumStringSchema extends BaseSchema \n```\n\n----------------------------------------\n\nTITLE: Defining CitationSource Interface in TypeScript\nDESCRIPTION: This code snippet defines the `CitationSource` interface in TypeScript. It includes optional properties such as `endIndex`, `license`, `startIndex`, and `uri` to represent citation metadata. The interface is part of the `@google/generative-ai` library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.citationsource.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CitationSource \n```\n\n----------------------------------------\n\nTITLE: Defining a Timeout Property in TypeScript Interface\nDESCRIPTION: TypeScript definition for the timeout property in the RequestOptions interface. This optional property accepts a number value representing the request timeout in milliseconds for API calls to the Generative AI service.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.requestoptions.timeout.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntimeout?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining executableCode Property in FunctionCallPart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the executableCode property for the FunctionCallPart interface. The property is optional and has a type of 'never', indicating it should not be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: CachedContentBase.expireTime Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the `expireTime` property within the `CachedContentBase` class. It's an optional string property that represents the expiration time in ISO format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.expiretime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"expireTime?: string;\"\n```\n\n----------------------------------------\n\nTITLE: LogprobsCandidate token property\nDESCRIPTION: This snippet defines the `token` property of the `LogprobsCandidate` class in TypeScript. The property is a string representing the candidate's token value. This property is intended to provide the token string associated with a particular candidate in a log probabilities result.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.logprobscandidate.token.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntoken: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallPart.functionResponse Property in TypeScript\nDESCRIPTION: This code snippet defines the functionResponse property for the FunctionCallPart interface. The property is optional and of type 'never', indicating it should not be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: File Management Methods in GoogleAIFileManager\nDESCRIPTION: Provides core file management methods including upload, delete, get, and list operations for interacting with GoogleAI file services\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaifilemanager.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndeleteFile(fileId)\ngetFile(fileId, requestOptions)\nlistFiles(listParams, requestOptions)\nuploadFile(fileData, fileMetadata)\n```\n\n----------------------------------------\n\nTITLE: Defining the index Property in GenerateContentCandidate TypeScript Interface\nDESCRIPTION: The TypeScript signature for the index property of the GenerateContentCandidate class. This property is of type number and likely represents the position of this candidate in an array of generated content responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nindex: number;\n```\n\n----------------------------------------\n\nTITLE: ErrorDetails domain property\nDESCRIPTION: Defines the optional `domain` property within the `ErrorDetails` interface. This property is a string that can be used to categorize or specify the source of an error. It is part of the error reporting mechanism within the Generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.errordetails.domain.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ndomain?: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.fileData Property Type in TypeScript\nDESCRIPTION: TypeScript property signature defining the optional fileData property of the FunctionResponsePart interface. The property is marked as optional and has a type of 'never', indicating it cannot contain any value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponsepart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining TextPart.functionResponse Property Type in TypeScript\nDESCRIPTION: Type signature for the optional functionResponse property on the TextPart interface, which is typed as never indicating this property cannot be set.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.textpart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining EnumStringSchema Format Property in TypeScript\nDESCRIPTION: This code snippet defines the format property of the EnumStringSchema class. It specifies that the format is always set to the string literal 'enum', indicating that this schema represents an enumeration of string values.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enumstringschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat: \"enum\";\n```\n\n----------------------------------------\n\nTITLE: Defining the FunctionResponse.name Property in TypeScript\nDESCRIPTION: Type definition for the 'name' property of the FunctionResponse class. The property is a string that represents the name of the function response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponse.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Request Timeout in TypeScript\nDESCRIPTION: Optional numeric property that specifies the maximum time allowed for a request before it is automatically terminated. Helps prevent long-running requests from blocking application performance.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.requestoptions.timeout.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntimeout?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCode Property Type in FunctionCallPart Interface\nDESCRIPTION: Type definition for the optional executableCode property in the FunctionCallPart interface. The property is typed as 'never' indicating it cannot hold any value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Generative AI Response with Text and Safety Ratings\nDESCRIPTION: This JSON snippet demonstrates a generative AI response, including the generated text content, the role of the model, the reason for finishing, an index, and safety ratings for different harm categories. The safety ratings indicate the probability of each category of harm being present in the generated content. The promptFeedback also provides safety ratings.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-failure-recitation-no-content.txt#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"candidates\": [{\n    \"content\": {\n      \"parts\": [{\n        \"text\": \"Copyrighted text goes here\"\n      }],\n      \"role\": \"model\"\n    },\n    \"finishReason\": \"STOP\",\n    \"index\": 0,\n    \"safetyRatings\": [{\n      \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HARASSMENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }]\n  }],\n  \"promptFeedback\": {\n    \"safetyRatings\": [{\n      \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HARASSMENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining fileData Property in FunctionCallPart Interface (TypeScript)\nDESCRIPTION: Declaration of the fileData property in the FunctionCallPart interface. The property is marked as optional and has a 'never' type, which indicates this property cannot contain a value when used in FunctionCallPart objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: TextPart functionResponse property\nDESCRIPTION: This code snippet defines the `functionResponse` property within the `TextPart` class. The type `never` indicates that this property should not be used or assigned a value for text parts. It suggests that function responses are not associated with text parts in this specific context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.textpart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"functionResponse?: never;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Function Description Property in TypeScript\nDESCRIPTION: Defines an optional string property 'description' on the FunctionDeclaration interface that provides context about the function's purpose and helps the model determine function usage.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclaration.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n```\n\n----------------------------------------\n\nTITLE: CodeExecutionResultPart fileData property\nDESCRIPTION: This code snippet defines the `fileData` property of the `CodeExecutionResultPart` class in the `@google/generative-ai` library. The type `never` indicates that this property is not intended for use and will never have a value. It's a placeholder or a marker for an unimplemented feature.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfileData?: never;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional ExecutableCode in TypeScript\nDESCRIPTION: This snippet declares the 'executableCode' property as an optional field in TypeScript with a 'never' type, ensuring that it can never be assigned a value. This pattern is typically used to enforce at compile time that a certain field remains unassignable. It is implemented in the context of the FileDataPart module.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property in TypeScript\nDESCRIPTION: This code snippet defines the 'text' property within the ExecutableCodePart interface in TypeScript. The property is marked as optional and cannot be assigned any value ('never'). This is an important specification to ensure the integrity of the ExecutableCodePart definition.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodepart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining ArraySchema Type Property in TypeScript\nDESCRIPTION: Type definition for the type property of ArraySchema class, specifying it as a constant value of SchemaType.ARRAY.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.arrayschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.ARRAY;\n```\n\n----------------------------------------\n\nTITLE: Defining contents Property in CachedContentBase Class (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the 'contents' property of the CachedContentBase class. It is defined as an array of Content objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.contents.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: Content[];\n```\n\n----------------------------------------\n\nTITLE: Defining SimpleStringSchema Type in TypeScript\nDESCRIPTION: This snippet sets the type property of SimpleStringSchema to SchemaType.STRING, indicating the schema represents a simple string type. It depends on SchemaType being previously defined or imported in the context. Expected input is a string, and the output is a defined type for schema use.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.simplestringschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.STRING;\n```\n\n----------------------------------------\n\nTITLE: Defining inlineData Property in ExecutableCodePart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the inlineData property for the ExecutableCodePart interface. The property is optional and has a type of 'never', indicating it should not be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: RequestOptions apiClient Property\nDESCRIPTION: Defines the `apiClient` property within the `RequestOptions` interface. This optional string is intended for including additional attribution details within the `x-goog-api-client` header, specifically when utilized by wrapper SDKs. It allows identification of the specific wrapper SDK being used.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.requestoptions.apiclient.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\napiClient?: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadata DisplayName Property Type in TypeScript\nDESCRIPTION: TypeScript type definition showing the optional displayName property signature for FileMetadata interface/class\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadata.displayname.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayName?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the FunctionResponsePart.fileData Property in TypeScript\nDESCRIPTION: Declaration of the optional fileData property within the FunctionResponsePart interface. The property has a type of 'never', indicating it cannot hold any value and is likely used for type constraints or interface completeness.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclaration Parameters Type in TypeScript\nDESCRIPTION: Type definition for the optional parameters property that describes function parameters using JSON Schema Object format compatible with OpenAPI 3.0.3 Parameter Object specification.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclaration.parameters.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparameters?: FunctionDeclarationSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining ListParams Interface in TypeScript\nDESCRIPTION: This snippet defines the ListParams interface, which provides types for parameters used in the listFiles method of GoogleAIFileManager. It includes optional properties for page size and page token to facilitate pagination.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.listparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ListParams \n\n```\n\n----------------------------------------\n\nTITLE: Defining Code Execution Interfaces for Google Generative AI\nDESCRIPTION: TypeScript interfaces for code execution functionality in the Google Generative AI API. These interfaces define how code can be executed and results returned.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface CodeExecutionResult {\n    outcome: Outcome;\n    output: string;\n}\n\n// @public\nexport interface CodeExecutionResultPart {\n    // (undocumented)\n    codeExecutionResult: CodeExecutionResult;\n    // (undocumented)\n    executableCode?: never;\n    // (undocumented)\n    fileData?: never;\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData?: never;\n    // (undocumented)\n    text?: never;\n}\n\n// @public\nexport interface CodeExecutionTool {\n    codeExecution: {};\n}\n\n// @public\nexport interface Content {\n    // (undocumented)\n    parts: Part[];\n    // (undocumented)\n    role: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining fileData Property in FunctionCallPart Interface (TypeScript)\nDESCRIPTION: TypeScript signature for the fileData property in the FunctionCallPart interface. The property is marked as optional and has a 'never' type, indicating that this property cannot be assigned any value when using FunctionCallPart objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining the ExecutableCodePart.text Property in TypeScript\nDESCRIPTION: Signature of the text property in the ExecutableCodePart interface. The property is marked as optional and typed as 'never', indicating that this property should not be present in ExecutableCodePart objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Number Format in TypeScript\nDESCRIPTION: This snippet defines an optional property 'format' in the NumberSchema which can be either 'float' or 'double'. It is used to specify the format of the number within the schema.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.numberschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat?: \"float\" | \"double\";\n```\n\n----------------------------------------\n\nTITLE: Declaring SafetyRatings Property Type in TypeScript\nDESCRIPTION: Type declaration for the safetyRatings property which is an optional array of SafetyRating objects used to store content safety evaluations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.safetyratings.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsafetyRatings?: SafetyRating[];\n```\n\n----------------------------------------\n\nTITLE: Extracting ErrorDetails Reason Property\nDESCRIPTION: This snippet defines an optional 'reason' property within the 'ErrorDetails' class using TypeScript. The property holds a string value that can describe the reason for an error, enhancing error handling and debugging processes. It is a part of an automated documentation and generation system, indicating dependencies on TypeScript and possibly Node.js for its execution. This signature is crucial in environments where granular error information is required.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.errordetails.reason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreason?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining inlineData Property in FunctionCallPart Interface in TypeScript\nDESCRIPTION: TypeScript property definition for the inlineData property in the FunctionCallPart class. The property is marked as optional and has a type of 'never', indicating it should not be utilized in function call parts.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicRetrievalMode Enum in TypeScript\nDESCRIPTION: TypeScript enumeration that defines the possible modes for dynamic retrieval predictor. Contains two modes: MODE_DYNAMIC and MODE_UNSPECIFIED.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.dynamicretrievalmode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare enum DynamicRetrievalMode\n```\n\n----------------------------------------\n\nTITLE: Defining the name property in FileMetadata interface in TypeScript\nDESCRIPTION: TypeScript signature for the optional name property in the FileMetadata interface from the @google/generative-ai package.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadata.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining codeExecutionResult Property in InlineDataPart Class\nDESCRIPTION: TypeScript property definition for an optional codeExecutionResult property of type 'never' in the InlineDataPart class. This indicates that the property can never hold a value and is likely used for type safety or interface compatibility.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining ListParams Interface in TypeScript\nDESCRIPTION: The 'ListParams' interface is defined to specify parameters for listing operations in Google's Generative AI library. It is utilized by 'GoogleAIFileManager.listFiles()' and 'GoogleAICacheManager.list()'. The interface includes optional properties 'pageSize' and 'pageToken', indicating the number of results to return and the pagination token, respectively. There are no explicit dependencies other than the TypeScript environment.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listparams.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ListParams \n```\n\n----------------------------------------\n\nTITLE: Defining Schema and Error Interfaces for Google Generative AI\nDESCRIPTION: TypeScript interfaces for schema validation and error handling in the Google Generative AI API. Includes enum string schema and error details structure.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-incompatible-release-tags) The symbol \"EnumStringSchema\" is marked as @public, but its signature references \"BaseSchema\" which is marked as @internal\n//\n// @public\nexport interface EnumStringSchema extends BaseSchema {\n    enum: string[];\n    // (undocumented)\n    format: \"enum\";\n    // (undocumented)\n    type: typeof SchemaType.STRING;\n}\n\n// @public\nexport interface ErrorDetails {\n    // (undocumented)\n    \"@type\"?: string;\n    // (undocumented)\n    [key: string]: unknown;\n    // (undocumented)\n    domain?: string;\n    // (undocumented)\n    metadata?: Record<string, unknown>;\n    // (undocumented)\n    reason?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails @type Property Type in TypeScript\nDESCRIPTION: Type definition for the optional @type string property in the ErrorDetails interface. This property likely contains type information for error classification.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.errordetails.__type_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"@type\"?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining functionCall Property as Never in TypeScript\nDESCRIPTION: This code snippet specifies the functionCall property of the TextPart interface, indicating that it cannot be assigned any value. The TypeScript type 'never' is used to enforce this restriction.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.textpart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining finishMessage Property Type in TypeScript\nDESCRIPTION: Type definition for the optional finishMessage property on the GenerateContentCandidate class. The property is defined as an optional string value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.finishmessage.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfinishMessage?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart.inlineData Property in TypeScript\nDESCRIPTION: Declaration of the inlineData property on the FileDataPart class. The property is marked as optional and has a type of 'never', indicating that this property should not be used in FileDataPart instances.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property in TypeScript\nDESCRIPTION: This snippet defines an optional property inlineData of type 'never' in a TypeScript interface. The 'never' type indicates that this property cannot be assigned any value. This is useful for scenarios where the property should not be present at all, enforcing strict type checking.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresultpart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Code Execution Property\nDESCRIPTION: This snippet defines the 'codeExecution' property as an empty object within the CodeExecutionTool. It indicates that the property is currently empty but may be extended with additional subfields in the future.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutiontool.codeexecution.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecution: {};\\n\n```\n\n----------------------------------------\n\nTITLE: Defining state property in FileMetadataResponse Interface in TypeScript\nDESCRIPTION: Type signature for the 'state' property within the FileMetadataResponse interface. This property is of type FileState and likely indicates the current processing or availability state of a file in the Google Generative AI system.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.state.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstate: FileState;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property (fileData) - TypeScript\nDESCRIPTION: This snippet defines the fileData property within the InlineDataPart interface, indicating that this property is optional and cannot accept any values (i.e., it is not allowed to be set). This enforces design constraints on the usage of InlineDataPart in TypeScript, ensuring no erroneous data is assigned to fileData.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining the StringSchema Type in TypeScript\nDESCRIPTION: This snippet defines the StringSchema type as a union of SimpleStringSchema and EnumStringSchema. It is used to specify that a variable can hold either type of string schema, providing flexibility and type safety in handling string data.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.stringschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StringSchema = SimpleStringSchema | EnumStringSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining Confidence Scores in TypeScript\nDESCRIPTION: Optional numeric array representing confidence scores for support references. Each score ranges from 0 to 1, with 1 being the most confident. Must match the size of grounding_chunk_indices.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupport.confidencescores.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconfidenceScores?: number[];\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails.reason Property in TypeScript\nDESCRIPTION: TypeScript interface property declaration for the optional reason field in the ErrorDetails interface, which provides a description of why an error occurred in the Gemini API.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.errordetails.reason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreason?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the metadata property in the ErrorDetails interface in TypeScript\nDESCRIPTION: The TypeScript signature for the optional metadata property in the ErrorDetails interface. This property allows for storing arbitrary key-value pairs of error-related metadata as a Record type with string keys and unknown values.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.errordetails.metadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmetadata?: Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Code Execution Result in TypeScript\nDESCRIPTION: Defines an optional property with a 'never' type, indicating the property cannot have any value and is essentially unused or reserved\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining the description Property in FunctionDeclarationSchema Interface in TypeScript\nDESCRIPTION: The description property is an optional string field within the FunctionDeclarationSchema interface. It is used to provide descriptive information about a parameter, enhancing the clarity of function declarations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationschema.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n```\n\n----------------------------------------\n\nTITLE: CitationSource URI Property Declaration (TypeScript)\nDESCRIPTION: This snippet shows the declaration of the `uri` property within the `CitationSource` interface. The `uri` property is an optional string that represents the URI of the source being cited.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.citationsource.uri.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"uri?: string;\"\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.inlineData Property in TypeScript\nDESCRIPTION: Type definition for the optional inlineData property in the FunctionResponsePart interface. The property is defined as an optional never type, indicating this property should not contain any values.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponsepart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining codeExecutionResult property\nDESCRIPTION: This code snippet defines the `codeExecutionResult` property within the `FunctionCallPart` class using TypeScript.  It indicates that the property's type is `never`, meaning it cannot hold any value. The `?` indicates that the property is optional.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"codeExecutionResult?: never;\"\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.functionCall Property Type in TypeScript\nDESCRIPTION: Type definition for the optional functionCall property of the FunctionResponsePart interface. The property is defined as an optional never type, indicating this property cannot be used.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponsepart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining file Property in UploadFileResponse Using TypeScript\nDESCRIPTION: This code snippet defines the 'file' property as an instance of FileMetadataResponse within the UploadFileResponse type. This indicates that the property is expected to conform to the structure defined by FileMetadataResponse, which likely includes metadata information about the uploaded file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.uploadfileresponse.file.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfile: FileMetadataResponse;\n```\n\n----------------------------------------\n\nTITLE: CodeExecutionResultPart inlineData Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the `inlineData` property within the `CodeExecutionResultPart` class. It specifies that the property is optional and should never be defined by using the `never` type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ninlineData?: never;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining logprobs Property in GenerationConfig Interface (TypeScript)\nDESCRIPTION: This code snippet defines the logprobs property for the GenerationConfig interface. It's an optional number that specifies the number of top log probabilities to return at each decoding step when responseLogProbs is set to True.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generationconfig.logprobs.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogprobs?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining file Property in UploadFileResponse Class in TypeScript\nDESCRIPTION: Type definition for the file property in the UploadFileResponse class. The property returns a FileMetadataResponse object that contains metadata about the uploaded file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.uploadfileresponse.file.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfile: FileMetadataResponse;\n```\n\n----------------------------------------\n\nTITLE: Defining Request Options Interface in TypeScript\nDESCRIPTION: Interface for configuring API request parameters with optional settings for client, version, headers, and timeout\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface RequestOptions {\n    apiClient?: string;\n    apiVersion?: string;\n    baseUrl?: string;\n    customHeaders?: Headers | Record<string, string>;\n    timeout?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Parameters in FunctionDeclarationSchema TypeScript Interface\nDESCRIPTION: TypeScript type definition for the 'required' property that specifies which parameters are required in a function declaration. The property is optional and accepts an array of strings representing parameter names.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationschema.required.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequired?: string[];\n```\n\n----------------------------------------\n\nTITLE: Defining functionResponse Property\nDESCRIPTION: This snippet defines an optional property functionResponse of type 'never', indicating that the property should not be used. This is typically employed to enforce certain strict typing constraints within TypeScript interfaces.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Content and Manager Classes for Google Generative AI\nDESCRIPTION: TypeScript interfaces and classes for content and file management in the Google Generative AI API. Includes blob handling and manager classes for cache and file operations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface GenerativeContentBlob {\n    data: string;\n    // (undocumented)\n    mimeType: string;\n}\n\n// @public\nexport class GoogleAICacheManager {\n    constructor(apiKey: string, _requestOptions?: RequestOptions);\n    // (undocumented)\n    apiKey: string;\n    create(createOptions: CachedContentCreateParams): Promise<CachedContent>;\n    delete(name: string): Promise<void>;\n    get(name: string): Promise<CachedContent>;\n    list(listParams?: ListParams): Promise<ListCacheResponse>;\n    update(name: string, updateParams: CachedContentUpdateParams): Promise<CachedContent>;\n}\n\n// @public\nexport class GoogleAIFileManager {\n    constructor(apiKey: string, _requestOptions?: RequestOptions);\n    // (undocumented)\n    apiKey: string;\n    deleteFile(fileId: string): Promise<void>;\n    getFile(fileId: string, requestOptions?: SingleRequestOptions): Promise<FileMetadataResponse>;\n    listFiles(listParams?: ListParams, requestOptions?: SingleRequestOptions): Promise<ListFilesResponse>;\n    uploadFile(fileData: string | Buffer, fileMetadata: FileMetadata): Promise<UploadFileResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining codeExecutionResult Property in TextPart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the codeExecutionResult property for the TextPart interface. The property is optional and has a type of 'never', indicating it should never have a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.textpart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining FileDataPart.text Property in TypeScript\nDESCRIPTION: TypeScript signature for the 'text' property of the FileDataPart class. The property is marked as optional and has a 'never' type, indicating it should not be used or assigned a value in this context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining codeExecutionResult Property in FunctionResponsePart Interface in TypeScript\nDESCRIPTION: This snippet defines the codeExecutionResult property in the FunctionResponsePart interface. The property is marked as optional and has a 'never' type, indicating that this property should not contain any value in this interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Code Property\nDESCRIPTION: This snippet defines the 'executableCode' property as an optional property that cannot take any value (denoted by 'never'). It serves to ensure that this property is not included in any implementation of the TextPart interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.textpart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining the executableCode property in FileDataPart class in TypeScript\nDESCRIPTION: TypeScript declaration of the executableCode property within the FileDataPart class. The property is typed as an optional 'never', indicating that this property should not be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining NumberSchema Interface in TypeScript\nDESCRIPTION: TypeScript interface declaration for NumberSchema that extends BaseSchema. It defines the structure for JSON-encodable floating point numbers with optional format specification.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.numberschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface NumberSchema extends BaseSchema \n```\n\n----------------------------------------\n\nTITLE: Defining FunctionDeclarationSchema.type Property in TypeScript\nDESCRIPTION: This code snippet defines the 'type' property of the FunctionDeclarationSchema interface. It specifies that the property is of type SchemaType, which likely represents the allowed types for function parameters in the schema.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: SchemaType;\n```\n\n----------------------------------------\n\nTITLE: Defining renderedContent Property in SearchEntryPoint Class in TypeScript\nDESCRIPTION: TypeScript property definition for renderedContent in the SearchEntryPoint class. This optional string property holds a web content snippet that can be embedded in a web page or an app webview.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.searchentrypoint.renderedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrenderedContent?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining File Management Interfaces for Google Generative AI\nDESCRIPTION: TypeScript interfaces for file handling in the Google Generative AI API. Includes file metadata, state, and part structures for handling file data.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface FileData {\n    // (undocumented)\n    fileUri: string;\n    // (undocumented)\n    mimeType: string;\n}\n\n// @public\nexport interface FileDataPart {\n    // (undocumented)\n    codeExecutionResult?: never;\n    // (undocumented)\n    executableCode?: never;\n    // (undocumented)\n    fileData: FileData;\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData?: never;\n    // (undocumented)\n    text?: never;\n}\n\n// @public\nexport interface FileMetadata {\n    // (undocumented)\n    displayName?: string;\n    // (undocumented)\n    mimeType: string;\n    // (undocumented)\n    name?: string;\n}\n\n// @public\nexport interface FileMetadataResponse {\n    // (undocumented)\n    createTime: string;\n    // (undocumented)\n    displayName?: string;\n    error?: RpcStatus;\n    // (undocumented)\n    expirationTime: string;\n    // (undocumented)\n    mimeType: string;\n    // (undocumented)\n    name: string;\n    // (undocumented)\n    sha256Hash: string;\n    // (undocumented)\n    sizeBytes: string;\n    // (undocumented)\n    state: FileState;\n    // (undocumented)\n    updateTime: string;\n    // (undocumented)\n    uri: string;\n    videoMetadata?: VideoMetadata;\n}\n\n// @public\nexport enum FileState {\n    // (undocumented)\n    ACTIVE = \"ACTIVE\",\n    // (undocumented)\n    FAILED = \"FAILED\",\n    // (undocumented)\n    PROCESSING = \"PROCESSING\",\n    // (undocumented)\n    STATE_UNSPECIFIED = \"STATE_UNSPECIFIED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Enum in TypeScript SimpleStringSchema\nDESCRIPTION: Declares an optional enum property with a never type, indicating no specific enum values are allowed or expected\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.simplestringschema.enum.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.functionCall Type in TypeScript\nDESCRIPTION: Type definition for an optional functionCall property that is explicitly set to the 'never' type, indicating this property cannot be used.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallPart.codeExecutionResult Type Signature in TypeScript\nDESCRIPTION: Type definition for the codeExecutionResult optional property of the FunctionCallPart interface. The property is typed as 'never' indicating it cannot hold any value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Data Property\nDESCRIPTION: This snippet defines the 'inlineData' property as an optional field of type 'never' in TypeScript, indicating that it should not be used. This is useful for enforcing strict typing in scenarios where the presence of this property must be explicitly avoided.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining fileData Property in TextPart Interface (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the fileData property in the TextPart interface. The property is optional and has a type of 'never', indicating it should never be used or assigned a value in this context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.textpart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining functionResponse Property in TypeScript\nDESCRIPTION: Defines the optional functionResponse property of the CodeExecutionResultPart interface with a type of 'never'. This indicates that the property should never have a value assigned to it.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining cachedContents Property in ListCacheResponse Class (TypeScript)\nDESCRIPTION: This code snippet defines the cachedContents property of the ListCacheResponse class. It is an array of CachedContent objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listcacheresponse.cachedcontents.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncachedContents: CachedContent[];\n```\n\n----------------------------------------\n\nTITLE: Defining Optional fileData Property in TypeScript\nDESCRIPTION: Declares an optional property fileData with a 'never' type, which prevents any value assignment and represents an impossible type\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodepart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Type Property in FunctionDeclarationSchema Interface (TypeScript)\nDESCRIPTION: The type property specifies the data type of a parameter in a function declaration schema. It uses the SchemaType enum to define valid parameter types that can be used when declaring functions for the Generative AI API.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functiondeclarationschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: SchemaType;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResult Interface in TypeScript\nDESCRIPTION: This snippet defines the CodeExecutionResult interface, which contains two properties: outcome and output. It is used to represent the result of executing ExecutableCode in the @google/generative-ai package.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CodeExecutionResult \n{\n  outcome: Outcome;\n  output: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Recommending Financial Websites for Stock Information\nDESCRIPTION: This snippet provides a JSON response suggesting financial websites for the most recent stock information. It emphasizes third-party references alongside token data for context understanding.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-search-grounding.txt#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"candidates\": [{\"content\": {\"parts\": [{\"text\": \" financial websites like Google Finance or TradingView.\\n\"}], \"role\": \"model\"}, \"finishReason\": \"STOP\", \"index\": 0}], \"usageMetadata\": {\"promptTokenCount\": 8, \"candidatesTokenCount\": 106, \"totalTokenCount\": 114}}\n```\n\n----------------------------------------\n\nTITLE: Defining the HarmProbability Enum in Typescript\nDESCRIPTION: Defines the `HarmProbability` enum, which represents the probability of harm. Used in the SafetyRating interface. Possible values range from negligible to high.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n//@public\nexport enum HarmProbability {\n    HARM_PROBABILITY_UNSPECIFIED = \"HARM_PROBABILITY_UNSPECIFIED\",\n    HIGH = \"HIGH\",\n    LOW = \"LOW\",\n    MEDIUM = \"MEDIUM\",\n    NEGLIGIBLE = \"NEGLIGIBLE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining functionCall Property in TypeScript\nDESCRIPTION: The snippet defines a property named functionCall in the ExecutableCodePart interface, using TypeScript. The property is optionally set to never, indicating that it should not hold any value or be used directly. This setup is typical in cases where the property is reserved for specific extensions or instances. It requires knowledge of TypeScript and generative AI context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodepart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining ExecutableCodePart.functionResponse Type in TypeScript\nDESCRIPTION: TypeScript type definition declaring an optional functionResponse property of type 'never' on the ExecutableCodePart interface. This indicates the property is not meant to be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: ExecutableCodePart functionResponse property\nDESCRIPTION: This code snippet shows the definition of the `functionResponse` property within the `ExecutableCodePart` class.  It is defined as `never`, indicating that this property should not exist on an instance of `ExecutableCodePart`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodepart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"functionResponse?: never;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property with Never Type in TypeScript\nDESCRIPTION: This code defines an optional property 'text' in the FunctionCallPart interface that cannot be assigned any value. The use of 'never' indicates that 'text' should be omitted entirely from objects that implement this interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functioncallpart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Never Type for CodeExecutionResultPart Text Property\nDESCRIPTION: Declares an optional text property with a never type, which means the property cannot be assigned any value. This is typically used to explicitly prevent value assignment.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresultpart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property as Never in TypeScript\nDESCRIPTION: This snippet defines the 'text' property as an optional property that can never be present in the FileDataPart interface. It specifies the property type as 'never', indicating that if 'text' is specified, it does not allow any value. This is used to enforce type safety in TypeScript.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Schema Interface in TypeScript\nDESCRIPTION: Creates a TypeScript interface for boolean schema that extends BaseSchema, representing a simple true/false type definition\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.booleanschema.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface BooleanSchema extends BaseSchema\n```\n\n----------------------------------------\n\nTITLE: GroundingSupport segment property declaration\nDESCRIPTION: Defines the `segment` property as an optional string within the `GroundingSupport` interface. This property is intended to store the URI reference of a specific segment or chunk of content, likely used for grounding purposes in generative AI models.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupport.segment.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"segment?: string;\"\n```\n\n----------------------------------------\n\nTITLE: Generative AI Response with Text, Safety Ratings, and Citations\nDESCRIPTION: This JSON snippet shows a generative AI response that includes generated text, safety ratings, and citation metadata. The citation metadata provides information about the source of the information used to generate the response, including the start and end indices of the cited text, the URI of the source, and the license. The safety ratings assess the potential for harmful content in the response.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-failure-recitation-no-content.txt#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"candidates\": [{\n    \"content\": {\n      \"parts\": [{\n        \"text\": \"More copyrighted text\"\n      }],\n      \"role\": \"model\"\n    },\n    \"finishReason\": \"STOP\",\n    \"index\": 0,\n    \"safetyRatings\": [{\n      \"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HATE_SPEECH\",\n      \"probability\": \"LOW\"\n    }, {\n      \"category\": \"HARM_CATEGORY_HARASSMENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }, {\n      \"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n      \"probability\": \"NEGLIGIBLE\"\n    }],\n    \"citationMetadata\": {\n      \"citationSources\": [{\n        \"startIndex\": 30,\n        \"endIndex\": 179,\n        \"uri\": \"https://www.example.com\",\n        \"license\": \"\"\n      }]\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Property in TypeScript\nDESCRIPTION: This snippet defines an optional property 'executableCode' which is defined as never, indicating it should not be used. This is commonly used in TypeScript to ensure that certain properties do not hold any value, thereby enforcing stricter typing and preventing misuse. The key parameter 'executableCode' is meant to ensure clarity in function response parts.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining inlineData Property in FunctionCallPart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the inlineData property for the FunctionCallPart interface. The property is optional and has a type of 'never', indicating it should not be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining AbortSignal Property in SingleRequestOptions Interface for Google Generative AI\nDESCRIPTION: TypeScript interface definition for the optional 'signal' property in SingleRequestOptions, which accepts an AbortSignal object that can be used to abort asynchronous requests. This property allows cancellation of requests either manually or automatically upon timeout expiration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.singlerequestoptions.signal.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignal?: AbortSignal;\n```\n\n----------------------------------------\n\nTITLE: Defining executableCode Property in TypeScript\nDESCRIPTION: This TypeScript snippet defines the executableCode property within the CodeExecutionResultPart interface. The property is optional and is of the type 'never', indicating it should not be implemented or have any value. This pattern is used to explicitly prevent the use of this property in implementing classes or instances.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresultpart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining InlineDataPart.functionCall Property Type in TypeScript\nDESCRIPTION: Type definition for the functionCall property of the InlineDataPart interface. The property is optional and typed as 'never', indicating this property should never hold a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining codeExecutionResult Property in FileDataPart Class in TypeScript\nDESCRIPTION: Declaration of the codeExecutionResult optional property with a never type. This suggests that while the property exists in the type definition, it should not contain a value in this context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedatapart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining InlineDataPart FunctionCall Property\nDESCRIPTION: This snippet defines the functionCall property of the InlineDataPart interface in TypeScript, explicitly setting it to 'never', meaning it cannot be assigned any value. This operates within the Generative AI JavaScript framework, indicating intentional design to prevent use of this property.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining GroundingChunk.web Property in TypeScript\nDESCRIPTION: This TypeScript snippet defines the optional property 'web' of the 'GroundingChunk' object as a type 'GroundingChunkWeb'. The property represents a chunk sourced from the web. It is a part of the generative AI JavaScript library module maintained by Google. No dependencies are specified, but it requires 'GroundingChunkWeb' type definition.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingchunk.web.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nweb?: GroundingChunkWeb;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResultPart.text Property in TypeScript\nDESCRIPTION: TypeScript property definition showing the text property as an optional never type in the CodeExecutionResultPart interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining the requests Property in BatchEmbedContentsRequest Class in TypeScript\nDESCRIPTION: Type definition for the requests property in the BatchEmbedContentsRequest class, which is an array of EmbedContentRequest objects. This property is used for batching multiple embedding requests together.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.batchembedcontentsrequest.requests.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrequests: EmbedContentRequest[];\n```\n\n----------------------------------------\n\nTITLE: Defining functionResponse Property in InlineDataPart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the functionResponse property for the InlineDataPart interface. The property is optional and has a type of 'never', which means it should not be used or assigned any value in implementations of this interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.text Property in TypeScript\nDESCRIPTION: Type definition for the text property in the FunctionResponsePart interface. The property is marked as optional and typed as 'never', indicating this property cannot contain a value in function response parts.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectSchema Type Property in TypeScript\nDESCRIPTION: This snippet defines the `type` property within the `ObjectSchema` class. It assigns the value `SchemaType.OBJECT` to indicate that the schema represents an object. This property is crucial for schema validation and data handling within the Generative AI library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.objectschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ntype: typeof SchemaType.OBJECT;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining InlineDataPart.inlineData property\nDESCRIPTION: This code snippet shows the definition of the `inlineData` property within the `InlineDataPart` interface. The `inlineData` property is of type `GenerativeContentBlob`, representing the data that is directly embedded within the content part. It uses TypeScript syntax to declare the property and its type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"inlineData: GenerativeContentBlob;\"\n```\n\n----------------------------------------\n\nTITLE: Defining Data Interfaces and Response Types for Google Generative AI\nDESCRIPTION: TypeScript interfaces for inline data, schema validation, and response types in the Google Generative AI API. Includes integer schema definition and list response interfaces.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface InlineDataPart {\n    // (undocumented)\n    codeExecutionResult?: never;\n    // (undocumented)\n    executableCode?: never;\n    // (undocumented)\n    fileData?: never;\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData: GenerativeContentBlob;\n    // (undocumented)\n    text?: never;\n}\n\n// Warning: (ae-incompatible-release-tags) The symbol \"IntegerSchema\" is marked as @public, but its signature references \"BaseSchema\" which is marked as @internal\n//\n// @public\nexport interface IntegerSchema extends BaseSchema {\n    format?: \"int32\" | \"int64\";\n    // (undocumented)\n    type: typeof SchemaType.INTEGER;\n}\n\n// @public (undocumented)\nexport interface ListCacheResponse {\n    // (undocumented)\n    cachedContents: CachedContent[];\n    // (undocumented)\n    nextPageToken?: string;\n}\n\n// @public\nexport interface ListFilesResponse {\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails.reason Property Type in TypeScript\nDESCRIPTION: Type definition for the optional reason property of the ErrorDetails interface. This property can contain a string explanation of why an error occurred.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.errordetails.reason.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nreason?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional endIndex Property in TypeScript\nDESCRIPTION: This TypeScript snippet defines an optional property `endIndex` for the `GroundingSupportSegment`. It specifies the end index in a given Part, measured in bytes, and is offset from the start of the Part. The index is exclusive and the count starts at zero. This property is optional and, if present, is expected to be of type `number`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingsupportsegment.endindex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nendIndex?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Retrieval Mode Property in TypeScript\nDESCRIPTION: This snippet defines an optional property 'mode' for the DynamicRetrievalConfig interface. The property is of type DynamicRetrievalMode, indicating the mode of the predictor to be used during dynamic retrieval operations. The property can be undefined, denoted by the '?' in its signature.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.dynamicretrievalconfig.mode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmode?: DynamicRetrievalMode;\n```\n\n----------------------------------------\n\nTITLE: CodeExecutionResultPart functionCall Property\nDESCRIPTION: This code snippet defines the `functionCall` property of the `CodeExecutionResultPart` class. The type `never` indicates that this property should never be assigned a value, effectively preventing its use.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresultpart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunctionCall?: never;\n```\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definitions for Google Generative AI\nDESCRIPTION: Core TypeScript interface and type definitions for the Google Generative AI API including schemas for array handling, base parameters, content generation, chat sessions, embeddings, and function declarations. These definitions enable strong typing for API interactions.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ArraySchema extends BaseSchema {\n    items: Schema;\n    maxItems?: number;\n    minItems?: number;\n    type: typeof SchemaType.ARRAY;\n}\n\nexport interface BaseParams {\n    generationConfig?: GenerationConfig;\n    safetySettings?: SafetySetting[];\n}\n\nexport interface BaseSchema {\n    description?: string;\n    nullable?: boolean;\n}\n\nexport interface BatchEmbedContentsRequest {\n    requests: EmbedContentRequest[];\n}\n\nexport interface BatchEmbedContentsResponse {\n    embeddings: ContentEmbedding[];\n}\n\nexport enum BlockReason {\n    BLOCKED_REASON_UNSPECIFIED = \"BLOCKED_REASON_UNSPECIFIED\",\n    OTHER = \"OTHER\",\n    SAFETY = \"SAFETY\"\n}\n\nexport interface BooleanSchema extends BaseSchema {\n    type: typeof SchemaType.BOOLEAN;\n}\n\nexport interface CachedContent extends CachedContentBase {\n    createTime?: string;\n    name?: string;\n    ttl?: string;\n    updateTime?: string;\n}\n\nexport class ChatSession {\n    constructor(apiKey: string, model: string, params?: StartChatParams, _requestOptions?: RequestOptions);\n    getHistory(): Promise<Content[]>;\n    model: string;\n    params?: StartChatParams;\n    sendMessage(request: string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentResult>;\n    sendMessageStream(request: string | Array<string | Part>, requestOptions?: SingleRequestOptions): Promise<GenerateContentStreamResult>;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Interface GroundingChunkWeb in TypeScript\nDESCRIPTION: This TypeScript snippet declares the GroundingChunkWeb interface, which characterizes a web-originated chunk in the @google/generative-ai module. The interface includes optional string properties 'title' and 'uri', which represent the title and URI of the chunk, respectively. It serves as a type definition ensuring consistent structure and usage of web chunks within the module.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingchunkweb.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport declare interface GroundingChunkWeb\n```\n\n----------------------------------------\n\nTITLE: Defining FileMetadataResponse.state Property in TypeScript\nDESCRIPTION: This code snippet defines the 'state' property of the FileMetadataResponse interface. The property is of type FileState, which likely represents the current state of a file in the context of generative AI operations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.state.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstate: FileState;\n```\n\n----------------------------------------\n\nTITLE: Defining Data Property in GenerativeContentBlob TypeScript Interface\nDESCRIPTION: Type definition for the data property that stores image content as a base64-encoded string within the GenerativeContentBlob class. This property is used to represent image data that can be processed by the generative AI models.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.generativecontentblob.data.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndata: string;\n```\n\n----------------------------------------\n\nTITLE: Defining String Schema Type Alias\nDESCRIPTION: This type alias defines `StringSchema` as either a `SimpleStringSchema` or an `EnumStringSchema`. It represents the possible schema types for a string value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport type StringSchema = SimpleStringSchema | EnumStringSchema;\n```\n\n----------------------------------------\n\nTITLE: Defining IntegerSchema.type Property in TypeScript\nDESCRIPTION: This code snippet defines the 'type' property for the IntegerSchema class. The property is set to SchemaType.INTEGER, which indicates that this schema represents an integer type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.integerschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.INTEGER;\n```\n\n----------------------------------------\n\nTITLE: Defining ApiKey Property Type in GoogleAICacheManager\nDESCRIPTION: TypeScript type definition for the apiKey property in the GoogleAICacheManager class. The property is defined as a string type that likely stores the API key for authentication with Google AI services.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.googleaicachemanager.apikey.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napiKey: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Search Entry Point Interface\nDESCRIPTION: This interface defines the structure of a search entry point, which includes rendered content and an SDK blob. It's used to represent a point where a search query enters the system. The `renderedContent` is optional and represents the content rendered from the search, and `sdkBlob` is an optional string.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SearchEntryPoint {\n    renderedContent?: string;\n    sdkBlob?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IntegerSchema Format in TypeScript\nDESCRIPTION: Optional property that specifies the integer format, supporting 32-bit and 64-bit integer types. Allows developers to precisely define integer range and storage requirements.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.integerschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat?: \"int32\" | \"int64\";\n```\n\n----------------------------------------\n\nTITLE: Defining RpcStatus.code Property in TypeScript\nDESCRIPTION: Defines the 'code' property of the RpcStatus interface. This property represents the error status code and is of type number.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.rpcstatus.code.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncode: number;\n```\n\n----------------------------------------\n\nTITLE: Defining EnumStringSchema.type Property in TypeScript\nDESCRIPTION: This code snippet defines the 'type' property for the EnumStringSchema class. It specifies that the type is always SchemaType.STRING, indicating that this schema represents a string enumeration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enumstringschema.type.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype: typeof SchemaType.STRING;\n```\n\n----------------------------------------\n\nTITLE: Defining the nextPageToken Property for ListFilesResponse in TypeScript\nDESCRIPTION: Declaration of the optional nextPageToken string property in the ListFilesResponse interface. This property is used for pagination when listing files, containing a token that can be used to retrieve the next page of results.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.listfilesresponse.nextpagetoken.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnextPageToken?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining FileData MIME Type Property in TypeScript\nDESCRIPTION: Type definition for the mimeType property of the FileData interface, which stores the MIME type of a file as a string value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedata.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmimeType: string;\n```\n\n----------------------------------------\n\nTITLE: Schema Type Enum for Type Definitions\nDESCRIPTION: Enum representing different schema types used in type validation and serialization for Gemini AI interactions\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum SchemaType {\n    ARRAY = \"array\",\n    BOOLEAN = \"boolean\",\n    INTEGER = \"integer\",\n    NUMBER = \"number\",\n    OBJECT = \"object\",\n    STRING = \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional Display Name Property in TypeScript\nDESCRIPTION: This code snippet defines an optional 'displayName' property within the 'CachedContentBase' interface. The property is a string and does not require any specific dependencies. As it is optional, 'displayName' may not always be defined, which should be considered when accessing this property.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.displayname.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayName?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Date-Time Format in TypeScript String Schema\nDESCRIPTION: Declares an optional format property for string schemas that can be used for date-time validation. The property can be either 'date-time' or undefined, allowing flexible schema configuration.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.simplestringschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat?: \"date-time\" | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining EnumStringSchema.format in TypeScript\nDESCRIPTION: The 'format' property of the EnumStringSchema is defined as a string literal 'enum'. This property indicates the data type of the schema as being an enumeration. There are no external dependencies, prerequisites, or inputs for this property; it is a self-contained definition. The output is a fixed string value 'enum' and is constrained to this specific literal.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.enumstringschema.format.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nformat: \"enum\";\n```\n\n----------------------------------------\n\nTITLE: Defining Simple String Schema Interface\nDESCRIPTION: This interface extends `BaseSchema` and defines the structure for a simple string schema. It specifies that the schema's type is `STRING` and may optionally have a `date-time` format. The `enum` property is set to `never`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SimpleStringSchema extends BaseSchema {\n    // (undocumented)\n    enum?: never;\n    // (undocumented)\n    format?: \"date-time\" | undefined;\n    // (undocumented)\n    type: typeof SchemaType.STRING;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Probability Property in TypeScript\nDESCRIPTION: This TypeScript snippet defines a numerical property 'logProbability' for the 'LogprobsCandidate' component in a generative AI project. It requires TypeScript as the programming language. It does not have input parameters as it represents a property, and its output is a number.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.logprobscandidate.logprobability.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlogProbability: number;\n```\n\n----------------------------------------\n\nTITLE: Defining MimeType Property in TypeScript\nDESCRIPTION: This snippet defines the mimeType property as a string type within the FileData interface in TypeScript. It establishes the expected data type for the mimeType, ensuring that any value assigned to it complies with being a string.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedata.mimetype.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"mimeType: string;\"\n```\n\n----------------------------------------\n\nTITLE: Providing Stock Price Change Information\nDESCRIPTION: This snippet presents a JSON object that provides details about the decrease in stock price over a specific period. It highlights AI-generated text along with token metadata, ensuring that users understand the context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-search-grounding.txt#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"candidates\": [{\"content\": {\"parts\": [{\"text\": \" is \\\\$166.79 USD. This price reflects a decrease of\"}], \"role\": \"model\"}, \"finishReason\": \"STOP\", \"index\": 0}], \"usageMetadata\": {\"promptTokenCount\": 8, \"candidatesTokenCount\": 33, \"totalTokenCount\": 41}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Property in TypeScript\nDESCRIPTION: This code snippet shows the declaration of the 'uri' property in the 'FileMetadataResponse' class. The 'uri' property is of type 'string'. Users should ensure the correct 'string' format when interfacing with the 'FileMetadataResponse'.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.uri.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuri: string;\n```\n\n----------------------------------------\n\nTITLE: Defining LogprobsCandidate.tokenID Property in TypeScript\nDESCRIPTION: This snippet defines the 'tokenID' property for the 'LogprobsCandidate' class in a TypeScript interface. The 'tokenID' represents a numerical identifier for a token and is used in generative AI processes to track specific tokens. Dependencies include the TypeScript language, and the primary input is a 'number'. No explicit outputs are detailed, but it assumes integration within a larger generative AI framework.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.logprobscandidate.tokenid.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntokenID: number;\n```\n\n----------------------------------------\n\nTITLE: Defining FileData.fileUri Property in TypeScript\nDESCRIPTION: Declaration of the fileUri property within the FileData interface. This property is of type string and likely stores the URI pointing to the file's location.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.filedata.fileuri.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileUri: string;\n```\n\n----------------------------------------\n\nTITLE: RpcStatus details property\nDESCRIPTION: This code snippet defines the `details` property of the `RpcStatus` interface. The `details` property is an optional array of `ErrorDetails` objects, which provide more information about errors.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.rpcstatus.details.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ndetails?: ErrorDetails[];\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Items Property in TypeScript\nDESCRIPTION: This TypeScript snippet defines a property minItems for arrays, specifying the minimum number of items allowed. It is part of the Google Generative AI project, potentially requiring dependencies from the @google/generative-ai package. The key parameter, minItems, is optional and should be of type number if specified.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.arrayschema.minitems.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nminItems?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining the uri Property in FileMetadataResponse Interface (TypeScript)\nDESCRIPTION: TypeScript signature declaration for the uri property of the FileMetadataResponse class or interface. The uri property is defined as a string type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.uri.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nuri: string;\n```\n\n----------------------------------------\n\nTITLE: Detailed Metadata for Stock Price Generation\nDESCRIPTION: This snippet reveals a JSON structure detailing metadata such as grounding information and search queries related to the stock price responses. This context enhances the understanding of the model's decision-making process.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-success-search-grounding.txt#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ndata: {\"candidates\": [{\"content\": {}, \"index\": 0, \"groundingMetadata\": {\"searchEntryPoint\": {\"renderedContent\": \"test_rendered_content\"}, \"groundingChunks\": [{\"web\": {\"uri\": \"test_uri_1\", \"title\": \"test_title_1\"}}, {\"web\": {\"uri\": \"test_uri_2\", \"title\": \"test_title_2\"}}], \"groundingSupports\": [{\"segment\": {\"endIndex\": 41, \"text\": \"The current stock price for Alphabet Inc.\"}, \"groundingChunkIndices\": [0], \"confidenceScores\": [0.68925554]}, {\"segment\": {\"startIndex\": 42, \"endIndex\": 82, \"text\": \"(Google) Class C (GOOG) is \\\\$166.79 USD.\"}, \"groundingChunkIndices\": [1, 0], \"confidenceScores\": [0.92251855, 0.92251855]}, {\"segment\": {\"startIndex\": 83, \"endIndex\": 147, \"text\": \"This price reflects a decrease of -0.97% over the last 24 hours.\"}, \"groundingChunkIndices\": [0], \"confidenceScores\": [0.9831334]}, {\"segment\": {\"startIndex\": 150, \"endIndex\": 199, \"text\": \"Please note that stock prices can change rapidly.\"}, \"groundingChunkIndices\": [1], \"confidenceScores\": [0.6181941]}, {\"segment\": {\"startIndex\": 201, \"endIndex\": 267, \"text\": \"This information is current as of October 2, 2024, at 5:58 PM UTC.\"}, \"groundingChunkIndices\": [1], \"confidenceScores\": [0.6107691]}], \"webSearchQueries\": [\"what is the current google stock price\"]}}], \"usageMetadata\": {\"promptTokenCount\": 8, \"candidatesTokenCount\": 106, \"totalTokenCount\": 114}}\n```\n\n----------------------------------------\n\nTITLE: Defining updateTime Property in FileMetadataResponse Interface (TypeScript)\nDESCRIPTION: Type declaration for the updateTime property within the FileMetadataResponse interface. This property stores the update timestamp as a string value, indicating when the file was last modified.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.updatetime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nupdateTime: string;\n```\n\n----------------------------------------\n\nTITLE: Defining CodeExecutionResult Interface in TypeScript\nDESCRIPTION: The CodeExecutionResult interface is used to represent the result of executing an ExecutableCode in the generative AI environment. It is a part of the @google/generative-ai library and includes properties that describe the outcome of the execution and any resulting output. The properties include outcome of type Outcome, representing the result status, and output of type string, providing standard or error output depending on the execution success. This interface is crucial when handling the execution of code snippets in generative AI tasks.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport interface CodeExecutionResult\n```\n\n----------------------------------------\n\nTITLE: Defining the details property in RpcStatus interface in TypeScript\nDESCRIPTION: The details property is an optional array of ErrorDetails objects that carry error information. This property is part of the RpcStatus interface used for error handling in the Google Generative AI JavaScript library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.rpcstatus.details.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndetails?: ErrorDetails[];\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Interfaces in TypeScript for Google Generative AI\nDESCRIPTION: TypeScript interfaces for schema definitions used in the Google Generative AI API. These schemas define various data types like arrays, booleans, and strings with validation rules.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Warning: (ae-incompatible-release-tags) The symbol \"ArraySchema\" is marked as @public, but its signature references \"BaseSchema\" which is marked as @internal\n//\n// @public\nexport interface ArraySchema extends BaseSchema {\n    items: Schema;\n    maxItems?: number;\n    minItems?: number;\n    // (undocumented)\n    type: typeof SchemaType.ARRAY;\n}\n\n// Warning: (ae-internal-missing-underscore) The name \"BaseSchema\" should be prefixed with an underscore because the declaration is marked as @internal\n//\n// @internal\nexport interface BaseSchema {\n    description?: string;\n    nullable?: boolean;\n}\n\n// Warning: (ae-incompatible-release-tags) The symbol \"BooleanSchema\" is marked as @public, but its signature references \"BaseSchema\" which is marked as @internal\n//\n// @public\nexport interface BooleanSchema extends BaseSchema {\n    // (undocumented)\n    type: typeof SchemaType.BOOLEAN;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the name property in FileMetadataResponse interface in TypeScript\nDESCRIPTION: TypeScript signature for the 'name' property in the FileMetadataResponse interface from the @google/generative-ai package. The property is defined as a string type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname: string;\n```\n\n----------------------------------------\n\nTITLE: Defining functionResponse Property in FunctionCallPart Interface in TypeScript\nDESCRIPTION: TypeScript signature for the functionResponse optional property in the FunctionCallPart interface. This property is explicitly typed as 'never', indicating it should not be used or assigned a value in this context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionResponse?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining error Property in FileMetadataResponse Interface in TypeScript\nDESCRIPTION: Declaration of the optional error property in the FileMetadataResponse interface. This property is of type RpcStatus and is populated when file processing fails.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.error.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nerror?: RpcStatus;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional InlineData in TypeScript\nDESCRIPTION: Declares an optional property 'inlineData' with a 'never' type, which prevents any value assignment\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodepart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails Type Property in TypeScript\nDESCRIPTION: Type definition for the optional '@type' property in the ErrorDetails interface. This property is used to specify the error type in the Google Generative AI JavaScript library.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.errordetails.__type_.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n\"@type\"?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining expirationTime Property in FileMetadataResponse Interface\nDESCRIPTION: Declares the expirationTime property of type string within the FileMetadataResponse interface. This property likely represents the expiration time of a file or file metadata in string format.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.expirationtime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexpirationTime: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Code Execution Result Property\nDESCRIPTION: This snippet defines the optional property 'codeExecutionResult' as 'never' in the FileDataPart TypeScript interface, indicating it should not be used. This can help enforce type safety by ensuring that the property cannot be assigned any value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining displayName Property in FileMetadataResponse Interface in TypeScript\nDESCRIPTION: TypeScript signature for the optional displayName property in the FileMetadataResponse interface. This property can contain a string value or be undefined.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.displayname.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayName?: string;\n```\n\n----------------------------------------\n\nTITLE: FileMetadataResponse createTime Property Declaration\nDESCRIPTION: This code snippet shows the declaration of the `createTime` property within the `FileMetadataResponse` interface. The `createTime` property is of type `string` and represents the creation time of the file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.createtime.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\ncreateTime: string;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContentBase Model Property in TypeScript\nDESCRIPTION: This TypeScript snippet defines the 'model' property of the CachedContentBase class as an optional string. The property is intended to specify the model used within the generative AI context, but it may not always be present. There are no specific dependencies documented for this snippet.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.model.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmodel?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining sha256Hash Property in FileMetadataResponse Interface (TypeScript)\nDESCRIPTION: TypeScript signature for the sha256Hash property within the FileMetadataResponse interface, which stores a string containing the SHA-256 hash value of a file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.sha256hash.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsha256Hash: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Code Interfaces for Google Generative AI\nDESCRIPTION: TypeScript interfaces for executable code handling in the Google Generative AI API. Includes language enum and part structure for code execution.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai-server.api.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ExecutableCode {\n    code: string;\n    language: ExecutableCodeLanguage;\n}\n\n// @public (undocumented)\nexport enum ExecutableCodeLanguage {\n    // (undocumented)\n    LANGUAGE_UNSPECIFIED = \"language_unspecified\",\n    // (undocumented)\n    PYTHON = \"python\"\n}\n\n// @public\nexport interface ExecutableCodePart {\n    // (undocumented)\n    codeExecutionResult?: never;\n    // (undocumented)\n    executableCode: ExecutableCode;\n    // (undocumented)\n    fileData?: never;\n    // (undocumented)\n    functionCall?: never;\n    // (undocumented)\n    functionResponse?: never;\n    // (undocumented)\n    inlineData?: never;\n    // (undocumented)\n    text?: never;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the error property in FileMetadataResponse class in TypeScript\nDESCRIPTION: TypeScript definition of the 'error' property which is an optional RpcStatus object that provides error information when file processing fails.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/files/generative-ai.filemetadataresponse.error.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nerror?: RpcStatus;\n```\n\n----------------------------------------\n\nTITLE: Defining videoDuration Property in TypeScript\nDESCRIPTION: This snippet defines the videoDuration property as a string type in TypeScript, representing video duration in protobuf Duration format. The implementation follows the protobuf structure as outlined in the Google Cloud documentation.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.videometadata.videoduration.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvideoDuration: string;\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Existent Property in TypeScript\nDESCRIPTION: The executableCode property is defined with a type of 'never', indicating it should not exist within any valid object conforming to the InlineDataPart interface. This acts as a constraint, ensuring that no value can be assigned to it, thereby preventing its usage. This approach is often used to enforce stricter code contracts and prevent accidents or misconfigurations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining pageToken Property Type in ListParams Interface - TypeScript\nDESCRIPTION: Type definition for an optional pageToken string property used for pagination in list operations. The pageToken is used to retrieve subsequent pages of results.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listparams.pagetoken.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npageToken?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface Property for Code Execution Result\nDESCRIPTION: TypeScript interface property definition for executableCode in the CodeExecutionResultPart type. The property is optional and marked as 'never' type, indicating it cannot hold any value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.codeexecutionresultpart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Citation Metadata Property in TypeScript\nDESCRIPTION: This snippet defines an optional property 'citationMetadata' of type 'CitationMetadata' within the GenerateContentCandidate interface. It is intended to store information relevant to the citations of generated content. The property is marked as optional using '?' indicating that it may not be present in every instance of the interface.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.citationmetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncitationMetadata?: CitationMetadata;\n```\n\n----------------------------------------\n\nTITLE: Defining ListFilesResponse.files Property in TypeScript\nDESCRIPTION: This code snippet defines the 'files' property of the ListFilesResponse interface. It is an array of FileMetadataResponse objects, likely representing metadata for multiple files returned by a list operation.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listfilesresponse.files.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfiles: FileMetadataResponse[];\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContent.name Property in TypeScript\nDESCRIPTION: Type definition for the optional name property in the CachedContent interface. The property accepts a string value and is marked as optional with the ? modifier.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontent.name.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nname?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the toolConfig Property in CachedContentBase Class (TypeScript)\nDESCRIPTION: TypeScript signature for the optional toolConfig property in the CachedContentBase class, which accepts a ToolConfig type.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.cachedcontentbase.toolconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoolConfig?: ToolConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining CachedContent Property\nDESCRIPTION: This snippet defines an optional property 'cachedContent' within the StartChatParams interface in TypeScript. The 'cachedContent' property is designed to hold a string value representing the name of a CachedContent, distinguishing it from the cache object itself. It adds flexibility in terms of property inclusion, marking it as optional.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.startchatparams.cachedcontent.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncachedContent?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorDetails.domain Property in TypeScript\nDESCRIPTION: This snippet shows the TypeScript signature for the 'domain' property of the ErrorDetails interface. It is an optional string property.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.errordetails.domain.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndomain?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining sha256Hash Property in FileMetadataResponse Interface (TypeScript)\nDESCRIPTION: This code snippet defines the sha256Hash property in the FileMetadataResponse interface. The property is a string type and represents a SHA-256 hash value for a file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filemetadataresponse.sha256hash.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsha256Hash: string;\n```\n\n----------------------------------------\n\nTITLE: Defining codeExecutionResult Property in ExecutableCodePart Interface (TypeScript)\nDESCRIPTION: This code snippet defines the codeExecutionResult property for the ExecutableCodePart interface. The property is optional and has a type of 'never', suggesting it should not be used or assigned a value in implementations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining Content Property Type in GenerateContentCandidate Class\nDESCRIPTION: TypeScript type definition showing the content property signature of the GenerateContentCandidate class. The property returns a Content object containing the generated content from the AI model.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generatecontentcandidate.content.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: Content;\n```\n\n----------------------------------------\n\nTITLE: Defining InlineDataPart.text Property in TypeScript\nDESCRIPTION: This code snippet defines the 'text' property of the InlineDataPart interface. The property is optional and its type is set to 'never', indicating that it should never be used or assigned a value.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.inlinedatapart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining dynamicRetrievalConfig Property in GoogleSearchRetrieval Class (TypeScript)\nDESCRIPTION: This code snippet shows the TypeScript signature for the dynamicRetrievalConfig property. It is an optional property of type DynamicRetrievalConfig, used to specify the dynamic retrieval configuration for a given source in the GoogleSearchRetrieval class.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlesearchretrieval.dynamicretrievalconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndynamicRetrievalConfig?: DynamicRetrievalConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Description Property in FunctionDeclarationSchema Interface (TypeScript)\nDESCRIPTION: This code snippet defines the 'description' property for the FunctionDeclarationSchema interface. It is an optional string property that provides a description of the parameter.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functiondeclarationschema.description.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining Executable Code Property\nDESCRIPTION: This snippet defines the 'executableCode' property as part of the ExecutableCodePart interface in TypeScript. It establishes the type for executable components, ensuring strong typing and better integration within the TypeScript project.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.executablecodepart.executablecode.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexecutableCode: ExecutableCode;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional AbortSignal in TypeScript\nDESCRIPTION: Optional signal property of type AbortSignal for managing request cancellation. Note that client-side cancellation does not stop service-side processing and usage charges may still apply.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.singlerequestoptions.signal.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsignal?: AbortSignal;\n```\n\n----------------------------------------\n\nTITLE: Defining inlineData Property in FunctionResponsePart Interface in TypeScript\nDESCRIPTION: Declaration of the inlineData property in the FunctionResponsePart interface. The property is defined with an optional 'never' type, suggesting it should not be used or is reserved for internal purposes.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponsepart.inlinedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninlineData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining FileData Property in Google Generative AI\nDESCRIPTION: This TypeScript snippet defines the 'fileData' property within the InlineDataPart module of Google's generative AI library. The type 'never' signifies that this property is not supposed to be implemented or used. It may be a placeholder for potential future expansion or might indicate a deprecated part of the API. No additional dependencies are required as this is a simple TypeScript type property definition.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining DisplayName Property in TypeScript\nDESCRIPTION: TypeScript signature for the optional displayName property in the CachedContentBase class. This property allows setting a display name for cached content.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.cachedcontentbase.displayname.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndisplayName?: string;\n```\n\n----------------------------------------\n\nTITLE: Defining TextPart.fileData Property in TypeScript\nDESCRIPTION: This snippet defines the TextPart.fileData property within a TypeScript interface, indicating that it is optional and not expected to hold a value at any point. There are no specific dependencies or parameters, as this is merely a property signature definition.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.textpart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: FileDataPart FunctionCall Property Definition (TypeScript)\nDESCRIPTION: This snippet shows the type definition for the `functionCall` property of the `FileDataPart` interface. The `never` type indicates that this property is not intended to be used and attempting to assign a value to it will result in a compile-time error.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunctionCall?: never;\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineDataPart.text property\nDESCRIPTION: This TypeScript snippet documents the 'text' property of the InlineDataPart class within the @google/generative-ai package. The property is intentionally set to 'never', indicating it should not hold any value or be used. This might be a design choice to prevent unintended data within this part of the API. No additional dependencies or parameters are involved as it's a static property signature.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining pageSize Property in ListParams Interface (TypeScript)\nDESCRIPTION: This code snippet defines the optional pageSize property of type number in the ListParams interface. It is used to specify the number of items to return per page in list operations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.listparams.pagesize.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npageSize?: number;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponse.response Type Signature in TypeScript\nDESCRIPTION: TypeScript type signature defining the response property of the FunctionResponse interface. The property is of type object, representing the function's response data.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functionresponse.response.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nresponse: object;\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Code Execution Result in TextPart\nDESCRIPTION: Declares a read-only optional property with a 'never' type, suggesting this property is intentionally not meant to be used or assigned\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.textpart.codeexecutionresult.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncodeExecutionResult?: never;\n```\n\n----------------------------------------\n\nTITLE: FileDataPart fileData Property\nDESCRIPTION: This code snippet defines the `fileData` property within the `FileDataPart` class. It specifies that the property is of type `FileData`. This property is essential for accessing the actual content of the file.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.filedatapart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfileData: FileData;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionResponsePart.text property in TypeScript\nDESCRIPTION: Type definition for the text property in the FunctionResponsePart interface. The type is set to 'never' with an optional modifier, indicating this property cannot exist in function response parts.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/server/generative-ai.functionresponsepart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining EnhancedGenerateContentResponse.functionCall Type Signature\nDESCRIPTION: Type definition for the deprecated functionCall property that returns either a FunctionCall object or undefined. This method has been replaced by functionCalls().\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.enhancedgeneratecontentresponse.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall: () => FunctionCall | undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining ToolConfig Property in TypeScript\nDESCRIPTION: TypeScript property signature defining an optional toolConfig property of type ToolConfig in the GenerativeModel class.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.generativemodel.toolconfig.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoolConfig?: ToolConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionCallPart.text Property in TypeScript\nDESCRIPTION: Type definition for the text property in the FunctionCallPart interface. The property is marked as optional and has a type of 'never', indicating that this property should not be used or assigned a value in FunctionCallPart objects.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.functioncallpart.text.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntext?: never;\n```\n\n----------------------------------------\n\nTITLE: Defining errorDetails Property in GoogleGenerativeAIFetchError Class (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript signature for the errorDetails property of the GoogleGenerativeAIFetchError class. It is an optional property that contains an array of ErrorDetails objects, likely used for providing detailed error information in fetch operations.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaifetcherror.errordetails.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nerrorDetails?: ErrorDetails[];\n```\n\n----------------------------------------\n\nTITLE: Defining functionCall property in ExecutableCodePart interface in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript signature for the functionCall property in the ExecutableCodePart interface. The property is marked as optional with a never type, indicating it's not meant to be used in this context.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.executablecodepart.functioncall.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunctionCall?: never;\n```\n\n----------------------------------------\n\nTITLE: InlineDataPart functionResponse property\nDESCRIPTION: This code snippet defines the `functionResponse` property of the `InlineDataPart` class in TypeScript. The `?:` indicates it is an optional property.  The type `never` indicates that this property is not expected to have a value and should not be used.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.inlinedatapart.functionresponse.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nfunctionResponse?: never;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Retrieval Metadata in TypeScript\nDESCRIPTION: This TypeScript code snippet defines an optional property 'retrievalMetadata' for handling metadata related to the retrieval process within a grounding flow. The property type is 'RetrievalMetadata', indicating the use of a specific, possibly custom, type for handling retrieval metadata. This setting allows for enhanced structuring and processing of metadata within the TypeScript environment.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.groundingmetadata.retrievalmetadata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nretrievalMetadata?: RetrievalMetadata;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Start Chat Parameters Interface\nDESCRIPTION: This interface extends `BaseParams` and defines the parameters for starting a chat.  It includes optional properties for `cachedContent`, chat `history` (an array of `Content`), `systemInstruction` (either a string, a Part, or Content), `toolConfig`, and an array of `tools`.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/common/api-review/generative-ai.api.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StartChatParams extends BaseParams {\n    cachedContent?: string;\n    // (undocumented)\n    history?: Content[];\n    // (undocumented)\n    systemInstruction?: string | Part | Content;\n    // (undocumented)\n    toolConfig?: ToolConfig;\n    // (undocumented)\n    tools?: Tool[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GoogleGenerativeAIAbortError Class in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the GoogleGenerativeAIAbortError class, which is used to handle errors when a request is aborted due to a timeout or user cancellation. It extends from the GoogleGenerativeAIError base class, implying it inherits properties and methods from it. Intended for use in scenarios where error handling of aborted requests in Generative AI processes is required.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.googlegenerativeaiaborterror.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport declare class GoogleGenerativeAIAbortError extends GoogleGenerativeAIError\n```\n\n----------------------------------------\n\nTITLE: Gemini API Response Structure\nDESCRIPTION: This JSON snippet demonstrates the structure of a typical response from the Google Gemini API. It includes a list of candidates, each containing the generated content, and prompt feedback with safety ratings for various harm categories.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-failure-empty-content.txt#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"data\": {\"candidates\": [{\"content\": {},\"index\": 0}],\"promptFeedback\": {\"safetyRatings\": [{\"category\": \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HATE_SPEECH\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_HARASSMENT\",\"probability\": \"NEGLIGIBLE\"},{\"category\": \"HARM_CATEGORY_DANGEROUS_CONTENT\",\"probability\": \"NEGLIGIBLE\"}]}}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining fileData as never in CodeExecutionResultPart\nDESCRIPTION: This TypeScript snippet declares the fileData property of the CodeExecutionResultPart interface as optional, but specifies that it cannot hold any value (type never), which indicates that it is not intended to be used or set. This signifies a design decision to prevent usage of this property altogether.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/docs/reference/main/generative-ai.codeexecutionresultpart.filedata.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfileData?: never;\n```\n\n----------------------------------------\n\nTITLE: Generative AI Response with Finish Reason\nDESCRIPTION: This JSON snippet illustrates a simplified generative AI response, focusing solely on the finish reason and index.  The finish reason provides context on why the model stopped generating output, and the index indicates the position of the response within a set of potential responses.\nSOURCE: https://github.com/google-gemini/generative-ai-js/blob/main/test-utils/mock-responses/streaming-failure-recitation-no-content.txt#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"candidates\": [{\n    \"finishReason\": \"RECITATION\",\n    \"index\": 0\n  }]\n}\n```"
  }
]