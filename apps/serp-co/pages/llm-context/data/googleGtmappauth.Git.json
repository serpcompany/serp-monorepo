[
  {
    "owner": "google",
    "repo": "gtmappauth.git",
    "content": "TITLE: Making API Requests with the OAuth Token\nDESCRIPTION: Demonstrates how to make authenticated API requests using the GTMAuthSession to provide OAuth tokens.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_7\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Creates a request using the GTMSessionFetcher\nNSURL *apiURL = [NSURL URLWithString:@\"https://www.googleapis.com/userinfo/v2/me\"];\nGTMSessionFetcher *fetcher =\n    [self.authSession.fetcherService fetcherWithURL:apiURL];\n[fetcher beginFetchWithCompletionHandler:^(NSData *data, NSError *error) {\n  // Checks for authorization error\n  if (error) {\n    if ([error.domain isEqual:OIDOAuthTokenErrorDomain]) {\n      // Token is invalid, clear the auth state\n      self.authSession = nil;\n      NSLog(@\"Authorization error: %@\", error);\n    } else {\n      // Other error (typically connection)\n      NSLog(@\"Network error: %@\", error);\n    }\n    return;\n  }\n  \n  // Handles the response data\n  NSError *jsonError;\n  NSDictionary *json = [NSJSONSerialization JSONObjectWithData:data\n                                                      options:0\n                                                        error:&jsonError];\n  if (jsonError) {\n    NSLog(@\"JSON parsing error: %@\", jsonError);\n    return;\n  }\n  \n  // Process the API response\n  NSLog(@\"API response: %@\", json);\n}];\n```\n\n----------------------------------------\n\nTITLE: Initiating OAuth Authorization Flow\nDESCRIPTION: Creates an authorization request and initiates the OAuth flow, which will redirect to the browser for user authentication and handle the callback.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n// builds authentication request\nOIDAuthorizationRequest *request =\n    [[OIDAuthorizationRequest alloc] initWithConfiguration:configuration\n                                                  clientId:kClientID\n                                              clientSecret:kClientSecret\n                                                    scopes:@[OIDScopeOpenID, OIDScopeProfile]\n                                               redirectURL:redirectURI\n                                              responseType:OIDResponseTypeCode\n                                      additionalParameters:nil];\n// performs authentication request\nself.currentAuthorizationFlow =\n    [OIDAuthState authStateByPresentingAuthorizationRequest:request\n                        presentingViewController:presentingViewController\n                                        callback:^(OIDAuthState *_Nullable authState,\n                                                   NSError *_Nullable error) {\n  if (authState) {\n    // Creates a GTMAuthSession from the OIDAuthState\n    self.authSession = [[GTMAuthSession alloc] initWithAuthState:authState];\n    NSLog(@\"Got authorization tokens. Access token: %@\",\n          authState.lastTokenResponse.accessToken);\n  } else {\n    NSLog(@\"Authorization error: %@\", [error localizedDescription]);\n    self.authSession = nil;\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Managing Auth Sessions with Keychain Storage\nDESCRIPTION: Shows how to save, retrieve, and remove GTMAuthSession objects from the Keychain using GTMKeychainStore.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_8\n\nLANGUAGE: Objective-C\nCODE:\n```\n// Create a keychain store instance\nGTMKeychainStore *keychainStore = [[GTMKeychainStore alloc] initWithItemName:kKeychainItemName];\nNSError *error;\n\n// Save the auth session to keychain\n[keychainStore saveAuthSession:self.authSession error:&error];\nif (error) {\n  NSLog(@\"Error saving to keychain: %@\", error);\n}\n\n// Retrieve the auth session from keychain\nself.authSession = [keychainStore retrieveAuthSessionWithError:&error];\nif (error) {\n  NSLog(@\"Error retrieving from keychain: %@\", error);\n}\n\n// Remove the auth session from keychain\n[keychainStore removeAuthSessionWithError:&error];\nif (error) {\n  NSLog(@\"Error removing from keychain: %@\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OIDServiceConfiguration with Predefined OAuth Endpoints\nDESCRIPTION: Creates an OIDServiceConfiguration object by directly specifying the authorization and token endpoints for OAuth authentication.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSURL *authorizationEndpoint =\n    [NSURL URLWithString:@\"https://accounts.google.com/o/oauth2/v2/auth\"];\nNSURL *tokenEndpoint =\n    [NSURL URLWithString:@\"https://www.googleapis.com/oauth2/v4/token\"];\n\nOIDServiceConfiguration *configuration =\n    [[OIDServiceConfiguration alloc]\n        initWithAuthorizationEndpoint:authorizationEndpoint\n                        tokenEndpoint:tokenEndpoint];\n\n// perform the auth request...\n```\n\n----------------------------------------\n\nTITLE: Creating an OIDServiceConfiguration Using Auto-Discovery\nDESCRIPTION: Creates an OIDServiceConfiguration object by using the OpenID Connect discovery endpoint for Google accounts.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nNSURL *issuer = [NSURL URLWithString:@\"https://accounts.google.com\"];\n\n[OIDAuthorizationService discoverServiceConfigurationForIssuer:issuer\n                                                  completion:^(OIDServiceConfiguration *_Nullable configuration,\n                                                               NSError *_Nullable error) {\n  if (!configuration) {\n    NSLog(@\"Error retrieving discovery document: %@\", [error localizedDescription]);\n    return;\n  }\n  // continue with authorization\n}];\n```\n\n----------------------------------------\n\nTITLE: Migrating OAuth Sessions from GTMOAuth2 to GTMAppAuth Format\nDESCRIPTION: Comprehensive example showing how to migrate authentication data from GTMOAuth2 format to GTMAppAuth format, preserving existing user authorizations without requiring reauthorization.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_12\n\nLANGUAGE: objc\nCODE:\n```\n// Create a keychain store\nGTMKeychainStore keychainStore = [[GTMKeychainStore alloc] initWithItemName:kNewKeychainName];\n\n// Attempt to deserialize from Keychain in GTMAppAuth format.\nNSError *error;\nGTMAuthSesion *authSession =\n    [keychainStore retrieveAuthSessionWithError:&error];\n\n// If no data found in the new format, try to deserialize data from GTMOAuth2\nif (!authSession) {\n  // Tries to load the data serialized by GTMOAuth2 using old keychain name.\n  // If you created a new client id, be sure to use the *previous* client id and secret here.\n  GTMKeychainStore oldKeychainStore = [[GTMKeychainStore alloc] initWithItemName:kPreviousKeychainName];\n  authSession =\n      [oldKeychainStore retrieveAuthSessionInGTMOAuth2FormatWithClientID:kPreviousClientID\n                                                            clientSecret:kPreviousClientSecret\n                                                                   error:&error];\n  if (authSession) {\n    // Remove previously stored GTMOAuth2-formatted data.\n    [oldKeychainStore removeAuthSessionWithError:&error];\n    // Serialize to Keychain in GTMAppAuth format.\n    [keychainStore saveAuthSession:authSession error:&error];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Redirect in iOS\nDESCRIPTION: Handles the redirect from the browser back to the app after OAuth authentication by passing the URL to the current authorization flow.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (BOOL)application:(UIApplication *)app\n            openURL:(NSURL *)url\n            options:(NSDictionary<NSString *, id> *)options {\n  // Sends the URL to the current authorization flow which will process it if it relates to\n  // an authorization response.\n  if ([_currentAuthorizationFlow resumeExternalUserAgentFlowWithURL:url]) {\n    _currentAuthorizationFlow = nil;\n    return YES;\n  }\n  // Your additional URL handling (if any) goes here.\n  return NO;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GTMAuthSession Serialization to Keychain with GTMAppAuth\nDESCRIPTION: Demonstrates how to create a GTMAuthSession from an AppAuth state object and serialize it to the Keychain using GTMKeychainStore in the new format.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_11\n\nLANGUAGE: objc\nCODE:\n```\n// Create an auth session from AppAuth's auth state object\nGTMAuthSession *authSession = [[GTMAuthSession alloc] initWithAuthState:authState];\n\n// Create a keychain store\nGTMKeychainStore keychainStore = [[GTMKeychainStore alloc] initWithItemName:kNewKeychainName];\n\n// Serialize to Keychain\nNSError *error;\n[keychainStore saveAuthSession:authSession error:&error];\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Redirect in macOS\nDESCRIPTION: Configures the application delegate to handle URL scheme callbacks on macOS for OAuth redirects.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\n// property of the app's UIApplicationDelegate\n@property(nonatomic, nullable)\n    id<OIDExternalUserAgentSession> currentAuthorizationFlow;\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Redirect in macOS - URL Event Handler\nDESCRIPTION: Processes URL events in macOS by passing them to the current authorization flow for handling OAuth redirects.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (void)handleGetURLEvent:(NSAppleEventDescriptor *)event\n           withReplyEvent:(NSAppleEventDescriptor *)replyEvent {\n  NSString *URLString = [[event paramDescriptorForKeyword:keyDirectObject] stringValue];\n  NSURL *URL = [NSURL URLWithString:URLString];\n  [_currentAuthorizationFlow resumeExternalUserAgentFlowWithURL:URL];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Redirect in macOS - Application Delegate Setup\nDESCRIPTION: Sets up the macOS application delegate to handle URL scheme callbacks for OAuth authentication flows.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_5\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (void)applicationDidFinishLaunching:(NSNotification *)notification {\n  // Register handler for URL events\n  [[NSAppleEventManager sharedAppleEventManager]\n      setEventHandler:self\n          andSelector:@selector(handleGetURLEvent:withReplyEvent:)\n        forEventClass:kInternetEventClass\n           andEventID:kAEGetURL];\n  // other setup...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving GTMOAuth2 Format Sessions from Keychain in GTMAppAuth\nDESCRIPTION: Demonstrates how to retrieve a GTMAuthSession from the Keychain in GTMOAuth2 format using GTMKeychainStore. This method is provided for compatibility with GTMOAuth2 when migrating to GTMAppAuth.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\nGTMKeychainStore keychainStore = [[GTMKeychainStore alloc] initWithItemName:kKeychainItemName];\n\n// Retrieve from the Keychain\nNSError *error;\nGTMAuthSession *authSession =\n    [keychainStore retrieveAuthSessionForGoogleInGTMOAuth2FormatWithClientID:clientID\n                                                                clientSecret:clientSecret\n                                                                       error:&error];\n\n// Remove from the Keychain\n[keychainStore removeAuthSessionWithError:&error];\n```\n\n----------------------------------------\n\nTITLE: Saving AuthSession in GTMOAuth2 Format with GTMAppAuth\nDESCRIPTION: Shows how to save a GTMAuthSession to the Keychain in GTMOAuth2 format, which is discouraged but provided for backward compatibility during migration.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/README.md#2025-04-14_snippet_10\n\nLANGUAGE: objc\nCODE:\n```\n// Save to the Keychain\n[keychainStore saveWithGTMOAuth2FormatForAuthSession:authSession error:&error];\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect URI in GTMAppAuthExampleViewController\nDESCRIPTION: Instructions for updating the kRedirectURI constant in the GTMAppAuthExampleViewController.m file with the reverse DNS notation of the client ID.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-macOS/README.md#2025-04-14_snippet_4\n\nLANGUAGE: objectivec\nCODE:\n```\n// In the same file, update `kRedirectURI` with the *reverse DNS notation* form of the client ID.\n```\n\n----------------------------------------\n\nTITLE: Configuring Client ID in GTMAppAuthExampleViewController\nDESCRIPTION: Instructions for updating the kClientID constant in the GTMAppAuthExampleViewController.m file with the newly created Google OAuth client ID.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-macOS/README.md#2025-04-14_snippet_3\n\nLANGUAGE: objectivec\nCODE:\n```\n// In `GTMAppAuthExampleViewController.m` update `kClientID` with your new client ID.\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods Dependencies for iOS Example\nDESCRIPTION: Command to install the required library pods for the iOS example using CocoaPods. This needs to be run in the Example-iOS folder.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-iOS/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pod install\n```\n\n----------------------------------------\n\nTITLE: Installing CocoaPods Dependencies for macOS Example\nDESCRIPTION: Command to install the required library pods for the GTMAppAuth macOS example using CocoaPods.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-macOS/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ pod install\n```\n\n----------------------------------------\n\nTITLE: Opening Swift Package Manager Project in iOS Example\nDESCRIPTION: Command to open the Swift Package Manager project for the iOS example. This is used when choosing SPM as the dependency management solution.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-iOS/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen Example-iOS.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Opening Swift Package Manager Project in macOS\nDESCRIPTION: Command to open the Swift Package Manager project for the GTMAppAuth macOS example.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-macOS/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopen Example-macOS.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Opening CocoaPods Workspace for iOS Example\nDESCRIPTION: Command to open the generated workspace for the CocoaPods project after pod installation is complete.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-iOS/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ open Example-iOSForPod.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Opening CocoaPods Workspace for macOS Example\nDESCRIPTION: Command to open the generated workspace for the CocoaPods project of the GTMAppAuth macOS example.\nSOURCE: https://github.com/google/GTMAppAuth.git/blob/master/Examples/Example-macOS/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ open Example-macOSForPod.xcworkspace\n```"
  }
]