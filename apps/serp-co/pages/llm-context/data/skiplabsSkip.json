[
  {
    "owner": "skiplabs",
    "repo": "skip",
    "content": "TITLE: Implementing a Skip Service with Reactive Computation in TypeScript\nDESCRIPTION: Core implementation of a Skip service that reactively computes active members in groups. It defines service inputs, resource inputs, and a mapper for computing active users in each group.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/getting_started.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Type alias for inputs to our service\ntype ServiceInputs = {\n  users: EagerCollection<UserID, User>;\n  groups: EagerCollection<GroupID, Group>;\n};\n\n// Type alias for inputs to the active friends resource\ntype ResourceInputs = {\n  users: EagerCollection<UserID, User>;\n  activeMembers: EagerCollection<GroupID, UserID>;\n};\n\n// Mapper function to compute the active users of each group\nclass ActiveMembers implements Mapper<GroupID, Group, GroupID, UserID> {\n  constructor(private users: EagerCollection<UserID, User>) {}\n\n  mapEntry(gid: GroupID, group: Values<Group>): Iterable<[GroupID, UserID]> {\n    return group\n      .getUnique()\n      .members.flatMap((uid) =>\n        this.users.getUnique(uid).active ? [[gid, uid]] : [],\n      );\n  }\n}\n\n// Load initial data from a source-of-truth database (mocked for simplicity)\nconst initialData: InitialData<ServiceInputs> = {\n  users: ... ,\n  groups: ... ,\n};\n\n// Specify and run the reactive service\nconst service = {\n  initialData,\n  resources: {},\n  createGraph(input: ServiceInputs): ResourceInputs {\n    const activeMembers = input.groups.map(ActiveMembers, users);\n    return { users: input.users, activeMembers };\n  },\n};\nawait runService(service);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Skip Service with Reactive Resources in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement a basic Skip service with input collections, a createGraph function, and an exposed resource. It shows the structure for setting up initial data and defining the service's reactive computation graph.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/resources.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Load initial data from a source-of-truth database (mocked for simplicity)\nconst initialData: InitialData<ServiceInputs> = {\n  users: ... ,\n  groups: ... ,\n};\n\n// Specify and run the reactive service\nconst service = {\n  initialData,\n  resources: { active_friends: ActiveFriends },\n  createGraph(input: ServiceInputs): ResourceInputs {\n    const users = input.users;\n    const activeMembers = input.groups.map(ActiveMembers, users);\n    return { users, activeMembers };\n  },\n};\nawait runService(service);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Skip Resource Class in TypeScript\nDESCRIPTION: This code snippet shows how to implement a Resource class in Skip that handles parameter validation in the constructor and extends the computation graph in the instantiate method. The resource filters active members to find friends of a specified user.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/resources.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ActiveFriends implements Resource<ResourceInputs> {\n  private readonly uid: UserID;\n\n  constructor(params: Json) {\n    if (typeof params != \"number\")\n      throw new Error(\"Missing required number parameter 'uid'\");\n    this.uid = params;\n  }\n\n  instantiate(inputs: ResourceInputs): EagerCollection<GroupID, UserID> {\n    const user = inputs.users.getUnique(this.uid);\n    return inputs.activeMembers.map(FilterFriends, user);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized Resource with FilterFriends Mapper in TypeScript\nDESCRIPTION: Implementation of a Skip resource that provides active friends in groups for a specific user. It uses a FilterFriends mapper to compute which active users are also friends with the requested user.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/getting_started.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Mapper function to find users that are active and also friends with `user`\nclass FilterFriends implements Mapper<GroupID, UserID, GroupID, UserID> {\n  constructor(private readonly user: User) {}\n\n  mapEntry(gid: GroupID, uids: Values<UserID>): Iterable<[GroupID, UserID]> {\n    return uids\n      .toArray()\n      .flatMap((uid) => (this.user.friends.includes(uid) ? [[gid, uid]] : []));\n  }\n}\n\nclass ActiveFriends implements Resource<ResourceInputs> {\n  private readonly uid: UserID;\n\n  constructor(params: Json) {\n    if (typeof params != \"number\")\n      throw new Error(\"Missing required number parameter 'uid'\");\n    this.uid = params;\n  }\n\n  instantiate(inputs: ResourceInputs): EagerCollection<GroupID, UserID> {\n    const user = inputs.users.getUnique(this.uid);\n    return inputs.activeMembers.map(FilterFriends, user);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a GroupsPerUser Mapper in Skip\nDESCRIPTION: A mapper function that inverts the group-to-members relationship to create a user-to-groups mapping. It demonstrates how mappers can change the key/value structure between input and output collections.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/functions.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Mapper function to compute the groups each user belongs to\nclass GroupsPerUser implements Mapper<GroupID, Group, UserID, GroupID> {\n  mapEntry(gid: GroupID, group: Values<Group>): Iterable<[UserID, GroupID]> {\n    return group.getUnique().members.map((uid) => [uid, gid]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Skip Service Connection\nDESCRIPTION: Example showing how to configure a SkipExternalService to connect to another Skip reactive service. This demonstrates setting up connection parameters and defining the external service in the service configuration.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = {\n  initialData: ...,\n  resources: ...,\n  createGraph: ...,\n  externalServices: {\n    myOtherService: SkipExternalService.direct({\n      host: \"my.other.service.net\",\n      streaming_port: 8080,\n      control_port: 8081,\n    }),\n  },\n};\n\nawait runService(service);\n```\n\n----------------------------------------\n\nTITLE: Integrating Skip Reactive Service with React Components\nDESCRIPTION: React implementation that connects to a Skip reactive service using useState and useEffect hooks. This pattern establishes an EventSource connection when the component mounts, handles initial data and updates, and properly closes the connection on unmount.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/client.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst [foo, setFoo] = useState(...);\nuseEffect(() => {\n  const stream = new EventSource(\"http://reactive.service.hostname/my_resource/foo\");\n  stream.addEventListener(\"init\", (e: MessageEvent<string>) => {\n    const initial_data = JSON.parse(e.data);\n\tconst initialFoo = ...; // create an initial \"foo\" using `initial_data`\n\tsetFoo(initialFoo);\n  });\n  stream.addEventListener(\"update\", (e: MessageEvent<string>) => {\n    const updates = JSON.parse(e.data);\n\tconst updatedFoo = ...; // update \"foo\" using `updates`\n\tsetFoo(updatedfoo);\n  });\n  return () => {\n    stream.close();\n  };\n}, [])\n```\n\n----------------------------------------\n\nTITLE: Using PostgreSQL Table as Skip Collection\nDESCRIPTION: Shows how to access a PostgreSQL table as a Skip collection using the useExternalResource hook. This maps the table to a reactive collection that will be automatically updated when changes occur in the database.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/blog/adapters.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst myTable: EagerCollection<number, { id: number, value: string }> =\n  context.useExternalResource({\n    service: \"postgres\",\n    identifier: \"my_table\",\n    params: { key: { col: \"id\", type: \"SERIAL\" } },\n  });\n```\n\n----------------------------------------\n\nTITLE: Defining a Skip Mapper Interface in TypeScript\nDESCRIPTION: The core interface definition for Skip mapper functions, which define how to transform data from one collection to another. Mappers must implement mapEntry which takes a key and corresponding values and produces output key/value pairs.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/functions.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Mapper<\n  K1 extends Json,\n  V1 extends Json,\n  K2 extends Json,\n  V2 extends Json,\n> {\n  mapEntry(key: K1, values: Values<V1>): Iterable<[K2, V2]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka External Service\nDESCRIPTION: Example showing how to configure a Kafka message broker as an external service in Skip. This demonstrates setting up the KafkaExternalService with client ID and broker information.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = {\n  initialData: ...,\n  resources: ...,\n  createGraph: ...,\n  externalServices: {\n    kafka: new KafkaExternalService({ clientId, brokers, ... }),\n    ...,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an ActiveMembers Mapper in Skip\nDESCRIPTION: A mapper function that computes the active users of each group by filtering the members of a group to only include those users who are marked as active. It demonstrates accessing an external collection (users) within a mapper.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/functions.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Mapper function to compute the active users of each group\nclass ActiveMembers implements Mapper<GroupID, Group, GroupID, UserID> {\n  constructor(private users: EagerCollection<UserID, User>) {}\n\n  mapEntry(gid: GroupID, group: Values<Group>): Iterable<[GroupID, UserID]> {\n    return group\n      .getUnique()\n      .members.flatMap((uid) =>\n        this.users.getUnique(uid).active ? [[gid, uid]] : [],\n      );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Kafka Topic Messages as Reactive Collection\nDESCRIPTION: Example demonstrating how to subscribe to a Kafka topic and use its messages in a reactive Skip service. This shows the basic pattern for creating an EagerCollection from Kafka messages.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myKafkaTopic: EagerCollection<string, string> =\n  context.useExternalResource({\n    service: \"kafka\",\n    identifier: \"my-kafka-topic\",\n    params: {},\n  });\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL External Service\nDESCRIPTION: Example showing how to configure a PostgreSQL database as an external service in Skip. This demonstrates the basic setup for the PostgresExternalService in the service configuration.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = {\n  initialData: ...,\n  resources: ...,\n  createGraph: ...,\n  externalServices: {\n    postgres: new PostgresExternalService({ host, port,  ... }),\n    ...,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL External Service in Skip\nDESCRIPTION: Shows how to define a PostgreSQL database connection as an external service in a Skip service configuration object. This allows the service to connect to and watch for changes in Postgres tables.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/blog/adapters.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = {\n  initialData: ...,\n  resources: ...,\n  createGraph: ...,\n  externalServices: {\n    postgres: new PostgresExternalService({ host, port, database, ... }),\n    ...,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Polled HTTP External Service\nDESCRIPTION: Example showing how to configure polling for a non-reactive HTTP endpoint. This demonstrates creating a PolledExternalService with URL, polling interval, and data conversion logic.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = {\n  initialData: ...\n  resources: ...\n  createGraph: ...\n  externalServices: {\n    myExternalService: new PolledExternalService({\n      my_resource: {\n        // HTTP endpoint\n        url: \"https://api.example.com/my_resource\",\n        // Polling interval, in milliseconds\n        interval: 5000,\n        // data processing into `Entry<K, V>[]` key/values structure\n        conv: (data: Json) => Array.from(data, (v, k) => [k, [v]])\n      }\n    }),\n  },\n};\nawait runService(service);\n```\n\n----------------------------------------\n\nTITLE: Creating an Eager Directory with Map Function in SKStore\nDESCRIPTION: Demonstrates how to define an eager directory as the result of mapping over another directory. This example creates a sumDir that calculates the sum of integers for each entry in myDirOfIntegers, establishing a reactive dependency.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skiplang/docs/SKStore.md#2025-04-16_snippet_2\n\nLANGUAGE: Skip\nCODE:\n```\nsumDir = myDirOfIntegers.map(\n  IID::keyType,\n  IntFile::type,\n  context,\n  \"/result/\",\n  (context, writer, key, fileIterator) ~> {\n    sum = 0;\n    for(intFile in fileIterator) {\n      sum = sum + intFile.value\n    };\n    writer.set(key, IntFile(sum));\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Many-to-One NumActiveMembers Mapper in Skip\nDESCRIPTION: A many-to-one mapper that counts the number of active users in each group. This demonstrates how to collapse multiple values for a single key into an aggregate value.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/functions.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Mapper function to compute a _count_ of active users per group\nclass NumActiveMembers implements Mapper<GroupID, UserID, GroupID, number> {\n  mapEntry(gid: GroupID, uids: Values<UserID>): Iterable<[GroupID, number]> {\n    return [[gid, uids.toArray().length]];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EventSource for Stream Handling in JavaScript\nDESCRIPTION: JavaScript implementation for connecting to a Skip reactive service using the EventSource API. This code establishes a connection and registers handlers for both initialization and update events, parsing the JSON data from each message.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/client.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new EventSource(\"http://reactive.service.hostname/my_resource/foo\");\nstream.addEventListener(\"init\", (e: MessageEvent<string>) => {\n  const initial_data = JSON.parse(e.data);\n  console.log(\"Initial data: \", initial_data);\n});\nstream.addEventListener(\"update\", (e: MessageEvent<string>) => {\n  const updates = JSON.parse(e.data);\n  console.log(\"Updated data: \", updates);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a One-to-One NumFriendsPerUser Mapper in Skip\nDESCRIPTION: A simple one-to-one mapper that computes each user's number of friends. This pattern maintains the same key structure but transforms the value type from User to number.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/functions.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Mapper function to compute each user's number of friends\nclass NumFriendsPerUser implements Mapper<UserID, User, UserID, number> {\n  mapEntry(uid: UserID, user: Values<User>): Iterable<[UserID, number]> {\n    return [[uid, user.getUnique().friends.length]];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using curl to Listen for Updates from a Skip Service\nDESCRIPTION: Example of using curl to subscribe to a Skip resource's event stream, showing how to monitor real-time updates from the active_friends resource for user ID 0.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/getting_started.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LN http://localhost:8082/active_friends/0\n```\n\n----------------------------------------\n\nTITLE: Defining Data Types for a Skip Social Media Service in TypeScript\nDESCRIPTION: TypeScript type definitions for a social media application, including user and group data structures that will be used in a Skip reactive service.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/getting_started.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype UserID = number;\ntype GroupID = number;\ntype User = { name: string; active?: boolean; friends: UserID[] };\ntype Group = { name: string; members: UserID[] };\n```\n\n----------------------------------------\n\nTITLE: Viewing SSE Data Stream with cURL in Skip Services\nDESCRIPTION: Example of using curl to view server-sent events data stream from a Skip reactive service. This command connects to a specified endpoint and displays the raw event data containing initialization and update events.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/client.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nevent: init\nid: 1065359156\ndata: [[\"key1\",[\"value1\"]],[\"key2\",[\"value2\",\"value3\"]]]\n\nevent: update\nid: 1065376268\ndata: [[\"key2\",[\"value2\"]]]\n\nevent: update\nid: 1065371604\ndata: [[\"key3\",[\"value4\"]]]\n```\n\n----------------------------------------\n\nTITLE: Using External Resources in Skip Context\nDESCRIPTION: Example demonstrating how to access and use external resource data from another Skip service. This shows how to reference the external service defined in the configuration and convert it to an EagerCollection.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Pull in data from external resource:\nconst externalData : EagerCollection<K, V> = context.useExternalResource({\n  service: \"myOtherService\", // References this service's `externalServices` field\n  identifier: \"my_resource\", // References the other service's `resources` field\n  params: {foo: bar, ...}  // Passed to other service's Resource constructor\n});\n\n// Use the same as any other reactive eager collection:\nexternalData.map(...);\nexternalData.getArray(...);\n```\n\n----------------------------------------\n\nTITLE: Running a Skip Service and Web Application in Bash\nDESCRIPTION: Command-line instructions for building and running the Skip service, web application, and client from the skipruntime-ts/examples directory.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/getting_started.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd skipruntime-ts/examples\nnpm run build\nnode dist/groups-server.js &\nnode dist/groups.js &\n```\n\n----------------------------------------\n\nTITLE: Using Polled External Data in Skip Context\nDESCRIPTION: Example demonstrating how to access and work with data from a polled external service. This shows the pattern for creating and using an EagerCollection from a non-reactive data source.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Pull in data from external resource:\nconst externalData : EagerCollection<K, V> = context.useExternalResource({\n  service: \"myExternalService\",\n  identifier: \"my_resource\",\n  params: {foo: bar, ...}\n});\n\n// Use the same as any other reactive eager collection:\nexternalData.map(...);\nexternalData.getArray(...);\n```\n\n----------------------------------------\n\nTITLE: Installing Skip NPM Package\nDESCRIPTION: Command to install the Skip framework via NPM. After installation, two runtime options are available: a Wasm runtime (default) and a native runtime for Node.js.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @skiplabs/skip\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Polled External Service in Skip\nDESCRIPTION: Shows how to configure a PolledExternalService that periodically fetches data from an HTTP endpoint. This adapter allows integration with non-reactive APIs by converting their data into Skip collections.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/blog/adapters.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = {\n  initialData: ...\n  resources: ...\n  createGraph: ...\n  externalServices: {\n    myExternalService: new PolledExternalService({\n      my_resource: {\n        // HTTP endpoint\n        url: \"https://api.example.com/my_resource\",\n        // Polling interval, in milliseconds\n        interval: 5000,\n        // data processing into `Entry<K, V>[]` key/values structure\n        conv: (data: Json) => Array.from(data, (v, k) => [k, [v]])\n      }\n    }),\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Skip Framework via NPM\nDESCRIPTION: Command to install the main Skip Framework package which includes core runtime, server components, helpers and WebAssembly implementation.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/getting_started.md#2025-04-16_snippet_0\n\nLANGUAGE: npm\nCODE:\n```\nnpm install @skiplabs/skip\n```\n\n----------------------------------------\n\nTITLE: Configuring Kafka External Service in Skip\nDESCRIPTION: Shows how to define a Kafka connection as an external service in a Skip service configuration object. This enables the service to consume messages from Kafka topics as reactive collections.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/blog/adapters.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = {\n  initialData: ...,\n  resources: ...,\n  createGraph: ...,\n  externalServices: {\n    kafka: new KafkaExternalService({ clientId, brokers, ... }),\n    ...,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Adapter for Skip Framework using npm\nDESCRIPTION: Command to install the @skip-adapter/postgres package using npm package manager.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/adapters/postgres/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @skip-adapter/postgres\n```\n\n----------------------------------------\n\nTITLE: Subscribing to PostgreSQL Table as Reactive Collection\nDESCRIPTION: Example demonstrating how to convert a PostgreSQL table into a reactive EagerCollection. This shows the useExternalResource call with necessary parameters to define the table structure.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/externals.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst t: EagerCollection<number, { id: number, value: string }> =\n  context.useExternalResource({\n    service: \"postgres\",\n    identifier: \"t\",\n    params: { key: { col: \"id\", type: \"SERIAL\" } },\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Skip Native Runtime Package\nDESCRIPTION: NPM installation command for the Skip native runtime package.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/addon/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @skipruntime/native\n```\n\n----------------------------------------\n\nTITLE: Consuming Kafka Topic as Skip Collection\nDESCRIPTION: Demonstrates how to consume messages from a Kafka topic as a Skip collection using the useExternalResource hook. This enables reactive processing of streaming data from Kafka.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/blog/adapters.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst myKafkaTopic: EagerCollection<string, string> =\n  context.useExternalResource({\n    service: \"kafka\",\n    identifier: \"my-kafka-topic\",\n    params: {},\n  });\n```\n\n----------------------------------------\n\nTITLE: Running HackerNews Example with Docker Compose\nDESCRIPTION: Command to build and run the HackerNews example using Docker Compose in its default configuration with a single Skip service.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/examples/hackernews/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Using a Mapper to Create a Derived Collection in Skip\nDESCRIPTION: Example showing how to apply a mapper to an existing collection to create a derived collection. The Skip runtime will maintain this derived collection as reactive dependencies change.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/functions.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupsPerUser: EagerCollection<UserID, GroupID> = groups.map(GroupsPerUser);\n```\n\n----------------------------------------\n\nTITLE: Publishing NPM packages using Make\nDESCRIPTION: This command uses Make to publish all NPM packages. It requires proper NPM authentication to execute successfully.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/bin/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake publish-all\n```\n\n----------------------------------------\n\nTITLE: Creating a Lazy Directory in SKStore\nDESCRIPTION: Demonstrates how to define a lazy directory using LHandle::create. Lazy directories work like automatically-invalidated caches and can be used to implement recursive definitions by passing a self-reference to the lambda function.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skiplang/docs/SKStore.md#2025-04-16_snippet_4\n\nLANGUAGE: Skip\nCODE:\n```\nmyLazyDir = LHandle::create(\n  IID::keyType,\n  IntFile::type,\n  context,\n  \"/myDirName/\",\n  (context, self, key) ~> {\n    Array[/* some value */]\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation to Live Site\nDESCRIPTION: Command for initiating the publication process of documentation to the live site.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n- $ make docs-publish\n```\n\n----------------------------------------\n\nTITLE: Creating an Input Directory in SKStore\nDESCRIPTION: Demonstrates how to create an input directory in SKStore using the mkdir primitive. Input directories can be modified by the outside world, requiring specification of types for both keys and values.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skiplang/docs/SKStore.md#2025-04-16_snippet_0\n\nLANGUAGE: Skip\nCODE:\n```\nmyInputDirectory =\n  context.mkdir(Type1::keyType, Type2::type, \"/myInput/Name/\")\n```\n\n----------------------------------------\n\nTITLE: Publishing Documentation Manual Steps\nDESCRIPTION: Manual commands suggested by the docs-publish script to test documentation locally and push changes to the live site repository.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nTest locally: make docs-serve\nPush to live site: cd www/docs_site/; git add -A; git commit -m 'update to <commit>'; git push; cd -\n```\n\n----------------------------------------\n\nTITLE: Writing Data to an SKStore Directory\nDESCRIPTION: Shows how to modify a directory by adding or removing entries using the writeArray method. Removing an element is accomplished by writing an empty array (a \"tomb\"), which is semantically equivalent to no entry.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skiplang/docs/SKStore.md#2025-04-16_snippet_1\n\nLANGUAGE: Skip\nCODE:\n```\nmyInputDirectory.writeArray(context, myKey, Array[myValue])\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark with Custom Tarantool Path\nDESCRIPTION: Command to run the benchmark with a custom path to the Tarantool executable. This is needed when using a specially patched version of Tarantool that supports datetime functionality.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/sql/test/TPC-h/tnt-tpch/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTARANTOOL=../tarantool/build/src/build make\n```\n\n----------------------------------------\n\nTITLE: Accessing Directory Values with Direct Lookup in SKStore\nDESCRIPTION: Shows how to use the getArray primitive to directly look up values in any available directory. This example demonstrates looking up values from myOtherDirectory based on names stored in myDirOfNames.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skiplang/docs/SKStore.md#2025-04-16_snippet_3\n\nLANGUAGE: Skip\nCODE:\n```\nsumDir = myDirOfNames.map(\n  SID::keyType,\n  StringFile::type,\n  context,\n  \"/result2/\",\n  (context, writer, key, fileIterator) ~> {\n    values = mutable Vector[];\n    for(file in fileIterator) {\n      value = myOtherDirectory.getArray(context, SID::create(file.value));\n      values.push(value);\n    };\n    result = // .. do something with values ...\n    writer.set(key, result);\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Example - Pre-Extract Table\nDESCRIPTION: Example SQL schema showing the table structure before column extraction, used to demonstrate the migration process.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/rfc/007-schema-migration.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t (id INTEGER PRIMARY KEY, x TEXT, y TEXT, skdb_access TEXT);\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Container for Skip Service\nDESCRIPTION: Dockerfile configuration for building and running a Skip reactive service. It uses a Node.js Alpine base image, exposes both streaming and control ports (8080 and 8081), and sets up the service to run on startup.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/deploying.md#2025-04-16_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM node:lts-alpine3.19\nWORKDIR /app\nCOPY package.json package.json\nRUN npm install\nCOPY . .\nRUN npm run build\nEXPOSE 8080 8081\nCMD [\"npm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Example - Post-Extract Tables\nDESCRIPTION: Example SQL schemas showing the resulting table structures after column extraction, with the main table and extracted column table.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/rfc/007-schema-migration.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t (id INTEGER PRIMARY KEY, x TEXT, skdb_access TEXT);\nCREATE TABLE t_y (id INTEGER, y TEXT, skdb_access TEXT, skdb_original INTEGER);\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Web Service for Skip Reactive Service Integration\nDESCRIPTION: Express.js web service configuration that acts as a proxy for a Skip reactive service. This implementation handles client requests by instantiating resources on the reactive service, redirecting clients to stream data, and providing synchronous read endpoints.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/client.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from \"express\";\nconst app = express();\napp.use(express.json());\n\n// Specify the reactive service's address\nconst reactive_host = \"reactive.service.hostname\";\nconst streaming_port = 8080;\nconst control_port = 8081;\nconst reactive_service = new SkipServiceBroker({\n  host: reactive_host,\n  streaming_port,\n  control_port,\n});\n\n// On receiving a GET request for a reactive resource instance,\n//  1. Parse out any params from the request\n//  2. Request a stream identifier with those parameters from the reactive service\n//  3. Redirect the client to the corresponding stream address\napp.get(\"/my_resource/:id\", (req, res) => {\n  const params = { id: req.params.id, foo: req.params.bar, ... };\n  reactive_service\n    .getStreamUUID(\"my_resource\", params)\n    .then((uuid) => {\n      res.redirect(301, `http://${reactive_host}:${streaming_port}/v1/streams/${uuid}`);\n    })\n});\n\n// Synchronous read of a specific key in a resource instance\napp.get(\"/my_resource/:id/:key\", (req, res) => {\n  const params = { id: req.params.id, foo: req.params.bar, ... };\n  reactive_service\n    .getArray(\"my_resource\", params, req.params.key)\n    .then((data) => {\n      res.status(200).json(data);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Example - Legacy Client View\nDESCRIPTION: Example SQL schema showing how a legacy client might view the table structure, without the added column and with different column ordering.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/rfc/007-schema-migration.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n(x TEXT, y TEXT, skdb_access TEXT, id INTEGER PRIMARY KEY)\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Table Schema\nDESCRIPTION: SQL definition for a simple table with an auto-incrementing primary key and a text value column. This table can then be accessed as a reactive collection in Skip.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/blog/adapters.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE my_table (id SERIAL PRIMARY KEY, value TEXT);\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Skiplang Toolchain\nDESCRIPTION: Commands to clone the Skip repository, navigate to the compiler directory, and build the Skiplang toolchain.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/INSTALL.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --recursive https://github.com/SkipLabs/skip.git\ncd skip\ncd skiplang/compiler\nmake\n```\n\n----------------------------------------\n\nTITLE: Running HackerNews Example in Distributed Configuration\nDESCRIPTION: Command to build and run the HackerNews example in a distributed leader-follower configuration with one leader handling writes and three followers serving reactive streams to clients.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/examples/hackernews/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose -f compose.distributed.yml up --build\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Containers for Chat Room\nDESCRIPTION: Docker compose commands to build and start the reactive chat room services, including the Skip reactive service, web service, and front-end components.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/examples/chatroom/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker compose build\n$ docker compose up\n```\n\n----------------------------------------\n\nTITLE: Installing Skip Framework via NPM\nDESCRIPTION: Command to install the Skip Framework package using NPM package manager. This is the first step to start using the framework for building reactive backend services.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/blog/skip_alpha.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @skiplabs/skip\n```\n\n----------------------------------------\n\nTITLE: Installing Skiplang Toolchain\nDESCRIPTION: Command to install the Skiplang toolchain to a specified prefix directory. Creates bin and lib directories in the specified prefix.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/INSTALL.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake install prefix=<instalation_dir_prefix>\n```\n\n----------------------------------------\n\nTITLE: Building Native Skip Runtime for Node\nDESCRIPTION: Command to build the native Skip runtime for Node using the Skargo build tool. Requires the Skiplang toolchain to be installed.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/INSTALL.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd skip\nskargo b -r --manifest-path=skipruntime-ts/native/Skargo.toml --lib --out-dir=<target_dir>\n```\n\n----------------------------------------\n\nTITLE: Installing @skipruntime/native Package\nDESCRIPTION: Command to install the @skipruntime/native package using npm, specifying the target directory built in the previous step.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/INSTALL.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nSKIPRUNTIME=<target_dir> npm install @skipruntime/native\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy for Skip Service Traffic Routing\nDESCRIPTION: HAProxy configuration example for routing traffic to a Skip reactive service. It handles URL rewriting and ensures that only the streaming port is exposed to external clients while restricting access to the control port.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/docs/deploying.md#2025-04-16_snippet_1\n\nLANGUAGE: haproxy\nCODE:\n```\nfrontend www\n\t# ...\n\tacl url_streams path_beg -i /streams/\n\tuse_backend skip if url_streams\n\t# ...\n\nbackend skip\n\tmode http\n\t# rewrite public-facing url /streams/... to /v1/streams/... for the Skip server\n\thttp-request set-path /v1%[path]\n\tserver stream reactive_service:8080\n```\n\n----------------------------------------\n\nTITLE: Running Code Formatting Check for Skip\nDESCRIPTION: Command to manually run the code formatting check before submitting a PR. This executes the same check that runs in CI to ensure code is properly formatted.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/HACKING.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake check-fmt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Pre-commit Hooks for Skip\nDESCRIPTION: Command to install a git pre-commit hook that automatically formats changed files when committing, ensuring code formatting standards are maintained.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/HACKING.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake setup-git-hooks\n```\n\n----------------------------------------\n\nTITLE: Running the SKDB CLI from Build Directory in Bash\nDESCRIPTION: Command to navigate to the SKDB build directory and execute the CLI with arguments. This assumes you are starting from the /path/to/skdb_repo/sql/ts/ directory.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/sql/ts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../build/packages/skdb && npm run cli -- <args>\n```\n\n----------------------------------------\n\nTITLE: Using npm pack for Docker Builds with Local Skip Packages\nDESCRIPTION: A series of commands demonstrating how to use npm pack to create tarballs of locally modified Skip packages and use them in a Docker-based client build instead of published packages.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/HACKING.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n> cd path/to/skip\n> mkdir path/to/client/pack\n> npm pack --pack-destination path/to/client/pack -w skipruntime-ts/core\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Local Skip Packages\nDESCRIPTION: Example of how to modify a client's package.json to use locally packed Skip packages instead of the network-published versions.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/HACKING.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n    \"@skipruntime/core\": \"0.0.12\",\n```\n\nLANGUAGE: json\nCODE:\n```\n    \"@skipruntime/core\": \"file:/./pack/skipruntime-core-0.0.12.tgz\",\n```\n\n----------------------------------------\n\nTITLE: Workflow for Working with API Documentation\nDESCRIPTION: Step-by-step commands for initializing, running, and updating API documentation locally. Shows how to navigate to the repository root, generate docs, and run the local docs server.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n- $ cd /path/to/repo/root\n- $ make docs                           # to initialize the api docs\n- $ make docs-run                       # to run the docs site locally\n- visit http://localhost:3000/docs/api/core\n- edit the doc comments in the sources\n- $ make docs                           # to regenerate the api docs\n```\n\n----------------------------------------\n\nTITLE: Installing Skip WebAssembly Runtime Package\nDESCRIPTION: Commands for installing the Skip WebAssembly runtime package either directly or through the meta-package.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/wasm/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @skipruntime/wasm\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @skiplabs/skip\n```\n\n----------------------------------------\n\nTITLE: Running Example Test with Expected Output in Bash\nDESCRIPTION: This command shows how to run a test script that validates an example's output against expected results. The script redirects the example's stdout and stderr to specified expectation files.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/skipruntime-ts/tests/examples/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./foo.sh ./foo.exp.out ./foo.exp.err\n```\n\n----------------------------------------\n\nTITLE: Fast API Documentation Regeneration\nDESCRIPTION: A quicker but less reliable command for regenerating the API documentation by directly using the Docusaurus TypeDoc plugin.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/www/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n- cd /path/to/repo/root/www && npx docusaurus generate-typedoc\n```\n\n----------------------------------------\n\nTITLE: Building Docker Client with Local Skip Packages\nDESCRIPTION: Commands to build a client Docker image using the locally packed Skip packages after the necessary configuration changes.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/HACKING.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n> cd path/to/client\n> docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Updating Docker image versions using Bash scripts\nDESCRIPTION: This snippet demonstrates how to use Bash scripts to update Docker images for skdb-base, skdb, and skdb-dev-server to the current state of the git clone.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/bin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrelease_docker_skdb_base.sh\nrelease_docker_skdb.sh\nrelease_docker_skdb_dev_server.sh\n```\n\n----------------------------------------\n\nTITLE: Updating NPM package versions using sed command\nDESCRIPTION: This snippet shows how to use the sed command to update all package.json files with a new version number. It replaces the old version with the new version in all relevant files.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/bin/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsed -i '' 's/$OLD/$NEW/g' $(g grep -l $OLD skipruntime-ts/**/package.json)\n```\n\n----------------------------------------\n\nTITLE: Building and testing NPM packages using Make\nDESCRIPTION: This command uses Make to build and test the NPM packages in the skipruntime-ts directory.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/bin/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake -C skipruntime-ts build test\n```\n\n----------------------------------------\n\nTITLE: Updating example package dependencies using sed\nDESCRIPTION: This sed command updates the package dependencies in the examples directory to use the newly released version numbers.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/bin/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsed -i '' 's/$OLD/$NEW/g' $(g grep -l $OLD examples/**/package.json)\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Example - Table with Added Column\nDESCRIPTION: Example SQL schema showing a table structure with an added column, demonstrating the column ordering and types used in the schema migration system.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/rfc/007-schema-migration.md#2025-04-16_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n(id INTEGER PRIMARY KEY, x TEXT, y TEXT, skdb_access TEXT, addedCol TEXT)\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Version Constraints in Requirements File\nDESCRIPTION: This snippet defines the exact versions of Python packages required for the project. It includes Flask 3.0.3 for web application development, psycopg2_binary 2.9.10 for PostgreSQL database connectivity, and requests 2.32.3 for making HTTP requests.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/examples/hackernews/web_service/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFlask==3.0.3\npsycopg2_binary==2.9.10\nrequests==2.32.3\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the TPC-H Benchmark\nDESCRIPTION: Commands to clone the repository and run the benchmark with default settings. This initializes the benchmark environment and generates test data with a scale factor of 1.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/sql/test/TPC-h/tnt-tpch/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:tsafin/tnt-tpch.git\ncd tnt-tpch\nmake\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Scale Factor for TPC-H Benchmark\nDESCRIPTION: Command to run the benchmark with a custom scale factor. The scale factor determines the size of the generated dataset, with larger values creating more data for testing performance at scale.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/sql/test/TPC-h/tnt-tpch/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSCALE_FACTOR=10 make\n```\n\n----------------------------------------\n\nTITLE: Date List in YYYY-MM-DD Format\nDESCRIPTION: A sequential listing of dates formatted as YYYY-MM-DD, starting from December 24, 1994 and ending on June 19, 1997. Each date appears on a new line.\nSOURCE: https://github.com/SkipLabs/skip/blob/main/sql/test/dates/valid_date_list.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1994-12-24\n1994-12-25\n1994-12-26\n...\n1997-06-19\n```"
  }
]