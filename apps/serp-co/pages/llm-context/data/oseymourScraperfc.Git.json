[
  {
    "owner": "oseymour",
    "repo": "scraperfc.git",
    "content": "TITLE: Loading FiveThirtyEight Soccer Data with Pandas\nDESCRIPTION: A simple example showing how to directly load FiveThirtyEight's historical club matches data using Pandas' read_csv function. This approach is recommended over using the deprecated ScraperFC module.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/fivethirtyeight.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\ndf = pd.read_csv(\"https://projects.fivethirtyeight.com/soccer-api/club/spi_matches.csv\")\n```\n\n----------------------------------------\n\nTITLE: Using get_valid_seasons() Method in ScraperFC Modules\nDESCRIPTION: Most ScraperFC modules provide a get_valid_seasons() method to retrieve valid year options. The return type varies by module: list of strings, dict with years as keys, or list of valid seasons.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/year_parameter.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Capology\nvalid_seasons = capology.get_valid_seasons()  # Returns list of strings\n\n# FBref\nvalid_seasons = fbref.get_valid_seasons()  # Returns dict with years as keys\n\n# Sofascore\nvalid_seasons = sofascore.get_valid_seasons()  # Returns dict with season strings as keys\n\n# Transfermarkt\nvalid_seasons = transfermarkt.get_valid_seasons()  # Returns list of valid seasons\n\n# Understat\nvalid_seasons = understat.get_valid_seasons()  # Returns list of valid seasons\n```\n\n----------------------------------------\n\nTITLE: Installing ScraperFC via pip\nDESCRIPTION: This command installs the ScraperFC package using pip, the Python package installer. It should be run from the command line to set up ScraperFC in your Python environment.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ScraperFC\n```\n\n----------------------------------------\n\nTITLE: Installing ScraperFC Package Using pip\nDESCRIPTION: Command to install the ScraperFC package using pip package manager. This simple one-line command will download and install the ScraperFC package and its dependencies.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/getting_started.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install ScraperFC\n```\n\n----------------------------------------\n\nTITLE: Handling InvalidYearException in ScraperFC\nDESCRIPTION: When an invalid year argument is provided to any ScraperFC module, an InvalidYearException is raised. The error printout includes a list of valid years for the module.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/year_parameter.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    # ScraperFC module call with invalid year\nexcept InvalidYearException as e:\n    print(e)  # Will show list of valid years\n```\n\n----------------------------------------\n\nTITLE: Running Tox Package Management Tools for ScraperFC\nDESCRIPTION: Commands to run various package management tasks using Tox within the ScraperFC project. These commands test different aspects of the codebase, including running the test suite, building documentation, creating distributables, linting the code, and performing type checking.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n* Test suite: ``tox -r``\n* Build docs: ``tox -r -e docs``\n* Build distributables: ``tox -r -e build``\n* Code linter: ``tox -r -e lint``\n* Typecheck: ``tox -r -e typecheck``\n```\n\n----------------------------------------\n\nTITLE: Using Sphinx automodule directive for FBref documentation\nDESCRIPTION: This restructuredtext snippet configures Sphinx to automatically generate documentation for the ScraperFC.fbref module. It includes all members, undocumented members, and inheritance information.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/fbref.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: ScraperFC.fbref\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Generating Transfermarkt Module Documentation with Sphinx\nDESCRIPTION: This reStructuredText snippet configures Sphinx to automatically generate comprehensive documentation for the ScraperFC.transfermarkt module. It includes all members, undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/transfermarkt.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ScraperFC.transfermarkt\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for ClubElo Documentation\nDESCRIPTION: This is a reStructuredText directive for Sphinx documentation that configures automatic documentation generation for the ScraperFC.clubelo module. The directive includes all members and undocumented members, and shows inheritance relationships.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/clubelo.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: ScraperFC.clubelo\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Capology Module\nDESCRIPTION: RST directive for auto-generating documentation from the ScraperFC.capology module. Includes configuration to show all members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/capology.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n========\nCapology\n========\n\n.. automodule:: ScraperFC.capology\n   :members:\n   :undoc-members:\n   :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Root Structure in RST\nDESCRIPTION: Base configuration for Sphinx documentation using reStructuredText (RST) format. Includes toctree directive for organizing documentation hierarchy and standard Sphinx index references.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Contents:\n\n   getting_started.rst\n   code_examples.rst\n   apidocumentation.rst\n   contributing.rst\n   year_parameter.rst\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with reStructuredText\nDESCRIPTION: Sets up the documentation structure using reStructuredText directives for a toctree with code examples. Includes a reference label and configuration for displaying example notebooks.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/code_examples.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _code-examples-reference:\n.. toctree::\n   :maxdepth: 1\n   :caption: Code Examples:\n\n   example <example.ipynb>\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for API Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents (toctree) for the API documentation. It specifies a maximum depth of 1 and lists various module files to be included in the documentation.\nSOURCE: https://github.com/oseymour/scraperfc.git/blob/main/docs/source/apidocumentation.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 1\n   :caption: Modules:\n\n   capology.rst\n   clubelo.rst\n   fbref.rst\n   fivethirtyeight.rst\n   sofascore.rst\n   transfermarkt.rst\n   understat.rst\n   utils.rst\n```"
  }
]