[
  {
    "owner": "novuhq",
    "repo": "docs",
    "content": "TITLE: Basic Usage of Inbox Component in React\nDESCRIPTION: This snippet demonstrates the basic implementation of the Novu Inbox component in a React application. It requires an application identifier and subscriber ID to function properly.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\" />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Type-Safe Workflow Payloads with Novu Framework\nDESCRIPTION: This example demonstrates how to define a workflow with type-safe payload using the Novu Framework. The code creates a 'new-signup' workflow that sends an email with personalized content based on the payload data. The payloadSchema defines the expected structure, enabling TypeScript to provide type safety for the payload object.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/overview.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nconst myWorkflow = workflow(\n  'new-signup',\n  async ({ step, payload }) => {\n    await step.email('send-email', () => {\n      return {\n        subject: 'Hello World',\n        // The payload object here is type-safe\n        body: `Hi ${payload.name}, welcome to our platform!`,\n      };\n    });\n  },\n  {\n    payloadSchema: { properties: { name: { type: 'string' } } },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Novu Events in Laravel\nDESCRIPTION: Example showing how to trigger notification events using both the Novu facade and helper function. Demonstrates sending custom variables and subscriber information.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/laravel.mdx#2025-04-11_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Novu\\Laravel\\Facades\\Novu;\n\n$response = Novu::triggerEvent([\n    'name' => '<WORKFLOW_TRIGGER_IDENTIFIER_FROM_DASHBOARD>',\n    'payload' => ['customVariables' => 'Hello'],\n    'to' => [\n        'subscriberId' => '<SUBSCRIBER_ID_FROM_DASHBOARD>',\n        'phone' => '07983887777'\n    ]\n])->toArray();\n\n// or you can use the novu() helper function like so:\nnovu()->triggerEvent([\n    'name' => '<WORKFLOW_TRIGGER_IDENTIFIER_FROM_DASHBOARD>',\n    'payload' => ['customVariables' => 'Hello'],\n    'to' => [\n        'subscriberId' => '<SUBSCRIBER_ID_FROM_DASHBOARD>',\n        'phone' => '07983887777'\n    ]\n])->toArray();\n```\n\n----------------------------------------\n\nTITLE: Building a Multi-Step Notification Workflow with Novu Framework\nDESCRIPTION: A complex workflow that includes an initial email, a one-week delay, and a conditional follow-up in-app notification. The example showcases delay steps, skip conditions, control schemas for no-code editing, and comprehensive payload validation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/introduction.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nconst myWorkflow = workflow(\n  'new-signup',\n  async ({ step, payload }) => {\n    await step.email('send-email', async () => {\n      const user = await db.getUser(payload.userId);\n      return {\n        subject: `Welcome to Acme ${user.productTier} tier, ${user.name}`,\n        body: 'We look forward to helping you achieve mission.',\n      };\n    });\n\n    await step.delay('onboarding-follow-up', async () => ({\n      amount: 1,\n      unit: 'weeks',\n    }));\n\n    await step.inApp(\n      'onboarding-follow-up',\n      async (controls) => {\n        const user = await db.getUser(payload.userId);\n        return {\n          body: `Hey ${user.name}! How do you like the product? Let us know <a href=\"${controls.feedbackUrl}\">here</a> if you have any questions.`,\n        };\n      },\n      {\n        skip: () => !payload.shouldFollowUp,\n        controlSchema: {\n          type: 'object',\n          properties: {\n            feedbackUrl: {\n              type: 'string',\n              format: 'uri',\n              default: 'https://acme.com/feedback',\n            },\n          },\n          required: ['feedbackUrl'],\n          additionalProperties: false,\n        } as const,\n      }\n    );\n  },\n  {\n    payloadSchema: {\n      type: 'object',\n      properties: {\n        userId: { type: 'string' },\n        shouldFollowUp: { type: 'boolean', default: true },\n      },\n      required: ['userId', 'shouldFollowUp'],\n      additionalProperties: false,\n    } as const,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Notification Center with Inbox Component in React\nDESCRIPTION: Example of how to use the Inbox component from @novu/react to create a notification center. This code shows basic implementation with required props including application identifier, subscriber ID, and backend URLs. It also demonstrates how to handle notification clicks.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from \"@novu/react\";\n\nfunction NotificationCenter() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"USER_ID\"\n      backendUrl=\"https://api.novu.co\"\n      socketUrl=\"https://ws.novu.co\"\n      placement=\"right\"\n      placementOffset={10}\n      onNotificationClick={(notification) => {\n        // Handle notification click\n        console.log(notification);\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Novu Workflow via API\nDESCRIPTION: This example shows how to make an API call to trigger a Novu workflow event. The request includes the workflow trigger identifier, subscriber ID, and payload data needed for the notification process.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/workflows.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.novu.co/v1/events/trigger \\\n  -H \"Authorization: ApiKey <NOVU_SECRET_KEY>\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"<WORKFLOW_TRIGGER_IDENTIFIER>\",\n    \"to\": {\n      \"subscriberId\": \"<UNIQUE_SUBSCRIBER_IDENTIFIER>\",\n    },\n    \"payload\": {}\n  }'\n```\n\n----------------------------------------\n\nTITLE: Triggering WhatsApp Notification with Custom Template (TypeScript)\nDESCRIPTION: TypeScript code for triggering a WhatsApp notification using Novu with a custom template. It demonstrates how to specify the recipient, payload, and template overrides.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/whats-app.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnovu.trigger('workflow-id', {\n  to: {\n    subscriberId: 'SUBSCRIBER_ID',\n    phone: '+11111111111',\n  },\n  payload: {},\n  overrides: {\n    chat: {\n      template: {\n        name: 'template_name',\n        language: {\n          code: 'en_US',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Payload Schema Validation with React Email in Novu Framework\nDESCRIPTION: An example demonstrating how to use payload schema validation with React-based email templates. The workflow sends an email notification for a comment on a post, with validation for the post_id, author_name, and comment length.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/introduction.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\nimport { render } from 'react-email';\nimport { ReactEmailContent } from './ReactEmailContent';\n\nworkflow(\n  'comment-on-post',\n  async ({ step, payload }) => {\n    await step.email('send-email', async () => {\n      return {\n        subject: `You have a new comment from: ${payload.author_name}`,\n        body: render(<ReactEmailContent comment={payload.comment} />),\n      };\n    });\n  },\n  {\n    payloadSchema: {\n      type: 'object',\n      properties: {\n        post_id: { type: 'number' },\n        author_name: { type: 'string' },\n        comment: { type: 'string', maxLength: 200 },\n      },\n      required: ['post_id', 'comment'],\n      additionalProperties: false,\n    } as const,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Sample Novu Notification Object Structure in JSON\nDESCRIPTION: This sample JSON object illustrates the structure of a Novu notification, showing all key components including identification fields, transaction tracking, channel specification, subscriber details, and template information. The structure provides complete visibility into the notification lifecycle.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/notifications.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"_id\": \"<string>\",\n    \"_environmentId\": \"<string>\",\n    \"_organizationId\": \"<string>\",\n    \"transactionId\": \"<string>\",\n    \"createdAt\": \"<string>\",\n    \"channels\": \"in_app\",\n    \"subscriber\": {\n      \"firstName\": \"<string>\",\n      \"_id\": \"<string>\",\n      \"lastName\": \"<string>\",\n      \"email\": \"<string>\",\n      \"phone\": \"<string>\"\n    },\n    \"template\": {\n      \"_id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"triggers\": [\"<string>\"]\n    },\n    \"jobs\": [\"<string>\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Rendering in Inbox Component\nDESCRIPTION: Example of completely customizing the look of notification items using the renderNotification prop. This allows for full control over how each notification is displayed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      renderNotification={(notification) => (\n        <div>\n          <h3>{notification.subject}</h3>\n          <p>{notification.body}</p>\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Just-in-Time Data Fetching in Novu Framework Workflow\nDESCRIPTION: An example workflow that demonstrates fetching additional user data during workflow execution. It retrieves user information from a database using the provided userId in the payload to personalize the email content.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/introduction.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nconst myWorkflow = workflow(\n  'new-signup',\n  async ({ step, payload }) => {\n    await step.email('send-email', async () => {\n      const user = await db.getUser(payload.userId);\n      return {\n        subject: `Welcome to Acme ${user.productTier} tier, ${user.name}`,\n        body: 'We look forward to helping you achieve mission.',\n      };\n    });\n  },\n  { payloadSchema: z.object({ userId: z.string() }) }\n);\n```\n\n----------------------------------------\n\nTITLE: Triggering Onesignal Push Notification with Novu SDK\nDESCRIPTION: This TypeScript code demonstrates how to trigger a push notification using the Novu SDK with Onesignal integration. It includes options for customizing the notification payload, subtitle, sound, and other platform-specific settings.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/onesignal.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {\n    abc: 'def', // If the notification is a data notification, the payload will be sent as the data\n  },\n  overrides: {\n    subtitle: 'This is subtitle value',\n    mutableContent: 'Mutable content value',\n    // for android notification categories\n    channelId: 'category_id',\n    // for ios notification categories\n    categoryId: 'Category id',\n    // same value is used for all sizes and browsers\n    icon: 'https://image.com/icon.png',\n    // used for both android and ios\n    sound: 'sound file url',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Notifications List with Infinite Scrolling in React\nDESCRIPTION: React component that displays a list of notifications with infinite scrolling functionality using the useNotifications hook from @novu/react.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/hooks.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNotifications } from '@novu/react';\n\nfunction NotificationsList() {\n  const {\n    notifications,\n    error,\n    isLoading,\n    isFetching,\n    refetch,\n    fetchMore,\n    hasMore,\n  } = useNotifications();\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      {notifications.map((notification) => (\n        <NotificationItem\n          key={notification.id}\n          notification={notification}\n        />\n      ))}\n      {hasMore && (\n        <button onClick={fetchMore}>Load More</button>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Digest Event Processing with Component Rendering\nDESCRIPTION: Shows advanced usage of digest events including mapping event data to custom activities and rendering a React component for email content. Implements hourly digest with custom activity processing.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/digest.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ActivityDigestEmail } from './ActivityDigestEmail';\n\nconst { events } = await step.digest('activity-digest', async () => {\n  return {\n    amount: 1,\n    unit: 'hours',\n  };\n});\n\nawait step.email('digest-notification', async () => {\n  const activities = events.map((event) => ({\n    type: event.payload.type,\n    user: event.payload.userName,\n    action: event.payload.action,\n  }));\n\n  return {\n    subject: `Activity Summary (${events.length} updates)`,\n    body: render(<ActivityDigestEmail activities={activities} />),\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Action Button Clicks in Inbox Component\nDESCRIPTION: Implementation showing how to handle primary and secondary action button clicks in notifications with custom event handlers. This allows for custom behavior when users interact with action buttons.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onPrimaryActionClick={(notification) => {\n        // your logic to handle primary action click\n      }}\n      onSecondaryActionClick={(notification) => {\n        // your logic to handle secondary action click\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notification Event Listener with useNovu in React Native\nDESCRIPTION: This snippet demonstrates how to use the useNovu hook to set up an event listener for incoming notifications. It shows how to add and remove the listener using the useEffect hook.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-novu.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNovu } from '@novu/react-native';\n\nconst NotificationToast = () => {\n  const novu = useNovu();\n\n  useEffect(() => {\n    const listener = ({ result: notification }) => {\n      // Show a toast notification\n    };\n\n    novu.on('notifications.notification_received', listener);\n\n    return () => {\n      novu.off('notifications.notification_received', listener);\n    };\n  }, [novu]);\n\n  return null;\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing and Processing Digested Events in TSX\nDESCRIPTION: This snippet shows how to access the array of digested events and use them in subsequent workflow steps. It demonstrates retrieving event count and sending a summary email after collecting events for 3 days.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/digest.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { events } = await step.digest('digest-3-days', async () => {\n  return {\n    unit: 'days', // 'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months'\n    amount: 3, // the number of units to digest events for\n  };\n});\n\nawait step.email('send-email', async () => {\n  const eventCount = events.length;\n\n  return {\n    subject: 'Digest Email',\n    body: `You have ${eventCount} new events`,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Data in Notification Rendering\nDESCRIPTION: Example showing how to access and display custom data embedded in notifications. The data object can include static or dynamic values that provide context for the notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\n<Inbox\n  applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n  subscriberId=\"YOUR_SUBSCRIBER_ID\"\n  renderNotification={(notification) => (\n    <div>\n      <p>{notification.data?.customKey}</p>\n      <p>{notification.data?.dataId}</p>\n    </div>\n  )}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Real-time Notification Listeners\nDESCRIPTION: Configure event listeners for real-time notification updates and unread count changes using the Novu SDK\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/headless.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nnovu.on(\"notifications.notification_received\", (data) => {\n  console.log(\"new notification =>\", data);\n});\n\nnovu.on(\"notifications.unread_count_changed\", (data) => {\n  console.log(\"new unread notifications count =>\", data);\n});\n```\n\n----------------------------------------\n\nTITLE: Downcasing Email Addresses with Liquid Filter\nDESCRIPTION: This example shows how to use the 'downcase' Liquid filter for consistent email formatting in a confirmation notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_3\n\nLANGUAGE: liquid\nCODE:\n```\nHi {{ subscriber.email | downcase }},\nWe've sent a confirmation to your inbox.\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Notification Workflow in TypeScript with Novu Framework\nDESCRIPTION: A simple example of a workflow that sends an email after a one-day delay. It demonstrates the basic structure of a Novu workflow including a delay Action step and an email Channel step.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/introduction.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nworkflow('sample-workflow', async (step) => {\n  await step.delay('delay', async () => {\n    return {\n      unit: 'days',\n      amount: 1,\n    };\n  });\n\n  await step.email('email-step', async () => {\n    return {\n      subject: 'Welcome to Novu',\n      body: 'Hello, welcome to Novu!',\n    };\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Individual Notifications with useNovu in React Native\nDESCRIPTION: This snippet shows how to use the useNovu hook to manage individual notifications, including marking a single notification as read and archiving it. It demonstrates the use of notification-specific methods provided by the Novu client.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-novu.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, Button } from 'react-native';\n\nfunction NotificationItem({ notification }) {\n  const { novu } = useNovu();\n\n  const markAsRead = async () => {\n    await novu.notifications.read(notification.id);\n  };\n\n  const archive = async () => {\n    await novu.notifications.archive(notification.id);\n  };\n\n  return (\n    <View>\n      <Text>{notification.content}</Text>\n      <Button title=\"Mark as Read\" onPress={markAsRead} />\n      <Button title=\"Archive\" onPress={archive} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Novu SDK Usage in EU Region\nDESCRIPTION: Show how to use the Novu SDK to trigger a notification event in the EU region. Includes setting up the Novu client with the EU server URL and sending a trigger event with subscriber details and payload.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/python.mdx#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\nserver_url=\"https://eu.api.novu.co\",\nsecret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.trigger(trigger_event_request_dto=novu_py.TriggerEventRequestDto(\n        workflow_id=\"workflow_identifier\",\n        to={\n            \"subscriber_id\": \"subscriber_unique_identifier\",\n        },\n        payload={\n            \"comment_id\": \"string\",\n            \"post\": {\n                \"text\": \"string\",\n            },\n        },\n        overrides={\n          \"email\": {\n            \"bcc\": \"no-reply@novu.co\"\n          }\n        },\n    ))\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Implementing Zod Schemas in Novu Workflow\nDESCRIPTION: Example of how to use Zod to define controlSchema for steps and payloadSchema for the workflow. The code shows how to create a workflow that sends an email with schemas for validation and default values.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/zod.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { workflow } from '@novu/framework';\nimport { z } from 'zod';\n\nexport const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {\n    await step.email('send-email', async (controls) => {\n        return {\n            subject: controls.subject,\n            body: 'Hello World',\n        };\n    },\n    {\n        controlSchema: z.object({\n            subject: z.string().default('A Successful Test on Novu from {{userName}}'),\n        }),\n    });\n}, {\n    payloadSchema: z.object({\n        userName: z.string().default('John Doe'),\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Email Notification with Novu\nDESCRIPTION: Demonstrates how to send a basic email notification using Novu's step.email method. The example shows setting up a simple email with a subject and body message.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/email-channel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.email('email', async () => {\n  return {\n    subject: 'You received a message',\n    body: 'A new post has been created',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Notifications Component in React\nDESCRIPTION: Demonstrates how to use the Notifications component to display notifications as a list without the Bell and Popover. Requires importing Inbox and Notifications from @novu/react and providing applicationIdentifier and subscriberId.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/notifications.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Notifications } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Notifications />\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending In-App Notification with Custom Actions in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the inApp step to send a notification with a subject, body, avatar, redirect URL, and custom actions. It also shows how to include custom data with the notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/inApp.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.inApp('inbox', async () => {\n  return {\n    subject: 'Welcome to Acme!',\n    body: 'We are excited to have you on board.',\n    avatar: 'https://acme.com/avatar.png',\n    redirect: {\n      url: 'https://acme.com/welcome',\n      target: '_blank',\n    },\n    primaryAction: {\n      label: 'Get Started',\n      redirect: {\n        url: 'https://acme.com/get-started',\n        target: '_self',\n      },\n    },\n    secondaryAction: {\n      label: 'Learn More',\n      redirect: {\n        url: 'https://acme.com/learn-more',\n        target: '_self',\n      },\n    },\n    data: {\n      customData: 'customValue',\n      text: payload.text,\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Real-time Notification Events in TypeScript\nDESCRIPTION: Sets up event listeners for receiving new notifications and unread count changes in real-time.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nnovu.on('notifications.notification_received', (data) => {\n  console.log('New notification:', data);\n});\n\nnovu.on('notifications.unread_count_changed', (data) => {\n  console.log('Unread count:', data);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Webhook Endpoint in Next.js\nDESCRIPTION: Implementing a webhook endpoint for Stripe in a Next.js application, including event verification and Novu workflow triggering.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Stripe from \"stripe\";\nimport { NextResponse, NextRequest } from \"next/server\";\nimport { triggerWorkflow } from \"@/app/utils/novu\";\n\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!);\n\nconst supportedEvents = [\n  \"customer.subscription.created\",\n  \"customer.subscription.updated\",\n];\n\nexport async function POST(request: NextRequest) {\n  const webhookPayload = await request.text();\n  const response = JSON.parse(webhookPayload);\n\n  const signature = request.headers.get(\"Stripe-Signature\");\n\n  try {\n    let event = stripe.webhooks.constructEvent(\n      webhookPayload,\n      signature!,\n      process.env.STRIPE_WEBHOOK_SECRET!\n    );\n\n    if (supportedEvents.includes(event.type)) {\n      const workflow = event.type.replaceAll(\".\", \"-\");\n      const subscriber = await buildSubscriberData(response);\n      const payload = await payloadBuilder(response);\n      console.log(\n        \"Triggering workflow:\", workflow,\n        \"Subscriber:\", subscriber,\n        \"Payload:\", payload\n      );\n      return await triggerWorkflow(workflow, subscriber, payload);\n    }\n\n    return NextResponse.json({ status: \"sucess\", event: event.type, response: response });\n  } catch (error) {\n    return NextResponse.json({ status: \"Failed\", error });\n  }\n}\n\n\n\nasync function buildSubscriberData(response: any) {\n  const customer = await stripe.customers.retrieve(response.data.object.customer);\n  console.log(\"Customer\", customer);\n  \n  if ('deleted' in customer) {\n    throw new Error('Customer has been deleted');\n  }\n  \n  // Split the full name into first and last name\n  const [firstName = '', lastName = ''] = (customer.name || '').split(' ');\n  \n  return {\n    subscriberId: customer.id,\n    email: customer.email || 'test2@test.com',\n    firstName: firstName || '',\n    lastName: lastName || '',\n    phone: customer?.phone || '',\n    locale: customer?.preferred_locales?.[0] || 'en', // Use first preferred locale or default to 'en'\n    avatar: '', // Stripe customer doesn't have avatar\n    data: {\n      stripeCustomerId: customer.id,\n    },\n  };\n}\n\nasync function payloadBuilder(response: any) {\n  const webhookData = JSON.parse(response);\n  return webhookData;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Step in Novu Framework\nDESCRIPTION: Basic implementation of a custom step that returns product information. The step includes output schema validation to enforce the structure of the returned data.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/custom.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst stepResult = await step.custom(\n  'custom-step',\n  async () => {\n    return {\n      item_name: 'A product name',\n      item_price: 100,\n    };\n  },\n  {\n    outputSchema: {\n      type: 'object',\n      properties: {\n        item_name: { type: 'string' },\n        item_price: { type: 'number' },\n      },\n      required: ['item_name', 'item_price'],\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox with Remix Router\nDESCRIPTION: Implementation of the Novu Inbox component with Remix, using the useNavigate hook to handle navigation when notifications are clicked.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport { useNavigate } from '@remix-run/react';\n\nfunction Novu() {\n  const navigate = useNavigate();\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      routerPush={(path: string) => navigate(path)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Secure Novu Inbox Component in React\nDESCRIPTION: Frontend implementation showing how to use the Novu Inbox component with HMAC authentication. Demonstrates passing the application identifier, subscriber ID, and HMAC hash to secure the notification feed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/production.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\n<Inbox\n  applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n  subscriberId=\"YOUR_SUBSCRIBER_ID\"\n  subscriberHash=\"YOUR_SUBSCRIBER_ID_HASH_VALUE\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Triggering a Workflow to a Topic in Novu using TypeScript\nDESCRIPTION: This code demonstrates how to trigger a workflow to all subscribers in a topic using the Novu SDK. It requires the workflow trigger identifier and topic key.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/topics.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst topicKey = 'posts:comment:12345';\n\nawait novu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: [{ type: 'Topic', topicKey: topicKey }],\n  payload: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Side Menu Inbox Layout in React\nDESCRIPTION: Implementation of a side menu Inbox layout using Novu's React components. This layout conditionally renders the Notifications component as a side panel based on a showSideMenu flag.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Notifications } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      {showSideMenu && <Notifications />}\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Payload Structure for Push Webhook\nDESCRIPTION: This JSON example demonstrates the structure of the payload that Novu sends to your webhook URL when triggering a push notification. It includes notification content, subscriber information, and any custom data passed in the notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/push-webhook.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": [\"subscriber-token-for-push-webhook-provider\"],\n  \"title\": \"Push Webhook message title\",\n  \"content\": \"push Webhook content body\",\n  \"overrides\": {\n    \"data\": {\n      \"custom_message\": \"this is custom message from payload push webhook demo\"\n    }\n  },\n  \"payload\": {\n    \"custom_message\": \"this is custom message from payload push webhook demo\",\n    \"__source\": \"test-workflow\",\n    \"subscriber\": {\n      // subscriber fields\n      \"_id\": \"65c0d71c0959a38e8857b131\",\n      \"_organizationId\": \"organizationId\",\n      \"_environmentId\": \"environmentId\",\n      \"firstName\": \"Pawan\",\n      \"lastName\": \"Jain\",\n      \"phone\": \"+123456789\",\n      \"subscriberId\": \"push-webhook-demo-subscriber-id\",\n      \"email\": \"pawan+push+web+hook+demo@domain.com\",\n      \"channels\": [\n        {\n          \"credentials\": {\n            \"deviceTokens\": [\"subscriber-token-for-push-webhook-provider\"]\n          },\n          \"_integrationId\": \"integrationId\",\n          \"providerId\": \"push-webhook\"\n        }\n      ],\n      \"data\": {\n        // custom data field of subscriber\n        \"isDeveloper\": \"true\"\n      },\n      \"deleted\": false,\n      \"createdAt\": \"2024-02-05T12:39:56.379Z\",\n      \"updatedAt\": \"2024-02-05T12:54:08.684Z\",\n      \"__v\": 0,\n      \"id\": \"65c0d71c0959a38e8857b131\"\n    },\n    \"step\": {\n      // digest variables\n      \"digest\": false,\n      \"events\": [],\n      \"total_count\": 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Code with Output Schema in Workflow\nDESCRIPTION: Example demonstrating how to fetch user data using a custom step and utilize the result in a subsequent email step. The code includes output schema validation for TypeScript type inference and data validation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/custom.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst result = await step.custom(\n  'fetch-user-data',\n  async () => {\n    const response = await fetch('https://api.example.com/users/123');\n    const userData = await response.json();\n\n    return {\n      name: userData.name,\n      email: userData.email,\n      preferences: userData.preferences,\n    };\n  },\n  {\n    outputSchema: {\n      type: 'object',\n      properties: {\n        name: { type: 'string' },\n        email: { type: 'string' },\n        preferences: { type: 'object' },\n      },\n      required: ['name', 'email'],\n    },\n  }\n);\n\n// Use the result in a subsequent step\nawait step.email('welcome-email', async () => {\n  return {\n    subject: `Welcome ${result.name}!`,\n    body: `We'll send updates to ${result.email}`,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Individual Notification Management with useNovu\nDESCRIPTION: Shows how to manage individual notifications using the useNovu hook, including marking notifications as read/unread and archiving them.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-novu.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Notification } from \"@novu/js\";\nimport { useNovu } from \"@novu/react\";\n\nfunction NotificationItem({ notification }: { notification: Notification }) {\n  const novu = useNovu();\n\n  const markAsRead = async () => {\n    try {\n      await novu.notifications.read({ notificationId: notification.id });\n      console.log(\"Notification marked as read\");\n    } catch (error) {\n      console.error(\"Failed to mark as read:\", error);\n    }\n  };\n\n  const markAsUnread = async () => {\n    try {\n      await novu.notifications.unread({ notificationId: notification.id });\n      console.log(\"Notification marked as unread\");\n    } catch (error) {\n      console.error(\"Failed to mark as unread:\", error);\n    }\n  };\n\n  const archive = async () => {\n    try {\n      await novu.notifications.archive({ notificationId: notification.id });\n      console.log(\"Notification archived\");\n    } catch (error) {\n      console.error(\"Failed to archive:\", error);\n    }\n  };\n\n  return (\n    <div className=\"p-4 border rounded-lg\">\n      <h3 className=\"font-medium\">{notification.subject}</h3>\n      <p>{notification.body}</p>\n      <div className=\"flex gap-2 mt-2\">\n        <button\n          onClick={markAsRead}\n          className=\"px-2 py-1 text-sm bg-blue-50 text-blue-600 rounded\"\n          disabled={notification.isRead}\n        >\n          Mark as Read\n        </button>\n        <button\n          onClick={markAsUnread}\n          className=\"px-2 py-1 text-sm bg-blue-50 text-blue-600 rounded\"\n          disabled={!notification.isRead}\n        >\n          Mark as Unread\n        </button>\n        <button\n          onClick={archive}\n          className=\"px-2 py-1 text-sm bg-gray-50 text-gray-600 rounded\"\n          disabled={notification.isArchived}\n        >\n          Archive\n        </button>\n      </div>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Implementing Novu Workflow with React Email\nDESCRIPTION: TypeScript implementation of a Novu workflow that uses the React Email template. Includes payload validation using Zod schema and email step configuration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/react-email.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { workflow } from '@novu/framework';\nimport { renderEmail } from './emails/test-email';\nimport { z } from 'zod';\n\nexport const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {\n    await step.email('send-email', async (controls) => {\n        return {\n            subject: controls.subject,\n            body: renderEmail(payload.userName),\n        };\n    },\n    {\n        controlSchema: z.object({\n            subject: z.string().default('A Successful Test on Novu from {{userName}}'),\n        }),\n    });\n}, {\n    payloadSchema: z.object({\n        userName: z.string().default('John Doe'),\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Workflow Interface Definition (TypeScript)\nDESCRIPTION: This snippet shows the TypeScript interface for the workflow function in the Novu Framework. It includes the function signature and parameter types for creating a workflow.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/workflow.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nworkflow(workflowId, handler, options);\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox with React Router\nDESCRIPTION: Implementation of the Novu Inbox component with React Router, using the useNavigate hook to handle navigation when notifications are clicked.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport { useNavigate } from 'react-router-dom';\n\nfunction Novu() {\n  const navigate = useNavigate();\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      routerPush={(path: string) => navigate(path)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useCounts Hook in React Component\nDESCRIPTION: This example demonstrates how to use the useCounts hook in a React component to fetch and display unread notification counts. It applies a filter for unread notifications and renders a bell icon with a badge showing the unread count.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-counts.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCounts } from \"@novu/react\";\n\nfunction BellButton() {\n  const { counts } = useCounts({ filters: [{ read: false }] });\n  const unreadCount = counts?.[0].count ?? 0;\n\n  return (\n    <button>\n      <BellIcon />\n      {unreadCount > 0 && <span className=\"badge\">{unreadCount}</span>}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Pusher Beams Notification with Novu SDK (TypeScript)\nDESCRIPTION: This TypeScript example shows how to trigger a push notification using Novu's SDK with Pusher Beams integration. It requires the Novu secret key, workflow trigger identifier, and subscriber ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/pusher-beams.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {\n    custom_data: 'custom_data', // the payload will be sent as notification data object. Cannot contain the key \"pusher\"\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NovuProvider for EU Region in React Native\nDESCRIPTION: Implementation of NovuProvider with EU-specific backend and socket URLs. This setup includes additional configuration for European region deployments.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/novu-provider.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react-native';\n\nfunction App() {\n  return (\n    <NovuProvider\n      subscriberId=\"SUBSCRIBER_ID\"\n      applicationIdentifier=\"APPLICATION_IDENTIFIER\"\n      backendUrl=\"https://eu.api.novu.co\"\n      socketUrl=\"https://eu.ws.novu.co\"\n    >\n      {/* Your app components */}\n    </NovuProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hydrating User Data in Workflow with TypeScript\nDESCRIPTION: This example shows how to use @novu/framework to define a workflow that hydrates user data from a database during execution. It demonstrates fetching real-time user data for a welcome email.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/subscribers.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { workflow } from '@novu/framework';\nimport { userDb } from '../db/userDb';\n\nexport const welcomeEmail = workflow('welcome-email', async ({ step, subscriber }) => {\n  await step.delay('delay', () => ({ amount: 1, unit: 'hours' }));\n\n  await step.email('send-email', async (controls) => {\n    // Fetch user data from your database in real-time to\n    // ensure up-to-date information\n    const user = await userDb.findById(subscriber.subscriberId);\n\n    return {\n      subject: `Welcome, ${user.firstName}`,\n      body: 'Welcome to our platform!',\n    };\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Signup Email Workflow in TypeScript with Novu Framework\nDESCRIPTION: A bare-bones example of a workflow that sends an email notification in response to a new user signup. It defines a payload schema requiring a name parameter that is used in the email subject.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/introduction.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nconst myWorkflow = workflow(\n  'new-signup',\n  async ({ step, payload }) => {\n    await step.email('send-email', async () => {\n      return {\n        subject: `Welcome to Acme, ${payload.name}`,\n        body: 'We look forward to helping you achieve mission.',\n      };\n    });\n  },\n  { payloadSchema: z.object({ name: z.string() }) }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Controlled Popover State for Inbox\nDESCRIPTION: Example of controlling the Inbox component's open state externally using React state. This allows for custom triggers like buttons to toggle the notification panel.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport { useState } from 'react';\n\nfunction Novu() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <>\n      <Inbox\n        applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n        subscriberId=\"YOUR_SUBSCRIBER_ID\"\n        open={open}\n      />\n      <button onClick={() => setOpen(!open)}>Toggle Inbox</button>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic InboxContent Implementation with Custom Popover in React\nDESCRIPTION: Demonstrates the basic setup of InboxContent component within a custom popover structure. Uses the Bell component as trigger and renders notifications in a styled popover content area.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox-content.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bell, Inbox, InboxContent } from '@novu/react';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\n\nexport default function CustomPopoverPage() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Popover>\n        <PopoverTrigger>\n          <Bell />\n        </PopoverTrigger>\n        <PopoverContent className=\"h-[600px] w-[400px] p-0\">\n          <InboxContent />\n        </PopoverContent>\n      </Popover>\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Inbox UI with InboxContent\nDESCRIPTION: Example showing how to create a custom notification inbox interface using the InboxContent component. Includes handlers for notification clicks and primary actions.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.model.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InboxContent } from \"@novu/react\";\n\nfunction CustomInbox() {\n  return (\n    <div className=\"custom-inbox-wrapper\">\n      <InboxContent\n        onNotificationClick={(notification) => {\n          // Handle notification click\n          console.log(notification);\n        }}\n        onPrimaryActionClick={(notification) => {\n          // Handle primary action click\n          console.log(notification);\n        }}\n        hideNav={false}\n        renderNotification={({ body, createdAt }) => (\n          <div className=\"notification-item\">\n            <p>{body}</p>\n            <time>{new Date(createdAt).toLocaleDateString()}</time>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Push Notifications with the push step in TSX\nDESCRIPTION: This code demonstrates how to use the push step to send a notification with a title, body, and additional data. The example creates a notification for a new message with sender information included in the data object.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/push.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.push('new-message', async () => {\n  return {\n    title: 'New Message',\n    body: 'You have received a new message from John',\n    data: {\n      messageId: '123',\n      senderId: '456',\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Sending FCM Web Push Notification with Relative Link (Node.js)\nDESCRIPTION: This Node.js code snippet shows how to send an FCM web push notification with a relative link using the Novu SDK. It demonstrates the use of the webPush override to set a relative URL for the notification link.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/fcm.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu\n} from \"@novu/node\";\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nnovu.trigger(\"<WORKFLOW_TRIGGER_IDENTIFIER>\", {\n  to: {\n    subscriberId: \"<SUBSCRIBER_ID>\",\n  },\n  payload: {\n    abc: \"def\", // If the notification is a data notification, the payload will be sent as the data\n  },\n  overrides: {\n    fcm: {\n      webPush: {\n        fcmOptions: {\n          link: \"/foo\",\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Digest Step Implementation in TSX\nDESCRIPTION: Demonstrates basic usage of digest step to collect daily events and send an email summary. Shows how to configure digest period and create a simple email notification with the aggregated events.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/digest.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { events } = await step.digest('daily-summary', async () => {\n  return {\n    amount: 1,\n    unit: 'days',\n  };\n});\n\nawait step.email('digest-email', async () => {\n  return {\n    subject: `Daily Summary (${events.length} updates)`,\n    body: `You have ${events.length} new updates today`,\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu Framework Client with Next.js\nDESCRIPTION: Demonstrates how to initialize and configure the Novu Framework Client with custom settings for secret key and authentication. Shows integration with Next.js routing handlers and workflow registration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/client.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client as NovuFrameworkClient } from '@novu/framework';\nimport { serve } from '@novu/framework/next';\nimport { passwordResetWorkflow } from './workflows';\n\nexport const { GET, POST, OPTIONS } = serve({\n  client: new NovuFrameworkClient({\n    secretKey: process.env.NOVU_SECRET_KEY,\n    strictAuthentication: false,\n  }),\n  workflows: [\n    /* all workflows */\n    passwordResetWorkflow,\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Sending a welcome email notification using the email step in TypeScript/React\nDESCRIPTION: This code example demonstrates how to use the email step to send a welcome email notification. It returns an object containing the required subject and body properties for the email.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/email.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.email('welcome-email', async () => {\n  return {\n    subject: 'Welcome to Our Platform',\n    body: \"Hello and welcome! We're excited to have you on board.\",\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Individual Notification Item in React\nDESCRIPTION: React component for rendering individual notification items with read and archive functionality.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/hooks.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst NotificationItem = ({ notification }) => {\n  return (\n    <div>\n      {notification.isRead && <span className=\"dot-indicator\" />}\n      <h3>{notification.subject}</h3>\n      <p>{notification.body}</p>\n      <button onClick={() => notification.read()}>Read</button>\n      <button onClick={() => notification.archive()}>Archive</button>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Novu .NET SDK\nDESCRIPTION: Complete example showing how to configure the Novu client, create an event payload class, and trigger a notification event. Demonstrates proper usage of the SDK including configuration, model definition, and event triggering.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/dotnet.mdx#2025-04-11_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Novu.DTO;\nusing Novu.Models;\nusing Novu;\n...\n\nvar novuConfiguration = new NovuClientConfiguration\n{\n    // Defaults to https://api.novu.co/v1\n    Url = \"https://novu-api.my-domain.com/v1\",\n    ApiKey = \"12345\",\n};\n\nvar novu = new NovuClient(novuConfiguration);\n\n// OnboardEventPayload.cs\npublic class OnboardEventPayload\n{\n  [JsonProperty(\"username\")]\n  public string Username { get; set; }\n\n  [JsonProperty(\"welcomeMessage\")]\n  public string WelcomeMessage { get; set; }\n}\n\n// MyFile.cs\nvar onboardingMessage = new OnboardEventPayload\n{\n  Username = \"jdoe\",\n  WelcomeMessage = \"Welcome to novu-dotnet\"\n};\n\nvar payload = new EventTriggerDataDto()\n{\n  EventName = \"onboarding\",\n  To = { SubscriberId = \"subscriberId\" },\n  Payload = onboardingMessage\n};\n\nvar trigger = await novu.Event.Trigger(payload);\n\nif (trigger.TriggerResponsePayloadDto.Acknowledged)\n{\n  Console.WriteLine(\"Trigger has been created.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Notifications List in TypeScript\nDESCRIPTION: Retrieves a list of notifications with specified filters such as limit, read status, archived status, and tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst notifications = await novu.notifications.list({\n  limit: 30,\n  read: false,\n  archived: false,\n  tags: ['tag1', 'tag2'],\n  offset: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Email Attachments with cURL\nDESCRIPTION: This cURL command demonstrates how to send email attachments using Novu's REST API. It shows the HTTP request structure for triggering a workflow with email attachments in base64 format.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X POST 'https://api.novu.co/v1/events/trigger' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <SECRET_KEY>' \\\n--data-raw '{\n    \"name\": \"workflow_trigger_identifier\",\n    \"to\": [\n        {\n            \"subscriberId\": \"subscriber_id\",\n            \"email\": \"email_address\"\n        }\n    ],\n    \"payload\": {\n        \"attachments\": [\n            {\n                \"file\": \"iVBORw0KGgoAAAANSUhEUgAAAAgAAAAIAQMAAAD+wSzIAAAABlBMVEX///+/v7+jQ3Y5AAAADklEQVQI12P4AIX8EAgALgAD/aNpbtEAAAAASUVORK5CYII\",\n                \"name\": \"transparent.png\",\n                \"mime\": \"image/png\"\n            },\n            {\n                \"file\": \"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAFUlEQVR42mNkYPhfz0AEYBxVSF+FAP5FDvcfRYWgAAAAAElFTkSuQmCC\",\n                \"name\": \"blue.png\",\n                \"mime\": \"image/png\"\n            }\n        ]\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Message Using Chat Step\nDESCRIPTION: Example showing how to send a basic message using the chat step function. The step takes a message body as input and sends it to the configured chat platform. No result object is returned from this operation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/chat.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.chat('chat', async () => {\n  return {\n    body: 'A new post has been created',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscriber Just-in-Time in Node.js\nDESCRIPTION: This snippet demonstrates how to create a subscriber on-the-fly while triggering a notification using the Novu API in Node.js. It includes subscriber details in the 'to' field of the trigger method.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/subscribers.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Novu } from '@novu/api';\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nawait novu.trigger({\n  workflowId: '<WORKFLOW_TRIGGER_IDENTIFIER>',\n  to: {\n    subscriberId: \"subscriber_unique_identifier\",\n    firstName: \"Albert\",\n    lastName: \"Einstein\",\n    email: \"albert@einstein.com\",\n    phone: \"+1234567890\",\n  },\n  payload: {\n    customVariable: 'variableValue',\n    organization: {\n      logo: 'https://organization.com/logo.png',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Notification Center without Bell Icon (New Implementation)\nDESCRIPTION: Example of how to display notifications as a list without the default bell icon using the new @novu/react package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Notifications } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APP_ID\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Notifications />\n    </Inbox>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Triggering APNS Notification with Basic Payload\nDESCRIPTION: Example showing how to trigger an APNS notification using Novu with a basic notification payload structure. Demonstrates setting title, body and custom data fields.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/apns.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {\n    abc: 'def', // If the notification is a data notification, the payload will be sent as the data\n  },\n  overrides: {\n    apns: {\n      payload: {\n        aps: {\n          notification: {\n            title: 'Test',\n            body: 'Test push',\n          },\n          data: {\n            key: 'value',\n          },\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Clerk Webhook Handler in Next.js with Novu Integration\nDESCRIPTION: A complete implementation of a webhook endpoint for Clerk authentication events in Next.js that maps events to Novu notification workflows. The code verifies webhook signatures, extracts user data, and triggers the appropriate Novu workflows based on event type, supporting various authentication events like user creation, login, and email actions.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/clerk.mdx#2025-04-11_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Webhook } from 'svix'\nimport { headers } from 'next/headers'\nimport { WebhookEvent, UserJSON } from '@clerk/nextjs/server'\nimport { triggerWorkflow } from '@/app/utils/novu'\n\n// Single source of truth for all supported Clerk events and their corresponding Novu workflows\nconst EVENT_TO_WORKFLOW_MAPPINGS = {\n    // Session events\n    'session.created': 'recent-login-v2',\n    \n    // User events\n    'user.created': 'user-created',\n    \n    // Email events\n    'email.created': {\n        'magic_link_sign_in': 'auth-magic-link-login',\n        'magic_link_sign_up': 'auth-magic-link-registration',\n        'magic_link_user_profile': 'profile-magic-link-update',\n        'organization_invitation': 'organization-invitation-v2',\n        'organization_invitation_accepted': 'org-member-joined',\n        'passkey_added': 'security-passkey-created',\n        'passkey_removed': 'security-passkey-deleted',\n        'password_changed': 'security-password-updated',\n        'password_removed': 'security-password-deleted',\n        'primary_email_address_changed': 'profile-email-updated',\n        'reset_password_code': 'reset-password-code-v2',\n        'verification_code': 'verification-code-v2',\n        'waitlist_confirmation': 'waitlist-signup-confirmed',\n        'waitlist_invitation': 'waitlist-access-granted',\n        'invitation': 'user-invitation'\n    }\n} as const;\n\nexport async function POST(request: Request) {\n    try {\n        const SIGNING_SECRET = process.env.SIGNING_SECRET\n        if (!SIGNING_SECRET) {\n            throw new Error('Please add SIGNING_SECRET from Clerk Dashboard to .env')\n        }\n\n        const webhook = new Webhook(SIGNING_SECRET)\n        const headerPayload = await headers()\n        const validatedHeaders = validateHeaders(headerPayload)\n\n        const payload = await request.json()\n        const body = JSON.stringify(payload)\n\n        const event = await verifyWebhook(webhook, body, {\n            'svix-id': validatedHeaders.svix_id,\n            'svix-timestamp': validatedHeaders.svix_timestamp,\n            'svix-signature': validatedHeaders.svix_signature,\n        })\n\n        await handleWebhookEvent(event)\n\n        return new Response('Webhook received', { status: 200 })\n    } catch (error) {\n        console.error('Webhook processing error:', error)\n        return new Response(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`, { status: 400 })\n    }\n}\n\nconst handleWebhookEvent = async (event: WebhookEvent) => {\n    const workflow = await workflowBuilder(event)\n    if (!workflow) {\n        console.log(`Unsupported event type: ${event.type}`)\n        return\n    }\n\n    const subscriber = await subscriberBuilder(event)\n    const payload = await payloadBuilder(event)\n\n    await triggerWorkflow(workflow, subscriber, payload)\n}\n\nasync function workflowBuilder(event: WebhookEvent): Promise<string | undefined> {\n    if (!EVENT_TO_WORKFLOW_MAPPINGS[event.type as keyof typeof EVENT_TO_WORKFLOW_MAPPINGS]) {\n        return undefined;\n    }\n\n    if (event.type === 'email.created' && event.data.slug) {\n        const emailMappings = EVENT_TO_WORKFLOW_MAPPINGS['email.created'];\n        const emailSlug = event.data.slug as keyof typeof emailMappings;\n        return emailMappings[emailSlug] || `email-${String(emailSlug).replace(/_/g, '-')}`;\n    }\n\n    return EVENT_TO_WORKFLOW_MAPPINGS[event.type as keyof typeof EVENT_TO_WORKFLOW_MAPPINGS] as string;\n}\n\nasync function subscriberBuilder(response: WebhookEvent) {\n    const userData = response.data as UserJSON;\n    \n    if (!userData.id) {\n        throw new Error('Missing subscriber ID from webhook data');\n    }\n\n    return {\n        subscriberId: (userData as any).user_id ?? userData.id,\n        firstName: userData.first_name ?? undefined,\n        lastName: userData.last_name ?? undefined,\n        email: (userData.email_addresses?.[0]?.email_address ?? (userData as any).to_email_address) ?? undefined,\n        phone: userData.phone_numbers?.[0]?.phone_number ?? undefined,\n        locale: 'en_US',\n        avatar: userData.image_url ?? undefined,\n        data: {\n            clerkUserId: (userData as any).user_id ?? userData.id,\n            username: userData.username ?? '',\n        },\n    }\n}\n\nasync function payloadBuilder(response: WebhookEvent) {\n    return response.data;\n}\n\nconst validateHeaders = (headerPayload: Headers) => {\n    const svix_id = headerPayload.get('svix-id')\n    const svix_timestamp = headerPayload.get('svix-timestamp')\n    const svix_signature = headerPayload.get('svix-signature')\n\n    if (!svix_id || !svix_timestamp || !svix_signature) {\n        throw new Error('Missing Svix headers')\n    }\n\n    return { svix_id, svix_timestamp, svix_signature }\n}\n\nconst verifyWebhook = async (webhook: Webhook, body: string, headers: any): Promise<WebhookEvent> => {\n    try {\n        return webhook.verify(body, headers) as WebhookEvent\n    } catch (err) {\n        console.error('Error: Could not verify webhook:', err)\n        throw new Error('Verification error')\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Clicks with Custom Logic\nDESCRIPTION: Custom handling of notification clicks without navigation using the onNotificationClick prop. This is useful when you want to display notifications in a modal or drawer instead of navigating to a new page.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onNotificationClick={(notification) => {\n        // your logic to handle notification click\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Novu Event in PHP (EU Region)\nDESCRIPTION: Initialize the Novu SDK for the EU region, create a trigger event request, and send it. This snippet is similar to the US region example but includes setting the server URL to the EU endpoint.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/php.mdx#2025-04-11_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n    ->setServerURL('https://eu.api.novu.co')\n    ->setSecurity(\n        '<YOUR_SECRET_KEY_HERE>'\n    )\n    ->build();\n\n$triggerEventRequestDto = new Components\\TriggerEventRequestDto(\n    workflowId: 'workflow_identifier',\n    to: new Components\\SubscriberPayloadDto(\n        subscriberId: 'subscriber_unique_identifier',\n        firstName: 'Albert',\n        lastName: 'Einstein',\n        email: 'albert@einstein.com',\n    ),\n    payload: [\n        'comment_id' => 'string',\n        'post' => [\n            'text' => 'string',\n        ],\n    ],\n    overrides: [\n        'email' => [\n            'bcc' => 'no-reply@novu.co',\n        ],\n    ],\n);\n\n$response = $sdk->trigger(\n    triggerEventRequestDto: $triggerEventRequestDto,\n    idempotencyKey: '<value>'\n\n);\n\nif ($response->triggerEventResponseDto !== null) {\n    // handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Creating React Email Template\nDESCRIPTION: Implementing a React-based email template with TypeScript support\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Body,\n    Container,\n    Head,\n    Html,\n    render,\n} from '@react-email/components';\nimport * as React from \"react\";\n\ninterface TestEmailProps {\n    name: string\n}\n\nexport const TestEmailTemplate = ({ name }: TestEmailProps) => {\n    return (\n        <Html>\n            <Head />\n            <Body>\n                <Container>\n                    Hello {name} welcome to your first React E-mail template!\n                </Container>\n            </Body>\n        </Html>\n    );\n};\n\nexport default TestEmailTemplate;\n\nexport function renderEmail(name: string) {\n    return render(<TestEmailTemplate name={name} />);\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Email Notification When In-App Notification Is Read in Novu Workflow\nDESCRIPTION: This code demonstrates a workflow that sends an in-app notification for a task reminder, waits for 6 hours, and then conditionally sends an email notification only if the in-app notification hasn't been read. The skip function is used to avoid sending an unnecessary email if the user has already seen the notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/skip.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nworkflow('skip-email-if-in-app-notification-seen', async ({ payload }) => {\n  const inAppNotification = await step.inApp(\n    'send-in-app-notification',\n    async () => {\n      return {\n        subject: 'Task reminder!',\n        body: 'Task is not yet complete. Please complete the task.',\n      };\n    },\n  );\n\n  // delay for 6 hrs\n  await step.delay(\"delay-step-before-email\", async () => {\n    return {\n      unit: 'hours',\n      amount: 6,\n    };\n  });\n\n  // send email notification after 6 hrs if the in-app notification has not been read\n  await step.email(\n    'send-email',\n    () => {\n      return {\n        subject: `Task reminder!`,\n        body: 'Task is not yet complete. Please complete the task.',\n      };\n    },\n    {\n      // skip the in-app step if the in-app notification has been read\n      skip: () => inAppNotification.read === true,\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Enhanced Notification Item Customization with @novu/react\nDESCRIPTION: Simplified approach to customize notification items using the renderNotification prop in @novu/react, offering more flexibility with read status controls and styling options.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  const renderCustomNotificationItem = (notification) => (\n    <div\n      className={`notification-item ${notification.isRead ? 'read' : 'unread'}`}\n      onClick={() => notification.read()}>\n      <img src={notification.avatar} alt=\"Avatar\" className=\"notification-avatar\" />\n      <div className=\"notification-content\">\n        <h4 className=\"notification-subject\">{notification.subject}</h4>\n        <p className=\"notification-body\">{notification.body}</p>\n      </div>\n    </div>\n  );\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      renderNotification={renderCustomNotificationItem}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Using useNovu Hook for Notification Actions in React Native\nDESCRIPTION: This example demonstrates how to use the useNovu hook to access the Novu client and perform actions like marking all notifications as read and archiving all read notifications. It also handles the loading state.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-novu.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNovu } from '@novu/react-native';\nimport { View, Button, ActivityIndicator } from 'react-native';\n\nfunction NotificationActions() {\n  const { novu, isLoading } = useNovu();\n\n  if (isLoading) return <ActivityIndicator />;\n\n  const markAllAsRead = async () => {\n    await novu.notifications.readAll();\n  };\n\n  const archiveAllRead = async () => {\n    await novu.notifications.archiveAllRead();\n  };\n\n  return (\n    <View>\n      <Button title=\"Mark All as Read\" onPress={markAllAsRead} />\n      <Button title=\"Archive All Read\" onPress={archiveAllRead} />\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Subscriber's Notification Preferences in TypeScript\nDESCRIPTION: Retrieves the notification preferences for the current subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst preferences = await novu.preferences.list();\n```\n\n----------------------------------------\n\nTITLE: Sending FCM Web Push Notification with Relative Link (cURL)\nDESCRIPTION: This cURL command demonstrates how to send an FCM web push notification with a relative link using the Novu API. It shows the structure of the POST request including the FCM webPush override for setting a relative URL.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/fcm.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request POST 'https://url.to.our.selfhosted.novu' \\\n    --header 'Authorization: ApiKey KEY' \\\n    --header 'Content-Type: application/json' \\\n    --data-raw '{\n        \"name\": \"workflow-name\",\n        \"to\": {\n            \"subscriberId\": \"subscriberId\"\n        },\n        \"overrides\": {\n          \"fcm\": {\n            \"webPush\": {\n              \"fcm_options\": {\n                \"link\": \"/foo\"\n              }\n            }\n          }\n        }\n      }'\n```\n\n----------------------------------------\n\nTITLE: Defining Novu Workflow\nDESCRIPTION: Creating a workflow definition with email step and payload validation using Zod\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\nimport { renderEmail } from './emails/test-email';\nimport { z } from 'zod';\n\nexport const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {\n    await step.email('send-email', async (controls) => {\n        return {\n            subject: controls.subject,\n            body: renderEmail(payload.userName),\n        };\n    },\n    {\n        controlSchema: z.object({\n            subject: z.string().default('A Successful Test on Novu from {{userName}}'),\n        }),\n    });\n}, {\n    payloadSchema: z.object({\n        userName: z.string().default('John Doe'),\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Using Different SMS Integration Provider with Novu\nDESCRIPTION: This code example shows how to use a specific SMS integration provider by specifying the integrationIdentifier in the SMS overrides field when triggering a notification with Novu's Node.js SDK.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/sms/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', { to: { subscriberId: '<SUBSCRIBER_ID>', }, overrides: { sms: { integrationIdentifier: 'infobip-abcdef', }, }, });\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox with Next.js\nDESCRIPTION: Implementation of the Novu Inbox component specifically for Next.js applications, using the NextJS-specific Novu package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/nextjs';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox with Gatsby\nDESCRIPTION: Implementation of the Novu Inbox component with Gatsby, using the navigate function to handle navigation when notifications are clicked.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport { navigate } from 'gatsby';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      routerPush={(path: string) => navigate(path)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Novu API Endpoint in Express.js Application\nDESCRIPTION: This code snippet demonstrates how to add a Novu Bridge Endpoint to an Express.js application. It imports necessary functions from Novu Framework and sets up a route for the Novu API.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/express.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@novu/framework/express\";\nimport { testWorkflow } from \"../novu/workflows\";\n\napp.use(express.json()); // Required for Novu POST requests\napp.use( \"/api/novu\", serve({ workflows: [testWorkflow] }) );\n```\n\n----------------------------------------\n\nTITLE: Reverting Primary Action of Notification in TypeScript\nDESCRIPTION: Reverts the primary action of a specific notification to pending status.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.revertPrimary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu Client in TypeScript (US Region)\nDESCRIPTION: Creates a new Novu client instance for the US region with subscriber ID and application identifier.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/js\";\n\nconst novu = new Novu({\n  subscriberId: \"SUBSCRIBER_ID\",\n  applicationIdentifier: \"APPLICATION_IDENTIFIER\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu API Endpoint in AWS Lambda (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to set up a Novu API endpoint in an AWS Lambda function using the Novu Framework. It imports necessary modules, defines a test workflow, and exports the Lambda function using the serve method from @novu/framework/lambda.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/lambda.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@novu/framework/lambda\";\nimport { workflow } from \"@novu/framework\";\nimport { testWorkflow } from \"../novu/workflows\";\n\nmodule.exports.novu = serve({\n    workflows: [testWorkflow],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Notifications with Query Parameters\nDESCRIPTION: Demonstrates how to use the query parameter with useNotifications to filter notifications by specific criteria such as templates and email addresses.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-notifications.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RefreshControl, FlatList, View, Text, ActivityIndicator } from 'react-native';\n\nfunction FilteredNotifications() {\n  const { notifications, isLoading } = useNotifications({\n    query: {\n      templates: ['welcome-template', 'order-update'],\n      emails: ['user@example.com'],\n    },\n  });\n\n  if (isLoading) return <ActivityIndicator />;\n\n  return (\n    <FlatList\n      data={notifications}\n      keyExtractor={(item) => item.id}\n      renderItem={({ item: notification }) => (\n        <View>\n          <Text>{notification.content}</Text>\n        </View>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Skip Logic in Novu Step Interface\nDESCRIPTION: Demonstrates how to conditionally skip an email step using the skip option, which takes a function that returns a boolean value determining whether the step should be skipped.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.email('skipped-step', async () => ({\n  subject: 'Hello, world!',\n  body: 'My email message',\n}), {\n  skip: async (controls) => true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Popover Inbox Layout in React\nDESCRIPTION: Advanced implementation of an Inbox with a custom popover using Novu's React components together with custom UI popover components. This allows for greater control over the popover behavior and styling.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/index.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bell, Inbox, InboxContent } from '@novu/react';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\n\nexport default function CustomPopoverPage() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Popover>\n        <PopoverTrigger>\n          <Bell />\n        </PopoverTrigger>\n        <PopoverContent className=\"h-[500px] w-[400px] overflow-auto p-0\">\n          <InboxContent />\n        </PopoverContent>\n      </Popover>\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Subscriber Credentials for MS Teams in Node.js\nDESCRIPTION: This code snippet demonstrates how to update subscriber credentials for MS Teams using the @novu/node library. It sets the webhook URL for a specific subscriber using the MS Teams provider ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/ms-teams.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', ChatProviderIdEnum.MsTeams, {\n  webhookUrl: \"<WEBHOOK_URL>\"\n}, 'msteams-MnGLxp8uy');\n```\n\n----------------------------------------\n\nTITLE: Reverting Secondary Action of Notification in TypeScript\nDESCRIPTION: Reverts the secondary action of a specific notification to pending status.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.revertSecondary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Bell Button with Unread Count in React\nDESCRIPTION: React component for a bell button that displays the unread notifications count using the useCounts hook from @novu/react.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/hooks.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCounts } from '@novu/react';\n\nfunction BellButton() {\n  const { counts } = useCounts({ filters: [{ read: false }] });\n  const unreadCount = counts?.[0].count ?? 0;\n\n  return (\n    <button>\n      <BellIcon />\n      {unreadCount > 0 && <span className=\"badge\">{unreadCount}</span>}\n    </button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Studio to Custom Local Server\nDESCRIPTION: Command to connect the Local Studio to a Novu Bridge Endpoint running on a custom port or route path. This allows for flexibility when your server configuration differs from the defaults.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/studio.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev --port <YOUR_SERVER_PORT> --route <YOUR_NOVU_ROUTE_PATH>\n```\n\n----------------------------------------\n\nTITLE: Implementing NovuProvider in React\nDESCRIPTION: Code snippet showing how to implement the NovuProvider component in a React application. It requires a subscriberId and applicationIdentifier.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/hooks.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react';\n\nfunction App() {\n  return (\n    <NovuProvider\n      subscriberId=\"SUBSCRIBER_ID\"\n      applicationIdentifier=\"APPLICATION_IDENTIFIER\"\n    >\n      {/* Your app components */}\n    </NovuProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Rendering\nDESCRIPTION: Example of implementing a custom notification renderer for the Inbox component.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport { CustomNotification } from './CustomNotification';\n\n<Inbox\n  renderNotification={(notification) => {\n    return <CustomNotification notification={notification} />;\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Truncating Comment Text with Liquid Filter\nDESCRIPTION: This example demonstrates the use of the 'truncate' Liquid filter to shorten long content, such as comment text, in a notification preview.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_5\n\nLANGUAGE: liquid\nCODE:\n```\nNew comment on your post: {{ payload.commentText | truncate: 20 }}\nClick here to read more.\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Workflows with Novu CLI (US Region)\nDESCRIPTION: Command to synchronize workflows to the Novu Cloud US region. This requires your deployed bridge URL and Novu secret key to authenticate with the Novu API.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/deployment/cli.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest sync \\\n  --bridge-url <YOUR_DEPLOYED_URL_WITH_BRIDGE_ENDPOINT> \\\n  --secret-key <NOVU_SECRET_KEY> \\\n  --api-url https://api.novu.co\n```\n\n----------------------------------------\n\nTITLE: Implementing Novu Preferences Component with React\nDESCRIPTION: Basic implementation of the Preferences component within the Novu Inbox component. This allows users to manage their notification preferences within the application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/preferences.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Preferences } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Preferences />\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Delay Logic\nDESCRIPTION: This example shows how to create a delay step with conditional execution based on user status. The delay is skipped for premium users using the skip option, allowing for dynamic delay logic based on business requirements.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/delay.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.delay(\n  'premium-user-delay',\n  async () => {\n    return {\n      amount: 24,\n      unit: 'hours',\n    };\n  },\n  {\n    // Skip the delay for premium users\n    skip: async () => user.isPremium,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Inbox UI Structure in React\nDESCRIPTION: Example of a custom inbox UI structure using a Popover component with a BellButton trigger and NotificationsList content.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/hooks.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst YourCustomInbox = () => {\n  return (\n    <Popover.Root open={...} onOpenChange={...}>\n      <Popover.Trigger>\n        <BellButton />\n      </Popover.Trigger>\n      <Popover.Content>\n        <NotificationsList />\n      </Popover.Content>\n    </Popover.Root>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: CSS Module Styling\nDESCRIPTION: Example of using CSS Modules to style the Inbox component, including both CSS and component implementation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.bellIcon {\n  padding: 1rem;\n  background-color: white;\n  border-radius: 50%;\n}\n\n.bellIcon:hover {\n  background-color: #f9fafb;\n}\n\n.notification {\n  background-color: white;\n  border-radius: 0.5rem;\n  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);\n}\n\n.notification:hover {\n  background-color: #f9fafb;\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport styles from './styles.module.css';\n\nconst appearance = {\n  elements: {\n    bellIcon: styles.bellIcon,\n    notification: styles.notification,\n  },\n};\n\nexport function Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      appearance={appearance}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Array Items with Liquid Filter\nDESCRIPTION: This example shows how to use the 'join' Liquid filter to list multiple items from an array in a human-readable way within a notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_9\n\nLANGUAGE: liquid\nCODE:\n```\nHello {{ subscriber.firstName }},\nYou have the following items pending: {{ payload.tasks | join: \", \" }}.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useNotifications Hook in React Native\nDESCRIPTION: Demonstrates how to implement a basic notifications list using the useNotifications hook with a FlatList component, including handling for loading states, errors, and infinite scrolling.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-notifications.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNotifications } from '@novu/react-native';\nimport { View, Text, ActivityIndicator, FlatList } from 'react-native';\n\nfunction NotificationsList() {\n  const { notifications, hasMore, isLoading, error, loadMore } = useNotifications();\n\n  if (isLoading) return <ActivityIndicator />;\n  if (error) return <Text>Error: {error.message}</Text>;\n\n  return (\n    <FlatList\n      data={notifications}\n      keyExtractor={(item) => item.id}\n      renderItem={({ item: notification }) => (\n        <View>\n          <Text>{notification.content}</Text>\n          <Text>{new Date(notification.createdAt).toLocaleString()}</Text>\n          <Text>{notification.read ? 'Read' : 'Unread'}</Text>\n        </View>\n      )}\n      onEndReached={hasMore ? loadMore : undefined}\n      onEndReachedThreshold={0.5}\n      ListFooterComponent={hasMore ? <ActivityIndicator /> : null}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu Client with HMAC Encryption in TypeScript\nDESCRIPTION: Creates a new Novu client instance with HMAC encryption using a subscriber hash.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/js\";\n\nconst novu = new Novu({\n  subscriberId: \"SUBSCRIBER_ID\",\n  applicationIdentifier: \"APPLICATION_IDENTIFIER\",\n  subscriberHash: \"SUBSCRIBER_HASH_HMAC_ENCRYPTION\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Bell Notification Icon with Novu React\nDESCRIPTION: This snippet demonstrates how to customize the bell icon by passing a custom component to the renderBell prop of the Inbox component. The custom component receives the unread count and can render any UI based on that value.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/bell.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Bell } from '@novu/react';\nimport { BellIcon } from './icons';\n\nfunction Novu() {\n  return (\n    <Inbox \n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" \n      subscriberId=\"YOUR_SUBSCRIBER_ID\" \n      renderBell={(unreadCount) => {\n          return (\n            <div className=\"bg-purple-300 p-4 inline-flex\">\n              New ${unreadCount} notifications\n            </div>\n          );\n      }} \n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Hash with Node Crypto\nDESCRIPTION: Backend code to generate an HMAC encrypted subscriberId using the SHA-256 algorithm and Novu secret key. This hash is used to verify the authenticity of subscriber requests.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/production.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createHmac } from 'crypto';\n\nconst hmacHash = createHmac('sha256', process.env.NOVU_SECRET_KEY)\n  .update(subscriberId)\n  .digest('hex');\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Tabs in Novu Notification Center (Old Method)\nDESCRIPTION: This snippet demonstrates how to create multiple tabs in the Novu notification center using the old implementation with @novu/notification-center. It shows how to define stores and tabs for different notification categories.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NovuProvider,\n  PopoverNotificationCenter,\n  NotificationBell,\n} from '@novu/notification-center';\n\nfunction Novu() {\n  return (\n    <NovuProvider\n      stores={[\n        {\n          storeId: 'product-updates',\n          query: { feedIdentifier: 'product-updates' },\n        },\n        {\n          storeId: 'user-activity',\n          query: { feedIdentifier: 'user-activity' },\n        },\n      ]}\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      applicationIdentifier=\"YOUR_APP_ID\">\n      <PopoverNotificationCenter\n        tabs={[\n          { name: 'Product Updates', storeId: 'product-updates' },\n          { name: 'User Activity', storeId: 'user-activity' },\n        ]}\n        colorScheme={colorScheme}\n        onNotificationClick={handlerOnNotificationClick}\n        onActionClick={handlerOnActionClick}>\n        {({ unseenCount }) => {\n          return <NotificationBell colorScheme={colorScheme} unseenCount={unseenCount} />;\n        }}\n      </PopoverNotificationCenter>\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Creating Notification Center Component with Novu Inbox\nDESCRIPTION: TypeScript React component that implements Novu's Inbox for notifications. Requires applicationIdentifier and subscriberId from Novu dashboard, and integrates with React Router for navigation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/react.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { Inbox } from '@novu/react';\nimport { useNavigate } from 'react-router';\n\nexport function NotificationCenter() {\n  const navigate = useNavigate();\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      routerPush={(path: string) => navigate(path)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom Inbox UI with Novu Hooks\nDESCRIPTION: Implementation of a custom inbox UI component using Novu's useNotifications hook. Features include loading states, infinite scrolling, pull-to-refresh, and empty state handling.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  FlatList,\n  View,\n  Text,\n  ActivityIndicator,\n  RefreshControl,\n} from \"react-native\";\nimport { useNotifications, Notification } from \"@novu/react-native\";\n\nfunction YourCustomInbox() {\n   const { notifications, isLoading, fetchMore, hasMore, refetch } = useNotifications();\n\n  const renderItem = ({ item }) => (\n    <View>\n      <Text>{item.body}</Text>\n    </View>\n  );\n\n  const renderFooter = () => {\n    if (!hasMore) return null;\n\n    return (\n      <View>\n        <ActivityIndicator size=\"small\" color=\"#2196F3\" />\n      </View>\n    );\n  };\n\n  const renderEmpty = () => (\n    <View>\n      <Text>No updates available</Text>\n    </View>\n  );\n\n  if (isLoading) {\n    return (\n      <View style={styles.loadingContainer}>\n        <ActivityIndicator size=\"large\" color=\"#2196F3\" />\n      </View>\n    );\n  }\n\n  return (\n    <FlatList\n      data={notifications}\n      renderItem={renderItem}\n      keyExtractor={(item) => item.id}\n      contentContainerStyle={styles.listContainer}\n      onEndReached={fetchMore}\n      onEndReachedThreshold={0.5}\n      ListFooterComponent={renderFooter}\n      ListEmptyComponent={renderEmpty}\n      refreshControl={\n        <RefreshControl\n          refreshing={isLoading}\n          onRefresh={refetch}\n          colors={[\"#2196F3\"]}\n        />\n      }\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Novu Workflow with Vue Email\nDESCRIPTION: Typescript implementation of a Novu workflow that uses the Vue Email template. It defines a workflow with an email step, control schema for the subject, and payload schema for the user name.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/vue-email.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { workflow } from '@novu/framework';\nimport { renderEmail } from './emails/test-email';\nimport { z } from 'zod';\n\nexport const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {\n    await step.email('send-email', async (controls) => {\n        return {\n            subject: controls.subject,\n            body: renderEmail(payload.userName),\n        };\n    },\n    {\n        controlSchema: z.object({\n            subject: z.string().default('A Successful Test on Novu from {{userName}}'),\n        }),\n    });\n}, {\n    payloadSchema: z.object({\n        userName: z.string().default('John Doe'),\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the Novu Java SDK\nDESCRIPTION: Example showing how to initialize the Novu client using either a direct API key or a configuration object. Includes a basic example of triggering a notification event. Users need to replace INSERT_API_KEY_HERE with their actual API key from the Novu dashboard.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/java.mdx#2025-04-11_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport co.novu.sdk.Novu;\n\npublic class Main {\n    public static void main(String[] args) {\n        String apiKey = \"INSERT_API_KEY_HERE\";\n        // Using the API Key only\n        Novu novu = new Novu(apiKey);\n\n        // Using the Config Param\n        NovuConfig novuConfig = new NovuConfig(apiKey);\n        Novu novu = new Novu(novuConfig);\n\n        // Sample usage\n        novu.triggerEvent(event);\n    }\n}\n\n// Sign up on https://dashboard.novu.co and grab your API key from https://dashboard.novu.co/settings\n```\n\n----------------------------------------\n\nTITLE: Customizing Notification Display with renderNotification Prop\nDESCRIPTION: Shows how to customize the appearance of each notification item using the renderNotification prop. This approach gives full control over the layout, styling, and what notification data to display for each item.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/notifications.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Notifications } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Notifications\n        renderNotification={(notification) => (\n          <div>\n            <h3>{notification.subject}</h3>\n            <p>{notification.body}</p>\n          </div>\n        )}\n      />\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Action Clicks in Notification Center with @novu/notification-center\nDESCRIPTION: Implementation example showing how to handle primary and secondary actions in notifications using the older @novu/notification-center library with useUpdateAction hook.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NovuProvider,\n  PopoverNotificationCenter,\n  IMessage,\n  MessageActionStatusEnum,\n  useUpdateAction,\n  ButtonTypeEnum,\n  NotificationBell,\n} from '@novu/notification-center';\n\nfunction Novu() {\n  const CustomNotificationCenter = () => {\n    const { updateAction } = useUpdateAction();\n\n    const handleOnActionClick = async (\n      templateIdentifier: string,\n      btnType: ButtonTypeEnum,\n      notification: IMessage\n    ) => {\n      if (templateIdentifier === 'friend-request') {\n        if (btnType === 'primary') {\n          /** Call your API to accept the friend request here **/\n\n          /** And then update Novu that this action has been taken, so the user won't see the button again **/\n          updateAction({\n            messageId: notification._id,\n            actionButtonType: btnType,\n            status: MessageActionStatusEnum.DONE,\n          });\n        }\n      }\n    };\n\n    return (\n      <PopoverNotificationCenter colorScheme={'dark'} onActionClick={handleOnActionClick}>\n        {({ unseenCount }) => <NotificationBell unseenCount={unseenCount} />}\n      </PopoverNotificationCenter>\n    );\n  };\n\n  return (\n    <NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APP_ID\">\n      <CustomNotificationCenter />\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Creating Example Provider Handler in TypeScript\nDESCRIPTION: Implements a handler class for a new email provider in Novu. This class extends the BaseHandler, requires credentials and sender information, and initializes the provider with the appropriate configuration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ChannelTypeEnum } from '@novu/shared';\nimport { ExampleProviderEmailProvider } from '@novu/example-provider';\nimport { BaseHandler } from './base.handler';\n\nexport class ExampleProviderHandler extends BaseHandler {\n  constructor() {\n    super('example-provider', ChannelTypeEnum.EMAIL);\n  }\n\n  buildProvider(credentials, from: string) {\n    const config: { apiKey: string } = { apiKey: credentials.apiKey };\n\n    this.provider = new ExampleProviderEmailProvider(config);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Notifications with useNotifications in React\nDESCRIPTION: This snippet demonstrates how to use the useNotifications hook to fetch and display a list of notifications. It includes handling for loading and error states, as well as a 'Load More' button for pagination.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-notifications.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNotifications } from \"@novu/react\";\n\nfunction NotificationsList() {\n  const { notifications, hasMore, isLoading, error, fetchMore } =\n    useNotifications();\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div className=\"space-y-4\">\n      {notifications?.map((notification) => (\n        <div key={notification.id} className=\"p-4 border rounded-lg\">\n          <h3 className=\"font-medium\">{notification.subject}</h3>\n          <p>{notification.body}</p>\n          <div className=\"flex justify-between text-sm text-gray-500 mt-2\">\n            <span>{new Date(notification.createdAt).toLocaleString()}</span>\n            <span>{notification.isRead ? \"Read\" : \"Unread\"}</span>\n          </div>\n        </div>\n      ))}\n      {hasMore && (\n        <button\n          onClick={fetchMore}\n          className=\"w-full p-2 bg-blue-50 text-blue-600 rounded-md\"\n        >\n          Load More\n        </button>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Subscriber Device Tokens for Expo Push using cURL\nDESCRIPTION: This cURL command demonstrates how to register Expo device tokens for a subscriber via the REST API. It sets credentials for the specified subscriber ID, assigning device tokens to enable push notification delivery.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/expo-push.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"expo\",\n  \"deviceTokens\": [\"token1\", \"token2\"],\n  \"integrationIdentifier\": \"expo-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Overrides in Node.js\nDESCRIPTION: This snippet demonstrates how to trigger an email notification with custom overrides for email properties such as 'to', 'from', 'senderName', etc. The overrides allow customization of the email delivery parameters.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  overrides: {\n    email: {\n      to: ['to@novu.co'],\n      from: 'from@novu.co',\n      senderName: 'Novu Team',\n      text: 'text version of email using overrides',\n      replyTo: 'no-reply@novu.co',\n      cc: ['1@novu.co'],\n      bcc: ['2@novu.co'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for Push Webhook in Node.js\nDESCRIPTION: This code demonstrates how to set subscriber credentials for the Push Webhook provider using Novu's Node.js SDK. It requires your Novu secret key and allows you to associate any random string as a device token with a subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/push-webhook.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\n// PushProviderIdEnum.PushWebhook = push-webhook\nawait novu.subscribers.setCredentials('subscriberId', PushProviderIdEnum.PushWebhook, {\n  deviceTokens: ['ANY_RANDOM_STRING'],\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Variables Example in React\nDESCRIPTION: Example showing how to customize the Inbox component using the appearance prop with variables for basic styling.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nconst appearance = {\n  variables: {\n    colorBackground: 'yellow',\n  },\n};\n\n<Inbox appearance={appearance} />;\n```\n\n----------------------------------------\n\nTITLE: Real-time Notification Events with useNovu\nDESCRIPTION: Demonstrates how to implement real-time notification event listeners using the useNovu hook, including handling new notifications and unread count changes.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-novu.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNovu } from \"@novu/react\";\nimport { useEffect } from \"react\";\nimport type { Notification } from \"@novu/js\";\n\nfunction NotificationListener() {\n  const novu = useNovu();\n\n  useEffect(() => {\n    // Handler for new notifications\n    const handleNewNotification = ({ result }: { result: Notification }) => {\n      console.log(\"New notification:\", result.subject);\n      // You can use a toast library to show notifications\n      // toast({\n      //   title: result.subject,\n      //   description: result.body,\n      // });\n    };\n\n    // Handler for unread count changes\n    const handleUnreadCountChanged = ({ result }: { result: number }) => {\n      // Update favicon or title to show unread count\n      document.title = result > 0 ? `(${result}) My App` : \"My App\";\n    };\n\n    // Subscribe to events\n    novu.on(\"notifications.notification_received\", handleNewNotification);\n    novu.on(\"notifications.unread_count_changed\", handleUnreadCountChanged);\n\n    // Cleanup function\n    return () => {\n      novu.off(\"notifications.notification_received\", handleNewNotification);\n      novu.off(\"notifications.unread_count_changed\", handleUnreadCountChanged);\n    };\n  }, [novu]);\n\n  return null; // This component doesn't render anything\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Novu Inbox Component in Angular\nDESCRIPTION: TypeScript implementation of the Novu Inbox component in Angular, including initialization and mounting of the NovuUI instance.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/angular.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, ViewChild, ElementRef, AfterViewInit } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { NovuUI } from '@novu/js/ui';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.css',\n})\nexport class AppComponent implements AfterViewInit {\n  @ViewChild('novuInbox') novuInbox!: ElementRef<HTMLElement>;\n  title = 'inbox-angular';\n\n  ngAfterViewInit() {\n    const novu = new NovuUI({\n      options: {\n        applicationIdentifier: 'YOUR_APPLICATION_IDENTIFIER',\n        subscriberId: 'YOUR_SUBSCRIBER_ID',\n      },\n    });\n\n    novu.mountComponent({\n      name: 'Inbox',\n      props: {},\n      element: this.novuInbox.nativeElement,\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Default Values with Liquid Filter\nDESCRIPTION: This snippet illustrates the use of the 'default' Liquid filter to provide fallback values when certain subscriber properties might be null or undefined.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_10\n\nLANGUAGE: liquid\nCODE:\n```\nHi {{ subscriber.nickname | default: subscriber.firstName }},\nYour account settings are updated.\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Bell Inbox Layout in React\nDESCRIPTION: Basic implementation of the default Inbox with Bell layout using Novu's React components. This is the simplest way to add a notification inbox to your application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return <Inbox subscriberId=\"1\" applicationIdentifier=\"1\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Bell Inbox Layout in React\nDESCRIPTION: Implementation of Inbox with a custom Bell component. This allows for custom styling and positioning of the notification bell icon along with unread count display.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Bell } from '@novu/react';\nimport { BellIcon } from './icons';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Bell\n        renderBell={(unreadCount) => (\n          <div>\n            <span>{unreadCount}</span>\n            <BellIcon />\n          </div>\n        )}\n      />\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Notifications with useNotifications in React\nDESCRIPTION: This example shows how to use the useNotifications hook with filtering options. It fetches only unread notifications with specific tags and limits the number of notifications per page.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-notifications.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNotifications } from \"@novu/react\";\n\nfunction FilteredNotifications() {\n  const { notifications, isLoading } = useNotifications({\n    read: false, // Only unread notifications\n    tags: [\"important\", \"urgent\"], // Only notifications with these tags\n    limit: 20, // Fetch 20 notifications per page\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"space-y-4\">\n      {notifications?.map((notification) => (\n        <div key={notification.id} className=\"p-4 border rounded-lg\">\n          <h3 className=\"font-medium\">{notification.subject}</h3>\n          <p>{notification.body}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering APNS Notification with Advanced Options\nDESCRIPTION: Example demonstrating advanced APNS notification configuration including localization keys, custom sounds, and priority headers.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/apns.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {\n    key1: 'val1',\n    key2: 'val2', // If the notification is a data notification, the payload will be sent as the data\n  },\n  overrides: {\n    type: 'data',\n    apns: {\n      headers: {\n        'apns-priority': '5',\n      },\n      payload: {\n        aps: {\n          alert: {\n            'loc-key': 'GAME_PLAY_REQUEST_FORMAT',\n            'loc-args': ['Shelly', 'Rick'],\n          },\n          sound: 'demo.wav',\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Marking Notification as Read in TypeScript\nDESCRIPTION: Marks a specific notification as read using its notification ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.read({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Notification Actions (New Implementation)\nDESCRIPTION: Example of how to handle user interactions with notifications using the new @novu/react package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  const handleNotificationClick = (notification) => {\n    // Your custom logic here\n    console.log('Notification clicked:', notification);\n  };\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onNotificationClick={handleNotificationClick}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Using Tags to Categorize Notifications in Novu Framework\nDESCRIPTION: A workflow example showing how to categorize notifications using tags. The workflow creates a security alert notification for new logins and applies a 'security' tag that can be used for filtering in the Inbox UI.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/introduction.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nworkflow(\n  'acme-login-alert',\n  async ({ step, payload }) => {\n    await step.inApp('inbox', async () => {\n      return {\n        subject: 'New Login Detected',\n        body: \"We noticed a login from a new device or location. If this wasn't you, change your password immediately.\",\n      };\n    });\n  },\n  {\n    tags: ['security'],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Page Inbox Layout in React\nDESCRIPTION: Implementation of a full page Inbox layout using Novu's React components. Similar to the side menu layout, but typically used to display notifications as the main content of a page.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/index.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox, Notifications } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Notifications />\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscriber Ahead of Trigger in Node.js\nDESCRIPTION: This code snippet shows how to create a subscriber before triggering a notification using the Novu API in Node.js. It includes optional fields for additional subscriber information.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/subscribers.mdx#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Novu } from '@novu/api';\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nawait novu.subscribers.create({\n  subscriberId: \"subscriber_unique_identifier\",\n  firstName: \"Albert\",\n  lastName: \"Einstein\",\n  email: \"albert@einstein.com\",\n  phone: \"+1234567890\",\n  avatar: 'https://example.com/images/avatar.jpg',\n  locale: 'en-US',\n  data: { customKey1: 'customVal1', customKey2: 'customVal2' },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing NovuProvider with Basic Configuration in React Native\nDESCRIPTION: Basic implementation of NovuProvider component with required subscriberId and applicationIdentifier props. This setup is used for US region deployments.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/novu-provider.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react-native';\n\nfunction App() {\n  return (\n    <NovuProvider\n      subscriberId=\"SUBSCRIBER_ID\"\n      applicationIdentifier=\"APPLICATION_IDENTIFIER\"\n    >\n      {/* Your app components */}\n    </NovuProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Slack Credentials for Subscriber using cURL\nDESCRIPTION: This cURL command demonstrates how to update a subscriber's Slack credentials via the Novu API. It sets the webhook URL for a specific subscriber using a PUT request.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/slack.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"slack\",\n  \"credentials\": {\n      \"webhookUrl\": \"<WEBHOOK_URL>\"\n  },\n  \"integrationIdentifier\": \"slack-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for FCM in Novu (Node.js)\nDESCRIPTION: This Node.js code snippet demonstrates how to set a subscriber's device token for FCM using the Novu SDK. It uses the setCredentials method to associate FCM device tokens with a specific subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/fcm.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  PushProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials(\n  'subscriberId',\n  PushProviderIdEnum.FCM, {\n    deviceTokens: ['token1', 'token2']\n  },\n  'fcm-MnGLxp8uy'\n);\n```\n\n----------------------------------------\n\nTITLE: Personalizing Notifications with User Properties in Liquid\nDESCRIPTION: This snippet demonstrates how to use subscriber properties in a Novu notification template. It shows how to access and display the subscriber's first name and custom plan data.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_0\n\nLANGUAGE: liquid\nCODE:\n```\nHi {{ subscriber.firstName }},\n\nYou've been upgraded to the {{ subscriber.data.plan }} plan.\n\nThanks,\nThe Novu Team\n```\n\n----------------------------------------\n\nTITLE: Event Triggering Configuration with Self-hosted Novu\nDESCRIPTION: TypeScript code example showing how to configure and trigger events with a self-hosted Novu installation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/deploy-with-docker.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst config = {\n  backendUrl: '<REPLACE_WITH_SELF_HOSTED_BACKEND_URL>',\n};\n\nconst novu = new Novu('<API_KEY>', config);\n\nawait novu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Subscriber Device Tokens for Expo Push using Node.js\nDESCRIPTION: This code shows how to register Expo device tokens for a subscriber. It uses the Novu client to set credentials specifically for the Expo push provider, allowing notifications to be delivered to the subscriber's devices.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/expo-push.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,PushProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', PushProviderIdEnum.EXPO, {\n  deviceTokens: ['token1', 'token2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Topic in Novu using TypeScript\nDESCRIPTION: This snippet demonstrates how to create a new topic using the Novu SDK. It requires the Novu secret key and returns the internal ID and topic key.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/topics.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nconst result = await novu.topics.create({\n  key: 'unique-topic-identifier',\n  name: 'descriptive-topic-name',\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Definition of useNotifications Return Type\nDESCRIPTION: Defines the return type structure of the useNotifications hook, including the notifications array, pagination controls, loading state, error handling, and refetch functionality.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-notifications.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NotificationReturn = {\n  notifications: {\n    id: string;\n    content: string;\n    createdAt: Date;\n    read: boolean;\n    seen: boolean;\n    // ... other notification fields\n  }[];\n  hasMore: boolean;\n  isLoading: boolean;\n  error: Error | null;\n  loadMore: () => void;\n  refetch: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Provider Overrides in Novu Step Interface\nDESCRIPTION: Demonstrates how to override a specific provider (Slack) for an email step, allowing custom formatting of the notification when delivered through that channel.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/index.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.email('provider-override', resolver, {\n  providers: {\n    slack: ({ controls, outputs }) => {\n      return {\n        text: 'A new post has been created',\n        blocks: [{\n          type: 'section',\n          text: {\n            type: 'mrkdwn',\n            text: 'A new post has been created',\n          },\n        }],\n      };\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending WhatsApp Messages with Twilio in Node.js\nDESCRIPTION: Demonstrates how to trigger a WhatsApp message using Novu's Twilio integration. The phone number must be prefixed with 'whatsapp:' to specify WhatsApp as the messaging channel.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/sms/(providers)/twilio.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.trigger(\"<WORKFLOW_TRIGGER_IDENTIFIER>\", {\n  to: {\n    subscriberId: \"<UNIQUE_SUBSCRIBER_IDENTIFIER>\",\n    phone: \"whatsapp:555-4242\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Subscriber's Notification Preferences in TypeScript\nDESCRIPTION: Retrieves the notification preferences for the current subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst preferences = await novu.preferences.list();\n```\n\n----------------------------------------\n\nTITLE: Implementing Inbox Component in React\nDESCRIPTION: Example showing how to use the Inbox component to display notifications with configuration for application ID, subscriber ID, and backend URLs. Includes a callback for handling notification clicks.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.model.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from \"@novu/react\";\n\nfunction NotificationCenter() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"USER_ID\"\n      backendUrl=\"https://api.novu.co\"\n      socketUrl=\"https://ws.novu.co\"\n      placement=\"right\"\n      placementOffset={10}\n      onNotificationClick={(notification) => {\n        // Handle notification click\n        console.log(notification);\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Archiving Notifications in Novu Inbox\nDESCRIPTION: This snippet demonstrates how to archive notifications using the archive method provided by the notification object in the Novu Inbox component.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  const handleNotificationClick = (notification) => {\n    notification.archive();\n  };\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onNotificationClick={handleNotificationClick}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Sending Slack Message with Block Kit in TypeScript\nDESCRIPTION: This snippet demonstrates how to send a Slack message using Novu's chat step with Block Kit formatting. It includes a fallback body for non-Slack providers and custom blocks for Slack.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/slack.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait step.chat(\n  'send-chat',\n  async () => {\n    return {\n      // This will be used as a fallback for the chat provider if other than Slack provider is used\n      body: 'A new post has been created',\n    };\n  },\n  {\n    providers: {\n      slack: async ({ inputs }) => ({\n        text: 'A new post has been created',\n        blocks: [\n          {\n            type: 'section',\n            text: {\n              type: 'mrkdwn',\n              text: 'A new post has been created',\n            },\n          },\n        ],\n      }),\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pull-to-Refresh with useNotifications\nDESCRIPTION: Shows how to implement a pull-to-refresh pattern for notifications using the refetch function from useNotifications and the RefreshControl component from React Native.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-notifications.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNotifications } from '@novu/react-native';\nimport { RefreshControl, FlatList, View, Text, ActivityIndicator } from 'react-native';\n\nfunction RefreshableNotificationsList() {\n  const { notifications, isLoading, refetch } = useNotifications();\n\n  return (\n    <FlatList\n      data={notifications}\n      keyExtractor={(item) => item.id}\n      renderItem={({ item: notification }) => (\n        <View>\n          <Text>{notification.content}</Text>\n          <Text>{new Date(notification.createdAt).toLocaleString()}</Text>\n        </View>\n      )}\n      refreshControl={<RefreshControl refreshing={isLoading} onRefresh={refetch} />}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Control Schema in Novu Step Interface\nDESCRIPTION: Defines a control schema using Zod validation for an email step, specifying the structure for subject and components which can be either text or button types.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.email('stepId', resolver, {\n  controlSchema: z.object({\n    subject: z.string(),\n    components: z.array(z.object({\n      type: z.enum(['text', 'button']),\n      content: z.string(),\n    })),\n  }),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu Client with HMAC Encryption in TypeScript\nDESCRIPTION: Creates a new Novu client instance with HMAC encryption using subscriber hash.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/js\";\n\nconst novu = new Novu({\n  subscriberId: \"SUBSCRIBER_ID\",\n  applicationIdentifier: \"APPLICATION_IDENTIFIER\",\n  subscriberHash: \"SUBSCRIBER_HASH_HMAC_ENCRYPTION\",\n});\n```\n\n----------------------------------------\n\nTITLE: Localizing Novu Inbox Component\nDESCRIPTION: This snippet shows how to customize the language and text content of the Novu Inbox component using the localization prop. It demonstrates setting custom text for various UI elements and changing the locale.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      localization={{\n        'inbox.title': 'Notificaciones',\n        'notifications.emptyNotice': 'No tienes nuevas notificaciones',\n        'notifications.markAllAsRead': 'Marcar todo como leído',\n        locale: 'es-ES',\n      }}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for Pusher Beams in Novu (cURL)\nDESCRIPTION: This cURL command sets the Pusher Beams user ID as the device token for a Novu subscriber. It requires the Novu API key, subscriber ID, and the Pusher Beams user ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/pusher-beams.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"pusher-beams\",\n  \"deviceTokens\": ['userId-from-pusher-beams'],\n  \"integrationIdentifier\": \"pusher-beams-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Updating Slack Credentials for Subscriber in Node.js\nDESCRIPTION: This code snippet shows how to update a subscriber's Slack credentials in Novu using the Node.js SDK. It sets the webhook URL for a specific subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/slack.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', ChatProviderIdEnum.Slack, { webhookUrl: \"<WEBHOOK_URL>\", });\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Novu SDK Usage in US Region\nDESCRIPTION: Illustrate how to use the Novu SDK asynchronously to trigger a notification event in the US region. Includes setting up the asynchronous Novu client and sending a trigger event with subscriber details and payload.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/python.mdx#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport novu_py\nfrom novu_py import Novu\nimport os\n\nasync def main():\nasync with Novu(\nsecret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n        res = await novu.trigger_async(trigger_event_request_dto=novu_py.TriggerEventRequestDto(\n            workflow_id=\"workflow_identifier\",\n            to={\n                \"subscriber_id\": \"subscriber_unique_identifier\",\n                \"first_name\": \"Albert\",\n                \"last_name\": \"Einstein\",\n                \"email\": \"albert@einstein.com\",\n            },\n            payload={\n                \"comment_id\": \"string\",\n                \"post\": {\n                    \"text\": \"string\",\n                },\n            },\n            overrides={\n              \"email\": {\n                \"bcc\": \"no-reply@novu.co\",\n              }\n            },\n        ))\n\n        # Handle response\n        print(res)\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of usePreferences Hook\nDESCRIPTION: Example implementation showing how to display and manage notification preferences using the usePreferences hook, including loading states and error handling.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-preferences.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePreferences } from '@novu/react-native';\nimport { View, Text, Switch, ActivityIndicator } from 'react-native';\n\nfunction PreferencesList() {\n  const { preferences, isLoading, error, updatePreference } = usePreferences();\n\n  if (isLoading) return <ActivityIndicator />;\n  if (error) return <Text>Error: {error.message}</Text>;\n\n  return (\n    <View>\n      {preferences.map((preference) => (\n        <View key={preference.template._id}>\n          <Text style={styles.heading}>{preference.template.name}</Text>\n\n          <View style={styles.row}>\n            <Text>Email Notifications</Text>\n            <Switch\n              value={preference.channels.email}\n              onValueChange={(enabled) => {\n                updatePreference({\n                  templateId: preference.template._id,\n                  channelType: 'email',\n                  enabled,\n                });\n              }}\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text>SMS Notifications</Text>\n            <Switch\n              value={preference.channels.sms}\n              onValueChange={(enabled) => {\n                updatePreference({\n                  templateId: preference.template._id,\n                  channelType: 'sms',\n                  enabled,\n                });\n              }}\n            />\n          </View>\n        </View>\n      ))}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Item Rendering with @novu/notification-center\nDESCRIPTION: Example showing how to customize individual notification items using the listItem prop in the older @novu/notification-center library.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NovuProvider,\n  PopoverNotificationCenter,\n  NotificationBell,\n} from '@novu/notification-center';\n\nfunction Novu() {\n  return (\n    <NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APP_ID\">\n      <PopoverNotificationCenter\n        colorScheme={colorScheme}\n        onNotificationClick={handlerOnNotificationClick}\n        onActionClick={handlerOnActionClick}\n        listItem={(notification, handleActionButtonClick, handleNotificationClick) => {\n          return (\n            <a\n              href=\"/\"\n              onClick={(e) => {\n                e.preventDefault();\n                handleNotificationClick();\n              }}>\n              {notification.content}\n            </a>\n          );\n        }}>\n        {({ unseenCount }) => {\n          return <NotificationBell unseenCount={unseenCount} />;\n        }}\n      </PopoverNotificationCenter>\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Applying Query Filters with useCounts Hook in React Native\nDESCRIPTION: This example demonstrates how to use the useCounts hook with query filters to fetch specific notification counts. It applies filters for notification templates and user emails, and displays the filtered total and unread counts.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-counts.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, ActivityIndicator } from 'react-native';\nfunction FilteredNotifications() {\n  const { data, isLoading } = useCounts({\n    query: {\n      templates: ['welcome-template', 'order-update'],\n      emails: ['user@example.com'],\n    },\n  });\n\n  if (isLoading) return <ActivityIndicator />;\n\n  return (\n    <View>\n      <Text>Filtered Notifications: {data?.total}</Text>\n      <Text>Unread: {data?.unreadCount}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu API Client in Node.js\nDESCRIPTION: Shows how to initialize the Novu client in a Node.js application using the @novu/api package. The client is configured with a secret API key that should be stored as an environment variable in production.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/overview.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Novu } from '@novu/api';\nconst novu = new Novu({\n  secretKey: \"NOVU_SECRET_KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token with cURL for Pushpad Integration\nDESCRIPTION: This shows how to set the Pushpad user ID as the device token for a Novu subscriber using a cURL request. It requires the Novu API key, subscriber ID, and the Pushpad user ID for authentication.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/pushpad.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"pushpad\",\n  \"deviceTokens\": ['user123'],\n  \"integrationIdentifier\": \"pushpad-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Advanced Styling with appearance Prop in @novu/react\nDESCRIPTION: Comprehensive styling approach using the appearance prop in @novu/react, supporting theme variables, CSS objects, and class names including Tailwind CSS classes.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      appearance={{\n        baseTheme: {\n          variables: {\n            colorBackground: '#1F2937',\n            colorForeground: '#F9FAFB',\n            colorPrimary: '#3B82F6',\n            colorSecondaryForeground: '#9CA3AF',\n            colorNeutral: '#374151',\n          },\n        },\n        elements: {\n          bellIcon: 'text-white',\n          notificationItem: 'custom-class bg-gray-800 hover:bg-gray-700 p-4 rounded-md',\n          notificationSubject: {\n            color: '#E2E8F0',\n            fontSize: '18px',\n            fontWeight: 'bold',\n          },\n          notificationBody: {\n            color: '#A0AEC0',\n            fontSize: '14px',\n          },\n        },\n      }}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Using useCounts Hook for Basic Notification Counts in React Native\nDESCRIPTION: This example demonstrates how to use the useCounts hook to fetch and display basic notification counts in a React Native component. It handles loading and error states, and displays unread, unseen, and total counts.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-counts.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, ActivityIndicator } from 'react-native';\nimport { useCounts } from '@novu/react-native';\n\nfunction NotificationBadge() {\n  const { data, isLoading, error } = useCounts();\n\n  if (isLoading) return <ActivityIndicator />;\n  if (error) return <Text>Error: {error.message}</Text>;\n\n  return (\n    <View>\n      <Text>Unread: {data?.unreadCount}</Text>\n      <Text>Unseen: {data?.unseenCount}</Text>\n      <Text>Total: {data?.total}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring NovuModule in NestJS Application\nDESCRIPTION: This snippet demonstrates how to add the NovuModule to a NestJS application. It imports the necessary modules and registers the NovuModule with a specified API path and workflow.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nestjs.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { NovuModule } from '@novu/framework/nest';\nimport { testWorkflow } from './novu/workflows';\n\n@Module({\n    imports: [\n        NovuModule.register({\n            apiPath: '/api/novu',\n            workflows: [testWorkflow],\n        }),\n    ],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Topic in Novu using TypeScript\nDESCRIPTION: This code shows how to retrieve a topic entity using its key with the Novu SDK. It requires the Novu secret key and the unique topic identifier.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/topics.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nconst key = 'unique-topic-identifier';\n\nconst result = await novu.topics.get(key);\n```\n\n----------------------------------------\n\nTITLE: Reverting Primary Action for Notification in TypeScript\nDESCRIPTION: Reverts the primary action of a specific notification to pending status.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.revertPrimary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Simplified Action Handling with @novu/react\nDESCRIPTION: Updated implementation using the newer @novu/react library with dedicated onPrimaryActionClick and onSecondaryActionClick handlers for more explicit action handling.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  const handlePrimaryActionClick = (notification) => {\n    // Handle primary action\n    console.log('Primary action clicked:', notification);\n  };\n\n  const handleSecondaryActionClick = (notification) => {\n    // Handle secondary action\n    console.log('Secondary action clicked:', notification);\n  };\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onPrimaryActionClick={handlePrimaryActionClick}\n      onSecondaryActionClick={handleSecondaryActionClick}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for Push Webhook using cURL\nDESCRIPTION: This cURL command shows how to set subscriber credentials for the Push Webhook provider via Novu's REST API. It requires your Novu secret key and subscriber ID, allowing you to associate device tokens with a subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/push-webhook.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"push-webhook\",\n  \"deviceTokens\": ['ANY_RANDOM_STRING'],\n  \"integrationIdentifier\": \"push-webhook-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Advanced Popover Positioning with @novu/react and Radix UI\nDESCRIPTION: Enhanced implementation using @novu/react integrated with Radix UI for more advanced popover positioning and styling options.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as RadixPopover from '@radix-ui/react-popover';\nimport { Inbox, Bell, Notifications } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APP_ID\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <RadixPopover.Root>\n        <RadixPopover.Trigger asChild>\n          <Bell />\n        </RadixPopover.Trigger>\n        <RadixPopover.Portal>\n          <RadixPopover.Content side=\"bottom\" align=\"end\" sideOffset={10}>\n            <Notifications />\n            <RadixPopover.Arrow />\n          </RadixPopover.Content>\n        </RadixPopover.Portal>\n      </RadixPopover.Root>\n    </Inbox>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Defining useCounts Hook Return Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript types for the return value of the useCounts hook. It includes the Count type and the UseCountsResult type, which provide structure for the notification counts and the hook's result.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-counts.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Count = {\n  count: number;\n  filter: NotificationFilter;\n};\n\ntype UseCountsResult = {\n  counts?: Count[];\n  error?: NovuError;\n  isLoading: boolean;\n  isFetching: boolean;\n  refetch: () => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Completing Secondary Action of Notification in TypeScript\nDESCRIPTION: Marks the secondary action of a specific notification as completed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.completeSecondary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Subscriber Object Schema in Novu\nDESCRIPTION: This JSON schema represents the subscriber object in Novu's notification system. It includes core identifiers, basic user information, custom data fields, communication channel configurations, and system metadata that Novu uses to route notifications to the correct users through their preferred channels.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/how-novu-works.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // Core Identifiers\n  \"subscriberId\": \"UNIQUE_USER_IDENTIFIER_IN_YOUR_SYSTEM\",\n  \"_id\": \"NOVU_GENERATED_SUBSCRIBER_ID\",\n  \"_organizationId\": \"NOVU_GENERATED_ORG_ID\",\n  \"_environmentId\": \"NOVU_GENERATED_ENV_ID\",\n\n  // Basic Information\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"email\": \"john.doe@org.com\",\n  \"phone\": \"+98712345670\",\n  \"avatar\": \"AVATAR_URL\",\n  \"locale\": \"en_US\",\n  \"avatar\": \"AVATAR_URL\",\n\n  // Custom Data\n  \"data\": {\n    \"custom_key_1\": \"custom_value_1\",\n    \"custom_key_2\": \"custom_value_2\"\n  },\n\n  // Communication Channels\n  \"channels\": [\n    {\n      // Firebase Cloud Messaging configuration\n      \"credentials\": {\n        \"deviceTokens\": [\"token1\", \"token2\"]\n      },\n      \"_integrationId\": \"NOVU_GENERATED_INTEGRATION_ID\",\n      \"providerId\": \"fcm\"\n    },\n    {\n      // Discord configuration\n      \"credentials\": {\n        \"webhookUrl\": \"URL\"\n      },\n      \"_integrationId\": \"NOVU_GENERATED_INTEGRATION_ID\",\n      \"providerId\": \"discord\"\n    }\n  ],\n\n  // System Fields\n  \"deleted\": false,\n  \"createdAt\": \"2022-10-13T17:40:53.231Z\",\n  \"updatedAt\": \"2022-10-13T17:41:53.238Z\",\n  \"__v\": 0,\n  \"isOnline\": false,\n  \"lastOnlineAt\": \"2022-10-13T17:41:53.238Z\",\n  \"id\": \"NOVU_GENERATED_SUBSCRIBER_ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving In-App Notification Status in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the status of an in-app notification, including whether it has been seen or read, and the last seen and read dates.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/inApp.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { seen, read, lastSeenDate, lastReadDate } = await step.inApp('inbox', resolver);\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for FCM in Novu (cURL)\nDESCRIPTION: This cURL command shows how to set a subscriber's device token for FCM using the Novu API. It sends a PUT request to update the subscriber's credentials with FCM device tokens.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/fcm.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"fcm\",\n  \"credentials\": {\n    \"deviceTokens\" : [\n      \"token1\",\n      \"token2\"\n    ]\n  },\n  \"integrationIdentifier\": \"fcm-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Custom Bell Icon (New Implementation)\nDESCRIPTION: Example of how to customize the bell icon that triggers the notifications popover using the new @novu/react package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport CustomBell from './CustomBell'; // Your custom bell icon component\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      renderBell={(unreadCount) => <CustomBell unreadCount={unreadCount} />}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Counting Notifications with Single Filter in TypeScript\nDESCRIPTION: Counts notifications based on a single filter condition, such as unread and not archived.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Single filter\nconst count = await novu.notifications.count({\n  read: false,\n  archived: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Different Email Integration Provider in Node.js\nDESCRIPTION: This example shows how to specify a different active email provider integration using the 'integrationIdentifier' override. This allows switching between multiple configured email providers on a per-notification basis.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/index.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  overrides: {\n    email: {\n      integrationIdentifier: \"brevo-abcdef\"\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring FCM Service Account JSON in Novu\nDESCRIPTION: This JSON structure represents the required fields for the FCM service account configuration in Novu. It includes the project ID, private key, client email, and other essential authentication details.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/fcm.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"PROJECT_ID\",\n  \"private_key_id\": \"PRIVATE_KEY_ID\",\n  \"private_key\": \"PRIVATE_KEY\",\n  \"client_email\": \"FIREBASE_ADMIN_SDK_EMAIL\",\n  \"client_id\": \"CLIENT_ID\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"CLIENT_X509_CERT_URL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing localization with the Novu Inbox component in React\nDESCRIPTION: This code snippet demonstrates how to use the localization prop with the Novu Inbox component to customize text or change the language. It includes examples for customizing filter options, notification labels, empty state messages, action tooltips, and preferences text. The example also shows how to set a locale and implement dynamic localization for workflow names.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/localization.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n \nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      localization={{\n        // Filter dropdown options\n        'inbox.filters.dropdownOptions.unread': 'Unread only',\n        'inbox.filters.dropdownOptions.default': 'Unread & read',\n        'inbox.filters.dropdownOptions.archived': 'Archived',\n        \n        // Filter labels\n        'inbox.filters.labels.unread': 'Unread',\n        'inbox.filters.labels.default': 'Inbox',\n        'inbox.filters.labels.archived': 'Archived',\n        \n        // Notifications section\n        'notifications.emptyNotice': 'Quiet for now. Check back later.',\n        'notifications.actions.readAll': 'Mark all as read',\n        'notifications.actions.archiveAll': 'Archive all',\n        'notifications.actions.archiveRead': 'Archive read',\n        'notifications.newNotifications': ({ notificationCount }: { notificationCount: number }) =>\n          `${notificationCount > 99 ? '99+' : notificationCount} new ${\n            notificationCount === 1 ? 'notification' : 'notifications'\n          }`,\n        \n        // Individual notification actions\n        'notification.actions.read.tooltip': 'Mark as read',\n        'notification.actions.unread.tooltip': 'Mark as unread',\n        'notification.actions.archive.tooltip': 'Archive',\n        'notification.actions.unarchive.tooltip': 'Unarchive',\n        \n        // Preferences section\n        'preferences.title': 'Preferences',\n        'preferences.emptyNotice': 'No notification specific preferences yet.',\n        'preferences.global': 'Global Preferences',\n        'preferences.workflow.disabled.notice':\n          'Contact admin to enable subscription management for this critical notification.',\n        'preferences.workflow.disabled.tooltip': 'Contact admin to edit',\n        \n        // Set locale\n        locale: 'en-US',\n        \n        // Dynamic localization for workflow names\n        dynamic: {\n          // use the workflowId as a key to localize the workflow name\n          'comment-on-post': 'Post comments',\n        }\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Webhook Credentials with Node.js\nDESCRIPTION: Demonstrates how to set Discord webhook credentials for a subscriber using the Novu Node.js SDK. Requires Novu secret key and Discord webhook URL as prerequisites.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/discord.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', ChatProviderIdEnum.Discord, {\n  webhookUrl: \"<WEBHOOK_URL>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Provider Credentials - cURL\nDESCRIPTION: Updates a subscriber's chat provider credentials by setting the webhook URL using a direct API call. Requires API key, subscriber ID, and webhook URL.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"slack\",\n  \"credentials\": {\n      \"webhookUrl\": \"<WEBHOOK_URL>\"\n  },\n  \"integrationIdentifier\": \"slack-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Completing Primary Action of Notification in TypeScript\nDESCRIPTION: Marks the primary action of a specific notification as completed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.completePrimary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Rendering Tenant-Specific Inbox Component (React TSX)\nDESCRIPTION: This code snippet shows how to use the Novu Inbox component with a tenant-specific subscriber ID in a React application. It ensures that each subscriber in a tenant has their own unique inbox feed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/tenants.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from \"@novu/react\";\n\nfunction InboxComponent({ tenantId, userId }) {\n  return <Inbox subscriberId={`${tenantId}:${userId}`} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Notification with Novu in TypeScript\nDESCRIPTION: This code snippet demonstrates how to send an SMS notification using Novu's step.sms method. It defines the body of the SMS message to be sent.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/sms-channel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.sms('sms', async () => {\n  return {\n    body: 'A new post has been created',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Using SendGrid Templates with Novu via cURL\nDESCRIPTION: This cURL command demonstrates how to trigger a Novu workflow with SendGrid template data. It includes passing the template ID and dynamic content for a transactional email with product information and address details.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/sendgrid.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.novu.co/v1/events/trigger' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n--data '{\n    \"name\": \"workflowIdentifier\",\n    \"to\":  [\"subscriberId\"],\n    \"payload\": {},\n    \"overrides\": {\n        \"email\": {\n            \"customData\": {\n                \"templateId\": \"sendgrid-template-id\",\n                \"dynamicTemplateData\": {\n                    \"total\": \"$ 239.85\",\n                    \"items\": [\n                        {\n                            \"text\": \"New Line Sneakers\",\n                            \"image\": \"https://marketing-image-production.s3.amazonaws.com/uploads/8dda1131320a6d978b515cc04ed479df259a458d5d45d58b6b381cae0bf9588113e80ef912f69e8c4cc1ef1a0297e8eefdb7b270064cc046b79a44e21b811802.png\",\n                            \"price\": \"$ 79.95\"\n                        },\n                        {\n                            \"text\": \"Old Line Sneakers rlfjrjrh4hr4rh4\",\n                            \"image\": \"https://marketing-image-production.s3.amazonaws.com/uploads/3629f54390ead663d4eb7c53702e492de63299d7c5f7239efdc693b09b9b28c82c924225dcd8dcb65732d5ca7b7b753c5f17e056405bbd4596e4e63a96ae5018.png\",\n                            \"price\": \"$ 79.95\"\n                        }\n                    ],\n                    \"receipt\": true,\n                    \"name\": \"Sample Name\",\n                    \"address01\": \"1234 Fake St.\",\n                    \"address02\": \"Apt. 123\",\n                    \"city\": \"Place\",\n                    \"state\": \"CO\",\n                    \"zip\": \"80202\"\n                }\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Completing Secondary Action for Notification in TypeScript\nDESCRIPTION: Marks the secondary action of a specific notification as completed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.completeSecondary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Setting up NovuProvider in React for US Region\nDESCRIPTION: Example of initializing NovuProvider with required parameters for the US region. This provides the Novu instance to child components through React context.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/novu-provider.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react';\n\nfunction App() {\n  return (\n    <NovuProvider\n      subscriberId=\"SUBSCRIBER_ID\"\n      applicationIdentifier=\"APPLICATION_IDENTIFIER\"\n    >\n      {/* Your app components */}\n    </NovuProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Unarchiving Notification in TypeScript\nDESCRIPTION: Unarchives a specific notification using its notification ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.unarchive({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Triggering Notification with Tenant-Specific Content (TypeScript)\nDESCRIPTION: This snippet illustrates how to trigger a notification with tenant-specific content in Novu. It includes a custom tenant object in the payload, which can be used to manipulate workflows or content based on the tenant.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/tenants.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscriberId = `${tenantId}:${userId}`;\n\nawait novu.trigger({\n  workflowId,\n  to: {\n    subscriberId,\n  },\n  payload: {\n    tenant: {\n      id: tenantId,\n      name: \"Acme Corp\",\n      logo: \"https://acme-corp.com/logo.png\",\n      primaryColor: \"red\",\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Styling with @novu/notification-center\nDESCRIPTION: Example showing basic styling options available in the older @novu/notification-center library using the styles prop in NovuProvider.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NovuProvider,\n  PopoverNotificationCenter,\n  NotificationBell,\n} from '@novu/notification-center';\n\nfunction Novu() {\n  return (\n    <NovuProvider\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      styles={{ notifications: { listItem: { layout: { color: '#E3554D' } } } }}>\n      <PopoverNotificationCenter>\n        {({ unseenCount }) => <NotificationBell unseenCount={unseenCount} />}\n      </PopoverNotificationCenter>\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Setting up NovuProvider in React for EU Region\nDESCRIPTION: Example of initializing NovuProvider with custom backend and socket URLs for the EU region. This allows accessing Novu services hosted in Europe.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/novu-provider.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react';\n\nfunction App() {\n  return (\n    <NovuProvider\n      subscriberId=\"SUBSCRIBER_ID\"\n      applicationIdentifier=\"APPLICATION_IDENTIFIER\"\n      backendUrl=\"https://eu.api.novu.co\"\n      socketUrl=\"https://eu.ws.novu.co\"\n    >\n      {/* Your app components */}\n    </NovuProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Chat Notifications with Novu\nDESCRIPTION: This code demonstrates how to send a chat notification using Novu's step.chat method. The function creates a simple chat message with a body text indicating a new post creation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/chat-channel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.chat('chat', async () => {\n  return {\n    body: 'A new post has been created',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Hiding Global Preferences in Novu Inbox with CSS\nDESCRIPTION: CSS snippet to hide the global preferences section in the Novu Inbox component by targeting the first workflow container element. This allows developers to simplify the preferences UI by removing the global settings option.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/preferences.mdx#2025-04-11_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.nv-workflowContainer:first-child {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Subscriber Variable Comparison in Novu Conditions\nDESCRIPTION: Example demonstrating how to compare subscriber variables with payload data in step conditions.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/step-conditions.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operator\": \"AND\",\n  \"conditions\": [\n    {\n      \"field\": \"subscriber.firstName\",\n      \"operator\": \"=\",\n      \"value\": \"{{payload.firstName}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Words in Article Preview with Liquid Filter\nDESCRIPTION: This snippet shows how to use the 'truncatewords' Liquid filter to limit the number of words in an article preview within a notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_6\n\nLANGUAGE: liquid\nCODE:\n```\n{{ subscriber.firstName }}, here's a preview of the article:\n{{ payload.articleExcerpt | truncatewords: 5 }}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Remix Application\nDESCRIPTION: Command to create a new Remix application using the official creator tool. This is the starting point for integrating Novu into a fresh Remix project.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/remix.mdx#2025-04-11_snippet_0\n\nLANGUAGE: package-install\nCODE:\n```\nnpx create-remix@latest\n```\n\n----------------------------------------\n\nTITLE: Custom Bell Icon (Old Implementation)\nDESCRIPTION: Example of how to customize the bell icon that triggers the notifications popover using the old @novu/notification-center package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider, PopoverNotificationCenter } from '@novu/notification-center';\nimport CustomBell from './CustomBell'; // Your custom bell icon component\n\nfunction Novu() {\n  return (\n    <NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APP_ID\">\n      <PopoverNotificationCenter colorScheme=\"dark\">\n        {({ unseenCount }) => (\n          <CustomBell\n            unseenCount={unseenCount}\n            colorScheme=\"dark\"\n            unseenBadgeBackgroundColor=\"#FFFFFF\"\n            unseenBadgeColor=\"#FF0000\"\n          />\n        )}\n      </PopoverNotificationCenter>\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Implementing Infinite Scroll with useNotifications in React\nDESCRIPTION: This snippet demonstrates how to implement infinite scroll functionality using the useNotifications hook. It uses the Intersection Observer API to detect when the user has scrolled to the bottom of the list and automatically fetches more notifications.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-notifications.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useRef } from \"react\";\nimport { useNotifications } from \"@novu/react\";\n\nfunction InfiniteNotificationsList() {\n  const { notifications, hasMore, isLoading, fetchMore } = useNotifications();\n  const observerTarget = useRef(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        if (entries[0].isIntersecting && hasMore && !isLoading) {\n          fetchMore();\n        }\n      },\n      { threshold: 0.5 },\n    );\n\n    if (observerTarget.current) {\n      observer.observe(observerTarget.current);\n    }\n\n    return () => observer.disconnect();\n  }, [hasMore, isLoading, fetchMore]);\n\n  if (!notifications) return <div>Loading...</div>;\n\n  return (\n    <div className=\"space-y-4\">\n      {notifications.map((notification) => (\n        <div key={notification.id} className=\"p-4 border rounded-lg\">\n          <h3 className=\"font-medium\">{notification.subject}</h3>\n          <p>{notification.body}</p>\n        </div>\n      ))}\n      {hasMore && <div ref={observerTarget} className=\"h-10\" />}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read in TypeScript\nDESCRIPTION: Marks all notifications as read, optionally filtered by tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.readAll({\n  tags: ['tag1', 'tag2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Real-time Notification Events in TypeScript\nDESCRIPTION: Sets up event listeners for new notifications and unread count changes using the Novu client.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nnovu.on('notifications.notification_received', (data) => {\n  console.log('New notification:', data);\n});\n\nnovu.on('notifications.unread_count_changed', (data) => {\n  console.log('Unread count:', data);\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Subscription Type with Liquid Filter\nDESCRIPTION: This example illustrates the use of the 'replace' Liquid filter to dynamically update template content, such as changing a subscription type from 'basic' to 'premium'.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_7\n\nLANGUAGE: liquid\nCODE:\n```\nHi {{ subscriber.firstName }},\nYour {{ payload.subscriptionType | replace: \"basic\", \"premium\" }} subscription is active.\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the Angular development server and run the application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/angular.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Marking Notifications as Read in Novu Inbox\nDESCRIPTION: This snippet demonstrates how to mark notifications as read using the read method provided by the notification object in the Novu Inbox component.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  const handleNotificationClick = (notification) => {\n    notification.read();\n  };\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onNotificationClick={handleNotificationClick}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Updating Subscriber Credentials for MS Teams using cURL\nDESCRIPTION: This cURL command shows how to update subscriber credentials for MS Teams by making a PUT request to the Novu API. It sets the webhook URL for a specific subscriber using the MS Teams provider ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/ms-teams.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"msteams\",\n  \"credentials\": {\n      \"webhookUrl\": \"<WEBHOOK_URL>\"\n  },\n  \"integrationIdentifier\": \"msteams-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Bulk Creating Subscribers in TypeScript\nDESCRIPTION: This example demonstrates how to create multiple subscribers in bulk (up to 500 at once) using the Novu API in TypeScript. It includes creating two subscribers with various attributes.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/subscribers.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"YOUR_SECRET_KEY_HERE\",\n});\n\nawait novu.subscribers.createBulk({\n  subscribers: [\n    {\n      subscriberId: \"albert_einstein_user_id\",\n      firstName: \"Albert\",\n      lastName: \"Einstein\",\n      email: \"albert@einstein.com\",\n      phone: \"+1234567890\",\n      avatar: 'https://example.com/images/albert_einstein.jpg',\n      locale: 'en-US',\n      data: { isScientist: true },\n    },\n    {\n      subscriberId: \"nikola_tesla_user_id\",\n      firstName: \"Nikola\",\n      lastName: \"Tesla\",\n      email: \"nikola@tesla.com\",\n      phone: \"+1234567890\",\n      avatar: 'https://example.com/images/nikola_tesla.jpg',\n      locale: 'en-US',\n      data: { isInventor: true },\n    }\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Marking Notifications as Unread in Novu Inbox\nDESCRIPTION: This snippet shows how to mark notifications as unread using the unread method provided by the notification object in the Novu Inbox component.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  const handleNotificationClick = (notification) => {\n    notification.unread();\n  };\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onNotificationClick={handleNotificationClick}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Basic Preferences Management with usePreferences Hook\nDESCRIPTION: Example showing how to implement a basic preferences list with toggle controls for different notification channels. Includes loading states, error handling, and preference updates.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-preferences.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Preference, ChannelType } from \"@novu/js\";\nimport { usePreferences } from \"@novu/react\";\n\nfunction PreferencesList() {\n  const { preferences, isLoading, error, refetch } = usePreferences();\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  const updatePreference = async (\n    preference: Preference,\n    channelType: string,\n    enabled: boolean,\n  ) => {\n    try {\n      await preference.update({\n        channels: {\n          [channelType]: enabled,\n        },\n      });\n\n      // Refresh preferences\n      refetch();\n    } catch (error) {\n      console.error(\"Failed to update preference:\", error);\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {preferences?.map((preference) => (\n        <div\n          key={preference.workflow?.id || \"global\"}\n          className=\"p-4 border rounded-lg\"\n        >\n          <h3 className=\"font-medium\">\n            {preference.workflow?.name || \"Global Preferences\"}\n            {preference.workflow?.critical && (\n              <span className=\"ml-2 text-xs bg-red-100 text-red-800 px-2 py-1 rounded\">\n                Critical\n              </span>\n            )}\n          </h3>\n\n          <div className=\"mt-2 space-y-2\">\n            {Object.entries(preference.channels).map(([channel, enabled]) => (\n              <div key={channel} className=\"flex items-center justify-between\">\n                <span className=\"capitalize\">{channel.replace(\"_\", \" \")}</span>\n                <label className=\"relative inline-flex items-center cursor-pointer\">\n                  <input\n                    type=\"checkbox\"\n                    checked={enabled}\n                    disabled={preference.workflow?.critical}\n                    onChange={(e) =>\n                      updatePreference(preference, channel, e.target.checked)\n                    }\n                    className=\"sr-only peer\"\n                  />\n                  <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600 peer-disabled:opacity-50 peer-disabled:cursor-not-allowed\"></div>\n                </label>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Archiving All Read Notifications in TypeScript\nDESCRIPTION: Archives all read notifications, optionally filtered by tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.archiveAllRead({\n  tags: ['tag1', 'tag2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Marking All Notifications as Read in TypeScript\nDESCRIPTION: Marks all notifications as read, optionally filtered by tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.readAll({\n  tags: ['tag1', 'tag2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Unarchiving Notifications in Novu Inbox\nDESCRIPTION: This snippet shows how to unarchive notifications using the unarchive method provided by the notification object in the Novu Inbox component.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  const handleNotificationClick = (notification) => {\n    notification.unarchive();\n  };\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APP_ID\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      onNotificationClick={handleNotificationClick}\n    />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Implementing NovuProvider with HMAC Encryption in React Native\nDESCRIPTION: Setup of NovuProvider with HMAC encryption enabled through the subscriberHash prop. This configuration adds an extra layer of security to the Novu implementation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/novu-provider.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react-native';\n\nfunction App() {\n  return (\n    <NovuProvider\n      subscriberId=\"SUBSCRIBER_ID\"\n      applicationIdentifier=\"APPLICATION_IDENTIFIER\"\n      subscriberHash=\"SUBSCRIBER_HASH_HMAC_ENCRYPTION\"\n    >\n      {/* Your app components */}\n    </NovuProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Notification as Unread in TypeScript\nDESCRIPTION: Marks a specific notification as unread using its notification ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.unread({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Filtered Preferences Implementation\nDESCRIPTION: Example demonstrating how to filter preferences by tags using the usePreferences hook's filter parameter.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-preferences.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePreferences } from \"@novu/react\";\n\nfunction FilteredPreferences() {\n  const { preferences, isLoading } = usePreferences({\n    filter: {\n      tags: [\"important\", \"marketing\"],\n    },\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-bold\">Marketing Preferences</h2>\n      {preferences?.map((preference) => (\n        <div\n          key={preference.workflow?.id || \"global\"}\n          className=\"p-4 border rounded-lg\"\n        >\n          <h3 className=\"font-medium\">\n            {preference.workflow?.name || \"Global Preferences\"}\n          </h3>\n          {/* Preference controls */}\n        </div>\n      ))}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Marking Notification as Unread in TypeScript\nDESCRIPTION: Marks a specific notification as unread using its ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.unread({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Archiving All Notifications in TypeScript\nDESCRIPTION: Archives all notifications, optionally filtered by tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.archiveAll({\n  tags: ['tag1', 'tag2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Archiving All Notifications in TypeScript\nDESCRIPTION: Archives all notifications, optionally filtered by tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.archiveAll({\n  tags: ['tag1', 'tag2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Notification Preferences by Tags\nDESCRIPTION: Implementation of the preferencesFilter prop to show only relevant preferences to users. Filters workflow preferences by matching specified tags, allowing targeted preference management.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      preferencesFilter={{ tags: ['general', 'admin', 'security'] }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Notification Data for TypeScript Safety\nDESCRIPTION: TypeScript declaration to ensure type safety when accessing the notification.data object. This interface should be declared globally to provide consistent typing across your application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ndeclare global {\n  interface NotificationData {\n    customKey?: string;\n    dataId?: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Archiving All Read Notifications in TypeScript\nDESCRIPTION: Archives all read notifications, optionally filtered by tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.archiveAllRead({\n  tags: ['tag1', 'tag2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Bell Icon Rendering\nDESCRIPTION: Example of customizing the bell icon/trigger for the Inbox component. The renderBell prop receives the unread count which can be used to display a badge or other indicator.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      renderBell={(unreadCount) => (\n        <div>\n          <span>{unreadCount}</span>\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Notifications with useNotifications Actions in React\nDESCRIPTION: This example showcases how to use the notification management actions provided by the useNotifications hook. It includes functions to mark all notifications as read, archive all notifications, and archive all read notifications.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-notifications.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNotifications } from \"@novu/react\";\n\nfunction NotificationManager() {\n  const { notifications, readAll, archiveAll, archiveAllRead, isLoading } =\n    useNotifications();\n\n  const handleReadAll = async () => {\n    const { error } = await readAll();\n    if (error) {\n      console.error(\"Failed to mark all as read:\", error);\n    }\n  };\n\n  const handleArchiveAll = async () => {\n    const { error } = await archiveAll();\n    if (error) {\n      console.error(\"Failed to archive all:\", error);\n    }\n  };\n\n  const handleArchiveAllRead = async () => {\n    const { error } = await archiveAllRead();\n    if (error) {\n      console.error(\"Failed to archive read notifications:\", error);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"flex gap-2 mb-4\">\n        <button\n          onClick={handleReadAll}\n          className=\"px-3 py-1 bg-blue-500 text-white rounded-md\"\n          disabled={isLoading}\n        >\n          Mark All as Read\n        </button>\n        <button\n          onClick={handleArchiveAll}\n          className=\"px-3 py-1 bg-gray-500 text-white rounded-md\"\n          disabled={isLoading}\n        >\n          Archive All\n        </button>\n        <button\n          onClick={handleArchiveAllRead}\n          className=\"px-3 py-1 bg-gray-500 text-white rounded-md\"\n          disabled={isLoading}\n        >\n          Archive Read\n        </button>\n      </div>\n\n      <div className=\"space-y-4\">\n        {notifications?.map((notification) => (\n          <div key={notification.id} className=\"p-4 border rounded-lg\">\n            <h3 className=\"font-medium\">{notification.subject}</h3>\n            <p>{notification.body}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Primary Action for Notification in TypeScript\nDESCRIPTION: Marks the primary action of a specific notification as completed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.completePrimary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Archiving Notification in TypeScript\nDESCRIPTION: Archives a specific notification using its ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.archive({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-tab Filtering in Novu Inbox Component with React\nDESCRIPTION: This example demonstrates how to configure multiple tabs in the Novu Inbox component. Each tab has a label for display and a filter property containing tags that match with workflow tags to filter notifications. This allows for a customized notification viewing experience based on different categories.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/multiple-tabs.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nconst tabs = [\n  {\n    label: 'All Notifications',\n    filter: { tags: [] },\n  },\n  {\n    label: 'Newsletter',\n    filter: { tags: ['newsletter'] },\n  },\n  {\n    label: 'React',\n    filter: { tags: ['react'] },\n  },\n];\n\nfunction InboxNovu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      tabs={tabs}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Notifications with Single Filter in TypeScript\nDESCRIPTION: Counts notifications based on a single filter for read and archived status.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Single filter\nconst count = await novu.notifications.count({\n  read: false,\n  archived: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Body Rendering\nDESCRIPTION: Example of customizing just the body part of notifications while keeping the default notification component structure. This allows for selective styling of the notification content.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      renderBody={(notification) => (\n        <div>\n          <p>{notification.body}</p>\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Notification Preferences with useNovu in React Native\nDESCRIPTION: This example illustrates how to use the useNovu hook to update notification preferences. It shows how to disable email notifications and enable SMS notifications for a specific workflow.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-novu.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\n\nfunction PreferencesManager() {\n  const { novu } = useNovu();\n\n  const updatePreferences = async () => {\n    await novu.preferences.update({\n      workflowId: 'workflow_id',\n      channelPreferences: {\n        email: false,\n        sms: true,\n      },\n    });\n  };\n\n  return <Button title=\"Update Preferences\" onPress={updatePreferences} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Secondary Action for Notification in TypeScript\nDESCRIPTION: Reverts the secondary action of a specific notification to pending status.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.revertSecondary({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Example Payload Data Structure in Novu\nDESCRIPTION: Sample JSON payload structure showing how custom data can be passed during workflow trigger calls to the Novu API.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/step-conditions.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"orderId\": \"12345\",\n  \"totalAmount\": 150,\n  \"orderStatus\": \"completed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering MailerSend Template with Node.js\nDESCRIPTION: Demonstrates how to trigger a MailerSend email template using Novu's Node.js SDK. Shows how to use customData to specify template ID and personalization variables for the email.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/mailersend.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nawait novu.subscribers.trigger(\"workflowIdentifier\", { to: \"subscriberId\", payload: {}, overrides: { email: { customData: { // mailersend template templateId templateId: 'mailersend-template-id', // mailersend template variables personalization: [{ email: 'recipient@email.com', data: { items: { price: '', product: '', quantity: '', }, order: { date: '', order_number: '', billing_address: '', customer_message: '', }, store: { name: '', }, invoice: { total: '', subtotal: '', pay_method: '', }, customer: { name: '', email: '', phone: '', }, }, }, ], }, } }, });\n```\n\n----------------------------------------\n\nTITLE: Adding Subscribers to a Topic in Novu using TypeScript\nDESCRIPTION: This snippet shows how to add subscribers to a topic using the Novu SDK. It requires the Novu secret key, topic key, and an array of subscriber IDs.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/topics.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nconst topicKey = 'posts:comment:12345';\n\nconst response = await novu.topics.addSubscribers(topicKey, {\n  subscribers: ['subscriber-id-1', 'subscriber-id-2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Notifications List\nDESCRIPTION: Retrieve a paginated list of notifications with a specified limit\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/headless.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst response = await novu.notifications.list({\n  limit: 30,\n});\n\nconst notifications = response.data.notifications;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Notification Bell in React with Novu\nDESCRIPTION: Example of using the Bell component from Novu's React library to create a custom notification bell with an unread count indicator. The example demonstrates how to use the renderBell prop to customize the appearance of the notification bell.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bell } from \"@novu/react\";\nimport { BellIcon } from \"lucide-react\";\n\nfunction NotificationBell() {\n  return (\n    <Bell\n      renderBell={(unreadCount) => (\n        <div className=\"relative\">\n          <BellIcon className=\"h-6 w-6\" />\n          {unreadCount > 0 && (\n            <span className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center\">\n              {unreadCount}\n            </span>\n          )}\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Definition for usePreferences Hook\nDESCRIPTION: Type definition for the usePreferences hook return value, including preferences array structure, loading state, error handling, and update function signature.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-preferences.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PreferencesReturn = {\n  preferences: Array<{\n    template: {\n      _id: string;\n      name: string;\n      critical: boolean;\n    };\n    channels: {\n      email?: boolean;\n      sms?: boolean;\n      in_app?: boolean;\n      chat?: boolean;\n      push?: boolean;\n    };\n  }>;\n  isLoading: boolean;\n  error: Error | null;\n  updatePreference: (params: {\n    templateId: string;\n    channelType: string;\n    enabled: boolean;\n  }) => Promise<void>;\n};\n```\n\n----------------------------------------\n\nTITLE: Counting Notifications with Multiple Filters in TypeScript\nDESCRIPTION: Counts notifications using multiple filters for read status, archived status, and tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Multiple filters\nconst counts = await novu.notifications.count({\n  filters: [{ read: false }, { archived: true }, { tags: ['tag1'] }],\n});\n```\n\n----------------------------------------\n\nTITLE: Novu Studio Setup Commands\nDESCRIPTION: Commands to start Novu Studio with various configuration options for local and VPS deployments.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/deploy-with-docker.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev -d http://localhost:4200 -p <bridge_application_port>\n\nnpx novu@latest dev -d http://localhost:4200 -p <bridge_application_port> -t http://host.docker.internal:<bridge_application_port>\n```\n\n----------------------------------------\n\nTITLE: Triggering Expo Push Notifications with Novu in TypeScript\nDESCRIPTION: This code demonstrates how to trigger a notification workflow that includes Expo Push. It initializes the Novu client and triggers a workflow with a specific identifier, targeting a subscriber and including payload data.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/expo-push.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {\n    abc: 'def',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with localtunnel\nDESCRIPTION: This command starts a localtunnel listener to expose the local server running on port 3000 to the internet, generating a public URL for webhook testing.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/clerk.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx localtunnel 3000\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Inbox Component in React\nDESCRIPTION: Example demonstrating the implementation of a custom notification inbox using the InboxContent component from @novu/react. Includes handling for notification clicks, primary action clicks, and custom notification rendering with navigation controls.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InboxContent } from \"@novu/react\";\n\nfunction CustomInbox() {\n  return (\n    <div className=\"custom-inbox-wrapper\">\n      <InboxContent\n        onNotificationClick={(notification) => {\n          // Handle notification click\n          console.log(notification);\n        }}\n        onPrimaryActionClick={(notification) => {\n          // Handle primary action click\n          console.log(notification);\n        }}\n        hideNav={false}\n        renderNotification={({ body, createdAt }) => (\n          <div className=\"notification-item\">\n            <p>{body}</p>\n            <time>{new Date(createdAt).toLocaleDateString()}</time>\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Critical Workflow Management\nDESCRIPTION: Implementation example for handling critical workflows that cannot be disabled, with special UI treatment for critical notifications.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-preferences.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, Switch } from 'react-native';\n\nfunction CriticalPreferences() {\n  const { preferences, updatePreference } = usePreferences();\n\n  return (\n    <View>\n      {preferences.map((preference) => (\n        <View key={preference.template._id}>\n          <Text style={styles.heading}>{preference.template.name}</Text>\n          {preference.template.critical ? (\n            <Text style={styles.critical}>Critical - Cannot be disabled</Text>\n          ) : (\n            <View style={styles.row}>\n              <Text>Enable Notifications</Text>\n              <Switch\n                value={preference.channels.email}\n                onValueChange={(enabled) => {\n                  updatePreference({\n                    templateId: preference.template._id,\n                    channelType: 'email',\n                    enabled,\n                  });\n                }}\n              />\n            </View>\n          )}\n        </View>\n      ))}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu Client in TypeScript (EU Region)\nDESCRIPTION: Creates a new Novu client instance for the EU region with custom API and socket URLs.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/js\";\n\nconst novu = new Novu({\n  subscriberId: \"SUBSCRIBER_ID\",\n  applicationIdentifier: \"APPLICATION_IDENTIFIER\",\n  apiUrl: \"https://eu.api.novu.co\",\n  socketUrl: \"https://eu.ws.novu.co\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Novu API Endpoint in Remix\nDESCRIPTION: This code creates a Novu Bridge Endpoint in a Remix application by implementing a handler that serves workflows. The handler is exported as both action and loader to work with Remix's routing system.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/remix.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@novu/framework/remix\";\nimport { testWorkflow } from \"../novu/workflows\";\n\nconst handler = serve({\n    workflows: [testWorkflow]\n});\n\nexport { handler as action, handler as loader };\n```\n\n----------------------------------------\n\nTITLE: Fetching Store-Specific Notification Counts with useCounts in React Native\nDESCRIPTION: This example shows how to use the useCounts hook with a store ID to fetch notification counts for a specific store. It demonstrates handling loading state and displaying store-specific total and unread counts.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-counts.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, ActivityIndicator } from 'react-native';\nfunction StoreNotifications({ storeId }) {\n  const { data, isLoading } = useCounts({\n    storeId: storeId,\n  });\n\n  if (isLoading) return <ActivityIndicator />;\n\n  return (\n    <View>\n      <Text>Store Notifications: {data?.total}</Text>\n      <Text>Unread: {data?.unreadCount}</Text>\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu Client in TypeScript (US Region)\nDESCRIPTION: Creates a new Novu client instance for the US region with subscriber ID and application identifier.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/js\";\n\nconst novu = new Novu({\n  subscriberId: \"SUBSCRIBER_ID\",\n  applicationIdentifier: \"APPLICATION_IDENTIFIER\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Laravel SDK via Composer\nDESCRIPTION: Command to install the Novu Laravel SDK package using Composer package manager.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/laravel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require novu/novu-laravel\n```\n\n----------------------------------------\n\nTITLE: Fetching Notifications List in TypeScript\nDESCRIPTION: Retrieves a list of notifications with specified filters such as limit, read status, archived status, and tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst notifications = await novu.notifications.list({\n  limit: 30,\n  read: false,\n  archived: false,\n  tags: ['tag1', 'tag2'],\n  offset: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Channel-Grouped Preferences Implementation\nDESCRIPTION: Example showing how to organize and display preferences grouped by channel type, with toggle controls for each channel preference.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-preferences.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Preference, ChannelType } from \"@novu/js\";\nimport { usePreferences } from \"@novu/react\";\n\nfunction ChannelPreferences() {\n  const { preferences, isLoading, refetch } = usePreferences();\n\n  if (isLoading) return <div>Loading...</div>;\n\n  const updatePreference = async (\n    preference: Preference,\n    channelType: string,\n    enabled: boolean,\n  ) => {\n    try {\n      await preference.update({\n        channels: {\n          [channelType]: enabled,\n        },\n      });\n      refetch();\n    } catch (error) {\n      console.error(\"Failed to update preference:\", error);\n    }\n  };\n\n  // Group preferences by channel\n  const channels = [\"email\", \"sms\", \"in_app\", \"push\", \"chat\"];\n\n  return (\n    <div className=\"space-y-8\">\n      {channels.map((channel) => (\n        <div key={channel} className=\"border-t pt-4\">\n          <h2 className=\"text-xl font-medium capitalize mb-4\">\n            {channel.replace(\"_\", \" \")} Notifications\n          </h2>\n          <div className=\"space-y-2\">\n            {preferences\n              ?.filter((pref) => channel in pref.channels)\n              .map((preference) => (\n                <div\n                  key={preference.workflow?.id || \"global\"}\n                  className=\"flex items-center justify-between p-2 hover:bg-gray-50 rounded\"\n                >\n                  <span>\n                    {preference.workflow?.name || \"Global Preferences\"}\n                  </span>\n                  <label className=\"relative inline-flex items-center cursor-pointer\">\n                    <input\n                      type=\"checkbox\"\n                      checked={\n                        preference.channels[\n                          channel as keyof typeof preference.channels\n                        ]\n                      }\n                      disabled={preference.workflow?.critical}\n                      onChange={(e) =>\n                        updatePreference(preference, channel, e.target.checked)\n                      }\n                      className=\"sr-only peer\"\n                    />\n                    <div className=\"w-11 h-6 bg-gray-200 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600 peer-disabled:opacity-50 peer-disabled:cursor-not-allowed\"></div>\n                  </label>\n                </div>\n              ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Capitalizing User Names with Liquid Filter\nDESCRIPTION: This example shows how to use the 'capitalize' Liquid filter to ensure proper formatting of user names in a welcome notification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_1\n\nLANGUAGE: liquid\nCODE:\n```\nHello {{ subscriber.firstName | capitalize }},\nWelcome to Novu! We're excited to have you on board.\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Java SDK with Gradle\nDESCRIPTION: Gradle dependency configuration for adding the Novu Java SDK to your project. Users need to replace {latest-version} with the current version number.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/java.mdx#2025-04-11_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'co.novu:novu-java:{latest-version}'\n```\n\n----------------------------------------\n\nTITLE: Triggering Notifications with Novu SDK for Pushpad\nDESCRIPTION: This TypeScript code demonstrates how to trigger a notification workflow using the Novu SDK. It shows the basic structure required to send a notification to a specific subscriber using a workflow trigger identifier.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/pushpad.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu Studio with Remix Port\nDESCRIPTION: Command to restart Novu Studio and point it to the correct port where the Remix application is running. This ensures Novu Studio can interact with the Remix endpoints.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/remix.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev --port <YOUR_REMIX_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: Marking Notification as Read in TypeScript\nDESCRIPTION: Marks a specific notification as read using its ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.read({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Custom Notification Subject Rendering\nDESCRIPTION: Example of customizing just the subject part of notifications while keeping the default notification component structure. This allows for selective customization of notification elements.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox.mdx#2025-04-11_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      renderSubject={(notification) => (\n        <div>\n          <p>{notification.subject}</p>\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Upcasing Workspace Names with Liquid Filter\nDESCRIPTION: This snippet demonstrates the use of the 'upcase' Liquid filter to emphasize workspace names in a notification about workspace creation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_2\n\nLANGUAGE: liquid\nCODE:\n```\nYour workspace {{ payload.workspaceName | upcase }} has been successfully created.\n```\n\n----------------------------------------\n\nTITLE: Running Studio with Custom Tunnel URL\nDESCRIPTION: Command to run the Local Studio with a custom tunnel URL instead of the default generated tunnel. This is useful when using your own tunneling solution like ngrok.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/studio.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev -t http://custom-tunnel-url.ngrok.app\n```\n\n----------------------------------------\n\nTITLE: Implementing Novu Provider in React Native\nDESCRIPTION: Setup of the NovuProvider component that provides context for inbox hooks. Requires applicationIdentifier from Novu Dashboard and subscriberId for user identification.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react-native';\n\nfunction Layout() {\nreturn (\n\n<NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\">\n  {/* Your app components where you want to use the hooks */}\n  <YourCustomInbox />\n</NovuProvider>\n); }\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for Onesignal Push Notifications in Node.js\nDESCRIPTION: This code snippet demonstrates how to set the device token (OneSignal player_id) for a Novu subscriber using the Node.js SDK. It imports necessary modules and uses the setCredentials method to associate the OneSignal player_id with the subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/onesignal.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', PushProviderIdEnum.OneSignal, {\n  // Your user's unique 'player_id' from OneSignal\n  deviceTokens: [ 'ad0452ca-3ca7-43b5-bf9b-fa93fd322035' ],\n});\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Series of commands to set up the Novu project and build the node package\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm run setup:project\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/node && pnpm run build\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm run generate:provider\n```\n\n----------------------------------------\n\nTITLE: Counting Notifications with Multiple Filters in TypeScript\nDESCRIPTION: Counts notifications using multiple filter conditions, including read status, archived status, and tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Multiple filters\nconst counts = await novu.notifications.count({\n  filters: [{ read: false }, { archived: true }, { tags: ['tag1'] }],\n});\n```\n\n----------------------------------------\n\nTITLE: Triggering Multi-Tenant Notification in Novu (TypeScript)\nDESCRIPTION: This snippet demonstrates how to trigger a multi-tenant notification in Novu by prefixing the subscriber identifier with the tenant identifier. It also shows how to include the tenant ID in the payload.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/tenants.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscriberId = `${tenantId}:${userId}`;\n\nawait novu.trigger({\n  workflowId,\n  to: {\n    subscriberId,\n  },\n  payload: {\n    tenantId,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Tags with Liquid Split and Join Filters\nDESCRIPTION: This snippet demonstrates how to use the 'split' and 'join' Liquid filters together to parse and display a list of tags or interests in a user-friendly format.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_8\n\nLANGUAGE: liquid\nCODE:\n```\nYou have new updates in {{ payload.tags | split: \",\" | join: \", \" }}.\n```\n\n----------------------------------------\n\nTITLE: Launching Local Studio with Novu CLI\nDESCRIPTION: Command to start the Local Studio companion app using the Novu CLI. This launches a local development environment on port 2022 by default.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/studio.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev\n```\n\n----------------------------------------\n\nTITLE: Cloning and Initial Setup Commands for Novu Docker Deployment\nDESCRIPTION: Commands to clone the Novu repository, navigate to the docker directory, and set up initial configuration files.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/deploy-with-docker.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Get the code\ngit clone --depth 1 https://github.com/novuhq/novu\n\n# Go to the docker community folder\ncd novu/docker/community\n\n# Copy the example env file\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Archiving Notification in TypeScript\nDESCRIPTION: Archives a specific notification using its notification ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.mdx#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.archive({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Disabling Output Sanitization in Novu In-App Step\nDESCRIPTION: Shows how to disable output sanitization for an in-app notification, which is useful when you need to preserve special characters (like & in URLs) without having them converted to HTML entities.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.inApp(\n  'without-sanitization',\n  async () => ({\n    body: 'My in-app message',\n    data: {\n      link: '/pipeline/123?active=true&env=prod',\n    },\n  }),\n  {\n    // Prevent the `&` character in `data.link` from\n    // being converted to `&amp;`\n    disableOutputSanitization: true,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Data Field Comparison in Novu Conditions\nDESCRIPTION: Example showing how to compare two dynamic data fields in a step condition using payload variables.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/step-conditions.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operator\": \"AND\",\n  \"conditions\": [\n    {\n      \"field\": \"payload.foo\",\n      \"operator\": \"=\",\n      \"value\": \"{{payload.bar}}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Remix Application with Novu\nDESCRIPTION: Command to start a Remix application with the Novu Endpoint configured. This launches the development server for the application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/remix.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-novu-app && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Unarchiving Notification in TypeScript\nDESCRIPTION: Unarchives a specific notification using its ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait novu.notifications.unarchive({ notificationId: 'NOTIFICATION_ID' });\n```\n\n----------------------------------------\n\nTITLE: Triggering Notifications with Novu SDK (US Region)\nDESCRIPTION: Example of using the Novu Typescript SDK to trigger a notification for a US region server. It demonstrates how to initialize the Novu client and send a notification with subscriber details, workflow ID, and custom payload.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/typescript.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/api\";\n\nconst novu = new Novu({ secretKey: \"<YOUR_SECRET_KEY_HERE>\", });\n\nasync function run() {\n  const result = await novu.trigger({\n    to: {\n      subscriberId: \"subscriber_unique_identifier\",\n      firstName: \"Albert\",\n      lastName: \"Einstein\",\n      email: \"albert@einstein.com\",\n      phone: \"+1234567890\",\n    },\n    workflowId: \"workflow_identifier\",\n    payload: {\n      comment_id: \"string\",\n      post: {\n        text: \"string\",\n      },\n    },\n    overrides: {\n      email: {\n        bcc: \"no-reply@novu.co\",\n      },\n    },\n  });\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Building Novu Project with New Provider\nDESCRIPTION: Command to build the Novu project after implementing the new provider. This sets up the project with the newly added provider integration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\npnpm run setup:project\n```\n\n----------------------------------------\n\nTITLE: Installing Novu .NET Package\nDESCRIPTION: Instructions for installing the Novu NuGet package in a .NET project using the dotnet CLI.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/dotnet.mdx#2025-04-11_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ndotnet add package Novu\n```\n\n----------------------------------------\n\nTITLE: Rendering API Page Component for Delete Subscriber Endpoint in React/JSX\nDESCRIPTION: JSX code that renders the API documentation page for the delete subscriber endpoint. It imports and uses the APIPage component with configuration for the specific endpoint.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_remove-subscriber.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v2/subscribers/{subscriberId}\",\"method\":\"delete\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider Passthrough in Novu Step Interface\nDESCRIPTION: Shows how to use the passthrough functionality to send additional parameters to a specific provider (Sendgrid), including custom body parameters, headers, and query parameters.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/index.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.email('provider-passthrough', resolver, {\n  providers: {\n    sendgrid: ({ controls, outputs }) => {\n      return {\n        _passthrough: {\n          body: {\n            ip_pool_name: 'my-ip-pool',\n          },\n          headers: {\n            'Authorization': 'Bearer my-api-key',\n          },\n          query: {\n            'queryParam': 'queryValue',\n          },\n        }\n      };\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Actor from Topic Trigger Event in Novu using TypeScript\nDESCRIPTION: This snippet shows how to exclude the actor responsible for a topic event when triggering a workflow. It requires the workflow trigger identifier, topic key, and actor's subscriber ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/topics.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst topicKey = 'posts:comment:12345';\n\nawait novu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: [{ type: 'Topic', topicKey: topicKey }],\n  payload: {},\n  actor: { subscriberId: '<SUBSCRIBER_ID_OF_ACTOR>' },\n});\n```\n\n----------------------------------------\n\nTITLE: Running Provider Tests in Novu\nDESCRIPTION: Command to run tests specifically for providers in Novu. This ensures the newly added provider works as expected without any errors.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npnpm run test:providers\n```\n\n----------------------------------------\n\nTITLE: Adding Inbox Component Reference to HTML Template\nDESCRIPTION: HTML template modification to add the Novu Inbox component reference.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/angular.mdx#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div #novuInbox></div>\n```\n\n----------------------------------------\n\nTITLE: Cloning Novu Repository\nDESCRIPTION: Command to clone the forked Novu repository to local machine\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/<'YOUR_GITHUB_USER_NAME'>/novu.git\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Ruby SDK via Gem\nDESCRIPTION: This command installs the Novu Ruby SDK using the gem package manager. It's the first step to integrate Novu into a Ruby project.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/ruby.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngem install novu\n```\n\n----------------------------------------\n\nTITLE: Default Workflow Preferences Configuration (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to set up default workflow preferences in the Novu Framework. It shows all channels enabled and editable by default.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/workflow.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst newWorkflow = workflow(\n  'default-preferences',\n  async ({ step }) => {\n    await step.inApp('send-in-app', () => ({\n      body: 'Hello there',\n    }));\n  },\n  {\n    preferences: {\n      all: { enabled: true, readOnly: false },\n      channels: {\n        inApp: { enabled: true },\n        email: { enabled: true },\n        sms: { enabled: true },\n        chat: { enabled: true },\n        push: { enabled: true },\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Bold Text Notification Step Configuration\nDESCRIPTION: Example of configuring notification text with bold formatting using double asterisks.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nawait step.inApp('inbox', async () => {\n  return {\n    subject: '**A new member joined the team!**',\n    body: '**John Doe** joined the team! Say hello and help them feel at home',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Novu JavaScript SDK\nDESCRIPTION: Command to install the Novu JavaScript SDK package via npm\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/headless.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @novu/js\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Typescript SDK via Bun\nDESCRIPTION: Command to install the @novu/api package using Bun package manager.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/typescript.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @novu/api\n```\n\n----------------------------------------\n\nTITLE: Setting up React Router with Notification Center\nDESCRIPTION: Main App component setup with React Router integration and the NotificationCenter component in a layout. Creates a basic navigation structure with the notification bell in the navbar.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/react.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { NotificationCenter } from './components/notification-center';\n\nfunction Layout({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <nav>\n        <NotificationCenter />\n      </nav>\n      {children}\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <Layout>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          {/* Add your routes here */}\n        </Routes>\n      </Layout>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing @novu/react package\nDESCRIPTION: Command to install the @novu/react package using npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/react\n```\n\n----------------------------------------\n\nTITLE: Basic Notification Actions with useNovu in React\nDESCRIPTION: Demonstrates how to use the useNovu hook to implement basic notification actions like marking all notifications as read and archiving read notifications.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/use-novu.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNovu } from \"@novu/react\";\n\nfunction NotificationActions() {\n  const novu = useNovu();\n\n  const markAllAsRead = async () => {\n    try {\n      await novu.notifications.readAll();\n      console.log(\"All notifications marked as read\");\n    } catch (error) {\n      console.error(\"Failed to mark all as read:\", error);\n    }\n  };\n\n  const archiveAllRead = async () => {\n    try {\n      await novu.notifications.archiveAllRead();\n      console.log(\"All read notifications archived\");\n    } catch (error) {\n      console.error(\"Failed to archive read notifications:\", error);\n    }\n  };\n\n  return (\n    <div className=\"flex gap-2\">\n      <button\n        onClick={markAllAsRead}\n        className=\"px-3 py-1 bg-blue-500 text-white rounded-md\"\n      >\n        Mark All as Read\n      </button>\n      <button\n        onClick={archiveAllRead}\n        className=\"px-3 py-1 bg-gray-500 text-white rounded-md\"\n      >\n        Archive All Read\n      </button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: In-App Only Editable Workflow Preferences (TypeScript/TSX)\nDESCRIPTION: This snippet shows how to configure workflow preferences to enable only the in-app channel while keeping it editable. All other channels are disabled by default.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/workflow.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst newWorkflow = workflow(\n  'only-in-app-channel',\n  async ({ step }) => {\n    await step.inApp('send-in-app', () => ({\n      body: 'Hello there',\n    }));\n  },\n  {\n    preferences: {\n      all: { enabled: false },\n      channels: {\n        inApp: { enabled: true },\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Workflows with Tags in Novu\nDESCRIPTION: This snippet shows how to define multiple workflows with relevant tags using the @novu/framework. It creates two workflows: one for security alerts and another for promotional offers, each with its own tag.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nworkflow(\n  'security-alerts',\n  async (step) => {\n    await step.inApp('inbox', async () => ({\n      subject: 'Security Alert',\n      body: 'A new login attempt was detected.',\n    }));\n  },\n  { tags: ['security'] }\n);\n\nworkflow(\n  'promotional-offers',\n  async (step) => {\n    await step.inApp('inbox', async () => ({\n      subject: 'Exclusive Offer!',\n      body: 'Get 50% off on your next purchase.',\n    }));\n  },\n  { tags: ['promotions'] }\n);\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Workflows with Novu CLI (EU Region)\nDESCRIPTION: Command to synchronize workflows to the Novu Cloud EU region. This requires your deployed bridge URL and Novu secret key to authenticate with the EU region Novu API endpoint.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/deployment/cli.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest sync \\\n  --bridge-url <YOUR_DEPLOYED_URL_WITH_BRIDGE_ENDPOINT> \\\n  --secret-key <NOVU_SECRET_KEY> \\\n  --api-url https://eu.api.novu.co\n```\n\n----------------------------------------\n\nTITLE: Setting up NovuProvider with HMAC Encryption\nDESCRIPTION: Example of initializing NovuProvider with HMAC encryption for enhanced security. This implementation includes the subscriberHash parameter for secure authentication.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/hooks/novu-provider.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider } from '@novu/react';\n\nfunction App() {\n  return (\n    <NovuProvider\n      subscriberId=\"SUBSCRIBER_ID\"\n      applicationIdentifier=\"APPLICATION_IDENTIFIER\"\n      subscriberHash=\"SUBSCRIBER_HASH_HMAC_ENCRYPTION\"\n    >\n      {/* Your app components */}\n    </NovuProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Remix Development Server\nDESCRIPTION: Command to start the Remix development server, which will run the application with the newly integrated Novu notification center.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/remix.mdx#2025-04-11_snippet_4\n\nLANGUAGE: package-install\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Advanced InboxContent Implementation with Custom Handlers\nDESCRIPTION: Shows advanced usage of InboxContent with custom event handlers for notification clicks and actions. Includes custom rendering of notifications and handling of primary/secondary actions.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/inbox-content.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bell, Inbox, InboxContent } from '@novu/react';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\n\nexport default function CustomPopoverPage() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n      <Popover>\n        <PopoverTrigger>\n          <Bell />\n        </PopoverTrigger>\n        <PopoverContent className=\"h-[600px] w-[400px] p-0\">\n          <InboxContent\n            onNotificationClick={(notification) => {\n              // your logic to handle notification click\n            }}\n            onPrimaryActionClick={(notification) => {\n              // your logic to handle primary action click\n            }}\n            onSecondaryActionClick={(notification) => {\n              // your logic to handle secondary action click\n            }}\n            renderNotification={(notification) => (\n              <div>\n                <h3>{notification.subject}</h3>\n                <p>{notification.body}</p>\n              </div>\n            )}\n          />\n        </PopoverContent>\n      </Popover>\n    </Inbox>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Verification Code using Novu SMS Step in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the SMS step in Novu to send a verification code to a user's mobile device. The step is asynchronous and returns an object with the message body.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/sms.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.sms('verification', async () => {\n  return {\n    body: 'Your verification code is: 123456',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Test WhatsApp Notification with Novu (JSON)\nDESCRIPTION: JSON payload for triggering a test WhatsApp notification through Novu. It specifies the subscriber ID and phone number for the recipient.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/whats-app.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subscriberId\": \"TEST_SUBSCRIBER_ID\",\n  \"phone\": \"+11111111111\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu Next.js Application with CLI\nDESCRIPTION: Command to create a new Next.js application with Novu Framework using npx. Requires a valid Novu secret key and sets up a complete development environment with sample workflow, React Email integration, TypeScript configuration, and environment variables.\nSOURCE: https://github.com/novuhq/docs/blob/main/src/snippets/framework-terminal.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu init --secret-key=<YOUR_NOVU_SECRET_KEY>\n```\n\n----------------------------------------\n\nTITLE: Defining useNovu Hook Return Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the return value of the useNovu hook. It includes the Novu client instance, a loading state, and an error state.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-novu.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NovuReturn = {\n  novu: Novu;\n  isLoading: boolean;\n  error: Error | null;\n};\n```\n\n----------------------------------------\n\nTITLE: Dark Theme Implementation in React\nDESCRIPTION: Shows how to implement dark theme support using the baseTheme option in the appearance prop.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\nimport { dark } from '@novu/react/themes';\nimport { useTheme } from 'next-themes';\n\nexport function Novu() {\n  const { resolvedTheme } = useTheme();\n\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      appearance={{ baseTheme: resolvedTheme === 'dark' ? dark : undefined }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with ngrok\nDESCRIPTION: Command to expose local server using ngrok for testing webhooks.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Defining useCounts Hook Return Type in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type for the return value of the useCounts hook. It includes data properties for unread, unseen, and total counts, as well as loading state, error handling, and a refetch function.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-counts.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CountsReturn = {\n  data: {\n    unreadCount: number;\n    unseenCount: number;\n    total: number;\n  };\n  isLoading: boolean;\n  error: Error | null;\n  refetch: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components\nDESCRIPTION: Command to install the required React Email components and dependencies using npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/react-email.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-email/components react-email\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Webhook Credentials with cURL\nDESCRIPTION: Shows how to set Discord webhook credentials for a subscriber using a direct REST API call. Requires Novu API key, subscriber ID, and Discord webhook URL.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/discord.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"discord\",\n  \"credentials\": {\n      \"webhookUrl\": \"<WEBHOOK_URL>\"\n  },\n  \"integrationIdentifier\": \"discord-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Making Webhook Route Public in Next.js Middleware\nDESCRIPTION: Updating middleware.ts to ensure the webhook route is public in a Next.js application using Clerk.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware({\n  publicRoutes: ['/api/webhooks'],\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating Novu Inbox with Radix UI Popover\nDESCRIPTION: This example shows how to integrate the Novu Inbox component with Radix UI's Popover component. It demonstrates using the Bell component with a custom renderer inside a Popover.Trigger and the Notifications component inside Popover.Content.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/bell.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport * as Popover from '@radix-ui/react-popover';\nimport { BellIcon, Cross2Icon } from '@radix-ui/react-icons';\nimport { Inbox, Bell, Notifications } from '@novu/react';\nimport './styles.css';\n\nconst PopoverDemo = () => (\n  <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\">\n    <Popover.Root>\n      <Popover.Trigger asChild>\n        <Bell\n          renderBell={(unreadCount) => (\n            <div>\n              <span>{unreadCount}</span>\n              <BellIcon />\n            </div>\n          )}\n        />\n      </Popover.Trigger>\n      <Popover.Portal>\n        <Popover.Content className=\"PopoverContent\" sideOffset={5}>\n          <Notifications />\n          <Popover.Close className=\"PopoverClose\" aria-label=\"Close\">\n            <Cross2Icon />\n          </Popover.Close>\n          <Popover.Arrow className=\"PopoverArrow\" />\n        </Popover.Content>\n      </Popover.Portal>\n    </Popover.Root>\n  </Inbox>\n);\n\nexport default PopoverDemo;\n```\n\n----------------------------------------\n\nTITLE: Cloning Novu Repository - Main Organization\nDESCRIPTION: Command to clone the main Novu repository from the organization's GitHub.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/novuhq/novu.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Middleware for Public Webhook Route\nDESCRIPTION: This code snippet updates the middleware.ts file to make the webhook route public, allowing Clerk webhook requests to bypass authentication.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/clerk.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { clerkMiddleware } from '@clerk/nextjs/server';\n\nexport default clerkMiddleware({\n  publicRoutes: ['/api/webhooks'],\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Novu Framework Workflow with React Email\nDESCRIPTION: Implementation of a Novu Framework workflow that uses the React Email template for sending welcome emails to new users.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/remix-react-email.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { renderEmail } from './sample-email.tsx';\nimport { workflow } from '@novu/framework';\n\nworkflow('new-signup', async ({ step, payload }) => {\n  await step.email('send-email', async (inputs) => {\n    return {\n      subject: `Welcome to Remix and React E-mail`,\n      body: renderEmail(inputs),\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications Using Mattermost Bot Integration with Novu\nDESCRIPTION: This code shows how to use Mattermost's Bot integration with the Novu platform. It demonstrates setting up a Mattermost bot API token for a subscriber and triggering a notification through the configured bot.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/mattermost.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu, ChatProviderIdEnum } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\n// Get the Mattermost bot API token for the subscriber.\nawait novu.subscribers.setCredentials('subscriberId', ChatProviderIdEnum.Mattermost, {\n  botApiToken: '<enter-mattermost-bot-api-token>',\n});\n\n// Send a notification to Mattermost using the bot API token.\nawait novu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<UNIQUE_SUBSCRIBER_IDENTIFIER>',\n  },\n  payload: {\n    message: 'This is a notification from my application!',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @novu/react (New Implementation)\nDESCRIPTION: Example of how to use the Inbox component from the new @novu/react package for basic notification functionality.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\" subscriberId=\"YOUR_SUBSCRIBER_ID\" />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Clerk and Novu Integration\nDESCRIPTION: This command installs the required packages for integrating Clerk with Novu, including svix for webhook verification, @novu/api for Novu SDK, and @clerk/nextjs for Clerk integration with Next.js.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/clerk.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install svix @novu/api @clerk/nextjs\n```\n\n----------------------------------------\n\nTITLE: Defining a Workflow in Novu Framework (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to create a workflow using the Novu Framework. It includes setting up a workflow with an in-app notification step, payload schema validation, and workflow preferences.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/workflow.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nworkflow(\n  'my-workflow',\n  async ({ step, payload, subscriber }) => {\n    await step.inApp('send-in-app', async () => {\n      return {\n        body: 'Hello there',\n      };\n    });\n  },\n  {\n    payloadSchema: z.object({\n      body: z.string(),\n    }),\n    name: 'My Workflow',\n    description: 'This is a workflow',\n    tags: ['business', 'critical'],\n    preferences: {\n      channels: {\n        inApp: { enabled: true },\n      },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Setup in Novu API\nDESCRIPTION: Demonstrates how to set up the Authorization header for Novu API requests using an API key. The API key must be prefixed with 'ApiKey ' in the header.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/overview.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--header 'Authorization: ApiKey <NOVU_SECRET_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Example Segment Identify Event for Novu Subscriber Creation\nDESCRIPTION: This JSON snippet demonstrates the structure of a Segment 'identify' event that can be used to create or update a subscriber in Novu. It includes user traits such as name, email, plan, and login count.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/segment.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"identify\",\n  \"traits\": {\n    \"name\": \"Peter Gibbons\",\n    \"email\": \"peter@example.com\",\n    \"plan\": \"premium\",\n    \"logins\": 5\n  },\n  \"userId\": \"97980cfea0067\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Svelte Email Template\nDESCRIPTION: A TypeScript utility function that renders the Svelte email template with the provided name parameter using the render function from svelte-email.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/svelte-email.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { render } from 'svelte-email';\nimport TestEmail from './test-email.svelte';\n\nexport function renderEmail(name: string) {\n    return render({\n        template: TestEmail,\n        props: {\n            name,\n        },\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Subscriber Credentials for Zulip Integration in Node.js\nDESCRIPTION: This code shows how to set Zulip webhook URL credentials for a subscriber using the Novu Node.js library. It imports the necessary dependencies, initializes the Novu client with your secret key, and sets credentials with the Zulip provider ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/zulip.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', ChatProviderIdEnum.Zulip, {\nwebhookUrl: \"<WEBHOOK_URL>\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Email Provider Next Steps Component in TSX\nDESCRIPTION: Import statement for the EmailProviderNextSteps component used in the documentation layout.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/plunk.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmailProviderNextSteps } from '@/snippets/channels/email/email-provider-next-steps.tsx';\n```\n\n----------------------------------------\n\nTITLE: Using SendGrid Templates with Novu Framework\nDESCRIPTION: This code demonstrates how to create a workflow using the Novu Framework that integrates with SendGrid templates. It shows how to use provider-specific configuration to pass template ID and dynamic data while defining a workflow with a payload schema.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/sendgrid.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { workflow } from \"@novu/framework\";\nimport { z } from \"zod\";\n\nexport const sendgridOverridesEmailExample = workflow(\n  \"sendgrid-email-overrides\",\n  async ({ step, payload }) => {\n    await step.email(\n      \"sendgrid-email-overrides\",\n      async () => {\n        return {\n          subject: \"SendGrid Overrides Example\",\n          body: \"This body content should be overridden by the SendGrid template\",\n        };\n      },\n      {\n        providers: {\n          sendgrid: ({}) => ({\n            _passthrough: {\n              body: {\n                templateId: payload.dynamicTemplateId,\n                dynamicTemplateData: {\n                  // Example variables to be used in the template\n                  total: \"$ 239.85\",\n                  items: [\n                    {\n                      text: payload.itemName,\n                      image:\n                        \"https://marketing-image-production.s3.amazonaws.com/uploads/8dda1131320a6d978b515cc04ed479df259a458d5d45d58b6b381cae0bf9588113e80ef912f69e8c4cc1ef1a0297e8eefdb7b270064cc046b79a44e21b811802.png\",\n                      price: \"$ 79.95\",\n                    },\n                    {\n                      text: \"Old Line Sneakers rlfjrjrh4hr4rh4\",\n                      image:\n                        \"https://marketing-image-production.s3.amazonaws.com/uploads/3629f54390ead663d4eb7c53702e492de63299d7c5f7239efdc693b09b9b28c82c924225dcd8dcb65732d5ca7b7b753c5f17e056405bbd4596e4e63a96ae5018.png\",\n                      price: \"$ 79.95\",\n                    },\n                  ],\n                  receipt: true,\n                  name: \"Sample Name\",\n                  address01: \"1234 Fake St.\",\n                  address02: \"Apt. 123\",\n                  city: \"Place\",\n                  state: \"CO\",\n                  zip: \"80202\",\n                },\n              },\n            },\n          }),\n        },\n      }\n    );\n  },\n  {\n    payloadSchema: z.object({\n      itemName: z.string().default(\"New Line Sneakers\"),\n      dynamicTemplateId: z\n        .string()\n        .default(\"d-d965b02b1b5d4856bf332a5e98c7470c\"),\n    }),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Provider Next Steps Component\nDESCRIPTION: JSX component usage for displaying the next steps section in the documentation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/sparkpost.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EmailProviderNextSteps />\n```\n\n----------------------------------------\n\nTITLE: Installing Novu React SDK and React Router\nDESCRIPTION: Command to install the required packages for integrating Novu notifications in a React application. Installs the Novu React SDK and React Router Dom for navigation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/react.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/react react-router-dom\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Email Template Component\nDESCRIPTION: Vue component that defines an email template using Vue Email components. It accepts a name prop and renders a welcome email with personalized content.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/vue-email.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { VueEmail, Button, Container, Head, Html, Preview } from '@vue-email/components';\n\ndefineProps<{\n    name: string;\n}>();\n</script>\n\n<template>\n    <VueEmail>\n        <Html>\n            <Head />\n            <Preview>Welcome to Vue Email</Preview>\n            <Container>\n                <h1>Welcome, {{ name }}!</h1>\n                <p>Thanks for trying Vue Email. We're thrilled to have you on board.</p>\n            </Container>\n        </Html>\n    </VueEmail>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Chat Provider Credentials - Node.js\nDESCRIPTION: Updates a subscriber's chat provider credentials by setting the webhook URL using the Novu Node.js SDK. Requires Novu secret key and subscriber ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', ChatProviderIdEnum.Slack, { webhookUrl: \"<WEBHOOK_URL>\", });\n```\n\n----------------------------------------\n\nTITLE: Rendering Email Provider Next Steps Component\nDESCRIPTION: Renders the EmailProviderNextSteps component to display additional setup instructions and next steps for the email webhook configuration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/webhook.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<EmailProviderNextSteps />\n```\n\n----------------------------------------\n\nTITLE: Running the React Development Server\nDESCRIPTION: Command to start the React development server for testing the Novu notification integration. Runs the application in development mode.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/react.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Element Selector Styling in React\nDESCRIPTION: Demonstrates how to style specific elements within the Inbox component using element selectors.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst appearance = {\n  elements: {\n    notificationPrimaryAction__button: {\n      backgroundColor: 'red',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Importing EmailProviderNextSteps Component in React TSX\nDESCRIPTION: This code imports the EmailProviderNextSteps component from the snippets directory, which likely contains common next steps to follow after setting up an email provider in Novu.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/mailjet.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmailProviderNextSteps } from '@/snippets/channels/email/email-provider-next-steps.tsx';\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Headless SDK\nDESCRIPTION: Command to install the Novu headless SDK package for inbox UI functionality.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/angular.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/js\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu API Endpoint (App Router)\nDESCRIPTION: Setting up Novu API endpoint using the App Router pattern in Next.js\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from \"@novu/framework/next\";\nimport { myWorkflow } from \"../../novu/workflows\";\n\nexport const { GET, POST, OPTIONS } = serve({ workflows: [myWorkflow] });\n```\n\n----------------------------------------\n\nTITLE: Importing Email Provider Next Steps Component in JSX\nDESCRIPTION: Import statement for the EmailProviderNextSteps component used in the documentation layout.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/sparkpost.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmailProviderNextSteps } from '@/snippets/channels/email/email-provider-next-steps.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Integration Documentation\nDESCRIPTION: React component imports for documentation UI elements including Cards and integration-specific icons for Clerk, Stripe, and Segment.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/overview.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, Cards } from 'fumadocs-ui/components/card';\nimport { ClerkIcon } from '@/components/icons/clerk';\nimport { StripeIcon } from '@/components/icons/stripe';\nimport { SegmentIcon } from '@/components/icons/segment';\n```\n\n----------------------------------------\n\nTITLE: Setting Subscriber Device Tokens - Node.js\nDESCRIPTION: Example showing how to set APNS device tokens for a subscriber using the Novu Node.js SDK.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/apns.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', PushProviderIdEnum.APNS, {\ndeviceTokens: ['token1', 'token2'],\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Page Using Fumadocs in JSX\nDESCRIPTION: This code renders an API documentation page using the Fumadocs APIPage component. It displays documentation for the PATCH endpoint /v2/subscribers/{subscriberId}/preferences which is used to update subscriber preferences.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_update-subscriber-preferences.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v2/subscribers/{subscriberId}/preferences\",\"method\":\"patch\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu SDK\nDESCRIPTION: Initialize the Novu SDK instance with your API key to establish connection with Novu services\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/headless.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/js\";\n\nconst novu = new Novu({\n  apiKey: 'YOUR_API_KEY',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu API Endpoint in SvelteKit\nDESCRIPTION: This snippet demonstrates how to set up a Novu API endpoint in a SvelteKit application. It imports the testWorkflow and uses the serve function from @novu/framework/sveltekit to expose GET, POST, and OPTIONS routes.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/svelte.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { testWorkflow } from '$lib/novu/workflows';\nimport { serve } from '@novu/framework/sveltekit';\n\nexport const { GET, POST, OPTIONS } = serve({ workflows: [testWorkflow] });\n```\n\n----------------------------------------\n\nTITLE: Importing Email Provider Next Steps Component\nDESCRIPTION: Imports the EmailProviderNextSteps component from the email provider snippets directory for rendering additional setup instructions.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/webhook.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EmailProviderNextSteps } from '@/snippets/channels/email/email-provider-next-steps.tsx';\n```\n\n----------------------------------------\n\nTITLE: Importing API Page Component in JSX\nDESCRIPTION: This snippet imports and uses the APIPage component to render the API documentation. It references an external OpenAPI specification file and specifies the relevant operation for the delete topic endpoint.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_delete-topic.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/topics/{topicKey}\",\"method\":\"delete\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Installing @novu/react Package\nDESCRIPTION: Command to install the @novu/react package using npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/hooks.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/react\n```\n\n----------------------------------------\n\nTITLE: Channel Group Management with usePreferences\nDESCRIPTION: Example showing how to organize and manage preferences by channel type, specifically focusing on email preferences.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/hooks/use-preferences.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { View, Text, Switch } from 'react-native';\nfunction ChannelPreferences() {\n  const { preferences, updatePreference } = usePreferences();\n\n  const emailPreferences = preferences.filter((pref) => pref.channels.email !== undefined);\n\n  return (\n    <View>\n      <Text style={styles.heading}>Email Preferences</Text>\n      {emailPreferences.map((preference) => (\n        <View key={preference.template._id} style={styles.row}>\n          <Text>{preference.template.name}</Text>\n          <Switch\n            value={preference.channels.email}\n            onValueChange={(enabled) => {\n              updatePreference({\n                templateId: preference.template._id,\n                channelType: 'email',\n                enabled,\n              });\n            }}\n          />\n        </View>\n      ))}\n    </View>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Card Components in JSX\nDESCRIPTION: This snippet imports the Card and Cards components from the fumadocs-ui library. These components are likely used for creating card-based UI elements in the documentation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/account/sso.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, Cards } from 'fumadocs-ui/components/card';\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Tabs in Novu Inbox (New Method)\nDESCRIPTION: This snippet demonstrates how to implement multiple tabs in the Novu Inbox component using the new @novu/react library. It defines tabs for different notification categories based on tags.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nconst tabs = [\n  { label: 'All Notifications', value: [] },\n  { label: 'Security', value: ['security'] },\n  { label: 'Promotions', value: ['promotions'] },\n];\n\nfunction Novu() {\n  return (\n    <Inbox applicationIdentifier=\"YOUR_APP_ID\" subscriberId=\"YOUR_SUBSCRIBER_ID\" tabs={tabs} />\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu Studio for SvelteKit Application\nDESCRIPTION: This command restarts Novu Studio and points it to the correct port of the SvelteKit application. It uses the npx command to run the latest version of Novu CLI.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/svelte.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev --port <YOUR_SVELTE_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: Sending Email Attachments in Node.js\nDESCRIPTION: This code example shows how to send email attachments using Novu's API. Attachments can be provided in either buffer or base64 format and are included in the payload when triggering a workflow.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {\n    attachments: [\n      {\n        // buffer format\n        file: fs.readFileSync(__dirname + '/data/novu.jpeg'),\n        name: 'novu.jpeg',\n        mime: 'image/jpeg',\n      },\n      {\n        // base64 format\n        file: 'iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAFUlEQVR42mNkYPhfz0AEYBxVSF+FAP5FDvcfRYWgAAAAAElFTkSuQmCC',\n        name: 'blue.png',\n        mime: 'image/png',\n      }\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Accordions for Billing FAQs in JSX\nDESCRIPTION: This code snippet demonstrates how to create an accordion-style FAQ section using the Fumadocs UI components. It includes two accordion items: one explaining how to purchase business or enterprise tier subscriptions, and another showing how to access past invoices.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/account/billing.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Accordions>\n  <Accordion title=\"How do I purchase the business or enterprise tier?\">\n    Business or enterprise tier subscriptions can be purchased from billing settings in the Novu dashboard. Click on the avatar icon in the top right corner of the dashboard, then click on **Billing Plans** in the left side menu to access the billing settings. From there, you can select the desired subscription tier and complete the purchase.\n\n    <img\n      alt=\"Upgrade subscription from billing settings\"\n      src=\"/images/account/billing/purchase-business-tier.gif\"\n    />\n\n  </Accordion>\n\n  <Accordion title=\"How to access past invoices?\">\n    Past invoices can be accessed from the billing settings in the Novu dashboard. Click on the avatar icon in the top right corner of the dashboard, then click on **Billing Plans** on the side menu to access the billing settings. From there, click on the **Manage Subscription** option in your subscribed tier to view past invoices.\n\n    <img\n      alt=\"Access past invoices using manage subscription option\"\n      src=\"/images/account/billing/manage-invoices.gif\"\n    />\n\n  </Accordion>\n</Accordions>\n```\n\n----------------------------------------\n\nTITLE: Provider Overrides Object Interface in Novu Framework\nDESCRIPTION: Defines the TypeScript interface for Provider Overrides, showing the structure for customizing provider-specific notification content and passing through additional parameters to the provider API.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/index.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype ProvidersOverride = {\n  [key: ProviderEnum]: ProviderCallback;\n};\n\ntype ProviderCallback = (\n  params: ProviderOverridesParams\n) => ProviderOverrideOutput | Promise<ProviderOverrideOutput>;\n\ntype ProviderOverridesParams = {\n  controls: StepControls;\n  output: StepOutput;\n};\n\ninterface ProviderOverrideOutput {\n  // A map of the properties used by the Provider.\n  // These properties are strongly typed and validated\n  // against the underlying provider SDK.\n  [key in KnownProviderKey]: KnownProviderValue;\n  // The passthrough object is used to pass through\n  // the original request to the provider.\n  // These properties are not validated.\n  _passthrough?: {\n    body: Record<string, unknown>;\n    headers: Record<string, unknown>;\n    query: Record<string, unknown>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fumadocs Card Component for Changelog Link in JSX/React\nDESCRIPTION: This code snippet creates a card component with a link to Novu's changelog page. It uses the Fumadocs UI library's Card and Cards components, along with the MapIcon from Lucide React for visual enhancement.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/changelog.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    title=\"Novu's Changelog\"\n    icon={<MapIcon className=\"w-4 h-4\" />}\n    href=\"https://roadmap.novu.co/changelog\">\n    Learn about what's changed, new features, bug fixes, and see Novu's history across versions.\n  </Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Notification Center without Bell Icon (Old Implementation)\nDESCRIPTION: Example of how to display notifications as a list without the default bell icon using the old @novu/notification-center package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NovuProvider, NotificationCenter } from '@novu/notification-center';\n\nfunction Novu() {\n  return (\n    <NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APP_ID\">\n      <NotificationCenter colorScheme=\"dark\" />\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Implementing UserService in NestJS\nDESCRIPTION: This snippet shows an example implementation of a UserService in NestJS. It includes a method to get user information, which could be extended to fetch data from a database or external API in a real-world application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nestjs.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class UserService {\n  getUser(id: string) {\n    return {\n      name: 'John Doe',\n      email: `john.doe.${id}@example.com`,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Webhook Request Authenticity with HMAC SHA256\nDESCRIPTION: This TypeScript function verifies the authenticity of requests from Novu by comparing the HMAC SHA256 signature in the 'x-novu-signature' header with a locally computed hash. It ensures that webhook requests are genuinely from Novu and haven't been tampered with.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/push-webhook.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport crypto from 'crypto';\n\n// secret key added in step 3\nconst secretKey = 'YOUR_HMAC_SECRET_KEY';\n\n// function to handle webhook url route request\nasync function acceptNovuPushWebHookRequest(request, response) {\n  const payloadSentByNovu = request.body;\n  const hmacHashSentByNovu = request.headers['x-novu-signature'];\n\n  const actualHashValue = crypto\n    .createHmac('sha256', secretKey)\n    .update(payloadSentByNovu, 'utf-8')\n    .digest('hex');\n\n  if (hmacHashSentByNovu === actualHashValue) {\n    // handle the notification\n    console.log('Request sent by Novu');\n  } else {\n    throw new Error('Not a valid request');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Information Callout in JSX/React\nDESCRIPTION: This code snippet creates an information callout box emphasizing the community aspect of Novu's development. It uses the Callout component with an 'info' type to visually distinguish this content from the rest of the page.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/changelog.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\n  Remember, we're not building just another product, but a community of passionate developers who\n  shape its evolution. Our changelog isn't just a list of updates but a reflection of our journey\n  together. Your voice matters, and your ideas and feedback are what fuel our progress and shape our\n  future. So, join us in this adventure, and – Let's build something amazing, one feature at a time!\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Inline Styles Object Example\nDESCRIPTION: Shows how to style the Inbox component using inline style objects.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nconst appearance = {\n  elements: {\n    bellIcon: {\n      padding: '1rem',\n      backgroundColor: 'white',\n      borderRadius: '50%',\n    },\n    notification: {\n      backgroundColor: 'white',\n      borderRadius: '0.5rem',\n      boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n    },\n  },\n};\n\nexport function Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      appearance={appearance}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating the Notification Center into Remix Layout\nDESCRIPTION: Code showing how to integrate the NotificationCenter component into the main Remix application layout. This places the notification bell in the navigation bar for all routes.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/remix.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NotificationCenter } from \"~/components/notification-center\";\nimport type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n} from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"New Remix App\" },\n    { name: \"description\", content: \"Welcome to Remix!\" },\n  ];\n};\n\nexport default function App() {\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <nav>\n          <NotificationCenter />\n        </nav>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference and Reuse in JSON Schema\nDESCRIPTION: This schema demonstrates how to define reusable component definitions and reference them throughout a schema. It includes address components that are reused for billing and shipping, and a recursive node structure for hierarchical data.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"definitions\": {\n    \"address\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"street_address\": {\n          \"type\": \"string\"\n        },\n        \"city\": {\n          \"type\": \"string\"\n        },\n        \"state\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"street_address\", \"city\", \"state\"]\n    },\n    \"node\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"children\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/node\"\n          }\n        }\n      }\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"billing_address\": {\n      \"title\": \"Billing address\",\n      \"$ref\": \"#/definitions/address\"\n    },\n    \"shipping_address\": {\n      \"title\": \"Shipping address\",\n      \"$ref\": \"#/definitions/address\"\n    },\n    \"tree\": {\n      \"title\": \"Recursive references\",\n      \"$ref\": \"#/definitions/node\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Info Callout Component in React Documentation\nDESCRIPTION: This code snippet demonstrates using a Callout component of type \"info\" to display an important message about the roadmap being a living document that evolves based on community input.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/roadmap.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\n  Remember, this roadmap is a living document that evolves based on your input and the direction the\n  community decides to take. Your voice matters, and we're excited to work together in building a\n  robust notification infrastructure solution that meets everyone's needs.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Rendering Notification List with Custom Display\nDESCRIPTION: Implementation of the Notifications component to display a list of notifications with custom rendering for each notification item, including body content and formatted date.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.model.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Notifications } from \"@novu/react\";\n\nfunction NotificationList() {\n  return (\n    <Notifications\n      onNotificationClick={(notification) => {\n        // Handle notification click\n        console.log(notification);\n      }}\n      renderNotification={({ body, createdAt }) => (\n        <div className=\"flex gap-2 p-2\">\n          <div className=\"flex-1\">\n            <p>{body}</p>\n            <time className=\"text-sm text-gray-500\">\n              {new Date(createdAt).toLocaleDateString()}\n            </time>\n          </div>\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Notification Actions (Old Implementation)\nDESCRIPTION: Example of how to handle user interactions with notifications using the old @novu/notification-center package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NovuProvider,\n  PopoverNotificationCenter,\n  NotificationBell,\n  IMessage,\n} from '@novu/notification-center';\n\nfunction Novu() {\n  function handleOnNotificationClick(message: IMessage) {\n    // your logic to handle the notification click\n    if (message?.cta?.data?.url) {\n      window.location.href = message.cta.data.url;\n    }\n  }\n\n  return (\n    <NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APP_ID\">\n      <PopoverNotificationCenter colorScheme=\"dark\" onNotificationClick={handleOnNotificationClick}>\n        {({ unseenCount }) => <NotificationBell unseenCount={unseenCount} />}\n      </PopoverNotificationCenter>\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt Application with Novu Integration\nDESCRIPTION: Commands to start a Nuxt application with the Novu Endpoint configured. Includes an additional command to restart the Novu development server if the Nuxt application is running on a non-default port.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nuxt.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-novu-app && npm run dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev --port <YOUR_NUXT_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token with Novu Node.js SDK for Pushpad Integration\nDESCRIPTION: This code shows how to set the Pushpad user ID as the device token for a Novu subscriber using the Node.js SDK. It requires the Novu secret key and the subscriber ID, along with the Pushpad user ID that was assigned during SDK setup.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/pushpad.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', PushProviderIdEnum.Pushpad, {\n  // the user ID (uid) that you used for Pushpad\n  deviceTokens: ['user123'],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Notifications Component in React\nDESCRIPTION: Example showing how to implement the Notifications component from @novu/react with custom notification click handling and rendering. The component handles displaying notifications with a custom renderer for body content and creation date.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Notifications } from \"@novu/react\";\n\nfunction NotificationList() {\n  return (\n    <Notifications\n      onNotificationClick={(notification) => {\n        // Handle notification click\n        console.log(notification);\n      }}\n      renderNotification={({ body, createdAt }) => (\n        <div className=\"flex gap-2 p-2\">\n          <div className=\"flex-1\">\n            <p>{body}</p>\n            <time className=\"text-sm text-gray-500\">\n              {new Date(createdAt).toLocaleDateString()}\n            </time>\n          </div>\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Liquid Filter\nDESCRIPTION: This snippet illustrates how to use the 'date' Liquid filter to format subscription renewal dates in a user-friendly manner.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/template-editor.mdx#2025-04-11_snippet_4\n\nLANGUAGE: liquid\nCODE:\n```\nYour subscription will renew on {{ payload.renewalDate | date: \"%B %d, %Y\" }}.\n```\n\n----------------------------------------\n\nTITLE: Using anyOf for Alternative Schema Validation\nDESCRIPTION: This schema demonstrates the anyOf keyword to allow multiple validation options. It includes two methods of identification (name-based or ID-based) and allows array items to match either of two property structures.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"age\": {\n      \"type\": \"integer\",\n      \"title\": \"Age\"\n    },\n    \"items\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"anyOf\": [\n          {\n            \"properties\": {\n              \"foo\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          {\n            \"properties\": {\n              \"bar\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ]\n      }\n    }\n  },\n  \"anyOf\": [\n    {\n      \"title\": \"First method of identification\",\n      \"properties\": {\n        \"firstName\": {\n          \"type\": \"string\",\n          \"title\": \"First name\",\n          \"default\": \"Chuck\"\n        },\n        \"lastName\": {\n          \"type\": \"string\",\n          \"title\": \"Last name\"\n        }\n      }\n    },\n    {\n      \"title\": \"Second method of identification\",\n      \"properties\": {\n        \"idCode\": {\n          \"type\": \"string\",\n          \"title\": \"ID code\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Kannel SMS Service in bash\nDESCRIPTION: This configuration snippet defines an SMS service in Kannel, specifying how to handle SMS requests. It includes settings for authentication, message concatenation, and maximum message count.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/sms/(providers)/kannel.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngroup = sendsms-user\nusername = YourUsername\npassword = YourPassword\nconcatenation = true\nmax-messages = 3\n```\n\n----------------------------------------\n\nTITLE: Example Provider Implementation\nDESCRIPTION: TypeScript implementation of a new email provider class implementing IEmailProvider interface\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  ChannelTypeEnum,\n  ISendMessageSuccessResponse,\n  IEmailOptions,\n  IEmailProvider,\n} from '@novu/stateless';\n\nexport class ExampleProviderEmailProvider implements IEmailProvider {\n  id = 'example-provider';\n  channelType = ChannelTypeEnum.EMAIL as ChannelTypeEnum.EMAIL;\n\n  constructor(\n    private config: {\n      apiKey: string;\n    }\n  ) {}\n\n  async sendMessage(options: IEmailOptions): Promise<ISendMessageSuccessResponse> {\n    return {\n      id: 'id_returned_by_provider',\n      date: 'current_time',\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Novu Workflow with Validated Payload\nDESCRIPTION: Example of triggering a Novu workflow with a payload that matches the defined schema. This demonstrates how to provide the required properties (post_id, comment) and optional properties (author_name) to the trigger method.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/payload.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnovu.trigger('comment-on-post', {\n  to: 'subscriber_id',\n  payload: {\n    post_id: 1234,\n    author_name: 'John Doe',\n    comment: 'Looks good!',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Provider Credentials Configuration\nDESCRIPTION: Configuration for provider credentials including API key and base email settings\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const exampleProviderConfig: IConfigCredentials[] = [\n  {\n    key: CredentialsKeyEnum.ApiKey,\n    displayName: 'API Key',\n    description: 'This is API key for example provider',\n    type: 'text',\n    required: true,\n  },\n  ...mailConfigBase,\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Objects with Complex Values\nDESCRIPTION: This schema demonstrates how to create enumerated objects with complex values (location objects with coordinates) rather than simple strings. It includes examples of using these complex enums in different UI contexts like dropdowns, radio buttons, and checkboxes.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"definitions\": {\n    \"locations\": {\n      \"enumNames\": [\"New York\", \"Amsterdam\", \"Hong Kong\"],\n      \"enum\": [\n        {\n          \"name\": \"New York\",\n          \"lat\": 40,\n          \"lon\": 74\n        },\n        {\n          \"name\": \"Amsterdam\",\n          \"lat\": 52,\n          \"lon\": 5\n        },\n        {\n          \"name\": \"Hong Kong\",\n          \"lat\": 22,\n          \"lon\": 114\n        }\n      ]\n    }\n  },\n  \"type\": \"object\",\n  \"properties\": {\n    \"location\": {\n      \"title\": \"Location\",\n      \"$ref\": \"#/definitions/locations\"\n    },\n    \"locationRadio\": {\n      \"title\": \"Location Radio\",\n      \"$ref\": \"#/definitions/locations\"\n    },\n    \"multiSelect\": {\n      \"title\": \"Locations\",\n      \"type\": \"array\",\n      \"uniqueItems\": true,\n      \"items\": {\n        \"$ref\": \"#/definitions/locations\"\n      }\n    },\n    \"checkboxes\": {\n      \"title\": \"Locations Checkboxes\",\n      \"type\": \"array\",\n      \"uniqueItems\": true,\n      \"items\": {\n        \"$ref\": \"#/definitions/locations\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Kannel Server in bash\nDESCRIPTION: This command starts the Kannel bearerbox, which is the core component of Kannel responsible for handling SMS traffic. It requires the path to the kannel.conf configuration file.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/sms/(providers)/kannel.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbearerbox /path/to/kannel.conf\n```\n\n----------------------------------------\n\nTITLE: Customizing Bell Component with Unread Count\nDESCRIPTION: Example of implementing a notification bell with a custom icon and unread count indicator. Uses the Bell component from @novu/react with a custom renderer function.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react/index.model.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Bell } from \"@novu/react\";\nimport { BellIcon } from \"lucide-react\";\n\nfunction NotificationBell() {\n  return (\n    <Bell\n      renderBell={(unreadCount) => (\n        <div className=\"relative\">\n          <BellIcon className=\"h-6 w-6\" />\n          {unreadCount > 0 && (\n            <span className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center\">\n              {unreadCount}\n            </span>\n          )}\n        </div>\n      )}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running API Tests for Novu\nDESCRIPTION: Commands to execute the API tests in Novu. These commands start the worker in test mode and then run the end-to-end API tests. The tests create a temporary test database instance that is removed after test completion.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:worker:test\nnpm run start:e2e:api\n```\n\n----------------------------------------\n\nTITLE: Custom Regional Configuration Example\nDESCRIPTION: Example of running the Novu CLI with a custom port and dashboard URL for the EU region. Shows how to combine multiple CLI flags for a specific configuration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/studio.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu@latest dev --port 3002 --dashboard-url https://eu.dashboard.novu.co\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Metadata for Subscriber Preferences Endpoint in YAML\nDESCRIPTION: YAML frontmatter defining the OpenAPI metadata for the GET endpoint to retrieve subscriber preferences. It specifies the HTTP method, route, and other metadata used for API documentation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_get-subscriber-preferences.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Get subscriber preferences\ndescription: Get subscriber global and workflow specific preferences\nfull: true\n_openapi:\n  method: GET\n  route: /v2/subscribers/{subscriberId}/preferences\n  toc: []\n  structuredData:\n    headings: []\n    contents:\n      - content: Get subscriber global and workflow specific preferences\n---\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with localtunnel\nDESCRIPTION: Command to expose local server using localtunnel for testing webhooks.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx localtunnel 3000\n```\n\n----------------------------------------\n\nTITLE: Using if-then-else for Conditional Schema Validation\nDESCRIPTION: This schema demonstrates conditional validation using if-then-else constructs within allOf. It changes the required properties and allowed values for the food property based on the animal type (Cat or Fish).\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"animal\": {\n      \"enum\": [\"Cat\", \"Fish\"]\n    }\n  },\n  \"allOf\": [\n    {\n      \"if\": {\n        \"properties\": {\n          \"animal\": {\n            \"const\": \"Cat\"\n          }\n        }\n      },\n      \"then\": {\n        \"properties\": {\n          \"food\": {\n            \"type\": \"string\",\n            \"enum\": [\"meat\", \"grass\", \"fish\"]\n          }\n        },\n        \"required\": [\"food\"]\n      }\n    },\n    {\n      \"if\": {\n        \"properties\": {\n          \"animal\": {\n            \"const\": \"Fish\"\n          }\n        }\n      },\n      \"then\": {\n        \"properties\": {\n          \"food\": {\n            \"type\": \"string\",\n            \"enum\": [\"insect\", \"worms\"]\n          },\n          \"water\": {\n            \"type\": \"string\",\n            \"enum\": [\"lake\", \"sea\"]\n          }\n        },\n        \"required\": [\"food\", \"water\"]\n      }\n    },\n    {\n      \"required\": [\"animal\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inbox Component Reference\nDESCRIPTION: Reference to the Novu Inbox component that can be integrated into applications.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/what-is-novu.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Method href=\"/platform/inbox/react/components/inbox\">{`<Inbox />`}</Method>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action for Novu Workflow Deployment\nDESCRIPTION: GitHub Action configuration that automates the deployment of Novu workflows. The action syncs workflow states to Novu Cloud using authentication via secret key and requires a bridge URL for notification entity definitions. It can be triggered manually or automatically on pushes to the main branch.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/deployment/actions.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy workflow State to Novu\n\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      # https://github.com/novuhq/actions-novu-sync\n      - name: Sync State to Novu\n        uses: novuhq/actions-novu-sync@v2\n        with:\n          # The secret key used to authenticate with Novu Cloud\n          # To get the secret key, go to https://web.novu.co/api-keys.\n          # Required.\n          secret-key: ${{ secrets.NOVU_SECRET_KEY }}\n\n          # The publicly available endpoint hosting the bridge application\n          # where notification entities (eg. workflows, topics) are defined.\n          # Required.\n          bridge-url: ${{ secrets.NOVU_BRIDGE_URL }}\n\n          # The Novu Cloud API URL to sync with.\n          # Optional.\n          # Defaults to https://api.novu.co\n          api-url: https://api.novu.co\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specifications for In-App Notification Feed Retrieval\nDESCRIPTION: This code snippet specifies the OpenAPI details for the GET request to fetch a subscriber's in-app notification feed. It includes the HTTP method and the route with a subscriberId parameter.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Get in-app notification feed for a particular subscriber\nfull: true\n_openapi:\n  method: GET\n  route: /v1/subscribers/{subscriberId}/notifications/feed\n  toc: []\n  structuredData:\n    headings: []\n    contents: []\n---\n```\n\n----------------------------------------\n\nTITLE: Customizing Avatar Icons with @novu/framework\nDESCRIPTION: Example of setting custom avatar images for notifications at the workflow definition level using the @novu/framework library with the avatar property.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nworkflow('welcome-notification', async (step) => {\n  await step.inApp('inbox', async () => ({\n    subject: 'Welcome to Our Service!',\n    body: 'We are thrilled to have you onboard.',\n    avatar: 'https://example.com/path-to-your-avatar-image.png',\n  }));\n});\n```\n\n----------------------------------------\n\nTITLE: Starting SvelteKit Application with Novu Endpoint\nDESCRIPTION: This command starts the SvelteKit application with the Novu endpoint configured. It assumes the application is named 'my-novu-app' and uses the default npm run dev command.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/svelte.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-novu-app && npm run dev\n```\n\n----------------------------------------\n\nTITLE: Triggering Novu Email with SendGrid Template Data in Node.js\nDESCRIPTION: This snippet demonstrates how to send a notification using Novu with SendGrid template data. It shows how to use the customData field to pass dynamic template data like product items, receipt information, and address details when triggering a workflow for a subscriber.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/sendgrid.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  Novu\n} from \"@novu/node\";\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.trigger(\"workflowIdentifier\", {\n  to: \"subscriberId\",\n  payload: {},\n  overrides: {\n    email: {\n      customData: {\n        dynamicTemplateData: {\n          total: \"$ 239.85\",\n          items: [{\n            text: \"New Line Sneakers\",\n            image: \"https://marketing-image-production.s3.amazonaws.com/uploads/8dda1131320a6d978b515cc04ed479df259a458d5d45d58b6b381cae0bf9588113e80ef912f69e8c4cc1ef1a0297e8eefdb7b270064cc046b79a44e21b811802.png\",\n            price: \"$ 79.95\",\n          }, {\n            text: \"Old Line Sneakers rlfjrjrh4hr4rh4\",\n            image: \"https://marketing-image-production.s3.amazonaws.com/uploads/3629f54390ead663d4eb7c53702e492de63299d7c5f7239efdc693b09b9b28c82c924225dcd8dcb65732d5ca7b7b753c5f17e056405bbd4596e4e63a96ae5018.png\",\n            price: \"$ 79.95\",\n          }, ],\n          receipt: true,\n          name: \"Sample Name\",\n          address01: \"1234 Fake St.\",\n          address02: \"Apt. 123\",\n          city: \"Place\",\n          state: \"CO\",\n          zip: \"80202\",\n        },\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Topic Configuration YAML\nDESCRIPTION: YAML frontmatter configuration for the API documentation page, defining the endpoint path, method and metadata.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_assign.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Subscribers addition\ndescription: Add subscribers to a topic by key\nfull: true\n_openapi:\n  method: POST\n  route: /v1/topics/{topicKey}/subscribers\n  toc: []\n  structuredData:\n    headings: []\n    contents:\n      - content: Add subscribers to a topic by key\n```\n\n----------------------------------------\n\nTITLE: Configuring Kannel SMSC Settings in bash\nDESCRIPTION: This snippet shows the basic configuration for Kannel's SMSC (Short Message Service Center) settings in the kannel.conf file. It includes parameters for connecting to the SMS provider and setting up authentication.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/sms/(providers)/kannel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngroup = smsc\nsmsc = smpp\nsmsc-id = YourSMSCID\nhost = SMSC_Hostname_or_IP\nport = SMSC_Port\nsystem-type = SMSC_System_Type\nsmsc-username = YourUsername\nsmsc-password = YourPassword\nmax-pending-submits = 10\nallow-ip = \"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Notification Center Component in Remix\nDESCRIPTION: Implementation of a NotificationCenter component using Novu's Inbox. This component requires an application identifier and subscriber ID, and integrates with Remix's navigation system.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/remix.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { Inbox } from '@novu/react';\nimport { useNavigate } from '@remix-run/react';\n\nexport function NotificationCenter() {\n  const navigate = useNavigate();\n  \n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      routerPush={(path: string) => navigate(path)}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering MailerSend Template with cURL\nDESCRIPTION: Shows how to trigger a MailerSend email template using Novu's REST API via cURL. Includes the complete request structure with template ID and personalization data.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/mailersend.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'https://api.novu.co/v1/events/trigger' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--header 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n--data '{\n    \"name\": \"workflowIdentifier\",\n    \"to\":  [\"subscriberId\"],\n    \"payload\": {},\n    \"overrides\": {\n        \"email\": {\n            \"customData\": {\n                \"templateId\": \"mailersend-template-id\",\n                \"personalization\": [{\n                    \"email\": \"recipient@email.com\",\n                    \"data\": {\n                        \"items\": {\n                            \"price\": \"\",\n                            \"product\": \"\",\n                            \"quantity\": \"\"\n                        },\n                        \"order\": {\n                            \"date\": \"\",\n                            \"order_number\": \"\",\n                            \"billing_address\": \"\",\n                            \"customer_message\": \"\"\n                        },\n                        \"store\": {\n                            \"name\": \"\"\n                        },\n                        \"invoice\": {\n                            \"total\": \"\",\n                            \"subtotal\": \"\",\n                            \"pay_method\": \"\"\n                        },\n                        \"customer\": {\n                            \"name\": \"\",\n                            \"email\": \"\",\n                            \"phone\": \"\"\n                        }\n                    }\n                }]\n            }\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Provider Test Template\nDESCRIPTION: Basic test case template for the example provider implementation\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ExampleProviderEmailProvider } from './example-provider.provider';\n\ntest('should trigger example-provider library correctly', async () => {});\n```\n\n----------------------------------------\n\nTITLE: Creating React Email Template\nDESCRIPTION: Sample email template using React Email components that renders an HTML email with a styled button.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/remix-react-email.mdx#2025-04-11_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { Button, Html } from \"@react-email/components\";\n\nfunction Email(props) {\n  return (\n    <Html>\n      <Button\n        href=\"https://example.com\"\n        style={{ background: \"#000\", color: \"#fff\", padding: \"12px 20px\" }}\n      >\n        Click me\n      </Button>\n    </Html>\n  );\n}\n\nexport function renderEmail(inputs) {\n  return render(<Email {...inputs} />);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation with Fumadocs\nDESCRIPTION: This code snippet uses a custom React component to render the API documentation. It references an external OpenAPI specification file and specifies the operations to be displayed.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_get-notifications-feed.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/subscribers/{subscriberId}/notifications/feed\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Triggering FCM Notification with Novu SDK\nDESCRIPTION: This TypeScript code snippet demonstrates how to trigger an FCM notification using the Novu SDK. It includes options for data notifications, image URLs, and various FCM-specific overrides.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/fcm.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  payload: {\n    abc: 'def', // If the notification is a data notification, the payload will be sent as the data\n  },\n  overrides: {\n    fcm: {\n      // type: 'data' => will turn this into an FCM data notification, where the payload is sent as a data notification. If the type is not set, you can use the \"data\" override to send notification messages with optional data payload\n      type: 'data',\n\n      // URL of an image to be displayed in the notification.\n      imageUrl: 'https://domain.com/image.png',\n\n      // If type is not set, you can use the \"data\" override to send notification messages with optional data payload\n      data: {\n        key: 'value',\n      },\n\n      // Check FCM Overrides section above for these types\n      android: {},\n      apns: {},\n      webPush: {},\n      fcmOptions: {},\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Cypress Test Runner for Debugging\nDESCRIPTION: Command to open the Cypress test runner UI for debugging tests in the Novu web application. This provides an interactive interface for selecting and running tests with visual feedback.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncd apps/web && npm run cypress:open\n```\n\n----------------------------------------\n\nTITLE: Embedding API Documentation Component in Markdown\nDESCRIPTION: This code snippet embeds a React-like component called APIPage, which is likely used to render the API documentation. It specifies the OpenAPI specification document and the specific operation to display.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_update-subscriber-online-flag.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/subscribers/{subscriberId}/online-status\",\"method\":\"patch\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Stripe and Novu\nDESCRIPTION: Environment variables required for Stripe and Novu integration, including API keys and webhook secrets.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNOVU_SECRET_KEY=novu_secret_...\nSTRIPE_SECRET_KEY=sk_test_...\nSTRIPE_WEBHOOK_SECRET=whsec_...\n```\n\n----------------------------------------\n\nTITLE: API Route Definition in YAML\nDESCRIPTION: YAML frontmatter defining the API endpoint configuration for retrieving unseen notification counts. Specifies the HTTP method as GET and the route path with a subscriber ID parameter.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_get-unseen-count.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Get the unseen in-app notifications count for subscribers feed\nfull: true\n_openapi:\n  method: GET\n  route: /v1/subscribers/{subscriberId}/notifications/unseen\n  toc: []\n  structuredData:\n    headings: []\n    contents: []\n```\n\n----------------------------------------\n\nTITLE: Setting Subscriber Device Tokens - cURL\nDESCRIPTION: Example showing how to set APNS device tokens for a subscriber using a direct API call via cURL.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/apns.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"apns\",\n  \"deviceTokens\": [\"token1\", \"token2\"],\n  \"integrationIdentifier\": \"apns-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Bridge Application Setup Commands\nDESCRIPTION: Commands to initialize and run the bridge application for workflow definitions using @novu/framework.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/deploy-with-docker.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize the bridge application\nnpx novu@latest init \\\n  --secret-key=<secret_key> \\\n  --api-url=http://localhost:3000\n\n# Install dependencies\nnpm install\n\n# Start the bridge application\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: All Channels Enabled and Editable Workflow Preferences (TypeScript/TSX)\nDESCRIPTION: This snippet demonstrates how to configure workflow preferences to enable all channels and make them editable. It uses the 'all' property to set global preferences.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/workflow.mdx#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst newWorkflow = workflow(\n  'all-enabled-editable',\n  async ({ step }) => {\n    await step.inApp('send-in-app', () => ({\n      body: 'Hello there',\n    }));\n  },\n  {\n    preferences: {\n      all: { enabled: true },\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: API Route Configuration in YAML\nDESCRIPTION: YAML configuration defining the bulk subscriber creation endpoint specifications including method and route.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Bulk create subscribers\ndescription: |\n        Using this endpoint you can create multiple subscribers at once, to avoid multiple calls to the API.\n        The bulk API is limited to 500 subscribers per request.\n      \nfull: true\n_openapi:\n  method: POST\n  route: /v1/subscribers/bulk\n  toc: []\n  structuredData:\n    headings: []\n    contents:\n      - content: |\n                Using this endpoint you can create multiple subscribers at once, to avoid multiple calls to the API.\n                The bulk API is limited to 500 subscribers per request.\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for Onesignal Push Notifications using cURL\nDESCRIPTION: This cURL command shows how to set the device token (OneSignal player_id) for a Novu subscriber using the REST API. It sends a PUT request to update the subscriber's credentials with the OneSignal player_id.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/onesignal.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"one-signal\",\n  \"deviceTokens\": [\"ad0452ca-3ca7-43b5-bf9b-fa93fd322035\"],\n  \"integrationIdentifier\": \"one-signal-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Keep Alive Beacon JSON Structure in Novu Telemetry\nDESCRIPTION: This JSON structure shows the format of the keep-alive beacon sent by Novu every hour to confirm operational status. This data is collected regardless of telemetry settings and includes system information like memory usage, hostname, and instance identifiers.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/telemetry.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"freeMemory\": 115703808,\n  \"hostname\": \"somemachine\",\n  \"instanceId\": \"ba54fb29-6422-4a83-a0e4-951d767efa73\",\n  \"ipAddress\": \"192.168.1.4\",\n  \"platform\": \"darwin\",\n  \"release\": \"23.6.0\",\n  \"timestamp\": \"2024-10-04T11:54:14\",\n  \"totalMemory\": 8589934592\n}\n```\n\n----------------------------------------\n\nTITLE: API Page Component Implementation\nDESCRIPTION: JSX component implementation for rendering the API documentation page using Fumadocs.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_bulk-create-subscribers.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/subscribers/bulk\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Creating React Email Template Component\nDESCRIPTION: TypeScript React component that defines an email template structure using React Email components. Includes a renderEmail function to convert the template to HTML.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/react-email.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n    Body,\n    Container,\n    Head,\n    Html,\n    render,\n} from '@react-email/components';\nimport * as React from \"react\";\n\ninterface TestEmailProps {\n    name: string\n}\n\nexport const TestEmailTemplate = ({ name }: TestEmailProps) => {\n    return (\n        <Html>\n            <Head />\n            <Body>\n                <Container>\n                    Hello {name} welcome to your first React E-mail template!\n                </Container>\n            </Body>\n        </Html>\n    );\n};\n\nexport default TestEmailTemplate;\n\nexport function renderEmail(name: string) {\n    return render(<TestEmailTemplate name={name} />);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation with Custom React Component in JSX\nDESCRIPTION: JSX code snippet using a custom APIPage component to render the API documentation. It references an external OpenAPI specification file and specifies the relevant operation for the subscriber preferences endpoint.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_get-subscriber-preferences.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v2/subscribers/{subscriberId}/preferences\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Triggering Push Notification Workflow with Device Tokens in TypeScript\nDESCRIPTION: This snippet demonstrates how to trigger a push notification workflow using Novu, passing device tokens in the payload for just-in-time token management. It shows how to structure the request with subscriber ID and FCM device tokens.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnovu.trigger('workflow-id', {\n  to: {\n    subscriberId: 'subscriber-id',\n    channels: [\n      {\n        providerId: 'fcm',\n        credentials: {\n          deviceTokens: ['token-1', 'token-2'],\n        },\n      },\n    ],\n  },\n  payload: {},\n});\n```\n\n----------------------------------------\n\nTITLE: Installing React Email Components\nDESCRIPTION: Command to install the required React Email components and dependencies for a Remix application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/remix-react-email.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @react-email/components react-email\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Clerk and Novu\nDESCRIPTION: This snippet shows the necessary environment variables to be added to the .env.local file for Clerk and Novu integration, including Clerk's publishable key, secret key, signing secret, and Novu's secret key.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/clerk.mdx#2025-04-11_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nNEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...\nCLERK_SECRET_KEY=sk_test_...\nCLERK_SIGNING_SECRET=whsec_...\nNOVU_SECRET_KEY=novu_secret_...\n```\n\n----------------------------------------\n\nTITLE: Rendering API Page Component in JSX\nDESCRIPTION: This code snippet renders an APIPage component, likely used to display API documentation. It references an external Speakeasy API specification and defines the HTTP method and path for updating subscriber credentials.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_update-subscriber-channel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/subscribers/{subscriberId}/credentials\",\"method\":\"put\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Managing Push Device Tokens for Subscribers in TypeScript\nDESCRIPTION: This code snippet illustrates how to manage push device tokens for subscribers using Novu's Node.js SDK. It demonstrates fetching subscriber details, removing specific device tokens, and updating subscriber credentials with new device tokens for FCM push notifications.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu, PushProviderIdEnum } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\n// fetch subscriber details\nconst subscriber = await novu.subscribers.get('subscriberId');\n\n// get current device tokens from subscriber credentials for the provider\nconst currentDeviceTokens = subsciber.data.data.channels.find(\n  // \\_integrationId can also be checked in place of providerId ;\n  (channel) => channel.providerId === PushProviderIdEnum.FCM,\n).credentials.deviceTokens;\n\n// remove all device tokens\nawait this.novu.subscribers.setCredentials(\n  'subscriberId',\n  PushProviderIdEnum.FCM, {\n    deviceTokens: []\n  },\n);\n\n// remove the token you want to remove\nconst newDeviceTokens = currentDeviceTokens.filter(\n  (token) => token !== 'token-to-be-removed',\n);\n\n// update subscriber credentials with new device tokens\nawait this.novu.subscribers.setCredentials(\n  'subscriberId',\n  PushProviderIdEnum.FCM, {\n    deviceTokens: newDeviceTokens\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Email Components\nDESCRIPTION: Command to install the necessary Svelte email components package using npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/svelte-email.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install svelte-email\n```\n\n----------------------------------------\n\nTITLE: API Page Component Implementation\nDESCRIPTION: JSX component that renders the API documentation page using the APIPage component with Speakeasy specification and PATCH operation configuration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/subscribers/{subscriberId}/credentials\",\"method\":\"patch\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Novu Workflows for Security Notifications\nDESCRIPTION: This code snippet demonstrates how to add tags to Novu workflows for login alerts and password changes. It uses the 'workflow' function from the Novu Framework SDK to create in-app notifications with the 'security' tag.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/tags.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { workflow } from '@novu/framework';\n\nworkflow(\n  'acme-login-alert',\n  async ({ step, payload }) => {\n    await step.inApp('inbox', async () => {\n      return {\n        subject: 'New Login Detected',\n        body: \"We noticed a login from a new device or location. If this wasn't you, change your password immediately.\",\n      };\n    });\n  },\n  {\n    tags: ['security'],\n  }\n);\n\nworkflow(\n  'acme-password-change',\n  async ({ step, payload }) => {\n    await step.inApp('inbox', async () => {\n      return {\n        subject: 'Password Changed',\n        body: \"Your password was successfully updated. If you didn't request this, contact support right away.\",\n      };\n    });\n  },\n  {\n    tags: ['security'],\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation with Custom Component in JSX\nDESCRIPTION: This JSX snippet uses a custom APIPage component to render the API documentation for the subscriber removal endpoint. It references an external OpenAPI specification file and specifies the relevant operation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_remove-subscribers.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/topics/{topicKey}/subscribers/removal\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Object Schema in JSON\nDESCRIPTION: A basic JSON Schema definition for an object with required firstName and lastName properties, plus an optional age property. This demonstrates the fundamental structure of a JSON Schema object with property types, titles, and default values.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"firstName\", \"lastName\"],\n  \"properties\": {\n    \"firstName\": {\n      \"type\": \"string\",\n      \"title\": \"First name\",\n      \"default\": \"Chuck\"\n    },\n    \"lastName\": {\n      \"type\": \"string\",\n      \"title\": \"Last name\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"title\": \"Age\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Overrides with Novu Node.js SDK\nDESCRIPTION: This snippet demonstrates how to use the overrides field to customize SMS properties like recipient, sender, and content when triggering a notification workflow with Novu's Node.js SDK.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/sms/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Novu } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nnovu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<SUBSCRIBER_ID>',\n  },\n  overrides: {\n    sms: {\n      to: '+123012345678',\n      from: 'Novu Team',\n      content: 'This SMS message is from overrides',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Svelte Email Template\nDESCRIPTION: A Svelte component that defines an email template using svelte-email components. The template accepts a name prop and renders a welcome message.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/svelte-email.mdx#2025-04-11_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n    import {\n        Body,\n        Container,\n        Head,\n        Html,\n        Preview,\n    } from 'svelte-email';\n\n    export let name: string;\n</script>\n\n<Html>\n    <Head />\n    <Preview>Welcome to Svelte Email</Preview>\n    <Body>\n        <Container>\n            <h1>Welcome, {name}!</h1>\n            <p>Thanks for trying Svelte Email. We're thrilled to have you on board.</p>\n        </Container>\n    </Body>\n</Html>\n```\n\n----------------------------------------\n\nTITLE: Response Format for Adding Subscribers to a Topic in Novu\nDESCRIPTION: This JSON snippet shows the response format when adding subscribers to a topic. It includes arrays for successful and failed additions.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/concepts/topics.mdx#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"succeeded\": [\"subscriber-id-1\", \"subscriber-id-2\"],\n  \"failed\": {\n    \"notFound\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Documentation Structure in Markdown\nDESCRIPTION: This snippet defines the structure and metadata for the API documentation page. It includes the title, description, and OpenAPI specifications for the delete topic endpoint.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_delete-topic.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Delete topic\ndescription: Delete a topic by its topic key if it has no subscribers\nfull: true\n_openapi:\n  method: DELETE\n  route: /v1/topics/{topicKey}\n  toc: []\n  structuredData:\n    headings: []\n    contents:\n      - content: Delete a topic by its topic key if it has no subscribers\n---\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications Using Mattermost Webhook Integration with Novu\nDESCRIPTION: This code demonstrates how to integrate Mattermost via webhooks using the Novu SDK. It shows how to set webhook credentials for a subscriber and then trigger a notification that will be sent to Mattermost.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/mattermost.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu, ChatProviderIdEnum } from '@novu/node';\n\nconst novu = new Novu('<NOVU_SECRET_KEY>');\n\nawait novu.subscribers.setCredentials('subscriberId', ChatProviderIdEnum.Mattermost, {\n  webhookUrl: '<enter-mattermost-webhook-url>',\n});\n\n// Send a notification to Mattermost using the subscriber ID and payload.\nawait novu.trigger('<WORKFLOW_TRIGGER_IDENTIFIER>', {\n  to: {\n    subscriberId: '<UNIQUE_SUBSCRIBER_IDENTIFIER>',\n  },\n  payload: {\n    message: 'This is a notification from my application!',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Novu Workflow with Svelte Email Template\nDESCRIPTION: A TypeScript implementation of a Novu workflow that uses the rendered Svelte email template. It defines payload schema validation with Zod and sends an email using the template.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/svelte-email.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { workflow } from '@novu/framework';\nimport { renderEmail } from './emails/test-email';\nimport { z } from 'zod';\n\nexport const testWorkflow = workflow('test-workflow', async ({ step, payload }) => {\n    await step.email('send-email', async (controls) => {\n        return {\n            subject: controls.subject,\n            body: renderEmail(payload.userName),\n        };\n    },\n    {\n        controlSchema: z.object({\n            subject: z.string().default('A Successful Test on Novu from {{userName}}'),\n        }),\n    });\n}, {\n    payloadSchema: z.object({\n        userName: z.string().default('John Doe'),\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Component in JSX\nDESCRIPTION: A JSX component that renders API documentation for the GET /v1/messages endpoint using the Fumadocs APIPage component. The component displays API operations with code samples.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/messages/messages-controller_get-messages.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/messages\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Defining Step Controls with JSON Schema in TypeScript\nDESCRIPTION: This code snippet illustrates how to define step controls using JSON Schema in a Novu workflow. It includes schema for email subject, hiding banner, and customizing components.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/controls.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nworkflow(\"new-signup\", async ({ step, payload }) => {\n  await step.email(\n    \"send-email\",\n    async (controls) => {\n      return {\n        subject: controls.subject,\n        body: render(\n          <ReactEmailContent\n            hideBanner={controls.hideBanner}\n            components={controls.components}\n          />\n        ),\n      };\n    },\n    {\n      // Learn about JSON Schema here: https://json-schema.org/specification\n      controlSchema: {\n        // Always `object`\n        type: \"object\",\n        // Specify the properties to validate. Supports deep nesting.\n        properties: {\n          hideBanner: { type: \"boolean\", default: false },\n          subject: { type: \"string\", default: 'Hi {{subscriber.firstName | capitalize}}' },\n          // Allowing no code control over the component in the Dashboard UI\n          components: {\n            type: \"array\",\n            items: {\n              type: \"object\",\n            },\n            properties: {\n              subject: { type: \"string\" },\n              content: { type: \"string\" },\n            }\n          },\n        },\n        // Specify the array of which properties are required.\n        required: [\"hideBanner\"],\n        // Used to enforce full type strictness, with no rogue properties.\n        additionalProperties: false,\n        // The `as const` is important to let Typescript know that this\n        // type won't change, enabling strong typing on `inputs` via type\n        // inference of the provided JSON Schema.\n      } as const,\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Usage Statistics JSON Structure in Novu Telemetry\nDESCRIPTION: This JSON represents the anonymous usage statistics collected when telemetry is enabled in Novu. It includes metrics about events, integrations, organizations, subscribers, and workflows to help the Novu team understand platform usage patterns.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/telemetry.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eventCount\": 1,\n  \"integrationCount\": [\n    {\n      \"count\": 1,\n      \"providerId\": \"example\"\n    },\n    {\n      \"count\": 1,\n      \"providerId\": \"novu\"\n    }\n  ],\n  \"orgCount\": 1,\n  \"subscriberCount\": 1,\n  \"timestamp\": \"2024-10-04T11:54:30\",\n  \"topicCount\": 3,\n  \"totalSteps\": 10,\n  \"userCount\": 3,\n  \"workflowCount\": 6\n}\n```\n\n----------------------------------------\n\nTITLE: Importing API Documentation Component in JSX\nDESCRIPTION: A JSX component that imports and displays API documentation for the GET /v1/integrations/active endpoint using Fumadocs and Speakeasy.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_get-active-integrations.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/integrations/active\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Specifying WhatsApp Template for Test Notification (JSON)\nDESCRIPTION: JSON override for specifying the WhatsApp template to use in a test notification. It includes the template name and language code.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/whats-app.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"chat\": {\n    \"template\": {\n      \"name\": \"hello_world\",\n      \"language\": {\n        \"code\": \"en_US\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Email Components\nDESCRIPTION: Command to install the Vue Email components package via npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/vue-email.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @vue-email/components\n```\n\n----------------------------------------\n\nTITLE: Example Segment Track Event for Novu Workflow Trigger\nDESCRIPTION: This JSON snippet shows the structure of a Segment 'track' event that can trigger a notification workflow in Novu. It includes the event name and additional properties that will be passed as the payload to the Novu workflow.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/segment.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"track\",\n  \"event\": \"User Registered\",\n  \"properties\": {\n    \"plan\": \"Pro Annual\",\n    \"accountType\" : \"Facebook\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Device Token for Pusher Beams in Novu (Node.js)\nDESCRIPTION: This snippet demonstrates how to set the Pusher Beams user ID as the device token for a Novu subscriber using the Node.js SDK. It requires the Novu secret key and the subscriber's ID.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/push/(providers)/pusher-beams.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  Novu,\n  ChatProviderIdEnum\n} from '@novu/node';\n\nconst novu = new Novu(\"<NOVU_SECRET_KEY>\");\n\nawait novu.subscribers.setCredentials('subscriberId', PushProviderIdEnum.PusherBeams, {\n  // Your user's unique 'userId' from Pusher Beams\n  deviceTokens: ['userId-from-pusher-beams'],\n});\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC Hash for Slack Integration in JavaScript\nDESCRIPTION: This code snippet shows how to generate an HMAC hash for a subscriber ID using Node.js crypto module. This is used for enabling HMAC encryption in Slack integration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/slack.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createHmac } from 'crypto';\n\nconst hmacHash = createHmac('sha256', process.env.NOVU_SECRET_KEY)\n  .update(subscriberId)\n  .digest('hex');\n```\n\n----------------------------------------\n\nTITLE: Configuring Nuxt for Vue Email Integration\nDESCRIPTION: Configuration for Nuxt.js to support Vue Email. This includes transpiling the Vue Email package and setting the esbuild target to 'esnext'.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/content/vue-email.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n    build: {\n        transpile: ['@vue/email'],\n    },\n    nitro: {\n        esbuild: {\n            options: {\n                target: 'esnext',\n            },\n        },\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Delay in Workflow\nDESCRIPTION: This example demonstrates how to create a delay step that pauses workflow execution for 24 hours before sending a follow-up email. The delay step requires an amount and time unit to specify the pause duration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/typescript/steps/delay.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Wait for 24 hours\nawait step.delay('reminder-delay', async () => {\n  return {\n    amount: 24,\n    unit: 'hours',\n  };\n});\n\n// Send a follow-up email\nawait step.email('follow-up', async () => {\n  return {\n    subject: 'How are you liking our product?',\n    body: 'We noticed you signed up yesterday. How has your experience been so far?',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Card Components in JSX\nDESCRIPTION: This code snippet imports the Card and Cards components from the fumadocs-ui library, as well as the ArrowRightIcon from the lucide-react package. These components are likely used for rendering card-based UI elements in the documentation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/overview.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Card, Cards } from 'fumadocs-ui/components/card';\nimport { ArrowRightIcon } from 'lucide-react';\n```\n\n----------------------------------------\n\nTITLE: Defining Step Controls with Zod Schema in TypeScript\nDESCRIPTION: This snippet demonstrates how to define step controls using Zod schema in a Novu workflow. It includes control schema for email subject, hiding banner, and customizing components.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/controls.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { z } from 'zod';\nimport { render } from 'react-email';\nimport { ReactEmailContent } from './ReactEmailContent';\n\nworkflow('new-signup', async ({ step, payload }) => {\n  await step.email(\n    'send-email',\n    async (controls) => {\n      return {\n        subject: controls.subject,\n        body: render(\n          <ReactEmailContent hideBanner={controls.hideBanner} components={controls.components} />\n        ),\n      };\n    },\n    {\n      controlSchema: z.object({\n        hideBanner: z.boolean().default(false),\n        subject: z.string().default('Hi {{subscriber.firstName | capitalize}}'),\n        components: z.array(\n          z.object({\n            type: z.enum(['header', 'cta-row', 'footer']),\n            content: z.string(),\n          })\n        ),\n      }),\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Card Components for Available Channels in JSX\nDESCRIPTION: This code snippet uses the Card and Cards components from fumadocs-ui to display available notification channels. Each Card represents a channel type with an icon and a link to its documentation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/workflow/channel-steps.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    title=\"Email\"\n    icon={<Mail className=\"h-4 w-4\" />}\n    href=\"/platform/integrations/email\"\n  />\n  <Card\n    title=\"In-App\"\n    icon={<Bell className=\"h-4 w-4\" />}\n    href=\"/platform/inbox/overview\"\n  />\n  <Card\n    title=\"Push\"\n    icon={<Smartphone className=\"h-4 w-4\" />}\n    href=\"/platform/integrations/push\"\n  />\n  <Card\n    title=\"SMS\"\n    icon={<MessageSquare className=\"h-4 w-4\" />}\n    href=\"/platform/integrations/sms\"\n  />\n  <Card\n    title=\"Chat\"\n    icon={<MessagesSquare className=\"h-4 w-4\" />}\n    href=\"/platform/integrations/chat\"\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Hiding Global Preferences with CSS\nDESCRIPTION: CSS snippet to hide the global subscriber preferences section, which is shown by default in the Preferences component. This targets the first workflow container which contains the global preferences.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/components/preferences.mdx#2025-04-11_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.nv-workflowContainer:first-child {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Step Controls with Class-Validator Schema in TypeScript\nDESCRIPTION: This example shows how to use Class-Validator to define step controls in a Novu workflow. It includes validation for email subject, hiding banner, and customizing components.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/controls.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { IsString, IsNotEmpty, IsOptional, IsBoolean } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { render } from 'react-email';\nimport { ReactEmailContent } from './ReactEmailContent';\n\nclass NewSignUpComponent {\n  @IsString()\n  subject: string;\n\n  @IsString()\n  content: string;\n}\nclass NewSignUpControlSchema {\n  @IsBoolean()\n  hideBanner: boolean;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  subject?: string;\n\n  // Allowing no code control over the component in the Dashboard UI\n  @Type(() => NewSignUpComponent)\n  @NestedValidation({ each: true })\n  @IsOptional()\n  components?: NewSignUpComponent[];\n}\n\nworkflow('new-signup', async ({ step, payload }) => {\n  await step.email(\n    'send-email',\n    async (controls) => {\n      return {\n        subject: controls.subject,\n        body: render(\n          <ReactEmailContent hideBanner={controls.hideBanner} components={controls.components} />\n        ),\n      };\n    },\n    {\n      // Learn about Class-Validator Schema here: https://github.com/typestack/class-validator\n      controlSchema: NewSignUpControlSchema,\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing oneOf for Exclusive Schema Validation\nDESCRIPTION: This schema uses the oneOf keyword to require that data validates against exactly one of the provided schemas. It forces the object to have either a lorem property or an ipsum property, but not both.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"oneOf\": [\n    {\n      \"properties\": {\n        \"lorem\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"lorem\"]\n    },\n    {\n      \"properties\": {\n        \"ipsum\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\"ipsum\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tailwind CSS Styling Example\nDESCRIPTION: Example of styling the Inbox component using Tailwind CSS classes.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/styling.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Inbox } from '@novu/react';\n\nconst appearance = {\n  elements: {\n    bellIcon: 'p-4 bg-white rounded-full',\n    notification: 'bg-white rounded-lg shadow-sm hover:shadow-md hover:bg-gray-50',\n  },\n};\n\nexport function Novu() {\n  return (\n    <Inbox\n      applicationIdentifier=\"YOUR_APPLICATION_IDENTIFIER\"\n      subscriberId=\"YOUR_SUBSCRIBER_ID\"\n      appearance={appearance}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Step Results in Subsequent Workflow Steps\nDESCRIPTION: Example workflow that uses a custom step to fetch task data from a database, then uses the results in a conditional email step. The email is only sent if the task is not complete.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/custom.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nworkflow('hello-world-workflow', async ({ payload }) => {\n  const task = await step.custom(\n    'fetch-db-data',\n    async () => {\n      const taskData = db.fetchTask(payload.task_id);\n      return {\n        task_id: taskData.id,\n        task_title: taskData.title,\n        complete: taskData.complete,\n      };\n    },\n    {\n      outputSchema: {\n        type: 'object',\n        properties: {\n          task_title: { type: 'string' },\n          task_id: { type: 'string' },\n          complete: { type: 'boolean' },\n        },\n        required: ['task_id', 'complete'],\n      },\n    }\n  );\n\n  await step.email(\n    'send-email',\n    () => {\n      return {\n        subject: `Task reminder for ${task.task_title}`,\n        body: 'Task is not yet complete. Please complete the task.',\n      };\n    },\n    {\n      // Only send the reminder E-mail if the task is not complete\n      skip: () => !task.complete,\n    }\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Nested Array Structure in JSON Schema\nDESCRIPTION: This schema defines a task list with a title and an array of task objects. Each task has properties for title, details, and completion status. It demonstrates how to nest array structures within a schema.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\"title\"],\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"title\": \"Task list title\"\n    },\n    \"tasks\": {\n      \"type\": \"array\",\n      \"title\": \"Tasks\",\n      \"items\": {\n        \"type\": \"object\",\n        \"required\": [\"title\"],\n        \"properties\": {\n          \"title\": {\n            \"type\": \"string\",\n            \"title\": \"Title\",\n            \"description\": \"A sample title\"\n          },\n          \"details\": {\n            \"type\": \"string\",\n            \"title\": \"Task details\",\n            \"description\": \"Enter the task details\"\n          },\n          \"done\": {\n            \"type\": \"boolean\",\n            \"title\": \"Done?\",\n            \"default\": false\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Positioning with @novu/notification-center\nDESCRIPTION: Implementation showing basic popover positioning options available in the older @novu/notification-center library.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  PopoverNotificationCenter,\n  NotificationBell,\n  NovuProvider,\n} from '@novu/notification-center';\n\nfunction Novu() {\n  return (\n    <NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APP_ID\">\n      <PopoverNotificationCenter position=\"left-start\" offset={20}>\n        {({ unseenCount }) => <NotificationBell unseenCount={unseenCount} />}\n      </PopoverNotificationCenter>\n    </NovuProvider>\n  );\n}\n\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Implementing Delay with Skip Condition in Notification Workflow\nDESCRIPTION: This code shows how to delay the execution of the next workflow step by 1 day with a conditional skip option. The delay can be bypassed if the 'isCriticalMessage' function returns true, allowing critical messages to be sent immediately.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/delay.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.delay(\n  'delay',\n  () => {\n    return {\n      type: 'regular',\n      unit: 'days',\n      amount: 1,\n    };\n  },\n  {\n    skip: () => isCriticalMessage(),\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Kannel Authentication Configuration in bash\nDESCRIPTION: This snippet shows the SMSC configuration in Kannel, including the authentication settings (username and password) that would be used when integrating with Novu.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/sms/(providers)/kannel.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngroup = smsc\nsmsc = smpp\nsmsc-id = YourSMSCID\nhost = SMSC_Hostname_or_IP\nport = SMSC_Port\nsmsc-username = YourUsername\nsmsc-password = YourPassword\nmax-pending-submits = 10\nallow-ip = \"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu Client in TypeScript (EU Region)\nDESCRIPTION: Creates a new Novu client instance for the EU region with custom API and socket URLs.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/javascript/index.model.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from \"@novu/js\";\n\nconst novu = new Novu({\n  subscriberId: \"SUBSCRIBER_ID\",\n  applicationIdentifier: \"APPLICATION_IDENTIFIER\",\n  apiUrl: \"https://eu.api.novu.co\",\n  socketUrl: \"https://eu.ws.novu.co\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Workflow with Delay and Conditional In-App Notification\nDESCRIPTION: This snippet defines a complete workflow that delays an in-app notification by 30 minutes and only sends it if the subscriber has the appropriate permission. If during the delay the subscriber changes their preferences, the notification can be skipped.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/delay.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const goalReminderInAppAfterDelay = workflow(\n  'goal-reminder-in-app-after-delay',\n  async ({ step, subscriber }) => {\n    await step.delay('delay-step', async () => {\n      return {\n        type: 'regular',\n        amount: 30,\n        unit: 'minutes',\n      };\n    });\n\n    await step.inApp(\n      'in-app-step',\n      async () => {\n        return {\n          subject: `Don't Forget Your Fitness Goals Today!`,\n          body: `Hey ${subscriber.firstName}, it's been a while since you logged your\n                last activity. Keep up the momentum and complete your workout to stay on\n                track with your goals!`,\n        };\n      },\n      {\n        skip: () => subscriber.data?.goalReminderInAppAllowed === false,\n      }\n    );\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Subscriber Credentials for Zulip Integration with cURL\nDESCRIPTION: This cURL command demonstrates how to update a subscriber's Zulip credentials using Novu's REST API. It sends a PUT request to the Novu API with the subscriber ID, provider ID, and webhook URL as credentials.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/chat/(providers)/zulip.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L -X PUT 'https://api.novu.co/v1/subscribers/<SUBSCRIBER_ID>/credentials' \\\n-H 'Content-Type: application/json' \\\n-H 'Accept: application/json' \\\n-H 'Authorization: ApiKey <NOVU_SECRET_KEY>' \\\n-d '{\n  \"providerId\": \"zulip\",\n  \"credentials\": {\n      \"webhookUrl\": \"<WEBHOOK_URL>\"\n  },\n  \"integrationIdentifier\": \"zulip-MnGLxp8uy\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Java SDK with Maven\nDESCRIPTION: Maven dependency configuration for adding the Novu Java SDK to your project. Users need to replace {use-latest-version} with the current version number, which can be found on the Novu GitHub repository.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/java.mdx#2025-04-11_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n<!--add dependency-->\n<dependency>\n    <groupId>co.novu</groupId>\n    <artifactId>novu-java</artifactId>\n    <version>{use-latest-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Digest Step in TSX\nDESCRIPTION: This snippet demonstrates how to define a basic digest step that collects events over a specified time period. It sets up a digest to collect events over 3 days.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/digest.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst digestResult = await step.digest('digest', async () => {\n  return {\n    unit: 'days', // 'seconds' | 'minutes' | 'hours' | 'days' | 'weeks' | 'months'\n    amount: 3, // the number of units to digest events for\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Cards for Novu Integration Channels in React\nDESCRIPTION: This code snippet uses the Card and Cards components from fumadocs-ui to create a navigation interface linking to documentation for different notification channels supported by Novu.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/overview.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card title=\"Email\" href=\"/platform/integrations/email\">\n    Configure email providers and settings\n  </Card>\n  <Card title=\"SMS\" href=\"/platform/integrations/sms\">\n    Set up SMS messaging capabilities\n  </Card>\n  <Card title=\"Push\" href=\"/platform/integrations/push\">\n    Enable push notification delivery\n  </Card>\n  <Card title=\"Chat\" href=\"/platform/integrations/chat\">\n    Integrate with chat platforms\n  </Card>\n  <Card title=\"In-App\" href=\"/platform/inbox/overview\">\n    Manage in-app notification center\n  </Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Kotlin SDK with Maven\nDESCRIPTION: Maven dependency configuration for integrating the Novu Kotlin SDK into your project. Users should replace {use-latest-version} with the current version number available on GitHub.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/kotlin.mdx#2025-04-11_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>co.novu</groupId>\n  <artifactId>novu-kotlin</artifactId>\n  <version>{use-latest-version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom 'serve' Function for Express in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a custom 'serve' function for the Express framework using TypeScript. It handles incoming requests, performs HMAC header authentication, and manages framework-specific response and error handling.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/endpoint.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Request, type Response } from 'express';\nimport { NovuRequestHandler, ServeHandlerOptions } from '@novu/framework';\n\nexport const serve = (options: ServeHandlerOptions) => {\n  const requestHandler = new NovuRequestHandler({\n    frameworkName: 'express',\n    ...options,\n    handler: (incomingRequest: Request, response: Response) => ({\n      method: () => incomingRequest.method,\n      headers: (key) => {\n        const header = incomingRequest.headers[key];\n        return Array.isArray(header) ? header[0] : header;\n      },\n      queryString: (key) => {\n        const qs = incomingRequest.query[key];\n        return Array.isArray(qs) ? qs[0] : qs;\n      },\n      body: () => incomingRequest.body,\n      url: () =>\n        new URL(incomingRequest.url, `https://${incomingRequest.headers.get('host') || ''}`);\n      transformResponse: ({ body, headers, status }) => {\n        Object.entries(headers).forEach(([headerName, headerValue]) => {\n          response.setHeader(headerName, headerValue);\n        });\n\n        return response.status(status).send(body);\n      },\n    }),\n  });\n\n  return requestHandler.createHandler();\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Regex Pattern Validation in JSON Schema\nDESCRIPTION: This schema demonstrates string validation using regular expressions. It enforces a specific pattern for a phone number field that matches North American telephone numbers with an optional area code in the format (xxx)xxx-xxxx or xxx-xxxx.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/json-schema.mdx#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"phone\": {\n      \"type\": \"string\",\n      \"pattern\": \"^(\\\\([0-9]{3}\\\\))?[0-9]{3}-[0-9]{4}$\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Novu Event in PHP (US Region)\nDESCRIPTION: Initialize the Novu SDK, create a trigger event request, and send it using the US region API. This snippet demonstrates setting up the SDK, creating a subscriber payload, and handling the response.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/php.mdx#2025-04-11_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndeclare(strict_types=1);\n\nrequire 'vendor/autoload.php';\n\nuse novu;\nuse novu\\Models\\Components;\n\n$sdk = novu\\Novu::builder()\n->setSecurity(\n'<YOUR_SECRET_KEY_HERE>'\n)\n->build();\n\n$triggerEventRequestDto = new Components\\TriggerEventRequestDto(\nworkflowId: 'workflow_identifier',\nto: new Components\\SubscriberPayloadDto(\nsubscriberId: 'subscriber_unique_identifier',\nfirstName: 'Albert',\nlastName: 'Einstein',\nemail: 'albert@einstein.com',\n),\npayload: [\n'comment_id' => 'string',\n'post' => [\n'text' => 'string',\n],\n],\noverrides: [\n'email' => [\n'bcc' => 'no-reply@novu.co',\n],\n],\n);\n\n$response = $sdk->trigger(\ntriggerEventRequestDto: $triggerEventRequestDto,\nidempotencyKey: '<value>'\n\n);\n\nif ($response->triggerEventResponseDto !== null) {\n// handle response\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-App Notification Step in Novu\nDESCRIPTION: Example of configuring an in-app notification step using Novu's framework. Shows how to set notification content, actions, and custom data. Includes options for subject, body, avatar, primary/secondary actions, and redirect URLs.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/in-app-channel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.inApp('inbox', async () => {\n  return {\n    subject: 'Welcome to Acme!',\n    body: 'We are excited to have you on board.',\n    avatar: 'https://acme.com/avatar.png',\n    redirect: {\n      url: 'https://acme.com/welcome',\n      target: '_blank',\n    },\n    primaryAction: {\n      label: 'Get Started',\n      redirect: {\n        url: 'https://acme.com/get-started',\n        target: '_self',\n      },\n    },\n    secondaryAction: {\n      label: 'Learn More',\n      redirect: {\n        url: 'https://acme.com/learn-more',\n        target: '_self',\n      },\n    },\n    data: {\n      customData: 'customValue',\n      text: payload.text,\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Rate Limiting Response Headers in Novu API\nDESCRIPTION: Example of HTTP response headers returned by Novu API related to rate limiting. These headers help developers track remaining request tokens, limits, reset times, and overall rate limiting policy details.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/rate-limiting.mdx#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRateLimit-Remaining: 219\nRateLimit-Limit: 300\nRateLimit-Reset: 2\nRateLimit-Policy: 300;w=5;burst=330;comment=\"token bucket\";category=\"trigger\";cost=\"bulk\";serviceLevel=\"free\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using OverviewPage Component in JSX\nDESCRIPTION: This snippet imports the OverviewPage component from the local components directory and renders it as the main content of the page. The code is part of a documentation page setup using React components.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/overview.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OverviewPage } from '@/components/pages/overview-page';\n\n<OverviewPage />\n```\n\n----------------------------------------\n\nTITLE: Using Novu Python SDK with uv in Python Shell\nDESCRIPTION: Execute the Novu Python SDK in a Python shell using uv and the uvx command.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/python.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuvx --from novu-py python\n```\n\n----------------------------------------\n\nTITLE: Defining Workflow Payload Schema in Novu\nDESCRIPTION: This code demonstrates how to define a workflow with a payload schema that validates input data. The schema specifies required properties, their types, and constraints like string length. The workflow uses this data in an email step.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/payload.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ReactEmailContent } from './ReactEmailContent';\n\nworkflow(\n  'comment-on-post',\n  async ({ step, payload }) => {\n    await step.email('send-email', async () => {\n      return {\n        subject: `You have a new comment from: ${payload.author_name}.`,\n        body: render(<ReactEmailContent comment={payload.comment} />),\n      };\n    });\n  },\n  {\n    payloadSchema: {\n      // Always `object`\n      type: 'object',\n      // Specify the properties to validate. Supports deep nesting.\n      properties: {\n        post_id: { type: 'number' },\n        author_name: { type: 'string' },\n        comment: { type: 'string', maxLength: 200 },\n      },\n      // Specify the array of which properties are required.\n      required: ['post_id', 'comment'],\n      // Used to enforce full type strictness, with no rogue properties.\n      additionalProperties: false,\n      // The `as const` is important to let Typescript know that this\n      // type won't change, enabling strong typing on `inputs` via type\n      // inference of the provided JSON Schema.\n    } as const,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Standalone Python Script Using Novu SDK with uv\nDESCRIPTION: Create a standalone Python script that uses the Novu SDK without setting up a full project, utilizing uv for dependency management.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/python.mdx#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env -S uv run --script\n# /// script\n# requires-python = \">=3.9\"\n# dependencies = [\n#     \"novu-py\",\n# ]\n# ///\n\nfrom novu_py import Novu\n\nsdk = Novu(\n  # SDK arguments\n)\n\n# Rest of script here...\n```\n\n----------------------------------------\n\nTITLE: Sending Push Notification using TypeScript\nDESCRIPTION: Demonstrates how to send a basic push notification with a subject and body message using an async step function. The notification includes a standard message subject and body text for a new post creation alert.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/push-channel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nawait step.push('push', async () => {\n  return {\n    subject: 'You received a message',\n    body: 'A new post has been created',\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring NovuModule with Dependency Injection in NestJS\nDESCRIPTION: This advanced usage example shows how to use the registerAsync method to inject dependencies into the NovuModule. It demonstrates importing services and using them in the module configuration.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nestjs.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Module } from '@nestjs/common';\nimport { NovuModule } from '@novu/framework/nest';\nimport { NotificationService } from './notification.service';\nimport { UserService } from './user.service';\n\n@Module({\n  imports: [\n    NovuModule.registerAsync({\n      imports: [AppModule],\n      useFactory: (notificationService: NotificationService) => ({\n        apiPath: '/api/novu',\n        workflows: [notificationService.welcomeWorkflow()],\n      }),\n      inject: [NotificationService],\n    }),\n  ],\n  providers: [NotificationService, UserService],\n  exports: [NotificationService],\n})\nexport class AppModule {}\n```\n\n----------------------------------------\n\nTITLE: Installing Novu React Native SDK\nDESCRIPTION: Command to install the Novu React Native hooks SDK via npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/react-native/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/react-native\n```\n\n----------------------------------------\n\nTITLE: Starting Novu Development Server with Custom Port\nDESCRIPTION: This command starts the Novu development server with a specified port. It's used when the Express application is running on a port other than the default 4000.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/express.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnpx novu@latest dev --port <YOUR_EXPRESS_JS_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of @novu/notification-center (Old Implementation)\nDESCRIPTION: Example of how to use the NovuProvider, PopoverNotificationCenter, and NotificationBell components from the old @novu/notification-center package.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/inbox/react/migration-guide.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  NovuProvider,\n  PopoverNotificationCenter,\n  NotificationBell,\n} from '@novu/notification-center';\n\nfunction Novu() {\n  return (\n    <NovuProvider subscriberId=\"YOUR_SUBSCRIBER_ID\" applicationIdentifier=\"YOUR_APP_ID\">\n      <PopoverNotificationCenter>\n        {({ unseenCount }) => <NotificationBell unseenCount={unseenCount} />}\n      </PopoverNotificationCenter>\n    </NovuProvider>\n  );\n}\nexport default Novu;\n```\n\n----------------------------------------\n\nTITLE: Installing Novu's Inbox Package\nDESCRIPTION: NPM command to install the Novu React package, which provides the notification inbox component and related functionality for the Remix application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/remix.mdx#2025-04-11_snippet_1\n\nLANGUAGE: package-install\nCODE:\n```\nnpm install @novu/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu API Endpoint in H3 Application\nDESCRIPTION: This snippet shows how to set up a Novu API endpoint in an H3 application. It creates an H3 app instance, adds a route for Novu's framework to serve workflows, and starts an HTTP server on port 4000.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/h3.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, eventHandler, toNodeListener } from \"h3\";\nimport { serve } from \"@novu/framework/h3\";\nimport { createServer } from \"node:http\";\nimport { testWorkflow } from \"./novu/workflows\";\n\nconst app = createApp();\n\napp.use(\"/api/novu\", eventHandler(serve({ workflows: [testWorkflow] }) ));\n\ncreateServer(toNodeListener(app)).listen(4000);\n```\n\n----------------------------------------\n\nTITLE: Basic Novu Kotlin SDK Usage Example\nDESCRIPTION: Demonstrates how to initialize the Novu client with an API key and retrieve environment information. This example shows the fundamental pattern for using the SDK without modifying the backend URL.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/kotlin.mdx#2025-04-11_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n// without changing the backend URL\nimport co.novu.Novu\nimport co.novu.extentions.environments\n\nfun main() {\n    val novu = Novu(apiKey = \"NOVU_SECRET_KEY\")\n    val environment = novu.environments()\n    println(environment)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Icon Components in MDX\nDESCRIPTION: Imports various icon components used in the documentation including Rocket, ReactIcon, NextjsIcon, and RemixIcon.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/what-is-novu.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rocket } from 'lucide-react';\nimport { ReactIcon } from '@/components/icons/react';\nimport { NextjsIcon } from '@/components/icons/nextjs';\nimport { RemixIcon } from '@/components/icons/remix';\n```\n\n----------------------------------------\n\nTITLE: Running Novu Dev Server with Custom Port\nDESCRIPTION: This command starts the Novu development server with a specified port that matches your H3 application port. This is necessary if your H3 application is running on a port other than the default 4000.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/h3.mdx#2025-04-11_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nnpx novu@latest dev --port <YOUR_H3_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: Implementing Novu Workflow Notification Trigger Function\nDESCRIPTION: Function to trigger Novu workflow notifications based on Stripe webhook events.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Novu } from '@novu/api';\nimport { SubscriberPayloadDto } from '@novu/api/models/components/subscriberpayloaddto';\n\nconst novu = new Novu({\n    secretKey: process.env['NOVU_SECRET_KEY']\n});\n\nexport async function triggerWorkflow(workflowId: string, subscriber: SubscriberPayloadDto, payload: object) {\n    try {\n        console.log(\"Payload:\", payload ,\"Triggering workflow:\", workflowId, \"Subscriber:\", subscriber)\n        await novu.trigger({\n            workflowId,\n            to: subscriber,\n            payload\n        });\n        return new Response('Notification triggered', { status: 200 });\n    } catch (error) {\n        return new Response('Error triggering notification', { status: 500 });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Novu Development Server with Custom Port (Shell)\nDESCRIPTION: This command starts the Novu development server with a specified port. It's useful when your local AWS Lambda application is running on a port other than the default 4000.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/lambda.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx novu@latest dev --port <YOUR_AWS LAMBDA_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: Parsing Stripe Subscription Created Event Payload\nDESCRIPTION: Example JSON payload structure for a customer.subscription.created event from Stripe, showing all the subscription details including billing information, plan details, and customer data.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"object\": {\n    \"id\": \"sub_1Qy9WoR7RyRE3Uxrj6iaIAHV\",\n    \"object\": \"subscription\",\n    \"application\": null,\n    \"application_fee_percent\": null,\n    \"automatic_tax\": {\n      \"disabled_reason\": null,\n      \"enabled\": false,\n      \"liability\": null\n    },\n    \"billing_cycle_anchor\": 1740910426,\n    \"billing_cycle_anchor_config\": null,\n    \"billing_thresholds\": null,\n    \"cancel_at\": null,\n    \"cancel_at_period_end\": false,\n    \"canceled_at\": null,\n    \"cancellation_details\": {\n      \"comment\": null,\n      \"feedback\": null,\n      \"reason\": null\n    },\n    \"collection_method\": \"charge_automatically\",\n    \"created\": 1740910426,\n    \"currency\": \"usd\",\n    \"current_period_end\": 1743588826,\n    \"current_period_start\": 1740910426,\n    \"customer\": \"cus_RrtJuJIveFMpmq\",\n    \"days_until_due\": null,\n    \"default_payment_method\": null,\n    \"default_source\": null,\n    \"default_tax_rates\": [],\n    \"description\": null,\n    \"discount\": null,\n    \"discounts\": [],\n    \"ended_at\": null,\n    \"invoice_settings\": {\n      \"account_tax_ids\": null,\n      \"issuer\": {\n        \"type\": \"self\"\n      }\n    },\n    \"items\": {\n      \"object\": \"list\",\n      \"data\": [\n        {\n          \"id\": \"si_sdfsFwsthbHIUHJY\",\n          \"object\": \"subscription_item\",\n          \"billing_thresholds\": null,\n          \"created\": 1740910426,\n          \"discounts\": [],\n          \"metadata\": {},\n          \"plan\": {\n            \"id\": \"price_1Qy9WnR7RyRE3UxrRi33EJNc\",\n            \"object\": \"plan\",\n            \"active\": true,\n            \"aggregate_usage\": null,\n            \"amount\": 1500,\n            \"amount_decimal\": \"1500\",\n            \"billing_scheme\": \"per_unit\",\n            \"created\": 1740910425,\n            \"currency\": \"usd\",\n            \"interval\": \"month\",\n            \"interval_count\": 1,\n            \"livemode\": false,\n            \"metadata\": {},\n            \"meter\": null,\n            \"nickname\": null,\n            \"product\": \"prod_RrtJKUBhMKqoHb\",\n            \"tiers_mode\": null,\n            \"transform_usage\": null,\n            \"trial_period_days\": null,\n            \"usage_type\": \"licensed\"\n          },\n          \"price\": {\n            \"id\": \"price_1Qy9WnR7RyRE3UxrRi33EJNc\",\n            \"object\": \"price\",\n            \"active\": true,\n            \"billing_scheme\": \"per_unit\",\n            \"created\": 1740910425,\n            \"currency\": \"usd\",\n            \"custom_unit_amount\": null,\n            \"livemode\": false,\n            \"lookup_key\": null,\n            \"metadata\": {},\n            \"nickname\": null,\n            \"product\": \"prod_RrtJKUBhMKqoHb\",\n            \"recurring\": {\n              \"aggregate_usage\": null,\n              \"interval\": \"month\",\n              \"interval_count\": 1,\n              \"meter\": null,\n              \"trial_period_days\": null,\n              \"usage_type\": \"licensed\"\n            },\n            \"tax_behavior\": \"unspecified\",\n            \"tiers_mode\": null,\n            \"transform_quantity\": null,\n            \"type\": \"recurring\",\n            \"unit_amount\": 1500,\n            \"unit_amount_decimal\": \"1500\"\n          },\n          \"quantity\": 1,\n          \"subscription\": \"sub_1Qy9WoR7RyRE3Uxrj6iaIAHV\",\n          \"tax_rates\": []\n        }\n      ],\n      \"has_more\": false,\n      \"total_count\": 1,\n      \"url\": \"/v1/subscription_items?subscription=sub_1Qy9WoR7RyRE3Uxrj6iaIAHV\"\n    },\n    \"latest_invoice\": \"in_1Qy9WoR7RyRE3UxrNBjqvFxM\",\n    \"livemode\": false,\n    \"metadata\": {},\n    \"next_pending_invoice_item_invoice\": null,\n    \"on_behalf_of\": null,\n    \"pause_collection\": null,\n    \"payment_settings\": {\n      \"payment_method_options\": null,\n      \"payment_method_types\": null,\n      \"save_default_payment_method\": \"off\"\n    },\n    \"pending_invoice_item_interval\": null,\n    \"pending_setup_intent\": null,\n    \"pending_update\": null,\n    \"plan\": {\n      \"id\": \"price_1Qy9WnR7RyRE3UxrRi33EJNc\",\n      \"object\": \"plan\",\n      \"active\": true,\n      \"aggregate_usage\": null,\n      \"amount\": 1500,\n      \"amount_decimal\": \"1500\",\n      \"billing_scheme\": \"per_unit\",\n      \"created\": 1740910425,\n      \"currency\": \"usd\",\n      \"interval\": \"month\",\n      \"interval_count\": 1,\n      \"livemode\": false,\n      \"metadata\": {},\n      \"meter\": null,\n      \"nickname\": null,\n      \"product\": \"prod_RrtJKUBhMKqoHb\",\n      \"tiers_mode\": null,\n      \"transform_usage\": null,\n      \"trial_period_days\": null,\n      \"usage_type\": \"licensed\"\n    },\n    \"quantity\": 1,\n    \"schedule\": null,\n    \"start_date\": 1740910426,\n    \"status\": \"active\",\n    \"test_clock\": null,\n    \"transfer_data\": null,\n    \"trial_end\": null,\n    \"trial_settings\": {\n      \"end_behavior\": {\n        \"missing_payment_method\": \"create_invoice\"\n      }\n    },\n    \"trial_start\": null\n  },\n  \"previous_attributes\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Novu Development Server with Custom Port\nDESCRIPTION: This command starts the Novu development server with a custom port. It's useful when the NestJS application is running on a port other than 4000.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nestjs.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx novu@latest dev --port <YOUR_NESTJS_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: Installing Zod Package for Novu Framework\nDESCRIPTION: Command to install the Zod package as a dependency for your Novu Framework project using npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/schema/zod.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zod\n```\n\n----------------------------------------\n\nTITLE: Configuring Clerk Signing Secret in Environment Variables\nDESCRIPTION: This snippet shows how to add the Clerk Signing Secret to the .env.local file, which is necessary for verifying incoming webhook requests from Clerk.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/clerk.mdx#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nCLERK_SIGNING_SECRET=your_signing_secret_here\n```\n\n----------------------------------------\n\nTITLE: Implementing NotificationService with Dependency Injection in NestJS\nDESCRIPTION: This example demonstrates how to create a NotificationService that uses dependency injection to access a UserService. It defines a welcome workflow that uses the injected service to fetch user data for personalized email content.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nestjs.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Injectable } from '@nestjs/common';\nimport { workflow } from '@novu/framework';\nimport { z } from 'zod';\nimport { UserService } from './user.service';\n\n@Injectable()\nexport class NotificationService {\n  constructor(private readonly userService: UserService) {}\n\n  public welcomeWorkflow() {\n    return workflow(\n      'welcome-email',\n      async ({ step, payload }) => {\n        await step.email('send-email', async () => {\n          const user = this.userService.getUser(payload.userId);\n\n          return {\n            subject: `Hello, ${user.name}`,\n            body: `We are glad you are here!`,\n          };\n        });\n      },\n      {\n        payloadSchema: z.object({\n          userId: z.string(),\n        }),\n      }\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Angular Application with CLI\nDESCRIPTION: Commands to create a new Angular application using the Angular CLI and navigate to the project directory.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/angular.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng new novu-inbox-angular\ncd novu-inbox-angular\n```\n\n----------------------------------------\n\nTITLE: Implementing Segment Destination Function for Novu Integration\nDESCRIPTION: This code snippet defines the Destination Function in Segment to handle 'identify' and 'track' events, creating or updating subscribers in Novu and triggering notification workflows based on Segment events. It includes error handling and retry logic for reliable event processing.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/segment.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * Handles identify events: Creates or updates a subscriber in Novu\n * @param {SegmentIdentifyEvent} event - The Segment identify event\n * @param {FunctionSettings} settings - Function settings including API key\n */\nasync function onIdentify(event, settings) {\n  const endpoint = 'https://api.novu.co/v2/subscribers';\n  const apiKey = settings.apiKey;\n\n  if (!apiKey) throw new Error('Novu API key is missing in settings');\n  if (!event.userId) throw new Error('userId is required in identify event');\n\n  const subscriberData = {\n    subscriberId: event.userId,\n    firstName: event.traits?.firstName || null,\n    lastName: event.traits?.lastName || null,\n    email: event.traits?.email || null,\n    phone: event.traits?.phone || null,\n    avatar: event.traits?.avatar || null,\n  };\n\n  try {\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Authorization': `ApiKey ${apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(subscriberData)\n    });\n\n    const responseBody = await response.json();\n    if (!response.ok) {\n      if (response.status >= 500 || response.status === 429) {\n        throw new RetryError(`Server error: ${response.status}`);\n      }\n      throw new Error(`API error: ${response.status} - ${responseBody.message || 'Unknown error'}`);\n    }\n  } catch (error) {\n    throw error instanceof RetryError ? error : new RetryError(error.message);\n  }\n}\n\n// Mapping of Segment track events to Novu workflows\nconst EVENT_TO_WORKFLOW_MAPPINGS = {\n  'User Registered': 'welcome'\n  // Add more mappings: 'Event Name': 'novu-workflow-name'\n};\n\n/**\n * Handles track events: Triggers a notification workflow in Novu\n * @param {SegmentTrackEvent} event - The Segment track event\n * @param {FunctionSettings} settings - Function settings including API key\n */\nasync function onTrack(event, settings) {\n  const endpoint = 'https://api.novu.co/v1/events/trigger';\n  const apiKey = settings.apiKey;\n\n  if (!apiKey) throw new Error('Novu API key is missing in settings');\n  if (!event.userId) throw new Error('userId is required in track event');\n\n  const workflow = EVENT_TO_WORKFLOW_MAPPINGS[event.event];\n  if (!workflow) throw new Error(`No workflow mapped for event: ${event.event}`);\n\n  const triggerEvent = {\n    name: workflow,\n    to: { subscriberId: event.userId },\n    payload: event.properties || {}\n  };\n\n  try {\n    const response = await fetch(endpoint, {\n      method: 'POST',\n      headers: {\n        'Authorization': `ApiKey ${apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(triggerEvent)\n    });\n\n    const responseBody = await response.json();\n    if (!response.ok) {\n      if (response.status >= 500 || response.status === 429) {\n        throw new RetryError(`Server error: ${response.status}`);\n      }\n      throw new Error(`API error: ${response.status} - ${responseBody.message || 'Unknown error'}`);\n    }\n  } catch (error) {\n    throw error instanceof RetryError ? error : new RetryError(error.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Novu with Secret Key\nDESCRIPTION: Command to initialize Novu in a Next.js application using a secret key from the Novu Dashboard\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx novu init --secret-key=<YOUR_NOVU_SECRET_KEY>\n```\n\n----------------------------------------\n\nTITLE: Creating React App with Vite\nDESCRIPTION: Command to create a new React application with TypeScript template using Vite. This is used to scaffold a React project for integrating Novu.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/react.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create vite@latest my-app -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Running Cypress Tests for Novu Web App\nDESCRIPTION: Command to execute Cypress tests in headless mode for the Novu web application. This runs all end-to-end tests from the command line without opening the Cypress test runner UI.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd apps/web && npm run cypress:run\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages\nDESCRIPTION: Installing necessary dependencies including Novu Framework, React Email, and Zod for type safety\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/framework @react-email/components react-email zod zod-to-json-schema\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Typescript SDK via PNPM\nDESCRIPTION: Command to install the @novu/api package using PNPM package manager.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/typescript.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @novu/api\n```\n\n----------------------------------------\n\nTITLE: Cloning Novu Repository - Forked Version\nDESCRIPTION: Command to clone a forked version of the Novu repository, replacing placeholder with user's GitHub username.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/{YOUR_GITHUB_USER_NAME}/novu.git\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable\nDESCRIPTION: Adding the Novu secret key to environment variables\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNOVU_SECRET_KEY=<NOVU_SECRET_KEY>\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Component in JSX\nDESCRIPTION: This code renders an APIPage component that displays documentation for the subscriber message marking endpoint. The component imports API specifications from a Speakeasy JSON file and configures it to display the POST operation for the /v1/subscribers/{subscriberId}/messages/mark-all endpoint.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_mark-all-unread-as-read.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/subscribers/{subscriberId}/messages/mark-all\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Provider List Configuration\nDESCRIPTION: JSON configuration for adding the provider to the providers list with display settings\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"example-provider\",\n  \"displayName\": \"Example Provider\",\n  \"channel\": \"ChannelTypeEnum.EMAIL\",\n  \"credentials\": \"exampleProviderConfig\",\n  \"docReference\": \"https://docs.example-provider.com/\",\n  \"logoFileName\": { \"light\": \"example-provider.svg\", \"dark\": \"example-provider.svg\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Commands to start the Next.js development server with Novu integration\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ncd my-novu-app && npm run dev\n```\n\nLANGUAGE: tsx\nCODE:\n```\nnpx novu@latest dev --port <YOUR_NEXTJS_APPLICATION_PORT>\n```\n\n----------------------------------------\n\nTITLE: API Route Configuration - YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration defining the API endpoint properties including method, route, and description with pagination parameters.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_list-subscribers.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Get subscribers\ndescription: >\n  Returns a list of subscribers, could paginated using the `page` and `limit`\n  query parameter\nfull: true\n_openapi:\n  method: GET\n  route: /v1/subscribers\n  toc: []\n  structuredData:\n    headings: []\n    contents:\n      - content: >\n          Returns a list of subscribers, could paginated using the `page` and\n          `limit` query parameter\n```\n\n----------------------------------------\n\nTITLE: Exporting Provider Handler in TypeScript\nDESCRIPTION: Adds an export statement for the new provider handler to make it available to other parts of the application. This simple addition ensures the handler can be imported from the index file.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport * from './example-provider.handler';\n```\n\n----------------------------------------\n\nTITLE: Creating a Novu API Endpoint in Nuxt\nDESCRIPTION: This code defines a Nuxt server endpoint that serves as a Novu Bridge Endpoint. It imports the serve function from the Novu Framework Nuxt package and registers the myWorkflow function as an available workflow.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nuxt.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from '@novu/framework/nuxt';\nimport { testWorkflow } from \"../novu/workflows\";\n\nexport default defineEventHandler(serve({ workflows: [myWorkflow] }));\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Webhook Status in Markdown\nDESCRIPTION: This snippet defines an API endpoint using Markdown and custom syntax. It specifies the HTTP method, route, and includes a comment about file generation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_get-webhook-support-status.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/integrations/webhook/provider/{providerOrIntegrationId}/status\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Integrating Provider into Mail Factory in TypeScript\nDESCRIPTION: Adds the new provider handler to the mail factory initialization. This code imports the handler and adds it to the handlers array, making it available for the mail service to use.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ExampleProviderHandler } from './handlers';\n\nexport class MailFactory {\n  handlers: IMailHandler[] = [new ExampleProviderHandler()];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Stripe and Novu Integration\nDESCRIPTION: Command to install required packages for integrating Stripe webhooks with Novu notifications in a Next.js application.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/stripe.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/api @clerk/nextjs @stripe\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Go SDK\nDESCRIPTION: Command to install the Novu Go SDK package using go get.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/go.mdx#2025-04-11_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/novuhq/novu-go\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Component in JSX\nDESCRIPTION: This code snippet renders an APIPage component to display the documentation for the broadcast event trigger API. It uses the Fumadocs-generated content and specifies the API specification source and relevant operations.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/events/events-controller_broadcast-event-to-all.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/events/trigger/broadcast\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Triggering Notifications with Novu Go SDK (US Region)\nDESCRIPTION: Example of using the Novu Go SDK to trigger a notification event in the US region. It demonstrates setting up the client, constructing a trigger event with payload and subscriber information, and handling the response.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/go.mdx#2025-04-11_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\nctx := context.Background()\n\n    s := novugo.New(\n    \tnovugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n    )\n\n    res, err := s.Trigger(ctx, components.TriggerEventRequestDto{\n    \tWorkflowID: \"workflow_identifier\",\n    \tPayload: map[string]any{\n    \t\t\"comment_id\": \"string\",\n    \t\t\"post\": map[string]any{\n    \t\t\t\"text\": \"string\",\n    \t\t},\n    \t},\n    \tOverrides: map[string]map[string]any{\n    \t\t\"email\": map[string]any{\n    \t\t\t\"bcc\": \"no-reply@novu.co\",\n    \t\t},\n    \t},\n    \tTo: components.CreateToSubscriberPayloadDto(\n    \t\tcomponents.SubscriberPayloadDto{\n    \t\t\tSubscriberID: \"subscriber_uniuqe_identifier\",\n    \t\t\tFirstName: \"Albert\",\n    \t\t\tLastName: \"Einstein\",\n    \t\t\tEmail: \"albert@einstein.com\",\n    \t\t},\n    \t),\n    }, nil)\n    if err != nil {\n    \tlog.Fatal(err)\n    }\n    if res.TriggerEventResponseDto != nil {\n    \t// handle response\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Novu PHP SDK via Composer\nDESCRIPTION: Use Composer to install the Novu PHP SDK and add it as a dependency to your project.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/php.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require \"novuhq/novu\"\n```\n\n----------------------------------------\n\nTITLE: Embedding API Documentation Component in JSX/React\nDESCRIPTION: This code renders an APIPage component that displays documentation for the POST /v2/subscribers endpoint. The component receives the API specification URL and operation details as props.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-controller_create-subscriber.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v2/subscribers\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Triggering Notifications with Novu Go SDK (EU Region)\nDESCRIPTION: Example of using the Novu Go SDK to trigger a notification event in the EU region. It demonstrates setting up the client with EU server URL, constructing a trigger event with payload and subscriber information, and handling the response.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/go.mdx#2025-04-11_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\tnovugo \"github.com/novuhq/novu-go\"\n\t\"github.com/novuhq/novu-go/models/components\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\n\ts := novugo.New(\n\t\tnovugo.WithServerURL(\"https://eu.api.novu.co\"),\n\t\tnovugo.WithSecurity(os.Getenv(\"NOVU_SECRET_KEY\")),\n\t)\n\n\tres, err := s.Trigger(ctx, components.TriggerEventRequestDto{\n\t\tWorkflowID: \"workflow_identifier\",\n\t\tPayload: map[string]any{\n\t\t\t\"comment_id\": \"string\",\n\t\t\t\"post\": map[string]any{\n\t\t\t\t\"text\": \"string\",\n\t\t\t},\n\t\t},\n\t\tOverrides: map[string]map[string]any{\n\t\t\t\"email\": map[string]any{\n\t\t\t\t\"bcc\": \"no-reply@novu.co\",\n\t\t\t},\n\t\t},\n\t\tTo: components.CreateToSubscriberPayloadDto(\n\t\t\tcomponents.SubscriberPayloadDto{\n\t\t\t\tSubscriberID: \"subscriber_uniuqe_identifier\",\n\t\t\t\tFirstName: \"Albert\",\n\t\t\t\tLastName: \"Einstein\",\n\t\t\t\tEmail: \"albert@einstein.com\",\n\t\t\t},\n\t\t),\n\t}, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif res.TriggerEventResponseDto != nil {\n\t\t// handle response\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Launch Commands\nDESCRIPTION: Commands to start Novu using Docker Compose for local deployment.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/self-hosting-novu/deploy-with-docker.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n\n## if above command is not working, use docker compose\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: React Component Integration\nDESCRIPTION: React component implementation for rendering the API documentation page using the APIPage component from Fumadocs.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_list-subscribers.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/subscribers\",\"method\":\"get\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Kotlin SDK with Gradle\nDESCRIPTION: Gradle dependency configuration for integrating the Novu Kotlin SDK, shown in both Groovy and Kotlin DSL formats. Users should replace {use-latest-version} with the current version number.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/kotlin.mdx#2025-04-11_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation 'co.novu:novu-kotlin:{use-latest-version}' //Groovy\n\nimplementation (\"co.novu:novu-kotlin:{use-latest-version}\") //Kotlin\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Next.js Package\nDESCRIPTION: Command to install the Novu Inbox SDK for Next.js applications using npm.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/nextjs.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @novu/nextjs\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Route Configuration for Message Action Status\nDESCRIPTION: YAML configuration defining the API endpoint route and method for marking message actions as seen. The endpoint accepts subscriberId, messageId and action type as path parameters.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_mark-action-as-seen.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmethod: POST\nroute: /v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Python SDK with PIP\nDESCRIPTION: Use PIP, the default package installer for Python, to install the Novu Python SDK from PyPI.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/python.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install novu-py\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Command to start the Next.js development server after integrating the Novu Inbox component.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/quickstart/nextjs.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Comment JSX Component\nDESCRIPTION: JSX comment indicating the file was auto-generated by Fumadocs and warning against direct edits.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_modify-subscriber-channel.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{/* This file was generated by Fumadocs. Do not edit this file directly. Any changes should be made by running the generation command again. */}\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Python SDK with Poetry\nDESCRIPTION: Use Poetry, a modern dependency management tool, to add the Novu Python SDK to your project.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/python.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry add novu-py\n```\n\n----------------------------------------\n\nTITLE: Importing Email Provider Next Steps Component\nDESCRIPTION: Imports a React component that displays next steps for email provider configuration\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/integrations/email/(providers)/mandrill.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { EmailProviderNextSteps } from '@/snippets/channels/email/email-provider-next-steps.tsx';\n```\n\n----------------------------------------\n\nTITLE: Defining API Route for Updating Subscriber Online Status in Markdown\nDESCRIPTION: This code snippet defines the API endpoint and method for updating a subscriber's online status. It uses YAML-like syntax within a Markdown file to specify the PATCH method and the route with a subscriberId parameter.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/subscribers/subscribers-v1-controller_update-subscriber-online-flag.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Update subscriber online status\ndescription: Used to update the subscriber isOnline flag.\nfull: true\n_openapi:\n  method: PATCH\n  route: /v1/subscribers/{subscriberId}/online-status\n  toc: []\n  structuredData:\n    headings: []\n    contents:\n      - content: Used to update the subscriber isOnline flag.\n---\n```\n\n----------------------------------------\n\nTITLE: Synchronous Novu SDK Usage in US Region\nDESCRIPTION: Demonstrate how to use the Novu SDK synchronously to trigger a notification event in the US region. Includes setting up the Novu client and sending a trigger event with subscriber details and payload.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/python.mdx#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport novu_py\nfrom novu_py import Novu\nimport os\n\nwith Novu(\nsecret_key=os.getenv(\"NOVU_SECRET_KEY\", \"\"),\n) as novu:\n\n    res = novu.trigger(trigger_event_request_dto=novu_py.TriggerEventRequestDto(\n        workflow_id=\"workflow_identifier\",\n        to={\n            \"subscriber_id\": \"subscriber_unique_identifier\",\n            \"first_name\": \"Albert\",\n            \"last_name\": \"Einstein\",\n            \"email\": \"albert@einstein.com\",\n        },\n        payload={\n            \"comment_id\": \"string\",\n            \"post\": {\n                \"text\": \"string\",\n            },\n        },\n        overrides={\n          \"email\": {\n            \"bcc\": \"no-reply@novu.co\"\n          }\n        },\n    ))\n\n    # Handle response\n    print(res)\n```\n\n----------------------------------------\n\nTITLE: Configuring Novu API Endpoint (Pages Router)\nDESCRIPTION: Setting up Novu API endpoint using the Pages Router pattern in Next.js\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/framework/quickstart/nextjs.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { serve } from '@novu/framework/next';\nimport { testWorkflow } from '../../novu/workflows';\n\nexport default serve({ workflows: [testWorkflow] });\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Specifications for Subscriber Removal in Markdown\nDESCRIPTION: This snippet defines the OpenAPI specifications for the subscriber removal endpoint, including the HTTP method, route, and other metadata.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/topics/topics-controller_remove-subscribers.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Subscribers removal\ndescription: Remove subscribers from a topic\nfull: true\n_openapi:\n  method: POST\n  route: /v1/topics/{topicKey}/subscribers/removal\n  toc: []\n  structuredData:\n    headings: []\n    contents:\n      - content: Remove subscribers from a topic\n---\n```\n\n----------------------------------------\n\nTITLE: Triggering Event with Novu Ruby SDK\nDESCRIPTION: This Ruby code snippet demonstrates how to use the Novu SDK to trigger an event. It initializes a Novu client with an API token and sends a notification with custom payload and recipient information.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/ruby.mdx#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'novu'\n\nclient = Novu::Client.new(access_token: 'YOUR_NOVU_API_TOKEN')\n\npayload = {\n    'name' => 'Trigger1',\n    'payload' => { # optional\n        'first-name' => 'Adam' # optional\n    },\n    'to' => {\n        'subscriberId' => '7789'\n    },\n    'transactionId' => '89kjfke9893' #optional\n}\n\nclient.trigger_event(payload)\n```\n\n----------------------------------------\n\nTITLE: Rendering Roadmap Card Component with Next.js/React\nDESCRIPTION: This code snippet shows the implementation of a Card component that links to Novu's roadmap page. It uses the Cards and Card components from fumadocs-ui library along with the MapIcon from lucide-react.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/roadmap.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Cards>\n  <Card\n    title=\"Novu's Roadmap\"\n    icon={<MapIcon className=\"w-4 h-4\" />}\n    href=\"https://roadmap.novu.co/roadmap\">\n    Learn about ongoing developments, upcoming plans, and items in our backlog..\n  </Card>\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Notifications API Route Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration defining the API endpoint properties for retrieving notifications. Specifies the HTTP method, route path, and metadata for documentation generation.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/notifications/notifications-controller_list-notifications.mdx#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Get notifications\nfull: true\n_openapi:\n  method: GET\n  route: /v1/notifications\n  toc: []\n  structuredData:\n    headings: []\n    contents: []\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Typescript SDK via NPM\nDESCRIPTION: Command to install the @novu/api package using NPM package manager.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/typescript.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @novu/api\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Dependencies\nDESCRIPTION: Commands to navigate to the Novu directory and set up the project with all required dependencies.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd novu && npm run setup:project\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Component in JSX\nDESCRIPTION: This code snippet renders an APIPage component, likely part of a documentation framework. It specifies the OpenAPI specification document and the specific API operation to display.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_remove-integration.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/integrations/{integrationId}\",\"method\":\"delete\"}]} webhooks={[]} hasHead={false} />\n```\n\n----------------------------------------\n\nTITLE: Installing Novu Typescript SDK via Yarn\nDESCRIPTION: Commands to install the @novu/api package and its peer dependency zod using Yarn package manager.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/typescript.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @novu/api zod\n\n## Note that Yarn does not install peer dependencies automatically. You will need\n\n## to install zod as shown above.\n```\n\n----------------------------------------\n\nTITLE: Starting Novu Project\nDESCRIPTION: Command to start the Novu project using the Jarvis CLI tool.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Rendering Novu Logo and Header in HTML\nDESCRIPTION: HTML markup for displaying the Novu logo with dark/light mode support, badges showing Product Hunt awards, npm downloads, and Hacker News recognition, along with the project's main tagline and description.\nSOURCE: https://github.com/novuhq/docs/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div align=\"center\">\n  <a href=\"https://novu.co?utm_source=github\" target=\"_blank\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/2233092/213641039-220ac15f-f367-4d13-9eaf-56e79433b8c1.png\">\n    <img alt=\"Novu Logo\" src=\"https://user-images.githubusercontent.com/2233092/213641043-3bbb3f21-3c53-4e67-afe5-755aeb222159.png\" width=\"280\"/>\n  </picture>\n  </a>\n</div>\n\n<br/>\n\n<p align=\"center\">\n   <a href=\"https://www.producthunt.com/products/novu\">\n    <img src=\"https://img.shields.io/badge/Product%20Hunt-Golden%20Kitty%20Award%202023-yellow\" alt=\"Product Hunt\">\n  </a>\n  <a href=\"https://news.ycombinator.com/item?id=38419513\"><img src=\"https://img.shields.io/badge/Hacker%20News-%231-%23FF6600\" alt=\"Hacker News\"></a>\n  <a href=\"https://www.npmjs.com/package/@novu/node\">\n    <img src=\"https://img.shields.io/npm/dm/@novu/node\" alt=\"npm downloads\">\n  </a>\n</p>\n\n<h1 align=\"center\">The &lt;Inbox /&gt; infrastructure for modern products</h1>\n\n<div align=\"center\">\nThe notification platform that turns complex multi-channel delivery into a single <Inbox /> component. Built for developers, designed for growth, powered by open source.\n</div>\n\n  <p align=\"center\">\n    <br />\n    <a href=\"https://github.novu.co?utm_campaign=gh_org_profile&utm_source=github\" rel=\"dofollow\"><strong>Visit our main GitHub Repository »</strong></a>\n    <br />\n  </p>\n```\n\n----------------------------------------\n\nTITLE: Triggering Notifications with Novu SDK (EU Region)\nDESCRIPTION: Example of using the Novu Typescript SDK to trigger a notification for an EU region server. It shows how to initialize the Novu client with a custom server URL and send a notification with subscriber details, workflow ID, and custom payload.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/platform/sdks/server/typescript.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Novu } from \"@novu/api\";\n\nconst novu = new Novu({\n  secretKey: \"<YOUR_SECRET_KEY_HERE>\",\n  serverUrl: \"https://eu.api.novu.co\",\n});\n\nasync function run() {\n  const result = await novu.trigger({\n    to: {\n      \"subscriberId\": \"subscriber_unique_identifier\",\n      \"firstName\": \"Albert\",\n      \"lastName\": \"Einstein\",\n      \"email\": \"albert@einstein.com\",\n      \"phone\": \"+1234567890\",\n    },\n    workflowId: \"workflow_identifier\",\n    payload: {\n      \"comment_id\": \"string\",\n      \"post\": {\n        \"text\": \"string\",\n      },\n    },\n    overrides: {\n      \"email\": {\n        \"bcc\": \"no-reply@novu.co\"\n      },\n    },\n  });\n\n  // Handle the result\n  console.log(result);\n}\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Starting Novu Services in Test Environment\nDESCRIPTION: Commands for starting all required Novu services in test environment to prepare for Cypress end-to-end testing. This includes starting the web interface, API service, worker service, and WebSocket service.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/run-in-local-machine.mdx#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start:web\nnpm run start:api:test\nnpm run start:worker:test\nnpm run start:ws:test\n```\n\n----------------------------------------\n\nTITLE: Provider Enum Definition\nDESCRIPTION: Enum definition for the new email provider ID\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/community/add-a-new-provider.mdx#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport enum EmailProviderIdEnum {\n  ExampleProvider = 'example-provider',\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with ngrok\nDESCRIPTION: This command uses ngrok to create a secure tunnel to the local server running on port 3000, providing a public URL for webhook testing.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/guides/webhooks/clerk.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Rendering API Documentation Component in JSX\nDESCRIPTION: This code renders the APIPage component from Fumadocs to display documentation for the POST /v1/integrations endpoint. The component is configured to show operations for the specified path and method without headers.\nSOURCE: https://github.com/novuhq/docs/blob/main/content/docs/api-reference/integrations/integrations-controller_create-integration.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<APIPage document={\"https://spec.speakeasy.com/novu/novu/json-development-with-code-samples\"} operations={[{\"path\":\"/v1/integrations\",\"method\":\"post\"}]} webhooks={[]} hasHead={false} />\n```"
  }
]