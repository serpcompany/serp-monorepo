[
  {
    "owner": "google",
    "repo": "zx",
    "content": "TITLE: Executing Shell Commands with Zx in JavaScript\nDESCRIPTION: A sample Zx script demonstrating various capabilities including executing shell commands, capturing command output, using template literals for variable interpolation, running parallel processes, and handling spaces in filenames.\nSOURCE: https://github.com/google/zx/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env zx\n\nawait $`cat package.json | grep name`\n\nconst branch = await $`git branch --show-current`\nawait $`dep deploy --branch=${branch}`\n\nawait Promise.all([\n  $`sleep 1; echo 1`,\n  $`sleep 2; echo 2`,\n  $`sleep 3; echo 3`,\n])\n\nconst name = 'foo bar'\nawait $`mkdir /tmp/${name}`\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands with ZX in JavaScript\nDESCRIPTION: Basic example of a ZX script that demonstrates command execution, variable interpolation, parallel processing, and working with shell commands. The script shows how to execute shell commands and capture their output using the $ template literal syntax.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env zx\n\nawait $`cat package.json | grep name`\n\nconst branch = await $`git branch --show-current`\nawait $`dep deploy --branch=${branch}`\n\nawait Promise.all([\n  $`sleep 1; echo 1`,\n  $`sleep 2; echo 2`,\n  $`sleep 3; echo 3`,\n])\n\nconst name = 'foo bar'\nawait $`mkdir /tmp/${name}`\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous and Asynchronous Command Execution in Zx\nDESCRIPTION: Demonstrates how to run commands in both synchronous and asynchronous modes using the $ function. Async mode returns a ProcessPromise while sync mode returns a ProcessOutput.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = await $`ls -la`\nconst dir = $.sync`pwd`\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables in zx Scripts\nDESCRIPTION: This snippet demonstrates how to set and use environment variables within zx scripts. The environment variable 'FOO' is set to 'bar' and then accessed within a shell command.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.FOO = 'bar'\nawait $`echo $FOO`\n```\n\n----------------------------------------\n\nTITLE: Finding Files with glob()\nDESCRIPTION: Shows how to use the glob() function to find files matching specified patterns. This is a wrapper around the globby package and supports both async and sync operations.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst packages = await glob(['package.json', 'packages/*/package.json'])\nconst markdowns = glob.sync('*.md') // sync API shortcut\n```\n\n----------------------------------------\n\nTITLE: Suppressing Command Errors with nothrow Option\nDESCRIPTION: Shows how to suppress errors when executing commands by using the nothrow option. This returns a ProcessOutput with details about the error instead of throwing an exception.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst o1 = await $({nothrow: true})`exit 1`\no1.ok       // false\no1.exitCode // 1\no1.message  // exit code: 1 ...\n\nconst o2 = await $({nothrow: true, spawn() { throw new Error('BrokenSpawn') }})`echo foo`\no2.ok       // false\no2.exitCode // null\no2.message  // BrokenSpawn ...\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Files with tmpfile()\nDESCRIPTION: Shows how to create temporary files using the tmpfile() function. Supports creating empty files, files with content, and files with specific permissions.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nf1 = tmpfile()         // /os/based/tmp/zx-1ra1iofojgg\nf2 = tmpfile('f2.txt')  // /os/based/tmp/zx-1ra1iofojgg/foo.txt\nf3 = tmpfile('f3.txt', 'string or buffer')\nf4 = tmpfile('f4.sh', 'echo \"foo\"', 0o744) // executable\n```\n\n----------------------------------------\n\nTITLE: Executing Commands and Obtaining ProcessOutput in zx (TypeScript)\nDESCRIPTION: Demonstrates how to execute a command using zx and obtain a ProcessOutput object. The command is executed using the $ template literal, returning a ProcessPromise which can be awaited to get the ProcessOutput.\nSOURCE: https://github.com/google/zx/blob/main/docs/process-output.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = $`command` // ProcessPromise\nconst o = await p     // ProcessOutput\n```\n\n----------------------------------------\n\nTITLE: Error Handling with ProcessOutput in ZX\nDESCRIPTION: Example of handling errors when a shell command fails by catching the ProcessOutput exception. This shows how to access the exit code and error output when a command fails.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n  await $`exit 1`\n} catch (p) {\n  console.log(`Exit code: ${p.exitCode}`)\n  console.log(`Error: ${p.stderr}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Execution Presets with $({...})\nDESCRIPTION: Shows how to create custom presets for command execution by using $ as a factory function. This allows setting different options like environment variables and verbosity levels.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $$ = $({\n  verbose: false,\n  env: {NODE_ENV: 'production'},\n})\n\nconst env = await $$`node -e 'console.log(process.env.NODE_ENV)'`\nconst pwd = $$.sync`pwd`\nconst hello = $({quiet: true})`echo \"Hello!\"`\n```\n\n----------------------------------------\n\nTITLE: Basic ProcessPromise Usage in JavaScript\nDESCRIPTION: Demonstrates basic usage of ProcessPromise for command execution and awaiting results\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = $`command` // ProcessPromise\nconst o = await p    // ProcessOutput\n```\n\n----------------------------------------\n\nTITLE: Using the $ Function for Command Execution in ZX\nDESCRIPTION: Examples of using the $ function in both async and sync modes to execute shell commands and capture their output. This demonstrates the core functionality of ZX for command execution.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst list = await $`ls -la`\nconst dir = $.sync`pwd`\n```\n\n----------------------------------------\n\nTITLE: Importing zx Functions into Node.js Scripts\nDESCRIPTION: This example demonstrates how to explicitly import the '$' function from zx into a regular Node.js script. This allows using zx functionality without using zx as the script runner.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\nimport {$} from 'zx'\n\nawait $`date`\n```\n\n----------------------------------------\n\nTITLE: Changing Directory with cd()\nDESCRIPTION: Shows how to change the current working directory using the cd() function. This affects the context for subsequent command executions.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ncd('/tmp')\nawait $`pwd` // => /tmp\n```\n\n----------------------------------------\n\nTITLE: Using Command Output as Input to Other Commands\nDESCRIPTION: Example showing how to use the output of one command as input to another command in ZX. This demonstrates command composition and automatic handling of newlines.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst date = await $`date`\nawait $`echo Current date is ${date}.`\n```\n\n----------------------------------------\n\nTITLE: Retrying Operations with retry()\nDESCRIPTION: Shows how to retry operations using the retry() function. Supports specified number of attempts, delay between attempts, and exponential backoff.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = await retry(10, () => $`curl https://medv.io`)\n\n// With a specified delay between attempts.\nconst p = await retry(20, '1s', () => $`curl https://medv.io`)\n\n// With an exponential backoff.\nconst p = await retry(30, expBackoff(), () => $`curl https://medv.io`)\n```\n\n----------------------------------------\n\nTITLE: Passing Input to Command Execution\nDESCRIPTION: Demonstrates how to provide standard input (stdin) to commands using the input option. Input can be provided as string, Buffer, Readable stream, or output from another command.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst p1 = $({ input: 'foo' })`cat`\nconst p2 = $({ input: Readable.from('bar') })`cat`\nconst p3 = $({ input: Buffer.from('baz') })`cat`\nconst p4 = $({ input: p3 })`cat`\nconst p5 = $({ input: await p3 })`cat`\n```\n\n----------------------------------------\n\nTITLE: Controlling Verbose and Quiet Modes in zx\nDESCRIPTION: This snippet demonstrates how to control the output verbosity in zx scripts. It shows global and in-place methods for enabling verbose mode or suppressing command output.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Global debug mode on\n$.verbose = true\nawait $`echo hello`\n\n// Suppress the particular command\nawait $`echo fobar`.quiet()\n\n// Suppress everything\n$.quiet = true\nawait $`echo world`\n\n// Turn on in-place debug\nawait $`echo foo`.verbose()\n```\n\n----------------------------------------\n\nTITLE: Combining JavaScript and Bash in a Markdown Script for zx\nDESCRIPTION: This snippet demonstrates how to structure a Markdown file that includes both JavaScript and Bash code blocks. It shows how to use zx to execute shell commands within JavaScript and provides a Bash example for comparison.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Some script\n`ls` — is an unix command to get directory contents. Let's see how to use it in `zx`:\n\n```js\n// ts, js, cjs, mjs, etc\nconst {stdout} = await $`ls -l`\nconsole.log('directory contents:', stdout)\n```\n\nThis part invokes the same command in a different way:\n```bash\n# bash syntax\nls -l\n```\n```\n\n----------------------------------------\n\nTITLE: Working with Files using fs-extra\nDESCRIPTION: Demonstrates using the fs-extra package for file system operations. Provides enhanced functionality over the standard Node.js fs module.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nconst {version} = await fs.readJson('./package.json')\n```\n\n----------------------------------------\n\nTITLE: Options Interface for Command Execution\nDESCRIPTION: Defines the TypeScript interface for all available options when executing commands with Zx. These options control various aspects of the command execution environment.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Options {\n  cwd:            string\n  ac:             AbortController\n  signal:         AbortSignal\n  input:          string | Buffer | Readable | ProcessOutput | ProcessPromise\n  timeout:        Duration\n  timeoutSignal:  NodeJS.Signals\n  stdio:          StdioOptions\n  verbose:        boolean\n  sync:           boolean\n  env:            NodeJS.ProcessEnv\n  shell:          string | true\n  nothrow:        boolean\n  prefix:         string\n  postfix:        string\n  quote:          typeof quote\n  quiet:          boolean\n  detached:       boolean\n  preferLocal:    boolean | string | string[]\n  spawn:          typeof spawn\n  spawnSync:      typeof spawnSync\n  store:          TSpawnStore\n  log:            typeof log\n  kill:           typeof kill\n  killSignal:     NodeJS.Signals\n  halt:           boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Using zx with TypeScript\nDESCRIPTION: A simple example of importing and using zx to run shell commands in a TypeScript file. This demonstrates the basic pattern of using the $ template literal to execute shell commands.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// script.ts\nimport { $ } from 'zx'\n\nconst list = await $`ls -la`\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Settings in ZX\nDESCRIPTION: Shows the complete default configuration object with all available options and their default values.\nSOURCE: https://github.com/google/zx/blob/main/docs/configuration.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n$.defaults = {\n  cwd:            process.cwd(),\n  env:            process.env,\n  verbose:        false,\n  quiet:          false,\n  sync:           false,\n  shell:          true,\n  prefix:         'set -euo pipefail;',   // for bash\n  postfix:        '; exit $LastExitCode', // for powershell\n  nothrow:        false,\n  stdio:          'pipe', // equivalent to ['pipe', 'pipe', 'pipe']\n  detached:       false,\n  preferLocal:    false,\n  spawn:          childProcess.spawn,\n  spawnSync:      childProcess.spawnSync,\n  log:            $.log,\n  killSignal:     'SIGTERM',\n  timeoutSignal:  'SIGTERM'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ZX Globals Explicitly\nDESCRIPTION: Method to explicitly import ZX globals for better IDE autocomplete support. This is useful when working in environments like VS Code that benefit from explicit imports.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'zx/globals'\n```\n\n----------------------------------------\n\nTITLE: Installing zx via Package Managers\nDESCRIPTION: Various commands to install zx using different package managers including npm, yarn, pnpm, bun, and deno\nSOURCE: https://github.com/google/zx/blob/main/docs/setup.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zx\nnpx zx script.js\nnpx zx@8.5.0 script.js\nyarn add zx\npnpm add zx\nbun install zx\ndeno install -A npm:zx\n```\n\n----------------------------------------\n\nTITLE: Passing Arrays to Shell Commands in zx\nDESCRIPTION: This snippet shows how to pass an array of values as arguments to a shell command in zx. Each item in the array is individually escaped and concatenated with spaces.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst files = [...]\nawait $`tar cz ${files}`\n```\n\n----------------------------------------\n\nTITLE: Getting User Input with question()\nDESCRIPTION: Shows how to prompt the user for input using the question() function, which wraps the Node.js readline API. Supports both free-form text input and selecting from choices.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst bear = await question('What kind of bear is best? ')\nconst selected = await question('Select an option:', {\n  choices: ['A', 'B', 'C'],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Arrays for Command Arguments in Zx\nDESCRIPTION: Demonstrates how to pass an array of arguments to a command in Zx, where each item is properly quoted and joined by spaces.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst flags = [\n  '--oneline',\n  '--decorate',\n  '--color',\n]\nawait $`git log ${flags}`\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary Directories with tmpdir()\nDESCRIPTION: Demonstrates creating temporary directories using the tmpdir() function. Can create either a root temporary directory or subdirectories with specified names.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nt1 = tmpdir()       // /os/based/tmp/zx-1ra1iofojgg/\nt2 = tmpdir('foo')  // /os/based/tmp/zx-1ra1iofojgg/foo/\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Shell Commands with zx.js\nDESCRIPTION: Demonstrates executing basic shell commands using zx's template literal syntax. Shows how to run whoami and echo commands with await.\nSOURCE: https://github.com/google/zx/blob/main/test/fixtures/markdown.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`whoami`\nawait $`echo ${__dirname}`\n```\n\n----------------------------------------\n\nTITLE: Making Commands Abortable with Signal Option\nDESCRIPTION: Shows how to make command execution abortable using the AbortController and signal option. This allows terminating long-running commands programmatically.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {signal} = new AbortController()\nconst p = $({ signal })`sleep 9999`\n\nsetTimeout(() => signal.abort('reason'), 1000)\n```\n\n----------------------------------------\n\nTITLE: Manipulating File Paths with path\nDESCRIPTION: Demonstrates using the Node.js path module to manipulate file paths in a platform-independent way. Handles path joining and normalization.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`mkdir ${path.join(basedir, 'output')}`\n```\n\n----------------------------------------\n\nTITLE: Process Output Piping in JavaScript\nDESCRIPTION: Shows various ways to pipe process output including file writing and stream transformations\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`echo \"Hello, stdout!\"`\n  .pipe(fs.createWriteStream('/tmp/output.txt'))\n\nawait $`cat /tmp/output.txt`\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with fetch()\nDESCRIPTION: Shows how to use the fetch() function to make HTTP requests. This is a wrapper around the node-fetch-native package.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst resp = await fetch('https://medv.io')\nconst json = await resp.json()\n```\n\n----------------------------------------\n\nTITLE: Basic Zx Script Execution\nDESCRIPTION: Shows basic ways to execute scripts using zx CLI, including direct execution, npx usage, and node imports\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzx script.mjs\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx zx script.mjs\nnode -r zx/globals script.mjs\nnode --import zx/globals script.mjs\n```\n\n----------------------------------------\n\nTITLE: Customizing Command Line Argument Parsing\nDESCRIPTION: Demonstrates how to customize command line argument parsing with minimist options. Supports defining boolean flags and aliases for arguments.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCustomArgv = minimist(process.argv.slice(2), {\n  boolean: [\n    'force',\n    'help',\n  ],\n  alias: {\n    h: 'help',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Module Import Examples for zx\nDESCRIPTION: Examples showing both ESM and CommonJS import patterns for zx\nSOURCE: https://github.com/google/zx/blob/main/docs/setup.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { $ } from 'zx'\n\nconst { $ } = require('zx')\n```\n\n----------------------------------------\n\nTITLE: Creating Isolated Contexts with within()\nDESCRIPTION: Demonstrates how to create isolated asynchronous contexts using the within() function. Changes to $ settings within the function do not affect the outer context.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`pwd` // => /home/path\n$.foo = 'bar'\n\nwithin(async () => {\n  $.cwd = '/tmp'\n  $.foo = 'baz'\n\n  setTimeout(async () => {\n    await $`pwd` // => /tmp\n    $.foo // baz\n  }, 1000)\n})\n\nawait $`pwd` // => /home/path\n$.foo // still 'bar'\n```\n\n----------------------------------------\n\nTITLE: Setting Local Binary Preferences in ZX\nDESCRIPTION: Examples of configuring ZX to prefer local binaries over global ones, with options for single and multiple binary paths.\nSOURCE: https://github.com/google/zx/blob/main/docs/configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$.preferLocal = true\n\nawait $`c8 npm test`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$.preferLocal = '/some/to/bin'\n$.preferLocal = ['/path/to/bin', '/another/path/bin']\n```\n\n----------------------------------------\n\nTITLE: Correct Glob Pattern Usage in Zx\nDESCRIPTION: Demonstrates the correct approach to using glob patterns in Zx by using the glob() function to resolve patterns before passing them to commands.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst files = await glob('./**/*.md')\nawait $`ls ${files}`\n```\n\n----------------------------------------\n\nTITLE: Using Pre-parsed Command Line Arguments with argv\nDESCRIPTION: Shows how to use the pre-parsed argv object, which contains command line arguments processed by minimist. Useful for quickly accessing script arguments.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nif (argv.someFlag) {\n  echo('yes')\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Directly via JavaScript in zx\nDESCRIPTION: Shows how to set the shell path directly through the JavaScript API by modifying the $.shell property.\nSOURCE: https://github.com/google/zx/blob/main/docs/shell.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n$.shell = '/bin/zsh'\n```\n\n----------------------------------------\n\nTITLE: Shell Command Quoting with quote()\nDESCRIPTION: Shows how to use the quote() function for proper quoting of strings in bash commands. This helps prevent shell injection vulnerabilities.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nquote(\"$FOO\") // \"$'$FOO'\"\n```\n\n----------------------------------------\n\nTITLE: Shell Environment Configuration in zx\nDESCRIPTION: JavaScript code showing how to switch between different shell environments (Bash, PowerShell) in zx\nSOURCE: https://github.com/google/zx/blob/main/docs/setup.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useBash, usePowerShell, usePwsh } from 'zx'\n\nusePowerShell() // Use PowerShell.exe\nusePwsh()       // Rely on pwsh binary (PowerShell v7+)\nuseBash()       // Switch back to bash\n```\n\n----------------------------------------\n\nTITLE: Parsing Command Line Arguments with minimist\nDESCRIPTION: Demonstrates how to parse command line arguments using the minimist package. Allows parsing process.argv with custom options.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst argv = minimist(process.argv.slice(2), {})\n```\n\n----------------------------------------\n\nTITLE: Setting Bash as Default Shell with useBash()\nDESCRIPTION: Shows how to set bash as the default shell for command execution. This also sets the quote function to use bash-specific quoting.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nuseBash()\n```\n\n----------------------------------------\n\nTITLE: Async Iterator Usage in JavaScript\nDESCRIPTION: Demonstrates using async iterator to process stdout line by line\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = $`echo \"Line1\\nLine2\\nLine3\"`\nfor await (const line of p) {\n  console.log()\n}\n```\n\n----------------------------------------\n\nTITLE: Reading from Standard Input with stdin()\nDESCRIPTION: Shows how to read from standard input (stdin) as a string using the stdin() function. Useful for processing piped input to the script.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst content = JSON.parse(await stdin())\n```\n\n----------------------------------------\n\nTITLE: ProcessOutput Interface Definition in zx (TypeScript)\nDESCRIPTION: Defines the ProcessOutput interface, which extends Error and includes properties and methods for accessing command execution results. It provides access to exit code, signal, stdout, stderr, and methods for parsing output in various formats.\nSOURCE: https://github.com/google/zx/blob/main/docs/process-output.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ProcessOutput extends Error {\n  // Exit code of the process: 0 for success, non-zero for failure\n  exitCode: number\n  \n  // Signal that caused the process to exit: SIGTERM, SIGKILL, etc.\n  signal: NodeJS.Signals | null\n  \n  // Holds the stdout of the process\n  stdout: string\n  \n  // Process errors are written to stderr\n  stderr: string\n\n  buffer(): Buffer\n\n  json<T = any>(): T\n\n  blob(type = 'text/plain'): Blob\n  \n  text(encoding: Encoding = 'utf8'): string\n\n  // Output lines splitted by newline\n  lines(): string[]\n  \n  // combined stdout and stderr\n  toString(): string\n\n  // Same as toString() but trimmed\n  valueOf(): string\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Bash Profiles in zx Scripts\nDESCRIPTION: This snippet shows how to make bash aliases and functions available in zx scripts by modifying the $.prefix property. This example loads NVM (Node Version Manager) configuration before execution.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.prefix += 'export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; '\nawait $`nvm -v`\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logging in ZX\nDESCRIPTION: Shows how to implement custom logging functionality with masking and output formatting.\nSOURCE: https://github.com/google/zx/blob/main/docs/configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LogEntry, log} from 'zx/core'\n\n$.log = (entry: LogEntry) => {\n  switch (entry.kind) {\n    case 'cmd':\n      // for example, apply custom data masker for cmd printing\n      process.stderr.write(masker(entry.cmd))\n      break\n    default:\n      log(entry)\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$.log.output = process.stdout\n```\n\nLANGUAGE: typescript\nCODE:\n```\n$.log.formatters = {\n  cmd: (entry: LogEntry) => `CMD: ${entry.cmd}`,\n  fetch: (entry: LogEntry) => `FETCH: ${entry.url}`\n}\n```\n\n----------------------------------------\n\nTITLE: Piping fetch() Output to Commands\nDESCRIPTION: Demonstrates how to pipe output from fetch() directly to commands. This is useful for handling large responses that exceed string size limits.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst p1 = fetch('https://example.com').pipe($`cat`)\nconst p2 = fetch('https://example.com').pipe`cat`\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with tsx\nDESCRIPTION: Using tsx, a Node.js-compatible TypeScript executor that can be used directly or as a Node.js import hook. This requires installing the tsx package.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install tsx\n\ntsx script.ts\n# or\nnode --import=tsx script.ts\n```\n\n----------------------------------------\n\nTITLE: Locating Executables with which()\nDESCRIPTION: Demonstrates using the which() function to locate executable files in the system PATH. This is a wrapper around the which package and can be configured to not throw on missing executables.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst node = await which('node')\n```\n\n----------------------------------------\n\nTITLE: Automatic String Escaping in ZX Commands\nDESCRIPTION: Example showing how ZX automatically escapes and quotes strings interpolated into commands. This prevents shell injection issues with special characters.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = 'foo & bar'\nawait $`mkdir ${name}`\n```\n\n----------------------------------------\n\nTITLE: Using Colored Console Output with chalk\nDESCRIPTION: Shows how to use the chalk package to create colored console output. This enhances readability and visual appeal of script output.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(chalk.blue('Hello world!'))\n```\n\n----------------------------------------\n\nTITLE: Accessing Operating System Information with os\nDESCRIPTION: Shows how to use the Node.js os module to access operating system information. Useful for making scripts work across different environments.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`cd ${os.homedir()} && mkdir example`\n```\n\n----------------------------------------\n\nTITLE: Listing Processes with ps\nDESCRIPTION: Demonstrates using the ps object to list processes in a cross-platform way. Supports looking up processes by command, building process trees, and recursive listing.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst all = await ps.lookup()\nconst nodejs = await ps.lookup({ command: 'node' })\nconst children = await ps.tree({ pid: 123 })\nconst fulltree = await ps.tree({ pid: 123, recursive: true })\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands in JavaScript with zx\nDESCRIPTION: This snippet demonstrates how to execute shell commands using zx in JavaScript. It shows two commands: 'whoami' and 'echo' with the __dirname variable.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown-scripts.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`whoami`\nawait $`echo ${__dirname}`\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with zx using npx\nDESCRIPTION: Using the NODE_OPTIONS environment variable to enable TypeScript support when running zx scripts via npx. This approach works with Node.js v22.6.0 or later.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Since Node.js v22.6.0\nNODE_OPTIONS=\"--experimental-strip-types\" zx script.js\n```\n\n----------------------------------------\n\nTITLE: Displaying Command Progress with spinner()\nDESCRIPTION: Demonstrates using the spinner() function to display a progress indicator during long-running commands. Supports custom messages and is automatically disabled in CI environments.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nawait spinner(() => $`long-running command`)\n\n// With a message.\nawait spinner('working...', () => $`sleep 99`)\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command in TypeScript with zx\nDESCRIPTION: This snippet shows how to execute a shell command (pwd) using zx in TypeScript.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown-scripts.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait $`pwd`\n```\n\n----------------------------------------\n\nTITLE: Custom Logging in zx Scripts\nDESCRIPTION: This snippet shows how to override the default logger in zx with a custom implementation. It includes examples of global logger replacement and command-specific logging.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// globally\n$.log = (entry) => {\n  switch (entry.kind) {\n    case 'cmd':\n      console.log('Command:', entry.cmd)\n      break\n    default:\n      console.warn(entry)\n  }\n}\n// or in-place\n$({log: () => {}})`echo hello`\n```\n\n----------------------------------------\n\nTITLE: Template Literal Path Construction in Zx\nDESCRIPTION: Demonstrates the preferred way to construct paths using template literals in Zx.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`mkdir path/to-dir/${name}`\n```\n\n----------------------------------------\n\nTITLE: Using within() to Modify Command Environment\nDESCRIPTION: Shows how to use within() to modify the command execution environment temporarily. This example demonstrates switching Node.js versions using nvm within the isolated context.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`node --version` // => v20.2.0\n\nconst version = await within(async () => {\n  $.prefix += 'export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; nvm use 16;'\n\n  return $`node --version`\n})\n\necho(version) // => v16.20.0\n```\n\n----------------------------------------\n\nTITLE: Using zx in GitHub Actions Workflows\nDESCRIPTION: This YAML snippet demonstrates how to use zx in GitHub Actions workflows. It leverages the pre-installed npx to run zx scripts within the workflow, with color output forced.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n#      - uses: actions/setup-node@v4\n#        with:\n#          node-version: 22\n\n      - name: Build with zx\n        env:\n          FORCE_COLOR: 3\n        run: |\n          npx zx <<'EOF'\n          await $`...`\n          EOF\n```\n\n----------------------------------------\n\nTITLE: Working with Environment Variables using dotenv\nDESCRIPTION: Demonstrates using the envapi package (exposed as dotenv) to work with environment variables in dotenv format. Supports parsing, loading, and configuring environment variables.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\n// parse\nconst raw = 'FOO=BAR\\nBAZ=QUX'\nconst data = dotenv.parse(raw) // {FOO: 'BAR', BAZ: 'QUX'}\nawait fs.writeFile('.env', raw)\n\n// load\nconst env = dotenv.load('.env')\nawait $({ env })`echo $FOO`.stdout // BAR\n\n// config\ndotenv.config('.env')\nprocess.env.FOO // BAR\n```\n\n----------------------------------------\n\nTITLE: Printing Output with echo()\nDESCRIPTION: Demonstrates the echo() function, an alternative to console.log() that can handle ProcessOutput objects. Can be used with template literals or multiple arguments.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst branch = await $`git branch --show-current`\n\necho`Current branch is ${branch}.`\n// or\necho('Current branch is', branch)\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell as Default Shell with usePowerShell()\nDESCRIPTION: Demonstrates how to switch to PowerShell as the default shell for command execution. This also applies PowerShell-specific quoting.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nusePowerShell()\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with ts-node\nDESCRIPTION: Using ts-node to run TypeScript files directly without separate compilation step. This tool can be used either directly or as a Node.js loader.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ts-node\n\nts-node script.ts\n# or via node loader\nnode --loader ts-node/esm script.ts\n```\n\n----------------------------------------\n\nTITLE: Output Formatting Methods in JavaScript\nDESCRIPTION: Shows various output formatting methods including text, hex, buffer, lines and JSON parsing\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = $`echo 'foo\\nbar'`\n\nawait p.text()        // foo\\n\\bar\\n\nawait p.text('hex')   //  666f6f0a0861720a\nawait p.buffer()      //  Buffer.from('foo\\n\\bar\\n')\nawait p.lines()       // ['foo', 'bar']\nawait $`echo '{\"foo\": \"bar\"}'`.json() // {foo: 'bar'}\n```\n\n----------------------------------------\n\nTITLE: Process Exit Code Checking in JavaScript\nDESCRIPTION: Demonstrates how to check process exit code using Promise resolution\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nif (await $`[[ -d path ]]`.exitCode == 0) {\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Script Execution\nDESCRIPTION: Shows how to execute scripts from remote URLs\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nzx https://medv.io/game-of-life.js\n```\n\n----------------------------------------\n\nTITLE: Setting Command Timeout\nDESCRIPTION: Demonstrates setting an automatic timeout for command execution. The process will be killed after the specified timeout duration.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = $({timeout: '1s'})`sleep 999`\n```\n\n----------------------------------------\n\nTITLE: PowerShell Command Quoting with quotePowerShell()\nDESCRIPTION: Demonstrates using the quotePowerShell() function for proper quoting of strings in PowerShell commands. This is specific to PowerShell syntax.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nquotePowerShell(\"$FOO\") // \"'$FOO'\"\n```\n\n----------------------------------------\n\nTITLE: Delayed Process Execution in TypeScript\nDESCRIPTION: Shows how to create a halted process that can be manually started later using the halt option\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = $({halt: true})`command`\nconst o = await p.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Shell via CLI Flag in zx\nDESCRIPTION: Demonstrates how to specify a custom shell using the --shell command line flag when executing a zx script.\nSOURCE: https://github.com/google/zx/blob/main/docs/shell.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzx --shell /bin/zsh script.js\n```\n\n----------------------------------------\n\nTITLE: Terminating Processes with kill()\nDESCRIPTION: Shows how to terminate processes using the kill() function. Can specify the process ID and optionally a signal to send.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nawait kill(123)\nawait kill(123, 'SIGKILL')\n```\n\n----------------------------------------\n\nTITLE: ProcessOutput Class Definition in ZX\nDESCRIPTION: TypeScript definition of the ProcessOutput class showing available properties for process results. This class encapsulates the output of executed commands.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProcessOutput {\n  readonly stdout: string\n  readonly stderr: string\n  readonly signal: string\n  readonly exitCode: number\n\n  toString(): string // Combined stdout & stderr.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pwsh (PowerShell v7+) as Default Shell with usePwsh()\nDESCRIPTION: Shows how to set pwsh (PowerShell version 7 or later) as the default shell for command execution.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nusePwsh()\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML with yaml\nDESCRIPTION: Shows how to use the yaml package to parse YAML data. Useful for configuration files and data interchange.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(YAML.parse('foo: bar').foo)\n```\n\n----------------------------------------\n\nTITLE: Working Around Output Truncation in Node.js with Temporary Files\nDESCRIPTION: A workaround for the Node.js issue where console.log() output gets truncated when process.exit() is called. This solution writes command output to a temporary file and then reads it back to prevent data loss.\nSOURCE: https://github.com/google/zx/blob/main/docs/known-issues.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst tmp = await $`mktemp` // Creates a temp file.\nconst {stdout} = await $`cmd > ${tmp}; cat ${tmp}`\n```\n\n----------------------------------------\n\nTITLE: Forcing Colors in Subprocess Output\nDESCRIPTION: A workaround for subprocesses not displaying colors when executed via the $ operator. This code forces color output by setting the FORCE_COLOR environment variable before running the command.\nSOURCE: https://github.com/google/zx/blob/main/docs/known-issues.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.FORCE_COLOR='1'\nawait $`cmd`\n```\n\n----------------------------------------\n\nTITLE: Using which() with nothrow Option\nDESCRIPTION: Shows how to use the which() function with the nothrow option to handle cases where an executable might not be found without throwing an error.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst pathOrNull = await which('node', { nothrow: true })\n```\n\n----------------------------------------\n\nTITLE: Correct Command Assembly with Arrays in Zx\nDESCRIPTION: Demonstrates the correct approach to dynamically assemble commands in Zx by building an array of arguments that will be properly quoted by Zx.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst args = []\nif (force) args.push('-f')\nif (recursive) args.push('-r')\nargs.push(file)\n\nawait $`rm ${args}` // [!code hl]\n```\n\n----------------------------------------\n\nTITLE: Using cd() with Command Output\nDESCRIPTION: Demonstrates using cd() with output from another command. The function trims trailing newlines from ProcessOutput, enabling common idioms for directory navigation.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ncd(await $`mktemp -d`)\n```\n\n----------------------------------------\n\nTITLE: Dependency Installation Example\nDESCRIPTION: Shows how to use automatic dependency installation with version specifications\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// script.mjs:\nimport sh from 'tinysh'\n\nsh.say('Hello, world!')\n```\n\nLANGUAGE: js\nCODE:\n```\nimport sh from 'tinysh' // @^1\n```\n\n----------------------------------------\n\nTITLE: Running ZX Scripts from Command Line\nDESCRIPTION: Commands to make a ZX script executable and run it directly. This demonstrates how to set permissions and execute the script file.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./script.mjs\n./script.mjs\n```\n\n----------------------------------------\n\nTITLE: Running ZX Scripts via CLI\nDESCRIPTION: Alternative method of running ZX scripts using the ZX CLI tool. This allows running scripts without making them executable first.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzx ./script.mjs\n```\n\n----------------------------------------\n\nTITLE: Synchronizing process.cwd() with Zx's Internal Directory\nDESCRIPTION: Demonstrates how to keep process.cwd() synchronized with the internal $ current working directory when using cd(). This feature is disabled by default due to performance overhead.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport {syncProcessCwd} from 'zx'\n\nsyncProcessCwd()\nsyncProcessCwd(false) // pass false to disable the hook\n```\n\n----------------------------------------\n\nTITLE: Setting Shell Path Configuration in ZX\nDESCRIPTION: Demonstrates how to specify the shell path that ZX should use for command execution.\nSOURCE: https://github.com/google/zx/blob/main/docs/configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.shell = '/usr/bin/bash'\n```\n\n----------------------------------------\n\nTITLE: Require Usage in ESM\nDESCRIPTION: Demonstrates how to use require() function in ESM modules with Zx\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst {version} = require('./package.json')\n```\n\n----------------------------------------\n\nTITLE: Adding Delays with sleep()\nDESCRIPTION: Shows how to pause execution for a specified duration using the sleep() function, which wraps the setTimeout function.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait sleep(1000)\n```\n\n----------------------------------------\n\nTITLE: Process Stage Monitoring in TypeScript\nDESCRIPTION: Shows how to check the current stage of a process execution\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst p = $`echo foo`\np.stage // 'running'\nawait p\np.stage // 'fulfilled'\n```\n\n----------------------------------------\n\nTITLE: Stdin Script Execution\nDESCRIPTION: Example of executing scripts from standard input using heredoc syntax\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nzx << 'EOF'\nawait $`pwd`\nEOF\n```\n\n----------------------------------------\n\nTITLE: Chaining Presets in Zx Command Execution\nDESCRIPTION: Demonstrates how presets can be chained to combine multiple configurations when executing commands. Options from each preset are applied to the resulting commands.\nSOURCE: https://github.com/google/zx/blob/main/docs/api.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst $1 = $({ nothrow: true })\nassert.equal((await $1`exit 1`).exitCode, 1)\n\nconst $2 = $1({ sync: true }) // Both {nothrow: true, sync: true} are applied\nassert.equal($2`exit 2`.exitCode, 2)\n\nconst $3 = $({ sync: true })({ nothrow: true })\nassert.equal($3`exit 3`.exitCode, 3)\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Preferences in ZX v8\nDESCRIPTION: Demonstrates how to switch between different shells in ZX v8, including enabling PowerShell or switching back to bash which is now the default.\nSOURCE: https://github.com/google/zx/blob/main/docs/migration-from-v7.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePowerShell, useBash } from 'zx'\n\nusePowerShell() // to enable powershell\nuseBash()       // switch to bash, the default\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Zx Commands\nDESCRIPTION: Shows how to use string concatenation within template literals in Zx to build file paths.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`mkdir ${'path/to-dir/' + name}`\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command with zx in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use zx to execute the 'ls -l' shell command and log the output. It demonstrates the use of the $ template literal for running shell commands asynchronously.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ts, js, cjs, mjs, etc\nconst {stdout} = await $`ls -l`\nconsole.log('directory contents:', stdout)\n```\n\n----------------------------------------\n\nTITLE: Docker Installation and Usage for zx\nDESCRIPTION: Commands for pulling and running zx within Docker containers\nSOURCE: https://github.com/google/zx/blob/main/docs/setup.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/google/zx:8.5.0\ndocker run -t ghcr.io/google/zx:8.5.0 -e=\"await \\$({verbose: true})\\`echo foo\\`\"\ndocker run -t -i -v ./:/script ghcr.io/google/zx:8.5.0 script/t.js\n```\n\n----------------------------------------\n\nTITLE: Eval Command Usage\nDESCRIPTION: Example of using --eval to execute inline scripts\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat package.json | zx --eval 'const v = JSON.parse(await stdin()).version; echo(v)'\n```\n\n----------------------------------------\n\nTITLE: Passing Array Arguments to Commands in ZX\nDESCRIPTION: Technique for passing an array of arguments to a shell command in ZX. This is useful when you need to dynamically build command arguments.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst flags = [\n  '--oneline',\n  '--decorate',\n  '--color',\n]\nawait $`git log ${flags}`\n```\n\n----------------------------------------\n\nTITLE: Markdown Script Execution\nDESCRIPTION: Example of executing markdown files containing code blocks\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzx docs/markdown.md\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with TypeScript compiler (tsc)\nDESCRIPTION: Traditional approach of compiling TypeScript to JavaScript with the TypeScript compiler and then running the compiled JavaScript. Requires installing the typescript package.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typescript\n\ntsc script.ts\n\nnode script.js\n```\n\n----------------------------------------\n\nTITLE: Process stdout Stream Reading in JavaScript\nDESCRIPTION: Shows how to read from process stdout stream using async iteration\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = $`npm init`\nfor await (const chunk of p.stdout) {\n  echo(chunk)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ZX with NPM\nDESCRIPTION: Simple command to install the ZX package using NPM. This is the primary installation method for ZX.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zx\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with Deno\nDESCRIPTION: Using Deno, a secure JavaScript/TypeScript runtime with native TypeScript support. Requires explicitly specifying required permissions for security.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --allow-read --allow-sys --allow-env --allow-run script.ts\n```\n\n----------------------------------------\n\nTITLE: Process stdin Stream Handling in JavaScript\nDESCRIPTION: Demonstrates writing to process stdin stream and proper stream closing\nSOURCE: https://github.com/google/zx/blob/main/docs/process-promise.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst p = $`while read; do echo $REPLY; done`\np.stdin.write('Hello, World!\\n')\np.stdin.end()\n```\n\n----------------------------------------\n\nTITLE: Setting ZX Shebang for Scripts\nDESCRIPTION: The required shebang line to add at the beginning of ZX scripts to make them executable. This allows the script to be run directly from the command line.\nSOURCE: https://github.com/google/zx/blob/main/docs/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env zx\n```\n\n----------------------------------------\n\nTITLE: GitHub Installation Methods for zx\nDESCRIPTION: Commands to install zx directly from GitHub repository or GitHub package registry\nSOURCE: https://github.com/google/zx/blob/main/docs/setup.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i google/zx\nnpm i git@github.com:google/zx.git\nnpm i --registry=https://npm.pkg.github.com @google/zx\n```\n\n----------------------------------------\n\nTITLE: Basic Argument Escaping in Zx\nDESCRIPTION: Demonstrates how Zx automatically escapes and quotes variables interpolated within template literals, allowing special characters to be properly handled.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst name = 'foo & bar'\nawait $`mkdir ${name}`\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Postfix for PowerShell Compatibility\nDESCRIPTION: Shows how to set a postfix command that runs after each command execution, specifically for PowerShell compatibility.\nSOURCE: https://github.com/google/zx/blob/main/docs/configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$.postfix = '; exit $LastExitCode' // for PowerShell compatibility\n```\n\n----------------------------------------\n\nTITLE: Using Chalk for Colored Output\nDESCRIPTION: Demonstrates using the chalk library to add colored console output, specifically printing the current filename in bright yellow.\nSOURCE: https://github.com/google/zx/blob/main/test/fixtures/markdown.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(chalk.yellowBright(__filename))\n```\n\n----------------------------------------\n\nTITLE: Setting Shell via Environment Variable in zx\nDESCRIPTION: Shows how to set the shell through the ZX_SHELL environment variable before running a zx script.\nSOURCE: https://github.com/google/zx/blob/main/docs/shell.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nZX_SHELL=/bin/zsh zx script.js\n```\n\n----------------------------------------\n\nTITLE: Non-Standard Extension Handling\nDESCRIPTION: Demonstrates how to handle scripts with non-standard file extensions using the --ext flag\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzx script.zx           # Unknown file extension \"\\.zx\"\nzx --ext=mjs script.zx # OK\n```\n\n----------------------------------------\n\nTITLE: Setting Command Execution Timeout in ZX\nDESCRIPTION: Demonstrates how to configure timeout duration and signal for command execution.\nSOURCE: https://github.com/google/zx/blob/main/docs/configuration.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.timeout = '1s'\n$.timeoutSignal= 'SIGKILL'\n\nawait $`sleep 999`\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Examples of setting Zx options through environment variables in different contexts\nSOURCE: https://github.com/google/zx/blob/main/docs/cli.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nZX_VERBOSE=true ZX_SHELL='/bin/bash' zx script.mjs\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  - name: Run script\n    run: zx script.mjs\n    env:\n      ZX_VERBOSE: true\n      ZX_SHELL: '/bin/bash'\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command with ZX in JavaScript\nDESCRIPTION: This snippet demonstrates how to execute the 'echo' shell command using ZX's template literal syntax. The ZX library allows for shell commands to be executed directly using JavaScript template literals.\nSOURCE: https://github.com/google/zx/blob/main/test/fixtures/markdown-crlf.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\necho`Hello, world!`\n```\n\n----------------------------------------\n\nTITLE: Managing Process CWD Synchronization\nDESCRIPTION: Explains how to restore the legacy v7 behavior of process working directory synchronization between $ invocations, which is now disabled by default in v8.\nSOURCE: https://github.com/google/zx/blob/main/docs/migration-from-v7.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { syncProcessCwd } from 'zx'\n\nsyncProcessCwd() // restores legacy v7 behavior\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for zx\nDESCRIPTION: TypeScript example showing type definitions usage with zx\nSOURCE: https://github.com/google/zx/blob/main/docs/setup.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type Options } from 'zx'\n\nconst opts: Options = {\n  quiet: true,\n  timeout: '5s'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbosity Settings in ZX v8\nDESCRIPTION: Demonstrates how to configure verbosity settings in ZX v8, where $.verbose is now false by default. Shows how to restore v7 behavior or completely suppress output using $.quiet.\nSOURCE: https://github.com/google/zx/blob/main/docs/migration-from-v7.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$.verbose = true // everything works like in v7\n\n$.quiet = true   // to completely turn off logging\n```\n\n----------------------------------------\n\nTITLE: Warning about Automatic Escaping in Zx\nDESCRIPTION: Shows a warning case where automatic escaping in Zx can lead to unexpected behavior, particularly when using nested quotes.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst args = ['param && echo bar']\nconst p = $`echo --foo=$'${args}'`\n(await p).stdout // '--foo=$param\\nbar\\n'\n```\n\n----------------------------------------\n\nTITLE: Executing ls Command in Bash\nDESCRIPTION: This Bash snippet shows the direct execution of the 'ls -l' command in a shell environment. It's provided as a comparison to the JavaScript/zx approach.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# bash syntax\nls -l\n```\n\n----------------------------------------\n\nTITLE: Using Modern PowerShell v7+ in ZX\nDESCRIPTION: Shows how to enable modern PowerShell v7+ support using the usePwsh() helper function.\nSOURCE: https://github.com/google/zx/blob/main/docs/migration-from-v7.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { usePwsh } from 'zx'\n\nusePwsh()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Glob Pattern Usage in Zx\nDESCRIPTION: Shows the incorrect way to use glob patterns in Zx, which doesn't work because everything inside ${...} is escaped.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst files = './**/*.md' // [!code error] // Incorrect\nawait $`ls ${files}`\n```\n\n----------------------------------------\n\nTITLE: Migrating SSH Functionality to Webpod\nDESCRIPTION: Shows how to migrate from ZX's built-in SSH functionality to the webpod package, which replaces the removed ssh API in v8.\nSOURCE: https://github.com/google/zx/blob/main/docs/migration-from-v7.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// import {ssh} from 'zx' ↓\nimport {ssh} from 'webpod'\n\nconst remote = ssh('user@host')\nawait remote`echo foo`\n```\n\n----------------------------------------\n\nTITLE: Logging __filename with Chalk in JavaScript\nDESCRIPTION: This snippet demonstrates how to log the __filename variable using the chalk library for colored output in JavaScript.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown-scripts.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(chalk.yellowBright(__filename))\n```\n\n----------------------------------------\n\nTITLE: Incorrect Home Directory Expansion in Zx\nDESCRIPTION: Shows the incorrect way to use the home directory symbol (~) within interpolated expressions in Zx.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst dir = `~/Downloads` // [!code error] // Incorrect\nawait $`ls ${dir}`\n```\n\n----------------------------------------\n\nTITLE: Running a Markdown Script with zx\nDESCRIPTION: This Bash command demonstrates how to execute a Markdown script using the zx tool. It shows that zx can interpret and run the multi-language script defined in the Markdown file.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nzx script.md\n```\n\n----------------------------------------\n\nTITLE: Importing Chalk Library\nDESCRIPTION: Shows how to dynamically import the chalk library using ES modules syntax.\nSOURCE: https://github.com/google/zx/blob/main/test/fixtures/markdown.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait import('chalk')\n```\n\n----------------------------------------\n\nTITLE: Configuring PowerShell Quoting in Zx\nDESCRIPTION: Shows how to configure Zx to use PowerShell-specific quoting when executing commands in PowerShell.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { quotePowerShell } from 'zx'\n\n$.quote = quotePowerShell\n```\n\n----------------------------------------\n\nTITLE: Running Development Tasks for zx Project\nDESCRIPTION: Commands for formatting code and running tests with coverage for the zx project. These steps ensure code quality and maintain the project's high test coverage threshold.\nSOURCE: https://github.com/google/zx/blob/main/docs/contribution.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `npm run fmt` to format your code.\n* `npm run test:coverage` to run the tests.\n```\n\n----------------------------------------\n\nTITLE: Importing Module in JavaScript with zx\nDESCRIPTION: This snippet shows how to import a module (chalk) using the import statement in JavaScript within a zx script.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown-scripts.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait import('chalk')\n```\n\n----------------------------------------\n\nTITLE: Using os.homedir() for Home Directory in Zx\nDESCRIPTION: Demonstrates the correct approach to reference the home directory in Zx using os.homedir() instead of the tilde symbol.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`ls ${os.homedir()}/Downloads` // Correct\n```\n\n----------------------------------------\n\nTITLE: Using Tilde Outside Interpolation in Zx\nDESCRIPTION: Shows that the tilde symbol works correctly when used directly in the command part of the template literal, outside of ${...}.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`ls ~/Downloads` // Correct, ~ is outside of ${...}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Experimental zx Builds\nDESCRIPTION: This bash snippet demonstrates how to install and use experimental (beta/canary) versions of zx. It shows how to install the development version and run a simple script with it.\nSOURCE: https://github.com/google/zx/blob/main/docs/faq.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i zx@dev\nnpx zx@dev --install --quiet <<< 'import _ from \"lodash\" /* 4.17.15 */; console.log(_.VERSION)'\n```\n\n----------------------------------------\n\nTITLE: Executing Bash Commands with zx\nDESCRIPTION: This snippet demonstrates how to execute Bash commands within a zx script. It sets a variable with the current date and uses it in a pipe command.\nSOURCE: https://github.com/google/zx/blob/main/docs/markdown-scripts.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nVAR=$(date)\necho \"$VAR\" | wc -c\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Command with Tilde Syntax\nDESCRIPTION: Alternative syntax for executing shell commands using tilde-delimited code block with zx.js.\nSOURCE: https://github.com/google/zx/blob/main/test/fixtures/markdown.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait $`echo \"tilde\"`\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Version for zx Project Development\nDESCRIPTION: Instructions for setting up the recommended Node.js version for developing the zx project. It includes manual installation, using version managers, and using Volta for automatic version management.\nSOURCE: https://github.com/google/zx/blob/main/docs/contribution.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Switch to the recommended version of Node.js\n  * Install manually `Node.js >= 22`.\n  * Delegate the routine to any version manager, that [supports .node_version config](https://stackoverflow.com/questions/27425852/what-uses-respects-the-node-version-file)\n  * Use [Volta](https://volta.sh/), the target version will be set automatically from the `package.json`\n```\n\n----------------------------------------\n\nTITLE: Bash Variable Assignment and Echo\nDESCRIPTION: Basic bash script showing variable assignment and echo with proper variable expansion syntax.\nSOURCE: https://github.com/google/zx/blob/main/test/fixtures/markdown.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nVAR=$(echo hello)\necho \"$VAR\"\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with Bun\nDESCRIPTION: Using Bun, a fast JavaScript runtime with native TypeScript support. Bun can execute TypeScript files directly without additional configuration.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbun script.ts\n```\n\n----------------------------------------\n\nTITLE: Incorrect Command Assembly in Zx\nDESCRIPTION: Shows the incorrect way to dynamically assemble commands in Zx by building a single string, which will be entirely escaped.\nSOURCE: https://github.com/google/zx/blob/main/docs/quotes.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst cmd = 'rm'\nif (force) cmd += ' -f'\nif (recursive) cmd += ' -r'\ncmd += ' ' + file\n\nawait $`${cmd}` // [!code error] // Incorrect\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with swc-node\nDESCRIPTION: Using swc-node, a faster TypeScript execution environment built on the Rust-based SWC compiler. This requires installing the swc-node package.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install swc-node\n\nswc-node script.ts\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript scripts with Node.js\nDESCRIPTION: Using Node.js's experimental TypeScript support to run TypeScript scripts directly. This requires Node.js v22.6.0 or later with the --experimental-strip-types flag.\nSOURCE: https://github.com/google/zx/blob/main/docs/typescript.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Since Node.js v22.6.0\nnode --experimental-strip-types script.js\n```\n\n----------------------------------------\n\nTITLE: Installing Zx Package with npm\nDESCRIPTION: A simple command to install the Zx package using npm. This is the basic installation method for getting started with Zx.\nSOURCE: https://github.com/google/zx/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zx\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Home Page in YAML for google/zx Project\nDESCRIPTION: YAML configuration for the VitePress home page of the google/zx project. It sets up the layout, title, hero section with project details, and features section highlighting project benefits.\nSOURCE: https://github.com/google/zx/blob/main/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\ntitleTemplate: google/zx\n\nhero:\n  name: \"zx\"\n  text: \"A tool for writing better scripts\"\n  image:\n    src: /img/logo.svg\n    alt: Zx Logo\n  actions:\n    - theme: brand\n      text: Documentation\n      link: /getting-started\n\nfeatures:\n  - title: Simple\n    details: Write your scripts in a familiar language.\n  - title: Powerful\n    details: Interact with the full ecosystem of JS libraries.\n  - title: Batteries included\n    details: Everything you need, right out of the box.\n```\n\n----------------------------------------\n\nTITLE: Defining Apache 2.0 License Header for Google zx Project in JavaScript\nDESCRIPTION: This code snippet represents the Apache 2.0 license header used in the Google zx project. It specifies the copyright, license terms, and conditions for using and distributing the software.\nSOURCE: https://github.com/google/zx/blob/main/test/fixtures/copyright.txt#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Copyright YEAR Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n```"
  }
]