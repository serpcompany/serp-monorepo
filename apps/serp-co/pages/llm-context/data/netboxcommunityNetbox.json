[
  {
    "owner": "netbox-community",
    "repo": "netbox",
    "content": "TITLE: Creating Branch Site Infrastructure using NetBox Script Class\nDESCRIPTION: A script that creates a new site and multiple access switches in NetBox. It takes user input for site name, switch model, and switch count through a web form, creates the corresponding objects, and returns a CSV formatted output of the created devices. The script uses Django models and NetBox's Script class for implementation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.text import slugify\n\nfrom dcim.choices import DeviceStatusChoices, SiteStatusChoices\nfrom dcim.models import Device, DeviceRole, DeviceType, Manufacturer, Site\nfrom extras.scripts import *\n\n\nclass NewBranchScript(Script):\n\n    class Meta:\n        name = \"New Branch\"\n        description = \"Provision a new branch site\"\n        field_order = ['site_name', 'switch_count', 'switch_model']\n\n    site_name = StringVar(\n        description=\"Name of the new site\"\n    )\n    switch_count = IntegerVar(\n        description=\"Number of access switches to create\"\n    )\n    manufacturer = ObjectVar(\n        model=Manufacturer,\n        required=False\n    )\n    switch_model = ObjectVar(\n        description=\"Access switch model\",\n        model=DeviceType,\n        query_params={\n            'manufacturer_id': '$manufacturer'\n        }\n    )\n\n    def run(self, data, commit):\n\n        # Create the new site\n        site = Site(\n            name=data['site_name'],\n            slug=slugify(data['site_name']),\n            status=SiteStatusChoices.STATUS_PLANNED\n        )\n        site.full_clean()\n        site.save()\n        self.log_success(f\"Created new site: {site}\")\n\n        # Create access switches\n        switch_role = DeviceRole.objects.get(name='Access Switch')\n        for i in range(1, data['switch_count'] + 1):\n            switch = Device(\n                device_type=data['switch_model'],\n                name=f'{site.slug}-switch{i}',\n                site=site,\n                status=DeviceStatusChoices.STATUS_PLANNED,\n                role=switch_role\n            )\n            switch.full_clean()\n            switch.save()\n            self.log_success(f\"Created new switch: {switch}\")\n\n        # Generate a CSV table of new devices\n        output = [\n            'name,make,model'\n        ]\n        for switch in Device.objects.filter(site=site):\n            attrs = [\n                switch.name,\n                switch.device_type.manufacturer.name,\n                switch.device_type.model\n            ]\n            output.append(','.join(attrs))\n\n        return '\\n'.join(output)\n```\n\n----------------------------------------\n\nTITLE: Visualizing IP Hierarchy Components in NetBox using Mermaid\nDESCRIPTION: This diagram shows the relationship between different IP resource components in NetBox. It illustrates how RIRs relate to Aggregates, how Prefixes can nest within each other, and how IP Ranges and IP Addresses exist within Prefixes. The diagram includes clickable links to the respective model documentation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/ipam.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    RIR --> Aggregate\n    Aggregate & Role --> Prefix\n    Prefix --> Prefix\n    Prefix --> IPRange & IPAddress\n\nclick Aggregate \"../../models/ipam/aggregate/\"\nclick IPAddress \"../../models/ipam/ipaddress/\"\nclick IPRange \"../../models/ipam/iprange/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick RIR \"../../models/ipam/rir/\"\nclick Role \"../../models/ipam/role/\"\n```\n\n----------------------------------------\n\nTITLE: Creating an IP Address with Generic Relation in NetBox API\nDESCRIPTION: Example of a POST request to create a new IP address in NetBox and assign it to a device interface. Demonstrates how to work with generic relations by specifying both the object type and ID for the assignment.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/ipam/ip-addresses/ \\\n--data '{\n    \"address\": \"192.0.2.1/24\",\n    \"assigned_object_type\": \"dcim.interface\",\n    \"assigned_object_id\": 69023\n}'\n```\n\n----------------------------------------\n\nTITLE: Creating Model Serializer for NetBox Plugin\nDESCRIPTION: Example of creating a model serializer by extending NetBoxModelSerializer. Demonstrates field configuration and nested serialization with brief_fields for default representation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/rest-api.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# api/serializers.py\nfrom rest_framework import serializers\nfrom netbox.api.serializers import NetBoxModelSerializer\nfrom my_plugin.models import MyModel\n\nclass MyModelSerializer(NetBoxModelSerializer):\n    foo = SiteSerializer(nested=True, allow_null=True)\n\n    class Meta:\n        model = MyModel\n        fields = ('id', 'foo', 'bar', 'baz')\n        brief_fields = ('id', 'url', 'display', 'bar')\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Class Implementation\nDESCRIPTION: Shows how to create a custom validator class by extending CustomValidator to implement custom validation logic.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-validation.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.validators import CustomValidator\n\nclass MyValidator(CustomValidator):\n\n    def validate(self, instance, request):\n        if instance.status == 'active' and not instance.description:\n            self.fail(\"Active sites must have a description set!\", field='status')\n```\n\n----------------------------------------\n\nTITLE: Implementing NetBoxModelForm in Python\nDESCRIPTION: Example showing how to create a custom model form by extending NetBoxModelForm. Includes field definitions, fieldset configuration, and meta class setup.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/forms.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelForm\nfrom utilities.forms.fields import CommentField, DynamicModelChoiceField\nfrom utilities.forms.rendering import FieldSet\nfrom .models import MyModel\n\nclass MyModelForm(NetBoxModelForm):\n    site = DynamicModelChoiceField(\n        queryset=Site.objects.all()\n    )\n    comments = CommentField()\n    fieldsets = (\n        FieldSet('name', 'status', 'site', 'tags', name=_('Model Stuff')),\n        FieldSet('tenant_group', 'tenant', name=_('Tenancy')),\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('name', 'status', 'site', 'comments', 'tags')\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Validators in NetBox\nDESCRIPTION: This code defines CUSTOM_VALIDATORS which maps models to custom validators for enforcing validation logic. The example shows validators for dcim.site and dim.device models, including both dictionary-based validation rules and references to external validator classes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/data-validation.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"name\": {\n                \"min_length\": 5,\n                \"max_length\": 30\n            }\n        },\n        \"my_plugin.validators.Validator1\"\n    ],\n    \"dim.device\": [\n        \"my_plugin.validators.Validator1\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings for NetBox\nDESCRIPTION: Sets up the PostgreSQL database connection parameters for NetBox. Includes settings for database name, username, password, host, port, and connection age. These parameters must match your PostgreSQL configuration.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nDATABASE = {\n    'NAME': 'netbox',               # Database name\n    'USER': 'netbox',               # PostgreSQL username\n    'PASSWORD': 'J5brHrAXFLQSif0K', # PostgreSQL password\n    'HOST': 'localhost',            # Database server\n    'PORT': '',                     # Database port (leave blank for default)\n    'CONN_MAX_AGE': 300,            # Max database connection age (seconds)\n}\n```\n\n----------------------------------------\n\nTITLE: Using ChoiceSet in a Model Field\nDESCRIPTION: This snippet demonstrates how to use a ChoiceSet subclass to define choices for a CharField in a Django model.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/models.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django.db import models\nfrom .choices import StatusChoices\n\nclass MyModel(models.Model):\n    status = models.CharField(\n        max_length=50,\n        choices=StatusChoices,\n        default=StatusChoices.STATUS_FOO\n    )\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom DataBackend Class in Python\nDESCRIPTION: Example showing how to create a custom data backend by subclassing NetBox's DataBackend class. Demonstrates the required class attributes name and label that must be defined.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/data-backends.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.data_backends import DataBackend\n\nclass MyDataBackend(DataBackend):\n    name = 'mybackend'\n    label = 'My Backend'\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Schema for NetBox Plugin in Python\nDESCRIPTION: This code snippet demonstrates how to define a GraphQL schema for a NetBox plugin. It includes the creation of a custom type based on a model, a query type with fields, and the schema definition. The example uses the strawberry and strawberry_django libraries for GraphQL implementation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/graphql-api.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# graphql.py\nimport strawberry\nimport strawberry_django\n\nfrom . import models\n\n\n@strawberry_django.type(\n    models.MyModel,\n    fields='__all__',\n)\nclass MyModelType:\n    pass\n\n\n@strawberry.type\nclass MyQuery:\n    @strawberry.field\n    def dummymodel(self, id: int) -> DummyModelType:\n        return None\n    dummymodel_list: list[DummyModelType] = strawberry_django.field()\n\n\nschema = [\n    MyQuery,\n]\n```\n\n----------------------------------------\n\nTITLE: Generating SECRET_KEY for NetBox\nDESCRIPTION: Executes the provided script to generate a random secret key for NetBox. This key is used as a salt for hashing and cryptographic functions and should be unique to each installation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\npython3 ../generate_secret_key.py\n```\n\n----------------------------------------\n\nTITLE: Creating NetBox System User on CentOS\nDESCRIPTION: Creates a dedicated system user and group for running NetBox services on CentOS. Also sets the appropriate ownership permissions for directories where NetBox needs to write files.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo groupadd --system netbox\nsudo adduser --system -g netbox netbox\nsudo chown --recursive netbox /opt/netbox/netbox/media/\nsudo chown --recursive netbox /opt/netbox/netbox/reports/\nsudo chown --recursive netbox /opt/netbox/netbox/scripts/\n```\n\n----------------------------------------\n\nTITLE: Defining Custom FilterSet for NetBox Model in Python\nDESCRIPTION: This snippet demonstrates how to create a custom FilterSet class for a NetBox model. It includes a status filter with multiple choice options and specifies the model and fields in the Meta class.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/filtersets.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# filtersets.py\nimport django_filters\nfrom netbox.filtersets import NetBoxModelFilterSet\nfrom .models import MyModel\n\nclass MyFilterSet(NetBoxModelFilterSet):\n    status = django_filters.MultipleChoiceFilter(\n        choices=(\n            ('foo', 'Foo'),\n            ('bar', 'Bar'),\n            ('baz', 'Baz'),\n        ),\n        null_value=None\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('some', 'other', 'fields')\n```\n\n----------------------------------------\n\nTITLE: Creating NetBox Configuration File\nDESCRIPTION: Navigates to the NetBox configuration directory and creates a configuration file by copying the example template. This file will hold all local configuration parameters for the NetBox installation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\ncd /opt/netbox/netbox/netbox/\nsudo cp configuration_example.py configuration.py\n```\n\n----------------------------------------\n\nTITLE: Complete Active Directory LDAP Configuration Example for NetBox\nDESCRIPTION: Comprehensive example configuration for integrating NetBox with Active Directory for authentication, including server settings, user search, attribute mapping, and group handling.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch, NestedGroupOfNamesType\n\n# Server URI\nAUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com:3269\"\n\n# The following may be needed if you are binding to Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_REFERRALS: 0\n}\n\n# Set the DN and password for the NetBox service account.\nAUTH_LDAP_BIND_DN = \"CN=NETBOXSA,OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n\n# Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)\nLDAP_IGNORE_CERT_ERRORS = False\n\n# Include this setting if you want to validate the LDAP server certificates against a CA certificate directory on your server\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTDIR, LDAP_CA_CERT_DIR)\nLDAP_CA_CERT_DIR = '/etc/ssl/certs'\n\n# Include this setting if you want to validate the LDAP server certificates against your own CA.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, LDAP_CA_CERT_FILE)\nLDAP_CA_CERT_FILE = '/path/to/example-CA.crt'\n\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    \"ou=Users,dc=example,dc=com\",\n    ldap.SCOPE_SUBTREE,\n    \"(|(userPrincipalName=%(user)s)(sAMAccountName=%(user)s))\"\n)\n\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = None\n\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"username\": \"sAMAccountName\",\n    \"email\": \"mail\",\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n}\n\nAUTH_LDAP_USER_QUERY_FIELD = \"username\"\n\n# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group\n# hierarchy.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\n    \"dc=example,dc=com\",\n    ldap.SCOPE_SUBTREE,\n    \"(objectClass=group)\"\n)\nAUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()\n\n# Define a group required to login.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=NETBOX_USERS,DC=example,DC=com\"\n\n# Mirror LDAP group assignments.\nAUTH_LDAP_MIRROR_GROUPS = True\n```\n\n----------------------------------------\n\nTITLE: Extending Core Views with Custom Tabs in Python\nDESCRIPTION: Example of adding a custom tab to a core NetBox model view. Demonstrates tab registration with view extension and permission configuration.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/views.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dcim.models import Site\nfrom myplugin.models import Stuff\nfrom netbox.views import generic\nfrom utilities.views import ViewTab, register_model_view\n\n@register_model_view(Site, name='myview', path='some-other-stuff')\nclass MyView(generic.ObjectView):\n    ...\n    tab = ViewTab(\n        label='Other Stuff',\n        badge=lambda obj: Stuff.objects.filter(site=obj).count(),\n        permission='myplugin.view_stuff'\n    )\n\n    def get(self, request, pk):\n        ...\n        return render(\n            request,\n            \"myplugin/mytabview.html\",\n            context={\n                \"tab\": self.tab,\n            },\n        )\n```\n\n----------------------------------------\n\nTITLE: Making POST Request to NetBox REST API\nDESCRIPTION: Example of creating a new prefix in NetBox using a cURL command. The request includes authentication via token and sends JSON data to create a prefix with an associated site.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/api-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"site\": {\"name\": \"Branch 12\"}}'\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom Script in Python for NetBox\nDESCRIPTION: This snippet shows the basic structure of a custom script in NetBox. It inherits from the Script base class and includes a run method. Variables can be defined to accept user input via the NetBox UI.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.scripts import Script\n\nclass MyScript(Script):\n    var1 = StringVar(...)\n    var2 = IntegerVar(...)\n    var3 = ObjectVar(...)\n\n    def run(self, data, commit):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Filtering API Requests by Tags in NetBox\nDESCRIPTION: Example of how to filter NetBox objects by tags using the API. This snippet demonstrates retrieving devices tagged as 'monitored' and how to filter for objects with multiple specific tags.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/customization.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nGET /api/dcim/devices/?tag=monitored\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Django Model in NetBox Plugin\nDESCRIPTION: This snippet demonstrates how to create a simple Django model with two character fields in a NetBox plugin. It includes a custom string representation method.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/models.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass MyModel(models.Model):\n    foo = models.CharField(max_length=50)\n    bar = models.CharField(max_length=50)\n\n    def __str__(self):\n        return f'{self.foo} {self.bar}'\n```\n\n----------------------------------------\n\nTITLE: Defining Device Type Components in YAML\nDESCRIPTION: Example YAML configuration for creating a new device type with network interfaces, power ports and console port specifications. Used for enhanced device type import functionality.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.7.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmanufacturer: Acme\nmodel: Packet Shooter 9000\nslug: packet-shooter-9000\nu_height: 1\ninterfaces:\n  - name: ge-0/0/0\n    type: 1000base-t\n  - name: ge-0/0/1\n    type: 1000base-t\n  - name: ge-0/0/2\n    type: 1000base-t\n  - name: ge-0/0/3\n    type: 1000base-t\npower-ports:\n  - name: PSU0\n  - name: PSU1\nconsole-ports:\n  - name: Console\n```\n\n----------------------------------------\n\nTITLE: Querying Choice Field Options in NetBox API using cURL and jq\nDESCRIPTION: This snippet demonstrates how to make an authenticated OPTIONS request to the NetBox API to retrieve available choices for a specific field (status) on the Prefix model. It uses cURL to make the request and jq to parse the JSON response.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/filtering.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s -X OPTIONS \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ | jq \".actions.POST.status.choices\"\n```\n\n----------------------------------------\n\nTITLE: Implementing AbortRequest Exception in NetBox Plugin (Python)\nDESCRIPTION: This code snippet demonstrates how to use the AbortRequest exception in a NetBox plugin to prevent the creation of a Site object with a prohibited name. It uses Django's pre_save signal to check the site name before saving.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/exceptions.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db.models.signals import pre_save\nfrom django.dispatch import receiver\nfrom dcim.models import Site\nfrom utilities.exceptions import AbortRequest\n\nPROHIBITED_NAMES = ('foo', 'bar', 'baz')\n\n@receiver(pre_save, sender=Site)\ndef test_abort_request(instance, **kwargs):\n    if instance.name.lower() in PROHIBITED_NAMES:\n        raise AbortRequest(f\"Site name can't be {instance.name}!\")\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing New NetBox Version\nDESCRIPTION: Commands to download, extract and set up a new version of NetBox. The process includes setting the version number, downloading the release package, and creating symbolic links.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set $NEWVER to the NetBox version being installed\nNEWVER=3.5.0\nwget https://github.com/netbox-community/netbox/archive/v$NEWVER.tar.gz\nsudo tar -xzf v$NEWVER.tar.gz -C /opt\nsudo ln -sfn /opt/netbox-$NEWVER/ /opt/netbox\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Table Class in Python for NetBox\nDESCRIPTION: This snippet demonstrates how to create a custom table class using NetBoxTable. It includes defining columns, setting the model, and specifying fields and default columns.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/tables.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# tables.py\nimport django_tables2 as tables\nfrom netbox.tables import NetBoxTable\nfrom .models import MyModel\n\nclass MyModelTable(NetBoxTable):\n    name = tables.Column(\n        linkify=True\n    )\n    ...\n\n    class Meta(NetBoxTable.Meta):\n        model = MyModel\n        fields = ('pk', 'id', 'name', ...)\n        default_columns = ('pk', 'name', ...)\n```\n\n----------------------------------------\n\nTITLE: Implementing NetBoxModelBulkEditForm in Python\nDESCRIPTION: Example showing implementation of a bulk edit form using NetBoxModelBulkEditForm. Includes field definitions, fieldsets, and nullable fields configuration.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/forms.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom django.utils.translation import gettext_lazy as _\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelBulkEditForm\nfrom utilities.forms import CommentField, DynamicModelChoiceField\nfrom utilities.forms.rendering import FieldSet\nfrom .models import MyModel, MyModelStatusChoices\n\n\nclass MyModelBulkEditForm(NetBoxModelBulkEditForm):\n    name = forms.CharField(\n        required=False\n    )\n    status = forms.ChoiceField(\n        choices=MyModelStatusChoices,\n        required=False\n    )\n    site = DynamicModelChoiceField(\n        queryset=Site.objects.all(),\n        required=False\n    )\n    comments = CommentField()\n\n    model = MyModel\n    fieldsets = (\n        FieldSet('name', 'status', 'site', name=_('Model Stuff')),\n    )\n    nullable_fields = ('site', 'comments')\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Apache for NetBox\nDESCRIPTION: Commands for installing Apache, setting up the NetBox configuration, enabling required modules, and activating the site.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/5-http-server.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y apache2\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp /opt/netbox/contrib/apache.conf /etc/apache2/sites-available/netbox.conf\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo a2enmod ssl proxy proxy_http headers rewrite\nsudo a2ensite netbox\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Nested Filtering in GraphQL Query for Devices and Interfaces\nDESCRIPTION: This example demonstrates nested filtering in a GraphQL query, retrieving devices and filtering their related interfaces by enabled status. It shows how to traverse relationships while applying filters at different levels.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/graphql-api.md#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  device_list {\n    id\n    name\n    interfaces(filters: {enabled: true}) {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Comprehensive list of Python package dependencies with specific version requirements for NetBox. Includes core Django framework, Django extensions for functionality like CORS, debugging, filtering, and REST API support, along with other utility packages for features like GraphQL, authentication, and data processing.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDjango==5.1.8\ndjango-cors-headers==4.7.0\ndjango-debug-toolbar==5.0.1\ndjango-filter==25.1\ndjango-htmx==1.23.0\ndjango-graphiql-debug-toolbar==0.2.0\ndjango-mptt==0.17.0\ndjango-pglocks==1.0.4\ndjango-prometheus==2.3.1\ndjango-redis==5.4.0\ndjango-rich==1.14.0\ndjango-rq==3.0\ndjango-taggit==6.1.0\ndjango-tables2==2.7.5\ndjango-timezone-field==7.1\ndjangorestframework==3.16.0\ndrf-spectacular==0.28.0\ndrf-spectacular-sidecar==2025.4.1\nfeedparser==6.0.11\ngunicorn==23.0.0\nJinja2==3.1.6\nMarkdown==3.7\nmkdocs-material==9.6.11\nmkdocstrings[python]==0.29.1\nnetaddr==1.3.0\nnh3==0.2.21\nPillow==11.1.0\npsycopg[c,pool]==3.2.6\nPyYAML==6.0.2\nrequests==2.32.3\nrq==2.1.0\nsocial-auth-app-django==5.4.3\nsocial-auth-core==4.5.6\nstrawberry-graphql==0.263.2\nstrawberry-graphql-django==0.52.0\nsvgwrite==1.4.3\ntablib==3.8.0\ntzdata==2025.2\n```\n\n----------------------------------------\n\nTITLE: Creating Search Index Class in Python for NetBox Plugin\nDESCRIPTION: Demonstrates how to create a custom SearchIndex class for a plugin model. Defines searchable fields with their weights and display attributes that will appear in search results but won't be cached.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/search.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# search.py\nfrom netbox.search import SearchIndex\nfrom .models import MyModel\n\nclass MyModelIndex(SearchIndex):\n    model = MyModel\n    fields = (\n        ('name', 100),\n        ('description', 500),\n        ('comments', 5000),\n    )\n    display_attrs = ('site', 'device', 'status', 'description')\n```\n\n----------------------------------------\n\nTITLE: Configuring API URLs with DRF Router\nDESCRIPTION: Example of setting up URL routing for API endpoints using Django REST Framework's DefaultRouter through NetBoxRouter.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/rest-api.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# api/urls.py\nfrom netbox.api.routers import NetBoxRouter\nfrom .views import MyModelViewSet\n\nrouter = NetBoxRouter()\nrouter.register('my-model', MyModelViewSet)\nurlpatterns = router.urls\n```\n\n----------------------------------------\n\nTITLE: Creating a Network Switch Configuration Template with Jinja2\nDESCRIPTION: This Jinja2 template demonstrates how to create a simple network switch configuration file. It extends a base template, sets system parameters, and includes interface configurations.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/configuration-rendering.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% extends 'base.j2' %}\n\n{% block content %}\n    system {\n        host-name {{ device.name }};\n        domain-name example.com;\n        time-zone UTC;\n        authentication-order [ password radius ];\n        ntp {\n            {% for server in ntp_servers %}\n                server {{ server }};\n            {% endfor %}\n        }\n    }\n    {% for interface in device.interfaces.all() %}\n        {% include 'common/interface.j2' %}\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Filtering NetBox Devices by Name using String Lookup Expression\nDESCRIPTION: This example demonstrates the use of a string lookup expression to filter devices in the NetBox API. It returns all devices with 'switch' in their name, using a case-insensitive contains filter.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/filtering.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/dcim/devices/?name__ic=switch\n```\n\n----------------------------------------\n\nTITLE: Exporting NetBox PostgreSQL Database\nDESCRIPTION: Use pg_dump to export the entire NetBox database to a file. This command assumes the database is named 'netbox' and may need to be adjusted based on the specific installation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/replicating-netbox.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npg_dump --username netbox --password --host localhost netbox > netbox.sql\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Data in Python for NetBox Custom Scripts\nDESCRIPTION: This snippet demonstrates how to access HTTP request data within a custom script, including the user executing the script and the client IP address.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nusername = self.request.user.username\nip_address = self.request.META.get('HTTP_X_FORWARDED_FOR') or \\\n    self.request.META.get('REMOTE_ADDR')\nself.log_info(f\"Running as user {username} (IP: {ip_address})...\")\n```\n\n----------------------------------------\n\nTITLE: Paginated API Response Example (JSON)\nDESCRIPTION: Example of a paginated API response, showing count, next/previous page links, and results. Demonstrates how NetBox handles large result sets.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"count\": 2861,\n    \"next\": \"http://netbox/api/dcim/devices/?limit=50&offset=50\",\n    \"previous\": null,\n    \"results\": [\n        {\n            \"id\": 231,\n            \"name\": \"Device1\",\n            ...\n        },\n        {\n            \"id\": 232,\n            \"name\": \"Device2\",\n            ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rules in NetBox\nDESCRIPTION: Python configuration example for custom validation rules in NetBox. This snippet shows how to enforce a naming convention regex and make the asset_tag field required for devices.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/customization.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCUSTOM_VALIDATORS = {\n    \"dcim.device\": [\n        {\n            \"name\": {\n                \"regex\": \"[a-z]+\\d{3}\"\n            },\n            \"asset_tag\": {\n                \"required\": True\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering NetBox API Results by Custom Field\nDESCRIPTION: This example shows how to filter NetBox API results using a custom field. It demonstrates the syntax for filtering sites where a custom field named 'foo' is equal to 123.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/filtering.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/dcim/sites/?cf_foo=123\n```\n\n----------------------------------------\n\nTITLE: Implementing TagFilter in Custom FilterSet in Python\nDESCRIPTION: This code shows how to use the TagFilter class in a custom FilterSet for models that support tag assignment. It subclasses FilterSet and adds a tag filter.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/filtersets.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django_filters import FilterSet\nfrom extras.filters import TagFilter\n\nclass MyModelFilterSet(FilterSet):\n    tag = TagFilter()\n```\n\n----------------------------------------\n\nTITLE: Retrieving IP Address Information with curl in NetBox API\nDESCRIPTION: A command-line example using curl to retrieve information about a specific IP address from NetBox's REST API. The command makes a GET request to the IP address endpoint and uses jq to format the JSON response for better readability.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s http://netbox/api/ipam/ip-addresses/2954/ | jq '.'\n```\n\n----------------------------------------\n\nTITLE: Implementing ViewSet for NetBox Plugin API\nDESCRIPTION: Example of creating a model viewset by extending NetBoxModelViewSet. Shows basic configuration for handling all REST operations for a model.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/rest-api.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# api/views.py\nfrom netbox.api.viewsets import NetBoxModelViewSet\nfrom my_plugin.models import MyModel\nfrom .serializers import MyModelSerializer\n\nclass MyModelViewSet(NetBoxModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MyModelSerializer\n```\n\n----------------------------------------\n\nTITLE: Making a Basic GraphQL Query to NetBox API via curl\nDESCRIPTION: This snippet demonstrates how to send a GraphQL query using curl to retrieve circuit information with specific fields. It includes proper authentication using a token and specifies the appropriate content type headers.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/graphql-api.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\nhttp://netbox/graphql/ \\\n--data '{\"query\": \"query {circuit_list(status:\\\"active\\\") {cid provider {name}}}\"}'\n```\n\n----------------------------------------\n\nTITLE: API Request for Creating Device with Related Objects in NetBox\nDESCRIPTION: Example of an API request to create a new device in NetBox, specifying related objects (rack) by attributes instead of primary key.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"MyNewDevice\",\n    \"rack\": {\n        \"site\": {\n            \"name\": \"Equinix DC6\"\n        },\n        \"name\": \"R204\"\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling NetBox Features with NetBoxModel\nDESCRIPTION: This example shows how to create a model that inherits from NetBoxModel to enable various NetBox-specific features like bookmarks, change logging, custom fields, etc.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/models.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django.db import models\nfrom netbox.models import NetBoxModel\n\nclass MyModel(NetBoxModel):\n    foo = models.CharField()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Objects with PATCH in NetBox API\nDESCRIPTION: Example of how to update multiple objects simultaneously by sending a PATCH request to a model's list endpoint with a list of dictionaries containing object IDs and updated attributes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_13\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10, \"status\": \"active\"}, {\"id\": 11, \"status\": \"active\"}]'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Job Runner in Python for NetBox Plugins\nDESCRIPTION: This snippet demonstrates how to create a custom job runner by subclassing NetBox's JobRunner class. It includes setting a custom name for the job and implementing the run method.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/background-jobs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.jobs import JobRunner\n\n\nclass MyTestJob(JobRunner):\n    class Meta:\n        name = \"My Test Job\"\n\n    def run(self, *args, **kwargs):\n        obj = self.job.object\n        # your logic goes here\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Deletion via REST API in NetBox\nDESCRIPTION: Example of using curl to perform a bulk deletion of multiple sites via the NetBox REST API. This demonstrates the new bulk deletion capability introduced in v2.10.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.10.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10}, {\"id\": 11}, {\"id\": 12}]'\n```\n\n----------------------------------------\n\nTITLE: Template Extension Implementation in Python\nDESCRIPTION: Example of creating a plugin template extension to inject custom content into NetBox views. Shows site animal count implementation with template rendering.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/views.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.plugins import PluginTemplateExtension\nfrom .models import Animal\n\nclass SiteAnimalCount(PluginTemplateExtension):\n    models = ['dcim.site']\n\n    def right_page(self):\n        return self.render('netbox_animal_sounds/inc/animal_count.html', extra_context={\n            'animal_count': Animal.objects.count(),\n        })\n\ntemplate_extensions = [SiteAnimalCount]\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Sites (curl and JSON)\nDESCRIPTION: Example of using curl to create multiple site objects in a single API request. Demonstrates how to make a POST request with a list of JSON objects.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_11\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -X POST -H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[\n{\"name\": \"Site 1\", \"slug\": \"site-1\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 2\", \"slug\": \"site-2\", \"region\": {\"name\": \"United States\"}},\n{\"name\": \"Site 3\", \"slug\": \"site-3\", \"region\": {\"name\": \"United States\"}}\n]'\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 21,\n        \"url\": \"http://netbox/api/dcim/sites/21/\",\n        \"name\": \"Site 1\",\n        ...\n    },\n    {\n        \"id\": 22,\n        \"url\": \"http://netbox/api/dcim/sites/22/\",\n        \"name\": \"Site 2\",\n        ...\n    },\n    {\n        \"id\": 23,\n        \"url\": \"http://netbox/api/dcim/sites/23/\",\n        \"name\": \"Site 3\",\n        ...\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on Ubuntu\nDESCRIPTION: Commands to install PostgreSQL database on Ubuntu systems using apt package manager.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install -y postgresql\n```\n\n----------------------------------------\n\nTITLE: Generating and running Django database migrations\nDESCRIPTION: Commands for creating and applying database migrations in Django. The first command generates a migration file with a descriptive name for a specific app, while the second applies all pending migrations to the database.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/extending-models.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py makemigrations <app> -n <name> --no-header\n./manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Object\nDESCRIPTION: Showing how to retrieve an existing object, modify its attributes, and save the changes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> vlan = VLAN.objects.get(pk=1280)\n>>> vlan.name\n'MyNewVLAN'\n>>> vlan.name = 'BetterName'\n>>> vlan.full_clean()\n>>> vlan.save()\n>>> VLAN.objects.get(pk=1280).name\n'BetterName'\n```\n\n----------------------------------------\n\nTITLE: Loading Exported NetBox Database\nDESCRIPTION: Restore a NetBox database from an exported file. This process involves dropping the existing database, creating a new one, and then importing the data.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/replicating-netbox.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npsql -c 'drop database netbox'\npsql -c 'create database netbox'\npsql netbox < netbox.sql\n```\n\n----------------------------------------\n\nTITLE: Defining a NetBox PluginConfig Class\nDESCRIPTION: Example of a PluginConfig subclass definition, which is used to declare NetBox plugin functionality within a Python package. It includes various metadata and configuration parameters.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/index.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.plugins import PluginConfig\n\nclass FooBarConfig(PluginConfig):\n    name = 'foo_bar'\n    verbose_name = 'Foo Bar'\n    description = 'An example NetBox plugin'\n    version = '0.1'\n    author = 'Jeremy Stretch'\n    author_email = 'author@example.com'\n    base_url = 'foo-bar'\n    required_settings = []\n    default_settings = {\n        'baz': True\n    }\n    django_apps = [\"foo\", \"bar\", \"baz\"]\n\nconfig = FooBarConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Flags and Permissions in Python for NetBox\nDESCRIPTION: This snippet defines special user types using LDAP groups, maps LDAP groups to Django permissions, and sets caching options for LDAP authentication in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Define special user types using groups. Exercise great caution when assigning superuser status.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n    \"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n    \"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n    \"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n\n# For more granular permissions, we can map LDAP groups to Django groups.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n\n# Cache groups for one hour to reduce LDAP traffic\nAUTH_LDAP_CACHE_TIMEOUT = 3600\nAUTH_LDAP_ALWAYS_UPDATE_USER = True\n```\n\n----------------------------------------\n\nTITLE: ObjectVar with Dynamic References\nDESCRIPTION: Shows how to create linked ObjectVar fields where one field's options depend on another field's value using the $ reference syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nregion = ObjectVar(\n    model=Region\n)\nsite = ObjectVar(\n    model=Site,\n    query_params={\n        'region_id': '$region'\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Plugin Menu in NetBox\nDESCRIPTION: Demonstrates how to create a custom plugin menu using the PluginMenu class. The menu includes grouped items and a custom icon.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/navigation.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.plugins import PluginMenu\n\nmenu = PluginMenu(\n    label='My Plugin',\n    groups=(\n        ('Foo', (item1, item2, item3)),\n        ('Bar', (item4, item5)),\n    ),\n    icon_class='mdi mdi-router'\n)\n```\n\n----------------------------------------\n\nTITLE: Activating a Branch and Making Changes in NetBox\nDESCRIPTION: This snippet shows how to activate a branch using the checkout() context manager, and make changes within that branch. It creates a new Site object as an example.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/staged-changes.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.models import Branch\nfrom netbox.staging import checkout\n\nbranch1 = Branch.objects.get(name='branch1')\nwith checkout(branch1):\n    Site.objects.create(name='New Site', slug='new-site')\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Fields via REST API\nDESCRIPTION: Example JSON request showing how to set custom field values when creating or updating an object through the NetBox REST API.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-fields.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"New Site\",\n    \"slug\": \"new-site\",\n    \"custom_fields\": {\n        \"deployed\": \"2019-03-24\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Change Logging in NetBox Scripts\nDESCRIPTION: Demonstrates how to properly snapshot an object before making changes to ensure correct change log data generation. The code shows taking a snapshot, modifying a property, and saving the object.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif obj.pk and hasattr(obj, 'snapshot'):\n    obj.snapshot()\n\nobj.property = \"New Value\"\nobj.full_clean()\nobj.save()\n```\n\n----------------------------------------\n\nTITLE: Creating a System Job for NetBox Plugins\nDESCRIPTION: This snippet illustrates how to create a system job using the @system_job decorator. It sets up a housekeeping job that runs at a specified interval and performs cleanup operations.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/background-jobs.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom core.choices import JobIntervalChoices\nfrom netbox.jobs import JobRunner, system_job\nfrom .models import MyModel\n\n# Specify a predefined choice or an integer indicating\n# the number of minutes between job executions\n@system_job(interval=JobIntervalChoices.INTERVAL_HOURLY)\nclass MyHousekeepingJob(JobRunner):\n    class Meta:\n        name = \"My Housekeeping Job\"\n\n    def run(self, *args, **kwargs):\n        MyModel.objects.filter(foo='bar').delete()\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Plugin Queues in Python\nDESCRIPTION: Example of how to define custom background task queues for a NetBox plugin by specifying a queues list in the PluginConfig class. This allows plugins to create their own priority queues for task processing.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.0.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyPluginConfig(PluginConfig):\n    name = 'myplugin'\n    ...\n    queues = [\n        'queue1',\n        'queue2',\n        'queue-whatever-the-name'\n    ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Animal View in Python\nDESCRIPTION: Example of a basic Django view that displays a random animal record. Uses Django's generic View class to handle GET requests and render a template.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/views.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom django.views.generic import View\nfrom .models import Animal\n\nclass RandomAnimalView(View):\n    \"\"\"\n    Display a randomly-selected animal.\n    \"\"\"\n    def get(self, request):\n        animal = Animal.objects.order_by('?').first()\n        return render(request, 'netbox_animal_sounds/animal.html', {\n            'animal': animal,\n        })\n```\n\n----------------------------------------\n\nTITLE: Filtering Objects in a Queryset\nDESCRIPTION: Using the filter() method to retrieve a subset of objects based on specific criteria.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.filter(status=\"active\")\n<QuerySet [<Device: TestDevice1>, <Device: TestDevice2>, <Device: TestDevice3>,\n<Device: TestDevice8>, <Device: TestDevice9>, '...(remaining elements truncated)...']>\n```\n\n----------------------------------------\n\nTITLE: Model Class Structure Example in Python\nDESCRIPTION: Basic structure showing the minimum required components for defining a new NetBox model class, including Meta class, string representation, and URL method.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/adding-models.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ModelName(NetBoxModel):\n    class Meta:\n        ordering = ['name']\n\n    def __str__(self):\n        return self.name\n\n    def get_absolute_url(self):\n        return reverse('model-detail', args=[self.pk])\n```\n\n----------------------------------------\n\nTITLE: Structuring a NetBox Plugin Project\nDESCRIPTION: Example directory structure for a typical NetBox plugin project, showing the recommended file and folder organization.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/index.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nproject-name/\n  - plugin_name/\n    - api/\n      - __init__.py\n      - serializers.py\n      - urls.py\n      - views.py\n    - migrations/\n      - __init__.py\n      - 0001_initial.py\n      - ...\n    - templates/\n      - plugin_name/\n        - *.html\n    - __init__.py\n    - filtersets.py\n    - graphql.py\n    - jobs.py\n    - models.py\n    - middleware.py\n    - navigation.py\n    - signals.py\n    - tables.py\n    - template_content.py\n    - urls.py\n    - views.py\n  - pyproject.toml\n  - README.md\n```\n\n----------------------------------------\n\nTITLE: Authenticating API Requests with a Token\nDESCRIPTION: Example showing how to authenticate API requests by providing an authentication token in the Authorization header.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_16\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -H \"Authorization: Token $TOKEN\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/dcim/sites/\n```\n\n----------------------------------------\n\nTITLE: Defining Fieldsets in Python for NetBox Custom Scripts\nDESCRIPTION: This example shows how to define fieldsets for a custom script in NetBox. Fieldsets allow grouping and ordering of script variables in the UI form.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyScript(Script):\n    class Meta:\n        fieldsets = (\n            ('First group', ('field1', 'field2', 'field3')),\n            ('Second group', ('field4', 'field5')),\n        )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Fields via REST API\nDESCRIPTION: Example JSON response showing how custom fields appear when retrieving an object through the NetBox REST API. The custom fields are included within the custom_fields attribute of the object.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 123,\n    \"url\": \"http://localhost:8000/api/dcim/sites/123/\",\n    \"name\": \"Raleigh 42\",\n    ...\n    \"custom_fields\": {\n        \"deployed\": \"2018-06-19\",\n        \"site_code\": \"US-NC-RAL42\"\n    },\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Strawberry GraphQL Filters in Python\nDESCRIPTION: Demonstrates the creation of a GraphQL filter using Strawberry's filter decorator with Django models. Utilizes NetBox's autotype_decorator to wrap FilterSets automatically.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nimport strawberry_django\nfrom circuits import filtersets, models\n\nfrom netbox.graphql.filter_mixins import autotype_decorator, BaseFilterMixin\n\n__all__ = (\n    'CircuitFilter',\n)\n\n\n@strawberry_django.filter(models.Circuit, lookups=True)\n@autotype_decorator(filtersets.CircuitFilterSet)\nclass CircuitFilter(BaseFilterMixin):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints with Logical AND in JSON for NetBox Permissions\nDESCRIPTION: This snippet demonstrates how to define constraints for a permission using a JSON object where multiple attributes are combined with logical AND. This example grants access only to sites with 'active' status in the 'Americas' region.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"active\",\n  \"region__name\": \"Americas\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Columns for Core Tables in NetBox\nDESCRIPTION: This snippet demonstrates how plugins can register custom columns for core NetBox tables using the register_table_column utility function.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/tables.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport django_tables2\nfrom django.utils.translation import gettext_lazy as _\n\nfrom dcim.tables import SiteTable\nfrom utilities.tables import register_table_column\n\nmycol = django_tables2.Column(\n    verbose_name=_('My Column'),\n    accessor=django_tables2.A('description')\n)\n\nregister_table_column(mycol, 'foo', SiteTable)\n```\n\n----------------------------------------\n\nTITLE: Error Handling with AbortScript Exception\nDESCRIPTION: Shows how to cleanly abort script execution using the AbortScript exception, which prevents stack trace reporting while providing a meaningful error message.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom utilities.exceptions import AbortScript\n\nif some_error:\n    raise AbortScript(\"Some meaningful error message\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ALLOWED_HOSTS Setting in NetBox\nDESCRIPTION: Sets the ALLOWED_HOSTS parameter in NetBox configuration, which specifies valid hostnames and IP addresses for the server. This example includes a domain name and IP address, but can be set to wildcard for testing.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']\n```\n\n----------------------------------------\n\nTITLE: Creating a New Object\nDESCRIPTION: Demonstrating how to create a new object by instantiating a model, setting required attributes, and saving.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> lab1 = Site.objects.get(pk=7)\n>>> myvlan = VLAN(vid=123, name='MyNewVLAN', site=lab1)\n>>> myvlan.full_clean()\n>>> myvlan.save()\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Return Types with Inline Fragments\nDESCRIPTION: This example demonstrates how to handle polymorphic relationships in GraphQL using inline fragments. It shows a query for cables that handles multiple possible termination types like CircuitTermination, ConsolePort, and ConsoleServerPort.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/graphql-api.md#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\n{\n    cable_list {\n      id\n      a_terminations {\n        ... on CircuitTerminationType {\n          id\n          class_type\n        }\n        ... on ConsolePortType {\n          id\n          class_type\n        }\n        ... on ConsoleServerPortType {\n          id\n          class_type\n        }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Permission Constraints in JSON for NetBox\nDESCRIPTION: This JSON snippet demonstrates how to define permission constraints in NetBox. It shows an example of restricting access to reserved VLANs with IDs between 100 and 199. The constraints use a syntax similar to Django ORM queries.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/authentication-permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"vid__gte\": 100,\n    \"vid__lt\": 200\n  },\n  {\n    \"status\": \"reserved\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Choice Set Definition Example in Python\nDESCRIPTION: Example of how to define field choices by subclassing the ChoiceSet utility class.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/adding-models.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom utilities.choices import ChoiceSet\n\nclass ModelChoices(ChoiceSet):\n    CHOICE_A = 'a'\n    CHOICE_B = 'b'\n\n    CHOICES = [\n        (CHOICE_A, 'Choice A'),\n        (CHOICE_B, 'Choice B'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Settings for NetBox\nDESCRIPTION: Sets up Redis connection parameters for NetBox's caching and task queuing. Requires two separate Redis databases with unique IDs for tasks and caching. Both can use the same Redis service but with different database IDs.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nREDIS = {\n    'tasks': {\n        'HOST': 'localhost',      # Redis server\n        'PORT': 6379,             # Redis port\n        'PASSWORD': '',           # Redis password (optional)\n        'DATABASE': 0,            # Database ID\n        'SSL': False,             # Use SSL (optional)\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'PASSWORD': '',\n        'DATABASE': 1,            # Unique ID for second database\n        'SSL': False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Prefix (curl and JSON)\nDESCRIPTION: Example of using curl to create a new prefix via the API. Shows how to make a POST request with JSON data and the structure of the response.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_10\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/ \\\n--data '{\"prefix\": \"192.0.2.0/24\", \"site\": 6}' | jq '.'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 18691,\n  \"url\": \"http://netbox/api/ipam/prefixes/18691/\",\n  \"family\": {\n    \"value\": 4,\n    \"label\": \"IPv4\"\n  },\n  \"prefix\": \"192.0.2.0/24\",\n  \"site\": {\n    \"id\": 6,\n    \"url\": \"http://netbox/api/dcim/sites/6/\",\n    \"name\": \"US-East 4\",\n    \"slug\": \"us-east-4\"\n  },\n  \"vrf\": null,\n  \"tenant\": null,\n  \"vlan\": null,\n  \"status\": {\n    \"value\": \"active\",\n    \"label\": \"Active\"\n  },\n  \"role\": null,\n  \"is_pool\": false,\n  \"description\": \"\",\n  \"tags\": [],\n  \"custom_fields\": {},\n  \"created\": \"2020-08-04\",\n  \"last_updated\": \"2020-08-04T20:08:39.007125Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Automated Prefix Provisioning API Request\nDESCRIPTION: Demonstrates how to request the next available prefixes within a parent prefix using the NetBox API. The example requests three /28 prefixes from a parent prefix. The operation fails if the parent prefix cannot accommodate all requested prefixes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.3.md#2025-04-17_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST -H \"Authorization: Token <TOKEN>\" -H \"Content-Type: application/json\" -H \"Accept: application/json; indent=4\" http://localhost:8000/api/ipam/prefixes/10153/available-prefixes/ --data '[\n{\"prefix_length\": 28},\n{\"prefix_length\": 28},\n{\"prefix_length\": 28}\n]'\n```\n\n----------------------------------------\n\nTITLE: Starting NetBox Development Server\nDESCRIPTION: Launch the Django development server for testing purposes on port 8000.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_25\n\nLANGUAGE: no-highlight\nCODE:\n```\npython3 manage.py runserver 0.0.0.0:8000 --insecure\n```\n\n----------------------------------------\n\nTITLE: Scheduling Background Jobs in NetBox Models\nDESCRIPTION: This example shows how to schedule background jobs from within a Django model. It demonstrates using enqueue_once() to schedule periodic tasks and enqueue() for on-demand synchronization.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/background-jobs.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\nfrom core.choices import JobIntervalChoices\nfrom netbox.models import NetBoxModel\nfrom .jobs import MyTestJob\n\nclass MyModel(NetBoxModel):\n    foo = models.CharField()\n\n    def save(self, *args, **kwargs):\n        MyTestJob.enqueue_once(instance=self, interval=JobIntervalChoices.INTERVAL_HOURLY)\n        return super().save(*args, **kwargs)\n\n    def sync(self):\n        MyTestJob.enqueue(instance=self)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple IP Addresses (curl and JSON)\nDESCRIPTION: Example of using curl to retrieve a list of IP addresses from the API. Shows how to make a GET request to a list endpoint and the structure of the response.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_8\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s -X GET http://netbox/api/ipam/ip-addresses/ | jq '.'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 42031,\n  \"next\": \"http://netbox/api/ipam/ip-addresses/?limit=50&offset=50\",\n  \"previous\": null,\n  \"results\": [\n    {\n      \"id\": 5618,\n      \"address\": \"192.0.2.1/24\",\n      ...\n    },\n    {\n      \"id\": 5619,\n      \"address\": \"192.0.2.2/24\",\n      ...\n    },\n    {\n      \"id\": 5620,\n      \"address\": \"192.0.2.3/24\",\n      ...\n    },\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Slack Notification for IP Address Creation in NetBox\nDESCRIPTION: This snippet demonstrates how to configure a webhook in NetBox to send a Slack notification when a new IP address is created. It uses Jinja2 templating to customize the message body.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/webhooks.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"text\": \"IP address {{ data['address'] }} was created by {{ username }}!\"}\n```\n\n----------------------------------------\n\nTITLE: Nagios Configuration Export Template in Jinja2\nDESCRIPTION: Complete example showing how to generate Nagios host configurations from device data, including conditional checks for device status and primary IP.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/export-templates.md#2025-04-17_snippet_2\n\nLANGUAGE: jinja2\nCODE:\n```\n{% for device in queryset %}{% if device.status and device.primary_ip %}define host{\n        use                     generic-switch\n        host_name               {{ device.name }}\n        address                 {{ device.primary_ip.address.ip }}\n}\n{% endif %}{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Bulk Device Creation via REST API\nDESCRIPTION: Example of creating multiple devices in a single POST request to the NetBox API. The request creates three devices with specified name, device type, role and site parameters. The operation is atomic - all devices are created or none if any fails.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.3.md#2025-04-17_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST -H \"Authorization: Token <TOKEN>\" -H \"Content-Type: application/json\" -H \"Accept: application/json; indent=4\" http://localhost:8000/api/dcim/devices/ --data '[\n{\"name\": \"device1\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n{\"name\": \"device2\", \"device_type\": 24, \"device_role\": 17, \"site\": 6},\n{\"name\": \"device3\", \"device_type\": 24, \"device_role\": 17, \"site\": 6}\n]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Task Queues for NetBox Plugins\nDESCRIPTION: This example shows how to add custom task queues for a NetBox plugin by setting the queues attribute in the PluginConfig class. It creates two custom queues named 'foo' and 'bar'.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/background-jobs.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MyPluginConfig(PluginConfig):\n    name = 'myplugin'\n    ...\n    queues = [\n        'foo',\n        'bar',\n    ]\n```\n\n----------------------------------------\n\nTITLE: Conditional Event Rule JSON Configuration in NetBox\nDESCRIPTION: JSON configuration example demonstrating how to set up conditional logic for event rules in NetBox. This example shows how to trigger an event only when an object's status field equals 'active'.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/event-rules.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"and\": [\n    {\n      \"attr\": \"status.value\",\n      \"value\": \"active\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering General Purpose Configuration via NetBox API with cURL\nDESCRIPTION: This cURL command shows how to render a general-purpose configuration template using NetBox's REST API. It sends a POST request to the config-templates endpoint, including custom context data.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/configuration-rendering.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox:8000/api/extras/config-templates/123/render/ \\\n--data '{\n  \"foo\": \"abc\",\n  \"bar\": 123\n}'\n```\n\n----------------------------------------\n\nTITLE: Generic Object Edit View Example in Python\nDESCRIPTION: Example implementation of a generic ObjectEditView subclass for editing a custom model object. Shows basic view configuration with queryset and template specification.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/views.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# views.py\nfrom netbox.views.generic import ObjectEditView\nfrom .models import Thing\n\nclass ThingEditView(ObjectEditView):\n    queryset = Thing.objects.all()\n    template_name = 'myplugin/thing.html'\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchIndex for Custom Model in Python\nDESCRIPTION: This snippet demonstrates how to create a SearchIndex subclass for a custom model in NetBox. It shows the structure for defining searchable fields with their respective weights and specifying display attributes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/search.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.search import SearchIndex, register_search\n\n@register_search\nclass MyModelIndex(SearchIndex):\n    model = MyModel\n    fields = (\n        ('name', 100),\n        ('description', 500),\n        ('comments', 5000),\n    )\n    display_attrs = ('site', 'device', 'status', 'description')\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Jinja2 Filters in NetBox (Python)\nDESCRIPTION: Demonstrates how to create custom Jinja2 filters in NetBox. The example shows a filter that converts input to uppercase.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/system.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef uppercase(x):\n    return str(x).upper()\n\nJINJA2_FILTERS = {\n    'uppercase': uppercase,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Protection Rules in NetBox\nDESCRIPTION: This code configures PROTECTION_RULES which define validation conditions that must be met before an object can be deleted. The example shows a rule for dcim.site that prevents deletion unless the status is 'decommissioning', combining both dictionary-based rules and external validator references.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/data-validation.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nPROTECTION_RULES = {\n    \"dcim.site\": [\n        {\n            \"status\": {\n                \"eq\": \"decommissioning\"\n            }\n        },\n        \"my_plugin.validators.Validator1\",\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Config Context JSON Example\nDESCRIPTION: Example of a simple configuration context defining syslog servers for devices in a region.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/context-data.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"syslog-servers\": [\n        \"192.168.43.107\",\n        \"192.168.48.112\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Dashboard Widgets in Python\nDESCRIPTION: Demonstrates how to register multiple dashboard widgets using the register_widget decorator. Shows basic widget class structure and registration syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/dashboard-widgets.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.dashboard.widgets import DashboardWidget, register_widget\n\n@register_widget\nclass MyWidget1(DashboardWidget):\n    ...\n\n@register_widget\nclass MyWidget2(DashboardWidget):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Object Export Template in Jinja2\nDESCRIPTION: Example template showing how to iterate through a rack queryset and access basic object properties. Demonstrates accessing object name, site name, and height attributes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/export-templates.md#2025-04-17_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% for rack in queryset %}\nRack: {{ rack.name }}\nSite: {{ rack.site.name }}\nHeight: {{ rack.u_height }}U\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing validation logic in a Django model's clean method\nDESCRIPTION: Example showing how to add custom validation logic to a model's clean() method, including calling the parent class's clean method with super() and raising ValidationError for invalid data states.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/extending-models.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Foo(models.Model):\n\n    def clean(self):\n        super().clean()\n\n        # Custom validation goes here\n        if self.bar is None:\n            raise ValidationError()\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Configuration - Python\nDESCRIPTION: Example configuration showing how to implement custom validation rules for the Site model, requiring minimum name length and description.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.0.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.validators import CustomValidator\n\nCUSTOM_VALIDATORS = {\n    'dcim.site': (\n        CustomValidator({\n            'name': {\n                'min_length': 10,\n            },\n            'description': {\n                'required': True,\n            }\n        }),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google OAuth2 Parameters in NetBox\nDESCRIPTION: This snippet shows the configuration parameters that need to be added to the NetBox configuration.py file. It includes setting the remote authentication backend and the Google OAuth2 client ID and secret.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/google.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREMOTE_AUTH_BACKEND = 'social_core.backends.google.GoogleOAuth2'\nSOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '{CLIENT_ID}'\nSOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '{CLIENT_SECRET}'\n```\n\n----------------------------------------\n\nTITLE: Filtering by Reverse Relationships\nDESCRIPTION: Showing how to filter objects based on reverse relationships with related models.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.filter(interfaces__name=\"em0\")\n```\n\n----------------------------------------\n\nTITLE: Copying Gunicorn Configuration File for NetBox\nDESCRIPTION: Command to copy the default Gunicorn configuration file from the NetBox contrib directory to the main NetBox directory. This ensures that local changes won't be overwritten during future NetBox upgrades.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4a-gunicorn.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp /opt/netbox/contrib/gunicorn.py /opt/netbox/gunicorn.py\n```\n\n----------------------------------------\n\nTITLE: Extending Base Layout Template in Jinja2\nDESCRIPTION: Example of a plugin template extending the NetBox base layout.html template. It demonstrates how to override the header and content blocks with custom content.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/templates.md#2025-04-17_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{% extends 'base/layout.html' %}\n\n{% block header %}\n  <h1>My Custom Header</h1>\n{% endblock header %}\n\n{% block content %}\n  <p>{{ some_plugin_context_var }}</p>\n{% endblock content %}\n```\n\n----------------------------------------\n\nTITLE: Filtering with Partial String Matches\nDESCRIPTION: Using the contains and icontains field lookups to filter objects based on partial string matches.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.filter(name__icontains=\"testdevice\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Branch in NetBox\nDESCRIPTION: This snippet demonstrates how to create a new branch in NetBox using the Branch model from the extras.models module.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/staged-changes.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.models import Branch\n\nbranch1 = Branch.objects.create(name='branch1')\n```\n\n----------------------------------------\n\nTITLE: Site-Specific Config Context Override\nDESCRIPTION: Example of a site-specific configuration context with weight 2000 that overrides regional syslog settings.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/context-data.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"syslog-servers\": [\n        \"192.168.43.107\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build System and Project Metadata in pyproject.toml\nDESCRIPTION: This TOML configuration sets up the build system and project metadata for a NetBox plugin. It specifies the build backend, project name, version, authors, description, and other classifiers.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/index.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# See PEP 518 for the spec of this file\n# https://www.python.org/dev/peps/pep-0518/\n\n[build-system]\nrequires = [\"setuptools\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname =  \"my-example-plugin\"\nversion = \"0.1.0\"\nauthors = [\n    {name = \"John Doe\", email = \"test@netboxlabs.com\"},\n]\ndescription = \"An example NetBox plugin.\"\nreadme = \"README.md\"\n\nclassifiers=[\n    'Development Status :: 3 - Alpha',\n    'Intended Audience :: Developers',\n    'Natural Language :: English',\n    \"Programming Language :: Python :: 3 :: Only\",\n    'Programming Language :: Python :: 3.10',\n    'Programming Language :: Python :: 3.11',\n    'Programming Language :: Python :: 3.12',\n]\n\nrequires-python = \">=3.10.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NetBox for Okta SSO in Python\nDESCRIPTION: This code snippet shows the configuration parameters that need to be added to the NetBox configuration.py file to enable Okta SSO. It includes setting the remote authentication backend and Okta-specific parameters such as client ID, client secret, and API URL.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/okta.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREMOTE_AUTH_BACKEND = 'social_core.backends.okta_openidconnect.OktaOpenIdConnect'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = '{Client ID}'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = '{Client secret}'\nSOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = 'https://{Okta domain}/oauth2/'\n```\n\n----------------------------------------\n\nTITLE: Filtering Objects by Related Model Fields\nDESCRIPTION: Demonstrating how to filter objects based on fields in related models using double underscores.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.filter(tenant__name=\"Pied Piper\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Object in NetBox API\nDESCRIPTION: Example of how to delete a specific object by sending a DELETE request to the model's detail endpoint with the object's unique numeric ID.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_14\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\nhttp://netbox/api/ipam/prefixes/18691/\n```\n\n----------------------------------------\n\nTITLE: Filtering Sites in GraphQL Query\nDESCRIPTION: This snippet shows how to filter site objects using multiple criteria in a GraphQL query. It demonstrates filtering sites by region and status to retrieve only their names.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/graphql-api.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  site_list(filters: {region: \"us-nc\", status: \"active\"}) {\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ALLOWED_HOSTS in NetBox\nDESCRIPTION: This configuration defines the list of valid hostnames or IP addresses that can be used to access the NetBox service. This setting helps protect against HTTP Host header attacks and restricts CSRF trusted origins.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/required-parameters.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = ['netbox.example.com', '192.0.2.123']\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Group-based Permissions\nDESCRIPTION: Python code for configuring LDAP group-based permissions including group search parameters, required groups, group mirroring, and user flags assignment based on group membership.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django_auth_ldap.config import LDAPSearch, GroupOfNamesType\n\n# This search ought to return all groups to which the user belongs. django_auth_ldap uses this to determine group\n# hierarchy.\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\"dc=example,dc=com\", ldap.SCOPE_SUBTREE,\n                                    \"(objectClass=group)\")\nAUTH_LDAP_GROUP_TYPE = GroupOfNamesType()\n\n# Define a group required to login.\nAUTH_LDAP_REQUIRE_GROUP = \"CN=NETBOX_USERS,DC=example,DC=com\"\n\n# Mirror LDAP group assignments.\nAUTH_LDAP_MIRROR_GROUPS = True\n\n# Define special user types using groups. Exercise great caution when assigning superuser status.\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n    \"is_active\": \"cn=active,ou=groups,dc=example,dc=com\",\n    \"is_staff\": \"cn=staff,ou=groups,dc=example,dc=com\",\n    \"is_superuser\": \"cn=superuser,ou=groups,dc=example,dc=com\"\n}\n\n# For more granular permissions, we can map LDAP groups to Django groups.\nAUTH_LDAP_FIND_GROUP_PERMS = True\n\n# Cache groups for one hour to reduce LDAP traffic\nAUTH_LDAP_CACHE_TIMEOUT = 3600\n```\n\n----------------------------------------\n\nTITLE: Implementing NetBoxModelImportForm in Python\nDESCRIPTION: Example demonstrating how to create a bulk import form using NetBoxModelImportForm. Shows field configuration for CSV data import.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/forms.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelImportForm\nfrom utilities.forms import CSVModelChoiceField\nfrom .models import MyModel\n\n\nclass MyModelImportForm(NetBoxModelImportForm):\n    site = CSVModelChoiceField(\n        queryset=Site.objects.all(),\n        to_field_name='name',\n        help_text=_('Assigned site')\n    )\n\n    class Meta:\n        model = MyModel\n        fields = ('name', 'status', 'site', 'comments')\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Authentication Settings\nDESCRIPTION: Python code for configuring LDAP user authentication including user search parameters, DN template and attribute mapping.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django_auth_ldap.config import LDAPSearch\n\n# This search matches users with the sAMAccountName equal to the provided username. This is required if the user's\n# username is not in their DN (Active Directory).\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\"ou=Users,dc=example,dc=com\",\n                                    ldap.SCOPE_SUBTREE,\n                                    \"(sAMAccountName=%(user)s)\")\n\n# If a user's DN is producible from their username, we don't need to search.\nAUTH_LDAP_USER_DN_TEMPLATE = \"uid=%(user)s,ou=users,dc=example,dc=com\"\n\n# You can map user attributes to Django attributes as so.\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n    \"email\": \"mail\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Numeric Fields\nDESCRIPTION: Demonstrating how to filter objects based on numeric field comparisons.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> VLAN.objects.filter(vid__gt=2000)\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in a NetBox Branch\nDESCRIPTION: This snippet demonstrates how to commit the changes associated with a branch. It retrieves the branch and calls its commit() method to apply all staged changes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/staged-changes.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.models import Branch\n\nbranch1 = Branch.objects.get(name='branch1')\nbranch1.commit()\n```\n\n----------------------------------------\n\nTITLE: Merged Config Context Result\nDESCRIPTION: Final merged result showing how higher-weight context overrides lower-weight context while preserving non-conflicting data.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/context-data.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ntp-servers\": [\n        \"172.16.10.22\",\n        \"172.16.10.33\"\n    ],\n    \"syslog-servers\": [\n        \"192.168.43.107\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API Serializer for Brief Mode\nDESCRIPTION: Updates API serializer to support brief mode with brief_fields definition and nested serializer changes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass SiteSerializer(NetBoxModelSerializer):\n    region = NestedRegionSerializer(required=False, allow_null=True)\n\n    class Meta:\n        model = Site\n        fields = ('id', 'url', 'display', 'name', 'slug', 'status', 'region', 'time_zone', ...)\n```\n\nLANGUAGE: python\nCODE:\n```\nclass SiteSerializer(NetBoxModelSerializer):\n    region = RegionSerializer(nested=True, required=False, allow_null=True)\n\n    class Meta:\n        model = Site\n        fields = ('id', 'url', 'display', 'name', 'slug', 'status', 'region', 'time_zone', ...)\n        brief_fields = ('id', 'url', 'display', 'name', 'description', 'slug')\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific NetBox Features with Mixins\nDESCRIPTION: This snippet demonstrates how to selectively enable NetBox features by inheriting from specific feature mixins instead of using the NetBoxModel class.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/models.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# models.py\nfrom django.db import models\nfrom netbox.models.features import ExportTemplatesMixin, TagsMixin\n\nclass MyModel(ExportTemplatesMixin, TagsMixin, models.Model):\n    foo = models.CharField()\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Dashboard Widgets in Plugin Configuration\nDESCRIPTION: Shows how to properly initialize dashboard widgets within a plugin's PluginConfig class using the ready method.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/dashboard-widgets.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass FooBarConfig(PluginConfig):\n    def ready(self):\n        super().ready()\n        from . import widgets  # point this to the above widget module you created\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Objects in NetBox API\nDESCRIPTION: Example of how to delete multiple objects simultaneously by sending a DELETE request to the model's list endpoint with a list of dictionaries containing the IDs of objects to be deleted.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_15\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s -X DELETE \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10}, {\"id\": 11}, {\"id\": 12}]'\n```\n\n----------------------------------------\n\nTITLE: Querying All Objects of a Model\nDESCRIPTION: Retrieving all objects of a specific model using the all() method on the model's objects manager.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.all()\n<QuerySet [<Device: TestDevice1>, <Device: TestDevice2>, <Device: TestDevice3>,\n<Device: TestDevice4>, <Device: TestDevice5>, '...(remaining elements truncated)...']>\n```\n\n----------------------------------------\n\nTITLE: Creating a Configurable Reminder Widget in Python\nDESCRIPTION: Example implementation of a dashboard widget that allows users to create reminder notes. Includes configuration form with textarea input and custom render method.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/dashboard-widgets.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom extras.dashboard.utils import register_widget\nfrom extras.dashboard.widgets import DashboardWidget, WidgetConfigForm\n\n\n@register_widget\nclass ReminderWidget(DashboardWidget):\n    default_title = 'Reminder'\n    description = 'Add a virtual sticky note'\n\n    class ConfigForm(WidgetConfigForm):\n        content = forms.CharField(\n            widget=forms.Textarea()\n        )\n\n    def render(self, request):\n        return self.config.get('content')\n```\n\n----------------------------------------\n\nTITLE: Defining Greater Than Condition in NetBox\nDESCRIPTION: This snippet shows how to define a 'greater than' condition in NetBox, checking if the 'asn' attribute is greater than 65000.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/conditions.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attr\": \"asn\",\n  \"value\": 65000,\n  \"op\": \"gt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NetBoxModelFilterSetForm in Python\nDESCRIPTION: Example demonstrating how to create a filter form using NetBoxModelFilterSetForm. Shows configuration of filter fields for list views.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/forms.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dcim.models import Site\nfrom netbox.forms import NetBoxModelFilterSetForm\nfrom utilities.forms import DynamicModelMultipleChoiceField, MultipleChoiceField\nfrom .models import MyModel, MyModelStatusChoices\n\nclass MyModelFilterForm(NetBoxModelFilterSetForm):\n    site_id = DynamicModelMultipleChoiceField(\n        queryset=Site.objects.all(),\n        required=False\n    )\n    status = MultipleChoiceField(\n        choices=MyModelStatusChoices,\n        required=False\n    )\n\n    model = MyModel\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization in Django Tables\nDESCRIPTION: Example showing how to properly implement internationalization in Django tables by wrapping column verbose_name with gettext_lazy() for translation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/internationalization.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nclass CircuitTable(TenancyColumnsMixin, ContactsColumnMixin, NetBoxTable):\n    provider = tables.Column(\n        verbose_name=_('Provider'),\n        ...\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinel for High Availability in NetBox\nDESCRIPTION: This configuration sets up Redis Sentinel for high availability in NetBox. It defines sentinel servers, service name, and connection parameters for both the tasks and caching databases, with different sentinel configurations for each.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/required-parameters.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nREDIS = {\n    'tasks': {\n        'SENTINELS': [('mysentinel.redis.example.com', 6379)],\n        'SENTINEL_SERVICE': 'netbox',\n        'SENTINEL_TIMEOUT': 10,\n        'PASSWORD': '',\n        'DATABASE': 0,\n        'SSL': False,\n    },\n    'caching': {\n        'SENTINELS': [\n            ('mysentinel.redis.example.com', 6379),\n            ('othersentinel.redis.example.com', 6379)\n        ],\n        'SENTINEL_SERVICE': 'netbox',\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'SSL': False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database Connection in NetBox\nDESCRIPTION: This configuration establishes the connection to a PostgreSQL database for NetBox. It includes parameters for database name, credentials, server location, connection settings, and database engine specification.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/required-parameters.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nDATABASE = {\n    'ENGINE': 'django.db.backends.postgresql',\n    'NAME': 'netbox',               # Database name\n    'USER': 'netbox',               # PostgreSQL username\n    'PASSWORD': 'J5brHrAXFLQSif0K', # PostgreSQL password\n    'HOST': 'localhost',            # Database server\n    'PORT': '',                     # Database port (leave blank for default)\n    'CONN_MAX_AGE': 300,            # Max database connection age\n}\n```\n\n----------------------------------------\n\nTITLE: Plain JSON Configuration Example\nDESCRIPTION: Example of configuring multiple custom validators using plain JSON format in the CUSTOM_VALIDATORS setting.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-validation.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"name\": {\n                \"min_length\": 5,\n                \"max_length\": 30,\n            }\n        }\n    ],\n    \"dcim.device\": [\n        {\n            \"platform\": {\n                \"required\": True,\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering NetBox API Results\nDESCRIPTION: These examples demonstrate how to order results in the NetBox API using the 'ordering' query parameter. They show ordering by a single field, inverse ordering, and ordering by multiple fields.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/filtering.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/dcim/sites/?ordering=facility\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/dcim/sites/?ordering=-facility\n```\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/dcim/sites/?ordering=facility,-name\n```\n\n----------------------------------------\n\nTITLE: Configuring FilterSet for REST API ViewSet in Python\nDESCRIPTION: This snippet demonstrates how to enable a FilterSet on a REST API endpoint by setting the filterset_class attribute on the API view.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/filtersets.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# api/views.py\nfrom myplugin import models, filtersets\nfrom . import serializers\n\nclass MyModelViewSet(...):\n    queryset = models.MyModel.objects.all()\n    serializer_class = serializers.MyModelSerializer\n    filterset_class = filtersets.MyModelFilterSet\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Methods in Python for NetBox Custom Scripts\nDESCRIPTION: This example shows how to implement test methods in a custom script for NetBox. It includes two test methods: one for checking console connections and another for power connections.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom dcim.choices import DeviceStatusChoices\nfrom dcim.models import ConsolePort, Device, PowerPort\nfrom extras.scripts import Script\n\n\nclass DeviceConnectionsReport(Script):\n    description = \"Validate the minimum physical connections for each device\"\n\n    def test_console_connection(self):\n\n        # Check that every console port for every active device has a connection defined.\n        active = DeviceStatusChoices.STATUS_ACTIVE\n        for console_port in ConsolePort.objects.prefetch_related('device').filter(device__status=active):\n            if not console_port.connected_endpoints:\n                self.log_failure(\n                    f\"No console connection defined for {console_port.name}\",\n                    console_port.device,\n                )\n            elif not console_port.connection_status:\n                self.log_warning(\n                    f\"Console connection for {console_port.name} marked as planned\",\n                    console_port.device,\n                )\n            else:\n                self.log_success(\"Passed\", console_port.device)\n\n    def test_power_connections(self):\n\n        # Check that every active device has at least two connected power supplies.\n        for device in Device.objects.filter(status=DeviceStatusChoices.STATUS_ACTIVE):\n            connected_ports = 0\n            for power_port in PowerPort.objects.filter(device=device):\n                if power_port.connected_endpoints:\n                    connected_ports += 1\n                    if not power_port.path.is_active:\n                        self.log_warning(\n                            f\"Power connection for {power_port.name} marked as planned\",\n                            device,\n                        )\n            if connected_ports < 2:\n                self.log_failure(\n                    f\"{connected_ports} connected power supplies found (2 needed)\",\n                    device,\n                )\n            else:\n                self.log_success(\"Passed\", device)\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Site Statuses in NetBox\nDESCRIPTION: This snippet shows how to define additional statuses for sites by modifying the FIELD_CHOICES configuration parameter in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/dcim/site.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! tip\n    Additional statuses may be defined by setting `Site.status` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.\n```\n\n----------------------------------------\n\nTITLE: Defining a ChoiceSet for Model Field Choices\nDESCRIPTION: This example shows how to create a ChoiceSet subclass to define choices for a model field, including dynamic configuration and color assignment.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/models.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# choices.py\nfrom utilities.choices import ChoiceSet\n\nclass StatusChoices(ChoiceSet):\n    key = 'MyModel.status'\n\n    STATUS_FOO = 'foo'\n    STATUS_BAR = 'bar'\n    STATUS_BAZ = 'baz'\n\n    CHOICES = [\n        (STATUS_FOO, 'Foo', 'red'),\n        (STATUS_BAR, 'Bar', 'green'),\n        (STATUS_BAZ, 'Baz', 'blue'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logging in NetBox (Python)\nDESCRIPTION: Sets up custom logging configuration in NetBox to write all INFO and higher messages to a local file. This uses Django's logging framework.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/system.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.FileHandler',\n            'filename': '/var/log/netbox.log',\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file'],\n            'level': 'INFO',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LDAP Authentication Backend in NetBox Configuration\nDESCRIPTION: Python configuration code to enable the LDAP authentication backend in NetBox's configuration.py file.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nREMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Validation Rules Example\nDESCRIPTION: Demonstrates basic custom validation rules for checking name attribute length using JSON format.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-validation.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": {\n    \"min_length\": 5,\n    \"max_length\": 30\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis with UNIX Socket in NetBox\nDESCRIPTION: This configuration demonstrates how to connect to Redis using UNIX sockets instead of TCP/IP connections. It uses URL format to specify the socket path and database numbers for both tasks and caching.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/required-parameters.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nREDIS = {\n    'tasks': {\n        'URL': 'unix:///run/redis-netbox/redis.sock?db=0'\n    },\n    'caching': {\n        'URL': 'unix:///run/redis-netbox/redis.sock?db=1'\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Tasks and Caching in NetBox\nDESCRIPTION: This configuration sets up Redis connections for background tasks and caching in NetBox. It defines separate Redis databases with their respective connection parameters including host, port, credentials, and SSL settings.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/required-parameters.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nREDIS = {\n    'tasks': {\n        'HOST': 'redis.example.com',\n        'PORT': 1234,\n        'USERNAME': 'netbox',\n        'PASSWORD': 'foobar',\n        'DATABASE': 0,\n        'SSL': False,\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'USERNAME': '',\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'SSL': False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Password Validators in NetBox\nDESCRIPTION: Default configuration for Django's built-in password validators in NetBox. Enforces minimum password length of 12 characters and requires alphanumeric characters (uppercase, lowercase, and digits).\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/security.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n        \"OPTIONS\": {\n            \"min_length\": 12,\n        },\n    },\n    {\n        \"NAME\": \"utilities.password_validation.AlphanumericPasswordValidator\",\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Debugging Logs in Python for NetBox\nDESCRIPTION: This snippet sets up logging configuration for debugging LDAP authentication issues in NetBox. It defines a handler for writing debug logs to a file and configures the django_auth_ldap logger.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'netbox_auth_log': {\n            'level': 'DEBUG',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': '/opt/netbox/local/logs/django-ldap-debug.log',\n            'maxBytes': 1024 * 500,\n            'backupCount': 5,\n        },\n    },\n    'loggers': {\n        'django_auth_ldap': {\n            'handlers': ['netbox_auth_log'],\n            'level': 'DEBUG',\n        },\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NetBox Database and User\nDESCRIPTION: SQL commands to create NetBox database, user, and set appropriate permissions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_6\n\nLANGUAGE: postgresql\nCODE:\n```\nCREATE DATABASE netbox;\nCREATE USER netbox WITH PASSWORD 'J5brHrAXFLQSif0K';\nALTER DATABASE netbox OWNER TO netbox;\n-- the next two commands are needed on PostgreSQL 15 and later\n\\connect netbox;\nGRANT CREATE ON SCHEMA public TO netbox;\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for uWSGI with NetBox\nDESCRIPTION: Modifies the Nginx configuration to use uWSGI instead of gunicorn for NetBox. This includes setting up the proper uWSGI parameters.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4b-uwsgi.md#2025-04-17_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nlocation / {\n    # proxy_pass http://127.0.0.1:8001;\n    # proxy_set_header X-Forwarded-Host $http_host;\n    # proxy_set_header X-Real-IP $remote_addr;\n    # proxy_set_header X-Forwarded-Proto $scheme;\n    # comment the lines above and uncomment the lines below if using uWSGI\n    include uwsgi_params;\n    uwsgi_pass  127.0.0.1:8001;\n    uwsgi_param Host $host;\n    uwsgi_param X-Real-IP $remote_addr;\n    uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;\n    uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering NetBox VLANs by VLAN ID using Numeric Lookup Expression\nDESCRIPTION: This snippet illustrates how to use a numeric lookup expression to filter VLANs in the NetBox API. It returns all VLANs with a VLAN ID greater than 900.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/filtering.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/ipam/vlans/?vid__gt=900\n```\n\n----------------------------------------\n\nTITLE: Related Object Validation Example\nDESCRIPTION: Shows how to validate attributes of related objects using dotted path notation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-validation.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nCUSTOM_VALIDATORS = {\n    \"dcim.site\": [\n        {\n            \"region.name\": {\n                \"neq\": \"New York\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication Backend in NetBox\nDESCRIPTION: Sets up LDAP as the remote authentication backend for NetBox. This allows users to authenticate via an LDAP directory service.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/overview.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREMOTE_AUTH_BACKEND = 'netbox.authentication.LDAPBackend'\n```\n\n----------------------------------------\n\nTITLE: Request Parameter Validation Example\nDESCRIPTION: Demonstrates how to validate request parameters using custom validation rules.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-validation.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request.user.username\": {\n    \"eq\": \"admin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Migration Command Example\nDESCRIPTION: Command for generating database migrations with a specific name and no header.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/adding-models.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmanage.py makemigrations -n $NAME --no-header\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Header Authentication in NetBox\nDESCRIPTION: Enables HTTP header-based authentication where an external server handles authentication and passes user information via HTTP headers to NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/overview.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nREMOTE_AUTH_BACKEND = 'netbox.authentication.RemoteUserBackend'\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Origin Whitelist in NetBox\nDESCRIPTION: Example configuration for Cross-Origin Resource Sharing (CORS) whitelist in NetBox. Defines specific hostnames that are authorized to make cross-site API requests.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/security.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nCORS_ORIGIN_WHITELIST = [\n    'https://example.com',\n]\n```\n\n----------------------------------------\n\nTITLE: Pre- and Post-Change Snapshots in Webhooks (JSON)\nDESCRIPTION: Example of the new pre- and post-change snapshots included in outgoing webhooks. This JSON snippet shows the 'snapshots' dictionary with 'prechange' and 'postchange' keys, demonstrating the changes made to a site's name, slug, and status.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.11.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"snapshots\": {\n    \"prechange\": {\n        \"name\": \"Site 1\",\n        \"slug\": \"site-1\",\n        \"status\": \"active\",\n        ...\n    },\n    \"postchange\": {\n        \"name\": \"Site 2\",\n        \"slug\": \"site-2\",\n        \"status\": \"planned\",\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating View Actions Format\nDESCRIPTION: Converts view actions from tuple format to dictionary format with explicit permissions mapping.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nactions = ('add', 'import', 'export', 'bulk_edit', 'bulk_delete')\naction_perms = defaultdict(set, **{\n    'add': {'add'},\n    'import': {'add'},\n    'bulk_edit': {'change'},\n    'bulk_delete': {'delete'},\n})\n```\n\nLANGUAGE: python\nCODE:\n```\nactions = {\n    'add': {'add'},\n    'import': {'add'},\n    'export': set(),\n    'bulk_edit': {'change'},\n    'bulk_delete': {'delete'},\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning an API Token via REST API\nDESCRIPTION: Example of how to create a new API token by sending a POST request with valid username and password to the token provisioning endpoint.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/users/tokens/provision/ \\\n--data '{\n    \"username\": \"hankhill\",\n    \"password\": \"I<3C3H8\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization in Django Templates\nDESCRIPTION: Example showing how to use the trans and blocktrans template tags to mark text for translation in Django templates, including handling context variables.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/internationalization.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{% load i18n %}\n\n{# A short string #}\n<h5 class=\"card-header\">{% trans \"Circuit List\" %}</h5>\n\n{# A longer string with a context variable #}\n{% blocktrans trimmed with count=object.circuits.count %}\n  There are {count} circuits. Would you like to continue?\n{% endblocktrans %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Object\nDESCRIPTION: Using the get() method to retrieve a specific object by its primary key or other unique field.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> Site.objects.get(pk=7)\n<Site: Test Lab>\n```\n\n----------------------------------------\n\nTITLE: Running NetBox Upgrade Script\nDESCRIPTION: Execute the upgrade script to set up Python virtual environment, install dependencies, run migrations, and prepare static files. Requires sudo privileges.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_20\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo /opt/netbox/upgrade.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Redis on Ubuntu for NetBox\nDESCRIPTION: Command to install Redis server on Ubuntu systems. This installs the Redis package required for NetBox's caching and queuing functionality.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/2-redis.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y redis-server\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Dashboard Widgets in Python\nDESCRIPTION: Example configuration for setting up the default dashboard layout in NetBox. Demonstrates how to configure two ObjectCountsWidget instances with different settings for organization and IPAM metrics.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/default-values.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_DASHBOARD = [\n    {\n        'widget': 'extras.ObjectCountsWidget',\n        'width': 4,\n        'height': 3,\n        'title': 'Organization',\n        'config': {\n            'models': [\n                'dcim.site',\n                'tenancy.tenant',\n                'tenancy.contact',\n            ]\n        }\n    },\n    {\n        'widget': 'extras.ObjectCountsWidget',\n        'width': 4,\n        'height': 3,\n        'title': 'IPAM',\n        'color': 'blue',\n        'config': {\n            'models': [\n                'ipam.prefix',\n                'ipam.iprange',\n                'ipam.ipaddress',\n            ]\n        }\n    },\n]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tunnel Termination Relationships in NetBox\nDESCRIPTION: Mermaid flowchart illustrating the relationship between tunnels, termination points, interfaces, devices, and virtual machines in NetBox. The diagram shows how a tunnel connects to multiple termination points, which in turn connect to interfaces on physical devices or virtual machines.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/vpn-tunnels.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Termination1[TunnelTermination]\n    Termination2[TunnelTermination]\n    Interface1[Interface]\n    Interface2[Interface]\n    Tunnel --> Termination1 & Termination2\n    Termination1 --> Interface1\n    Termination2 --> Interface2\n    Interface1 --> Device\n    Interface2 --> VirtualMachine\n\nclick Tunnel \"../../models/vpn/tunnel/\"\nclick TunnelTermination1 \"../../models/vpn/tunneltermination/\"\nclick TunnelTermination2 \"../../models/vpn/tunneltermination/\"\n```\n\n----------------------------------------\n\nTITLE: Registering Data Backends in NetBox\nDESCRIPTION: Shows how to register custom data backend classes with NetBox by defining them in a backends list. This list should be placed at the end of the data_backends.py file.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/data-backends.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbackends = [MyDataBackend]\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Directory User Search for Multiple Login Formats\nDESCRIPTION: Python code for configuring LDAP user search to support both username and userPrincipalName formats for Active Directory authentication.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    \"ou=Users,dc=example,dc=com\",\n    ldap.SCOPE_SUBTREE,\n    \"(|(userPrincipalName=%(user)s)(sAMAccountName=%(user)s))\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CSRF Trusted Origins in NetBox\nDESCRIPTION: Example configuration for defining trusted origins for unsafe requests. Each host must specify a scheme (http:// or https://) and is passed to Django's CSRF_TRUSTED_ORIGINS setting.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/security.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nCSRF_TRUSTED_ORIGINS = (\n    'http://netbox.local',\n    'https://netbox.local',\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Queue Mappings in NetBox\nDESCRIPTION: Example of changing which background task queues are used for different operations. This allows priority control for webhooks, reports, and scripts by mapping them to different queue priorities.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/miscellaneous.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nQUEUE_MAPPINGS = {\n    'webhook': 'low',\n    'report': 'high',\n    'script': 'high',\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting NetBox Services\nDESCRIPTION: Commands to restart the NetBox and RQ services after upgrade.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart netbox netbox-rq\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Choices in NetBox - Replacement Mode\nDESCRIPTION: This snippet demonstrates how to replace default site status choices with custom options in NetBox. Each choice includes a database value, human-readable label, and color. This replaces all existing choices for the specified field.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/data-validation.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nFIELD_CHOICES = {\n    'dcim.Site.status': (\n        ('foo', 'Foo', 'red'),\n        ('bar', 'Bar', 'green'),\n        ('baz', 'Baz', 'blue'),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Filters\nDESCRIPTION: Showing how to combine multiple filters to refine a queryset further.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> VLAN.objects.filter(vid__gt=2000, name__icontains=\"engineering\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for NetBox\nDESCRIPTION: Commands to create and activate a Python virtual environment for NetBox development, isolating the project dependencies from the system Python installation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nmkdir ~/.venv\npython3 -m venv ~/.venv/netbox\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Queried Objects\nDESCRIPTION: Using a for loop to iterate through all objects returned by a queryset and print specific attributes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> for device in Device.objects.all():\n...   print(device.name, device.device_type)\n...\n('TestDevice1', <DeviceType: PacketThingy 9000>)\n('TestDevice2', <DeviceType: PacketThingy 9000>)\n('TestDevice3', <DeviceType: PacketThingy 9000>)\n('TestDevice4', <DeviceType: PacketThingy 9000>)\n('TestDevice5', <DeviceType: PacketThingy 9000>)\n...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Facility Model Relationships with Mermaid Diagram\nDESCRIPTION: This Mermaid flowchart illustrates the hierarchical relationships between NetBox facility models. It shows how regions and site groups connect to sites, which connect to locations and racks, eventually leading to devices. Each element includes a clickable link to its model documentation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/facilities.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Region --> Region\n    SiteGroup --> SiteGroup\n    Region & SiteGroup --> Site\n    Site --> Location & Device\n    Location --> Location\n    Location --> Rack & Device\n    Rack --> Device\n    Site --> Rack\n    RackRole --> Rack\n\nclick Device \"../../models/dcim/device/\"\nclick Location \"../../models/dcim/location/\"\nclick Rack \"../../models/dcim/rack/\"\nclick RackRole \"../../models/dcim/rackrole/\"\nclick Region \"../../models/dcim/region/\"\nclick Site \"../../models/dcim/site/\"\nclick SiteGroup \"../../models/dcim/sitegroup/\"\n```\n\n----------------------------------------\n\nTITLE: Exporting NetBox Database Schema\nDESCRIPTION: Export only the database schema without any data, useful for development reference.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/replicating-netbox.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npg_dump --username netbox --password --host localhost -s netbox > netbox_schema.sql\n```\n\n----------------------------------------\n\nTITLE: Running NetBox Tests with Custom Configuration\nDESCRIPTION: This snippet demonstrates how to set the NETBOX_CONFIGURATION environment variable and run the test suite for NetBox. It ensures the use of the packaged test configuration and executes the tests in the correct directory.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport NETBOX_CONFIGURATION=netbox.configuration_testing\ncd netbox/\npython manage.py test\n```\n\n----------------------------------------\n\nTITLE: Contact Relationship Flowchart in Mermaid\nDESCRIPTION: A flowchart diagram showing the relationships between ContactGroup, Contact, ContactRole, and Objects in the NetBox contact system. The diagram illustrates how contact groups can contain other groups and contacts, and how contacts are assigned to objects through roles.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/contacts.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    ContactGroup --> ContactGroup & Contact\n    ContactRole & Contact --> assignment([Assignment])\n    assignment --> Object\n\nclick Contact \"../../models/tenancy/contact/\"\nclick ContactGroup \"../../models/tenancy/contactgroup/\"\nclick ContactRole \"../../models/tenancy/contactrole/\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization in Django Forms\nDESCRIPTION: Example showing how to properly implement internationalization in Django forms by wrapping field labels and fieldset names with gettext_lazy() for translation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/internationalization.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\nfrom utilities.forms.rendering import FieldSet\n\nclass CircuitBulkEditForm(NetBoxModelBulkEditForm):\n    description = forms.CharField(\n        label=_('Description'),\n        ...\n    )\n\n    fieldsets = (\n        FieldSet('provider', 'type', 'status', 'description', name=_('Circuit')),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Settings in NetBox (Python)\nDESCRIPTION: Demonstrates how to test the email server configuration in NetBox using Django's send_mail() function within the NetBox shell. This is useful for verifying email functionality.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/system.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from django.core.mail import send_mail\n>>> send_mail(\n  'Test Email Subject',\n  'Test Email Body',\n  'noreply-netbox@example.com',\n  ['users@example.com'],\n  fail_silently=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for NetBox v2.7 in Python\nDESCRIPTION: Updated Redis configuration structure for NetBox v2.7, separating webhooks and caching configurations. This allows for using different Redis instances for these functions if desired.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.7.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nREDIS = {\n    'webhooks': {\n        'HOST': 'redis.example.com',\n        'PORT': 1234,\n        'PASSWORD': 'foobar',\n        'DATABASE': 0,\n        'DEFAULT_TIMEOUT': 300,\n        'SSL': False,\n    },\n    'caching': {\n        'HOST': 'localhost',\n        'PORT': 6379,\n        'PASSWORD': '',\n        'DATABASE': 1,\n        'DEFAULT_TIMEOUT': 300,\n        'SSL': False,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Condition Set with AND/OR Logic in NetBox\nDESCRIPTION: This snippet shows how to create a complex condition set using AND and OR logic in NetBox. It combines multiple conditions to check for active status, primary IP, and tags.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/conditions.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"or\": [\n    {\n      \"and\": [\n        {\n          \"attr\": \"status.value\",\n          \"value\": \"active\"\n        },\n        {\n          \"attr\": \"primary_ip4\",\n          \"value\": null,\n          \"negate\": true\n        }\n      ]\n    },\n    {\n      \"attr\": \"tags.slug\",\n      \"value\": \"exempt\",\n      \"op\": \"contains\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing VLAN relationships with Mermaid flowchart\nDESCRIPTION: A Mermaid flowchart showing the relationships between VLAN components in NetBox. It illustrates how both VLAN Groups and Roles connect to VLANs, with clickable links to the corresponding model documentation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/vlan-management.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    VLANGroup & Role --> VLAN\n\nclick Role \"../../models/ipam/role/\"\nclick VLAN \"../../models/ipam/vlan/\"\nclick VLANGroup \"../../models/ipam/vlangroup/\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Default Permissions in NetBox\nDESCRIPTION: Example of a custom default permission configuration that allows all users to create device roles with names starting with 'temp'. This would override the default API token permissions if implemented directly.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/security.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_PERMISSIONS = {\n    'dcim.add_devicerole': (\n        {'name__startswith': 'temp'},\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Device Configuration via NetBox API with cURL\nDESCRIPTION: This cURL command demonstrates how to render a device-specific configuration using NetBox's REST API. It sends a POST request to the device's unique URL, including optional extra context data.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/configuration-rendering.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -X POST \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttp://netbox:8000/api/dcim/devices/123/render-config/ \\\n--data '{\n  \"extra_data\": \"abc123\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Settings in NetBox\nDESCRIPTION: Example showing how to configure individual NetBox plugins using the PLUGINS_CONFIG dictionary. Each key corresponds to a plugin name with plugin-specific parameters as values. Plugins must also be listed in the PLUGINS parameter to take effect.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPLUGINS_CONFIG = {\n    'plugin1': {\n        'foo': 123,\n        'bar': True\n    },\n    'plugin2': {\n        'foo': 456,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Custom Scripts and Reports\nDESCRIPTION: Copies custom scripts and reports directories from old installation to new one.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp -r /opt/netbox-$OLDVER/netbox/scripts /opt/netbox/netbox/\nsudo cp -r /opt/netbox-$OLDVER/netbox/reports /opt/netbox/netbox/\n```\n\n----------------------------------------\n\nTITLE: Launching NetBox Python Shell\nDESCRIPTION: Command to launch the NetBox Python shell, which provides a customized Django shell with pre-loaded NetBox models.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py nbshell\n```\n\n----------------------------------------\n\nTITLE: Default JSON Request Body for Newly Created Site in NetBox Webhook\nDESCRIPTION: This example shows the default JSON structure of a webhook request body when a new site is created in NetBox. It includes event details, timestamp, model information, user data, and object snapshots.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/webhooks.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"created\",\n    \"timestamp\": \"2021-03-09 17:55:33.968016+00:00\",\n    \"model\": \"site\",\n    \"username\": \"jstretch\",\n    \"request_id\": \"fdbca812-3142-4783-b364-2e2bd5c16c6a\",\n    \"data\": {\n        \"id\": 19,\n        \"name\": \"Site 1\",\n        \"slug\": \"site-1\",\n        \"status\": \n            \"value\": \"active\",\n            \"label\": \"Active\",\n            \"id\": 1\n        },\n        \"region\": null,\n        ...\n    },\n    \"snapshots\": {\n        \"prechange\": null,\n        \"postchange\": {\n            \"created\": \"2021-03-09\",\n            \"last_updated\": \"2021-03-09T17:55:33.851Z\",\n            \"name\": \"Site 1\",\n            \"slug\": \"site-1\",\n            \"status\": \"active\",\n            ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization in Django Models\nDESCRIPTION: Example showing how to properly implement internationalization in Django models by wrapping verbose_name, verbose_name_plural, and help_text with gettext_lazy() for translation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/internationalization.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nclass Circuit(PrimaryModel):\n    commit_rate = models.PositiveIntegerField(\n        ...\n        verbose_name=_('commit rate (Kbps)'),\n        help_text=_(\"Committed rate\")\n    )\n\n    class Meta:\n        verbose_name = _('circuit')\n        verbose_name_plural = _('circuits')\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Sign-On Authentication in NetBox\nDESCRIPTION: Sets up Single Sign-On (SSO) authentication using python-social-auth library, with Google OAuth2 as an example backend.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/overview.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nREMOTE_AUTH_BACKEND = 'social_core.backends.google.GoogleOAuth2'\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring nginx for NetBox\nDESCRIPTION: Series of commands to install nginx, configure it for NetBox, and enable the configuration.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/5-http-server.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y nginx\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp /opt/netbox/contrib/nginx.conf /etc/nginx/sites-available/netbox\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm /etc/nginx/sites-enabled/default\nsudo ln -s /etc/nginx/sites-available/netbox /etc/nginx/sites-enabled/netbox\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Cloning NetBox Git Repository\nDESCRIPTION: Clones the NetBox Git repository from GitHub into the current directory. This downloads the entire NetBox codebase and version history, allowing for easy updates in the future.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo git clone https://github.com/netbox-community/netbox.git .\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Tags for Sentry Error Reports in NetBox (Python)\nDESCRIPTION: This code demonstrates how to assign custom tags to Sentry error reports in NetBox. It uses the SENTRY_TAGS parameter to define arbitrary key-value pairs for additional context in error tracking.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/error-reporting.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSENTRY_TAGS = {\n    \"custom.foo\": \"123\",\n    \"custom.bar\": \"abc\",\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Filtered Objects\nDESCRIPTION: Using the count() method on a filtered queryset to get the number of matching objects.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.filter(status=\"active\").count()\n982\n```\n\n----------------------------------------\n\nTITLE: Deleting Multiple Objects\nDESCRIPTION: Showing how to delete multiple objects by calling delete() on a filtered queryset, with a safety check beforehand.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.filter(name__icontains='test').count()\n27\n>>> Device.objects.filter(name__icontains='test').delete()\n(35, {'dcim.DeviceBay': 0, 'dcim.InterfaceConnection': 4,\n'extras.ImageAttachment': 0, 'dcim.Device': 27, 'dcim.Interface': 4,\n'dcim.ConsolePort': 0, 'dcim.PowerPort': 0})\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Nested Relationships in NetBox Shell\nDESCRIPTION: Example commands to rebuild the correct nested relationships for regions, rack groups, and tenant groups after upgrading. This is a one-time operation performed using the NetBox interactive shell.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.8.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ python netbox/manage.py nbshell\n### NetBox interactive shell (localhost)\n### Python 3.6.4 | Django 3.0.5 | NetBox 2.8.1\n### lsmodels() will show available models. Use help(<model>) for more info.\n>>> Region.objects.rebuild()\n>>> RackGroup.objects.rebuild()\n>>> TenantGroup.objects.rebuild()\n```\n\n----------------------------------------\n\nTITLE: Creating NetBox System User on Ubuntu\nDESCRIPTION: Creates a dedicated system user and group for running NetBox services on Ubuntu. Also sets the appropriate ownership permissions for directories where NetBox needs to write files.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser --system --group netbox\nsudo chown --recursive netbox /opt/netbox/netbox/media/\nsudo chown --recursive netbox /opt/netbox/netbox/reports/\nsudo chown --recursive netbox /opt/netbox/netbox/scripts/\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path in NetBox Configuration (Python)\nDESCRIPTION: Configures the base URL path for accessing NetBox, excluding the scheme and domain name. This is used when NetBox is installed in a subdirectory.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/system.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nBASE_PATH = 'netbox/'\n```\n\n----------------------------------------\n\nTITLE: NetBox VLAN Serialization Example\nDESCRIPTION: Sample JSON representation of a VLAN object in NetBox's API. Demonstrates the serialization format with parent objects like site and group included as nested objects in a brief representation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 1048,\n    \"site\": {\n        \"id\": 7,\n        \"url\": \"http://netbox/api/dcim/sites/7/\",\n        \"name\": \"Corporate HQ\",\n        \"slug\": \"corporate-hq\"\n    },\n    \"group\": {\n        \"id\": 4,\n        \"url\": \"http://netbox/api/ipam/vlan-groups/4/\",\n        \"name\": \"Production\",\n        \"slug\": \"production\"\n    },\n    \"vid\": 101,\n    \"name\": \"Users-Floor1\",\n    \"tenant\": null,\n    \"status\": {\n        \"value\": 1,\n        \"label\": \"Active\"\n    },\n    \"role\": {\n        \"id\": 9,\n        \"url\": \"http://netbox/api/ipam/roles/9/\",\n        \"name\": \"User Access\",\n        \"slug\": \"user-access\"\n    },\n    \"description\": \"\",\n    \"display_name\": \"101 (Users-Floor1)\",\n    \"custom_fields\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting NetBox Release Archive\nDESCRIPTION: Downloads the NetBox release archive from GitHub and extracts it to the desired installation path. Creates a symbolic link for easier management and future upgrades. Replace 'X.Y.Z' with the actual version number.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo wget https://github.com/netbox-community/netbox/archive/refs/tags/vX.Y.Z.tar.gz\nsudo tar -xzf vX.Y.Z.tar.gz -C /opt\nsudo ln -s /opt/netbox-X.Y.Z/ /opt/netbox\n```\n\n----------------------------------------\n\nTITLE: Implementing FilterSet in NetBox ObjectListView in Python\nDESCRIPTION: This code shows how to use a custom FilterSet in a NetBox ObjectListView subclass. It sets the queryset and filterset attributes for the view.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/filtersets.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# views.py\nfrom netbox.views.generic import ObjectListView\nfrom .filtersets import MyModelFilterSet\nfrom .models import MyModel\n\nclass MyModelListView(ObjectListView):\n    queryset = MyModel.objects.all()\n    filterset = MyModelFilterSet\n```\n\n----------------------------------------\n\nTITLE: Configuring Active Directory User Attribute Mapping\nDESCRIPTION: Python code for mapping Active Directory user attributes to Django user model fields, supporting username-based authentication.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nAUTH_LDAP_USER_ATTR_MAP = {\n    \"username\": \"sAMAccountName\",\n    \"email\": \"mail\",\n    \"first_name\": \"givenName\",\n    \"last_name\": \"sn\",\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version for NetBox Compatibility\nDESCRIPTION: Verifies that the installed Python version meets NetBox's requirement of Python 3.10 or later. This command displays the currently installed Python version.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\npython3 -V\n```\n\n----------------------------------------\n\nTITLE: Installing NetBox UI Dependencies with Yarn\nDESCRIPTION: Command to install all the NetBox UI dependencies using Yarn package manager. This should be run in the netbox/project-static directory after setting up the base NetBox development environment.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/web-ui.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd netbox/project-static\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes for NetBox Pull Request\nDESCRIPTION: This snippet shows the git commands for committing changes and pushing them to a fork in preparation for a pull request. It includes an example of a properly formatted commit message that will automatically close the referenced issue when merged.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Closes #1234: Add IPv5 support\"\ngit push origin\n```\n\n----------------------------------------\n\nTITLE: Using Python Context Manager for Staging Changes in NetBox\nDESCRIPTION: Demonstrates the use of the checkout() context manager to stage changes in NetBox without committing them to the active database. Changes can be later applied using merge().\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.4.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncheckout()\n```\n\n----------------------------------------\n\nTITLE: Example of model_features Registry Structure in Python\nDESCRIPTION: This code snippet demonstrates the structure of the model_features registry store, which maps features to supported NetBox models organized by app. It shows how custom_fields and event_rules are mapped to various models in different apps.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/application-registry.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    'custom_fields': {\n        'circuits': ['provider', 'circuit'],\n        'dcim': ['site', 'rack', 'devicetype', ...],\n        ...\n    },\n    'event_rules': {\n        'extras': ['configcontext', 'tag', ...],\n        'dcim': ['site', 'rack', 'devicetype', ...],\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: VLAN Translation Policy Example Structure\nDESCRIPTION: Examples of valid and invalid VLAN translation policy configurations, showing allowed and disallowed rule combinations. Each policy can contain multiple rules mapping local VIDs to remote VIDs, with uniqueness constraints.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/ipam/vlantranslationpolicy.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPolicy 1:\n- Rule: 100 -> 200\n- Rule: 101 -> 201\n\nPolicy 2:\n- Rule: 100 -> 300\n- Rule: 101 -> 301\n\nHowever this is not allowed:\n\nPolicy 3:\n- Rule: 100 -> 200\n- Rule: 100 -> 300\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Parameters\nDESCRIPTION: Defines plugin-specific configuration parameters in the PLUGINS_CONFIG dictionary\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/installation.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPLUGINS_CONFIG = {\n    'plugin_name': {\n        'foo': 'bar',\n        'buzz': 'bazz'\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: IP Address CIDR Notation Example\nDESCRIPTION: Example of IPv4 address format in CIDR notation as used in NetBox\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/ipam/ipaddress.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n192.0.2.0/24\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentry DSN in NetBox\nDESCRIPTION: Sets the Sentry data source name (DSN) for error reporting. This parameter defines where error reports will be sent. SENTRY_ENABLED must be True for this to take effect.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/error-reporting.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSENTRY_DSN = \"https://examplePublicKey@o0.ingest.sentry.io/0\"\n```\n\n----------------------------------------\n\nTITLE: Defining Constraints with Logical OR in JSON for NetBox Permissions\nDESCRIPTION: This snippet shows how to define multiple constraint objects in a list to achieve logical OR functionality. It would grant permission to VLANs with IDs between 100-199 or those with 'reserved' status.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/permissions.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"vid__gte\": 100,\n    \"vid__lt\": 200\n  },\n  {\n    \"status\": \"reserved\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring General LDAP Server Settings\nDESCRIPTION: Python code for configuring general LDAP server settings including connection URI, options, binding credentials, and certificate handling.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ldap\n\n# Server URI\nAUTH_LDAP_SERVER_URI = \"ldaps://ad.example.com\"\n\n# The following may be needed if you are binding to Active Directory.\nAUTH_LDAP_CONNECTION_OPTIONS = {\n    ldap.OPT_REFERRALS: 0\n}\n\n# Set the DN and password for the NetBox service account.\nAUTH_LDAP_BIND_DN = \"CN=NETBOXSA, OU=Service Accounts,DC=example,DC=com\"\nAUTH_LDAP_BIND_PASSWORD = \"demo\"\n\n# Include this setting if you want to ignore certificate errors. This might be needed to accept a self-signed cert.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)\nLDAP_IGNORE_CERT_ERRORS = True\n\n# Include this setting if you want to validate the LDAP server certificates against a CA certificate directory on your server\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTDIR, LDAP_CA_CERT_DIR)\nLDAP_CA_CERT_DIR = '/etc/ssl/certs'\n\n# Include this setting if you want to validate the LDAP server certificates against your own CA.\n# Note that this is a NetBox-specific setting which sets:\n#     ldap.set_option(ldap.OPT_X_TLS_CACERTFILE, LDAP_CA_CERT_FILE)\nLDAP_CA_CERT_FILE = '/path/to/example-CA.crt'\n```\n\n----------------------------------------\n\nTITLE: Setting User Query Field for Active Directory Authentication\nDESCRIPTION: Python code setting the user query field for Active Directory authentication to enable username-based login.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nAUTH_LDAP_USER_QUERY_FIELD = \"username\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Jinja2 Sandbox for Increased Security in NetBox\nDESCRIPTION: Employs a sandbox when rendering Jinja2 code for increased security in NetBox v2.11.11.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.11.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[#6921](https://github.com/netbox-community/netbox/issues/6921) - Employ a sandbox when rendering Jinja2 code for increased security\n```\n\n----------------------------------------\n\nTITLE: Collecting Static Files for Plugin\nDESCRIPTION: Collects and copies static files from the plugin to the static root directory\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/installation.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py collectstatic\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Query String for Saved Filters in NetBox\nDESCRIPTION: Shows how to use saved filters in NetBox URL queries. The first example shows a standard query string, while the second demonstrates using a saved filter name.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.4.md#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n?status=active&region_id=12&tenant=acme\n```\n\nLANGUAGE: text\nCODE:\n```\n?filter=my-custom-filter\n```\n\n----------------------------------------\n\nTITLE: Updating a Prefix (curl and JSON)\nDESCRIPTION: Example of using curl to update an existing prefix via the API. Shows how to make a PATCH request with JSON data to modify specific fields of an object.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_12\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/ipam/prefixes/18691/ \\\n--data '{\"status\": \"reserved\"}' | jq '.'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 18691,\n  \"url\": \"http://netbox/api/ipam/prefixes/18691/\",\n  \"family\": {\n    \"value\": 4,\n    \"label\": \"IPv4\"\n  },\n  \"prefix\": \"192.0.2.0/24\",\n  \"site\": {\n    \"id\": 6,\n    \"url\": \"http://netbox/api/dcim/sites/6/\",\n    \"name\": \"US-East 4\",\n    \"slug\": \"us-east-4\"\n  },\n  \"vrf\": null,\n  \"tenant\": null,\n  \"vlan\": null,\n  \"status\": {\n    \"value\": \"reserved\",\n    \"label\": \"Reserved\"\n  },\n  \"role\": null,\n  \"is_pool\": false,\n  \"description\": \"\",\n  \"tags\": [],\n  \"custom_fields\": {},\n  \"created\": \"2020-08-04\",\n  \"last_updated\": \"2020-08-04T20:14:55.709430Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing Filtered Querysets\nDESCRIPTION: Demonstrating how to slice a filtered queryset to return a specific range of objects.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.filter(status=\"active\")[:3]\n<QuerySet [<Device: TestDevice1>, <Device: TestDevice2>, <Device: TestDevice3>]>\n```\n\n----------------------------------------\n\nTITLE: Listing Common Private IP Designations in Markdown\nDESCRIPTION: This snippet enumerates common private IP address designations, including RFC 1918 addresses, RFC 6598 addresses, and IPv6 unique local addressing. It provides the network prefix and corresponding RFC for each designation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/ipam/aggregate.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* 10.0.0.0/8 (RFC 1918)\n* 100.64.0.0/10 (RFC 6598)\n* 172.16.0.0/12 (RFC 1918)\n* 192.168.0.0/16 (RFC 1918)\n* One or more /48s within fd00::/8 (IPv6 unique local addressing)\n```\n\n----------------------------------------\n\nTITLE: Adding Sentry Error Reporting to NetBox\nDESCRIPTION: Adds the sentry-sdk library to the local requirements file to enable Sentry integration for error reporting. This allows NetBox to send error reports to Sentry for analysis and troubleshooting.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_19\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo sh -c \"echo 'sentry-sdk' >> /opt/netbox/local_requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Default Permissions Configuration in NetBox\nDESCRIPTION: Default configuration for object permissions automatically applied to authenticated users. By default, allows all users to manage their own API tokens regardless of database-defined permissions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/security.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n{\n    'users.view_token': ({'user': '$user'},),\n    'users.add_token': ({'user': '$user'},),\n    'users.change_token': ({'user': '$user'},),\n    'users.delete_token': ({'user': '$user'},),\n}\n```\n\n----------------------------------------\n\nTITLE: NetBox IP Address JSON Response Structure\nDESCRIPTION: Example JSON response when retrieving an IP address object from NetBox's API. Shows the complete object structure including nested relationships such as the assigned interface and device.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 2954,\n  \"url\": \"http://netbox/api/ipam/ip-addresses/2954/\",\n  \"family\": {\n    \"value\": 4,\n    \"label\": \"IPv4\"\n  },\n  \"address\": \"192.168.0.42/26\",\n  \"vrf\": null,\n  \"tenant\": null,\n  \"status\": {\n    \"value\": \"active\",\n    \"label\": \"Active\"\n  },\n  \"role\": null,\n  \"assigned_object_type\": \"dcim.interface\",\n  \"assigned_object_id\": 114771,\n  \"assigned_object\": {\n    \"id\": 114771,\n    \"url\": \"http://netbox/api/dcim/interfaces/114771/\",\n    \"device\": {\n      \"id\": 2230,\n      \"url\": \"http://netbox/api/dcim/devices/2230/\",\n      \"name\": \"router1\",\n      \"display_name\": \"router1\"\n    },\n    \"name\": \"et-0/1/2\",\n    \"cable\": null,\n    \"connection_status\": null\n  },\n  \"nat_inside\": null,\n  \"nat_outside\": null,\n  \"dns_name\": \"\",\n  \"description\": \"Example IP address\",\n  \"tags\": [],\n  \"custom_fields\": {},\n  \"created\": \"2020-08-04\",\n  \"last_updated\": \"2020-08-04T14:12:39.666885Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Fieldset Definitions\nDESCRIPTION: Updates form fieldset definitions to use the new FieldSet class with optional name parameter.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\nfrom netbox.forms import NetBoxModelForm\n\nclass CircuitForm(NetBoxModelForm):\n    ...\n    fieldsets = (\n        (_('Circuit'), ('cid', 'type', 'status', 'description', 'tags')),\n        (_('Service Parameters'), ('install_date', 'termination_date', 'commit_rate')),\n        (_('Tenancy'), ('tenant_group', 'tenant')),\n    )\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\nfrom netbox.forms import NetBoxModelForm\nfrom utilities.forms.rendering import FieldSet\n\nclass CircuitForm(NetBoxModelForm):\n    ...\n    fieldsets = (\n        FieldSet('cid', 'type', 'status', 'description', 'tags', name=_('Circuit')),\n        FieldSet('install_date', 'termination_date', 'commit_rate', name=_('Service Parameters')),\n        FieldSet('tenant_group', 'tenant', name=_('Tenancy')),\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxies in NetBox (Python)\nDESCRIPTION: Sets up HTTP proxies for outbound requests from NetBox, such as webhook requests. Proxies are specified by schema (HTTP and HTTPS) using a dictionary.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/system.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nHTTP_PROXIES = {\n    'http': 'http://10.10.1.10:3128',\n    'https': 'http://10.10.1.10:1080',\n}\n```\n\n----------------------------------------\n\nTITLE: Using User Token in NetBox Permission Constraints\nDESCRIPTION: This snippet demonstrates how to use the special $user token in permission constraints to reference the current user at evaluation time. This example would restrict users to only editing journal entries they created.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/permissions.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_by\": \"$user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up NetBox systemd Service Files\nDESCRIPTION: Commands to copy the NetBox systemd service files to the system directory and reload the systemd daemon. This sets up systemd to manage both the Gunicorn WSGI server and NetBox's background worker process.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4a-gunicorn.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp -v /opt/netbox/contrib/*.service /etc/systemd/system/\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL Query Parameters in NetBox\nDESCRIPTION: Example showing how multiple filter parameters can be combined in a URL query string to filter devices by status, type and region.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/search.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n?status=planned&device_type_id=78&region_id=12\n```\n\n----------------------------------------\n\nTITLE: IP Address Assignment Response JSON in NetBox API\nDESCRIPTION: Example JSON response after creating an IP address and assigning it to a device interface. Shows how the assigned object is represented in the response with a nested structure containing device information.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 56296,\n    \"url\": \"http://netbox/api/ipam/ip-addresses/56296/\",\n    \"assigned_object_type\": \"dcim.interface\",\n    \"assigned_object_id\": 69000,\n    \"assigned_object\": {\n        \"id\": 69000,\n        \"url\": \"http://netbox/api/dcim/interfaces/69023/\",\n        \"device\": {\n            \"id\": 2174,\n            \"url\": \"http://netbox/api/dcim/devices/2174/\",\n            \"name\": \"device105\",\n            \"display_name\": \"device105\"\n        },\n        \"name\": \"ge-0/0/0\",\n        \"cable\": null,\n        \"connection_status\": null\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Event Type in NetBox Plugin\nDESCRIPTION: Example of registering a custom event type using the EventType class. The code demonstrates creating and registering a 'ticket_opened' event with success kind and localized text display.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/event-types.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\nfrom netbox.events import EventType, EVENT_TYPE_KIND_SUCCESS\n\nEventType(\n    name='ticket_opened',\n    text=_('Ticket opened'),\n    kind=EVENT_TYPE_KIND_SUCCESS\n).register()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Link Template in NetBox\nDESCRIPTION: Example of a templatized custom link URL that references an external system. This template uses Jinja2 syntax to include the name of the current object being viewed.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/customization.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nhttp://server.local/vms/?name={{ object.name }}\n```\n\n----------------------------------------\n\nTITLE: Running NetBox Tests with Database Reuse\nDESCRIPTION: This command runs the NetBox test suite while reusing the existing test database. This approach reduces test execution time by avoiding database rebuilding between runs, but may cause errors if model fields have been modified.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py test --keepdb\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prefix Details in Default Format (JSON)\nDESCRIPTION: Example of the default (complete) format response when retrieving a prefix object via the API. Shows all available fields and nested objects.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 13980,\n    \"url\": \"http://netbox/api/ipam/prefixes/13980/\",\n    \"family\": {\n        \"value\": 4,\n        \"label\": \"IPv4\"\n    },\n    \"prefix\": \"192.0.2.0/24\",\n    \"site\": {\n        \"id\": 3,\n        \"url\": \"http://netbox/api/dcim/sites/17/\",\n        \"name\": \"Site 23A\",\n        \"slug\": \"site-23a\"\n    },\n    \"vrf\": null,\n    \"tenant\": null,\n    \"vlan\": null,\n    \"status\": {\n        \"value\": \"container\",\n        \"label\": \"Container\"\n    },\n    \"role\": {\n        \"id\": 17,\n        \"url\": \"http://netbox/api/ipam/roles/17/\",\n        \"name\": \"Staging\",\n        \"slug\": \"staging\"\n    },\n    \"is_pool\": false,\n    \"description\": \"Example prefix\",\n    \"tags\": [],\n    \"custom_fields\": {},\n    \"created\": \"2018-12-10\",\n    \"last_updated\": \"2019-03-01T20:02:46.173540Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a NetBox Table Instance in Python\nDESCRIPTION: This code shows how to configure a table instance for a specific request, applying user-specific preferences automatically.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/tables.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntable = MyModelTable(data=MyModel.objects.all())\ntable.configure(request)\n```\n\n----------------------------------------\n\nTITLE: Updating GraphQL Schema Definition\nDESCRIPTION: Converts GraphQL schema from Graphene-Django to Strawberry format using Python typing.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\nfrom netbox.graphql.fields import ObjectField, ObjectListField\nfrom utilities.graphql_optimizer import gql_query_optimizer\n\nclass CircuitsQuery(graphene.ObjectType):\n    circuit = ObjectField(CircuitType)\n    circuit_list = ObjectListField(CircuitType)\n\n    def resolve_circuit_list(root, info, **kwargs):\n        return gql_query_optimizer(models.Circuit.objects.all(), info)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport strawberry\nimport strawberry_django\n\n@strawberry.type\nclass CircuitsQuery:\n    @strawberry.field\n    def circuit(self, id: int) -> CircuitType:\n        return models.Circuit.objects.get(pk=id)\n    circuit_list: list[CircuitType] = strawberry_django.field()\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Update via REST API in NetBox\nDESCRIPTION: Example of using curl to perform a bulk update of multiple sites via the NetBox REST API. This demonstrates the new bulk update capability introduced in v2.10.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.10.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s -X PATCH \\\n-H \"Authorization: Token $TOKEN\" \\\n-H \"Content-Type: application/json\" \\\nhttp://netbox/api/dcim/sites/ \\\n--data '[{\"id\": 10, \"description\": \"Foo\"}, {\"id\": 11, \"description\": \"Bar\"}]'\n```\n\n----------------------------------------\n\nTITLE: Updating English Source Strings for NetBox Translations\nDESCRIPTION: This command updates the English .po file from which all translations are derived. It uses Django's makemessages management command, ignoring the project-static/ directory.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/translations.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py makemessages -l en -i \"project-static/*\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up systemd Services for NetBox and RQ\nDESCRIPTION: Copies systemd service files for NetBox and its background worker, then reloads the systemd daemon.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4b-uwsgi.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp -v /opt/netbox/contrib/*.service /etc/systemd/system/\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Configuring Exempt View Permissions in NetBox\nDESCRIPTION: Example configuration for exempting specific models from view permission enforcement. Models listed will be viewable by all users, both authenticated and anonymous.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/security.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nEXEMPT_VIEW_PERMISSIONS = [\n    'dcim.site',\n    'dcim.region',\n    'ipam.prefix',\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Negated 'In' Condition for Status in NetBox\nDESCRIPTION: This snippet demonstrates how to use the 'in' operation with negation in NetBox, checking if the 'status' is not 'planned' or 'staging'.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/conditions.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attr\": \"status.value\",\n  \"value\": [\"planned\", \"staging\"],\n  \"op\": \"in\",\n  \"negate\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Translated Strings from Transifex for NetBox\nDESCRIPTION: This command uses the Transifex CLI client to download all portable (.po) translation files, updating them locally. It requires a Transifex API token to be set as an environment variable.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/translations.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nTX_TOKEN=$TOKEN tx pull --force\n```\n\n----------------------------------------\n\nTITLE: Copying uWSGI Configuration File for NetBox\nDESCRIPTION: Copies the default uWSGI configuration file to a local version for customization.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4b-uwsgi.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp /opt/netbox/contrib/uwsgi.ini /opt/netbox/uwsgi.ini\n```\n\n----------------------------------------\n\nTITLE: Running NetBox Upgrade Script with Custom Python Path\nDESCRIPTION: Execute the upgrade script with a specific Python version (3.10+) when the default system Python version is not supported.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_21\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo PYTHON=/usr/bin/python3.10 /opt/netbox/upgrade.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Required System Packages on Ubuntu for NetBox\nDESCRIPTION: Installs all necessary system packages required by NetBox and its dependencies on Ubuntu systems. These packages include Python development tools and various libraries needed for NetBox functionality.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo apt install -y python3 python3-pip python3-venv python3-dev build-essential libxml2-dev libxslt1-dev libffi-dev libpq-dev libssl-dev zlib1g-dev\n```\n\n----------------------------------------\n\nTITLE: Defining Contact Fields in NetBox\nDESCRIPTION: Lists and describes the fields available for the Contact model in NetBox. Includes group, name, title, phone, email, address, and link fields.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/tenancy/contact.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Fields\n\n### Group\n\nThe [contact group](./contactgroup.md) to which this contact is assigned (if any).\n\n### Name\n\nThe name of the contact. This may be an individual or a team/department. (This is the only required contact detail; all others are optional.)\n\n### Title\n\nThe contact's title or role.\n\n### Phone\n\nThe contact's phone number. (Note that NetBox does _not_ enforce a particular numbering format.)\n\n### Email\n\nThe contact's email address.\n\n### Address\n\nThe contact's physical or mailing address.\n\n### Link\n\nA URL to reach the contact via some other means.\n```\n\n----------------------------------------\n\nTITLE: Customizing SSO Module Appearance in NetBox\nDESCRIPTION: Configures how the SSO authentication option appears on the login page by setting a custom display name and icon using the SOCIAL_AUTH_BACKEND_ATTRS parameter.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/overview.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nSOCIAL_AUTH_BACKEND_ATTRS = {\n    'oidc': (\"My awesome SSO\", \"login\"),\n}\n```\n\n----------------------------------------\n\nTITLE: Validating NetBox UI Code\nDESCRIPTION: Commands for validating TypeScript code, checking types, and verifying code formatting. These help maintain code quality and consistency in the NetBox UI codebase.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/web-ui.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn validate\n$ yarn validate:lint\n$ yarn validate:types\n$ yarn validate:formatting\n$ yarn validate:formatting:styles\n$ yarn validate:formatting:scripts\n```\n\n----------------------------------------\n\nTITLE: Cloning NetBox GitHub Fork for Development\nDESCRIPTION: Command to clone your personal fork of the NetBox repository from GitHub to your local machine, where $username should be replaced with your GitHub username.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\n$ git clone https://github.com/$username/netbox.git\nCloning into 'netbox'...\nremote: Enumerating objects: 85949, done.\nremote: Counting objects: 100% (4672/4672), done.\nremote: Compressing objects: 100% (1224/1224), done.\nremote: Total 85949 (delta 3538), reused 4332 (delta 3438), pack-reused 81277\nReceiving objects: 100% (85949/85949), 55.16 MiB | 44.90 MiB/s, done.\nResolving deltas: 100% (68008/68008), done.\n$ ls netbox/\nbase_requirements.txt  contrib          docs         mkdocs.yml  NOTICE     requirements.txt  upgrade.sh\nCHANGELOG.md           CONTRIBUTING.md  LICENSE.txt  netbox      README.md  scripts\n```\n\n----------------------------------------\n\nTITLE: Extending Default Status Choices in Python\nDESCRIPTION: Example of extending the default status choices for the site model by appending a new option. This preserves the existing default choices while adding a new 'FUBAR' status.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.2.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nFIELD_CHOICES = {\n    'dcim.Site.status+': (\n        ('fubar', 'FUBAR', 'red'),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Fields in NetBox Python API\nDESCRIPTION: Example of accessing and modifying custom fields on a Site object using the new custom fields implementation in NetBox v2.10. This demonstrates how custom field data is now stored directly on model instances as JSON data.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.10.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> site = Site.objects.first()\n>>> site.cf\n{'site_code': 'US-RAL01'}\n>>> site.cf['foo'] = 'ABC'\n>>> site.full_clean()\n>>> site.save()\n>>> site = Site.objects.first()\n>>> site.cf\n{'foo': 'ABC', 'site_code': 'US-RAL01'}\n```\n\n----------------------------------------\n\nTITLE: Bulk Import CSV for Device Components\nDESCRIPTION: Example CSV format for bulk importing device interfaces across multiple devices. Shows structure for importing virtual interfaces to multiple switches.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.7.md#2025-04-17_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\ndevice,name,type\nSwitch1,Vlan100,Virtual\nSwitch1,Vlan200,Virtual\nSwitch2,Vlan100,Virtual\nSwitch2,Vlan200,Virtual\n```\n\n----------------------------------------\n\nTITLE: Running Parallel NetBox Tests\nDESCRIPTION: This snippet shows how to run NetBox tests in parallel to reduce execution time. The <n> placeholder should be replaced with the desired number of parallel tests to run, typically lower than the number of available processors.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py test --parallel <n>\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations for Plugin\nDESCRIPTION: Executes database migrations for the plugin to create or modify required database schema\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/installation.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n(venv) $ cd /opt/netbox/netbox/\n(venv) $ python3 manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Exporting NetBox Database Excluding Changelog Data\nDESCRIPTION: Export the NetBox database while excluding the extras_objectchange table data, which can significantly reduce the export size for development purposes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/replicating-netbox.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npg_dump ... --exclude-table-data=extras_objectchange netbox > netbox.sql\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Fields in Markdown\nDESCRIPTION: This snippet outlines the main fields of a Notification in NetBox: User, Object, and Event Type. It describes the purpose of each field in the context of the notification system.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/notification.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Fields\n\n### User\n\nThe recipient of the notification.\n\n### Object\n\nThe object to which the notification relates.\n\n### Event Type\n\nThe type of event indicated by the notification.\n```\n\n----------------------------------------\n\nTITLE: Representing URL Query Parameters as JSON in NetBox Saved Filters\nDESCRIPTION: This snippet demonstrates how to convert URL query parameters into a JSON format for use in NetBox's saved filters. It shows the equivalent JSON representation of a URL query string with multiple parameters and values.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/savedfilter.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tag\": [\"alpha\", \"bravo\"],\n  \"status\": \"active\",\n  \"region_id\": 51\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting NetBox Service After Configuration Changes\nDESCRIPTION: Command to restart the NetBox system service after modifying the configuration.py file to apply the changes. This uses systemctl to restart the NetBox service.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sudo systemctl restart netbox\n```\n\n----------------------------------------\n\nTITLE: Creating a Virtual Environment for NetBox Plugin Development\nDESCRIPTION: This shell command creates a Python virtual environment for NetBox plugin development. It isolates the plugin's dependencies from system-wide packages.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/index.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m venv ~/.virtualenvs/my_plugin\n```\n\n----------------------------------------\n\nTITLE: Example REST API GET Request\nDESCRIPTION: Example of using the new dynamic fields feature in REST API requests to specify which fields to include in the response.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-4.0.md#2025-04-17_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /api/dcim/sites/?fields=name,status,region,tenant\n```\n\n----------------------------------------\n\nTITLE: Regional Config Context Example\nDESCRIPTION: Configuration context example showing NTP and syslog server definitions for an entire region with a weight of 1000.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/context-data.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ntp-servers\": [\n        \"172.16.10.22\",\n        \"172.16.10.33\"\n    ],\n    \"syslog-servers\": [\n        \"172.16.9.100\",\n        \"172.16.9.101\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding django-auth-ldap to local_requirements.txt\nDESCRIPTION: Command to add the django-auth-ldap package to local_requirements.txt to ensure it is reinstalled during future rebuilds of the virtual environment.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo sh -c \"echo 'django-auth-ldap' >> /opt/netbox/local_requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: URL Pattern Registration in Python\nDESCRIPTION: Example showing how to register a URL pattern for a view in Django. Maps the view to a specific URL path with a named reference.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/views.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('random/', views.RandomAnimalView.as_view(), name='random_animal'),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Django Authentication Backend for NetBox\nDESCRIPTION: Example of the default authentication backend path used for external user authentication in NetBox. This can be a single string or an iterable for multiple backends.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/remote-authentication.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n'netbox.authentication.RemoteUserBackend'\n```\n\n----------------------------------------\n\nTITLE: Starting and Enabling NetBox Services\nDESCRIPTION: Starts the NetBox and NetBox-RQ services and enables them to start at boot time.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4b-uwsgi.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now netbox netbox-rq\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Webhook Context Variables\nDESCRIPTION: Table defining the context variables available for webhook templates in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/webhook.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable     | Description                                        |\n|--------------|-------------------------------------------------|\n| `event`      | The event type (`create`, `update`, or `delete`)   |\n| `timestamp`  | The time at which the event occured                |\n| `model`      | The type of object impacted                        |\n| `username`   | The name of the user associated with the change    |\n| `request_id` | The unique request ID                              |\n| `data`       | A complete serialized representation of the object |\n| `snapshots`  | Pre- and post-change snapshots of the object       |\n```\n\n----------------------------------------\n\nTITLE: Visualizing VRF, Prefix, IP Address, and VLAN Dependencies in NetBox with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram showing the relationships between VRFs, prefixes, IP addresses, VLANs, and related objects in NetBox. It illustrates how these IPAM components are interconnected and their dependencies.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/getting-started/planning.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\nflowchart TD\n    VLANGroup --> VLAN\n    Role --> VLAN & IPRange & Prefix\n    RIR --> Aggregate\n    RouteTarget --> VRF\n    Aggregate & VRF --> Prefix\n    VRF --> IPRange & IPAddress\n    Prefix --> VLAN & IPRange & IPAddress\n\nclick Aggregate \"../../models/ipam/aggregate/\"\nclick IPAddress \"../../models/ipam/ipaddress/\"\nclick IPRange \"../../models/ipam/iprange/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick RIR \"../../models/ipam/rir/\"\nclick Role \"../../models/ipam/role/\"\nclick VLAN \"../../models/ipam/vlan/\"\nclick VLANGroup \"../../models/ipam/vlangroup/\"\nclick VRF \"../../models/ipam/vrf/\"\n```\n```\n\n----------------------------------------\n\nTITLE: Visualizing Configuration Rendering Process with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates how ConfigContext and ConfigTemplate contribute to the rendered configuration in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/configuration-rendering.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    ConfigContext & ConfigTemplate --> Config{{Rendered configuration}}\n\nclick ConfigContext \"../../models/extras/configcontext/\"\nclick ConfigTemplate \"../../models/extras/configtemplate/\"\n```\n\n----------------------------------------\n\nTITLE: Designating Points of Contact for Sites in NetBox\nDESCRIPTION: This tip explains how to add additional contact details for sites using the points of contact feature in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/dcim/site.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n!!! tip\n    You can also designate [points of contact](../../features/contacts.md) for each site to provide additional contact details.\n```\n\n----------------------------------------\n\nTITLE: Structuring Plugin API Directory Layout\nDESCRIPTION: Recommended directory structure for organizing API-related files in a NetBox plugin project.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/rest-api.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nproject-name/\n  - plugin_name/\n    - api/\n      - __init__.py\n      - serializers.py\n      - urls.py\n      - views.py\n    ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Link in HTML\nDESCRIPTION: Example of how a custom link is rendered as an HTML anchor tag. This demonstrates the result of a custom link definition for a device named Router4.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-links.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://nms.example.com/nodes/?name=Router4\">View NMS</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Amazon S3 Support to NetBox\nDESCRIPTION: Adds the boto3 library to the local requirements file to enable Amazon S3 integration as a remote data source. This allows NetBox to connect to and use S3 buckets for storage or data.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_18\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo sh -c \"echo 'boto3' >> /opt/netbox/local_requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Field Documentation for NetBox Inventory Items\nDESCRIPTION: Documentation of inventory item fields including device, parent, name, label, status, role, manufacturer, part ID, serial number, and asset tag fields. The content provides details about each field's purpose and functionality within the NetBox system.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/dcim/inventoryitem.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Device\n\nThe device in which the inventory item is installed.\n\n### Parent\n\nThe parent inventory item to which this item is assigned (optional).\n\n### Name\n\nThe inventory item's name. If the inventory item is assigned to a parent item, its name must be unique among its siblings (all items belonging to the same parent item).\n\n### Label\n\nAn alternative physical label identifying the inventory item.\n\n### Status\n\n!!! info \"This field was introduced in NetBox v4.2.\"\n\nThe inventory item's operational status.\n\n### Role\n\nThe functional [role](./inventoryitemrole.md) assigned to this inventory item.\n\n### Manufacturer\n\nThe [manufacturer](./manufacturer.md) that produced the item.\n\n### Part ID\n\nThe part identification or model number assigned by the manufacturer.\n\n### Serial Number\n\nThe serial number assigned by the manufacturer.\n\n### Asset Tag\n\nA unique, locally-administered label used to identify hardware resources.\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment\nDESCRIPTION: Activate the Python virtual environment created during the upgrade process.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_22\n\nLANGUAGE: no-highlight\nCODE:\n```\nsource /opt/netbox/venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Counting Objects in a Queryset\nDESCRIPTION: Using the count() method to get the number of objects in a queryset instead of retrieving all objects.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.count()\n1274\n```\n\n----------------------------------------\n\nTITLE: Enabling Systemd Timer for NetBox Housekeeping\nDESCRIPTION: These commands reload the systemd configuration and enable the NetBox housekeeping timer to start automatically at boot time. This ensures the housekeeping tasks run regularly without manual intervention.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/housekeeping.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl daemon-reload\nsudo systemctl enable --now netbox-housekeeping.timer\n```\n\n----------------------------------------\n\nTITLE: Displaying Ignore Rules Examples in Markdown\nDESCRIPTION: A markdown table showing examples of ignore rules for file synchronization, including rule patterns and their descriptions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/core/datasource.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Rule           | Description                              |\n|----------------|------------------------------------------|\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| `README`       | Ignore any files named `README`          |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| `*.txt`        | Ignore any files with a `.txt` extension |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| `data???.json` | Ignore e.g. `data123.json`               |\n```\n\n----------------------------------------\n\nTITLE: Specifying Fields for Cluster Types in NetBox\nDESCRIPTION: This snippet defines the fields associated with cluster types in NetBox. It includes the 'Name' field for a unique human-friendly identifier and the 'Slug' field for a URL-friendly identifier that can be used for filtering.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/virtualization/clustertype.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Fields\n\n### Name\n\nA unique human-friendly name.\n\n### Slug\n\nA unique URL-friendly identifier. (This value can be used for filtering.)\n```\n\n----------------------------------------\n\nTITLE: Converting GraphQL Types from Graphene to Strawberry in Python\nDESCRIPTION: Shows the migration of a Circuit type definition from Graphene to Strawberry syntax. The new implementation uses Strawberry's type decorator with model mapping and adds explicit field definitions for foreign key relationships.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport graphene\n\nclass CircuitType(NetBoxObjectType, ContactsMixin):\n    class Meta:\n        model = models.Circuit\n        fields = '__all__'\n        filterset_class = filtersets.CircuitFilterSet\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nimport strawberry\nimport strawberry_django\n\n@strawberry_django.type(\n    models.CircuitType,\n    fields='__all__',\n    filters=CircuitTypeFilter\n)\nclass CircuitTypeType(OrganizationalObjectType):\n    color: str\n\n    @strawberry_django.field\n    def circuits(self) -> list[Annotated[\"CircuitType\", strawberry.lazy('circuits.graphql.types')]]:\n        return self.circuits.all()\n```\n\n----------------------------------------\n\nTITLE: Accessing PostgreSQL Shell\nDESCRIPTION: Command to access PostgreSQL shell as postgres user.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres psql\n```\n\n----------------------------------------\n\nTITLE: Starting the Django Development Server for NetBox\nDESCRIPTION: Command to start Django's lightweight development server for NetBox, which provides an auto-updating HTTP server for testing changes during development.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\n$ ./manage.py runserver\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\nAugust 18, 2022 - 15:17:52\nDjango version 4.0.7, using settings 'netbox.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Pre-Commit for NetBox\nDESCRIPTION: Commands to install the pre-commit and ruff packages, and set up pre-commit hooks for automated code validation when committing changes to the NetBox repository.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\npython -m pip install ruff pre-commit\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Visualizing IPSec and IKE Policy Relationships in NetBox\nDESCRIPTION: Mermaid flowchart showing the hierarchical relationship between IPSec/IKE components in NetBox. The diagram illustrates how IKE Proposals combine into IKE Policies, IPSec Proposals into IPSec Policies, and how both policies feed into IPSec Profiles that are applied to tunnels.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/vpn-tunnels.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph IKEProposals[Proposals]\n    IKEProposal1[IKEProposal]\n    IKEProposal2[IKEProposal]\n    end\n    subgraph IPSecProposals[Proposals]\n    IPSecProposal1[IPSecProposal]\n    IPSecProposal2[IPSecProposal]\n    end\n    IKEProposals --> IKEPolicy\n    IPSecProposals --> IPSecPolicy\n    IKEPolicy & IPSecPolicy--> IPSecProfile\n    IPSecProfile --> Tunnel\n\nclick IKEProposal1 \"../../models/vpn/ikeproposal/\"\nclick IKEProposal2 \"../../models/vpn/ikeproposal/\"\nclick IKEPolicy \"../../models/vpn/ikepolicy/\"\nclick IPSecProposal1 \"../../models/vpn/ipsecproposal/\"\nclick IPSecProposal2 \"../../models/vpn/ipsecproposal/\"\nclick IPSecPolicy \"../../models/vpn/ipsecpolicy/\"\nclick IPSecProfile \"../../models/vpn/ipsecprofile/\"\nclick Tunnel \"../../models/vpn/tunnel/\"\n```\n\n----------------------------------------\n\nTITLE: Copying Gunicorn Configuration\nDESCRIPTION: Copies Gunicorn configuration file from old installation to new one.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp /opt/netbox-$OLDVER/gunicorn.py /opt/netbox/\n```\n\n----------------------------------------\n\nTITLE: Configuring Gunicorn Header Map for Remote Authentication\nDESCRIPTION: A warning note about configuring Gunicorn's header_map setting for preserving authentication headers when using remote authentication with Gunicorn v22.0 or later.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.7.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n!!! warning\n    If remote authentication is in use with Gunicorn v22.0 or later, it may be necessary to configure Gunicorn's [`header_map`](https://docs.gunicorn.org/en/stable/settings.html#header-map) setting to preserve authentication headers.\n```\n\n----------------------------------------\n\nTITLE: Adding a GenericForeignKey index to a Django model\nDESCRIPTION: When adding a GenericForeignKey field to a model, this snippet shows how to add an index for the concrete fields (object_type and object_id) in the model's Meta class to optimize database performance.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/extending-models.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Meta:\n    indexes = (\n        models.Index(fields=('object_type', 'object_id')),\n    )\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Connection for NetBox\nDESCRIPTION: Command to verify Redis service is running correctly by sending a ping request. This test should return 'PONG' if Redis is functioning properly.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/2-redis.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nredis-cli ping\n```\n\n----------------------------------------\n\nTITLE: IKE Authentication Methods Table\nDESCRIPTION: Table showing the available authentication methods for IKE proposals\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/vpn/ikeproposal.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           |\n|----------------|\n| Pre-shared key |\n| Certificate    |\n| RSA signature  |\n| DSA signature  |\n```\n\n----------------------------------------\n\nTITLE: Defining Virtual Circuit Termination Fields in Markdown\nDESCRIPTION: This snippet outlines the fields of the Virtual Circuit Termination model in NetBox. It includes the Virtual Circuit and Interface fields, which link to other models, and the Role field with its possible values.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/circuits/virtualcircuittermination.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Fields\n\n### Virtual Circuit\n\nThe [virtual circuit](./virtualcircuit.md) to which the interface is connected.\n\n### Interface\n\nThe [interface](../dcim/interface.md) connected to the virtual circuit.\n\n### Role\n\nThe functional role of the termination. This depends on the virtual circuit's topology, which is typically either peer-to-peer or hub-and-spoke (multipoint). Valid choices include:\n\n* Peer\n* Hub\n* Spoke\n```\n\n----------------------------------------\n\nTITLE: Enabling Sentry Integration in NetBox Configuration (Python)\nDESCRIPTION: This snippet shows how to enable Sentry integration in NetBox's configuration.py file. It sets SENTRY_ENABLED to True and defines the SENTRY_DSN with a unique data source name for error reporting.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/error-reporting.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSENTRY_ENABLED = True\nSENTRY_DSN = \"https://examplePublicKey@o0.ingest.sentry.io/0\"\n```\n\n----------------------------------------\n\nTITLE: Restarting NetBox Services\nDESCRIPTION: This command restarts the NetBox services to apply the new configuration. It uses systemctl, indicating this is likely for a Linux system running systemd.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/google.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart netbox\n```\n\n----------------------------------------\n\nTITLE: Defining Nested JSON Structure for Condition Evaluation in NetBox\nDESCRIPTION: This snippet demonstrates how to access nested keys in a JSON structure when defining conditions in NetBox. It shows a sample JSON object and a corresponding condition that evaluates to true.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/conditions.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"a\": {\n    \"b\": {\n      \"c\": 123\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attr\": \"a.b.c\",\n  \"value\": 123\n}\n```\n\n----------------------------------------\n\nTITLE: Amending the Previous Commit in Git\nDESCRIPTION: This snippet demonstrates how to amend the most recent Git commit without changing the commit message. It stages all changes, shows the diff, and then amends the commit.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A\ngit diff --staged\ngit commit --amend --no-edit\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch in Git\nDESCRIPTION: Commands for creating a new branch based on the main branch to implement a new release, using a version-specific naming convention.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit checkout -B release-vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Settings in NetBox v3.4.9\nDESCRIPTION: Introduces new configuration parameters for CSRF cookie security, SSL redirection, and session cookie security in NetBox version 3.4.9.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.4.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#11386](https://github.com/netbox-community/netbox/issues/11386) - Introduce `CSRF_COOKIE_SECURE`, `SECURE_SSL_REDIRECT`, and `SESSION_COOKIE_SECURE` configuration parameters\n```\n\n----------------------------------------\n\nTITLE: Defining NetBox Plugin Configuration in Python\nDESCRIPTION: This snippet shows how to define plugin configuration parameters in the NetBox configuration file. Plugin configuration is specified under the PLUGINS_CONFIG dictionary in configuration.py.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/index.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPLUGINS_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Verifying PostgreSQL Connection\nDESCRIPTION: Command to verify PostgreSQL connection and authentication using configured credentials.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ psql --username netbox --password --host localhost netbox\nPassword for user netbox: \npsql (12.5 (Ubuntu 12.5-0ubuntu0.20.04.1))\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nType \"help\" for help.\n\nnetbox=> \\conninfo\nYou are connected to database \"netbox\" as user \"netbox\" on host \"localhost\" (address \"127.0.0.1\") at port \"5432\".\nSSL connection (protocol: TLSv1.3, cipher: TLS_AES_256_GCM_SHA384, bits: 256, compression: off)\nnetbox=> \\q\n```\n\n----------------------------------------\n\nTITLE: Setting Default User Preferences in Python\nDESCRIPTION: Configuration example showing how to set default user preferences in NetBox. This example sets the default pagination count to 100 items per page for new user accounts.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/default-values.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_USER_PREFERENCES = {\n    \"pagination\": {\n        \"per_page\": 100\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Properties Table - UI Editability\nDESCRIPTION: Markdown table outlining the UI editability options for custom fields in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/customfield.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Option | Description                                                                  |\n|--------|------------------------------------------------------------------------------|\n| Yes    | The field's value may be changed when editing an object (default)            |\n| No     | The field's value is displayed when editing an object but may not be altered |\n| Hidden | The field is not displayed when editing an object                            |\n```\n\n----------------------------------------\n\nTITLE: Activating the NetBox Virtual Environment\nDESCRIPTION: Command to activate the Python virtual environment created for NetBox development, which updates environment variables to use the virtual environment's Python installation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nsource ~/.venv/netbox/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Defining L2VPN Types in NetBox\nDESCRIPTION: This snippet lists the available technology choices for L2VPN types in NetBox. It includes various VPN technologies such as VPLS, VPWS, EPL, EVPL, and different EVPN variants.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/vpn/l2vpn.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* VPLS\n* VPWS\n* EPL\n* EVPL\n* EP-LAN\n* EVP-LAN\n* EP-TREE\n* EVP-TREE\n* VXLAN\n* VXLAN-EVPN\n* MPLS-EVPN\n* PBB-EVPN\n* EVPN-VPWS\n```\n\n----------------------------------------\n\nTITLE: Using NetBox Custom Template Tags\nDESCRIPTION: Demonstrates how to use custom template tags in NetBox. These tags are automatically loaded by the template backend and do not require explicit loading.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/templates.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n!!! info\n    These are loaded automatically by the template backend: You do _not_ need to include a `{% load %}` tag in your template to activate them.\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Webhook Logic in JSON\nDESCRIPTION: JSON configuration example showing how to specify conditional logic for webhook triggers based on device status values.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.1.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attr\": \"status.value\",\n  \"op\": \"in\",\n  \"value\": [\"active\", \"staged\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin in NetBox Settings\nDESCRIPTION: Adds the plugin to the PLUGINS list in the NetBox configuration file to enable it\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/installation.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPLUGINS = [\n    # ...\n    'plugin_name',\n]\n```\n\n----------------------------------------\n\nTITLE: Listing New API Endpoints in NetBox\nDESCRIPTION: This snippet lists the newly introduced API endpoints in NetBox, covering areas such as extras, virtualization, and VPN.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.7.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Introduced the following endpoints:\n    * `/api/extras/event-rules/`\n    * `/api/virtualization/virtual-disks/`\n    * `/api/vpn/ike-policies/`\n    * `/api/vpn/ike-proposals/`\n    * `/api/vpn/ipsec-policies/`\n    * `/api/vpn/ipsec-profiles/`\n    * `/api/vpn/ipsec-proposals/`\n    * `/api/vpn/tunnels/`\n    * `/api/vpn/tunnel-terminations/`\n```\n\n----------------------------------------\n\nTITLE: Custom Field Properties Table - Field Types\nDESCRIPTION: Markdown table documenting the available custom field types and their descriptions in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/customfield.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type               | Description                                                        |\n|--------------------|--------------------------------------------------------------------|\\n| Text               | Free-form text (intended for single-line use)                      |\n| Long text          | Free-form of any length; supports Markdown rendering               |\n| Integer            | A whole number (positive or negative)                              |\n| Boolean            | True or false                                                      |\n| Date               | A date in ISO 8601 format (YYYY-MM-DD)                             |\n| URL                | This will be presented as a link in the web UI                     |\n| JSON               | Arbitrary data stored in JSON format                               |\n| Selection          | A selection of one of several pre-defined custom choices           |\n| Multiple selection | A selection field which supports the assignment of multiple values |\n| Object             | A single NetBox object of the type defined by `object_type`        |\n| Multiple object    | One or more NetBox objects of the type defined by `object_type`    |\n```\n\n----------------------------------------\n\nTITLE: Rebasing from Upstream in Git\nDESCRIPTION: This snippet demonstrates how to fetch updates from the upstream branch, rebase local changes on top of the fetched updates, and then push the local commits to the remote repository.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch\ngit rebase origin/$branchname\ngit push\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin Menu Items with Buttons\nDESCRIPTION: Illustrates the creation of a plugin menu item with custom buttons, including button styling and icons.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/navigation.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.choices import ButtonColorChoices\nfrom netbox.plugins import PluginMenuButton, PluginMenuItem\n\nitem1 = PluginMenuItem(\n    link='plugins:myplugin:myview',\n    link_text='Some text',\n    buttons=(\n        PluginMenuButton('home', 'Button A', 'fa fa-info', ButtonColorChoices.BLUE),\n        PluginMenuButton('home', 'Button B', 'fa fa-warning', ButtonColorChoices.GREEN),\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration for Custom Tunnel Statuses\nDESCRIPTION: Example showing how to define additional tunnel statuses using the FIELD_CHOICES configuration parameter\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/vpn/tunnel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! tip \"Custom tunnel statuses\"\n    Additional tunnel statuses may be defined by setting `Tunnel.status` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.\n```\n\n----------------------------------------\n\nTITLE: Running Specific NetBox Tests\nDESCRIPTION: This command demonstrates how to run only specific tests in the NetBox test suite. In this example, it runs only the IPAM and DCIM view tests, which is useful for targeting failing tests or specific areas of concern.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython manage.py test dcim.tests.test_views ipam.tests.test_views\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Remote Authentication Backends in NetBox v3.4.7\nDESCRIPTION: Adds support for specifying multiple backends via the REMOTE_AUTH_BACKEND configuration parameter in NetBox version 3.4.7.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.4.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#11977](https://github.com/netbox-community/netbox/issues/11977) - Support designating multiple backends via `REMOTE_AUTH_BACKEND` config parameter\n```\n\n----------------------------------------\n\nTITLE: Context Data Table for Custom Links in Markdown\nDESCRIPTION: A markdown table listing the context variables available for use in custom link text and URL templates. It includes variables such as object, debug, request, user, and perms, along with their descriptions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/customlink.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable  | Description                                                                 |\n|-----------|-----------------------------------------------------------------------------|\n| `object`  | The NetBox object being displayed                                           |\n| `debug`   | A boolean indicating whether debugging is enabled                           |\n| `request` | The current WSGI request                                                    |\n| `user`    | The current user (if authenticated)                                         |\n| `perms`   | The [permissions](../../administration/permissions.md) assigned to the user |\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Object Field Types in NetBox v3.4.8\nDESCRIPTION: Enables custom object fields to reference a user or group in NetBox version 3.4.8.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.4.md#2025-04-17_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#10600](https://github.com/netbox-community/netbox/issues/10600) - Allow custom object fields to reference a user or group\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificate for NetBox\nDESCRIPTION: Command to generate a self-signed SSL certificate for testing purposes. Creates a public certificate (netbox.crt) and private key (netbox.key) valid for 365 days.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/5-http-server.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n-keyout /etc/ssl/private/netbox.key \\\n-out /etc/ssl/certs/netbox.crt\n```\n\n----------------------------------------\n\nTITLE: Updating Language Translations from Transifex\nDESCRIPTION: Commands to pull updated translation files from Transifex and compile them for use in the application using Django's compilemessages command.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntx pull --force\n./manage.py compilemessages\n```\n\n----------------------------------------\n\nTITLE: Enabling IP Address Search for Devices/VMs in NetBox v3.4.6\nDESCRIPTION: Adds the ability to search for devices and VMs by their primary IP address in NetBox version 3.4.6.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.4.md#2025-04-17_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#10058](https://github.com/netbox-community/netbox/issues/10058) - Enable searching for devices/VMs by primary IP address\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Status Choices in Python\nDESCRIPTION: Example of configuring custom status choices for the site model using the FIELD_CHOICES configuration parameter. This demonstrates how to add new status options with custom colors.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.2.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFIELD_CHOICES = {\n    'dcim.Site.status': (\n        ('foo', 'Foo', 'red'),\n        ('bar', 'Bar', 'green'),\n        ('baz', 'Baz', 'blue'),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Undoing the Last Commit in Git\nDESCRIPTION: This snippet shows how to undo the most recent Git commit using git reset, remove an erroneous file, and create a new commit to replace the undone one.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A\ngit commit -m \"Erroneous commit\"\ngit reset HEAD~\nrm BADFILE\ngit add -A\ngit commit -m \"Fixed commit\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Custom Link Text Based on Manufacturer with Jinja2\nDESCRIPTION: Jinja2 template code for conditionally rendering a custom link based on the device's manufacturer. This example only displays the link text for Cisco devices.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-links.md#2025-04-17_snippet_2\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if object.device_type.manufacturer.name == 'Cisco' %}View NMS{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Event Types Table in Markdown\nDESCRIPTION: A markdown table defining the various event types that can trigger an event rule in NetBox, including both system events and job-related events.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/eventrule.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           | Description                                 |\n|----------------|---------------------------------------------|\n| Object created | A new object has been created               |\n| Object updated | An existing object has been modified        |\n| Object deleted | An object has been deleted                  |\n| Job started    | A background job is initiated               |\n| Job completed  | A background job completes successfully     |\n| Job failed     | A background job fails                      |\n| Job errored    | A background job is aborted due to an error |\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for NetBox Caching\nDESCRIPTION: Configuration settings for Redis database used by NetBox for caching and webhooks. Specifies host, port, password, database numbers, timeout, and SSL settings.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nREDIS = {\n    'HOST': 'localhost',\n    'PORT': 6379,\n    'PASSWORD': '',\n    'DATABASE': 0,\n    'CACHE_DATABASE': 1,\n    'DEFAULT_TIMEOUT': 300,\n    'SSL': False,\n}\n```\n\n----------------------------------------\n\nTITLE: Note on L2VPN Termination Limitations\nDESCRIPTION: This note explains that certain L2VPN types (VPWS, EPL, EP-LAN, EP-TREE) are limited to two terminations. This is important for network administrators to consider when configuring these specific L2VPN types.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/vpn/l2vpn.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n!!! note\n    Designating the type as VPWS, EPL, EP-LAN, EP-TREE will limit the L2VPN instance to two terminations.\n```\n\n----------------------------------------\n\nTITLE: Listing API Model Changes in NetBox\nDESCRIPTION: This snippet details changes to various NetBox API models, including additions, removals, and modifications of fields across different modules such as circuits, core, extras, dcim, tenancy, and virtualization.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.7.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* circuits.CircuitType\n    * Added the optional `color` choice field\n* core.Job\n    * Added the read-only `error` character field\n* extras.Webhook\n    * Removed the following fields (these have been moved to the new `EventRule` model):\n        * `content_types`\n        * `type_create`\n        * `type_update`\n        * `type_delete`\n        * `type_job_start`\n        * `type_job_end`\n        * `enabled`\n        * `conditions`\n    * Add the optional `description` field\n* dcim.DeviceType\n    * Added the `exclude_from_utilization` boolean field\n* extras.CustomField\n    * Removed the `ui_visibility` field\n    * Added the `ui_visible` and `ui_editable` choice fields\n* tenancy.ContactAssignment\n    * Added support for custom fields\n* virtualization.VirtualDisk\n    * Added the read-only `virtual_disk_count` integer field\n* virtualization.VirtualMachine\n    * Added the `/render-config` endpoint\n```\n\n----------------------------------------\n\nTITLE: Installing System Packages for LDAP on Ubuntu\nDESCRIPTION: Commands to install the required system packages for LDAP integration on Ubuntu Linux.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo apt install -y libldap2-dev libsasl2-dev libssl-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Plugin Menu Items\nDESCRIPTION: Shows how to add menu items to NetBox's shared Plugins menu instead of creating a custom menu.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/navigation.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmenu_items = (item1, item2, item3)\n```\n\n----------------------------------------\n\nTITLE: Enabling User Data Setting via Remote Authentication Headers in NetBox v3.4.9\nDESCRIPTION: Allows setting user name and email values through remote authentication headers in NetBox version 3.4.9.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.4.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* [#12226](https://github.com/netbox-community/netbox/issues/12226) - Enable setting user name & email values via remote authenticate headers\n```\n\n----------------------------------------\n\nTITLE: Building Device Type Definition Schema\nDESCRIPTION: Command to generate and update the device type definition validation schema file that will be saved to the contrib directory.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py buildschema --write\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example - Fetching Circuit Data\nDESCRIPTION: Example GraphQL query demonstrating how to fetch circuit data including provider name and termination details.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.0.md#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  circuit_list {\n    cid\n    provider {\n      name\n    }\n    termination_a {\n      id\n    }\n    termination_z {\n      id\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning a Git Repository\nDESCRIPTION: Command for cloning a remote Git repository to local workstation, creating a new directory with the repo name.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/$org-name/$repo-name\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Custom Link Text with Jinja2\nDESCRIPTION: Jinja2 template code for conditionally rendering a custom link based on the device's status. This example only displays the link text for devices with an 'active' status.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-links.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% if object.status == 'active' %}View NMS{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring ObjectVar with Query Parameters\nDESCRIPTION: Demonstrates how to create an ObjectVar with filtered query parameters and reference other form field values using the $ prefix.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndevice = ObjectVar(\n    model=Device,\n    query_params={\n        'status': 'active'\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Device Type Fields in NetBox\nDESCRIPTION: This snippet lists and describes the various fields used to define a device type in NetBox. It includes attributes like manufacturer, model, dimensions, and specific characteristics.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/dcim/devicetype.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Fields\n\n### Manufacturer\n\nThe [manufacturer](./manufacturer.md) which produces this type of device.\n\n### Model\n\nThe model number assigned to this device type by its manufacturer. Must be unique to the manufacturer.\n\n### Slug\n\nA unique URL-friendly representation of the model identifier. (This value can be used for filtering.)\n\n### Default Platform\n\nIf defined, devices instantiated from this type will automatically inherit the selected platform. (This assignment can be changed after the device has been created.)\n\n### Part Number\n\nAn alternative part number to uniquely identify the device type.\n\n### Height\n\nThe height of the physical device in rack units. (For device types that are not rack-mountable, this should be `0`.)\n\n### Is Full Depth\n\nIf selected, this device type is considered to occupy both the front and rear faces of a rack, regardless of which face it is assigned.\n\n### Parent/Child Status\n\nIndicates whether this is a parent type (capable of housing child devices), a child type (which must be installed within a device bay), or neither.\n\n### Airflow\n\nThe default direction in which airflow circulates within the device chassis. This may be configured differently for instantiated devices (e.g. because of different fan modules).\n\n### Weight\n\nThe numeric weight of the device, including a unit designation (e.g. 10 kilograms or 20 pounds).\n\n### Front & Rear Images\n\nUsers can upload illustrations of the device's front and rear panels. If present, these will be used to render the device in [rack](./rack.md) elevation diagrams.\n```\n\n----------------------------------------\n\nTITLE: Displaying Circuit Status Options in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the default circuit status options available in NetBox. It includes statuses such as Planned, Provisioning, Active, Offline, Deprovisioning, and Decommissioned.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/circuits/circuit.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           |\n|----------------|\n| Planned        |\n| Provisioning   |\n| Active         |\n| Offline        |\n| Deprovisioning |\n| Decommissioned |\n```\n\n----------------------------------------\n\nTITLE: Permitting /32 IPv4 and /128 IPv6 Prefixes in NetBox\nDESCRIPTION: Allows the use of /32 IPv4 and /128 IPv6 prefixes in NetBox v2.11.7.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.11.md#2025-04-17_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n[#6455](https://github.com/netbox-community/netbox/issues/6455) - Permit /32 IPv4 and /128 IPv6 prefixes\n```\n\n----------------------------------------\n\nTITLE: Using pgettext for Contextual Translation in Python\nDESCRIPTION: Example of using pgettext() to provide context for translation, which helps translators understand the intended meaning of potentially ambiguous terms.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/internationalization.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Context, string\npgettext(\"month name\", \"May\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tenancy Relationships with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the relationships between TenantGroup, Tenant, and various NetBox objects. It shows how TenantGroups can be nested and how Tenants are associated with different NetBox entities.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/tenancy.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    TenantGroup --> TenantGroup & Tenant\n    Tenant --> Site & Device & Prefix & Circuit & ...\n\nclick Tenant \"../../models/tenancy/tenant/\"\nclick TenantGroup \"../../models/tenancy/tenantgroup/\"\n```\n\n----------------------------------------\n\nTITLE: Specifying psycopg Package with Extensions for NetBox\nDESCRIPTION: Defines the PostgreSQL database adapter for Python (psycopg) with additional C and connection pooling extensions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/base_requirements.txt#2025-04-17_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npsycopg[c,pool]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Tenancy Dependencies in NetBox with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram showing the relationships between tenant groups, tenants, and other NetBox objects. It illustrates how tenant groups can be nested and how tenants relate to various other entities like sites, devices, prefixes, and VLANs.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/getting-started/planning.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\nflowchart TD\n    TenantGroup --> TenantGroup & Tenant\n    Tenant --> Site & Device & Prefix & VLAN & ...\n\nclick Device \"../../models/dcim/device/\"\nclick Prefix \"../../models/ipam/prefix/\"\nclick Site \"../../models/dcim/site/\"\nclick Tenant \"../../models/tenancy/tenant/\"\nclick TenantGroup \"../../models/tenancy/tenantgroup/\"\nclick VLAN \"../../models/ipam/vlan/\"\n```\n```\n\n----------------------------------------\n\nTITLE: Pushing to Remote Repository\nDESCRIPTION: Command to push local branch to remote repository and set upstream tracking.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin $branchname\n```\n\n----------------------------------------\n\nTITLE: Properly Formatting Strings for Translation in Python\nDESCRIPTION: Demonstrates the correct approach for string formatting in translatable text. Instead of f-strings (which don't support translation), use the format() method for variable replacement.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/internationalization.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Translation will not work\nf\"There are {count} objects\"\n\n# Do this instead\n\"There are {count} objects\".format(count=count)\n```\n\n----------------------------------------\n\nTITLE: Running Upgrade Script\nDESCRIPTION: Commands to run the upgrade script, including alternative syntax for specifying Python version.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo ./upgrade.sh\nsudo PYTHON=/usr/bin/python3.10 ./upgrade.sh\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on CentOS\nDESCRIPTION: Commands to install and initialize PostgreSQL database on CentOS systems using yum package manager.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y postgresql-server\nsudo postgresql-setup --initdb\n```\n\n----------------------------------------\n\nTITLE: Visualizing Cluster and Virtual Machine Relationships with Mermaid\nDESCRIPTION: This Mermaid flowchart demonstrates the relationships between various entities in NetBox's virtualization system. It shows how Clusters, ClusterGroups, ClusterTypes, VirtualMachines, and other related models are interconnected. The chart also includes clickable links to the respective model documentation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/getting-started/planning.md#2025-04-17_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    ClusterGroup & ClusterType --> Cluster\n    Cluster --> VirtualMachine\n    Site --> Cluster & VirtualMachine\n    Device & Platform --> VirtualMachine\n    VirtualMachine --> VMInterface\n\nclick Cluster \"../../models/virtualization/cluster/\"\nclick ClusterGroup \"../../models/virtualization/clustergroup/\"\nclick ClusterType \"../../models/virtualization/clustertype/\"\nclick Device \"../../models/dcim/device/\"\nclick Platform \"../../models/dcim/platform/\"\nclick VirtualMachine \"../../models/virtualization/virtualmachine/\"\nclick VMInterface \"../../models/virtualization/vminterface/\"\n```\n\n----------------------------------------\n\nTITLE: Finding Latest Git Release\nDESCRIPTION: Git commands to fetch tags and determine the latest release version.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo git fetch --tags\ngit describe --tags $(git rev-list --tags --max-count=1)\n```\n\n----------------------------------------\n\nTITLE: Config Context Data Export in Jinja2\nDESCRIPTION: Template demonstrating how to access config context data using the get_config_context() function within an export template.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/export-templates.md#2025-04-17_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\n{% for server in queryset %}\n{% set data = server.get_config_context() %}\n{{ data.syslog }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Detailing Model Changes in Markdown\nDESCRIPTION: This snippet documents changes to various models in the NetBox project. It includes field renames, additions, and modifications across multiple models such as CircuitTermination, Cable, ConsolePort, and others.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.1.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* circuits.CircuitTermination\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.Cable\n    * Added `tenant` field\n* dcim.ConsolePort\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.ConsoleServerPort\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.Device\n    * The `display` field now includes the device's asset tag, if set\n    * Added `airflow` field\n* dcim.DeviceType\n    * Added `airflow` field \n* dcim.FrontPort\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.Interface\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n    * Added `bridge` field\n    * Added `rf_channel` field\n    * Added `rf_channel_frequency` field\n    * Added `rf_channel_width` field\n    * Added `rf_role` field\n    * Added `tx_power` field\n    * Added `wireless_link` field\n    * Added `wwn` field\n    * Added `count_fhrp_groups` read-only field\n* dcim.Location\n    * Added `tenant` field\n* dcim.PowerFeed\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.PowerOutlet\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.PowerPort\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.RearPort\n    * `cable_peer` has been renamed to `link_peer`\n    * `cable_peer_type` has been renamed to `link_peer_type`\n* dcim.Site\n    * Added `asns` relationship to ipam.ASN\n* extras.ImageAttachment\n    * Added the `last_updated` field\n* extras.Webhook\n    * Added the `conditions` field\n* virtualization.VMInterface\n    * Added `bridge` field\n    * Added `count_fhrp_groups` read-only field\n```\n\n----------------------------------------\n\nTITLE: Cleaning Django Migration History\nDESCRIPTION: SQL commands to view and remove plugin migration records from Django's migration history.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/removal.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nnetbox=> SELECT * FROM django_migrations WHERE app='pluginname';\n id  |    app     |          name          |            applied\n-----+------------+------------------------+-------------------------------\n 492 | pluginname | 0001_initial           | 2023-12-21 11:59:59.325995+00\n 493 | pluginname | 0002_add_foo           | 2023-12-21 11:59:59.330026+00\nnetbox=> DELETE FROM django_migrations WHERE app='pluginname';\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Pull Requests\nDESCRIPTION: GitHub CLI command to list open pull requests in repository.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngh pr list\n```\n\n----------------------------------------\n\nTITLE: Provisioning REST API Token using cURL\nDESCRIPTION: Command to provision a new REST API token by sending a POST request with username and password credentials to NetBox's new token provisioning endpoint.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.0.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json; indent=4\" \\\nhttps://netbox/api/users/tokens/provision/ \\\n--data '{\n    \"username\": \"hankhill\",\n    \"password: \"I<3C3H8\",\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing NetBox Plugin in Development Mode\nDESCRIPTION: This pip command installs the NetBox plugin in development mode, creating symbolic links to the plugin's development directory for easier development and testing.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/index.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Upgrading NetBox UI Dependencies with Yarn\nDESCRIPTION: Command to upgrade a specific package (in this case, bootstrap) to its latest version using Yarn. This updates the package.json file automatically.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/web-ui.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn upgrade bootstrap --latest\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured markdown documenting NetBox release notes, enhancements, and bug fixes across multiple versions. Contains links to GitHub issues and details about various feature improvements and fixes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.2.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Enhancements\n\n* [#8374](https://github.com/netbox-community/netbox/issues/8374) - Display device type and asset tag if name is blank but asset tag is populated\n* [#8922](https://github.com/netbox-community/netbox/issues/8922) - Add service list to IP address view\n[...additional content...]\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Power Outlet Templates\nDESCRIPTION: Markdown heading and reference link for power outlet template documentation in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/dcim/poweroutlettemplate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Power Outlet Templates\n\nA template for a power outlet that will be created on all instantiations of the parent device type. See the [power outlet](./poweroutlet.md) documentation for more detail.\n```\n\n----------------------------------------\n\nTITLE: Compiling NetBox Translation Messages\nDESCRIPTION: This command compiles the updated .po files into .mo files that can be used by the application. It uses Django's compilemessages management command.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/translations.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py compilemessages\n```\n\n----------------------------------------\n\nTITLE: Class Path Configuration Example\nDESCRIPTION: Shows how to configure custom validators using Python dotted path references.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-validation.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nCUSTOM_VALIDATORS = {\n    'dcim.site': (\n        'my_validators.Validator1',\n        'my_validators.Validator2',\n    ),\n    'dcim.device': (\n        'my_validators.Validator3',\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Timeout in NetBox\nDESCRIPTION: Configuration setting to control the cache timeout in seconds for NetBox's caching functionality.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n## Cache timeout (in seconds)\nCACHE_TIMEOUT = 900\n```\n\n----------------------------------------\n\nTITLE: Migrating ContentType to ObjectType\nDESCRIPTION: Updates the model field definition from ContentType to ObjectType for improved clarity and consistency with NetBox core.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncontent_types = models.ManyToManyField(\n    to='contenttypes.ContentType',\n    related_name='event_rules'\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nobject_types = models.ManyToManyField(\n    to='core.ObjectType',\n    related_name='event_rules'\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Remote File Storage Support to NetBox\nDESCRIPTION: Adds the django-storages library to the local requirements file to enable remote file storage in NetBox. This allows using remote filesystems instead of the local filesystem for storing uploaded files.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_17\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo sh -c \"echo 'django-storages' >> /opt/netbox/local_requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Renaming Git Branch\nDESCRIPTION: Command to rename the current branch using the -m (modify) argument.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -m $newname\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single IP Address (curl and JSON)\nDESCRIPTION: Example of using curl to retrieve details of a single IP address from the API. Demonstrates how to make a GET request to a detail endpoint.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\ncurl -s -X GET http://netbox/api/ipam/ip-addresses/5618/ | jq '.'\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 5618,\n  \"address\": \"192.0.2.1/24\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Objects from a Queryset\nDESCRIPTION: Using the exclude() method to return the inverse of a filtered queryset.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> Device.objects.count()\n4479\n>>> Device.objects.filter(status=\"active\").count()\n4133\n>>> Device.objects.exclude(status=\"active\").count()\n346\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Choices in NetBox - Append Mode\nDESCRIPTION: This example shows how to add additional choices to existing field options by appending a plus sign to the field identifier. This preserves the default choices while adding custom options to the specified field.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/data-validation.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nFIELD_CHOICES = {\n    'dcim.Site.status+': (\n        ...\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling New Commits\nDESCRIPTION: Command to update local branch with upstream commits.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting NetBox Services\nDESCRIPTION: Command to enable and start the NetBox and NetBox-RQ services to run at system boot. This initializes the Gunicorn WSGI service and the background worker process.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4a-gunicorn.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now netbox netbox-rq\n```\n\n----------------------------------------\n\nTITLE: Direct Class Reference Configuration\nDESCRIPTION: Example of configuring custom validators using direct class references.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-validation.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom my_validators import Validator1, Validator2, Validator3\n\nCUSTOM_VALIDATORS = {\n    'dcim.site': (\n        Validator1(),\n        Validator2(),\n    ),\n    'dcim.device': (\n        Validator3(),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Search Indexes in NetBox Plugin\nDESCRIPTION: Shows how to register custom search indexes with NetBox by defining an indexes list at the module level.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/search.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nindexes = [MyModelIndex]\n```\n\n----------------------------------------\n\nTITLE: Updating Class Definition from Report to Script in Python\nDESCRIPTION: Change the parent class from 'Report' to 'Script' and update the import statement accordingly.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/reports.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.reports import Report\n\nclass MyReport(Report):\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.scripts import Script\n\nclass MyReport(Script):\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Equality Condition in NetBox\nDESCRIPTION: This snippet shows how to define a simple equality condition in NetBox, checking if the 'name' attribute equals 'foo'.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/conditions.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attr\": \"name\",\n  \"value\": \"foo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Git Commit\nDESCRIPTION: Command to create a new commit with a message that references an issue number.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Fixes #123: Fixed the thing that was broken\"\n```\n\n----------------------------------------\n\nTITLE: Complex Filtering Across Multiple Relations\nDESCRIPTION: Example of filtering objects based on fields spanning multiple related models.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> IPAddress.objects.filter(interface__device__site__region__slug=\"north-america\")\n```\n\n----------------------------------------\n\nTITLE: Formatting NetBox UI Code\nDESCRIPTION: Commands for automatically formatting TypeScript and Sass (SCSS) source files. These ensure consistent code style across the NetBox UI codebase.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/web-ui.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn format\n$ yarn format:styles\n$ yarn format:scripts\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for NetBox Development\nDESCRIPTION: Command to create a new git branch for development work, where $branchname should follow the naming convention of issue number followed by a brief description of the work.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\ngit checkout -B $branchname\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branches\nDESCRIPTION: Command to switch to a different branch in the repository.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout $branchname\n```\n\n----------------------------------------\n\nTITLE: Adding NetBox to Python Path in Virtual Environment\nDESCRIPTION: This shell command adds NetBox to the Python path of the virtual environment by creating a .pth file. It allows the virtual environment to access NetBox modules.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/index.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\necho /opt/netbox/netbox > $VENV/lib/python3.10/site-packages/netbox.pth\n```\n\n----------------------------------------\n\nTITLE: Installing Git on CentOS for NetBox Repository Clone\nDESCRIPTION: Installs the Git version control system on CentOS, which is required to download NetBox from its GitHub repository if Git is not already installed on the system.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo yum install -y git\n```\n\n----------------------------------------\n\nTITLE: Updating Menu Button Definition\nDESCRIPTION: Removes color specification from plugin menu buttons to align with updated design.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPluginMenuButton(\n    link='myplugin:foo_add',\n    title='Add a new Foo',\n    icon_class='mdi mdi-plus-thick',\n    color=ButtonColorChoices.GREEN\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nPluginMenuButton(\n    link='myplugin:foo_add',\n    title='Add a new Foo',\n    icon_class='mdi mdi-plus-thick'\n)\n```\n\n----------------------------------------\n\nTITLE: Warning Message in Markdown\nDESCRIPTION: A markdown danger callout warning users not to use version 4.1.9 due to a regression issue.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-4.1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! danger \"Do Not Use\"\n    This release contains a regression which breaks change logging. Please use release v4.1.10 instead.\n```\n\n----------------------------------------\n\nTITLE: Defining Negated Equality Condition in NetBox\nDESCRIPTION: This snippet demonstrates how to negate a condition in NetBox, checking if the 'name' attribute does not equal 'foo'.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/conditions.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attr\": \"name\",\n  \"value\": \"foo\",\n  \"negate\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific NetBox Release Tag\nDESCRIPTION: Switches the Git repository to a specific NetBox release version. Replace 'X.Y.Z' with the actual version number you want to install. This allows precise control over which version is deployed.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_8\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo git checkout vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Link URL with Jinja2 Template in NetBox\nDESCRIPTION: Example of creating a custom link URL using Jinja2 template code in NetBox, linking to an external NMS using the object's name.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_5\n\nLANGUAGE: jinja2\nCODE:\n```\nhttps://nms.example.com/nodes/?name={{ obj.name }}\n```\n\n----------------------------------------\n\nTITLE: Dropping Plugin Database Tables\nDESCRIPTION: SQL commands to remove database tables created by the plugin.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/removal.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nnetbox=> DROP TABLE pluginname_foo;\nDROP TABLE\nnetbox=> DROP TABLE pluginname_bar;\nDROP TABLE\n```\n\n----------------------------------------\n\nTITLE: Defining Job Status Values in Markdown\nDESCRIPTION: A markdown table listing the possible status values for a job in NetBox, along with their descriptions. This table helps users understand the different states a job can be in during its lifecycle.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/core/job.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Value | Description |\n|-------|-------------|\n| Pending | Awaiting execution by an RQ worker process |\n| Scheduled | Scheduled for a future date/time |\n| Running | Currently executing |\n| Completed | Successfully completed |\n| Failed | The job did not complete successfully |\n| Errored | An unexpected error was encountered during execution |\n```\n\n----------------------------------------\n\nTITLE: Showing Pending Changes\nDESCRIPTION: Command to display summary of created, modified, and deleted files.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Copying Media Directory\nDESCRIPTION: Copies the media directory from old NetBox installation to new one, preserving permissions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp -pr /opt/netbox-$OLDVER/netbox/media/ /opt/netbox/netbox/\n```\n\n----------------------------------------\n\nTITLE: Creating a Cron Job Link for NetBox Housekeeping\nDESCRIPTION: This command creates a symbolic link to the NetBox housekeeping script in the cron.daily directory, enabling automatic daily execution of the housekeeping tasks.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/housekeeping.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n```\n\n----------------------------------------\n\nTITLE: API Endpoints Addition\nDESCRIPTION: New REST API endpoints for user and group management\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.9.md#2025-04-17_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n* `/api/users/groups/`\n* `/api/users/users/`\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Markdown\nDESCRIPTION: Shows the syntax for embedding images in Markdown, including alternate text and optional title.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_6\n\nLANGUAGE: no-highlight\nCODE:\n```\n![Alternate text](/path/to/image.png \"Image title text\")\n```\n\n----------------------------------------\n\nTITLE: Setting ALLOWED_HOSTS to Wildcard in NetBox\nDESCRIPTION: Configures the ALLOWED_HOSTS parameter with a wildcard to allow all host values. This is useful for testing or when you're not yet sure what the domain name or IP address will be.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = ['*']\n```\n\n----------------------------------------\n\nTITLE: Visualizing Site, Rack, and Device Dependencies in NetBox with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the relationships between regions, site groups, sites, locations, racks, devices, and related objects in NetBox. It shows the hierarchical nature of these objects and how they are interconnected.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/getting-started/planning.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\nflowchart TD\n    Region --> Region\n    SiteGroup --> SiteGroup\n    DeviceRole & Platform --> Device\n    Region & SiteGroup --> Site\n    Site --> Location & Device\n    Location --> Location\n    Location --> Rack & Device\n    Rack --> Device\n    Manufacturer --> DeviceType & ModuleType\n    DeviceType  --> Device\n    Device & ModuleType ---> Module\n    Device & Module --> Interface\n\nclick Device \"../../models/dcim/device/\"\nclick DeviceRole \"../../models/dcim/devicerole/\"\nclick DeviceType \"../../models/dcim/devicetype/\"\nclick Interface \"../../models/dcim/interface/\"\nclick Location \"../../models/dcim/location/\"\nclick Manufacturer \"../../models/dcim/manufacturer/\"\nclick Module \"../../models/dcim/module/\"\nclick ModuleType \"../../models/dcim/moduletype/\"\nclick Platform \"../../models/dcim/platform/\"\nclick Rack \"../../models/dcim/rack/\"\nclick RackRole \"../../models/dcim/rackrole/\"\nclick Region \"../../models/dcim/region/\"\nclick Site \"../../models/dcim/site/\"\nclick SiteGroup \"../../models/dcim/sitegroup/\"\n```\n```\n\n----------------------------------------\n\nTITLE: Creating NetBox Superuser\nDESCRIPTION: Create an administrative superuser account using Django's management command.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_23\n\nLANGUAGE: no-highlight\nCODE:\n```\ncd /opt/netbox/netbox\npython3 manage.py createsuperuser\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Authentication Configuration for CentOS\nDESCRIPTION: Configuration settings for pg_hba.conf to enable MD5 authentication for PostgreSQL on CentOS.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhost    all             all             127.0.0.1/32            md5\nhost    all             all             ::1/128                 md5\n```\n\n----------------------------------------\n\nTITLE: Installing Git on Ubuntu for NetBox Repository Clone\nDESCRIPTION: Installs the Git version control system on Ubuntu, which is required to download NetBox from its GitHub repository if Git is not already installed on the system.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo apt install -y git\n```\n\n----------------------------------------\n\nTITLE: Creating Blockquotes in Markdown\nDESCRIPTION: Demonstrates how to create blockquotes in Markdown, including preserving line breaks.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_9\n\nLANGUAGE: no-highlight\nCODE:\n```\n> I think that I shall never see\n> a graph more lovely than a tree.\n> A tree whose crucial property\n> is loop-free connectivity.\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\n> I think that I shall never see⋅⋅\n> a graph more lovely than a tree.⋅⋅\n> A tree whose crucial property⋅⋅\n> is loop-free connectivity.\n```\n\n----------------------------------------\n\nTITLE: Reviewing Staged Changes\nDESCRIPTION: Command to review all staged changes before commit.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit diff --staged\n```\n\n----------------------------------------\n\nTITLE: GitHub Issue References Markdown\nDESCRIPTION: Markdown formatted links to GitHub issues referenced in the changelog.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.0.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#7751](https://github.com/netbox-community/netbox/issues/7751)\n[#7885](https://github.com/netbox-community/netbox/issues/7885)\n[#7892](https://github.com/netbox-community/netbox/issues/7892)\n```\n\n----------------------------------------\n\nTITLE: Bundling NetBox UI Source Files\nDESCRIPTION: Commands for bundling TypeScript and Sass (SCSS) source files into browser-compatible JavaScript and CSS. These commands transpile, bundle, and minify the source files.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/web-ui.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn bundle\n$ yarn bundle:styles\n$ yarn bundle:scripts\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Authentication Backends\nDESCRIPTION: NetBox provides two built-in authentication backends that can be used individually or together. This represents potential values for the REMOTE_AUTH_BACKEND setting.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/remote-authentication.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n* `netbox.authentication.RemoteUserBackend`\n* `netbox.authentication.LDAPBackend`\n```\n\n----------------------------------------\n\nTITLE: Using Saved Filter in NetBox URL\nDESCRIPTION: Example showing how a saved filter can be used to simplify complex query parameters into a single named filter parameter.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/search.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n?filter=my-custom-filter\n```\n\n----------------------------------------\n\nTITLE: Visualizing Virtualization Object Relationships with Mermaid Flowchart\nDESCRIPTION: This Mermaid flowchart illustrates the relationships between various virtualization objects in NetBox, including ClusterGroup, ClusterType, Cluster, VirtualMachine, Platform, and VMInterface. It also provides clickable links to the respective model documentation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/virtualization.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    ClusterGroup & ClusterType --> Cluster\n    Cluster --> VirtualMachine\n    Platform --> VirtualMachine\n    VirtualMachine --> VMInterface\n\nclick Cluster \"../../models/virtualization/cluster/\"\nclick ClusterGroup \"../../models/virtualization/clustergroup/\"\nclick ClusterType \"../../models/virtualization/clustertype/\"\nclick Platform \"../../models/dcim/platform/\"\nclick VirtualMachine \"../../models/virtualization/virtualmachine/\"\nclick VMInterface \"../../models/virtualization/vminterface/\"\n```\n\n----------------------------------------\n\nTITLE: Installing NetBox Plugin Package using pip\nDESCRIPTION: Activates the virtual environment and installs the plugin package using pip within NetBox's environment\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/installation.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ source /opt/netbox/venv/bin/activate\n(venv) $ pip install <package>\n```\n\n----------------------------------------\n\nTITLE: Installing Required System Packages on CentOS for NetBox\nDESCRIPTION: Installs all necessary system packages required by NetBox and its dependencies on CentOS systems. These packages include development tools and libraries needed for NetBox functionality.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo yum install -y gcc libxml2-devel libxslt-devel libffi-devel libpq-devel openssl-devel redhat-rpm-config\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from NetBox GraphQL API\nDESCRIPTION: This example shows the JSON response format returned by NetBox's GraphQL API when querying circuit data. The response structure includes the requested fields (circuit ID and provider name) in a nested JSON format.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/graphql-api.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"circuits\": [\n      {\n        \"cid\": \"1002840283\",\n        \"provider\": {\n          \"name\": \"CenturyLink\"\n        }\n      },\n      {\n        \"cid\": \"1002840457\",\n        \"provider\": {\n          \"name\": \"CenturyLink\"\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Packages for NetBox\nDESCRIPTION: Command to install all the required Python packages for NetBox development from the requirements.txt file using pip within the activated virtual environment.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\npython -m pip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling CSV Import via Uploaded File in NetBox\nDESCRIPTION: Adds support for CSV import via uploaded file in NetBox v2.11.10.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.11.md#2025-04-17_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[#6560](https://github.com/netbox-community/netbox/issues/6560) - Enable CSV import via uploaded file\n```\n\n----------------------------------------\n\nTITLE: Implementing ChoiceVar in NetBox Scripts\nDESCRIPTION: Example of creating a ChoiceVar variable with predefined direction choices. Shows how to define choice tuples with values and labels.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nCHOICES = (\n    ('n', 'North'),\n    ('s', 'South'),\n    ('e', 'East'),\n    ('w', 'West')\n)\n\ndirection = ChoiceVar(choices=CHOICES)\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Source URL Examples in Markdown\nDESCRIPTION: A markdown table showing example URLs for different types of data sources, including local directory, git repository, and Amazon S3 bucket.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/core/datasource.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Type      | Example URL                                        |\n|-----------|----------------------------------------------------|\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Local     | file:///path/to/my/data/                           |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| git       | https://github.com/my-organization/my-repo         |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n| Amazon S3 | https://s3.us-east-2.amazonaws.com/my-bucket-name/ |\n```\n\n----------------------------------------\n\nTITLE: Restarting NetBox Services\nDESCRIPTION: Restarts the WSGI service and RQ workers to load the newly installed plugin\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/installation.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# sudo systemctl restart netbox netbox-rq\n```\n\n----------------------------------------\n\nTITLE: Checking NetBox Service Status\nDESCRIPTION: Command to verify that the NetBox WSGI service is running properly. This displays the current status of the Gunicorn workers and related process information.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4a-gunicorn.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl status netbox.service\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Types in NetBox\nDESCRIPTION: This snippet outlines the concept of cluster types in NetBox. It explains that a cluster type represents the technology or mechanism used to form a cluster, and provides examples of potential cluster type names.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/virtualization/clustertype.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Cluster Types\n\nA cluster type represents a technology or mechanism by which a [cluster](./cluster.md) is formed. For example, you might create a cluster type named \"VMware vSphere\" for a locally hosted cluster or \"DigitalOcean NYC3\" for one hosted by a cloud provider.\n```\n\n----------------------------------------\n\nTITLE: Listing Plugin Database Tables\nDESCRIPTION: SQL command to list all database tables associated with a specific plugin using PostgreSQL shell.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/removal.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nnetbox=> \\dt pluginname_*\n                   List of relations\n                   List of relations\n Schema |       Name     | Type  | Owner\n--------+----------------+-------+--------\n public | pluginname_foo | table | netbox\n public | pluginname_bar | table | netbox\n(2 rows)\n```\n\n----------------------------------------\n\nTITLE: Running Interface Renaturalization Command in Python\nDESCRIPTION: Management command to recalculate the natural ordering of interfaces in NetBox. This should be run after upgrading to v2.7.7 if any interfaces appear unordered.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.7.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npython3 manage.py renaturalize dcim.Interface\n```\n\n----------------------------------------\n\nTITLE: Defining Wireless Link Parameters in Markdown\nDESCRIPTION: Documentation of wireless link configuration parameters including interfaces, status options, SSID, distance measurements, authentication types, and security ciphers.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/wireless/wirelesslink.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Wireless Links\n\nA wireless link represents a connection between exactly two wireless interfaces. Unlike a [wireless LAN](./wirelesslan.md), which permit an arbitrary number of client associations, wireless links are used to model point-to-point wireless connections.\n\n## Fields\n\n### Interfaces\n\nSelect two interfaces: One for side A and one for side B. (Both must be wireless interfaces.)\n\n### Status\n\nThe operational status of the link. Options include:\n\n* Connected\n* Planned\n* Decommissioning\n\n### SSID\n\nThe service set identifier (SSID) for the wireless link (optional).\n\n### Distance\n\nThe distance between the link's two endpoints, including a unit designation (e.g. 100 meters or 25 feet).\n\n### Authentication Type\n\nThe type of wireless authentication in use. Options include:\n\n* Open\n* WEP\n* WPA Personal (PSK)\n* WPA Enterprise\n\n### Authentication Cipher\n\nThe security cipher used to apply wireless authentication. Options include:\n\n* Auto (automatic)\n* TKIP\n* AES\n\n### Pre-Shared Key\n\nThe security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.\n```\n\n----------------------------------------\n\nTITLE: Displaying Virtual Circuit Statuses in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the default statuses available for virtual circuits in NetBox. It includes statuses such as Planned, Provisioning, Active, Offline, Deprovisioning, and Decommissioned.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/circuits/virtualcircuit.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name           |\n|----------------|\n| Planned        |\n| Provisioning   |\n| Active         |\n| Offline        |\n| Deprovisioning |\n| Decommissioned |\n```\n\n----------------------------------------\n\nTITLE: Deleting a Single Object\nDESCRIPTION: Demonstrating how to delete a single object using the delete() method and showing the returned deletion summary.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> vlan\n<VLAN: 123 (BetterName)>\n>>> vlan.delete()\n(1, {'ipam.VLAN': 1})\n```\n\n----------------------------------------\n\nTITLE: Verifying Redis Version for NetBox Compatibility\nDESCRIPTION: Command to check the installed Redis server version. NetBox requires Redis version 4.0 or higher for proper functionality.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/2-redis.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nredis-server -v\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Service and Timer Links for NetBox Housekeeping\nDESCRIPTION: These commands create symbolic links to the NetBox housekeeping service and timer files in the systemd directory, enabling systemd to manage the housekeeping task scheduling.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/housekeeping.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /opt/netbox/contrib/netbox-housekeeping.service /etc/systemd/system/netbox-housekeeping.service\nsudo ln -s /opt/netbox/contrib/netbox-housekeeping.timer /etc/systemd/system/netbox-housekeeping.timer\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Automatic Component Renaming in NetBox Module Types\nDESCRIPTION: This example shows how to use the {module} placeholder in interface template names for automatic renaming based on the module bay position. When a module is installed in bay 3, interfaces will be named accordingly.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/dcim/moduletype.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGi{module}/0/[1-48]\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Webhook Event Types\nDESCRIPTION: Table showing the different types of events that can trigger a webhook in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/webhook.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name       | Description                          |\n|------------|--------------------------------------|\n| Creations  | A new object has been created        |\n| Updates    | An existing object has been modified |\n| Deletions  | An object has been deleted           |\n| Job starts | A job for an object starts           |\n| Job ends   | A job for an object terminates       |\n```\n\n----------------------------------------\n\nTITLE: Bundling UI Dependencies with Yarn\nDESCRIPTION: Example output when running the yarn bundle command to prepare UI assets for distribution, showing successful bundling of various CSS and JavaScript files.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn bundle\nyarn run v1.22.19\n$ node bundle.js\n✅ Bundled source file 'styles/external.scss' to 'netbox-external.css'\n✅ Bundled source file 'styles/netbox.scss' to 'netbox.css'\n✅ Bundled source file 'styles/svg/rack_elevation.scss' to 'rack_elevation.css'\n✅ Bundled source file 'styles/svg/cable_trace.scss' to 'cable_trace.css'\n✅ Bundled source file 'index.ts' to 'netbox.js'\n✅ Copied graphiql files\nDone in 1.00s.\n```\n\n----------------------------------------\n\nTITLE: Documenting Moved API Endpoints in NetBox\nDESCRIPTION: This snippet shows the relocation of certain API endpoints, specifically for L2VPNs and L2VPN terminations, from the IPAM module to the VPN module.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.7.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* The following endpoints have been moved:\n    * `/api/ipam/l2vpns/` -> `/api/vpn/l2vpns/`\n    * `/api/ipam/l2vpn-terminations/` -> `/api/vpn/l2vpn-terminations/`\n```\n\n----------------------------------------\n\nTITLE: Uninstalling NetBox Plugin Package\nDESCRIPTION: Commands to activate the virtual environment and uninstall the plugin package using pip.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/removal.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ source /opt/netbox/venv/bin/activate\n(venv) $ pip uninstall <package>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Housekeeping Cron Job\nDESCRIPTION: Create a symbolic link to schedule the housekeeping script as a daily cron job.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n```\n\n----------------------------------------\n\nTITLE: Restarting NetBox Services via System Control\nDESCRIPTION: This command is used to restart the NetBox services after updating the configuration. It ensures that the new Okta SSO settings take effect.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/okta.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart netbox\n```\n\n----------------------------------------\n\nTITLE: Exempting Objects from View Permissions in NetBox\nDESCRIPTION: Configuration setting to exempt certain object types from view permission enforcement in NetBox, allowing any user to view them.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nEXEMPT_VIEW_PERMISSIONS = [\n    'dcim.site',\n    'ipam.prefix',\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Sentry Tags in NetBox\nDESCRIPTION: Configures custom tags to be applied to Sentry error reports. These tags can be used to categorize and filter errors in the Sentry dashboard. Tag names beginning with 'netbox.' should be avoided as they are reserved.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/error-reporting.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nSENTRY_TAGS = {\n    \"custom.foo\": \"123\",\n    \"custom.bar\": \"abc\",\n}\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Management Instructions\nDESCRIPTION: Instructions for managing non-core Python package dependencies by listing them in local_requirements.txt file to ensure proper reinstallation during upgrades.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.7.md#2025-04-17_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nlocal_requirements.txt\nnapalm\ndjango-storages\ndjango-auth-ldap\n```\n\n----------------------------------------\n\nTITLE: Filtering API Requests by Multiple Tags in NetBox\nDESCRIPTION: Example showing how to filter NetBox objects by multiple tags simultaneously, retrieving only objects that have all specified tags assigned.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/customization.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nGET /api/dcim/devices/?tag=monitored&tag=deprecated\n```\n\n----------------------------------------\n\nTITLE: Setting Matching Top and Bottom Banners in NetBox\nDESCRIPTION: Configuration example for making the top and bottom UI banners display the same content. This shows how to define the top banner and then reuse that value for the bottom banner.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/miscellaneous.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nBANNER_TOP = 'Your banner text'\nBANNER_BOTTOM = BANNER_TOP\n```\n\n----------------------------------------\n\nTITLE: Checking NetBox Installation Method\nDESCRIPTION: Command to determine how NetBox was originally installed by checking directory structures.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls -ld /opt/netbox /opt/netbox/.git\n```\n\n----------------------------------------\n\nTITLE: Restoring NetBox Media Directory\nDESCRIPTION: Extract the archived media files into a new NetBox installation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/replicating-netbox.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntar -xf netbox_media.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Listing Git Branches\nDESCRIPTION: Command to list all local and remote branches using the -a flag.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit branch -a\n```\n\n----------------------------------------\n\nTITLE: Disabling View Permissions Globally in NetBox\nDESCRIPTION: Configuration setting to disable view permissions for all objects in NetBox, restoring pre-v2.6 behavior.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nEXEMPT_VIEW_PERMISSIONS = ['*']\n```\n\n----------------------------------------\n\nTITLE: Configuring Housekeeping Cron Job\nDESCRIPTION: Command to set up daily housekeeping cron job for NetBox maintenance tasks.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s /opt/netbox/contrib/netbox-housekeeping.sh /etc/cron.daily/netbox-housekeeping\n```\n\n----------------------------------------\n\nTITLE: JSON Permission Constraints Example\nDESCRIPTION: Example of using the $user token in permission constraints to reference the current user in request context.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.3.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_by\": \"$user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Table Card Layout\nDESCRIPTION: Updates HTML structure for tables within cards to remove unnecessary card-body wrapper.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n    <div class=\"card-body\">\n        <table class=\"table table-hover attr-table\">\n            ...\n        </table>\n    </div>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n    <table class=\"table table-hover attr-table\">\n        ...\n    </table>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using NetBox Custom Template Filters\nDESCRIPTION: Explains how to use custom template filters in NetBox. Like the tags, these filters are automatically loaded by the template backend and do not require explicit loading.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/templates.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n!!! info\n    These are loaded automatically by the template backend: You do _not_ need to include a `{% load %}` tag in your template to activate them.\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Version\nDESCRIPTION: Command to verify PostgreSQL version installation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npsql -V\n```\n\n----------------------------------------\n\nTITLE: Merging Git Branches\nDESCRIPTION: Command to merge a source branch into the current destination branch.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit merge $sourcebranch\n```\n\n----------------------------------------\n\nTITLE: Updating CORS_ORIGIN_WHITELIST Configuration in NetBox\nDESCRIPTION: The CORS_ORIGIN_WHITELIST configuration parameter now requires each origin to include a URI scheme. This change was introduced in django-cors-headers 3.0.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nIf you have the `CORS_ORIGIN_WHITELIST` configuration parameter defined, note that each origin must now incldue a URI\nscheme. This change was introuced in django-cors-headers 3.0.\n```\n\n----------------------------------------\n\nTITLE: Filtering NetBox VLANs by VLAN Group ID using Negation\nDESCRIPTION: This snippet shows how to use the negation lookup expression on a foreign key field in the NetBox API. It returns all VLANs that don't have a VLAN Group ID of 3203.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/filtering.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGET /api/ipam/vlans/?group_id__n=3203\n```\n\n----------------------------------------\n\nTITLE: Device and Component Relationships Flowchart in Mermaid\nDESCRIPTION: A flowchart showing the relationships between different NetBox components including Manufacturer, Device Types, Devices, Modules, and their various ports and interfaces.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/devices-cabling.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    Manufacturer -.-> Platform & DeviceType & ModuleType\n    Manufacturer --> DeviceType & ModuleType\n    DeviceRole & Platform & DeviceType --> Device\n    Device & ModuleType ---> Module\n    Device & Module --> Interface & ConsolePort & PowerPort & ...\n\nclick Device \"../../models/dcim/device/\"\nclick DeviceRole \"../../models/dcim/devicerole/\"\nclick DeviceType \"../../models/dcim/devicetype/\"\nclick Manufacturer \"../../models/dcim/manufacturer/\"\nclick Module \"../../models/dcim/module/\"\nclick ModuleType \"../../models/dcim/moduletype/\"\nclick Platform \"../../models/dcim/platform/\"\n```\n\n----------------------------------------\n\nTITLE: Listing New API Endpoints in Markdown\nDESCRIPTION: This snippet lists new API endpoints added for ASNs, FHRP groups, contacts, and wireless networks. It provides the full URL paths for each new endpoint.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.1.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Added the following endpoints for ASNs:\n    * `/api/ipam/asn/`\n* Added the following endpoints for FHRP groups:\n    * `/api/ipam/fhrp-groups/`\n    * `/api/ipam/fhrp-group-assignments/`\n* Added the following endpoints for contacts:\n    * `/api/tenancy/contact-assignments/`\n    * `/api/tenancy/contact-groups/`\n    * `/api/tenancy/contact-roles/`\n    * `/api/tenancy/contacts/`\n* Added the following endpoints for wireless networks:\n    * `/api/wireless/wireless-lans/`\n    * `/api/wireless/wireless-lan-groups/`\n    * `/api/wireless/wireless-links/`\n```\n\n----------------------------------------\n\nTITLE: Custom Field Properties Table - Filter Logic\nDESCRIPTION: Markdown table showing the available filter logic options for custom fields in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/customfield.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Option   | Description                         |\n|----------|-------------------------------------|\n| Disabled | Filtering disabled                  |\n| Loose    | Match any occurrence of the value   |\n| Exact    | Match only the complete field value |\n```\n\n----------------------------------------\n\nTITLE: Running Ruff Linter for NetBox\nDESCRIPTION: Command to manually invoke the Ruff linter for checking code style in the NetBox codebase. Ruff is used to enforce code style and is automatically run by pre-commit hooks.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/style-guide.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nruff check netbox/\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL Service on CentOS\nDESCRIPTION: Command to enable and start PostgreSQL service on CentOS.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/1-postgresql.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now postgresql\n```\n\n----------------------------------------\n\nTITLE: Creating Hyperlinks in Markdown\nDESCRIPTION: Demonstrates how to create hyperlinks in Markdown, including adding optional title text.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_5\n\nLANGUAGE: no-highlight\nCODE:\n```\nHere's an [example](https://www.example.com) of a link.\n\nAnd here's [another link](https://www.example.com \"Click me!\"), this time with a title.\n```\n\n----------------------------------------\n\nTITLE: Exempting All Models from View Permissions in NetBox\nDESCRIPTION: Configuration to exempt all models from view permission enforcement using a wildcard. Note that certain sensitive models will still require explicit exemption.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/security.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nEXEMPT_VIEW_PERMISSIONS = ['*']\n```\n\n----------------------------------------\n\nTITLE: Configuring Administrator Email Notifications in NetBox\nDESCRIPTION: Configuration for email notifications about critical errors. This parameter accepts a list of tuples containing administrator names and email addresses to be notified.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/miscellaneous.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nADMINS = [\n    ['Hank Hill', 'hhill@example.com'],\n    ['Dale Gribble', 'dgribble@example.com'],\n]\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Diagram for Circuit Components using Mermaid\nDESCRIPTION: A flowchart showing the relationships between different circuit-related entities in NetBox, including ASN, Provider, ProviderNetwork, ProviderAccount, CircuitType, and Circuit. It includes clickable links to model documentation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/circuits.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    ASN --> Provider\n    Provider --> ProviderNetwork & ProviderAccount & Circuit\n    ProviderAccount --> Circuit\n    CircuitType --> Circuit\n\nclick ASN \"../../models/circuits/asn/\"\nclick Circuit \"../../models/circuits/circuit/\"\nclick CircuitType \"../../models/circuits/circuittype/\"\nclick Provider \"../../models/circuits/provider/\"\nclick ProviderAccount \"../../models/circuits/provideraccount/\"\nclick ProviderNetwork \"../../models/circuits/providernetwork/\"\n```\n\n----------------------------------------\n\nTITLE: Custom Field Properties Table - UI Visibility\nDESCRIPTION: Markdown table describing the UI visibility options for custom fields in NetBox.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/customfield.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Option | Description                                                    |\n|--------|----------------------------------------------------------------|\n| Always | The field is always displayed when viewing an object (default) |\n| If set | The field is displayed only if a value has been defined        |\n| Hidden | The field is not displayed when viewing an object              |\n```\n\n----------------------------------------\n\nTITLE: Opening Firewall Port for Testing\nDESCRIPTION: Configure firewalld to allow access to the development server port on RHEL-based systems.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_26\n\nLANGUAGE: no-highlight\nCODE:\n```\nfirewall-cmd --zone=public --add-port=8000/tcp\n```\n\n----------------------------------------\n\nTITLE: Enabling NetBox Plugin in Configuration\nDESCRIPTION: This Python code snippet shows how to enable the NetBox plugin by adding it to the PLUGINS list in the NetBox configuration file.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/index.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nPLUGINS = [\n    'my_plugin',\n]\n```\n\n----------------------------------------\n\nTITLE: Adding Constrained Dependencies to Base Requirements File\nDESCRIPTION: Example showing how to add version constraints to dependencies in base_requirements.txt file, with an explanatory comment about the constraint reason.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# https://github.com/encode/django-rest-framework/issues/6053\ndjangorestframework==3.8.1\n```\n\n----------------------------------------\n\nTITLE: Adding REST API Endpoints\nDESCRIPTION: New REST API endpoints introduced for circuit groups, rack types, notifications, and subscriptions management.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-4.1.md#2025-04-17_snippet_1\n\nLANGUAGE: rest\nCODE:\n```\n\"/api/circuits/circuit-groups/\"\n\"/api/circuits/circuit-group-assignments/\"\n\"/api/dcim/rack-types/\"\n\"/api/extras/notification-groups/\"\n\"/api/extras/notifications/\"\n\"/api/extras/subscriptions/\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Wireless LAN Relationships with Mermaid Flowchart\nDESCRIPTION: A flowchart diagram showing the hierarchical relationship between WirelessLANGroup and WirelessLAN entities in NetBox. WirelessLANGroup can contain other groups and WirelessLAN instances.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/wireless.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    WirelessLANGroup --> WirelessLANGroup & WirelessLAN\n\nclick WirelessLAN \"../../models/wireless/wirelesslan/\"\nclick WirelessLANGroup \"../../models/wireless/wirelesslangroup/\"\n```\n\n----------------------------------------\n\nTITLE: Installing pyuwsgi Package for NetBox\nDESCRIPTION: Activates the Python virtual environment and installs the pyuwsgi package using pip. Also adds the package to local_requirements.txt for future rebuilds.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/4b-uwsgi.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource /opt/netbox/venv/bin/activate\npip3 install pyuwsgi\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo sh -c \"echo 'pyuwsgi' >> /opt/netbox/local_requirements.txt\"\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Fields in Markdown\nDESCRIPTION: This snippet lists and describes the fields associated with the Platform model in NetBox. It includes Name, Slug, Manufacturer, and Configuration Template fields, explaining their purpose and usage.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/dcim/platform.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Fields\n\n### Name\n\nA unique human-friendly name.\n\n### Slug\n\nA unique URL-friendly identifier. (This value can be used for filtering.)\n\n### Manufacturer\n\nIf designated, this platform will be available for use only to devices assigned to this [manufacturer](./manufacturer.md). This can be handy e.g. for limiting network operating systems to use on hardware produced by the relevant vendor. However, it should not be used when defining general-purpose software platforms.\n\n### Configuration Template\n\nThe default [configuration template](../extras/configtemplate.md) for devices assigned to this platform.\n```\n\n----------------------------------------\n\nTITLE: Warning Message for Authentication Key Storage in Markdown\nDESCRIPTION: A warning message informing users that the authentication key for FHRP groups is stored in plaintext in NetBox's database. It advises against using this field if encryption at rest is required for shared keys.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/ipam/fhrpgroup.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! warning\n    The authentication key value is stored in plaintext in NetBox's database. Do not utilize this field if you require encryption at rest for shared keys.\n```\n\n----------------------------------------\n\nTITLE: Updating Logging Method Calls in Python for NetBox Scripts\nDESCRIPTION: Modify logging method calls to match the new Script class signature, where the message is the first parameter and the object is an optional second parameter.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/reports.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nself.log_failure(\n    console_port.device,\n    f\"No console connection defined for {console_port.name}\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nself.log_failure(\n    f\"No console connection defined for {console_port.name}\",\n    obj=console_port.device,\n)\n```\n\n----------------------------------------\n\nTITLE: Pinning strawberry-graphql-django Version for NetBox\nDESCRIPTION: Sets a fixed version (0.52.0) of strawberry-graphql-django due to a suspected upstream bug, as noted in issue #18329.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/base_requirements.txt#2025-04-17_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nstrawberry-graphql-django==0.52.0\n```\n\n----------------------------------------\n\nTITLE: Setting ALLOWED_HOSTS with Wildcard in NetBox\nDESCRIPTION: This configuration uses a wildcard to allow all host values to access NetBox. This is less secure but useful when you're not yet sure what domain name or IP address the NetBox installation will use.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/required-parameters.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = ['*']\n```\n\n----------------------------------------\n\nTITLE: Adding Empty Filter Modifier for Character Fields in NetBox\nDESCRIPTION: Introduces an 'empty' filter modifier for character fields in NetBox v2.11.8.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.11.md#2025-04-17_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n[#6138](https://github.com/netbox-community/netbox/issues/6138) - Add an `empty` filter modifier for character fields\n```\n\n----------------------------------------\n\nTITLE: Defining L2VPN Termination Fields in Markdown\nDESCRIPTION: This snippet outlines the fields used in L2VPN termination. It specifies the L2VPN instance and the attachment point, which can be a VLAN, device interface, or virtual machine interface.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/vpn/l2vpntermination.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Fields\n\n### L2VPN\n\nThe [L2VPN](./l2vpn.md) instance.\n\n### VLAN or Interface\n\nThe [VLAN](../ipam/vlan.md), [device interface](../dcim/interface.md), or [virtual machine interface](../virtualization/virtualmachine.md) attached to the L2VPN.\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling Redis on CentOS for NetBox\nDESCRIPTION: Commands to install Redis on CentOS systems and enable it to start automatically on boot. This two-step process installs Redis and configures it as a system service.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/2-redis.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y redis\nsudo systemctl enable --now redis\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL API Enable/Disable in NetBox\nDESCRIPTION: This parameter controls whether the GraphQL API is enabled or disabled. Setting it to False will disable the GraphQL API.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/graphql-api.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## GRAPHQL_ENABLED\n\n!!! tip \"Dynamic Configuration Parameter\"\n\nDefault: True\n\nSetting this to False will disable the GraphQL API.\n```\n\n----------------------------------------\n\nTITLE: Documenting Model Field Additions in Markdown\nDESCRIPTION: This snippet lists the models that have had a 'tags' field added to them. It uses a markdown list to clearly present the affected models across various components of the system.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.1.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Added `tags` field to the following models:\n    * circuits.CircuitType\n    * dcim.DeviceRole\n    * dcim.Location\n    * dcim.Manufacturer\n    * dcim.Platform\n    * dcim.RackRole\n    * dcim.Region\n    * dcim.SiteGroup\n    * ipam.RIR\n    * ipam.Role\n    * ipam.VLANGroup\n    * tenancy.ContactGroup\n    * tenancy.ContactRole\n    * tenancy.TenantGroup\n    * virtualization.ClusterGroup\n    * virtualization.ClusterType\n```\n\n----------------------------------------\n\nTITLE: Checking Systemd Timer Status for NetBox Housekeeping\nDESCRIPTION: This command lists all systemd timers, allowing verification that the NetBox housekeeping timer is active and properly scheduled.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/housekeeping.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl list-timers --all\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations During Upgrade Testing\nDESCRIPTION: Django management command to apply database migrations when testing upgrade paths between versions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./manage.py migrate\n```\n\n----------------------------------------\n\nTITLE: Improving Prefix Hierarchy Rendering in NetBox\nDESCRIPTION: Enhances the rendering of prefix hierarchies in NetBox v2.11.5.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.11.md#2025-04-17_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n[#6087](https://github.com/netbox-community/netbox/issues/6087) - Improved prefix hierarchy rendering\n```\n\n----------------------------------------\n\nTITLE: Configuring CircuitGroupAssignment Priority Choices in NetBox\nDESCRIPTION: Shows how to configure additional priority choices for circuit group assignments using the FIELD_CHOICES configuration parameter. The default choices include Primary, Secondary, Tertiary, and Inactive.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/circuits/circuitgroupassignment.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Primary\n* Secondary\n* Tertiary\n* Inactive\n```\n\n----------------------------------------\n\nTITLE: Reindexing NetBox Search After Plugin Removal\nDESCRIPTION: Commands to activate the virtual environment and reindex the NetBox search engine to remove stale plugin entries.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/removal.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /opt/netbox/netbox/\n$ source /opt/netbox/venv/bin/activate\n(venv) $ python3 manage.py reindex\n```\n\n----------------------------------------\n\nTITLE: Checking for Outdated Dependencies with Yarn\nDESCRIPTION: Command to identify outdated dependencies in the NetBox UI project using Yarn. This helps in maintaining up-to-date packages.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/web-ui.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn outdated\n```\n\n----------------------------------------\n\nTITLE: Markdown Line Break Examples\nDESCRIPTION: Demonstrates how to handle line breaks in Markdown, including the default behavior and preserving line breaks.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_3\n\nLANGUAGE: no-highlight\nCODE:\n```\nThis is one line.\nAnd this is another line.\nOne more line here.\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nThis is one line.⋅⋅\nAnd this is another line.⋅⋅\nOne more line here.\n```\n\n----------------------------------------\n\nTITLE: Archiving NetBox Media Directory\nDESCRIPTION: Create a compressed archive of the NetBox media directory, which contains uploaded files such as image attachments.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/replicating-netbox.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntar -czf netbox_media.tar.gz netbox/media/\n```\n\n----------------------------------------\n\nTITLE: Starting MkDocs Documentation Server\nDESCRIPTION: Command to start the MkDocs documentation server for viewing and testing the documentation during the release process.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: NetBox Version Release Notes in Markdown\nDESCRIPTION: Markdown formatted release notes detailing enhancements and bug fixes for NetBox v2.2 versions. Includes issue references, feature additions, and bug corrections.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.2.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NetBox v2.2 Release Notes\n\n## v2.2.10 (2018-02-21)\n\n### Enhancements\n\n* [#78] - Extended topology maps to support console and power connections\n* [#1693] - Allow specifying loose or exact matching for custom field filters\n[...additional content omitted for brevity...]\n```\n\n----------------------------------------\n\nTITLE: Tunnel Termination Role Options Table in Markdown\nDESCRIPTION: Markdown table defining the available roles for tunnel terminations, including Peer, Hub and Spoke options with their functional descriptions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/vpn/tunneltermination.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name  | Description                                      |\n|-------|--------------------------------------------------|\n| Peer  | An endpoint in a point-to-point or mesh topology |\n| Hub   | A central point in a hub-and-spoke topology      |\n| Spoke | An edge point in a hub-and-spoke topology        |\n```\n\n----------------------------------------\n\nTITLE: Restarting NetBox WSGI Service\nDESCRIPTION: Command to restart the NetBox WSGI service after plugin removal.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/removal.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# sudo systemctl restart netbox\n```\n\n----------------------------------------\n\nTITLE: Markdown Text Formatting Examples\nDESCRIPTION: Shows how to format text as italic, bold, and strikethrough using Markdown syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nItalicize text with *asterisks* or _underscores_.\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nBold text with two **asterisks** or __underscores__.\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\nStrike text with two tildes. ~~Deleted text.~~\n```\n\n----------------------------------------\n\nTITLE: NetBox Configuration Changes\nDESCRIPTION: Configuration parameter compatibility update for REMOTE_AUTH_BACKEND setting\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.9.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nSupport backward compatibility for `REMOTE_AUTH_BACKEND` configuration parameter\n```\n\n----------------------------------------\n\nTITLE: Dependency Requirements Matrix in Markdown\nDESCRIPTION: Example of how to update the dependency requirements matrix in the documentation, showing supported versions of Python, PostgreSQL, and Redis for a specific NetBox version.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/release-checklist.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| NetBox Version | Python min | Python max | PostgreSQL min | Redis min | Documentation                                                                                     |\n|:--------------:|:----------:|:----------:|:--------------:|:---------:|:-------------------------------------------------------------------------------------------------:|\n|      4.2       |    3.10    |    3.12    |     **13**     |    4.0    | [Link](https://github.com/netbox-community/netbox/blob/v4.2.0/docs/installation/index.md)         |\n```\n\n----------------------------------------\n\nTITLE: NetBox API Endpoint Documentation - Markdown\nDESCRIPTION: Documentation of new and modified REST API endpoints including changes to Device, DeviceType, Platform and other models. Includes field additions, removals, and modifications across multiple NetBox components.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.6.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `/api/extras/bookmarks/`\n* `/api/extras/custom-field-choice-sets/`\n* `/api/extras/custom-fields/{id}/choices/`\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks in Markdown\nDESCRIPTION: Demonstrates how to create inline code and code blocks using Markdown syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_7\n\nLANGUAGE: no-highlight\nCODE:\n```\nParagraphs are rendered in HTML using `<p>` and `</p>` tags.\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\n```\ndef my_func(foo, bar):\n    # Do something\n    return foo * bar\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prefix Details in Brief Format (JSON)\nDESCRIPTION: Example of the brief format response when retrieving a prefix object via the API. Shows a minimal representation with only essential fields.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/integrations/rest-api.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": 13980,\n    \"url\": \"http://netbox/api/ipam/prefixes/13980/\",\n    \"family\": 4,\n    \"prefix\": \"10.40.3.0/24\"\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Markdown Headings\nDESCRIPTION: Demonstrates an alternative way to create level 1 and 2 headings using underline-style syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nHeading 1\n=========\n\nHeading 2\n---------\n```\n\n----------------------------------------\n\nTITLE: URL Path Parameter Example in Markdown\nDESCRIPTION: Demonstrates the URL path parameter format for accessing available IPs within a prefix in the NetBox API.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/api/ipam/prefixes/<pk\\/>/available-ips/\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Version\nDESCRIPTION: Git command to checkout a specific NetBox version tag.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo git checkout v4.2.0\n```\n\n----------------------------------------\n\nTITLE: Creating Unordered and Ordered Lists in Markdown\nDESCRIPTION: Shows how to create unordered and ordered lists, including nested items, using Markdown syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\n* Alpha\n* Bravo\n* Charlie\n  * Child item 1\n  * Child item 2\n* Delta\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\n1. Red\n2. Green\n3. Blue\n    1. Light blue\n    2. Dark blue\n4. Orange\n```\n\n----------------------------------------\n\nTITLE: Displaying IPv4 Hierarchy in Markdown\nDESCRIPTION: This snippet demonstrates the hierarchical nature of IP addressing using a nested list structure in Markdown. It shows the first few levels of the IPv4 hierarchy from 0.0.0.0/0 down to 192.0.0.0/2.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/ipam/aggregate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* 0.0.0.0/0\n    * 0.0.0.0/1\n        * 0.0.0.0/2\n        * 64.0.0.0/2\n    * 128.0.0.0/1\n        * 128.0.0.0/2\n        * 192.0.0.0/2\n```\n\n----------------------------------------\n\nTITLE: API Path Migration\nDESCRIPTION: Change in API endpoint path for object changes from extras to core module.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-4.1.md#2025-04-17_snippet_2\n\nLANGUAGE: rest\nCODE:\n```\n\"/api/extras/object-changes/\" -> \"/api/core/object-changes/\"\n```\n\n----------------------------------------\n\nTITLE: Checking Out GitHub Pull Request\nDESCRIPTION: GitHub CLI command to check out branch associated with pull request.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngh pr checkout $number\n```\n\n----------------------------------------\n\nTITLE: Listing Available NetBox Models\nDESCRIPTION: Using the lsmodels() function to display a list of all available NetBox models in the shell.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> lsmodels()\nDCIM:\n  ConsolePort\n  ConsolePortTemplate\n  ConsoleServerPort\n  ConsoleServerPortTemplate\n  Device\n  ...\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes Documentation\nDESCRIPTION: Structured release notes in Markdown format documenting version history, enhancements, and bug fixes for NetBox v2.6.x releases.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.6.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NetBox v2.6 Release Notes\n\n## v2.6.12 (2020-01-13)\n\n### Enhancements\n\n* [#1982](https://github.com/netbox-community/netbox/issues/1982) - Improved NAPALM method documentation in Swagger (OpenAPI)\n* [#2050](https://github.com/netbox-community/netbox/issues/2050) - Preview image attachments when hovering over the link\n[...truncated for brevity...]\n\n### Bug Fixes\n\n* [#3589](https://github.com/netbox-community/netbox/issues/3589) - Fix validation on tagged VLANs of an interface\n* [#3849](https://github.com/netbox-community/netbox/issues/3849) - Fix ordering of models when dumping data to JSON\n```\n\n----------------------------------------\n\nTITLE: Setting NetBox Version Variable\nDESCRIPTION: Sets environment variable for current NetBox version being upgraded from.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/upgrading.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOLDVER=3.4.9\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Aliases for GraphQL API Queries in NetBox\nDESCRIPTION: This parameter sets the maximum number of queries that a GraphQL API request may contain, helping to control the complexity of requests.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/configuration/graphql-api.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## GRAPHQL_MAX_ALIASES\n\nDefault: 10\n\nThe maximum number of queries that a GraphQL API request may contain.\n```\n\n----------------------------------------\n\nTITLE: Creating New Git Branch\nDESCRIPTION: Command to create and switch to a new local branch from current branch.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b $newbranch\n```\n\n----------------------------------------\n\nTITLE: Updating Button Size Classes\nDESCRIPTION: Removes unnecessary btn-sm class from buttons as it's no longer needed.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\" class=\"btn btn-sm btn-primary\">Text</a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\" class=\"btn btn-primary\">Text</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Rules in Markdown\nDESCRIPTION: Shows how to add horizontal rules to separate content sections using Markdown syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_10\n\nLANGUAGE: no-highlight\nCODE:\n```\nContent\n\n---\n\nMore content\n\n***\n\nFinal content\n```\n\n----------------------------------------\n\nTITLE: Installing System Packages for LDAP on CentOS\nDESCRIPTION: Commands to install the required system packages for LDAP integration on CentOS Linux.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_1\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo yum install -y openldap-devel python3-devel\n```\n\n----------------------------------------\n\nTITLE: Staging Changed Files\nDESCRIPTION: Command to stage all modified files in current directory for commit.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/development/git-cheat-sheet.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit add -A\n```\n\n----------------------------------------\n\nTITLE: Updating Background Color Classes\nDESCRIPTION: Updates background color classes to include text contrast classes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"badge bg-primary\">Text</span>\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"badge text-bg-primary\">Text</span>\n```\n\n----------------------------------------\n\nTITLE: API Tag Assignment JSON Example\nDESCRIPTION: Example JSON structure showing how to assign tags to objects in the NetBox REST API. Tags can be specified as objects with names or as numeric primary keys.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.9.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"tags\": [\n  {\"name\": \"First Tag\"},\n  {\"name\": \"Second Tag\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Pinning django-debug-toolbar Version for NetBox\nDESCRIPTION: Specifies a fixed version (5.0.1) of django-debug-toolbar due to compatibility issues with strawberry-graphql-django at higher versions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/base_requirements.txt#2025-04-17_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndjango-debug-toolbar==5.0.1\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Resource Import Path\nDESCRIPTION: Updates the import path for PluginConfig from extras.plugins to netbox.plugins following NetBox v3.7 changes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.plugins import PluginConfig\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom netbox.plugins import PluginConfig\n```\n\n----------------------------------------\n\nTITLE: Restarting NetBox Services\nDESCRIPTION: This command restarts the NetBox services to apply the new configuration changes. It uses systemctl, indicating a Linux environment with systemd.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/microsoft-entra-id.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl restart netbox\n```\n\n----------------------------------------\n\nTITLE: Installing django-auth-ldap Package\nDESCRIPTION: Commands to activate the Python virtual environment and install the django-auth-ldap package using pip.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/6-ldap.md#2025-04-17_snippet_2\n\nLANGUAGE: no-highlight\nCODE:\n```\nsource /opt/netbox/venv/bin/activate\npip3 install django-auth-ldap\n```\n\n----------------------------------------\n\nTITLE: Removing BootstrapMixin\nDESCRIPTION: Removes the obsolete BootstrapMixin from form definitions as it's no longer needed in NetBox v4.0.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/plugins/development/migration-v4.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\nfrom utilities.forms import BootstrapMixin\n\nclass MyForm(BootstrapMixin, forms.Form):\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom django import forms\n\nclass MyForm(forms.Form):\n```\n\n----------------------------------------\n\nTITLE: Release Notes Document Structure in Markdown\nDESCRIPTION: Document outlining version changes, enhancements and bug fixes for NetBox v3.2. Contains multiple version sections with links to GitHub issues and descriptions of changes.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.2.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NetBox v3.2\n\n## v3.2.9 (2022-08-16)\n\n### Enhancements\n\n* [#8595](https://github.com/netbox-community/netbox/issues/8595) - Add PON interface types\n* [#8723](https://github.com/netbox-community/netbox/issues/8723) - Enable bulk renaming of devices\n...\n```\n\n----------------------------------------\n\nTITLE: NetBox Shell Welcome Message\nDESCRIPTION: The welcome message displayed when entering the NetBox interactive shell, showing Python and Django versions.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/netbox-shell.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n$ ./manage.py nbshell\n### NetBox interactive shell (localhost)\n### Python 3.7.10 | Django 3.2.5 | NetBox 3.0\n### lsmodels() will show available models. Use help(<model>) for more info.\n```\n\n----------------------------------------\n\nTITLE: Configuring Default User Preferences in Python\nDESCRIPTION: Example of setting default user preferences for table column display using the DEFAULT_USER_PREFERENCES configuration parameter. This specifies default columns for the IPAddressTable.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.2.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nDEFAULT_USER_PREFERENCES = {\n    'tables': {\n        'IPAddressTable': {\n            'columns': ['address', 'status', 'created', 'description']\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Django Version Constraint for NetBox\nDESCRIPTION: Sets the version constraint for Django, the web framework on which NetBox is built. It requires Django versions less than 5.2.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/base_requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nDjango<5.2\n```\n\n----------------------------------------\n\nTITLE: API Choice Field Representation in JSON for NetBox v2.7\nDESCRIPTION: Updated representation of choice fields in NetBox v2.7 API responses. The 'value' key now uses a human-friendly string instead of an integer, and an additional 'id' field is included for backward compatibility.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.7.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": {\n        \"value\": \"active\",\n        \"label\": \"Active\",\n        \"id\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Base Directory for NetBox Git Installation\nDESCRIPTION: Creates the base directory for the NetBox installation when using the Git repository method. This sets up the directory structure required for the subsequent clone operation.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/installation/3-netbox.md#2025-04-17_snippet_4\n\nLANGUAGE: no-highlight\nCODE:\n```\nsudo mkdir -p /opt/netbox/\ncd /opt/netbox/\n```\n\n----------------------------------------\n\nTITLE: Configuring LOGIN_PERSISTENCE Parameter in NetBox\nDESCRIPTION: Introduces the LOGIN_PERSISTENCE configuration parameter to persist user sessions in NetBox v2.11.12.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-2.11.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[#6929](https://github.com/netbox-community/netbox/issues/6929) - Introduce `LOGIN_PERSISTENCE` configuration parameter to persist user sessions\n```\n\n----------------------------------------\n\nTITLE: Wireless LAN Field Documentation in Markdown\nDESCRIPTION: Markdown documentation detailing the configuration fields for Wireless LANs, including SSID, authentication types, security parameters, and scope settings.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/wireless/wirelesslan.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Wireless LANs\\n\\nA wireless LAN is a set of interfaces connected via a common wireless channel, identified by its SSID and authentication parameters. Wireless [interfaces](../dcim/interface.md) can be associated with wireless LANs to model multi-acess wireless segments.\\n\\n## Fields\\n\\n### SSID\\n\\nThe service set identifier (SSID) for the wireless network.\\n\\n### Group\\n\\nThe [wireless LAN group](./wirelesslangroup.md) to which this wireless LAN is assigned (if any).\\n\\n### Status\\n\\nThe operational status of the wireless network.\\n\\n!!! tip\\n    Additional statuses may be defined by setting `WirelessLAN.status` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.\\n\\n### VLAN\\n\\nEach wireless LAN can optionally be mapped to a [VLAN](../ipam/vlan.md), to model a bridge between wired and wireless segments.\\n\\n### Authentication Type\\n\\nThe type of wireless authentication in use. Options include:\\n\\n* Open\\n* WEP\\n* WPA Personal (PSK)\\n* WPA Enterprise\\n\\n### Authentication Cipher\\n\\nThe security cipher used to apply wireless authentication. Options include:\\n\\n* Auto (automatic)\\n* TKIP\\n* AES\\n\\n### Pre-Shared Key\\n\\nThe security key configured on each client to grant access to the secured wireless LAN. This applies only to certain authentication types.\\n\\n### Scope\\n\\n!!! info \\\"This field was introduced in NetBox v4.2.\\\"\\n\\nThe [region](../dcim/region.md), [site](../dcim/site.md), [site group](../dcim/sitegroup.md) or [location](../dcim/location.md) with which this wireless LAN is associated.\n```\n\n----------------------------------------\n\nTITLE: Displaying Danger Alert for Deprecated Feature in Markdown\nDESCRIPTION: This snippet demonstrates how to create a danger alert in Markdown to warn users about a deprecated feature. It also suggests an alternative plugin to use.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/stagedchange.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! danger \"Deprecated Feature\"\n    This feature has been deprecated in NetBox v4.2 and will be removed in a future release. Please consider using the [netbox-branching plugin](https://github.com/netboxlabs/netbox-branching), which provides much more robust functionality.\n```\n\n----------------------------------------\n\nTITLE: Configuring NetBox for Azure AD OAuth2 Authentication\nDESCRIPTION: This code snippet shows the required configuration parameters in NetBox's configuration.py file for enabling Azure AD OAuth2 authentication. It sets the remote authentication backend and provides placeholders for the application ID and secret value obtained from the Azure portal.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/administration/authentication/microsoft-entra-id.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nREMOTE_AUTH_BACKEND = 'social_core.backends.azuread.AzureADOAuth2'\nSOCIAL_AUTH_AZUREAD_OAUTH2_KEY = '{APPLICATION_ID}'\nSOCIAL_AUTH_AZUREAD_OAUTH2_SECRET = '{SECRET_VALUE}'\n```\n\n----------------------------------------\n\nTITLE: Visualizing Circuit Dependencies in NetBox with Mermaid\nDESCRIPTION: A Mermaid flowchart diagram illustrating the relationships between providers, circuit types, circuits, provider networks, and circuit terminations in NetBox. It shows how these circuit-related objects are interconnected.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/getting-started/planning.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\nflowchart TD\n    Provider & CircuitType --> Circuit\n    Provider --> ProviderNetwork\n    Circuit --> CircuitTermination\n\nclick Circuit \"../../models/circuits/circuit/\"\nclick CircuitTermination \"../../models/circuits/circuittermination/\"\nclick CircuitType \"../../models/circuits/circuittype/\"\nclick Provider \"../../models/circuits/provider/\"\nclick ProviderNetwork \"../../models/circuits/providernetwork/\"\n```\n```\n\n----------------------------------------\n\nTITLE: Cable Connections Flowchart in Mermaid\nDESCRIPTION: A flowchart demonstrating how cables can connect interfaces to multiple front ports, illustrating NetBox's cable management capabilities.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/features/devices-cabling.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    Interface --> Cable\n    Cable --> fp1[Front Port] & fp2[Front Port]\n```\n\n----------------------------------------\n\nTITLE: Journal Entry Kind Types in Markdown\nDESCRIPTION: Code snippet showing the predefined kinds of journal entries that can be used for classification in NetBox. The kinds include info, success, warning, and danger, with the ability to define additional kinds through configuration.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/journalentry.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! tip\n    Additional kinds may be defined by setting `JournalEntry.kind` under the [`FIELD_CHOICES`](../../configuration/data-validation.md#field_choices) configuration parameter.\n```\n\n----------------------------------------\n\nTITLE: NetBox Version Headers Markdown\nDESCRIPTION: Markdown headers showing version numbers and release dates for NetBox v3.0.x releases.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/release-notes/version-3.0.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# NetBox v3.0\n\n## v3.0.12 (2021-12-06)\n\n## v3.0.11 (2021-11-24)\n\n## v3.0.10 (2021-11-12)\n\n## v3.0.9 (2021-11-03)\n\n## v3.0.8 (2021-10-20)\n\n## v3.0.7 (2021-10-08)\n\n## v3.0.6 (2021-10-06)\n```\n\n----------------------------------------\n\nTITLE: Creating Tables in Markdown\nDESCRIPTION: Shows how to create tables in Markdown, including text alignment and inline formatting.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_8\n\nLANGUAGE: no-highlight\nCODE:\n```\n| Heading 1 | Heading 2 | Heading 3 |\n|-----------|-----------|-----------|\n| Row 1     | Alpha     | Red       |\n| Row 2     | **Bravo** | Green     |\n| Row 3     | Charlie   | ~~Blue~~  |\n```\n\nLANGUAGE: no-highlight\nCODE:\n```\n| Left-aligned | Centered | Right-aligned |\n|:-------------|:--------:|--------------:|\n| Text         | Text     | Text          |\n| Text         | Text     | Text          |\n| Text         | Text     | Text          |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Headings Syntax\nDESCRIPTION: Shows how to create headings of different levels using Markdown syntax.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/reference/markdown.md#2025-04-17_snippet_0\n\nLANGUAGE: no-highlight\nCODE:\n```\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning Alert for Staged Changes Usage in Markdown\nDESCRIPTION: This snippet shows how to create a warning alert in Markdown to inform users about the typical usage of staged changes through a specific context manager.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/models/extras/stagedchange.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n!!! warning\n    Staged changes are not typically created or manipulated directly, but rather effected through the use of the [`checkout()`](../../plugins/development/staged-changes.md) context manager.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Order in Python for NetBox Custom Scripts\nDESCRIPTION: This snippet demonstrates how to define a specific order for scripts within a module using the script_order variable. This overrides the default alphabetical ordering.\nSOURCE: https://github.com/netbox-community/netbox/blob/main/docs/customization/custom-scripts.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom extras.scripts import Script\n\nclass MyCustomScript(Script):\n    ...\n\nclass AnotherCustomScript(Script):\n    ...\n\nscript_order = (MyCustomScript, AnotherCustomScript)\n```"
  }
]