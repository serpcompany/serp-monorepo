[
  {
    "owner": "oslo-project",
    "repo": "oauth2",
    "content": "TITLE: Parsing Access Token and Refresh Token Responses in TypeScript\nDESCRIPTION: Demonstrates how to parse access token and refresh token responses from the token endpoint using the TokenRequestResult class. It includes error handling for unexpected responses and extracts the access token, expiration time, and refresh token from successful responses.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/examples/parse.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenRequestResult } from \"@oslojs/oauth2\";\n\nconst response = await fetch(accessTokenRequest);\nconst data = await response.json();\nif (typeof data !== \"object\" || data === null) {\n\tthrow new Error(\"Unexpected response body\");\n}\nconst result = new TokenRequestResult(data);\nif (result.hasErrorCode()) {\n\tconst error = result.errorCode();\n\tthrow new Error(`Failed to revoke token: ${error}`);\n}\ntry {\n\tconst accessToken = result.accessToken();\n\tconst accessTokenExpiresAt = result.accessTokenExpiresAt();\n\tconst refreshToken = result.refreshToken();\n} catch {\n\tthrow new Error(\"Failed to parse response\");\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing OAuth 2.0 Token Response in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the TokenRequestResult class to parse an OAuth 2.0 token response. It shows error handling, access token retrieval, and expiration time checking.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenRequestResult } from \"@oslojs/oauth2\";\n\nconst response = await fetch(\"https://github.com/login/oauth/access_token\", {\n\tmethod: \"POST\",\n\tbody,\n\theaders\n});\nconst data = await response.json();\nif (typeof data !== \"object\" || data === null) {\n\tthrow new Error(\"Unexpected response\");\n}\nconst result = new TokenRequestResult(data);\nif (result.hasErrorCode()) {\n\tconst error = result.errorCode();\n\tthrow new Error(`Request failed: ${error}`);\n}\nconst accessToken = result.accessToken();\nconst accessTokenExpiresAt = result.accessTokenExpiresAt();\nconst refreshToken = result.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Parsing OAuth 2.0 Token Response in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the TokenRequestResult class from @oslojs/oauth2 to parse an OAuth 2.0 token response. It fetches the token, processes the response, and extracts relevant information such as access token, expiration time, and refresh token.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TokenRequestResult } from \"@oslojs/oauth2\";\n\nconst response = await fetch(\"https://github.com/login/oauth/access_token\", {\n\tmethod: \"POST\",\n\tbody,\n\theaders\n});\nconst data = await response.json();\nif (typeof data !== \"object\" || data === null) {\n\tthrow new Error(\"Unexpected response\");\n}\nconst result = new TokenRequestResult(data);\nif (result.hasErrorCode()) {\n\tconst error = result.errorCode();\n\tthrow new Error(`Request failed: ${error}`);\n}\nconst accessToken = result.accessToken();\nconst accessTokenExpiresAt = result.accessTokenExpiresAt();\nconst refreshToken = result.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Parsing Device Authorization Responses in TypeScript\nDESCRIPTION: Demonstrates parsing device authorization responses using DeviceAuthorizationRequestResult. It extracts the device code, user code, and expiration information while handling potential errors in the response.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/examples/parse.md#2025-04-12_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DeviceAuthorizationRequestResult } from \"@oslojs/oauth2\";\n\nconst response = await fetch(deviceAuthorizationRequest);\nconst data = await response.json();\nif (typeof data !== \"object\" || data === null) {\n\tthrow new Error(\"Unexpected response body\");\n}\nconst result = new DeviceAuthorizationRequestResult(data);\nif (result.hasErrorCode()) {\n\tconst error = result.errorCode();\n\tthrow new Error(`Failed to revoke token: ${error}`);\n}\ntry {\n\tconst deviceCode = result.deviceCode();\n\tconst userCode = result.userCode();\n\tconst codesExpireIn = result.codesExpireIn();\n} catch {\n\tthrow new Error(\"Failed to parse response\");\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token from TokenRequestResult in TypeScript\nDESCRIPTION: This method returns the access_token field value from a TokenRequestResult object. It throws an Error if the field is missing or if the value is not a string type.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/accessToken.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction accessToken(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Refresh Token - TypeScript Function Definition\nDESCRIPTION: Type definition for the refreshToken() method that returns the refresh_token string value from a token request result. The method throws an Error if the refresh_token field is missing or not a valid string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/refreshToken.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction refreshToken(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token Expiration Time in TypeScript\nDESCRIPTION: Method definition for accessing the expires_in field from an OAuth2 token response. The method returns the expiration time in seconds as a number and throws an Error if the field is missing or invalid.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/accessTokenExpiresInSeconds.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction accessTokenExpiresInSeconds(): number;\n```\n\n----------------------------------------\n\nTITLE: Defining accessTokenExpiresAt Method in TypeScript\nDESCRIPTION: This code snippet defines the accessTokenExpiresAt() method in TypeScript. It returns a Date object representing the expiration time of the access token. The method throws an Error if the 'expires_in' field is missing or not a number.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/accessTokenExpiresAt.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction accessTokenExpiresAt(): Date;\n```\n\n----------------------------------------\n\nTITLE: Defining deviceCode() Method for DeviceAuthorizationRequestResult in TypeScript\nDESCRIPTION: This code snippet defines the deviceCode() method for the DeviceAuthorizationRequestResult class. The method returns a string representing the device_code field value. It throws an Error if the field is missing or if the value is not a string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/deviceCode.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction deviceCode(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth2 Scopes from TokenRequestResult in TypeScript\nDESCRIPTION: This method extracts and parses the scope field from a TokenRequestResult object into an array. It performs validation to ensure the scope field exists and is a string, throwing an Error if these conditions are not met.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/scopes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction scopes(): number;\n```\n\n----------------------------------------\n\nTITLE: Retrieving user_code from DeviceAuthorizationRequestResult in TypeScript\nDESCRIPTION: A TypeScript method definition that returns the user_code field from a DeviceAuthorizationRequestResult object. The method throws an Error if the field is missing or not a string type.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/userCode.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction userCode(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth2 Device Code Expiration Time in TypeScript\nDESCRIPTION: TypeScript function definition for retrieving the 'expires_in' field value from a DeviceAuthorizationRequestResult. This method returns the seconds until the device authorization codes expire and throws an Error if the field is missing or not a number.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/codesExpireInSeconds.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction codesExpireInSeconds(): number;\n```\n\n----------------------------------------\n\nTITLE: Defining the codesExpireAt Method in TypeScript for OAuth2 Device Authorization\nDESCRIPTION: This method retrieves the 'expires_in' field value and returns it as a Date object indicating when the authorization codes expire. It throws an Error if the 'expires_in' field is missing or not a number.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/codesExpireAt.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction codesExpireAt(): Date;\n```\n\n----------------------------------------\n\nTITLE: Determining Refresh Token Existence in OAuth2RequestResult\nDESCRIPTION: Function that checks if a refresh token exists in the OAuth2 request result. Despite the comment saying it checks if the error field exists, the actual purpose appears to be checking for a refresh token.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/hasRefreshToken.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasRefreshToken(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Handling Token Revocation Responses in TypeScript\nDESCRIPTION: Shows how to handle token revocation responses using OAuthRequestResult. Since successful revocation returns an empty response, this snippet focuses on proper error handling when the request fails.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/examples/parse.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OAuthRequestResult } from \"@oslojs/oauth2\";\n\nconst response = await fetch(tokenRevocationRequest);\nif (!response.ok) {\n\tconst data = await response.json();\n\tif (typeof data !== \"object\" || data === null) {\n\t\tthrow new Error(\"Unexpected response body\");\n\t}\n\tconst result = new OAuthRequestResult(data);\n\tif (!result.hasErrorCode()) {\n\t\tthrow new Error(\"Unexpected response body\");\n\t}\n\tconst error = result.errorCode();\n\tthrow new Error(`Failed to revoke token: ${error}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving verification_uri in OAuth2 Device Authorization Flow in TypeScript\nDESCRIPTION: A method that returns the verification_uri field value from a device authorization response. It throws an Error if the field is missing or if the value is not a string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/verificationURI.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction verificationURI(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving token_type from OAuth2 TokenRequestResult in TypeScript\nDESCRIPTION: A TypeScript method that returns the token_type field from an OAuth2 token response. It throws an Error if the field is missing or if the value is not a string, as required by the OAuth2 specification.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/tokenType.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tokenType(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth2 Error Code in TypeScript\nDESCRIPTION: A method definition for retrieving the 'error' field value from an OAuth2RequestResult object. The method throws an Error if the field is missing or if the value isn't a string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/errorCode.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction errorCode(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving error_description from OAuth2 Response in TypeScript\nDESCRIPTION: Definition of the errorDescription method in the OAuth2RequestResult class. This method returns the error_description field value from an OAuth2 response and throws an Error if the field is missing or not a string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/errorDescription.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction errorDescription(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving error_uri Field from OAuth2RequestResult in TypeScript\nDESCRIPTION: Definition of the errorURI() method that returns the error_uri field value as a string. The method throws an Error if the field is missing or the value isn't a string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/errorURI.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction errorURI(): string;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Device Authorization Polling Interval in TypeScript\nDESCRIPTION: A TypeScript function that returns the 'interval' field value from a device authorization request response or defaults to RFC-specified 5 seconds if not defined. The function throws an Error if the value isn't a number.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/intervalSeconds.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction intervalSeconds(): number;\n```\n\n----------------------------------------\n\nTITLE: Checking Scope Field Existence in TokenRequestResult - TypeScript\nDESCRIPTION: This method checks if the scope field exists in a TokenRequestResult object and verifies that its value is a string. It returns a boolean value indicating whether both conditions are met.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/hasScopes.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasScopes(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth2 Error Codes in TypeScript\nDESCRIPTION: A function that checks if an OAuth2 request result contains an error code by verifying the existence and type of the error field. Returns a boolean indicating whether a valid error code is present.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/hasErrorCode.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasErrorCode(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Checking OAuth2 Error Description Existence - TypeScript\nDESCRIPTION: Function that checks if the error_description field exists in an OAuth2 request result and validates that its value is a string type. Returns a boolean indicating presence and validity of the error description.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/hasErrorDescription.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasErrorDescription(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining hasErrorURI Method in TypeScript for OAuth2RequestResult\nDESCRIPTION: This code snippet defines the hasErrorURI() method for the OAuth2RequestResult class. The method returns a boolean indicating whether the error_uri field exists and is a valid string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/hasErrorURI.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasErrorURI(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Retrieving OAuth2 State Parameter - TypeScript Function Definition\nDESCRIPTION: Function definition for accessing the state field from OAuth2RequestResult. The method returns the state parameter as a string and throws an Error if the field is missing or not a string value.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/state.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction state(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining hasState() Method for OAuth2RequestResult in TypeScript\nDESCRIPTION: This snippet defines the hasState() method for the OAuth2RequestResult class. It returns a boolean indicating whether the state field exists and is a string.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/hasState.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hasState(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2 Token Type Enumeration in TypeScript\nDESCRIPTION: A TypeScript enum that defines two types of tokens used in OAuth2 authentication: AccessToken and RefreshToken. This enumeration allows for type-safe distinction between different token types within an authentication system.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenType.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nenum TokenType {\n\tAccessToken,\n\tRefreshToken\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing TokenRequestResult in TypeScript\nDESCRIPTION: Constructor for the TokenRequestResult class that takes a JSON-parsed object as its parameter and initializes the instance.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(body: object): this;\n```\n\n----------------------------------------\n\nTITLE: TokenRequestResult Properties Interface in TypeScript\nDESCRIPTION: Interface definition for the Properties of TokenRequestResult, which includes the body property that stores the JSON-parsed object.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/TokenRequestResult/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tbody: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DeviceAuthorizationRequestResult Constructor\nDESCRIPTION: Constructor for creating a new DeviceAuthorizationRequestResult instance that takes a JSON-parsed object as input.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(body: object): this;\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceAuthorizationRequestResult Properties Interface\nDESCRIPTION: TypeScript interface defining the properties structure for DeviceAuthorizationRequestResult, containing a body property of type object.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/DeviceAuthorizationRequestResult/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tbody: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2RequestResult Constructor in TypeScript\nDESCRIPTION: Constructor that initializes an OAuth2RequestResult instance with a JSON-parsed response body object.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/index.md#2025-04-12_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(body: object): this;\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2RequestResult Properties Interface in TypeScript\nDESCRIPTION: Interface definition for OAuth2RequestResult properties, specifying the body property that holds the parsed object.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/OAuth2RequestResult/index.md#2025-04-12_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tbody: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth2 Classes in Markdown\nDESCRIPTION: This snippet lists the main classes provided by the @oslojs/oauth2 module, including DeviceAuthorizationRequestResult, OAuth2RequestResult, and TokenRequestResult. Each class is linked to its corresponding reference page.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/reference/main/index.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @oslojs/oauth2\n\n## Classes\n\n- [`DeviceAuthorizationRequestResult`](/reference/main/DeviceAuthorizationRequestResult)\n- [`OAuth2RequestResult`](/reference/main/OAuth2RequestResult)\n- [`TokenRequestResult`](/reference/main/TokenRequestResult)\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/oauth2 via npm\nDESCRIPTION: This snippet shows the npm command to install the @oslojs/oauth2 package.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/docs/pages/index.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/oauth2\n```\n\n----------------------------------------\n\nTITLE: Installing @oslojs/oauth2 Package\nDESCRIPTION: This snippet shows the npm command to install the @oslojs/oauth2 package in a project.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @oslojs/oauth2\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using the PNPM package manager.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Building the Package\nDESCRIPTION: Command to build the OAuth2 package using PNPM.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/CONTRIBUTING.md#2025-04-12_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Changesets\nDESCRIPTION: Commands for creating changesets using the Auri tool, showing both minor and patch version updates.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/CONTRIBUTING.md#2025-04-12_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm auri add minor\npnpm auri add patch\n```\n\n----------------------------------------\n\nTITLE: Changeset Message Examples\nDESCRIPTION: Example messages for changeset files showing proper formatting for bug fixes and new features.\nSOURCE: https://github.com/oslo-project/oauth2/blob/main/CONTRIBUTING.md#2025-04-12_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nFix: Handle negative numbers in `sqrt()`\n```\n\nLANGUAGE: markdown\nCODE:\n```\nFeat: Add `greet()`\n```"
  }
]