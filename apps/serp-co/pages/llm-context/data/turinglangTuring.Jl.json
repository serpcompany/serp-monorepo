[
  {
    "owner": "turinglang",
    "repo": "turing.jl",
    "content": "TITLE: Basic Model Definition and Sampling in Julia using Turing\nDESCRIPTION: Demonstrates the basic usage pattern of defining and sampling from a model in Turing.jl using unqualified exports.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/docs/src/api.md#2025-04-16_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nusing Turing\n\n@model function my_model() end\n\nsample(my_model(), Prior(), 100)\n```\n\n----------------------------------------\n\nTITLE: Qualified Model Definition and Sampling in Julia using Turing\nDESCRIPTION: Shows the equivalent code using fully qualified module names, demonstrating how Turing's exports simplify the code.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/docs/src/api.md#2025-04-16_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nDynamicPPL.@model function my_model() end\n\nsample(my_model(), Turing.Inference.Prior(), 100)\n```\n\n----------------------------------------\n\nTITLE: Setting AD Backend in Turing.jl\nDESCRIPTION: Examples of how to set the automatic differentiation (AD) backend in Turing.jl. Shows usage for Zygote and ReverseDiff backends.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/HISTORY.md#2025-04-16_snippet_3\n\nLANGUAGE: Julia\nCODE:\n```\nTuring.setadbackend(:zygote)\n```\n\nLANGUAGE: Julia\nCODE:\n```\nTuring.setadbackend(:reversediff)\n```\n\n----------------------------------------\n\nTITLE: HMC Constructor with ADType Example (Julia)\nDESCRIPTION: Demonstrates how to specify automatic differentiation types when constructing an HMC sampler.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/HISTORY.md#2025-04-16_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nHMC(0.1, 10; adtype=AutoForwardDiff(; chunksize))\nHMC(0.1, 10; adtype=AutoReverseDiff(false))\n```\n\n----------------------------------------\n\nTITLE: Sampling in Turing.jl with Elliptical Slice Sampling\nDESCRIPTION: Example of using the Elliptical Slice Sampling (ESS) algorithm in Turing.jl to sample from a model.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/HISTORY.md#2025-04-16_snippet_5\n\nLANGUAGE: Julia\nCODE:\n```\nsample(model, ESS(), 1000)\n```\n\n----------------------------------------\n\nTITLE: Defining Gibbs Sampler Usage Example (Julia)\nDESCRIPTION: Demonstrates the new constructor syntax for the Gibbs sampler, mapping symbols and VarNames to samplers.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/HISTORY.md#2025-04-16_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nGibbs(x=>HMC(), y=>MH())\nGibbs(@varname(x) => HMC(), @varname(y) => MH())\nGibbs((:x, :y) => NUTS(), :z => MH())\n```\n\n----------------------------------------\n\nTITLE: Gibbs Sampler with RepeatSampler Example (Julia)\nDESCRIPTION: Shows how to use RepeatSampler to run certain subsamplers more frequently than others in a Gibbs sampling context.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/HISTORY.md#2025-04-16_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\nGibbs(@varname(x) => RepeatSampler(HMC(0.01, 4), 2), @varname(y) => MH())\n```\n\n----------------------------------------\n\nTITLE: Creating Benchmarks for Turing.jl Using BenchmarkTools\nDESCRIPTION: This snippet demonstrates how to create and organize benchmarks for Turing.jl using the BenchmarkTools package. It shows how to create a benchmark group with specific tags and how to add an individual benchmark to that group using the @benchmarkable macro.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/benchmarks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\nusing Turing, BenchmarkTools\n\nBenchmarkSuite[\"example_benchmark\"] = BenchmarkGroup([\"tag1\", \"tag2\"])\n\nBenchmarkSuite[\"example_benchmark\"][\"benchmark_1\"] = @benchmarkable a_time_consuming_computing()\n```\n\n----------------------------------------\n\nTITLE: Importing AD Packages in Julia\nDESCRIPTION: Examples of importing the Zygote and ReverseDiff packages in Julia, which are required to use these AD backends in Turing.jl.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/HISTORY.md#2025-04-16_snippet_4\n\nLANGUAGE: Julia\nCODE:\n```\nusing Zygote\n```\n\nLANGUAGE: Julia\nCODE:\n```\nusing ReverseDiff\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodocs for Turing.Optimisation Module\nDESCRIPTION: This code snippet configures the autodocs feature to automatically generate documentation for all types and functions in the Turing.Optimisation module. It specifies that types should be documented before functions.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/docs/src/api/Optimisation.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```@autodocs\nModules = [Turing.Optimisation]\nOrder  = [:type, :function]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Generation for Turing.Inference Module\nDESCRIPTION: Configuration block for Julia's documentation generator (@autodocs) that specifies the Turing.Inference module as the target and sets the order to document types first, followed by functions.\nSOURCE: https://github.com/TuringLang/Turing.jl/blob/main/docs/src/api/Inference.md#2025-04-16_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\n@autodocs\nModules = [Turing.Inference]\nOrder  = [:type, :function]\n```"
  }
]