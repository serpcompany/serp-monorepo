[
  {
    "owner": "pyodide",
    "repo": "pyodide",
    "content": "TITLE: Basic Pyodide Initialization\nDESCRIPTION: Demonstrates how to initialize Pyodide and run basic Python code to get the system version.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/quickstart.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync function main() {\n  let pyodide = await loadPyodide();\n  // Pyodide is now ready to use...\n  console.log(pyodide.runPython(`\n    import sys\n    sys.version\n  `));\n};\nmain();\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Loading of Packages in Pyodide\nDESCRIPTION: This JavaScript example shows how to load Pyodide and a package (matplotlib) asynchronously, ensuring the package is available before use.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-packages.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet pyodide;\nasync function main() {\n  pyodide = await loadPyodide();\n  await pyodide.loadPackage(\"matplotlib\");\n  // matplotlib is now available\n}\nmain();\n```\n\n----------------------------------------\n\nTITLE: Basic Pyodide HTML Integration\nDESCRIPTION: Complete HTML example showing how to integrate Pyodide into a web page and run Python code.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/quickstart.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n      <script src=\"{{PYODIDE_CDN_URL}}pyodide.js\"></script>\n  </head>\n  <body>\n    Pyodide test page <br>\n    Open your browser console to see Pyodide output\n    <script type=\"text/javascript\">\n      async function main(){\n        let pyodide = await loadPyodide();\n        console.log(pyodide.runPython(`\n            import sys\n            sys.version\n        `));\n        pyodide.runPython(\"print(1 + 2)\");\n      }\n      main();\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example of Loading and Using a Package in Pyodide\nDESCRIPTION: This HTML snippet provides a complete example of loading Pyodide, using micropip to install a package, and then using the installed package in Python code, all within a web page.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-packages.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n  <body>\n    <script type=\"text/javascript\" src=\"{{PYODIDE_CDN_URL}}pyodide.js\"></script>\n    <script type=\"text/javascript\">\n      async function main() {\n        let pyodide = await loadPyodide();\n        await pyodide.loadPackage(\"micropip\");\n        const micropip = pyodide.pyimport(\"micropip\");\n        await micropip.install(\"snowballstemmer\");\n        await pyodide.runPython(`\n        import snowballstemmer\n        stemmer = snowballstemmer.stemmer('english')\n        print(stemmer.stemWords('go goes going gone'.split()))\n      `);\n      }\n      main();\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: JavaScript to Python Variable Access\nDESCRIPTION: Example of accessing and manipulating Python variables from JavaScript context.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/quickstart.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.runPython(`\n  x = [3, 4]\n`);\npyodide.globals.get('x').toJs();\n// >>> [ 3, 4 ]\n\n// re-assign a new value to an existing variable\npyodide.globals.set(\"x\", 'x will be now string');\n\n// add the js \"alert\" function to the Python global scope\n// this will show a browser alert if called from Python\npyodide.globals.set(\"alert\", alert);\n\n// add a \"square\" function to Python global scope\npyodide.globals.set(\"square\", x => x*x);\n\n// Test the new \"square\" Python function\npyodide.runPython(\"square(3)\");\n```\n\n----------------------------------------\n\nTITLE: Loading Pyodide CDN URL\nDESCRIPTION: The CDN URL template for including Pyodide in a web project.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/quickstart.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{PYODIDE_CDN_URL}}pyodide.js\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Python with Pyodide in HTML\nDESCRIPTION: A basic HTML template for loading Pyodide from a CDN and running Python code. The example loads the Pyodide JavaScript file, initializes Pyodide asynchronously, and runs a simple Python expression (1 + 2).\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n      <script src=\"{{PYODIDE_CDN_URL}}pyodide.js\"></script>\n  </head>\n  <body>\n    <script type=\"text/javascript\">\n      async function main(){\n        let pyodide = await loadPyodide();\n        console.log(pyodide.runPython(\"1 + 2\"));\n      }\n      main();\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Interactive Pyodide Code Editor\nDESCRIPTION: Advanced HTML example with an interactive code editor for executing Python code in the browser.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/quickstart.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <script src=\"{{PYODIDE_CDN_URL}}pyodide.js\"></script>\n  </head>\n\n  <body>\n    <p>\n      You can execute any Python code. Just enter something in the box below and\n      click the button.\n    </p>\n    <input id=\"code\" value=\"sum([1, 2, 3, 4, 5])\" />\n    <button onclick=\"evaluatePython()\">Run</button>\n    <br />\n    <br />\n    <div>Output:</div>\n    <textarea id=\"output\" style=\"width: 100%;\" rows=\"6\" disabled></textarea>\n\n    <script>\n      const output = document.getElementById(\"output\");\n      const code = document.getElementById(\"code\");\n\n      function addToOutput(s) {\n        output.value += \">>>\" + code.value + \"\\n\" + s + \"\\n\";\n      }\n\n      output.value = \"Initializing...\\n\";\n      // init Pyodide\n      async function main() {\n        let pyodide = await loadPyodide();\n        output.value += \"Ready!\\n\";\n        return pyodide;\n      }\n      let pyodideReadyPromise = main();\n\n      async function evaluatePython() {\n        let pyodide = await pyodideReadyPromise;\n        try {\n          let output = pyodide.runPython(code.value);\n          addToOutput(output);\n        } catch (err) {\n          addToOutput(err);\n        }\n      }\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Asyncio Support with JavaScript-Python Interop\nDESCRIPTION: Demonstrates how to use asyncio support in Pyodide to fetch data asynchronously and interact between Python and JavaScript. Shows implementation of await functionality across language boundaries.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/release-notes/v0.17.0.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.runPython(`\n    async def test():\n        from js import fetch\n        # Fetch the Pyodide packages list\n        r = await fetch(\"packages.json\")\n        data = await r.json()\n        # return all available packages\n        return data.dependencies.object_keys()\n`);\nlet test = pyodide.globals.get(\"test\");\n// test returns a coroutine, we can await the coroutine\n// from JavaScript and it will schedule it on the Python event loop\nresult = await test();\nconsole.log(result); // [\"asciitree\", \"parso\", \"scikit-learn\", ...]\n```\n\n----------------------------------------\n\nTITLE: Converting JavaScript Objects to Python Types\nDESCRIPTION: Demonstrates how JavaScript objects are converted to Python types, showing the difference between plain objects and class instances.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_7\n\nLANGUAGE: pyodide\nCODE:\n```\nclass Test {};\nwindow.x = { \"a\" : 7, \"b\" : 2};\nwindow.y = { \"a\" : 7, \"b\" : 2};\nObject.setPrototypeOf(y, Test.prototype);\npyodide.runPython(`\n    from js import x, y\n    # x is converted to a dictionary\n    assert x.to_py() == { \"a\" : 7, \"b\" : 2}\n    # y is not a \"Plain Old JavaScript Object\", it's an instance of type Test so it's not converted\n    assert y.to_py() == y\n`);\n```\n\n----------------------------------------\n\nTITLE: Loading Packages with pyodide.loadPackage\nDESCRIPTION: This JavaScript snippet demonstrates how to use pyodide.loadPackage to load official Pyodide packages and packages from custom URLs. It also shows how to load multiple packages at once.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-packages.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nawait pyodide.loadPackage(\"numpy\");\n\nawait pyodide.loadPackage(\n  \"https://foo/bar/numpy-1.22.3-cp310-cp310-emscripten_3_1_13_wasm32.whl\",\n);\n\nawait pyodide.loadPackage([\"cycler\", \"pytz\"]);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Python Packages from JavaScript\nDESCRIPTION: Example of registering a JavaScript module to be used as a Python package in Pyodide, including nested submodules.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet my_module = {\n  f: function (x) {\n    return x * x + 1;\n  },\n  g: function (x) {\n    console.log(`Calling g on argument ${x}`);\n    return x;\n  },\n  submodule: {\n    h: function (x) {\n      return x * x - 1;\n    },\n    c: 2,\n  },\n};\npyodide.registerJsModule(\"my_js_module\", my_module);\n```\n\nLANGUAGE: python\nCODE:\n```\nimport my_js_module\nfrom my_js_module.submodule import h, c\nassert my_js_module.f(7) == 50\nassert h(9) == 80\nassert c == 2\n```\n\n----------------------------------------\n\nTITLE: Installing and Using a Package with Micropip in Pyodide\nDESCRIPTION: This snippet demonstrates how to load the micropip package, use it to install the snowballstemmer package, and then use the installed package in Python code.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-packages.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait pyodide.loadPackage(\"micropip\");\nconst micropip = pyodide.pyimport(\"micropip\");\nawait micropip.install('snowballstemmer');\npyodide.runPython(`\n  import snowballstemmer\n  stemmer = snowballstemmer.stemmer('english')\n  print(stemmer.stemWords('go goes going gone'.split()))\n`);\n```\n\n----------------------------------------\n\nTITLE: Reading Files in Pyodide\nDESCRIPTION: Demonstrates how to write a file using Python's Path interface and read it using Pyodide's FS API. Shows interop between Python and JavaScript file operations.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/file-system.md#2025-04-17_snippet_0\n\nLANGUAGE: pyodide\nCODE:\n```\npyodide.runPython(`\n  from pathlib import Path\n\n  Path(\"/hello.txt\").write_text(\"hello world!\")\n`);\n\nlet file = pyodide.FS.readFile(\"/hello.txt\", { encoding: \"utf8\" });\nconsole.log(file); // ==> \"hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Working with JavaScript TypedArrays in Python\nDESCRIPTION: Demonstrates converting JavaScript TypedArrays to Python arrays and back using Numpy.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_11\n\nLANGUAGE: pyodide\nCODE:\n```\nself.jsarray = new Float32Array([1,2,3, 4, 5, 6]);\npyodide.runPython(`\n    from js import jsarray\n    array = jsarray.to_py()\n    import numpy as np\n    numpy_array = np.asarray(array).reshape((2,3))\n    print(numpy_array)\n`);\n```\n\n----------------------------------------\n\nTITLE: Running Python Code Example\nDESCRIPTION: Shows how to execute Python code and get system version using runPython function.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/quickstart.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.runPython(`\n  import sys\n  sys.version\n`);\n```\n\n----------------------------------------\n\nTITLE: Python to JavaScript DOM Manipulation\nDESCRIPTION: Example of accessing JavaScript DOM APIs from Python using the js module.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/quickstart.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport js\n\ndiv = js.document.createElement(\"div\")\ndiv.innerHTML = \"<h1>This element was created from Python</h1>\"\njs.document.body.prepend(div)\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Python in Node.js with Pyodide\nDESCRIPTION: This snippet demonstrates how to load Pyodide in a Node.js environment and execute a simple Python expression. It requires the Pyodide artifacts to be downloaded and extracted from GitHub releases first.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/src/js/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// hello_python.js\nconst { loadPyodide } = require(\"pyodide\");\n\nasync function hello_python() {\n  let pyodide = await loadPyodide({\n    indexURL: \"<pyodide artifacts folder>\",\n  });\n  return pyodide.runPythonAsync(\"1+1\");\n}\n\nhello_python().then((result) => {\n  console.log(\"Python says that 1+1 =\", result);\n});\n```\n\n----------------------------------------\n\nTITLE: Mounting NodeFS in Pyodide\nDESCRIPTION: Example showing how to mount a local file system directory in Pyodide using NodeFS for package development.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/accessing-files.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npyodide.mountNodeFS(\"my_package\", \"/path/to/my_package\");\npyodide.runPython(`\nimport my_package\n# ... use it\n`);\n```\n\n----------------------------------------\n\nTITLE: Installing a Wheel from a Custom URL with Micropip\nDESCRIPTION: This example shows how to use micropip to install a wheel file from a specific URL. It's useful for installing packages from non-standard sources.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-packages.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport micropip\nmicropip.install(\n    'https://example.com/files/snowballstemmer-2.0.0-py2.py3-none-any.whl'\n)\n```\n\n----------------------------------------\n\nTITLE: Exception Handling Between Python and JavaScript\nDESCRIPTION: Shows how to handle and reformat Python exceptions in JavaScript using sys.last_value to access the original exception details.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.runPython(`\ndef reformat_exception():\n    from traceback import format_exception\n    # Format a modified exception here\n    # this just prints it normally but you could for instance filter some frames\n    return \"\".join(\n        format_exception(sys.last_type, sys.last_value, sys.last_traceback)\n    )\n`);\nlet reformat_exception = pyodide.globals.get(\"reformat_exception\");\ntry {\n    pyodide.runPython(some_code);\n} catch(e){\n    // replace error message\n    e.message = reformat_exception();\n    throw e;\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Python Functions from JavaScript\nDESCRIPTION: Shows how to call Python functions from JavaScript with argument conversion and proxy management.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_8\n\nLANGUAGE: pyodide\nCODE:\n```\nlet test = pyodide.runPython(`\n    def test(x):\n        return [n*n for n in x]\n    test\n`);\nlet result_py = test([1,2,3,4]);\n// result_py is a PyProxy of a list.\nlet result_js = result_py.toJs();\n// result_js is the array [1, 4, 9, 16]\nresult_py.destroy();\n```\n\n----------------------------------------\n\nTITLE: Creating a Worker API for Pyodide Communication\nDESCRIPTION: Implementation of a worker API that handles message passing between the main thread and the web worker. It assigns unique IDs to each request, routes messages, and wraps the communication in a Promise-based interface for easier use.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/webworker.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// workerApi.mjs\nfunction getPromiseAndResolve() {\n  let resolve;\n  let promise = new Promise((res) => {\n    resolve = res;\n  });\n  return { promise, resolve };\n}\n\n// Each message needs a unique id to identify the response. In a real example,\n// we might use a real uuid package\nlet lastId = 1;\nfunction getId() {\n  return lastId++;\n}\n\n// Add an id to msg, send it to worker, then wait for a response with the same id.\n// When we get such a response, use it to resolve the promise.\nfunction requestResponse(worker, msg) {\n  const { promise, resolve } = getPromiseAndResolve();\n  const idWorker = getId();\n  worker.addEventListener(\"message\", function listener(event) {\n    if (event.data?.id !== idWorker) {\n      return;\n    }\n    // This listener is done so remove it.\n    worker.removeEventListener(\"message\", listener);\n    // Filter the id out of the result\n    const { id, ...rest } = event.data;\n    resolve(rest);\n  });\n  worker.postMessage({ id: idWorker, ...msg });\n  return promise;\n}\n\nconst pyodideWorker = new Worker(\"./webworker.mjs\", { type: \"module\" });\n\nexport function asyncRun(script, context) {\n  return requestResponse(pyodideWorker, {\n    context,\n    python: script,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Python-based Archive Download and Unpacking\nDESCRIPTION: Example showing how to download and unpack archives using Python's pyfetch wrapper around JavaScript fetch in Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/accessing-files.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nawait pyodide.runPythonAsync(`\n  from pyodide.http import pyfetch\n  response = await pyfetch(\"https://some_url/myfiles.zip\")\n  await response.unpack_archive()\n`)\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Pyodide in JavaScript Module\nDESCRIPTION: JavaScript module that demonstrates loading Pyodide and executing Python code. It imports the loadPyodide function, initializes Pyodide, and runs a simple Python calculation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/working-with-bundlers.md#2025-04-17_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { loadPyodide } from \"pyodide\";\n\nasync function hello_python() {\n  let pyodide = await loadPyodide();\n  return pyodide.runPythonAsync(\"1+1\");\n}\n\nhello_python().then((result) => {\n  console.log(\"Python says that 1+1 =\", result);\n});\n```\n\n----------------------------------------\n\nTITLE: Service Worker Implementation with Pyodide\nDESCRIPTION: Service worker script that integrates Pyodide to intercept and modify JSON responses. Includes Python function implementation and fetch event handling.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/service-worker.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* sw.js */\n/* MODIFY IMPORT PATHS TO POINT TO YOUR SCRIPTS, REPLACE IF USING MODULE-TYPE WORKER */\n// We're using the npm package xhr-shim, which assigns self.XMLHttpRequestShim\nimportScripts(\"./node_modules/xhr-shim/src/index.js\");\nself.XMLHttpRequest = self.XMLHttpRequestShim;\nimportScripts(\"./pyodide.js\");\n// importScripts(\"./pyodide.asm.js\"); // if loading Pyodide after installation phase, you'll need to import this too\n\nlet modifyData;\nlet pyodide;\nloadPyodide({}).then((_pyodide) => {\n  pyodide = _pyodide;\n  let namespace = pyodide.globals.get(\"dict\")();\n\n  pyodide.runPython(\n    `\n    import json\n\n    counter = 0\n    def modify_data(data):\n        global counter\n        counter += 1\n        dict = data.to_py()\n        dict['count'] = counter\n        return dict\n    `,\n    { globals: namespace },\n  );\n\n  // assign the modify_data function from the Python context to a Javascript variable\n  modifyData = namespace.get(\"modify_data\");\n  namespace.destroy();\n});\n\nself.addEventListener(\"fetch\", (event) => {\n  if (event.request.url.endsWith(\"json\")) {\n    if (!modifyData) {\n      // For this example, throw so it's clear that the worker isn't ready to modify responses\n      // This is because we don't want to return a response that isn't modified yet\n      // If your service worker would return the same response as a server (eg. it's just performing calculations closer to home)\n      // then you may want to let the event through without doing anything\n      event.respondWith(\n        Promise.reject(\"Python code isn't set up yet, try again in a bit\"),\n      );\n    } else {\n      event.respondWith(\n        // We aren't using the async await syntax because event.respondWith needs to respond synchronously\n        // it can't be executing after an awaited promise within the fetch event handler, otherwise you'll get this\n        // Uncaught (in promise) DOMException: Failed to execute 'respondWith' on 'FetchEvent': The event has already been responded to\n        fetch(event.request)\n          .then((v) => v.json())\n          .then((originalData) => {\n            let proxy = modifyData(originalData);\n            let pyproxies = [];\n\n            // Because toJs gives us a Map, we transform it to a plain Javascript object before changing it to JSON\n            let result = JSON.stringify(\n              Object.fromEntries(\n                proxy.toJs({\n                  pyproxies,\n                }),\n              ),\n            );\n            // Craft the new JSON response\n            return new Response(result, {\n              headers: { \"Content-Type\": \"application/json\" },\n            });\n          }),\n      );\n    }\n  }\n});\n\n// Code below is for easy iteration during development, you may want to remove or modify in a prod environment:\n\n// Immediately become the active service worker once installed, so we don't have a stale service worker intercepting requests\n// You can remove this code and achieve a similar thing by enabling \"Update on Reload\" in devtools, if supported:\n// https://web.dev/service-worker-lifecycle/#update-on-reload\nself.addEventListener(\"install\", function () {\n  self.skipWaiting();\n});\n\n// With this, we won't need to reload the page before the service worker can intercept fetch requests\n// https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim#examples\nself.addEventListener(\"activate\", function (event) {\n  event.waitUntil(self.clients.claim());\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Unpacking Archive Files in Python with Pyodide\nDESCRIPTION: Downloads and unpacks a Python package archive using pyfetch. The archive can be in .tar.gz, .zip, or .whl format and is unpacked to the current directory by default.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-custom-python-code.md#2025-04-17_snippet_0\n\nLANGUAGE: pyodide\nCODE:\n```\nawait pyodide.runPythonAsync(`\n    from pyodide.http import pyfetch\n    response = await pyfetch(\"https://.../your_package.tar.gz\") # .zip, .whl, ...\n    await response.unpack_archive() # by default, unpacks to the current dir\n`)\npkg = pyodide.pyimport(\"your_package\");\npkg.do_something();\n```\n\n----------------------------------------\n\nTITLE: Implementing runPythonAsync in JavaScript\nDESCRIPTION: Asynchronous version of runPython that evaluates Python code and returns a Promise.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync function runPythonAsync(code) {\n  return await pyodide.pyodide_py.code.eval_code_async(code, pyodide.globals);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Keyword Arguments in JavaScript-Python Calls\nDESCRIPTION: Shows how to use keyword arguments when calling Python functions from JavaScript.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_10\n\nLANGUAGE: pyodide\nCODE:\n```\nlet test = pyodide.runPython(`\n    from pyodide.ffi import to_js\n    def test(x, *, offset):\n        return to_js([n*n + offset for n in x])\n    to_js(test)\n`);\nlet result = test.callKwargs([1,2,3,4], { offset : 7});\n// result is the array [8, 12, 16, 23]\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Pyodide Integration\nDESCRIPTION: Vite configuration file that excludes Pyodide from dependency pre-bundling and ensures all Pyodide files are available in the production build. Uses vite-plugin-static-copy to copy Pyodide assets.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/working-with-bundlers.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { defineConfig } from \"vite\";\nimport { viteStaticCopy } from \"vite-plugin-static-copy\";\nimport { dirname, join } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst PYODIDE_EXCLUDE = [\n  \"!**/*.{md,html}\",\n  \"!**/*.d.ts\",\n  \"!**/*.whl\",\n  \"!**/node_modules\",\n];\n\nexport function viteStaticCopyPyodide() {\n  const pyodideDir = dirname(fileURLToPath(import.meta.resolve(\"pyodide\")));\n  return viteStaticCopy({\n    targets: [\n      {\n        src: [join(pyodideDir, \"*\")].concat(PYODIDE_EXCLUDE),\n        dest: \"assets\",\n      },\n    ],\n  });\n}\n\nexport default defineConfig({\n  optimizeDeps: { exclude: [\"pyodide\"] },\n  plugins: [viteStaticCopyPyodide()],\n});\n```\n\n----------------------------------------\n\nTITLE: Unpacking External Archives in Pyodide\nDESCRIPTION: Example demonstrating how to download and unpack zip archives into Pyodide's virtual file system using JavaScript fetch.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/accessing-files.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlet zipResponse = await fetch(\"myfiles.zip\");\nlet zipBinary = await zipResponse.arrayBuffer();\npyodide.unpackArchive(zipBinary, \"zip\");\n```\n\n----------------------------------------\n\nTITLE: Setting Up Interrupt Buffer in Main Thread (JavaScript)\nDESCRIPTION: This snippet demonstrates how to set up an interrupt buffer in the main thread, send it to a worker, and trigger an interrupt. It includes functions for setting the interrupt buffer and running Python code.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/keyboard-interrupts.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet pyodideWorker = new Worker(\"pyodideWorker.js\");\nlet interruptBuffer = new Uint8Array(new SharedArrayBuffer(1));\npyodideWorker.postMessage({ cmd: \"setInterruptBuffer\", interruptBuffer });\nfunction interruptExecution() {\n  // 2 stands for SIGINT.\n  interruptBuffer[0] = 2;\n}\n// imagine that interruptButton is a button we want to trigger an interrupt.\ninterruptButton.addEventListener(\"click\", interruptExecution);\nasync function runCode(code) {\n  // Clear interruptBuffer in case it was accidentally left set after previous code completed.\n  interruptBuffer[0] = 0;\n  pyodideWorker.postMessage({ cmd: \"runCode\", code });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pyodide-build Package for Building Pyodide-compatible Wheels\nDESCRIPTION: Installs the pyodide-build tool, which is required for building Python packages compatible with Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install pyodide-build\n```\n\n----------------------------------------\n\nTITLE: Using Python Functions as Event Handlers\nDESCRIPTION: Demonstrates how to properly use Python functions as JavaScript event handlers using create_proxy.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom js import document\nfrom pyodide.ffi import create_proxy\ndef f(*args):\n    document.querySelector(\"h1\").innerHTML += \"(>.<)\"\n\nproxy_f = create_proxy(f)\ndocument.body.addEventListener('click', proxy_f)\n# Store proxy_f in Python then later:\ndocument.body.removeEventListener('click', proxy_f)\nproxy_f.destroy()\n```\n\n----------------------------------------\n\nTITLE: Using Pyodide in Node.js with ES Modules\nDESCRIPTION: A Node.js example script that imports the Pyodide package, initializes it, and runs a Python expression asynchronously. This demonstrates how to load Pyodide in a Node.js environment and interact with Python code.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/index.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// hello_python.mjs\nimport { loadPyodide } from \"pyodide\";\n\nasync function hello_python() {\n  let pyodide = await loadPyodide();\n  return pyodide.runPythonAsync(\"1+1\");\n}\n\nconst result = await hello_python();\nconsole.log(\"Python says that 1+1 =\", result);\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Modules in Python\nDESCRIPTION: Demonstrates how to register and use JavaScript modules in Python code using pyodide.registerJsModule, allowing seamless access to JavaScript functions from Python.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/release-notes/v0.17.0.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet my_module = {\n    foo(x){\n        return x*x + 1;\n    },\n    bar(y, z){\n        return y*z + y + z;\n    }\n};\npyodide.registerJsModule(\"my_mod\", my_module);\npyodide.runPython(`\n    from my_mod import foo, bar\n    foo(7) # 50\n    bar(9, 5) # 59\n`);\n```\n\n----------------------------------------\n\nTITLE: Implementing Interruptible Sleep Function in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an interruptible sleep function in JavaScript using Atomics.wait and pyodide.checkInterrupt. It allows for interruption of JavaScript code called from Python.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/keyboard-interrupts.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet blockingSleepBuffer = new Int32Array(new SharedArrayBuffer(4));\nfunction blockingSleep(t) {\n  for (let i = 0; i < t * 20; i++) {\n    // This Atomics.wait call blocks the thread until the buffer changes or a 50ms timeout elapses.\n    // Since we won't change the value in the buffer, this blocks for 50ms.\n    Atomics.wait(blockingSleepBuffer, 0, 0, 50);\n    // Periodically check for an interrupt to allow a KeyboardInterrupt.\n    pyodide.checkInterrupt();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Files in Pyodide\nDESCRIPTION: Shows how to write a file using JavaScript's FS API and read it back using Python's Path interface. Demonstrates bidirectional file system access.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/file-system.md#2025-04-17_snippet_1\n\nLANGUAGE: pyodide\nCODE:\n```\nlet data = \"hello world!\";\npyodide.FS.writeFile(\"/hello.txt\", data, { encoding: \"utf8\" });\npyodide.runPython(`\n  from pathlib import Path\n\n  print(Path(\"/hello.txt\").read_text())\n`);\n```\n\n----------------------------------------\n\nTITLE: Mounting IDBFS in Pyodide\nDESCRIPTION: Shows how to mount an IndexedDB-based file system (IDBFS) for persistent storage between page reloads.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/file-system.md#2025-04-17_snippet_2\n\nLANGUAGE: pyodide\nCODE:\n```\nlet mountDir = \"/mnt\";\npyodide.FS.mkdirTree(mountDir);\npyodide.FS.mount(pyodide.FS.filesystems.IDBFS, {}, mountDir);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Pyodide Web Worker\nDESCRIPTION: Web worker implementation that loads Pyodide, receives Python code and context data from the main thread, executes the Python code in the worker thread, and sends the result back. It uses message passing for communication.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/webworker.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// webworker.mjs\nimport { loadPyodide } from \"{{PYODIDE_CDN_URL}}pyodide.mjs\";\n\nlet pyodideReadyPromise = loadPyodide();\n\nself.onmessage = async (event) => {\n  // make sure loading is done\n  const pyodide = await pyodideReadyPromise;\n  const { id, python, context } = event.data;\n  // Now load any packages we need, run the code, and send the result back.\n  await pyodide.loadPackagesFromImports(python);\n  // make a Python dictionary with the data from `context`\n  const dict = pyodide.globals.get(\"dict\");\n  const globals = dict(Object.entries(context));\n  try {\n    // Execute the python code in this context\n    const result = await pyodide.runPythonAsync(python, { globals });\n    self.postMessage({ result, id });\n  } catch (error) {\n    self.postMessage({ error: error.message, id });\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Pyodide JavaScript Package in Python\nDESCRIPTION: Shows how to import the JavaScript Pyodide package in Python, allowing access to Pyodide's JavaScript functions from within Python code.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport pyodide_js\n```\n\n----------------------------------------\n\nTITLE: Custom Python Code Evaluation Implementation\nDESCRIPTION: Example of creating a custom evaluation function that returns additional information along with the result.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst my_eval_code = pyodide.runPython(`\n  from pyodide.code import eval_code\n  def my_eval_code(code, globals=None, locals=None):\n    extra_info = None\n    result = eval_code(code, globals, locals)\n    return globals[\"extra_info\"], result\n  my_eval_code\n`)\n\nfunction myRunPython(code){\n  return my_eval_code(code, pyodide.globals);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fetch with Optional Arguments\nDESCRIPTION: Examples of correctly using the fetch API with optional arguments from Python in Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom pyodide.ffi import to_js\nfrom js import Object\nresp = await js.fetch('example.com/some_api',\n  method= \"POST\",\n  body= json.dumps({ \"some\" : \"json\" }),\n  credentials= \"same-origin\",\n  headers= Object.fromEntries(to_js({ \"Content-Type\": \"application/json\" })),\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom pyodide.ffi import to_js\nfrom js import Object\nresp = await js.fetch('example.com/some_api', to_js({\n  \"method\": \"POST\",\n  \"body\": json.dumps({ \"some\" : \"json\" }),\n  \"credentials\": \"same-origin\",\n  \"headers\": { \"Content-Type\": \"application/json\" }\n}, dict_converter=Object.fromEntries)\n```\n\n----------------------------------------\n\nTITLE: Redirecting Standard Streams in Pyodide\nDESCRIPTION: Example of implementing stdin redirection in Python using contextlib._RedirectStream.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import _RedirectStream\nclass redirect_stdin(_RedirectStream):\n    _stream = \"stdin\"\n```\n\n----------------------------------------\n\nTITLE: JavaScript to Python Type Translation Table (Markdown)\nDESCRIPTION: A table showing how JavaScript types are converted to Python types. Notable conversions include Number to int/float, BigInt to int, String to str, Boolean to bool, and both undefined and null to None.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| JavaScript           | Python                                                |\n| -------------------- | ----------------------------------------------------- |\n| {js:data}`Number`    | {py:class}`int` or {py:class}`float` as appropriate\\* |\n| {js:data}`BigInt`    | {py:class}`int`                                       |\n| {js:data}`String`    | {py:class}`str`                                       |\n| {js:data}`Boolean`   | {py:class}`bool`                                      |\n| {js:data}`undefined` | {py:data}`None`                                       |\n| {js:data}`null`      | {py:data}`None`                                       |\n```\n\n----------------------------------------\n\nTITLE: Mounting NODEFS in Pyodide\nDESCRIPTION: Demonstrates how to mount the native Node.js file system using NODEFS to access local files in Node.js environment.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/file-system.md#2025-04-17_snippet_3\n\nLANGUAGE: pyodide\nCODE:\n```\nlet mountDir = \"/mnt\";\npyodide.FS.mkdirTree(mountDir);\npyodide.FS.mount(pyodide.FS.filesystems.NODEFS, { root: \".\" }, mountDir);\npyodide.runPython(\"import os; print(os.listdir('/mnt'))\");\n// ==> The list of files in the Node working directory\n```\n\n----------------------------------------\n\nTITLE: Detecting Pyodide Runtime Environment\nDESCRIPTION: Code examples for detecting if Python code is running in Pyodide environment, both at runtime and build time.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nif sys.platform == 'emscripten':\n    # running in Pyodide or other Emscripten based build\n```\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nif \"pyodide\" in sys.modules:\n   # running in Pyodide\n```\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nif \"PYODIDE\" in os.environ:\n    # building for Pyodide\n```\n\n----------------------------------------\n\nTITLE: Python Object Map Access\nDESCRIPTION: Example demonstrating how to access JavaScript object fields using as_object_map()\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pyodide.code import run_js\n\nobj = run_js(\n    \"\"\"\n    ({\n      a: 7,\n      b: 9,\n      $c: 11\n    })\n    \"\"\"\n)\nobj_map = obj.as_object_map()\nassert obj_map[\"$c\"] == 11\n```\n\n----------------------------------------\n\nTITLE: Python Iterator Implementation\nDESCRIPTION: Example showing how to iterate over a JavaScript proxy object in Python\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfor v in proxy:\n    # do something\n```\n\n----------------------------------------\n\nTITLE: Adapting Python JSON to JavaScript JSON with PyProxy\nDESCRIPTION: Introduces the PyProxy.asJsJson method to convert between Python JSON (lists and dicts) and JavaScript JSON (Arrays and Objects).\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nPyProxy.asJsJson()\n```\n\n----------------------------------------\n\nTITLE: Cross-Language Error Handling in Pyodide\nDESCRIPTION: Shows how JavaScript errors can be caught and handled in Python code using try-except blocks and the JsException class.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/release-notes/v0.17.0.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction jserror(){\n   throw new Error(\"ooops!\");\n}\npyodide.runPython(`\n   from js import jserror\n   from pyodide import JsException\n   try:\n       jserror()\n   except JsException as e:\n      print(str(args)) # prints \"TypeError: ooops!\"\n`);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Async Iterator PyProxy Example\nDESCRIPTION: Demonstrates how PyProxies of Async iterators can now be used as async iterable JavaScript objects in for-await loops. This fixes a previous TypeError issue when attempting to iterate over async iterator PyProxies.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfor await (let x of async_iterator_pyproxy) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript Object Properties in Python\nDESCRIPTION: Demonstrates how str() behaves with JavaScript proxies when toString is undefined or throws an error. It falls back to Object.prototype.toString if needed.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nstr(jsproxy)\n```\n\n----------------------------------------\n\nTITLE: Flexible Callable PyProxy Invocation in JavaScript\nDESCRIPTION: Adds callRelaxed method to callable PyProxies, which discards extra arguments instead of raising a TypeError.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npyProxy.callRelaxed(...args)\n```\n\n----------------------------------------\n\nTITLE: Executing Code in Custom Namespace with Pyodide\nDESCRIPTION: Example showing how to execute Python code in a custom namespace using runPython and handle variable injection from JavaScript.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_0\n\nLANGUAGE: pyodide\nCODE:\n```\nlet my_namespace = pyodide.globals.get(\"dict\")();\npyodide.runPython(`x = 1 + 1`, { globals: my_namespace });\npyodide.runPython(`y = x ** x`, { globals: my_namespace });\nmy_namespace.get(\"y\"); // ==> 4\n```\n\nLANGUAGE: pyodide\nCODE:\n```\nlet my_namespace = pyodide.toPy({ x: 2, y: [1, 2, 3] });\npyodide.runPython(\n  `\n  assert x == y[1]\n  z = x ** x\n  `,\n  { globals: my_namespace }\n);\nmy_namespace.get(\"z\"); // ==> 4\n```\n\n----------------------------------------\n\nTITLE: Mounting Native Browser File System\nDESCRIPTION: Shows how to use the experimental File System Access API to mount a native file system directory in browser-based Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/file-system.md#2025-04-17_snippet_4\n\nLANGUAGE: pyodide\nCODE:\n```\nconst dirHandle = await showDirectoryPicker();\nconst permissionStatus = await dirHandle.requestPermission({\n  mode: \"readwrite\",\n});\n\nif (permissionStatus !== \"granted\") {\n  throw new Error(\"readwrite access to directory not granted\");\n}\n\nconst nativefs = await pyodide.mountNativeFS(\"/mount_dir\", dirHandle);\n\npyodide.runPython(`\n  import os\n  print(os.listdir('/mount_dir'))\n`);\n```\n\n----------------------------------------\n\nTITLE: Implementing runPython in JavaScript\nDESCRIPTION: Basic implementation of runPython function in Pyodide that evaluates Python code in the global context.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction runPython(code) {\n  pyodide.pyodide_py.code.eval_code(code, pyodide.globals);\n}\n```\n\n----------------------------------------\n\nTITLE: Python to JavaScript Type Translation Table (Markdown)\nDESCRIPTION: A table showing how immutable Python types are converted to JavaScript types. Notable conversions include int to Number/BigInt, float to Number, str to String, bool to Boolean, and None to undefined.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Python            | JavaScript                               |\n| ----------------- | ---------------------------------------- |\n| {py:class}`int`   | {js:data}`Number` or {js:data}`BigInt`\\* |\n| {py:class}`float` | {js:data}`Number`                        |\n| {py:class}`str`   | {js:data}`String`                        |\n| {py:class}`bool`  | {js:data}`Boolean`                       |\n| {py:data}`None`   | {js:data}`undefined`                     |\n```\n\n----------------------------------------\n\nTITLE: Forward Declaration of Owned References in C Function\nDESCRIPTION: Shows how to declare all owned references at the beginning of a C function in Pyodide. Includes a success flag and all PyObject pointers that will be created during execution for proper cleanup in the finally block.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n  bool success = false;\n  // Note: these are all the objects that we will own. If a function returns\n  // a borrow, we XINCREF the result so that we can CLEAR it in the finally block.\n  // Reference counting is hard, so it's good to be as explicit and consistent\n  // as possible!\n  PyObject* sys_modules = NULL;\n  PyObject* importlib_machinery = NULL;\n  PyObject* ModuleSpec = NULL;\n  PyObject* spec = NULL;\n  PyObject* __dir__ = NULL;\n  PyObject* module_dict = NULL;\n  // result\n  PyObject* module = NULL;\n```\n\n----------------------------------------\n\nTITLE: Reference Counting in Loops in C\nDESCRIPTION: Demonstrates proper reference counting when handling objects in a loop. Shows how to clear temporary variables inside the loop to prevent reference leaks and ensure cleanup even if operations fail mid-loop.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_10\n\nLANGUAGE: C\nCODE:\n```\n  // refcounted variable declarations\n  PyObject* pyentry = NULL;\n  // ... other stuff\n  Py_ssize_t n = PySequence_Length(pylist);\n  for (Py_ssize_t i = 0; i < n; i++) {\n    pyentry = PySequence_GetItem(pydir, i);\n    FAIL_IF_MINUS_ONE(do_something(pyentry));\n    Py_CLEAR(pyentry); // important to use Py_CLEAR and not Py_decref.\n  }\n\n  success = true\nfinally:\n  // have to clear pyentry at end too in case do_something failed in the loop body\n  Py_CLEAR(pyentry);\n```\n\n----------------------------------------\n\nTITLE: Finally Block in C Function\nDESCRIPTION: Shows the finally block pattern where all owned references are cleared in the same order they were declared. This ensures proper cleanup regardless of how the function exits, preventing memory leaks.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_9\n\nLANGUAGE: C\nCODE:\n```\n  success = true;\nfinally:\n  Py_CLEAR(sys_modules);\n  Py_CLEAR(importlib_machinery);\n  Py_CLEAR(ModuleSpec);\n  Py_CLEAR(spec);\n  Py_CLEAR(__dir__);\n  Py_CLEAR(module_dict);\n  if(!success){\n    Py_CLEAR(result);\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Script in a Web Worker with Pyodide\nDESCRIPTION: Example of a consumer script that uses the worker API to run a Python script that calculates the standard deviation of an array. The script sends data to the worker and receives the result asynchronously.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/webworker.md#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { asyncRun } from \"./workerApi.js\";\n\nconst script = `\n    import statistics\n    statistics.stdev(A_rank)\n`;\n\nconst context = {\n  A_rank: [0.8, 0.4, 1.2, 3.7, 2.6, 5.8],\n};\n\nasync function main() {\n  const { result, error } = await asyncRun(script, context);\n  if (result) {\n    console.log(\"pyodideWorker result:\", result);\n  } else if (error) {\n    console.log(\"pyodideWorker error:\", error);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Using to_js for Automatic Memory Management\nDESCRIPTION: Demonstrates using to_js to prevent memory leaks when returning values to JavaScript.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_9\n\nLANGUAGE: pyodide\nCODE:\n```\nlet test = pyodide.runPython(`\n    from pyodide.ffi import to_js\n    def test(x):\n        return to_js([n*n for n in x])\n    test\n`);\nlet result = test([1,2,3,4]);\n// result is the array [1, 4, 9, 16], nothing needs to be destroyed.\n```\n\n----------------------------------------\n\nTITLE: Async SDL Game Loop in Python\nDESCRIPTION: Recommended implementation of a game loop for SDL in Pyodide using async/await to prevent blocking the main thread.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/sdl.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nasync def run_game():\n    while True:\n        do_something()\n        draw_canvas()\n        await asyncio.sleep(1 / fps)\n```\n\n----------------------------------------\n\nTITLE: Guard Block in C Function Example\nDESCRIPTION: Demonstrates the guard block pattern in a Pyodide C function. This initial segment performs sanity checks on inputs without creating owned references, returning errors early if inputs are invalid.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nPyObject*\nJsImport_CreateModule(PyObject* self, PyObject* args)\n{\n  // Guard\n  PyObject* name;\n  PyObject* jsproxy;\n  // PyArg_UnpackTuple uses an unusual calling convention:\n  // It returns `false` on failure...\n  if (!PyArg_UnpackTuple(args, \"create_module\", 2, 2, &spec, &jsproxy)) {\n    return NULL;\n  }\n  if (!JsProxy_Check(jsproxy)) {\n    PyErr_SetString(PyExc_TypeError, \"package is not an instance of jsproxy\");\n    return NULL;\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing micropip from PyPI in Pyodide\nDESCRIPTION: Demonstrates how to install a specific version of micropip from PyPI in Pyodide using JavaScript. This allows users to use a different micropip version than the one shipped with Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nawait pyodide.loadPackage('packaging')\nawait pyodide.loadPackage('<URL of the micropip wheel on PyPI>')\n```\n\n----------------------------------------\n\nTITLE: JavaScript to CPython Calling Convention Adapter Example for Integer Return Type\nDESCRIPTION: Example of using EM_JS_NUM for a function that returns an integer value. This ensures proper error handling when accessing JavaScript object properties from C code.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nEM_JS_NUM(int, hiwire_get_length, (JsRef idobj), {\n  return Hiwire.get_value(idobj).length;\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for Coroutine Memory Management (Before)\nDESCRIPTION: Example showing the old way of handling Python coroutines in JavaScript, where manual destruction of the coroutine was required after awaiting it to prevent memory leaks.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nasync function runPythonAsync(code, globals) {\n  let coroutine = Module.pyodide_py.eval_code_async(code, globals);\n  try {\n    return await coroutine;\n  } finally {\n    coroutine.destroy();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal C Library meta.yaml Configuration for Pyodide\nDESCRIPTION: A template YAML configuration for packaging C libraries in Pyodide. It specifies package metadata, source information, runtime requirements, and build instructions for creating a static library compatible with WebAssembly.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: <name>\n  version: <version>\n\nsource:\n  url: <url>\n  sha256: <sha256>\n\nrequirements:\n  run:\n    - <requirement>\n\nbuild:\n  type: static_library\n  script: |\n    emconfigure ./configure\n    emmake make -j ${PYODIDE_JOBS:-3}\n```\n\n----------------------------------------\n\nTITLE: Loading Archives in JavaScript with Pyodide\nDESCRIPTION: Demonstrates loading and unpacking Python package archives using JavaScript fetch API and Pyodide's unpackArchive function. Handles .tar.gz, .zip, and .whl formats.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-custom-python-code.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet response = await fetch(\"https://.../your_package.tar.gz\"); // .zip, .whl, ...\nlet buffer = await response.arrayBuffer();\nawait pyodide.unpackArchive(buffer, \"gztar\"); // by default, unpacks to the current dir\npyodide.pyimport(\"your_package\");\n```\n\n----------------------------------------\n\nTITLE: Accessing JavaScript Object Properties with Reserved Python Keywords\nDESCRIPTION: Shows how to access JavaScript object properties that conflict with Python reserved keywords using getattr and setattr.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\npeople = {global: \"lots and lots\"};\npyodide.runPython(`\n    from js import people\n    setattr(people, 'global', 'even more')\n    print(getattr(people, 'global'))\n    `);\n```\n\n----------------------------------------\n\nTITLE: Using JsProxy with JavaScript Arrays\nDESCRIPTION: Enhanced JsProxy implementation that supports slice subscripting, += operator, and extend method for JavaScript arrays.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# Assuming js_array is a JsProxy wrapping a JavaScript array\n\n# Slice subscripting\nsubarray = js_array[1:4]\n\n# Using += operator\njs_array += [1, 2, 3]\n\n# Using extend method\njs_array.extend([4, 5, 6])\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Building a Pyodide Wheel with cibuildwheel\nDESCRIPTION: A GitHub Actions workflow example that uses cibuildwheel to build a Pyodide-compatible wheel. This is a simpler approach that leverages cibuildwheel's built-in support for Pyodide as a target platform.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nruns-on: ubuntu-22.04 # or ubuntu-latest\n  steps:\n  - uses: actions/checkout@v4\n  - uses: pypa/cibuildwheel@v2.20.0\n    env:\n       CIBW_PLATFORM: pyodide\n```\n\n----------------------------------------\n\nTITLE: Using micropip.install with Optional Dependencies Parameter\nDESCRIPTION: Enhanced micropip.install function that accepts a deps parameter to control whether dependencies should be installed, introduced in PR #2433.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmicropip.install(\"package_name\", deps=False)  # Install without dependencies\n```\n\n----------------------------------------\n\nTITLE: Building Pyodide with Debug Symbols\nDESCRIPTION: Commands to rebuild Pyodide with debug symbols for better debugging experience. This retains internal function names but does not prevent inlining or create source maps to the original C code.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/debugging.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntouch src/core/jsproxy.h\nPYODIDE_SYMBOLS=1 make -C cpython rebuild-all\nPYODIDE_SYMBOLS=1 make all-but-packages\n```\n\n----------------------------------------\n\nTITLE: Inspecting WebAssembly Function Pointer in Browser Console\nDESCRIPTION: JavaScript code to inspect a WebAssembly function pointer from the stack during debugging. Used to identify function signatures when troubleshooting function signature mismatch errors.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/debugging.md#2025-04-17_snippet_1\n\nLANGUAGE: js\nCODE:\n```\npyodide._module.wasmTable.get(stack[4].value) // stack[4].value === 13109\n```\n\n----------------------------------------\n\nTITLE: Building a WASM/Emscripten Wheel Using pyodide-build\nDESCRIPTION: Executes the pyodide build command in the package directory to create a WebAssembly-compatible wheel in the dist/ folder. This is the core command for building binary packages for Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npyodide build\n```\n\n----------------------------------------\n\nTITLE: Using micropip.freeze to Create Lockfile\nDESCRIPTION: Function to record the current set of loaded packages into a repodata.json file, allowing for reproducible environments.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nmicropip.freeze()  # Creates a repodata.json lockfile\n```\n\n----------------------------------------\n\nTITLE: Using Event Listener Wrappers in Pyodide\nDESCRIPTION: Python wrappers for JavaScript addEventListener and removeEventListener, providing a more Pythonic interface for DOM event handling.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom pyodide import add_event_listener, remove_event_listener\n\n# Example usage\ndef click_handler(event):\n    print(\"Clicked!\", event)\n\nelement = document.getElementById(\"my-button\")\nadd_event_listener(element, \"click\", click_handler)\n\n# Later remove the listener\nremove_event_listener(element, \"click\", click_handler)\n```\n\n----------------------------------------\n\nTITLE: Setting up documentation for pyodide.code module using Sphinx directives\nDESCRIPTION: This code snippet uses Sphinx restructuredtext directives to set up automatic documentation generation for the pyodide.code module. It specifies the current module, includes all members, and configures autosummary options to display the module's API without nesting.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api/code.md#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pyodide.code\n\n.. automodule:: pyodide.code\n   :members:\n   :autosummary:\n   :autosummary-no-nesting:\n```\n\n----------------------------------------\n\nTITLE: Assigning Values Back to JavaScript Arrays\nDESCRIPTION: Shows how to modify JavaScript arrays from Python using the assign method.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_12\n\nLANGUAGE: pyodide\nCODE:\n```\npyodide.runPython(`\n    numpy_array[1,1] = 77\n    jsarray.assign(a)\n`);\nconsole.log(jsarray); // [1, 2, 3, 4, 77, 6]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Emscripten SDK for Pyodide Package Building\nDESCRIPTION: Clones the Emscripten SDK repository and changes into the directory to prepare for installing the correct Emscripten version needed for Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/emscripten-core/emsdk.git\ncd emsdk\n```\n\n----------------------------------------\n\nTITLE: Building Python Wheels for Package Distribution\nDESCRIPTION: This bash snippet shows how to build Python wheels for package distribution using the build module.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install build\npython -m build\n```\n\n----------------------------------------\n\nTITLE: Generating meta.yaml File for Pyodide Package\nDESCRIPTION: This command uses the pyodide skeleton tool to generate a meta.yaml file for a new package in the Pyodide distribution.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npyodide skeleton pypi <package-name>\n```\n\n----------------------------------------\n\nTITLE: Direct Execution of External Python Code\nDESCRIPTION: Simple method to fetch and execute a Python script directly using Pyodide's runPython function combined with the fetch API.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-custom-python-code.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.runPython(await (await fetch(\"https://some_url/.../code.py\")).text());\n```\n\n----------------------------------------\n\nTITLE: Loading Wheels from Emscripten File System with micropip\nDESCRIPTION: Example of using the emfs protocol with micropip to load wheels from the Emscripten file system, introduced in PR #2767.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nmicropip.install(\"emfs:/path/to/wheel.whl\")\n```\n\n----------------------------------------\n\nTITLE: Using Python Timeout/Interval Wrappers in Pyodide\nDESCRIPTION: Python wrappers for JavaScript setTimeout, clearTimeout, setInterval, and clearInterval functions, providing a more Pythonic interface.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom pyodide import set_timeout, clear_timeout, set_interval, clear_interval\n\n# Example usage\ntimer_id = set_timeout(my_function, 1000)  # Run after 1000ms\nclear_timeout(timer_id)  # Cancel the timeout\n\ninterval_id = set_interval(my_function, 500)  # Run every 500ms\nclear_interval(interval_id)  # Stop the interval\n```\n\n----------------------------------------\n\nTITLE: Node File Reader Implementation\nDESCRIPTION: Implementation of a Node.js file reader class for handling file descriptors as input streams.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/streams.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst tty = require(\"tty\");\nclass NodeReader {\n  constructor(fd) {\n    this.fd = fd;\n    this.isatty = tty.isatty(fd);\n  }\n\n  read(buffer) {\n    return fs.readSync(this.fd, buffer);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example meta.yaml Structure for Pyodide Packages\nDESCRIPTION: A YAML snippet showing the basic structure of a meta.yaml file for Pyodide packages. It includes common sections like package, source, build, requirements, and test.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/meta-yaml.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npackage:\n  name: example-package\n  version: 1.0.0\n  top-level:\n    - example_module\n\nsource:\n  url: https://example.com/example-package-1.0.0.tar.gz\n  sha256: abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890\n\nbuild:\n  cflags: -O3\n  script: |\n    ./configure\n    make\n\nrequirements:\n  run:\n    - numpy\n    - scipy\n\ntest:\n  imports:\n    - example_module\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Table - Python Modules\nDESCRIPTION: ReStructuredText table documenting the core Python modules in Pyodide, including code evaluation, console, FFI, HTTP, and webloop functionality.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api.md#2025-04-17_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n\n   *  - :py:mod:`pyodide.code`\n      - Utilities for evaluating Python and JavaScript code.\n   *  - :py:mod:`pyodide.console`\n      - Similar to the builtin :py:mod:`code` module but handles top level await. Used\n        for implementing the Pyodide console.\n   *  - :py:mod:`pyodide.ffi`\n      - The :py:class:`~pyodide.ffi.JsProxy` class and utilities to help interact with JavaScript code.\n   *  - :py:mod:`pyodide.http`\n      - Defines :py:func:`~pyodide.http.pyfetch` and other functions for making network requests.\n   *  - :py:mod:`pyodide.webloop`\n      - The Pyodide event loop implementation. This is automatically configured\n        correctly for most use cases it is unlikely you will need it outside of niche\n        use cases.\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Emscripten WASM-EH Sysroot\nDESCRIPTION: This shell script installs a custom Rust Emscripten sysroot with WASM exception handling support. It's necessary for building Rust projects compatible with the pyodide_2025_0 ABI.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/abi.md#2025-04-17_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nrustup toolchain install nightly-2025-02-01\nTOOLCHAIN_ROOT=$(rustup which --toolchain nightly-2025-02-01 rustc)\nRUSTLIB=$TOOLCHAIN_ROOT/lib/rustlib\nwget https://github.com/pyodide/rust-emscripten-wasm-eh-sysroot/releases/download/emcc-4.0.6_nightly-2025-02-01/emcc-4.0.6_nightly-2025-02-01.tar.bz2\ntar -xf emcc-4.0.6_nightly-2025-02-01.tar.bz2 --directory=$RUSTLIB\n```\n\n----------------------------------------\n\nTITLE: Performing Instance Check with Pyodide FFI in JavaScript\nDESCRIPTION: Shows how to perform an instance check using the PyProxy class from the Pyodide foreign function interface. This example loads Pyodide, runs Python code, and checks if the result is an instance of PyProxy.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/js-api.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst pyodide = loadPyodide();\nconst result = pyodide.runPython(\"... code here\");\nif (result instanceof pyodide.ffi.PyProxy) {\n  // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Using pyodide.code.run_js API in Python\nDESCRIPTION: API feature that allows executing JavaScript code from Python, introduced in PR #2426.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\npyodide.code.run_js(\"JavaScript code here\")\n```\n\n----------------------------------------\n\nTITLE: Using micropip.install with Pre-release Version Support\nDESCRIPTION: Enhanced micropip.install function that accepts a pre parameter to include pre-release and development versions, introduced in PR #2542.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nmicropip.install(\"package_name\", pre=True)  # Include pre-release versions\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Browser Runtime Selection\nDESCRIPTION: Commands to run tests using specific browser runtimes (Firefox, Chrome, or Node).\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/testing.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest --runtime firefox\npytest --runtime chrome\npytest --runtime node\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas for SDL in JavaScript\nDESCRIPTION: Creates and configures an HTML canvas element for SDL rendering in Pyodide. The canvas must be an HTMLCanvasElement with id 'canvas'.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/sdl.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet sdl2Canvas = document.createElement(\"canvas\");\nsdl2Canvas.id = \"canvas\";\npyodide.canvas.setCanvas2D(sdl2Canvas);\n```\n\n----------------------------------------\n\nTITLE: Cloning the Pyodide Repository and Adding Upstream Remote\nDESCRIPTION: Commands for cloning your forked Pyodide repository with submodules and setting up the upstream remote for syncing with the main repository.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/contributing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/<your-username>/pyodide.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/pyodide/pyodide.git\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies for Pyodide Development\nDESCRIPTION: Command to install the Python package requirements for Pyodide development using pip and the requirements.txt file.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/contributing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript ndarray with Python Buffer\nDESCRIPTION: Demonstrates how to access Python buffer data using getBuffer() and create a JavaScript ndarray. Shows proper handling of readonly buffers and memory management with release().\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nlet proxy = pyodide.globals.get(\"some_numpy_ndarray\");\nlet buffer = proxy.getBuffer();\nproxy.destroy();\ntry {\n  if (buffer.readonly) {\n    // We can't stop you from changing a readonly buffer, but it can cause undefined behavior.\n    throw new Error(\"Uh-oh, we were planning to change the buffer\");\n  }\n  let array = new ndarray(\n    buffer.data,\n    buffer.shape,\n    buffer.strides,\n    buffer.offset,\n  );\n  // manipulate array here\n  // changes will be reflected in the Python ndarray!\n} finally {\n  buffer.release(); // Release the memory when we're done\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Tests for Pyodide Packages\nDESCRIPTION: This Python snippet shows how to write tests for a Pyodide package using the pytest_pyodide framework.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_pyodide import run_in_pyodide\n\n@run_in_pyodide(packages=[\"<package-name>\"])\ndef test_mytestname(selenium):\n  import <package-name>\n  assert package.do_something() == 5\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Checking PyProxy Capabilities in JavaScript\nDESCRIPTION: Shows how to check PyProxy capabilities using instanceof instead of the removed methods like supportsHas and isCallable.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nif (pyProxy instanceof pyodide.ffi.PyCallable) {\n  // PyProxy is callable\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Input in Pyodide\nDESCRIPTION: Demonstrates how to use pyodide.setStdin to set the standard input, which now does not treat an empty string as EOF.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.setStdin(input)\n```\n\n----------------------------------------\n\nTITLE: Handling Interrupt Buffer in Worker Thread (JavaScript)\nDESCRIPTION: This code snippet shows how to handle messages in a Pyodide worker, including setting the interrupt buffer and running Python code. It uses a message event listener to process commands from the main thread.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/keyboard-interrupts.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nself.addEventListener(\"message\", (msg) => {\n  if (msg.data.cmd === \"setInterruptBuffer\") {\n    pyodide.setInterruptBuffer(msg.data.interruptBuffer);\n    return;\n  }\n  if (msg.data.cmd === \"runCode\") {\n    pyodide.runPython(msg.data.code);\n    return;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Package Dependencies in meta.yaml\nDESCRIPTION: This YAML snippet shows how to specify build and runtime dependencies for a package in the meta.yaml file.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrequirements:\n  host:\n    # Dependencies that are needed to build the package\n    - cffi\n  run:\n    # Dependencies that are needed to run the package\n    - cffi\n    - numpy\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Building a Pyodide Wheel\nDESCRIPTION: A complete GitHub Actions workflow example for building a Pyodide-compatible wheel using pyodide-build directly. It sets up the required Python version, installs pyodide-build, configures Emscripten, and builds the wheel.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nruns-on: ubuntu-22.04 # or ubuntu-latest\n  steps:\n  - uses: actions/checkout@v4\n  - uses: actions/setup-python@v5\n    with:\n       python-version: 3.13\n  - run: |\n      pip install pyodide-build>=0.28.0\n      echo EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version) >> $GITHUB_ENV\n  - uses: mymindstorm/setup-emsdk@v14\n    with:\n       version: ${{ env.EMSCRIPTEN_VERSION }}\n  - run: pyodide build\n```\n\n----------------------------------------\n\nTITLE: Transformed C++ Code with JavaScript Exception Handling\nDESCRIPTION: Compiler-transformed C++ code showing how exception handling is implemented using JavaScript trampolines and global state variables.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/abi.md#2025-04-17_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nvoid try_body(int *x, int *y) {\n    *x = g();\n    *y = h();\n}\n\nthread_local uintptr_t __THREW__ = 0;\nthread_local int __threwValue = 0;\n\nint f() {\n    int x;\n    int y;\n    invoke_vii(&try_body, x, y);\n    if (__THREW__) {\n        // inspect __threwValue and execute appropriate catch body here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configurable Callable PyProxy Invocation in JavaScript\nDESCRIPTION: Introduces callWithOptions method for callable PyProxies, allowing more control over function invocation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npyProxy.callWithOptions(options, ...args)\n```\n\n----------------------------------------\n\nTITLE: Creating a Pyodide Virtual Environment for Testing\nDESCRIPTION: Creates a virtual environment specifically configured for testing packages with Pyodide. This uses Pyodide's experimental command line runner.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npyodide venv .venv-pyodide\n```\n\n----------------------------------------\n\nTITLE: Building a Pyodide Package\nDESCRIPTION: This bash command builds a Pyodide package using the pyodide build-recipes command.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npyodide build-recipes <package-name> --install\n```\n\n----------------------------------------\n\nTITLE: Loading Pyodide Using ES6 Imports in Service Worker\nDESCRIPTION: Updated implementation using ES6 import statements for module-type service workers. This approach is required when using module-type workers as they cannot use importScripts.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/service-worker.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/* sw.js */\n/* MODIFY IMPORT PATHS TO POINT TO YOUR SCRIPTS */\n// We're using the npm package xhr-shim, which assigns self.XMLHttpRequestShim\nimport \"./node_modules/xhr-shim/src/index.js\";\nself.XMLHttpRequest = self.XMLHttpRequestShim;\nimport \"./pyodide.asm.js\"; // IMPORTANT: This is compulsory in a module-type service worker, which cannot use importScripts\nimport { loadPyodide } from \"./pyodide.mjs\"; // Note the .mjs extension\n```\n\n----------------------------------------\n\nTITLE: Using JsProxy.js_id Attribute for Object Identity\nDESCRIPTION: Enhancement that allows using JavaScript object identity as a dictionary key through the js_id attribute on JsProxy objects.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\njs_object = pyodide.globals.get(\"some_js_object\")\njs_id = js_object.js_id  # Use for object identity as dictionary key\n```\n\n----------------------------------------\n\nTITLE: Building and Installing a Binary Package for Pyodide Testing\nDESCRIPTION: Demonstrates the workflow for building a binary package with pyodide build and then installing the resulting wheel with optional test dependencies for testing in the Pyodide environment.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# Build the binary package\npyodide build\n# Install it\npip install dist/the_wheel-cp310-cp310-emscripten_3_1_20_wasm32.whl[tests]\n```\n\n----------------------------------------\n\nTITLE: Adding Build Commands to meta.yaml\nDESCRIPTION: This YAML snippet demonstrates how to add extra build commands and environment variables to the meta.yaml file for a Pyodide package.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  script: |\n    wget https://example.com/file.tar.gz\n    export MY_ENV_VARIABLE=FOO\n```\n\n----------------------------------------\n\nTITLE: Python Exception Handling for JavaScript Errors\nDESCRIPTION: Example showing how to catch JavaScript exceptions in Python code using the JsException type. This demonstrates the error propagation enabled by the EM_JS macros.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntry:\n  jsfunc()\nexcept JsException:\n  print(\"Caught an exception thrown in JavaScript!\")\n```\n\n----------------------------------------\n\nTITLE: Version Bumping for Major Release\nDESCRIPTION: Commands to update version and tag for a major release. The bump_version.py script creates a release commit and tags it with the specified version.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./tools/bump_version.py 0.20.0 --tag\n```\n\n----------------------------------------\n\nTITLE: Using HTML-Pyodide Lexer for HTML with Embedded JavaScript and Python\nDESCRIPTION: Shows how the html-pyodide lexer provides syntax highlighting for HTML containing JavaScript that itself contains embedded Python code. The example runs Python code that imports sys and returns the Python version.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/sphinx_pyodide/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html-pyodide\nCODE:\n```\n<div></div>\n<script type=\"text/javascript\">\nconsole.log(pyodide.runPython(`\n    import sys\n    sys.version\n`));\n</script>\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Commit and Tag\nDESCRIPTION: Command to push the release commit and tag to the upstream repository, which triggers the release CI process.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push upstream main 0.20.0\n```\n\n----------------------------------------\n\nTITLE: Setting Development Version After Release\nDESCRIPTION: Commands to set the version back to the next development version after a release, including committing and pushing the change.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit switch main\n./tools/bump_version.py 0.21.0 --dev\ngit push upstream main\n```\n\n----------------------------------------\n\nTITLE: Creating Backport Branch\nDESCRIPTION: Command to create a backport branch on top of the stable branch, containing all changes marked for backporting.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backports.py backport-branch\n```\n\n----------------------------------------\n\nTITLE: Applying CPython Patches\nDESCRIPTION: Commands to apply existing patches to CPython codebase using git am command.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ngit am ~/path/to/pyodide/cpython/patches/*\n```\n\n----------------------------------------\n\nTITLE: Running pytest in the Pyodide Environment\nDESCRIPTION: Executes pytest within the Pyodide virtual environment to test a package for compatibility with Pyodide. This is a common approach for running tests in many Python packages.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npython -m pytest\n```\n\n----------------------------------------\n\nTITLE: Custom Stdin Handler Class Implementation\nDESCRIPTION: Implementation of a custom stdin handler class that plays back a list of predefined results.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/streams.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass StdinHandler {\n  constructor(results, options) {\n    this.results = results;\n    this.idx = 0;\n    Object.assign(this, options);\n  }\n\n  stdin() {\n    return this.results[this.idx++];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript to CPython Calling Convention Adapter Example for JsRef Return Type\nDESCRIPTION: Example of using EM_JS_REF macro to adapt a JavaScript function that returns a JsRef to CPython calling convention for proper error handling. The function calls a JavaScript function with arguments and returns the result.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nEM_JS_REF(JsRef, hiwire_call, (JsRef idfunc, JsRef idargs), {\n  let jsfunc = Hiwire.get_value(idfunc);\n  let jsargs = Hiwire.get_value(idargs);\n  return Hiwire.new_value(jsfunc(... jsargs));\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Test List\nDESCRIPTION: Command to generate Python test list for Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\npython tools/make_test_list.py\n```\n\n----------------------------------------\n\nTITLE: Loading Pyodide with Custom Lockfile\nDESCRIPTION: Using the lockFileURL option with loadPyodide to specify an alternative repodata.json lockfile, particularly useful with micropip.freeze.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nloadPyodide({ lockFileURL: \"path/to/custom/repodata.json\" });\n```\n\n----------------------------------------\n\nTITLE: Finding PRs Missing Changelog Entries\nDESCRIPTION: Command to list pull requests labeled with \"needs backport\" that are missing changelog entries, to ensure documentation completeness.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backports.py missing-changelogs\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Tree\nDESCRIPTION: ReStructuredText directive defining the documentation tree structure for Python API documentation pages.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api.md#2025-04-17_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n\n   python-api/code.md\n   python-api/console.md\n   python-api/ffi.md\n   python-api/http.md\n   python-api/webloop.md\n```\n\n----------------------------------------\n\nTITLE: Browser File System Access Implementation\nDESCRIPTION: JavaScript implementation for mounting a native file system directory in Pyodide using the File System Access API with IndexedDB storage for directory handles.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/accessing-files.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { get, set } = await import(\n  \"https://unpkg.com/idb-keyval@5.0.2/dist/esm/index.js\"\n);\n\n/**\n * Mount a folder from your native filesystem as the directory\n * `pyodideDirectory`. If `directoryKey` was used previously, then it will reuse\n * the same folder as last time. Otherwise, it will show a directory picker.\n */\nasync function mountDirectory(pyodideDirectory, directoryKey) {\n  let directoryHandle = await get(directoryKey);\n  const opts = {\n    id: \"mountdirid\",\n    mode: \"readwrite\",\n  };\n  if (!directoryHandle) {\n    directoryHandle = await showDirectoryPicker(opts);\n    await set(directoryKey, directoryHandle);\n  }\n  const permissionStatus = await directoryHandle.requestPermission(opts);\n  if (permissionStatus !== \"granted\") {\n    throw new Error(\"readwrite access to directory not granted\");\n  }\n  const { syncfs } = await pyodide.mountNativeFS(\n    pyodideDirectory,\n    directoryHandle,\n  );\n  return syncfs;\n}\n```\n\n----------------------------------------\n\nTITLE: Node Writer Implementation\nDESCRIPTION: Implementation of a Node.js file writer class for handling output streams.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/streams.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require(\"fs\");\nconst tty = require(\"tty\");\nclass NodeWriter {\n  constructor(fd) {\n    this.fd = fd;\n    this.isatty = tty.isatty(fd);\n  }\n\n  write(buffer) {\n    return fs.writeSync(this.fd, buffer);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript to CPython Calling Convention Adapter Example for PyObject Return Type\nDESCRIPTION: Example of using EM_JS_REF macro with a function that returns a PyObject pointer, following the CPython calling convention for proper error handling in JavaScript to Python type conversion.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nEM_JS_REF(PyObject*, __js2python, (JsRef id), {\n  // body here\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Pyodide Repository and Building Dependencies\nDESCRIPTION: This set of bash commands clones the Pyodide repository and builds the necessary dependencies including Emscripten, Python, and pyodide_build.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/pyodide/pyodide\ncd pyodide\nmake -C emsdk\nmake -C cpython\nmake pyodide_build\n```\n\n----------------------------------------\n\nTITLE: Syncing Native File System Changes\nDESCRIPTION: Demonstrates how to synchronize changes made in the mounted file system to the native file system using syncfs.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/file-system.md#2025-04-17_snippet_5\n\nLANGUAGE: pyodide\nCODE:\n```\npyodide.runPython(`\n  with open('/mount_dir/new_file.txt', 'w') as f:\n    f.write(\"hello\");\n`);\n\n// new_file.txt does not exist in native file system\n\nawait nativefs.syncfs();\n\n// new_file.txt will now exist in native file system\n```\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.FS.syncfs(false, callback_func);\n```\n\n----------------------------------------\n\nTITLE: Keyboard Interrupt Handler Implementation\nDESCRIPTION: Example of implementing a keyboard interrupt handler in stdin processing.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/streams.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst interruptBuffer = new Int32Array(new SharedArrayBuffer(4));\npyodide.setInterruptBuffer(interruptBuffer);\npyodide.setStdin({\n  read(buf) {\n    interruptBuffer[0] = 2;\n    pyodide.checkInterrupt();\n    console.log(\n      \"This code won't ever be executed because pyodide.checkInterrupt raises an error!\",\n    );\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: JavaScript to CPython Calling Convention Adapter Example for Void Functions\nDESCRIPTION: Example of using EM_JS_NUM with errcode return type for a void function. The macro automatically returns -1 if an error occurs and 0 if successful, allowing for proper error propagation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nEM_JS_NUM(errcode, hiwire_set_member_int, (JsRef idobj, int idx, JsRef idval), {\n  Hiwire.get_value(idobj)[idx] = Hiwire.get_value(idval);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Python Testing Dependencies\nDESCRIPTION: Command to install required Python packages pytest-pyodide and pytest-httpserver for running Pyodide tests.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/testing.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-pyodide pytest-httpserver\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Pyodide with Vite\nDESCRIPTION: Basic HTML template that loads a JavaScript module which imports and uses Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/working-with-bundlers.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <title>Vite + Pyodide</title>\n    <script type=\"module\" src=\"main.mjs\"></script>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading Pyodide Using importScripts in Service Worker\nDESCRIPTION: Original implementation using importScripts() to load xhr-shim and Pyodide scripts in a service worker. This approach is used for traditional service workers.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/service-worker.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* sw.js */\n/* MODIFY IMPORT PATHS TO POINT TO YOUR SCRIPTS, REPLACE IF USING MODULE-TYPE WORKER */\n// We're using the npm package xhr-shim, which assigns self.XMLHttpRequestShim\nimportScripts(\"./node_modules/xhr-shim/src/index.js\");\nself.XMLHttpRequest = self.XMLHttpRequestShim;\nimportScripts(\"./pyodide.js\");\n// importScripts(\"./pyodide.asm.js\"); // if loading Pyodide after installation phase, you'll need to import this too\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating Required Emscripten Version for Pyodide\nDESCRIPTION: Retrieves the correct Emscripten version for Pyodide, installs it, activates it, and sets up the environment variables. This is essential for building binary packages compatible with Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nPYODIDE_EMSCRIPTEN_VERSION=$(pyodide config get emscripten_version)\n./emsdk install ${PYODIDE_EMSCRIPTEN_VERSION}\n./emsdk activate ${PYODIDE_EMSCRIPTEN_VERSION}\nsource emsdk_env.sh\n```\n\n----------------------------------------\n\nTITLE: Linking Shared Library with Minimal Exported Symbols in C/C++\nDESCRIPTION: This snippet demonstrates how to link a shared library for Pyodide with the minimal set of exported symbols. It uses Emscripten's side module option and explicitly lists the exported functions.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/abi.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n-sSIDE_MODULE=2 -sEXPORTED_FUNCTIONS=[\"_PyInit_MyCModule1\", \"_PyInit_MyCModule2]\n```\n\n----------------------------------------\n\nTITLE: File Module Import Example\nDESCRIPTION: Demonstration of writing and importing a Python module with proper cache invalidation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport importlib\nfrom pathlib import Path\nPath(\"mymodule.py\").write_text(\"\"\"\\\ndef hello():\n  print(\"hello world!\")\n\"\"\"\n)\nimportlib.invalidate_caches() # Make sure Python notices the new .py file\nfrom mymodule import hello\nhello()\n```\n\n----------------------------------------\n\nTITLE: Serving a Pyodide-compatible Wheel via HTTP Server\nDESCRIPTION: Starts a simple HTTP server to serve the built wheel, making it available for installation in Pyodide via loadPackage or micropip.install by URL.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npython3.10 -m http.server --directory dist\n```\n\n----------------------------------------\n\nTITLE: Activating the Pyodide Virtual Environment\nDESCRIPTION: Activates the Pyodide virtual environment, which replaces the standard Python interpreter with the Pyodide Python runtime for testing compatibility.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsource .venv-pyodide/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Cloning Pyodide Repository with Submodules\nDESCRIPTION: Command to recursively clone the Pyodide repository including the pyodide-build submodule.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/building-from-sources.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/pyodide/pyodide\n```\n\n----------------------------------------\n\nTITLE: Python Reserved Words Access\nDESCRIPTION: Example showing how to handle JavaScript properties that conflict with Python reserved words\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pyodide.code import run_js\no = run_js(\"({finally: 1, return: 2, from: 3, from_: 4})\")\nassert set(dir(o)) == {\"finally_\", \"return_\", \"from_\", \"from__\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Builds with Selected Packages\nDESCRIPTION: Example command showing how to build only specific packages (toolz and attrs) instead of the full Pyodide distribution.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/building-from-sources.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPYODIDE_PACKAGES=\"toolz,attrs\" make\n```\n\n----------------------------------------\n\nTITLE: Installing a Pure Python Package in Development Mode for Pyodide Testing\nDESCRIPTION: Installs a pure Python package in development mode within the Pyodide virtual environment for testing compatibility with Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Meta.yaml Package Build Recipe Format Example\nDESCRIPTION: This YAML structure shown in the meta.yaml specification demonstrates the available configuration keys for package build recipes, including requirements/host, package/top-level, build/vendor-sharedlib, build/type, and requirements/executable.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nmeta.yaml:\n  # Package metadata and build configuration\n  requirements:\n    host:  # Host dependencies required for building packages\n      - dependency1\n      - dependency2\n    executable:  # Executables required for building a package\n      - executable1\n      - executable2\n  package:\n    top-level:  # Top-level import names for the package\n      - importname1\n      - importname2\n  build:\n    vendor-sharedlib: true  # Vendors shared libraries into the wheel after building\n    type: package_type  # Specifies the type of the package (replaces library/sharedlibrary)\n```\n\n----------------------------------------\n\nTITLE: Converting Python Dictionary to JavaScript with toJs\nDESCRIPTION: Shows how toJs converts a Python dictionary to a JavaScript LiteralMap, allowing direct property access for string keys unless they match Map prototype functions.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntoJs(some_dict)\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Conda Environment for Pyodide Development\nDESCRIPTION: Commands to create and activate a Conda environment with the required dependencies for Pyodide development using the provided environment.yml file.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/contributing.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda env create -f environment.yml\nconda activate pyodide-env\n```\n\n----------------------------------------\n\nTITLE: Running a Custom Test Script in the Pyodide Environment\nDESCRIPTION: Shows how to run a custom test script (such as NumPy's runtests.py) within the Pyodide virtual environment as an alternative to standard testing frameworks.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/building-and-testing-packages.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npython runtests.py\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File\nDESCRIPTION: Command to run tests from a specific file in the Pyodide test suite.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/testing.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest path/to/test/file.py\n```\n\n----------------------------------------\n\nTITLE: Using JsArray Methods in Pyodide\nDESCRIPTION: Demonstrates the newly added remove and insert methods for JsArray objects in Pyodide.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\njs_array.remove(item)\njs_array.insert(index, item)\n```\n\n----------------------------------------\n\nTITLE: Function Body with Error Handling in C\nDESCRIPTION: Demonstrates the main body of a Pyodide C function with proper error checking. Shows how to handle both borrowed and owned references while ensuring errors are properly detected and propagated.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_8\n\nLANGUAGE: C\nCODE:\n```\n  name = PyUnicode_FromString(name_utf8);\n  FAIL_IF_NULL(name);\n  sys_modules = PyImport_GetModuleDict(); // returns borrow\n  Py_XINCREF(sys_modules);\n  FAIL_IF_NULL(sys_modules);\n  module = PyDict_GetItemWithError(sys_modules, name); // returns borrow\n  Py_XINCREF(module);\n  FAIL_IF_NULL(module);\n  if(module && !JsImport_Check(module)){\n    PyErr_Format(PyExc_KeyError,\n      \"Cannot mount with name '%s': there is an existing module by this name that was not mounted with 'pyodide.mountPackage'.\"\n      , name\n    );\n    FAIL();\n  }\n// ... [SNIP]\n```\n\n----------------------------------------\n\nTITLE: Migrating Patches with Git Commands for Pyodide Package Updates\nDESCRIPTION: A sequence of git commands to migrate patches when upgrading a package version in Pyodide. This workflow includes cloning the repository, creating branches for different versions, applying patches, rebasing, and generating new patch files.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --depth 1 --branch <version-tag>\ngit checkout -b pyodide-old-version\ngit am <pyodide-root>/packages/<package-name>/patches/*\ngit checkout -b pyodide-new-version\ngit rebase old-version --onto new-version\nrm <pyodide-root>/packages/<package-name>/patches/*\ngit format-patch <version-tag> -o <pyodide-root>/packages/<package-name>/patches/\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks\nDESCRIPTION: Command to run Pyodide benchmarks with numpy and matplotlib packages.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/testing.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPYODIDE_PACKAGES=\"numpy,matplotlib\" make benchmark\n```\n\n----------------------------------------\n\nTITLE: Importing PyProxy Type from Pyodide FFI in TypeScript\nDESCRIPTION: Demonstrates how to import the PyProxy type from the Pyodide foreign function interface for use in TypeScript type annotations.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/js-api.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { PyProxy } from \"pyodide/ffi\";\n```\n\n----------------------------------------\n\nTITLE: Implicit Python Reference Handling Example\nDESCRIPTION: Demonstrates how Python implicitly handles reference counting using a try/finally pattern, freeing references on both successful completion and exceptions. This illustrates why similar patterns are needed in C.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/core.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef f():\n  try: # implicit\n    a = do_something()\n    b = do_something_else()\n    c = a + b\n    return some_func(c)\n  finally:\n    # implicit, free references both on successful exit and on exception\n    decref(a)\n    decref(b)\n    decref(c)\n```\n\n----------------------------------------\n\nTITLE: Checking Thread Support in Python for Pyodide\nDESCRIPTION: This snippet demonstrates how to check if the platform supports creating new threads, which is important for Pyodide as it doesn't support threading or multiprocessing.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef _can_start_thread() -> bool:\n    if sys.platform == \"emscripten\":\n        return sys._emscripten_info.pthreads\n    return platform.machine() not in (\"wasm32\", \"wasm64\")\n\ncan_start_thread = _can_start_thread()\n\nif not can_start_thread:\n  n_threads = 1\n```\n\n----------------------------------------\n\nTITLE: Running Full pytest Suite for a Pyodide Package\nDESCRIPTION: This Python snippet demonstrates how to run a full pytest suite for a Pyodide package that vendors its own tests.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom pytest_pyodide import run_in_pyodide\n\n@run_in_pyodide(packages=[\"<package-name>-tests\", \"pytest\"])\ndef test_mytestname(selenium):\n  import pytest\n  assert pytest.main([\"--pyargs\", \"<package-name>\", \"-k\", \"some_filter\", ...]) == 0\n```\n\n----------------------------------------\n\nTITLE: HTML Consumer Implementation\nDESCRIPTION: HTML page that registers the service worker and provides functionality to fetch and log data. Includes service worker registration and data fetching logic.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/service-worker.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <script>\n      /* UPDATE PATHS TO POINT TO YOUR ASSETS */\n      const SERVICE_WORKER_PATH = \"/sw.js\";\n      const JSON_FILE_PATH = \"./data.json\";\n      /* IF USING MODULE-TYPE SERVICE WORKER, REPLACE THESE OPTIONS */\n      const REGISTRATION_OPTIONS = {\n        scope: \"/\",\n      };\n\n      // modified snippet from\n      // https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers\n      async function registerServiceWorker() {\n        if (\"serviceWorker\" in navigator) {\n          try {\n            const registration = await navigator.serviceWorker.register(\n              SERVICE_WORKER_PATH,\n              REGISTRATION_OPTIONS,\n            );\n            if (registration.installing) {\n              console.log(\"Service worker installing\");\n            } else if (registration.waiting) {\n              console.log(\"Service worker installed\");\n            } else if (registration.active) {\n              console.log(\"Service worker active\");\n            }\n          } catch (error) {\n            console.error(`Registration failed with ${error}`);\n          }\n        }\n      }\n\n      async function fetchAndLogData() {\n        try {\n          console.log(await (await fetch(JSON_FILE_PATH)).json());\n        } catch (e) {\n          console.error(\"Failed to fetch\", e);\n        }\n      }\n\n      registerServiceWorker();\n    </script>\n  </head>\n\n  <body>\n    <button onclick=\"fetchAndLogData()\">Fetch and log data</button>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Building and Previewing Production Vite Project\nDESCRIPTION: Commands to build the Vite project for production and preview the built application, which includes the Pyodide integration.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/working-with-bundlers.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx vite build\nnpx vite preview\n```\n\n----------------------------------------\n\nTITLE: Threading Limitation Example\nDESCRIPTION: Example showing threading limitations in Pyodide and proper thread detection.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef _can_start_thread() -> bool:\n    if sys.platform == \"emscripten\":\n        return sys._emscripten_info.pthreads\n    return platform.machine() not in (\"wasm32\", \"wasm64\")\n\ncan_start_thread = _can_start_thread()\n\nif not can_start_thread:\n  n_threads = 1\n```\n\n----------------------------------------\n\nTITLE: Upgrading Pyodide Package Version\nDESCRIPTION: This bash command updates a Pyodide package's version to the latest available on PyPI using the pyodide skeleton tool.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npyodide skeleton pypi <package-name> --update\n```\n\n----------------------------------------\n\nTITLE: JavaScript Keyword Access in Python\nDESCRIPTION: Examples of accessing JavaScript objects and attributes that conflict with Python keywords.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/faq.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.runPython(`\n    from js import Array\n    fromFunc = getattr(Array, 'from')\n    print(fromFunc([1,2,3]))\n`);\n\npeople = {global: \"lots and lots\"};\npyodide.runPython(`\n    from js import people\n    setattr(people, 'global', 'even more')\n    print(getattr(people, 'global'))\n`);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example for Coroutine Memory Management (After)\nDESCRIPTION: Example showing the simplified coroutine handling in JavaScript after the enhancement, where manual destruction is no longer needed as memory is automatically managed when awaiting the coroutine.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nasync function runPythonAsync(code, globals) {\n  return await Module.pyodide_py.eval_code_async(code, globals);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Test Suite\nDESCRIPTION: Basic command to run the complete Pyodide test suite using pytest from the root directory.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/testing.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Adding Patches to meta.yaml for Pyodide Package\nDESCRIPTION: This YAML snippet shows how to specify patches for a Pyodide package in the meta.yaml file.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsource:\n  url: https://files.pythonhosted.org/packages/somehash/some-pkg-1.2.3.tar.gz\n  sha256: somehash\n  patches:\n    - 0001-patch-some-thing.patch\n    - 0002-patch-some-other-thing.patch\n```\n\n----------------------------------------\n\nTITLE: JavaScript Lambda Function Access in Python\nDESCRIPTION: Demonstrates how to access JavaScript functions with names that are Python reserved keywords using getattr.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nlambda = (x) => {return x + 1};\npyodide.runPython(`\n    import js\n    js_lambda = getattr(js, 'lambda')\n    print(js_lambda(1))\n    `);\n```\n\n----------------------------------------\n\nTITLE: Using Default Converter with JsProxy.to_py\nDESCRIPTION: Using the default_converter parameter with JsProxy.to_py to customize the conversion of JavaScript objects to Python objects.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ndef my_converter(obj):\n    # Custom conversion logic\n    return processed_obj\n\n# Apply custom converter to JavaScript object\npython_obj = js_object.to_py(default_converter=my_converter)\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Tests\nDESCRIPTION: Commands to run JavaScript tests using Mocha in the src/js directory.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/testing.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd src/js\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks for Code Style\nDESCRIPTION: Command to install pre-commit hooks that automatically run linters before each commit to ensure code style consistency.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/contributing.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: JavaScript Directory Function Implementation\nDESCRIPTION: JavaScript implementation of the dir() function that returns all keys in the prototype chain\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction dir(x) {\n  let result = [];\n  do {\n    result.push(...Object.getOwnPropertyNames(x));\n  } while ((x = Object.getPrototypeOf(x)));\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Pyodide with Environment Variables\nDESCRIPTION: Shows how to pass environment variables when loading Pyodide, replacing the deprecated homedir option.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nloadPyodide({ env: { HOME: \"/the/home/directory\" } })\n```\n\n----------------------------------------\n\nTITLE: Module-Type Service Worker Registration Options\nDESCRIPTION: Configuration options for registering a module-type service worker with the appropriate type specification.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/service-worker.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst REGISTRATION_OPTIONS = {\n  scope: \"/\",\n  // Note that specifying the type option can cause errors if the browser doesn't support module-type service workers\n  type: \"module\",\n};\n```\n\n----------------------------------------\n\nTITLE: Patching Chrome DevTools for Large WebAssembly Files\nDESCRIPTION: Diff patch for Chrome DevTools to increase the WebAssembly text size limit from 1 million to 12 million lines. This helps when debugging large WebAssembly files that trigger the \"text is truncated due to size\" error.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/debugging.md#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n--- a/front_end/entrypoints/wasmparser_worker/WasmParserWorker.ts\n+++ b/front_end/entrypoints/wasmparser_worker/WasmParserWorker.ts\n@@ -55,7 +55,7 @@ export function dissambleWASM(\n     const lines = [];\n     const offsets = [];\n     const functionBodyOffsets = [];\n-    const MAX_LINES = 1000 * 1000;\n+    const MAX_LINES = 12 * 1000 * 1000;\n     let chunkSize: number = 128 * 1024;\n     let buffer: Uint8Array = new Uint8Array(chunkSize);\n     let pendingSize = 0;\n```\n\n----------------------------------------\n\nTITLE: Running Linting Checks\nDESCRIPTION: Commands for running and managing pre-commit hooks for code linting.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/testing.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run -a\npip install pre-commit\npre-commit install\npre-commit uninstall\n```\n\n----------------------------------------\n\nTITLE: Using Pyodide CLI for Configuration\nDESCRIPTION: Demonstrates how to use the pyodide config command to show additional configuration variables for out-of-tree builds.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npyodide config\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodule for Existing Repository\nDESCRIPTION: Command to initialize the pyodide-build submodule in an already cloned Pyodide repository.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/building-from-sources.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Exporting Git Commits as Patches\nDESCRIPTION: Command to format and export the last N commits as patch files, which is useful for migrating patches between different versions of upstream packages.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/contributing.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit format-patch -<N> -N --no-stat HEAD -o <out_dir>\n```\n\n----------------------------------------\n\nTITLE: Creating New Stable Branch\nDESCRIPTION: Git commands to create a new stable branch from the main branch and force push it to upstream, replacing the previous stable branch.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit switch main\ngit switch -C stable\ngit push upstream stable --force\n```\n\n----------------------------------------\n\nTITLE: Pyodide filesystem path configuration\nDESCRIPTION: Unix-style filesystem path for timezone data configuration\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/usr/share/zoneinfo\n```\n\n----------------------------------------\n\nTITLE: Setting Pyodide Base URL in JavaScript\nDESCRIPTION: Code snippet demonstrating how to specify the Pyodide deployment URL by setting the languagePluginUrl variable before loading Pyodide. This approach replaced the deprecated pyodide_dev.js file.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.languagePluginUrl = \"./\";\n```\n\n----------------------------------------\n\nTITLE: Generating Contributor List for Release Notes\nDESCRIPTION: A bash command to generate a formatted list of contributors for the release notes, extracting names from git history between the specified version tag and current HEAD.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit shortlog -s 0.19.0.. | cut -f2- | grep -v '\\[bot\\]' | sort --ignore-case | tr '\\n' ';' | sed 's/;/, /g;s/, $//' | fold -s\n```\n\n----------------------------------------\n\nTITLE: RST Module Documentation Table - JavaScript Modules\nDESCRIPTION: ReStructuredText table documenting the available JavaScript modules in Pyodide, including the global JavaScript scope and Pyodide JavaScript module.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. list-table::\n\n   *  - ``js``\n      - The global JavaScript scope.\n   *  - :js:mod:`pyodide_js <pyodide>`\n      - The JavaScript Pyodide module.\n```\n\n----------------------------------------\n\nTITLE: Python CLI virtual environment pip usage\nDESCRIPTION: Command showing how to use pip with Pyodide virtual environment\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.venv-pyodide/bin/python -m pip\n```\n\n----------------------------------------\n\nTITLE: Using Default Converter with PyProxy.toJs\nDESCRIPTION: Using the default_converter parameter with PyProxy.toJs to customize the conversion of Python objects to JavaScript objects.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myConverter(obj) {\n  // Custom conversion logic\n  return processedObj;\n}\n\n// Apply custom converter to Python object\nconst jsObj = pyObject.toJs({default_converter: myConverter});\n```\n\n----------------------------------------\n\nTITLE: Building Pyodide Recipes\nDESCRIPTION: Command to build all Pyodide package recipes using wildcard selector.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\npyodide build-recipes '*'\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Pyodide Deprecations\nDESCRIPTION: A structured markdown document listing deprecated features and planned removals across multiple Pyodide versions. Includes details about TypeScript types, PyProxy methods, configuration parameters, and module structure changes.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/deprecation-timeline.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(deprecation-timeline)=\n\n# Pyodide Deprecation Timeline\n\nEach Pyodide release may deprecate certain features from previous releases in a\nbackward incompatible way. If a feature is deprecated, it will continue to work\nuntil its removal, but raise warnings. We try to ensure deprecations are done\nover at least two minor(feature) releases, however, as Pyodide is still in beta\nstate, this list is subject to change and some features can be removed without\ndeprecation warnings. More details about each item can often be found in the\n{ref}`changelog`.\n\n## 0.25.0\n\n- Typescript type imports for `PyProxy` subtypes from `pyodide` will be removed.\n\n- The methods `PyProxy.supportsHas`, `PyProxy.isCallable`, etc will be removed.\n\n- Support for the `homedir` argument will be removed in favor of\n  `env: {HOME: \"/the/home/directory\"}`.\n\n## 0.24.0\n\n- The `messageCallback` and `errorCallback` argument to `loadPackage` and\n  `loadPackagesFromImports` will be passed as a named argument only.\n\n- `Py2JsResult` will be removed.\n\n- The `--output-directory` argument to `pyodide build` will be removed.\n\n## 0.23.0\n\n- Names that used to be in the root `pyodide` module and were moved to submodules\n  will no longer be available in the root module.\n- The \"message\" argument to `PyProxy.destroy` method will no longer be accepted\n  as a positional argument.\n\n## 0.21.0\n\n- The `globals` argument to `runPython` and `runPythonAsync` will be passed as a\n  named argument only.\n- The `extractDir` argument to `unpackArchive` will be passed as a named\n  argument only.\n\n## 0.20.0\n\n- The skip-host key will be removed from the meta.yaml format. If needed,\n  install a host copy of the package with pip instead.\n- `pyodide-interrupts` module will be removed. If you were using this for some\n  reason, use {js:func}`~pyodide.setInterruptBuffer` instead.\n\n## 0.19.0\n\n- The default working directory (home directory) inside the Pyodide virtual file\n  system has been changed from `/` to `/home/pyodide`. To get the previous\n  behavior, you can\n\n  - call `os.chdir(\"/\")` in Python to change working directory or\n  - call {js:func}`~globalThis.loadPyodide` with the `homedir=\"/\"`\n    argument\n\n- When a JavaScript function is called from Python, PyProxy arguments and return\n  values will be automatically destroyed when the function is finished.\n\n```\n\n----------------------------------------\n\nTITLE: Traditional SDL Game Loop in Python\nDESCRIPTION: Example of a traditional infinite game loop pattern in pygame that needs to be avoided in Pyodide as it blocks the main thread.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/sdl.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclock = pygame.time.Clock()\nfps = 60\ndef run_game():\n    while True:\n        do_something()\n        draw_canvas()\n        clock.tick(fps)\n```\n\n----------------------------------------\n\nTITLE: Building Pyodide with Custom Configuration\nDESCRIPTION: Shows how to use the --config-setting option with pyodide build command to pass flags to the build backend.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npyodide build --config-setting=\"-C\" <flag>\n```\n\n----------------------------------------\n\nTITLE: Updating Emscripten Version\nDESCRIPTION: Command to update the Emscripten version used by Pyodide, which automates rebasing patches, updating version references, and synchronizing struct_info files.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n./tools/update_emscripten.py new_version\n```\n\n----------------------------------------\n\nTITLE: Displaying Pyodide Package List using reStructuredText directive\nDESCRIPTION: A reStructuredText directive that generates a list of all packages available in Pyodide. This directive is evaluated when the documentation is built to produce an up-to-date list of included packages.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/packages-in-pyodide.md#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. pyodide-package-list :: packages\n```\n\n----------------------------------------\n\nTITLE: Using Pyodide Lexer for JavaScript with Embedded Python\nDESCRIPTION: Demonstrates syntax highlighting for JavaScript code with embedded Python using the custom pyodide lexer. The example shows loading a NumPy package and running Python code with JavaScript variable interpolation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/sphinx_pyodide/README.md#2025-04-17_snippet_0\n\nLANGUAGE: pyodide\nCODE:\n```\nawait pyodide.loadPackage(numpy);\npyodide.runPython(`\n    def f(y):\n        return y + ${x}\n    f(7)\n`);\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Metadata after Loading in Pyodide\nDESCRIPTION: pyodide.loadPackage now returns an object with metadata about the loaded packages.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst metadata = await pyodide.loadPackage('numpy')\n```\n\n----------------------------------------\n\nTITLE: Generating New CPython Patches\nDESCRIPTION: Commands to remove old patches and generate new patch files after rebasing to new Python version.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nrm ~/path/to/pyodide/cpython/patches/*\ngit format-patch v3.12.1 -o ~/path/to/pyodide/cpython/patches/\n```\n\n----------------------------------------\n\nTITLE: Generating Pyodide CLI Documentation with Sphinx Directive\nDESCRIPTION: This RST directive uses Sphinx's 'click' extension to automatically generate documentation for the Pyodide CLI commands by pulling information from the typer_click_object in the pyodide_cli.app module.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/pyodide-cli.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. click:: pyodide_cli.app:typer_click_object\n   :prog: pyodide\n   :nested: full\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Pyodide Console Module\nDESCRIPTION: RST configuration block that sets up automated documentation generation for the pyodide.console module. Uses sphinx directives to generate member documentation with autosummary and no nesting.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api/console.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pyodide.console\n\n.. automodule:: pyodide.console\n   :members:\n   :autosummary:\n   :autosummary-no-nesting:\n```\n\n----------------------------------------\n\nTITLE: Importing matplotlib backend configuration\nDESCRIPTION: Example of how to explicitly set matplotlib backend to use matplotlib-pyodide\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmatplotlib.use(\"module://matplotlib_pyodide.wasm_backend\")\n```\n\n----------------------------------------\n\nTITLE: Configuring pyodide-build Fork\nDESCRIPTION: Instructions for testing with a fork of pyodide-build, including updating the .gitmodules file and syncing the submodule.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n# .gitmodules\n[submodule \"pyodide-build\"]\n\tpath = pyodide-build\n\turl = https://github.com/<yourfork>/pyodide-build\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule sync\ncd pyodide-build\ngit checkout \"<COMMIT HASH>\"\n```\n\n----------------------------------------\n\nTITLE: Pyodide CLI Commands Structure Table\nDESCRIPTION: This table displays the available Pyodide CLI build commands for building packages from various sources, showing the command syntax and its resulting action.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n| command | result |\n|------------------------|-----------------------------------------|\n| `pyodide build pypi` | build or fetch a single package from pypi |\n| `pyodide build source` | build the current source folder (same as pyodide build) |\n| `pyodide build url` | build or fetch a package from a url either tgz, tar.gz zip or wheel |\n```\n\n----------------------------------------\n\nTITLE: JavaScript Exception Handling Implementation\nDESCRIPTION: JavaScript trampoline function implementation that handles exceptions and manages WebAssembly stack state.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/abi.md#2025-04-17_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction invoke_vii(fptr, a1, a2) {\n  var sp = stackSave();\n  try {\n    getWasmTableEntry(fptr)(a1, a2);\n  } catch (e) {\n    stackRestore(sp);\n    _setThrew();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Alpha Release Tag\nDESCRIPTION: Command to create a tag for an alpha release using the bump_version.py script.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./tools/bump_version.py 0.28.0a1 --tag\n```\n\n----------------------------------------\n\nTITLE: Updating pyodide-build Submodule\nDESCRIPTION: Commands to update the pyodide-build submodule to a specific commit hash.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncd pyodide-build\ngit checkout \"<COMMIT HASH>\"\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script with Pyodide\nDESCRIPTION: This bash command shows the output of running the hello_python.js script in Node.js, demonstrating the successful execution of a Python expression that calculates 1+1.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/src/js/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ node hello_python.js\nPython says that 1+1= 2\n```\n\n----------------------------------------\n\nTITLE: F2C Output for LAPACK Function Call with String Arguments\nDESCRIPTION: This snippet shows how f2c incorrectly handles the conversion of Fortran calls to LAPACK functions that use strings. It adds extra arguments and modifies the function signature, leading to compilation issues.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/packages/scipy/info.md#2025-04-17_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nint str_len = 14;\nint some_lapack_func(int *some_string, int *some_string_length, fortranlen some_string_length_again);\nsome_lapack_func(\"a string here\", &str_len, 14);\n```\n\n----------------------------------------\n\nTITLE: Bumping Version for Minor Release\nDESCRIPTION: Command to bump the version and create a tag for a minor release using the backport.py script.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backport.py bump-version --tag\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Pyodide Roadmap\nDESCRIPTION: A structured markdown document detailing the development roadmap for Pyodide. Covers major areas of improvement including documentation, performance, compilation, sustainability, and technical implementations.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/roadmap.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Roadmap\n\nThis document lists general directions that core developers are interested to\nsee developed in Pyodide. The fact that an item is listed here is in no way a\npromise that it will happen, as resources are limited. Rather, it is an\nindication that help is welcomed on this topic.\n\n## Improve documentation\n\nOur API documentation is fairly detailed, but they need more introductory\ninformation like tutorials. We also want to add more information to the FAQ and\nimprove the organization. It would also be good to find some way to include\ninteractive code pens in the documentation.\n\n## Reducing download sizes and initialization times\n\nAt present a first load of Pyodide requires a 6.4 MB download, and the\nenvironment initialization takes 4 to 5 seconds. Subsequent page loads are\nfaster since assets are cached in the browser. Both of these indicators can\nlikely be improved, by optimizing compilation parameters, minifying the Python\nstandard library and packages, reducing the number of exported symbols. To\nfigure out where to devote the effort, we need a better profiling system for the\nload process.\n\nSee issue {issue}`646`.\n\n## Improve performance of Python code in Pyodide\n\nAcross [benchmarks](https://github.com/pyodide/pyodide/tree/main/benchmark)\nPyodide is currently around 3x to 5x slower than native Python.\n\nAt the same time, C code compiled to WebAssembly typically runs between near\nnative speed and 2x to 2.5x times slower (Jangda et al. 2019\n[PDF](https://www.usenix.org/system/files/atc19-jangda.pdf)). It is therefore\nvery likely that the performance of Python code in Pyodide can be improved with\nsome focused effort.\n\nIn addition, scientific Python code would benefit from packaging a high\nperformance BLAS library such as BLIS.\n\nSee issue {issue}`1120`.\n\n## Find a better way to compile Fortran\n\nCurrently, we use f2c to cross compile Fortran to C. This does not work very\nwell because f2c only fully supports Fortran 77 code. LAPACK has used more\nmodern Fortran features since 2008 and Scipy has adopted more recent Fortran as\nwell. f2c still successfully generates code for all but 6 functions in Scipy +\nLAPACK, but much of the generated code is slightly wrong and requires extensive\npatching. There are still a large number of fatal errors due to call signature\nincompatibilities.\n\nIf we could use an LLVM-based Fortran compiler as a part of the Emscripten\ntoolchain, most of these problems would be solved. There are several promising\nprojects heading in that direction including flang and lfortran.\n\nSee {issue}`scipy/scipy#15290`.\n\n## Better project sustainability\n\nSome of the challenges that Pyodide faces, such as maintaining a collection of\nbuild recipes, dependency resolution from PyPI, etc are already solved in either\nPython or JavaScript ecosystems. We should therefore strive to better reuse\nexisting tooling, and seeking synergies with existing initiatives in this space,\nsuch as conda-forge.\n\nSee issue {issue}`795`.\n\n## Improve support for WebWorkers\n\nWebWorkers are necessary in order to run computational tasks in the browser\nwithout hanging the user interface. Currently, Pyodide can run in a WebWorker,\nhowever the user experience and reliability can be improved.\n\nSee issue {issue}`1504`.\n\n## Synchronous IO\n\nThe majority of existing I/O APIs are synchronous. Unless we can support\nsynchronous IO, much of the existing Python ecosystem cannot be ported. There\nare several different approaches to this, we would like to support at least one\nmethod.\n\nSee issue {issue}`1503`.\n\n(http-client-limit)=\n\n## Write http.client in terms of Web APIs\n\nPython packages make an extensive use of packages such as `requests` to\nsynchronously fetch data. We currently can't use such packages since sockets\nare not available in Pyodide. We could however try to re-implement some\nstdlib libraries with Web APIs, potentially making this possible.\n\nBecause http.client is a synchronous API, we first need support for synchronous\nIO.\n\nSee issue {issue}`140`.\n```\n\n----------------------------------------\n\nTITLE: Organizing API Documentation with Sphinx toctree in Markdown\nDESCRIPTION: This snippet uses Sphinx's eval-rst directive to create a table of contents for the API documentation. It organizes links to the JavaScript API, Python API, Micropip API, and Pyodide CLI documentation with a maxdepth of 2.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api-reference.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{eval-rst}\n.. toctree::\n   :maxdepth: 2\n\n   api/js-api.md\n   api/python-api.md\n   Micropip API <https://micropip.pyodide.org/en/stable/project/api.html>\n   api/pyodide-cli.md\n```\n```\n\n----------------------------------------\n\nTITLE: Pushing Alpha Release\nDESCRIPTION: Command to push an alpha release commit and tag to the main branch, triggering the release CI process.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngit push upstream main 0.28.0a1\n```\n\n----------------------------------------\n\nTITLE: Clearing Backport Labels\nDESCRIPTION: Command to clear all \"needs backport\" labels after the backporting process is complete.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backport.py clear-prs\n```\n\n----------------------------------------\n\nTITLE: Creating Release Branch from Stable\nDESCRIPTION: Sequence of git commands to create a release branch for the previous major version by fetching the stable branch and renaming it.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream stable:stable\ngit branch 0.20.X stable\ngit push -u upstream 0.20.X\n```\n\n----------------------------------------\n\nTITLE: Serving Pyodide Files Locally with Python HTTP Server\nDESCRIPTION: A simple command to serve Pyodide files locally using Python's built-in HTTP server module. This creates a local server that allows you to access the Pyodide REPL via localhost.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/downloading-and-deploying.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython -m http.server\n```\n\n----------------------------------------\n\nTITLE: Updating All Packages\nDESCRIPTION: Make command to update all packages in the Pyodide distribution, useful before major releases or Python version updates.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nmake -C packages update-all\n```\n\n----------------------------------------\n\nTITLE: Opening Release PRs\nDESCRIPTION: Command to automatically open pull requests for the backport and changelog branches created for a minor release.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backports.py open-release-prs\n```\n\n----------------------------------------\n\nTITLE: Reverting to Development Version\nDESCRIPTION: Commands to revert back to the development version after creating an alpha release, preventing the alpha version from remaining in the codebase.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit revert 0.28.0a1 -n && git commit -m \"Back to development version\"\ngit push upstream main\n```\n\n----------------------------------------\n\nTITLE: Installing Pyodide and Vite Plugin Packages\nDESCRIPTION: Command to install the Pyodide npm package and the vite-plugin-static-copy package needed for Vite integration.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/working-with-bundlers.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install pyodide vite-plugin-static-copy\n```\n\n----------------------------------------\n\nTITLE: Managing Backport PRs\nDESCRIPTION: Command to add the \"needs backport\" label to a pull request that should be backported to a stable release.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backports.py add-pr <pr-number>\n```\n\n----------------------------------------\n\nTITLE: Running Vite Development Server\nDESCRIPTION: Command to start the Vite development server for testing the Pyodide integration during development.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/working-with-bundlers.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx vite\n```\n\n----------------------------------------\n\nTITLE: Pushing Minor Release Tag to Stable\nDESCRIPTION: Command to push the minor release commit and tag to the stable branch, triggering the release CI process.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit push upstream stable 0.27.2\n```\n\n----------------------------------------\n\nTITLE: Building Pyodide Packages Command\nDESCRIPTION: Command used to build packages in Pyodide using the Python build system. This command is part of the package building workflow referenced in the documentation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/packages/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyodide build-recipes\n```\n\n----------------------------------------\n\nTITLE: Setting Git Merge Conflict Style\nDESCRIPTION: Configuration command to set git merge conflict style to diff3 for better conflict resolution.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ngit config --global merge.conflictstyle diff3\n```\n\n----------------------------------------\n\nTITLE: Original C++ Exception Handling Code Example\nDESCRIPTION: Example of typical C++ code with try-catch block before compiler transformation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/abi.md#2025-04-17_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nint f() {\n    int x;\n    int y;\n    try {\n        x = g();\n        y = h();\n    } catch(...) {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Release Date in Changelog\nDESCRIPTION: Commands to set the date for a release in the changelog and push changes to both the backport and changelog branches.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backports.py set-date\ngit switch backports-for-0.27.2\ngit push -f\ngit switch changelog-for-0.27.2\ngit push -f\n```\n\n----------------------------------------\n\nTITLE: LAPACK Function Declaration with String Arguments\nDESCRIPTION: This code snippet demonstrates how LAPACK declares functions that take string arguments as integers. This approach causes issues when f2c tries to convert Fortran calls to these functions.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/packages/scipy/info.md#2025-04-17_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nint some_lapack_func(int *some_string, int *some_string_length){\n // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Iterator Implementation\nDESCRIPTION: JavaScript equivalent of the Python iterator example\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/type-conversions.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let v of x) {\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: F2C Output with Incorrect Function Declaration\nDESCRIPTION: This snippet shows the problematic output generated by f2c when converting Fortran code with implicit casts. It demonstrates how f2c incorrectly declares the function 'f' with two different types, causing compilation errors.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/packages/scipy/info.md#2025-04-17_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ndouble f(double x){\n  return x + 5;\n}\n\ndouble g(int x){\n  double f(int);\n  return f(x);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Update Branch\nDESCRIPTION: Command to create a branch for updating the changelog on top of the main branch for a minor release.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/maintainers.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n./tools/backports.py changelog-branch\n```\n\n----------------------------------------\n\nTITLE: Loading Single Python File with Pyodide\nDESCRIPTION: Downloads a single Python script file using pyfetch and writes it to the filesystem for import. Demonstrates handling individual Python files rather than archives.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/loading-custom-python-code.md#2025-04-17_snippet_1\n\nLANGUAGE: pyodide\nCODE:\n```\nawait pyodide.runPythonAsync(`\n    from pyodide.http import pyfetch\n    response = await pyfetch(\"https://.../script.py\")\n    with open(\"script.py\", \"wb\") as f:\n        f.write(await response.bytes())\n`)\npkg = pyodide.pyimport(\"script\");\npkg.do_something();\n```\n\n----------------------------------------\n\nTITLE: Configuring Error-raising Stdin Handler in Pyodide\nDESCRIPTION: Example of setting up stdin to always raise an IO error when read is attempted.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/streams.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npyodide.setStdin({ error: true });\npyodide.runPython(`\n    with pytest.raises(OSError, match=\"I/O error\"):\n        input()\n`);\n```\n\n----------------------------------------\n\nTITLE: Marking Page as Orphan in reStructuredText\nDESCRIPTION: This snippet uses a reStructuredText directive to mark the current page as an orphan, meaning it should not be included in the table of contents.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/micropip-api.md#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{eval-rst}\n:orphan:\n```\n```\n\n----------------------------------------\n\nTITLE: Citing Pyodide in BibTeX Format\nDESCRIPTION: A BibTeX citation format for referencing Pyodide in scientific publications. It includes details such as the author (The Pyodide development team), title, version, DOI, and URL.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/about.md#2025-04-17_snippet_0\n\nLANGUAGE: bibtex\nCODE:\n```\n@software{pyodide_2021,\n  author       = {The Pyodide development team},\n  title        = {pyodide/pyodide},\n  month        = aug,\n  year         = 2021,\n  publisher    = {Zenodo},\n  version      = {0.27.0},\n  doi          = {10.5281/zenodo.5156931},\n  url          = {https://doi.org/10.5281/zenodo.5156931}\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Matplotlib Fontlist.json in Pyodide\nDESCRIPTION: This code reads the fontlist.json file from the current Matplotlib installation in Pyodide and prints its content. The output should be copied to the fontlist.json file in the extras directory to ensure compatibility.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/packages/matplotlib/README_FONTLIST.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib\nfrom pathlib import Path\n\nwith open(Path(matplotlib.__file__).parent / \"fontlist.json\") as fd:\n    print(fd.read())\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version Constraint for Pyodide Builds\nDESCRIPTION: Defines an upper version bound for cmake package to ensure build compatibility. Restricts cmake version to be less than 4.0.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/tools/constraints.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncmake < 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Pyodide WebLoop Module\nDESCRIPTION: A reStructuredText code block that uses Sphinx directives to automatically generate API documentation for the pyodide.webloop module. It sets the current module, includes all members, generates a summary, and disables nested summaries.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api/webloop.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pyodide.webloop\n\n.. automodule:: pyodide.webloop\n   :members:\n   :autosummary:\n   :autosummary-no-nesting:\n```\n\n----------------------------------------\n\nTITLE: Including Code of Conduct in Sphinx Documentation\nDESCRIPTION: This snippet uses Sphinx's include directive to embed the project's Code of Conduct from a markdown file located in the root directory. The '(code-of-conduct)=' syntax creates a label that can be referenced elsewhere in the documentation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/code-of-conduct.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{include} ../../CODE-OF-CONDUCT.md\n\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Python Dependencies for Pyodide Project\nDESCRIPTION: This requirements file lists all the Python packages needed for development, testing, and building the Pyodide project. It includes tools for linting (pre-commit), testing frameworks (pytest and related plugins), documentation tools (sphinx-click), and build utilities. The file also contains specific version constraints to maintain compatibility between packages.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nargcomplete\n# lint\npre-commit\n# testing\nbuild~=1.2.0\nsphinx-click\nhypothesis\nmypy==1.11.0\n# (FIXME: 2024/01/28) The latest pytest-asyncio 0.23.3 is not compatible with pytest 8.0.0\npytest<8.0.0\npytest-asyncio\npytest-cov\npytest-httpserver\npytest-benchmark\npytest-pyodide==0.58.3\nsetuptools; python_version >= '3.12.0'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for pyodide.http Module\nDESCRIPTION: This code snippet sets up Sphinx documentation for the pyodide.http module. It uses the eval-rst directive to include reStructuredText content, sets the current module, and configures the automodule directive with specific options for member inclusion and summary generation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api/http.md#2025-04-17_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{eval-rst}\n.. currentmodule:: pyodide.http\n\n.. automodule:: pyodide.http\n   :members:\n   :autosummary:\n   :autosummary-no-nesting:\n```\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Data Structure\nDESCRIPTION: Sample JSON data structure used as test data for the service worker example\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/service-worker.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Jem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Patch Files for meta.yaml\nDESCRIPTION: This bash command generates a formatted list of patch files to be used in the meta.yaml file.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/development/new-packages.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nfind patches/ -type f | sed 's/^/    - /g'\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Pyodide FFI Module\nDESCRIPTION: Sphinx configuration directives for automatically generating documentation from the pyodide.ffi module and its wrappers submodule. Uses eval-rst directive to process reStructuredText content with settings for member documentation, autosummary generation, and inheritance display.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/usage/api/python-api/ffi.md#2025-04-17_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n{eval-rst}\n.. currentmodule:: pyodide.ffi\n\n.. automodule:: pyodide.ffi\n   :members:\n   :autosummary:\n   :autosummary-no-nesting:\n   :show-inheritance:\n\n.. automodule:: pyodide.ffi.wrappers\n   :members:\n   :autosummary:\n   :autosummary-no-nesting:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Directive\nDESCRIPTION: Hidden table of contents directive linking to deprecation timeline documentation.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/project/changelog.md#2025-04-17_snippet_35\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :hidden:\n\n   deprecation-timeline.md\n```\n\n----------------------------------------\n\nTITLE: Interactive Pyodide Usage in Node.js REPL\nDESCRIPTION: This example shows how to use Pyodide interactively in a Node.js REPL with top-level await support. It demonstrates loading the Pyodide module and executing Python code directly in the REPL.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/src/js/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ node --experimental-repl-await\nWelcome to Node.js v18.5.0.\nType \".help\" for more information.\n> const { loadPyodide } = require(\"pyodide\");\nundefined\n> let pyodide = await loadPyodide();\nundefined\n> await pyodide.runPythonAsync(\"1+1\");\n2\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function with Destructured Object Parameters and JSDoc Comments\nDESCRIPTION: Example of a TypeScript function with destructured object parameters and JSDoc comments that the PyodideAnalyzer parses to create documentation. The documentation style shows how parameter properties are documented.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/docs/sphinx_pyodide/README.md#2025-04-17_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n/**\n* @param options\n*/\nfunction f({x , y } : {\n    /** The x value */\n    x : number,\n    /** The y value */\n    y : string\n}){ ... }\n```\n\n----------------------------------------\n\nTITLE: Repository Header HTML\nDESCRIPTION: HTML markup for the repository logo and badges showing NPM/PyPI versions, build status, and documentation status\nSOURCE: https://github.com/pyodide/pyodide/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div align=\"center\">\n  <a href=\"https://github.com/pyodide/pyodide\">\n  <img src=\"./docs/_static/img/pyodide-logo-readme.png\" alt=\"Pyodide\">\n  </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for AWS S3 Deployment\nDESCRIPTION: This code snippet lists the Python packages required for S3 deployment operations. The dependencies include boto3 (the AWS SDK for Python), moto (a library for mocking AWS services in tests), and typer (a library for building CLI applications).\nSOURCE: https://github.com/pyodide/pyodide/blob/main/requirements-deploy.txt#2025-04-17_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# used to deploy files to s3\nboto3\nmoto\ntyper\n```\n\n----------------------------------------\n\nTITLE: Optimizing Scipy Build Process in Bash\nDESCRIPTION: This bash script demonstrates how to optimize the Scipy build process by selectively building only specific sub-packages. It modifies the setup.py file and removes unnecessary folders to reduce build time during development.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/packages/scipy/info.md#2025-04-17_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n# Define which sub-packages to keep\nTO_KEEP='linalg|sparse|_lib|_build_utils'\n# Update scipy/setup.py\nperl -pi -e \"s@(config.add_subpackage\\(')(?!$TO_KEEP)@# \\1\\2@\" scipy/setup.py\n# delete unwanted folders to avoid unneeded cythonization\nfolders_to_delete=$(find scipy -mindepth 1 -maxdepth 1 -type d | grep -vP \"$TO_KEEP\")\nrm -rf $folders_to_delete\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Cast Issues in C\nDESCRIPTION: This snippet illustrates the problem of implicit casts between number types that f2c struggles with when converting Fortran to C. It shows how f2c incorrectly handles function declarations, leading to compilation errors.\nSOURCE: https://github.com/pyodide/pyodide/blob/main/packages/scipy/info.md#2025-04-17_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble f(double x){\n  return x + 5;\n}\n\ndouble g(int x){\n  return f(x);\n}\n```"
  }
]