[
  {
    "owner": "unocss",
    "repo": "unocss",
    "content": "TITLE: Creating a Comprehensive UnoCSS Configuration File in TypeScript\nDESCRIPTION: A full-featured UnoCSS configuration file that includes shortcuts, theme customization, multiple presets (Wind, Attributify, Icons, Typography, WebFonts), and transformers (Directives, VariantGroup). This demonstrates the recommended approach for configuring UnoCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/config-file.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defineConfig,\n  presetAttributify,\n  presetIcons,\n  presetTypography,\n  presetWebFonts,\n  presetWind3,\n  transformerDirectives,\n  transformerVariantGroup\n} from 'unocss'\n\nexport default defineConfig({\n  shortcuts: [\n    // ...\n  ],\n  theme: {\n    colors: {\n      // ...\n    }\n  },\n  presets: [\n    presetWind3(),\n    presetAttributify(),\n    presetIcons(),\n    presetTypography(),\n    presetWebFonts({\n      fonts: {\n        // ...\n      },\n    }),\n  ],\n  transformers: [\n    transformerDirectives(),\n    transformerVariantGroup(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Type Definitions - Configuration Options\nDESCRIPTION: TypeScript interface definitions for UnoCSS configuration options including rules, shortcuts, theme settings, variants, extractors, and other core functionality.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/index.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  rules: Rule<Theme>[],\n  shortcuts: UserShortcuts<Theme>,\n  theme: Theme,\n  extendTheme: Arrayable<ThemeExtender<Theme>>,\n  variants: Variant<Theme>[],\n  extractors: Extractor[],\n  preflights: Preflight<Theme>[],\n  layers: Record<string, number>,\n  outputToCssLayers: boolean | UseCssLayersOptions,\n  sortLayers: (layers: string[]) => string[],\n  presets: (PresetOrFactory<Theme> | PresetOrFactory<Theme>[])[],\n  transformers: SourceCodeTransformer[],\n  blocklist: BlocklistRule[],\n  safelist: string[],\n  preprocess: Arrayable<Preprocessor>,\n  postprocess: Arrayable<Postprocessor>,\n  separators: Arrayable<string>,\n  extractorDefault: Extractor | null | false,\n  autocomplete: {\n    templates: Arrayable<AutoCompleteFunction | AutoCompleteTemplate>,\n    extractors: Arrayable<AutoCompleteExtractor>,\n    shorthands: Record<string, string | string[]>\n  },\n  content: {\n    filesystem: string[],\n    inline: Array<string | { code: string; id?: string } | (() => Awaitable<string | { code: string; id?: string }>)>,\n    pipeline: {\n      include: FilterPattern,\n      exclude: FilterPattern\n    }\n  },\n  configResolved: (config: ResolvedConfig) => void,\n  configFile: string | false,\n  configDeps: string[],\n  cli: {\n    entry: Arrayable<CliEntryItem>\n  },\n  shortcutsLayer: string,\n  envMode: 'dev' | 'build',\n  details: boolean,\n  warn: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Blocklist\nDESCRIPTION: This configuration shows how to set up a blocklist in UnoCSS to exclude specific utility classes from being generated. It demonstrates both exact string matches and regular expression patterns to block multiple classes.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nblocklist: [\n  'p-1',\n  /^p-[2-4]$/,\n]\n```\n\n----------------------------------------\n\nTITLE: Fully Controlled Rules Configuration\nDESCRIPTION: Advanced implementation showing fully controlled rules with direct CSS string generation and complex selector handling.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/rules.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, toEscapedSelector as e } from 'unocss'\n\nexport default defineConfig({\n  rules: [\n    [/^custom-(.+)$/, ([, name], { rawSelector, currentSelector, variantHandlers, theme }) => {\n      if (name.includes('something'))\n        return\n\n      if (variantHandlers.length)\n        return\n      const selector = e(rawSelector)\n      return `\n${selector} {\n  font-size: ${theme.fontSize.sm};\n}\n${selector}::after {\n  content: 'after';\n}\n.foo > ${selector} {\n  color: red;\n}\n@media (min-width: ${theme.breakpoints.sm}) {\n  ${selector} {\n    font-size: ${theme.fontSize.sm};\n  }\n}\n`\n    }],\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with React\nDESCRIPTION: Setting up UnoCSS Vite plugin with React, ensuring correct plugin order.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from '@vitejs/plugin-react'\nimport UnoCSS from 'unocss/vite'\n\nexport default {\n  plugins: [\n    UnoCSS(),\n    React(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of UnoCSS Core Generator\nDESCRIPTION: Example of how to create and use a UnoCSS generator. The generator is initialized with user and default options, then used to generate CSS from code input.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/tools/core.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createGenerator } from '@unocss/core'\n\nconst generator = await createGenerator(\n  { /* user options */ },\n  { /* default options */ }\n)\n\nconst { css } = await generator.generate(code)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UnoCSS Source Code Transformer in TypeScript\nDESCRIPTION: Demonstrates how to create a custom source code transformer for UnoCSS. The transformer includes file filtering for TypeScript and JavaScript React files (.tsx and .jsx), and shows how to modify source code using MagicString. It implements the SourceCodeTransformer interface with name, enforcement level, and transformation logic.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/transformers.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SourceCodeTransformer } from 'unocss'\nimport { createFilter } from 'unplugin-utils'\n\nexport default function myTransformers(options: MyOptions = {}): SourceCodeTransformer {\n  return {\n    name: 'my-transformer',\n    enforce: 'pre', // enforce before other transformers\n    idFilter(id) {\n      // only transform .tsx and .jsx files\n      return id.match(/\\.[tj]sx$/)\n    },\n    async transform(code, id, { uno }) {\n      // code is a MagicString instance\n      code.appendRight(0, '/* my transformer */')\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Rule Definition in TypeScript\nDESCRIPTION: Shows how to define a basic static rule for margin utility class in UnoCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/rules.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  ['m-1', { margin: '0.25rem' }],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Presets with TypeScript\nDESCRIPTION: Demonstrates how to set up UnoCSS configuration with multiple presets including presetAttributify and presetWind3. Shows the basic structure for defining presets with their options.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/presets.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, presetAttributify, presetWind3 } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetAttributify({ /* preset options */}),\n    presetWind3(),\n    // ...custom presets\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Variant Groups in HTML with UnoCSS\nDESCRIPTION: Example of using variant groups in HTML classes with UnoCSS. This demonstrates how variant groups are written and how they are transformed into individual class names.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/variant-group.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"hover:(bg-gray-400 font-medium) font-(light mono)\" />\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"hover:bg-gray-400 hover:font-medium font-light font-mono\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Hover Variant in UnoCSS\nDESCRIPTION: This example shows how to define a hover variant in UnoCSS configuration. The variant checks if the matcher starts with 'hover:', removes the prefix, and modifies the CSS selector to include ':hover'. The example also includes a simple margin rule definition.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/variants.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvariants: [\n  // hover:\n  (matcher) => {\n    if (!matcher.startsWith('hover:'))\n      return matcher\n    return {\n      // slice `hover:` prefix and passed to the next variants and rules\n      matcher: matcher.slice(6),\n      selector: s => `${s}:hover`,\n    }\n  },\n],\nrules: [\n  [/^m-(\\d)$/, ([, d]) => ({ margin: `${d / 4}rem` })],\n]\n```\n\n----------------------------------------\n\nTITLE: Importing UnoCSS in Main Entry File\nDESCRIPTION: Adding the virtual UnoCSS import to the main entry file of the project.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'virtual:uno.css'\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Filesystem Extraction\nDESCRIPTION: This configuration snippet shows how to set up UnoCSS to extract utility classes directly from the filesystem. This is useful for integrations that don't have access to the build pipeline or when working with backend frameworks.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  content: {\n    filesystem: [\n      'src/**/*.php',\n      'public/*.html',\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Default UnoCSS Extractors in TypeScript\nDESCRIPTION: Shows how to disable or override the default extractor in UnoCSS. This configuration allows for complete customization of the extraction process.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/extractors.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  extractors: [\n    // your extractors\n  ],\n  // disable the default extractor\n  extractorDefault: false,\n  // override the default extractor with your own\n  extractorDefault: myExtractor,\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Shortcuts with RegExp in UnoCSS\nDESCRIPTION: Demonstrates how to define dynamic shortcuts using RegExp patterns and handler functions. This approach enables creating flexible, parameterized shortcuts that follow consistent patterns.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/shortcuts.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nshortcuts: [\n  // you could still have object style\n  {\n    btn: 'py-2 px-4 font-semibold rounded-lg shadow-md',\n  },\n  // dynamic shortcuts\n  [/^btn-(.*)$/, ([, c]) => `bg-${c}-400 text-${c}-100 py-2 px-4 rounded-lg`],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Attributify Preset\nDESCRIPTION: TypeScript configuration for adding the attributify preset to UnoCSS, including options for customization.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport presetAttributify from '@unocss/preset-attributify'\n\nexport default defineConfig({\n  presets: [\n    presetAttributify({ /* preset options */ }),\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Theme in UnoCSS Rules\nDESCRIPTION: Example of consuming theme values in UnoCSS rules. This code snippet shows how to access color values from the theme to create dynamic text color utilities.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  [/^text-(.*)$/, ([, c], { theme }) => {\n    if (theme.colors[c])\n      return { color: theme.colors[c] }\n  }],\n]\n```\n\n----------------------------------------\n\nTITLE: Adding UnoCSS module to Nuxt configuration\nDESCRIPTION: Configuration to add the UnoCSS module to the Nuxt project by including it in the modules array in the Nuxt config file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  modules: [\n    '@unocss/nuxt',\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring PostCSS with UnoCSS\nDESCRIPTION: PostCSS configuration file setup to include the UnoCSS plugin\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/postcss.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from '@unocss/postcss'\n\nexport default {\n  plugins: [\n    UnoCSS(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layers in UnoCSS Rules\nDESCRIPTION: Example showing how to assign layers to UnoCSS rules. Rules can be assigned to a specific layer using the metadata object as the third parameter, with rules defaulting to the 'default' layer when unspecified.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  [/^m-(\\d)$/, ([, d]) => ({ margin: `${d / 4}rem` }), { layer: 'utilities' }],\n  // when you omit the layer, it will be `default`\n  ['btn', { padding: '4px' }],\n]\n```\n\n----------------------------------------\n\nTITLE: Replacing Theme with ExtendTheme in UnoCSS\nDESCRIPTION: Example of using extendTheme to return a completely new theme object. This approach preserves the original theme structure while adding custom color definitions.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nextendTheme: (theme) => {\n  return {\n    ...theme,\n    colors: {\n      ...theme.colors,\n      veryCool: '#0000ff', // class=\"text-very-cool\"\n      brand: {\n        primary: 'hsl(var(--hue, 217) 78% 51%)', // class=\"bg-brand-primary\"\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Safelist with Static Values\nDESCRIPTION: This configuration shows how to set up a safelist in UnoCSS to ensure specific utility classes are always generated, even if they're not found during the static extraction process. This is useful for dynamically constructed class names.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nsafelist: 'p-1 p-2 p-3 p-4'.split(' ')\n```\n\n----------------------------------------\n\nTITLE: Basic Shortcuts Definition in UnoCSS\nDESCRIPTION: Defines static shortcuts that map a single class name to multiple utility classes. This example shows both multiple utility combinations and single utility aliases.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/shortcuts.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshortcuts: {\n  // shortcuts to multiple utilities\n  'btn': 'py-2 px-4 font-semibold rounded-lg shadow-md',\n  'btn-green': 'text-white bg-green-500 hover:bg-green-700',\n  // single utility alias\n  'red': 'text-red-100',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Colors in UnoCSS\nDESCRIPTION: Example of defining custom colors in the UnoCSS theme configuration. This shows how to define simple color values and nested color objects with DEFAULT values.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntheme: {\n  // ...\n  colors: {\n    veryCool: '#0000ff', // class=\"text-very-cool\"\n    brand: {\n      primary: 'hsl(var(--hue, 217) 78% 51%)', //class=\"bg-brand-primary\"\n      DEFAULT: '#942192' //class=\"bg-brand\"\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte Preprocessor\nDESCRIPTION: Configuration setup for adding UnoCSS preprocessor to Svelte config file with support for development and production environments\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport adapter from '@sveltejs/adapter-auto'\nimport { vitePreprocess } from '@sveltejs/vite-plugin-svelte'\nimport UnoCSS from '@unocss/svelte-scoped/preprocess'\n\nconst config = {\n  preprocess: [\n    vitePreprocess(),\n    UnoCSS({\n      // ... preprocessor options\n    }),\n  ],\n  // other Svelte config\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wind4 Preset in UnoCSS\nDESCRIPTION: TypeScript configuration for adding the Wind4 preset to UnoCSS. It imports the preset and adds it to the presets array in the UnoCSS configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetWind4 from '@unocss/preset-wind4'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind4(),\n    //  ^?\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing CSS Layer Names\nDESCRIPTION: Configuration to customize how UnoCSS layers map to CSS @layer names. This allows fine-grained control over which UnoCSS layers are output to which CSS layer names, including support for sublayers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\noutputToCssLayers: {\n  cssLayerName: (layer) => {\n    // The default layer will be output to the \"utilities\" CSS layer.\n    if (layer === 'default')\n      return 'utilities'\n\n    // The shortcuts layer will be output to the \"shortcuts\" sublayer the of \"utilities\" CSS layer.\n    if (layer === 'shortcuts')\n      return 'utilities.shortcuts'\n\n    // All other layers will just use their name as the CSS layer name.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Class Combinations for Dynamic Usage\nDESCRIPTION: This TypeScript example shows how to work around the limitation of dynamically constructed utilities by creating an object that statically lists all possible combinations of class names that might be used dynamically.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Since they are static, UnoCSS will able to extract them on build time\nconst classes = {\n  red: 'text-red border-red',\n  green: 'text-green border-green',\n  blue: 'text-blue border-blue',\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Fonts Preset with Wind4\nDESCRIPTION: TypeScript configuration for using presetWebFonts with Wind4 preset. It demonstrates how to set the themeKey to 'font' for compatibility with Wind4.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, presetWebFonts, presetWind4 } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind4(),\n    presetWebFonts({\n      themeKey: 'font', // [!code ++]\n      // ^?\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing UnoCSS Preset in Configuration\nDESCRIPTION: Shows how to implement a custom preset in the UnoCSS configuration file. The example demonstrates importing and using a custom preset with optional configuration parameters.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/presets.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\nimport myPreset from './my-preset'\n\nexport default defineConfig({\n  presets: [\n    myPreset({ /* preset options */ }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Configuration Setup\nDESCRIPTION: Basic UnoCSS configuration file setup for defining custom settings and options\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...UnoCSS options\n})\n```\n\n----------------------------------------\n\nTITLE: Integrating UnoCSS with Next.js Webpack Configuration\nDESCRIPTION: Next.js configuration file showing webpack plugin integration for UnoCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/next.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst UnoCSS = require('@unocss/webpack').default\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  reactStrictMode: true,\n  webpack: (config) => {\n    config.plugins.push(\n      UnoCSS(),\n    )\n    return config\n  },\n}\n\nmodule.exports = nextConfig\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Attributify JSX Transformer Usage in React\nDESCRIPTION: This snippet shows how the Attributify JSX transformer allows using valueless attributify in JSX components. It transforms attributes like 'text-red' into 'text-red=\"\"' for proper JSX handling.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/attributify-jsx.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div text-red text-center text-5xl animate-bounce>\n      unocss\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Theme in UnoCSS Variants\nDESCRIPTION: Example of consuming theme values in UnoCSS variants. This shows the basic structure for accessing theme values within a variant's match function.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvariants: [\n  {\n    name: 'variant-name',\n    match(matcher, { theme }) {\n      // ...\n    },\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Icon Loaders in UnoCSS\nDESCRIPTION: Shows how to combine external package icon loaders with file system icon loaders for a comprehensive icon setup\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createExternalPackageIconLoader } from '@iconify/utils/lib/loader/external-pkg'\nimport { defineConfig, presetIcons } from 'unocss'\nimport { FileSystemIconLoader } from 'unplugin-icons/loaders'\n\nexport default defineConfig({\n  presets: [\n    presetIcons({\n      collections: {\n        ...createExternalPackageIconLoader('other-awesome-collection'),\n        ...createExternalPackageIconLoader('@my-awesome-collections/some-collection'),\n        ...createExternalPackageIconLoader('@my-awesome-collections/some-other-collection'),\n        'my-yet-other-icons': FileSystemIconLoader(\n          './assets/icons',\n          svg => svg.replace(/^<svg /, '<svg fill=\"currentColor\" ')\n        )\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic Rules with RegExp Matching\nDESCRIPTION: Demonstrates dynamic rule creation using RegExp patterns for flexible margin and padding utilities.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/rules.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  [/^m-(\\d+)$/, ([, d]) => ({ margin: `${d / 4}rem` })],\n  [/^p-(\\d+)$/, match => ({ padding: `${match[1] / 4}rem` })],\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom UnoCSS Preset in TypeScript\nDESCRIPTION: Demonstrates how to create a custom UnoCSS preset using definePreset. The preset can accept options and includes configuration for rules and variants that will be merged into the main UnoCSS configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/presets.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePreset, Preset } from 'unocss'\n\nexport default definePreset((options?: MyPresetOptions) => {\n  return {\n    name: 'my-preset',\n    rules: [\n      // ...\n    ],\n    variants: [\n      // ...\n    ],\n    // it supports most of the configuration you could have in the root config\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Presets\nDESCRIPTION: TypeScript configuration file for UnoCSS defining presets and settings.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/next.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defineConfig,\n  presetAttributify,\n  presetIcons,\n  presetWebFonts,\n  presetWind3\n} from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind3(),\n    // ...\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Pug Extractor\nDESCRIPTION: TypeScript configuration for integrating the Pug extractor into UnoCSS. This setup enables UnoCSS to extract utility classes from Pug templates.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/pug.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport extractorPug from '@unocss/extractor-pug'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  extractors: [\n    extractorPug(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Controlling Layer Order in UnoCSS\nDESCRIPTION: Configuration for specifying the ordering of layers in UnoCSS. Lower numbers appear first, and layers without specified order are sorted alphabetically.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlayers: {\n  'components': -1,\n  'default': 1,\n  'utilities': 2,\n  'my-layer': 3,\n}\n```\n\n----------------------------------------\n\nTITLE: Using @apply Directive in CSS\nDESCRIPTION: Example of using the @apply directive to apply UnoCSS utility classes directly in CSS. This allows for combining multiple utilities in custom CSS classes.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  @apply text-center my-0 font-medium;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS to use Arbitrary Variants Extractor\nDESCRIPTION: TypeScript configuration example showing how to add the arbitrary variants extractor to a UnoCSS configuration file. This demonstrates importing the extractor and adding it to the extractors array.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/arbitrary-variants.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport extractorArbitrary from '@unocss/extractor-arbitrary-variants'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  extractors: [\n    extractorArbitrary(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Mutating Theme with ExtendTheme in UnoCSS\nDESCRIPTION: Example of using extendTheme to directly mutate the theme object. This approach modifies the existing theme by adding custom color definitions.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nextendTheme: (theme) => {\n  theme.colors.veryCool = '#0000ff' // class=\"text-very-cool\"\n  theme.colors.brand = {\n    primary: 'hsl(var(--hue, 217) 78% 51%)', // class=\"bg-brand-primary\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Fallback Rules Implementation\nDESCRIPTION: Shows how to implement CSS fallback rules for better browser compatibility using 2D arrays.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/rules.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  [/^h-(\\d+)dvh$/, ([_, d]) => {\n    return [\n      ['height', `${d}vh`],\n      ['height', `${d}dvh`],\n    ]\n  }],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Vue CLI and Webpack 4\nDESCRIPTION: Configuration for Vue CLI with webpack 4, including UnoCSS setup and CSS extraction settings.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nconst process = require('node:process')\n\nmodule.exports = function () {\n  return import('@unocss/webpack').then(({ default: UnoCSS }) => ({\n    configureWebpack: {\n      plugins: [\n        UnoCSS({})\n      ]\n    },\n    chainWebpack(config) {\n      config.module.rule('vue').uses.delete('cache-loader')\n      config.module.rule('tsx').uses.delete('cache-loader')\n      config.merge({\n        cache: false\n      })\n    },\n    css: {\n      extract: process.env.NODE_ENV === 'development'\n        ? {\n            filename: '[name].css',\n            chunkFilename: '[name].[hash:9].css'\n          }\n        : true\n    }\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Extending UnoCSS configuration with Nuxt layers\nDESCRIPTION: Example of extending or modifying the UnoCSS configuration generated by Nuxt layers using the mergeConfigs utility.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { mergeConfigs } from '@unocss/core'\nimport config from './.nuxt/uno.config.mjs'\n\nexport default mergeConfigs([config, {\n  // your overrides\n}])\n```\n\n----------------------------------------\n\nTITLE: Setting Layers in Preflights\nDESCRIPTION: Example showing how to assign layers to preflight styles in UnoCSS. This allows you to load external CSS and assign it to a specific layer in your styling hierarchy.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npreflights: [\n  {\n    layer: 'my-layer',\n    getCSS: async () => (await fetch('my-style.css')).text(),\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Icon Collections\nDESCRIPTION: Example of registering custom icon collections alongside Iconify collections. Shows how to provide inline SVG definitions or dynamic imports for icons.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\npresetIcons({\n  collections: {\n    custom: {\n      circle: '<svg viewBox=\"0 0 120 120\"><circle cx=\"60\" cy=\"60\" r=\"50\"></circle></svg>',\n      /* ... */\n    },\n    carbon: () => import('@iconify-json/carbon/icons.json').then(i => i.default as any),\n    /* ... */\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Fonts Preset with Custom Fetch Function\nDESCRIPTION: Advanced configuration example showing how to use a custom fetch function with axios and a proxy agent to retrieve font data.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/web-fonts.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetWebFonts from '@unocss/preset-web-fonts'\nimport presetWind3 from '@unocss/preset-wind3'\nimport axios from 'axios'\nimport ProxyAgent from 'proxy-agent'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind3(),\n    presetWebFonts({\n      // use axios with an https proxy\n      customFetch: (url: string) => axios.get(url, { httpsAgent: new ProxyAgent('https://localhost:7890') }).then(it => it.data),\n      provider: 'google',\n      fonts: {\n        sans: 'Roboto',\n        mono: ['Fira Code', 'Fira Mono:400,700'],\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Typography Preset with Custom Options\nDESCRIPTION: Advanced configuration example for the Typography preset, including custom selector name and CSS extensions.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/typography.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { presetTypography } from '@unocss/preset-typography'\nimport { defineConfig, presetAttributify, presetWind3 } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetAttributify(), // required if using attributify mode\n    presetWind3(), // required\n    presetTypography({\n      selectorName: 'markdown', // now use like `markdown markdown-gray`, `not-markdown`\n      // cssExtend is an object with CSS selector as key and\n      // CSS declaration block as value like writing normal CSS.\n      cssExtend: {\n        'code': {\n          color: '#8b5cf6',\n        },\n        'a:hover': {\n          color: '#f43f5e',\n        },\n        'a:visited': {\n          color: '#14b8a6',\n        },\n      },\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Autocomplete in TypeScript\nDESCRIPTION: Demonstrates the configuration structure for UnoCSS autocomplete functionality, including templates for theme inferring, shorthand definitions, and logic groups. Shows how to define custom shorthands using arrays or string patterns, and includes support for extractors to handle class suggestions.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/autocomplete.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nautocomplete: {\n  templates: [\n    // theme inferring\n    'bg-$color/<opacity>',\n    // short hands\n    'text-<font-size>',\n    // logic OR groups\n    '(b|border)-(solid|dashed|dotted|double|hidden|none)',\n    // constants\n    'w-half',\n  ],\n  shorthands: {\n    // equal to `opacity: \"(0|10|20|30|40|50|60|70|90|100)\"`\n    'opacity': Array.from({ length: 11 }, (_, i) => i * 10),\n    'font-size': '(xs|sm|base|lg|xl|2xl|3xl|4xl|5xl|6xl|7xl|8xl|9xl)',\n    // override built-in short hands\n    'num': '(0|1|2|3|4|5|6|7|8|9)',\n  },\n  extractors: [\n      // ...extractors\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Vue CLI and Webpack 5 (CommonJS)\nDESCRIPTION: Configuration for Vue CLI with webpack 5 using CommonJS require, including UnoCSS setup, optimization, and CSS extraction settings.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nconst process = require('node:process')\nconst UnoCSS = require('@unocss/webpack').default\n\nmodule.exports = {\n  configureWebpack: {\n    devtool: 'inline-source-map',\n    plugins: [\n      UnoCSS()\n    ],\n    optimization: {\n      realContentHash: true\n    }\n  },\n  chainWebpack(config) {\n    config.module.rule('vue').uses.delete('cache-loader')\n    config.module.rule('tsx').uses.delete('cache-loader')\n    config.merge({\n      cache: false\n    })\n  },\n  css: {\n    extract: process.env.NODE_ENV === 'development'\n      ? {\n          filename: 'css/[name].css',\n          chunkFilename: 'css/[name].css'\n        }\n      : true\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Attributify JSX Transformer\nDESCRIPTION: This TypeScript code snippet shows how to configure UnoCSS to use the attributify preset and the attributify JSX transformer in the UnoCSS configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx-babel/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport transformerAttributifyJsx from '@unocss/transformer-attributify-jsx-babel'\n// uno.config.js\nimport { defineConfig, presetAttributify } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  presets: [\n    // ...\n    presetAttributify()\n  ],\n  transformers: [\n    transformerAttributifyJsx(), // <--\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Arbitrary Variants in HTML with UnoCSS\nDESCRIPTION: Example showing how arbitrary variants can be used in HTML with UnoCSS. The extractor captures complex selectors like '[&>*]:m-1' and '[&[open]]:p-2' as variants for utility classes.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/arbitrary-variants.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"[&>*]:m-1 [&[open]]:p-2\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Elm in Vite\nDESCRIPTION: Configuration for integrating UnoCSS with Elm using vite-plugin-elm. The Elm plugin must be added before the UnoCSS plugin in the configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from 'unocss/vite'\nimport { defineConfig } from 'vite'\nimport Elm from 'vite-plugin-elm'\n\nexport default defineConfig({\n  plugins: [\n    Elm(),\n    UnoCSS(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Animations in Wind3 Preset\nDESCRIPTION: TypeScript configuration to customize animations in the Wind3 preset, including keyframes, durations, timing functions, and more.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  theme: {\n    animation: {\n      keyframes: {\n        custom: '{0%, 100% { transform: scale(0.5); } 50% { transform: scale(1); }}',\n      },\n      durations: {\n        custom: '1s',\n      },\n      timingFns: {\n        custom: 'cubic-bezier(0.4,0,.6,1)',\n      },\n      properties: {\n        custom: { 'transform-origin': 'center' },\n      },\n      counts: {\n        custom: 'infinite',\n      },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Reset Styles in Wind4 Preset\nDESCRIPTION: TypeScript configuration for enabling reset styles in the Wind4 preset. It demonstrates how to set the reset option to true in the preset configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetWind4 from '@unocss/preset-wind4'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind4({\n      reset: true, // [!code focus]\n      // ^?\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw CSS Preflights with Theme Access in UnoCSS (TypeScript)\nDESCRIPTION: This snippet shows how to define preflights in UnoCSS configuration. It uses the getCSS function to access the resolved theme and inject custom CSS. The example sets a default text color and resets padding and margin for all elements.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/preflights.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\npreflights: [\n  {\n    getCSS: ({ theme }) => `\n      * {\n        color: ${theme.colors.gray?.[700] ?? '#333'};\n        padding: 0;\n        margin: 0;\n      }\n    `,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Webpack 4 (ESM)\nDESCRIPTION: Configuration for webpack 4 using dynamic import to load UnoCSS plugin. Includes CSS extraction settings.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nmodule.exports = function () {\n  return import('@unocss/webpack').then(({ default: UnoCSS }) => ({\n    plugins: [\n      UnoCSS()\n    ],\n    css: {\n      extract: {\n        filename: '[name].[hash:9].css'\n      },\n    },\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Runtime with Custom Options\nDESCRIPTION: Example showing how to configure UnoCSS runtime by defining options before loading the runtime script. This allows for adding custom rules and presets.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- define unocss options... -->\n<script>\n  window.__unocss = {\n    rules: [\n      // custom rules...\n    ],\n    presets: [\n      // custom presets...\n    ],\n    // ...\n  }\n</script>\n<!-- ... and then load the runtime -->\n<script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime\"></script>\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output from UnoCSS Shortcuts\nDESCRIPTION: Shows the resulting CSS generated by UnoCSS when using the dynamic shortcuts 'btn-green' and 'btn-red'. Demonstrates how the shortcut expands into multiple CSS properties with appropriate values.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/shortcuts.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.btn-green {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  --un-bg-opacity: 1;\n  background-color: rgb(74 222 128 / var(--un-bg-opacity));\n  border-radius: 0.5rem;\n  --un-text-opacity: 1;\n  color: rgb(220 252 231 / var(--un-text-opacity));\n}\n.btn-red {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  --un-bg-opacity: 1;\n  background-color: rgb(248 113 113 / var(--un-bg-opacity));\n  border-radius: 0.5rem;\n  --un-text-opacity: 1;\n  color: rgb(254 226 226 / var(--un-text-opacity));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Solid.js in Vite\nDESCRIPTION: Configuration for integrating UnoCSS with Solid.js using vite-plugin-solid. The UnoCSS plugin must be added before the Solid plugin in the configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from 'unocss/vite'\nimport solidPlugin from 'vite-plugin-solid'\n\nexport default {\n  plugins: [\n    UnoCSS({\n      /* options */\n    }),\n    solidPlugin(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Safelist with Dynamic Range\nDESCRIPTION: This configuration demonstrates a more flexible approach to safelisting by using JavaScript to generate an array of class names. This creates a safelist for padding utilities from p-1 through p-4.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nsafelist: [\n  ...Array.from({ length: 4 }, (_, i) => `p-${i + 1}`),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Fonts Preset with Multiple Font Families\nDESCRIPTION: Example configuration showing how to configure multiple font families with different weights, styles, and providers in the Web Fonts preset.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/web-fonts.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npresetWebFonts({\n  provider: 'google', // default provider\n  fonts: {\n    // these will extend the default theme\n    sans: 'Roboto',\n    mono: ['Fira Code', 'Fira Mono:400,700'],\n    // custom ones\n    lobster: 'Lobster',\n    lato: [\n      {\n        name: 'Lato',\n        weights: ['400', '700'],\n        italic: true,\n      },\n      {\n        name: 'sans-serif',\n        provider: 'none',\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Directives Transformer\nDESCRIPTION: Configuration example showing how to add the directives transformer to a UnoCSS configuration file. This enables functionality for @apply, @screen, and theme() directives.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformerDirectives from '@unocss/transformer-directives'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  transformers: [\n    transformerDirectives(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Breakpoints in UnoCSS\nDESCRIPTION: Example of setting custom breakpoints in UnoCSS theme configuration. This configuration overrides the default breakpoints with custom sm and md values.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntheme: {\n  // ...\n  breakpoints: {\n    sm: '320px',\n    md: '640px',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Lit for Web Components\nDESCRIPTION: Using UnoCSS with Lit-based Web Components, including the placeholder in component styles.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement {\n  static styles = css`\n    :host {...}\n    @unocss-placeholder\n  `\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loading UnoCSS Wind3 Preset Runtime\nDESCRIPTION: Loading the UnoCSS runtime with the Wind3 preset specifically. This is the default preset used by UnoCSS runtime.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime/uno.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Extending Theme Breakpoints in UnoCSS\nDESCRIPTION: Example of extending the original theme breakpoints using extendTheme. This approach preserves the original breakpoints while adding custom sm and md values.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nextendTheme: (theme) => {\n  return {\n    ...theme,\n    breakpoints: {\n      ...theme.breakpoints,\n      sm: '320px',\n      md: '640px',\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Utility Resolver in Wind4 Preset\nDESCRIPTION: TypeScript configuration for customizing the utility resolver in Wind4 preset. It shows how to use the createRemToPxResolver utility to convert rem to px in the preset configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRemToPxResolver } from '@unocss/preset-wind4/utils' // [!code focus]\nimport { defineConfig, presetWind4 } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind4({\n      utilityResolver: createRemToPxResolver() // [!code focus]\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Wind3 Preset\nDESCRIPTION: TypeScript configuration to add the Wind3 preset to UnoCSS. It shows how to import and use the preset in the UnoCSS configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetWind3 from '@unocss/preset-wind3'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind3(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for SolidJS\nDESCRIPTION: TypeScript declaration to extend SolidJS's HTMLAttributes interface with attributify attributes for proper type checking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AttributifyAttributes } from '@unocss/preset-attributify'\n\ndeclare module 'solid-js' {\n  namespace JSX {\n    interface HTMLAttributes<T> extends AttributifyAttributes {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Attributify JSX Transformer\nDESCRIPTION: This snippet shows how to configure UnoCSS to use the Attributify JSX transformer in the uno.config.ts file. It includes importing the transformer and adding it to the transformers array.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/attributify-jsx.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig, presetAttributify } from 'unocss'\nimport transformerAttributifyJsx from '@unocss/transformer-attributify-jsx'\n\nexport default defineConfig({\n  // ...\n  presets: [\n    // ...\n    presetAttributify(),\n  ],\n  transformers: [\n    transformerAttributifyJsx(), // <--\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output for UnoCSS Hover Variant\nDESCRIPTION: Demonstrates the CSS output generated by UnoCSS when using the hover variant. When 'hover:m-2' is used in HTML, UnoCSS processes the variant and rule to produce a CSS class with the :hover pseudo-selector.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/variants.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.hover\\:m-2:hover { margin: 0.5rem; }\n```\n\n----------------------------------------\n\nTITLE: Initializing UnoCSS Runtime in JavaScript\nDESCRIPTION: Basic example of importing and initializing UnoCSS runtime in a JavaScript file with options.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport initUnocssRuntime from '@unocss/runtime'\n\ninitUnocssRuntime({ /* options */ })\n```\n\n----------------------------------------\n\nTITLE: Displaying UnoCSS Examples in Markdown\nDESCRIPTION: This code snippet uses a custom component to display a list of UnoCSS examples. It also mentions that the source code for these examples can be found in the /examples directory of the UnoCSS GitHub repository.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<ContentExamples/>\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with SvelteKit\nDESCRIPTION: Setting up UnoCSS Vite plugin with SvelteKit, including the Svelte extractor for class support.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite'\nimport extractorSvelte from '@unocss/extractor-svelte'\nimport UnoCSS from 'unocss/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    UnoCSS({\n      extractors: [\n        extractorSvelte(),\n      ],\n      /* more options */\n    }),\n    sveltekit(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS for Web Components\nDESCRIPTION: Setting up UnoCSS Vite plugin for Web Components using shadow-dom mode.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from 'unocss/vite'\n\nexport default {\n  plugins: [\n    UnoCSS({\n      mode: 'shadow-dom',\n      /* more options */\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Rules in UnoCSS\nDESCRIPTION: Demonstrates how to define a simple static rule in UnoCSS that will work with autocomplete without additional configuration. The example shows a flex display rule.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/tools/autocomplete.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  ['flex', { display: 'flex' }]\n]\n```\n\n----------------------------------------\n\nTITLE: Managing Layer Import Order\nDESCRIPTION: Example showing how to control the layer order by importing layer-specific CSS files in a specific sequence. This allows for fine-grained control over CSS priority, including injecting custom CSS between UnoCSS layers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 'uno:[layer-name].css'\nimport 'uno:components.css'\n\n// layers that are not 'components' and 'utilities' will fallback to here\nimport 'uno.css'\n\n// your own CSS\nimport './my-custom.css'\n\n// \"utilities\" layer will have the highest priority\nimport 'uno:utilities.css'\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Icons Preset in TypeScript\nDESCRIPTION: Basic configuration example for adding the Icons preset to UnoCSS configuration file. Shows how to import and add the preset with optional settings.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport presetIcons from '@unocss/preset-icons'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetIcons({ /* options */ }),\n    // ...other presets\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Loading UnoCSS Attributify Runtime\nDESCRIPTION: Loading the UnoCSS runtime with both Wind3 and Attributify presets, which enables attribute-based styling syntax.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime/attributify.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for React\nDESCRIPTION: TypeScript declaration to extend React's HTMLAttributes interface with attributify attributes for proper type checking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AttributifyAttributes } from '@unocss/preset-attributify'\n\ndeclare module 'react' {\n  interface HTMLAttributes<T> extends AttributifyAttributes {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Cascade Layers with Variants\nDESCRIPTION: Example showing how to use the 'layer' variant to create CSS Cascade Layers directly in HTML. This outputs the styles within a native CSS @layer directive.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"layer-my-layer:text-xl\">text</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Core Runtime with Custom Presets\nDESCRIPTION: Example showing how to load only the UnoCSS core runtime and manually configure presets. This demonstrates using the icons preset with custom configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime/preset-icons.global.js\"></script>\n<script>\n  window.__unocss = {\n    presets: [\n      () =>\n        window.__unocss_runtime.presets.presetIcons({\n          scale: 1.2,\n          cdn: 'https://esm.sh/',\n        }),\n    ],\n  }\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime/core.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for Vue 3\nDESCRIPTION: TypeScript declaration to extend Vue 3's HTMLAttributes interface with attributify attributes for proper type checking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AttributifyAttributes } from '@unocss/preset-attributify'\n\ndeclare module '@vue/runtime-dom' {\n  interface HTMLAttributes extends AttributifyAttributes {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using @apply Directive in UnoCSS\nDESCRIPTION: Example of using @apply directive to apply utility classes in custom CSS\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/postcss.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  @apply text-center my-0 font-medium;\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Node.js Configuration with FileSystemIconLoader\nDESCRIPTION: Advanced configuration for Node.js environments showing how to load custom icons from the file system, inline definitions, or remote servers. Demonstrates using FileSystemIconLoader helper.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport fs from 'node:fs/promises'\n// loader helpers\nimport { FileSystemIconLoader } from '@iconify/utils/lib/loader/node-loaders'\nimport { defineConfig, presetIcons } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetIcons({\n      collections: {\n        // key as the collection name\n        'my-icons': {\n          account: '<svg><!-- ... --></svg>',\n          // load your custom icon lazily\n          settings: () => fs.readFile('./path/to/my-icon.svg', 'utf-8'),\n          /* ... */\n        },\n        'my-other-icons': async (iconName) => {\n          // your custom loader here. Do whatever you want.\n          // for example, fetch from a remote server:\n          return await fetch(`https://example.com/icons/${iconName}.svg`).then(res => res.text())\n        },\n        // a helper to load icons from the file system\n        // files under `./assets/icons` with `.svg` extension will be loaded as it's file name\n        // you can also provide a transform callback to change each icon (optional)\n        'my-yet-other-icons': FileSystemIconLoader(\n          './assets/icons',\n          svg => svg.replace(/#fff/, 'currentColor')\n        )\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS Classes in Next.js Components\nDESCRIPTION: Example Next.js component demonstrating UnoCSS utility classes and attributes.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/next.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n/* index.tsx */\nconst Home: NextPage = () => {\n  return (\n    <>\n      <main className=\"py-20 px-12 text-center flex flex-col items-center gap-20px\">\n        <span text=\"blue 5xl hover:red\" cursor=\"default\">Nextjs</span>\n        <div className=\"i-carbon-car inline-block\" text=\"4xl\" />\n        <button className=\"btn w-10rem\">Button</button>\n      </main>\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using CSS @layer with UnoCSS Variants\nDESCRIPTION: HTML example showing how to use CSS @layer through UnoCSS variants.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"layer-foo:p4\" />\n<div class=\"layer-bar:m4\" />\n```\n\n----------------------------------------\n\nTITLE: Serving Web Fonts Locally with UnoCSS\nDESCRIPTION: Configuration example showing how to download and serve web fonts locally instead of fetching them from external CDNs, using the local font processor from @unocss/preset-web-fonts/local.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/web-fonts.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetWebFonts from '@unocss/preset-web-fonts'\nimport { createLocalFontProcessor } from '@unocss/preset-web-fonts/local'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWebFonts({\n      provider: 'none',\n      fonts: {\n        sans: 'Roboto',\n        mono: 'Fira Code',\n      },\n      // This will download the fonts and serve them locally\n      processors: createLocalFontProcessor({\n        // Directory to cache the fonts\n        cacheDir: 'node_modules/.cache/unocss/fonts',\n\n        // Directory to save the fonts assets\n        fontAssetsDir: 'public/assets/fonts',\n\n        // Base URL to serve the fonts from the client\n        fontServeBaseUrl: '/assets/fonts'\n      })\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for Svelte & SvelteKit\nDESCRIPTION: TypeScript declaration to extend Svelte's HTMLAttributes interface with attributify attributes for proper type checking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ndeclare namespace svelteHTML {\n  import type { AttributifyAttributes } from '@unocss/preset-attributify'\n\n  type HTMLAttributes = AttributifyAttributes\n}\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS Include Magic Comment in JavaScript\nDESCRIPTION: This code demonstrates how to use the @unocss-include magic comment to force UnoCSS to scan a JavaScript file that would otherwise be excluded by default. This allows for utility classes defined in JavaScript variables to be extracted.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// ./some-utils.js\n\n// since `.js` files are not included by default,\n// the following comment tells UnoCSS to force scan this file.\n// @unocss-include\nexport const classes = {\n  active: 'bg-primary text-white',\n  inactive: 'bg-gray-200 text-gray-500',\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-selector Rules with Generator Functions\nDESCRIPTION: Shows how to create multi-selector rules using JavaScript Generator functions for complex CSS generation.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/rules.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  [/^button-(.*)$/, function* ([, color], { symbols }) {\n    yield {\n      background: color\n    }\n    yield {\n      [symbols.selector]: selector => `${selector}:hover`,\n      background: `color-mix(in srgb, ${color} 90%, black)`\n    }\n  }],\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Vite Plugin\nDESCRIPTION: Setting up the UnoCSS Vite plugin in the Vite configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from 'unocss/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    UnoCSS(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN for Iconify Collections\nDESCRIPTION: Example of configuring a CDN for loading Iconify collections, which is available since version 0.32.10. Shows how to specify esm.sh as the recommended provider.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\npresetIcons({\n  cdn: 'https://esm.sh/'\n})\n```\n\n----------------------------------------\n\nTITLE: Using icon() Function with Custom Colors\nDESCRIPTION: Examples of using the icon() function with custom color values, including hex codes and theme colors.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  background-image: icon('i-carbon-moon', '#fff');\n  background-image: icon('i-carbon-moon', 'theme(\"colors.red.500\")');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UnoCSS Layers with Variants\nDESCRIPTION: Example showing how to use the 'uno-layer' variant to create custom UnoCSS layers in HTML. This allows you to assign styles to specific layers directly in your markup.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"uno-layer-my-layer:text-xl\">text</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Breakpoints with Consistent Units in UnoCSS\nDESCRIPTION: Example of configuring breakpoints with consistent units in UnoCSS. This shows how to convert different units to ensure proper sorting of breakpoints by size.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntheme: {\n  // ...\n  breakpoints: {\n    sm: '320px',\n    // Because uno does not support comparison sorting of different unit sizes, please convert to the same unit.\n    // md: '40rem',\n    md: `${40 * 16}px`,\n    lg: '960px',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Style Reset in Astro\nDESCRIPTION: Configuration for enabling style reset in astro.config.ts\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/astro.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'astro/config'\nimport UnoCSS from 'unocss/astro'\n\nexport default defineConfig({\n  integrations: [\n    UnoCSS({\n      injectReset: true // or a path to the reset file\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Icons with UnoCSS Examples in HTML\nDESCRIPTION: Examples of using various icons from different collections with UnoCSS class syntax. Shows basic icons, colored icons, sizing, dark mode toggle, and hover effects.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- A basic anchor icon from Phosphor icons -->\n<div class=\"i-ph-anchor-simple-thin\" />\n<!-- An orange alarm from Material Design Icons -->\n<div class=\"i-mdi-alarm text-orange-400\" />\n<!-- A large Vue logo -->\n<div class=\"i-logos-vue text-3xl\" />\n<!-- Sun in light mode, Moon in dark mode, from Carbon -->\n<button class=\"i-carbon-sun dark:i-carbon-moon\" />\n<!-- Twemoji of laugh, turns to tear on hovering -->\n<div class=\"i-twemoji-grinning-face-with-smiling-eyes hover:i-twemoji-face-with-tears-of-joy\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Mini Preset\nDESCRIPTION: Example configuration file showing how to import and use the presetMini in a UnoCSS configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport presetMini from '@unocss/preset-mini'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetMini(),\n    // ...other presets\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Variant Group Transformer\nDESCRIPTION: TypeScript configuration for adding the variant group transformer to UnoCSS. This setup enables the variant group feature in your UnoCSS configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/variant-group.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformerVariantGroup from '@unocss/transformer-variant-group'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  transformers: [\n    transformerVariantGroup(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with preset-rem-to-px\nDESCRIPTION: TypeScript configuration for adding the rem-to-px preset to UnoCSS. This setup imports and adds the preset to the UnoCSS configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetRemToPx from '@unocss/preset-rem-to-px'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetRemToPx(),\n    // ...other presets\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Typography Classes in HTML\nDESCRIPTION: Examples of applying Typography preset classes to HTML elements, including responsive classes and the 'not-prose' utility.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/typography.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<article class=\"text-base prose prose-truegray xl:text-xl\">\n  {{ markdown }}\n  <p class=\"not-prose\">Some text</p>\n</article>\n```\n\nLANGUAGE: html\nCODE:\n```\n<article text-base prose prose-truegray xl=\"text-xl\">\n  {{ markdown }}\n  <p class=\"not-prose\">Some text</p>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS for Web Components with Parts\nDESCRIPTION: Setting up UnoCSS for Web Components with support for ::part pseudo-element and custom shortcuts.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from 'unocss/vite'\n\nexport default {\n  plugins: [\n    UnoCSS({\n      mode: 'shadow-dom',\n      shortcuts: [\n        { 'cool-blue': 'bg-blue-500 text-white' },\n        { 'cool-green': 'bg-green-500 text-black' },\n      ],\n      /* more options */\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Rules with Autocomplete in UnoCSS\nDESCRIPTION: Shows how to define a dynamic rule with autocomplete support using the meta object. The example demonstrates a margin utility with numerical values and template specification.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/tools/autocomplete.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  [\n    /^m-(\\d)$/,\n    ([, d]) => ({ margin: `${d / 4}rem` }),\n    { autocomplete: 'm-<num>' }, // <-- this\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS Skip Comments in HTML\nDESCRIPTION: This HTML snippet demonstrates how to use the @unocss-skip-start and @unocss-skip-end comment pairs to exclude specific blocks of code from UnoCSS extraction. In this example, the text-red class will not be processed.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"text-green text-xl\">Green Large</p>\n\n<!-- @unocss-skip-start -->\n<!-- `text-red` will not be extracted -->\n<p class=\"text-red\">Red</p>\n<!-- @unocss-skip-end -->\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Vue CLI and Webpack 5\nDESCRIPTION: Configuration for Vue CLI with webpack 5, including UnoCSS setup, optimization, and CSS extraction settings.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nconst process = require('node:process')\n\nmodule.exports = function () {\n  return import('@unocss/webpack').then(({ default: UnoCSS }) => ({\n    configureWebpack: {\n      devtool: 'inline-source-map',\n      plugins: [\n        UnoCSS()\n      ],\n      optimization: {\n        realContentHash: true\n      }\n    },\n    chainWebpack(config) {\n      config.module.rule('vue').uses.delete('cache-loader')\n      config.module.rule('tsx').uses.delete('cache-loader')\n      config.merge({\n        cache: false\n      })\n    },\n    css: {\n      extract: process.env.NODE_ENV === 'development'\n        ? {\n            filename: 'css/[name].css',\n            chunkFilename: 'css/[name].css'\n          }\n        : true\n    }\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UnoCSS Configuration File\nDESCRIPTION: Example of creating a uno.config.ts file to define UnoCSS options.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...UnoCSS options\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Compile Class Transformer\nDESCRIPTION: TypeScript configuration for adding the compile class transformer to UnoCSS. It imports the transformer and adds it to the transformers array in the UnoCSS configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/compile-class.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformerCompileClass from '@unocss/transformer-compile-class'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  transformers: [\n    transformerCompileClass(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Attributify JSX Transformer with Blocklist\nDESCRIPTION: This snippet demonstrates how to configure the Attributify JSX transformer with a blocklist to prevent certain attributes from being transformed. It uses both regex and string patterns for blocking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/attributify-jsx.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntransformerAttributifyJsx({\n  blocklist: [/text-[a-zA-Z]*/, 'text-5xl']\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Icons Preset with Package Managers\nDESCRIPTION: Commands to install the UnoCSS Icons preset and Iconify JSON collections using different package managers (pnpm, yarn, npm, and bun).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-icons @iconify-json/[the-collection-you-want]\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-icons @iconify-json/[the-collection-you-want]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-icons @iconify-json/[the-collection-you-want]\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-icons @iconify-json/[the-collection-you-want]\n```\n\n----------------------------------------\n\nTITLE: Using @apply directive in CSS\nDESCRIPTION: Example of using the @apply directive in CSS to apply multiple utility classes to a custom class.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  @apply text-center my-0 font-medium;\n}\n```\n\n----------------------------------------\n\nTITLE: Browser Configuration with Dynamic Imports\nDESCRIPTION: Configuration for loading Iconify collections in browser environments using dynamic imports to ensure they are bundled as async chunks and loaded on demand.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport presetIcons from '@unocss/preset-icons/browser'\n\nexport default defineConfig({\n  presets: [\n    presetIcons({\n      collections: {\n        carbon: () => import('@iconify-json/carbon/icons.json').then(i => i.default),\n        mdi: () => import('@iconify-json/mdi/icons.json').then(i => i.default),\n        logos: () => import('@iconify-json/logos/icons.json').then(i => i.default),\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Preventing FOUC with UnoCSS Cloaking\nDESCRIPTION: CSS rules to prevent Flash of Unstyled Content (FOUC) using the un-cloak attribute. Elements with this attribute will be hidden until UnoCSS applies styles to them.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n[un-cloak] {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Providing External UnoCSS Config to Runtime\nDESCRIPTION: Example showing how to provide an external UnoCSS configuration to the runtime using the defaults property.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport initUnocssRuntime from '@unocss/runtime'\nimport config from './uno.config'\n\ninitUnocssRuntime({ defaults: config })\n```\n\n----------------------------------------\n\nTITLE: Using Quoted Values with @apply for Complex Rules\nDESCRIPTION: Examples showing how to use quoted values with @apply for rules containing special characters like colons (used in hover states).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  --at-apply: 'hover:text-red hover:font-bold';\n  /* or */\n  @apply 'hover:text-red hover:font-bold';\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of @screen lt- Variant\nDESCRIPTION: Shows how the @screen directive with lt- variant gets transformed into max-width media queries based on theme breakpoint values.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n@media (max-width: 319.9px) {\n  .grid {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n}\n@media (max-width: 639.9px) {\n  .grid {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with transformer-directives\nDESCRIPTION: TypeScript code snippet showing how to import and configure the transformer-directives in the UnoCSS configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformerDirectives from '@unocss/transformer-directives'\n// uno.config.ts\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  transformers: [\n    transformerDirectives(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Static Class Combinations in HTML\nDESCRIPTION: This HTML snippet shows how to use the statically defined class combinations within a template. By accessing the classes object with a dynamic key, you can apply the appropriate utility classes while still allowing UnoCSS to extract them at build time.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"${classes[color]}\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using @screen with lt- Variant for Max-Width Queries\nDESCRIPTION: Example of using the lt- variant with @screen directive to create max-width media queries for specific breakpoints.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  --uno: grid grid-cols-2;\n}\n@screen lt-xs {\n  .grid {\n    --uno: grid-cols-1;\n  }\n}\n@screen lt-sm {\n  .grid {\n    --uno: grid-cols-3;\n  }\n}\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Svelte Scoped in Vite\nDESCRIPTION: Configuration example for integrating UnoCSS Svelte Scoped with Vite and SvelteKit.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { sveltekit } from '@sveltejs/kit/vite'\nimport UnoCSS from '@unocss/svelte-scoped/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    UnoCSS({\n      // injectReset: '@unocss/reset/normalize.css', // see type definition for all included reset options or how to pass in your own\n      // ...other Svelte Scoped options\n    }),\n    sveltekit(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of @apply Directive\nDESCRIPTION: Shows how the @apply directive gets transformed into standard CSS properties and values by the UnoCSS directives transformer.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  margin-top: 0rem;\n  margin-bottom: 0rem;\n  text-align: center;\n  font-weight: 500;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing UnoCSS Blocklist Messages in Configuration\nDESCRIPTION: Example of how to customize messages for blocked rules in the UnoCSS configuration file to make them more informative and context-specific.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/eslint.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  blocklist: [\n    ['bg-red-500', { message: 'Use bg-red-600 instead' }],\n    [/-auto$/, { message: s => `Use ${s.replace(/-auto$/, '-a')} instead` }], // -> \"my-auto\" is in blocklist: Use \"my-a\" instead\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Using Theme in UnoCSS Dynamic Shortcuts\nDESCRIPTION: Example of consuming theme values in UnoCSS dynamic shortcuts. This demonstrates how to create a dynamic badge shortcut that uses colors from the theme.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/theme.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nshortcuts: [\n  [/^badge-(.*)$/, ([, c], { theme }) => {\n    if (Object.keys(theme.colors).includes(c))\n      return `bg-${c}4:10 text-${c}5 rounded`\n  }],\n]\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Configuration with Svelte Extractor\nDESCRIPTION: Configuration setup for integrating the Svelte extractor into UnoCSS configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/svelte.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport extractorSvelte from '@unocss/extractor-svelte'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  extractors: [\n    extractorSvelte(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring applyVariable in transformer-directives\nDESCRIPTION: JavaScript configuration options for the applyVariable feature in the transformer-directives.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntransformerDirectives({\n  // the defaults\n  applyVariable: ['--at-apply', '--uno-apply', '--uno'],\n  // or disable with:\n  // applyVariable: false\n})\n```\n\n----------------------------------------\n\nTITLE: Using @screen Directive with Named Breakpoints\nDESCRIPTION: Examples of using the @screen directive to create media queries that reference breakpoints by name from theme.breakpoints.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  --uno: grid grid-cols-2;\n}\n@screen xs {\n  .grid {\n    --uno: grid-cols-1;\n  }\n}\n@screen sm {\n  .grid {\n    --uno: grid-cols-3;\n  }\n}\n/* ... */\n...;\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of @screen Directive\nDESCRIPTION: Shows how the @screen directive gets transformed into standard CSS media queries based on theme breakpoint values.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n@media (min-width: 320px) {\n  .grid {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n}\n@media (min-width: 640px) {\n  .grid {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Tagify Preset\nDESCRIPTION: Configuration setup for the Tagify preset in UnoCSS config file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetTagify from '@unocss/preset-tagify'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetTagify({ /* options */ }),\n    // ...other presets\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of theme() Function\nDESCRIPTION: Shows how the theme() function gets compiled to actual color values from the theme configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n.btn-blue {\n  background-color: #3b82f6;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme in Mini Preset\nDESCRIPTION: TypeScript configuration example showing how to customize the theme colors in the Mini preset.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\npresetMini({\n  theme: {\n    // ...\n    colors: {\n      veryCool: '#0000ff', // class=\"text-very-cool\"\n      brand: {\n        primary: 'hsl(var(--hue, 217) 78% 51%)', // class=\"bg-brand-primary\"\n      }\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Cascade Layers\nDESCRIPTION: Configuration to enable CSS Cascade Layers in UnoCSS output. This allows UnoCSS layers to be output as native CSS @layer directives.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\noutputToCssLayers: true\n```\n\n----------------------------------------\n\nTITLE: Enforcing Prefix Usage Configuration\nDESCRIPTION: Configuration to enforce the usage of the prefix for all attributify utilities, preventing conflicts.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\npresetAttributify({\n  prefix: 'un-',\n  prefixedOnly: true, // <--\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with TypeScript\nDESCRIPTION: Example of a UnoCSS configuration file (uno.config.ts) using TypeScript, defining CLI-specific options.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/cli.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  cli: {\n    entry: {}, // CliEntryItem | CliEntryItem[]\n  },\n  // ...\n})\n\ninterface CliEntryItem {\n  /**\n   * Glob patterns to match files\n   */\n  patterns: string[]\n  /**\n   * The output filename for the generated UnoCSS file\n   */\n  outFile: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Theme Values for Wind4 Preset\nDESCRIPTION: TypeScript code snippet showing the default values for the Theme.defaults configuration in Wind4 preset. It includes default settings for transitions, fonts, and mono fonts.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Theme } from '@unocss/preset-wind4/theme'\n\nexport const defaults: Theme['defaults'] = {\n  transition: {\n    duration: '150ms',\n    timingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  },\n  font: {\n    family: 'var(--font-sans)',\n    featureSettings: 'var(--font-sans--font-feature-settings)',\n    variationSettings: 'var(--font-sans--font-variation-settings)',\n  },\n  monoFont: {\n    family: 'var(--font-mono)',\n    featureSettings: 'var(--font-mono--font-feature-settings)',\n    variationSettings: 'var(--font-mono--font-variation-settings)',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dark Mode with Wind3 Preset\nDESCRIPTION: Examples of using dark mode with the Wind3 preset, including class-based and media query-based dark mode implementations.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"dark:bg-red:10\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Default UnoCSS Preset\nDESCRIPTION: Shows how to disable the default UnoCSS preset by setting an empty presets array, allowing for completely custom rules implementation.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/presets.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [], // disable default preset\n  rules: [\n    // your custom rules\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of @screen at- Variant\nDESCRIPTION: Shows how the @screen directive with at- variant gets transformed into min-width and max-width media queries for specific breakpoint ranges.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_13\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n@media (min-width: 320px) and (max-width: 639.9px) {\n  .grid {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n}\n@media (min-width: 1280px) and (max-width: 1535.9px) {\n  .grid {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n@media (min-width: 1536px) {\n  .grid {\n    grid-template-columns: repeat(4, minmax(0, 1fr));\n  }\n}\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Transformed Svelte component with scoped styles\nDESCRIPTION: Example showing how the Svelte component with utility class is transformed to have the styles included directly in the component's style block.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"uno-ei382o\" />\n\n<style>\n  :global(.uno-ei382o) {\n    margin-bottom: 0.25rem;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS in Astro\nDESCRIPTION: Basic configuration setup for integrating UnoCSS with Astro in astro.config.ts\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/astro.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'astro/config'\nimport UnoCSS from 'unocss/astro'\n\nexport default defineConfig({\n  integrations: [\n    UnoCSS(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Optional UnoCSS ESLint Rules\nDESCRIPTION: Example of how to enable and configure optional UnoCSS ESLint rules in the .eslintrc file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/eslint.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"@unocss\"\n  ],\n  \"rules\": {\n    \"@unocss/<rule-name>\": \"warn\", // or \"error\",\n    \"@unocss/<another-rule-name>\": [\"warn\" /* or \"error\" */, { /* options */ }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Inline Text Extraction\nDESCRIPTION: This snippet demonstrates how to extract utility classes from inline text strings or asynchronous sources. It includes both a static HTML string and an async function that fetches content from an external source.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  content: {\n    inline: [\n      // plain text\n      '<div class=\"p-4 text-red\">Some text</div>',\n      // async getter\n      async () => {\n        const response = await fetch('https://example.com')\n        return response.text()\n      },\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Dark Mode with Mini Preset\nDESCRIPTION: HTML example demonstrating how to use class-based dark mode with the dark: variant.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"dark:bg-red:10\" />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for Astro\nDESCRIPTION: TypeScript declaration to extend Astro's HTMLAttributes interface with attributify attributes for proper type checking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AttributifyAttributes } from '@unocss/preset-attributify'\n\ndeclare global {\n  namespace astroHTML.JSX {\n    interface HTMLAttributes extends AttributifyAttributes { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for Preact\nDESCRIPTION: TypeScript declaration to extend Preact's HTMLAttributes interface with attributify attributes for proper type checking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AttributifyAttributes } from '@unocss/preset-attributify'\n\ndeclare module 'preact' {\n  namespace JSX {\n    interface HTMLAttributes extends AttributifyAttributes {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Self-referencing with Tilde Syntax\nDESCRIPTION: Using the tilde (~) for self-referencing in attributify mode to avoid repeating the utility name.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button border=\"~ red\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Parent-dependent utility class in Svelte component\nDESCRIPTION: Example showing how context-aware utility classes like dark mode and RTL are handled in a Svelte component.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"dark:mb-2 rtl:right-0\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Extra CSS Properties for Icons\nDESCRIPTION: Example of adding default CSS properties to all icons by configuring the extraProperties option in the preset. Shows how to make icons inline-block by default.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\npresetIcons({\n  extraProperties: {\n    'display': 'inline-block',\n    'vertical-align': 'middle',\n    // ...\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Svelte\nDESCRIPTION: Setting up UnoCSS Vite plugin with Svelte, including the Svelte extractor for class support.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { svelte } from '@sveltejs/vite-plugin-svelte'\nimport extractorSvelte from '@unocss/extractor-svelte'\nimport UnoCSS from 'unocss/vite'\n\nexport default {\n  plugins: [\n    UnoCSS({\n      extractors: [\n        extractorSvelte(),\n      ],\n      /* more options */\n    }),\n    svelte(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling UnoCSS DevTools\nDESCRIPTION: Importing UnoCSS and its DevTools for editing classes in browser DevTools.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'uno.css'\nimport 'virtual:unocss-devtools'\n```\n\n----------------------------------------\n\nTITLE: Example MDC Syntax Usage\nDESCRIPTION: Demonstration of MDC syntax in markdown files showing how classes can be applied to different markdown elements using curly braces notation.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/mdc.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Title{.text-2xl.font-bold}\n\nHello [World]{.text-blue-500}\n\n![image](/image.png){.w-32.h-32}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Extractors in TypeScript\nDESCRIPTION: Demonstrates how to define custom extractors in the UnoCSS configuration file. This snippet shows the basic structure for adding extractors to the config.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/extractors.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  extractors: [\n    // your extractors\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Variant Group Transformer\nDESCRIPTION: Configuration setup for enabling the variant group transformer in UnoCSS config file\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-variant-group/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformerVariantGroup from '@unocss/transformer-variant-group'\n// uno.config.ts\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  transformers: [\n    transformerVariantGroup(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Standard Utility Classes Example\nDESCRIPTION: Example of multiple utility classes in the traditional class attribute format.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"m-2 rounded text-teal-400\" />\n```\n\n----------------------------------------\n\nTITLE: Transformed parent-dependent utility classes\nDESCRIPTION: Example showing how context-aware utility classes are transformed to global styles that work with parent attributes.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"uno-3hashz\"></div>\n\n<style>\n  :global(.dark .uno-3hashz) {\n    margin-bottom: 0.5rem;\n  }\n  :global([dir=\"rtl\"] .uno-3hashz) {\n    right: 0rem;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Defining UnoCSS Utility Classes for Positioning and Text Styling\nDESCRIPTION: This snippet defines several UnoCSS utility classes for positioning elements and styling text. It includes classes for absolute positioning, text color, and custom attribute selectors for specific positioning and text color use cases.\nSOURCE: https://github.com/unocss/unocss/blob/main/test/cases/preset-attributify/case-5/matched.txt#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nabsolute\ntext-red\n[bottom-5=\"\"]\n[top-5=\"\"]\n[text~=\"green\"]\n```\n\n----------------------------------------\n\nTITLE: Transformed JSX Output with Attributify\nDESCRIPTION: This snippet demonstrates the result of applying the Attributify JSX transformer. It shows how valueless attributes are converted to empty string attributes in JSX.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/attributify-jsx.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div text-red=\"\" text-center=\"\" text-5xl=\"\" animate-bounce=\"\">\n      unocss\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing UnoCSS Styles in Main Entry\nDESCRIPTION: Example of importing UnoCSS styles in the main entry file of the application.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'uno.css'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for Vue with Volar\nDESCRIPTION: TypeScript declaration file to allow any attributes in Vue components, avoiding strict attribute checking by Volar.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ndeclare module '@vue/runtime-dom' {\n  interface HTMLAttributes {\n    [key: string]: any\n  }\n}\ndeclare module '@vue/runtime-core' {\n  interface AllowedComponentProps {\n    [key: string]: any\n  }\n}\nexport {}\n```\n\n----------------------------------------\n\nTITLE: Using icon() Function to Generate SVG Icons\nDESCRIPTION: Example of using the icon() function to convert icon utilities to SVG background images. Requires @unocss/preset-icons to be configured.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  background-image: icon('i-carbon-sun');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Preact\nDESCRIPTION: Setting up UnoCSS Vite plugin with Preact, using either @preact/preset-vite or @prefresh/vite.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport Preact from '@preact/preset-vite'\nimport UnoCSS from 'unocss/vite'\n\nexport default {\n  plugins: [\n    UnoCSS(),\n    Preact(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Tagify Mode HTML Usage\nDESCRIPTION: Example of using Tagify mode to embed CSS styles directly in HTML tags.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<text-red> red text </text-red>\n<flex> flexbox </flex>\nI'm feeling <i-line-md-emoji-grin /> today!\n```\n\n----------------------------------------\n\nTITLE: Using theme() Function to Access Theme Values\nDESCRIPTION: Example of using the theme() function in CSS to access theme configuration values using dot notation.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n.btn-blue {\n  background-color: theme('colors.blue.500');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UnoCSS Configuration File\nDESCRIPTION: Creating a uno.config.ts file to define UnoCSS options.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...UnoCSS options\n})\n```\n\n----------------------------------------\n\nTITLE: Apply directives in Svelte style blocks\nDESCRIPTION: Example showing how to use apply directives within Svelte style blocks to apply utility classes.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_8\n\nLANGUAGE: svelte\nCODE:\n```\n<div />\n\n<style>\n  div {\n    --at-apply: rtl:ml-2;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Enabling Nuxt layers for UnoCSS configuration\nDESCRIPTION: Configuration to enable the nuxtLayers option for UnoCSS, allowing Nuxt to automatically merge UnoCSS configuration files from different Nuxt layers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineNuxtConfig({\n  // ...\n  unocss: {\n    nuxtLayers: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a basic UnoCSS configuration file\nDESCRIPTION: Basic setup for UnoCSS configuration file that defines options for the CSS utility engine.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...UnoCSS options\n})\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Configuration Setup\nDESCRIPTION: Configuration file for UnoCSS including content paths and presets\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/postcss.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, presetWind3 } from 'unocss'\n\nexport default defineConfig({\n  content: {\n    filesystem: [\n      '**/*.{html,js,ts,jsx,tsx,vue,svelte,astro}',\n    ],\n  },\n  presets: [\n    presetWind3(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Properties in Wind4 Preset\nDESCRIPTION: CSS code snippet showing how Wind4 preset defines CSS properties using @property. It demonstrates the definition of the --un-text-opacity property.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@property --un-text-opacity {\n  syntax: '<percentage>';\n  inherits: false;\n  initial-value: 100%;\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting generated UnoCSS configuration\nDESCRIPTION: Example of re-exporting the UnoCSS configuration generated by Nuxt layers in the root configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport config from './.nuxt/uno.config.mjs'\n\nexport default config\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Query-based Dark Mode\nDESCRIPTION: TypeScript configuration to set dark mode to use media queries instead of class-based approach.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\npresetMini({\n  dark: 'media'\n})\n```\n\n----------------------------------------\n\nTITLE: Special Symbols Usage in Rules\nDESCRIPTION: Demonstrates using special symbols for adding meta information to generated CSS rules.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/rules.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrules: [\n  [/^grid$/, ([, d], { symbols }) => {\n    return {\n      [symbols.parent]: '@supports (display: grid)',\n      display: 'grid',\n    }\n  }],\n]\n```\n\n----------------------------------------\n\nTITLE: Passing utility classes to child components\nDESCRIPTION: Example showing how to pass utility classes to child components using the class prop in Svelte.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<Button class=\"px-2 py-1\">Login</Button>\n```\n\n----------------------------------------\n\nTITLE: Transformed Svelte Component with Scoped UnoCSS Classes\nDESCRIPTION: The result of transforming the previous Svelte component using the UnoCSS Vite plugin. It shows how utility classes are converted into scoped CSS rules within the component's <style> block.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-scoped/README.md#2025-04-23_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<span class:uno-0hashz={logo} />\n\n<div class=\"uno-1hashz\">Hello</div>\n\n<div class:uno-2hashz={bar}>World</div>\n<div class:uno-2hashz={text-sm}>World</div>\n\n<div class=\"uno-3hashz foo\">\n  <div class=\"uno-4hashz\">Logo</div>\n  <Button class=\"uno-4hashz\">Login</Button>\n</div>\n\n<style>\n  :global(.uno-1hashz) {\n    --un-bg-opacity: 1;\n    background-color: rgb(254 226 226 / var(--un-bg-opacity));\n    font-size: 1.125rem;\n    line-height: 1.75rem;\n  }\n\n  :global(.uno-2hashz) {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n\n  :global(.uno-3hashz) {\n    position: fixed;\n    display: flex;\n  }\n  :global([dir=\"ltr\"] .uno-3hashz) {\n    left: 0rem;\n  }\n  :global([dir=\"rtl\"] .uno-3hashz) {\n    right: 0rem;\n  }\n  :global(.uno-3hashz > :not([hidden]) ~ :not([hidden])) {\n    --un-space-x-reverse: 0;\n    margin-left: calc(0.25rem * calc(1 - var(--un-space-x-reverse)));\n    margin-right: calc(0.25rem * var(--un-space-x-reverse));\n  }\n\n  :global(.uno-4hashz) {\n    padding-left:0.5rem;\n    padding-right:0.5rem;\n    padding-top:0.25rem;\n    padding-bottom:0.25rem;\n  }\n\n  :global(.uno-0hashz) {\n    /* logo shortcut styles will be put here... */\n  }\n\n  div {\n    --un-text-opacity: 1;\n    color: rgb(59 130 246 / var(--un-text-opacity));\n    text-decoration-line: underline;\n  }\n\n  .foo {\n    color: red;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom UnoCSS Config File Path in Vite\nDESCRIPTION: A Vite configuration example that shows how to manually specify the path to a UnoCSS configuration file. This is useful when you want to use a non-standard file name or location for your UnoCSS config.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/config-file.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from 'unocss/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    UnoCSS({\n      configFile: '../my-uno.config.ts',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Typography Preset\nDESCRIPTION: Configuration example for UnoCSS, including the Typography preset along with other presets.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/typography.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  defineConfig,\n  presetAttributify,\n  presetTypography,\n  presetWind3\n} from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetAttributify(), // required when using attributify mode\n    presetWind3(), // required\n    presetTypography(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: UnoCSS HTML Attribute Patterns\nDESCRIPTION: Demonstration of various UnoCSS utility classes implemented as HTML attributes, including layout, spacing, typography, colors, transitions, and interactive states like hover and focus.\nSOURCE: https://github.com/unocss/unocss/blob/main/test/cases/preset-attributify/case-2/matched.txt#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[ma=\"\"]\n<md:color-red\n[text-center=\"\"]\n[flex=\"\"]\n[flex-col=\"\"]\n[select-none=\"\"]\n[inline-flex=\"\"]\n[pointer-events-none=\"\"]\n[h-80=\"\"]\n[align-middle=\"\"]\n[mt-a=\"\"]\n[mb-a=\"\"]\n[mb--3=\"\"]\n[p-10=\"\"]\n[align-10px=\"\"]\n[align-20%=\"\"]\n[op-20=\"\"]\n[mt-1=\"\"]\n[tracking-wider=\"\"]\n[align-1rem=\"\"]\n[relative=\"\"]\n[h-14=\"\"]\n[m-0=\"\"]\n[pt-4=\"\"]\n[px-4=\"\"]\n[absolute=\"\"]\n[leading-1rem=\"\"]\n[left-4=\"\"]\n[top~=\"1/3\"]\n[transition~=\"200\"]\n[font-100=\"\"]\n[bg-gradient~=\"to-r\"]\n[bg-gradient~=\"from-yellow-400\"]\n[bg-gradient~=\"via-red-500\"]\n[bg-gradient~=\"to-pink-500\"]\n[font-200=\"\"]\n[text-true-gray-800=\"\"]\n[text-gray-7=\"\"]\n[text-4xl=\"\"]\n[text-5xl=\"\"]\n[all:transition-400=\"\"]\n[sm~=\"bg-blue-600\"]\n[backdrop-element~=\"filter\"]\n[before-content~=\"[quoted:!]\"]\n[after~=\"content-[string:!]\"]\n[un-placeholder~=\"text-red\"]\n[group-hover~=\"op-50\"]\n[group-hover~=\"text-teal-400\"]\n[peer-not-placeholder-shown~=\"scale-75\"]\n[peer-not-placeholder-shown~=\"origin-top-left\"]\n[peer-focus~=\"scale-75\"]\n[peer-focus~=\"origin-top-left\"]\n[peer-not-placeholder-shown~=\"text-green-500\"]\n[peer-focus~=\"text-green-500\"]\n[peer-checked~=\"text-4xl\"]\n[peer-not-placeholder-shown~=\"-translate-y-4\"]\n[peer-focus~=\"-translate-y-4\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring HMR Support in Next.js\nDESCRIPTION: Next.js webpack configuration update to support Hot Module Reload with UnoCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/next.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst nextConfig = {\n  reactStrictMode: true,\n  webpack: (config) => {\n    config.cache = false\n    config.plugins.push(UnoCSS())\n    return config\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Dependencies with Package Managers\nDESCRIPTION: Commands for installing UnoCSS and its webpack plugin using different package managers (pnpm, yarn, npm, bun).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/next.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D unocss @unocss/webpack\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D unocss @unocss/webpack\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unocss @unocss/webpack\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D unocss @unocss/webpack\n```\n\n----------------------------------------\n\nTITLE: Loading External Package Icons in UnoCSS Config\nDESCRIPTION: Demonstrates how to load icons from external packages using createExternalPackageIconLoader helper from @iconify/utils\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createExternalPackageIconLoader } from '@iconify/utils/lib/loader/external-pkg'\nimport { defineConfig, presetIcons } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetIcons({\n      collections: createExternalPackageIconLoader('an-awesome-collection')\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using --at-apply CSS Variable for Compatibility\nDESCRIPTION: Alternative syntax using CSS custom properties instead of the @apply directive for better compatibility with vanilla CSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  --at-apply: text-center my-0 font-medium;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS output without rem-to-px preset\nDESCRIPTION: The CSS output generated by UnoCSS for the m-2 class without using the rem-to-px preset, showing the default rem units.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.m-2 {\n  margin: 0.5rem;\n}\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS Placeholder in Web Components\nDESCRIPTION: Adding the UnoCSS placeholder to Web Component styles for proper CSS injection.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst template = document.createElement('template')\ntemplate.innerHTML = `\n<style>\n:host {...}\n@unocss-placeholder\n</style>\n<div class=\"m-1em\">\n...\n</div>\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Animation Categories in Wind3 Preset\nDESCRIPTION: TypeScript configuration to add categories to animations for better management and consumption by downstream tools.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  theme: {\n    animation: {\n      keyframes: {\n        custom: '{0%, 100% { transform: scale(0.5); } 50% { transform: scale(1); }}',\n      },\n      // ...\n      category: {\n        custom: 'Zooming',\n      },\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Attribute Selector Patterns\nDESCRIPTION: Collection of CSS attribute selectors used in UnoCSS for applying various styles including positioning, layout, spacing, colors, and responsive design. Demonstrates usage of utility classes through attribute selectors with modifiers like hover, dark mode, and important flags.\nSOURCE: https://github.com/unocss/unocss/blob/main/test/cases/preset-attributify/case-1/matched.txt#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nabsolute\nfixed\n[flex~=\"col\"]\n[flex~=\"items-center\"]\n[flex~=\"justify-center\"]\n[inline-block=\"\"]\n[transform=\"\"]\n[p~=\"t-2\"]\n[pt~=\"2\"]\n[border~=\"x-style-dashed\"]\n[font~=\"mono\"]\n[font~=\"sans\"]\n[p~=\"y-2\"]\n[p~=\"x-4\"]\n[pt2=\"\"]\n[rounded-sm=\"\"]\n[size~=\"w-1\"]\n[size~=\"h-0.5\"]\n[translate-x-100%=\"\"]\n[rotate-30=\"\"]\n[rotate-60=\"\"]\n[ma=\"\"]\n[m~=\"1\"]\n[m~=\"2\"]\n[m~=\"3\"]\n[ml-1.5=\"\"]\n[bg~=\"blue-400\"]\n[text~=\"white\"]\n[border~=\"rounded-xl\"]\n[border~=\"rounded\"]\n[border~=\"blue-200\"]\n[text~=\"sm\"]\n[border~=\"2\"]\n[border~=\"x-1\"]\n[uno-layer-base~=\"c-white/10\"]\n[flex~=\"!~\"]\n[!leading-4=\"\"]\n[important~=\"text-red\"]\n[important~=\"bg-red\"]\n[sm~=\"[color:red]\"]\n[md~=\"[--var:var(--another)]\"]\n[lg~=\"bg-blue-600\"]\n[un-children~=\"m-auto\"]\n[after~=\"content-[quoted:uno_css]\"]\n[bg~=\"hover:blue-500\"]\n[uno-layer-base~=\"hover:c-black/20\"]\n[bg~=\"dark:!blue-500\"]\n[bg~=\"dark:hover:blue-600\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Query-based Dark Mode\nDESCRIPTION: TypeScript configuration to enable media query-based dark mode globally in the Wind3 preset.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\npresetWind3({\n  dark: 'media'\n})\n```\n\n----------------------------------------\n\nTITLE: Using @screen Directive in UnoCSS\nDESCRIPTION: Examples of using @screen directive for responsive design with different breakpoint variants\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/postcss.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  @apply grid grid-cols-2;\n}\n@screen xs {\n  .grid {\n    @apply grid-cols-1;\n  }\n}\n@screen sm {\n  .grid {\n    @apply grid-cols-3;\n  }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  @apply grid grid-cols-2;\n}\n@screen lt-xs {\n  .grid {\n    @apply grid-cols-1;\n  }\n}\n@screen lt-sm {\n  .grid {\n    @apply grid-cols-3;\n  }\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  @apply grid grid-cols-2;\n}\n@screen at-xs {\n  .grid {\n    @apply grid-cols-1;\n  }\n}\n@screen at-xl {\n  .grid {\n    @apply grid-cols-3;\n  }\n}\n@screen at-xxl {\n  .grid {\n    @apply grid-cols-4;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Compiled Classes\nDESCRIPTION: The CSS output generated by UnoCSS for the compiled classes, including responsive and hover styles.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/compile-class.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.uno-qlmcrp {\n  text-align: center;\n}\n.uno-0qw2gr {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  font-weight: 700;\n}\n.uno-0qw2gr:hover {\n  --un-text-opacity: 1;\n  color: rgb(248 113 113 / var(--un-text-opacity));\n}\n@media (min-width: 640px) {\n  .uno-qlmcrp {\n    text-align: left;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using theme() Function in UnoCSS\nDESCRIPTION: Example of using theme() function to access theme configuration values\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/postcss.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.btn-blue {\n  background-color: theme('colors.blue.500');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mini Preset with Different Package Managers\nDESCRIPTION: Code examples showing how to install the @unocss/preset-mini package using different package managers (pnpm, yarn, npm, and bun).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-mini\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-mini\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-mini\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-mini\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for @layer Variants\nDESCRIPTION: CSS output that will be generated for the @layer variant examples.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n@layer foo {\n  .layer-foo\\:p4 {\n    padding: 1rem;\n  }\n}\n@layer bar {\n  .layer-bar\\:m4 {\n    margin: 1rem;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS ESLint in Flat Config Style\nDESCRIPTION: Example of how to set up UnoCSS ESLint config in the new flat config style using eslint.config.js.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/eslint.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport unocss from '@unocss/eslint-config/flat'\n\nexport default [\n  unocss,\n  // other configs\n]\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Attribute Selector Examples - CSS\nDESCRIPTION: Demonstrates various UnoCSS attribute selector patterns including border styles, text colors, opacity values, hover states, and responsive/dark mode modifiers. Shows the flexible syntax for combining utilities with modifiers and values.\nSOURCE: https://github.com/unocss/unocss/blob/main/test/cases/preset-attributify/case-7/matched.txt#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n[border~=\"~\"]\n[border~=\"red/10\"]\n[text-red~=\"100\"]\n[text~=\"12\"]\n[border~=\"red:10\"]\n[text~=\"lg:30\"]\n[active~=\"text-green/10\"]\n[hover~=\"text-blue:10\"]\n[border~=\"hover:red:10\"]\n[text-red~=\"dark:200\"]\n```\n\n----------------------------------------\n\nTITLE: Importing Wind3 Preset from UnoCSS Package\nDESCRIPTION: Alternative way to import the Wind3 preset directly from the 'unocss' package instead of '@unocss/preset-wind3'.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { presetWind3 } from 'unocss'\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Webpack 5 (CommonJS)\nDESCRIPTION: Configuration for webpack 5 using CommonJS require to load UnoCSS plugin. For older versions of UnoCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// webpack.config.js\nconst UnoCSS = require('@unocss/webpack').default\n\nmodule.exports = {\n  plugins: [\n    UnoCSS()\n  ],\n  optimization: {\n    realContentHash: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Vue CLI and Webpack 4 (CommonJS)\nDESCRIPTION: Configuration for Vue CLI with webpack 4 using CommonJS require, including UnoCSS setup and CSS extraction settings.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// vue.config.js\nconst process = require('node:process')\nconst UnoCSS = require('@unocss/webpack').default\n\nmodule.exports = {\n  configureWebpack: {\n    plugins: [\n      UnoCSS({}),\n    ]\n  },\n  chainWebpack(config) {\n    config.module.rule('vue').uses.delete('cache-loader')\n    config.module.rule('tsx').uses.delete('cache-loader')\n    config.merge({\n      cache: false,\n    })\n  },\n  css: {\n    extract: process.env.NODE_ENV === 'development'\n      ? {\n          filename: '[name].css',\n          chunkFilename: '[name].[hash:9].css',\n        }\n      : true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Support for Custom Prefix\nDESCRIPTION: TypeScript declaration for using attributify mode with a custom prefix for better type checking.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport type { AttributifyNames } from '@unocss/preset-attributify'\n\ntype Prefix = 'uno:' // change it to your prefix\n\ninterface HTMLAttributes extends Partial<Record<AttributifyNames<Prefix>, string>> {}\n```\n\n----------------------------------------\n\nTITLE: Comparing Tailwind Reset and Tailwind Compat Reset CSS\nDESCRIPTION: Comparison showing the difference between Tailwind reset and Tailwind compat reset CSS, where the compat version removes background-color override for buttons to avoid conflicts with UI frameworks.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/style-reset.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n```\n\nLANGUAGE: css\nCODE:\n```\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  /*background-color: transparent; !* 2 *!*/\n  background-image: none; /* 2 */\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS with CSS Cascade Layer Variant\nDESCRIPTION: Example of CSS output when using the 'layer' variant to create CSS Cascade Layers. The resulting CSS is wrapped in a CSS @layer directive while still being part of the default UnoCSS layer.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n/* layer: default */\n@layer my-layer{ .layer-my-layer\\:text-xl{ font-size:1.25rem; line-height:1.75rem; } }\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Style Preflights\nDESCRIPTION: Example of adding UnoCSS preflights to a Svelte component using style attributes\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<style uno-preflights></style>\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of UnoCSS Packages\nDESCRIPTION: A structured table listing all available UnoCSS packages with their descriptions and inclusion status in the main package. Shows which packages are included by default and which ones are enabled out of the box.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package                                                                    | Description                                         | Included in `unocss` | Enabled |\n| -------------------------------------------------------------------------- | --------------------------------------------------- | -------------------- | ------- |\n| [unocss](./unocss)                                                         | The default package with common presets and plugins | -                    | -       |\n| [@unocss/preset-mini](./preset-mini)                                       | The minimal but essential rules and variants        | ✅                   | ✅      |\n| [@unocss/preset-wind3](./preset-wind3)                                     | Tailwind / Windi CSS compact preset                 | ✅                   | ✅      |\n| [@unocss/preset-attributify](./preset-attributify)                         | Enables Attributify Mode for other rules            | ✅                   | No      |\n| [@unocss/preset-tagify](./preset-tagify)                                   | Enables Tagify Mode for other rules                 | ✅                   | No      |\n| [@unocss/preset-icons](./preset-icons)                                     | Pure CSS Icons solution powered by Iconify          | ✅                   | No      |\n| [@unocss/preset-web-fonts](./preset-web-fonts)                             | Web fonts (Google Fonts, etc.) support              | ✅                   | No      |\n| [@unocss/preset-typography](./preset-typography)                           | The typography preset                               | ✅                   | No      |\n| [@unocss/preset-rem-to-px](./preset-rem-to-px)                             | Coverts rem to px for utils                         | No                   | No      |\n| [@unocss/transformer-variant-group](./transformer-variant-group)           | Transformer for Windi CSS's variant group feature   | ✅                   | No      |\n| [@unocss/transformer-directives](./transformer-directives)                 | Transformer for CSS directives like `@apply`        | ✅                   | No      |\n| [@unocss/transformer-compile-class](./transformer-compile-class)           | Compile group of classes into one class             | ✅                   | No      |\n| [@unocss/transformer-attributify-jsx](./transformer-attributify-jsx)       | Support valueless attributify in JSX/TSX            | ✅                   | No      |\n| [@unocss/transformer-attributify-jsx-babel](./transformer-attributify-jsx) | Support valueless attributify in JSX/TSX (Babel)    | No                   | No      |\n| [@unocss/extractor-pug](./extractor-pug)                                   | Extractor for Pug                                   | No                   | -       |\n| [@unocss/extractor-svelte](./extractor-svelte)                             | Extractor for Svelte                                | No                   | -       |\n| [@unocss/extractor-mdc](./extractor-mdc)                                   | Extractor for MDC                                   | No                   | -       |\n| [@unocss/extractor-arbitrary-variants](./extractor-arbitrary-variants)     | Arbitrary variants for utils                        | No                   | No      |\n| [@unocss/reset](./reset)                                                   | Collection of common CSS resets                     | No                   | No      |\n| [@unocss/rule-utils](./rule-utils)                                         | The utilities for creating rules/presets for UnoCSS | No                   | -       |\n```\n\n----------------------------------------\n\nTITLE: Generating Theme CSS Variables in Wind4 Preset\nDESCRIPTION: CSS code snippet showing how Wind4 preset generates theme-related CSS variables. It demonstrates the definition of various theme variables like spacing, fonts, and colors.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n:root,\n:host {\n  --spacing: 0.25rem;\n  --font-sans: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial,\n    'Noto Sans', sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  --font-serif: ui-serif, Georgia, Cambria, 'Times New Roman', Times, serif;\n  --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;\n  --colors-black: #000;\n  --colors-white: #fff;\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Normalize.css Reset Stylesheet\nDESCRIPTION: Code to import the Normalize.css reset stylesheet from @unocss/reset package into your main.js file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/style-reset.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport '@unocss/reset/normalize.css'\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Legacy Browser Support in Vite\nDESCRIPTION: Configuration for using UnoCSS with @vitejs/plugin-legacy when renderModernChunks is set to false. Includes Vue.js integration and Wind preset configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport legacy from '@vitejs/plugin-legacy'\nimport vue from '@vitejs/plugin-vue'\nimport { presetWind3 } from 'unocss'\nimport Unocss from 'unocss/vite'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    vue(),\n    Unocss({\n      presets: [presetWind3()],\n      legacy: {\n        renderModernChunks: false,\n      },\n    }),\n    legacy({\n      targets: ['defaults', 'not IE 11'],\n      renderModernChunks: false,\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Attributify Preset from UnoCSS Package\nDESCRIPTION: Alternative way to import the attributify preset directly from the main UnoCSS package.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { presetAttributify } from 'unocss'\n```\n\n----------------------------------------\n\nTITLE: Installing Standalone UnoCSS Astro Package\nDESCRIPTION: Commands for installing @unocss/astro package without presets\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/astro.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/astro\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/astro\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/astro\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/astro\n```\n\n----------------------------------------\n\nTITLE: Generated CSS with UnoCSS Layer Variant\nDESCRIPTION: Example of CSS output when using the 'uno-layer' variant to create custom UnoCSS layers. The resulting CSS is placed in the specified layer with appropriate escaping.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n/* layer: my-layer */\n.uno-layer-my-layer\\:text-xl{ font-size:1.25rem; line-height:1.75rem; }\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Safelist Styles\nDESCRIPTION: Example of including UnoCSS safelist classes in a Svelte component\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<style uno-safelist></style>\n```\n\n----------------------------------------\n\nTITLE: Importing Directives Transformer from UnoCSS Package\nDESCRIPTION: Alternative way to import the directives transformer directly from the main unocss package, which includes this preset by default.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transformerDirectives } from 'unocss'\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Compat Preset in UnoCSS\nDESCRIPTION: TypeScript configuration for setting up the Legacy Compat preset with options for comma-style color functions and legacy color space support.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/legacy-compat.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetLegacyCompat from '@unocss/preset-legacy-compat'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    // ...other presets\n    presetLegacyCompat({\n      // options\n      commaStyleColorFunction: true,\n      legacyColorSpace: true\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Accessible Icon Implementation Examples\nDESCRIPTION: HTML examples showing proper accessibility implementation for icons using aria attributes\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/profile\" aria-label=\"Profile\" class=\"i-ph:user-duotone\"></a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/profile\">\n  <span aria-hidden=\"true\" class=\"i-ph:user-duotone\"></span>\n  My Profile\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Important Option with TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the 'important' option in UnoCSS using TypeScript. It sets the important option to an ID selector '#app' to increase specificity without using !important.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetWind3 from '@unocss/preset-wind'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind3({\n      important: '#app',\n    }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Svelte Component with UnoCSS Classes\nDESCRIPTION: Example Svelte component using UnoCSS utility classes and shortcuts. This demonstrates how various class combinations and conditional classes are used in a Svelte template.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-scoped/README.md#2025-04-23_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<span class:logo />\n<!-- Assuming logo is set as a shortcut and it is a variable in this component -->\n\n<div class=\"bg-red-100 text-lg\">Hello</div>\n\n<div class:text-sm={bar}>World</div>\n<div class:text-sm>World</div>\n\n<div class=\"fixed flex top:0 ltr:left-0 rtl:right-0 space-x-1 foo\">\n  <div class=\"px-2 py-1\">Logo</div>\n  <Button class=\"py-1 px-2\">Login</Button>\n</div>\n\n<style>\n  div {\n    --at-apply: text-blue-500 underline;\n  }\n  .foo {\n    color: red;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Attributify JSX Transformer with Package Managers\nDESCRIPTION: These snippets show how to install the @unocss/transformer-attributify-jsx package using different package managers like pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/attributify-jsx.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/transformer-attributify-jsx\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/transformer-attributify-jsx\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/transformer-attributify-jsx\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/transformer-attributify-jsx\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variable Style for @apply\nDESCRIPTION: Alternative syntax for @apply using CSS custom properties, which is compatible with vanilla CSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  --at-apply: text-center my-0 font-medium;\n}\n```\n\n----------------------------------------\n\nTITLE: Using :uno: prefix for class compilation in HTML\nDESCRIPTION: HTML example showing how to mark classes for compilation using the :uno: prefix. This tells the transformer which class groups to compile into single classes.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-compile-class/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\":uno: text-center sm:text-left\">\n  <div class=\":uno: text-sm font-bold hover:text-red\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing sanitize.css Reset Stylesheets\nDESCRIPTION: Code to import both the sanitize.css and assets.css reset stylesheets from @unocss/reset package into your main.js file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/style-reset.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport '@unocss/reset/sanitize/sanitize.css'\nimport '@unocss/reset/sanitize/assets.css'\n```\n\n----------------------------------------\n\nTITLE: Basic UnoCSS CSS Implementation\nDESCRIPTION: Examples of using @unocss directive in CSS files for different layer implementations\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/postcss.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n@unocss;\n```\n\nLANGUAGE: css\nCODE:\n```\n@unocss preflights;\n@unocss default;\n\n/*\n  Fallback layer. It's always recommended to include.\n  Only unused layers will be injected here.\n*/\n@unocss;\n```\n\nLANGUAGE: css\nCODE:\n```\n@unocss all;\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS ESLint in Legacy .eslintrc Style\nDESCRIPTION: Example of how to set up UnoCSS ESLint config in the legacy .eslintrc style using JSON format.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/eslint.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"@unocss\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Compile Class Enforcement\nDESCRIPTION: ESLint configuration to enforce the use of the class compile transformer across a project using the @unocss/enforce-class-compile rule.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/compile-class.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@unocss\"],\n  \"rules\": {\n    \"@unocss/enforce-class-compile\": \"warn\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Runtime with npm\nDESCRIPTION: Command to install the UnoCSS runtime package using npm for bundler usage.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @unocss/runtime\n```\n\n----------------------------------------\n\nTITLE: Installing Arbitrary Variants Extractor with yarn\nDESCRIPTION: Command to install the arbitrary variants extractor package using yarn package manager. This is only needed if you're not using the mini preset which includes it by default.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/arbitrary-variants.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/extractor-arbitrary-variants\n```\n\n----------------------------------------\n\nTITLE: Using theme() function in CSS\nDESCRIPTION: Example of using the theme() function to access theme configuration values in CSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.btn-blue {\n  background-color: theme('colors.blue.500');\n}\n```\n\n----------------------------------------\n\nTITLE: Using @screen with at- Variant for Range Queries\nDESCRIPTION: Example of using the at- variant with @screen directive to create range-specific media queries for breakpoints.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  --uno: grid grid-cols-2;\n}\n@screen at-xs {\n  .grid {\n    --uno: grid-cols-1;\n  }\n}\n@screen at-xl {\n  .grid {\n    --uno: grid-cols-3;\n  }\n}\n@screen at-xxl {\n  .grid {\n    --uno: grid-cols-4;\n  }\n}\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Compat Reset Stylesheet\nDESCRIPTION: Code to import the Tailwind compat reset stylesheet from @unocss/reset package into your main.js file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/style-reset.md#2025-04-23_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport '@unocss/reset/tailwind-compat.css'\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Fonts Preset in UnoCSS\nDESCRIPTION: Basic configuration example showing how to import and add the Web Fonts preset to a UnoCSS configuration file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/web-fonts.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport presetWebFonts from '@unocss/preset-web-fonts'\nimport presetWind3 from '@unocss/preset-wind3'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  presets: [\n    presetWind3(),\n    presetWebFonts({ /* options */ }),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: UnoCSS Configuration Setup\nDESCRIPTION: Configuration code showing how to set up the transformer in the UnoCSS config file with preset-attributify.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformerAttributifyJsx from '@unocss/transformer-attributify-jsx'\n// uno.config.ts\nimport { defineConfig, presetAttributify } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  presets: [\n    // ...\n    presetAttributify()\n  ],\n  transformers: [\n    transformerAttributifyJsx(), // <--\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Reset Styles with UnoCSS\nDESCRIPTION: How to include CSS reset styles when using UnoCSS runtime, as the runtime does not include preflights by default. Two options are shown: normalize.css and tailwind reset.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@unocss/reset/normalize.min.css\" />\n<!-- or -->\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/@unocss/reset/tailwind.min.css\" />\n```\n\n----------------------------------------\n\nTITLE: Customizing Border Color in UnoCSS Reset\nDESCRIPTION: Shows how to customize the default border color in UnoCSS reset using CSS variables. The border color can be modified by setting the --un-default-border-color CSS variable in the root scope.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/reset/tailwind.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@import '@unocss/reset/tailwind.css';\n\n:root {\n  --un-default-border-color: #e5e7eb;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output for Dark Mode Background Utility\nDESCRIPTION: This CSS snippet shows the output generated by UnoCSS for the 'dark:bg-blue' utility when the important option is set to '#app'. It demonstrates how the selector increases specificity without using !important.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n#app :is(.dark .dark\\:bg-blue) {\n  --un-bg-opacity: 1;\n  background-color: rgb(96 165 250 / var(--un-bg-opacity));\n}\n```\n\n----------------------------------------\n\nTITLE: Using Opt-in Media Query-based Dark Mode\nDESCRIPTION: Example of using opt-in media query-based dark mode with the '@dark:' variant in HTML.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"@dark:bg-red:10\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Tailwind Reset Stylesheet\nDESCRIPTION: Code to import the Tailwind reset stylesheet from @unocss/reset package into your main.js file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/style-reset.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport '@unocss/reset/tailwind.css'\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output with Layers\nDESCRIPTION: Example of CSS output showing how UnoCSS generates layer comments to organize the styles. The output demonstrates how rules from different layers are grouped together in the final CSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/config/layers.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* layer: default */\n.btn { padding: 4px; }\n/* layer: utilities */\n.m-2 { margin: 0.5rem; }\n```\n\n----------------------------------------\n\nTITLE: Compiled HTML output after transformation\nDESCRIPTION: The resulting HTML after the transformer has compiled the marked classes. Each :uno: prefixed class group is replaced with a single, unique class name.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-compile-class/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"uno-qlmcrp\">\n  <div class=\"uno-0qw2gr\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Compiled HTML Output\nDESCRIPTION: The resulting HTML after the compile class transformer has processed the marked classes, replacing them with unique compiled class names.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/compile-class.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"uno-qlmcrp\">\n  <div class=\"uno-0qw2gr\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS for Nuxt with pnpm\nDESCRIPTION: Command to install UnoCSS and its Nuxt module using pnpm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D unocss @unocss/nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing @unocss/preset-rem-to-px with bun\nDESCRIPTION: Command to install the rem-to-px preset as a development dependency using bun package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-rem-to-px\n```\n\n----------------------------------------\n\nTITLE: Defining UnoCSS Utility Classes for Styling and Layout\nDESCRIPTION: This snippet showcases a wide range of UnoCSS utility classes. It includes classes for colors, positioning, typography, spacing, borders, and responsive design. The classes demonstrate various features of UnoCSS including opacity modifiers, hover states, dark mode, and custom properties.\nSOURCE: https://github.com/unocss/unocss/blob/main/test/cases/preset-attributify/case-4/matched.txt#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n[uno-layer-base~=\"c-white/10\"]\n[uno-layer-base~=\"hover:c-black/20\"]\n[sm~=\"[color:red]\"]\n[md~=\"[--var:var(--another)]\"]\n[lg~=\"bg-blue-600\"]\nabsolute\nfixed\n[important~=\"text-red\"]\n[important~=\"bg-red\"]\n[font~=\"mono\"]\n[font~=\"sans\"]\n[bg~=\"blue-400\"]\n[bg~=\"hover:blue-500\"]\n[bg~=\"dark:!blue-500\"]\n[bg~=\"dark:hover:blue-600\"]\n[text~=\"sm\"]\n[text~=\"white\"]\n[flex~=\"!~\"]\n[flex~=\"col\"]\n[p~=\"t-2\"]\n[pt~=\"2\"]\n[border~=\"rounded-xl\"]\n[border~=\"x-1\"]\n[border~=\"x-style-dashed\"]\n[border~=\"2\"]\n[border~=\"rounded\"]\n[border~=\"blue-200\"]\n[un-children~=\"m-auto\"]\n[pt2=\"\"]\n[rounded-sm=\"\"]\n[inline-block=\"\"]\n[transform=\"\"]\n[rotate-30=\"\"]\n[rotate-60=\"\"]\n[ma=\"\"]\n[m~=\"1\"]\n[m~=\"2\"]\n[m~=\"3\"]\n[ml-1.5=\"\"]\n[translate-x-100=\"\"]\n[bg~=\"sky-400\"]\n[bg~=\"transparent\"]\n[after~=\"content-[quoted:uno-css]\"]\n[bg~=\"hover:sky-500\"]\n```\n\n----------------------------------------\n\nTITLE: Using @screen directive in CSS\nDESCRIPTION: Example of using the @screen directive to create responsive styles based on named breakpoints.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  --uno: grid grid-cols-2;\n}\n@screen xs {\n  .grid {\n    --uno: grid-cols-1;\n  }\n}\n@screen sm {\n  .grid {\n    --uno: grid-cols-3;\n  }\n}\n/* ... */\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Wind4 Preset with Package Managers\nDESCRIPTION: Commands for installing the @unocss/preset-wind4 package using different package managers like pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind4.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-wind4\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-wind4\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-wind4\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-wind4\n```\n\n----------------------------------------\n\nTITLE: Importing UnoCSS Presets from ESM.sh\nDESCRIPTION: Example showing how to import UnoCSS presets from ESM.sh for browser usage with the defineConfig utility.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@unocss/runtime'\nimport presetIcons from 'https://esm.sh/@unocss/preset-icons/browser'\nimport presetWind3 from 'https://esm.sh/@unocss/preset-wind3'\n\nexport default defineConfig({\n  presets: [presetWind3(), presetIcons({ cdn: 'https://esm.sh/' })],\n})\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for compiled classes\nDESCRIPTION: The CSS output generated by UnoCSS for the compiled classes. This includes all the styles from the original utility classes, now associated with the new, unique class names.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-compile-class/README.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.uno-qlmcrp {\n  text-align: center;\n}\n.uno-0qw2gr {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  font-weight: 700;\n}\n.uno-0qw2gr:hover {\n  --un-text-opacity: 1;\n  color: rgb(248 113 113 / var(--un-text-opacity));\n}\n@media (min-width: 640px) {\n  .uno-qlmcrp {\n    text-align: left;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Media Query-based Dark Mode\nDESCRIPTION: CSS output that will be generated when using media query-based dark mode.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n@media (prefers-color-scheme: dark) {\n  .dark\\:bg-red\\:10 {\n    background-color: rgb(248 113 113 / 0.1);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS for Nuxt with npm\nDESCRIPTION: Command to install UnoCSS and its Nuxt module using npm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unocss @unocss/nuxt\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SvelteKit + UnoCSS Example\nDESCRIPTION: Commands to install dependencies and start the development server for the SvelteKit + UnoCSS example project.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-scoped/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Attributify Mode for CSS Utilities\nDESCRIPTION: The same button styled using attributify mode, separating utility classes into related attribute groups for better readability.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n  bg=\"blue-400 hover:blue-500 dark:blue-500 dark:hover:blue-600\"\n  text=\"sm white\"\n  font=\"mono light\"\n  p=\"y-2 x-4\"\n  border=\"2 rounded blue-200\"\n>\n  Button\n</button>\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Web Fonts\nDESCRIPTION: Example of the CSS that would be generated by the Web Fonts preset, including the @import statement for Google Fonts and the CSS classes for different font families.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/web-fonts.md#2025-04-23_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Roboto&family=Fira+Code&family=Fira+Mono:wght@400;700&family=Lobster&family=Lato:ital,wght@0,400;0,700;1,400;1,700&display=swap');\n\n/* layer: default */\n.font-lato {\n  font-family: \"Lato\", sans-serif;\n}\n.font-lobster {\n  font-family: \"Lobster\";\n}\n.font-mono {\n  font-family: \"Fira Code\", \"Fira Mono\", ui-monospace, SFMono-Regular, Menlo,\n    Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n}\n.font-sans {\n  font-family: \"Roboto\", ui-sans-serif, system-ui, -apple-system,\n    BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\",\n    sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\",\n    \"Noto Color Emoji\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Typography Preset with Package Managers\nDESCRIPTION: Commands to install the @unocss/preset-typography package using different package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/typography.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-typography\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-typography\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-typography\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-typography\n```\n\n----------------------------------------\n\nTITLE: Using Variant Groups in HTML\nDESCRIPTION: Example of using variant groups in HTML class attributes\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-variant-group/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"hover:(bg-gray-400 font-medium) font-(light mono)\" />\n```\n\n----------------------------------------\n\nTITLE: Transformed CSS from @screen directive\nDESCRIPTION: The resulting CSS after the @screen directive is transformed, showing the media queries and applied styles.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.grid {\n  display: grid;\n  grid-template-columns: repeat(2, minmax(0, 1fr));\n}\n@media (min-width: 320px) {\n  .grid {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n}\n@media (min-width: 640px) {\n  .grid {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n}\n/* ... */\n```\n\n----------------------------------------\n\nTITLE: Configuring Blocklist for Attributify JSX Transformer\nDESCRIPTION: This JavaScript snippet demonstrates how to configure a blocklist for the attributify JSX transformer to prevent certain attributes from being transformed.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx-babel/README.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\ntransformerAttributifyJsx({\n  blocklist: [/text-[a-zA-Z]*/, 'text-5xl']\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Svelte Dependencies\nDESCRIPTION: Package installation commands for different package managers to add UnoCSS and its Svelte scoped preprocessor\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D unocss @unocss/svelte-scoped\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D unocss @unocss/svelte-scoped\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unocss @unocss/svelte-scoped\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D unocss @unocss/svelte-scoped\n```\n\n----------------------------------------\n\nTITLE: Loading UnoCSS Mini Runtime\nDESCRIPTION: Loading the UnoCSS runtime with Mini and Attributify presets for a smaller bundle size with core functionality.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime/mini.global.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Standard Utility Classes in Tailwind-style\nDESCRIPTION: Example of a button using traditional class-based utility styling, which becomes hard to read and maintain as it grows.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button\n  class=\"bg-blue-400 hover:bg-blue-500 text-sm text-white font-mono font-light py-2 px-4 rounded border-2 border-blue-200 dark:bg-blue-500 dark:hover:bg-blue-600\"\n>\n  Button\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apply Variable Aliases\nDESCRIPTION: Configuration options for the apply variable names, showing default aliases and how to disable this feature.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntransformerDirectives({\n  // the defaults\n  applyVariable: ['--at-apply', '--uno-apply', '--uno'],\n  // or disable with:\n  // applyVariable: false\n})\n```\n\n----------------------------------------\n\nTITLE: Installing MDC Extractor via Package Managers\nDESCRIPTION: Different commands for installing the @unocss/extractor-mdc package using various package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/mdc.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/extractor-mdc\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/extractor-mdc\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/extractor-mdc\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/extractor-mdc\n```\n\n----------------------------------------\n\nTITLE: Transformed Variant Groups Output\nDESCRIPTION: The resulting HTML after the variant group transformer processes the class attribute\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-variant-group/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"hover:bg-gray-400 hover:font-medium font-light font-mono\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Typography Preset from UnoCSS Package\nDESCRIPTION: Example of importing the Typography preset directly from the main UnoCSS package.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/typography.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { presetTypography } from 'unocss'\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Webpack 5 (ESM)\nDESCRIPTION: Configuration for webpack 5 using dynamic import to load UnoCSS plugin. Includes optimization settings for real content hash.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// webpack.config.js\nmodule.exports = function () {\n  return import('@unocss/webpack').then(({ default: UnoCSS }) => ({\n    plugins: [\n      UnoCSS()\n    ],\n    optimization: {\n      realContentHash: true\n    }\n  }))\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Centered Container with UnoCSS in Markdown\nDESCRIPTION: This snippet demonstrates how to create a centered container using UnoCSS utility classes within a Markdown file. It includes a styled button and a link with hover effects.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/astro/src/pages/markdown-page.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"grid place-items-center h-screen content-center\">\n <div class=\"py-2 px-4 bg-purple-500 text-white font-semibold rounded-lg shadow-md\">\n  UnoCSS classes also work in Markdown!\n </div>\n <a\n  href=\"/\"\n  class=\"p-4 underline hover:text-purple-500 transition-colors ease-in-out duration-200\"\n >\n  Go home\n </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Core with yarn\nDESCRIPTION: Command to install the UnoCSS core engine as a development dependency using yarn package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/tools/core.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/core\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS CLI in package.json\nDESCRIPTION: Example package.json configuration for UnoCSS CLI, including development and build scripts.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/cli.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"unocss \\\"site/{snippets,templates}/**/*.php\\\" --watch\",\n    \"build\": \"unocss \\\"site/{snippets,templates}/**/*.php\\\"\"\n  },\n  \"devDependencies\": {\n    \"@unocss/cli\": \"latest\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running UnoCSS CLI in Development Mode\nDESCRIPTION: Command to run UnoCSS CLI in watch mode for development.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/cli.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nunocss \"site/{snippets,templates}/**/*.php\" --watch\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS CLI with Package Managers\nDESCRIPTION: Commands to install UnoCSS or its CLI package using different package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D unocss\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Variant Group Transformer\nDESCRIPTION: Command to install the variant group transformer package as a dev dependency\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-variant-group/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @unocss/transformer-variant-group\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS for Nuxt with yarn\nDESCRIPTION: Command to install UnoCSS and its Nuxt module using yarn package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D unocss @unocss/nuxt\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with transformer-compile-class in TypeScript\nDESCRIPTION: TypeScript configuration for adding the transformer-compile-class to UnoCSS. This setup enables the class compilation feature in the UnoCSS configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-compile-class/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport transformerCompileClass from '@unocss/transformer-compile-class'\n// uno.config.ts\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...\n  transformers: [\n    transformerCompileClass(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of icon() Function with Custom Colors\nDESCRIPTION: Shows how the icon() function with custom colors gets compiled to data URLs with the SVG fill color modified.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  background-image: url(\"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 32 32' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='%23fff' d='M13.503 5.414a15.076 15.076 0 0 0 11.593 18.194a11.1 11.1 0 0 1-7.975 3.39c-.138 0-.278.005-.418 0a11.094 11.094 0 0 1-3.2-21.584M14.98 3a1 1 0 0 0-.175.016a13.096 13.096 0 0 0 1.825 25.981c.164.006.328 0 .49 0a13.07 13.07 0 0 0 10.703-5.555a1.01 1.01 0 0 0-.783-1.565A13.08 13.08 0 0 1 15.89 4.38A1.015 1.015 0 0 0 14.98 3'/%3E%3C/svg%3E\");\n  background-image: url(\"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 32 32' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='%23ef4444' d='M13.503 5.414a15.076 15.076 0 0 0 11.593 18.194a11.1 11.1 0 0 1-7.975 3.39c-.138 0-.278.005-.418 0a11.094 11.094 0 0 1-3.2-21.584M14.98 3a1 1 0 0 0-.175.016a13.096 13.096 0 0 0 1.825 25.981c.164.006.328 0 .49 0a13.07 13.07 0 0 0 10.703-5.555a1.01 1.01 0 0 0-.783-1.565A13.08 13.08 0 0 1 15.89 4.38A1.015 1.015 0 0 0 14.98 3'/%3E%3C/svg%3E\");\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output from Safelist\nDESCRIPTION: This CSS snippet shows the output that will be generated from the safelist configuration. Each padding utility class will be included in the final CSS regardless of whether it was detected in the code during extraction.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.p-1 { padding: 0.25rem; }\n.p-2 { padding: 0.5rem; }\n.p-3 { padding: 0.75rem; }\n.p-4 { padding: 1rem; }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Svelte component with utility class\nDESCRIPTION: Example showing a Svelte component with a utility class that will be transformed by UnoCSS Svelte Scoped.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"mb-1\" />\n```\n\n----------------------------------------\n\nTITLE: Component with space-between utility class\nDESCRIPTION: Example showing a component with space utility class that affects child elements, demonstrating how child influence works.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_4\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"space-x-1\">\n  <div>Status: online</div>\n  <Button>FAQ</Button>\n  <Button>Login</Button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Standalone UnoCSS CLI Package\nDESCRIPTION: Commands to install the standalone @unocss/cli package using different package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/cli\n```\n\n----------------------------------------\n\nTITLE: Transformer Blocklist Configuration\nDESCRIPTION: Example of how to configure the blocklist to prevent certain attributes from being transformed.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntransformerAttributifyJsx({\n  blocklist: [/text-[a-zA-Z]*/, 'text-5xl']\n})\n```\n\n----------------------------------------\n\nTITLE: Using Compile Class Transformer in HTML\nDESCRIPTION: Example of using the ':uno:' prefix in HTML class attributes to mark classes for compilation by the transformer.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/compile-class.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\":uno: text-center sm:text-left\">\n  <div class=\":uno: text-sm font-bold hover:text-red\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Attribute Selectors\nDESCRIPTION: CSS selector examples showing attribute selector patterns - exact value matcher custom-2 and tilde-based attribute value contains selector [custom~=\"1\"].\nSOURCE: https://github.com/unocss/unocss/blob/main/test/cases/preset-attributify/case-3/matched.txt#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ncustom-2\n[custom~=\"1\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Astro Configuration without Presets\nDESCRIPTION: Minimal configuration for using UnoCSS in Astro without any presets\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/astro.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport UnoCSS from '@unocss/astro'\n\nexport default {\n  integrations: [\n    UnoCSS(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Metrics Between CSS Utility Frameworks\nDESCRIPTION: Benchmark results showing execution times for CSS utility frameworks. The data shows UnoCSS (v0.46.0) performing significantly faster than TailwindCSS (v3.1.8) and WindiCSS (v3.5.6), with relative performance ratios included.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2022-10-25-08-58-07.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2022/10/25 16:58:07\n1656 utilities | x200 runs (75% build time)\n\nnone                             14.62 ms / delta.      0.00 ms\nunocss       v0.46.0            120.81 ms / delta.    106.19 ms (x1.00)\ntailwindcss  v3.1.8             659.98 ms / delta.    645.36 ms (x6.08)\nwindicss     v3.5.6             904.50 ms / delta.    889.88 ms (x8.38)\n```\n\n----------------------------------------\n\nTITLE: HTML example with UnoCSS utility class\nDESCRIPTION: Example HTML markup using a UnoCSS utility class that will be affected by the rem-to-px conversion.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"m-2\"></div>\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS ESLint Config with Package Managers\nDESCRIPTION: Commands for installing the UnoCSS ESLint config using different package managers (pnpm, yarn, npm, and bun).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/eslint.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/eslint-config\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/eslint-config\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/eslint-config\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/eslint-config\n```\n\n----------------------------------------\n\nTITLE: Transformed apply directives\nDESCRIPTION: Example showing how apply directives with context-aware utilities are transformed to handle global context properly.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_9\n\nLANGUAGE: svelte\nCODE:\n```\n<div />\n\n<style>\n  :global([dir=\\\"rtl\\\"]) div {\n    margin-right: 0.5rem;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running SvelteKit with UnoCSS Example\nDESCRIPTION: Commands to install dependencies and start the development server for the SvelteKit + UnoCSS example project. This sets up the environment with all necessary packages and launches the application in development mode.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Attribute Conflicts Resolution\nDESCRIPTION: Using the un- prefix to avoid conflicts between attributify utilities and native HTML attributes.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a text=\"red\">This conflicts with links' `text` prop</a>\n<!-- to -->\n<a un-text=\"red\">Text color to red</a>\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS Cloaking in HTML\nDESCRIPTION: Example of using the un-cloak attribute in HTML to prevent flash of unstyled content. The element will only be visible after UnoCSS has applied the text-blue-500 class.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"text-blue-500\" un-cloak>This text will only be visible in blue color.</div>\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS Framework Performance Benchmarks\nDESCRIPTION: This code block presents benchmark results for different CSS frameworks, including UnoCSS, Tailwind CSS, and Windi CSS. It shows the execution time for 1656 utilities over 200 runs, with UnoCSS demonstrating the fastest performance.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2022-09-03-14-40-50.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n2022/9/3 22:40:50\n1656 utilities | x200 runs (75% build time)\n\nnone                             20.01 ms / delta.      0.00 ms\nunocss       v0.45.14           199.76 ms / delta.    179.75 ms (x1.00)\ntailwindcss  v3.1.8             875.51 ms / delta.    855.50 ms (x4.76)\nwindicss     v3.5.6            1342.37 ms / delta.   1322.36 ms (x7.36)\n```\n\n----------------------------------------\n\nTITLE: Installing Attributify Preset with Package Managers\nDESCRIPTION: Commands for installing the UnoCSS attributify preset using different package managers (pnpm, yarn, npm, and bun).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-attributify\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-attributify\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-attributify\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-attributify\n```\n\n----------------------------------------\n\nTITLE: Installing Arbitrary Variants Extractor with npm\nDESCRIPTION: Command to install the arbitrary variants extractor package using npm package manager. This is only needed if you're not using the mini preset which includes it by default.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/arbitrary-variants.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/extractor-arbitrary-variants\n```\n\n----------------------------------------\n\nTITLE: Traditional UnoCSS Class Usage\nDESCRIPTION: Example of traditional class-based UnoCSS usage for comparison.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"text-red\"> red text </span>\n<div class=\"flex\">flexbox</div>\nI'm feeling <span class=\"i-line-md-emoji-grin\"></span> today!\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Variant Group Transformer with Package Managers\nDESCRIPTION: Commands for installing the @unocss/transformer-variant-group package using different package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/variant-group.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/transformer-variant-group\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/transformer-variant-group\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/transformer-variant-group\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/transformer-variant-group\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Properties with Function\nDESCRIPTION: Example of adding extra CSS properties to matched rules using a function.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npresetTagify({\n  // adds display: inline-block to matched icons\n  extraProperties: matched => matched.startsWith('i-')\n    ? { display: 'inline-block' }\n    : { }\n})\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS CLI with Multiple Glob Patterns\nDESCRIPTION: Example of using UnoCSS CLI with multiple glob patterns to process PHP files.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nunocss \"site/snippets/**/*.php\" \"site/templates/**/*.php\"\n```\n\n----------------------------------------\n\nTITLE: Displaying CSS Directives in Markdown\nDESCRIPTION: Shows the supported CSS directives for the UnoCSS PostCSS plugin including @apply, @screen and theme() functionality.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-integrations/postcss/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@apply、@screen and theme()\n```\n\n----------------------------------------\n\nTITLE: Installing @unocss/reset Package with Package Managers\nDESCRIPTION: Commands for installing the @unocss/reset package using different JavaScript package managers including pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/style-reset.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @unocss/reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @unocss/reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @unocss/reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @unocss/reset\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Core with bun\nDESCRIPTION: Command to install the UnoCSS core engine as a development dependency using bun package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/tools/core.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/core\n```\n\n----------------------------------------\n\nTITLE: Adding global styles placeholder to HTML head\nDESCRIPTION: HTML example showing where to place the UnoCSS Svelte Scoped global styles placeholder in your HTML template.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- ... -->\n  <title>SvelteKit using UnoCSS Svelte Scoped</title>\n  %unocss-svelte-scoped.global%\n  %sveltekit.head%\n</head>\n```\n\n----------------------------------------\n\nTITLE: Installing @unocss/preset-rem-to-px with pnpm\nDESCRIPTION: Command to install the rem-to-px preset as a development dependency using pnpm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-rem-to-px\n```\n\n----------------------------------------\n\nTITLE: Valueless Attributify Syntax\nDESCRIPTION: The same styling using valueless attributify mode, where each utility becomes its own HTML attribute.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div m-2 rounded text-teal-400 />\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Pug Extractor with pnpm\nDESCRIPTION: Command to install the Pug extractor for UnoCSS using pnpm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/pug.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/extractor-pug\n```\n\n----------------------------------------\n\nTITLE: Running UnoCSS CLI for Production Build\nDESCRIPTION: Command to run UnoCSS CLI for production build without watch mode.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nunocss \"site/{snippets,templates}/**/*.php\"\n```\n\n----------------------------------------\n\nTITLE: Installing @unocss/preset-rem-to-px with yarn\nDESCRIPTION: Command to install the rem-to-px preset as a development dependency using yarn package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-rem-to-px\n```\n\n----------------------------------------\n\nTITLE: Installing @unocss/transformer-directives package\nDESCRIPTION: Command to install the @unocss/transformer-directives package as a dev dependency using npm.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @unocss/transformer-directives\n```\n\n----------------------------------------\n\nTITLE: Generated CSS for Class-based Dark Mode\nDESCRIPTION: CSS output that will be generated for the class-based dark mode example.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.dark .dark\\:bg-red\\:10 {\n  background-color: rgb(248 113 113 / 0.1);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiled Output of icon() Function\nDESCRIPTION: Shows how the icon() function gets compiled to a data URL containing the SVG icon as a background image.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  background-image: url(\"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 32 32' width='1em' height='1em' xmlns='http://www.w3.org/2000/svg' %3E%3Cpath fill='currentColor' d='M16 12.005a4 4 0 1 1-4 4a4.005 4.005 0 0 1 4-4m0-2a6 6 0 1 0 6 6a6 6 0 0 0-6-6M5.394 6.813L6.81 5.399l3.505 3.506L8.9 10.319zM2 15.005h5v2H2zm3.394 10.193L8.9 21.692l1.414 1.414l-3.505 3.506zM15 25.005h2v5h-2zm6.687-1.9l1.414-1.414l3.506 3.506l-1.414 1.414zm3.313-8.1h5v2h-5zm-3.313-6.101l3.506-3.506l1.414 1.414l-3.506 3.506zM15 2.005h2v5h-2z'/%3E%3C/svg%3E\");\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valueless Attributify in JSX\nDESCRIPTION: This snippet shows how to use valueless attributify in a JSX component. It applies text styles and animation classes to a div element.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx-babel/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div text-red text-center text-5xl animate-bounce>\n      unocss\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS PostCSS Plugin\nDESCRIPTION: Package installation commands for different package managers including pnpm, yarn, npm, and bun\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/postcss.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D unocss @unocss/postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D unocss @unocss/postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unocss @unocss/postcss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D unocss @unocss/postcss\n```\n\n----------------------------------------\n\nTITLE: Installing Wind3 Preset with Package Managers\nDESCRIPTION: Commands to install the Wind3 preset using different package managers like pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/wind3.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-wind3\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-wind3\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-wind3\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-wind3\n```\n\n----------------------------------------\n\nTITLE: Setting up development environment for SvelteKit component library\nDESCRIPTION: Commands to install dependencies and start the development server for a SvelteKit component library using UnoCSS preprocessor.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-preprocess/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing @unocss/transformer-compile-class via npm\nDESCRIPTION: Command to install the @unocss/transformer-compile-class package as a development dependency using npm.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-compile-class/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @unocss/transformer-compile-class\n```\n\n----------------------------------------\n\nTITLE: Importing Eric Meyer's Reset Stylesheet\nDESCRIPTION: Code to import Eric Meyer's reset stylesheet from @unocss/reset package into your main.js file.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/style-reset.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport '@unocss/reset/eric-meyer.css'\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with Webpack 4 (CommonJS)\nDESCRIPTION: Configuration for webpack 4 using CommonJS require to load UnoCSS plugin. For older versions of UnoCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst UnoCSS = require('@unocss/webpack').default\n\nmodule.exports = {\n  plugins: [\n    UnoCSS()\n  ],\n  css: {\n    extract: {\n      filename: '[name].[hash:9].css'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Icon CSS Directive Usage\nDESCRIPTION: Example of using the icon() directive in CSS to get icon metadata\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  background-image: icon('i-carbon-sun');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Directives Transformer with Package Managers\nDESCRIPTION: Instructions for installing the @unocss/transformer-directives package using different package managers including pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/directives.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/transformer-directives\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/transformer-directives\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/transformer-directives\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/transformer-directives\n```\n\n----------------------------------------\n\nTITLE: Starting Quasar Development Server\nDESCRIPTION: Command to start the Quasar application in development mode with hot-code reloading and error reporting features.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/quasar/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nquasar dev\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Reset Package\nDESCRIPTION: Commands for installing the @unocss/reset package for browser style reset\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/astro.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/reset\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/reset\n```\n\n----------------------------------------\n\nTITLE: Installing @unocss/preset-rem-to-px with npm\nDESCRIPTION: Command to install the rem-to-px preset as a development dependency using npm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-rem-to-px\n```\n\n----------------------------------------\n\nTITLE: Installing Arbitrary Variants Extractor with pnpm\nDESCRIPTION: Command to install the arbitrary variants extractor package using pnpm package manager. This is only needed if you're not using the mini preset which includes it by default.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/arbitrary-variants.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/extractor-arbitrary-variants\n```\n\n----------------------------------------\n\nTITLE: Configuring Tagify Prefix\nDESCRIPTION: Example of configuring a prefix for Tagify selectors.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\npresetTagify({\n  prefix: 'un-'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Compile Class Transformer with Package Managers\nDESCRIPTION: Commands for installing the @unocss/transformer-compile-class package using different package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/compile-class.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/transformer-compile-class\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/transformer-compile-class\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/transformer-compile-class\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/transformer-compile-class\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Quasar Project\nDESCRIPTION: Commands for installing project dependencies using either Yarn or NPM package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/quasar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n# or\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Component with Valueless Attributes\nDESCRIPTION: Example of a React component using valueless attributify syntax before transformation.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div text-red text-center text-5xl animate-bounce>\n      unocss\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Compile Class Transformer from UnoCSS Package\nDESCRIPTION: Alternative way to import the compile class transformer directly from the 'unocss' package instead of a separate package.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/transformers/compile-class.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { transformerCompileClass } from 'unocss'\n```\n\n----------------------------------------\n\nTITLE: Transformed component class props\nDESCRIPTION: Example showing how utility classes passed to child components are transformed into global styles.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_7\n\nLANGUAGE: svelte\nCODE:\n```\n<Button class=\"uno-4hshza\">Login</Button>\n\n<style>\n  :global(.uno-4hshza) {\n    padding-left:0.5rem;\n    padding-right:0.5rem;\n    padding-top:0.25rem;\n    padding-bottom:0.25rem;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Transformed space utility class\nDESCRIPTION: Example showing how a space utility class is transformed to properly affect child elements regardless of component boundaries.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_5\n\nLANGUAGE: svelte\nCODE:\n```\n<div class=\"uno-7haszz\">\n  <div>Status: online</div>\n  <Button>FAQ</Button>\n  <Button>Login</Button>\n</div>\n\n<style>\n  :global(.uno-7haszz > :not([hidden]) ~ :not([hidden])) {\n    --un-space-x-reverse: 0;\n    margin-left: calc(0.25rem * calc(1 - var(--un-space-x-reverse)));\n    margin-right: calc(0.25rem * var(--un-space-x-reverse));\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Attributes Configuration\nDESCRIPTION: Configuration to disable attributify mode for specific attributes that might cause conflicts.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\npresetAttributify({\n  ignoreAttributes: [\n    'text'\n    // ...\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS with Package Managers\nDESCRIPTION: Commands for installing UnoCSS using different package managers (pnpm, yarn, npm, bun)\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/astro.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D unocss\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS for Nuxt with bun\nDESCRIPTION: Command to install UnoCSS and its Nuxt module using bun package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/nuxt.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D unocss @unocss/nuxt\n```\n\n----------------------------------------\n\nTITLE: Transformed JSX with Attributify\nDESCRIPTION: This snippet demonstrates how the previous JSX code is transformed by the attributify transformer. It adds empty string values to the attributes.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx-babel/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div text-red=\"\" text-center=\"\" text-5xl=\"\" animate-bounce=\"\">\n      unocss\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Red Background Color with UnoCSS Attribute Selector\nDESCRIPTION: This CSS snippet uses UnoCSS's attribute selector syntax to apply a red background color to elements. The tilde (~) indicates a contains selector, matching elements with 'red' in their 'bg' attribute value.\nSOURCE: https://github.com/unocss/unocss/blob/main/test/cases/preset-attributify/case-6/matched.txt#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n[bg~=\"red\"]\n```\n\n----------------------------------------\n\nTITLE: Installing All Iconify Icon Sets at Once\nDESCRIPTION: Commands to install the complete Iconify JSON package that includes all available icon sets (approximately 130MB) using different package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/icons.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @iconify/json\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @iconify/json\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @iconify/json\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @iconify/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Properties with Object\nDESCRIPTION: Example of adding extra CSS properties using a plain object.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\npresetTagify({\n  // extraProperties can also be a plain object\n  extraProperties: { display: 'block' }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Tagify Preset\nDESCRIPTION: Different package manager commands to install @unocss/preset-tagify as a dev dependency.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-tagify\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-tagify\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-tagify\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-tagify\n```\n\n----------------------------------------\n\nTITLE: Alternative Valued Attributes\nDESCRIPTION: Recommended approach using valued attributes instead of valueless attributes for special cases.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div translate=\"x-100%\" />\n\n<div translate=\"x-[100px]\" />\n```\n\n----------------------------------------\n\nTITLE: Button Styling - Modified Implementation\nDESCRIPTION: Modified CSS styling for buttons and input elements with type button, reset, and submit, removing the background-color property to avoid conflicts with UI frameworks.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/reset/tailwind-compat.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  /*background-color: transparent; !* 2 *!*/\n  background-image: none; /* 2 */\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS Framework Build Performance Metrics\nDESCRIPTION: A benchmark result showing build time comparisons between no framework, UnoCSS, Tailwind CSS, and Windi CSS. The test processed 1656 utilities over 50 runs, measuring minimum build times.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2022-03-26-23-41-26.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n3/26/2022, 11:41:26 PM\n1656 utilities | x50 runs (min build time)\n\nnone                             12.42 ms / delta.      0.00 ms\nunocss       v0.30.6             20.98 ms / delta.      8.57 ms (x1.00)\ntailwindcss  v3.0.23           1621.38 ms / delta.   1608.96 ms (x187.79)\nwindicss     v3.5.1            1855.86 ms / delta.   1843.45 ms (x215.16)\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Pug Extractor with bun\nDESCRIPTION: Command to install the Pug extractor for UnoCSS using bun package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/pug.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/extractor-pug\n```\n\n----------------------------------------\n\nTITLE: Tagify Prefix HTML Usage\nDESCRIPTION: Example of using prefixed Tagify selectors in HTML.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/tagify.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- this will be matched -->\n<un-flex> </un-flex>\n<!-- this will not be matched -->\n<flex> </flex>\n```\n\n----------------------------------------\n\nTITLE: Importing UnoCSS Stylesheets in Next.js App\nDESCRIPTION: Next.js _app.tsx file showing required UnoCSS stylesheet imports.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/next.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { AppProps } from 'next/app'\n// _app.tsx\nimport '@unocss/reset/tailwind.css'\n\nimport 'uno.css'\n\nfunction MyApp({ Component, pageProps }: AppProps) {\n  return <Component {...pageProps} />\n}\n\nexport default MyApp\n```\n\n----------------------------------------\n\nTITLE: Installing Web Fonts Preset with Package Managers\nDESCRIPTION: Command line instructions for installing the @unocss/preset-web-fonts package using different package managers (pnpm, yarn, npm, and bun).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/web-fonts.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-web-fonts\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-web-fonts\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-web-fonts\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-web-fonts\n```\n\n----------------------------------------\n\nTITLE: Invalid Attribute Examples\nDESCRIPTION: Examples of HTML attributes that cannot be used with the transformer due to syntax limitations.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div translate-x-100% />\n<!-- cannot end with `%` -->\n\n<div translate-x-[100px] />\n<!-- cannot contain `[` or `]` -->\n```\n\n----------------------------------------\n\nTITLE: Compiled CSS from theme() function\nDESCRIPTION: The resulting CSS after the theme() function is compiled, showing the resolved color value.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.btn-blue {\n  background-color: #3b82f6;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Build Times of CSS Utility Frameworks\nDESCRIPTION: A benchmark comparison showing build times for various CSS utility frameworks. The test measures performance across 50 runs with 1656 utilities. UnoCSS is significantly faster than WindiCSS and TailwindCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2021-10-21-06-17-45.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n10/21/2021, 2:17:45 PM\n1656 utilities | x50 runs (min build time)\n\nnone                              8.75 ms / delta.      0.00 ms\nunocss       v0.0.0              13.72 ms / delta.      4.97 ms (x1.00)\nwindicss     v3.1.9             980.41 ms / delta.    971.66 ms (x195.36)\ntailwindcss  v3.0.0-alpha.1    1258.54 ms / delta.   1249.79 ms (x251.28)\n```\n\n----------------------------------------\n\nTITLE: CSS output with rem-to-px preset\nDESCRIPTION: The CSS output generated by UnoCSS for the m-2 class when using the rem-to-px preset, showing the converted px units.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/rem-to-px.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.m-2 {\n  margin: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Border Utility Classes\nDESCRIPTION: Example of traditional border utility classes using the class attribute.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/attributify.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"border border-red\">Button</button>\n```\n\n----------------------------------------\n\nTITLE: Building SvelteKit component library package\nDESCRIPTION: Command to build the SvelteKit component library for distribution as a package.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-preprocess/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run package\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Pug Extractor with yarn\nDESCRIPTION: Command to install the Pug extractor for UnoCSS using yarn package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/pug.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/extractor-pug\n```\n\n----------------------------------------\n\nTITLE: Transformed CSS from @apply directive\nDESCRIPTION: The resulting CSS after the @apply directive is transformed, showing the expanded utility classes.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-directives/README.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.custom-div {\n  margin-top: 0rem;\n  margin-bottom: 0rem;\n  text-align: center;\n  font-weight: 500;\n}\n```\n\n----------------------------------------\n\nTITLE: Svelte Class Directive Example\nDESCRIPTION: Demonstrates the usage of Svelte's class directive syntax for conditional class application.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/svelte.md#2025-04-23_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<div class:text-orange-400={foo} />\n```\n\n----------------------------------------\n\nTITLE: CSS Framework Build Time Benchmark Results\nDESCRIPTION: Benchmark results comparing build times of different CSS utility frameworks including UnoCSS v0.43.0, TailwindCSS v3.1.4, and WindiCSS v3.5.5. The test was run 50 times with 1656 utilities, showing base time, delta time, and relative performance multiplier.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2022-07-02-12-38-12.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2022/7/2 08:38:12 PM\n1656 utilities | x50 runs (min build time)\n\nnone                              5.87 ms / delta.      0.00 ms\nunocss       v0.43.0              9.17 ms / delta.      3.30 ms (x1.00)\ntailwindcss  v3.1.4             497.24 ms / delta.    491.37 ms (x148.70)\nwindicss     v3.5.5             869.47 ms / delta.    863.60 ms (x261.35)\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command\nDESCRIPTION: NPM command to install the transformer package as a development dependency.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @unocss/transformer-attributify-jsx\n```\n\n----------------------------------------\n\nTITLE: Button Styling - Original Implementation\nDESCRIPTION: Original CSS styling for buttons and input elements with type button, reset, and submit, including background color reset to transparent.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/reset/tailwind-compat.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button; /* 1 */\n  background-color: transparent; /* 2 */\n  background-image: none; /* 2 */\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing SvelteKit component library to npm\nDESCRIPTION: Command to publish the built SvelteKit component library to the npm registry.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-preprocess/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run publish\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Metrics of CSS Utility Frameworks\nDESCRIPTION: A benchmark output showing the performance comparison between different CSS utility frameworks. The metrics include execution time in milliseconds and relative performance deltas with a performance multiplier compared to Tailwind CSS v4.0.0-beta.1.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2024-12-25-03-55-05.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n12/25/2024, 11:55:05 AM\n1656 utilities | x15 runs (75% build time)\n\nnone                             14.98 ms / delta.      0.00 ms\ntailwindcss4 v4.0.0-beta.1      178.01 ms / delta.    163.03 ms (x1.00)\nunocss       v0.65.2            231.05 ms / delta.    216.06 ms (x1.33)\ntailwindcss  v4.0.0-beta.6      566.50 ms / delta.    551.52 ms (x3.38)\nwindicss     v3.5.6            1038.76 ms / delta.   1023.77 ms (x6.28)\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output\nDESCRIPTION: Shows the CSS output generated by UnoCSS after processing the Svelte class directive.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/svelte.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.text-orange-400 {\n  color: #f6993f;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Core with npm\nDESCRIPTION: Command to install the UnoCSS core engine as a development dependency using npm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/tools/core.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/core\n```\n\n----------------------------------------\n\nTITLE: Rendering UnoCSS Team Page Structure with VitePress Components\nDESCRIPTION: Vue template that structures the team page using VitePress components. It displays a title section, current team members, and a separate section for emeriti team members with appropriate descriptions.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/team.md#2025-04-23_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<VPTeamPage>\n  <VPTeamPageTitle>\n    <template #title>Meet the Team</template>\n    <template #lead>\n      The development of UnoCSS is guided by an international team, some of whom\n      have chosen to be featured below.\n    </template>\n  </VPTeamPageTitle>\n  <VPTeamMembers :members=\"teamMembers\" />\n  <VPTeamPageSection>\n    <template #title>Team Emeriti</template>\n    <template #lead>\n      Here we honor some no-longer-active team members who have made valuable\n      contributions in the past.\n    </template>\n    <template #members>\n      <VPTeamMembers size=\"small\" :members=\"teamEmeritiMembers\" />\n    </template>\n  </VPTeamPageSection>\n</VPTeamPage>\n```\n\n----------------------------------------\n\nTITLE: Installing Arbitrary Variants Extractor with bun\nDESCRIPTION: Command to install the arbitrary variants extractor package using bun package manager. This is only needed if you're not using the mini preset which includes it by default.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/arbitrary-variants.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/extractor-arbitrary-variants\n```\n\n----------------------------------------\n\nTITLE: Creating production build of SvelteKit showcase app\nDESCRIPTION: Command to create a production version of the showcase app that demonstrates the component library.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-preprocess/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Crawler Access Rules in robots.txt\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers to access all paths of the website. Uses the wildcard user-agent (*) to apply rules globally.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: SvelteKit server hook for global styles\nDESCRIPTION: JavaScript code for SvelteKit's server hooks to handle the global styles placeholder replacement.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/svelte-scoped.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n/** @type {import('@sveltejs/kit').Handle} */\nexport async function handle({ event, resolve }) {\n  const response = await resolve(event, {\n    transformPageChunk: ({ html }) =>\n      html.replace(\n        '%unocss-svelte-scoped.global%',\n        'unocss_svelte_scoped_global_styles'\n      ),\n  })\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying UnoCSS Integrations in Markdown\nDESCRIPTION: This code snippet uses a custom component to display a list of UnoCSS integrations for various frameworks and tools.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<ContentIntegrations />\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Web Crawler Access in Robot.txt\nDESCRIPTION: This snippet defines the robot.txt rules for web crawlers. It allows all user agents (*) and doesn't disallow any paths, effectively granting full access to crawlers.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit-scoped/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Building Quasar App for Production\nDESCRIPTION: Command to build the Quasar application for production deployment.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/quasar/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nquasar build\n```\n\n----------------------------------------\n\nTITLE: Importing Internal Packages in UnoCSS\nDESCRIPTION: Demonstrates how to import internal packages in the UnoCSS project using a specific import syntax. This method allows access to packages that are not published to npm but are inlined into dependent packages.\nSOURCE: https://github.com/unocss/unocss/blob/main/virtual-shared/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from '#integration/*'\n```\n\n----------------------------------------\n\nTITLE: YAML Frontend Matter Configuration for UnoCSS Documentation\nDESCRIPTION: YAML configuration block defining the structure and content of the UnoCSS documentation homepage, including hero section layout, navigation actions, and feature descriptions.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\ntitle: \"UnoCSS: The instant on-demand Atomic CSS engine\"\n\nhero:\n  image:\n    src: /logo.svg\n    alt: UnoCSS\n  name: \"UnoCSS\"\n  text: Instant On-demand Atomic CSS Engine\n  tagline: Customizable · Powerful · Fast · Joyful\n  actions:\n    - theme: brand\n      text: Getting Started\n      link: /guide/\n    - theme: alt\n      text: Interactive Docs\n      link: https://unocss.dev/interactive/\n      target: _blank\n    - theme: alt\n      text: Playground\n      link: https://unocss.dev/play/\n      target: _blank\n    - theme: alt\n      text: Tutorial\n      link: https://tutorial.unocss.dev/\n      target: _blank\n\nfeatures:\n  - icon: <span class=\"i-carbon:ibm-toolchain\"></span>\n    title: Fully Customizable\n    details: No core utilities, all functionalities are provided via presets.\n    link: /guide/\n    linkText: Getting Started\n  - icon: <span class=\"i-carbon-meter-alt\"></span>\n    title: Instant\n    details: No parsing, no AST, no scanning. It's 5x faster than Windi CSS or Tailwind CSS JIT.\n  - icon: <span class=\"i-carbon-wind-gusts\"></span>\n    title: Lightweight\n    details: \"Zero deps and browser friendly: ~6kb min+brotli\"\n  - icon: <span class=\"i-carbon-ibm-cloud-transit-gateway\"></span>\n    title: Rich Integrations\n    details: \"First class support of Vite, Webpack, PostCSS, CLI, VS Code, ESLint, etc.\"\n    link: /integrations/vite\n    linkText: \"Learn more\"\n  - icon: <span class=\"i-carbon-asset\"></span>\n    title: Shortcuts\n    details: \"Aliasing or grouping utilities, dynamically\"\n    link: /config/shortcuts\n    linkText: \"Configuration and usage\"\n  - icon: <span class=\"i-carbon:code\"></span>\n    title: Attributify Mode\n    details: \"Group utilities in attributes\"\n    link: /presets/attributify\n    linkText: \"@unocss/preset-attributify\"\n  - icon: <span class=\"i-carbon-face-wink hover:i-carbon-face-satisfied\"></span>\n    title: Pure CSS Icons\n    details: \"Use any icon as a single class\"\n    link: /presets/icons\n    linkText: \"@unocss/preset-icons\"\n  - icon: <span class=\"i-carbon:group-objects\"></span>\n    title: Variant Groups\n    details: \"Shorthand for group utils with common prefixes\"\n    link: /transformers/variant-group\n    linkText: \"@unocss/transformer-variant-group\"\n  - icon: <span class=\"i-carbon:at\"></span>\n    title: CSS Directives\n    details: \"Reuse utils in CSS with @apply directive\"\n    link: /transformers/directives\n    linkText: \"@unocss/transformer-directives\"\n  - icon: <span class=\"i-carbon-tree-view-alt scale-x--100\"></span>\n    title: Compilation Mode\n    details: \"Synthesizes multiple classes into one at build time\"\n    link: /transformers/compile-class\n    linkText: \"@unocss/transformer-compile-class\"\n  - icon: <span class=\"i-carbon:inspection\"></span>\n    title: Inspector\n    details: \"Inspect and debug interactively\"\n    link: /tools/inspector\n    linkText: \"@unocss/inspector\"\n  - icon: <span class=\"i-carbon:executable-program\"></span>\n    title: CDN Runtime Build\n    details: \"Use UnoCSS with one line of CDN import\"\n    link: /integrations/runtime\n    linkText: \"@unocss/runtime\"\n---\n```\n\n----------------------------------------\n\nTITLE: Importing VitePress Team Components and Contributors Data\nDESCRIPTION: Imports the necessary VitePress team page components and contributor data from a local configuration file. This script section is responsible for making the team member data available to the template.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/team.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  VPTeamPage,\n  VPTeamPageTitle,\n  VPTeamPageSection,\n  VPTeamMembers\n} from 'vitepress/theme'\nimport { teamMembers, teamEmeritiMembers } from './.vitepress/contributors'\n```\n\n----------------------------------------\n\nTITLE: Including UnoCSS Runtime via CDN in HTML\nDESCRIPTION: Basic usage of UnoCSS runtime by adding the script tag to your HTML document. This loads the default UnoCSS runtime with Wind3 preset.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/runtime.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/@unocss/runtime\"></script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: Base documentation structure using markdown with VitePress frontmatter for deep outline configuration.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/why.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\noutline: deep\n---\n\n# Why UnoCSS?\n```\n\n----------------------------------------\n\nTITLE: Importing Web Fonts Preset from Main UnoCSS Package\nDESCRIPTION: Alternative way to import the Web Fonts preset directly from the main UnoCSS package instead of the standalone package.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/web-fonts.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { presetWebFonts } from 'unocss'\n```\n\n----------------------------------------\n\nTITLE: Importing Mini Preset from UnoCSS Package\nDESCRIPTION: Alternative way to import the presetMini directly from the main UnoCSS package.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/mini.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { presetMini } from 'unocss'\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Metrics of CSS Utility Frameworks\nDESCRIPTION: Benchmark results comparing execution times of different CSS utility frameworks. The test ran 200 times for 1656 utilities, with build time accounting for 75% of the total. UnoCSS shows the fastest performance, followed by TailwindCSS and WindiCSS.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2023-11-08-07-53-41.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n11/8/2023, 3:53:41 PM\n1656 utilities | x200 runs (75% build time)\n\nnone                             33.99 ms / delta.      0.00 ms\nunocss       v0.57.2            359.46 ms / delta.    325.47 ms (x1.00)\ntailwindcss  v3.3.5            1238.25 ms / delta.   1204.26 ms (x3.70)\nwindicss     v3.5.6            1742.45 ms / delta.   1708.46 ms (x5.25)\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Attributify JSX Transformer\nDESCRIPTION: This bash command installs the @unocss/transformer-attributify-jsx-babel package as a development dependency.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx-babel/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @unocss/transformer-attributify-jsx-babel\n```\n\n----------------------------------------\n\nTITLE: Comparing CSS Framework Performance Benchmarks\nDESCRIPTION: Performance benchmark results showing the time taken by different CSS frameworks to generate 1608 utilities over 50 runs. UnoCSS is significantly faster than WindiCSS and TailwindCSS, with only a 1.98ms delta compared to no framework.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2021-10-04-15-32-11.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n10/4/2021, 11:32:11 PM\n1608 utilities | x50 runs\n\nnone                             10.48 ms / delta.      0.00 ms\nunocss       v0.0.0              12.46 ms / delta.      1.98 ms (x1.00)\nwindicss     v3.1.8             885.20 ms / delta.    874.72 ms (x441.91)\ntailwindcss  v3.0.0-alpha.1    1044.62 ms / delta.   1034.14 ms (x522.45)\n```\n\n----------------------------------------\n\nTITLE: Installing Legacy Compat Preset with Package Managers\nDESCRIPTION: Commands for installing @unocss/preset-legacy-compat using different package managers (pnpm, yarn, npm, and bun).\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/presets/legacy-compat.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/preset-legacy-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/preset-legacy-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/preset-legacy-compat\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/preset-legacy-compat\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Pug Extractor with npm\nDESCRIPTION: Command to install the Pug extractor for UnoCSS using npm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/pug.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/extractor-pug\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Core with pnpm\nDESCRIPTION: Command to install the UnoCSS core engine as a development dependency using pnpm package manager.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/tools/core.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/core\n```\n\n----------------------------------------\n\nTITLE: Installation Commands for Different Package Managers\nDESCRIPTION: Package manager commands for installing the Svelte extractor dependency.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/svelte.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/extractor-svelte\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/extractor-svelte\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/extractor-svelte\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/extractor-svelte\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS Webpack Plugin\nDESCRIPTION: Commands to install the @unocss/webpack package using different package managers.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D @unocss/webpack\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D @unocss/webpack\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @unocss/webpack\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D @unocss/webpack\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS Pipeline Extraction in uno.config.ts\nDESCRIPTION: This snippet shows how to configure the content pipeline in UnoCSS to include additional file types for utility extraction and exclude others. It demonstrates how to customize which files UnoCSS will process during the build.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/guide/extracting.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  content: {\n    pipeline: {\n      include: [\n        // the default\n        /\\.(vue|svelte|[jt]sx|mdx?|astro|elm|php|phtml|html)($|\\?)/,\n        // include js/ts files\n        'src/**/*.{js,ts}',\n      ],\n      // exclude files\n      // exclude: []\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing Build Times of CSS Utility Frameworks\nDESCRIPTION: Benchmark results showing the performance difference between UnoCSS, Windi CSS, and Tailwind CSS. The data shows build times for 1656 utilities across 50 runs, with UnoCSS being significantly faster than the alternatives.\nSOURCE: https://github.com/unocss/unocss/blob/main/bench/results/2021-11-04-20-26-57.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n11/5/2021, 4:26:57 AM\n1656 utilities | x50 runs (min build time)\n\nnone                              8.30 ms / delta.      0.00 ms\nunocss       v0.4.15             13.58 ms / delta.      5.28 ms (x1.00)\nwindicss     v3.2.1             989.57 ms / delta.    981.27 ms (x185.94)\ntailwindcss  v3.0.0-alpha.1    1290.96 ms / delta.   1282.66 ms (x243.05)\n```\n\n----------------------------------------\n\nTITLE: Installing UnoCSS with Package Managers\nDESCRIPTION: Commands to install UnoCSS using different package managers like pnpm, yarn, npm, and bun.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/vite.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D unocss\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D unocss\n```\n\n----------------------------------------\n\nTITLE: Linting Quasar Project Files\nDESCRIPTION: Commands to run code linting using either Yarn or NPM.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/quasar/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n# or\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A robots.txt configuration that allows all web crawlers to access all parts of the website. The file includes a reference to the standard specification and sets no restrictions on crawler access.\nSOURCE: https://github.com/unocss/unocss/blob/main/examples/sveltekit/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Transformed JSX Component\nDESCRIPTION: The same component after being processed by the transformer, showing how valueless attributes are converted to empty string values.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div text-red=\"\" text-center=\"\" text-5xl=\"\" animate-bounce=\"\">\n      unocss\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MDC Extractor in UnoCSS\nDESCRIPTION: TypeScript configuration for setting up the MDC extractor in UnoCSS config file. This enables the extractor to process markdown files.\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/extractors/mdc.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport extractorMdc from '@unocss/extractor-mdc'\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  extractors: [\n    extractorMdc(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Default JSX Boolean Attributes\nDESCRIPTION: How JSX handles valueless attributes without the transformer by converting them to boolean attributes.\nSOURCE: https://github.com/unocss/unocss/blob/main/packages-presets/transformer-attributify-jsx/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nexport function Component() {\n  return (\n    <div text-red={true} text-center={true} text-5xl={true} animate-bounce={true}>\n      unocss\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UnoCSS Configuration\nDESCRIPTION: Setting up the UnoCSS configuration file uno.config.ts\nSOURCE: https://github.com/unocss/unocss/blob/main/docs/integrations/astro.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  // ...UnoCSS options\n})\n```"
  }
]