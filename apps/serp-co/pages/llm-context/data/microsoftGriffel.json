[
  {
    "owner": "microsoft",
    "repo": "griffel",
    "content": "TITLE: Comparing Monolithic Classes and Atomic CSS HTML Structure\nDESCRIPTION: Shows the differences in HTML markup between monolithic classes and Atomic CSS approaches. Monolithic approach uses a single class for multiple styles, while Atomic CSS uses separate classes for each property-value pair.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/atomic-css.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Monolithic classes -->\n<button class=\"button\"></button>\n<!-- Atomic CSS -->\n<button class=\"display-flex align-items\"></button>\n```\n\n----------------------------------------\n\nTITLE: Using At-rules with makeStyles\nDESCRIPTION: Shows how to use @media, @container, @supports, and @layer queries in Griffel styles to apply conditional styling based on various criteria.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    '@media screen and (max-width: 992px)': { color: 'orange' },\n    '@container (max-width: 992px)': { color: 'orange' },\n    '@container foo (max-width: 992px)': { color: 'orange' },\n    '@supports (display: grid)': { color: 'red' },\n    '@layer utility': { marginBottom: '1em' },\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n@media screen and (max-width: 992px) {\n  .f5d6c3d {\n    color: orange;\n  }\n}\n\n@container (max-width: 992px) {\n  .xx {\n    color: orange;\n  }\n}\n\n@container foo (max-width: 992px) {\n  .xx {\n    color: orange;\n  }\n}\n\n@supports (display: grid) {\n  .f1ofq0jl {\n    color: red;\n  }\n}\n\n@layer utility {\n  .f2d3jla {\n    margin-bottom: 1em;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of makeStyles in React Components\nDESCRIPTION: Demonstrates how to define styles using makeStyles and apply them to React components. This example shows creating a button with red color and an icon with left padding.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  button: { color: 'red' },\n  icon: { paddingLeft: '5px' },\n});\n\nfunction Component() {\n  const classes = useClasses();\n\n  return (\n    <div>\n      <button className={classes.button} />\n      <span className={classes.icon} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of makeStyles in React Components\nDESCRIPTION: Demonstrates how to define styles with makeStyles() and use them within a React component. This creates atomic CSS classes that can be applied to elements.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  button: { color: 'red' },\n  icon: { paddingLeft: '5px' },\n});\n\nfunction Component() {\n  const classes = useClasses();\n\n  return (\n    <div>\n      <button className={classes.button} />\n      <span className={classes.icon} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel for React\nDESCRIPTION: Installation instructions for adding the @griffel/react package to your project using npm or yarn.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @griffel/react\n# or\nyarn add @griffel/react\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel React Package with NPM or Yarn\nDESCRIPTION: Command-line instructions for installing the Griffel React package using either NPM or Yarn package managers. This is the first step to integrate Griffel CSS-in-JS functionality into a React project.\nSOURCE: https://github.com/microsoft/griffel/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @griffel/react\n# or\nyarn add @griffel/react\n```\n\n----------------------------------------\n\nTITLE: Using makeResetStyles for Monolithic CSS\nDESCRIPTION: Demonstrates makeResetStyles() which creates monolithic CSS rather than atomic classes. This is useful for base component styles to optimize performance by reducing class count.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles, makeResetStyles } from '@griffel/react';\nimport { mergeClasses } from './mergeClasses';\n\nconst useBaseClass = makeResetStyles({\n  color: 'red',\n  padding: 0,\n  // etc.\n});\n\nconst useClasses = makeStyles({\n  primary: { color: 'blue' },\n  circular: {\n    padding: '5px',\n    borderRadius: '5px',\n  },\n});\n\nfunction Component(props) {\n  const baseClass = useBaseClass();\n  const classes = useClasses();\n\n  return (\n    <button className={mergeClasses(baseClass, props.primary && classes.primary, props.circular && classes.circular)} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pseudo-classes with makeStyles\nDESCRIPTION: Demonstrates how to use pseudo-classes like :active, :hover, and :nth-child in Griffel styles. These rules are transformed to receive a nesting selector.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ':active': { color: 'pink' },\n    ':hover': { color: 'blue' },\n    // 💡 :link, :focus, etc. are also supported\n\n    ':nth-child(2n)': { backgroundColor: '#fafafa' },\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n.fqsesyh:active {\n  color: pink;\n}\n.f10q6zxg:hover {\n  color: blue;\n}\n.fnbrw4x:nth-child(2n) {\n  background-color: #fafafa;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack with Griffel Loader for JavaScript and TypeScript\nDESCRIPTION: Webpack configuration example showing how to set up Griffel loader for both JavaScript and TypeScript files. Includes separate rules for JS/JSX and TS/TSX file extensions with TypeScript-specific Babel options.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n        },\n      },\n\n      // If your project uses TypeScript\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['@babel/preset-typescript'],\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Classes with mergeClasses Function\nDESCRIPTION: Shows how to properly merge atomic classes from multiple makeStyles calls using mergeClasses(). This function handles class merging and deduplication.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { mergeClasses, makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  blueBold: {\n    color: 'blue',\n    fontWeight: 'bold',\n  },\n  red: {\n    color: 'red',\n  },\n});\n\nfunction Component() {\n  const classes = useClasses();\n\n  const firstClassName = mergeClasses(classes.blueBold, classes.red); // { color: 'red', fontWeight: 'bold' }\n  const secondClassName = mergeClasses(classes.red, classes.blueBold); // { color: 'blue', fontWeight: 'bold' }\n\n  return (\n    <>\n      <div className={firstClassName} />\n      <div className={secondClassName} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Fallback Properties with makeStyles\nDESCRIPTION: Shows how to provide fallback values for CSS properties using arrays. Browsers will use the latest valid value, providing better cross-browser compatibility for properties with varied support.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    overflowY: ['scroll', 'overlay'],\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n.f1qdoogn {\n  overflow-y: scroll; /* Fallback for browsers which do not support overflow: overlay */\n  overflow-y: overlay; /* Used by browsers which support overflow: overlay */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Keyframe Animations with makeStyles\nDESCRIPTION: Demonstrates how to define CSS keyframe animations using the animationName property. The keyframes can be defined as an object with from/to or percentage-based steps.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    animationIterationCount: 'infinite',\n    animationDuration: '3s',\n    animationName: {\n      from: { transform: 'rotate(0deg)' },\n      to: { transform: 'rotate(360deg)' },\n    },\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n.f1cpbl36 {\n  animation-iteration-count: infinite;\n}\n.f1a27w2r {\n  animation-duration: 3s;\n}\n.f1g6ul6r {\n  animation-name: f1q8eu9e;\n}\n@keyframes f1q8eu9e {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing RTL Flipping with @noflip\nDESCRIPTION: Demonstrates how to prevent automatic flipping of properties in RTL mode by using the /* @noflip */ CSS comment. This ensures the property will be applied the same in both LTR and RTL layouts.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    paddingLeft: '10px /* @noflip */',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up _document.js for Griffel with Next.js\nDESCRIPTION: This code configures the Next.js Document component to support Griffel server-side rendering. It creates a DOM renderer, enhances the app component to use this renderer, and adds the generated style elements to the output.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/ssr-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-next-line\nimport { createDOMRenderer, renderToStyleElements } from '@griffel/react';\nimport Document, { Html, Head, Main, NextScript } from 'next/document';\n\nclass MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    // highlight-start\n    // 👇 creates a renderer\n    const renderer = createDOMRenderer();\n    const originalRenderPage = ctx.renderPage;\n\n    ctx.renderPage = () =>\n      originalRenderPage({\n        enhanceApp: App => props => <App {...props} renderer={renderer} />,\n      });\n    // highlight-end\n\n    const initialProps = await Document.getInitialProps(ctx);\n    // highlight-start\n    const styles = renderToStyleElements(renderer);\n\n    return {\n      ...initialProps,\n      // 👇 adding our styles elements to output\n      styles: [...initialProps.styles, ...styles],\n    };\n    // highlight-end\n  }\n\n  render() {\n    return (\n      <Html>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}\n\nexport default MyDocument;\n```\n\n----------------------------------------\n\nTITLE: Basic Style Resolution Process in Griffel React\nDESCRIPTION: Demonstrates how makeStyles is used to create a styling hook that resolves styles and injects them into the document during component rendering.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/technical-details.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\n// 1. Invocation of makeStyles creates a styling hook that will be used inside a component.\nconst useStyles = makeStyles({\n  root: { paddingLeft: '1px', display: 'flex' },\n});\n\nfunction Component() {\n  // 2. The hook call resolves styles which are injected into the document.\n  const classes = useStyles();\n\n  return <div className={classes.root} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Styles with Objects in Griffel\nDESCRIPTION: Creates global styles including @font-face and body styling using makeStaticStyles. The returned hook is used inside a React component to apply these styles globally.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStaticStyles } from '@griffel/react';\n\nconst useStaticStyles = makeStaticStyles({\n  '@font-face': {\n    fontFamily: 'Open Sans',\n    src: `url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\"),\n         url(\"/fonts/OpenSans-Regular-webfont.woff\") format(\"woff\")`,\n  },\n  body: {\n    backgroundColor: 'red',\n  },\n});\n\nfunction App() {\n  useStaticStyles();\n\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Styles with makeStaticStyles Object\nDESCRIPTION: Demonstrates how to create global styles using makeStaticStyles with object syntax. Useful for @font-face declarations and global element styling.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStaticStyles } from '@griffel/react';\n\nconst useStaticStyles = makeStaticStyles({\n  '@font-face': {\n    fontFamily: 'Open Sans',\n    src: `url(\"/fonts/OpenSans-Regular-webfont.woff2\") format(\"woff2\"),\n         url(\"/fonts/OpenSans-Regular-webfont.woff\") format(\"woff\")`,\n  },\n  body: {\n    background: 'red',\n  },\n\n  /**\n   * ⚠️ nested and pseudo selectors are not supported for this scenario via nesting\n   *\n   * Not supported:\n   * .some {\n   *   .class { ... },\n   *   ':hover': { ... }\n   * }\n   *\n   * Supported:\n   * '.some.class': { ... }\n   * '.some.class:hover': { ... }\n   */\n});\n\nfunction App() {\n  useStaticStyles();\n\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Combining makeResetStyles with makeStyles in React Components\nDESCRIPTION: Example of using makeResetStyles for base styles and makeStyles for conditional styles in a React component. Shows proper pattern for merging monolithic and atomic classes.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-reset-styles.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles, makeResetStyles } from '@griffel/react';\nimport { mergeClasses } from './mergeClasses';\n\nconst useBaseClass = makeResetStyles({\n  color: 'red',\n  padding: 0,\n  // etc.\n});\n\nconst useClasses = makeStyles({\n  primary: { color: 'blue' },\n  circular: {\n    padding: '5px',\n    borderRadius: '5px',\n  },\n});\n\nfunction Component(props) {\n  const baseClass = useBaseClass();\n  const classes = useClasses();\n\n  return (\n    <button className={mergeClasses(baseClass, props.primary && classes.primary, props.circular && classes.circular)} />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Global Styles with makeStaticStyles String\nDESCRIPTION: Shows how to create global styles using makeStaticStyles with string syntax or arrays of strings and objects. This provides a more CSS-like approach to defining global styles.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStaticStyles } from '@griffel/react';\n\nconst useStaticStyles1 = makeStaticStyles('body { background: red; } .foo { color: green; }');\nconst useStaticStyles2 = makeStaticStyles([\n  {\n    '@font-face': {\n      fontFamily: 'My Font',\n      src: `url(my_font.woff)`,\n    },\n  },\n  'html { line-height: 20px; }',\n]);\n\nfunction App() {\n  useStaticStyles1();\n  useStaticStyles2();\n\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Keyframe Animations with makeStyles\nDESCRIPTION: Shows how to define CSS animations using the animationName property with keyframes. Supports both single animation objects and arrays of animation objects.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    animationIterationCount: 'infinite',\n    animationDuration: '3s',\n    animationName: {\n      from: { transform: 'rotate(0deg)' },\n      to: { transform: 'rotate(360deg)' },\n    },\n  },\n  array: {\n    animationIterationCount: 'infinite',\n    animationDuration: '3s',\n    animationName: [\n      {\n        from: { transform: 'rotate(0deg)' },\n        to: { transform: 'rotate(360deg)' },\n      },\n      {\n        from: { height: '100px' },\n        to: { height: '200px' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic createDOMRenderer Usage with React\nDESCRIPTION: Demonstrates the basic setup of createDOMRenderer with RendererProvider component for handling style injection in web applications.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createDOMRenderer, RendererProvider } from '@griffel/react';\n\nfunction App(props) {\n  const { targetDocument } = props;\n  const renderer = React.useMemo(() => createDOMRenderer(targetDocument), [targetDocument]);\n\n  return (\n    <RendererProvider renderer={renderer} targetDocument={targetDocument}>\n      {/* Children components */}\n      {/* ... */}\n    </RendererProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Global Selectors with makeStyles\nDESCRIPTION: Demonstrates how to use the :global() selector to associate local styles with global selectors, allowing styles to be applied based on global DOM conditions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ':global(html[data-whatintent=\"mouse\"])': { backgroundColor: 'yellow' },\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\nhtml[data-whatintent='mouse'] .f1xz3i88 {\n  background-color: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Monolithic CSS with makeResetStyles in Griffel\nDESCRIPTION: Basic example of using makeResetStyles to create monolithic CSS styles including hover states. This returns a React hook that generates a single CSS class containing all style declarations.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-reset-styles.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { makeResetStyles } from '@griffel/react';\n\nconst useClass = makeResetStyles({\n  color: 'blue',\n  margin: 0,\n  ':hover': { color: 'teal' },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting Local Styles with Global Selectors\nDESCRIPTION: Demonstrates the :global() selector which allows connecting local styles with global selectors. This is useful for styling based on global state or attributes.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ':global(html[data-whatintent=\"mouse\"])': { backgroundColor: 'yellow' },\n    // outputs: html[data-whatintent=\"mouse\"] .abcd { background-color: yellow }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Griffel Renderer for Child Windows in React\nDESCRIPTION: This example shows how to set up a custom renderer for Griffel's makeStyles() by creating a React component that uses RendererProvider with a targetDocument. This configuration allows styles to be properly rendered in child windows, iframes, or Shadow DOM.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/child-window-rendering.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createDOMRenderer, RendererProvider } from '@griffel/react';\nimport React from 'react';\n\nfunction MyComponent(props) {\n  const { children, targetDocument } = props;\n  const renderer = React.useMemo(() => createDOMRenderer(targetDocument), [targetDocument]);\n\n  return (\n    <RendererProvider renderer={renderer} targetDocument={targetDocument}>\n      {children}\n    </RendererProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Griffel CSS Extraction\nDESCRIPTION: Configuration for Next.js to enable Griffel CSS extraction. This setup adds the Griffel webpack loader for JavaScript/TypeScript files and configures the extraction plugin to optimize CSS processing.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-nextjs.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// next.config.js\nconst { withGriffelCSSExtraction } = require('@griffel/next-extraction-plugin');\n\nmodule.exports = withGriffelCSSExtraction()({\n  webpack(config) {\n    config.module.rules.unshift({\n      test: /\\.(js|jsx)$/,\n      exclude: /node_modules/,\n      use: [\n        {\n          loader: '@griffel/webpack-loader',\n        },\n      ],\n    });\n\n    // If your project uses TypeScript\n    config.module.rules.unshift({\n      test: /\\.(ts|tsx)$/,\n      exclude: /node_modules/,\n      use: [\n        {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['next/babel'],\n            },\n          },\n        },\n      ],\n    });\n\n    return config;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Monolithic and Atomic CSS Implementations\nDESCRIPTION: Illustrates how CSS rules are defined in both monolithic and Atomic CSS approaches. Monolithic classes combine multiple properties in a single rule, while Atomic CSS creates separate rules for each property-value pair.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/atomic-css.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Monolithic classes */\n.button {\n  display: flex;\n  align-items: center;\n}\n\n/* Atomic CSS */\n.display-flex {\n  display: flex;\n}\n.align-items-center {\n  align-items: center;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo Selectors and Media Queries with makeStyles\nDESCRIPTION: Shows how to use pseudo selectors, class selectors, and at-rules within makeStyles. This allows for dynamic styling based on element state and media conditions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ':active': { color: 'pink' },\n    ':hover': { color: 'blue' },\n    // :link, :focus, etc.\n\n    '.foo': { color: 'black' },\n    ':nth-child(2n)': { backgroundColor: '#fafafa' },\n\n    '@media screen and (max-width: 992px)': { color: 'orange' },\n    '@container (max-width: 992px)': { color: 'orange' },\n    '@container foo (max-width: 992px)': { color: 'orange' },\n    '@supports (display: grid)': { color: 'red' },\n    '@layer utility': { marginBottom: '1em' },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing TextDirectionProvider for LTR and RTL in React\nDESCRIPTION: This example demonstrates how to use TextDirectionProvider from @griffel/react to control text direction for style computation. The default direction is LTR (Left-To-Right), but it can be explicitly set to RTL (Right-To-Left) via the dir prop.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/text-direction-provider.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TextDirectionProvider } from '@griffel/react';\n\nfunction App() {\n  return (\n    <>\n      <TextDirectionProvider>\n        {/* Inner components will have styles for LTR */}\n        {/* ... */}\n      </TextDirectionProvider>\n      <TextDirectionProvider dir=\"rtl\">\n        {/* Inner components will have styles for RTL */}\n        {/* ... */}\n      </TextDirectionProvider>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic RTL Support with makeStyles\nDESCRIPTION: Shows how Griffel automatically flips CSS properties and values for Right-To-Left text direction. Properties like padding-left will become padding-right in RTL mode.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    paddingLeft: '10px',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: RTL Support in makeStyles\nDESCRIPTION: Demonstrates Griffel's automatic property and value flipping for Right-To-Left (RTL) text direction. Properties like paddingLeft are automatically converted to paddingRight in RTL contexts.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    paddingLeft: '10px',\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Will be applied in LTR */\n.frdkuqy {\n  padding-left: 10px;\n}\n/* Will be applied in RTL */\n.f81rol6 {\n  padding-right: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Configuration for Griffel\nDESCRIPTION: Complete Webpack configuration setup including loaders and plugins for Griffel CSS extraction. Includes configuration for handling JavaScript/TypeScript files and CSS processing with MiniCssExtractPlugin.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-webpack.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GriffelCSSExtractionPlugin } = require('@griffel/webpack-extraction-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|ts|tsx)$/,\n        // Apply \"exclude\" only if your dependencies **do not use** Griffel\n        // exclude: /node_modules/,\n        use: {\n          loader: GriffelCSSExtractionPlugin.loader,\n        },\n      },\n      // Add \"@griffel/webpack-loader\" if you use Griffel directly in your project\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['@babel/preset-typescript'],\n            },\n          },\n        },\n      },\n      // \"css-loader\" is required to handle produced CSS assets by Griffel\n      // you can use \"style-loader\" or \"MiniCssExtractPlugin.loader\" to handle CSS insertion\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n  plugins: [new MiniCssExtractPlugin(), new GriffelCSSExtractionPlugin()],\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Griffel plugin in Vite config\nDESCRIPTION: JavaScript configuration for adding the Griffel plugin to Vite. The plugin is conditionally applied only for production builds to optimize output.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-vite.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport griffel from '@griffel/vite-plugin';\n\nexport default defineConfig(({ command }) => ({\n  // ...\n  plugins: [\n    // We recommend using the plugin only in production builds to get optimized output\n    command === 'build' && griffel(),\n  ],\n}));\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Styles with Strings and Arrays in Griffel\nDESCRIPTION: Shows how to define static styles using strings and arrays of strings/objects with makeStaticStyles, and how to use multiple style hooks in a component.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStaticStyles } from '@griffel/react';\n\nconst useStaticStyles1 = makeStaticStyles('body { background: red; } .foo { color: green; }');\nconst useStaticStyles2 = makeStaticStyles([\n  {\n    '@font-face': {\n      fontFamily: 'My Font',\n      src: `url(my_font.woff)`,\n    },\n  },\n  'html { line-height: 20px; }',\n]);\n\nfunction App() {\n  useStaticStyles1();\n  useStaticStyles2();\n\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Griffel CSS Extraction\nDESCRIPTION: Complete Next.js configuration example that integrates Griffel CSS extraction plugin and sets up webpack loaders for both JavaScript and TypeScript files.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/next-extraction-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\nconst { withGriffelCSSExtraction } = require('@griffel/next-extraction-plugin');\n\nmodule.exports = withGriffelCSSExtraction()({\n  webpack(config) {\n    config.module.rules.unshift({\n      test: /\\.(js|jsx)$/,\n      exclude: /node_modules/,\n      use: [\n        {\n          loader: '@griffel/webpack-loader',\n        },\n      ],\n    });\n\n    // If your project uses TypeScript\n    config.module.rules.unshift({\n      test: /\\.(ts|tsx)$/,\n      exclude: /node_modules/,\n      use: [\n        {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['next/babel'],\n            },\n          },\n        },\n      ],\n    });\n\n    return config;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Classes with mergeClasses in Griffel React\nDESCRIPTION: Demonstrates how to use mergeClasses to combine styles from multiple useClasses calls, showing how the order of arguments affects the final styles applied.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/merge-classes.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mergeClasses, makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  blueBold: {\n    color: 'blue', // className \"color-blue\"\n    fontWeight: 'bold', // className \"font-weight-bold\"\n  },\n  red: {\n    color: 'red', // className \"color-red\"\n  },\n});\n\nfunction Component(props) {\n  const { isBold } = props;\n  const classes = useClasses();\n\n  // ℹ️ Order of arguments determines the results\n\n  const firstClassName = mergeClasses(isBold && classes.blueBold, classes.red);\n  // 👆 { color: 'red', fontWeight: 'bold' }\n  //    className \"color-red font-weight-bold\"\n  const secondClassName = mergeClasses(classes.red, isBold && classes.blueBold);\n  // 👆 { color: 'blue', fontWeight: 'bold' }\n  //    className \"color-blue font-weight-bold\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Loader for Custom Griffel Re-exports\nDESCRIPTION: Webpack configuration for handling re-exports of Griffel functions from custom packages. Specifies the custom package name and the import names to be processed by the loader.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            modules: [\n              {\n                moduleSource: 'custom-package',\n                importName: 'makeStyles',\n                resetImportName: 'makeResetStyles',\n              },\n            ],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Optimizing Webpack Configuration for Griffel by Targeting Style Files Only\nDESCRIPTION: Webpack configuration example showing how to restrict Griffel loader to process only '.styles.ts' files for better performance. This reduces the scope of processed files by enforcing a naming convention.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styles.ts$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['@babel/preset-typescript'],\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing CSS Fallback Properties\nDESCRIPTION: Demonstrates how to provide multiple values for a CSS property. Browsers will use the latest valid value, providing backward compatibility.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    overflowY: ['scroll', 'overlay'],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Nesting Selectors with makeStyles\nDESCRIPTION: Shows how to use nested selectors in makeStyles where the '&' character references the parent selector. This approach allows selecting child elements or applying additional classes.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    '& .foo': { color: 'green' },\n    '&.bar': { color: 'red' },\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n.f15f830o .foo {\n  color: green;\n}\n.fns74iw.bar {\n  color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Font Family Quoting in makeStaticStyles\nDESCRIPTION: Demonstrates the correct way to quote font family names that contain special characters like parentheses when using makeStaticStyles.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// ✅ Correctly returns `font-family` in styles\nconst useStaticStyles = makeStaticStyles({\n  '@font-face': {\n    fontFamily: '\"Segoe UI Web (West European)\"',\n    // ...\n  },\n});\n// 🔴 Will not return a `font-family` in styles\nconst useStaticStyles = makeStaticStyles({\n  '@font-face': {\n    fontFamily: 'Segoe UI Web (West European)',\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Griffel styles in a Next.js page component\nDESCRIPTION: This example demonstrates how to use Griffel styles in a Next.js page component. It creates a style rule for a button with bold font weight and applies it via the className property.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/ssr-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  button: { fontWeight: 'bold' },\n});\n\nexport default function Home() {\n  const classes = useClasses();\n\n  return <Button className={classes.button}>Hello world!</Button>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using shorthands.borderColor with makeStyles in Griffel\nDESCRIPTION: Example demonstrating how to use the shorthands.borderColor utility instead of unsupported CSS shorthand properties. This shows both incorrect and correct usage patterns.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/shorthands.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    // ❌ This is not supported, TypeScript compiler will throw, styles will not be inserted to DOM\n    borderColor: 'red',\n    // ✅ Use shorthand functions to avoid writting CSS longhands\n    ...shorthands.borderColor('red'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using DOM Renderer for Custom Target Documents\nDESCRIPTION: Demonstrates how to use createDOMRenderer and RendererProvider for scenarios like rendering to child windows or server-side rendering. This ensures styles are injected into the correct document.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createDOMRenderer, RendererProvider } from '@griffel/react';\n\nfunction App(props) {\n  const { targetDocument } = props;\n  const renderer = React.useMemo(() => createDOMRenderer(targetDocument), [targetDocument]);\n\n  return (\n    <RendererProvider renderer={renderer} targetDocument={targetDocument}>\n      {/* Children components */}\n      {/* ... */}\n    </RendererProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Griffel\nDESCRIPTION: Basic .babelrc configuration to use the Griffel preset.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\"@griffel\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Configuration with Griffel CSS Extraction\nDESCRIPTION: Complete webpack configuration example showing how to set up Griffel CSS extraction plugin with loaders and plugins. Includes configuration for handling JS/TS files and CSS processing.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-extraction-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GriffelCSSExtractionPlugin } = require('@griffel/webpack-extraction-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|ts|tsx)$/,\n        // Apply \"exclude\" only if your dependencies **do not use** Griffel\n        // exclude: /node_modules/,\n        use: {\n          loader: GriffelCSSExtractionPlugin.loader,\n        },\n      },\n      // Add \"@griffel/webpack-loader\" if you use Griffel directly in your project\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n        },\n      },\n      // \"css-loader\" is required to handle produced CSS assets by Griffel\n      // you can use \"style-loader\" or \"MiniCssExtractPlugin.loader\" to handle CSS insertion\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, 'css-loader'],\n      },\n    ],\n  },\n  plugins: [new MiniCssExtractPlugin(), new GriffelCSSExtractionPlugin()],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Styles with makeStyles in Griffel for React\nDESCRIPTION: This snippet demonstrates how to import the makeStyles function from @griffel/react and use it to define styles. It creates a styles object with a 'root' class that sets the color to red.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/__fixtures__/error-syntax/code.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// This file is .txt intentionally to avoid Prettier formatting\nimport { makeStyles } from '@griffel/react';\n\nconst styles = makeStyles({\n  root: { color: 'red' },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Pseudo-elements with makeStyles\nDESCRIPTION: Shows how to implement pseudo-elements like ::before and ::after in Griffel styles. When setting content on pseudo elements, nested quotes must be used, even for empty content.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    '::after': {\n      content: '\"\"', // Note the nested quotes\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: CSS Output from makeStaticStyles Object Definition\nDESCRIPTION: Shows the resulting CSS output generated from the makeStaticStyles object definition, including the @font-face declaration and body styling.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n  font-family: 'Open Sans';\n  src: url('/fonts/OpenSans-Regular-webfont.woff2') format('woff2'), url('/fonts/OpenSans-Regular-webfont.woff') format('woff');\n}\nbody {\n  background-color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Fallback Properties with makeStaticStyles in Griffel\nDESCRIPTION: Shows how to provide CSS fallback properties using arrays for property values, which helps support older browsers by providing multiple values for a CSS property.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStaticStyles } from '@griffel/react';\n\nconst useClasses = makeStaticStyles({\n  body: {\n    overflowY: ['scroll', 'overlay'],\n  },\n});\n\nfunction App() {\n  useStaticStyles();\n\n  return <div />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using TextDirectionProvider in Griffel React\nDESCRIPTION: Shows how to use the TextDirectionProvider component to set the text direction for style computation in Griffel React. It demonstrates setting both LTR and RTL directions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TextDirectionProvider } from '@griffel/react';\n\nfunction App() {\n  return (\n    <>\n      <TextDirectionProvider>\n        {/* Inner components will have styles for LTR */}\n        {/* ... */}\n      </TextDirectionProvider>\n      <TextDirectionProvider dir=\"rtl\">\n        {/* Inner components will have styles for RTL */}\n        {/* ... */}\n      </TextDirectionProvider>\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Webpack Configuration for JavaScript and JSX Files\nDESCRIPTION: Webpack configuration example showing how to add the Griffel loader for JavaScript and JSX files. Configures the loader to process .js and .jsx files while excluding node_modules.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n        },\n      },\n\n      // If your project uses TypeScript\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['@babel/preset-typescript'],\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: AOT-Compiled Style Function Result\nDESCRIPTION: Shows the transformed, lightweight version of the style function after AOT compilation, where makeStyles is replaced with __styles that simply concatenates CSS classes and inserts them to DOM.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/technical-details.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst useStyles = __styles(\n  {\n    root: {\n      mc9l5x: 'f22iagw',\n      uwmqm3: ['f10xn8zz', 'f136y8j8'],\n    },\n  },\n  {\n    d: ['.f22iagw{display:flex;}', '.f10xn8zz{padding-left:1px;}', '.f136y8j8{padding-right:1px;}'],\n  },\n);\n\nfunction Component() {\n  const classes = useStyles();\n\n  return <div className={classes.root} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSS Output from makeResetStyles\nDESCRIPTION: Example of the CSS output generated by makeResetStyles, showing how multiple style declarations are grouped into a single class with its pseudo-selectors.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-reset-styles.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.r6gaeno {\n  color: blue;\n  margin: 0px;\n}\n\n.r6gaeno:hover {\n  color: teal;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling RTL Flipping with @noflip Comment\nDESCRIPTION: Shows how to prevent specific rules from being flipped in RTL mode by adding a /* @noflip */ CSS comment to the rule. This ensures the property is applied identically in both LTR and RTL contexts.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    paddingLeft: '10px /* @noflip */',\n  },\n});\n```\n\nLANGUAGE: css\nCODE:\n```\n/* Will be applied in LTR & RTL */\n.f6x5cb6 {\n  padding-left: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shadow DOM Renderer\nDESCRIPTION: Example of how to create a Shadow DOM renderer using the createShadowDOMRenderer function from the @griffel/shadow-dom package.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/shadow-dom/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createShadowDOMRenderer } from '@griffel/shadow-dom';\n\nconst render = createShadowDOMRenderer(element.shadowRoot);\n```\n\n----------------------------------------\n\nTITLE: Merging Plain CSS Classes with Griffel Styles\nDESCRIPTION: Shows how to use mergeClasses to combine static CSS classes with Griffel-generated atomic classes, maintaining the order of application.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/merge-classes.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { mergeClasses, makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  setA: {},\n  setB: {},\n});\n\nfunction Component() {\n  const classes = useClasses();\n\n  // ℹ️ Non-atomic class names will be first and followed by the new class names\n\n  const className = mergeClasses('foo', classes.setA, classes.setB, 'bar');\n  // 👆 className \"foo bar ...atomic classes...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mobile-First Media Query Sorting\nDESCRIPTION: Example of implementing mobile-first methodology using sort-css-media-queries package with createDOMRenderer.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\nimport sortCSSmq from 'sort-css-media-queries';\n\nconst renderer = createDOMRenderer(document, {\n  compareMediaQueries: sortCSSmq,\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables for Nested/Pseudo Selectors in Griffel (JSX)\nDESCRIPTION: This example demonstrates how to use local CSS variables for nested or pseudo selectors when inline styles can't be applied. It combines Griffel styles with CSS variables set through inline styles.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/limitations.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst useClasses = makeStyles({\n  root: {\n    ':hover': { color: 'var(--my-app-color)' },\n  },\n});\n\nfunction App(props) {\n  const classes = useClasses();\n  return <div style={{ '--my-app-color': props.color }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring @griffel/vite-plugin in vite.config.js\nDESCRIPTION: Example configuration for integrating the Griffel plugin with Vite. The plugin is conditionally applied only during production builds to optimize the output, as recommended by the documentation.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/vite-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite';\nimport griffel from '@griffel/vite-plugin';\n\nexport default defineConfig(({ command }) => ({\n  // ...\n  plugins: [\n    // We recommend using the plugin only in production builds to get optimized output\n    command === 'build' && griffel(),\n  ],\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring _app.js for Griffel with Next.js\nDESCRIPTION: This code sets up the Next.js App component to use Griffel. It wraps the application with a RendererProvider, using either the renderer passed from the Document component or creating a new DOM renderer if needed.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/ssr-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createDOMRenderer, RendererProvider } from '@griffel/react';\n\nfunction MyApp({ Component, pageProps, renderer }) {\n  return (\n    // 👇 accepts a renderer passed from the <Document /> component or creates a default one\n    <RendererProvider renderer={renderer || createDOMRenderer()}>\n      <Component {...pageProps} />\n    </RendererProvider>\n  );\n}\n\nexport default MyApp;\n```\n\n----------------------------------------\n\nTITLE: Sorting Media Queries with compareMediaQueries in Griffel React\nDESCRIPTION: Demonstrates how to use a custom compareMediaQueries function to sort media queries when creating a DOM renderer. It includes an example of defining a specific order for media queries.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\n\nconst mediaQueryOrder = [\n  'only screen and (min-width: 1366px)',\n  'only screen and (min-width: 1366px)',\n  'only screen and (min-width: 1920px)',\n];\n\nfunction sortMediaQueries(a, b) {\n  return mediaQueryOrder.indexOf(a) - mediaQueryOrder.indexOf(b);\n}\n\nconst renderer = createDOMRenderer(document, {\n  compareMediaQueries,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Supported CSS Shorthands in Griffel (JavaScript)\nDESCRIPTION: This snippet shows how to use supported CSS shorthand properties in Griffel. It demonstrates the usage of padding and background shorthands, which are fully supported by the library.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/limitations.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    padding: '2px 4px',\n    background: 'green',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting styleElementAttributes in Griffel React\nDESCRIPTION: Demonstrates how to use the styleElementAttributes option when creating a DOM renderer to add custom attributes to generated style elements, such as a nonce for Content Security Policy.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\n\nconst renderer = createDOMRenderer(document, {\n  styleElementAttributes: {\n    nonce: 'random',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Keyframe Animations in makeStyles\nDESCRIPTION: Shows how to define multiple keyframe animations by providing an array of animation objects to the animationName property, each defining a separate animation sequence.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  asArray: {\n    animationIterationCount: 'infinite',\n    animationDuration: '3s',\n    animationName: [\n      {\n        from: { transform: 'rotate(0deg)' },\n        to: { transform: 'rotate(360deg)' },\n      },\n      {\n        from: { height: '100px' },\n        to: { height: '200px' },\n      },\n    ],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using sort-css-media-queries for Mobile-First Methodology in Griffel React\nDESCRIPTION: Demonstrates how to use the sort-css-media-queries library to implement a mobile-first methodology when sorting media queries in Griffel React.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\nimport sortCSSmq from 'sort-css-media-queries';\n\nconst renderer = createDOMRenderer(document, {\n  compareMediaQueries: sortCSSmq,\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of makeStyles in Styles File\nDESCRIPTION: Example showing proper placement of makeStyles() in a component.styles.ts file, which complies with the '@griffel/styles-files' rule.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/styles-file.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// filename: component.styles.ts\nimport { makeStyles } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Hook Naming Example in JavaScript\nDESCRIPTION: Example showing correct naming of a makeStyles() hook that follows React's naming convention by using 'use' prefix.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/hook-naming.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with specific Griffel rules\nDESCRIPTION: Custom ESLint configuration that enables only specific Griffel rules rather than using the recommended preset, allowing for more granular control.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@griffel\"],\n  \"rules\": {\n    \"@griffel/hook-naming\": \"error\",\n    \"@griffel/no-shorthands\": \"error\",\n    \"@griffel/pseudo-element-naming\": \"error\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with Griffel recommended rules\nDESCRIPTION: Basic configuration for .eslintrc that adds the Griffel plugin and extends the recommended ruleset to enforce good practices.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugins\": [\"@griffel\"],\n  \"extends\": [\"plugin:@griffel/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Using RESET Value to Remove Properties in makeStyles\nDESCRIPTION: Demonstrates how to use the RESET value to remove CSS properties when merging styles. Unlike 'initial' or 'unset', RESET doesn't generate a CSS rule but instead removes the property entirely.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, mergeClasses, RESET } from '@griffel/react';\n\nconst useClassesA = makeStyles({\n  root: {\n    color: 'red',\n    backgroundColor: 'blue',\n  },\n});\nconst useClassesB = makeStyles({\n  root: {\n    color: RESET,\n  },\n});\n\nfunction Component() {\n  const classesA = useClassesA();\n  const classesB = useClassesB();\n\n  // 💡 After merging, the `color` property will be removed\n  const className = mergeClasses(classesA.root, classesB.root);\n\n  // 💡 If `RESET` value is set, it won't be added to the class\n  return <div className={classesA} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Functions for Unsupported CSS Properties in Griffel (JavaScript)\nDESCRIPTION: This code demonstrates the use of shorthand functions in Griffel for CSS properties that are not directly supported as shorthands. It shows how to use the shorthands.borderColor function instead of the unsupported borderColor shorthand.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/limitations.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    // ❌ This is not supported, TypeScript compiler will throw, styles will not be inserted to DOM\n    borderColor: 'red',\n    // ✅ Use shorthand functions to avoid writing CSS longhands\n    ...shorthands.borderColor('red'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Restricting Webpack Loader to Specific Style Files\nDESCRIPTION: Webpack configuration that restricts the Griffel loader to only process .styles.ts files, which can improve build performance by reducing the scope of processed files.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.styles.ts$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['@babel/preset-typescript'],\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Double Colon Pseudo Elements in Griffel\nDESCRIPTION: Example showing the correct syntax for pseudo elements in Griffel by using double colons. This follows the standard CSS convention where pseudo elements use double colons (::before, ::after).\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/pseudo-element-naming.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nexport const useClasses = makeStyles({\n  root: {\n    '::before': {},\n    '::after': {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Style Resolution Workflow Diagram\nDESCRIPTION: A mermaid diagram showing the style resolution process from useStyles invocation through RTL styles computation, CSS class computation, CSS rule generation, to DOM insertion.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/technical-details.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\n    \n\n    INVOKE_USE_STYLES: useStyles() invocation\n    COMPUTE_RTL_STYLES: Compute RTL styles\n    COMPUTE_CSS_CLASSES: Compute CSS classes\n    COMPUTE_CSS_RULES: Compute CSS rules\n    INSERT_TO_DOM: Insert CSS to DOM\n\n    INVOKE_USE_STYLES --> COMPUTE_RTL_STYLES\n    COMPUTE_RTL_STYLES --> COMPUTE_CSS_CLASSES\n    COMPUTE_CSS_CLASSES --> COMPUTE_CSS_RULES\n    COMPUTE_CSS_RULES --> INSERT_TO_DOM\n\n    note right of INVOKE_USE_STYLES\n     {\n        &nbsp;&nbsp;paddingLeft:'1px',\n        &nbsp;&nbsp;display:'flex',\n     }\n    end note\n    note right of COMPUTE_RTL_STYLES\n     {\n        &nbsp;&nbsp;paddingLeft:'1px',\n        &nbsp;&nbsp;paddingRight:'1px',\n        &nbsp;&nbsp;display:'flex',\n      }\n    end note\n    note right of COMPUTE_CSS_CLASSES\n     {\n       &nbsp;&nbsp;// .f10xn8zz\n       &nbsp;&nbsp;paddingLeft:'1px',\n       &nbsp;&nbsp;// .f136y8j8\n       &nbsp;&nbsp;paddingRight:'1px',\n       &nbsp;&nbsp;// .f22iagw\n       &nbsp;&nbsp;display:'flex'\n     }\n    end note\n    note right of COMPUTE_CSS_RULES\n     .f10xn8zz {\n       &nbsp;&nbsp;padding-left:1px\n     }\n     .f136y8j8 {\n       &nbsp;&nbsp;padding-right:1px\n     }\n     .f22iagw {\n      &nbsp;&nbsp;display:flex\n     }\n    end note\n```\n\n----------------------------------------\n\nTITLE: Using shorthands.borderStyle in Griffel React\nDESCRIPTION: Demonstrates how to use the shorthands.borderStyle function to mimic CSS border-style shorthand in Griffel React. It shows examples with different numbers of style values.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.borderStyle('solid'),\n    ...shorthands.borderStyle('solid', 'dashed'),\n    ...shorthands.borderStyle('solid', 'dashed', 'dotted'),\n    ...shorthands.borderStyle('solid', 'dashed', 'dotted', 'double'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating Merged Classes Result in HTML\nDESCRIPTION: Shows the result of merging multiple atomic classes where property conflicts are resolved. The mergeClasses function ensures that only one property-value pair is applied, with the last defined pair winning.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/atomic-css.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- Example: a result of merging classes -->\n<button class=\"display-flex align-items-end\"></button>\n```\n\n----------------------------------------\n\nTITLE: Selector Nesting Support in makeStaticStyles\nDESCRIPTION: Shows the limitations of nested selectors in makeStaticStyles, demonstrating unsupported nested JavaScript objects and the correct flat approach.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStaticStyles } from '@griffel/react';\n\nconst useStaticStyles = makeStaticStyles({\n  // 🔴 Not supported\n  '.some': {\n    '.class': {\n      /* ... */\n    },\n    ':hover': {\n      /* ... */\n    },\n  },\n\n  // ✅ Supported\n  '.some.class': {\n    /* ... */\n  },\n  '.some.class:hover': {\n    /* ... */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Griffel Shorthand Functions\nDESCRIPTION: An example of correct usage of Griffel's shorthand functions. The padding function is called with separate string arguments instead of a space-separated string, which will produce the expected CSS output.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/no-invalid-shorthand-argument.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { shorthands } from '@griffel/react';\n\n// ✅ Correct output\nshorthands.padding('2px', '4px');\n```\n\n----------------------------------------\n\nTITLE: Style Insertion Point Configuration\nDESCRIPTION: Demonstrates how to configure a specific insertion point for style elements in the document.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\n\nconst insertionPoint = document.head.querySelector('#foo');\nconst renderer = createDOMRenderer(document, {\n  insertionPoint,\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CSS Rule Groups for Style Overrides\nDESCRIPTION: Shows how different groups of CSS rules can be defined for property overrides in Atomic CSS. Group A defines display and align-items properties, while Group B defines an alternative align-items value.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/atomic-css.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Group A */\n.display-flex {\n  display: flex;\n}\n.align-items-center {\n  align-items: center;\n}\n\n/* Group B */\n.align-items-end {\n  align-items: end;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Babel Settings for Griffel Webpack Loader\nDESCRIPTION: Example of specifying custom Babel configuration options for the Griffel webpack loader, including plugins and presets needed for TypeScript support and specific language features.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(ts|tsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              // Optional plugins specific to your environment\n              plugins: ['@babel/plugin-proposal-class-static-block'],\n              // If your project uses TypeScript\n              presets: ['@babel/preset-typescript'],\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of Supported Border Property in Griffel\nDESCRIPTION: This snippet demonstrates the correct use of a supported border property (borderColor) in Griffel, which is the recommended approach.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/no-deprecated-shorthands.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    ...shorthands.borderColor('red')\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of CSS Longhands in Griffel makeStyles\nDESCRIPTION: Example of code that follows the no-shorthands rule by using CSS longhand properties like 'backgroundColor' and utilizing the shorthands utility for padding.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/no-shorthands.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    backgroundColor: 'red',\n    ...shorthands.padding('10px', '20px'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Mobile-First Media Queries in Griffel React\nDESCRIPTION: Shows the resulting HTML structure when using mobile-first sorted media queries with Griffel React. It displays style elements with different media queries in ascending order of min-width.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <style media=\"only screen and (min-width: 1px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 480px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 640px)\" data-make-styles-bucket=\"m\"></style>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Inheritance of Webpack Resolve Options\nDESCRIPTION: Configuration example showing how to specify which webpack resolve options should be inherited by the Griffel loader from the main webpack configuration, including aliases, modules, plugins, and condition names.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            inheritResolveOptions: ['alias', 'modules', 'plugins', 'conditionNames'],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizing mergeClasses Behavior with Mermaid Diagram\nDESCRIPTION: A Mermaid class diagram illustrating how mergeClasses combines different style inputs to produce a final result, emphasizing that the order of inputs affects the outcome.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/merge-classes.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    direction BT\n\n    Result <-- Input1\n    Result <-- Input2\n\n\n    Result : color blue\n    Result : fontWeight bold\n\n    class Input1 {\n      color red\n      fontWeight bold\n    }\n    class Input2 {\n      color blue\n    }\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Sorted Media Queries in Griffel React\nDESCRIPTION: Shows the resulting HTML structure when using sorted media queries with Griffel React. It displays style elements with different media queries in the head of the document.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <style media=\"only screen and (min-width: 1024px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 1366px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 1920px)\" data-make-styles-bucket=\"m\"></style>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with insertionPoint in Griffel React\nDESCRIPTION: Shows the resulting HTML structure when using insertionPoint with Griffel React. It displays where Griffel-created style elements are inserted in relation to other elements.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <style id=\"foo\" />\n    <!-- Style elements created by Griffel will be inserted after \"#foo\" element -->\n    <style data-make-styles-bucket=\"d\" />\n    <style id=\"bar\" />\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Evaluation Rules for Griffel Webpack Loader\nDESCRIPTION: Configuration example for customizing module evaluation rules in the Griffel webpack loader, which defines how matched files will be transformed during evaluation.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            evaluationRules: [],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Concatenating Class Strings in Griffel\nDESCRIPTION: Demonstrates an anti-pattern of concatenating class strings instead of using mergeClasses, which can lead to duplicated classes and non-deterministic results.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/merge-classes.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst useClasses = makeStyles({\n  rootA: { color: 'red' },\n  rootB: { color: 'blue' },\n});\n\nfunction App(props) {\n  const classes = useClasses();\n\n  // ✅ Returns \"class-color-blue\"\n  const correctClasses = mergeClasses(classes.rootA, classes.rootB);\n  // 🔴 Never concatenate class strings, returns \"class-color-red class-color-blue\"\n  const wrongClasses = classes.rootA + ' ' + classes.rootB;\n}\n```\n\n----------------------------------------\n\nTITLE: Using shorthands.borderColor with different argument counts in Griffel\nDESCRIPTION: Example showing how to use the borderColor shorthand function with one to four arguments, following the CSS shorthand pattern of top, right, bottom, left.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/shorthands.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.borderColor('red'),\n    ...shorthands.borderColor('red', 'blue'),\n    ...shorthands.borderColor('red', 'blue', 'green'),\n    ...shorthands.borderColor('red', 'blue', 'green', 'yellow'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using shorthands.borderWidth with different argument counts in Griffel\nDESCRIPTION: Example showing how to use the borderWidth shorthand function with one to four arguments, following the CSS shorthand pattern of top, right, bottom, left.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/shorthands.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.borderWidth('12px'),\n    ...shorthands.borderWidth('12px', '24px'),\n    ...shorthands.borderWidth('12px', '24px', '36px'),\n    ...shorthands.borderWidth('12px', '24px', '36px', '48px'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Enumerating Variants as a Workaround for Runtime Styles in Griffel (JSX)\nDESCRIPTION: This snippet demonstrates a workaround for runtime style limitations by enumerating variants. It creates separate style classes for known values and uses conditional rendering to apply the appropriate class.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/limitations.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst useClasses = makeStyles({\n  twoColumns: {\n    /* styles */\n  },\n  threeColumns: {\n    /* styles */\n  },\n  fourColumns: {\n    /* styles */\n  },\n});\n\nfunction App(props) {\n  const classes = useClasses();\n  const className = mergeClasses(\n    props.columns === 'two' && classes.twoColumns,\n    props.columns === 'three' && classes.threeColumns,\n    props.columns === 'four' && classes.fourColumns,\n  );\n\n  return <div className={className} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of makeStyles in Component File\nDESCRIPTION: Example showing improper placement of makeStyles() in a component.tsx file, which violates the '@griffel/styles-files' rule.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/styles-file.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// filename: component.tsx\nimport { makeStyles } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using shorthands.borderStyle with different argument counts in Griffel\nDESCRIPTION: Example showing how to use the borderStyle shorthand function with one to four arguments, following the CSS shorthand pattern of top, right, bottom, left.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/shorthands.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.borderStyle('solid'),\n    ...shorthands.borderStyle('solid', 'dashed'),\n    ...shorthands.borderStyle('solid', 'dashed', 'dotted'),\n    ...shorthands.borderStyle('solid', 'dashed', 'dotted', 'double'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using shorthands.borderWidth in Griffel React\nDESCRIPTION: Demonstrates how to use the shorthands.borderWidth function to mimic CSS border-width shorthand in Griffel React. It shows examples with different numbers of width values.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.borderWidth('12px'),\n    ...shorthands.borderWidth('12px', '24px'),\n    ...shorthands.borderWidth('12px', '24px', '36px'),\n    ...shorthands.borderWidth('12px', '24px', '36px', '48px'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Inline Styles for Dynamic Values in Griffel (JSX)\nDESCRIPTION: This code snippet shows how to use inline styles for frequently changing values as an alternative to runtime styles in Griffel. It combines static styles created with makeStyles and dynamic inline styles.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/limitations.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst useClasses = makeStyles({\n  root: {\n    /* your other styles styles */\n  },\n});\n\nfunction App(props) {\n  const classes = useClasses();\n  return <div className={classes.root} style={{ color: props.color }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: RTL Flipping Limitations with CSS Variables\nDESCRIPTION: Illustrates a limitation where values containing CSS variables might not be properly converted in RTL mode. This example shows boxShadow with a CSS variable that won't be flipped.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-styles.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    // ⚠️ \"boxShadow\" will not be flipped in this example\n    boxShadow: 'var(--box-shadow)',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing CSS Output from Griffel Transforms\nDESCRIPTION: Example of how to configure the Griffel preset to return evaluated styles and access the metadata programmatically.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = {\n  // makeStyles\n  cssEntries: {\n    // by each hook\n    useStyles1: {\n      // by each slot\n      root: [\".fxxxxx { color: 'red' }\"],\n    },\n    useStyles2: {\n      root: [\".fxxxxx { color: 'red' }\"],\n    },\n  },\n  // makeResetStyles\n  cssResetEntries: {\n    // by each hook\n    useResetStyles1: [\".fxxxxx { color: 'red' }\"],\n    useResetStyles2: [\".fxxxxx { color: 'red' }\"],\n  },\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { griffelPreset, BabelPluginMetadata } from '@griffel/babel-preset';\n\nconst babelFileResult = Babel.transformFromAstSync(babelAST, sourceCode, {\n  babelrc: false,\n  configFile: false,\n  presets: [[griffelPreset, { generateMetadata: true }]],\n\n  filename: options.filename,\n\n  sourceMaps: options.enableSourceMaps,\n  sourceFileName: options.filename,\n  inputSourceMap: options.inputSourceMap,\n});\n\n// metadata\nconsole.log(babelFileResult.metadata as unknown as BabelPluginMetadata);\n```\n\n----------------------------------------\n\nTITLE: Using shorthands.borderColor in Griffel React\nDESCRIPTION: Demonstrates how to use the shorthands.borderColor function to mimic CSS border-color shorthand in Griffel React. It shows examples with different numbers of color values.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nconst useClasses = makeStyles({\n  root: {\n    ...shorthands.borderColor('red'),\n    ...shorthands.borderColor('red', 'blue'),\n    ...shorthands.borderColor('red', 'blue', 'green'),\n    ...shorthands.borderColor('red', 'blue', 'green', 'yellow'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Insertion Point HTML Structure\nDESCRIPTION: Shows the resulting HTML structure when using a custom insertion point for style elements.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <style id=\"foo\" />\n    <!-- Style elements created by Griffel will be inserted after \"#foo\" element -->\n    <style data-make-styles-bucket=\"d\" />\n    <style id=\"bar\" />\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Single Colon Pseudo Elements in Griffel\nDESCRIPTION: Example showing incorrect syntax where pseudo elements are defined with single colons. This pattern should be avoided as pseudo elements should use double colons to distinguish them from pseudo selectors.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/pseudo-element-naming.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nexport const useClasses = makeStyles({\n  root: {\n    ':before': {},\n    ':after': {},\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for custom Griffel exports\nDESCRIPTION: Configuration in package.json to handle custom re-exports of Griffel's styling functions. This metadata tells wyw-in-js how to process the imported functions from custom packages.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/tag-processor/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"custom-package\",\n  \"version\": \"1.0.0\",\n  \"wyw-in-js\": {\n    \"tags\": {\n      \"makeStyles\": \"@griffel/tag-processor/make-styles\",\n      \"makeResetStyles\": \"@griffel/tag-processor/make-reset-styles\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging shorthands.borderColor output in Griffel\nDESCRIPTION: Example showing how to use console.log to understand the CSS longhands generated by the borderColor shorthand function. This demonstrates that shorthands functions are pure and can be inspected.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/shorthands.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(borderColor('red'));\n// ⬇️⬇️⬇️\n// {\n//  borderBottomColor: 'red',\n//  borderLeftColor: 'red',\n//  borderRightColor: 'red',\n//  borderTopColor: 'red',\n// }\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Settings for Griffel\nDESCRIPTION: Example of specifying custom Babel configuration options for the Griffel preset.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@griffel\",\n      {\n        \"babelOptions\": {\n          \"plugins\": [\"@babel/plugin-proposal-class-static-block\"],\n          \"presets\": [\"@babel/preset-typescript\"]\n        }\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Wrong Order of Arguments in mergeClasses\nDESCRIPTION: Illustrates how the order of arguments in mergeClasses affects the final styles, potentially leading to unexpected results if not used correctly.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/merge-classes.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst useClasses = makeStyles({\n  root: { color: 'red' },\n});\n\nfunction Component(props) {\n  const classes = useClasses();\n  // 💥 Incorrect order of classes\n  const wrongClasses2 = mergeClasses(props.className, classes.root);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing makeStyles from a custom package\nDESCRIPTION: Example of importing makeStyles and makeResetStyles from a custom package instead of directly from @griffel/react. This requires additional configuration to handle re-exports.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/tag-processor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles, makeResetStyles } from 'custom-package';\n```\n\n----------------------------------------\n\nTITLE: Importing Griffel Functions from Custom Packages\nDESCRIPTION: Code example showing how to import makeStyles, makeResetStyles, and other Griffel functions from a custom package instead of directly from @griffel/react.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, makeResetStyles } from 'custom-package';\n// 👇 custom import names are also supported\nimport { createStyles } from 'custom-package';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Calling makeStyles Inside a Function\nDESCRIPTION: This example shows improper usage where makeStyles is called within a function scope. This pattern is discouraged because it could lead to passing runtime values to makeStyles, which doesn't support dynamic styles generation.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/top-level-styles.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// filename: component.tsx\nimport { makeStyles } from '@griffel/react';\n\nexport const getStyles = () => {\n  const useStyles = makeStyles({\n    root: {\n      backgroundColor: 'red',\n    },\n  });\n\n  return useStyles;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler for Static Assets\nDESCRIPTION: TypeScript compiler configuration to enable static asset imports by including the static-assets type definitions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/typings/static-assets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"static-assets\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Hook Naming Example in JavaScript\nDESCRIPTION: Example showing incorrect naming of a makeStyles() hook that violates React's naming convention by using 'get' prefix instead of 'use'.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/hook-naming.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nexport const getStyles = makeStyles({\n  root: {\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Module Evaluation Example with Common Style Functions\nDESCRIPTION: Demonstrates a pattern for creating reusable style functions that can be imported into style definitions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/technical-details.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// common.js\nexport const commonStyles = () => ({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Wrapping makeStyles in a Utility Function at Top-Level\nDESCRIPTION: This example shows another correct pattern where makeStyles is still called at the top-level scope but its result is processed through a utility function. This maintains the static nature of style definitions while allowing for some composition.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/top-level-styles.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@fluentui/react-components';\nimport { generateStyles } from './custom-css';\n\nexport const useStyles = generateStyles(makeStyles({\n  root: {\n    backgroundColor: 'red',\n  },\n}));\n```\n\n----------------------------------------\n\nTITLE: Importing Griffel from Custom Packages\nDESCRIPTION: Example of importing Griffel functions from custom packages and configuring Babel to handle these imports.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from 'custom-package';\n// 👇 custom import names are also supported\nimport { createStyles } from 'custom-package';\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@griffel\",\n      {\n        \"modules\": [{ \"moduleSource\": \"custom-package\", \"importName\": \"makeStyles\" }]\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of CSS Shorthands in Griffel makeStyles\nDESCRIPTION: Example of code that violates the no-shorthands rule by using CSS shorthand properties like 'background' and 'padding' directly in makeStyles.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/no-shorthands.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    background: 'red',\n    padding: '10px 20px',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Module Evaluation Example with Constants\nDESCRIPTION: Shows how constants can be exported and imported across modules for style definitions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/technical-details.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// constants.js\nexport const PADDING_TOKEN = '1px';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Griffel Shorthand Functions\nDESCRIPTION: An example of incorrect usage of Griffel's shorthand functions. The padding function is called with a space-separated string, which will produce incorrect results since Griffel doesn't parse or separate the parameters.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/no-invalid-shorthand-argument.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { shorthands } from '@griffel/react';\n\n// ❌ Will produce wrong results\nshorthands.padding('2px 4px');\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Extraction Plugin\nDESCRIPTION: Commands to install the Griffel webpack extraction plugin using either yarn or npm package managers.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-extraction-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/webpack-extraction-plugin\n# or\nnpm install --save-dev @griffel/webpack-extraction-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Plugin with NPM\nDESCRIPTION: Command to install the Griffel webpack extraction plugin as a dev dependency using NPM package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @griffel/webpack-extraction-plugin\n```\n\n----------------------------------------\n\nTITLE: Overriding Webpack Resolve Options for Griffel Loader\nDESCRIPTION: Configuration that overrides specific webpack resolve options for the Griffel loader, particularly useful when custom conditionNames are needed for proper module resolution during transformation.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  resolve: {\n    conditionNames: ['source', 'import'],\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            webpackResolveOptions: {\n              conditionNames: ['source', 'require'],\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage Pattern with Multiple makeResetStyles Classes\nDESCRIPTION: Example showing the incorrect pattern of applying multiple makeResetStyles-generated classes to the same element, which will result in non-deterministic behavior.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-reset-styles.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeResetStyles } from '@griffel/react';\n\nconst useClassA = makeResetStyles({\n  /* styles */\n});\nconst useClassB = makeResetStyles({\n  /* styles */\n});\n\nfunction Component(props) {\n  /* 💣 Never apply multiple rules from makeResetStyles() to the same element */\n  return <button className={mergeClasses(useClassA(), useClassB())} />;\n}\n```\n\n----------------------------------------\n\nTITLE: MiniCssExtractPlugin Configuration with ignoreOrder\nDESCRIPTION: Configuration example showing how to disable CSS order warnings in MiniCssExtractPlugin when used with Griffel.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      ignoreOrder: true,\n    }),\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage: Calling makeStyles Inside a Class Method\nDESCRIPTION: This example demonstrates incorrect usage where makeStyles is called within a class method. This creates the same issues as the previous example, potentially allowing runtime values to be passed to makeStyles.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/top-level-styles.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// filename: component.tsx\nimport { makeStyles } from '@fluentui/react-components';\n\nexport class MyClass {\n  getStyles () {\n    const styles = makeStyles({\n      root: {\n        backgroundColor: 'red',\n      },\n    });\n\n    return styles;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Module Evaluation Rules Configuration\nDESCRIPTION: The default evaluation rules configuration used by the Griffel webpack loader, which uses the shakerEvaluator for most files but ignores node_modules to improve performance.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: '@griffel/webpack-loader',\n          options: {\n            evaluationRules: [\n              {\n                action: require('@griffel/babel-preset').shakerEvaluator,\n              },\n              {\n                test: /[\\/\\\\]node_modules[\\/\\\\]/,\n                action: 'ignore',\n              },\n            ],\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Plugin with Yarn\nDESCRIPTION: Command to install the Griffel webpack extraction plugin as a dev dependency using Yarn package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @griffel/webpack-extraction-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Loader\nDESCRIPTION: Commands to install the required Griffel webpack loader dependency using either yarn or npm package managers.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/next-extraction-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/webpack-loader\n# or\nnpm install --save-dev @griffel/webpack-loader\n```\n\n----------------------------------------\n\nTITLE: Installing @griffel/vite-plugin via package managers\nDESCRIPTION: Installation commands for the required packages using npm or yarn. Both @griffel/tag-processor and @griffel/vite-plugin packages are needed as development dependencies.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/vite-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# npm\nnpm i -D @griffel/tag-processor @griffel/vite-plugin\n# yarn\nyarn add --dev @griffel/tag-processor @griffel/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Transforming Griffel makeStyles Function\nDESCRIPTION: Example of how the Griffel preset transforms the makeStyles function call during build time.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useStyles = makeStyles({\n  root: { color: 'red' },\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __styles } from '@griffel/react';\n\nconst useStyles = __styles(/* resolved styles */);\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Next.js Extraction Plugin with NPM\nDESCRIPTION: Command to install the Griffel Next.js extraction plugin as a development dependency using NPM package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-nextjs.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @griffel/next-extraction-plugin\n```\n\n----------------------------------------\n\nTITLE: Referencing Related Griffel React Package in Markdown\nDESCRIPTION: A markdown link to the @griffel/react package that users should use instead of the core package directly.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/core/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`@griffel/react`](../react)\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel with Yarn\nDESCRIPTION: This command installs the Griffel React package using Yarn package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/install.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @griffel/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Evaluation for Griffel\nDESCRIPTION: Example of configuring module evaluation rules for the Griffel preset, including default setup.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"presets\": [\n    [\n      \"@griffel\",\n      {\n        \"evaluationRules\": []\n      }\n    ]\n  ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    [\n      '@griffel',\n      {\n        evaluationRules: [\n          {\n            action: require('@griffel/babel-preset').shakerEvaluator,\n          },\n          {\n            test: /[\\/\\\\]node_modules[\\/\\\\]/,\n            action: 'ignore',\n          },\n        ],\n      },\n    ],\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Loader with Yarn\nDESCRIPTION: Command to install the Griffel webpack loader as a development dependency using Yarn package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-webpack.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @griffel/webpack-loader\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel ESLint Plugin using package managers\nDESCRIPTION: Commands to install the Griffel ESLint plugin using either Yarn or npm package managers as a development dependency.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/eslint-plugin\n# or\nnpm install --save-dev @griffel/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel with NPM\nDESCRIPTION: This command installs the Griffel React package using NPM (Node Package Manager).\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/install.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @griffel/react\n```\n\n----------------------------------------\n\nTITLE: Media Query Sorting Implementation\nDESCRIPTION: Shows how to implement custom media query sorting with createDOMRenderer using a predefined order array.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\n\nconst mediaQueryOrder = [\n  'only screen and (min-width: 1366px)',\n  'only screen and (min-width: 1366px)',\n  'only screen and (min-width: 1920px)',\n];\n\nfunction sortMediaQueries(a, b) {\n  return mediaQueryOrder.indexOf(a) - mediaQueryOrder.indexOf(b);\n}\n\nconst renderer = createDOMRenderer(document, {\n  compareMediaQueries,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Loader using npm or yarn\nDESCRIPTION: Command line instructions for installing the @griffel/webpack-loader package as a development dependency using either yarn or npm package managers.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-loader/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/webpack-loader\n# or\nnpm install --save-dev @griffel/webpack-loader\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Webpack Loader with NPM\nDESCRIPTION: Command to install the Griffel webpack loader as a development dependency using NPM package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-webpack.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @griffel/webpack-loader\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Babel Preset\nDESCRIPTION: Commands to install the Griffel Babel preset using yarn or npm package managers.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/babel-preset\n# or\nnpm install --save-dev @griffel/babel-preset\n```\n\n----------------------------------------\n\nTITLE: Sorted Media Queries HTML Output\nDESCRIPTION: Demonstrates the HTML structure output when media queries are sorted using the compareMediaQueries option.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <style media=\"only screen and (min-width: 1024px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 1366px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 1920px)\" data-make-styles-bucket=\"m\"></style>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel dependencies for Vite with NPM\nDESCRIPTION: Command to install Griffel tag processor and Vite plugin using NPM package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-vite.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev @griffel/tag-processor @griffel/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Shadow DOM Package\nDESCRIPTION: Commands to install the @griffel/shadow-dom package using npm or yarn package managers.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/shadow-dom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @griffel/shadow-dom\n# or\nyarn add @griffel/shadow-dom\n```\n\n----------------------------------------\n\nTITLE: Mobile-First Media Queries HTML Output\nDESCRIPTION: Shows the HTML structure output when using mobile-first media query sorting approach.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <style media=\"only screen and (min-width: 1px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 480px)\" data-make-styles-bucket=\"m\"></style>\n    <style media=\"only screen and (min-width: 640px)\" data-make-styles-bucket=\"m\"></style>\n  </head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel dependencies for Vite with Yarn\nDESCRIPTION: Command to install Griffel tag processor and Vite plugin using Yarn package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-vite.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @griffel/tag-processor @griffel/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Testing and Building Griffel Code\nDESCRIPTION: These commands run the test suite and build the current code to ensure everything is working correctly before pushing changes.\nSOURCE: https://github.com/microsoft/griffel/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n\nyarn build\n```\n\n----------------------------------------\n\nTITLE: MiniCssExtractPlugin Configuration with ignoreOrder Option\nDESCRIPTION: Configuration example showing how to handle CSS module order conflicts by setting the ignoreOrder option in MiniCssExtractPlugin.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-extraction-plugin/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  plugins: [\n    new MiniCssExtractPlugin({\n      ignoreOrder: true,\n    }),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Snapshot After Using Griffel Serializer\nDESCRIPTION: Example of HTML output in Jest snapshots after applying the Griffel serializer, with generated class names removed.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/jest-serializer/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"static-class\">Hello world</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote for Griffel Repository\nDESCRIPTION: This command adds the original Griffel repository as a remote named 'upstream' to allow pulling the latest updates.\nSOURCE: https://github.com/microsoft/griffel/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:microsoft/griffel.git\n```\n\n----------------------------------------\n\nTITLE: Optimized Webpack Configuration with Include Paths\nDESCRIPTION: Webpack configuration example showing how to optimize performance by specifying include paths for the Griffel CSS extraction loader.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-webpack.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GriffelCSSExtractionPlugin } = require('@griffel/webpack-extraction-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|ts|tsx)$/,\n        include: [\n          path.resolve(__dirname, 'components'),\n          /\\/node_modules\\/@fluentui\\//,\n          // see https://webpack.js.org/configuration/module/#condition\n        ],\n        use: {\n          loader: GriffelCSSExtractionPlugin.loader,\n        },\n      },\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: HTML Snapshot Before Using Griffel Serializer\nDESCRIPTION: Example of HTML output in Jest snapshots before applying the Griffel serializer, showing generated class names.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/jest-serializer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"static-class __1qdh4ig f16th3vw frdkuqy0 fat0sn40 fjseox00\">Hello world</div>\n```\n\n----------------------------------------\n\nTITLE: Griffel Style Types Package Title\nDESCRIPTION: Markdown header declaring the npm package name for Griffel style types\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/style-types/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `@griffel/style-types`\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler for Environment Types\nDESCRIPTION: TypeScript compiler configuration to enable environment variable type definitions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/typings/environment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"types\": [\"environment\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Jest Serializer via Package Manager\nDESCRIPTION: Commands to install @griffel/jest-serializer as a dev dependency using either Yarn or npm.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/jest-serializer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/jest-serializer\n# or\nnpm install --save-dev @griffel/jest-serializer\n```\n\n----------------------------------------\n\nTITLE: Starting Storybook for Griffel Devtools\nDESCRIPTION: Command to start Storybook for testing and developing Griffel Devtools components in isolation.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/devtools/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx run @griffel/devtools:storybook\n```\n\n----------------------------------------\n\nTITLE: Using Typed Environment Variables in TypeScript\nDESCRIPTION: Example of using process.env with type checking to ensure correct environment variable usage. Demonstrates type validation and error detection for NODE_ENV values.\nSOURCE: https://github.com/microsoft/griffel/blob/main/typings/environment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @ExpectType string\nexport function log(...messages: Array<string>) {\n  if (process.env.NODE_ENV === 'development') {\n    console.log(...messages);\n  }\n\n  // $ExpectError - 'prod' is not defined, did you mean to 'production' ?\n  if (process.env.NODE_ENV === 'prod') {\n    // do something\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Griffel Devtools in Watch Mode\nDESCRIPTION: Command to run the Griffel Devtools in watch mode for development, allowing changes to be compiled in real-time.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/devtools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn nx run @griffel/devtools:watch\n```\n\n----------------------------------------\n\nTITLE: Running CSS Shorthands Update Script with Nx\nDESCRIPTION: Command to execute the update-shorthands generator script that updates CSS shorthand definitions in the Griffel core package.\nSOURCE: https://github.com/microsoft/griffel/blob/main/tools/update-shorthands/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run @griffel/update-shorthands:generate\n```\n\n----------------------------------------\n\nTITLE: Correct Usage: Calling makeStyles at Top-Level Scope\nDESCRIPTION: This example shows the proper way to use makeStyles, calling it at the top-level scope of the file. This ensures that styles are defined statically at module initialization time, respecting Griffel's limitations.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/top-level-styles.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    backgroundColor: 'red',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Playground Component for Griffel Style Experimentation\nDESCRIPTION: This code snippet imports a Playground component, likely used to create an interactive environment for comparing Griffel styles with CSS. The component is rendered within the page content.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/try-it-out/try-it-out.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Playground from '../../src/components/Playground';\n\n<Playground />\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsupported Runtime Styles in Griffel (JSX)\nDESCRIPTION: This code snippet shows an example of attempting to create styles at runtime in Griffel, which is not supported and will throw an exception. It illustrates the limitation of using dynamic values in CSS rules.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/guides/limitations.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nfunction App(props) {\n  // ❌ This will not work and throw an exception\n  const useClasses = makeStyles({\n    root: {\n      color: props.color,\n      [`.${props.area}`]: { display: 'block' },\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Combining makeStaticStyles with makeStyles in Griffel\nDESCRIPTION: Demonstrates how to use makeStaticStyles for global styles alongside makeStyles for component-specific styles in a React application.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { makeStyles, makeStaticStyles, shorthands } from '@griffel/react';\n\nconst useStaticStyles = makeStaticStyles({\n  body: {\n    color: 'red',\n    padding: '5px',\n  },\n});\n\nconst useClasses = makeStyles({\n  primaryText: {\n    color: 'blue',\n    padding: '10px',\n  },\n});\n\nexport default function App(props) {\n  useStaticStyles();\n  const classes = useClasses();\n\n  return <p className={props.primaryText}>Hello world</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Griffel Postcss Syntax with Configuration\nDESCRIPTION: This snippet demonstrates how to create a custom postcss syntax for Griffel using the createSyntax function. It shows how to configure the syntax with custom modules, specifically adding a createStyles import from a custom scope.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/postcss-syntax/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSyntax } from '@griffel/postcss-syntax';\nconst syntax = createSyntax({\n  modules: [\n    { moduleSource: '@myScope/griffel', importName: 'createStyles' },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Module Evaluation for Composite Styles\nDESCRIPTION: Shows how makeStyles can incorporate imported constants and helper functions to create composite styles that will be evaluated at build time.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/technical-details.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// styles.js\nimport { makeStyles } from '@griffel/react';\nimport { PADDING_TOKEN } from './constants';\nimport { commonStyles } from './common';\n\nconst useStyles = makeStyles({\n  root: { paddingLeft: PADDING_TOKEN, ...commonStyles() },\n});\n```\n\n----------------------------------------\n\nTITLE: Anti-pattern for makeResetStyles Usage\nDESCRIPTION: Shows an incorrect usage pattern for makeResetStyles. Only one class generated by makeResetStyles should be applied to an element to avoid non-deterministic behavior.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { makeStyles } from '@griffel/react';\n\nconst useClassA = makeResetStyles({\n  /* styles */\n});\nconst useClassB = makeResetStyles({\n  /* styles */\n});\n\nfunction Component(props) {\n  /* 💣 Never apply multiple rules from makeResetStyles() to the same element */\n  return <button className={mergeClasses(useClassA(), useClassB())} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Griffel Babel Preset\nDESCRIPTION: Commands to enable debugging output for the Griffel Babel preset using environment variables.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/babel-preset/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ DEBUG=linaria\\* LINARIA_LOG=debug yarn build\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cross-env DEBUG=linaria\\* LINARIA_LOG=debug yarn build\n```\n\n----------------------------------------\n\nTITLE: Style Element Attributes Configuration\nDESCRIPTION: Shows how to add custom attributes to generated style elements, such as nonce for security purposes.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/create-dom-renderer.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\n\nconst renderer = createDOMRenderer(document, {\n  styleElementAttributes: {\n    nonce: 'random',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Deprecated Border Shorthand in Griffel\nDESCRIPTION: This snippet demonstrates the incorrect use of the deprecated 'border' shorthand in Griffel, which will produce suboptimal results.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/no-deprecated-shorthands.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\nexport const useStyles = makeStyles({\n  root: {\n    ...shorthands.border('1px') // ❌ Will produce suboptimal results\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Environment Variable Type Definitions\nDESCRIPTION: Example showing how to add new environment variable types to the ExtendedProcessEnv interface.\nSOURCE: https://github.com/microsoft/griffel/blob/main/typings/environment/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ExtendedProcessEnv {\n  NODE_ENV?: 'production' | 'development' | 'test';\n+ NX_ENV?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Deprecated Border Shorthand Function in Griffel\nDESCRIPTION: This snippet shows another incorrect use of the deprecated 'border' shorthand function in Griffel, which will also produce suboptimal results.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/eslint-plugin/src/rules/no-deprecated-shorthands.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { makeStyles, shorthands } from '@griffel/react';\n\n// ❌ Will produce suboptimal results\nshorthands.border('1px')\n```\n\n----------------------------------------\n\nTITLE: Extending Static Asset Type Definitions\nDESCRIPTION: Example showing how to add support for new static asset file types by declaring additional module types.\nSOURCE: https://github.com/microsoft/griffel/blob/main/typings/static-assets/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.avif' {\n  const src: string;\n  export default src;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Static Assets in TypeScript\nDESCRIPTION: Example of importing an image file in TypeScript with type checking support.\nSOURCE: https://github.com/microsoft/griffel/blob/main/typings/static-assets/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @ExpectType string\nimport myImgSrc from './hello-world.png';\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Next.js Extraction Plugin with Yarn\nDESCRIPTION: Command to install the Griffel Next.js extraction plugin as a development dependency using Yarn package manager.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/css-extraction/with-nextjs.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add --dev @griffel/next-extraction-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js with Griffel Webpack Loader\nDESCRIPTION: Next.js configuration example showing how to integrate Griffel loader by extending the webpack configuration. Includes setup for both JavaScript and TypeScript files using Next.js specific presets.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/ahead-of-time-compilation/with-webpack.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// next.config.js\n\nmodule.exports = {\n  webpack: (config, { buildId, dev, isServer, defaultLoaders, nextRuntime, webpack }) => {\n    config.module.rules.unshift({\n      test: /\\.(js|jsx)$/,\n      exclude: /node_modules/,\n      use: [\n        {\n          loader: '@griffel/webpack-loader',\n        },\n      ],\n    });\n\n    // If your project uses TypeScript\n    config.module.rules.unshift({\n      test: /\\.(ts|tsx)$/,\n      exclude: /node_modules/,\n      use: [\n        {\n          loader: '@griffel/webpack-loader',\n          options: {\n            babelOptions: {\n              presets: ['next/babel'],\n            },\n          },\n        },\n      ],\n    });\n\n    return config;\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Griffel Next Extraction Plugin\nDESCRIPTION: Commands to install the Griffel Next.js extraction plugin and its dependencies using either yarn or npm package managers.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/next-extraction-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/next-extraction-plugin\n# or\nnpm install --save-dev @griffel/next-extraction-plugin\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Griffel Repository\nDESCRIPTION: These commands clone the forked Griffel repository to the local machine and install the necessary dependencies using yarn.\nSOURCE: https://github.com/microsoft/griffel/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your-user>/griffel.git\ncd griffel\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing @griffel/tag-processor via package managers\nDESCRIPTION: Commands to install the @griffel/tag-processor package using either yarn or npm. This processor is required for performing build time transforms for Griffel's styling functions.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/tag-processor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @griffel/tag-processor\n# or\nnpm install --save-dev @griffel/tag-processor\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Use Griffel Serializer\nDESCRIPTION: JavaScript configuration to add @griffel/jest-serializer to Jest's snapshotSerializers array in jest.config.js.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/jest-serializer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  snapshotSerializers: ['@griffel/jest-serializer'],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Entry for Griffel Changes\nDESCRIPTION: This command uses beachball to create new changelog entries for the changes made to Griffel.\nSOURCE: https://github.com/microsoft/griffel/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn change\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch for Griffel Development\nDESCRIPTION: This command creates and switches to a new branch for developing a feature or fixing a bug in Griffel.\nSOURCE: https://github.com/microsoft/griffel/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b fix/bug\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch for Griffel Pull Request\nDESCRIPTION: This command pushes the feature branch to the remote repository, preparing it for a pull request.\nSOURCE: https://github.com/microsoft/griffel/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin fix/bug\n```\n\n----------------------------------------\n\nTITLE: CSS Output for Fallback Properties\nDESCRIPTION: Shows the CSS output generated when using array values for CSS properties in makeStaticStyles, which creates multiple declarations for browser fallback support.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/website/docs/react/api/make-static-styles.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  overflow-y: scroll; /* Fallback for browsers which do not support overflow: overlay */\n  overflow-y: overlay; /* Used by browsers which support overflow: overlay */\n}\n```\n\n----------------------------------------\n\nTITLE: Building Griffel Benchmark App\nDESCRIPTION: Command to build the benchmark application and watch for changes using nx build system.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/benchmark/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run @griffel/benchmark:watch\n```\n\n----------------------------------------\n\nTITLE: Serving Griffel Benchmark App\nDESCRIPTION: Command to serve the built benchmark application in a web browser for testing.\nSOURCE: https://github.com/microsoft/griffel/blob/main/apps/benchmark/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn nx run @griffel/benchmark:serve\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version for Griffel Development\nDESCRIPTION: This command checks the installed version of Node.js to ensure it meets the minimum requirement of v14 for Griffel development.\nSOURCE: https://github.com/microsoft/griffel/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n\nv14.0.0\n```\n\n----------------------------------------\n\nTITLE: Optimized Webpack Configuration with Include Paths\nDESCRIPTION: Enhanced webpack configuration showing how to optimize performance by specifying include paths for the Griffel CSS extraction loader.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/webpack-extraction-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { GriffelCSSExtractionPlugin } = require('@griffel/webpack-extraction-plugin');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|ts|tsx)$/,\n        include: [\n          path.resolve(__dirname, 'components'),\n          /\\/node_modules\\/@fluentui\\//,\n          // see https://webpack.js.org/configuration/module/#condition\n        ],\n        use: {\n          loader: GriffelCSSExtractionPlugin.loader,\n        },\n      },\n    ],\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting insertionPoint for Style Elements in Griffel React\nDESCRIPTION: Demonstrates how to use the insertionPoint option when creating a DOM renderer to specify where Griffel should insert created style tags in the document.\nSOURCE: https://github.com/microsoft/griffel/blob/main/packages/react/README.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createDOMRenderer } from '@griffel/react';\n\nconst insertionPoint = document.head.querySelector('#foo');\nconst renderer = createDOMRenderer(document, {\n  insertionPoint,\n});\n```\n\n----------------------------------------\n\nTITLE: Microsoft Security Policy Template\nDESCRIPTION: Standard security policy markdown template used across Microsoft repositories that details vulnerability reporting procedures and security practices.\nSOURCE: https://github.com/microsoft/griffel/blob/main/SECURITY.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- BEGIN MICROSOFT SECURITY.MD V0.0.5 BLOCK -->\n\n## Security\n\nMicrosoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet), [Xamarin](https://github.com/xamarin), and [our GitHub organizations](https://opensource.microsoft.com/).\n\nIf you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://docs.microsoft.com/en-us/previous-versions/tn-archive/cc751383(v=technet.10)), please report it to us as described below.\n\n## Reporting Security Issues\n\n**Please do not report security vulnerabilities through public GitHub issues.**\n\nInstead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://msrc.microsoft.com/create-report).\n\nIf you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://www.microsoft.com/en-us/msrc/pgp-key-msrc).\n\nYou should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc).\n\nPlease include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:\n\n  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)\n  * Full paths of source file(s) related to the manifestation of the issue\n  * The location of the affected source code (tag/branch/commit or direct URL)\n  * Any special configuration required to reproduce the issue\n  * Step-by-step instructions to reproduce the issue\n  * Proof-of-concept or exploit code (if possible)\n  * Impact of the issue, including how an attacker might exploit the issue\n\nThis information will help us triage your report more quickly.\n\nIf you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://microsoft.com/msrc/bounty) page for more details about our active programs.\n\n## Preferred Languages\n\nWe prefer all communications to be in English.\n\n## Policy\n\nMicrosoft follows the principle of [Coordinated Vulnerability Disclosure](https://www.microsoft.com/en-us/msrc/cvd).\n\n<!-- END MICROSOFT SECURITY.MD BLOCK -->\n```"
  }
]