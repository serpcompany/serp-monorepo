[
  {
    "owner": "pilcrowonpaper",
    "repo": "arctic",
    "content": "TITLE: Generating OAuth2 Authorization URL with PKCE and Storing State/Verifier (TypeScript)\nDESCRIPTION: Generates a unique state and code verifier for PKCE, creates the authorization URL with the provider using the specified scopes, and stores the state and code verifier in secure, HTTP-only cookies. Finally, redirects the user's browser to the generated authorization URL to initiate the login flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2-pkce.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"user:email\", \"repo\"];\nconst url = google.createAuthorizationURL(state, codeVerifier, scopes);\n\n// store state as cookie\nsetCookie(\"state\", state, {\n\tsecure: true, // set to false in localhost\n\tpath: \"/\",\n\thttpOnly: true,\n\tmaxAge: 60 * 10 // 10 min\n});\n\n// store code verifier as cookie\nsetCookie(\"code_verifier\", codeVerifier, {\n\tsecure: true, // set to false in localhost\n\tpath: \"/\",\n\thttpOnly: true,\n\tmaxAge: 60 * 10 // 10 min\n});\n\nreturn redirect(url);\n```\n\n----------------------------------------\n\nTITLE: Initializing and Authorizing with Arctic GitHub Client in TypeScript\nDESCRIPTION: This snippet demonstrates initializing the Arctic GitHub OAuth 2.0 client in TypeScript, generating the authorization URL, and validating the received authorization code to obtain an access token. Required dependencies include the \"arctic\" library and a compatible OAuth provider client ID and secret. Key parameters include 'clientId', 'clientSecret', 'state', 'scopes', and the OAuth 'code'. The input is the authorization code, while the output is an access token string. This implementation is limited to providers adhering to the OAuth 2.0 spec and assumes an environment with Fetch API support.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/index.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst github = new arctic.GitHub(clientId, clientSecret);\n\nconst state = arctic.generateState();\nconst scopes = [\"user:email\"];\nconst authorizationURL = github.createAuthorizationURL(state, scopes);\n\n// ...\n\nconst tokens = await github.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\n```\n\n----------------------------------------\n\nTITLE: Handling Google Refresh Token after Validation in TypeScript\nDESCRIPTION: Shows how to check for and retrieve the refresh token after validating the authorization code, particularly when offline access was requested using 'access_type=offline'. The refresh token is usually only provided on the initial authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await google.validateAuthorizationCode(code, codeVerifier);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nif (tokens.hasRefreshToken()) {\n\tconst refreshToken = tokens.refreshToken();\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token Using Refresh Token in Mercado Pago OAuth with TypeScript\nDESCRIPTION: Demonstrates how to obtain a new access token by providing a valid refresh token using the refreshAccessToken() method of the MercadoPago client. The method returns an OAuth2Tokens object containing fresh access and refresh tokens, and similar to validation, may throw errors such as OAuth2RequestError and ArcticFetchError. This snippet also shows retrieving the refresh token when initially validating an authorization code with the 'offline_access' scope included.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadopago.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await mercadopago.validateAuthorizationCode(code, codeVerifier);\nconst refreshToken = tokens.refreshToken();\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await mercadopago.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Salesforce OAuth Authorization Code with Arctic in TypeScript\nDESCRIPTION: Illustrates handling the OAuth code exchange to obtain tokens using Arctic's 'validateAuthorizationCode' method. Expects a valid Salesforce provider instance, the authorization code, and the verifier. Handles possible exceptions including OAuth2RequestError for invalid codes, ArcticFetchError for failed network requests, and others. Returns an OAuth2Tokens object containing at least the access token; Salesforce may omit refresh and ID tokens depending on scopes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await salesforce.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth2 Authorization Code with Arctic in TypeScript\nDESCRIPTION: This snippet demonstrates how to exchange an OAuth2 authorization code for tokens using the OAuth2Client.validateAuthorizationCode() method. It utilizes await for async operation and implements robust error handling for OAuth2RequestError and ArcticFetchError. Expected input includes the token endpoint, code, and (optionally) a codeVerifier for PKCE flows. Output is an OAuth2Tokens instance or raised exceptions for spec-compliant and fetch errors.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/generic-oauth2-client.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await client.validateAuthorizationCode(tokenEndpoint, code, null);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing LinkedIn OAuth Access Token Using Refresh Token in TypeScript\nDESCRIPTION: Uses the refreshAccessToken method to obtain a new access token from LinkedIn using a previously obtained refresh token. Similar to authorization code validation, it returns OAuth2Tokens and handles the same set of errors. This enables continuous authenticated access without requiring user reauthorization. Error handling segregates HTTP request failures and OAuth request errors.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await linkedin.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with OAuth2Client in TypeScript\nDESCRIPTION: This TypeScript function, createAuthorizationURL, constructs a URL object for initiating an OAuth 2.0 authorization flow using the provided authorization endpoint, state, and scopes. If an empty array is passed for scopes, the 'scope' query parameter will be omitted from the resulting URL. Requires the OAuth2Client class and a compatible environment with URL handling capabilities. Inputs include the authorization endpoint (string), a state value (string), and a list of scopes (array of strings); outputs a URL object suitable for redirecting a user agent to initiate OAuth authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Client/createAuthorizationURL.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction createAuthorizationURL(\n\tauthorizationEndpoint: string,\n\tstate: string,\n\tscopes: string[]\n): URL;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens using Arctic Amazon Cognito in TypeScript\nDESCRIPTION: Uses a refresh token to obtain a new access token from Amazon Cognito. The method accepts an optional array of scopes, which if empty, retains the existing scopes. Error handling includes OAuth2 request errors and fetch-related failures, mirroring the validation method behavior.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/amazon-cognito.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\t// Pass an empty `scopes` array to keep using the same scopes.\n\tconst tokens = await cognito.refreshAccessToken(refreshToken, scopes);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Tumblr OAuth Access Token Using Refresh Token - TypeScript\nDESCRIPTION: Details the process of exchanging a refresh token for a new access token and refresh token with Arctic in TypeScript, along with comprehensive error handling. Requires the Arctic library and a valid 'refreshToken'. Handles the same error types as initial token validation, outputting new tokens and expiration times on success. Expected for long-lived user authentication scenarios.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tumblr.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await tumblr.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth 2.0 Access Tokens using arctic library in TypeScript\nDESCRIPTION: This snippet demonstrates how to use `refreshAccessToken()` to obtain a new access token with a refresh token. The process preserves original scopes by passing an empty array and handles errors similar to token validation. On success, it retrieves fresh access token data for continued authorized API interactions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\t// Pass an empty `scopes` array to keep using the same scopes.\n\tconst tokens = await entraId.refreshAccessToken(refreshToken, scopes);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth Authorization Code and Handling Errors with Arctic in TypeScript\nDESCRIPTION: This snippet shows how to exchange the authorization code for access and refresh tokens using the Arctic GitLab provider. The 'validateAuthorizationCode' method is awaited and may throw typed errors (OAuth2RequestError, ArcticFetchError, UnexpectedResponseError, or UnexpectedErrorResponseBodyError). It returns an 'OAuth2Tokens' instance with methods to access the various token values and expiration. Required dependencies are the initialized provider and the code received from the OAuth 2.0 redirect. Proper try/catch usage is showcased for robust error handling.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitlab.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await gitlab.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Intuit Authorization Code with Arctic (TypeScript)\nDESCRIPTION: Explains how to validate the authorization code received from Intuit using Arctic's `validateAuthorizationCode` method in TypeScript. This asynchronous function returns an `OAuth2Tokens` object on success or throws specific Arctic errors (`OAuth2RequestError`, `ArcticFetchError`, etc.) on failure. The example shows how to access the access token, its expiration, the refresh token, and handle potential errors.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await intuit.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arctic for GitHub OAuth 2.0 Authorization Code Flow in TypeScript\nDESCRIPTION: Demonstrates initializing the Arctic GitHub client, generating a state parameter, creating an authorization URL for user redirection, and subsequently validating the returned authorization code to obtain access tokens in a TypeScript application. This showcases the basic steps for the OAuth 2.0 authorization code grant flow using the Arctic library.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst github = new arctic.GitHub(clientId, clientSecret);\n\nconst state = arctic.generateState();\nconst scopes = [\"user:email\"];\nconst authorizationURL = github.createAuthorizationURL(state, scopes);\n\n// ...\n\nconst tokens = await github.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\n```\n\n----------------------------------------\n\nTITLE: Validating Google Authorization Code in TypeScript\nDESCRIPTION: Validates the authorization code received from Google using the code verifier (for PKCE). On success, it returns OAuth2Tokens containing access and potentially refresh/ID tokens; otherwise, it throws specific Arctic errors (OAuth2RequestError, ArcticFetchError, etc.) which should be caught and handled.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await google.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Reddit Access Tokens with Arctic in TypeScript\nDESCRIPTION: Demonstrates using the `refreshAccessToken` method with a previously obtained refresh token to get a new access token and potentially a new refresh token. It includes error handling similar to the authorization code validation process. Requires a valid `refreshToken`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/reddit.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await reddit.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing TikTok OAuth2 Access Token with Arctic - TypeScript\nDESCRIPTION: Uses the refreshAccessToken method of the Arctic TikTok provider to obtain a new access token via a refresh token. Input required is a valid refreshToken string. The returned OAuth2Tokens object contains the new access token, expiration, and refresh token. Error handling follows the same pattern as validateAuthorizationCode, using instanceof checks to distinguish error types. Arctic library and the TikTok provider instance must be initialized.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiktok.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await tiktok.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Salesforce User Info using OpenID Connect with Arctic in TypeScript\nDESCRIPTION: Explains how to use OpenID Connect scopes with Arctic to retrieve Salesforce user's ID token and decode it. Requires requesting 'openid' scope and validating the authorization code to obtain tokens. Demonstrates decoding ID token claims with 'decodeIdToken'. Covers calling the UserInfo endpoint using the obtained access token to retrieve full user profile as JSON. Prerequisites include having a valid Salesforce and Arctic setup with relevant scopes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = salesforce.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await salesforce.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://login.salesforce.com/services/oauth2/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with Arctic Amazon Cognito in TypeScript\nDESCRIPTION: Generates an OAuth 2.0 authorization URL with PKCE support using Arctic. Uses functions to generate cryptographically secure state and code verifier values. Scopes define access privileges (e.g., \"openid\", \"profile\"). The resulting URL directs users to the Amazon Cognito authorization endpoint.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/amazon-cognito.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = cognito.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token (TypeScript)\nDESCRIPTION: This snippet shows how to refresh an access token using a refresh token with Arctic.js. It calls `mal.refreshAccessToken()` with the refresh token, which returns a new access token, its expiration, and a new refresh token. Similar error handling is included as in the authorization code validation process to handle potential network or authentication issues.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/myanimelist.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await mal.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Authorization URL with PKCE in Arctic (TypeScript)\nDESCRIPTION: This snippet expands on the standard authorization URL creation to support PKCE (Proof Key for Code Exchange) using OAuth2Client.createAuthorizationURLWithPKCE(). It generates a state and code_verifier (using arctic.generateCodeVerifier()), and uses the S256 method for secure code challenge generation. This is required for enhanced security, especially in public clients. Dependencies include Arctic's OAuth2Client, PKCE methods, and constant enums for code challenge methods.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/generic-oauth2-client.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst url = client.createAuthorizationURLWithPKCE(\n\tauthorizationEndpoint,\n\tstate,\n\tarctic.CodeChallengeMethod.S256,\n\tcodeVerifier,\n\tscopes\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Google Authorization URL for OpenID Connect in TypeScript\nDESCRIPTION: Generates a Google OAuth 2.0 authorization URL specifically requesting the 'openid' scope to enable OpenID Connect flow. This is used to obtain an ID token containing user identity information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = google.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating Reddit Authorization Code with Arctic in TypeScript\nDESCRIPTION: Demonstrates how to validate the authorization code received from Reddit after user consent using the `validateAuthorizationCode` method. It shows how to extract the access token and its expiration time upon success and includes basic error handling for common Arctic OAuth errors like `OAuth2RequestError` and `ArcticFetchError`. Requires the `code` parameter from the redirect query string.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/reddit.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await reddit.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arctic Twitter Provider (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the Arctic Twitter OAuth 2.0 provider. It requires the client ID and redirect URI. The client secret is optional and should be passed for confidential clients.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst twitter = new arctic.Twitter(clientId, clientSecret, redirectURI);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst twitter = new arctic.Twitter(clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code - TypeScript\nDESCRIPTION: This snippet validates the authorization code received after user authorization. It calls `validateAuthorizationCode()` to exchange the code and code verifier for access and refresh tokens. It catches potential errors such as invalid codes or failed requests using exception handling. On success, it retrieves the access token, expiration time, and refresh token. On failure, it catches `OAuth2RequestError`, `ArcticFetchError`, `UnexpectedResponseError`, or `UnexpectedErrorResponseBodyError`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/zoom.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await zoom.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code in TypeScript\nDESCRIPTION: This snippet shows how to validate an authorization code received from Bitbucket. It attempts to obtain tokens using `validateAuthorizationCode()`.  It handles potential errors, including `OAuth2RequestError`, `ArcticFetchError`, `UnexpectedResponseError`, and `UnexpectedErrorResponseBodyError`.  The returned tokens object contains the access and refresh tokens. The code provides error handling for various failure scenarios.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bitbucket.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await bitBucket.validateAuthorizationCode(code);\n\t// Accessing other fields will throw an error\n\tconst accessToken = tokens.accessToken();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Strava Authorization Code and Handling Tokens in TypeScript\nDESCRIPTION: This snippet shows how to validate an authorization code received from Strava, retrieving access and refresh tokens, along with expiration data. It includes comprehensive error handling for different failure scenarios like invalid codes or network issues, utilizing Arctic's custom error types.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/strava.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await strava.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling Errors in Arctic with TypeScript\nDESCRIPTION: This example details validating an incoming authorization code with the Shikimori provider using Arctic, and outlines error handling for expected Arctic exception types such as OAuth2RequestError and ArcticFetchError. The code expects the previously initialized shikimori provider and a valid authorization code. Inputs: authorization code; Outputs: OAuth2Tokens instance providing access and refresh tokens, or thrown specialized error objects. Proper error checking enables nuanced handling of different failure cases.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/shikimori.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await shikimori.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Atlassian Access Token Using Arctic - TypeScript\nDESCRIPTION: This example demonstrates how to obtain a new Atlassian access token with a refresh token using Arctic's 'refreshAccessToken' method. It replicates the error handling structure and API behavior of the code validation flow. Required dependencies include the 'arctic' package and an initialized provider. Input is a valid refresh token; outputs are new access and refresh token strings and the access token's expiration. Errors are managed as with code validation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/atlassian.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await atlassian.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Okta Access Tokens with Arctic\nDESCRIPTION: Demonstrates how to refresh an access token using a refresh token. Okta requires passing scopes when refreshing tokens. Handles the same error types as token validation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/okta.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\t// Pass an empty `scopes` array to keep using the same scopes.\n\tconst tokens = await okta.refreshAccessToken(refreshToken, scopes);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code for Kick OAuth\nDESCRIPTION: Validates an authorization code and retrieves access token, expiration time, and refresh token with error handling for OAuth 2.0 flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kick.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await kick.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Facebook Authorization Code and Handling Errors with Arctic in TypeScript\nDESCRIPTION: This snippet handles the OAuth 2.0 login flow from Facebook by validating the returned authorization code using Arctic. It demonstrates robust error handling for Facebook's non-standard error responses, utilizing Arctic-specific error types such as ArcticFetchError and UnexpectedErrorResponseBodyError. The method returns token data on success and passes access token information to the client.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/facebook.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await facebook.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.UnexpectedErrorResponseBodyError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst responseBody = e.data;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth Tokens in GitLab using Arctic (TypeScript)\nDESCRIPTION: This snippet demonstrates calling the 'revokeToken' method on the Arctic GitLab provider to invalidate tokens such as access or refresh tokens. The pattern follows async/await with try/catch error handling, raising the same errors as token validation and refresh methods. The primary input is the token string to be revoked. No output is expected on success, but proper error typing is handled if revocation fails.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitlab.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait gitlab.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Coinbase OAuth 2.0 Authorization Code in TypeScript\nDESCRIPTION: Exchanges an authorization code for access tokens and handles potential errors. Returns an OAuth2Tokens object containing the access token, expiration time, and refresh token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/coinbase.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await coinbase.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Facebook Authorization URL with Arctic in TypeScript\nDESCRIPTION: This snippet shows how to construct an OAuth 2.0 authorization URL for Facebook using Arctic. It generates a secure state parameter and specifies required scopes (such as email and public_profile). It depends on a previously initialized Arctic Facebook instance and is typically used to redirect users for authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/facebook.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"email\", \"public_profile\"];\nconst url = facebook.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Revoking KeyCloak Tokens in TypeScript\nDESCRIPTION: Revokes either an access token or a refresh token using `keycloak.revokeToken()`. This invalidates the specified token on the KeyCloak server. Includes error handling similar to `validateAuthorizationCode()`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait keycloak.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TikTok OAuth2 Authorization URL with Arctic - TypeScript\nDESCRIPTION: Generates a TikTok OAuth2 authorization URL using Arctic. Utilizes helper functions to generate secure random state and PKCE code verifier values. Specify required OAuth scopes in an array. The generated URL is used for the user authorization step. All steps require that the TikTok provider instance is initialized beforehand and that relevant values are securely handled and persisted during the flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiktok.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"user.info.basic\", \"video.list\"];\nconst url = tiktok.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Spotify Access Token - TypeScript\nDESCRIPTION: Refreshes an expired access token using a valid refresh token. Returns a new OAuth2Tokens object with updated tokens and expiration, or throws errors on failure.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/spotify.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await spotify.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token to Access User Claims using arctic in TypeScript\nDESCRIPTION: This snippet shows how to validate an authorization code and extract the ID token, which is then decoded with `decodeIdToken()` to access user claims such as name, email, and other profile information. This is essential for applications requiring user identity confirmation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await entraId.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Validating Gitea Authorization Code in TypeScript\nDESCRIPTION: Shows how to validate an authorization code to obtain access tokens, refresh tokens, and expiration times. Includes comprehensive error handling for various failure scenarios.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitea.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await gitea.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth2 Authorization Code and Handling Errors (TypeScript)\nDESCRIPTION: Processes the redirect callback from the OAuth provider, retrieving the code and state from the URL and stored cookies. Validates the received state against the stored state, and uses `validateAuthorizationCode()` with the code and stored code verifier to exchange the authorization code for tokens. Includes error handling for specific Arctic errors like `OAuth2RequestError` and `ArcticFetchError`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2-pkce.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst code = request.url.searchParams.get(\"code\");\nconst state = request.url.searchParams.get(\"state\");\n\nconst storedState = getCookie(\"state\");\nconst storedCodeVerifier = getCookie(\"code_verifier\");\n\nif (code === null || storedState === null || state !== storedState || storedCodeVerifier === null) {\n\t// 400\n\tthrow new Error(\"Invalid request\");\n}\n\ntry {\n\tconst tokens = await google.validateAuthorizationCode(code, storedCodeVerifier);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth2 Authorization Code with TypeScript\nDESCRIPTION: This function validates an authorization code by sending it to the specified token endpoint, optionally using PKCE if a code verifier is provided. It returns OAuth2Tokens containing access tokens and related data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Client/validateAuthorizationCode.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function validateAuthorizationCode(\n\ttokenEndpoint: string,\n\tcode: string,\n\tcodeVerifier: string | null\n): Promise<OAuth2Tokens>;\n```\n\n----------------------------------------\n\nTITLE: Extracting Tokens and Expiry Information from OAuth2Tokens Object (TypeScript)\nDESCRIPTION: Demonstrates how to extract various token values and their expiry information from the `OAuth2Tokens` object returned after successful authorization code validation. Methods like `accessToken()`, `refreshToken()`, `idToken()`, and expiry functions are shown. Note that calling these methods may throw an error if the specific token field is missing in the provider's response.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2-pkce.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresInSeconds = tokens.accessTokenExpiresInSeconds();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\nconst idToken = tokens.idToken();\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Accessing Tokens in Arctic v2 (TypeScript)\nDESCRIPTION: Shows how to use `validateAuthorizationCode` in Arctic v2, which now returns an `OAuth2Token` object instead of a plain object. It demonstrates accessing various token properties like access token, refresh token, ID token, and expiration date using specific methods on the returned object. These methods will throw an error if the corresponding field doesn't exist in the token response.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v2.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await github.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\nconst idToken = tokens.idToken();\n```\n\n----------------------------------------\n\nTITLE: Generating Mastodon Authorization URL with PKCE in TypeScript\nDESCRIPTION: This code generates the authorization URL for the Mastodon OAuth flow, including support for PKCE. It uses `arctic.generateState()` and `arctic.generateCodeVerifier()` to create necessary parameters and defines the requested scopes. The returned `url` is where the user should be redirected to grant permission.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mastodon.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"read\", \"write\"];\nconst url = mastodon.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating Okta Authorization Code in TypeScript\nDESCRIPTION: Shows how to validate an authorization code and handle various potential errors. Returns OAuth2Tokens with access token, expiration time, and refresh token when successful.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/okta.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await okta.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating LinkedIn OAuth Authorization URL with OpenID, Profile, and Email Scopes in TypeScript\nDESCRIPTION: Constructs an authorization URL requesting `openid`, `profile`, and `email` scopes to enable retrieval of user profile data and email address during OAuth authentication. This URL is used to request user consent for these permissions during LinkedIn login.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = linkedin.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Synology Authorization URL (TypeScript)\nDESCRIPTION: Shows how to generate the URL that the user's browser should be redirected to for initiating the OAuth flow. It uses `arctic.generateState()` for CSRF protection, `arctic.generateCodeVerifier()` for PKCE, and accepts an array of requested scopes (e.g., \"email\", \"groups\", \"openid\"). The generated URL includes these parameters along with the client ID and redirect URI.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/synology.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"email\", \"groups\", \"openid\"];\nconst url = synology.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validate Authorization Code (Arctic)\nDESCRIPTION: This snippet shows how to validate the authorization code received from Etsy using the Arctic library. It uses the `validateAuthorizationCode` method, which returns an `OAuth2Tokens` object containing the access token, expiration, and refresh token. Error handling is included for various potential errors.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/etsy.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens: OAuth2Tokens = await etsy.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing OAuth 2.0 Tokens with Arctic.js\nDESCRIPTION: This snippet demonstrates how to access different properties of the OAuth2Tokens object returned by `validateAuthorizationCode()`, such as the access token, refresh token, and ID token. It provides examples of accessing the token values and their expiration details.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresInSeconds = tokens.accessTokenExpiresInSeconds();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\nconst idToken = tokens.idToken();\n```\n\n----------------------------------------\n\nTITLE: Initializing Google OAuth2 Provider using Arctic (TypeScript)\nDESCRIPTION: Initializes a Google OAuth2 provider instance from the Arctic library. This requires providing the application's client ID, client secret, and the configured redirect URI. The resulting `google` object is used for subsequent steps in the OAuth 2.0 flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2-pkce.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst google = new arctic.Google(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Figma Authorization Code to Obtain OAuth Tokens in TypeScript\nDESCRIPTION: Validates the authorization code received from Figma to obtain access and refresh tokens. Handles specific errors like request failure and invalid code, throwing appropriate exceptions. Returns OAuth tokens on success.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/figma.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await figma.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Okta Authorization URL with Arctic\nDESCRIPTION: Demonstrates how to generate a state, code verifier, and create an authorization URL with specific scopes for Okta OAuth 2.0 authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/okta.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = okta.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with Arctic Linear in TypeScript\nDESCRIPTION: Generates an OAuth 2.0 authorization URL for Linear using the Arctic library. It requires a state parameter to prevent CSRF attacks and a scopes array that must include the mandatory \"read\" scope. The URL is used to redirect users for granting permissions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linear.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"read\", \"write\"];\nconst url = linear.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling OAuth Tokens in TypeScript\nDESCRIPTION: This snippet shows how to validate an authorization code received from Entra ID using `validateAuthorizationCode()`. It handles success by extracting access and refresh tokens, and includes error handling for common failures such as invalid code or fetch errors. The tokens include access token, expiration, and refresh token, ready for API calls or token refresh.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await entraId.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Spotify Authorization Code (Public) - TypeScript\nDESCRIPTION: Exchanges the authorization code for tokens using a public client. Requires the authorization code and the original PKCE code verifier. Returns an OAuth2Tokens object or throws errors on failure.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/spotify.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await spotify.validateAuthorizationCode(code, codeVerifier);\n```\n\n----------------------------------------\n\nTITLE: Initializing GitLab OAuth Provider with Arctic in TypeScript\nDESCRIPTION: This snippet demonstrates how to import the Arctic library and instantiate a new GitLab OAuth 2.0 provider using the full GitLab instance URL, client ID, optional client secret, and redirect URI. The 'baseURL' can point to either the default GitLab cloud or a self-hosted instance. Parameters include 'baseURL' (string), 'clientId' (string), 'clientSecret' (string or null for public clients), and 'redirectURI' (string). Arctic must be installed as a dependency. The resulting GitLab object is used for all subsequent authentication operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitlab.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst baseURL = \"https://gitlab.com\";\nconst baseURL = \"https://my-app.com/gitlab\";\nconst gitlab = new arctic.GitLab(baseURL, clientId, clientSecret, redirectURI);\nconst gitlab = new arctic.GitLab(baseURL, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Line OAuth Access Token with Arctic in TypeScript\nDESCRIPTION: This sample demonstrates refreshing an access token with a refresh token using Arctic's Line OAuth 2.0 support in TypeScript. Dependencies include the arctic library and a valid refreshToken string. The method returns new access token credentials or throws errors similar to validateAuthorizationCode() if issues arise. Handles both successful and error cases.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await line.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Userinfo Endpoint in TypeScript\nDESCRIPTION: This code fetches user information from the Twitch `userinfo` endpoint using the access token. It involves making an HTTP request to `https://id.twitch.tv/oauth2/userinfo`, including the `Authorization` header with the access token. The response is then parsed as JSON to retrieve user data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://id.twitch.tv/oauth2/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Google Authorization URL for Profile/Email Scopes in TypeScript\nDESCRIPTION: Generates a Google OAuth 2.0 authorization URL requesting 'openid', 'profile', and 'email' scopes. This allows retrieving the user's basic profile information and email address via OpenID Connect ID token claims or the userinfo endpoint.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = google.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Google Authorization URL with PKCE in TypeScript\nDESCRIPTION: Generates a Google OAuth 2.0 authorization URL using the initialized provider. It incorporates PKCE (Proof Key for Code Exchange) by including a state and code verifier, along with requested scopes like 'openid' and 'profile'.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = google.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating Mastodon Authorization Code and Handling Errors in TypeScript\nDESCRIPTION: This snippet demonstrates how to validate the authorization code received from the OAuth redirect using `mastodon.validateAuthorizationCode()`. It exchanges the code and verifier for tokens (specifically an access token for Mastodon). The code also includes error handling for various potential issues like invalid codes, network errors, or response parsing failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mastodon.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await mastodon.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VK Authorization URL with optional scopes in TypeScript\nDESCRIPTION: This snippet demonstrates generating an authorization URL by creating a request state, specifying OAuth scopes such as email, messages, and offline. The URL can be used to redirect users for authorization. The 'offline' scope allows obtaining tokens with no expiration.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/vk.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"email\", \"messages\", \"offline\"];\nconst url = vk.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Battle.net Authorization URL in TypeScript\nDESCRIPTION: Shows how to create the Battle.net authorization URL using the initialized provider. It involves generating a state parameter using `arctic.generateState()` and calling the `createAuthorizationURL` method with the state and desired scopes (e.g., 'openid', 'wow.profile').\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/battlenet.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"openid\", \"wow.profile\"];\nconst url = battlenet.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code - Autodesk Platform Services - TypeScript\nDESCRIPTION: Explains how to validate the authorization code received in the redirect callback using `validateAuthorizationCode`. The function returns an `OAuth2Tokens` object upon success, containing access and refresh tokens. It includes error handling for common Arctic and network-related issues like `OAuth2RequestError` and `ArcticFetchError`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await autodesk.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating MercadoLibre OAuth Authorization Code with Arctic SDK in TypeScript\nDESCRIPTION: This snippet illustrates how to validate the authorization code received from MercadoLibre after user authorization. It attempts to obtain access and refresh tokens, handling errors related to request failures or invalid authorization codes. Successful execution yields OAuth2Tokens with access token details.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadolibre.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await mercadolibre.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub User Profile (TypeScript)\nDESCRIPTION: Makes an authenticated request to the GitHub API `/user` endpoint to retrieve the profile details of the user associated with the provided `accessToken`. Requires a successful OAuth flow to obtain the access token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.github.com/user\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Reddit OAuth Provider in TypeScript\nDESCRIPTION: Imports the Arctic library and instantiates the `Reddit` OAuth 2.0 provider class. Requires the client ID, client secret, and redirect URI obtained from Reddit application registration.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/reddit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst patreon = new arctic.Reddit(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling Errors in Bungie OAuth\nDESCRIPTION: Validates the authorization code received from Bungie after user grants permissions. The process extracts access tokens upon success or catches specific errors such as request failures or invalid responses. Utilizes try-catch blocks for error handling, depending on 'arctic' error classes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bungie.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await bungie.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating TikTok OAuth2 Authorization Code with Arctic - TypeScript\nDESCRIPTION: Exchanges an OAuth2 authorization code for access and refresh tokens using Arctic's validateAuthorizationCode method. Handles errors that may occur during the network request, such as invalid codes or network failures, and identifies error types using Class instanceof checks. Expects the code and PKCE codeVerifier as input; returns an OAuth2Tokens object on success, or throws an error otherwise. Arctic must be properly imported and the TikTok provider initialized before calling this method.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiktok.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await tiktok.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Dribbble Authorization Code and Handling Errors (TypeScript)\nDESCRIPTION: This snippet uses the Arctic Dribble provider to asynchronously validate an OAuth authorization code, extracting the access token from the returned token set. It handles exceptions specific to OAuth2 errors (invalid credentials, bad code, or bad redirect), request failures, and unexpected responses using 'instanceof' checks. Dependencies include the 'arctic' library and an initialized Dribble provider. Inputs are the 'code' received from Dribbble. The output is an OAuth2 token object, with errors potentially thrown if validation fails. Ensure try/catch blocks are present for robust error handling.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dribbble.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await dribble.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating 42 School Authorization URL in TypeScript\nDESCRIPTION: Generates a secure state parameter using `arctic.generateState()` and constructs the 42 School authorization URL using the `createAuthorizationURL` method. Specifies the required OAuth scopes, such as 'public' and 'projects'.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/42.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"public\", \"projects\"];\nconst url = fortyTwo.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2Client with Arctic in TypeScript\nDESCRIPTION: This snippet shows how to initialize an OAuth2Client instance from the Arctic library using a client ID, client password (secret), and a redirect URI. The clientSecret and redirectURI parameters can be null based on application needs. The Arctic library must be installed (`npm install arctic`). Required parameters enable subsequent OAuth 2.0 operations such as authorization and token management.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/generic-oauth2-client.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst client = new arctic.OAuth2Client(clientId, clientPassword, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing GitLab OAuth Access Tokens with Arctic in TypeScript\nDESCRIPTION: This code example demonstrates how to obtain a new access token using a valid refresh token via the 'refreshAccessToken' method of the Arctic GitLab provider. It follows the same input/output and error handling patterns as authorization code validation. Parameters include the refresh token string and the instantiated provider object. Returns an updated 'OAuth2Tokens' instance or throws appropriately typed errors on failure.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitlab.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await gitlab.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Tokens - TypeScript\nDESCRIPTION: This code revokes a given token using the `revokeToken()` method. It is a crucial step for security to invalidate tokens when needed. It also includes error handling to address any potential issues during the revocation process, similar to the other API calls.  The `revokeToken()` method can throw the same errors as `validateAuthorizationCode()`\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/zoom.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait zoom.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code - TypeScript\nDESCRIPTION: This snippet demonstrates the validation of an authorization code obtained from Apple. It uses the `validateAuthorizationCode()` method of the `apple` object, which either returns `OAuth2Tokens` or throws an error. The  returned `idToken` can be decoded.  Error handling is included for different `arctic` error types.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/apple.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await apple.validateAuthorizationCode(code);\n\tconst idToken = tokens.idToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AniList Authorization URL with Arctic in TypeScript\nDESCRIPTION: Demonstrates generating a secure state parameter using `arctic.generateState()` and creating the AniList authorization URL with the `createAuthorizationURL()` method. The state parameter helps prevent CSRF attacks and should be stored (e.g., in a cookie) for later verification.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/anilist.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst url = aniList.createAuthorizationURL(state);\n```\n\n----------------------------------------\n\nTITLE: Requesting Intuit Profile and Email via OpenID Scopes (TypeScript)\nDESCRIPTION: Shows how to request user profile and email information from Intuit during the OpenID Connect flow by including the `openid`, `profile`, and `email` scopes when generating the authorization URL with Arctic in TypeScript.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = intuit.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth Authorization Code with Arctic and Handling Errors in TypeScript\nDESCRIPTION: This snippet illustrates validating an OAuth authorization code using Arctic's Line provider in TypeScript, including structured error handling. It depends on the arctic library and requires a previously initialized Line object, along with a code and codeVerifier as inputs. Returns OAuth2Tokens with access/refresh tokens or throws documented exceptions for invalid codes or network errors. Proper error classes are checked to distinguish among error scenarios.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await line.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling Errors in Arctic (TypeScript)\nDESCRIPTION: Performs the OAuth 2.0 code exchange to retrieve access and refresh tokens using the provided authorization code and code verifier. Uses Arctic's validateAuthorizationCode() method, returning an OAuth2Tokens instance or throwing errors like OAuth2RequestError, ArcticFetchError, UnexpectedResponseError, or UnexpectedErrorResponseBodyError. Dependencies: async context, initialized Authentik client, code (string), codeVerifier (string). Outputs tokens or propagates error information; includes error handling for common issues.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/authentik.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await authentik.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Intuit Authorization URL with Arctic (TypeScript)\nDESCRIPTION: Shows how to generate an authorization URL for Intuit using the Arctic library in TypeScript. It involves generating a `state` parameter using `arctic.generateState()` and specifying the required `scopes`. The `createAuthorizationURL` method of the initialized Intuit provider is then called.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"email\", \"activities.read\"];\nconst url = intuit.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Revoking Salesforce OAuth Tokens with Arctic in TypeScript\nDESCRIPTION: Presents the process for revoking access or refresh tokens issued by Salesforce OAuth using the Arctic provider. The method 'revokeToken' is invoked with the target token. Error handling covers possible OAuth2RequestError and ArcticFetchError exceptions. Proper revocation ensures users and applications can explicitly terminate access when needed and is vital for enforcing security policies.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait salesforce.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token from Dropbox OAuth Response\nDESCRIPTION: Extract and decode the ID token from the OAuth response to access user identity claims.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await dropbox.validateAuthorizationCode(code);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens Using Refresh Token\nDESCRIPTION: Obtains a new access token with a valid refresh token via 'refreshAccessToken()'. Mimics validation process and handles potential errors. Useful for maintaining session continuity without requiring user re-authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bungie.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await bungie.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Atlassian OAuth Authorization Code and Handling Errors - TypeScript\nDESCRIPTION: This snippet illustrates how to exchange an authorization code for access and refresh tokens using Arctic's 'validateAuthorizationCode' method for Atlassian, handling all potential error cases. Dependencies are the 'arctic' package and an initialized provider. The function expects an OAuth 2.0 code as input and yields a tokens object on success or throws one of several specialized errors. Captured tokens include access, expiration, and refresh token string values.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/atlassian.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await atlassian.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User Profile from Bungie API\nDESCRIPTION: Fetches current user's Bungie profile using the 'GetCurrentBungieNetUser' endpoint, passing the access token in the Authorization header and including an API key. The response contains user profile details, assuming successful authenticated request.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bungie.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://www.bungie.net/Platform/User/GetCurrentBungieNetUser\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\"X-API-Key\": apiKey\n\t}\n});\nconst emails = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Retrieving Tokens in Amazon Cognito with TypeScript\nDESCRIPTION: Validates the OAuth 2.0 authorization code along with the PKCE code verifier and retrieves tokens (access token, refresh token) from Amazon Cognito using Arctic. It handles several possible errors such as invalid codes, fetch failures, and unexpected responses. Returned tokens provide access and expiration information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/amazon-cognito.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await cognito.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL for Shikimori OAuth 2.0 in TypeScript\nDESCRIPTION: This snippet shows how to generate a state token and construct the Shikimori OAuth 2.0 authorization URL with the Arctic library. It requires the initialized shikimori provider and relies on Arctic's generateState() for CSRF protection. Inputs: none (aside from shikimori instance); Output: a URL to redirect users for initiating the OAuth 2.0 flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/shikimori.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst url = shikimori.createAuthorizationURL(state);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Yahoo Access Tokens with Arctic (TypeScript)\nDESCRIPTION: Uses the refresh token obtained previously to get a new access token via `yahoo.refreshAccessToken()`. Handles the same potential errors as `validateAuthorizationCode()` (e.g., `OAuth2RequestError`, `ArcticFetchError`) and returns new token details, including the new access token and its expiration time, on success.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await yahoo.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Create Authorization URL (Arctic)\nDESCRIPTION: This snippet demonstrates how to create an authorization URL for Etsy using the Arctic library. It generates a state and code verifier, defines the required scopes, and then uses the `createAuthorizationURL` method to generate the URL. The method is asynchronous and returns a URL object.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/etsy.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"listings_r\", \"listings_w\"];\n\nconst url: URL = await etsy.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth2 Authorization Code with PKCE Using Arctic in TypeScript\nDESCRIPTION: This snippet shows how to validate an OAuth2 authorization code using a PKCE code verifier. The validateAuthorizationCode() method is called with the token endpoint, code, and codeVerifier as arguments. Outcome is an OAuth2Tokens instance containing access and refresh tokens, or an exception in error cases. Make sure the code verifier matches the one used during authorization URL creation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/generic-oauth2-client.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await client.validateAuthorizationCode(tokenEndpoint, code, codeVerifier);\n```\n\n----------------------------------------\n\nTITLE: Creating Twitch Authorization URL in TypeScript\nDESCRIPTION: This code generates the authorization URL needed to initiate the OAuth 2.0 flow.  It uses `arctic.generateState()` to create a state parameter for security, and takes an array of scopes as input to define the permissions requested. The resulting URL is used to redirect the user for authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"activity:write\", \"read\"];\nconst url = twitch.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with PKCE for Kick OAuth\nDESCRIPTION: Generates a state parameter, code verifier, and authorization URL with specified scopes for OAuth 2.0 authentication with PKCE.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kick.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"user:read\"];\nconst url = kick.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating KeyCloak Authorization Code in TypeScript\nDESCRIPTION: Validates the authorization code received from KeyCloak using `keycloak.validateAuthorizationCode()`. It exchanges the code and the original `codeVerifier` for OAuth tokens (`OAuth2Tokens`). Includes error handling for common issues like invalid codes/credentials (`OAuth2RequestError`) or network problems (`ArcticFetchError`).\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await keycloak.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Microsoft Entra ID OAuth Client with TypeScript\nDESCRIPTION: This snippet demonstrates the instantiation of the `MicrosoftEntraId` class from the 'arctic' library to set up OAuth 2.0 client parameters such as tenant ID, client ID, client secret, and redirect URI. The initialized object is used for subsequent authorization and token exchange operations. It highlights passing the `clientSecret` for confidential clients, with an alternative for non-confidential clients by passing `null`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst entraId = new arctic.MicrosoftEntraId(tenant, clientId, clientSecret, redirectURI);\nconst entraId = new arctic.MicrosoftEntraId(tenant, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing KeyCloak Access Tokens in TypeScript\nDESCRIPTION: Uses `keycloak.refreshAccessToken()` with a previously obtained refresh token to acquire a new set of access and potentially refresh tokens. Includes error handling similar to `validateAuthorizationCode()`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await keycloak.refreshAccessToken(refreshToken);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding OpenID Connect ID Token Claims using Arctic (TypeScript)\nDESCRIPTION: Decodes the payload of an OpenID Connect ID token string using the `arctic.decodeIdToken` helper function. This function parses the JWT structure of the ID token and returns the claims object contained within its payload.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2-pkce.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub App Refresh Token Expiration (TypeScript)\nDESCRIPTION: Shows how to safely check for and access the `refresh_token_expires_in` property from the underlying data returned by the GitHub OAuth endpoint when using GitHub Apps, as this property is not always present or standardized.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await github.validateAuthorizationCode(code);\nif (\n\t\"refresh_token_expires_in\" in tokens.data &&\n\ttypeof tokens.data.refresh_token_expires_in === \"number\"\n) {\n\tconst refreshTokenExpiresIn = tokens.data.refresh_token_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for User Consent using arctic library\nDESCRIPTION: This code snippet generates an OAuth 2.0 authorization URL using `createAuthorizationURL()`, including the generation of `state` and `codeVerifier` for security and CSRF protection. The `scopes` array initiates the requested permissions such as 'openid' and 'profile'. The URL can be used to redirect users to Entra ID for consent and authorization approval.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = entraId.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating and validating authorization codes (public clients)\nDESCRIPTION: This snippet shows the creation and validation of authorization codes for public clients within the Discord provider.  It uses the `codeVerifier` parameter. Requires the Arctic library and a Discord provider configured.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v3.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Public clients\nconst url = discord.createAuthorizationURL(state, codeVerifier, scopes);\nconst tokens = await discord.validateAuthorizationCode(code, codeVerifier);\n```\n\n----------------------------------------\n\nTITLE: Creating Coinbase OAuth 2.0 Authorization URL in TypeScript\nDESCRIPTION: Generates an authorization URL for Coinbase OAuth 2.0 with specified state and scopes. The state parameter helps prevent CSRF attacks, and scopes define the access permissions requested.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/coinbase.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"wallet:user:email\", \"wallet:accounts:read\"];\nconst url = coinbase.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Requesting GitHub User Email Scope (TypeScript)\nDESCRIPTION: Demonstrates how to include the `user:email` scope when generating the authorization URL using `createAuthorizationURL`. This is necessary to request permission from the user to access their email addresses via the API.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"user:email\"];\nconst url = github.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Authorization URL for Kakao in TypeScript\nDESCRIPTION: This code generates a state parameter for OAuth security, defines required scopes (`account_email` and `profile`), and creates an authorization URL using the `createAuthorizationURL()` method. It enables redirecting users to Kakao's OAuth consent page for authorization and requires the Arctic library. The URL returned is used to initiate the OAuth flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kakao.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"account_email\", \"profile\"];\nconst url = kakao.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Decoding OpenID Connect ID Token and Extracting Claims in TypeScript\nDESCRIPTION: This code shows how to validate an authorization code with Polar and obtain the ID token. It then decodes the ID token payload using Arctic's 'decodeIdToken' for claims extraction. Requires the 'arctic' package and a valid Polar provider instance. Input is the authorization code and output is the parsed claims object.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await polar.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Start.gg OAuth in TypeScript\nDESCRIPTION: Generates a secure state token and creates an authorization URL with specified scopes for user authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/startgg.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"user.identity\", \"user.email\"];\nconst url = startgg.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Autodesk Provider - Arctic - TypeScript\nDESCRIPTION: Demonstrates how to create a new instance of the Autodesk provider from the Arctic library. It shows two variations: one for confidential clients requiring a client secret and one for public clients where the secret is null. The `clientId` and `redirectURI` are required parameters for both.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst autodesk = new arctic.Autodesk(clientId, clientSecret, redirectURI);\nconst autodesk = new arctic.Autodesk(clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Figma Access Tokens Using Refresh Token in TypeScript\nDESCRIPTION: Uses the refresh token to obtain a new access token. Handles similar errors as validation and returns updated OAuth tokens, including the new access token and expiration.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/figma.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await figma.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Arctic Yahoo Provider (TypeScript)\nDESCRIPTION: Initializes the Yahoo OAuth 2.0 provider from the Arctic library. Requires the client ID, client secret, and redirect URI obtained from Yahoo developer settings.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\nconst yahoo = new arctic.Yahoo(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Decoding Google ID Token using Arctic in TypeScript\nDESCRIPTION: After validating the authorization code from an OpenID Connect flow, this snippet shows how to extract the ID token from the returned tokens and decode its payload using `arctic.decodeIdToken()` to access user claims.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await google.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens with Dropbox OAuth\nDESCRIPTION: Use a refresh token to obtain new access tokens when the current ones expire, with appropriate error handling.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await dropbox.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth 2.0 Access Tokens with Arctic Tiltify Client in TypeScript\nDESCRIPTION: Uses a refresh token to request new access tokens from Tiltify's OAuth 2.0 endpoint via Arctic. Returns new OAuth tokens including access token, expiration, and refresh token. The snippet includes robust error handling similar to the authorization code validation to manage invalid credentials and network fetch failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiltify.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await tiltify.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching OIDC User Info - Autodesk Platform Services - TypeScript\nDESCRIPTION: Demonstrates how to fetch user profile information using the Autodesk Platform Services `userinfo` endpoint after obtaining an access token via an OIDC flow. It shows a standard `fetch` request including the access token in the `Authorization` header.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.userprofile.autodesk.com/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile in TypeScript\nDESCRIPTION: This snippet retrieves user profile information from the Bitbucket API.  It requires a valid access token in the `Authorization` header. It uses the `/user` endpoint of the Bitbucket API and fetches the user data.  The code fetches user profile data via a `fetch` call. The user profile is returned as a JSON object.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bitbucket.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.bitbucket.org/2.0/user\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Revoking Box OAuth Tokens with Arctic in TypeScript\nDESCRIPTION: Revokes access or refresh tokens via Arctic's Box provider. Revoking a refresh token also invalidates any associated access tokens. The snippet shows basic error management and requires a valid box instance and the token to be revoked. Throws Arctic error classes on failure. Output is void on success.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/box.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait box.revokeToken(token);\n} catch (e) {\n\t// Handle errors\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Profile and Email Scopes for Yahoo Auth URL (TypeScript)\nDESCRIPTION: Creates a Yahoo authorization URL requesting 'openid', 'profile', and 'email' scopes. Including 'profile' and 'email' allows retrieval of the user's profile information and email address, typically via the ID token or the `userinfo` endpoint when using OpenID Connect.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = yahoo.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coinbase User Profile in TypeScript\nDESCRIPTION: Makes an API request to the Coinbase /user endpoint to fetch the user's profile information. Requires a valid access token in the Authorization header.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/coinbase.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.coinbase.com/v2/user\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Figma User Profile with API Request in TypeScript\nDESCRIPTION: Fetches the user profile from Figma's '/me' API endpoint using the access token for authorization. Returns the user profile JSON object.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/figma.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.figma.com/v1/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Requesting Profile Scope in Roblox OAuth Authorization URL (TypeScript)\nDESCRIPTION: Illustrates including both 'openid' and 'profile' scopes when constructing the Roblox OAuth authorization URL to enable retrieval of the user profile. Dependencies: Arctic, initialized roblox provider. Parameters: state (string), codeVerifier (string), scopes ([\"openid\", \"profile\"]). Output: updated authorization URL linking to profile access.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\"];\nconst url = roblox.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Retrieving TikTok OAuth2 Refresh Token Expiration - TypeScript\nDESCRIPTION: Extracts the refresh token expiration time (refresh_expires_in) from the token response object after calling validateAuthorizationCode. Expects tokens.data to include the refresh_expires_in property as a number. This step is optional but useful for token management and implementing refresh logic. The token object must have been returned by validateAuthorizationCode.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiktok.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await tiktok.validateAuthorizationCode(code);\nif (\"refresh_expires_in\" in tokens.data && typeof tokens.data.refresh_expires_in === \"number\") {\n\tconst refreshTokenExpiresIn = tokens.data.refresh_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Reddit Refresh Token via Authorization URL in TypeScript\nDESCRIPTION: Shows how to modify the Reddit authorization URL generated by Arctic to request a refresh token. This is done by setting the 'duration' search parameter to 'permanent'. This snippet should be used in conjunction with the authorization URL creation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/reddit.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = reddit.createAuthorizationURL(state, scopes);\nurl.searchParams.set(\"duration\", \"permanent\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Kakao OAuth Client with Arctic Library in TypeScript\nDESCRIPTION: This snippet initializes the Kakao OAuth client by importing the Arctic library and creating a new instance with `clientId`, `clientSecret`, and `redirectURI`. It sets up the client for subsequent OAuth operations and depends on the Arctic library installed in the project. It prepares the client for generating authorization URLs and token validation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kakao.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst kakao = new arctic.Kakao(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching Tiltify User Profile via API with Bearer Authentication in JavaScript\nDESCRIPTION: Retrieves the currently authenticated user's profile from Tiltify's public API using the access token for Bearer authorization and the client ID in headers. The snippet sends an HTTP GET request to the `/api/public/current-user` endpoint and processes the JSON response to obtain user data. It requires a valid access token with appropriate scopes for successful authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiltify.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst response = await fetch(\"https://v5api.tiltify.com/api/public/current-user\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\"Client-Id\": clientId\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Validating Twitter Authorization Code (TypeScript)\nDESCRIPTION: Exchanges the authorization code and code verifier received in the redirect for an access token. This method returns an `OAuth2Tokens` object upon success or throws a specific error (e.g., `OAuth2RequestError`, `ArcticFetchError`) on failure. Twitter provides an access token and its expiration.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await twitter.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await twitter.validateAuthorizationCode(code, codeVerifier);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Salesforce OAuth Access Token with Arctic in TypeScript\nDESCRIPTION: Demonstrates refreshing an expired Salesforce access token using a stored refresh token with the Arctic library. Accepts a refresh token and produces a new access token by invoking 'refreshAccessToken' on the provider. Handles exceptions such as OAuth2RequestError and ArcticFetchError. The response is an updated OAuth2Tokens object, but Salesforce may return only the access token. This approach is essential for seamless token renewal in OAuth-secured applications.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await salesforce.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing MercadoLibre Access Token with Arctic SDK in TypeScript\nDESCRIPTION: This code demonstrates how to refresh an access token for MercadoLibre using a valid refresh token. It includes adding `offline_access` scope during initial authorization to receive a refresh token, calling `refreshAccessToken()` to get a new access token, and handling potential errors similar to validation. The refresh process returns new OAuth2Tokens with updated token values.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadolibre.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await mercadolibre.validateAuthorizationCode(code, codeVerifier);\nconst refreshToken = tokens.refreshToken();\n\ntry {\n\tconst tokens = await mercadolibre.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the accessTokenExpiresInSeconds Function Signature (TypeScript)\nDESCRIPTION: This TypeScript function signature defines the `accessTokenExpiresInSeconds` method. It takes no arguments and is expected to return a number representing the token's expiration time in seconds. The surrounding documentation indicates it throws an error if the 'expires_in' field is absent or not a number in the underlying token data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/accessTokenExpiresInSeconds.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction accessTokenExpiresInSeconds(): number;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens in TypeScript\nDESCRIPTION: This snippet illustrates how to refresh access tokens using a refresh token. It uses `refreshAccessToken()` to obtain a new access token. The logic is similar to `validateAuthorizationCode()` and also includes error handling for `OAuth2RequestError` and `ArcticFetchError`. The refresh token is used to request a new access token from the authorization server.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bitbucket.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await bitBucket.refreshAccessToken(refreshToken);\n\t// Accessing other fields will throw an error\n\tconst accessToken = tokens.accessToken();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token from Line OpenID Connect Flow in TypeScript\nDESCRIPTION: This snippet describes how to decode an ID token returned by Line's OpenID Connect authentication process using Arctic's decodeIdToken utility. Requirements include 'arctic' library, a valid code, and codeVerifier. Inputs are token objects obtained after validating the authorization code; output is decoded claims from the ID token, giving information about the authenticated user.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await line.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile from DonationAlerts API (TypeScript)\nDESCRIPTION: This snippet demonstrates how to fetch the user profile from the DonationAlerts API using the access token. It sends a request to the `/api/v1/user/oauth` endpoint with the `Authorization` header set to `Bearer ${accessToken}`. The response is then parsed as JSON to extract the user data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/donation-alerts.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://www.donationalerts.com/api/v1/user/oauth\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth2 Access Tokens for Roblox in TypeScript\nDESCRIPTION: Covers the use of refresh tokens to obtain new access tokens in the Roblox OAuth flow using Arctic, along with structured error handling. Requires Arctic, a valid roblox instance, and a refresh token. Returns: OAuth2Tokens object with updated access token and expiration. Throws OAuth2RequestError, ArcticFetchError, and may throw parse errors.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await roblox.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Create Authorization URL for Auth0 (Public Client - TypeScript)\nDESCRIPTION: This snippet demonstrates how to create an authorization URL for a public client using PKCE. It requires generating a state, a code verifier, and defining scopes. The `arctic.generateCodeVerifier()` function generates a PKCE code verifier used to protect the authorization code exchange.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = auth0.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile from Discord API in TypeScript\nDESCRIPTION: Fetches the current user's profile from Discord using the `identify` scope and the `/users/@me` endpoint, requiring the access token for authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/discord.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"identify\"];\nconst url = discord.createAuthorizationURL(state, scopes);\n\nconst response = await fetch(\"https://discord.com/api/users/@me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token - Autodesk Platform Services - TypeScript\nDESCRIPTION: Details how to obtain a new access token using an existing refresh token via the `refreshAccessToken` method. This method returns an `OAuth2Tokens` object with updated tokens and expiration times. Error handling is similar to `validateAuthorizationCode`, and passing an empty scope array reuses the original scopes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\t// Pass an empty `scopes` array to keep using the same scopes.\n\tconst tokens = await autodesk.refreshAccessToken(refreshToken, scopes);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL for Profile and Email Scopes with Arctic and Line in TypeScript\nDESCRIPTION: This snippet shows how to construct an authorization URL for Line with additional scopes such as 'profile' and 'email' using the Arctic library. Dependencies are a previously configured Line provider and values for state and codeVerifier. The input is an array of scopes and output is the URL for initiating an OAuth flow that requests user profile and email information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = line.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Zoom Client - TypeScript\nDESCRIPTION: This snippet initializes a Zoom client using the Arctic library. It requires the `clientId`, `clientSecret`, and `redirectURI` which are specific to the Zoom application and should be obtained from the Zoom developer portal. This client will be used for all subsequent operations related to Zoom OAuth.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/zoom.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst zoom = new arctic.Zoom(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Lichess OAuth in TypeScript\nDESCRIPTION: This snippet demonstrates generating a PKCE compliant OAuth 2.0 authorization URL using the Arctic Lichess client. It generates a state string and a code verifier as part of the security process. The scopes array specifies permissions requested from the user. The resulting URL can be used to redirect users to Lichess for login and consent. Dependencies include the Arctic library functions for generating state and code verifier.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/lichess.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"challenge:read\", \"challenge:write\"];\nconst url = lichess.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validate Authorization Code for Auth0 (Confidential Client - TypeScript)\nDESCRIPTION: This code snippet illustrates how to validate the authorization code for a confidential client. It handles potential errors like `OAuth2RequestError` and `ArcticFetchError`. The `validateAuthorizationCode()` method exchanges the authorization code for access and refresh tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await auth0.validateAuthorizationCode(code, null);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Using OpenID Connect with LinkedIn OAuth and Decoding ID Token in TypeScript\nDESCRIPTION: Illustrates creating an authorization URL with the `openid` scope to initiate OpenID Connect authentication flow. Shows how to validate the authorization code to retrieve the ID token, then decodes the token's payload using Arctic's decodeIdToken method. This enables retrieval of user identity claims compliant with OpenID Connect standards.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = linkedin.createAuthorizationURL(state, scopes);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await linkedin.validateAuthorizationCode(code);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens in TypeScript\nDESCRIPTION: This snippet demonstrates how to refresh an access token using a refresh token. It utilizes the `refreshAccessToken()` method of the `Osu` client. It handles the same potential error conditions as code validation and retrieves new access and refresh tokens when successful.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/osu.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await osu.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Kakao OAuth Access Token in TypeScript\nDESCRIPTION: This code retrieves a new access token using a refresh token via `refreshAccessToken()`, with error handling similar to validation. It outputs new tokens' access, refresh tokens, and expiration time, enabling session renewal without user reauthorization. Dependencies include the Arctic library and proper refresh token storage.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kakao.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await kakao.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Code & Decoding OIDC Token - Autodesk Platform Services - TypeScript\nDESCRIPTION: Shows the process of validating the authorization code during an OIDC flow and then extracting and decoding the ID token. It retrieves the ID token from the `OAuth2Tokens` object and uses `arctic.decodeIdToken` to parse its payload into claims.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await autodesk.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Getting User Profile - TypeScript\nDESCRIPTION: This code snippet retrieves the user profile from Zoom's API using the access token obtained previously. It uses the `fetch()` API to make a GET request to the `/users/me` endpoint with the authorization header. The response is parsed as JSON.  This requires that the \"user:read\" scope is granted in the application settings.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/zoom.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.zoom.us/v2/users/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth2 Access Token with Arctic in TypeScript\nDESCRIPTION: This snippet outlines how to refresh access tokens using OAuth2Client.refreshAccessToken(). It takes the token endpoint, refreshToken, and an array of scopes. If scopes is empty, the previous scopes are reused; otherwise, new scopes override the set. Handles OAuth2RequestError and ArcticFetchError for robust error management. Outputs a new OAuth2Tokens instance if successful.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/generic-oauth2-client.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\t// Pass an empty `scopes` array to keep using the same scopes.\n\tconst tokens = await client.refreshAccessToken(tokenEndpoint, refreshToken, scopes);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid tokens, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Add Profile and Email Scopes (TypeScript)\nDESCRIPTION: This snippet demonstrates adding the `profile` and `email` scopes to get the user profile and email information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = auth0.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating MercadoLibre OAuth Authorization URL in TypeScript\nDESCRIPTION: This code snippet shows how to generate a state parameter and create an authorization URL to redirect users to MercadoLibre's OAuth authorization endpoint. It prepares the OAuth 2.0 authorization request, enabling users to authorize the application and grant access tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadolibre.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst url = mercadolibre.createAuthorizationURL(state);\n```\n\n----------------------------------------\n\nTITLE: Fetching Slack User Profile (API, JavaScript/TypeScript)\nDESCRIPTION: Provides an alternative method to get user profile information by making a request to Slack's `userinfo` endpoint. This approach uses the access token obtained during code validation to authenticate the request and retrieve the profile data directly from the API.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/slack.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await fetch(\"https://openidconnect.googleapis.com/v1/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL - Autodesk Platform Services - TypeScript\nDESCRIPTION: Shows how to generate the authorization URL that users will be redirected to for granting permissions. It utilizes Arctic helper functions `generateState` and `generateCodeVerifier` for PKCE flow and requires an array of desired scopes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"user:read\", \"data:read\"];\nconst url = autodesk.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens for Start.gg OAuth in TypeScript\nDESCRIPTION: Uses a refresh token to obtain a new access token from Start.gg, with error handling for various OAuth and network failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/startgg.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\t// Pass an empty `scopes` array to keep using the same scopes.\n\tconst tokens = await startgg.refreshAccessToken(refreshToken, scopes);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Yandex Access Tokens with Arctic in TypeScript\nDESCRIPTION: Uses a refresh token to obtain a new access token and refresh token pair from Yandex via Arctic's SDK. This method returns an OAuth2Tokens object similar to validation and throws identical error types. It requires an initialized Yandex client instance and a valid refresh token string. It supports async/await usage with proper error handling for invalid tokens or communication failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yandex.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await yandex.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Patreon Authorization URL in TypeScript\nDESCRIPTION: Demonstrates generating a CSRF state parameter using `arctic.generateState()` and creating the Patreon authorization URL. The `createAuthorizationURL` method takes the state and an array of requested scopes (e.g., 'identity', 'identity[email]') as arguments.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/patreon.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"identity\", \"identity[email]\"];\nconst url = patreon.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with PKCE for Roblox OAuth in TypeScript\nDESCRIPTION: Demonstrates generating a secure OAuth 2.0 authorization URL for Roblox using PKCE and Arctic utilities. Requires Arctic library and a previously initialized roblox instance. Utilizes utility functions to create a random state and code verifier, sets requested scopes, and generates a URL to initiate user authorization. Parameters: state (string), codeVerifier (string), scopes (array of strings). Output: authorization URL (string).\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = roblox.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL for Dribbble OAuth with Arctic (TypeScript)\nDESCRIPTION: This code illustrates how to generate an OAuth state token and specify OAuth scopes (e.g., 'public', 'upload'), then construct the Dribbble authorization URL using the Arctic provider. Prerequisites are the initialized provider and available state/scopes variables. The generated URL should be presented to the user to start the OAuth 2.0 flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dribbble.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"public\", \"upload\"];\nconst url = dribble.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Twitter Access Token (TypeScript)\nDESCRIPTION: Uses a refresh token to obtain a new access token and expiration time. This method returns an `OAuth2Tokens` object upon success or throws errors similar to `validateAuthorizationCode()`. Requires the `offline.access` scope during the initial authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await twitter.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Battle.net Provider in TypeScript\nDESCRIPTION: Demonstrates how to initialize the Battle.net OAuth 2.0 provider using the `arctic` library. This requires importing `arctic` and instantiating `arctic.BattleNet` with the client ID, client secret, and redirect URI.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/battlenet.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst battlenet = new arctic.BattleNet(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Intuit Access Token with Arctic (TypeScript)\nDESCRIPTION: Explains how to use a refresh token to obtain a new access token from Intuit using Arctic's `refreshAccessToken` method in TypeScript. This asynchronous function takes the `refreshToken` as input, returns a new `OAuth2Tokens` object on success, and throws the same errors as `validateAuthorizationCode` on failure.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await intuit.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gitea Authorization URL with PKCE in TypeScript\nDESCRIPTION: Demonstrates how to generate a secure authorization URL for Gitea OAuth including state parameter, PKCE code verifier, and scope definitions for API permissions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitea.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"read:user\", \"write:notification\"];\nconst url = gitea.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching 42 School User Profile in TypeScript\nDESCRIPTION: Demonstrates making an authenticated GET request to the 42 School API endpoint `/v2/me` using the standard `fetch` API. The access token obtained during code validation is included in the `Authorization` header as a Bearer token to retrieve the authenticated user's profile information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/42.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.intra.42.fr/v2/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes for User Profile Access in TypeScript\nDESCRIPTION: Shows how to set up the required 'read:user' scope when creating an authorization URL to enable user profile retrieval from Gitea's API.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitea.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"read:user\"];\nconst url = gitea.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Google Access Token using Refresh Token in TypeScript\nDESCRIPTION: Uses the `refreshAccessToken` method with a previously obtained refresh token to get a new access token and its expiration time from Google. Error handling for potential issues like invalid refresh token is similar to `validateAuthorizationCode`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await google.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Shikimori Access Tokens Using Arctic in TypeScript\nDESCRIPTION: This snippet illustrates how to acquire a new access token using a refresh token with Arctic and the Shikimori provider. It mirrors the error handling of the authorization code flow and returns updated OAuth2Tokens. Inputs: refresh token; Outputs: new OAuth2Tokens (access and refresh tokens), or errors such as OAuth2RequestError or ArcticFetchError. Dependencies are the Arctic library and a valid refresh token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/shikimori.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await shikimori.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens in TypeScript\nDESCRIPTION: This code refreshes access tokens using the `refreshAccessToken` method. It takes a refresh token as input and returns new access and refresh tokens, as well as the expiration time.  It includes the use of a try-catch block to handle potential errors, such as invalid refresh tokens or network issues.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/epicgames.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await epicgames.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL (TypeScript)\nDESCRIPTION: This snippet shows how to create an authorization URL for MyAnimeList using Arctic.js. It generates a state and code verifier using `arctic.generateState()` and `arctic.generateCodeVerifier()` respectively. These values are then passed to `mal.createAuthorizationURL()` to generate the authorization URL. The returned URL should then be used to redirect the user to MyAnimeList for authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/myanimelist.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst url = mal.createAuthorizationURL(state, codeVerifier);\n```\n\n----------------------------------------\n\nTITLE: Decoding Intuit ID Token with Arctic (TypeScript)\nDESCRIPTION: Illustrates how to decode the payload of an ID token obtained from Intuit using Arctic's `decodeIdToken` function in TypeScript. First, validate the authorization code to get the tokens, then extract the ID token using `tokens.idToken()` and pass it to `decodeIdToken`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await intuit.validateAuthorizationCode(code);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL for Additional OpenID Scopes in Polar (TypeScript)\nDESCRIPTION: This example creates an authorization URL requesting 'openid', 'profile', and 'email' scopes to gain access to the user's profile and email. Inputs are the required scopes and the output is a URL that, when visited, prompts the user to consent to these scopes. Arctic is the main dependency.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = polar.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching Yandex User Profile via API Using Access Token in TypeScript\nDESCRIPTION: Performs a GET request to Yandex's `/myself` API endpoint to retrieve the authenticated user's profile information. Requires a valid OAuth access token obtained via prior steps. The request includes authorization headers with the OAuth token and an organization ID header. The output is a JSON object representing user data from Yandex Tracker service. Uses fetch API in an asynchronous context with standard HTTP headers.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yandex.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.tracker.yandex.net/v2/myself\", {\n\theaders: {\n\t\tAuthorization: `OAuth ${accessToken}`,\n\t\t\"X-Org-ID\": ORGANIZATION_ID\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Refreshing GitHub Access Token with Arctic (TypeScript)\nDESCRIPTION: Uses a `refreshToken` to obtain a new access token and optionally a new refresh token when using GitHub Apps. The behavior, including the potential errors thrown, is identical to `validateAuthorizationCode()`. This method is asynchronous.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await github.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing KeyCloak Refresh Token Expiration in TypeScript\nDESCRIPTION: Checks if the refresh token expiration (`refresh_expires_in`) is present in the token response data after validating the authorization code. This value, specific to KeyCloak's response, indicates the lifetime of the refresh token in seconds.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await keycloak.validateAuthorizationCode(code);\nif (\"refresh_expires_in\" in tokens.data && typeof tokens.data.refresh_expires_in === \"number\") {\n\tconst refreshTokenExpiresIn = tokens.data.refresh_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile from Linear GraphQL API using JavaScript\nDESCRIPTION: Performs a POST request to Linear's GraphQL API to retrieve the authenticated user's profile information (ID and name) using the access token obtained via OAuth. It sets appropriate headers including Authorization with bearer token and parses the JSON response for user data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linear.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst response = await fetch(\"https://api.linear.app/graphql\", {\n    method: \"POST\",\n    body: `{ \"query\": \"{ viewer { id name } }\" }`,\n\theaders: {\n        \"Content-Type\": \"application/json\",\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Requesting OpenID Connect Scopes for Yahoo Auth URL (TypeScript)\nDESCRIPTION: Creates a Yahoo authorization URL specifically requesting the 'openid' scope. This scope is necessary to enable OpenID Connect features, such as receiving an ID token upon successful authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = yahoo.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating and validating authorization codes (confidential clients)\nDESCRIPTION: This snippet demonstrates the creation and validation of authorization codes for confidential clients within the Discord provider. `clientSecret` and `codeVerifier` parameters are set to `null`.  Requires the Arctic library and a Discord provider configured.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v3.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Confidential clients (existing projects)\nconst url = discord.createAuthorizationURL(state, null, scopes);\nconst tokens = await discord.validateAuthorizationCode(code, null);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens using Arctic in TypeScript\nDESCRIPTION: Uses the Authentik client's refreshAccessToken() method to obtain new OAuth2Tokens with a refresh token. Handles the same errors as validateAuthorizationCode() and requires an initialized client plus a valid refresh token (string). Returns an updated OAuth2Tokens object or throws errors related to request or response handling.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/authentik.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await authentik.refreshAccessToken(refreshToken);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Tokens in Dropbox OAuth\nDESCRIPTION: Revoke access by invalidating tokens associated with the authorization, with proper error handling for potential failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait dropbox.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Authorization URL for Bungie\nDESCRIPTION: Generates an authorization URL used to initiate the OAuth flow by creating a state parameter and defining scopes. This URL directs users to Bungie's authorization page, enabling them to grant app permissions. Dependencies include the 'arctic' library and existing 'bungie' client instance.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bungie.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"ReadBasicUserProfile\", \"ReadGroups\"];\nconst url = bungie.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL for OpenID Scope with Arctic and Line in TypeScript\nDESCRIPTION: This code sets up the authorization URL to include the 'openid' scope for enabling OpenID Connect capabilities. Dependencies are the arctic library and an initialized Line provider. Inputs are state, codeVerifier, and an array with only the 'openid' scope; output is an authorization URL for Log In with LINE supporting OpenID Connect.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = line.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Salesforce OAuth Provider with Arctic in TypeScript\nDESCRIPTION: Demonstrates how to instantiate the Salesforce OAuth provider using the Arctic library in TypeScript. Requires the 'arctic' package and expects domain, clientId, clientSecret (use null for public clients), and redirectURI as parameters. The domain should not include protocol or paths. Returns a Salesforce provider instance capable of further OAuth operations. Only confidential clients should supply a client secret.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst domain = \"login.salesforce.com\";\nconst salesforce = new arctic.Salesforce(domain, clientId, clientSecret, redirectURI);\nconst salesforce = new arctic.Salesforce(domain, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Using OpenID Connect with Amazon Cognito Authorization in TypeScript\nDESCRIPTION: Demonstrates obtaining an ID token by requesting the `openid` scope, then decoding the token payload using Arctic's `decodeIdToken()` utility. This allows retrieving user identity claims in compliance with OpenID Connect standards as part of the OAuth 2.0 flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/amazon-cognito.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = cognito.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await cognito.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(userPool + \"/oauth/userInfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Revoking Refresh Tokens with Amazon Cognito via Arctic in TypeScript\nDESCRIPTION: Revokes all tokens associated with a given refresh token by calling `revokeToken()`. This requires token revocation to be enabled in the Cognito settings. Error handling includes catching OAuth request errors and fetch failures similar to other token management functions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/amazon-cognito.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait cognito.revokeToken(refreshToken);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GitHub OAuth Provider with Arctic (TypeScript)\nDESCRIPTION: Creates an instance of the `arctic.GitHub` provider. Requires `clientId` and `clientSecret`. The `redirectURI` parameter is optional but required by GitHub if multiple are defined for the application.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst github = new arctic.GitHub(clientId, clientSecret, null);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst github = new arctic.GitHub(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Access Token with OAuth2Tokens.accessToken() in TypeScript\nDESCRIPTION: Defines the TypeScript function signature for accessToken(), which returns the 'access_token' field as a string from an OAuth2Tokens object. This function throws an Error if the field is absent or not of type string, enforcing strict type validation. The method is designed for authentication scenarios requiring robust access token retrieval; no external dependencies are specified beyond TypeScript itself.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/accessToken.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction accessToken(): string;\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Query for AniList User Profile\nDESCRIPTION: Defines a GraphQL query string to fetch the authenticated user's ID and name using the `Viewer` query provided by the AniList API. This query string is intended to be sent in the body of a POST request to the AniList GraphQL endpoint.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/anilist.md#_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n\tViewer {\n\t\tid\n\t\tname\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching LinkedIn User Profile via OpenID Connect Userinfo Endpoint in TypeScript\nDESCRIPTION: Demonstrates sending an authenticated GET request to LinkedIn's OpenID Connect userinfo endpoint using the access token obtained from OAuth. Parses the JSON user profile response. This snippet requires that the token includes the necessary OpenID Connect scopes to access user information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.linkedin.com/v2/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Naver OAuth 2.0\nDESCRIPTION: Generates the authorization URL that users should be redirected to in order to authenticate with Naver and grant permissions to your application.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/naver.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = naver.createAuthorizationURL();\n```\n\n----------------------------------------\n\nTITLE: Accessing Refresh Token Expiration Information in TypeScript\nDESCRIPTION: This snippet checks if the `refresh_token_expires_in` field is present in the tokens data and is a number, then retrieves its value. It provides a way to determine when the refresh token expires after validation, which is useful for token lifecycle management.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kakao.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await kakao.validateAuthorizationCode(code);\nif (\n\t\"refresh_token_expires_in\" in tokens.data &&\n\ntypeof tokens.data.refresh_token_expires_in === \"number\"\n) {\n\tconst refreshTokenExpiresIn = tokens.data.refresh_token_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling Errors in Polar OAuth2 (TypeScript)\nDESCRIPTION: This example covers exchanging an authorization code for tokens and managing possible exceptions using Arctic's error classes. Requires the 'arctic' package and a valid 'polar' instance. Inputs include the authorization code and code verifier, and outputs are access tokens with their expiry. Handles errors such as invalid credentials or networking issues with specific Arctic exceptions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await polar.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile from Start.gg API in TypeScript\nDESCRIPTION: Makes a GraphQL query to the Start.gg API to retrieve user profile information using the access token obtained during authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/startgg.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.start.gg/gql/alpha\", {\n\tmethod: \"POST\",\n\tbody: `{\"query\": \"{ currentUser {id slug email player { gamerTag } } }\" }`,\n\theaders: {\n\t\t\"Content-type\": \"application/json\",\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst result = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Fetching GitHub User Emails (TypeScript)\nDESCRIPTION: Makes an authenticated request to the GitHub API `/user/emails` endpoint to retrieve email addresses for the authenticated user. This requires the `user:email` scope to have been requested and granted during the authorization flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.github.com/user/emails\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst emails = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Validating VK Authorization Code and Handling Errors in TypeScript\nDESCRIPTION: This code shows how to validate an authorization code by calling `validateAuthorizationCode()`. It includes error handling for different exceptions such as invalid codes, fetch failures, and response errors, providing access to tokens upon success.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/vk.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await vk.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\t// Only if `offline` scope is not used.\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoke Token (TypeScript)\nDESCRIPTION: This snippet shows how to revoke a refresh token. It handles potential errors during the revocation process.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait auth0.revokeToken(refreshToken);\n} catch (e) {\n\t// Handle errors\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Facebook User Profile via Graph API in TypeScript\nDESCRIPTION: This example demonstrates how to fetch a Facebook user's profile after authentication using the /me endpoint of the Graph API. It constructs search parameters including access_token and requested fields, issues a fetch request, and parses the returned JSON data. Requires a valid access token and uses browser-compatible fetch API.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/facebook.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst searchParams = new URLSearchParams();\nsearchParams.set(\"access_token\", accessToken);\nsearchParams.set(\"fields\", [\"id\", \"name\", \"picture\", \"email\"].join(\",\"));\nconst response = await fetch(\"https://graph.facebook.com/me\" + \"?\" + searchParams.toString());\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens with Arctic.js (TypeScript)\nDESCRIPTION: This snippet shows how to refresh an access token using a refresh token with the `arctic` library.  It uses the `refreshAccessToken` method, which returns a new `OAuth2Tokens` object. Error handling is included for potential issues.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/donation-alerts.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst scopes = [\"oauth-user-show\"];\n\tconst tokens = await donationAlerts.refreshAccessToken(refreshToken, scopes);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Profile (Etsy API)\nDESCRIPTION: This snippet retrieves the user profile from the Etsy API. First, it validates the authorization code. Then, it uses the `getMe` endpoint to obtain the user ID, and then uses the `getUser` endpoint with the user ID to retrieve the full user profile. The `X-Api-Key` and `Authorization` headers are required.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/etsy.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await etsy.validateAuthorizationCode(code, codeVerifier);\nconst response = await fetch(\"https://openapi.etsy.com/v3/application/users/me\", {\n\theaders: {\n\t\t\"X-Api-Key\": clientId,\n\t\tAuthorization: `Bearer ${tokens.accessToken}`\n\t}\n});\nconst result = await response.json();\nconst userId = result.user_id;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(`https://openapi.etsy.com/v3/application/users/${userId}`, {\n\theaders: {\n\t\t\"X-Api-Key\": clientId,\n\t\tAuthorization: `Bearer ${tokens.accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Box OAuth Provider with Arctic in TypeScript\nDESCRIPTION: Demonstrates how to initialize the Box provider from the Arctic library by importing all modules and instantiating the provider with required credentials: clientId, clientSecret, and redirectURI. Dependencies include the arctic package. The Box instance is a prerequisite for all subsequent authorization and token operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/box.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst box = new arctic.Box(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth2 Authorization URL with Arctic in TypeScript\nDESCRIPTION: This snippet demonstrates how to generate an authorization URL using the OAuth2Client's createAuthorizationURL() method. The state parameter is generated using arctic.generateState(), and scopes defines the OAuth2 permissions requested. This method is essential for redirecting users to the provider's authorization screen. Required Arctic dependencies include the OAuth2Client and utility methods for state and (optionally) scopes generation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/generic-oauth2-client.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst url = client.createAuthorizationURL(authorizationEndpoint, state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile in TypeScript\nDESCRIPTION: This code retrieves the user profile from the Twitch API's `/users` endpoint. It sends a GET request to `https://api.twitch.tv/helix/users`, including the `Authorization` header with the access token and the `Client-Id` header with the client ID.  The `user:read:email` scope is required to retrieve the user's email.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.twitch.tv/helix/users\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`,\n\t\t\"Client-Id\": clientId\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Strava User Profile with Read Scope in TypeScript\nDESCRIPTION: This snippet illustrates how to generate a read scope authorization URL and fetch the logged-in user's profile data from Strava's `/athlete` endpoint using the access token. It involves setting headers with the Bearer token and parsing the JSON response to obtain user details.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/strava.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"read\"];\nconst url = strava.createAuthorizationURL(state, scopes);\n\nconst response = await fetch(\"https://www.strava.com/api/v3/athlete\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Patreon Access Tokens in TypeScript\nDESCRIPTION: Illustrates how to use a refresh token to obtain a new set of access tokens using `patreon.refreshAccessToken(refreshToken)`. This method returns a new `OAuth2Tokens` object and throws the same potential errors (`OAuth2RequestError`, `ArcticFetchError`) as the `validateAuthorizationCode` method. Includes basic error handling structure.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/patreon.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await patreon.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Token Data and Refresh Token Expiration\nDESCRIPTION: After successful validation, extracts access token, expiry time, and refresh token from the response. Additionally, checks for 'refresh_expires_in' to determine refresh token lifespan. This facilitates token management and session expiration handling.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bungie.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await bungie.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\n\n// Get refresh token expiration in seconds\nif (\"refresh_expires_in\" in tokens.data && typeof tokens.data.refresh_expires_in === \"number\") {\n\tconst refreshTokenExpiresIn = tokens.data.refresh_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token and Extracting Claims in Roblox OAuth (TypeScript)\nDESCRIPTION: Shows how to extract and decode an ID token following successful OAuth2 authorization in Roblox, using Arctic's decodeIdToken function to retrieve claims such as user identity and profile attributes. Requires Arctic, valid roblox OAuth2 tokens, and an ID token. Output: decoded claims object from JWT payload.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await roblox.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with GitLab OAuth in Arctic (TypeScript)\nDESCRIPTION: This code builds an OAuth 2.0 authorization URL by generating a random state value and specifying required scopes. The 'createAuthorizationURL' method is called on the Arctic GitLab provider object, which must be previously instantiated. Inputs are OAuth scopes as an array of strings (e.g., ['read_user', 'profile']) and a state parameter generated by Arctic's utility function. Outputs a ready-to-use URL for redirecting users to GitLab's authorization page.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitlab.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"read_user\", \"profile\"];\nconst url = gitlab.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Obtaining User Profile with 'profile' and 'email' Scopes in OAuth Flow\nDESCRIPTION: This code sets the 'openid', 'profile', and 'email' scopes to request full user profile information, including email address. The authorization URL generated will prompt users to consent to sharing their profile details with the application.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = entraId.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Accessing LinkedIn OAuth Refresh Token Expiration in TypeScript\nDESCRIPTION: Demonstrates checking for the presence and numeric type of `refresh_token_expires_in` property in the token response data returned by validateAuthorizationCode. Retrieves the duration (in seconds) until the refresh token expires, which is important for token lifecycle management and deciding when users need to reauthenticate.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await linkedin.validateAuthorizationCode(code);\nif (\n\t\"refresh_token_expires_in\" in tokens.data &&\n\ttypeof tokens.data.refresh_token_expires_in === \"number\"\n) {\n\tconst refreshTokenExpiresIn = tokens.data.refresh_token_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code in TypeScript\nDESCRIPTION: This code validates the authorization code received from the osu! OAuth 2.0 provider. It uses `validateAuthorizationCode` and handles potential errors like `OAuth2RequestError` and `ArcticFetchError`.  It extracts the access token, its expiry, and the refresh token upon successful validation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/osu.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await osu.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Public Clients with PKCE in TypeScript\nDESCRIPTION: Generates an authorization URL for public clients, including PKCE support by generating a code verifier and passing it along with state and scopes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/discord.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"email\", \"activities.read\"];\nconst url = discord.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth2 Tokens with Polar using Arctic in TypeScript\nDESCRIPTION: This example shows how to revoke an OAuth2 token using the Polar provider and Arctic. It handles errors such as invalid credentials and fetch failures with Arctic-specific exception types. This operation invalidates the provided token, enhancing security by ending its validity immediately. Dependency is the 'arctic' package and a valid Polar instance.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait polar.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OpenID Connect URL in TypeScript\nDESCRIPTION: This snippet shows how to create an authorization URL with the `openid` scope for OpenID Connect.  It utilizes the `createAuthorizationURL()` method of the `twitch` object, setting the scopes to `openid` to request an ID token. This facilitates retrieval of user profile information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = twitch.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL in TypeScript\nDESCRIPTION: This snippet showcases how to generate an authorization URL for Bitbucket using the `arctic` library.  It uses `arctic.generateState()` to create a state parameter for security.  The `createAuthorizationURL()` method constructs the URL to redirect the user to Bitbucket's authorization page. The `state` parameter is used for CSRF protection.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bitbucket.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst url = bitBucket.createAuthorizationURL(state);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect with Profile and Email Scopes\nDESCRIPTION: Request additional profile and email information by adding the appropriate scopes to the authorization URL.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = dropbox.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Bitbucket Client in TypeScript\nDESCRIPTION: This snippet demonstrates the initialization of a Bitbucket client using the `arctic` library.  It requires `clientId`, `clientSecret`, and `redirectURI` which must be obtained from Bitbucket.  The resulting `bitBucket` instance can be used to perform OAuth 2.0 operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bitbucket.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst bitBucket = new arctic.Bitbucket(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyCloak with public client\nDESCRIPTION: This snippet demonstrates initializing a KeyCloak instance with a public client.  The `clientSecret` is set to `null`.  Dependencies: arctic library installed and imported.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v3.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst keycloak = new arctic.KeyCloak(clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Spotify Authorization Code (Confidential) - TypeScript\nDESCRIPTION: Exchanges the authorization code received from the callback for tokens using a confidential client. Returns an OAuth2Tokens object containing access and refresh tokens, or throws specific errors on failure.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/spotify.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await spotify.validateAuthorizationCode(code, null);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling OAuth Errors in TypeScript\nDESCRIPTION: This snippet shows how to validate an OAuth 2.0 authorization code with the Arctic Lichess client, converting the code into tokens. It extracts access token and expiration information upon success. It also includes comprehensive error handling for several expected error types such as OAuth2RequestError for invalid codes, ArcticFetchError for fetch-related failures, and parsing errors. The validateAuthorizationCode method returns OAuth2Tokens on success or throws well-defined errors on failure. This snippet requires asynchronous handling with async/await.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/lichess.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await lichess.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing VK OAuth 2.0 Client with arctic Library in TypeScript\nDESCRIPTION: This snippet shows how to import the arctic library and initialize a VK OAuth client with client ID, secret, and redirect URI. It sets up the client for subsequent authorization and token validation operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/vk.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst vk = new arctic.VK(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile from Microsoft Graph API with Access Token in TypeScript\nDESCRIPTION: This snippet fetches the user's profile information from the Microsoft Graph 'userinfo' endpoint using the access token. It requires the 'profile' and 'email' scopes during authorization to access user details such as name and email address.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://graph.microsoft.com/oidc/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Decoding OpenID Connect ID Token with Arctic in TypeScript\nDESCRIPTION: Obtains an ID token through the OAuth 2.0 code exchange and decodes its payload using Arctic's decodeIdToken() to access user claims. Requires a successful Authentik client, code, and code verifier. Outputs the parsed claims object for user information; dependencies include the 'arctic' library and valid ID token string.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/authentik.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await authentik.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Retrieving refresh_token in OAuth2Tokens TypeScript\nDESCRIPTION: Defines the refreshToken() function that returns the refresh_token field as a string from an OAuth2Tokens type. It throws an error if the refresh_token field is missing or is not a string. This function requires that the OAuth2Tokens object contains the refresh_token property. The function ensures type safety when accessing tokens needed for OAuth2 authentication token renewal.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/refreshToken.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction refreshToken(): string;\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth 2.0 Authorization URL for Notion\nDESCRIPTION: Generates an OAuth 2.0 authorization URL with a specified state parameter, allowing users to authorize access to their Notion account. Uses arctic's generateState() and createAuthorizationURL() methods.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/notion.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst url = notion.createAuthorizationURL(state);\n```\n\n----------------------------------------\n\nTITLE: Initializing osu! OAuth Client in TypeScript\nDESCRIPTION: This snippet demonstrates the initialization of an `Osu` client using the `arctic` library. It takes the client ID, client secret, and redirect URI as parameters. It creates an instance of the `Osu` class to interact with the osu! OAuth 2.0 provider.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/osu.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst osu = new arctic.Osu(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching Current GitLab User Profile via API (TypeScript)\nDESCRIPTION: This code uses the fetch API to retrieve the authenticated user's profile from GitLab. Requires a valid access token obtained through prior OAuth 2.0 flow. The request is sent to the '/api/v4/user' endpoint with the Authorization header specifying the Bearer token. Outputs the deserialized user profile JSON object. Requires fetch API support and appropriate token scope ('read_user').\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitlab.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://gitlab.com/api/v4/user\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Validating Tumblr OAuth Authorization Code and Handling Errors - TypeScript\nDESCRIPTION: Shows how to exchange an OAuth 2.0 authorization code for access tokens using the Tumblr provider in Arctic, with robust error handling. Depends on an initialized Arctic Tumblr instance and requires the 'arctic' library as well as an authorization 'code' obtained from the OAuth flow. Handles multiple exceptions, including OAuth2RequestError and ArcticFetchError. On success, outputs access tokens and expiration times as properties from the tokens object.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tumblr.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await tumblr.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Slack Authorization Code (Arctic, TypeScript)\nDESCRIPTION: Illustrates how to exchange the authorization code received in the callback for OAuth2 tokens (access and ID tokens) using the `validateAuthorizationCode` method. It includes a `try...catch` block to handle potential errors like invalid codes, network issues, or parsing failures, providing examples of specific Arctic error types.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/slack.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await slack.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst idToken = tokens.idToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL in TypeScript\nDESCRIPTION: This code creates an authorization URL for Epic Games using the `createAuthorizationURL` method.  It generates a state and defines the scopes. The method accepts the state and an array of scopes. The `url` variable will contain the authorization URL.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/epicgames.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"basic_profile\", \"friends_list\"];\nconst url = epicgames.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code with Arctic.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to validate the authorization code received from DonationAlerts and obtain access tokens. It uses the `validateAuthorizationCode` method, which returns an `OAuth2Tokens` object containing the access token, expiration, and refresh token. Error handling is included for potential issues such as invalid codes or network errors.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/donation-alerts.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await donationAlerts.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Twitter Token (TypeScript)\nDESCRIPTION: Revokes a token (either access or refresh token). This method throws errors similar to `validateAuthorizationCode()` if the operation fails.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait twitter.revokeToken(refreshToken);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Offline Access for Google Refresh Tokens in TypeScript\nDESCRIPTION: Modifies the Google authorization URL to include the 'access_type=offline' parameter. This is necessary to request a refresh token from Google, which allows obtaining new access tokens without user interaction and is typically granted only on the first authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = google.createAuthorizationURL(state, codeVerifier, scopes);\nurl.searchParams.set(\"access_type\", \"offline\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Okta OAuth 2.0 Provider in TypeScript\nDESCRIPTION: Shows how to initialize the Okta OAuth 2.0 provider with Arctic. The domain parameter should not include the protocol or path, and the authorizationServerId parameter is optional.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/okta.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst domain = \"auth.example.com\";\n\nconst okta = new arctic.Okta(domain, null, clientId, clientSecret, redirectURI);\nconst okta = new arctic.Okta(domain, authorizationServerId, clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Handling Errors During Authorization Code Validation in Arctic v2 (TypeScript)\nDESCRIPTION: Provides an example of error handling when calling `validateAuthorizationCode`. It shows how to use a try-catch block and type guards (`instanceof`) to catch specific error types (`OAuth2RequestError`, `ArcticFetchError`) exported by the Arctic library, allowing for tailored responses to issues like invalid codes, credentials, redirect URIs, or network fetch failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v2.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await github.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Twitter Authorization URL (Basic Scopes) (TypeScript)\nDESCRIPTION: Generates the URL that the user needs to be redirected to for granting authorization. It includes state for CSRF protection, a code verifier for PKCE flow, and requested scopes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"account_info.read\", \"files.content.read\"];\nconst url = twitter.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Coinbase OAuth 2.0 Provider in TypeScript\nDESCRIPTION: Creates a new Coinbase OAuth 2.0 provider instance using the Arctic library. Requires client ID, client secret, and redirect URI parameters.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/coinbase.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst coinbase = new arctic.Coinbase(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Atlassian User Profile Scope - TypeScript\nDESCRIPTION: This short example shows how to request Atlassian's 'read:me' permission by specifying the scope when creating the OAuth authorization URL. Dependencies are an initialized provider and a generated state variable. Input is the 'read:me' scope; output is an authorization URL for fetching the authenticated user's profile.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/atlassian.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"read:me\"];\nconst url = atlassian.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile from Notion API in TypeScript\nDESCRIPTION: Retrieves the authenticated user's profile information by calling the Notion `/users/me` endpoint with an authorization header containing the access token. Parses the JSON response to obtain user data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/notion.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.notion.com/v1/users/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenID Connect with Dropbox OAuth\nDESCRIPTION: Setup OpenID Connect authentication with the appropriate scope to enable user identification.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = dropbox.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL in Arctic v2 (TypeScript)\nDESCRIPTION: Demonstrates the updated synchronous usage of `createAuthorizationURL` in Arctic v2. It takes the state and an array of scopes directly as arguments to generate the OAuth authorization URL for a provider like GitHub.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v2.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"user:email\", \"repo\"];\nconst url = github.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling Errors in Mercado Pago OAuth in TypeScript\nDESCRIPTION: Validates the OAuth 2.0 authorization code returned by Mercado Pago after user authorization to exchange it for access and refresh tokens. This asynchronous method returns an OAuth2Tokens object on success or throws specific errors such as OAuth2RequestError for invalid credentials, ArcticFetchError for fetch failures, or other unexpected error types. Extracts accessToken, accessTokenExpiresAt, and refreshToken from the returned tokens for further authenticated API calls.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadopago.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await mercadopago.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Yandex Authorization Code with Arctic in TypeScript\nDESCRIPTION: Validates an OAuth 2.0 authorization code received from Yandex, exchanging it for access and refresh tokens using Arctic's SDK. Returns an OAuth2Tokens object containing methods to access tokens and expiration times. Includes robust error handling for request errors, failed fetch calls, unexpected response formats, or error bodies. This snippet requires async/await context and an initialized Yandex client. The input is the authorization code string, and output is token data or exceptions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yandex.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await yandex.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Scopes for Patreon User Profile in TypeScript\nDESCRIPTION: Shows how to specify the necessary scopes ('identity' and optionally 'identity[email]') when creating the Patreon authorization URL to gain permission to access user profile information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/patreon.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"identity\", \"identity[email]\"];\nconst url = patreon.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing GitLab with baseURL\nDESCRIPTION: This snippet shows how to initialize a GitLab provider with a unified `baseURL`. The `baseURL` must include the protocol and can include path segments. Requires the Arctic library and a GitLab provider configured.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v3.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\n// Must include the protocol, can include path segments\nconst baseURL = \"https://my-instance.com/auth\";\nconst gitlab = new arctic.GitLab(baseURL, clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Twitch Client in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Twitch client using the `arctic` library. It requires `clientId`, `clientSecret`, and `redirectURI` as parameters. The `Twitch` class from the `arctic` library is instantiated to facilitate OAuth 2.0 interactions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst twitch = new arctic.Twitch(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching Intuit User Info via OpenID Endpoint (TypeScript)\nDESCRIPTION: Demonstrates how to fetch user information from Intuit's OpenID Connect `userinfo` endpoint using the standard `fetch` API in TypeScript. Requires an access token obtained previously, which is included in the `Authorization` header as a Bearer token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://accounts.platform.intuit.com/v1/openid_connect/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Box OAuth Authorization URL with Arctic in TypeScript\nDESCRIPTION: Generates an OAuth 2.0 authorization URL for Box using the Arctic provider. It utilizes Arctic's generateState() to create a CSRF-protection state, specifies intended scopes, and calls createAuthorizationURL(). Expects prior initialization of the box provider. Inputs include a generated state string and an array of scopes; the output is a formatted authorization URL.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/box.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"root_readonly\", \"manage_managed_users\"];\nconst url = box.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Yandex OAuth Authorization URL with Arctic in TypeScript\nDESCRIPTION: Generates an OAuth 2.0 authorization URL that the end-user can visit to authorize the application. The method requires a state string (for preventing cross-site request forgery) and an array of requested permission scopes. The output URL encodes these parameters, directing users through Yandex's consent page. Requires Arctic library and an initialized Yandex client instance.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yandex.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"activity:write\", \"read\"];\nconst url = yandex.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching MercadoLibre User Profile with Access Token in TypeScript\nDESCRIPTION: This snippet shows how to retrieve the authenticated user's profile data by making a GET request to MercadoLibre's `/users/me` endpoint with an authorized Bearer token. It involves setting the Authorization header with the access token and parsing the JSON response containing user data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadolibre.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.mercadolibre.com/users/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for User Profile (TypeScript)\nDESCRIPTION: This snippet creates the authorization URL using arctic.js to obtain permission to access user profile information.  It includes the `oauth-user-show` scope.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/donation-alerts.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"oauth-user-show\"];\nconst url = donationAlerts.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth2 Tokens with OAuth2Client in TypeScript\nDESCRIPTION: An asynchronous function that revokes an OAuth2 token by sending a request to the specified token revocation endpoint. The function takes the endpoint URL and the token to revoke as parameters and returns a Promise that resolves when the token has been revoked.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Client/revokeToken.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nasync function revokeToken(tokenRevocationEndpoint: string, token: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Arctic Yandex OAuth Client in TypeScript\nDESCRIPTION: Initializes a new Yandex OAuth client instance using Arctic library with provided client credentials and redirect URI. This setup is required before performing any OAuth operations. Dependencies include the Arctic library imported as a namespace. Inputs are clientId, clientSecret, and redirectURI strings, which uniquely identify the user application and define the callback URL for OAuth flows.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yandex.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst yandex = new arctic.Yandex(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching Current User Profile from Shikimori API in TypeScript\nDESCRIPTION: This code snippet demonstrates making an authenticated HTTP request to the Shikimori API to retrieve the profile of the current user using a previously acquired access token. It uses the standard fetch API and expects a valid Bearer access token in the headers. Inputs: accessToken; Output: Parsed user object from the API response. Supports integration with user session management.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/shikimori.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://shikimori.one/api/users/whoami\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token in TypeScript\nDESCRIPTION: This snippet demonstrates how to refresh an access token using a refresh token. It calls the `refreshAccessToken()` method to get new access and refresh tokens. It includes error handling for potential failures using a `try...catch` block similar to the authorization code validation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await twitch.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Create Authorization URL for Auth0 (Confidential Client - TypeScript)\nDESCRIPTION: This snippet shows how to create an authorization URL for a confidential client. It requires generating a state and defining scopes. PKCE is not supported for confidential clients. The `arctic.generateState()` function generates a cryptographically random state value to prevent CSRF attacks.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"openid\", \"profile\"];\nconst url = auth0.createAuthorizationURL(state, null, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching Yahoo User Info via UserInfo Endpoint (TypeScript)\nDESCRIPTION: Demonstrates how to fetch user information directly from Yahoo's OpenID Connect `userinfo` endpoint (`https://api.login.yahoo.com/openid/v1/userinfo`). Requires a valid access token obtained previously, which is passed in the `Authorization` header as a Bearer token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.login.yahoo.com/openid/v1/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Checking Google Refresh Token Expiration in TypeScript\nDESCRIPTION: Demonstrates how to check if the refresh token expiration (`refresh_token_expires_in`) is included in the data returned by `validateAuthorizationCode`. This property might be present depending on the Google OAuth configuration and flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await google.validateAuthorizationCode(code);\nif (\n\t\"refresh_token_expires_in\" in tokens.data &&\n\ttypeof tokens.data.refresh_token_expires_in === \"number\"\n) {\n\tconst refreshTokenExpiresIn = tokens.data.refresh_token_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Roblox User Profile via UserInfo Endpoint in TypeScript\nDESCRIPTION: Demonstrates fetching Roblox user profile data using the official userinfo endpoint, passing the access token as a bearer token. Dependencies: fetch API, valid accessToken. Returns a parsed user object as returned by Roblox's API. Note: Roblox does not return email addresses, even with the profile scope.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://apis.roblox.com/oauth/v1/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Kick OAuth Provider in TypeScript\nDESCRIPTION: Initializes a Kick OAuth 2.0 provider with client ID, client secret, and redirect URI using the Arctic library.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kick.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst kick = new arctic.Kick(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens for Naver OAuth 2.0\nDESCRIPTION: Uses a refresh token to obtain a new access token when the original expires. Returns both new access and refresh tokens with appropriate error handling for network or validation failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/naver.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await naver.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating GitHub Authorization Code with Arctic (TypeScript)\nDESCRIPTION: Exchanges the authorization `code` received from the callback for OAuth2 tokens. This asynchronous method may throw specific `arctic` errors like `OAuth2RequestError` for invalid codes, credentials, or redirect URI, or fetch/parse errors. OAuth Apps will only return an access token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await github.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving id_token with OAuth2Tokens in TypeScript\nDESCRIPTION: This function, idToken, returns the id_token field from an OAuth2Tokens instance. It throws an Error if the field is missing or its value is not a string, ensuring type safety and reliability during authentication workflows. The method does not accept parameters and returns a string token on success; it is designed for scenarios where strict validation of token presence and type is required.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/idToken.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction idToken(): string;\n```\n\n----------------------------------------\n\nTITLE: Fetching Google User Info via Endpoint in TypeScript\nDESCRIPTION: Demonstrates how to fetch user information from Google's standard `userinfo` endpoint using the obtained access token. The token is passed in the Authorization header as a Bearer token. Requires appropriate scopes (e.g., 'profile', 'email') to have been granted.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://openidconnect.googleapis.com/v1/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile (TypeScript)\nDESCRIPTION: This snippet demonstrates how to fetch a user's profile from the MyAnimeList API using the access token obtained during the OAuth 2.0 flow. It constructs a `fetch` request to the `/users/@me` endpoint, including the access token in the `Authorization` header. The response is then parsed as JSON to retrieve the user profile data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/myanimelist.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.myanimelist.net/v2/users/@me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Defining the OAuth2Tokens Constructor in TypeScript\nDESCRIPTION: Defines the constructor for the OAuth2Tokens class or object. It accepts a single parameter 'data', which is the JSON-parsed successful OAuth 2.0 token response body, and initializes the object instance.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/index.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction constructor(data: object): this;\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Authorization URL with Email Scope (Arctic, TypeScript)\nDESCRIPTION: Demonstrates how to request the user's email address by including the 'email' scope when generating the authorization URL. This is a variation of the earlier authorization URL creation, ensuring the email is available in the profile information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/slack.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = slack.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Etsy OAuth Client (Arctic)\nDESCRIPTION: This snippet initializes the Etsy OAuth client using the Arctic library. It requires the client ID and redirect URI as parameters and creates an instance of the `arctic.Etsy` class.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/etsy.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst etsy = new arctic.Etsy(clientId, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Patreon Authorization Code in TypeScript\nDESCRIPTION: Shows how to validate the authorization code received from Patreon using `patreon.validateAuthorizationCode(code)`. This asynchronous function returns an `OAuth2Tokens` object containing the access token, its expiration, and a refresh token upon success. Includes error handling for potential issues like invalid codes (`OAuth2RequestError`) or network problems (`ArcticFetchError`).\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/patreon.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await patreon.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Error Properties Interface in TypeScript\nDESCRIPTION: This snippet defines a TypeScript interface named Properties, used for encapsulating details of an unexpected error response, including the HTTP status code (status) and the parsed response body data (data). It is typically used in error classes that extend the Error base class and expect the response data to be in JSON format. The 'status' field expects an integer HTTP status code, while 'data' is of unknown type and should be assigned the output of JSON.parse(). There are no third-party dependencies, but usage depends on strict adherence to error processing and response conventions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/UnexpectedErrorResponseBodyError.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Properties {\n\tstatus: number;\n\tdata: unknown;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties Interface for UnexpectedResponseError in TypeScript\nDESCRIPTION: This TypeScript interface defines the shape of the properties object for the `UnexpectedResponseError`. It specifies a single required property, `status`, which must be a number representing the HTTP response status code.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/UnexpectedResponseError.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tstatus: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile from Kakao API in TypeScript\nDESCRIPTION: This snippet performs an HTTP GET request to Kakao's `/user/me` endpoint, including the `Authorization` header with the Bearer token, to retrieve user profile information. It then parses the JSON response for further use. It assumes the access token is valid and required for authenticated API access.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kakao.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://kapi.kakao.com/v2/user/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Installing Arctic via npm\nDESCRIPTION: Installs the Arctic OAuth 2.0 client library using the Node Package Manager (npm). This command downloads and adds the 'arctic' package to your project's dependencies.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install arctic\n```\n\n----------------------------------------\n\nTITLE: Revoking Okta Tokens with Arctic\nDESCRIPTION: Shows how to revoke a token using the Arctic library. This method can throw the same errors as the token validation process.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/okta.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait okta.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Slack ID Token Claims (Arctic, TypeScript)\nDESCRIPTION: Shows how to parse the payload of the ID token obtained from the validation step using the `arctic.decodeIdToken()` utility function. This method extracts the user claims (information) that are embedded directly within the token's structure.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/slack.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Requesting Refresh Tokens from Dropbox OAuth\nDESCRIPTION: Configure the authorization URL to request offline access, enabling the application to receive refresh tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = dropbox.createAuthorizationURL(state, scopes);\nurl.searchParams.set(\"token_access_type\", \"offline\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Apple OAuth Provider - TypeScript\nDESCRIPTION: This snippet initializes the Apple OAuth provider using the `arctic` library. It requires the `clientId`, `teamId`, `keyId`, `pkcs8PrivateKey`, and `redirectURI`. The `pkcs8PrivateKey` should be in the format of `Uint8Array`.  The provider facilitates interaction with Apple's OAuth 2.0 services.  The output is an initialized `apple` object.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/apple.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst apple = new arctic.Apple(clientId, teamId, keyId, pkcs8PrivateKey, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Kakao OAuth Authorization Code in TypeScript\nDESCRIPTION: This snippet demonstrates validating an authorization code received from Kakao, retrieving access and refresh tokens, and handling potential errors like invalid codes or fetch failures. It retrieves tokens using `validateAuthorizationCode()` and separates access token data for further use. Error handling distinguishes different failure types based on Arctic's error classes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kakao.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await kakao.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating 42 School Authorization Code in TypeScript\nDESCRIPTION: Exchanges the authorization code received from 42 School for access tokens using `validateAuthorizationCode`. Includes error handling for common issues like invalid codes (`OAuth2RequestError`) or network problems (`ArcticFetchError`). Extracts the access token and its expiration time upon success.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/42.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await fortyTwo.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt(); // Corrected variable name\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching AniList User Profile using GraphQL and Fetch API in TypeScript\nDESCRIPTION: Shows how to execute a GraphQL query against the AniList API (`https://graphql.anilist.co`) using the native Fetch API in TypeScript. It demonstrates making a POST request, setting the required `Authorization` (Bearer token), `Content-Type`, and `Accept` headers, and including the GraphQL query string in the JSON body. Assumes `tokens.accessToken` contains a valid access token obtained previously.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/anilist.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = `query {\n\tViewer {\n\t\tid\n\t\tname\n\t}\n}`;\nconst response = await fetch(\"https://graphql.anilist.co\", {\n\tmethod: \"POST\",\n\theaders: {\n\t\tAuthorization: `Bearer ${tokens.accessToken}`,\n\t\t\"Content-Type\": \"application/json\",\n\t\tAccept: \"application/json\"\n\t},\n\tbody: JSON.stringify({\n\t\tquery\n\t})\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Slack OAuth Provider (Arctic, TypeScript)\nDESCRIPTION: Demonstrates how to create an instance of the Slack OAuth2 provider from the Arctic library. It shows initialization with and without a specified redirect URI. This is the first step to interacting with the Slack OAuth API via Arctic.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/slack.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst slack = new arctic.Slack(clientId, clientSecret, null);\nconst slack = new arctic.Slack(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Revoking Tokens for Kick OAuth\nDESCRIPTION: Revokes all tokens associated with an authorization using a refresh token, with error handling for potential OAuth 2.0 flow issues.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kick.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait kick.revokeToken(refreshToken);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arctic LinkedIn OAuth 2.0 Provider in TypeScript\nDESCRIPTION: Initializes a new LinkedIn OAuth 2.0 client instance using the Arctic library. Requires clientId, clientSecret, and redirectURI parameters corresponding to LinkedIn app credentials and callback URL. This setup prepares the LinkedIn client for further OAuth interactions such as authorization URL creation and token validation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst linkedin = new arctic.LinkedIn(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token Payload with TypeScript\nDESCRIPTION: Defines a function that decodes the payload of an ID token string without validating the token's signature. It takes a single parameter, idToken, which is a string representing the encoded ID token, and returns an object representing the decoded payload. The function throws an Error if the provided token is malformed or cannot be decoded correctly. This snippet focuses on token payload extraction and expects well-formed JWT strings as input.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/decodeIdToken.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction decodeIdToken(idToken: string): object;\n```\n\n----------------------------------------\n\nTITLE: Fetching Spotify User Profile - TypeScript\nDESCRIPTION: Fetches the current user's profile data from the Spotify API using a valid access token. Requires the 'user-read-email' scope to retrieve the email address.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/spotify.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.spotify.com/v1/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling OAuth Errors in TypeScript\nDESCRIPTION: Validates the authorization code received from Tiltify's OAuth 2.0 authorization flow to obtain OAuth tokens including access token, access token expiration, and refresh token. The snippet demonstrates comprehensive error handling for possible exceptions such as OAuth2RequestError, ArcticFetchError, and parsing errors. This step is critical to securely exchange the authorization code for usable tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiltify.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await tiltify.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code for Start.gg OAuth in TypeScript\nDESCRIPTION: Validates the authorization code received from Start.gg, handling various error cases and extracting the access token, expiration time, and refresh token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/startgg.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await startgg.validateAuthorizationCode(code, scopes);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Box OAuth Authorization Code and Handling Errors with Arctic in TypeScript\nDESCRIPTION: Performs an exchange of an authorization code for tokens using Arctic's Box provider. It implements comprehensive error handling for various Arctic-specific error classes, providing informative branches for invalid codes, failed fetch requests, and generic parser errors. Dependencies include a valid box instance, a valid authorization code, and the arctic module. The returned tokens include an access token with no guaranteed expiry from Box.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/box.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await box.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Arctic Spotify Provider - TypeScript\nDESCRIPTION: Initializes the Arctic Spotify provider. Confidential clients must provide the client secret, while public clients pass null for the secret. Requires the client ID and redirect URI.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/spotify.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst spotify = new arctic.Spotify(clientId, clientSecret, redirectURI);\nconst spotify = new arctic.Spotify(clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token for Strava OAuth in TypeScript\nDESCRIPTION: This code allows refreshing the OAuth access token using a stored refresh token, calling Arctic's `refreshAccessToken()` method. It retrieves new tokens and handles possible errors similarly to the validation process, ensuring continued authorized access to Strava's API.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/strava.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await strava.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Google OAuth Tokens in TypeScript\nDESCRIPTION: Demonstrates how to revoke a Google OAuth token (either access or refresh token) using the `revokeToken` method provided by the Arctic Google provider. Includes basic error handling for potential issues during the revocation request.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait google.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Roblox OAuth Provider with Arctic in TypeScript\nDESCRIPTION: This snippet shows how to instantiate the Arctic Roblox OAuth provider for both confidential and public clients using the client ID, client secret (or null), and redirect URI. Arctic must be installed as a TypeScript dependency. Input parameters: clientId (string), clientSecret (string or null), and redirectURI (string). Returns a Roblox OAuth provider instance to be used for further authentication operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst roblox = new arctic.Roblox(clientId, clientSecret, redirectURI);\nconst roblox = new arctic.Roblox(clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Revoking Tokens in Roblox OAuth with Arctic in TypeScript\nDESCRIPTION: Shows how to revoke an access or refresh token using roblox.revokeToken(), which invalidates all tokens associated with the user session. This function throws on error, with handling shown for OAuth2RequestError and ArcticFetchError. Requires Arctic, an initialized roblox instance, and a token to revoke.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait roblox.revokeToken(refreshToken);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL to Retrieve User Profile and Email in Amazon Cognito using TypeScript\nDESCRIPTION: Illustrates requesting the additional `profile` and `email` scopes during authorization URL creation. These scopes allow the application to obtain user profile details and email information from Amazon Cognito's user info endpoint.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/amazon-cognito.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = cognito.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing MercadoLibre OAuth Client with Arctic SDK in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the MercadoLibre client instance using the Arctic library by providing necessary credentials such as client ID, client secret, and redirect URI. It facilitates starting the OAuth 2.0 flow and sets up the environment for subsequent authorization steps.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadolibre.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst mercadolibre = new arctic.MercadoLibre(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Dropbox OAuth Provider with Arctic\nDESCRIPTION: Setup code for initializing the Dropbox OAuth 2.0 provider with client credentials and redirect URI.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst dropbox = new arctic.Dropbox(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Synology OAuth Provider (TypeScript)\nDESCRIPTION: Demonstrates how to create a new instance of the `arctic.Synology` provider. It requires the base URL of the Synology NAS, the application ID, application secret, and the redirect URI configured in the Synology SSO Server. The `baseURL` must be the full `https` URL configured for the SSO server.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/synology.md#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst baseURL = \"https://my_synology_nas.local:5001\";\nconst baseURL = \"https://sso.nas.example.com\";\nconst synology = new arctic.Synology(baseUrl, applicationId, applicationSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing TikTok OAuth2 Provider with Arctic - TypeScript\nDESCRIPTION: Initializes a new TikTok provider instance from the Arctic library using required parameters: clientKey, clientSecret, and redirectURI. This setup is a prerequisite for all further OAuth operations. Ensure the Arctic library is installed and properly imported; required parameters are typically obtained from the TikTok developer portal. Returns a TikTok provider object for OAuth 2.0 operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiktok.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tiktok = new arctic.TikTok(clientKey, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Notion OAuth 2.0 Authorization Code in TypeScript\nDESCRIPTION: Validates the authorization code received from Notion and retrieves OAuth tokens. Handles various error scenarios by catching specific exceptions such as OAuth2RequestError and ArcticFetchError. Note that Notion only returns an access token without expiration information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/notion.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await notion.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with Arctic.js (TypeScript)\nDESCRIPTION: This snippet shows how to create an authorization URL for the DonationAlerts OAuth 2.0 flow using the `arctic` library. It generates a state for CSRF protection and defines the requested scopes (e.g., `oauth-user-show`). The `createAuthorizationURL` method returns the URL to redirect the user to.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/donation-alerts.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"oauth-user-show\"];\nconst url = donationAlerts.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing FortyTwo Provider in TypeScript\nDESCRIPTION: Imports the 'arctic' library and initializes the `FortyTwo` OAuth 2.0 provider. Requires the client ID, client secret, and redirect URI obtained from 42 School.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/42.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst fortyTwo = new arctic.FortyTwo(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching Gitea User Profile with Access Token in TypeScript\nDESCRIPTION: Demonstrates how to use the obtained access token to make an authenticated request to Gitea's API and retrieve the user's profile information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitea.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://gitea.com/user\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Twitter Authorization URL (Offline Access Scope) (TypeScript)\nDESCRIPTION: Generates the authorization URL requesting the `offline.access` scope, which is required to obtain a refresh token. The URL includes state for CSRF protection and a code verifier for PKCE flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"offline.access\"];\nconst url = twitter.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Spotify Authorization URL (Public) - TypeScript\nDESCRIPTION: Generates the authorization URL for a public client. Requires a state string, a PKCE code verifier, and an array of desired scopes. PKCE is mandatory for public clients.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/spotify.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"user-read-email\", \"user-read-private\"];\nconst url = spotify.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating LinkedIn OAuth Authorization URL with State and Scopes in TypeScript\nDESCRIPTION: Generates an authorization URL for LinkedIn OAuth 2.0 using the Arctic LinkedIn client instance. This snippet demonstrates creating a unique state parameter to correlate requests and specifying scopes such as \"openid\" and \"profile\" to control requested user data permissions. The resulting URL directs users to LinkedIn's authorization page.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"openid\", \"profile\"];\nconst url = linkedin.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL with OpenID Scope in Roblox OAuth (TypeScript)\nDESCRIPTION: Displays how to request the OpenID scope from Roblox, enabling retrieval of an ID token or using the userinfo endpoint for user identification. Requires Arctic and an initialized roblox instance. Key parameters: state (string), codeVerifier (string), scopes ([\"openid\"]). Output: authorization URL for the OpenID Connect flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = roblox.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Installing Arctic v3 via npm\nDESCRIPTION: This code snippet demonstrates how to install the latest version of the Arctic library using npm. It's a prerequisite for using any of the Arctic v3 features. No specific parameters are required.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v3.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install arctic@latest\n```\n\n----------------------------------------\n\nTITLE: Revoking Coinbase OAuth 2.0 Tokens in TypeScript\nDESCRIPTION: Invalidates an access or refresh token when it's no longer needed. This enhances security by preventing tokens from being used after a user logs out or uninstalls an application.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/coinbase.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait coinbase.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Box User Profile with Bearer Token in JavaScript\nDESCRIPTION: Retrieves the authenticated user's profile information from the Box API using the access token obtained during OAuth flow. It performs a fetch request to the /users/me endpoint and parses the JSON response. Requires a valid accessToken and standard fetch API support. Outputs a user object representing the current Box user.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/box.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst response = await fetch(\"https://api.box.com/2.0/users/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL - TypeScript\nDESCRIPTION: This snippet demonstrates how to create an authorization URL for Apple OAuth. It utilizes the `arctic` library.  It takes a `state` generated using `arctic.generateState()` and an array of scopes (`scopes`). The function returns the authorization URL to redirect the user for authentication.  The `state` parameter is crucial for CSRF protection.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/apple.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"name\", \"email\"];\nconst url = apple.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL - TypeScript\nDESCRIPTION: This code creates the authorization URL needed to redirect users for the OAuth flow. It generates a `state` and `codeVerifier` for security purposes and defines the required `scopes`. The `createAuthorizationURL()` method generates the full URL that users are redirected to for authorization.  It takes a `state`, `codeVerifier`, and an array of `scopes` as input.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/zoom.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"user:read:email\"];\nconst url = zoom.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching Twitter User Profile (TypeScript)\nDESCRIPTION: Demonstrates how to use the obtained access token to make a request to the Twitter API v2 `/users/me` endpoint to fetch the authenticated user's profile. Requires the `users.read` and `tweet.read` scopes during authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.twitter.com/2/users/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Getting User Profile in TypeScript\nDESCRIPTION: This code snippet demonstrates how to request a user profile from Epic Games using the `/v2/userInfo` endpoint. It shows how to define scopes needed to retrieve profile and how to use the `fetch` API to call the endpoint with authorization header containing the access token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/epicgames.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"basic_profile\"];\nconst url = epic.createAuthorizationURL(state, scopes);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.epicgames.dev/epic/oauth/v2/userInfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Decoding KeyCloak ID Token in TypeScript\nDESCRIPTION: Retrieves the ID token from the `OAuth2Tokens` object obtained after code validation and decodes its payload using `arctic.decodeIdToken()`. This allows access to user claims contained within the ID token, provided the `openid` scope was requested.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await keycloak.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Creating Salesforce OAuth Authorization URL with Arctic and PKCE in TypeScript\nDESCRIPTION: Shows how to generate a Salesforce OAuth 2.0 authorization URL with PKCE using the Arctic library. Requires installed 'arctic' package, salesforce provider instance, and generation of state and code verifier using Arctic helpers. Scopes parameter should be an array of OAuth scopes like 'openid' and 'profile'. Returns a properly formatted URL to initiate the OAuth flow with user login and consent.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = salesforce.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Installing Arctic Package via npm Shell Command\nDESCRIPTION: This shell snippet provides the command required to install the Arctic library as a dependency in a project. It uses the Node package manager (npm) to add 'arctic' to the project's node_modules. No additional parameters are required, and execution in a terminal within the project directory will install the package.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/index.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install arctic\n```\n\n----------------------------------------\n\nTITLE: Initializing Line OAuth Provider with Arctic in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Line OAuth 2.0 provider using the Arctic library in TypeScript. It requires the arctic library as a dependency and expects valid client ID, client secret, and redirect URI values. Inputs are clientId, clientSecret, and redirectURI, and the output is a configured Line provider object for subsequent OAuth operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst line = new arctic.Line(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching Atlassian User Profile via REST API - TypeScript\nDESCRIPTION: This snippet shows how to fetch the authenticated user's public profile from Atlassian using a valid access token and the '/me' REST endpoint. No third-party dependencies are required beyond TypeScript's standard API libraries. It expects a Bearer token and returns the parsed JSON user object. The endpoint must be permitted by the scopes granted to the access token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/atlassian.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.atlassian.com/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Defining the `generateState` Function Signature in TypeScript\nDESCRIPTION: This TypeScript code snippet defines the function signature for `generateState`. According to the surrounding text, this function uses the Web Crypto API to generate a cryptographically secure random state. It takes no arguments and is expected to return a string.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/generateState.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction generateState(): string;\n```\n\n----------------------------------------\n\nTITLE: Creating OpenID Connect Authorization URL with Polar in TypeScript\nDESCRIPTION: This snippet illustrates generating an authorization URL for OpenID Connect flows by specifying the 'openid' scope. It is used together with PKCE (codeVerifier) to obtain an ID token. The output is a properly scoped authorization URL suitable for OpenID Connect authentication. No additional dependencies besides 'arctic' are required.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = polar.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Reddit Authorization URL with Arctic in TypeScript\nDESCRIPTION: Generates a CSRF state parameter, defines the required OAuth scopes (e.g., 'edit', 'read'), and uses the `createAuthorizationURL` method of the initialized Reddit provider to construct the URL for redirecting the user to Reddit for authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/reddit.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"edit\", \"read\"];\nconst url = reddit.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Atlassian Authorization URL with Arctic - TypeScript\nDESCRIPTION: This snippet shows how to generate a secure authorization URL for Atlassian OAuth using Arctic. It requires the 'arctic' package and an initialized provider. The example creates a state value for CSRF protection, defines the required scopes as an array, and calls 'createAuthorizationURL'. Inputs are the state and scopes; output is a valid Atlassian OAuth authorization URL.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/atlassian.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"write:jira-work\", \"read:jira-user\"];\nconst url = atlassian.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Decode ID Token (TypeScript)\nDESCRIPTION: This snippet decodes the ID token received from Auth0 after validation using `arctic.decodeIdToken`. This is used to get the user's claims.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await auth0.validateAuthorizationCode(code, codeVerifier);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Extracting Reddit Refresh Token after Validation in TypeScript\nDESCRIPTION: Illustrates how to access the refresh token from the `OAuth2Tokens` object returned by `validateAuthorizationCode`. This is only possible if a refresh token was requested by setting the 'duration' parameter to 'permanent' in the authorization URL.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/reddit.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await reddit.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL in TypeScript\nDESCRIPTION: This snippet shows how to create an authorization URL for the osu! OAuth 2.0 provider. It generates a state, defines the scopes, and then calls the `createAuthorizationURL` method. The `state` parameter protects against CSRF attacks, and scopes define the permissions requested. The output is the URL to redirect the user to authorize the application.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/osu.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"public\", \"friends.read\"];\nconst url = osu.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Validate Authorization Code for Auth0 (Public Client - TypeScript)\nDESCRIPTION: This snippet demonstrates validating the authorization code for a public client, including the code verifier to ensure proper PKCE flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await auth0.validateAuthorizationCode(code, codeVerifier);\n```\n\n----------------------------------------\n\nTITLE: Handling Non-RFC Compliant Expiration Time in Naver OAuth 2.0\nDESCRIPTION: Handles Naver's non-standard implementation of the expires_in field, which returns a string instead of a number as required by RFC 6749. This snippet shows how to properly parse the expiration time.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/naver.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await bungie.validateAuthorizationCode(code);\n// Should be returned as a number per RFC 6749, but returns it as a string.\nif (\"expires_in\" in tokens.data && typeof tokens.data.expires_in === \"string\") {\n\tconst accessTokenExpiresIn = Number(tokens.data.expires_in);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Tumblr User Profile Information from API - TypeScript\nDESCRIPTION: Demonstrates how to use the OAuth 2.0 access token to fetch the authenticated user's profile from Tumblr's '/user/info' API endpoint. Requires a valid access token and makes a fetch request with appropriate authorization headers. Returns the user's profile information as a parsed JSON object. No additional libraries besides 'fetch' are necessary.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tumblr.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.tumblr.com/v2/user/info\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Dropbox OAuth\nDESCRIPTION: Generate an authorization URL with state parameter and required scopes for Dropbox OAuth 2.0 authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"account_info.read\", \"files.content.read\"];\nconst url = dropbox.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Arctic Linear OAuth 2.0 Client in TypeScript\nDESCRIPTION: Initializes a new Linear OAuth 2.0 client instance using the Arctic library by providing the client ID, client secret, and redirect URI. This setup is required before performing any OAuth authentication steps with Linear.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linear.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst linear = new arctic.Linear(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Configuring Scopes for GitLab User Profile Retrieval (Authorization URL) (TypeScript)\nDESCRIPTION: This snippet prepares the scopes array and generates an authorization URL with 'read_user' to permit the app to access the user profile endpoint. The 'createAuthorizationURL' method is invoked with the generated state and desired scopes. Used in preparation for profile fetches from the GitLab API. Input is a scopes array with 'read_user' and the state, and the output is the correctly-scoped URL for end-user authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitlab.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"read_user\"];\nconst url = gitlab.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching Dribbble User Profile with OAuth2 Bearer Token (TypeScript)\nDESCRIPTION: This snippet shows how to fetch the authenticated Dribbble user profile using a previously obtained OAuth 2.0 access token. It sends a GET request to the 'https://api.dribbble.com/v2/user' endpoint with the Authorization header set to 'Bearer <accessToken>'. Dependencies are a valid access token and the fetch API. The expected output is the user's JSON profile data. Ensure error handling in production use for failed fetches or invalid tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dribbble.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.dribbble.com/v2/user\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Patreon OAuth Provider in TypeScript\nDESCRIPTION: Imports the Arctic library and initializes the Patreon OAuth 2.0 provider by creating a new instance of `arctic.Patreon`. Requires the Patreon client ID, client secret, and the configured redirect URI as arguments.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/patreon.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst patreon = new arctic.Patreon(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Requesting Tumblr OAuth Authorization URL with Refresh Token Scope - TypeScript\nDESCRIPTION: Provides an example of configuring scopes to request offline access (i.e., refresh tokens) during the Tumblr OAuth flow using Arctic. Requires an active state string and the 'offline_access' scope. Produces an authorization URL that, when followed, ensures generation of a refresh token for subsequent token renewal operations. The Arctic library must be pre-initialized.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tumblr.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"offline_access\"];\nconst url = tumblr.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile in TypeScript\nDESCRIPTION: This snippet demonstrates fetching a user profile from the osu! API using the access token.  It makes a `fetch` request to the `/me` endpoint and includes the `Authorization` header with the access token. The response is then parsed as JSON to retrieve the user's profile data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/osu.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://osu.ppy.sh/api/v2/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Generating Intuit Auth URL for OpenID Connect (TypeScript)\nDESCRIPTION: Shows how to generate an Intuit authorization URL specifically for OpenID Connect by including the `openid` scope using Arctic's `createAuthorizationURL` method in TypeScript. This allows retrieving an ID token upon successful authorization.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = intuit.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching Lichess User Profile Data using Access Token in TypeScript\nDESCRIPTION: This snippet illustrates how to make an authenticated HTTP GET request to the Lichess /api/account endpoint to retrieve user profile information. The call requires setting the Authorization header with a Bearer token obtained from OAuth2 token validation. The response JSON is parsed to obtain the user object containing profile details. No special dependencies except a working fetch API and a valid access token are required.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/lichess.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst lichessUserResponse = await fetch(\"https://lichess.org/api/account\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await lichessUserResponse.json();\n```\n\n----------------------------------------\n\nTITLE: Extracting PKCS#8 Key from PEM Certificate - TypeScript\nDESCRIPTION: This code snippet extracts the PKCS#8 private key from a PEM-encoded certificate. It uses the `@oslojs/encoding` library to decode the base64 encoded key. The PEM certificate string is transformed by removing the header, footer, carriage returns, and newline characters. The result is then base64 decoded to produce the private key.  This is a utility function to retrieve the PKCS#8 key.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/apple.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as encoding from \"@oslojs/encoding\";\n\nconst certificate = `-----BEGIN PRIVATE KEY-----\nTmV2ZXIgZ29ubmEgZ2l2ZSB5b3UgdXANCk5ldmVyIGdvbm5hIGxldCB5b3UgZG93bg0KTmV2ZXIgZ29ubmEgcnVuIGFyb3VuZCBhbmQgZGVzZXJ0IHlvdQ0KTmV2ZXIgZ29ubmEgbWFrZSB5b3UgY3J5DQpOZXZlciBnb25uYSBzYXkgZ29vZGJ5ZQ0KTmV2ZXIgZ29ubmEgdGVsbCBhIGxpZSBhbmQgaHVydCB5b3U\n-----END PRIVATE KEY-----`;\nconst privateKey = encoding.decodeBase64IgnorePadding(\n\tcertificate\n\t\t.replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n\t\t.replace(\"-----END PRIVATE KEY-----\", \"\")\n\t\t.replaceAll(\"\\r\", \"\")\n\t\t.replaceAll(\"\\n\", \"\")\n\t\t.trim()\n);\n```\n\n----------------------------------------\n\nTITLE: Checking for Refresh Token Existence in Arctic v2 (TypeScript)\nDESCRIPTION: Illustrates how to safely check if a refresh token exists within the `OAuth2Token` object using the `hasRefreshToken()` method before attempting to access it with `refreshToken()`. This prevents potential errors if the `refresh_token` field is not present in the OAuth response.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v2.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (tokens.hasRefreshToken()) {\n\tconst refreshToken = tokens.refreshToken();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Figma OAuth 2.0 Client with Arctic Library in TypeScript\nDESCRIPTION: Sets up the Figma OAuth client by importing the 'arctic' module and creating an instance with client credentials. This is essential for starting the OAuth flow and managing tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/figma.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst figma = new arctic.Figma(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Decoding Yahoo ID Token with Arctic (TypeScript)\nDESCRIPTION: After validating the authorization code obtained with the 'openid' scope, this snippet extracts the ID token from the `OAuth2Tokens` object returned by `validateAuthorizationCode`. It then uses `arctic.decodeIdToken()` to decode the token's payload and access user claims.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await yahoo.validateAuthorizationCode(code);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Initializing Dribbble OAuth Provider with Arctic (TypeScript)\nDESCRIPTION: This snippet demonstrates how to import the Arctic library and create a new Dribble provider instance with client ID, client secret, and redirect URI. It requires 'arctic' as a project dependency. The constructor parameters (clientId, clientSecret, redirectURI) are credentials from your Dribbble app settings. The result is an authenticated Arctic provider instance used for OAuth operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dribbble.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst dribble = new arctic.Dribble(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Revoking Tokens in TypeScript\nDESCRIPTION: This code revokes an authorization token. It utilizes the `revokeToken()` method, passing the token to be revoked. This action can throw errors, which are handled inside a try-catch block. Common errors are related to OAuth 2.0 requests and failed fetch calls.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/epicgames.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait epic.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetch Userinfo Endpoint (TypeScript)\nDESCRIPTION: This snippet demonstrates how to fetch user information from the Auth0 `/userinfo` endpoint using the access token. The `Authorization` header is set with the `Bearer` token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://xxx.auth.com/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Extracting Tokens in Roblox OAuth (TypeScript)\nDESCRIPTION: Illustrates the process for exchanging an authorization code and PKCE code verifier for OAuth2 tokens (access, refresh, and ID tokens) using Arctic's Roblox provider. Handles error conditions with specific exceptions like OAuth2RequestError and ArcticFetchError. Required dependencies: Arctic, initialized roblox instance, valid authorization code, matching code verifier. Returns: OAuth2Tokens object with methods to extract access and refresh tokens and expiration. Throws on error.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/roblox.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await roblox.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Synology User Info (TypeScript)\nDESCRIPTION: Describes how to retrieve user profile information using the standard `fetch` API after obtaining an access token. It demonstrates sending a GET request to the `/webman/sso/SSOUserInfo.cgi` endpoint on the Synology NAS, including the access token in the `Authorization: Bearer` header. The response is expected to be JSON containing user details.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/synology.md#_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst user_info = await fetch(\"https://example.com/webman/sso/SSOUserInfo.cgi\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Revoking Mastodon Token and Handling Errors in TypeScript\nDESCRIPTION: This code shows how to revoke an access or refresh token using `mastodon.revokeToken()`. It attempts to send a revocation request to the Mastodon instance. Similar to validation, it includes error handling for `OAuth2RequestError` (e.g., invalid token) and `ArcticFetchError` (network issues).\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mastodon.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait mastodon.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t} else if (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Strava Authorization URL with OAuth 2.0 and Arctic in TypeScript\nDESCRIPTION: This snippet demonstrates generating a state parameter and creating an authorization URL with specific scopes using the Arctic Strava client. It initiates the OAuth consent flow by directing users to authorize the app, requesting permissions like activity write and read access.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/strava.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"activity:write\", \"read\"];\nconst url = strava.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Info from Dropbox API\nDESCRIPTION: Make a request to the Dropbox userinfo endpoint using the obtained access token to retrieve user information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://api.dropboxapi.com/2/openid/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Fetching Reddit User Profile using Access Token in TypeScript\nDESCRIPTION: Shows how to use the obtained access token to make an authenticated request to the Reddit API's `/api/v1/me` endpoint to retrieve the user's profile information. This uses the standard `fetch` API with an Authorization header.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/reddit.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://oauth.reddit.com/api/v1/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing the Tumblr OAuth 2.0 Provider with Arctic - TypeScript\nDESCRIPTION: Illustrates how to initialize a new Tumblr provider instance using the Arctic library in TypeScript. Requires the 'arctic' npm package as a dependency and expects the caller to supply 'clientId', 'clientSecret', and 'redirectURI' parameters. On success, constructs a configured OAuth provider instance for subsequent authentication actions. No output is produced beyond the Tumblr instance.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tumblr.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst patreon = new arctic.Tumblr(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile from Naver API with OAuth Access Token\nDESCRIPTION: Fetches the authenticated user's profile information from Naver's API using the access token obtained during authentication. Makes a request to the /v1/nid/me endpoint with proper authorization headers.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/naver.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://openapi.naver.com/v1/nid/me\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Lichess OAuth 2.0 Provider in TypeScript\nDESCRIPTION: This snippet shows how to import the Arctic library and instantiate a Lichess OAuth 2.0 client using a client ID and redirect URI. It sets up the OAuth client instance required for authentication flows. Dependencies include the \"arctic\" package. Required parameters are the OAuth client ID and the redirect URI registered with Lichess.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/lichess.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst lichess = new arctic.Lichess(clientId, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Intuit OAuth 2.0 Provider in TypeScript\nDESCRIPTION: Demonstrates how to initialize the Intuit OAuth 2.0 provider using the `arctic` library in TypeScript. Requires importing the `arctic` library and providing the `clientId`, `clientSecret`, and `redirectURI` to the `Intuit` constructor.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst intuit = new arctic.Intuit(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Battle.net Authorization Code in TypeScript\nDESCRIPTION: Illustrates validating the authorization code received from Battle.net using `validateAuthorizationCode`. It uses a try-catch block to handle potential errors like `OAuth2RequestError` or `ArcticFetchError`. On success, it returns OAuth2Tokens containing the access token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/battlenet.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await battlenet.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking TikTok OAuth2 Token with Arctic - TypeScript\nDESCRIPTION: Calls revokeToken on the Arctic TikTok provider instance, passing the token to be revoked (typically a refreshToken). Handles possible errors using instanceof checks for granular error identification. Revocation must be enabled in TikTok developer settings for this operation to succeed. This operation does not return a value but will throw on error; all prerequisites and error classes are the same as for previous token management methods.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiktok.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait tiktok.revokeToken(refreshToken);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth Tokens using Arctic in TypeScript\nDESCRIPTION: Calls the revokeToken() method on the Authentik client to invalidate an OAuth token. Accepts a token string as input and may throw errors analogous to those from other OAuth operations, such as request or fetch errors. No output on success; errors should be handled according to their type using instance checks.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/authentik.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait authentik.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Polar OAuth2 Provider with Arctic in TypeScript\nDESCRIPTION: This snippet initializes the Polar OAuth2 provider from the Arctic library by importing the core Arctic module and creating a new Polar instance. Dependencies include the 'arctic' package, and key parameters are 'clientId', 'clientSecret', and 'redirectURI'—all required for confidential OAuth clients. This sets up the provider instance for use in subsequent authorization flows.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst polar = new arctic.Polar(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Requesting User Email Scope and Fetching User Email from Lichess API in TypeScript\nDESCRIPTION: This two-part snippet first demonstrates including the special \"email:read\" scope when creating the OAuth authorization URL to gain permission for email access. Then it shows fetching the user's email from the Lichess /api/account/email endpoint using the OAuth access token in the Authorization header. The email data is returned as JSON. This requires prior consent via the authorization URL with the email scope and a valid access token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/lichess.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"email:read\"];\nconst url = lichess.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://lichess.org/api/account/email\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst email = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Revoking Intuit Tokens with Arctic (TypeScript)\nDESCRIPTION: Demonstrates how to revoke an Intuit access or refresh token using Arctic's `revokeToken` method in TypeScript. This asynchronous function takes the token string as input and can throw the same errors as `validateAuthorizationCode` on failure (e.g., if the token is invalid or expired).\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n\tawait intuit.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Response Mode to Form Post - TypeScript\nDESCRIPTION: This snippet modifies the authorization URL to set the `response_mode` to `form_post`.  This setting makes Apple send a POST request to the callback URL, including the user's data in the request body. This is different from the default 'query' response mode.  This functionality is only accessible the first time a user signs in.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/apple.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst url = apple.createAuthorizationURL(state, scopes);\nurl.searchParams.set(\"response_mode\", \"form_post\");\n```\n\n----------------------------------------\n\nTITLE: Fetching OpenID Connect Userinfo from Polar using Access Token (TypeScript)\nDESCRIPTION: This snippet demonstrates how to fetch the end user profile from Polar's OpenID Connect 'userinfo' endpoint via HTTP. It uses the accessToken as a Bearer token in the Authorization header. The output is the parsed JSON user object. No dependencies beyond standard fetch API are required, though prior authentication is expected.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://docs.polar.sh/api/v1/oauth2/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Start.gg OAuth with Arctic in TypeScript\nDESCRIPTION: Sets up the Start.gg OAuth 2.0 provider by creating a new instance with client credentials and redirect URI.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/startgg.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst startgg = new arctic.StartGG(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Defining Code Challenge Methods Enum with TypeScript\nDESCRIPTION: Defines the CodeChallengeMethod enum with two members: S256 (representing SHA-256 hashing) and Plain (representing un-hashed). This enum is typically used in OAuth 2.0 PKCE implementations to specify how the code challenge should be computed and verified. No external dependencies are required; usage involves type-safe selection of supported methods. Inputs are method names (S256 or Plain), output is the typed enum value. Limitations: Only includes two standard PKCE methods; cannot be extended without modifying the enum.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/CodeChallengeMethod.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum CodeChallengeMethod {\n\tS256,\n\tPlain\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Synology Authorization Code (TypeScript)\nDESCRIPTION: Illustrates how to exchange the authorization code (received in the redirect URI) for access tokens and potentially other tokens using the `validateAuthorizationCode` method. It includes error handling for common OAuth-related issues like invalid codes (`OAuth2RequestError`), network problems (`ArcticFetchError`), and unexpected responses. The method returns an `OAuth2Tokens` object on success, containing the access token and its expiration time.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/synology.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await synology.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MyAnimeList with Arctic.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the MyAnimeList OAuth provider using Arctic.js. It requires the client ID and client secret obtained from MyAnimeList, and optionally a redirect URI. The redirect URI should match the one configured in your MyAnimeList application settings. Two initialization methods are provided: one without redirectURI, and another with redirectURI.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/myanimelist.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst mal = new arctic.MyAnimeList(clientId, clientSecret, null);\nconst mal = new arctic.MyAnimeList(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching User Profile Using Line OpenID Connect Userinfo Endpoint in TypeScript\nDESCRIPTION: This code demonstrates retrieving a user profile from the Line OpenID Connect userinfo endpoint by making an authenticated fetch request. Dependencies include a valid accessToken obtained via prior authentication. The inputs are the accessToken and the userinfo endpoint URL. The output is a JSON object containing the user's Line profile data; proper error handling for fetch is recommended.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.line.me/oauth2/v2.1/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Validating AniList Authorization Code with Arctic in TypeScript\nDESCRIPTION: Illustrates validating the authorization code received from AniList after user approval using `aniList.validateAuthorizationCode(code)`. It includes basic error handling for potential issues like invalid codes or network errors using specific Arctic error types (`OAuth2RequestError`, `ArcticFetchError`). On success, it returns tokens containing the access token (AniList doesn't provide refresh tokens or expiration).\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/anilist.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await aniList.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Cognito with custom domain\nDESCRIPTION: This snippet demonstrates how to initialize an Amazon Cognito provider with a custom domain. The `domain` parameter should not include the protocol or path segments. Requires the Arctic library and an Amazon Cognito provider configured.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v3.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\n// Must not include the protocol or path segments\nconst domain = \"my-domain.com\";\nconst cognito = new arctic.AmazonCognito(domain, clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Box OAuth Access Token with Arctic in TypeScript\nDESCRIPTION: Demonstrates refreshing an access token using Arctic's Box provider and a refresh token. The process mirrors initial code validation and covers identical error handling branches for OAuth2 and fetch-related issues. Inputs are a valid refreshToken and a prepared box instance. The output is refreshed tokens, including new access and refresh tokens and expiration details if provided by Box.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/box.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await box.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code in TypeScript\nDESCRIPTION: This snippet demonstrates how to validate an authorization code received after a user grants access. It uses the `validateAuthorizationCode()` method of the `twitch` object to exchange the code for tokens. It also showcases error handling for potential exceptions like `OAuth2RequestError` and `ArcticFetchError`.  The `try...catch` block handles potential failures during the token exchange process.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await twitch.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Authentik Client with Arctic in TypeScript\nDESCRIPTION: Initializes an instance of the Arctic Authentik client by specifying the Authentik instance base URL, client ID, client secret (or null for public clients), and redirect URI. Requires the \"arctic\" npm package and appropriate Authentik client credentials. Expected input parameters: baseURL (string), clientId (string), clientSecret (string | null), redirectURI (string). Returns an instance of the Authentik client for further OAuth operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/authentik.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst baseURL = \"https://my-app.com/authentik\";\nconst authentik = new arctic.Authentik(baseURL, clientId, clientSecret, redirectURI);\nconst authentik = new arctic.Authentik(baseURL, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code with Arctic.js\nDESCRIPTION: This snippet validates the authorization code received from the OAuth provider using Arctic.js. It retrieves the code and state from the request, compares the state with the stored state (cookie), and then uses `validateAuthorizationCode()` to get tokens. Error handling is included for different types of errors that may occur.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst code = request.url.searchParams.get(\"code\");\nconst state = request.url.searchParams.get(\"state\");\n\nconst storedState = getCookie(\"state\");\n\nif (code === null || storedState === null || state !== storedState) {\n\t// 400\n\tthrow new Error(\"Invalid request\");\n}\n\ntry {\n\tconst tokens = await github.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Properties Interface for OAuth2Tokens in TypeScript\nDESCRIPTION: Defines the `Properties` interface associated with the OAuth2Tokens entity. It specifies a single property `data` of type `object`, which holds the `JSON.parse()`-ed successful token response body.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Properties {\n\tdata: object;\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Gitea Access Tokens in TypeScript\nDESCRIPTION: Demonstrates how to refresh expired access tokens using a refresh token, including error handling for various failure scenarios like invalid tokens or network issues.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitea.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await gitea.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code in TypeScript\nDESCRIPTION: This code validates an authorization code using the `validateAuthorizationCode` method. It attempts to exchange the provided `code` for access and refresh tokens. It demonstrates how to access token information and how to handle different error types that could be thrown during the process.  The code also shows accessing expiration details from the token data.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/epicgames.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await epicgames.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await epicgames.validateAuthorizationCode(code);\nif (\"refresh_expires\" in tokens.data && typeof tokens.data.refresh_expires === \"number\") {\n\tconst refreshTokenExpiresInSeconds = tokens.data.refresh_expires;\n}\n\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await epicgames.validateAuthorizationCode(code);\nif (\"refresh_expires_at\" in tokens.data && typeof tokens.data.refresh_expires_at === \"string\") {\n\tconst refreshTokenExpiresAt = new Date(tokens.data.refresh_expires_at);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the createAuthorizationURLWithPKCE Function in TypeScript\nDESCRIPTION: This snippet provides the TypeScript function definition for `createAuthorizationURLWithPKCE`. It takes the authorization endpoint URL, state, code challenge method, code verifier, and an array of scopes as parameters to construct an authorization URL for the OAuth 2.0 PKCE flow. The `scope` query parameter is omitted if the `scopes` array is empty.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Client/createAuthorizationURLWithPKCE.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n//$ CodeChallengeMethod=/reference/main/CodeChallengeMethod\nfunction createAuthorizationURLWithPKCE(\n\tauthorizationEndpoint: string,\n\tstate: string,\n\tcodeChallengeMethod: $$CodeChallengeMethod,\n\tcodeVerifier: string,\n\tscopes: string[]\n);\n```\n\n----------------------------------------\n\nTITLE: Checking for Refresh Token in OAuth2RequestResult using TypeScript\nDESCRIPTION: Declares the hasRefreshToken function, which returns a boolean indicating whether a refresh token is present when the result contains an error as a string. Designed for use in OAuth2 integrations, this function requires no parameters and is expected to be used as part of an OAuth2RequestResult object in TypeScript projects that manage token renewal or error handling. The return value is a boolean, where true signifies the presence of a valid refresh token; no required dependencies are specified beyond a TypeScript environment.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/hasRefreshToken.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction hasRefreshToken(): boolean;\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code and Handling OAuth Errors in TypeScript\nDESCRIPTION: Validates an OAuth 2.0 authorization code against Linear's authentication server using Arctic's validateAuthorizationCode method. Returns OAuth2Tokens on success or throws detailed errors such as OAuth2RequestError for invalid credentials or ArcticFetchError for network failures. Demonstrates async usage with try-catch and provides access to the access token and its expiration.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linear.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await linear.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Polyfilling Web Crypto API for Arctic in Node.js 18 with TypeScript\nDESCRIPTION: This snippet shows how to polyfill the Web Crypto API for Node.js 18 using TypeScript to ensure compatibility when using the Arctic library. The dependency is the built-in 'node:crypto' module from Node.js. The code requires assigning the imported 'webcrypto' object to 'globalThis.crypto'. This polyfill step is only necessary for Node.js 18; other environments like Node.js 20, Bun, Deno, and Cloudflare Workers provide native support.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/index.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { webcrypto } from \"node:crypto\";\n\nglobalThis.crypto = webcrypto as Crypto;\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth2 Token with Arctic in TypeScript\nDESCRIPTION: This example shows how to revoke an OAuth2 token by calling OAuth2Client.revokeToken() with the revocation endpoint and the token to be revoked. Includes structured error handling for invalid tokens, credentials, or fetch failures. Upon success, the token is invalidated. Requires a correctly-initialized Arctic OAuth2Client and all OAuth2 RFC endpoints be properly configured.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/generic-oauth2-client.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tawait client.revokeToken(tokenRevocationEndpoint, token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid tokens, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Salesforce User Profile and Email Scopes with Arctic in TypeScript\nDESCRIPTION: Shows how to compose the authorization URL for Salesforce OAuth to request both 'profile' and 'email' scopes in addition to 'openid'. These scopes allow applications to access the user's profile and email address via OpenID Connect. Prerequisites include valid state and codeVerifier variables and an initialized Salesforce provider. The URL generated is suitable for redirecting users to initiate the consent flow for extended user information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\", \"email\"];\nconst url = salesforce.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token - TypeScript\nDESCRIPTION: This snippet demonstrates refreshing an expired access token using the refresh token. The `refreshAccessToken()` method is called with the refresh token.  The access token, its expiration time, and the possibly updated refresh token are extracted from the response. It uses a try-catch block to handle potential errors.  Similar to the validation, it catches `OAuth2RequestError` and `ArcticFetchError`.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/zoom.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await zoom.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code (TypeScript)\nDESCRIPTION: This snippet demonstrates how to validate the authorization code received from MyAnimeList after the user grants permission. It uses `mal.validateAuthorizationCode()` to exchange the authorization code and code verifier for an access token and refresh token. Error handling is included for potential exceptions like `OAuth2RequestError` and `ArcticFetchError`. Successful validation provides access token, expiration, and refresh token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/myanimelist.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await mal.validateAuthorizationCode(code, codeVerifier);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Defining accessTokenExpiresAt Method Signature (TypeScript)\nDESCRIPTION: This TypeScript snippet provides the type definition for the `accessTokenExpiresAt` method. It shows that the method takes no arguments and returns a `Date` object, representing the token's expiration time. The surrounding text notes that the method relies on the `expires_in` field and throws an error if that field is missing or contains a non-numeric value.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Tokens/accessTokenExpiresAt.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction accessTokenExpiresAt(): Date;\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token Using Polar OAuth2 Provider in TypeScript\nDESCRIPTION: This code illustrates how to obtain a new access token using a refresh token with Polar and Arctic. Requires the 'arctic' package and the 'refreshToken' value. The snippet includes robust error handling for invalid tokens and network issues via Arctic's error classes. Output includes the new access token and its expiration.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await polar.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Yahoo Authorization Code with Arctic (TypeScript)\nDESCRIPTION: Exchanges the authorization code received from Yahoo for access and refresh tokens using `yahoo.validateAuthorizationCode()`. Handles potential errors like `OAuth2RequestError`, `ArcticFetchError`, `UnexpectedResponseError`, or `UnexpectedErrorResponseBodyError`. Extracts the access token, its expiration time, and the refresh token upon success.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await yahoo.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile from Kick API\nDESCRIPTION: Requests user profile data from Kick's REST API using the access token obtained from the OAuth 2.0 flow. Requires the user:read scope.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kick.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"user:read\"];\nconst url = kick.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await kick.validateAuthorizationCode(code, codeVerifier);\n\nconst response = await fetch(\"https://api.kick.com/public/v1/users\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${tokens.accessToken()}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Creating Tumblr OAuth Authorization URL with Scopes - TypeScript\nDESCRIPTION: Demonstrates generating a state string and creating a Tumblr authorization URL with specified scopes using Arctic in TypeScript. Requires the 'arctic' module and a valid Tumblr provider instance. The 'generateState()' function helps prevent CSRF attacks, while 'createAuthorizationURL' assembles the OAuth 2.0 URL for user redirection based on chosen scopes. Returns a URL string, intended to be presented to the user.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tumblr.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"basic\", \"write\"];\nconst url = tumblr.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2RequestError class extending Error in TypeScript\nDESCRIPTION: This snippet details a class that extends the built-in Error class to represent errors returned from OAuth 2.0 providers. It captures specific properties associated with OAuth 2.0 error responses, enabling structured error handling and easier debugging in OAuth-related workflows.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2RequestError.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface Properties {\n\tcode: string;\n\tdescription: string | null;\n\turi: string | null;\n\tstate: string | null;\n}\n\n// Represents an OAuth 2.0 error response, extending the Error class\nclass OAuth2RequestError extends Error {\n\tpublic properties: Properties;\n\n\tconstructor(properties: Properties, message?: string) {\n\t\tsuper(message || `OAuth2 Error: ${properties.code}`);\n\t\tthis.name = \"OAuth2RequestError\";\n\t\tthis.properties = properties;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Authorization URL for Polar OAuth2 in TypeScript\nDESCRIPTION: This snippet demonstrates how to programmatically generate a Polar OAuth2 authorization URL using Arctic utilities. Dependencies include the 'arctic' package. It uses 'generateState()' for CSRF protection and 'generateCodeVerifier()' for PKCE support, then builds an authorization URL with the required scopes. Inputs are the OAuth2 scopes and outputs the constructed URL for user redirection.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/polar.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = polar.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Atlassian OAuth Provider with Arctic - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Atlassian OAuth provider using the Arctic TypeScript library. Required dependencies include the 'arctic' package. It constructs an instance of the Arctic Atlassian class with the application client ID, client secret, and redirect URI. The resulting provider instance is used for subsequent OAuth operations. Inputs are the client credentials and redirect URI; output is an initialized provider object for authentication flows.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/atlassian.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst atlassian = new arctic.Atlassian(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Revoking Tokens for Discord OAuth 2.0 in TypeScript\nDESCRIPTION: Revokes all tokens associated with the current authorization by passing the token to `revokeToken()`. Includes error handling for request and fetch failures.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/discord.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait discord.revokeToken(token);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with PKCE using Arctic in TypeScript\nDESCRIPTION: Generates the OAuth 2.0 authorization URL with PKCE support by creating a state and code verifier. Requires the \"arctic\" package and a previously initialized Authentik client. Inputs: state (generated with arctic.generateState()), codeVerifier (arctic.generateCodeVerifier()), scopes (array of OAuth scopes). The output is a URL string that initiates the OAuth authorization flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/authentik.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = authentik.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Extracting Tumblr OAuth Refresh Tokens After Authorization - TypeScript\nDESCRIPTION: Demonstrates retrieving access and refresh tokens after validating an authorization code using Arctic's Tumblr provider. 'validateAuthorizationCode' is called with the user's code, returning a tokens object. The function provides access to the access token, its expiration time, and the refresh token, all required for authenticated API requests or refreshing tokens. Arctic is a required dependency.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tumblr.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await tumblr.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Creating Line OAuth 2.0 Authorization URL in TypeScript\nDESCRIPTION: This example shows how to generate an authorization URL for Line using Arctic's OAuth 2.0 methods. Dependencies are the arctic library and a configured Line object. Inputs include a generated state, code verifier, and scopes array. The output is an authorization URL used to redirect users to Line's login consent screen.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/line.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = line.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: OpenID Connect Scopes (TypeScript)\nDESCRIPTION: This snippet sets the scope to `openid` to leverage OpenID Connect. The `createAuthorizationURL` is used to generate the authorization URL with the specified scope.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = auth0.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Requesting Salesforce Refresh Token and Accessing Tokens with Arctic in TypeScript\nDESCRIPTION: Describes adding the 'refresh_token' scope for the Salesforce OAuth flow and exchanging codes for both access and refresh tokens using Arctic. Requires specifying 'refresh_token' in the scopes array. After validation, retrieves both the access token and the refresh token from the OAuth2Tokens object. Applicable for scenarios where long-lived sessions or token renewal is needed.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/salesforce.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"refresh_token\"];\nconst url = salesforce.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await salesforce.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\nconst refreshToken = tokens.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Generating OpenID Connect Authorization URL (openid scope) with Arctic in TypeScript\nDESCRIPTION: Creates an OpenID Connect authorization URL by specifying the 'openid' scope along with state and code verifier, using Arctic's createAuthorizationURL(). Prerequisites: initialized Authentik client, state (string), codeVerifier (string), and an array with 'openid'. Returns a URL string for starting the OIDC authentication flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/authentik.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = authentik.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating KeyCloak Authorization URL in TypeScript\nDESCRIPTION: Generates the KeyCloak authorization URL using `keycloak.createAuthorizationURL()`. This requires a randomly generated `state` parameter (using `arctic.generateState()`) for security, a `codeVerifier` (using `arctic.generateCodeVerifier()`) for PKCE, and an array of requested OAuth scopes. The resulting URL redirects the user to KeyCloak for authentication.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst codeVerifier = arctic.generateCodeVerifier();\nconst scopes = [\"openid\", \"profile\"];\nconst url = keycloak.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Using OpenID Connect Scope with Microsoft Entra ID to Retrieve User Profile in TypeScript\nDESCRIPTION: This code sets the 'openid' scope to initiate OpenID Connect flow, enabling retrieval of the user's ID token and profile information. The `nonce` parameter secures the request against replay attacks. The ID token can be decoded with `decodeIdToken()` to access user claims, and the authorization URL is tailored for OpenID Connect flows.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/microsoft-entra-id.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = entraId.createAuthorizationURL(state, codeVerifier, scopes);\n// The nonce should be unique to each request similar to state.\n// However, nonce can just be \"_\" here since it isn't useful for server-based OAuth.\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL with Arctic.js\nDESCRIPTION: This snippet generates a state for preventing CSRF attacks, creates an authorization URL using the Arctic.js GitHub provider, and sets the state as a cookie. It requires the `arctic` library for state generation and URL creation, as well as a cookie setting mechanism.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\n\nconst scopes = [\"user:email\", \"repo\"];\nconst url = github.createAuthorizationURL(state, scopes);\n\n// store state as cookie\nsetCookie(\"state\", state, {\n\tsecure: true, // set to false in localhost\n\tpath: \"/\",\n\thttpOnly: true,\n\tmaxAge: 60 * 10 // 10 min\n});\n\nreturn redirect(url);\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code for Naver OAuth 2.0\nDESCRIPTION: Validates the authorization code received after user authentication and retrieves access and refresh tokens. Includes error handling for various failure scenarios such as invalid codes or network errors.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/naver.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await naver.validateAuthorizationCode(code);\n\n\tconst accessToken = tokens.accessToken();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mercado Pago OAuth 2.0 Client in TypeScript\nDESCRIPTION: Initializes the Mercado Pago OAuth 2.0 client by creating an instance of the MercadoPago class from the Arctic library. Requires client ID, client secret, and redirect URI as constructor parameters. This setup is prerequisite for further OAuth interactions, including generating authorization URLs and validating tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadopago.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst mercadopago = new arctic.MercadoPago(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth 2.0 Authorization URL with Arctic Tiltify Client in TypeScript\nDESCRIPTION: Generates an OAuth 2.0 authorization URL for Tiltify using Arctic's client. It involves creating a cryptographically secure state parameter to prevent CSRF attacks and specifying the requested scopes such as \"activity:write\" and \"read\". The generated URL is used to redirect users to Tiltify's authorization page.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiltify.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"activity:write\", \"read\"];\nconst url = tiltify.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Cognito Client with Arctic in TypeScript\nDESCRIPTION: Initializes an Amazon Cognito OAuth 2.0 client instance using the Arctic library. Requires the Cognito domain without protocol or path, client ID, optionally a client secret for confidential clients, and a redirect URI. This client will be used for subsequent OAuth 2.0 operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/amazon-cognito.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst domain = \"<POOL-DOMAIN>.auth.<REGION>.amazoncognito.com\";\nconst cognito = new arctic.AmazonCognito(domain, clientId, clientSecret, redirectURI);\nconst cognito = new arctic.AmazonCognito(domain, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Validating Discord Authorization Code and Handling Tokens in TypeScript\nDESCRIPTION: Validates the OAuth authorization code received from Discord, retrieving access and refresh tokens. Implements error handling for invalid requests, fetch failures, and unexpected responses.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/discord.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await discord.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Refresh Access Token for Auth0 (TypeScript)\nDESCRIPTION: This code snippet shows how to refresh an access token using a refresh token. It also handles potential errors like `OAuth2RequestError` and `ArcticFetchError`. The `refreshAccessToken()` method exchanges the refresh token for a new access token and refresh token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await auth0.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying OpenID Connect Scopes in Arctic v2 (TypeScript)\nDESCRIPTION: Explains that OAuth providers in Arctic v2 no longer include the `openid` scope by default. This snippet demonstrates explicitly including `openid` along with other desired scopes (like `profile`) in the scopes array when generating an authorization URL for providers supporting OpenID Connect, such as Google.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v2.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\", \"profile\"];\nconst url = google.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Revoking Token - Autodesk Platform Services - TypeScript\nDESCRIPTION: Illustrates how to revoke a specific access or refresh token using the `revokeToken` method. The method requires the token string and its type (`access_token` or `refresh_token`). Error handling follows the same pattern as token validation and refresh.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n\tawait autodesk.revokeToken(token, token_type);\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Gitea OAuth Provider in TypeScript\nDESCRIPTION: Shows how to initialize the Gitea OAuth 2.0 provider with various configurations, including self-hosted instances and managed servers, with both confidential and public client options.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/gitea.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst baseURL = \"https://gitea.com\";\nconst baseURL = \"https://my-app.com/gitea\";\nconst gitea = new arctic.gitea(baseURL, clientId, clientSecret, redirectURI);\nconst gitea = new arctic.gitea(baseURL, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Auth0 with Arctic.js (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize the Auth0 provider using Arctic.js. It covers both scenarios: initializing for confidential clients (with client secret) and public clients (without client secret). The domain should not include the protocol or path.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/auth0.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst domain = \"xxx.auth0.com\";\nconst auth0 = new arctic.Auth0(domain, clientId, clientSecret, redirectURI);\nconst auth0 = new arctic.Auth0(domain, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Fetching Patreon User Profile in TypeScript\nDESCRIPTION: Demonstrates how to fetch the user's profile data from the Patreon API endpoint (`/api/oauth2/v2/identity`) after obtaining an access token. It uses the standard `fetch` API, including the access token in the `Authorization` header as a Bearer token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/patreon.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://www.patreon.com/api/oauth2/v2/identity\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token in TypeScript\nDESCRIPTION: This snippet demonstrates how to decode an ID token obtained through OpenID Connect.  It utilizes the `decodeIdToken()` function from the `arctic` library, passing the `idToken` as input.  This allows access to the user's profile information contained within the token's payload.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitch.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tokens = await twitch.validateAuthorizationCode(code);\nconst idToken = tokens.idToken();\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Initializing AniList OAuth Provider with Arctic in TypeScript\nDESCRIPTION: Imports the Arctic library and instantiates the `AniList` OAuth 2.0 provider. Requires the client ID, client secret, and redirect URI obtained from AniList as constructor arguments. This setup is the first step required before initiating the OAuth flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/anilist.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst aniList = new arctic.AniList(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Accessing Intuit Refresh Token Expiration (TypeScript)\nDESCRIPTION: Demonstrates how to check for and access the non-standard refresh token expiration time (`x_refresh_token_expires_in`) returned by Intuit within the `OAuth2Tokens` data object after validating the authorization code using Arctic in TypeScript.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/intuit.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await intuit.validateAuthorizationCode(code);\nif (\n\t\"x_refresh_token_expires_in\" in tokens.data &&\n\ttypeof tokens.data.x_refresh_token_expires_in === \"number\"\n) {\n\tconst refreshTokenExpiresIn = tokens.data.x_refresh_token_expires_in;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Spotify Authorization URL (Confidential) - TypeScript\nDESCRIPTION: Generates the authorization URL for a confidential client. Requires a state string for CSRF protection and an array of desired scopes. PKCE is not supported for confidential clients.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/spotify.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"user-read-email\", \"user-read-private\"];\nconst url = spotify.createAuthorizationURL(state, null, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Slack Authorization URL (Arctic, TypeScript)\nDESCRIPTION: Shows how to generate a state parameter and construct the authorization URL that the user's browser should be redirected to. The 'openid' scope is mandatory for OpenID Connect flows with Slack, and 'profile' is recommended to get basic user information.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/slack.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"openid\", \"profile\"];\nconst url = slack.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Fetching Battle.net User Profile in TypeScript\nDESCRIPTION: Demonstrates fetching the user's profile information from the Battle.net User Info endpoint (`https://oauth.battle.net/userinfo`). It uses the standard `fetch` API, providing the access token obtained during code validation in the Authorization header as a Bearer token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/battlenet.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await fetch(\"https://oauth.battle.net/userinfo\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing Strava OAuth 2.0 Client with Arctic in TypeScript\nDESCRIPTION: This snippet shows how to import the Arctic library and instantiate a Strava client using provided client ID, secret, and redirect URI. It sets up the primary object for subsequent API interactions, establishing the context for OAuth operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/strava.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst strava = new arctic.Strava(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Facebook OAuth Provider with Arctic in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Facebook OAuth 2.0 provider using the Arctic library in TypeScript. It requires the 'arctic' npm package and Facebook application's clientId, clientSecret, and redirectURI. The initialized provider instance is used for subsequent authentication steps.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/facebook.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst facebook = new arctic.Facebook(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing DonationAlerts with Arctic.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to initialize the DonationAlerts OAuth 2.0 provider using the `arctic` library. It requires the `clientId`, `clientSecret`, and `redirectURI` as parameters. These values should be obtained from your DonationAlerts application settings.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/donation-alerts.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst donationAlerts = new arctic.DonationAlerts(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Coinbase OAuth 2.0 Access Tokens in TypeScript\nDESCRIPTION: Uses a refresh token to obtain a new access token when the current one expires. Returns the same OAuth2Tokens object structure as validateAuthorizationCode().\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/coinbase.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await coinbase.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Authorization URL with Arctic (TypeScript)\nDESCRIPTION: Generates the URL to redirect the user to GitHub's authorization page. Requires a unique `state` parameter to prevent CSRF attacks and a list of requested `scopes` defining the permissions the application needs (e.g., `[\"user:email\", \"repo\"]`).\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"user:email\", \"repo\"];\nconst url = github.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Mercado Pago OAuth 2.0 in TypeScript\nDESCRIPTION: Generates an authorization URL incorporating a generated state parameter to be used for OAuth 2.0 authorization requests against Mercado Pago. Utilizes Arctic's generateState() method for CSRF protection and the createAuthorizationURL() method of the MercadoPago client instance. This URL directs users to Mercado Pago's authorization endpoint.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mercadopago.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst url = mercadopago.createAuthorizationURL(state);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Token Using Refresh Token in TypeScript\nDESCRIPTION: Requests a new access token from Discord by supplying a refresh token, handling errors similarly to validation. Useful for maintaining persistent sessions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/discord.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await discord.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Yahoo Authorization URL with Arctic (TypeScript)\nDESCRIPTION: Generates a Yahoo authorization URL using the initialized Arctic provider. Requires a unique state parameter (generated using `arctic.generateState()`) and an array of scopes (e.g., 'openid', 'profile') to request user permissions.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/yahoo.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"openid\", \"profile\"];\nconst url = yahoo.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Accessing GitHub App Tokens After Validation (TypeScript)\nDESCRIPTION: Demonstrates how to retrieve specific token details, including `accessToken`, its expiration (`accessTokenExpiresAt`), and the `refreshToken`, after successfully validating the authorization code, particularly when using GitHub Apps.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/github.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst tokens = await github.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Generating OIDC Authorization URL - Autodesk Platform Services - TypeScript\nDESCRIPTION: Specifically shows how to generate the authorization URL when performing an OpenID Connect flow. This requires including the `openid` scope in the scopes array passed to `createAuthorizationURL` to signal the request for an ID token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/autodesk.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = autodesk.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Twitter Authorization URL (User Profile Scopes) (TypeScript)\nDESCRIPTION: Generates the authorization URL requesting scopes necessary to fetch user profile information (`users.read`, `tweet.read`). The URL includes state for CSRF protection and a code verifier for PKCE flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/twitter.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst scopes = [\"users.read\", \"tweet.read\"];\nconst url = twitter.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth Tokens in Arctic v2 (TypeScript)\nDESCRIPTION: Introduces the new token revocation API added in Arctic v2. This snippet shows the asynchronous usage of the `revokeToken` method, passing the token (access or refresh) to be revoked, for providers like Google that support this functionality.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v2.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait google.revokeToken(token);\n```\n\n----------------------------------------\n\nTITLE: Initializing Arctic Tiltify OAuth Client in TypeScript\nDESCRIPTION: Initializes a new Tiltify OAuth client using the Arctic library by providing the required client ID, client secret, and redirect URI. This setup is necessary before performing any OAuth operations such as authorization or token management.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/tiltify.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst tiltify = new arctic.Tiltify(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Constructor for OAuth2Client in TypeScript\nDESCRIPTION: This constructor initializes an instance of the OAuth2Client class with a client ID, optional client password, and optional redirect URI. It sets up the client for subsequent OAuth 2.0 operations. Dependencies include standard TypeScript environment; no external libraries are required.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/OAuth2Client/index.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction constructor(\n\tclientId: string,\n\tclientPassword: string | null,\n\tredirectURI: string | null\n): this;\n```\n\n----------------------------------------\n\nTITLE: Fetching VK User Profile Data via API in TypeScript\nDESCRIPTION: This snippet demonstrates retrieving user profile information by making a GET request to VK's `users.get` endpoint with an Authorization Bearer token. The response is parsed as JSON to obtain user details.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/vk.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst response = await fetch(\"https://api.vk.com/method/users.get\", {\n\theaders: {\n\t\tAuthorization: `Bearer ${accessToken}`\n\t}\n});\nconst user = await response.json();\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyCloak Provider in TypeScript\nDESCRIPTION: Instantiates the KeyCloak provider using the `arctic.KeyCloak` class. Requires the KeyCloak realm URL, client ID, and redirect URI. The client secret is optional and should be provided for confidential clients, or set to `null` for public clients.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst realmURL = \"https://auth.example.com/realms/myrealm\";\nconst keycloak = new arctic.KeyCloak(realmURL, clientId, clientSecret, redirectURI);\nconst keycloak = new arctic.KeyCloak(realmURL, clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Access Tokens for Kick OAuth\nDESCRIPTION: Refreshes an expired access token using a refresh token with comprehensive error handling for the OAuth 2.0 flow.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/kick.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await kick.refreshAccessToken(refreshToken);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Authorization Code for Dropbox OAuth\nDESCRIPTION: Process the returned authorization code to obtain access tokens with comprehensive error handling for various failure scenarios.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await dropbox.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Figma Authorization URL for OAuth 2.0 in TypeScript\nDESCRIPTION: Generates an authorization URL with state and scope parameters to initiate the OAuth consent process. Requires a previous 'figma' client instance and a generated state string.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/figma.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"files:read\", \"file_variables:read\"];\nconst url = figma.createAuthorizationURL(state, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing GitHub OAuth with Arctic.js\nDESCRIPTION: This snippet initializes the GitHub OAuth provider using the Arctic.js library. It requires a client ID, client secret, and redirect URI, which are specific to your GitHub application.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst github = new arctic.GitHub(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Creating KeyCloak Authorization URL for OpenID Connect in TypeScript\nDESCRIPTION: Generates a KeyCloak authorization URL specifically requesting the `openid` scope. This is necessary to enable OpenID Connect features, such as receiving an ID token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/keycloak.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst scopes = [\"openid\"];\nconst url = keycloak.createAuthorizationURL(state, codeVerifier, scopes);\n```\n\n----------------------------------------\n\nTITLE: Creating Authorization URL for Confidential Clients Without PKCE in TypeScript\nDESCRIPTION: Generates an authorization URL for confidential clients by passing state and scopes. PKCE is not supported for confidential clients, so codeVerifier is set to null.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/discord.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst state = arctic.generateState();\nconst scopes = [\"email\", \"activities.read\"];\nconst url = discord.createAuthorizationURL(state, null, scopes);\n```\n\n----------------------------------------\n\nTITLE: Initializing Notion OAuth 2.0 Client with arctic in TypeScript\nDESCRIPTION: Initializes the Notion OAuth 2.0 client using the arctic library by providing client credentials and redirect URI. Facilitates subsequent OAuth operations such as generating authorization URLs and token validation.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/notion.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst notion = new arctic.Notion(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Discord OAuth Client with Arctic in TypeScript\nDESCRIPTION: Sets up the Discord OAuth client by importing the Arctic library and creating instances with the necessary credentials. Supports both confidential and public client initializations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/discord.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst discord = new arctic.Discord(clientId, clientSecret, redirectURI);\nconst discord = new arctic.Discord(clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Decoding ID Token with Arctic.js\nDESCRIPTION: This snippet shows how to decode an ID token using the `decodeIdToken()` function provided by Arctic.js. It allows you to extract the claims (payload) from the ID token.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/oauth2.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst claims = arctic.decodeIdToken(idToken);\n```\n\n----------------------------------------\n\nTITLE: Initializing Bungie OAuth Client with TypeScript\nDESCRIPTION: Sets up the Bungie OAuth client by importing the 'arctic' library and creating an instance with client ID, client secret (for confidential clients), and redirect URI. The snippet demonstrates cases with and without client secret, preparing the application for OAuth flow execution.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/bungie.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst bungie = new arctic.Bungie(clientId, clientSecret, redirectURI);\nconst bungie = new arctic.Bungie(clientId, null, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Installing Arctic v2 via npm\nDESCRIPTION: Command to install version 2 of the Arctic library using the Node Package Manager (npm). This updates the project dependencies to include the latest version of Arctic.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/guides/migrate-v2.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install arctic@2\n```\n\n----------------------------------------\n\nTITLE: Extracting Refresh Token from Dropbox OAuth Response\nDESCRIPTION: Process the authorization code validation response to obtain the refresh token alongside access tokens.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/dropbox.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokens = await dropbox.validateAuthorizationCode(code);\nconst accessToken = tokens.accessToken();\nconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\nconst refreshToken = tokens.refreshToken();\n```\n\n----------------------------------------\n\nTITLE: Initializing Naver OAuth 2.0 Client in TypeScript\nDESCRIPTION: Creates a new Naver OAuth 2.0 client instance with client ID, client secret, and redirect URI. These credentials are required for all OAuth operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/naver.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst naver = new arctic.Naver(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Mastodon OAuth Provider in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of the `arctic.Mastodon` OAuth 2.0 provider. It requires the base URL of the Mastodon instance, client ID, client secret, and redirect URI. This instance is then used for subsequent OAuth operations like creating authorization URLs or validating codes.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/mastodon.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst baseURL = \"https://mastodon.social\";\nconst mastodon = new arctic.Mastodon(baseURL, clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Google OAuth Provider in TypeScript\nDESCRIPTION: Initializes the Arctic Google OAuth 2.0 provider. Requires the Google Client ID, Client Secret, and the application's Redirect URI. This creates an instance used for subsequent OAuth operations.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/google.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst google = new arctic.Google(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing Shikimori Provider with Arctic in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Shikimori OAuth 2.0 provider using the Arctic library in TypeScript. Prerequisites include installation of the 'arctic' package and access to Shikimori OAuth clientId, clientSecret, and redirectURI. Inputs: clientId, clientSecret, redirectURI; Output: a configured Shikimori OAuth2 provider instance used for further authentication steps. No additional configuration is required.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/shikimori.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst shikimori = new arctic.Shikimori(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Initializing EpicGames Client in TypeScript\nDESCRIPTION: This snippet demonstrates the initialization of an `EpicGames` client from the `arctic` library. It requires the `arctic` library and takes client ID, client secret, and redirect URI as parameters during instantiation. The result is an initialized client to interact with the Epic Games OAuth 2.0 service.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/epicgames.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\nconst epicgames = new arctic.EpicGames(clientId, clientSecret, redirectURI);\n```\n\n----------------------------------------\n\nTITLE: Defining generateCodeVerifier function signature - TypeScript\nDESCRIPTION: This snippet provides the TypeScript type signature for the `generateCodeVerifier` function. It indicates that the function takes no parameters and returns a string, representing the generated code verifier. The underlying implementation (not shown) is described as using the Web Crypto API for cryptographic security, suitable for flows like PKCE.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/reference/main/generateCodeVerifier.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction generateCodeVerifier(): string;\n```\n\n----------------------------------------\n\nTITLE: Validating LinkedIn OAuth Authorization Code and Handling Errors in TypeScript\nDESCRIPTION: Validates an authorization code received from LinkedIn to obtain OAuth2Tokens including access token, expiration, and refresh token using the Arctic library. Demonstrates error handling for possible exceptions such as authorization errors, fetch failures, and unexpected responses by catching distinct error types. Requires asynchronous context due to promise handling.\nSOURCE: https://github.com/pilcrowonpaper/arctic/blob/main/docs/pages/providers/linkedin.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as arctic from \"arctic\";\n\ntry {\n\tconst tokens = await linkedin.validateAuthorizationCode(code);\n\tconst accessToken = tokens.accessToken();\n\tconst accessTokenExpiresAt = tokens.accessTokenExpiresAt();\n\tconst refreshToken = tokens.refreshToken();\n} catch (e) {\n\tif (e instanceof arctic.OAuth2RequestError) {\n\t\t// Invalid authorization code, credentials, or redirect URI\n\t\tconst code = e.code;\n\t\t// ...\n\t}\n\tif (e instanceof arctic.ArcticFetchError) {\n\t\t// Failed to call `fetch()`\n\t\tconst cause = e.cause;\n\t\t// ...\n\t}\n\t// Parse error\n}\n```"
  }
]