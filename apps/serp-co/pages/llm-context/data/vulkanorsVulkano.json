[
  {
    "owner": "vulkano-rs",
    "repo": "vulkano",
    "content": "TITLE: Repository Structure Example\nDESCRIPTION: Lists the main libraries included in the Vulkano repository and their purposes - the core vulkano library, shader compilation macro library, task graph system, and utility functions.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- vulkano is the main one.\n- vulkano-shaders provides the shader! macro for compiling glsl shaders.\n- vulkano-taskgraph allows building a dependency graph of tasks\n- vulkano-util provides utility functions\n```\n\n----------------------------------------\n\nTITLE: Updating Instance Creation in Vulkano (Rust)\nDESCRIPTION: Changes to Instance creation in Vulkano. The constructor now takes an additional argument to specify the maximum API version, and uses Ash instead of vk-sys for function pointers.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/CHANGELOG.md#2025-04-19_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\n// Old:\n// let instance = Instance::new(None, &instance_extensions, None).unwrap();\n\n// New:\nlet instance = Instance::new(None, Version::V1_1, &instance_extensions, None).unwrap();\n\n// Accessing function pointers:\nlet entry_fns = instance.fns().entry;\nlet instance_fns = instance.fns().instance;\nlet device_fns = device.fns();\n```\n\n----------------------------------------\n\nTITLE: Updating Shader Interfaces in Vulkano (Rust)\nDESCRIPTION: Changes to shader interfaces in Vulkano. The `ShaderInterfaceDef` trait is replaced by a `ShaderInterface` struct, and `PipelineLayoutDesc` is converted from a trait to a struct.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/CHANGELOG.md#2025-04-19_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\n// Old:\n// trait ShaderInterfaceDef {\n//     type Iterator: Iterator<Item = ShaderInterfaceDefEntry>;\n//     fn elements(&self) -> Self::Iterator;\n// }\n\n// New:\nstruct ShaderInterface {\n    fn elements(&self) -> &[ShaderInterfaceEntry];\n}\n\n// Old:\n// trait PipelineLayoutDesc {\n//     type DescSetIter: Iterator<Item = DescriptorSetDesc>;\n//     fn descriptor_sets(&self) -> Self::DescSetIter;\n//     // ...\n// }\n\n// New:\nstruct PipelineLayoutDesc {\n    fn descriptor_sets(&self) -> &[DescriptorSetDesc];\n    fn push_constants(&self) -> &[PushConstantDesc];\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Image Sample Counts in Vulkano (Rust)\nDESCRIPTION: Changes to how image sample counts are represented in Vulkano. The `SampleCount` enum replaces integer values, and `SampleCounts` struct replaces the `sample_counts` field.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// Old:\n// fn some_function(samples: u32) {}\n\n// New:\nfn some_function(samples: SampleCount) {}\n\n// Converting from integer:\nlet sample_count = SampleCount::try_from(4).unwrap();\n\n// Old:\n// struct SomeStruct { sample_counts: u32 }\n\n// New:\nstruct SomeStruct { sample_counts: SampleCounts }\n```\n\n----------------------------------------\n\nTITLE: Running Vulkano Examples with Cargo\nDESCRIPTION: Basic command structure for running any Vulkano example using cargo. Requires cargo and the Vulkano project to be set up.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/examples/README.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin <example>\n```\n\n----------------------------------------\n\nTITLE: Running Vulkano Triangle Example\nDESCRIPTION: Specific command for running the triangle example in Vulkano. For better performance, the --release flag can be added.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/examples/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncargo run --bin triangle\n```\n\n----------------------------------------\n\nTITLE: SPIR-V Shader Example\nDESCRIPTION: Example of the new shader entry point usage after removal of generated Shader struct\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nlayout(set = 0, binding = 0) uniform sampler2D textures[];\n```\n\n----------------------------------------\n\nTITLE: Build Tools Requirements\nDESCRIPTION: Lists the required build tools for compiling libshaderc with the shaderc-sys crate when not using pre-built binaries\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n- CMake\n- Ninja (optional except for MSVC)\n- Python (works with 2.x and 3.x, needs python.exe on Windows)\n```\n\n----------------------------------------\n\nTITLE: Installing Vulkan Development Tools on Ubuntu Linux\nDESCRIPTION: Command to install essential development tools and Vulkan components on Ubuntu using apt-get, including build-essential, git, python, cmake, Vulkan development libraries, and Vulkan tools.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential git python cmake libvulkan-dev vulkan-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Vulkan Development Tools on Arch Linux\nDESCRIPTION: Command to install base development tools and Vulkan components on Arch-based Linux distributions using pacman, including base-devel, git, python, cmake, and vulkan-devel packages with the --noconfirm flag to automate installation.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -Sy base-devel git python cmake vulkan-devel --noconfirm\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on MSYS2 for Windows-MSVC Setup\nDESCRIPTION: Command to update MSYS2 and install required dependencies for Vulkano development on Windows with MSVC toolchain, including CMake, Python 2, and Ninja build system for MinGW-w64.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npacman --noconfirm -Syu mingw-w64-x86_64-cmake mingw-w64-x86_64-python2 mingw-w64-x86_64-ninja\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on MSYS2 for Windows-GNU Setup\nDESCRIPTION: Command to update MSYS2 and install required dependencies for cross-compiling Vulkano to Windows-GNU from Windows-MSVC, including pkg-config, GCC, CMake, Make, Python 2, and Ninja for MinGW-w64.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npacman --noconfirm -Syu mingw64/mingw-w64-x86_64-pkg-config mingw-w64-x86_64-gcc mingw-w64-x86_64-cmake mingw-w64-x86_64-make mingw-w64-x86_64-python2 mingw-w64-x86_64-ninja\n```\n\n----------------------------------------\n\nTITLE: Building for Windows-GNU Target from MSVC\nDESCRIPTION: Example cargo command that specifies the target platform for cross-compiling to Windows-GNU from Windows-MSVC. This approach requires adding the --target flag to all cargo commands that build the project.\nSOURCE: https://github.com/vulkano-rs/vulkano/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --target x86_64-pc-windows-gnu\n```"
  }
]