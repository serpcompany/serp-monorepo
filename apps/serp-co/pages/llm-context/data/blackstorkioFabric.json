[
  {
    "owner": "blackstork-io",
    "repo": "fabric",
    "content": "TITLE: Defining Document Block with Nested Blocks (HCL)\nDESCRIPTION: This example illustrates a top-level `document` block containing various nested blocks, such as `data`, `content`, and `vars`. Blocks serve as containers for defining configurations and structures in FCL, showcasing its modular nature.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/syntax.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndocument \"test_document\" {\n\n  data elasticsearch \"events\" {\n    index = \"events\"\n  }\n\n  content text {\n    value = \"My custom static text\"\n  }\n\n  vars {\n    foo = \"xyz\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Global Fabric Configuration (HCL)\nDESCRIPTION: Shows the basic structure for defining global settings in Fabric using the `fabric` block. This block allows specifying global properties, including required plugin versions, and must be defined only once within the configuration.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/elastic\" = \">0.4.1\"\n    \"blackstork/openai\" = \">0.4.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Variables in HCL vars block\nDESCRIPTION: Demonstrates how to define variables using the 'vars' block in HCL. Variables can be assigned static values, results from environment variables (using 'env'), or the output of functions like 'query_jq()'. Variables are evaluated sequentially and become available under the '.vars' path in the context.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/context.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvars {\n  foo = 1\n  bar = {\n    x = \"a\"\n    y = env.CUSTOM_ENV_VAR\n  }\n  # The variables are evaluated in the order of definition\n  baz = query_jq(\".vars.foo\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fabric Content Blocks (HCL)\nDESCRIPTION: This snippet shows the basic syntax for defining `content` blocks in Fabric's HCL configuration. It illustrates root-level definitions requiring both provider and block names, and in-document definitions where the block name is optional.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/content-blocks.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# Root-level definition of a content block\ncontent <content-provider-name> \"<block-name>\" {\n  # ...\n}\n\ndocument \"foobar\" {\n\n  # In-document named definition of a content block\n  content <content-provider-name> \"<block-name>\" {\n    # ...\n  }\n\n  # In-document anonymous definition of a content block\n  content <content-provider-name> {\n    # ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Document Publishing in Fabric HCL\nDESCRIPTION: This HCL snippet defines a `document` block named \"greeting\" and configures a `publish` block to output the document to a local file. The `path` uses a Go template to include the current date and format, and the `format` is set to \"html\". This requires a Fabric document definition and the Fabric runtime.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/tutorial.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndocument \"greeting\" {\n\n  # ...\n\n  # Publishing to a local HTML file\n  publish local_file {\n    path = \"./greeting-{{ now | date \\\"2006_01_02\\\" }}.{{.format}}\"\n    format = \"html\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Document Block in Fabric HCL\nDESCRIPTION: This HCL snippet illustrates the fundamental syntax for defining a `document` block, which acts as a template for a document. It requires a unique name and can optionally include a `title` argument. Additional configuration, such as data requirements, content structure, and publishing rules, is defined within this block using nested blocks.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/documents.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndocument \"<document-name>\" {\n\n  title = \"<document title>\"\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Block Signature (HCL)\nDESCRIPTION: Shows the basic syntax for defining a `config` block in Fabric, which is used to configure specific data sources, content providers, or publishers. The signature includes a block type (`content`, `data`, or `publish`), the name of the source/provider/publisher, and an optional user-defined block name.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_3\n\nLANGUAGE: HCL\nCODE:\n```\nconfig <block-type> <source/provider/publisher-name> \"<name>\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fabric Publish Blocks (HCL)\nDESCRIPTION: Shows the basic HCL syntax for defining `publish` blocks within a `document` block in Fabric. It illustrates both the named definition (requiring publisher and block names) and the anonymous definition (requiring only the publisher name) when defined inside a document.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndocument \"foobar\" {\n\n  # In-document named definition of a publish block\n  publish <publisher-name> \"<block-name>\" {\n    # ...\n  }\n\n  # In-document anonymous definition of a publish block\n  publish <publisher-name> {\n    # ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Section and Document Blocks in Fabric HCL\nDESCRIPTION: This code shows the basic syntax for defining a `section` block at the root level with a required name and within a `document` block where the name is optional. It illustrates nesting sections like 'SLAs' and 'Coverage' inside a 'KPIs' section, demonstrating how sections organize content hierarchically.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/section-blocks.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsection \"<section-name>\" {\n  # ...\n}\n\ndocument \"soc-activity-overview\" {\n\n  section \"ExecSummary\" {\n    # ...\n  }\n\n  section \"KPIs\" {\n\n    section \"SLAs\" {\n      # ...\n    }\n\n    section \"Coverage\" {\n      # ...\n    }\n\n    # ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Block Syntax (HCL)\nDESCRIPTION: Explains the basic syntax for defining `data` blocks in Fabric templates. It shows placement at the root level and within a `document` block, highlighting the required data source name and block name.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/data-blocks.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# Root-level definition of a data block\ndata <data-source-name> \"<block-name>\" {\n  # ...\n}\n\ndocument \"foobar\" {\n\n  # In-document definition of a data block\n  data <data-source-name> \"<block-name>\" {\n    # ...\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blackstork OpenAI Plugin in Fabric HCL\nDESCRIPTION: Configures the Fabric global settings to include the `blackstork/openai` plugin with a specified minimum version. This declaration in the `plugin_versions` map is essential for Fabric to recognize and load the plugin, making its content providers and other components available for use.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/openai/content-providers/openai_text.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/openai\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Plugin Version Constraint HCL\nDESCRIPTION: This HCL snippet demonstrates how to add the blackstork/openai plugin and its version constraint (`>= v0.4.2`) to the global `plugin_versions` map within the Fabric configuration block to ensure compatibility during installation. This configuration is placed in the main Fabric configuration file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/openai/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/openai\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Referencing Fabric Blocks (HCL)\nDESCRIPTION: This snippet illustrates the fundamental syntax for defining reusable `content`, `data`, and `section` blocks at the root level of a Fabric file and how to reference them within a `document` block using the `ref` label and the `base` argument, which specifies the identifier of the original block. It shows examples of both named and anonymous `ref` blocks.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/references.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ncontent <content-provider> \"<block-name>\" {\n  # ...\n}\n\ndata <data-source> \"<block-name>\" {\n  # ...\n}\n\nsection \"<block-name>\" {\n  # ...\n}\n\ndocument \"foo\" {\n\n  <block-type> ref \"<block-name>\" {\n    base = <block-identifier-with-matching-block-type>\n    # ...\n  }\n\n  content ref {\n    base = content.<content-provider>.<block-name>\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using HackerOne Reports Data Source with Arguments (HCL)\nDESCRIPTION: This HCL block illustrates the usage of the `hackerone_reports` data source and lists its many optional execution arguments. These arguments allow users to filter and retrieve specific sets of HackerOne reports based on criteria such as size, page number, program, inbox ID, reporter, assignee, state, ID, weakness, severity, hacker publication status, various activity dates (created, submitted, triaged, closed, disclosed, bounty awarded, swag awarded, last activity), keywords, and custom fields.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/hackerone/data-sources/hackerone_reports.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata hackerone_reports {\n  # Optional number.\n  # Default value:\n  size = null\n\n  # Optional number.\n  # Default value:\n  page_number = null\n\n  # Optional string.\n  # Default value:\n  sort = null\n\n  # Optional list of string.\n  # Default value:\n  program = null\n\n  # Optional list of number.\n  # Default value:\n  inbox_ids = null\n\n  # Optional list of string.\n  # Default value:\n  reporter = null\n\n  # Optional list of string.\n  # Default value:\n  assignee = null\n\n  # Optional list of string.\n  # Default value:\n  state = null\n\n  # Optional list of number.\n  # Default value:\n  id = null\n\n  # Optional list of number.\n  # Default value:\n  weakness_id = null\n\n  # Optional list of string.\n  # Default value:\n  severity = null\n\n  # Optional bool.\n  # Default value:\n  hacker_published = null\n\n  # Optional string.\n  # Default value:\n  created_at__gt = null\n\n  # Optional string.\n  # Default value:\n  created_at__lt = null\n\n  # Optional string.\n  # Default value:\n  submitted_at__gt = null\n\n  # Optional string.\n  # Default value:\n  submitted_at__lt = null\n\n  # Optional string.\n  # Default value:\n  triaged_at__gt = null\n\n  # Optional string.\n  # Default value:\n  triaged_at__lt = null\n\n  # Optional bool.\n  # Default value:\n  triaged_at__null = null\n\n  # Optional string.\n  # Default value:\n  closed_at__gt = null\n\n  # Optional string.\n  # Default value:\n  closed_at__lt = null\n\n  # Optional bool.\n  # Default value:\n  closed_at__null = null\n\n  # Optional string.\n  # Default value:\n  disclosed_at__gt = null\n\n  # Optional string.\n  # Default value:\n  disclosed_at__lt = null\n\n  # Optional bool.\n  # Default value:\n  disclosed_at__null = null\n\n  # Optional bool.\n  # Default value:\n  reporter_agreed_on_going_public = null\n\n  # Optional string.\n  # Default value:\n  bounty_awarded_at__gt = null\n\n  # Optional string.\n  # Default value:\n  bounty_awarded_at__lt = null\n\n  # Optional bool.\n  # Default value:\n  bounty_awarded_at__null = null\n\n  # Optional string.\n  # Default value:\n  swag_awarded_at__gt = null\n\n  # Optional string.\n  # Default value:\n  swag_awarded_at__lt = null\n\n  # Optional bool.\n  # Default value:\n  swag_awarded_at__null = null\n\n  # Optional string.\n  # Default value:\n  last_report_activity_at__gt = null\n\n  # Optional string.\n  # Default value:\n  last_report_activity_at__lt = null\n\n  # Optional string.\n  # Default value:\n  first_program_activity_at__gt = null\n\n  # Optional string.\n  # Default value:\n  first_program_activity_at__lt = null\n\n  # Optional bool.\n  # Default value:\n  first_program_activity_at__null = null\n\n  # Optional string.\n  # Default value:\n  last_program_activity_at__gt = null\n\n  # Optional string.\n  # Default value:\n  last_program_activity_at__lt = null\n\n  # Optional bool.\n  # Default value:\n  last_program_activity_at__null = null\n\n  # Optional string.\n  # Default value:\n  last_activity_at__gt = null\n\n  # Optional string.\n  # Default value:\n  last_activity_at__lt = null\n\n  # Optional string.\n  # Default value:\n  last_public_activity_at__gt = null\n\n  # Optional string.\n  # Default value:\n  last_public_activity_at__lt = null\n\n  # Optional string.\n  # Default value:\n  keyword = null\n\n  # Optional map of string.\n  # Default value:\n  custom_fields = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring blackstork/terraform Plugin Version (HCL)\nDESCRIPTION: This snippet demonstrates how to specify the required version constraint for the 'blackstork/terraform' plugin within the Fabric global configuration block. It ensures compatibility by setting a minimum acceptable version.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/terraform/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/terraform\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GitHub Plugin HCL\nDESCRIPTION: To use the `github_issues` data source, you must first install the `blackstork/github` plugin by specifying its version constraint in the global `fabric` configuration block. This block manages plugin versions required by your Fabric project.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/github/data-sources/github_issues.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/github\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using jira_issues Data Source for Queries\nDESCRIPTION: This HCL snippet demonstrates how to use the `jira_issues` data source by specifying execution arguments for querying issues. Parameters include `expand` for extra details, `fields` to limit returned fields, `jql` for filtering (requires a bounded query), `properties` for issue properties, and `size` for result limits.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/atlassian/data-sources/jira_issues.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata jira_issues {\n  # Use expand to include additional information about issues in the response.\n  #\n  # Optional string.\n  # Must be one of: \"renderedFields\", \"names\", \"schema\", \"changelog\"\n  #\n  # For example:\n  # expand = \"names\"\n  #\n  # Default value:\n  expand = null\n\n  # A list of fields to return for each issue.\n  #\n  # Optional list of string.\n  #\n  # For example:\n  # fields = [\"*all\"]\n  #\n  # Default value:\n  fields = null\n\n  # A JQL expression. For performance reasons, this field requires a bounded query. A bounded query is a query with a search restriction.\n  #\n  # Optional string.\n  #\n  # For example:\n  # jql = \"order by key desc\"\n  #\n  # Default value:\n  jql = null\n\n  # A list of up to 5 issue properties to include in the results.\n  #\n  # Optional list of string.\n  # Must contain no more than 5 elements.\n  # Default value:\n  properties = []\n\n  # Size limit to retrieve.\n  #\n  # Optional number.\n  # Must be >= 0\n  # Default value:\n  size = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example Fabric Block Configurations (HCL)\nDESCRIPTION: Provides an example demonstrating the definition of default `config` blocks for data sources (`csv`) and content providers (`openai_text`). It also shows how a `config` block can be overridden for a specific instance (`data csv \"events_b\"`) within a `document` block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_4\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data csv {\n  delimiter = \";\"\n}\n\nconfig content openai_text {\n  api_key = env.OPENAI_API_KEY\n  system_prompt = \"You are the best at saying Hi!\"\n}\n\ndocument \"test-document\" {\n\n  data csv \"events_a\" {\n    path = \"/tmp/events-a.csv\"\n  }\n\n  data csv \"events_b\" {\n    # Overriding the default configuration for CSV data source\n    config {\n      delimiter = \",\"\n    }\n\n    path = \"/tmp/events-b.csv\"\n  }\n\n  content openai_text {\n    prompt = \"Say hi!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the `code` Content Provider in HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure and use the built-in `code` content provider within a fabric configuration file. It shows the required `value` argument to provide the text content and the optional `language` argument to specify the programming language for syntax highlighting.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/code.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontent code {\n  # Required string.\n  #\n  # For example:\n  value = \"Text to be formatted as a code block\"\n\n  # Specifiy the language for syntax highlighting\n  #\n  # Optional string.\n  #\n  # For example:\n  # language = \"python3\"\n  #\n  # Default value:\n  language = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fabric Document Variables with HCL Expressions\nDESCRIPTION: This HCL snippet demonstrates how to define variables within a Fabric document's `vars` block using native HCL expressions. It showcases examples of arithmetic, logical, conditional, loop (for list, map, object), splat, and template directive expressions, highlighting the syntax and expected output for each.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/hcl.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndocument \"example\" {\n\n  vars {\n\n    arithmetic = \"1 + 2 = ${1 + 2}\"\n    # \"arithmetic\": \"1 + 2 = 3\",\n\n    logic = \"true and false is ${true && false}\"\n    # \"logic\": \"true and false is false\",\n\n    conditionals = \"2 is ${2 % 2 == 0 ? \"even\" : \"odd\"}\"\n    # \"conditionals\": \"2 is even\"\n\n    # technically, this is a tuple\n    loop_over_list = [ for el in [1, 2, 3]: el * 2 ]\n    # \"loop_over_list\": [\n    #     2,\n    #     4,\n    #     6\n    # ],\n\n    loop_over_tuple = [ for el in [1, \"two\", 3]: \"value is ${el}\" ]\n    # \"loop_over_tuple\": [\n    #     \"value is 1\",\n    #     \"value is two\",\n    #     \"value is 3\"\n    # ],\n\n    # technically, this is an object\n    loop_over_map = [ for k, v in {\"a\": 1, \"b\": 2, \"c\": 3}: \"key ${k}: value ${v}\" ]\n    # \"loop_over_map\": [\n    #     \"key a: value 1\",\n    #     \"key b: value 2\",\n    #     \"key c: value 3\"\n    # ],\n\n    loop_over_object = [ for k, v in {\"a\": 1, \"b\": \"two\", \"c\": 3}: \"key ${k}: value ${v}\" ]\n    # \"loop_over_object\": [\n    #     \"key a: value 1\",\n    #     \"key b: value two\",\n    #     \"key c: value 3\"\n    # ],\n\n    loop_creating_object = { for v in [1, 2, 3]: \"${v}\" => v * 2 }\n    # \"loop_creating_object\": {\n    #     \"1\": 2,\n    #     \"2\": 4,\n    #     \"3\": 6\n    # },\n\n    loop_with_filter = { for v in [1, 2, 3, 4]: \"${v}\" => v * 2 if v % 2 == 0 }\n    # \"loop_with_filter\": {\n    #     \"2\": 4,\n    #     \"4\": 8\n    # },\n\n    loop_with_grouping = { for v in [1, 2, 3, 4]: (v%2 == 0 ? \"evens\" : \"odds\") => v... }\n    # \"loop_with_grouping\": {\n    #     \"evens\": [2, 4],\n    #     \"odds\": [1, 3]\n    # },\n\n    splat_expression = ([\n      {\n        id: 1,\n        name: \"foo\",\n      },\n      {\n        id: 2,\n        name: \"bar\",\n      },\n      {\n        id: 3,\n        name: \"baz\",\n      },\n    ])[*].name\n    # \"splat_expression\": [\n    #     \"foo\",\n    #     \"bar\",\n    #     \"baz\"\n    # ],\n\n    template_directives = <<EOT\n      %{~ for v in [1, 2, 3, 4] }\n        %{~ if v % 2 == 0 ~}\n          ${v} is even\n        %{ else ~}\n          ${v*2} is doubled ${v}\n        %{ endif ~}\n      %{ endfor ~}\n    EOT\n    # \"template_directives\": \"2 is doubled 1\\n2 is even\\n6 is doubled 3\\n4 is even\\n\"\n  }\n\n  content text {\n    value = <<-EOT\n      arithmetic: {{ .vars.arithmetic }}\n\n      logic: {{ .vars.logic }}\n\n      conditionals: {{ .vars.conditionals }}\n\n      loop_over_list: {{ .vars.loop_over_list | toJson }}\n\n      loop_over_tuple: {{ .vars.loop_over_tuple | toJson }}\n\n      loop_over_map: {{ .vars.loop_over_map | toJson }}\n\n      loop_over_object: {{ .vars.loop_over_object | toJson }}\n\n      loop_creating_object: {{ .vars.loop_creating_object | toJson }}\n\n      loop_with_filter: {{ .vars.loop_with_filter | toJson }}\n\n      loop_with_grouping: {{ .vars.loop_with_grouping | toJson }}\n\n      splat_expression: {{ .vars.splat_expression | toJson }}\n\n      template_directives: {{ .vars.template_directives }}\n    EOT\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing graphql Data Source Query HCL\nDESCRIPTION: Shows how to declare and use an instance of the `graphql` data source in an execution block. It highlights the required `query` argument, which accepts the GraphQL query string to be sent to the configured endpoint.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/graphql/data-sources/graphql.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata graphql {\n  # Required string.\n  #\n  # For example:\n  query = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Github Gist Publisher in Publish Block (HCL)\nDESCRIPTION: This HCL snippet demonstrates the usage of the `publish github_gist` block, showing various optional execution arguments like `description`, `filename`, `make_public`, and `gist_id` that control the publishing behavior to a Github Gist. The `format` argument is also accepted in this block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/github/publishers/github_gist.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\n# In addition to the arguments listed, \\`publish\\` block accepts \\`format\\` argument.\n\npublish github_gist {\n  # Optional string.\n  # Default value:\n  description = null\n\n  # Optional string.\n  # Default value:\n  filename = null\n\n  # Optional bool.\n  # Default value:\n  make_public = false\n\n  # Optional string.\n  # Default value:\n  gist_id = null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Snyk Issues Data Source with Execution Arguments (HCL)\nDESCRIPTION: This HCL snippet lists the various optional arguments available when using the `data snyk_issues` block to fetch Snyk issues. These arguments allow users to filter the fetched issues based on criteria like group/org/scan item IDs, issue type, creation/update dates, severity, status, ignored status, and the maximum number of issues to retrieve.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/snyk/data-sources/snyk_issues.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata snyk_issues {\n  # The group ID\n  #\n  # Optional string.\n  # Default value:\n  group_id = null\n\n  # The organization ID\n  #\n  # Optional string.\n  # Default value:\n  org_id = null\n\n  # The scan item ID\n  #\n  # Optional string.\n  # Default value:\n  scan_item_id = null\n\n  # The scan item type\n  #\n  # Optional string.\n  # Default value:\n  scan_item_type = null\n\n  # The issue type\n  #\n  # Optional string.\n  # Default value:\n  type = null\n\n  # The updated before date\n  #\n  # Optional string.\n  # Default value:\n  updated_before = null\n\n  # The updated after date\n  #\n  # Optional string.\n  # Default value:\n  updated_after = null\n\n  # The created before date\n  #\n  # Optional string.\n  # Default value:\n  created_before = null\n\n  # The created after date\n  #\n  # Optional string.\n  # Default value:\n  created_after = null\n\n  # The effective severity level\n  #\n  # Optional list of string.\n  # Default value:\n  effective_severity_level = null\n\n  # The status\n  #\n  # Optional list of string.\n  # Default value:\n  status = null\n\n  # The ignored flag\n  #\n  # Optional bool.\n  # Default value:\n  ignored = null\n\n  # The limit of issues to fetch\n  #\n  # Optional number.\n  # Must be >= 0\n  # Default value:\n  limit = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Using Splunk Search Data Source - HCL\nDESCRIPTION: Execute the `splunk_search` data source to perform a Splunk query by defining arguments within a `data` block. Specify the required `search_query` string and optional parameters like `max_count`, `status_buckets`, `rf` (result fields), `earliest_time`, and `latest_time` to control the search execution and results.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/splunk/data-sources/splunk_search.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata splunk_search {\n  # Required string.\n  #\n  # For example:\n  search_query = \"some string\"\n\n  # Optional number.\n  # Default value:\n  max_count = null\n\n  # Optional number.\n  # Default value:\n  status_buckets = null\n\n  # Optional list of string.\n  # Default value:\n  rf = null\n\n  # Optional string.\n  # Default value:\n  earliest_time = null\n\n  # Optional string.\n  # Default value:\n  latest_time = null\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering and Publishing Fabric Document via Bash CLI\nDESCRIPTION: This bash command executes the `fabric render` command, specifying the document `document.greeting` to be processed. The `--publish` flag instructs Fabric to execute the configured publish blocks within the document definition. The output shows the progress and the path where the file was written. Requires the Fabric CLI installed and configured.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/tutorial.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ fabric render document.greeting --publish\nJun 23 17:28:03.027 INF Parsing fabric files command=render\nJun 23 17:28:03.028 INF Loading plugin resolver command=render includeRemote=false\nJun 23 17:28:03.028 INF Loading plugin runner command=render\nJun 23 17:28:03.056 INF Publishing document command=render target=greeting\nJun 23 17:28:03.056 INF Loading document command=render target=greeting\nJun 23 17:28:04.213 INF Writing to a file command=render path=/tmp/greeting-2024_06_23.html\n$\n```\n\n----------------------------------------\n\nTITLE: Using nist_nvd_cves data source with execution arguments (HCL)\nDESCRIPTION: This HCL snippet illustrates the various optional execution arguments available when invoking the `nist_nvd_cves` data source. These arguments allow filtering the NVD CVEs based on criteria such as dates, CPE name, CVE ID, CVSS metrics/severity, keyword search, and more.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/nist_nvd/data-sources/nist_nvd_cves.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata nist_nvd_cves {\n  # Optional string.\n  # Default value:\n  last_mod_start_date = null\n\n  # Optional string.\n  # Default value:\n  last_mod_end_date = null\n\n  # Optional string.\n  # Default value:\n  pub_start_date = null\n\n  # Optional string.\n  # Default value:\n  pub_end_date = null\n\n  # Optional string.\n  # Default value:\n  cpe_name = null\n\n  # Optional string.\n  # Default value:\n  cve_id = null\n\n  # Optional string.\n  # Default value:\n  cvss_v3_metrics = null\n\n  # Optional string.\n  # Default value:\n  cvss_v3_severity = null\n\n  # Optional string.\n  # Default value:\n  cwe_id = null\n\n  # Optional string.\n  # Default value:\n  keyword_search = null\n\n  # Optional string.\n  # Default value:\n  virtual_match_string = null\n\n  # Optional string.\n  # Default value:\n  source_identifier = null\n\n  # Optional bool.\n  # Default value:\n  has_cert_alerts = null\n\n  # Optional bool.\n  # Default value:\n  has_kev = null\n\n  # Optional bool.\n  # Default value:\n  has_cert_notes = null\n\n  # Optional bool.\n  # Default value:\n  is_vulnerable = null\n\n  # Optional bool.\n  # Default value:\n  keyword_exact_match = null\n\n  # Optional bool.\n  # Default value:\n  no_rejected = null\n\n  # Optional number.\n  # Default value:\n  limit = null\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Fabric Global Configuration Example (HCL)\nDESCRIPTION: Provides a detailed example of the global `fabric` configuration block, illustrating how to set the cache directory, define a local plugin mirror using `plugins_registry`, and specify exact versions for multiple plugin dependencies using `plugin_versions`.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n\n  cache_dir = \"./.fabric\"\n\n  plugins_registry {\n    mirror_dir = \"/tmp/local-mirror/plugins\"\n  }\n\n  plugin_versions = {\n    \"blackstork/elastic\" = \"1.2.3\"\n    \"blackstork/openai\" = \"=11.22.33\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Data Source in HCL\nDESCRIPTION: This HCL block demonstrates how to configure the `http` data source to fetch data from a URL within a Fabric template. It shows how to specify the target `url`, optional basic authentication credentials (`basic_auth`), the HTTP `method`, timeout duration, whether to ignore certificate errors (`insecure`), request `headers`, and a request `body`.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/http.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata http {\n  # Basic authentication credentials to be used for HTTP request.\n  #\n  # Optional\n  basic_auth {\n    # Required string.\n    #\n    # For example:\n    username = \"user@example.com\"\n\n    # Note: avoid storing credentials in the templates. Use environment variables instead.\n    #\n    # Required string.\n    #\n    # For example:\n    password = \"passwd\"\n  }\n\n\n  # URL to fetch data from. Supported schemas are `http` and `https`\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  url = \"https://example.localhost/file.json\"\n\n  # HTTP method for the request. Allowed methods are `GET`, `POST` and `HEAD`\n  #\n  # Optional string.\n  # Must be one of: \"GET\", \"POST\", \"HEAD\"\n  # Default value:\n  method = \"GET\"\n\n  # If set to `true`, disabled verification of the server's certificate.\n  #\n  # Optional bool.\n  # Default value:\n  insecure = false\n\n  # The duration of a timeout for a request. Accepts numbers, with optional fractions and a unit suffix. For example, valid values would be: 1.5s, 30s, 2m, 2m30s, or 1h\n  #\n  # Optional string.\n  # Default value:\n  timeout = \"30s\"\n\n  # The headers to be set in a request\n  #\n  # Optional map of string.\n  # Default value:\n  headers = null\n\n  # Request body\n  #\n  # Optional string.\n  # Default value:\n  body = null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining graphql Data Source Configuration HCL\nDESCRIPTION: Illustrates the structure of the `config data graphql` block used to define the configuration parameters for the `graphql` data source. It shows the required `url` argument for the GraphQL endpoint and the optional `auth_token` for authentication.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/graphql/data-sources/graphql.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data graphql {\n  # Required string.\n  #\n  # For example:\n  url = \"some string\"\n\n  # Optional string.\n  # Default value:\n  auth_token = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Version (HCL)\nDESCRIPTION: This HCL snippet defines the required version constraint for the `blackstork/microsoft` plugin within the global `fabric` configuration block. It specifies that the plugin version must be greater than or equal to `v0.4.2` for compatibility. This configuration is necessary to install and use the plugin correctly within the Fabric environment.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/microsoft\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Install Fabric CLI via Homebrew (Bash)\nDESCRIPTION: These commands demonstrate how to install the Fabric CLI tool on macOS using the Homebrew package manager from the dedicated tap and subsequently verify the installed version. This method requires Homebrew to be pre-installed on the system.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install blackstork-io/tools/fabric\nfabric --version\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/microsoft plugin in Fabric\nDESCRIPTION: To use the `microsoft_security_query` data source, the `blackstork/microsoft` plugin must be installed. Add the plugin name and version constraint to the `plugin_versions` map within the `fabric` global configuration block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_security_query.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/microsoft\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Fabric Document with Content Blocks (HCL)\nDESCRIPTION: This comprehensive example demonstrates defining a named `config` block for a content provider, a `document` block, and multiple `content` blocks within it. It shows how to define variables in a `vars` block, use `local_var` with JQ queries, reference variables in Go templates, and configure a content block using a previously defined `config` block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/content-blocks.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig content openai_text \"test_account\" {\n  # Reading a key from an environment variable\n  api_key = env.OPENAI_API_KEY\n}\n\ndocument \"test-doc\" {\n\n  vars {\n    items = [\"aaa\", \"bbb\", \"ccc\"]\n  }\n\n  content text {\n    # Query contains a JQ query executed against the context\n    local_var = query_jq(\".vars.items | length\")\n\n    # The context can be accessed in Go templates\n    value = \"There are {{ .vars.local }} items: {{ .vars.items | toPrettyJson }}\"\n  }\n\n  content openai_text {\n    config = config.content.openai_text.test_account\n\n    prompt = <<-EOT\n       Write a short story, just a paragraph, about space exploration\n       using the values from the provided items list as character names:\n\n       {{ .vars.items | toPrettyJson }}\n    EOT\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/microsoft Plugin in Fabric (HCL)\nDESCRIPTION: Configuration block required in the Fabric global settings to specify the version constraints for the `blackstork/microsoft` plugin, which is necessary to use the `azure_openai_text` content provider. Ensure the plugin version meets or exceeds the specified minimum.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/content-providers/azure_openai_text.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/microsoft\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric with Homebrew (Bash)\nDESCRIPTION: Provides the necessary commands to install Fabric from the official Homebrew tap and verify the installed version. This method requires Homebrew to be installed on a macOS or Linux system.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Fabric from the tap\nbrew install blackstork-io/tools/fabric\n\n# Verify the version installed\nfabric --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Blackstork Splunk Plugin Version - HCL\nDESCRIPTION: This HCL snippet demonstrates how to add or update the version constraint for the `blackstork/splunk` plugin within the global `fabric` configuration block. This configuration tells Fabric which versions of the plugin are compatible and allowed for use in the codebase, ensuring proper plugin installation and compatibility.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/splunk/_index.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/splunk\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Splunk Search Data Source - HCL\nDESCRIPTION: Configure the runtime arguments for the `splunk_search` data source using the `config data` block. This block typically holds connection details like `auth_token` (required), `host` (optional), and `deployment_name` (optional), which are necessary for the data source to connect to Splunk.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/splunk/data-sources/splunk_search.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data splunk_search {\n  # Required string.\n  #\n  # For example:\n  auth_token = \"some string\"\n\n  # Optional string.\n  # Default value:\n  host = null\n\n  # Optional string.\n  # Default value:\n  deployment_name = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Security Data Source (HCL)\nDESCRIPTION: Defines the authentication credentials and settings for the 'microsoft_security' data source. It includes required parameters like 'client_id' and 'tenant_id', and optional parameters like 'client_secret' or private key details for API access.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_security.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data microsoft_security {\n  # The Azure client ID\n  #\n  # Required string.\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # The Azure client secret. Required if `private_key_file` or `private_key` is not provided.\n  #\n  # Optional string.\n  # Default value:\n  client_secret = null\n\n  # The Azure tenant ID\n  #\n  # Required string.\n  #\n  # For example:\n  tenant_id = \"some string\"\n\n  # The path to the private key file. Ignored if `private_key` or `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  private_key_file = null\n\n  # The private key contents. Ignored if `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  private_key = null\n\n  # The key passphrase. Ignored if `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  key_passphrase = null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric Plugin - HCL\nDESCRIPTION: This HCL snippet demonstrates how to include the `blackstork/elastic` plugin in the Fabric global configuration block by adding it to the `plugin_versions` map with a specified version constraint.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/elastic/data-sources/elasticsearch.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/elastic\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Data Source (HCL)\nDESCRIPTION: Specifies the required configuration block for the `sqlite` data source in Fabric. It includes the `database_uri` argument, which is a required string specifying the path or URI of the SQLite database.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/sqlite/data-sources/sqlite.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data sqlite {\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  database_uri = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Github Gist Publisher Configuration (HCL)\nDESCRIPTION: This HCL snippet illustrates the structure of the `config publish github_gist` block, which is used to provide required configuration arguments for the publisher. The `github_token` is shown as a required string parameter for authentication.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/github/publishers/github_gist.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig publish github_gist {\n  # Required string.\n  #\n  # For example:\n  github_token = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/atlassian Plugin in Fabric\nDESCRIPTION: This HCL snippet shows how to install the `blackstork/atlassian` plugin by adding it to the `plugin_versions` map within the `fabric` global configuration block, specifying a version constraint.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/atlassian/data-sources/jira_issues.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/atlassian\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Version - HCL\nDESCRIPTION: This HCL snippet demonstrates how to specify the required version for the blackstork/postgresql plugin within the global Fabric configuration block. It ensures that the codebase is compatible with plugin versions greater than or equal to v0.4.2. This configuration is required for Fabric to load the specified plugin version correctly.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/postgresql/_index.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/postgresql\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Plugin Version in Fabric HCL\nDESCRIPTION: This snippet demonstrates how to add a version constraint for the blackstork/sqlite plugin to the Fabric global configuration block. It ensures that the codebase is compatible with the specified plugin version or newer.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/sqlite/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/sqlite\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Data Block Usage with CSV and References (HCL)\nDESCRIPTION: Provides a full example demonstrating the definition of a data source configuration, two data blocks (`events_a` and `events_b` using the `csv` source), a `document` block, inline configuration within `events_b`, and referencing `events_a` from another data block (`ref`).\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/data-blocks.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data csv {\n  delimiter = \";\"\n}\n\ndata csv \"events_a\" {\n  path = \"/tmp/events-a.csv\"\n}\n\ndocument \"test-document\" {\n\n   data ref {\n     base = data.csv.events_a\n   }\n\n   data csv \"events_b\" {\n     config {\n       delimiter = \",\"\n     }\n\n     path = \"/tmp/events-b.csv\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blackstork GraphQL plugin version constraint HCL\nDESCRIPTION: This HCL configuration block adds the `blackstork/graphql` plugin to the `plugin_versions` map within the global `fabric` block. It specifies a version constraint of `>= v0.4.2` to ensure compatibility with the required plugin version.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/graphql/_index.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/graphql\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Run Fabric CLI using Docker (Bash)\nDESCRIPTION: This command illustrates how to execute the Fabric CLI tool directly within a Docker container using the official image from Docker Hub. This provides a way to run Fabric without a local installation, requiring only Docker to be available.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run blackstorkio/fabric\n```\n\n----------------------------------------\n\nTITLE: Installing Blackstork/Snyk Fabric Plugin (HCL)\nDESCRIPTION: This HCL code snippet demonstrates how to specify the required version of the blackstork/snyk plugin in the global fabric configuration block. This step is essential for Fabric to recognize and load the plugin, making its data sources and resources available for use.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/snyk/data-sources/snyk_issues.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/snyk\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snyk Issues Data Source API Key (HCL)\nDESCRIPTION: This HCL snippet shows the configuration block for the `snyk_issues` data source, highlighting the mandatory `api_key` argument. The API key is required for the plugin to authenticate with the Snyk API and fetch issue data. It must be a non-empty string value.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/snyk/data-sources/snyk_issues.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data snyk_issues {\n  # The Snyk API key\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_key = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Falcon Detection Details Data Source HCL\nDESCRIPTION: This HCL block defines the required and optional configuration arguments for the `falcon_detection_details` data source, including CrowdStrike API `client_id` and `client_secret` (required), and optional `member_cid` and `client_cloud` for specific environments. These parameters are typically set once for the data source type.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_detection_details.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data falcon_detection_details {\n  # Client ID for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # Client Secret for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_secret = \"some string\"\n\n  # Member CID for MSSP\n  #\n  # Optional string.\n  # Default value:\n  member_cid = null\n\n  # Falcon cloud abbreviation\n  #\n  # Optional string.\n  # Must be one of: \"autodiscover\", \"us-1\", \"us-2\", \"eu-1\", \"us-gov-1\", \"gov1\"\n  #\n  # For example:\n  # client_cloud = \"us-1\"\n  #\n  # Default value:\n  client_cloud = null\n}\n```\n\n----------------------------------------\n\nTITLE: Executing OpenCTI GraphQL Query in HCL\nDESCRIPTION: This HCL snippet demonstrates how to use the configured `opencti` data source by providing the `graphql_query` execution argument. The required string argument `graphql_query` should contain the GraphQL query to be executed against the OpenCTI instance. Requires a configured `opencti` data source block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/opencti/data-sources/opencti.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata opencti {\n  # Required string.\n  #\n  # For example:\n  graphql_query = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using falcon_vulnerabilities data source with execution arguments in Fabric HCL\nDESCRIPTION: This HCL snippet demonstrates how to use the configured `falcon_vulnerabilities` data source and specify execution arguments. These arguments control the query behavior, allowing users to limit results or filter/sort vulnerabilities using Falcon Query Language (FQL).\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_vulnerabilities.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata falcon_vulnerabilities {\n  # limit the number of queried items\n  #\n  # Optional integer.\n  # Default value:\n  limit = 10\n\n  # Vulnerability search expression using Falcon Query Language (FQL)\n  #\n  # Optional string.\n  # Default value:\n  filter = null\n\n  # Vulnerability sort expression using Falcon Query Language (FQL)\n  #\n  # Optional string.\n  # Default value:\n  sort = null\n}\n```\n\n----------------------------------------\n\nTITLE: Executing postgresql Data Source Query (HCL)\nDESCRIPTION: This HCL block shows how to use the `postgresql` data source to execute a SQL query. It requires the `sql_query` parameter for the SQL statement and accepts an optional `sql_args` list for query parameters, defaulting to null.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/postgresql/data-sources/postgresql.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata postgresql {\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  sql_query = \"some string\"\n\n  # Optional list of any single type.\n  # Default value:\n  sql_args = null\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Inheritance and Shadowing in Nested HCL Sections\nDESCRIPTION: Illustrates how variables defined in a parent HCL block are inherited by nested blocks. Variables defined in a nested block with the same name (like 'foo') will shadow the parent's variable within the scope of the nested block. Variables defined only in the parent or child are accessible from the child.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/context.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nsection {\n  vars {\n    foo = 11\n    bar = 22\n  }\n\n  section {\n    vars {\n      foo = 33\n      baz = 44\n    }\n\n    content text {\n      # Renders: `Variable values: foo=33, bar=22, baz=44`\n      value = \"Variable values: foo={{ .vars.foo }}, bar={{ .vars.bar }}, baz={{ .vars.baz }}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specify MISP Publisher Execution Arguments - HCL\nDESCRIPTION: This HCL snippet shows the execution arguments required within a `publish` block when using the `misp_event_reports` publisher. It specifies essential parameters like the MISP `event_id` and the report `name`, along with optional `distribution` and `sharing_group_id` settings.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/misp/publishers/misp_event_reports.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\n# In addition to the arguments listed, `publish` block accepts `format` argument.\n\npublish misp_event_reports {\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  event_id = \"some string\"\n\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  name = \"some string\"\n\n  # Optional string.\n  # Must be one of: \"0\", \"1\", \"2\", \"3\", \"4\", \"5\"\n  # Default value:\n  distribution = null\n\n  # Optional string.\n  # Default value:\n  sharing_group_id = null\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Fabric Document (Bash)\nDESCRIPTION: Demonstrates executing the `fabric render` command with the `--publish` flag to process a document named `document.example`. This command triggers the execution of any `publish` blocks defined within the document, causing the document to be delivered to its configured destinations.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ fabric render document.example --publish\nJun  2 12:48:08.899 INF Writing to a file path=/tmp/example_2024_06_02.pdf\nJun  2 12:48:09.182 INF Writing to a file path=/tmp/example_2024_06_02.html\nJun  2 12:48:09.183 INF Writing to a file path=/tmp/example_2024_06_02.md\n```\n\n----------------------------------------\n\nTITLE: Configure MISP Publisher Settings - HCL\nDESCRIPTION: This HCL snippet defines the configuration arguments for the `misp_event_reports` publisher. It includes required settings like `api_key` and `base_url` for connecting to the MISP instance, and an optional `skip_ssl` flag for controlling SSL certificate verification.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/misp/publishers/misp_event_reports.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig publish misp_event_reports {\n  # misp api key\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_key = \"some string\"\n\n  # misp base url\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  base_url = \"some string\"\n\n  # skip ssl verification\n  #\n  # Optional bool.\n  # Default value:\n  skip_ssl = false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SQLite Data Source Query (HCL)\nDESCRIPTION: Describes the execution arguments for the `sqlite` data source, used when querying the configured database. It requires an `sql_query` string and optionally accepts `sql_args`, a list of values for parameterized queries.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/sqlite/data-sources/sqlite.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata sqlite {\n  # SQL query to execute\n  #\n  # Required string.\n  #\n  # For example:\n  sql_query = \"some string\"\n\n  # A tuple (or list) of strings, numbers, or booleans to be used as arguments in the SQL query\n  #\n  # Optional any type.\n  #\n  # For example:\n  # sql_args = [\"example argument\", 2, false]\n  #\n  # Default value:\n  sql_args = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenCTI Data Source Connection in HCL\nDESCRIPTION: This HCL snippet defines the structure and arguments for configuring the `opencti` data source. It specifies the required `graphql_url` and optional `auth_token` parameters for connecting to the OpenCTI instance. Requires defining a `config data` block for the `opencti` data source.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/opencti/data-sources/opencti.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data opencti {\n  # Required string.\n  #\n  # For example:\n  graphql_url = \"some string\"\n\n  # Optional string.\n  # Default value:\n  auth_token = null\n}\n```\n\n----------------------------------------\n\nTITLE: Using virustotal_api_usage Data Source HCL\nDESCRIPTION: Execute the `virustotal_api_usage` data source using the `data` block. Optional arguments like `user_id`, `group_id`, `start_date`, and `end_date` can be provided to filter or specify the usage data requested. These arguments default to `null`.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/virustotal/data-sources/virustotal_api_usage.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata virustotal_api_usage {\n  # Optional string.\n  # Default value:\n  user_id = null\n\n  # Optional string.\n  # Default value:\n  group_id = null\n\n  # Optional string.\n  # Default value:\n  start_date = null\n\n  # Optional string.\n  # Default value:\n  end_date = null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fabric OpenAI Text Content Provider HCL\nDESCRIPTION: Illustrates how to invoke the `openai_text` content provider within a Fabric configuration. It requires the `prompt` argument, which contains the text input to be processed by the OpenAI model (often including template variables), and optionally allows specifying the `model` to use (defaulting to 'gpt-3.5-turbo').\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/openai/content-providers/openai_text.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ncontent openai_text {\n  # Required string.\n  #\n  # For example:\n  prompt = \"Summarize the following text: {{.vars.text_to_summarize}}\"\n\n  # Optional string.\n  # Must be non-empty\n  # Default value:\n  model = \"gpt-3.5-turbo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring virustotal_api_usage Data Source HCL\nDESCRIPTION: Configure the `virustotal_api_usage` data source using the `config data` block. The only required argument is `api_key`, which must be a non-empty string containing your VirusTotal API key.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/virustotal/data-sources/virustotal_api_usage.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data virustotal_api_usage {\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_key = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring OpenCTI Plugin Version in Fabric HCL\nDESCRIPTION: This snippet shows how to specify the required version of the `blackstork/opencti` plugin within the `plugin_versions` map in the `fabric` global configuration block. It ensures that Fabric uses a compatible version of the plugin for the data source. Requires a Fabric global configuration block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/opencti/data-sources/opencti.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/opencti\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/virustotal Plugin HCL\nDESCRIPTION: To enable the `virustotal_api_usage` data source, the `blackstork/virustotal` plugin must be installed. Add the plugin name and a version constraint (here, `>= v0.4.2`) to the `plugin_versions` map within the global `fabric` configuration block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/virustotal/data-sources/virustotal_api_usage.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/virustotal\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blackstork/misp Plugin in Fabric (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the Fabric global configuration block (`fabric {}`) to declare the required `blackstork/misp` plugin and its minimum version constraint (`>= v0.4.2`). This step is necessary for the Fabric platform to download and load the plugin, making the `misp_events` data source available for use.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/misp/data-sources/misp_events.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/misp\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Fabric Plugin Version - HCL\nDESCRIPTION: This HCL snippet configures the global Fabric settings to specify the required version constraint for the blackstork/misp plugin. It must be included within the `plugin_versions` map inside the main `fabric` configuration block to ensure Fabric loads a compatible version of the plugin.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/misp/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/misp\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a query with microsoft_security_query data source\nDESCRIPTION: Use the `microsoft_security_query` data source block to execute an advanced hunting query against the Microsoft Security API. The required `query` argument accepts a string containing the KQL (Kusto Query Language) query.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_security_query.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata microsoft_security_query {\n  # Advanced hunting query to run\n  #\n  # Required string.\n  #\n  # For example:\n  query = \"DeviceRegistryEvents | where Timestamp >= ago(30d) | where isnotempty(RegistryKey) and isnotempty(RegistryValueName) | limit 5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring nist_nvd_cves data source (HCL)\nDESCRIPTION: This HCL block outlines the configuration arguments supported by the `nist_nvd_cves` data source. It shows the optional `api_key` argument, which can be used to provide an API key for authentication with the NIST NVD service.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/nist_nvd/data-sources/nist_nvd_cves.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data nist_nvd_cves {\n  # Optional string.\n  # Default value:\n  api_key = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Dependencies (HCL)\nDESCRIPTION: Illustrates how to specify required plugins and their version constraints within the `plugin_versions` map of the Fabric global configuration file. This configuration is a prerequisite for using the `fabric install` command to fetch plugins.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/install.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/openai\" = \">= 0.0.1\",\n    \"blackstork/elastic\" = \">= 0.0.1\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Misp_events Data Source for Queries (HCL)\nDESCRIPTION: This snippet outlines the arguments available when calling the `misp_events` data source to fetch MISP events. It includes a required `value` argument and numerous optional arguments like `type`, `category`, `org`, `tags`, `event_tags`, `searchall`, date filters (`from`, `to`, `last`), `event_id`, and output options (`with_attachments`, `only_metadata`, `include_sightings`). These arguments are used within a `data` block to filter and control the fetched events.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/misp/data-sources/misp_events.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata misp_events {\n  # Required string.\n  #\n  # For example:\n  value = \"some string\"\n\n  # Optional string.\n  # Default value:\n  type = null\n\n  # Optional string.\n  # Default value:\n  category = null\n\n  # Optional string.\n  # Default value:\n  org = null\n\n  # Optional list of string.\n  # Default value:\n  tags = null\n\n  # Optional list of string.\n  # Default value:\n  event_tags = null\n\n  # Optional string.\n  # Default value:\n  searchall = null\n\n  # Optional string.\n  # Default value:\n  from = null\n\n  # Optional string.\n  # Default value:\n  to = null\n\n  # Optional string.\n  # Default value:\n  last = null\n\n  # Optional number.\n  # Default value:\n  event_id = null\n\n  # Optional bool.\n  # Default value:\n  with_attachments = null\n\n  # Optional list of string.\n  # Default value:\n  sharing_groups = null\n\n  # Optional bool.\n  # Default value:\n  only_metadata = null\n\n  # Optional string.\n  # Default value:\n  uuid = null\n\n  # Optional bool.\n  # Default value:\n  include_sightings = null\n\n  # Optional number.\n  # Default value:\n  threat_level_id = null\n\n  # Optional number.\n  # Default value:\n  limit = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Graph Data Source HCL\nDESCRIPTION: This HCL block illustrates the execution arguments available when using the `microsoft_graph` data source, allowing users to specify the API version, endpoint, query parameters, results size, and indicate if the endpoint returns a single object.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_graph.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata microsoft_graph {\n  # The API version\n  #\n  # Optional string.\n  # Default value:\n  api_version = \"beta\"\n\n  # The endpoint to query\n  #\n  # Required string.\n  #\n  # For example:\n  endpoint = \"/users\"\n\n  # HTTP GET query parameters\n  #\n  # Optional map of string.\n  # Default value:\n  query_params = null\n\n  # Number of objects to be returned\n  #\n  # Optional number.\n  # Must be >= 1\n  # Default value:\n  size = 50\n\n  # Indicates if API endpoint serves a single object.\n  #\n  # Optional bool.\n  # Default value:\n  is_object_endpoint = false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Iris Cases Data Source (HCL)\nDESCRIPTION: This HCL block demonstrates how to execute the `iris_cases` data source within a Fabric workflow. It accepts various optional arguments to filter and retrieve cases, such as `case_ids`, `customer_id`, `sort` order, and `size` limit.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/iris/data-sources/iris_cases.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata iris_cases {\n  # List of Case IDs\n  #\n  # Optional list of number.\n  # Default value:\n  case_ids = null\n\n  # Case Customer ID\n  #\n  # Optional number.\n  # Default value:\n  customer_id = null\n\n  # Case Owner ID\n  #\n  # Optional number.\n  # Default value:\n  owner_id = null\n\n  # Case Severity ID\n  #\n  # Optional number.\n  # Default value:\n  severity_id = null\n\n  # Case State ID\n  #\n  # Optional number.\n  # Default value:\n  state_id = null\n\n  # Case SOC ID\n  #\n  # Optional string.\n  # Default value:\n  soc_id = null\n\n  # Case opening date - lower boundary\n  #\n  # Optional string.\n  # Default value:\n  start_open_date = null\n\n  # Case opening date - higher boundary\n  #\n  # Optional string.\n  # Default value:\n  end_open_date = null\n\n  # Sort order\n  #\n  # Optional string.\n  # Must be one of: \"desc\", \"asc\"\n  # Default value:\n  sort = \"desc\"\n\n  # Size limit to retrieve\n  #\n  # Optional number.\n  # Must be >= 0\n  # Default value:\n  size = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Iris Fabric Plugin (HCL)\nDESCRIPTION: This HCL block is added to the global Fabric configuration to specify the required version of the `blackstork/iris` plugin for the project. It goes inside the main `fabric` configuration block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/iris/data-sources/iris_cases.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/iris\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Fabric Document to Multiple Local Files with Dynamic Paths (HCL)\nDESCRIPTION: Provides an example Fabric document definition in HCL that uses two `publish local_file` blocks to save the document to two different local files (PDF and HTML). It demonstrates using Go template strings in the `path` argument to generate dynamic filenames based on the current date and the output format.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_7\n\nLANGUAGE: HCL\nCODE:\n```\ndocument \"foo\" {\n\n  publish local_file {\n    path = \"docs/foo_{{ now | date \\\"2006_01_02\\\" }}.{{.format}}\"\n    format = \"pdf\"\n  }\n\n  publish local_file {\n    path = \"html/foo-latest.{{.format}}\"\n    format = \"html\"\n  }\n\n  title = \"Test Document\"\n\n  content text {\n    value = \"Static text in the document body\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Iris Plugin Version in HCL Fabric\nDESCRIPTION: This HCL code snippet demonstrates how to add the `blackstork/iris` plugin and its version constraint to the `plugin_versions` map within the global `fabric` configuration block. This is required for Fabric to recognize and load the specified plugin version. It requires the presence of a Fabric global configuration block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/iris/_index.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/iris\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Iris Alerts Data Source (HCL)\nDESCRIPTION: Illustrates the various optional execution arguments available when using the `iris_alerts` data source to filter the retrieved alerts from the Iris API. It lists parameters like `alert_ids`, `tags`, `case_id`, date ranges, `sort` order, and `size` limit, along with their data types and default values.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/iris/data-sources/iris_alerts.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata iris_alerts {\n  # List of Alert IDs\n  #\n  # Optional list of number.\n  # Default value:\n  alert_ids = null\n\n  # Alert Source\n  #\n  # Optional string.\n  # Default value:\n  alert_source = null\n\n  # List of tags\n  #\n  # Optional list of string.\n  # Default value:\n  tags = null\n\n  # Case ID\n  #\n  # Optional number.\n  # Default value:\n  case_id = null\n\n  # Alert Customer ID\n  #\n  # Optional number.\n  # Default value:\n  customer_id = null\n\n  # Alert Owner ID\n  #\n  # Optional number.\n  # Default value:\n  owner_id = null\n\n  # Alert Severity ID\n  #\n  # Optional number.\n  # Default value:\n  severity_id = null\n\n  # Alert Classification ID\n  #\n  # Optional number.\n  # Default value:\n  classification_id = null\n\n  # Alert State ID\n  #\n  # Optional number.\n  # Default value:\n  status_id = null\n\n  # Alert Date - lower boundary\n  #\n  # Optional string.\n  # Default value:\n  alert_start_date = null\n\n  # Alert Date - higher boundary\n  #\n  # Optional string.\n  # Default value:\n  alert_end_date = null\n\n  # Sort order\n  #\n  # Optional string.\n  # Must be one of: \"desc\", \"asc\"\n  # Default value:\n  sort = \"desc\"\n\n  # Size limit to retrieve\n  #\n  # Optional number.\n  # Must be >= 0\n  # Default value:\n  size = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Version HCL\nDESCRIPTION: This snippet demonstrates how to add the `blackstork/nist_nvd` plugin to the Fabric global configuration. It includes a version constraint (`>= v0.4.2`) within the `plugin_versions` map, specifying the acceptable versions for the runtime.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/nist_nvd/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/nist_nvd\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Block with Argument (HCL)\nDESCRIPTION: This snippet demonstrates the use of an argument (`value`) within a `content` block in FCL. Arguments are used to assign values to named properties within a block, defining specific configurations like the text content itself.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/syntax.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontent text {\n  value = \"An example of the text value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Data Source - HCL\nDESCRIPTION: This HCL snippet illustrates how to configure the 'json' data source using the 'data' block. It defines the available arguments: 'glob' for selecting multiple files via a pattern and 'path' for selecting a single file. One of these arguments must be set.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/json.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ndata json {\n  # A glob pattern to select JSON files to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # glob = \"path/to/file*.json\"\n  #\n  # Default value:\n  glob = null\n\n  # A file path to a JSON file to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # path = \"path/to/file.json\"\n  #\n  # Default value:\n  path = null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric HackerOne Plugin (HCL)\nDESCRIPTION: This HCL code snippet shows how to install the `blackstork/hackerone` plugin for Fabric by adding its name and a version constraint (`>= v0.4.2`) to the `plugin_versions` map within the global `fabric` configuration block. This is a prerequisite for using the `hackerone_reports` data source.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/hackerone/data-sources/hackerone_reports.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/hackerone\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Arguments in Fabric References (HCL)\nDESCRIPTION: This example shows how to override arguments defined in an original block when referencing it using a `ref` block. It demonstrates referencing the same `content` block multiple times within a `document` block and providing different `value` arguments in the `ref` blocks to customize the output.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/references.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ncontent text \"hello_world\" {\n  value = \"Hello, World!\"\n}\n\ndocument \"foo\" {\n\n  content ref \"hello_john\" {\n    base = content.text.hello_world\n    value = \"Hello, John!\"\n  }\n\n  content ref {\n    base = content.text.hello_world\n    value = \"Hello, New World!\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using the text content provider in HCL\nDESCRIPTION: This HCL snippet demonstrates how to declare and configure the `text` content provider within a `content` block. It uses the required `value` argument to specify the string that will be rendered as content, noting that the value can utilize Go template syntax.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/text.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ncontent text {\n  # A string to render. Can use go template syntax.\n  #\n  # Required string.\n  #\n  # For example:\n  value = \"Hello world!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric Plugins (Bash)\nDESCRIPTION: Executes the Fabric `install` sub-command to download and install the plugins listed in the global configuration's `plugin_versions` map. The command line output shown in the text demonstrates the process of searching for and installing the specified plugins.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/install.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./fabric install\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Content Provider HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure the `table` content provider within a Fabric configuration file. It defines the `rows` argument as an optional list of objects (potentially from queries) and the required `columns` argument as a list of objects, each specifying `header` and `value` Go templates for a column. It must be used inside a `content` block in a Fabric configuration.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/table.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontent table {\n  # A list of objects representing rows in the table.\n  # May be set statically or as a result of one or more queries.\n  #\n  # Optional list of jq queriable.\n  # Default value:\n  rows = null\n\n  # List of header and value go templates for each column\n  #\n  # Required list of object.\n  # Must be non-empty\n  #\n  # For example:\n  columns = [{\n    header = \"1st column header template\"\n    value  = \"1st column values template\"\n    }, {\n    header = \"2nd column header template\"\n    value  = \"2nd column values template\"\n    }, {\n    header = \"...\"\n    value  = \"...\"\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Output and Publishing Locally (HCL)\nDESCRIPTION: Demonstrates a Fabric document definition in HCL that includes a `frontmatter` content block to customize HTML metadata (title, description, script/style sources and code) and a `publish local_file` block to save the rendered HTML to a specified local path.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ndocument \"test\" {\n\n  content frontmatter {\n    content = {\n      title = \"Foo Title\"\n      description = \"Bar Description\"\n\n      js_sources = [\"https://buttons.github.io/buttons.js\", \"/static/local.js\"]\n      css_sources = [\"/static/main.css\", \"https://localhost.localhost/some.css\"]\n\n      js_code = <<-EOT\n        console.info(\"JS code execution\");\n      EOT\n\n      css_code = <<-EOT\n        a {\n          font-family: Verdana;\n        }\n      EOT\n    }\n    format = \"yaml\"\n  }\n\n  title = \"Main Document Title\"\n\n  content text {\n    value = \"Test Body\"\n  }\n\n  publish local_file {\n    path = \"./test-document.html\"\n    format = \"html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Snyk Plugin to Fabric Configuration (HCL)\nDESCRIPTION: This configuration block adds the 'blackstork/snyk' plugin to the Fabric global configuration, specifying a version constraint. It is required for Fabric to recognize and load the plugin.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/snyk/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/snyk\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Multiple Content Blocks with Fabric Dynamic Block (HCL)\nDESCRIPTION: Demonstrates using a 'dynamic' block with 'dynamic_items' to generate multiple 'content' blocks. It iterates over a list, accessing the current item ('.vars.dynamic_item') and index ('.vars.dynamic_index') to customize the generated content and variables.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/dynamic-blocks.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndynamic content text \"foobarbaz\" {\n\n  # Dynamic block arguments\n  dynamic_items = [\"foo\", \"bar\", \"baz\"]\n\n  # The arguments below belong to a content block and will be evaluated after the execution\n  # of the dynamic block\n  var {\n    x = 1\n    item_upper = query_jq(\".vars.dynamic_item | ascii_upcase\")\n  }\n\n  value = <<-EOT\n    Content block {{ .vars.dynamic_index }}:\n    item={{ .vars.dynamic_item }} upper={{ .vars.item_upper }}\n  EOT\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Fabric Plugin Version - HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure the required version for the `blackstork/misp` plugin within the Fabric global configuration block. It adds an entry to the `plugin_versions` map, ensuring compatibility and correct plugin loading.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/misp/publishers/misp_event_reports.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/misp\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Installation (HCL)\nDESCRIPTION: Specifies the required 'blackstork/microsoft' plugin and its version constraint within the Fabric global configuration block. This step is necessary before the 'microsoft_security' data source can be used.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_security.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/microsoft\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Document Metadata (HCL)\nDESCRIPTION: Demonstrates how to use the `meta` block within a `document` definition to provide descriptive metadata such as name, description, URL, license, authors, tags, update timestamp (`updated_at` in ISO8601 format), and version for the overall document template.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_6\n\nLANGUAGE: HCL\nCODE:\n```\n# Document template with metadata\ndocument \"mitre_ctid_campaign_report\" {\n\n  meta {\n    name = \"MITRE CTID Campaign Report Template\"\n\n    description = <<-\"EOT\"\n      The Campaign Report is designed to highlight new information related to a threat actor or\n      capabilities. This should focus on new information and highlight how it poses a changed risk\n      to your organization. This should not be an exhaustive product cataloguing all information\n      about the topic, but rather a succinct report designed to convey a change in the status quo to\n      the intended recipient.\n    EOT\n\n    url = \"https://github.com/center-for-threat-informed-defense/cti-blueprints\"\n\n    license = \"Apache License 2.0\"\n    tags = [\"mitre\", \"campaign\"]\n\n    updated_at = \"2024-01-22T10:00:01+01:00\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Section Reference Blocks in Fabric (HCL)\nDESCRIPTION: Shows how to use a 'dynamic' block to generate 'section ref' blocks dynamically. It iterates over items retrieved by a 'query_jq' call, creating a reference block for each item and setting its 'base' attribute.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/dynamic-blocks.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndynamic section ref {\n  dynamic_items = query_jq(\".vars.defined_items\")\n  base = section.external_section\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Version (HCL)\nDESCRIPTION: Shows how to declare the required version for the `blackstork/iris` plugin within the global Fabric configuration block. This step is necessary to install and use the plugin's data sources and resources. It specifies a version constraint using `>=`.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/iris/data-sources/iris_alerts.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/iris\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring blackstork/graphql Plugin Version HCL\nDESCRIPTION: Demonstrates how to add the `blackstork/graphql` plugin and specify its required version (`>= v0.4.2`) within the `plugin_versions` map of the Fabric global configuration block. This step is mandatory for Fabric to load and use the plugin.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/graphql/data-sources/graphql.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/graphql\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Fabric Plugin Version Constraint (HCL)\nDESCRIPTION: Configures the Fabric runtime to use a specific version of the `blackstork/stixview` plugin. This is done by adding the plugin's identifier and a version constraint string to the `plugin_versions` map within the global `fabric` configuration block. Requires an existing Fabric configuration file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/stixview/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/stixview\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric Plugin Versions (HCL)\nDESCRIPTION: Demonstrates how to specify required plugin versions within the Fabric global configuration block using HCL. This block is necessary to make the `blackstork/sqlite` data source available for use.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/sqlite/data-sources/sqlite.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/sqlite\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/stixview Plugin in Fabric HCL\nDESCRIPTION: This HCL snippet shows how to configure the Fabric global block to install the `blackstork/stixview` plugin by adding its name and required version constraint to the `plugin_versions` map.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/stixview/content-providers/stixview.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/stixview\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Version Constraint (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to add a version constraint for the blackstork/virustotal plugin within the Fabric global configuration block. This configuration is required to specify which compatible versions of the plugin the codebase should use when deploying Fabric resources.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/virustotal/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/virustotal\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying blackstork/opencti Plugin Version (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the required version constraint for the 'blackstork/opencti' plugin within the 'fabric' global configuration block. This ensures that Fabric uses a compatible version of the plugin, specifically version '>= v0.4.2' or higher, and is a necessary step for installation and usage.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/opencti/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/opencti\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Global Configuration for blackstork/terraform Plugin HCL\nDESCRIPTION: This HCL configuration block demonstrates how to install the `blackstork/terraform` plugin by adding its version constraint to the `plugin_versions` map within the Fabric global configuration block. This is required to use the `terraform_state_local` data source.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/terraform/data-sources/terraform_state_local.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/terraform\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Version Constraint Fabric HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure the version constraint for the blackstork/hackerone plugin within the `plugin_versions` block of the Fabric global configuration. This is required to install and use the plugin, ensuring compatibility with the specified version `v0.4.2` or higher.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/hackerone/_index.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/hackerone\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Version for Microsoft Sentinel Data Source (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to specify the required version constraint for the `blackstork/microsoft` plugin within the `fabric` global configuration block. Adding the plugin name and version constraint to the `plugin_versions` map is necessary for the data source to be available for use.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_sentinel_incidents.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/microsoft\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Fabric Docker Image (Bash)\nDESCRIPTION: Shows the basic command to run Fabric using its official Docker image available on Docker Hub. Requires Docker to be installed and running on the host system.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run blackstorkio/fabric\n```\n\n----------------------------------------\n\nTITLE: Complex Fabric Referencing Example (HCL)\nDESCRIPTION: This complex example demonstrates several aspects of Fabric block referencing. It shows defining `data` and `content` blocks, referencing the same `data` block multiple times with different names and overrides, and referencing a `content` block that explicitly requires a `query_input` argument to be provided in the `ref` block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/references.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata elasticsearch \"foo\" {\n  index = \"test-index\"\n  # ...\n}\n\ncontent text \"qux\" {\n  # Using `query_input` field in the context that contains the result of\n  # the `query_input` query\n  query = \".query_input | length\"\n\n  # Require the referrer to specify `query_input` query that will be used\n  # to get the data for `query_input` field in the context\n  query_input_required = true\n  value = \"The data contains {{ .query_result }} elements\"\n}\n\ndocument \"test-document\" {\n\n  # Anonymous referrer block adops the name of the referenced block - `data.elasticsearch.foo`\n  data ref {\n    base = data.elasticsearch.foo\n  }\n\n  # Named referrer block keeps its name - `data.elasticsearch.bar`\n  data ref \"bar\" {\n    base = data.elasticsearch.foo\n  }\n\n  # Provided argument `index` overrides the value set in the original block.\n  data ref \"baz\" {\n    base = data.elasticsearch.foo\n    index = \"another-test-index\"\n  }\n\n  # Referred block requires `query_input` to be provided,\n  # so it can be used in query set in `query` argument in the original block.\n  content ref {\n    base = content.text.qux\n    query_input = \".data.elasticsearch.bar\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Version HCL\nDESCRIPTION: This snippet shows how to add the `blackstork/microsoft` plugin and its version constraint to the `plugin_versions` map within the Fabric global configuration block, which is necessary for plugin installation and usage.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_graph.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/microsoft\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Context with JQ in HCL vars blocks\nDESCRIPTION: Demonstrates using the 'query_jq()' function within HCL 'vars' blocks to execute JQ queries against the evaluation context. This allows transforming data stored in variables, such as calculating list length or mapping and joining array elements. The results are stored in new variables for access via Go template.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/context.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nsection {\n  vars {\n    items = [\"a\", \"b\", \"c\"]\n  }\n\n  section {\n    vars {\n      items_count = query_jq(\".vars.items | length\")\n\n      items_uppercase = query_jq(\n        <<-EOT\n          .vars.items | map(ascii_upcase) | join(\":\")\n        EOT\n      )\n    }\n\n    content text {\n      # Renders: `Items count: 3; Uppercase items: A:B:C`\n      value = \"Items count: {{ .vars.items_count }}; Uppercase items: {{ .vars.items_uppercase }}\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric from GitHub Releases (Bash)\nDESCRIPTION: Demonstrates the steps to download, unpack, and test a specific Fabric binary release archive from GitHub using standard command-line tools like `wget` and `tar`. This example targets the macOS arm64 architecture.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a folder\nmkdir fabric-bin\n\n# Download the latest release of Fabric\nwget https://github.com/blackstork-io/fabric/releases/latest/download/fabric_darwin_arm64.tar.gz -O ./fabric_darwin_arm64.tar.gz\n\n# Unpack Fabric release archive into `fabric-bin` folder\ntar -xvzf ./fabric_darwin_arm64.tar.gz -C ./fabric-bin\n\n# Verify that `fabric` runs\n./fabric-bin/fabric --help\n```\n\n----------------------------------------\n\nTITLE: Using `hub` Publisher HCL\nDESCRIPTION: Demonstrates how to invoke the `hub` publisher within an HCL `publish` block. It shows the optional `title` argument which can override the document's title. The block also supports a `format` argument (not shown in this specific snippet).\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/publishers/hub.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n# In addition to the arguments listed, `publish` block accepts `format` argument.\n\npublish hub {\n  # Hub Document title override. By default uses title configured in the document.\n  #\n  # Optional string.\n  # Must be non-empty\n  # Default value:\n  title = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring postgresql Data Source (HCL)\nDESCRIPTION: This HCL block defines the configuration structure for the `postgresql` data source. It shows the required `database_url` parameter, which is a non-empty string specifying the connection string for the PostgreSQL database.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/postgresql/data-sources/postgresql.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data postgresql {\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  database_url = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric OpenAI Text Content Provider HCL\nDESCRIPTION: Defines the configuration parameters for the `openai_text` content provider using the `config content openai_text` block. Key parameters include the mandatory `api_key` for authentication with the OpenAI service and optional settings like `system_prompt` and `organization_id` to customize the interaction with the API.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/openai/content-providers/openai_text.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig content openai_text {\n  # Optional string.\n  # Default value:\n  system_prompt = null\n\n  # Required string.\n  #\n  # For example:\n  api_key = \"some string\"\n\n  # Optional string.\n  # Default value:\n  organization_id = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring azure_openai_text Content Provider in Fabric (HCL)\nDESCRIPTION: Defines the configuration block for the `azure_openai_text` content provider, specifying required parameters like `api_key`, `resource_endpoint`, `deployment_name` for authentication and connection to Azure OpenAI, and an optional `api_version` with a default value.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/content-providers/azure_openai_text.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig content azure_openai_text {\n  # Required string.\n  #\n  # For example:\n  api_key = \"some string\"\n\n  # Required string.\n  #\n  # For example:\n  resource_endpoint = \"some string\"\n\n  # Required string.\n  #\n  # For example:\n  deployment_name = \"some string\"\n\n  # Optional string.\n  # Default value:\n  api_version = \"2024-02-01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Install Fabric CLI from GitHub Release (Bash)\nDESCRIPTION: This script outlines the steps to manually download a specific release archive of the Fabric CLI from GitHub, unpack its contents into a local directory, and verify the installation by running the help command. It requires standard command-line tools like `mkdir`, `wget`, and `tar`.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir fabric-bin\nwget https://github.com/blackstork-io/fabric/releases/latest/download/fabric_darwin_arm64.tar.gz -O ./fabric_darwin_arm64.tar.gz\ntar -xvzf ./fabric_darwin_arm64.tar.gz -C ./fabric-bin\n./fabric-bin/fabric --help\n```\n\n----------------------------------------\n\nTITLE: Configuring `rss` data source in HCL\nDESCRIPTION: This HCL block demonstrates how to configure and use the `rss` data source within a `fabric` template. It specifies the required `url` argument for the feed source and includes optional arguments such as `basic_auth` for authentication, `fill_in_content` to fetch full item content, user agent control, item limits, and timestamp-based filtering.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/rss.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndata rss {\n  # Basic authentication credentials to be used in a HTTP request fetching RSS feed.\n  #\n  # Optional\n  basic_auth {\n    # Required string.\n    #\n    # For example:\n    username = \"user@example.com\"\n\n    # Note: avoid storing credentials in the templates. Use environment variables instead.\n    #\n    # Required string.\n    #\n    # For example:\n    password = \"passwd\"\n  }\n\n\n  # Required string.\n  #\n  # For example:\n  url = \"https://www.elastic.co/security-labs/rss/feed.xml\"\n\n  # If the full content should be added when it's not present in the feed items.\n  #\n  # Optional bool.\n  # Default value:\n  fill_in_content = false\n\n  # If the data source should pretend to be a browser while fetching the feed and the feed items.\n  # If set to \"false\", the default user-agent value \"blackstork-rss/0.0.1\" will be used.\n  #\n  # Optional bool.\n  # Default value:\n  use_browser_user_agent = false\n\n  # Maximum number of items to fill the content in per feed.\n  #\n  # Optional number.\n  # Must be >= 0\n  #\n  # For example:\n  # max_items_to_fill = 10\n  #\n  # Default value:\n  max_items_to_fill = 10\n\n  # Return only items published after a specified timestamp. The timestamp format is \"%Y-%m-%dT%H:%M:%S%Z\".\n  #\n  # Optional string.\n  #\n  # For example:\n  # items_after = \"2024-12-23T00:00:00Z\"\n  #\n  # Default value:\n  items_after = null\n\n  # Return only items published before a specified timestamp. The timestamp format is \"%Y-%m-%dT%H:%M:%S%Z\".\n  #\n  # Optional string.\n  #\n  # For example:\n  # items_before = \"2024-12-23T00:00:00Z\"\n  #\n  # Default value:\n  items_before = null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Microsoft Graph Data Source Configuration HCL\nDESCRIPTION: This HCL block defines the available configuration arguments for the `microsoft_graph` data source, covering authentication parameters like client ID, client secret, tenant ID, private key options, and key passphrase.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_graph.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data microsoft_graph {\n  # The Azure client ID\n  #\n  # Required string.\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # The Azure client secret. Required if `private_key_file` or `private_key` is not provided.\n  #\n  # Optional string.\n  # Default value:\n  client_secret = null\n\n  # The Azure tenant ID\n  #\n  # Required string.\n  #\n  # For example:\n  tenant_id = \"some string\"\n\n  # The path to the private key file. Ignored if `private_key` or `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  private_key_file = null\n\n  # The private key contents. Ignored if `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  private_key = null\n\n  # The key passphrase. Ignored if `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  key_passphrase = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Sentinel Incidents Data Source (HCL)\nDESCRIPTION: This HCL snippet defines the configuration block for the `microsoft_sentinel_incidents` data source. It requires Azure authentication details (`client_id`, `client_secret`, `tenant_id`, `subscription_id`) and the target resource location (`resource_group_name`, `workspace_name`) as string arguments to connect to and query Microsoft Sentinel.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_sentinel_incidents.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data microsoft_sentinel_incidents {\n  # The Azure client ID\n  #\n  # Required string.\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # The Azure client secret\n  #\n  # Required string.\n  #\n  # For example:\n  client_secret = \"some string\"\n\n  # The Azure tenant ID\n  #\n  # Required string.\n  #\n  # For example:\n  tenant_id = \"some string\"\n\n  # The Azure subscription ID\n  #\n  # Required string.\n  #\n  # For example:\n  subscription_id = \"some string\"\n\n  # The Azure resource group name\n  #\n  # Required string.\n  #\n  # For example:\n  resource_group_name = \"some string\"\n\n  # The Azure workspace name\n  #\n  # Required string.\n  #\n  # For example:\n  workspace_name = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Title Content Provider HCL\nDESCRIPTION: Demonstrates the HCL syntax for declaring and configuring the built-in 'title' content provider within a fabric 'content' block. It specifies the title text via the 'value' argument and allows optional control over title size using 'absolute_size' and 'relative_size'. Required arguments include 'value'. Optional arguments are 'absolute_size' (default null) and 'relative_size' (default 0).\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/title.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ncontent title {\n  # Title content\n  #\n  # Required string.\n  #\n  # For example:\n  value = \"Vulnerability Report\"\n\n  # Sets the absolute size of the title.\n  # If `null` – absoulute title size is determined from the document structure\n  #\n  # Optional integer.\n  # Default value:\n  absolute_size = null\n\n  # Adjusts the absolute size of the title.\n  # The value (which may be negative) is added to the `absolute_size` to produce the final title size\n  #\n  # Optional integer.\n  # Default value:\n  relative_size = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring frontmatter content provider HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure the `frontmatter` content provider in a fabric file. It shows the optional `format` argument to specify the output format (yaml, toml, or json) and the required `content` argument, which is a map containing the data to be included in the frontmatter, supporting nested structures and accepting jq queriable data.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/frontmatter.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontent frontmatter {\n  # Format of the frontmatter.\n  #\n  # Optional string.\n  # Must be one of: \"yaml\", \"toml\", \"json\"\n  # Default value:\n  format = \"yaml\"\n\n  # Arbitrary key-value map to be put in the frontmatter.\n  #\n  # Required jq queriable.\n  # Must be non-empty\n  #\n  # For example:\n  content = {\n    key = \"arbitrary value\"\n    key2 = {\n      \"can be nested\" = 42\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring microsoft_security_query data source connection\nDESCRIPTION: Configure the `microsoft_security_query` data source with Azure authentication details. Required parameters are `client_id` and `tenant_id`. Authentication can be done using `client_secret` or a private key file/content (`private_key_file`, `private_key`) with an optional `key_passphrase`.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_security_query.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data microsoft_security_query {\n  # The Azure client ID\n  #\n  # Required string.\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # The Azure client secret. Required if `private_key_file` or `private_key` is not provided.\n  #\n  # Optional string.\n  # Default value:\n  client_secret = null\n\n  # The Azure tenant ID\n  #\n  # Required string.\n  #\n  # For example:\n  tenant_id = \"some string\"\n\n  # The path to the private key file. Ignored if `private_key` or `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  private_key_file = null\n\n  # The private key contents. Ignored if `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  private_key = null\n\n  # The key passphrase. Ignored if `client_secret` is provided.\n  #\n  # Optional string.\n  # Default value:\n  key_passphrase = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Data Source - HCL\nDESCRIPTION: This HCL snippet outlines the configuration arguments available for setting up the `elasticsearch` data source within a `config data` block, primarily used for defining connection and authentication details.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/elastic/data-sources/elasticsearch.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data elasticsearch {\n  # Optional string.\n  # Default value:\n  base_url = null\n\n  # Optional string.\n  # Default value:\n  cloud_id = null\n\n  # Optional string.\n  # Default value:\n  api_key_str = null\n\n  # Optional list of string.\n  # Default value:\n  api_key = null\n\n  # Optional string.\n  # Default value:\n  basic_auth_username = null\n\n  # Optional string.\n  # Default value:\n  basic_auth_password = null\n\n  # Optional string.\n  # Default value:\n  bearer_auth = null\n\n  # Optional string.\n  # Default value:\n  ca_certs = null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Source Configuration in Fabric HCL\nDESCRIPTION: This HCL snippet shows the configuration arguments for the `elastic_security_cases` data source within a `config data` block. It includes the required `kibana_endpoint_url` and optional API key authentication arguments (`api_key_str` or `api_key`).\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/elastic/data-sources/elastic_security_cases.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data elastic_security_cases {\n  # Required string.\n  #\n  # For example:\n  kibana_endpoint_url = \"some string\"\n\n  # Optional string.\n  # Default value:\n  api_key_str = null\n\n  # Optional [string, string].\n  # Default value:\n  api_key = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Misp_events Data Source Connection (HCL)\nDESCRIPTION: This snippet defines the configuration arguments for the `misp_events` data source, which are typically used to set up the connection parameters for the MISP instance. It includes required arguments like `api_key` and `base_url`, and an optional boolean `skip_ssl` for controlling SSL verification. These settings are provided within a `config data` block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/misp/data-sources/misp_events.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data misp_events {\n  # misp api key\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_key = \"some string\"\n\n  # misp base url\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  base_url = \"some string\"\n\n  # skip ssl verification\n  #\n  # Optional bool.\n  # Default value:\n  skip_ssl = false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Iris Alerts Data Source (HCL)\nDESCRIPTION: Defines the required and optional configuration arguments for the `iris_alerts` data source. It specifies `api_url` and `api_key` as required strings and `insecure` as an optional boolean, along with descriptions and constraints for each parameter.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/iris/data-sources/iris_alerts.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data iris_alerts {\n  # Iris API url\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_url = \"some string\"\n\n  # Iris API Key\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_key = \"some string\"\n\n  # Enable/disable insecure TLS\n  #\n  # Optional bool.\n  # Default value:\n  insecure = false\n}\n```\n\n----------------------------------------\n\nTITLE: Using the image Content Provider (HCL)\nDESCRIPTION: Defines the HCL syntax for using the 'image' content provider. It requires the `src` argument, a non-empty string for the image URL, and optionally accepts an `alt` string for alternative text, which defaults to null. This block demonstrates the syntax and required parameters for generating an image tag.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/image.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontent image {\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  src = \"https://example.com/img.png\"\n\n  # Optional string.\n  #\n  # For example:\n  # alt = \"Text description of the image\"\n  #\n  # Default value:\n  alt = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring toc Content Provider HCL\nDESCRIPTION: This HCL block defines the usage arguments for the `toc` content provider. It allows configuration of the header level range (start_level, end_level), list ordering (ordered), and the search scope (document, section, auto) for headers when generating the table of contents.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/toc.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontent toc {\n  # Largest header size which produces entries in the table of contents\n  #\n  # Optional integer.\n  # Must be between 0 and 5 (inclusive)\n  # Default value:\n  start_level = 0\n\n  # Smallest header size which produces entries in the table of contents\n  #\n  # Optional integer.\n  # Must be between 0 and 5 (inclusive)\n  # Default value:\n  end_level = 2\n\n  # Whether to use ordered list for the contents\n  #\n  # Optional bool.\n  # Default value:\n  ordered = false\n\n  # Scope of the headers to evaluate.\n  #   \"document\" – look for headers in the whole document\n  #   \"section\" – look for headers only in the current section\n  #   \"auto\" – behaves as \"section\" if the \"toc\" block is inside of a section; else – behaves as \"document\"\n  #\n  # Optional string.\n  # Must be one of: \"document\", \"section\", \"auto\"\n  # Default value:\n  scope = \"auto\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring `yaml` Data Source HCL\nDESCRIPTION: This HCL snippet shows how to define and configure the `yaml` data source block within a Fabric configuration file. It details the optional `glob` and `path` arguments, explaining their purpose for selecting YAML files to be read.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/yaml.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ndata yaml {\n  # A glob pattern to select YAML files to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # glob = \"path/to/file*.yaml\"\n  #\n  # Default value:\n  glob = null\n\n  # A file path to a YAML file to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # path = \"path/to/file.yaml\"\n  #\n  # Default value:\n  path = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Content Provider HCL\nDESCRIPTION: This snippet demonstrates how to configure and use the `list` content provider in HCL. It shows the available arguments: `item_template` for customizing item rendering using Go templates, `format` for specifying the list type (unordered, ordered, tasklist), and `items` which is a required list of data to render. The example shows how to provide a static list of strings as input.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/list.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ncontent list {\n  # Go template for the item of the list\n  #\n  # Optional string.\n  #\n  # For example:\n  # item_template = \"[{{.Title}}]({{.URL}})\"\n  #\n  # Default value:\n  item_template = \"{{.}}\"\n\n  # Optional string.\n  # Must be one of: \"unordered\", \"ordered\", \"tasklist\"\n  # Default value:\n  format = \"unordered\"\n\n  # List of items to render.\n  #\n  # Required list of jq queriable.\n  # Must be non-empty\n  #\n  # For example:\n  # items = [\"First item\", \"Second item\", \"Third item\"]\n  items = [\"First item\", \"Second item\", \"Third item\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration Syntax for txt data source - HCL\nDESCRIPTION: This HCL snippet demonstrates the configuration block for the 'txt' data source in a fabric HCL file. It defines the available optional arguments, 'glob' and 'path', explaining their purpose, type, and default values.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/txt.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ndata txt {\n  # A glob pattern to select TXT files to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # glob = \"path/to/file*.txt\"\n  #\n  # Default value:\n  glob = null\n\n  # A file path to a TXT file to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # path = \"path/to/file.txt\"\n  #\n  # Default value:\n  path = null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Accessing Local Variable in HCL/Go Template\nDESCRIPTION: Shows the usage of the 'local_var' argument within an HCL block (like 'content text') as a shortcut to define a single local variable named 'local'. This variable's value is then accessed within a string using standard Go template syntax ('{{ .vars.local }}').\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/context.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ncontent text {\n  local_var = \"World\"\n  value = \"Hello, {{ .vars.local }}!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying CrowdStrike Plugin Version in Fabric HCL\nDESCRIPTION: Configures the required version of the `blackstork/crowdstrike` plugin within the global Fabric configuration block using HCL. This block ensures that the Fabric codebase is compatible with and can use the specified plugin version. It's a necessary step in the plugin installation process.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/crowdstrike\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Block Metadata (HCL)\nDESCRIPTION: Illustrates the use of the `meta` block within an individual content block (`content text`) to associate specific metadata, such as a name and tags, with that particular block instance within the document template. This allows for granular metadata application.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_7\n\nLANGUAGE: HCL\nCODE:\n```\ncontent text \"disclaimer\" {\n  meta {\n    name = \"Disclaimer text\"\n    tags = [\"foo\", \"bar\"]\n  }\n\n  value = \"Some disclaimer text\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CrowdStrike Plugin Fabric Configuration HCL\nDESCRIPTION: This HCL snippet configures the Fabric global settings to include the `blackstork/crowdstrike` plugin with a specified version constraint (`>= v0.4.2`), enabling its use within the project. It requires modifying the main Fabric configuration file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_detection_details.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/crowdstrike\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/crowdstrike plugin using Fabric HCL\nDESCRIPTION: This HCL snippet shows how to declare the required version of the blackstork/crowdstrike plugin within the global `fabric` configuration block. This is necessary before the `falcon_vulnerabilities` data source can be used.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_vulnerabilities.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/crowdstrike\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric for Github Plugin Installation (HCL)\nDESCRIPTION: This HCL snippet shows how to configure the global Fabric block to specify the required version constraint for the `blackstork/github` plugin, enabling its installation and usage within Fabric workflows. It is placed in the main Fabric configuration file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/github/publishers/github_gist.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/github\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring blackstork/elastic Plugin Version in Fabric HCL\nDESCRIPTION: This HCL snippet demonstrates how to specify the required version constraint for the blackstork/elastic plugin within the global fabric configuration block. This ensures compatibility with the plugin version 0.4.2 or newer.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/elastic/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/elastic\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring blackstork/github Plugin Version HCL\nDESCRIPTION: This HCL snippet demonstrates how to add and configure the version constraint for the 'blackstork/github' plugin within the 'fabric' global configuration block. It specifies that the codebase is compatible with plugin versions greater than or equal to v0.4.2.\n\nThis requires a Fabric global configuration block to be present in the configuration file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/github/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/github\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/nist_nvd plugin in Fabric (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to add the `blackstork/nist_nvd` plugin to the `plugin_versions` map within the Fabric global configuration block, specifying a required version constraint. This step is necessary to make the plugin and its data sources available for use.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/nist_nvd/data-sources/nist_nvd_cves.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/nist_nvd\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing blackstork/postgresql Plugin (HCL)\nDESCRIPTION: This HCL block demonstrates how to configure the global Fabric settings to install the `blackstork/postgresql` plugin. It specifies the required version constraint `>= v0.4.2` for the plugin within the `plugin_versions` map.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/postgresql/data-sources/postgresql.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/postgresql\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fabric Document to HTML (Bash)\nDESCRIPTION: Demonstrates executing the `fabric render` command to process a document named `document.example` and output the result directly to standard output in HTML format. This command does *not* trigger `publish` blocks.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ fabric render document.example --format html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n<h1 id=\"document-title\">Hell World</h1>\n<p>Document body</p>\n</body>\n</html>%\n```\n\n----------------------------------------\n\nTITLE: Configuring falcon_vulnerabilities data source in Fabric HCL\nDESCRIPTION: This HCL snippet defines the configuration arguments for an instance of the `falcon_vulnerabilities` data source. It includes required arguments for API authentication (`client_id`, `client_secret`) and optional arguments for MSSP or cloud selection (`member_cid`, `client_cloud`).\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_vulnerabilities.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data falcon_vulnerabilities {\n  # Client ID for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # Client Secret for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_secret = \"some string\"\n\n  # Member CID for MSSP\n  #\n  # Optional string.\n  # Default value:\n  member_cid = null\n\n  # Falcon cloud abbreviation\n  #\n  # Optional string.\n  # Must be one of: \"autodiscover\", \"us-1\", \"us-2\", \"eu-1\", \"us-gov-1\", \"gov1\"\n  #\n  # For example:\n  # client_cloud = \"us-1\"\n  #\n  # Default value:\n  client_cloud = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Data Source Delimiter (HCL)\nDESCRIPTION: This HCL snippet shows the syntax for configuring the 'csv' data source within a Fabric project. It defines the optional 'delimiter' argument, which allows specifying the character used as the field separator in the CSV files. The default delimiter is a comma.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/csv.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data csv {\n  # CSV field delimiter\n  #\n  # Optional string.\n  # Must have a length of 1\n  # Default value:\n  delimiter = \",\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stixview Content Block in Fabric HCL\nDESCRIPTION: This HCL snippet demonstrates the available arguments for configuring the `stixview` content provider block. It lists various optional parameters like `gist_id`, `stix_url`, display options (show_footer, show_sidebar, etc.), dimensions (width, height), and an `objects` parameter for filtering.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/stixview/content-providers/stixview.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ncontent stixview {\n  # Optional string.\n  # Default value:\n  gist_id = null\n\n  # Optional string.\n  # Default value:\n  stix_url = null\n\n  # Optional string.\n  # Default value:\n  caption = null\n\n  # Optional bool.\n  # Default value:\n  show_footer = null\n\n  # Optional bool.\n  # Default value:\n  show_sidebar = null\n\n  # Optional bool.\n  # Default value:\n  show_tlp_as_tags = null\n\n  # Optional bool.\n  # Default value:\n  show_marking_nodes = null\n\n  # Optional bool.\n  # Default value:\n  show_labels = null\n\n  # Optional bool.\n  # Default value:\n  show_idrefs = null\n\n  # Optional number.\n  # Default value:\n  width = null\n\n  # Optional number.\n  # Default value:\n  height = null\n\n  # Optional jq queriable.\n  # Default value:\n  objects = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source: falcon_discover_host_details (HCL)\nDESCRIPTION: This HCL snippet defines the configuration block for the `falcon_discover_host_details` data source. It includes required arguments like `client_id` and `client_secret` for authentication with the CrowdStrike Falcon Platform, and optional arguments like `member_cid` and `client_cloud` for specific account or cloud environments.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_discover_host_details.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data falcon_discover_host_details {\n  # Client ID for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # Client Secret for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_secret = \"some string\"\n\n  # Member CID for MSSP\n  #\n  # Optional string.\n  # Default value:\n  member_cid = null\n\n  # Falcon cloud abbreviation\n  #\n  # Optional string.\n  # Must be one of: \"autodiscover\", \"us-1\", \"us-2\", \"eu-1\", \"us-gov-1\", \"gov1\"\n  #\n  # For example:\n  # client_cloud = \"us-1\"\n  #\n  # Default value:\n  client_cloud = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication and Cloud for Falcon Intel Indicators Data Source (HCL)\nDESCRIPTION: Details the HCL configuration block for the `falcon_intel_indicators` data source, including required credentials (`client_id`, `client_secret`) and optional parameters like `member_cid` for MSSP and `client_cloud` for specifying the Falcon cloud region. This block defines how the data source connects to the Falcon API.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_intel_indicators.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data falcon_intel_indicators {\n  # Client ID for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # Client Secret for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_secret = \"some string\"\n\n  # Member CID for MSSP\n  #\n  # Optional string.\n  # Default value:\n  member_cid = null\n\n  # Falcon cloud abbreviation\n  #\n  # Optional string.\n  # Must be one of: \"autodiscover\", \"us-1\", \"us-2\", \"eu-1\", \"us-gov-1\", \"gov1\"\n  #\n  # For example:\n  # client_cloud = \"us-1\"\n  #\n  # Default value:\n  client_cloud = null\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CrowdStrike Plugin Version - Fabric HCL\nDESCRIPTION: This HCL snippet demonstrates how to declare the required version of the `blackstork/crowdstrike` plugin within the `fabric` global configuration block. This declaration is essential for Fabric to correctly identify, download, and utilize the specified plugin version during project execution, ensuring compatibility and access to the `falcon_cspm_ioms` data source. It sets a minimum version constraint of `>= v0.4.2`.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_cspm_ioms.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/crowdstrike\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Fabric Document to Markdown (Bash)\nDESCRIPTION: Demonstrates executing the `fabric render` command to process a document named `document.example` and output the result directly to standard output in Markdown format. This command does *not* trigger `publish` blocks.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ fabric render document.example --format md\n# Hello World\n\nDocument body\n```\n\n----------------------------------------\n\nTITLE: Installing Fabric Plugin: blackstork/crowdstrike (HCL)\nDESCRIPTION: This HCL snippet shows how to add the `blackstork/crowdstrike` plugin to the `plugin_versions` map within the global `fabric` configuration block. This is required to make the `falcon_discover_host_details` data source available for use. It specifies the required version constraint for the plugin.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_discover_host_details.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/crowdstrike\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Issues Authentication HCL\nDESCRIPTION: The `github_issues` data source requires authentication using a GitHub token. Configure this by defining a `config data github_issues` block and providing your token string in the `github_token` argument.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/github/data-sources/github_issues.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data github_issues {\n  # The GitHub token to use for authentication\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  github_token = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HackerOne Reports Data Source (HCL)\nDESCRIPTION: This HCL block defines the required configuration arguments for the `hackerone_reports` data source. It specifies `api_username` and `api_token` as mandatory string parameters, which are used to authenticate with the HackerOne API to retrieve report data.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/hackerone/data-sources/hackerone_reports.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data hackerone_reports {\n  # Required string.\n  #\n  # For example:\n  api_username = \"some string\"\n\n  # Required string.\n  #\n  # For example:\n  api_token = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Falcon CSPM IOMs Data Source - Fabric HCL\nDESCRIPTION: This HCL snippet defines the configuration block required for the `falcon_cspm_ioms` data source. It includes parameters for authenticating with the CrowdStrike Falcon Platform, such as the mandatory `client_id` and `client_secret`, and optional settings like `member_cid` for MSSP environments and `client_cloud` to specify the Falcon cloud region endpoint. Correct configuration of these arguments is crucial for successful data source operation and accessing CSPM IOMs.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_cspm_ioms.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data falcon_cspm_ioms {\n  # Client ID for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_id = \"some string\"\n\n  # Client Secret for accessing CrowdStrike Falcon Platform\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  client_secret = \"some string\"\n\n  # Member CID for MSSP\n  #\n  # Optional string.\n  # Default value:\n  member_cid = null\n\n  # Falcon cloud abbreviation\n  #\n  # Optional string.\n  # Must be one of: \"autodiscover\", \"us-1\", \"us-2\", \"eu-1\", \"us-gov-1\", \"gov1\"\n  #\n  # For example:\n  # client_cloud = \"us-1\"\n  #\n  # Default value:\n  client_cloud = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring `hub` Publisher HCL\nDESCRIPTION: Defines the configuration block for the `hub` publisher plugin in HCL. It requires the `api_url` and `api_token` parameters, which are non-empty strings used for API endpoint specification and authentication.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/publishers/hub.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nconfig publish hub {\n  # API url.\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_url = \"some string\"\n\n  # API url.\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_token = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Iris Cases Data Source (HCL)\nDESCRIPTION: This HCL block defines the configuration parameters required for the `iris_cases` data source. It typically resides in a `config` block and includes mandatory `api_url` and `api_key` strings for API access, plus an optional boolean `insecure` flag.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/iris/data-sources/iris_cases.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data iris_cases {\n  # Iris API url\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_url = \"some string\"\n\n  # Iris API Key\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_key = \"some string\"\n\n  # Enable/disable insecure TLS\n  #\n  # Optional bool.\n  # Default value:\n  insecure = false\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Atlassian Plugin using Fabric HCL\nDESCRIPTION: This HCL snippet demonstrates how to declare the required version constraint for the `blackstork/atlassian` plugin within the `plugin_versions` map of the Fabric global configuration block.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/atlassian/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/atlassian\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Version in Fabric HCL\nDESCRIPTION: This HCL snippet demonstrates how to specify the required version constraint for the `blackstork/elastic` plugin within the global `fabric` configuration block. This ensures the correct plugin version is used by Fabric.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/elastic/data-sources/elastic_security_cases.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/elastic\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Data Plugin (HCL)\nDESCRIPTION: This snippet defines an anonymous `config` block for the `elasticsearch` data plugin in FCL. It provides connection details using `cloud_id` and `api_key` to configure the Elasticsearch data source plugin, allowing Fabric to connect to and retrieve data from an Elasticsearch instance.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/_index.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\n# Anonymous configuration block for a data plugin:\nconfig data elasticsearch {\n    cloud_id = \"my-elastic-cloud-id\"\n    api_key = \"my-elastic-cloud-api-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using blockquote Content Provider HCL\nDESCRIPTION: This HCL snippet demonstrates how to use the built-in `blockquote` content provider within a Fabric configuration. It shows the `content blockquote` block which accepts a required `value` argument, representing the string text to be formatted as a block quote.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/blockquote.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncontent blockquote {\n  # Required string.\n  #\n  # For example:\n  value = \"Text to be formatted as a quote\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Sleep Content Provider in HCL\nDESCRIPTION: This HCL snippet demonstrates how to invoke the built-in 'sleep' content provider. It shows the 'content sleep' block and the required 'duration' execution argument, which specifies how long the provider should pause execution. The duration must be a non-empty string, defaulting to '1s'.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/content-providers/sleep.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ncontent sleep {\n  # Duration to sleep\n  #\n  # Optional string.\n  # Must be non-empty\n  # Default value:\n  duration = \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring `sleep` Data Source HCL\nDESCRIPTION: This snippet demonstrates the HCL syntax for declaring and using the `sleep` data source within a `fabric` configuration file. The data source is defined within a `data` block and accepts a single execution argument, `duration`, which is an optional string specifying the time to sleep (e.g., \"1s\"), defaulting to \"1s\" if not provided.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/sleep.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\ndata sleep {\n  # Duration to sleep\n  #\n  # Optional string.\n  # Must be non-empty\n  # Default value:\n  duration = \"1s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring terraform_state_local Data Source HCL\nDESCRIPTION: This HCL configuration block shows the basic structure for declaring the `terraform_state_local` data source. It requires the `path` argument, which is a string specifying the path to the local Terraform state file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/terraform/data-sources/terraform_state_local.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\ndata terraform_state_local {\n  # Required string.\n  #\n  # For example:\n  path = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fabric Render Command Help (Bash)\nDESCRIPTION: Displays the command-line help output for the `fabric render` command, which is used to process Fabric documents. It lists available arguments, flags (like `--format` and `--publish`), and their descriptions.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ fabric render --help\n\nRender the specified document and either publish it or output it as Markdown to stdout.\n\nUsage:\n  fabric render TARGET [flags]\n\nArgs:\n  TARGET   name of the document to be rendered as 'document.<name>'\n\nFlags:\n      --format string   default output format of the document (md, html or pdf) (default \"md\")\n  -h, --help            help for render\n      --publish         publish the rendered document\n\nGlobal Flags:\n      --color               enables colorizing the logs and diagnostics (if supported by the terminal and log format) (default true)\n      --log-format string   format of the logs (plain or json) (default \"plain\")\n      --log-level string    logging level ('debug', 'info', 'warn', 'error') (default \"info\")\n      --source-dir string   a path to a directory with *.fabric files (default \".\")\n  -v, --verbose             a shortcut to --log-level debug\n```\n\n----------------------------------------\n\nTITLE: Using CSV Data Source with Path or Glob (HCL)\nDESCRIPTION: This HCL snippet demonstrates how to use the 'csv' data source during execution. It shows the required execution arguments: either 'glob' (a pattern for multiple files) or 'path' (a specific file path). One of these arguments must be provided.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/csv.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata csv {\n  # A glob pattern to select CSV files to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # glob = \"path/to/file*.csv\"\n  #\n  # Default value:\n  glob = null\n\n  # A file path to a CSV file to read\n  #\n  # Optional string.\n  #\n  # For example:\n  # path = \"path/to/file.csv\"\n  #\n  # Default value:\n  path = null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin Registry (HCL)\nDESCRIPTION: Demonstrates the optional `plugin_registry` nested block within the global `fabric` configuration. It allows specifying the base URL for the plugin registry and a local mirror directory for plugin binaries, controlling where Fabric fetches plugins.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nplugin_registry {\n  base_url = \"<url>\"\n  mirror_dir = \"<path>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Fabric CLI Help Text (text)\nDESCRIPTION: This snippet shows the output of the `fabric --help` command, which displays the main usage information, available commands, and global flags for the Fabric CLI tool.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/cli.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ fabric --help\nUsage:\n  fabric [command]\n\nAvailable Commands:\n  completion  Generate the autocompletion script for the specified shell\n  data        Execute a single data block\n  help        Help about any command\n  install     Install plugins\n  render      Render the document\n\nFlags:\n      --color               enables colorizing the logs and diagnostics (if supported by the terminal and log format) (default true)\n  -h, --help                help for fabric\n      --log-format string   format of the logs (plain or json) (default \"plain\")\n      --log-level string    logging level ('debug', 'info', 'warn', 'error') (default \"info\")\n      --source-dir string   a path to a directory with *.fabric files (default \".\")\n  -v, --verbose             a shortcut to --log-level debug\n      --version             version for fabric\n\nUse \"fabric [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Using azure_openai_text Content Provider in Fabric (HCL)\nDESCRIPTION: Defines the execution block for the `azure_openai_text` content provider, used to specify the required `prompt` for text generation and control various optional parameters like `max_tokens`, `temperature`, `top_p`, and `completions_count` when invoking the provider.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/content-providers/azure_openai_text.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ncontent azure_openai_text {\n  # Required string.\n  #\n  # For example:\n  prompt = \"Summarize the following text: {{.vars.text_to_summarize}}\"\n\n  # Optional number.\n  # Default value:\n  max_tokens = 1000\n\n  # Optional number.\n  # Default value:\n  temperature = 0\n\n  # Optional number.\n  # Default value:\n  top_p = null\n\n  # Optional number.\n  # Default value:\n  completions_count = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Falcon Intel Indicators Data Source Query (HCL)\nDESCRIPTION: Illustrates the HCL syntax for executing a query using the `falcon_intel_indicators` data source. It shows optional arguments (`limit`, `filter`, `sort`) for controlling the query results, allowing users to fetch, filter, and sort intel indicators from the Falcon API.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_intel_indicators.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata falcon_intel_indicators {\n  # limit the number of queried items\n  #\n  # Optional integer.\n  # Default value:\n  limit = 10\n\n  # Indicators filter expression using Falcon Query Language (FQL)\n  #\n  # Optional string.\n  # Default value:\n  filter = null\n\n  # Indicators sort expression using Falcon Query Language (FQL)\n  #\n  # Optional string.\n  # Default value:\n  sort = null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Falcon CSPM IOMs Data Source - Fabric HCL\nDESCRIPTION: This HCL snippet illustrates the execution block for querying the `falcon_cspm_ioms` data source. It shows how to provide runtime arguments, specifically the optional `limit` parameter, which controls the maximum number of CSPM IOM items fetched by the data source during execution. If not explicitly set, the data source defaults to retrieving 10 items.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_cspm_ioms.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata falcon_cspm_ioms {\n  # limit the number of queried items\n  #\n  # Optional integer.\n  # Default value:\n  limit = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Source Execution Arguments in Fabric HCL\nDESCRIPTION: This HCL snippet illustrates how to declare and configure the execution arguments when using the `elastic_security_cases` data source within a `data` block. It lists various optional arguments like `space_id`, `assignees`, `search`, `status`, `severity`, `sort_field`, `sort_order`, `from`, `to`, `size`, `owner`, `reporters`, `search_fields`, and `tags` to filter the retrieved Elastic Security cases.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/elastic/data-sources/elastic_security_cases.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata elastic_security_cases {\n  # Optional string.\n  # Default value:\n  space_id = null\n\n  # Optional list of string.\n  # Default value:\n  assignees = null\n\n  # Optional string.\n  # Default value:\n  default_search_operator = null\n\n  # Optional string.\n  # Default value:\n  from = null\n\n  # Optional list of string.\n  # Default value:\n  owner = null\n\n  # Optional list of string.\n  # Default value:\n  reporters = null\n\n  # Optional string.\n  # Default value:\n  search = null\n\n  # Optional list of string.\n  # Default value:\n  search_fields = null\n\n  # Optional string.\n  # Default value:\n  severity = null\n\n  # Optional string.\n  # Default value:\n  sort_field = null\n\n  # Optional string.\n  # Default value:\n  sort_order = null\n\n  # Optional string.\n  # Default value:\n  status = null\n\n  # Optional list of string.\n  # Default value:\n  tags = null\n\n  # Optional string.\n  # Default value:\n  to = null\n\n  # Optional number.\n  # Default value:\n  size = null\n}\n```\n\n----------------------------------------\n\nTITLE: Display Fabric CLI Help and Usage (Bash)\nDESCRIPTION: This command executes the Fabric CLI with the `--help` flag to display its overall usage instructions, available commands (`completion`, `data`, `help`, `install`, `render`), and global options (`--color`, `--log-format`, etc.). It is typically used to understand the basic functionality and arguments of the tool.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./fabric --help\n```\n\n----------------------------------------\n\nTITLE: Using GitHub Issues Data Source HCL\nDESCRIPTION: Query GitHub issues by defining a `data github_issues` block and providing the necessary arguments, such as the target `repository`. Optional arguments allow filtering by `state`, `assignee`, `labels`, sorting by `created` or `updated` date, and limiting the results.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/github/data-sources/github_issues.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata github_issues {\n  # The repository to list issues from, in the format of owner/name\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  repository = \"blackstork-io/fabric\"\n\n  # Filter issues by milestone. Possible values are:\n  # * a milestone number\n  # * \"none\" for issues with no milestone\n  # * \"*\" for issues with any milestone\n  # * \"\" (empty string) performs no filtering\n  #\n  # Optional string.\n  # Default value:\n  milestone = \"\"\n\n  # Filter issues based on their state\n  #\n  # Optional string.\n  # Must be one of: \"open\", \"closed\", \"all\"\n  # Must be non-empty\n  # Default value:\n  state = \"open\"\n\n  # Filter issues based on their assignee. Possible values are:\n  # * a user name\n  # * \"none\" for issues that are not assigned\n  # * \"*\" for issues with any assigned user\n  # * \"\" (empty string) performs no filtering.\n  #\n  # Optional string.\n  # Default value:\n  assignee = \"\"\n\n  # Filter issues based on their creator. Possible values are:\n  # * a user name\n  # * \"\" (empty string) performs no filtering.\n  #\n  # Optional string.\n  # Default value:\n  creator = \"\"\n\n  # Filter issues to once where this username is mentioned. Possible values are:\n  # * a user name\n  # * \"\" (empty string) performs no filtering.\n  #\n  # Optional string.\n  # Default value:\n  mentioned = \"\"\n\n  # Filter issues based on their labels.\n  #\n  # Optional list of string.\n  # Default value:\n  labels = null\n\n  # Specifies how to sort issues.\n  #\n  # Optional string.\n  # Must be one of: \"created\", \"updated\", \"comments\"\n  # Must be non-empty\n  # Default value:\n  sort = \"created\"\n\n  # Specifies the direction in which to sort issues.\n  #\n  # Optional string.\n  # Must be one of: \"asc\", \"desc\"\n  # Must be non-empty\n  # Default value:\n  direction = \"desc\"\n\n  # Only show results that were last updated after the given time.\n  # This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.\n  #\n  # Optional string.\n  # Must be non-empty\n  # Default value:\n  since = null\n\n  # Limit the number of issues to return. -1 means no limit.\n  #\n  # Optional integer.\n  # Must be >= -1\n  # Default value:\n  limit = -1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elasticsearch Data (HCL)\nDESCRIPTION: This snippet defines a named `data` block in FCL using the `elasticsearch` plugin. It specifies the index (`.alerts-security.alerts-*`) and a `query_string` (`kibana.alert.severity:critical`) to fetch data, likely critical security alerts, for use within the Fabric document generation process.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/_index.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\n# Named data block:\n\ndata elasticsearch \"alerts\" {\n    index = \".alerts-security.alerts-*\"\n    query_string = \"kibana.alert.severity:critical\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Microsoft Security Data Source (HCL)\nDESCRIPTION: Configures a specific query using the 'microsoft_security' data source to retrieve data from the Microsoft Security API. Key parameters include the API 'endpoint', optional 'query_params', maximum 'size' of results, and 'is_object_endpoint' to handle single-object responses.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_security.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata microsoft_security {\n  # API endpoint to query\n  #\n  # Required string.\n  #\n  # For example:\n  endpoint = \"/users\"\n\n  # HTTP query parameters\n  #\n  # Optional map of string.\n  # Default value:\n  query_params = null\n\n  # Number of objects to be returned\n  #\n  # Optional number.\n  # Must be >= 1\n  # Default value:\n  size = 50\n\n  # Indicates if API endpoint serves a single object. If set to `true`, `query_params` and `size` arguments are ignored.\n  #\n  # Optional bool.\n  # Default value:\n  is_object_endpoint = false\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Microsoft Sentinel Incidents Data Source (HCL)\nDESCRIPTION: This HCL snippet shows how to use the `microsoft_sentinel_incidents` data source within a configuration to fetch data. It accepts optional execution arguments: `filter` (string) for selecting incidents, `size` (number, >= 1) to limit results (default 50), and `order_by` (string) to sort the output.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/microsoft/data-sources/microsoft_sentinel_incidents.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata microsoft_sentinel_incidents {\n  # The filter expression\n  #\n  # Optional string.\n  # Default value:\n  filter = null\n\n  # Number of objects to be returned\n  #\n  # Optional number.\n  # Must be >= 1\n  # Default value:\n  size = 50\n\n  # The order by expression\n  #\n  # Optional string.\n  # Default value:\n  order_by = null\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Data Source: falcon_discover_host_details (HCL)\nDESCRIPTION: This HCL snippet demonstrates the execution block for the `falcon_discover_host_details` data source. It includes optional arguments to control the query behavior, such as `limit` to restrict the number of returned items and `filter` to specify a search expression using Falcon Query Language (FQL).\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_discover_host_details.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata falcon_discover_host_details {\n  # limit the number of queried items\n  #\n  # Optional integer.\n  # Default value:\n  limit = 10\n\n  # Host search expression using Falcon Query Language (FQL)\n  #\n  # Optional string.\n  # Default value:\n  filter = null\n}\n```\n\n----------------------------------------\n\nTITLE: Using Elasticsearch Data Source - HCL\nDESCRIPTION: This HCL snippet illustrates the execution arguments available when invoking the `elasticsearch` data source within a `data` block to perform queries, specifying parameters like the target `index`, optional `id`, query details, and result size.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/elastic/data-sources/elasticsearch.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\ndata elasticsearch {\n  # Required string.\n  #\n  # For example:\n  index = \"some string\"\n\n  # Optional string.\n  # Default value:\n  id = null\n\n  # Optional string.\n  # Default value:\n  query_string = null\n\n  # Optional map of any single type.\n  # Default value:\n  query = null\n\n  # Optional any type.\n  # Default value:\n  aggs = null\n\n  # Optional bool.\n  # Default value:\n  only_hits = null\n\n  # Optional list of string.\n  # Default value:\n  fields = null\n\n  # Optional number.\n  # Must be >= 0\n  # Default value:\n  size = 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Using Falcon Detection Details Data Source HCL\nDESCRIPTION: This HCL block demonstrates how to use the `falcon_detection_details` data source, allowing specification of runtime arguments like an FQL `filter` to narrow down results and a `limit` to control the number of detections fetched (defaulting to 10). This block is placed where the data source is invoked.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_detection_details.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ndata falcon_detection_details {\n  # Host search expression using Falcon Query Language (FQL)\n  #\n  # Optional string.\n  # Default value:\n  filter = null\n\n  # limit the number of queried items\n  #\n  # Optional integer.\n  # Default value:\n  limit = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring jira_issues Data Source Connection\nDESCRIPTION: This HCL snippet outlines the required configuration arguments for the `jira_issues` data source. It requires the Jira account's domain, email, and an API token for authentication, all provided as non-empty strings.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/atlassian/data-sources/jira_issues.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nconfig data jira_issues {\n  # Account Domain.\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  domain = \"some string\"\n\n  # Account Email.\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  account_email = \"some string\"\n\n  # API Token.\n  #\n  # Required string.\n  # Must be non-empty\n  #\n  # For example:\n  api_token = \"some string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Fabric (HCL)\nDESCRIPTION: Illustrates how environment variables can be accessed within Fabric configurations. It shows using the global `env` object directly for values and accessing exposed variables within the evaluation context (`.env`) using template functions like `query_jq` for more complex operations.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/configs.md#_snippet_5\n\nLANGUAGE: HCL\nCODE:\n```\nconfig data elasticsearch {\n  basic_auth_username = \"elastic\"\n  basic_auth_password = env.ELASTICSEARCH_PASSWORD\n}\n\ncontent text {\n  local_var = query_jq(\".env.FOOBAR | split(\\\",\\\") | length\")\n  value = \"There are {{ .vars.local }} elements in `FOOBAR` env var\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Splunk Plugin - HCL\nDESCRIPTION: To enable the `splunk_search` data source, install the `blackstork/splunk` plugin by adding its required version constraint to the `plugin_versions` map within the global `fabric` configuration block. This step is a prerequisite for using any resources or data sources provided by this plugin.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/splunk/data-sources/splunk_search.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/splunk\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring CrowdStrike Plugin Version in Fabric Configuration (HCL)\nDESCRIPTION: Provides the HCL syntax for specifying the `blackstork/crowdstrike` plugin and its required version constraint within the `fabric` global configuration block. This block is necessary to install and enable the plugin before using its data sources.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/crowdstrike/data-sources/falcon_intel_indicators.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nfabric {\n  plugin_versions = {\n    \"blackstork/crowdstrike\" = \">= v0.4.2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Fabric Dynamic Block (HCL)\nDESCRIPTION: Shows the basic syntax for defining a 'dynamic' block in Fabric templates. It wraps another block type ('<block-signature>') and contains its own 'dynamic_' arguments as well as the wrapped block's original arguments and nested blocks.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/dynamic-blocks.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndynamic <block-signature> {\n\n  # Dynamic block arguments\n  # ...\n\n  # Original block arguments and nested blocks\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Multiple CSV Files as JSON Array (Glob Mode)\nDESCRIPTION: This JSON snippet illustrates the data structure returned by the 'csv' data source when the 'glob' argument matches multiple files. It is an array of objects, where each object contains file metadata ('file_path', 'file_name') and the parsed 'content' of that file, structured as shown in the single-file example.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/csv.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"file_path\": \"path/file-a.csv\",\n    \"file_name\": \"file-a.csv\",\n    \"content\": [\n      {\"column_A\": \"Foo\", \"column_B\": true, \"column_C\": 42},\n      {\"column_A\": \"Bar\", \"column_B\": false, \"column_C\": 4.2}\n    ]\n  },\n  {\n    \"file_path\": \"path/file-b.csv\",\n    \"file_name\": \"file-b.csv\",\n    \"content\": [\n      {\"column_C\": \"Baz\", \"column_D\": 1},\n      {\"column_C\": \"Clu\", \"column_D\": 2}\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Output JSON for `glob` Pattern\nDESCRIPTION: This JSON snippet illustrates the output format when the `yaml` data source is used with the `glob` argument. It returns an array of objects, where each object contains the file path, file name, and the parsed content of a YAML file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/yaml.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n\t\"file_path\": \"path/file-a.yaml\",\n\t\"file_name\": \"file-a.yaml\",\n\t\"content\": {\n\t  \"foo\": \"bar\"\n\t}\n  },\n  {\n\t\"file_path\": \"path/file-b.yaml\",\n\t\"file_name\": \"file-b.yaml\",\n\t\"content\": [\n\t  {\"x\": \"y\"}\n\t]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Representing CSV Content as JSON Array (Path Mode)\nDESCRIPTION: This JSON snippet shows how the 'csv' data source represents the content of a single CSV file when using the 'path' argument or the 'content' field in 'glob' mode. Each row (excluding the header) is converted into an object, with keys corresponding to the CSV header columns.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/csv.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\"column_A\": \"Foo\", \"column_B\": true, \"column_C\": 42},\n  {\"column_A\": \"Bar\", \"column_B\": false, \"column_C\": 4.2}\n]\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from Fabric Rendering\nDESCRIPTION: Displays the expected HTML output generated by Fabric when rendering a document that includes the specified `frontmatter` and `publish local_file` configurations, showing how metadata and content are rendered into the final HTML structure.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/language/publish-blocks.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Bar Description\">\n    <title>Foo Title</title>\n    <script async defer type=\"application/javascript\" src=\"https://buttons.github.io/buttons.js\"></script>\n    <script async defer type=\"application/javascript\" src=\"/static/local.js\"></script>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/static/main.css\" />\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"https://localhost.localhost/some.css\" />\n    <script type=\"text/javascript\">\n        console.info(\"JS code execution\");\n    </script>\n    <style>\n     a {\n       font-family: Verdana;\n     }\n    </style>\n</head>\n<body>\n <h1 id=\"main-document-title\">Main Document Title</h1>\n<p>Test Body</p>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output with Glob Pattern - JSON\nDESCRIPTION: This JSON snippet shows the structure of the data returned by the 'json' data source when the 'glob' argument is used. It demonstrates how the output includes metadata like file path and name, along with the parsed JSON content for each matching file.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/json.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"file_path\": \"path/file-a.json\",\n    \"file_name\": \"file-a.json\",\n    \"content\": {\n      \"foo\": \"bar\"\n  }\n  },\n  {\n    \"file_path\": \"path/file-b.json\",\n    \"file_name\": \"file-b.json\",\n    \"content\": [\n      {\"x\": \"y\"}\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Output Format when using glob pattern - JSON\nDESCRIPTION: This JSON snippet illustrates the data structure returned by the 'txt' data source when configured with a 'glob' pattern. It shows a list of objects, where each object represents a file and includes its full path, name, and content.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/plugins/builtin/data-sources/txt.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"file_path\": \"path/file-a.txt\",\n    \"file_name\": \"file-a.txt\",\n    \"content\": \"foobar\"\n  },\n  {\n    \"file_path\": \"path/file-b.txt\",\n    \"file_name\": \"file-b.txt\",\n    \"content\": \"x\\ny\\nz\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Document Output from Fabric\nDESCRIPTION: This HTML snippet represents the content of a file generated by Fabric when rendering and publishing a document in HTML format. It includes standard HTML boilerplate (`<!DOCTYPE html>`, `<html>`, `<head>`, `<body>`) and contains the rendered Markdown content as HTML elements (`<h1>`, `<p>`). This is an example of the output, not code to be executed directly.\nSOURCE: https://github.com/blackstork-io/fabric/blob/main/docs/tutorial.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>The Greeting</title>\n</head>\n<body>\n <h1 id=\"the-greeting\">The Greeting</h1>\n<p>Hello, Fabric!</p>\n<p>There are 8 planets and 146 moons in our solar system.</p>\n<p>Neptune is the eighth and most distant planet in our solar system, located about 4.5 billion kilometers away from the Sun.</p>\n\n</body>\n</html>\n```"
  }
]