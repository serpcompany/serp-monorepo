[
  {
    "owner": "modxorg",
    "repo": "docs",
    "content": "TITLE: Example of a Complex MODX Tag Construction in PHP\nDESCRIPTION: Demonstrates the complete syntax for a complex MODX tag with a non-caching flag, property set reference, output filters, and custom properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!MySnippet@myPropSet:filter1:filter2=`modifier`? &prop1=`x` &prop2=`y`]]\n```\n\n----------------------------------------\n\nTITLE: Parsing MODX Tags with modParser in PHP\nDESCRIPTION: This code snippet demonstrates how to use the `modParser` to process MODX tags within a content string, particularly when `modX::getChunk` is insufficient. It retrieves a chunk, renders placeholders, and then utilizes `modParser` to handle both cached and uncached tags, ensuring complete content processing. The `parser_max_iterations` system setting controls the maximum depth of parsing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/parsing-tags.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Сначала визуализируем чанк, который обрабатывает предоставленные плейсхолдеры\n$content = $modx->getChunk('MyChunkName', ['foo' => 'bar']);\n\n// Получаем экземпляр modParser\n$parser = $modx->getParser();\n\n// Определяем, как глубоко мы можем пойти\n$maxIterations= (integer) $modx->getOption('parser_max_iterations', null, 10);\n\n// Разобрать кэшированные теги, оставив необработанные теги на месте\n$parser->processElementTags('', $content, false, false, '[[', ']]', [], $maxIterations);\n// Разобрать некэшированные теги и удалить все, что не удалось обработать\n$parser->processElementTags('', $content, true, true, '[[', ']]', [], $maxIterations);\n\nreturn $content;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Composite Relationships in PHP\nDESCRIPTION: PHP code example demonstrating how to fetch multiple Crayon objects related to a Box using the composite relationship.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/relationships.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$box = $xpdo->getObject('myBox',23);\n$crayons = $box->getMany('Crayons');\nforeach ($crayons as $crayon) {\n   echo $crayon->get('color').'<br />';\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Twitter Service Implementation\nDESCRIPTION: Example showing how to load a custom service with a specific path and custom parameters including API key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getservice.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('twitter','modTwitter','/path/to/',array(\n  'api_key' => 3212423,\n));\n$modx->twitter->tweet('Success!');\n```\n\n----------------------------------------\n\nTITLE: Checking User Group Membership in MODX Revolution (PHP)\nDESCRIPTION: The isMember method checks if a user is a member of one or more user groups. It accepts either a string for a single group or an array for multiple groups. Returns a boolean indicating membership status.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.ismember.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean isMember (mixed $groups)\n```\n\n----------------------------------------\n\nTITLE: Separating HTML from MODX Snippets using Chunks\nDESCRIPTION: Demonstrates the proper way to separate HTML from PHP code in MODX snippets by using chunks for output formatting. The snippet prepares data and passes it to a chunk via placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-snippet.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$props = array(\n    'cow' => 'Moo',\n    'pig' => 'Oink',\n);\nreturn $modx->getChunk('myChunk', $props);\n```\n\n----------------------------------------\n\nTITLE: MODX Revolution Object Retrieval Methods\nDESCRIPTION: Modern approach to retrieving objects in MODX Revolution using xPDO, demonstrating how to fetch chunks, collections, and resources with various criteria.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// getting a chunk with ID 43\n$chunk = $modx->getObject('modChunk',43);\n\n// getting a chunk with name 'TestChunk'\n$chunk = $modx->getObject('modChunk',array(\n    'name' => 'TestChunk'\n));\n\n// getting a collection of chunk objects, then outputting their names\n$chunks = $modx->getCollection('modChunk');\nforeach ($chunks as $chunk) {\n    echo $chunk->get('name').\"<br />\\n\";\n}\n\n// getting a resource (i.e. a page) that is published, with a alias of 'test'\n$document = $modx->getObject('modResource',array(\n    'published' => 1,\n    'alias' => 'test',\n));\n```\n\n----------------------------------------\n\nTITLE: Basic REST Controller Implementation\nDESCRIPTION: Example of a basic REST controller class implementing endpoint functionality for a todo list.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/developing-restful-api.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyControllerItems extends modRestController {\n    public $classKey = 'ToDoItem';\n    public $defaultSortField = 'sortorder';\n    public $defaultSortDirection = 'ASC';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GetList Processor (PHP)\nDESCRIPTION: This snippet creates a processor to retrieve a list of objects in MODX. It extends the modObjectGetListProcessor class and defines class variables to specify the MODX class, language topics, default sort field, sort direction, and object type.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DoodleGetListProcessor extends modObjectGetListProcessor {\n    public $classKey = 'Doodle';\n    public $languageTopics = array('doodles:default');\n    public $defaultSortField = 'name';\n    public $defaultSortDirection = 'ASC';\n    public $objectType = 'doodles.doodle';\n}\nreturn 'DoodleGetListProcessor';\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Manager Controller in PHP\nDESCRIPTION: Controller class implementation for a custom manager page that extends modExtraManagerController. Defines basic methods for page title and template file handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/tutorial.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MycmpWelcomeManagerController extends modExtraManagerController {\n    public function process(array $scriptProperties = array()) {}\n    public function getPageTitle() {\n        return 'My Test CMP';\n    }\n    public function getTemplateFile() {\n        return 'welcome.tpl';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OR Condition in WHERE Clause\nDESCRIPTION: Shows how to use OR conditions to query boxes with multiple possible width values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array('width' => 15));\n$query->where(array('width' => 10),xPDOQuery::SQL_OR);\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Well-Structured MODX Snippet with Documentation\nDESCRIPTION: A complete example of a properly documented MODX snippet that multiplies numbers. It demonstrates good practices like thorough documentation, proper property handling with getOption(), input validation, and error logging.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * mySnippet\n *\n * DESCRIPTION\n *\n * This Snippet multiplies numbers &x and &y. This demonstrates\n * some good habits.\n *\n * PROPERTIES:\n *\n * &x integer required\n * &y integer required\n * &z integer optional. Default: 1\n *\n * USAGE:\n *\n * [[!mySnippet? &x=`5` &y=`7`]]\n *\n */\n$x = (int) $modx->getOption('x', $scriptProperties);\n$y = (int) $modx->getOption('y', $scriptProperties);\n$z = (int) $modx->getOption('z', $scriptProperties, 1);\n// For debugging:\n$modx->log(modX::LOG_LEVEL_DEBUG\n    , '[mySnippet] called on page '. $modx->resource->id . ' with the following properties: '\n    .print_r($scriptProperties, true));\n// Verify Inputs\nif (!isset($scriptProperties['x']) || !isset($scriptProperties['y'])) {\n    $modx->log(modX::LOG_LEVEL_ERROR, '[mySnippet] missing required properties &x and &y!');\n    return;\n}\nreturn $x * $y * $z;\n?>\n```\n\n----------------------------------------\n\nTITLE: Complete Doodles Snippet in MODX PHP\nDESCRIPTION: This detailed PHP code initializes a MODX service for managing 'Doodles', accesses database records, and processes them for display using template chunks. It manages default properties like 'tpl', 'sort', and 'dir', builds a query to fetch 'Doodle' objects, and uses a loop to process each item with chunks. Dependencies include MODX configuration settings and xPDO packages necessary for database interaction and MODX services. The snippet outputs a formatted string ready for web display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n/* setup default properties */\n$tpl = $modx->getOption('tpl',$scriptProperties,'rowTpl');\n$sort = $modx->getOption('sort',$scriptProperties,'name');\n$dir = $modx->getOption('dir',$scriptProperties,'ASC');\n/* build query */\n$c = $modx->newQuery('Doodle');\n$c->sortby($sort,$dir);\n$doodles = $modx->getCollection('Doodle',$c);\n/* iterate */\n$output = '';\nforeach ($doodles as $doodle) {\n    $doodleArray = $doodle->toArray();\n    $output .= $dood->getChunk($tpl,$doodleArray);\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Using the reloadConfig method in MODX PHP\nDESCRIPTION: This code snippet demonstrates how to call the reloadConfig method on a modX instance. This method reloads all configuration settings and is particularly useful after dynamically loading or changing System Settings in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.reloadconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->reloadConfig();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Object using xPDO::getObject in PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a single object from the database using xPDO's getObject method. It illustrates the use of a primary key value as criteria, highlighting the importance of input sanitation to prevent SQL injection vulnerabilities.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$box23 = $xpdo->getObject('Box', 23);\n```\n\n----------------------------------------\n\nTITLE: Parsing MODX Tags using modParser in PHP\nDESCRIPTION: This code snippet demonstrates how to use modParser to process MODX tags outside the regular parsing flow. It first renders a chunk with placeholders, then uses modParser to process both cached and uncached tags. The method handles nested tags up to a specified depth.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/parsing-tags.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// First render a chunk, which processes the provided placeholders\n$content = $modx->getChunk('MyChunkName', ['foo' => 'bar']);\n\n// Get the modParser instance\n$parser = $modx->getParser();\n\n// Define how deep we can go\n$maxIterations= (integer) $modx->getOption('parser_max_iterations', null, 10);\n\n// Parse cached tags, while leaving unprocessed tags in place\n$parser->processElementTags('', $content, false, false, '[[', ']]', [], $maxIterations);\n// Parse uncached tags and remove anything that could not be processed\n$parser->processElementTags('', $content, true, true, '[[', ']]', [], $maxIterations);\n\nreturn $content;\n```\n\n----------------------------------------\n\nTITLE: Complex Output Modifier with Tag Properties\nDESCRIPTION: Demonstrates how to use output modifiers with additional tag properties in a getResources call\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources:default=`Sorry - nothing matched your search.`?\n    &tplFirst=`blogTpl`\n    &parents=`2,3,4,8`\n    &tvFilters=`blog_tags==%[[!tag:htmlent]]%`\n    &includeTVs=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Latest Posts Widget with getResources in MODX\nDESCRIPTION: Snippet to display the latest blog posts using getResources. It shows top 5 posts from specified parent resources, sorted by publish date.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<ol>\n  [[!getResources?\n\t&parents=`34,35`\n\t&hideContainers=`1`\n\t&tpl=`latestPostsTpl`\n\t&limit=`5`\n\t&sortby=`publishedon`\n  ]]\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Implementing Home Controller Class in MODX\nDESCRIPTION: Creates a custom manager page controller that extends NamespaceManagerController. Includes methods for processing content, setting page title, and loading custom CSS/JS assets with ExtJS integration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * The name of the controller is based on the action (home) and the\n * namespace. This home controller is loaded by default because of\n * our IndexManagerController.\n */\nclass NamespaceHomeManagerController extends NamespaceManagerController {\n    /**\n     * Any specific processing we want to do here. Return a string of html.\n     * @param array $scriptProperties\n     */\n    public function process(array $scriptProperties = array()) {\n        return '<h2 class=\"modx-page-header\">It\\'s alive!</h2><p>This is your first custom manager page. You are awesome!</p>';\n    }\n    /**\n     * The pagetitle to put in the <title> attribute.\n     * @return null|string\n     */\n    public function getPageTitle() {\n        return 'My first CMP!';\n    }\n    /**\n     * Register needed assets. Using this method, it will automagically\n     * combine and compress them if that is enabled in system settings.\n     */\n    public function loadCustomCssJs() {\n        $this->addCss('url/to/some/css_file.css');\n        $this->addJavascript('url/to/some/javascript.js');\n        $this->addLastJavascript('url/to/some/javascript_load_last.js');\n        $this->addHtml('<script type=\"text/javascript\">\n        Ext.onReady(function() {\n            // We could run some javascript here\n        });\n        </script>');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ChangePassword Form in MODX\nDESCRIPTION: A complete HTML implementation example of a password change form with the ChangePassword snippet. This code includes form fields for old password, new password, confirmation field, error placeholders, and customization options like validation and placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.changepassword.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h2>Change Password</h2>\n[[!ChangePassword?\n   &submitVar=`change-password`\n   &placeholderPrefix=`cp.`\n   &validateOldPassword=`1`\n   &validate=`nospam:blank`\n]]\n<div class=\"updprof-error\">[[!+cp.error_message]]</div>\n<form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n    <input type=\"hidden\" name=\"nospam\" value=\"\" />\n    <div class=\"ff\">\n        <label for=\"password_old\">Old Password\n            <span class=\"error\">[[!+cp.error.password_old]]</span>\n        </label>\n        <input type=\"password\" name=\"password_old\" id=\"password_old\" value=\"[[+cp.password_old]]\" />\n    </div>\n    <div class=\"ff\">\n        <label for=\"password_new\">New Password\n            <span class=\"error\">[[!+cp.error.password_new]]</span>\n        </label>\n        <input type=\"password\" name=\"password_new\" id=\"password_new\" value=\"[[+cp.password_new]]\" />\n    </div>\n    <div class=\"ff\">\n        <label for=\"password_new_confirm\">Confirm New Password\n            <span class=\"error\">[[!+cp.error.password_new_confirm]]</span>\n        </label>\n        <input type=\"password\" name=\"password_new_confirm\" id=\"password_new_confirm\" value=\"[[+cp.password_new_confirm]]\" />\n    </div>\n    <div class=\"ff\">\n        <input type=\"submit\" name=\"change-password\" value=\"Change Password\" />\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Extending modUser Class in PHP\nDESCRIPTION: Create a custom PHP class that extends modUser and sets the class_key to track the extended user type\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-users.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n* @package extendeduser\n* @subpackage user.mysql\n*/\nclass extUser extends modUser {\n   function __construct(xPDO & $xpdo) {\n       parent::__construct($xpdo);\n       $this->set('class_key','extUser');\n   }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MODX Template with Bootstrap\nDESCRIPTION: This HTML template serves as a starting point for MODX sites. It includes MODX tags for dynamic content placement, such as [[*content]] to display the resource content and [[*pagetitle]] for the page title. It also demonstrates how to include external CSS like Bootstrap.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <base href=\"[[!++site_url]]\" />\n    <title>[[*pagetitle]]</title>\n    <!-- Continue to insert your css, scripts and other assets here -->\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\">\n</head>\n<body>\n    <main>\n        [[*content]]\n    </main>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MODX Build Script Initialization in PHP\nDESCRIPTION: Example of initializing MODX in a build script context, typically used for command-line operations. Includes core path definition and manager context initialization.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/loading-externally.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (!defined('MODX_CORE_PATH')) {\n        define('MODX_CORE_PATH', '/path/to/core/');\n}\nif (!defined('MODX_CONFIG_KEY')) {\n        define('MODX_CONFIG_KEY', 'config');\n}\nrequire_once( MODX_CORE_PATH . 'model/modx/modx.class.php');\n$modx = new modX();\n$modx->initialize('mgr');\n```\n\n----------------------------------------\n\nTITLE: Static Snippet Include in PHP\nDESCRIPTION: Shows how to create a snippet that includes an external PHP file. This is useful for developing snippets outside the MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif (file_exists($file)) {\n   $o = include $file;\n} else { $o = 'File not found at: '.$file; }\nreturn $o;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Object with xPDOObject::getOne() in PHP\nDESCRIPTION: Demonstrates the syntax for using the getOne() method to retrieve a related object. This method is used for 1:? (one-to-zero-or-one) or 1:1 relationships in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/getone.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nxPDOObject|null &getOne (\n   string $alias,\n   [object $criteria = null],\n   [boolean|integer $cacheFlag = true]\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Main Content in MODX Revolution HTML\nDESCRIPTION: Demonstrates how to display the main content of a resource using MODX Revolution tags. This example uses the content tag within the body of the HTML.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body>[[*content]]</body>\n```\n\n----------------------------------------\n\nTITLE: Creating a MODX Connector (PHP)\nDESCRIPTION: This snippet creates a connector file in MODX, loading necessary configuration files, including core settings and the connector index. It initializes a custom class and lexicon, then handles the request by specifying the path to processors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once dirname(dirname(dirname(dirname(__FILE__)))) . '/config.core.php';\nrequire_once MODX_CORE_PATH . 'config/' . MODX_CONFIG_KEY . '.inc.php';\nrequire_once MODX_CONNECTORS_PATH . 'index.php';\n$corePath = $modx->getOption('doodles.core_path', null, $modx->getOption('core_path') . 'components/doodles/');\nrequire_once $corePath . 'model/doodles/doodles.class.php';\n$modx->doodles = new Doodles($modx);\n$modx->lexicon->load('doodles:default');\n/* handle request */\n$path = $modx->getOption('processorsPath', $modx->doodles->config, $corePath . 'processors/');\n$modx->request->handleRequest(array(\n    'processors_path' => $path,\n    'location' => '',\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring FormIt Snippet for Contact Form in MODX\nDESCRIPTION: This snippet call sets up FormIt to handle form submission, including validation, reCaptcha, email sending, and redirection. It specifies validation rules for form fields and defines the email template to use.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.simple-contact-page.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n   &hooks=`recaptcha,email,redirect`\n   &emailTpl=`MyEmailChunk`\n   &emailTo=`user@example.com`\n   &emailFrom=`[[++emailsender]]`\n   &redirectTo=`123`\n   &validate=`nospam:blank,\n      name:required,\n      email:email:required,\n      subject:required,\n      text:required:stripTags,\n      numbers:required,\n      colors:required`\n]]\n```\n\n----------------------------------------\n\nTITLE: Complete Doodles Snippet in PHP\nDESCRIPTION: This is the complete code for the Doodles snippet.  It retrieves the Doodles service, sets up default properties for the chunk template, sort order, and direction. It then builds a query to fetch Doodles from the database, iterates through the results, converts each Doodle object to an array, and uses the `getChunk` method to process the data with the specified chunk template. Finally, it returns the concatenated output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n/* setup default properties */\n$tpl = $modx->getOption('tpl',$scriptProperties,'rowTpl');\n$sort = $modx->getOption('sort',$scriptProperties,'name');\n$dir = $modx->getOption('dir',$scriptProperties,'ASC');\n/* build query */\n$c = $modx->newQuery('Doodle');\n$c->sortby($sort,$dir);\n$doodles = $modx->getCollection('Doodle',$c);\n/* iterate */\n$output = '';\nforeach ($doodles as $doodle) {\n    $doodleArray = $doodle->toArray();\n    $output .= $dood->getChunk($tpl,$doodleArray);\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Object Externally\nDESCRIPTION: This code snippet demonstrates how to initialize the MODX object outside of the MODX environment. It requires the path to the MODX core configuration file and initializes the MODX service in a specified context.  Ensure that the path to the core config file is correct, and adjust the context ('web' in this example) as needed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/getting-started/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once '/absolute/path/to/modx/config.core.php';\nrequire_once MODX_CORE_PATH.'model/modx/modx.class.php';\n$modx = new modX();\n$modx->initialize('web');\n$modx->getService('error', 'error.modError');\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration Form in MODX\nDESCRIPTION: HTML form template for user registration that includes validation, error messaging, and integration with MODX Register snippet. The form collects username, password, full name and email with built-in validation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<h2>Register</h2>\n\n[[!Register?\n    &submitVar=`registerbtn`\n    &activationResourceId=`8`\n    &activationEmailTpl=`lgnActivateEmailTpl`\n    &activationEmailSubject=`Thanks for Registering!`\n    &submittedResourceId=`7`\n    &usergroups=`Members`\n]]\n\n<div class=\"register\">\n    <div class=\"registerMessage\">[[+error.message]]</div>\n\n    <form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n        <input type=\"hidden\" name=\"nospam:blank\" value=\"\" />\n\n        <label for=\"username\">[[%register.username? &namespace=`login` &topic=`register`]]\n            <span class=\"error\">[[+error.username]]</span>\n        </label>\n        <input type=\"text\" name=\"username:required:minLength=6\" id=\"username\" value=\"[[+username]]\" />\n\n        <label for=\"password\">[[%register.password]]\n            <span class=\"error\">[[+error.password]]</span>\n        </label>\n        <input type=\"password\" name=\"password:required:minLength=6\" id=\"password\" value=\"[[+password]]\" />\n\n        <label for=\"password_confirm\">[[%register.password_confirm]]\n            <span class=\"error\">[[+error.password_confirm]]</span>\n        </label>\n        <input type=\"password\" name=\"password_confirm:password_confirm=`password`\" id=\"password_confirm\" value=\"[[+password_confirm]]\" />\n\n        <label for=\"fullname\">[[%register.fullname]]\n            <span class=\"error\">[[+error.fullname]]</span>\n        </label>\n        <input type=\"text\" name=\"fullname:required\" id=\"fullname\" value=\"[[+fullname]]\" />\n\n        <label for=\"email\">[[%register.email]]\n            <span class=\"error\">[[+error.email]]</span>\n        </label>\n        <input type=\"text\" name=\"email:email\" id=\"email\" value=\"[[+email]]\" />\n\n        <br class=\"clear\" />\n\n        <div class=\"form-buttons\">\n            <input type=\"submit\" name=\"registerbtn\" value=\"Register\" />\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX Assets Path and URL\nDESCRIPTION: Sets custom paths for MODX assets directory to enhance security by obfuscating the default directory structure. This configuration can help prevent automated scanning and fingerprinting attempts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$modx_assets_path = '/home/youruser/public_html/4ssetsh3r3/';\n$modx_assets_url = '/4ssetsh3r3/';\n```\n\n----------------------------------------\n\nTITLE: Database Interaction Snippet in PHP\nDESCRIPTION: Shows how to interact with the database using xPDO in a MODX snippet. This example retrieves a chunk and processes it with custom placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$chunk = $modx->getObject('modChunk',array(\n   'name' => 'LineItem',\n));\nif (!$chunk) return 'No line item chunk!';\nreturn $chunk->process(array(\n   'name' => 'G.I. Joe',\n   'grenades' => 42,\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing xPDO Database Operations in PHP\nDESCRIPTION: Comprehensive example demonstrating various xPDO operations including package loading, object creation/retrieval, query building, and relationship handling. Shows common patterns for working with educational data models including schools, students, and graduations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (!$modx->addPackage('education', '/path/to/model/')) {\n   die('Can\\'t load package, try again later.');\n}\n\n// Get into Harvard (or create a new school with the same name)\n$school = $modx->getObject('School', ['name' => 'Harvard']);\nif (!$school) {\n    $school = $modx->newObject('School');\n    $school->set('name', 'Harvard');\n    $school->save();\n}\n\n// Find the 100 students that are alumni and sort by lastname\n$c = $modx->newQuery('Student');\n$c->where([\n    'school' => $school->get('id'),\n    'is_alumni' => true,\n    'start_year' => $_GET['start_year'] ?? date('Y') - 5,\n]);\n$c->sortby('lastname', 'ASC');\n$c->limit(100);\n\nforeach ($modx->getIterator('Student', $c) as $student) {\n    echo $student->get('firstname') . ' ' . $student->get('lastname') . ' started studying in ' . $student->get('start_year');\n\n    if ($graduation = $student->getOne('Graduation')) {\n        echo ' and graduated in ' . $graduation->get('year') . \".\\n\";\n    }\n    else {\n        echo \" and has not graduated.\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship in MySQL\nDESCRIPTION: MySQL table definitions for a one-to-one relationship between 'users' and 'userdata' tables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `users` (\n  `user_id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(255) DEFAULT NULL,\n  `bio` text,\n  `joindate` date DEFAULT NULL,\n  PRIMARY KEY (`user_id`)\n) ENGINE=MyISAM;\nCREATE TABLE `userdata` (\n  `userdata_id` int(11) NOT NULL AUTO_INCREMENT,\n  `age` tinyint(3) unsigned DEFAULT NULL,\n  PRIMARY KEY (`userdata_id`)\n) ENGINE=MyISAM;\n```\n\n----------------------------------------\n\nTITLE: Basic modX.getService Method Syntax\nDESCRIPTION: Core method signature for loading and returning a service class instance. Takes name, class, path and params as arguments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getservice.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nobject getService (string $name, [string $class = ''], [string $path = ''], [array $params = array ()])\n```\n\n----------------------------------------\n\nTITLE: Complex MODX Query Using xPDOQuery\nDESCRIPTION: Demonstrates building a complex query using xPDOQuery to fetch resources with specific conditions, joins, ordering, and pagination.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-2.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$c = $modx->newQuery('modResource');\n$c->leftJoin('modUser','PublishedBy');\n$c->where(array(\n    'modResource.published' => 1,\n    'modResource.searchable' => 1,\n));\n$c->orCondition(array(\n    'PublishedBy.username' => 'george123',\n),null,1);\n$c->sortby('menuindex','ASC');\n$c->limit(10,20);\n\n$resources = $modx->getCollection('modResource',$c);\n```\n\n----------------------------------------\n\nTITLE: Using Complex Criteria with xPDO Query in PHP\nDESCRIPTION: Advanced example showing how to create complex selection criteria using xPDO.newQuery to filter objects based on comparison operators.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobject.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$query = $modx->newQuery('MyObject');\n$query->where([\n    'wheels:>=' => 3\n]);\n$myobj = $xpdo->getObject('MyObject', $query);\n```\n\n----------------------------------------\n\nTITLE: Chunk Processing Snippet in PHP\nDESCRIPTION: Demonstrates how to process a chunk with placeholders in a MODX snippet. This is the recommended way to combine PHP and HTML output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->getChunk('myChunk',array(\n  'placeholderOne' => 'test',\n  'name' => 'Harry',\n  'scar' => 'Lightning',\n));\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Related Object with getOne in xPDO PHP\nDESCRIPTION: This snippet retrieves a related Owner object for a specific Car object using the getOne method. It also demonstrates how to access properties of the related object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/related-objects.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$car = $xpdo->getObject('Car',123);\n\n$owner = $car->getOne('Owner');\necho 'The owner of this car is: '.$owner->get('name');\n```\n\n----------------------------------------\n\nTITLE: Creating XML Schema Model Definition for MySQL in MODX Revolution\nDESCRIPTION: The initial XML setup for defining the schema model for a custom database table in MODX Revolution. This defines the package name, base class, platform, and database engine.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"storefinder\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" phpdoc-package=\"storefinder\" phpdoc-subpackage=\"model\">\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Externally in PHP\nDESCRIPTION: Code snippet demonstrating how to initialize and use the MODX object externally. This allows access to MODX functionality outside the typical MODX environment by loading core files and initializing the main MODX class with a specific context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once '/absolute/path/to/modx/config.core.php';\nrequire_once MODX_CORE_PATH.'model/modx/modx.class.php';\n$modx = new modX();\n$modx->initialize('web');\n$modx->getService('error', 'error.modError');\n```\n\n----------------------------------------\n\nTITLE: Defining the modX::toPlaceholders Method Syntax in PHP\nDESCRIPTION: The method signature for modX::toPlaceholders which accepts an array or object subject, an optional prefix string, separator string, and restore boolean flag. It returns an array of set placeholder keys and optionally the values that were overwritten.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.toplaceholders.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray toPlaceholders (array|object  $subject, [string $prefix = ''], [string $separator = '.'], [boolean $restore = false])\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Email Sender in MODX\nDESCRIPTION: Script to process and send queued emails in MODX. It connects to the MODX core, loads the Sendex component model, and processes up to 100 emails from the queue. The script is designed to run via cron job.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/scheduled-newsletter.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif (file_exists(dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/config.core.php')) {\n    require_once dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/config.core.php';\n}\nelse {\n    require_once dirname(dirname(dirname(dirname(dirname(dirname(__FILE__)))))) . '/config.core.php';\n}\n\nrequire_once MODX_CORE_PATH . 'config/' . MODX_CONFIG_KEY . '.inc.php';\nrequire_once MODX_CONNECTORS_PATH . 'index.php';\n\n$modx->addPackage('sendex', MODX_CORE_PATH . 'components/sendex/model/');\n\n$q = $modx->newQuery('sxQueue');\n$q->limit($modx->getOption('sendex_queue_limit', null, 100, true));\n\n$queue = $modx->getCollection('sxQueue');\n/** @var sxQueue $email */\nforeach ($queue as $email) {\n    $email->send();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Field Aliases in XML Schema\nDESCRIPTION: This XML snippet demonstrates defining a field alias in xPDO's XML schema. It sets an alias `postalcode` for the `zip` field in an `sfStore` object, allowing the value to be referenced using the alias.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"sfStore\" table=\"sfinder_stores\" extends=\"xPDOSimpleObject\">\n  <field key=\"name\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" index=\"index\" />\n  <field key=\"address\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n  <field key=\"city\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n  <field key=\"state\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n  <field key=\"zip\" dbtype=\"varchar\" precision=\"10\" phptype=\"string\" null=\"false\" default=\"0\" index=\"index\" />\n  <field key=\"country\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n  <field key=\"phone\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n  <field key=\"fax\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n  <field key=\"active\" dbtype=\"int\" precision=\"1\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n  <alias key=\"postalcode\" field=\"zip\" />\n  <index alias=\"name\" name=\"name\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n      <column key=\"name\" length=\"\" collation=\"A\" null=\"false\" />\n  </index>\n  <index alias=\"zip\" name=\"zip\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n      <column key=\"zip\" length=\"\" collation=\"A\" null=\"false\" />\n  </index>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Object with xPDO in PHP\nDESCRIPTION: This PHP snippet demonstrates how to delete a single object from the database using the xPDOObject.remove() method. It checks the result of the operation and logs any errors encountered. Dependent composite objects are also removed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/removing-objects.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$box = $xpdo->getObject('Box',134);\\n\\nif ($box->remove() == false) {\\n   echo 'An error occurred while trying to remove the box!';\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding LIMIT/OFFSET Clause to xPDOQuery in PHP\nDESCRIPTION: Demonstrates how to use the limit method of xPDOQuery to add a LIMIT/OFFSET clause to a database query. This example retrieves Boxes 11-20 from the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.limit.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->limit(10,10);\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Joining Tables using xPDO::newQuery in PHP\nDESCRIPTION: This example demonstrates how to join related tables using xPDO's newQuery method, including setting up conditions, sorting the results, and managing limits and offsets in queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$c = $xpdo->newQuery('Box');\n$c->innerJoin('BoxOwner','Owner'); // arguments are className, alias\n$c->where([\n    'width' => 5,\n    'Owner.user' => 2,\n]);\n$c->sortby('name','ASC');\n$c->limit(5);\n$boxes = $xpdo->getCollection('Box',$c);\n```\n\n----------------------------------------\n\nTITLE: Loading Related Tags for a Blogpost in PHP\nDESCRIPTION: This PHP snippet demonstrates loading a blogpost and its associated tags from a MODX database using xPDO's ORM. It retrieves the `BlogpostsTags` linked to a specific `Blogposts` object and accesses the related `Tags` to display their names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$base_path = MODX_CORE_PATH . 'components/many_to_many/';\n$modx->addPackage('many_to_many',$base_path.'model/','');\n$output = '';\n$blogpost = $modx->getObject('Blogposts', array('blogpost_id' => 1 ) );\n$blopost_tags = $blogpost->getMany('BlogpostsTags');\nforeach ( $blopost_tags as $bt )\n{\n    $tag = $bt->getOne('Tags');\n    $output .= $tag->get('name');\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Defining xPDO Schema for Doodles in XML\nDESCRIPTION: This XML schema defines the structure for the Doodles xPDO model, including table fields and relationships. It's used to generate xPDO classes and map database tables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"doodles\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" version=\"1.0\">\n    <object class=\"Doodle\" table=\"doodles\" extends=\"xPDOSimpleObject\">\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\"/>\n        <field key=\"description\" dbtype=\"text\" phptype=\"string\" null=\"false\" default=\"\"/>\n        <field key=\"createdon\" dbtype=\"datetime\" phptype=\"datetime\" null=\"true\"/>\n        <field key=\"createdby\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n        <field key=\"editedon\" dbtype=\"datetime\" phptype=\"datetime\" null=\"true\"/>\n        <field key=\"editedby\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n        <aggregate alias=\"CreatedBy\" class=\"modUser\" local=\"createdby\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\"/>\n        <aggregate alias=\"EditedBy\" class=\"modUser\" local=\"editedby\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\"/>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Example of Using xPDOCacheManager.set Method in PHP\nDESCRIPTION: A simple example demonstrating how to set a string value in the cache with a 2-hour expiration time (7200 seconds). The first parameter is the cache key, the second is the content to cache, and the third specifies the lifetime.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.set.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = 'This will be cached.';\n$xpdo->cacheManager->set('mycachefile',$str,7200);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom JavaScript to Manager Pages with OnManagerPageBeforeRender\nDESCRIPTION: This PHP snippet demonstrates how to use the OnManagerPageBeforeRender event to add custom JavaScript files to MODX manager pages. It leverages the controller's addJavascript method to include external JavaScript resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onmanagerpagebeforerender.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnManagerPageBeforeRender':\n        $modx->controller->addJavascript('url/file.js');\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: GetResources With Default Message - PHP\nDESCRIPTION: Includes a default message when no results are found.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[[getResources:default=`No results found`? &parents=`[[*id]]` &tpl=`myRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX and REST Service\nDESCRIPTION: This code snippet initializes MODX, loads necessary packages, and sets up the modRestService with configuration options. It includes setting the base path for controllers, the class separator and prefix, and the XML root node.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/developing-restful-api.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Загрузить MODX\nrequire_once dirname(dirname(__FILE__)) . '/config.core.php';\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n$modx = new modX();\n$modx->initialize('web');\n$modx->getService('error','error.modError', '', '');\n// Загрузить любые классы или пакеты (модели), которые вам потребуются\n$path = $modx->getOption('mypackage.core_path', null,\n  $modx->getOption('core_path').'components/mypackage/') . 'model/mypackage/';\n$modx->getService('mypackage', 'myPackage', $path);\n// Загрузить класс modRestService и передать ему некоторую базовую конфигурацию\n$rest = $modx->getService('rest', 'rest.modRestService', '', array(\n   'basePath' => dirname(__FILE__) . '/Controllers/',\n   'controllerClassSeparator' => '',\n   'controllerClassPrefix' => 'MyController',\n   'xmlRootNode' => 'response',\n));\n// Подготовить запрос\n$rest->prepare();\n// Удостовериться, что пользователю предоставлены необходимые права доступа; вернуть пользователю ошибку 401 в обратном случае\nif (!$rest->checkPermissions()) {\n   $rest->sendUnauthorized(true);\n}\n// Выполнить запрос\n$rest->process();\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title with MODX Revolution Tags in HTML\nDESCRIPTION: Shows how to set the page title using MODX Revolution tags. This example uses the pagetitle tag, which represents the title of the current resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<title>[[*pagetitle]]</title>\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Menu for MODX Grid in JavaScript\nDESCRIPTION: Adds a getMenu method to the Doodles grid to display a context menu with update and remove options when a user right-clicks on a grid row.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n,getMenu: function() {\n    return [{\n        text: _('doodles.doodle_update')\n        ,handler: this.updateDoodle\n    },'-',{\n        text: _('doodles.doodle_remove')\n        ,handler: this.removeDoodle\n    }];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FormIt Email Hook in PHP\nDESCRIPTION: This snippet demonstrates how to set up the FormIt email hook with various email-related properties. It shows how to specify the email template, subject, recipients, and CC/BCC options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/email.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    ...\n    &hooks=`email`\n    &emailTpl=`CentralizedDebtObligationEmailTpl`\n    &emailSubject=`Some Sucker Bought Another CDO`\n    &emailTo=`sales@mortgagemoney.com`\n    &emailCC=`boss@mortgagemoney.com`\n    &emailBCC=`fbi@gov.com`\n    &emailBCCName=`CDO Fraud Informant`\n]]\n```\n\n----------------------------------------\n\nTITLE: Implementing MODX Data Grid\nDESCRIPTION: Creates a custom grid component extending MODx.grid.Grid with column definitions, sorting, and pagination support.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nDoodles.grid.Doodles = function (config) {\n    config = config || {};\n    Ext.applyIf(config, {\n        id: \"doodles-grid-doodles\",\n        url: Doodles.config.connectorUrl,\n        baseParams: { action: \"mgr/doodle/getList\" },\n        fields: [\"id\", \"name\", \"description\", \"menu\"],\n        paging: true,\n        remoteSort: true,\n        anchor: \"97%\",\n        autoExpandColumn: \"name\",\n        columns: [\n            {\n                header: _(\"id\"),\n                dataIndex: \"id\",\n                sortable: true,\n                width: 60,\n            },\n            {\n                header: _(\"doodles.name\"),\n                dataIndex: \"name\",\n                sortable: true,\n                width: 100,\n                editor: { xtype: \"textfield\" },\n            },\n            {\n                header: _(\"doodles.description\"),\n                dataIndex: \"description\",\n                sortable: false,\n                width: 350,\n                editor: { xtype: \"textfield\" },\n            },\n        ],\n    });\n    Doodles.grid.Doodles.superclass.constructor.call(this, config);\n};\nExt.extend(Doodles.grid.Doodles, MODx.grid.Grid);\nExt.reg(\"doodles-grid-doodles\", Doodles.grid.Doodles);\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTPS Redirect in Apache\nDESCRIPTION: Apache .htaccess configuration to force all HTTP traffic to HTTPS. Implements a 301 permanent redirect for secure connections.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_10\n\nLANGUAGE: apache\nCODE:\n```\nRewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule ^(.*)$ https://example.com/$1 [L,R=301]\n```\n\n----------------------------------------\n\nTITLE: Creating MODX Template Object\nDESCRIPTION: Demonstrates how to create a new MODX template object, set its properties, and save it to the database using both individual set() methods and fromArray().\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-2.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// let's create a Template\n$template = $modx->newObject('modTemplate');\n\n// now, lets save some data into the fields\n$template->set('templatename','TestTemplate');\n$template->set('description','A test template.');\n\n// we could have also done it like this:\n$data = array(\n        'templatename' => 'TestTemplate',\n        'description' => 'A test template.',\n);\n$template->fromArray($data);\n\n// okay, now we're ready. let's save.\nif ($template->save() === false) {\n        die('An error occurred while saving!');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Related Objects with getMany in xPDO PHP\nDESCRIPTION: This snippet retrieves all Wheel objects associated with a specific Car object using the getMany method, and iterates through them to display their position.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/related-objects.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$car = $xpdo->getObject('Car',123);\n\n$wheels = $car->getMany('Wheel');\nforeach ($wheels as $wheel) {\n   echo 'Got the '.$wheel->get('position').' wheel!<br />';\n}\n\n/* This would echo:\nGot the Front Left wheel!\nGot the Front Right wheel!\nGot the Back Left wheel!\nGot the Back Right wheel! */\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Conditions with xPDOQuery in PHP\nDESCRIPTION: Demonstrates how to create nested conditional statements with AND/OR operators in xPDOQuery, showing the SQL translation of the query structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Person');\n$query->where(array(\n    array(\n        'first_name:=' => 'Bob',\n        array(\n            'OR:last_name:LIKE' => 'Boblablaw',\n            'AND:gender:=' => 'M',\n        ),\n    ),\n    'password:!=' => null,\n));\n```\n\n----------------------------------------\n\nTITLE: Adding GROUP BY Clause to xPDOQuery in PHP\nDESCRIPTION: This snippet demonstrates the syntax for using the groupby method of xPDOQuery. It shows how to add a GROUP BY clause to a query with optional direction parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.groupby.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nxPDOQuery groupby (string $column, [string $direction = ''])\n```\n\n----------------------------------------\n\nTITLE: Modifying the Doodles Base Class in MODX\nDESCRIPTION: This code modifies the constructor of the `Doodles` class to automatically add the 'doodles' xPDO package. This allows querying the custom table associated with the package. The code retrieves the doodles core path and assets URL from system settings and then adds the package using `$this->modx->addPackage()`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Doodles {\n    public $modx;\n    public $config = array();\n    public function __construct(modX &$modx,array $config = array()) {\n        $this->modx =& $modx;\n        $basePath = $this->modx->getOption('doodles.core_path',$config,$this->modx->getOption('core_path').'components/doodles/');\n        $assetsUrl = $this->modx->getOption('doodles.assets_url',$config,$this->modx->getOption('assets_url').'components/doodles/');\n        $this->config = array_merge(array(\n            'basePath' => $basePath,\n            'corePath' => $basePath,\n            'modelPath' => $basePath.'model/',\n            'processorsPath' => $basePath.'processors/',\n            'templatesPath' => $basePath.'templates/',\n            'chunksPath' => $basePath.'elements/chunks/',\n            'jsUrl' => $assetsUrl.'js/',\n            'cssUrl' => $assetsUrl.'css/',\n            'assetsUrl' => $assetsUrl,\n            'connectorUrl' => $assetsUrl.'connector.php',\n        ),$config);\n        // add this below\n        $this->modx->addPackage('doodles',$this->config['modelPath']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chunk Object Creation and Storage\nDESCRIPTION: Creates and saves a new chunk object with the processed data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-3.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$chunk = $modx->newObject('modChunk', $_POST);\n$chunk->set('locked',isset($_POST['locked']));\n$chunk->set('snippet',$_POST['chunk']);\n$chunk->set('category',$category->get('id'));\nif ($chunk->save() === false) {\n    return $modx->error->failure($modx->lexicon('chunk_err_save'));\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Subcategories for a Category in PHP\nDESCRIPTION: This PHP snippet loads a category and its subcategories from a MODX database using xPDO's ORM. The `getMany` method retrieves the `Children` composite, which represents the subcategories of the initial `Categories` object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$base_path = MODX_CORE_PATH . 'components/parent_child_example/';\n$modx->addPackage('parent_child_example',$base_path.'model/','');\n$output = '';\n$category = $modx->getObject('Categories', array('category_id' => 1 ) );\n$subcategories = $category->getMany('Children');\n$output .= $category->get('content');\nforeach ( $subcategories as $sc )\n{\n    $output .= $sc->get('name');\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Dropping a MySQL Database Using xPDOManager in PHP\nDESCRIPTION: This example demonstrates how to use the removeSourceContainer method to drop a MySQL database named 'MyDatabase'. It constructs a DSN string, gets the xPDO manager, and calls the method with the necessary parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.removesourcecontainer.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$newDatabaseName = 'MyDatabase';\n$dsn = 'mysql:host=localhost;dbname='.$newDatabaseName.';charset=utf8';\n$manager = $xpdo->getManager();\n$manager->removeSourceContainer($dsn,'myusername','mypassword');\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Rule Implementation\nDESCRIPTION: PHP implementation of a custom validation rule for checking parent resources in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php /**\n * @param mixed $value candidate value\n * @param array $options from the XML schema\n * @return boolean false on failed validation, true on pass\n */\nclass NormalParents extends xPDOValidationRule {\n    public function isValid($value, array $options = array()) {\n        parent::isValid($value, $options);\n        $result = false;\n        $obj=& $this->validator->object;\n        $xpdo=& $obj->xpdo;\n                $xpdo->log(1, 'Running TaxonomyParents Validation rule');\n        $validParentClasses = array('modDocument', 'modWebLink', 'modSymLink', 'modStaticResource');\n        if ($obj->get('parent') === 0 || ($obj->Parent && in_array($obj->Parent->class_key, $validParentClasses))) {\n           $result = true;\n        }\n        if ($result === false) {\n            $this->validator->addMessage($this->field, $this->name, $this->message);\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MODX Resource Using fromArray() in PHP\nDESCRIPTION: Illustrates how to create a MODX resource by using fromArray() to set multiple fields at once from an associative array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/fromarray.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$page = $modx->newObject('modResource');\n\n$data = array(\n    'pagetitle' => 'My Page',\n    'description' => 'Why not?',\n    // ... etc...\n);\n\n$page->fromArray($data);\n$page->save();\n```\n\n----------------------------------------\n\nTITLE: Basic User Authentication in MODX\nDESCRIPTION: Method signature and parameters for getting the authenticated user in MODX. Takes an optional context key and force load settings parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getuser.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmodUser getUser ([string $contextKey = ''], [bool $forceLoadSettings = false])\n```\n\n----------------------------------------\n\nTITLE: Building Complex SQL Query with xPDOQuery in PHP\nDESCRIPTION: Example showing how to build a complex query with multiple conditions including inner joins, where clauses, sorting and limits. Demonstrates querying Box objects with related Owner objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n// Remember: syntax here is classname, your alias. Note that filters use the alias.\n$query->innerJoin('Owner','User');\n// the Owner is actually a User object, defined as Owner in the relationship alias\n$query->where(array(\n    'Owner.name:LIKE' => '%a%',\n    'Box.width:>=' => 10,\n    'Box.height:!=' => 2,\n    'Box.color:IN' => array('red','green','blue'),\n));\n$query->sortby('Box.name','ASC');\n$query->sortby('Box.height','DESC');\n$query->limit(4);\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Controller for MODX Custom Manager Page\nDESCRIPTION: A PHP implementation of the base controller classes needed for a Custom Manager Page. Includes an abstract controller class that defines shared functionality, and an index controller that specifies the default controller to load.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * The abstract Manager Controller.\n * In this class, we define stuff we want on all of our controllers.\n */\nabstract class NamespaceManagerController extends modExtraManagerController {\n    /**\n     * Initializes the main manager controller. You may want to load certain classes,\n     * assets that are shared across all controllers or configuration.\n     *\n     * All your other controllers in this namespace should extend this one.\n     *\n     * In this case we don't do anything useful, but as you build up more complex\n     * extras, it helps to enforce this structure to make it easier to maintain.\n     */\n    public function initialize() {\n        $this->addHtml('<script type=\"text/javascript\">\n        Ext.onReady(function() {\n            // We could run some javascript here that runs on all of our controllers\n            // for example something that loads your config\n        });\n        </script>');\n    }\n    /**\n     * Defines the lexicon topics to load in our controller.\n     * @return array\n     */\n    public function getLanguageTopics() {\n        return array('namespace:default');\n    }\n    /**\n     * We can use this to check if the user has permission to see this controller\n     * @return bool\n     */\n    public function checkPermissions() {\n        return true;\n    }\n}\n/**\n * The Index Manager Controller is the default one that gets called when no\n * &action parameter is passed  We use it to define the default controller\n * which will then handle the actual processing.\n *\n * It is important to name this class \"IndexManagerController\" and making sure\n * it extends the abstract class we defined above\n */\nclass IndexManagerController extends NamespaceManagerController {\n    /**\n     * Defines the name or path to the default controller to load.\n     * @return string\n     */\n    public static function getDefaultController() {\n        return 'home';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Data to MODX Cache\nDESCRIPTION: A snippet that stores the current timestamp in the MODX cache using a specific cache key. The snippet demonstrates basic cache writing functionality using the MODX cache manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/example.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cacheManager = $modx->getCacheManager();\n$x = date('H:i:s');\n$cacheManager->set('my_cache_key',$x);\nreturn $x;\n```\n\n----------------------------------------\n\nTITLE: Using Properties with Template Variables in MODX\nDESCRIPTION: Advanced usage example showing how to pass properties to a Template Variable named 'intromsg'. This allows for dynamic content with placeholders that get replaced with the provided values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*intromsg?name=`George` &messageCount=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Conditional and Loop Syntax with Proper Spacing in PHP\nDESCRIPTION: Example of proper syntax for conditional statements and loops in MODX, showing correct spacing between keywords and parentheses, and function call formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/coding-standards.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif ($test) {\n}\nwhile ($test == $other) {\n}\narray_push($one,$two);\nreturn $test;\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Resource After Successful Registration in MODX\nDESCRIPTION: Shows how to use the Register snippet to redirect users to a specific resource after a successful registration. It includes the resource ID to redirect to as a parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Register? &submittedResourceId=`23`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving TV Value with getTVValue in PHP\nDESCRIPTION: Demonstrates how to use the getTVValue method to retrieve a Template Variable value for a specific resource. This method fetches values from the resource cache when available.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/accessing-tvs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$page = $modx->getObject('modResource', 123);\nreturn $page->getTVValue('bio');\n```\n\n----------------------------------------\n\nTITLE: Bypassing Cache for TV Value Retrieval in PHP\nDESCRIPTION: Shows how to bypass the cache and directly fetch the latest TV value from the database. This is useful when you need the most up-to-date data, especially after using setTVValue.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/accessing-tvs.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tvr = $modx->getObject('modTemplateVarResource', array(\n  'tmplvarid' => $tvId,\n  'contentid' => $resourceId\n));\nif ($tvr) {\n  return $tvr->get('value');\n}\nelse {\n  $tv = $modx->getObject('modTemplateVar', $tvId);\n  if ($tv) return $tv->get('default_text');\n}\nreturn '';\n```\n\n----------------------------------------\n\nTITLE: Basic Snippet Call in MODX\nDESCRIPTION: The simplest way to call a MODX snippet in your template, chunk, TV, or document content. This will display the output of the snippet and cache the result.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/snippets.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[MySnippet]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Fields using Template Variables in MODX\nDESCRIPTION: Examples of accessing basic resource fields using MODX Template Variable syntax\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/resources/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*pagetitle]] // renders the pagetitle.\n[[*id]] // renders the Resource's ID\n[[*createdby]] // renders the ID of the user who created this Resource\n```\n\n----------------------------------------\n\nTITLE: Doodles Query Implementation\nDESCRIPTION: xPDO query implementation for fetching and sorting Doodle objects from the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$c = $modx->newQuery('Doodle');\n$c->sortby($sort,$dir);\n$doodles = $modx->getCollection('Doodle',$c);\n```\n\n----------------------------------------\n\nTITLE: Generating Map and Class Files from XML Schema in PHP\nDESCRIPTION: Example of how to use the xPDOGenerator to parse a schema and generate the corresponding map and class files. This snippet shows the process of getting the manager, obtaining the generator, and calling the parseSchema method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdogenerator/xpdogenerator.parseschema.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$manager = $xpdo->getManager();\n$generator = $manager->getGenerator();\n$generator->parseSchema('mypackage.mysql.schema.xml','/path/to/mypackage/model/');\n```\n\n----------------------------------------\n\nTITLE: Defining Fields for xPDO Table\nDESCRIPTION: Demonstrates how to define various fields for the sfStore table, including different data types and attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/database-and-tables.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<field key=\"name\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"address\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"city\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"state\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"zip\" dbtype=\"varchar\" precision=\"10\" phptype=\"string\" null=\"false\" default=\"0\" />\n<field key=\"country\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"phone\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"fax\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"active\" dbtype=\"int\" precision=\"1\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n```\n\n----------------------------------------\n\nTITLE: Interacting with MIGX Table via PHP\nDESCRIPTION: This PHP snippet demonstrates how to interact with a database table created using MIGX within a MODX environment. It includes adding the package, creating a new record, saving the record to the table, and retrieving data from the table using `getIterator`. This snippet requires the `electrica` package to be installed and the `electricaItem` class to be defined.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/creating-tables/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n// Add a package\\nif(!$modx->addPackage('electrica', MODX_CORE_PATH . 'components/electrica/model/')){\\n    return 'false';\\n}\\n// Create a record\\n$table = $modx->newObject('electricaItem');\\n$array = [\\n    'title' => 'What is the title',\\n    'description' => 'What is the description'\\n    ];\\n\\n$table->fromArray($array);\\n$table->save();\\n\\n// Do a sample\\n$response = $modx->getIterator('electricaItem');\\n\\nforeach($response as $res){\\n    print_r($res->toArray());\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Selecting a Single Record with xPDO.query in PHP\nDESCRIPTION: Shows how to use xPDO.query to fetch a single row from the database, demonstrating error handling and result processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.query.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$result = $modx->query(\"SELECT * FROM modx_users WHERE id=1\");\nif (!is_object($result)) {\n   return 'No result!';\n}\nelse {\n   $row = $result->fetch(PDO::FETCH_ASSOC);\n   return 'Result:' .print_r($row,true);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MODX Resources with Template Variables, PHP\nDESCRIPTION: This snippet demonstrates how to query MODX resources using xPDO's getCollectionGraph method with criteria based on template variables. It highlights potential pitfalls with mismatched template variable values and underscores the necessity for correct alias definitions within your xPDO schema. The snippet requires access to the xPDO instance and proper schema setup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$criteria = [];\n$criteria['modResource.id:IN'] = [1,2,3];\n$criteria['TemplateVarResources.tmplvarid'] = 5;\n$criteria = $modx->newQuery('modResource', $criteria);\n$pages = $modx->getCollectionGraph('modResource', '{\"TemplateVarResources\":{\"TemplateVar\":{}}}', $criteria);\nif ($pages) {\n    foreach ($pages as $p) {\n        print $p->get('pagetitle');\n        foreach ($p->TemplateVarResources as $tvr) {\n            $name = $tvr->TemplateVar->get('name');\n            print $name . ' is '. $tvr->get('value');\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing xPDO Manager and Generator\nDESCRIPTION: Creates instances of xPDOManager and xPDOGenerator classes needed for model generation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$manager= $xpdo->getManager();\n$generator= $manager->getGenerator();\n```\n\n----------------------------------------\n\nTITLE: Parsing String with MODX Parser\nDESCRIPTION: Example of parsing a string using the MODX parser by creating a temporary chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// The formatting String\n$tpl = 'Hello, my name is [[+name]]';\n\n// Properties\n$props = array('name' => 'Bob');\n\n// Create the temporary chunk\n$uniqid = uniqid();\n$chunk = $modx->newObject('modChunk', array('name' => \"{tmp}-{$uniqid}\"));\n$chunk->setCacheable(false);\n\n$output = $chunk->process($props, $tpl);\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of xPDO.getObject Method in PHP\nDESCRIPTION: The basic syntax definition for the xPDO.getObject method, which retrieves a single object instance based on provided criteria and caching settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobject.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOObject|null getObject (string $className, [xPDOCriteria|array|str|int $criteria = null], [bool|int $cacheFlag = true])\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Queries using xPDO::newQuery in PHP\nDESCRIPTION: This snippet illustrates how to create complex queries using the xPDOQuery class. It shows how to define criteria, sorting options, and the importance of sanitizing user input to prevent SQL injection risks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$c = $xpdo->newQuery('Box');\n$c->where(['width' => 14]);\n$c->sortby('name', 'ASC');\n$boxes = $xpdo->getCollection('Box',$c);\n```\n\n----------------------------------------\n\nTITLE: Example of Using getCollectionGraph with Related Objects in PHP\nDESCRIPTION: This example retrieves Box objects with related BoxColors and Color objects where the Box has a width of 40. It demonstrates how to access the related objects after retrieval.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollectiongraph.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$boxes = $xpdo->getCollectionGraph('Box', '{\"BoxColors\":{\"Color\":{}}}', array('Box.width' => 40));\nforeach ($boxes as $box) {\n    foreach ($box->getMany('BoxColors') as $boxColor) {\n        echo \"A box with width of 40 and a color of \" . $boxColor->getOne('Color')->get('name') . \" was found.\\n\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Partition Cache Operations\nDESCRIPTION: Example of setting and retrieving cached data using a custom cache partition\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$str = 'My test cached data.';\n$options = array(\n    xPDO::OPT_CACHE_KEY => 'mypartition',\n);\n// Writes the data to the default cache partition with an expiry time of 2 hours.\n$modx->cacheManager->set('testdata', $str, 7200, $options);\n// Gets the data from cache again. Returns null if cache is not available or expired.\n$str = $modx->cacheManager->get('testdata', $options);\n```\n\n----------------------------------------\n\nTITLE: Creating a Chunk with runProcessor in MODX\nDESCRIPTION: This code demonstrates how to create a new Chunk element in MODX using the runProcessor method, handle errors, and return information about the newly created chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/processors/using-runprocessor.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$response = $modx->runProcessor('element/chunk/create',array(\n   'name' => 'NewChunk',\n   'description' => 'Тестовый чанк создан с runProcessor.',\n   'snippet' => '<h3>Chunkify!</h3>',\n));\nif ($response->isError()) {\n    return $response->getMessage();\n}\n$chunkArray = $response->getObject();\nreturn 'The chunk \"'.$chunkArray['name'].' was created with ID '.$chunkArray['id'];\n```\n\n----------------------------------------\n\nTITLE: Paginated User Listing\nDESCRIPTION: Combines pdoUsers with pdoPage to create a paginated list of users filtered by groups and roles.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &element=`pdoUsers`\n    &groups=`Authors`\n    &roles=`Member`\n    &sortby=`id`\n    &sortdir=`asc`\n]]\n[[!+page.nav]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving xPDO Manager in PHP\nDESCRIPTION: This snippet demonstrates how to get the manager object from an xPDO instance. The manager can perform operations such as creating or altering table structures and generating custom persistence classes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getmanager.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$manager = $xpdo->getManager();\n```\n\n----------------------------------------\n\nTITLE: Executing Validation with xPDOValidator in PHP\nDESCRIPTION: This snippet demonstrates the syntax for using the validate method of xPDOValidator. It accepts an optional array of parameters to pass to the validation rule and returns a boolean indicating if validation passed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.validate.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nboolean validate ([array $parameters = array()])\n```\n\n----------------------------------------\n\nTITLE: Accessing User Profile Data via MODX API\nDESCRIPTION: This code shows how to retrieve user profile data through the MODX API. It gets the user's profile and returns the email address, with a null check to prevent errors when no profile exists.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/users.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$profile = $modx->user->getOne('Profile');\nreturn $profile ? $profile->get('email') : '';\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for MIGX Table\nDESCRIPTION: This XML snippet defines the schema for a simple database table named `electrica_items` using MODX's xPDO framework. It specifies the table's fields (`title` and `description`) with their data types, lengths, and default values. This schema is then used by MIGX to automatically create the table in the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/creating-tables/index.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<model package=\\\"electrica\\\" baseClass=\\\"xPDOObject\\\" platform=\\\"mysql\\\" defaultEngine=\\\"MyISAM\\\" phpdoc-package=\\\"\\\" phpdoc-subpackage=\\\"\\\" version=\\\"1.1\\\">\\n    <object class=\\\"electricaItem\\\" table=\\\"electrica_items\\\" extends=\\\"xPDOSimpleObject\\\">\\n        <field key=\\\"title\\\" dbtype=\\\"varchar\\\" phptype=\\\"string\\\" precision=\\\"100\\\" null=\\\"false\\\" default=\\\"\\\" />\\n        <field key=\\\"description\\\" dbtype=\\\"text\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n    </object>\\n</model>\"\n```\n\n----------------------------------------\n\nTITLE: Listing Resources with Thumbnails using getResources in MODX (PHP)\nDESCRIPTION: This PHP snippet uses the MODX getResources call within a chunk to display a list of child resources as a thumbnail grid. It requires the phpThumbOf package for image thumbnails and uses MODX TVs for image management. Inputs include resource IDs and template variables, outputs are an HTML structure displaying resource titles and thumbnails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/getresources.examples/category-index-page-with-thumbnails.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"list-docs thumb grid\">\n    [[!getResources?  \n        &parents=`[[*id]]`\n        &tpl=`list-docs-thumb-tpl`  \n        &limit=`100`  \n        &sortdir=`ASC`  \n        &includeTVs=`1`  \n        &includeContent=`1`\n        &depth=`0`  \n        &sortby=`menuindex`  \n    ]]  \n</div><!-- eof list-docs -->?\n```\n\n----------------------------------------\n\nTITLE: MODX Chunk Schema Definition\nDESCRIPTION: XML schema definition for the modChunk class, showing database structure and relationships with other MODX components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/index.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"modChunk\" table=\"site_htmlsnippets\" extends=\"modElement\">\n    <field key=\"name\" dbtype=\"varchar\" precision=\"50\" phptype=\"string\" null=\"false\" default=\"\" index=\"unique\" />\n    <field key=\"description\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"Chunk\" />\n    <field key=\"editor_type\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" default=\"0\" />\n    <field key=\"category\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" default=\"0\" />\n    <field key=\"cache_type\" dbtype=\"tinyint\" precision=\"1\" phptype=\"integer\" null=\"false\" default=\"0\" />\n    <field key=\"snippet\" dbtype=\"mediumtext\" phptype=\"string\" />\n    <field key=\"locked\" dbtype=\"tinyint\" precision=\"1\" attributes=\"unsigned\" phptype=\"boolean\" null=\"false\" default=\"0\" />\n    <aggregate alias=\"Category\" class=\"modCategory\" key=\"id\" local=\"category\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: Defining Database Fields in MODX Schema\nDESCRIPTION: Example of defining database fields with their types, properties and default values in MODX schema XML\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/work-logic.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<field key=\"name\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"description\" dbtype=\"text\" phptype=\"text\" null=\"true\" default=\"\" />\n<field key=\"active\" dbtype=\"tinyint\" precision=\"1\" phptype=\"boolean\" attributes=\"unsigned\" null=\"true\" default=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Validating xPDO Object with PHP\nDESCRIPTION: This PHP snippet demonstrates how to validate an xPDO object using the defined xPDOMaxValueValidationRule. It initializes the xPDO environment, creates a new 'myTest' object, sets the 'number' field to a value exceeding the maximum allowed (101), and then validates the object. If validation fails, it retrieves and displays the associated error message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdomaxvaluevalidationrule.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$modx->addPackage('test','/path/to/my/test/model/','test_');\n$obj = $modx->newObject('myTest');\n$obj->set('number',101);\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $output .= $errorMsg['message'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring a Field in MODX Resource in PHP\nDESCRIPTION: Plugin to validate that a long title is present before saving a MODX resource. It shows how to prevent saving by outputting an error message to the modal window and returning a message to the error log.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforedocformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (empty($resource->longtitle)) {\n    $modx->event->output('Long title is required!'); // to modal window\n    return '[MyPlugin] Failed to save page id '.$id.' due to missing longtitle'; // to the error log\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Template Generation\nDESCRIPTION: Sets up custom templates for generating class files and maps with PHPDoc formatting. Includes templates for base classes, platform-specific classes, and map headers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$generator->classTemplate= <<<EOD\n<?php\n/**\n * [+phpdoc-package+]\n */\nclass [+class+] extends [+extends+] {}\n?>\nEOD;\n$generator->platformTemplate= <<<EOD\n<?php\n/**\n * [+phpdoc-package+]\n */\nrequire_once (strtr(realpath(dirname(dirname(__FILE__))), '\\\\\\\\', '/') . '/[+class-lowercase+].class.php');\nclass [+class+]_[+platform+] extends [+class+] {}\n?>\nEOD;\n$generator->mapHeader= <<<EOD\n<?php\n/**\n * [+phpdoc-package+]\n */\nEOD;\n```\n\n----------------------------------------\n\nTITLE: Custom Processor Implementation in miniShop2\nDESCRIPTION: Example of implementing a custom processor in miniShop2 component with custom processor path and properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$processorProps = array(\n    'id' => 55\n);\n$otherProps = array(\n    'processors_path' => $modx->getOption('core_path') . 'components/minishop/processors/'\n);\n$response = $modx->runProcessor('web/orders/getlist', $processorProps, $otherProps);\nreturn $response->response;\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Prefixed Placeholders in MODX with PHP\nDESCRIPTION: Example of setting an array of placeholders with the 'my' prefix. This creates placeholders that can be accessed using [[+my.name]] and [[+my.email]] in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.toplaceholders.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->toPlaceholders(array(\n  'name' => 'John',\n  'email' => 'jdoe@gmail.com',\n),'my');\n```\n\n----------------------------------------\n\nTITLE: Breaking Down the Path Resolution in PHP\nDESCRIPTION: This expanded version of the initialization code breaks down each step of the path resolution process, making it more readable. It shows how default paths are determined and overridden with custom system settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$defaultDoodlesCorePath = $modx->getOption('core_path').'components/doodles/';\n$doodlesCorePath = $modx->getOption('doodles.core_path',null,$defaultDoodlesCorePath);\n$dood = $modx->getService('doodles','Doodles',$doodlesCorePath.'model/doodles/',$scriptProperties);\n```\n\n----------------------------------------\n\nTITLE: MODX Token Validation Example\nDESCRIPTION: Code snippet demonstrating how to validate a form submission token in the MODX manager context by comparing the posted token with the user's generated token.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/security/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$token = $modx->getOption('HTTP_MODAUTH', $_POST);\nif ($token != $modx->user->getUserToken($modx->context->get('key')) {\n    // ERROR! Invalid request\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing PDO Database Connection with xPDO::connect\nDESCRIPTION: Core method for creating a PDO database connection. Takes an optional array of driver options as parameter and returns a boolean indicating if the connection was successful.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.connect.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean connect ([array $driverOptions = array ()])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collections with xPDO getCollectionGraph, PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a collection of objects using xPDO's getCollectionGraph method in PHP. The example shows how to access related records using the alias names defined in a JSON object and how to iterate over the result set to output the values. It requires an xPDO instance and assumes that relationships and alias names are correctly set up in the schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$collection= $xpdo->getCollectionGraph('Zip', '{\"TZ\":{},\"ST\":{},\"CT\":{}}');\nif ($collection) {\n    foreach ($collection as $obj) {\n        $out = $obj->toArray();\n        $out['timezone'] = $obj->TZ->get('tzname');\n        $out['state'] = $obj->ST->get('statename');\n        $out['county'] = $obj->CT->get('countyname');\n        print_r($out);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from MODX Cache\nDESCRIPTION: A snippet that retrieves previously stored data from the MODX cache using a specific cache key. This snippet demonstrates basic cache reading functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/example.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$cacheManager = $modx->getCacheManager();\nreturn $cacheManager->get('my_cache_key');\n```\n\n----------------------------------------\n\nTITLE: Accessing Extended User Fields in MODX\nDESCRIPTION: Example showing how to access extended (custom) fields from a user's profile, including necessary null checks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getuser.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getUser();\nif (!$user) return '';\n$profile = $user->getOne('Profile');\nif (!$profile) return '';\n$extended = $profile->get('extended');\nprint (isset($extended['custom_user_field'])) ? $extended['custom_user_field'] : '';\n```\n\n----------------------------------------\n\nTITLE: Snippet Call with Properties in MODX\nDESCRIPTION: Passing properties directly to a MODX snippet to customize its behavior. This example uses the Wayfinder snippet with startId and level parameters to control menu generation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/snippets.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Wayfinder? &startId=`0` &level=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Author Users Processor in PHP\nDESCRIPTION: PHP processor class that retrieves a list of users from the Author usergroup for the combo box. It performs a complex query joining multiple tables to get users with their profile information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gridclasskey/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass AuthorUsersGetListProcessor extends modObjectGetListProcessor {\n    /** @var string $objectType The object \"type\", this will be used in various lexicon error strings */\n    public $objectType = 'gridclasskey.AuthorUsersGetList';\n    /** @var string $classKey The class key of the Object to iterate */\n    public $classKey = 'modTemplateVarResource';\n    /** @var string $defaultSortField The default field to sort by */\n    public $defaultSortField = 'id';\n    /**\n     * Can be used to adjust the query prior to the COUNT statement\n     *\n     * @param xPDOQuery $c\n     * @return xPDOQuery\n     */\n    public function prepareQueryBeforeCount(xPDOQuery $c) {\n        $c->distinct();\n        $c->leftJoin('modTemplateVar', 'TemplateVar', 'TemplateVar.id = ' . $this->classKey . '.tmplvarid');\n        $c->leftJoin('modUser', 'User', 'User.id = ' . $this->classKey . '.value');\n        $c->leftJoin('modUserProfile', 'UserProfile', 'UserProfile.internalKey = User.id');\n        $c->select(array(\n            $this->classKey . '.*',\n            'User.username',\n            'UserProfile.fullname',\n        ));\n        $c->where(array(\n            'TemplateVar.name' => 'author' // XXX: Adjust this!\n        ));\n        return $c;\n    }\n    /**\n     * Prepare the row for iteration\n     * @param xPDOObject $object\n     * @return array\n     */\n    public function prepareRow(xPDOObject $object) {\n        $objectArray = $object->toArray();\n        $outputArray = array(\n            'id' => $objectArray['value'],\n            'name' => (!empty($objectArray['fullname']) ? $objectArray['fullname'] : $objectArray['username']),\n        );\n        return $outputArray;\n    }\n}\nreturn 'AuthorUsersGetListProcessor';\n```\n\n----------------------------------------\n\nTITLE: Creating a complete Transport Package build script in PHP for MODX\nDESCRIPTION: A comprehensive build script for creating a MODX transport package. It defines package information, sets up directory structures, initializes the MODX environment, creates the package, and registers a namespace.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$tstart = explode(' ', microtime());\n$tstart = $tstart[1] + $tstart[0];\nset_time_limit(0);\n\n/* define package names */\ndefine('PKG_NAME','Doodles');\ndefine('PKG_NAME_LOWER','doodles');\ndefine('PKG_VERSION','1.0');\ndefine('PKG_RELEASE','beta4');\n\n/* define build paths */\n$root = dirname(dirname(__FILE__)).'/';\n$sources = array(\n    'root' => $root,\n    'build' => $root . '_build/',\n    'data' => $root . '_build/data/',\n    'resolvers' => $root . '_build/resolvers/',\n    'chunks' => $root.'core/components/'.PKG_NAME_LOWER.'/chunks/',\n    'lexicon' => $root . 'core/components/'.PKG_NAME_LOWER.'/lexicon/',\n    'docs' => $root.'core/components/'.PKG_NAME_LOWER.'/docs/',\n    'elements' => $root.'core/components/'.PKG_NAME_LOWER.'/elements/',\n    'source_assets' => $root.'assets/components/'.PKG_NAME_LOWER,\n    'source_core' => $root.'core/components/'.PKG_NAME_LOWER,\n);\nunset($root);\n\n/* override with your own defines here (see build.config.sample.php) */\nrequire_once $sources['build'] . 'build.config.php';\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n$modx= new modX();\n$modx->initialize('mgr');\necho ''; /* used for nice formatting of log messages */\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget('ECHO');\n\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$builder = new modPackageBuilder($modx);\n$builder->createPackage(PKG_NAME_LOWER,PKG_VERSION,PKG_RELEASE);\n$builder->registerNamespace(PKG_NAME_LOWER,false,true,'{core_path}components/'.PKG_NAME_LOWER.'/');\n\n/* zip up package */\n$modx->log(modX::LOG_LEVEL_INFO,'Packing up transport package zip...');\n$builder->pack();\n\n$tend= explode(\" \", microtime());\n$tend= $tend[1] + $tend[0];\n$totalTime= sprintf(\"%2.4f s\",($tend - $tstart));\n$modx->log(modX::LOG_LEVEL_INFO,\"\\n<br />Package Built.<br />\\nExecution time: {$totalTime}\\n\");\n\n\nsession_write_close();\nexit ();\n```\n\n----------------------------------------\n\nTITLE: Creating Update Processor for MODX Doodle Component in PHP\nDESCRIPTION: Implements a PHP processor class that extends modObjectUpdateProcessor to handle updating Doodle records in the database. This class automatically handles validation and saving the updated object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DoodleUpdateProcessor extends modObjectUpdateProcessor {\n    public $classKey = 'Doodle';\n    public $languageTopics = array('doodles:default');\n    public $objectType = 'doodles.doodle';\n}\nreturn 'DoodleUpdateProcessor';\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Plugin Example\nDESCRIPTION: Demonstrates custom validation implementation when saving a page resource, including user messaging and logging.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Do some logical stuff.... if validation failed:\n$modx->event->output('Something did not validate!');\nreturn \"This goes to the logs\";\n```\n\n----------------------------------------\n\nTITLE: Resource Linking Syntax in MODX\nDESCRIPTION: Basic syntax for creating links to other resources using MODX link tags\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/resources/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[~123]]\n```\n\n----------------------------------------\n\nTITLE: Valid Operators in xPDOQuery Conditions\nDESCRIPTION: Shows the different comparison operators available in xPDOQuery including equality, inequality, greater/less than, LIKE, NULL checks, and IN statements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$c = $xpdo->newQuery('Person');\n$c->where(array(\n  'name:=' => 'John', /* Equal To */\n  'name:!=' => 'Sue', /* Unequal To */\n  'age:>' => '21', /* Greater Than */\n  'age:>=' => '21', /* Greater Than or Equal To */\n  'age:<' => '18', /* Less Than */\n  'age:<=' => '18', /* Less Than or Equal To */\n  'search:LIKE' => 'Term', /* LIKE statement */\n  'field' => null, /* check for NULL */\n  'ids:IN' => array(1,2,3), /* IN statement */\n));\n```\n\n----------------------------------------\n\nTITLE: Creating Database Connection and Saving Data - PHP\nDESCRIPTION: This code snippet demonstrates how to connect to a foreign MySQL database using xPDO, create a new record in the 'EventName' table, and display the data in a table format. It requires the MODX environment and foreign database credentials.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cmpgenerator/cmpgenerator.foreign-databases.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once $modx->getOption('core_path').'config/foreigndb_config.php';\n\n$output = '';// this is what the snippet will return\n\n$foreignDB = new xPDO('mysql:host=' . $foreign_database_host.';dbname='.$foreign_database_name/*.';charset='.$foreign_database_charset*/,\n        $foreign_database_username,\n        $foreign_database_password );\n\n$package_path = $modx->getOption('core_path').'components/foreigndb/model/';\n// see the scheme file and the xml model element and you will see the attribute package and that must match here\n// make sure you set the prefix as empty if you don't use it\nif ( !$foreignDB->addPackage('foreigndb', $package_path, '') ) {\n    return 'Can not load package';\n}\n\n// lets add some data!\n// see the scheme file and the xml object element and you will see the attribute class and that must match here\n$myRow = $foreignDB->newObject('EventName');\n$data = array(\n        'name' => 'MODX Revolution',\n        'description' => 'A great CMS product...'\n    );\n$myRow->fromArray($data);\n\nif ( !$myRow->save() ) {\n    $output .= '<p>Could not create row</p>';\n} else {\n    $output .= '<p>Created row successfully</p>';\n}\n// now lets show the data in a quick and dirty table:\n$output .= '\n<table>\n    <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Description</th>\n    </tr>';\n\n// Note for all HTML you should be using Chunks see: <a href=\"https://docs.modx.org/current/en/building-sites/elements/chunks\"> https://docs.modx.org/current/en/building-sites/elements/chunks...</a>\n/* build query */\n$query = $foreignDB->newQuery('EventName');\n$rows = $foreignDB->getIterator('EventName', $query);\n\n/* iterate */\n$list = array();\nforeach ($rows as $row) {\n    // from object to array you can also do $row->get('name');\n    $row_array = $row->toArray();\n\n    $output .= '\n    <tr>\n        <td>'.$row_array['id'].'</td>\n        <td>'.$row_array['name'].'</td>\n        <td>'.$row_array['description'].'</td>\n    </tr>';\n}\n$output .= '\n</table>';\n\nreturn $output;\n\n```\n\n----------------------------------------\n\nTITLE: Accessing One-to-Many Relationship Data in MODX Snippet\nDESCRIPTION: PHP code for a MODX snippet to access data from a one-to-many relationship between Blogposts and Comments objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$base_path = MODX_CORE_PATH . 'components/one_to_many/';\n$modx->addPackage('one_to_many',$base_path.'model/','');\n$output = '';\n$blogpost = $modx->getObject('Blogposts', array('blogpost_id' => 1 ) );\n$comments = $blogpost->getMany('Comments');\n$output .= $blogpost->get('content');\nforeach ( $comments as $c )\n{\n    $output .= $c->get('comment');\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Setting Up RSS Feed Resource in MODX (PHP)\nDESCRIPTION: This code snippet sets up the basic structure for an RSS feed, including channel information like title, link, description, language, and a getResources call to fetch articles. It uses XML and RSS specifications for proper formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/getresources.examples/building-a-rss-feed.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n<channel>\n    <title>[[*pagetitle]]</title>\n    <link>[[~[[*id]]? &scheme=`full`]]</link>\n    <description>[[*introtext:cdata]]</description>\n    <language>[[++cultureKey]]</language>\n    <ttl>120</ttl>\n    <atom:link href=\"[[~[[*id]]? &scheme=`full`]]\" rel=\"self\" type=\"application/rss+xml\" />\n[[getResources?\n  &tpl=`rssItem`\n  &parents=`29,41`\n  &depth=`5`\n  &limit=`10`\n  &includeContent=`1`\n  &includeTVs=`1`\n  &showHidden=`0`\n  &hideContainers=`1`\n]]\n</channel>\n</rss>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Resources Based on Tags in MODX with PHP\nDESCRIPTION: The TaggerGetRelatedWhere snippet generates SQL conditions for finding related resources sharing the same tag, to be used with the getResources snippet. This snippet extends functionality by leveraging properties such as `resources`, `groups`, and filtering options for unused, unpublished, and deleted tags. The combination with getResources makes it powerful for resource management based on shared tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tagger/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Lists all the resources with the same parent, that share at least one tag from the group 1 with the current resource.\n[[getResources?\n    &where=`[[TaggerGetRelatedWhere? &groups=`1`]]`\n    &parents=`[[*parent]]`\n    &tpl=`@INLINE <li>[[+pagetitle]]</li>`\n    &tplWrapper=`@INLINE <ul>[[+output]]</ul>`\n    &limit=`0`\n]]\n```\n\n----------------------------------------\n\nTITLE: Loading Lexicon Topics with Namespaces in MODX\nDESCRIPTION: Demonstrates how to load a lexicon topic that belongs to a specific namespace in MODX. This example loads the 'comment' topic from the 'quip' namespace, which will look for the lexicon file in the namespace path instead of the core directories.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/namespaces.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon->load('quip:comment');\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Object with Multiple Criteria using xPDO::getObject in PHP\nDESCRIPTION: This code showcases how to retrieve an object using multiple filter criteria with xPDO's getObject method. It emphasizes using an associative array for criteria to ensure secure and correct data retrieval.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$gu = $xpdo->getObject('GroupUser', [\n    'user' => 12,\n    'group' => 4,\n]);\n```\n\n----------------------------------------\n\nTITLE: PHP Resolver for Creating Database Tables in MODX\nDESCRIPTION: A PHP resolver script that creates the necessary database tables during package installation. It uses xPDOManager to create the object container for the Doodle class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($object->xpdo) {\n    switch ($options[xPDOTransport::PACKAGE_ACTION]) {\n        case xPDOTransport::ACTION_INSTALL:\n            $modx =& $object->xpdo;\n            $modelPath = $modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/';\n            $modx->addPackage('doodles',$modelPath);\n\n            $manager = $modx->getManager();\n\n            $manager->createObjectContainer('Doodle');\n\n            break;\n        case xPDOTransport::ACTION_UPGRADE:\n            break;\n    }\n}\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Check in PHP\nDESCRIPTION: PHP code demonstrating how to implement the validation check using the generated model. The code creates a new object, validates it, and displays any validation error messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdoobjectexistsvalidationrule.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$modx->addPackage('test','/path/to/my/test/model/','test_');\n$obj = $modx->newObject('myTest');\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $output .= $errorMsg['message'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Aggregate Relationship in XML Schema\nDESCRIPTION: Example showing how to define an aggregate relationship between a Crayon and Box object in xPDO schema. Demonstrates setting up a one-to-one relationship where deleting the primary object doesn't affect the related object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/relationships.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"myCrayon\" table=\"crayons\" extends=\"xPDOSimpleObject\">\n    <field key=\"box\" dbtype=\"int\" precision=\"10\" phptype=\"integer\" null=\"false\" default=\"\" />\n    <aggregate alias=\"Box\" class=\"myBox\" local=\"box\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: Filtering by Default TV Values in pdoResources\nDESCRIPTION: Demonstrates how to filter resources by default TV values using null comparison.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoFetch.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &parents=`0`\n    &includeTVs=`tv2`\n    &where=`{\"tv2\":null}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using Lexicon Entries in PHP\nDESCRIPTION: Shows how to use lexicon entries in PHP code with optional placeholder substitution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/internationalization.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon('school.basketball');\n$modx->lexicon('school.basketball',array('sport' => 'basketball'));\n```\n\n----------------------------------------\n\nTITLE: Adding File Resolvers in MODX Transport Package\nDESCRIPTION: This PHP snippet demonstrates how to add file resolvers to a MODX transport package, ensuring the specified files are copied to the user's MODX installation after installation. It sets the source and target paths based on the defined sources, helping to organize the installation of assets and core files. Dependencies are on the MODX framework to use its methods and constants.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'Adding file resolvers to category...');\n$vehicle->resolve('file',array(\n    'source' => $sources['source_assets'],\n    'target' => \"return MODX_ASSETS_PATH . 'components/';\",\n));\n$vehicle->resolve('file',array(\n    'source' => $sources['source_core'],\n    'target' => \"return MODX_CORE_PATH . 'components/';\",\n));\n```\n\n----------------------------------------\n\nTITLE: Alternative Select Method Syntax in PHP\nDESCRIPTION: Shows the alternative syntax for the select method that accepts a string parameter defaulting to '*'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery select ([string $columns = '*'])\n```\n\n----------------------------------------\n\nTITLE: Basic Processor Execution in MODX\nDESCRIPTION: Demonstrates the basic syntax for running a MODX processor using runProcessor method with action path and properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$response = $modx->runProcessor('action/path/to/processor',$arrayOfProperties,$otherOptions);\n```\n\n----------------------------------------\n\nTITLE: Configuring Query with Class Alias for OtherBox Objects\nDESCRIPTION: Demonstrates how to use setClassAlias to create a more readable query by setting a custom alias for the OtherBox class when querying database records\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.setclassalias.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('OtherBox');\n$query->setClassAlias('Box');\n$query->where(array(\n   'Box.name' => 'RoundBox',\n));\n$otherBoxes = $xpdo->getCollection('OtherBox',$query);\n```\n\n----------------------------------------\n\nTITLE: Defining Database Indexes in MODX Schema\nDESCRIPTION: Example of defining database indexes for optimizing table performance in MODX schema XML\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/work-logic.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<index alias=\"name\" name=\"name\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n    <column key=\"name\" length=\"\" collation=\"A\" null=\"false\" />\n</index>\n<index alias=\"active\" name=\"active\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n    <column key=\"active\" length=\"\" collation=\"A\" null=\"false\" />\n</index>\n```\n\n----------------------------------------\n\nTITLE: Converting JSON to PHP Array Example\nDESCRIPTION: Example showing how to use the fromJSON method to convert a simple JSON string to a PHP array. This demonstrates passing a JSON string with a name property and accessing the resulting array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.fromjson.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = '{name:\"John\"}';\n$ar = $xpdo->fromJSON($str);\nprint_r($ar); // prints: Array ( 'name' => 'John' )\n```\n\n----------------------------------------\n\nTITLE: Defining XML Outer Container for MODX Sitemap in XML\nDESCRIPTION: This chunk is used for XML sitemaps as an outer container for the entire sitemap output. It includes the XML declaration and urlset element with proper namespace.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"[[++modx_charset]]\"?>\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n[[+items]]\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Checking Installation Action in OnPackageInstall Event (PHP)\nDESCRIPTION: Shows how to determine if the package action was an initial install or an upgrade using the $action variable provided in the OnPackageInstall event. This can be used to perform different operations based on the installation type.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onpackageinstall.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nif ($action === xPDOTransport::ACTION_INSTALL) {\n    // First time installation\n} elseif ($action === xPDOTransport::ACTION_UPGRADE) {\n    // Package upgrade\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing xPDO Schema for MySQL Database\nDESCRIPTION: Defines the basic structure of an xPDO schema XML file for a MySQL database, including package name, base class, and other database-specific attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/database-and-tables.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"storefinder\"\n   baseClass=\"xPDOObject\"\n   platform=\"mysql\"\n   defaultEngine=\"MyISAM\"\n   tablePrefix=\"sf_\"\n   phpdoc-package=\"storefinder\"\n   phpdoc-subpackage=\"model\"\n   version=\"1.1\">\n```\n\n----------------------------------------\n\nTITLE: Using Lexicon Tags in MODX Templates\nDESCRIPTION: Demonstrates how to use lexicon entries in MODX templates and content using tags with optional parameters for topic, namespace, and language specification.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/internationalization.md#2025-04-17_snippet_0\n\nLANGUAGE: modx\nCODE:\n```\n[[%key? &topic=`topicname` &namespace=`namespace_name` &language=`en`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Hello World Snippet in PHP\nDESCRIPTION: A simple snippet that returns 'Hello, World!' when called. Demonstrates the basic structure of a MODX snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn 'Hello, World!';\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Connection Test Script\nDESCRIPTION: A PHP script that connects to the MODX core, enables error handling, and prints the MODX configuration. Used to verify the development environment setup and MODX connectivity.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/customize-the-workplace.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// We connect\ndefine('MODX_API_MODE', true);\nrequire '../index.php';\n\n// Enable error handling\n$modx->getService('error','error.modError');\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n\necho '<pre>';\nprint_r($modx->config);\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the Package\nDESCRIPTION: Code that loads the modPackageBuilder class, creates a new package instance with version information, and registers a namespace for the component. The namespace registration includes a path placeholder for proper installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$builder = new modPackageBuilder($modx);\n$builder->createPackage('quip','0.1','alpha7');\n$builder->registerNamespace('quip',false,true,'{core_path}components/quip/');\n```\n\n----------------------------------------\n\nTITLE: Creating an xPDO Object with Initial Values in PHP\nDESCRIPTION: Shows how to create a new xPDO object of class 'Box' with pre-filled field values using the newObject method. This sets initial values for width, height, and color without saving to the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/creating-objects.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$myBox = $xpdo->newObject('Box',array(\n   'width' => 5,\n   'height' => 12,\n   'color' => 'red',\n));\n```\n\n----------------------------------------\n\nTITLE: Basic Directory Copy Example\nDESCRIPTION: Demonstrates basic usage of copyTree method to copy contents from one directory to another using xPDO cache manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.copytree.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->cacheManager->copyTree('/my/old/dir/','/my/new/dir/');\n```\n\n----------------------------------------\n\nTITLE: Loading xPDO Package with addPackage\nDESCRIPTION: Demonstrates how to load an xPDO package by specifying the package name, absolute path, and optional table prefix. Used to make model classes and table data available in xPDO.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/loading-package.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->addPackage('boxpackage','/myapp/core/model/','myapp_');\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX and creating Transport Package in PHP\nDESCRIPTION: Initializes the MODX environment, sets up logging, and creates a Transport Package with the modPackageBuilder class. Registers a namespace with a path that uses a {core_path} placeholder for flexibility in installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modx= new modX();\n$modx->initialize('mgr');\necho ''; /* used for nice formatting of log messages */\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget('ECHO');\n\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$builder = new modPackageBuilder($modx);\n$builder->createPackage(PKG_NAME_LOWER,PKG_VERSION,PKG_RELEASE);\n$builder->registerNamespace(PKG_NAME_LOWER,false,true,'{core_path}components/'.PKG_NAME_LOWER.'/');\n```\n\n----------------------------------------\n\nTITLE: Saving Object Fields with save() in xPDO (PHP)\nDESCRIPTION: This snippet demonstrates how to save the changes made to an object's fields to the database using the `save()` method.  Calling save() will immediately execute the INSERT or UPDATE query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$myBox->save();\n```\n\n----------------------------------------\n\nTITLE: Combined Comparison Operators\nDESCRIPTION: Example of using multiple comparison operators in a single query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   'width:>=' => 15,\n   'width:!=' => 23,\n));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Configuring Register Snippet with Activation in MODX\nDESCRIPTION: This example shows how to set up the Register snippet to use email activation. It specifies the email template, subject, and the resource ID where ConfirmRegister is placed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.confirmregister.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Register?\n   &activationEmailTpl=`myActivationEmailTpl`\n   &activationEmailSubject=`Please activate your account!`\n   &activationResourceId=`26`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining Snippet Properties in PHP\nDESCRIPTION: Example of defining default properties for a MODX snippet using a properties array. Each property defines attributes like name, description, type, options and default value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Default snippet properties\n *\n * @package quip\n * @subpackage build\n */\n$properties = array(\n    array(\n        'name' => 'closed',\n        'desc' => 'If set to true, the thread will not accept new comments.',\n        'type' => 'combo-boolean',\n        'options' => '',\n        'value' => false,\n    ),\n    array(\n        'name' => 'dateFormat',\n        'desc' => 'The format of the dates displayed for a comment.',\n        'type' => 'textfield',\n        'options' => '',\n        'value' => '%b %d, %Y at %I:%M %p',\n    )\n);\nreturn $properties;\n```\n\n----------------------------------------\n\nTITLE: Configuring FormIt Blank Validation\nDESCRIPTION: FormIt snippet call that adds blank validation for the nospam field. This ensures the form only processes if the specified field remains empty.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/using-a-blank-nospam-field.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &validate=`workemail:blank`]]\n```\n\n----------------------------------------\n\nTITLE: Package Build Script Initialization\nDESCRIPTION: Shows the initial setup for a MODX package build script, including path definitions, MODX initialization, and package builder setup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Quip build script\n *\n * @package quip\n * @subpackage build\n */\n$mtime = microtime();\n$mtime = explode(\" \", $mtime);\n$mtime = $mtime[1] + $mtime[0];\n$tstart = $mtime;\nset_time_limit(0);\n\n$root = dirname(dirname(__FILE__)).'/';\n$sources= array (\n    'root' => $root,\n    'build' => $root .'_build/',\n    'lexicon' => $root . '_build/lexicon/',\n    'resolvers' => $root . '_build/resolvers/',\n    'data' => $root . '_build/data/',\n    'source_core' => $root.'core/components/quip',\n    'source_assets' => $root.'assets/components/quip',\n    'docs' => $root.'core/components/quip/docs/',\n);\nunset($root);\n\n/* override with your own defines here (see build.config.sample.php) */\nrequire_once dirname(__FILE__) . '/build.config.php';\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n$modx= new modX();\n$modx->initialize('mgr');\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$builder = new modPackageBuilder($modx);\n$builder->createPackage('quip','0.1','alpha5');\n$builder->registerNamespace('quip',false,true,'{core_path}components/quip/');\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Collection of Objects using xPDO::getCollection in PHP\nDESCRIPTION: In this snippet, xPDO's getCollection method is used to retrieve all objects matching a specific criterion in the database. It illustrates how to iterate over the returned collection to access individual object properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$boxes = $xpdo->getCollection('Box', [\n  'width' => 14,\n]);\nforeach ($boxes as $box) {\n   echo $box->get('color').\"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Fields in xPDO Schema for MODX Revolution\nDESCRIPTION: XML definitions for database table fields in xPDO schema. Each field has properties like database type, precision, PHP type, default values, and indexing information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<field key=\"name\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" index=\"index\" />\n<field key=\"address\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"city\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"state\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"zip\" dbtype=\"varchar\" precision=\"10\" phptype=\"string\" null=\"false\" default=\"0\" index=\"index\" />\n<field key=\"country\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"phone\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"fax\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n<field key=\"active\" dbtype=\"int\" precision=\"1\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n```\n\n----------------------------------------\n\nTITLE: Retrieving modResource Objects in MODX\nDESCRIPTION: Example of using xPDO.getCollection within a MODX context to retrieve a collection of modResource objects (pages) with a specific template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollection.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$pages = $modx->getCollection('modResource', array('template' => 3));\n```\n\n----------------------------------------\n\nTITLE: Loading Latest jQuery from jQuery CDN\nDESCRIPTION: Example of registering the latest version of jQuery from jQuery's CDN to be loaded in the page head.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientstartupscript.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupScript('http://code.jquery.com/jquery-latest.min.js');\n```\n\n----------------------------------------\n\nTITLE: Advanced pdoResources with SQL Joins\nDESCRIPTION: Shows complex SQL join functionality in pdoResources to fetch related resource data and user information in a single query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &parents=`0`\n    &class=`modResource`\n    &leftJoin=`{\n        \"Parent\": {\n            \"class\": \"modResource\",\n            \"on\": \"modResource.parent = Parent.id\"\n        },\n        \"CreatedBy\": {\n            \"class\": \"modUserProfile\",\n            \"on\": \"modResource.createdby = CreatedBy.internalKey\"\n        }\n    }`\n    &select=`{\n        \"modResource\": \"modResource.id, modResource.pagetitle\",\n        \"Parent\": \"Parent.pagetitle as parent\",\n        \"CreatedBy\": \"CreatedBy.fullname as author\"\n    }`\n    &showLog=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Register Snippet Default Properties Table in Markdown\nDESCRIPTION: A markdown table listing the default properties for the Register snippet, including property names, descriptions, and default values. This table covers various aspects of user registration, such as activation, email settings, password management, and form processing options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                              | Description                                                                                                                                                                                                                | Default             |\n| --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------------------- |\n| activation                        | Whether or not to require activation for proper registration. If true, users will not be marked active until they have activated their account. Defaults to true. Will only work if the registration form passes an email field.           | 1                   |\n| activationEmailSubject            | The subject of the activation email.                          |    `register.activation_email_subject` lexicon value                 |\n| activationEmailTpl                | The activation email tpl. The text of the email includes a link where users can activate their new account and their username and (generated) password.                                                                                    | lgnActivateEmailTpl |\n| activationEmailTplType            | The type of tpls being provided for the activation email.                                                                                                                                                                                  | modChunk            |\n| activationResourceId              | The Resource ID where the ConfirmRegister snippet for activation is located.                                                                                                                                                               | 1                   |\n| activationttl                     | Number of minutes until the activation email expires. Defaults to 3 hours.                                                                                                                                                                 | 180                 |\n| autoLogin                         | Whether or not to automatically login the User after successful registration. (Requires activation = 0)                                                                                                                                    | 0                   |\n| customValidators                  | A comma-separated list of custom validator names (snippets) you plan to use in this form. They must be explicitly stated here, or they will not be run.                                                                                    |                     |\n| emailField                        | The name of the field to use for the new User's email address.                                                                                                                                                                             | email               |\n| ensurePasswordStrength            | If set to Yes, Register will ensure the user enters a strong enough password. Strong passwords are passwords with multiple words or non-alphabetic characters in them.                                                                     | 0                   |\n| ensurePasswordStrengthSuggestions | If ensurePasswordStrength is set to Yes, and the password fails the strength test, Register will supply this many number of suggestions to the user for their password.                                                                    | 5                   |\n| errTpl                         | | `<span class=\"error\">[[+error]]</span>`                   |\n| excludeExtended                   | A comma-separated list of fields to exclude from setting as extended fields.                                                                                                                                                               |                     |\n| generatePassword                  | If set to Yes, Register will generate a random password for the user, overwriting any passed password. Useful for automatic generation of passwords.                                                                                       | 0                   |\n| jsonResponse                      |   | 0                   |\n| maximumPossibleStrongerPasswords  | If ensurePasswordStrength is set to Yes, then this is the maximum amount of suggestions that Register can find to consider the supplied password \"strong\". Making this number higher makes the check more lenient; lower makes it tougher. | 25                  |\n| minimumStrongPasswordWordCount    | If ensurePasswordStrength is set to Yes, if a supplied password has this many words, then it will be consider a strong password.                                                                                                           | 3                   |\n| moderatedResourceId               | If a prehook sets the user as moderated, then send to this Resource instead of the submittedResourceId. Leave blank to bypass.                                                                                                             |                     |\n| passwordField                     | The name of the field to use for the new User's password.                                                                                                                                                                                  | password            |\n| passwordWordSeparator             | If ensurePasswordStrength is set to Yes, this will be the separator between words when determining how many words are in a supplied password.                                                                                              |                     |\n| persistParams                     | Optional. A JSON object of parameters to persist across the register process. Useful when using redirect on ConfirmRegister to redirect to another page (eg, for shopping carts).                                                          |                     |\n| preHooks                          | A comma-separated list of 'hooks', or Snippets, that will be executed before the user is registered but after validation. Also can specify 'recaptcha' as a hook.                                                                          |                     |\n| preserveFieldsAfterRegister\n| postHooks                         | A comma-separated list of 'hooks', or Snippets, that will be executed after the user is registered.                                                                                                                                        |                     |\n| redirectUnsetDefaultParams        | If true, default parameters will be removed from redirected urls.                                                                                                                                                                          | 0                   |\n| submitVar                         | The var to check for to load the Register functionality. If empty or set to false, Register will process the form on all POST requests.                                                                                                    | login-register-btn  |\n| successMsg                        | Optional. If not redirecting using the submittedResourceId parameter, will display this message instead.                                                                                                                                   |                     |\n| submittedResourceId               | If set, will redirect to the specified Resource after the User submits the registration form.                                                                                                                                              |                     |\n| trimPassword                      | If set to Yes, Register will trim the password of whitespace at the beginning and end when processing it.                                                                                                                                  | 1                   |\n| useExtended                       | Whether or not to set any extra fields in the form to the Profiles extended field. This can be useful for storing extra user fields.                                                                                                       | 1                   |\n| usergroups                        | Optional. A comma-separated list of User Group names or IDs to add the newly-registered User to.                                                                                                                                           |                     |\n| usergroupsField                   | Optional. The name of the field to use for the new User's usergroups, eg: using checkbox or radio input.                                                                                                                                   |                     |\n| usernameField                     | The name of the field to use for the new User's username.                                                                                                                                                                                  | username            |\n| validate                          | A comma-separated list of fields to validate, with each field name as name:validator (eg: username:required,email:required). Validators can also be chained, like email:email:required. This property can be specified on multiple lines.  |                     |\n```\n\n----------------------------------------\n\nTITLE: Testing Collection Retrieval\nDESCRIPTION: Simple test to retrieve and count all stores from the database using xPDO.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$stores = $modx->getCollection('sfStore');\necho 'Total: '.count($stores);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Form Fields with OnDocFormRender Plugin in MODX Revolution\nDESCRIPTION: This PHP Plugin handles multiple events to add a custom 'Home' field to the document form. It populates the field with existing data on update, sets a default value on create, renders the HTML for the form field, and saves the field value to the resource's longtitle property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/custom-manager-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Register a form field to forms\n */\nswitch ($modx->event->name) {\n    case 'OnDocFormPrerender':\n        /* if you want to add custom scripts, css, etc, register them here */\n        break;\n    case 'OnDocFormRender':\n        $v = '';\n        if (isset($scriptProperties['resource'])) {\n            /* on the update screen, so set the value */\n            $v = $scriptProperties['resource']->get('longtitle');\n        } else {\n            /* on the create screen, so set the default */\n            $profile = $modx->user->getOne('Profile');\n            $v = $profile->get('address');\n        }\n        /* now do the HTML */\n        $fields = '\n<div class=\"x-form-item x-tab-item\">\n    <label class=\"x-form-item-label\" style=\"width:150px;\">Home</label>\n    <div class=\"x-form-element\">\n        <input type=\"text\" name=\"home\" value=\"'.$v.'\" class=\"x-form-text x-form-field\" />\n    </div>\n</div>\n';\n        $modx->event->output($fields);\nbreak;\n    case 'OnDocFormSave':\n        /* do processing logic here. */\n        $resource =& $scriptProperties['resource'];\n        $resource->set('longtitle',$_POST['home']);\n        $resource->save();\n        break;\n}\nreturn;\n```\n\n----------------------------------------\n\nTITLE: Calling Cached MODX Snippet\nDESCRIPTION: Shows how to properly call a snippet that implements custom caching. The uncached call is necessary to allow the snippet to handle its own caching logic.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/lifetimes.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!testCache]]\n```\n\n----------------------------------------\n\nTITLE: Using Template Variable Filters in MODX PHP\nDESCRIPTION: Demonstrates how to filter MODX resources based on template variable conditions using PHP. These examples show various filtering scenarios including logical OR and AND delimiters, and the use of wildcards for pattern matching. Clarifies the significance of raw values in filtering logic.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n   mytv==somevalue||mytv==othervalue\n```\n\nLANGUAGE: PHP\nCODE:\n```\n   mytv==somevalue,othertv==othervalue\n```\n\nLANGUAGE: PHP\nCODE:\n```\n   mytv==foo||mytv==bar,bartv==3||bartv==1\n```\n\nLANGUAGE: PHP\nCODE:\n```\n   mytv==%a%\n```\n\nLANGUAGE: PHP\nCODE:\n```\n   mytv==a%\n```\n\nLANGUAGE: PHP\nCODE:\n```\n   mytv==%a\n```\n\n----------------------------------------\n\nTITLE: Basic MODX External Initialization in PHP\nDESCRIPTION: Basic code to initialize the MODX object and error handler in the 'web' context. Requires path to MODX core configuration file and loads essential MODX classes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/loading-externally.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once '/absolute/path/to/modx/config.core.php';\nrequire_once MODX_CORE_PATH.'model/modx/modx.class.php';\n$modx = new modX();\n$modx->initialize('web');\n$modx->getService('error','error.modError', '', '');\n```\n\n----------------------------------------\n\nTITLE: Using Fenom Modifiers with PDOResources in MODX - PHP\nDESCRIPTION: This snippet modifies the previous example by including `fenomModifiers`, specifically `dateAgo`, allowing for more advanced date formatting in the output. It maintains the same structure and parameters as the basic PDOResources example but enhances data presentation using Fenom.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &fenomModifiers=`dateAgo`\n    &parents=`0`\n    &tpl=`@INLINE <p>{$id}. {$longtitle ?: $pagetitle} {$createdon | dateago}</p>`\n    &limit=`1000`\n    &sortby=`id`\n    &sortdir=`asc`\n    &showLog=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Targeted Context Cache Refresh\nDESCRIPTION: Example of refreshing specific context settings cache for 'web' and 'web2' contexts\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// refresh the web and web2 context_settings only\n$modx->cacheManager->refresh([\n    'context_settings' => ['contexts' => ['web', 'web2']]\n]);\n```\n\n----------------------------------------\n\nTITLE: Complex OR Conditions for Page Publishing\nDESCRIPTION: Shows how to use OR conditions with multiple criteria for checking page publish status and dates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.orcondition.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$criteria = $modx->newQuery('modResource');\n$criteria->where(array(\n        'published' => 1,\n                array(\n                        'pub_date' => 0,\n                        'OR:pub_date:<=' => time(),\n                ),\n                array(\n                        'unpub_date' => 0,\n                        'OR:unpub_date:>' => time(),\n                ),\n        )\n);\n```\n\n----------------------------------------\n\nTITLE: Blocking Core Access in Apache .htaccess\nDESCRIPTION: Apache rewrite rules to block public access to sensitive MODX directories and files, returning a 404 error.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\nRewriteCond %{HTTP_HOST} ^(www\\.)?example\\.com$ [NC]\nRewriteRule ^(\\.(?!well_known)|_build|_gitify|_backup|core|config.core.php)  /index.php?q=doesnotexist [L,R=404]\n```\n\n----------------------------------------\n\nTITLE: Creating Table for Person Class\nDESCRIPTION: Example showing how to create a database table for a 'Person' class using xPDOManager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.createobjectcontainer.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$manager = $xpdo->getManager();\n$manager->createObjectContainer('Person');\n```\n\n----------------------------------------\n\nTITLE: Creating Extended MODX User Class in PHP\nDESCRIPTION: Sample class implementation extending MODX user functionality with phone relationship handling. Includes constructor, destructor and methods for managing user objects and phone relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n *  File        sample.class.php (requires MODX Revolution 2.x)\n * Created on    Aug 18, 2010\n * Project        shawn_wilkerson\n * @package     extendedUser\n * @version    1.0\n * @category    User Extension\n * @author        W. Shawn Wilkerson\n * @link        http://www.shawnWilkerson.com\n * @copyright  Copyright (c) 2010, W. Shawn Wilkerson.  All rights reserved.\n * @license      GPL\n *\n */\nif (!class_exists('Sampleclass')) {\n    class Sampleclass\n    {\n        function __construct(modX & $modx, array $config= array ()) {\n            /* Import modx as a reference */\n            $this->modx= & $modx;\n            /* Establish the environment */\n            $this->extPath= $modx->getOption('core_path',null, MODX_CORE_PATH).'components/extendeduser/';\n            $this->modx->addPackage('extendeduser', $this->extPath .'model/', 'ut_');\n            $this->_config= array_merge(array (\n                'userID' => $this->modx->user->get('id'),\n            ), $config);\n            /* Define the user */\n            $this->userObj = $this->setUser($this->_config['userID']);\n            $this->userID = $this->userObj->get('id');\n        }\n        function __destruct() {\n            unset ($this->extPath, $this->userObj, $this->userID, $this->_config);\n        }\n        /**\n         * Returns object of type Phone.\n         */\n        public function getPhoneObj() {\n            $this->userObj->getOne('Phones');\n            return $this->userObj->Phones;\n        }\n        /**\n         * Returns object utUser instance of modUser Defaults to current user.\n         * @param $userID\n         */\n        public function getUserObj($userID) {\n            return $this->modx->getObject('modUser', $userID);\n        }\n        /**\n         * Establishes the user.\n         * @param int $userID\n         */\n        public function setUser($userID){\n            return $this->getUserObj($userID);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Manipulation in xPDO\nDESCRIPTION: Demonstrates how to set, retrieve, and delete data in the default cache partition using xPDOCacheManager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/caching/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$str = 'My cached data.';\n$xpdo->cacheManager->set('testdata', $str);\n\necho $xpdo->cacheManager->get('testdata');\n// outputs: My cached data.\n\n$xpdo->cacheManager->delete('testdata');\n```\n\n----------------------------------------\n\nTITLE: Snippet with Input Parameter in PHP\nDESCRIPTION: Demonstrates how to use input parameters in a MODX snippet. The snippet takes an 'input' parameter and returns a message including that input.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn 'My input was: ' . $input;\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Object using Raw SQL Conditions in xPDO::getObject in PHP\nDESCRIPTION: This snippet shows how to retrieve an object using a raw SQL condition with xPDO's getObject method. It warns against using untrusted input in raw SQL queries to avoid security issues.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$bigbox = $xpdo->getObject('Box', '`width` = 150');\n```\n\n----------------------------------------\n\nTITLE: Setting Object Fields with fromArray() in xPDO (PHP)\nDESCRIPTION: This code illustrates how to set multiple object fields at once using the `fromArray()` method in xPDO. It takes an associative array where keys represent the field names and values represent the corresponding field values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$myBox->fromArray(array(\n   'width' => 5,\n   'height' => 10,\n));\n```\n\n----------------------------------------\n\nTITLE: Loading Database Rows with xPDOObject::_loadRows\nDESCRIPTION: Static method that loads a result set from the database based on provided criteria and returns a PDOStatement object. Takes an xPDO instance, class name, and search criteria as parameters. Returns null if the operation fails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/static-object-loaders/loadrows.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstatic PDOStatement|null _loadRows(\n   xPDO &$xpdo,\n   string $className,\n   mixed $criteria\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Extended User Schema in XML\nDESCRIPTION: XML schema definition for extending modUser with a single additional attribute (facebook_url) using a separate table with foreign key relationship.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"extendeduser\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" tablePrefix=\"ext_\">\n        <!-- extend the modUser class -->\n        <object class=\"extUser\" extends=\"modUser\">\n                <composite alias=\"Data\" local=\"id\" class=\"Userdata\" foreign=\"userdata_id\" cardinality=\"one\" owner=\"local\" />\n        </object>\n        <object class=\"Userdata\" table=\"data\" extends=\"xPDOSimpleObject\">\n                <field key=\"userdata_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" attributes=\"unsigned\"/>\n                <field key=\"facebook_url\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"true\" />\n                <index alias=\"userdata_id\" name=\"userdata_id\" primary=\"false\" unique=\"true\" type=\"BTREE\">\n                    <column key=\"userdata_id\" length=\"\" collation=\"A\" null=\"false\" />\n                </index>\n                <aggregate alias=\"extUser\" local=\"userdata_id\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n        </object>\n </model>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Objects with getCollectionGraph in MODX via PHP\nDESCRIPTION: Demonstrates how to use getCollectionGraph to load related objects using a nested JSON hash. Utilizes xPDO to convert these instructions into SQL joins. Limits cannot be used in xPDOQuery with getCollectionGraph.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/graphs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$blogpost = $modx->getCollectionGraph('BlogPost', '{ \"Comments\":{} }', 34 );\nforeach ( $blogpost->Comments as $c ) {\n/* ...do something with each comment... */\n}\n// OR, joining on related objects of related objects\n$TFR = $modx->getCollectionGraph('TrackingformsResources', '{ \"Resources\":{ \"MassUnit\":{}, \"VolumeUnit\":{} } }', 123 );\n```\n\n----------------------------------------\n\nTITLE: Initializing pdoFetch in MODX\nDESCRIPTION: Shows how to initialize the pdoFetch service in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoFetch.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$pdo = $modx->getService('pdoFetch');\n```\n\n----------------------------------------\n\nTITLE: Basic parseChunk Method Syntax in PHP\nDESCRIPTION: Shows the method signature for parseChunk which takes a chunk name, array of replacements, and optional prefix/suffix parameters. Returns a string with replacements applied.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.parsechunk.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring parseChunk (string $chunkName, array $chunkArr, [string $prefix = '[[+'], [string $suffix = ']]'])\n```\n\n----------------------------------------\n\nTITLE: Building Schema with PHP\nDESCRIPTION: This PHP script is used to build the database schema after modifying the XML schema. It updates the model files and is a crucial step in removing the 'position' field. The `MODX_BASE_PATH` variable should be set to the location of the MODX installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bxrextra/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"rename build.config.sample.php to build.config.php\\n    edit build.config.php and set MODX_BASE_PATH to path to your modx location\\n- run _build/build.schema.php\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New File with modFileHandler in MODX Revolution\nDESCRIPTION: This snippet demonstrates how to create a new file with content using modFileHandler. It creates a modFile object for a specified path and then calls the create() method with content to write to the file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/services/modfilehandler.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('fileHandler','modFileHandler');\n$file = $modx->fileHandler->make('/www/test/test.txt');\nif (!$file->create('Hello!')) {\n   return 'File not written.';\n}\nreturn 'File written.';\n```\n\n----------------------------------------\n\nTITLE: Sending HTML Emails with modPHPMailer in MODX Revolution\nDESCRIPTION: This example demonstrates how to send an HTML email using modPHPMailer. It retrieves email content from a chunk, sets mail properties like sender, recipient, subject, and sends the message with error handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modmail.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$message = $modx->getChunk('myEmailTemplate');\n\n$modx->getService('mail', 'mail.modPHPMailer');\n$modx->mail->set(modMail::MAIL_BODY,$message);\n$modx->mail->set(modMail::MAIL_FROM,'me@example.org');\n$modx->mail->set(modMail::MAIL_FROM_NAME,'Johnny Tester');\n$modx->mail->set(modMail::MAIL_SUBJECT,'Check out my new email template!');\n$modx->mail->address('to','user@example.com');\n$modx->mail->address('reply-to','me@xexample.org');\n$modx->mail->setHTML(true);\nif (!$modx->mail->send()) {\n    $modx->log(modX::LOG_LEVEL_ERROR,'An error occurred while trying to send the email: '.$modx->mail->mailer->ErrorInfo);\n}\n$modx->mail->reset();\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Placeholders with Namespace in MODX using PHP\nDESCRIPTION: This example demonstrates how to set multiple placeholders from an array with a 'my.' namespace prefix. The code creates two placeholders ('my.name' and 'my.email') with their respective values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.setplaceholders.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->setPlaceholders(array(\n   'name' => 'John',\n   'email' => 'jdoe@gmail.com',\n),'my.');\n```\n\n----------------------------------------\n\nTITLE: Querying Resources with pdoFetch\nDESCRIPTION: Demonstrates how to fetch resources using pdoFetch, including filtering, sorting, and template processing. Shows collection retrieval with TV inclusion and chunk processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoFetch.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$resources = $pdo->getCollection('modResource', array(\n    'published' => true,\n    'deleted' => false\n), array(\n    'parents' => '1,5,6,-9',\n    'includeTVs' => 'tv1, tv2',\n    'sortby' => 'id',\n    'sortby' => 'asc',\n    'limit' => 20,\n));\n$tpl = '@INLINE <p>[[+id]] - [[+pagetitle]]</p>';\n$output = '';\nforeach ($resources as $resource) {\n    $output .= $pdo->getChunk($tpl, $resource);\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Generating Context Menu Data in PHP\nDESCRIPTION: Demonstrates how to create context menu data for grid rows in a PHP processor by adding a menu array to each data item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.grid.grid.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nforeach( $items as $item ) {\n    $data[] = array(\n        'id'    => $obj->get( 'id' ),\n        'name'  => $obj->get( 'name' ),\n        'menu'  => array(\n            array(\n                'text'      => $modx->lexicon( 'my_lexicon' ),\n                'handler'   => 'this.myHandler'\n            )\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating xPDO XML Schema for Doodles Model\nDESCRIPTION: This snippet defines the XML schema for the Doodles model, specifying class mappings, database table structures, and field attributes, facilitating the use of xPDO for database interactions in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"doodles\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" version=\"1.0\">\n    <object class=\"Doodle\" table=\"doodles\" extends=\"xPDOSimpleObject\">\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\"/>\n        <field key=\"description\" dbtype=\"text\" phptype=\"string\" null=\"false\" default=\"\"/>\n        <field key=\"createdon\" dbtype=\"datetime\" phptype=\"datetime\" null=\"true\"/>\n        <field key=\"createdby\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n        <field key=\"editedon\" dbtype=\"datetime\" phptype=\"datetime\" null=\"true\"/>\n        <field key=\"editedby\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n        <aggregate alias=\"CreatedBy\" class=\"modUser\" local=\"createdby\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\"/>\n        <aggregate alias=\"EditedBy\" class=\"modUser\" local=\"editedby\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\"/>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Template Variable Resource Query\nDESCRIPTION: Shows how to query template variable resources using criteria arrays and class aliases.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$criteria = array();\n$criteria['modTemplateVarResource.tmplvarid'] = 9;\n$criteria['modTemplateVarResource.value:IN'] = array('Red','Green','Blue');\n$criteria['Resource.template'] = 2;\n$criteria = $modx->newQuery('modTemplateVarResource', $criteria);\n$tvrs = $modx->getCollectionGraph('modTemplateVarResource','{\"Resource\":{}}', $criteria);\n```\n\n----------------------------------------\n\nTITLE: Creating MODX Transport Vehicle\nDESCRIPTION: Configuration for creating a transport vehicle in MODX that includes category settings and related objects like snippets and chunks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/* create category vehicle */\n$attr = array(\n    xPDOTransport::UNIQUE_KEY => 'category',\n    xPDOTransport::PRESERVE_KEYS => false,\n    xPDOTransport::UPDATE_OBJECT => true,\n    xPDOTransport::RELATED_OBJECTS => true,\n    xPDOTransport::RELATED_OBJECT_ATTRIBUTES => array (\n        'Snippets' => array(\n            xPDOTransport::PRESERVE_KEYS => false,\n            xPDOTransport::UPDATE_OBJECT => true,\n            xPDOTransport::UNIQUE_KEY => 'name',\n        ),\n        'Chunks' => array (\n            xPDOTransport::PRESERVE_KEYS => false,\n            xPDOTransport::UPDATE_OBJECT => true,\n            xPDOTransport::UNIQUE_KEY => 'name',\n        ),\n    )\n);\n$vehicle = $builder->createVehicle($category,$attr);\n```\n\n----------------------------------------\n\nTITLE: Using getOption for MODX Snippet Properties\nDESCRIPTION: Demonstrates how to use $modx->getOption() to retrieve a snippet property with a default value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/properties-and-property-sets.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modx->getOption('propertyName', $scriptProperties, 'default');\n```\n\n----------------------------------------\n\nTITLE: Cloning modExtra Repository with Git (PHP)\nDESCRIPTION: Command to clone the modExtra repository using Git. This is used to download the modExtra template for creating MODX components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/component-structure.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngit clone https://github.com/bezumkin/modExtra.git\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Custom Validator Usage\nDESCRIPTION: This snippet shows how to use a custom validator in the `&validate` property of FormIt. The custom validator 'isBigEnough' is applied to the 'cost' field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &validate=`cost:isBigEnough`]]\n```\n\n----------------------------------------\n\nTITLE: Example of Profile Snippet Usage in MODX\nDESCRIPTION: Demonstrates how to use the Profile snippet and display the current user's email and username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.profile.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\n\n<p>Username: [[+username]]</p>\n<p>Email: [[+email]]</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Remove Processor for MODX Doodle Component in PHP\nDESCRIPTION: Implements a PHP processor class that extends modObjectRemoveProcessor to handle deleting Doodle records from the database. This class automatically handles validation and object removal.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DoodleRemoveProcessor extends modObjectRemoveProcessor {\n    public $classKey = 'Doodle';\n    public $languageTopics = array('doodles:default');\n    public $objectType = 'doodles.doodle';\n}\nreturn 'DoodleRemoveProcessor';\n```\n\n----------------------------------------\n\nTITLE: Loading and Using a MODX Service\nDESCRIPTION: Example of loading a custom Twitter service and calling its methods. This demonstrates how to initialize a service with getService() and then access it through the $modx object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('twitter','myTwitter','/path/to/twitter/model/',array(  \n  'api_key' => 3212423,\n));  \n$modx->twitter->tweet('Success!');  \n```\n\n----------------------------------------\n\nTITLE: Extending MODx.grid.Grid with MODExt in Javascript\nDESCRIPTION: This code snippet demonstrates how to extend the MODx.grid.Grid class using Ext.extend in JavaScript to create a custom grid within MODX. It defines a new class MyComponent.grid.MyGrid, inherits from MODx.grid.Grid, and registers it as an xtype 'mycomponent-grid-mygrid' for use in MODX Revolution CMPs. This allows developers to add custom functionality to the standard MODX grid.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"MyComponent.grid.MyGrid = function( config ) {\n    /* Конструктор родительского класса */\n    MyComponent.grid.MyGrid.superclass.constructor.call( this, config );\n};\nExt.extend( MyComponent.grid.MyGrid, MODx.grid.Grid, {\n    /* Члены класса будут здесь */\n} );\n/* Зарегистрировать \\\"mycomponent-grid-mygrid\\\" как тип xtype */\nExt.reg( \\\"mycomponent-grid-mygrid\\\", MyComponent.grid.MyGrid );\"\n```\n\n----------------------------------------\n\nTITLE: Saving xPDOObject with Related Objects in PHP\nDESCRIPTION: Demonstrates how to save a 'Wand' object along with its related 'Wizard' owner and 'WandPart' objects using xPDO's save() method and relationship methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/save.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$owner = $xpdo->newObject('Wizard');\n$owner->set('name','Harry Potter');\n$parts = array();\n$parts[1] = $xpdo->newObject('WandPart');\n$parts[1]->set('name','Phoenix Feather');\n$parts[2] = $xpdo->newObject('WandPart');\n$parts[2]->set('name','Holly Branch');\n$wand = $xpdo->newObject('Wand');\n$wand->addOne($owner);\n$wand->addMany($parts);\nif ($wand->save() == false) {\n   echo 'Oh no, the wand failed to save!';\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of setPlaceholder in MODX PHP\nDESCRIPTION: A practical example showing how to set a placeholder named 'name' with the value 'Barry'. After execution, the placeholder [[+name]] will be available in MODX templates or page content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.setplaceholder.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->setPlaceholder('name','Barry');\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Resource Attributes\nDESCRIPTION: Example of setting additional resource attributes not present in the modx_site_content table.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-4-processors.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->set('show_in_tree',false);\n$this->set('hide_children_in_tree',true);\n```\n\n----------------------------------------\n\nTITLE: Special Formatting for Parent Items with parentRowTpl in Wayfinder\nDESCRIPTION: Further extends customization by using the &parentRowTpl parameter to apply special formatting to parent items (container resources) that have children. This allows different styling for items that expand to show subitems.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`55` &rowTpl=`rowTpl` &outerTpl=`outerTpl` &parentRowTpl=`parentRow`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<!-- ParentRow -->\n<li>\n<a href=\"[[+wf.link]]\">[[+wf.linktext]]</a> - [[+wf.description]]\n[[+wf.wrapper]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Profile with getOne() in MODX Revolution\nDESCRIPTION: Example of using getOne() to retrieve a modUserProfile object related to a modUser object. It demonstrates how to access a field from the related object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/getone.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $modx->getObject('modUser',1);\n$profile = $user->getOne('Profile');\necho $profile->get('email');\n// prints \"a@bc.com\"\n```\n\n----------------------------------------\n\nTITLE: Implementing RenderHook for Dynamic Form Fields in FormIt (PHP)\nDESCRIPTION: Example of a renderHook that builds session fields dynamically. It merges session data with existing values and generates form fields using a chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Get formit config & possible set values\n$formit =& $hook->formit;\n$values = $hook->getValues();\n\n// Fetch sessions data\n$values = array_merge($_SESSION['preset_fields_from_session'], $values);\n$fields = array();\nforeach ($values as $value) {\n    // $value = array('label' => '', 'name' => '')\n    $fields[] = $modx->getChunk('fieldChunk', $value);\n}\n$modx->toPlaceholder('extraFields', implode(PHP_EOL, $fields));\n```\n\n----------------------------------------\n\nTITLE: Redirecting to an Internal Resource in MODX\nDESCRIPTION: Example of redirecting to an internal MODX resource by generating a URL with makeUrl() and then redirecting to it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendredirect.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$url = $modx->makeUrl(54);\n$modx->sendRedirect($url);\n```\n\n----------------------------------------\n\nTITLE: Creating XML Schema for User Extension\nDESCRIPTION: Defines an XML schema to extend the modUser class with additional user data fields using xPDO model definition\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-users.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"extendeduser\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" tablePrefix=\"ext_\">\n       <object class=\"extUser\" extends=\"modUser\">\n               <composite alias=\"Data\" local=\"id\" class=\"Userdata\" foreign=\"userdata_id\" cardinality=\"one\" owner=\"local\" />\n       </object>\n       <object class=\"Userdata\" table=\"data\" extends=\"xPDOSimpleObject\">\n               <field key=\"userdata_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" attributes=\"unsigned\"/>\n               <field key=\"facebook_url\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"true\" />\n               <index alias=\"userdata_id\" name=\"userdata_id\" primary=\"false\" unique=\"true\" type=\"BTREE\">\n                   <column key=\"userdata_id\" length=\"\" collation=\"A\" null=\"false\" />\n               </index>\n               <aggregate alias=\"extUser\" local=\"userdata_id\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n       </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Manipulating User Extended Fields in MODX\nDESCRIPTION: This code demonstrates how to get and set values in a user's extended fields array. It shows retrieving a custom field named 'color', and then updating that field with a new value and saving the profile.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/users.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/* get the extended field named \"color\": */\n$fields = $profile->get('extended');\n$color = $fields['color'];\n/* set the color field to red */\n$fields = $profile->get('extended');\n$fields['color'] = 'red';\n$profile->set('extended',$fields);\n$profile->save();\n```\n\n----------------------------------------\n\nTITLE: Using modX::toPlaceholder to Set a Placeholder in PHP\nDESCRIPTION: An example of using the modX::toPlaceholder method to set a placeholder named 'name' with the value 'John' and prefix it with 'my.'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.toplaceholder.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->toPlaceholder('name','John','my');\n```\n\n----------------------------------------\n\nTITLE: Deleting All Objects of a Type with xPDO in PHP\nDESCRIPTION: This PHP snippet illustrates how to delete all objects of a certain type from a database table using the removeCollection() method of xPDO. The criteria parameter is set as an empty array to match all items for deletion.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/removing-objects.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->removeCollection('objectName', array());\n```\n\n----------------------------------------\n\nTITLE: Defining the Search Function (JavaScript)\nDESCRIPTION: This JavaScript snippet extends a grid class to include a search function. The function retrieves the search query from the textfield, adds it as a parameter to the grid's store, resets the pagination, and refreshes the grid.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nExt.extend(Doodles.grid.Doodles, MODx.grid.Grid, {\n    search: function (tf, nv, ov) {\n        var s = this.getStore();\n        s.baseParams.query = tf.getValue();\n        this.getBottomToolbar().changePage(1);\n        this.refresh();\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: XML Schema Definition with Custom Primary Key\nDESCRIPTION: XML schema example showing how to define an object with a custom primary key column name rather than using the default \"id\".\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobject.md#2025-04-17_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n <object class=\"MyObject\" table=\"my_object\" extends=\"xPDOObject\">\n  <field key=\"object_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n  <!-- ... stuff here ... -->\n  <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n    <column key=\"object_id\" collation=\"A\" null=\"false\" />\n  </index>\n </object>\n```\n\n----------------------------------------\n\nTITLE: Initializing Doodles Service in MODX Snippet\nDESCRIPTION: This snippet initializes the `Doodles` service class in MODX and sets up default properties for later use. It retrieves the doodles core path from system settings and then instantiates the `Doodles` class using `$modx->getService()`. Default values for template, sort field, and sort direction are set up using `$modx->getOption()`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n/* setup default properties */\n$tpl = $modx->getOption('tpl',$scriptProperties,'rowTpl');\n$sort = $modx->getOption('sort',$scriptProperties,'name');\n$dir = $modx->getOption('dir',$scriptProperties,'ASC');\n$output = '';\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Objects by Non-Primary Key Columns in PHP\nDESCRIPTION: Example demonstrating how to retrieve an object based on criteria other than the primary key, such as searching for boxes with a specific color.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobject.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$box = $xpdo->getObject('Box', array('color'=>'blue'));\n```\n\n----------------------------------------\n\nTITLE: Data Store (PHP)\nDESCRIPTION: This PHP script acts as the data store for the Ext JS grid. It retrieves data from a MODX database based on parameters passed from the grid (limit, start, sort, dir). The script constructs a MODX query to fetch resources, formats the results as a JSON object, and outputs it. The script also initializes the MODX environment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/7.-ext-js-tutoral-advanced-grid.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n// -- начало маленького хака -------------------\n// Это было бы не нужно, если бы данный код был\n// внутри сниппета или менеджера MODX! Только для демонстрационных целей!\ndefined('MODX_API_MODE') or define('MODX_API_MODE', true);\nrequire_once 'index.php';\n$modx= new modX();\n$modx->initialize('mgr');\n// -- конец маленького хака ---------------------\n\n// Получить параметры, отправленные из управляющих элементов сетки\n// Параметры ограничения и начала настраиваются,\n// но сортировка и направление несколько менее (?)\n$limit = (int) $modx->getOption('limit',$_POST,10);\n$start = (int) $modx->getOption('start',$_POST,0);\n$sort = $modx->getOption('sort',$_POST,'id');\n$dir = $modx->getOption('dir',$_POST,'ASC');\n\n$criteria = $modx->newQuery('modResource');\n$total_pages = $modx->getCount('modResource',$criteria);\n$criteria->limit($limit, $start);\n$criteria->sortby($sort,$dir);\n$pages = $modx->getCollection('modResource',$criteria);\n\n// Инициализируем наш массив\n$data = array(\n    'results'=>array(),\n    'total' => $total_pages,\n);\nforeach ($pages as $p) {\n    $data['results'][] = $p->toArray();\n}\n// Используем лог для отладки Ajax\n$modx->log(1,print_r($_POST,true));\nprint json_encode($data);\n\n/*КОНЕЦ ФАЙЛА*/\n\"\n```\n\n----------------------------------------\n\nTITLE: Initializing xPDO Instance in PHP\nDESCRIPTION: This code snippet demonstrates how to create a new xPDO instance using the constructor. It shows the function signature with all available parameters, including the DSN, username, password, options array, and driver options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo= new xPDO($dsn, $username= '', $password= '', $options= array(), $driverOptions= null)\n```\n\n----------------------------------------\n\nTITLE: Defining Composite Relationship in XML Schema\nDESCRIPTION: Example showing how to define a composite relationship between a Box and its Crayons in xPDO schema. Shows a one-to-many relationship where deleting the parent object cascades to children.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/relationships.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"myBox\" table=\"boxes\" extends=\"xPDOSimpleObject\">\n    <composite alias=\"Crayons\" class=\"myCrayon\" local=\"id\" foreign=\"box\" cardinality=\"many\" owner=\"local\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration Retrieval with Fallback using xPDO.getOption in PHP\nDESCRIPTION: Example demonstrating how to check for a setting in a custom array first, then fall back to the xPDO configuration, with a default value of false if not found in either location.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getoption.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$mySetting = $xpdo->getOption('my_setting',$myConfig,false);\n```\n\n----------------------------------------\n\nTITLE: Using xPDO::getDebug() Method in PHP\nDESCRIPTION: This method returns a boolean value indicating whether debug mode is enabled for the xPDO connection. It takes no parameters and returns true if debug mode is on, false otherwise.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getdebug.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean getDebug ()\n```\n\n----------------------------------------\n\nTITLE: Switching Template with @FIELD in getImageList (PHP)\nDESCRIPTION: This code snippet demonstrates how to dynamically switch the template used by getImageList based on the value of a field from a MIGX TV. The `&tpl` parameter is set to `@FIELD:tpl`, which tells getImageList to use the value of the 'tpl' field for each item as the template name. This allows for different templates to be used for different items within the same getImageList call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.frontend-usage.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n  [[getImageList?\n    &tvname=`myMIGXtv`\n    &tpl=`@FIELD:tpl`\n  ]]\n```\n\n----------------------------------------\n\nTITLE: Updated Loop with Row Class\nDESCRIPTION: Modified loop that adds the rowCls property to the resource array before processing the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nforeach ($resources as $resource) {\n   $resourceArray = $resource->toArray();\n   $resourceArray['rowCls'] = $rowCls;\n   $output .= $modx->getChunk($tpl,$resourceArray);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX TV with JSON in MODX\nDESCRIPTION: This JSON configuration defines the structure and behavior of the MIGX TV, including form fields, columns, and rendering options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/sortable-resourcelist.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formtabs\": [{\n    \"MIGX_id\": 1,\n    \"caption\": \"main\",\n    \"print_before_tabs\": \"0\",\n    \"fields\": [{\n        \"MIGX_id\": 1,\n        \"field\": \"active\",\n        \"caption\": \"Active\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"listbox\",\n        \"configs\": \"\",\n        \"sourceFrom\": \"config\",\n        \"sources\": \"[]\",\n        \"inputOptionValues\": \"yes==1||no==0\",\n        \"default\": \"0\"\n      },\n      {\n        \"MIGX_id\": 2,\n        \"field\": \"comment\",\n        \"caption\": \"Comment\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"textarea\",\n        \"configs\": \"\",\n        \"sourceFrom\": \"config\",\n        \"sources\": \"[]\",\n        \"inputOptionValues\": \"\",\n        \"default\": \"\"\n      },\n      {\n        \"MIGX_id\": 3,\n        \"field\": \"pagetitle\",\n        \"caption\": \"\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"hidden\",\n        \"configs\": \"\",\n        \"sourceFrom\": \"config\",\n        \"sources\": \"[]\",\n        \"inputOptionValues\": \"\",\n        \"default\": \"\"\n      },\n      {\n        \"MIGX_id\": 4,\n        \"field\": \"id\",\n        \"caption\": \"\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"hidden\",\n        \"configs\": \"\",\n        \"sourceFrom\": \"config\",\n        \"sources\": \"[]\",\n        \"inputOptionValues\": \"\",\n        \"default\": \"\"\n      }\n    ]\n  }],\n  \"contextmenus\": \"\",\n  \"actionbuttons\": \"\",\n  \"columnbuttons\": \"\",\n  \"filters\": \"[]\",\n  \"extended\": {\n    \"migx_add\": \"\",\n    \"formcaption\": \"\",\n    \"update_win_title\": \"\",\n    \"win_id\": \"migx_input_options\",\n    \"maxRecords\": \"\",\n    \"multiple_formtabs\": \"\",\n    \"extrahandlers\": \"this.handleColumnSwitch\",\n    \"packageName\": \"\",\n    \"classname\": \"\",\n    \"task\": \"\",\n    \"getlistsort\": \"\",\n    \"getlistsortdir\": \"\",\n    \"use_custom_prefix\": \"0\",\n    \"prefix\": \"\",\n    \"grid\": \"\",\n    \"gridload_mode\": 1,\n    \"check_resid\": 1,\n    \"check_resid_TV\": \"\",\n    \"join_alias\": \"\",\n    \"getlistwhere\": \"\",\n    \"joins\": \"\",\n    \"cmpmaincaption\": \"\",\n    \"cmptabcaption\": \"\",\n    \"cmptabdescription\": \"\",\n    \"cmptabcontroller\": \"\",\n    \"winbuttons\": \"\",\n    \"onsubmitsuccess\": \"\",\n    \"submitparams\": \"\"\n  },\n  \"columns\": [{\n      \"MIGX_id\": 1,\n      \"header\": \"Pagetitle\",\n      \"dataIndex\": \"pagetitle\",\n      \"width\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1,\n      \"renderer\": \"\",\n      \"clickaction\": \"\",\n      \"selectorconfig\": \"\",\n      \"renderoptions\": \"[]\"\n    },\n    {\n      \"MIGX_id\": 2,\n      \"header\": \"Active\",\n      \"dataIndex\": \"active\",\n      \"width\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1,\n      \"renderer\": \"this.renderSwitchStatusOptions\",\n      \"clickaction\": \"switchOption\",\n      \"selectorconfig\": \"\",\n      \"renderoptions\": [{\n          \"MIGX_id\": 1,\n          \"name\": \"published\",\n          \"value\": 1,\n          \"clickaction\": \"\",\n          \"handler\": \"\",\n          \"image\": \"assets\\/components\\/migx\\/style\\/images\\/tick.png\"\n        },\n        {\n          \"MIGX_id\": 2,\n          \"name\": \"unpublished\",\n          \"value\": \"0\",\n          \"clickaction\": \"\",\n          \"handler\": \"\",\n          \"image\": \"assets\\/components\\/migx\\/style\\/images\\/cross.png\"\n        }\n      ]\n    },\n    {\n      \"MIGX_id\": 3,\n      \"header\": \"Comment\",\n      \"dataIndex\": \"comment\",\n      \"width\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1,\n      \"renderer\": \"\",\n      \"clickaction\": \"\",\n      \"selectorconfig\": \"\",\n      \"renderoptions\": \"[]\"\n    },\n    {\n      \"MIGX_id\": 4,\n      \"header\": \"\",\n      \"dataIndex\": \"x\",\n      \"width\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": \"0\",\n      \"renderer\": \"this.renderChunk\",\n      \"clickaction\": \"\",\n      \"selectorconfig\": \"\",\n      \"renderoptions\": \"[]\"\n    },\n    {\n      \"MIGX_id\": 5,\n      \"header\": \"ID\",\n      \"dataIndex\": \"id\",\n      \"width\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1,\n      \"renderer\": \"\",\n      \"clickaction\": \"\",\n      \"selectorconfig\": \"\",\n      \"renderoptions\": \"[]\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring ExtJS Widget for Subscription Table\nDESCRIPTION: This snippet declares a JavaScript object representing an ExtJS grid for displaying newsletters. It defines a variable in the Sendex object that holds a function to create the grid. It inherits from the MODx.grid.Grid object, allowing for customization of its methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Задаем переменную в объекте Sendex, которая содержит функцию\nSendex.grid.Newsletters = function(config) {\n    // Вызов конструктора виджета, с переданными параметрами\n    Sendex.grid.Newsletters.superclass.constructor.call(this,config);\n};\n// Наш виджет расширяет объект MODx.grid.Grid\nExt.extend(Sendex.grid.Newsletters,MODx.grid.Grid, {/* Здесь можно добавить или переписать методы расширяемого объекта*/});\n```\n\n----------------------------------------\n\nTITLE: Creating System Settings Programmatically\nDESCRIPTION: Example of creating a new system setting through code including cache clearing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$MySetting = $modx->newObject('modSystemSetting');\n$MySetting->set('key', 'mykey');\n$MySetting->set('value', 'my_value');\n$MySetting->set('xtype', 'textfield');\n$MySetting->set('namespace', 'my_namespace');\n$MySetting->set('area', 'MyArea');\n$MySetting->save();\n// Clear the cache:\n$cacheRefreshOptions =  array( 'system_settings' => array() );\n$modx->cacheManager->refresh($cacheRefreshOptions);\n```\n\n----------------------------------------\n\nTITLE: Displaying Doodles with Chunks in MODX PHP\nDESCRIPTION: This PHP snippet iterates over 'Doodle' objects retrieved from a MODX database and utilizes file-based chunks to display their data. It requires MODX services and objects like 'modChunk' to function, and depends on correctly fetching 'Doodle' records configured via MODX settings and paths. The code processes each doodle, formats its data into array using `toArray`, and appends the processed chunk to the output. Input includes chunk name and doodle array, while output is a formatted string of HTML list items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nforeach ($doodles as $doodle) {\n    $doodleArray = $doodle->toArray();\n    $output .= $dood->getChunk($tpl,$doodleArray);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Template with Multiple Dropzones\nDESCRIPTION: This snippet illustrates how to create a more complex MODX template that includes multiple Dropzones, allowing for separate areas for main content and a sidebar. The use of the new Template Variable 'Fred Dropzone' facilitates this multi-zone architecture, enhancing layout flexibility in Fred.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/templates/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>[[*pagetitle]]</title>\n    </head>\n    <body>\n        <section id=\"wrapper\">\n            <div\n                id=\"main\"\n                data-fred-dropzone=\"content\"\n                data-fred-min-height=\"500px\"\n            >\n                [[*content]]\n            </div>\n            <aside\n                id=\"sidebar\"\n                data-fred-dropzone=\"sidebar\"\n                data-fred-min-height=\"250px\"\n            >\n                [[*sidebar]]\n            </aside>\n        </section>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Objects with xPDOObject::loadCollection in PHP\nDESCRIPTION: Static method for loading a collection of object instances from database rows. Takes an xPDO instance, class name, optional criteria for filtering, and an optional cache flag. Returns an array of loaded objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/static-object-loaders/loadcollection.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstatic array loadCollection(\n    xPDO &$xpdo,\n    string $className,\n    [mixed $criteria = null],\n    [boolean|integer $cacheFlag = true]\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregate Relationship in PHP\nDESCRIPTION: PHP code example showing how to fetch a Box object related to a Crayon using the aggregate relationship defined in the schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/relationships.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$crayon = $xpdo->getObject('myCrayon',1);\n$box = $crayon->getOne('Box');\necho $box->get('name');\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Store Records\nDESCRIPTION: Creates and saves sample store records to the database using xPDO's newObject and fromArray methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$store = $modx->newObject('sfStore');\n$store->fromArray(array(\n    'name' => 'Store 1',\n    'address' => '12 Grimmauld Place',\n    'city' => 'London',\n    'country' => 'England',\n    'zip' => '12345',\n    'phone' => '555-2134-543',\n));\n$store->save();\n$store = $modx->newObject('sfStore');\n$store->fromArray(array(\n    'name' => 'Store 2',\n    'address' => '4 Privet Drive',\n    'city' => 'London',\n    'country' => 'England',\n    'zip' => '53491',\n    'phone' => '555-2011-978',\n));\n$store->save();\n```\n\n----------------------------------------\n\nTITLE: Basic pdoResources Usage in MODX\nDESCRIPTION: Demonstrates basic usage of pdoResources snippet with TV inclusion and logging features. Shows how to fetch resources with specific TVs and enable debug logging.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &parents=`0`\n    &includeTVs=`my_tv1,my_tv2`\n    &tvPrefix=`tv.`\n    &processTVs=`1`\n    &includeContent=`1`\n    &showLog=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in MODX with setDebug()\nDESCRIPTION: Demonstrates how to enable debug mode in MODX using the setDebug() method. The method accepts a boolean or integer parameter to control debug state and PHP error reporting level.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.setdebug.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->setDebug(true);\n```\n\n----------------------------------------\n\nTITLE: Sending Sequenced Messages to Registry\nDESCRIPTION: Demonstrates sending multiple messages in sequence to the '/beer/' topic, ensuring they are read in the same order as sent.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->registry->food->send(\"/beer/\", array(\"beer1\", \"beer2\", \"beer3\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing Ext JS Grid Interface\nDESCRIPTION: HTML and JavaScript code that sets up an advanced Ext JS grid with sorting, pagination, and dynamic data loading capabilities. Includes grid configuration, column definitions, and store setup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/7.-ext-js-tutoral-advanced-grid.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <title>Ext JS Paging Grid</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n\nExt.onReady(function(){\n\n    // create the Data Store\n    var store = new Ext.data.JsonStore({\n        root: 'results',\n        totalProperty: 'total',\n        idProperty: 'id',\n        remoteSort: true,\n\n        // Define the fields you wish to display\n        fields: [\n            'pagetitle',\n            'alias',\n            {name: 'createdby', type: 'int'}\n        ],\n\n        // Use HttpProxy for local stores, ScriptTagProxy for remote stores\n        proxy: new Ext.data.HttpProxy({\n            url: 'store.php'\n        })\n    });\n    store.setDefaultSort('id', 'ASC');\n\n\n    var grid = new Ext.grid.GridPanel({\n        width:700,\n        height:500,\n        title:'MODExt - Browse Pages',\n        store: store,\n        trackMouseOver:true,\n        disableSelection:true,\n        loadMask: true,\n\n        // grid columns\n        columns:[{\n            header: \"Page Title\",\n            dataIndex: 'pagetitle',\n            width: 420,\n            sortable: true\n        },{\n            header: \"Alias\",\n            dataIndex: 'alias',\n            width: 100,\n            sortable: true\n        },{\n            header: \"Author\",\n            dataIndex: 'createdby',\n            width: 80,\n            align: 'right',\n            sortable: true\n        }],\n\n        // paging bar on the bottom\n        bbar: new Ext.PagingToolbar({\n            pageSize: 25,\n            store: store,\n            displayInfo: true,\n            displayMsg: 'Displaying Records {0} - {1} of {2}',\n            emptyMsg: \"No Records to display\"\n        })\n    });\n\n    // render it\n    grid.render('topic-grid');\n\n    // trigger the data store load\n    store.load({params:{start:0, limit:25}});\n});\n    </script>\n\n    <body>\n        <h1>Advanced Grid</h1>\n        <div id=\"topic-grid\"></div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Comparing System Settings Retrieval Methods\nDESCRIPTION: Shows different ways to retrieve system settings using getOption vs getObject.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho $modx->getOption('site_name');\n// prints the same thing as this:\n$setting = $modx->getObject('modSystemSetting', 'site_name');\nif ($setting) {\n    echo $setting->get('value');\n}\n```\n\n----------------------------------------\n\nTITLE: Cached Snippet Call Example\nDESCRIPTION: Example of how to call the writeCache snippet in a cached manner within MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/example.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[writeCache]]\n```\n\n----------------------------------------\n\nTITLE: Creating a New File with Content Using modFileHandler in PHP\nDESCRIPTION: This example shows how to use modFileHandler to create a new file with specified content. It creates a modFile object for a non-existent file path and then uses the create() method to write content to it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modfilehandler.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('fileHandler','modFileHandler');\n$file = $modx->fileHandler->make('/www/test/test.txt');\nif (!$file->create('Hello!')) {\n   return 'File not written.';\n}\nreturn 'File written.';\n```\n\n----------------------------------------\n\nTITLE: Class Definition with Public and Private Elements in PHP\nDESCRIPTION: Example of a MODX class with proper naming conventions for class name (using 'mod' prefix), public and private variables (private prefixed with underscore), and public and private methods (private prefixed with underscore).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/coding-standards.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass modFactor {\n    public $publicVar;\n    private $_privateVar;\n    private function _privateFunc() { }\n    public function publicFunc() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Related Object with addOne in xPDO PHP\nDESCRIPTION: This snippet demonstrates how to associate a new Owner object with an existing Car object using the addOne method. It showcases saving a related object alongside the parent object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/related-objects.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$car = $xpdo->getObject('Car',123);\n$owner = $xpdo->getObject('Owner',array('name' => 'Mark'));\n$car->addOne($owner);\n$car->save();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Snippet as Output Modifier in MODX\nDESCRIPTION: Example of using a custom snippet named 'makeExciting' as an output modifier to append exclamation marks to a page title.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[[*pagetitle:makeExciting=`4`]]\n```\n\n----------------------------------------\n\nTITLE: Defining the modX::sendUnauthorizedPage Method Syntax in PHP\nDESCRIPTION: Shows the method signature for the sendUnauthorizedPage function which takes an optional array of options and returns void. This method redirects users to the unauthorized page defined in the MODX system settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendunauthorizedpage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid sendUnauthorizedPage ([array $options = null])\n```\n\n----------------------------------------\n\nTITLE: Filtered Search with Highlighting in PHP\nDESCRIPTION: Example of SimpleSearch that limits results to specific resources (IDs 1, 3, 4 or their children) and highlights search terms with a 'strong' HTML tag for better visibility.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch? &ids=`1,3,4` &highlightTag=`strong`]]\n```\n\n----------------------------------------\n\nTITLE: Creating MIGX-TV for Images - JSON Setup\nDESCRIPTION: This code snippet defines the configuration for a MIGX-TV, specifically for managing images associated with child resources. It specifies the structure for the fields used in the form, including titles and image inputs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/manage-child-resources-in-a-grid-tv-with-help-of-migxdb.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n{\"caption\":\"Image\", \"fields\": [\n    {\"field\":\"title\",\"caption\":\"Title\",\"description\":\"Title for the image.\"},\n    {\"field\":\"image\",\"caption\":\"Image\",\"inputTVtype\":\"image\"}\n]}\n]\n```\n\n----------------------------------------\n\nTITLE: Doodles Snippet Implementation\nDESCRIPTION: MODX snippet for querying and displaying Doodles data with sorting functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n/* setup default properties */\n$tpl = $modx->getOption('tpl',$scriptProperties,'rowTpl');\n$sort = $modx->getOption('sort',$scriptProperties,'name');\n$dir = $modx->getOption('dir',$scriptProperties,'ASC');\n$output = '';\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Ending User Session with modUser::endSession in PHP\nDESCRIPTION: This snippet demonstrates how to use the modUser::endSession method to end a user's session completely in MODX Revolution. The method takes no parameters and returns void.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.endsession.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user->endSession();\n```\n\n----------------------------------------\n\nTITLE: Accessing ClientConfig Settings with PHP in MODX\nDESCRIPTION: This code snippet shows how to access ClientConfig settings programmatically in PHP. The getOption method of the MODX object is used with the key as a parameter to retrieve the setting value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/clientconfig/index.md#2025-04-17_snippet_1\n\nLANGUAGE: modx\nCODE:\n```\n$modx->getOption('key')\n```\n\n----------------------------------------\n\nTITLE: Doodles Base Class Implementation\nDESCRIPTION: Base class for the Doodles component that handles configuration and package registration with xPDO.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Doodles {\n    public $modx;\n    public $config = array();\n    public function __construct(modX &$modx,array $config = array()) {\n        $this->modx =& $modx;\n        $basePath = $this->modx->getOption('doodles.core_path',$config,$this->modx->getOption('core_path').'components/doodles/');\n        $assetsUrl = $this->modx->getOption('doodles.assets_url',$config,$this->modx->getOption('assets_url').'components/doodles/');\n        $this->config = array_merge(array(\n            'basePath' => $basePath,\n            'corePath' => $basePath,\n            'modelPath' => $basePath.'model/',\n            'processorsPath' => $basePath.'processors/',\n            'templatesPath' => $basePath.'templates/',\n            'chunksPath' => $basePath.'elements/chunks/',\n            'jsUrl' => $assetsUrl.'js/',\n            'cssUrl' => $assetsUrl.'css/',\n            'assetsUrl' => $assetsUrl,\n            'connectorUrl' => $assetsUrl.'connector.php',\n        ),$config);\n        $this->modx->addPackage('doodles',$this->config['modelPath']);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Hidden NoSpam Field in HTML\nDESCRIPTION: Implementation of a hidden form field that should remain blank to pass spam validation. The field name 'workemail' is used as an example to trick spambots.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/using-a-blank-nospam-field.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"hidden\" name=\"workemail\" value=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Extended Fields in MODX\nDESCRIPTION: Example of creating a complete user profile with group assignments, extended fields, and email notification options. This snippet demonstrates how to structure complex data for the user creation processor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/using-runprocessor.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$groups = array();\n$groups['Group1']['usergroup'] = '7'; // ID of group\n$groups['Group1']['role'] = '1'; // ID of role\n$groups['Group2']['usergroup'] = '8';\n$groups['Group2']['role'] = '1';\n$fields = array();\n$fields['active'] = true;\n$fields['passwordgenmethod'] = 'g';\n$fields['passwordnotifymethod'] = 'e';\n$fields['email'] = $email;\n$fields['username'] = $username;\n$fields['fullname'] = $fullname;\n$fields['extended']['container']['name'] = $value;\n$fields['groups'] = $groups;\n$response = $modx->runProcessor('security/user/create', $fields);\n```\n\n----------------------------------------\n\nTITLE: Updated Snippet for Reused DB Connection - PHP\nDESCRIPTION: This code snippet demonstrates how to modify a previously written snippet to utilize a reusable database connection via the ForeignConnect class instead of creating a new connection each time, which enhances performance. It requires the ForeignConnect class and the database configuration file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cmpgenerator/cmpgenerator.foreign-databases.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire $modx->getOption('core_path').'/config/foreign_config.inc.php';\n\n$output = '';// this is what the snippet will return\n\n$package_path = $modx->getOption('core_path').'components/foreigndb/model/';\nrequire_once $package_path.'foreignconnect.class.php';\n\n$foreignDB = ForeignConnect::getInstance($database_dsn, $database_user, $database_password); // returns an xPDO instance\n```\n\n----------------------------------------\n\nTITLE: Basic getOption Method Syntax in PHP\nDESCRIPTION: The core method signature for getOption(), used to retrieve option values with support for default values and empty value handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/configuration-accessors/getoption.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed getOption (string $key [, array|null $options [, mixed $default [, boolean $skipEmpty]]] )\n```\n\n----------------------------------------\n\nTITLE: Creating Package Builder and Registering Namespace in PHP\nDESCRIPTION: Loads the modPackageBuilder class, creates a new instance, and initializes a package with name, version, and release number. Registers a namespace for the package to organize components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$builder = new modPackageBuilder($modx);\n$builder->createPackage('quip','0.1','alpha7');\n$builder->registerNamespace('quip',false,true,'{core_path}components/quip/');\n```\n\n----------------------------------------\n\nTITLE: Initial Wayfinder Snippet Call in MODX Revolution\nDESCRIPTION: This PHP snippet demonstrates a minimal Wayfinder call in MODX Revolution. It initializes Wayfinder with a starting document ID and outputs an unordered list representing the document tree with links. Required parameters include 'startId' to define the tree's root.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Records with xPDO.query in PHP\nDESCRIPTION: Demonstrates how to use xPDO.query to fetch multiple rows from the database using a while loop to iterate over the results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.query.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$results = $xpdo->query(\"SELECT * FROM some_table\");\nwhile ($r = $results->fetch(PDO::FETCH_ASSOC)) {\n        print_r($r); exit;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Field Values with xPDOObject::set() Method\nDESCRIPTION: Method signature for setting field values in xPDOObject. Takes a field key, optional value, and optional value type parameters. Returns a boolean indicating success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/set.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean set(\n   string $k,\n   [mixed $v = null],\n   [string|callable $vType = '']\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring xPDO Constructor with Database and Cache Options\nDESCRIPTION: Demonstrates how to configure an xPDO constructor with database connection parameters, cache settings, and PDO attributes. Includes options for table prefixes, field hydration, and validation settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/getting-started/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction __construct($options = array()) {\n    $options = array(\n        xPDO::OPT_CACHE_PATH => '/path/to/my/cache/dir',\n        xPDO::OPT_TABLE_PREFIX => 'myprefix_',\n        xPDO::OPT_HYDRATE_FIELDS => true,\n        xPDO::OPT_HYDRATE_RELATED_OBJECTS => true,\n        xPDO::OPT_HYDRATE_ADHOC_FIELDS => true,\n        xPDO::OPT_VALIDATE_ON_SAVE => true,\n    );\n    parent :: __construct(\n        'mysql:host=localhost;dbname=myxpdodb;charset=utf8',\n        'username',\n        'password',\n        $options,\n        array (\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_SILENT,\n            PDO::ATTR_PERSISTENT => false,\n            PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true\n        )\n    );\n    $this->setPackage('mypackage', 'path/to/my/model/');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Values with xPDO.getOption in PHP\nDESCRIPTION: Method signature for getOption with all parameters and their descriptions. This method retrieves a configuration option value by specified key from xPDO configuration or a provided options array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getoption.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed getOption (string $key [, array|null $options [, mixed $default [, boolean $skipEmpty]]] )\n```\n\n----------------------------------------\n\nTITLE: Syntax for xPDOQuery.limit Method in PHP\nDESCRIPTION: Shows the syntax for the xPDOQuery.limit method. It takes two parameters: the limit (required) and the offset (optional, defaults to 0).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.limit.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nxPDOQuery limit (integer $limit, [integer $offset = 0])\n```\n\n----------------------------------------\n\nTITLE: XML Schema Definition for xPDOSimpleObject in MODX\nDESCRIPTION: XML schema example showing how an object that extends xPDOSimpleObject is defined, where the primary key column is automatically named \"id\".\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobject.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"modPropertySet\" table=\"property_set\" extends=\"xPDOSimpleObject\">\n```\n\n----------------------------------------\n\nTITLE: Calling MODX Element with Property Set and Override\nDESCRIPTION: Demonstrates calling a MODX snippet with a Property Set and overriding a specific property value in the call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/properties-and-property-sets.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[TestSnippet@DebugMode? &user=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Defining package properties and timing functions in PHP for MODX\nDESCRIPTION: Initializes timing functions to track build duration and defines package properties including name, version, and release information for a MODX Transport Package.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$tstart = explode(' ', microtime());\n$tstart = $tstart[1] + $tstart[0];\nset_time_limit(0);\n\n/* define package names */\ndefine('PKG_NAME','Doodles');\ndefine('PKG_NAME_LOWER','doodles');\ndefine('PKG_VERSION','1.0');\ndefine('PKG_RELEASE','beta4');\n```\n\n----------------------------------------\n\nTITLE: Implementing Extended User Class in PHP\nDESCRIPTION: PHP class implementation for extending modUser with custom class_key setting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @package extendeduser\n * @subpackage user.mysql\n */\nclass extUser extends modUser {\n    function __construct(xPDO & $xpdo) {\n        parent::__construct($xpdo);\n        $this->set('class_key','extUser');\n    }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Accessing MODX Event Name in Plugin\nDESCRIPTION: Shows how to access the current event name that triggered the plugin execution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$eventName = $modx->event->name;\n```\n\n----------------------------------------\n\nTITLE: Complex AND/OR Combinations\nDESCRIPTION: Demonstrates combining AND and OR conditions in a single complex query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   array(\n      'width:=' => 15,\n      'OR:width:=' => 10\n   ),\n   array(\n      'AND:height:>=' => 10,\n      'AND:height:<=' => 15\n   )\n));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Processing Chunks in MODX PHP\nDESCRIPTION: This PHP snippet defines two methods in a class to manage file-based chunks for MODX components. `getChunk` is a public method that retrieves a chunk from the filesystem or MODX and processes it with input properties. `_getTplChunk` is a private method used to fetch chunks stored in the specified directory or the MODX database if not found locally. These methods have a dependency on MODX, specifically on modChunk objects, and expect file paths and chunk names to be correctly configured. Inputs include the chunk name and optional properties, returning processed chunk content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function getChunk($name,$properties = array()) {\n    $chunk = null;\n    if (!isset($this->chunks[$name])) {\n        $chunk = $this->modx->getObject('modChunk',array('name' => $name));\n        if (empty($chunk) || !is_object($chunk)) {\n            $chunk = $this->_getTplChunk($name);\n            if ($chunk == false) return false;\n        }\n        $this->chunks[$name] = $chunk->getContent();\n    } else {\n        $o = $this->chunks[$name];\n        $chunk = $this->modx->newObject('modChunk');\n        $chunk->setContent($o);\n    }\n    $chunk->setCacheable(false);\n    return $chunk->process($properties);\n}\n\nprivate function _getTplChunk($name,$postfix = '.chunk.tpl') {\n    $chunk = false;\n    $f = $this->config['chunksPath'].strtolower($name).$postfix;\n    if (file_exists($f)) {\n        $o = file_get_contents($f);\n        $chunk = $this->modx->newObject('modChunk');\n        $chunk->set('name',$name);\n        $chunk->setContent($o);\n    }\n    return $chunk;\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying the xPDOQuery for Searching\nDESCRIPTION: This PHP snippet modifies the xPDOQuery in the `prepareQueryBeforeCount` method of the getList processor to add search functionality. It retrieves the 'query' parameter from the request and adds a WHERE clause to the query to filter results based on the 'name' or 'description' fields.  The LIKE operator is used for partial matches, allowing for flexible searching.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    public function prepareQueryBeforeCount(xPDOQuery $c) {\n        $query = $this->getProperty('query');\n        if (!empty($query)) {\n            $c->where(array(\n                'name:LIKE' => '%'.$query.'%',\n                'OR:description:LIKE' => '%'.$query.'%',\n            ));\n        }\n        return $c;\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Class with Basic Path Example\nDESCRIPTION: Simple example showing how to load a class named 'myBox' from a specific model path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.loadclass.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->loadClass('myBox','/my/path/to/model/');\n```\n\n----------------------------------------\n\nTITLE: User Information Access Using Output Modifiers in MODX\nDESCRIPTION: Comprehensive example of accessing user information from the modx_user_attributes table using output modifiers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nUser Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]<br />\nUser name: [[!+modx.user.id:userinfo=`username`]]<br />\nFull Name: [[!+modx.user.id:userinfo=`fullname`]]<br />\nRole:  [[!+modx.user.id:userinfo=`role`]]<br />\nE-mail: [[!+modx.user.id:userinfo=`email`]]<br />\nPhone: [[!+modx.user.id:userinfo=`phone`]]<br />\nMobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]<br />\nFax: [[!+modx.user.id:userinfo=`fax`]]<br />\nDate of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]<br />\n```\n\n----------------------------------------\n\nTITLE: Using toArray() to Get Object Values as Array in PHP\nDESCRIPTION: Example demonstrating how to use toArray() to convert object properties to an array. It sets some object properties and then calls toArray() to get them in array format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/toarray.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$object->set('name','John Lo');\n$object->set('email','jlo@gmail.com');\n$a = $object->toArray();\nprint_r($a);\n// prints \"Array ( [name] => John Lo [email] => jlo@gmail.com )\"\n```\n\n----------------------------------------\n\nTITLE: Basic xPDO Connection Example\nDESCRIPTION: Simple example showing how to call the connect method on an xPDO instance to establish a database connection using default options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.connect.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->connect();\n```\n\n----------------------------------------\n\nTITLE: Basic MODX Cache Refresh\nDESCRIPTION: Simple example of refreshing all MODX core cache partitions using modCacheManager\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->cacheManager->refresh();\n```\n\n----------------------------------------\n\nTITLE: Basic Wayfinder Menu Output Structure\nDESCRIPTION: Example showing the nested HTML structure created by Wayfinder for a multi-level navigation menu using basic templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"topnav\">\n    <li class=\"first\"><a href=\"media-hub/news\" title=\"HG in the News\">HG in the News</a></li>\n    <li><a href=\"media-hub/events\" title=\"HG Events\">HG Events</a></li>\n    <li><a href=\"media-hub/press\" title=\"Press Releases\">Press Releases</a></li>\n    <li><a href=\"media-hub/blog/\">HG Blog</a> - HG Blog\n    <ul class=\"topnav\">\n        <li><a href=\"media-hub/blog/test-section/\">Blog Test Section</a> -\n        <ul class=\"topnav\">\n            <li class=\"first\">\n            <a href=\"media-hub/blog/test-section/test-post\" title=\"Test Post\">Test Post</a></li>\n            <li><a href=\"media-hub/blog/test-section/other-post\" title=\"Other Post\">Other Post</a></li>\n            <li class=\"last\"><a href=\"media-hub/blog/test-section/third-post\" title=\"Third Post\">Third Post</a></li>\n        </ul>\n        </li>\n        <li class=\"last\"><a href=\"media-hub/blog/archives\" title=\"Blog Archives\">Archives</a></li>\n    </ul>\n    </li>\n    <li><a href=\"media-hub/fast-facts\" title=\"HG Fast Facts\">HG Fast Facts</a></li>\n    <li><a href=\"media-hub/publications\" title=\"HG Publications\">HG Publications</a></li>\n    <li class=\"last\"><a href=\"media-hub/media-contact\" title=\"Media Contact\">Media Contact</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context Settings Programmatically in MODX Snippets\nDESCRIPTION: This snippet shows how to programmatically retrieve a context setting in a MODX snippet using the getOption method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$setting = $modx->getOption('my_context_setting');\n```\n\n----------------------------------------\n\nTITLE: Defining a Model with xPDOMaxLengthValidationRule in XML\nDESCRIPTION: This XML snippet defines a model package in MODX with a validation rule ensuring the 'name' field's length does not exceed 10 characters. The model is configured with specific database and table settings. The 'value' attribute in the rule sets the maximum allowed length, while a custom error message is displayed if the validation fails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdomaxlengthvalidationrule.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"test\" baseClass=\"xPDOObject\" platform=\"mysql\"\n       defaultEngine=\"MyISAM\" tablePrefix=\"test_\">\n    <object class=\"myTest\" table=\"test\" extends=\"xPDOSimpleObject\">\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\"\n               phptype=\"string\" default=\"\" null=\"false\" />\n\n        <validation>\n            <rule field=\"name\"\n                  name=\"myMaxLenRule\"\n                  type=\"xPDOValidationRule\"\n                  rule=\"xPDOMaxLengthValidationRule\"\n                  value=\"10\"\n                  message=\"The name must be less than 10 characters.\"\n             />\n        </validation>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Creating RSS Feed Item Template (PHP)\nDESCRIPTION: This snippet defines the structure of individual feed items, utilizing fields like pagetitle, link, description, publication date, GUID, and creator. Modifications can be made to include or exclude specific details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/getresources.examples/building-a-rss-feed.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<item>\n  <title>[[+pagetitle:htmlent]]</title>\n  <link>[[~[[+id]]? &scheme=`full`]]</link>\n  <description>\n    [[+introtext:default=`[[+content:ellipsis=`600`]]`:cdata]]\n  </description>\n  <pubDate>[[+publishedon:strtotime:date=`%a, %d %b %Y %H:%M:%S %z`]]</pubDate>\n  <guid isPermaLink=\"false\">[[~[[+id]]? &scheme=`full`]]</guid>\n  <dc:creator>\n      [[+createdby:userinfo=`fullname`]]\n  </dc:creator>\n</item>\n```\n\n----------------------------------------\n\nTITLE: Rendering Gallery and Albums in MODX\nDESCRIPTION: This snippet is used to display gallery albums and photos in a MODX resource. It utilizes the Gallery and GalleryAlbums snippets to create placeholders that render a list of albums and allows for detailed photo views when selected. Dependencies include the 'Gallery' addon for MODX. Key placeholders \\`&toPlaceholder\\` and terms such as \\`[[+galleries]]\\`, \\`[[+galitem.image]]\\`, \\`[[+gallery]]\\` are utilized to manage and output gallery content. Input is expected to be managed by the snippets themselves and the output is an HTML rendering of gallery content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.example1.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n[[!Gallery? &toPlaceholder=`gallery`]]\n[[!GalleryItem]]\n[[!GalleryAlbums? &toPlaceholder=`galleries`]]\n\n<div style=\"float: right\">\n    <h2>Galleries</h2>\n    <ul>\n        [[+galleries]]\n    </ul>\n</div>\n\n<h2>Item</h2>\n\n[[!+galitem.image:notempty=`\n<div class=\"image\">\n    <a href=\"[[+galitem.image]]\"><img class=\"[[+galitem.imgCls]]\" src=\"[[+galitem.image]]\" alt=\"[[+galitem.name]]\" /></a>\n    <br />Albums: [[+galitem.albums]]\n    <br />Tags: [[+galitem.tags]]\n</div>\n`]]\n\n<hr />\n\n[[!+gallery:notempty=`\n    <h1><a href=\"[[~[[*id]]]]\">[[+gallery.name]]</a></h1>\n    <h2>[[+gallery.description]]</h2>\n    \n    [[+gallery]]\n`]]\n```\n\n----------------------------------------\n\nTITLE: Modifying Media Source URL in PHP for MODX\nDESCRIPTION: This snippet modifies the output URL of a media source in MODX by replacing the './' in the input URL and preparing the output URL using the specified media source. The snippet requires an instance of MODX and a valid media source to function correctly. It takes an input URL and returns a modified URL ready for use.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/add-resource-specific-mediasource-and-multifile-uploader-to-the-gallery.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$output = str_replace('./','',$input);\nif ($mediasource = $modx->getObject('sources.modMediaSource',$options)){\n    $output = $mediasource->prepareOutputUrl($output);\n}\nreturn '/' . $output;\n```\n\n----------------------------------------\n\nTITLE: Multiple Event Handling in MODX Plugin\nDESCRIPTION: Demonstrates how to handle multiple events in a single plugin using a switch statement to execute different code based on the event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnWebPageInit':\n        /* do something */\n        break;\n    case 'OnWebPagePrerender':\n        /* do something else */\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Packages in MODX with JSON\nDESCRIPTION: A sample JSON configuration for the extension_packages system setting that demonstrates how to register multiple extension packages. This example shows how to specify the path to the model for two extensions: 'extendeduser' and 'articles'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/extension_packages.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"extendeduser\":{\"path\":\"[[++core_path]]components/extendeduser/model/\"}},{\"articles\":{\"path\":\"[[++core_path]]components/articles/model/\"}}]\n```\n\n----------------------------------------\n\nTITLE: Loading File Chunk with pdoResources\nDESCRIPTION: Example of loading a chunk from a file using pdoResources snippet with custom elements path\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoTools.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &elementsPath=`/core/elements/`\n    &tpl=`@FILE chunks/file.tpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining Object Relationships in MODX Schema\nDESCRIPTION: Example of defining composite and aggregate relationships between objects in MODX schema XML\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/work-logic.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<composite alias=\"Subscribers\" class=\"sxSubscriber\" local=\"id\" foreign=\"newsletter_id\" cardinality=\"many\" owner=\"local\" />\n<aggregate alias=\"Template\" class=\"modTemplate\" local=\"template\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n<aggregate alias=\"Snippet\" class=\"modSnippet\" local=\"snippet\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Blog Post Template in MODX Revolution\nDESCRIPTION: This snippet demonstrates the structure of a blog post template in MODX Revolution. It includes header/footer chunks, post metadata, content display, tags, and integration with Quip for comments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[$pageHeader]]\n<main id=\"post-[[*id]]\">\n  <a href=\"#content\" class=\"visually-hidden\">skip to main content</a>\n  <h2>\n\t<a href=\"[[~[[*id]]]]\">[[*pagetitle]]</a>\n  </h2>\n  <p class=\"post-info\">\n    Posted on <time datetime=\"[[*publishedon:strtotime:date=`%Y-%m-%d`]]\">[[*publishedon:strtotime:date=`%b %d, %Y`]]</time> | \n    <a href=\"[[~[[*id]]]]#comments\">\n      Comments ([[!QuipCount? &thread=`blog-post-[[*id]]`]])\n\t</a>\n  </p>\n  <article id=\"content\">\n\t<p>[[*introtext]]</p>\n    <hr />\n    [[*content]]\n  </article>\n  <aside id=\"tags\">\n    [[*tags:notempty=`\n\t  <span class=\"tags\">\n\t    Tags: [[!tolinks? &items=`[[*tags]]` &tagKey=`tag` &target=`1`]]\n\t  </span>\n    `]]\n  </aside>\n  <hr />\n  <section id=\"comments\">\n    [[!Quip?\n      &thread=`blog-post-[[*id]]`\n      &replyResourceId=`123`\n      &closeAfter=`30`\n    ]]\n    <hr />\n    [[!QuipReply?\n      &thread=`blog-post-[[*id]]`\n      &notifyEmails=`my@email.com`\n      &moderate=`1`\n      &moderatorGroup=`Moderators`\n      &closeAfter=`30`\n    ]]\n  </section>\n</main>\n[[$pageFooter]]\n```\n\n----------------------------------------\n\nTITLE: Combining JS and CSS Files with MinifyX in PHP\nDESCRIPTION: This code snippet demonstrates how to use the MinifyX snippet to combine JavaScript and CSS files efficiently. It includes a configuration for JS and CSS sources, enabling minification and setting cache options. The placeholders for the minified file outputs are also included.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/minifyx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<html>\n<head>\n[[MinifyX?\n  &jsSources=`\n    /assets/myframework.js,\n    /assets/lightbox.js,\n    /assets/script.js\n` \n  &cssSources=`\n    /assets/style1.css,\n    /assets/style2.css\n`\n]]\n\n[[+MinifyX.javascript]]\n[[+MinifyX.css]]\n</head>\n<body></body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using MODX Cache Manager Example in PHP\nDESCRIPTION: Example showing how to get the Cache Manager instance and set a test cache file with a simple string value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getcachemanager.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$cacheManager = $modx->getCacheManager();\n$cacheManager->set('testcachefile','test123');\n```\n\n----------------------------------------\n\nTITLE: Implementing XML Sitemap Resource Content in MODX\nDESCRIPTION: The content for a 'sitemap.xml' resource in MODX that generates a Google XML Sitemap using the getResources snippet. It includes parameters for fetching resources from all parents, processing template variables, and limiting results. This code should be placed in a resource with content type set to XML.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/getresources.examples/google-xml-sitemap.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<urlset xmlns=\"http://www.google.com/schemas/sitemap/0.84\">\n[[getResources?\n  &parents=`0`\n  &tpl=`google-sitemap-tpl`\n  &limit=`500`\n  &sortdir=`DESC`\n  &includeTVs=`1`\n  &processTVs=`1`\n  &depth=`10`\n  &sortby=`publishedon`\n  ]]\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Logging Debug Information in MODX Snippets\nDESCRIPTION: Shows how to log debugging information in MODX snippets that will only be written to the error log when the appropriate log level is set in system settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-snippet.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_DEBUG, '[mySnippet] was called with the following properties: '.print_r($scriptProperties,true));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Resources with getResources in MODX Revolution\nDESCRIPTION: A MODX snippet call that uses getResources to pull related documentation sections from parent resource 124 in the Revolution context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/field-visible.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`124` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Parsing XPDO XML Schema in PHP\nDESCRIPTION: Demonstrates how to use the parseSchema method to generate map and class files from an XML schema. This method takes the schema file path, output directory, and an optional compile flag as parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdogenerator/xpdogenerator.parseschema.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean parseSchema (string $schemaFile, [string $outputDir = ''], [boolean $compile = false])\n```\n\n----------------------------------------\n\nTITLE: Formatting DSN String for MySQL Database in PHP\nDESCRIPTION: This code snippet shows the format for creating a DSN (Data Source Name) string for a MySQL database connection. It includes placeholders for the hostname, database name, and character set.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nmysql:host=MYHOSTNAME;dbname=MYDBNAME;charset=MYCHARSET\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Fields from Box Table\nDESCRIPTION: Example showing how to query a collection of Boxes while selecting only specific fields (ID and name).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->select($xpdo->getSelectColumns('Box','Box','',array('id','name')));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Loading Lexicons in MODX Revolution\nDESCRIPTION: Demonstrates the syntax for loading lexicons in MODX Revolution. The format includes optional language code, namespace, and topic parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/directory-structure.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon->load( 'lang:namespace:topic' );\n```\n\n----------------------------------------\n\nTITLE: Adding the getControllerPath Method\nDESCRIPTION: This snippet adds the `getControllerPath` method to the custom resource class.  This method tells MODX where to find the controllers for managing the custom resource in the manager interface. It first checks for a system setting to allow for custom locations, and defaults to a standard component path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic static function getControllerPath(xPDO &$modx) {\n   return $modx->getOption('copyrightedresource.core_path',null,$modx->getOption('core_path').'components/copyrightedresource/').'controllers/';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Editable Fred Elements\nDESCRIPTION: Examples of basic editable elements in Fred including a paragraph and an image with data-fred-name attribute.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Simple editable paragraph -->\n<p data-fred-name=\"description\">Default value</p>\n\n<!-- Editable image -->\n<img src=\"http://via.placeholder.com/450x150\" data-fred-name=\"header-image\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Header to MODX Panel\nDESCRIPTION: Demonstrates adding a header section to the MODX panel with translation support using lexicon strings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    html: '<h2>'+_('doodles.management')+'</h2>'\n    ,border: false\n    ,cls: 'modx-page-header'\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Related Objects with Join Tables in PHP\nDESCRIPTION: Shows how to save related objects with join tables using xPDO, demonstrating that primary keys can be omitted when using addMany() or addOne() methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/save.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$Product = $modx->newObject('Product');\n$ProductImage = $modx->newObject('ProductImage');\n$ProductImage->set('image_id', 123);\n//$ProductImage->set('product_id', $lastInsertId); // You can skip this\n$related = array();\n$related[] = $ProductImage;\n$Product->addMany($related);\n$Product->save();\n```\n\n----------------------------------------\n\nTITLE: Initializing xPDO Database Connection in PHP\nDESCRIPTION: This snippet demonstrates how to create a basic xPDO database connection using a DSN string, username, and password.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/connections.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$dsn = 'mysql:host=localhost;dbname=test;port=3306;charset=utf8';\n$xpdo = new xPDO($dsn,'username','password');\n```\n\n----------------------------------------\n\nTITLE: Creating a Base Controller in PHP\nDESCRIPTION: This PHP code defines an abstract base controller `NamespaceManagerController` and a default controller `IndexManagerController` for a MODX Custom Manager Page (CMP). The abstract controller handles initialization and language topics, while the index controller sets the default controller to 'home'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n* Абстрактный контроллер менеджера MODX\n* В этом классе мы определяем всё, что мы хотим выполнять с помощью своих контроллеров\n*/\nabstract class NamespaceManagerController extends modExtraManagerController {\n   /**\n    * Инициализирует главный контроллер менеджера. Возможно, вы захотите загрузить определенные классы,\n    * ресурсы которых будут доступны для всех контроллеров или конфигурации.\n    * \n    * Все ваши остальные контроллеры в этом пространстве имен должны расширять данный контроллер.\n    * \n    * В данном случае мы не делаем ничего особенного полезного, но когда вы будете разрабатывать более сложные\n    * дополнения, это поможет упростить поддержку.\n    */\n   public function initialize() {\n       $this->addHtml('<script type=\"text/javascript\">\n       Ext.onReady(function() {\n           // Мы могли бы запустить здесь какой-нибудь код JavaScript, который выполняется во всех наших контроллерах\n           // например, что-нибудь, что загружает вашу конфигурацию\n       });\n       </script>');\n   }\n   /**\n    * Определяет темы лексиконов для загрузки в наш контроллер\n    * @return array\n    */\n   public function getLanguageTopics() {\n       return array('namespace:default');\n   }\n   /**\n    * Мы можем использовать данный метод для проверки разрешения пользователя на просмотр данного контроллера\n    * @return bool\n    */\n   public function checkPermissions() {\n       return true;\n   }\n}\n/**\n* Главный контроллер менеджера - это контроллер по умолчанию, который вызывается,\n* когда не был передан параметр &action. Мы используем его для определения контроллера по умолчанию, который будет поддерживать фактическую обработку.\n*\n* Важно назвать данный класс как \"IndexManagerController\" и удостовериться,\n* что он расширяет абстрактный класс, определенный выше\n*/\nclass IndexManagerController extends NamespaceManagerController {\n   /**\n    * Определяет название или путь к контроллеру по умолчанию для его загрузки.\n    * @return string\n    */\n   public static function getDefaultController() {\n       return 'home';\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Restricted File Listing with FileLister in MODX Revolution (PHP)\nDESCRIPTION: This snippet call lists files and subdirectories in '/docs/marketing', allowing file viewing and downloading only for users in 'Marketing' or 'CEO' groups.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!FileLister? &path=`/docs/marketing/` &allowDownloadGroups=`Marketing,CEO`]]\n```\n\n----------------------------------------\n\nTITLE: Email Template Chunk for FormIt in MODX\nDESCRIPTION: This chunk defines the email template used by FormIt to send the contact form submission. It includes placeholders for the sender's name, email, and message content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.simple-contact-page.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nThis is the Formit Email Chunk.\n\n<br />[[+name]] ([[+email]]) Wrote: <br />\n\n[[+text]]\n```\n\n----------------------------------------\n\nTITLE: Defining the xPDOCacheManager.set Method Syntax in PHP\nDESCRIPTION: The method signature for xPDOCacheManager.set which returns a boolean indicating success or failure. It takes a key string, a variable to cache, an optional lifetime in seconds, and an optional array of configuration options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.set.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean set (string $key, mixed &$var, [integer $lifetime = 0], [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MODX Template\nDESCRIPTION: A foundational HTML template for MODX that includes header, navigation, main content area, and footer. The template uses the [[*content]] tag to inject resource-specific content from the content field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\" itemscope itemtype=\"http://schema.org/Organization\">\n<head>\n   <meta charset=\"UTF-8\">\n   <base href=\"[[!++site_url]]\" />\n   <title>[[*pagetitle]]</title>\n   [[- Continue to insert your CSS, Scripts and other assets here. ]]\n</head>\n<body>\n    <!-- Header Start -->\n    <header>\n        <nav>\n            <ul>\n                <li class=\"active\"><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Blog</a></li>\n            </ul>\n        </nav>\n    </header>\n    <!-- Header End -->\n    <main>\n        [[*content]]\n    </main>\n    <!-- Footer Start -->\n    <footer>\n        <nav>\n            <ul>\n                <li><a href=\"#\">Privacy Policy</a></li>\n                <li><a href=\"#\">Terms &amp; Conditions</a></li>\n            </ul>\n        </nav>\n    </footer>\n    <!-- Footer End -->\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MODX Select Fields JSON Structure\nDESCRIPTION: Example of how to specify fields for selection in MODX queries using JSON format. Shows selection of multiple fields from modResource table.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/General_settings.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"modResource\":\"id,pagetitle,content\"}\n```\n\n----------------------------------------\n\nTITLE: HTTPS Sitemap Generation\nDESCRIPTION: Generate sitemap with forced HTTPS schema for URLs\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[pdoSitemap?\n    &resources=`-25`\n    &parents=`-15,10`\n    &context=`web,catalog`\n    &scheme=`https`\n]]\n```\n\n----------------------------------------\n\nTITLE: Sending Requests with Parameters in modRest\nDESCRIPTION: Example of sending a GET request with query parameters. Shows how to specify the URL, define parameters, and process the response into an array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$url = 'http://site.ru/rest/products';\n$params = array('limit' => 100);\n/* @var modRest $client */\n$client = $modx->getService('rest', 'rest.modRest');\n// $client->setOption('format','json'); // The format of the received data accepts json or xml (json by default) for conversion to an array\n$response = $client->get($url, $params);\n$data = $response->process(); // Will return an array\n```\n\n----------------------------------------\n\nTITLE: Adding Template Property to Snippet\nDESCRIPTION: Code that adds a 'tpl' property to the snippet, allowing users to specify which chunk to use as a template for each resource item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$tpl = $modx->getOption('tpl',$scriptProperties,'ResourceItem');\n```\n\n----------------------------------------\n\nTITLE: Clearing Cache in MODX Revolution\nDESCRIPTION: Demonstrates different methods of clearing cache in MODX Revolution using the cacheManager. Shows examples of clearing all cache, clearing specific file types in custom paths, and clearing cache with publishing checks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// clear all the usual stuff by default (all files with the extension .cache.php\n// in the cachePath + all object caches)\n$modx->cacheManager->clearCache();\n// clear only cache files with extension .php or .log in the web/ custom/\n// or logs/ paths; no objects are cleared\n$paths = array('web/', 'custom/', 'logs/');\n$options = array('objects' => null, 'extensions' => array('.php', '.log'));\n$modx->cacheManager->clearCache($paths, $options);\n// clear all cache files with extension .php in the cachePath\n// + all objects + execute the timed publishing checks\n$paths = array('');\n$options = array('objects' => '*', 'publishing' => true, 'extensions' => array('.php'));\n$modx->cacheManager->clearCache($paths, $options);\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Example in PHP\nDESCRIPTION: Example demonstrating how to check if a user is authenticated in the 'web' context and redirect to an unauthorized page if not authenticated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.isauthenticated.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (!$modx->user->isAuthenticated('web')) {\n   $modx->sendUnauthorizedPage();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Distinct Box Types with Specific Width using xPDOQuery in PHP\nDESCRIPTION: This example shows how to use xPDOQuery to retrieve distinct types of Boxes that have at least one Box with a width of 15. It demonstrates creating a query, setting conditions, adding a GROUP BY clause, and executing the query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.groupby.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   'width' => 15,\n));\n$query->groupby('type');\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Overriding getContent Method in MODX Resource Class\nDESCRIPTION: Implementation of a custom getContent method that appends a copyright notice with the current year to the resource content. The method extends the parent class functionality by first getting the original content then adding the copyright div.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-2-overriding-methods.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function getContent(array $options = array()) {\n   $content = parent::getContent($options);\n   $year = date('Y');\n   $content .= '<div class=\"copyright\">© '.$year.'. All Rights Reserved.</div>';\n   return $content;\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSON-format Graph Parameter with getObjectGraph in PHP\nDESCRIPTION: Demonstrates the same Box object retrieval example using a JSON-format $graph parameter instead of an array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobjectgraph.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$box = $xpdo->getObjectGraph('Box', '{\"BoxColors\":{\"Color\":{}}}', 134);\nforeach ($box->getMany('BoxColors') as $boxColor) {\n    echo $boxColor->getOne('Color')->get('name');\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Manager Login Details with OnManagerLogin in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the OnManagerLogin event to log user login details to the MODX error log. It captures the user ID and login attributes when a successful manager login occurs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onmanagerlogin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnManagerLogin':\n        $id = $user->get('id');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'User logged in with id '.$id.print_r($attributes));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Multiple Objects with xPDO in PHP\nDESCRIPTION: This PHP code demonstrates removing multiple objects from the database using xPDO's removeCollection() method, specifying a criteria for the deletion. It showcases handling sessions by using a time-based criteria for object selection. Composite objects are not removed when using this method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/removing-objects.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function gc($max) {\\n    $max = (integer) $this->modx->getOption('session_gc_maxlifetime',null,$max);\\n    $maxtime= time() - $max;\\n    $result = $this->modx->removeCollection('modSession', array(\"`access` < {$maxtime}\"));\\n    return $result;\\n}\n```\n\n----------------------------------------\n\nTITLE: Logging a Simple Error Message in PHP\nDESCRIPTION: Demonstrates how to log a simple error message using xPDO.log, which will write to the default log file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->log(xPDO::LOG_LEVEL_ERROR, '[Mobile Detect] An error occurred.');\n```\n\n----------------------------------------\n\nTITLE: Example: Removing User Session Context in MODX (PHP)\nDESCRIPTION: This example demonstrates how to remove the session for a user in the 'sports' context using the removeSessionContext method of the modUser object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.removesessioncontext.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->removeSessionContext('sports');\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL Table for MODX CMPGenerator\nDESCRIPTION: This SQL snippet creates a table named `modx_test` with columns `id`, `name`, and `description`. The `id` column is set as the primary key with auto-increment. This table will be used as the basis for generating a MODX component using CMPGenerator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cmpgenerator/cmpgenerator.5-minute-example.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n\"CREATE TABLE `modx_test` (\\n  `id` INT(11) NOT NULL AUTO_INCREMENT,\\n  `name` VARCHAR(64) NOT NULL,\\n  `description` VARCHAR(64) NOT NULL,\\n  PRIMARY KEY (`id`)\\n) ENGINE=INNODB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8\"\n```\n\n----------------------------------------\n\nTITLE: Multiple Permission Check in MODX PHP\nDESCRIPTION: Shows how to check multiple permissions ('edit_chunk' and 'edit_template') simultaneously using an array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.haspermission.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$pm = array('edit_chunk' => true, 'edit_template' => true);\nif (!$modx->hasPermission($pm)) {\n    die ('Access Denied!');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving foreign key definition using xPDOObject::getFKDefinition() in PHP\nDESCRIPTION: This example demonstrates how to get a foreign key definition for a user who edited a document. The method returns an array containing the class, key, local and foreign field names, cardinality, owner, and relationship type.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getfkdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getFKDefinition (string $alias)\n```\n\nLANGUAGE: php\nCODE:\n```\n$document = $xpdo->getObject('Document',1);\n$fkdef = $document->getFKDefinition('EditedBy');\nprint_r($fkdef);\n\n/* Outputs:\nArray (\n  [class] => User\n  [key] => editedby\n  [local] => editedby\n  [foreign] => id\n  [cardinality] => one\n  [owner] => foreign\n  [type] => aggregate\n) */\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in MODX Revolution - PHP\nDESCRIPTION: The setCookie snippet allows for the creation of cookies with configurable parameters such as name, value, expiration time, and security options. It can be cached or uncached when called using the [[seCookie]] tag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cookiejar/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!setCookie?\n    &name=`foo`\n    &value=`foobar`\n    &expires=`0`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!setCookie?\n    &name=`foo`\n    &value=`foobar`\n    &expires=`1`\n    &expiresType=`hours`\n    &secure=`1`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!setCookie?\n    &name=`foo`\n    &value=`foobar`\n    &expires=`3600`\n    &secure=`1`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!setCookie?\n    &name=`foo`\n    &value=`foobar`\n    &expires=`1`\n    &expiresType=`days`\n    &secure=`1`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!setCookie?\n    &name=`foo`\n    &expires=`-3600`\n]]\n```\n\n----------------------------------------\n\nTITLE: Initializing the Doodles Service in PHP\nDESCRIPTION: This code initializes the Doodles service by retrieving the core path from system settings with fallbacks. It ensures the component can be developed outside the MODX webroot while still functioning properly when installed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n```\n\n----------------------------------------\n\nTITLE: Prepare Snippet Implementation Example\nDESCRIPTION: Sample code showing how to modify resource data using prepareSnippet before processing\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoTools.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$row['pagetitle'] .= rand();\n\nreturn json_encode($row);\n```\n\n----------------------------------------\n\nTITLE: Resource Creation Using Standard Processor\nDESCRIPTION: Shows how to create a new resource using MODX's standard resource/create processor and retrieve the new resource ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$response = $modx->runProcessor('resource/create', $_POST);\nif ($response->isError()) {\n    return $modx->error->failure($response->getMessage());\n}\n\n$id = $response->response['object']['id'];\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Packages with addExtensionPackage Method\nDESCRIPTION: PHP method signature and example for programmatically adding extension packages to MODX. This convenience function allows developers to specify a package name, model path, and optional settings like table prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/extension_packages.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nboolean addExtensionPackage ([string $pkg = ''], [string $modelpath = ''], [array $options = array()])\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->addExtensionPackage('mypkg', '/path/to/core/components/mypkg/model/', array('tablePrefix'=>'mypre_'));\n```\n\n----------------------------------------\n\nTITLE: Loading Collection Graph with xPDOObject in PHP\nDESCRIPTION: This function loads a collection of object instances and related object instances specified in a class graph. It takes parameters for the xPDO instance, class name, graph structure, criteria for selection, and caching flag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/static-object-loaders/loadcollectiongraph.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction loadCollectionGraph(& $xpdo, $className, $graph, $criteria, $cacheFlag)\n```\n\n----------------------------------------\n\nTITLE: Loading xPDO Object Instance from Result Set\nDESCRIPTION: Static method that converts a database result set row into an xPDOObject instance. Takes parameters for the xPDO instance, class name to instantiate, criteria used for loading, and the actual row data from the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/static-object-loaders/loadinstance.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstatic xPDOObject _loadInstance(\n   xPDO &$xpdo,\n   string $className,\n   mixed $criteria,\n   array $row\n)\n```\n\n----------------------------------------\n\nTITLE: Obfuscating Email with PHP in MODX Revolution\nDESCRIPTION: This snippet shows how the plugin converts normal email addresses to their obfuscated versions using HTML character encoding. The purpose is to protect emails from being scraped while still being usable in email applications. It requires MODX Revolution with the OnWebPagePreRender event configured. Input is a standard email address, and output is its obfuscated version with HTML encodings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/obfuscateemail-revo/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ns&#x68;&#97;wn&#64;&#x73;&#x68;&#97;&#119;&#x6e;&#x77;&#105;&#x6c;&#107;&#x65;&#x72;&#115;&#111;&#110;.&#x63;&#111;&#x6d;\n```\n\nLANGUAGE: php\nCODE:\n```\n&#115;&#104;&#97;&#119;&#110;&#64;&#x73;&#x68;&#x61;&#x77;&#x6e;&#119;&#105;&#x6c;&#107;&#x65;r&#x73;&#111;&#110;.&#99;&#x6f;&#x6d;\n```\n\nLANGUAGE: php\nCODE:\n```\n&#x73;&#x68;&#97;&#x77;&#x6e;&#x40;&#x73;&#104;&#97;&#119;&#x6e;&#119;&#x69;&#x6c;&#107;&#101;&#114;&#x73;&#x6f;&#x6e;&#x2e;c&#x6f;&#x6d;\n```\n\n----------------------------------------\n\nTITLE: Retrieving xPDOObjects Collection in PHP\nDESCRIPTION: Syntax for using the xPDO.getCollection method to retrieve a collection of xPDOObjects based on specified criteria. It returns an array of objects or an empty array if none are found.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollection.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray getCollection (string $className, [xPDOCriteria|array|str|int $criteria = null], [bool|int $cacheFlag = true])\n```\n\n----------------------------------------\n\nTITLE: Using xPDO Service Layer Integration\nDESCRIPTION: Shows how to use xPDO's built-in service integration method getService() for loading and accessing service objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/getting-started/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ($xpdo->getService('myService', 'myServiceClass', '/path/to/model/root/', array('param1' => $param1, 'param2' => $param2)) {\n    $xpdo->myService->doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Doodles Service in PHP\nDESCRIPTION: This snippet initializes the Doodles service by getting the core path and instantiating the Doodles class. It uses MODX's getOption and getService methods to handle dynamic paths.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n```\n\n----------------------------------------\n\nTITLE: Example of a Clean, Well-Written MODX Chunk\nDESCRIPTION: This code snippet demonstrates the recommended approach for creating Chunks in MODX. It keeps the presentation layer simple and clean with minimal logic, making it easier to maintain and debug.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-chunk.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nDear [[+first_name]], it was nice to see you last [[+day_of_week]]\n```\n\n----------------------------------------\n\nTITLE: Defining Fields in MODX XML Schema\nDESCRIPTION: This XML snippet demonstrates how to define fields for a MODX object within a schema file. Each field definition includes attributes like `key` (field name), `dbtype` (database type), `precision` (field length), `phptype` (PHP type), `null` (nullable), and `default` (default value). This configuration is crucial for data storage and retrieval within the MODX environment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/work-logic/index.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"<field key=\\\"name\\\" dbtype=\\\"varchar\\\" precision=\\\"100\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n<field key=\\\"description\\\" dbtype=\\\"text\\\" phptype=\\\"text\\\" null=\\\"true\\\" default=\\\"\\\" />\\n<field key=\\\"active\\\" dbtype=\\\"tinyint\\\" precision=\\\"1\\\" phptype=\\\"boolean\\\" attributes=\\\"unsigned\\\" null=\\\"true\\\" default=\\\"1\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Request to Console Processor\nDESCRIPTION: Demonstrates how to send an AJAX request to a processor that outputs to the console. Includes success handler to fire the console's complete event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.console.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.Ajax.request({\n    url: URL_TO_MY_CONNECTOR\n    ,params: {\n        action: MY_ACTION\n        ,register: register\n        ,topic: topic\n    }\n    ,listeners: {\n        'success':{fn:function() {\n            console.fireEvent('complete');\n        },scope:this}\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Register Snippet for Extended Fields in MODX\nDESCRIPTION: Modifies the Register snippet call and form to include a custom extended field 'custom_field'. This allows capturing extended user data during registration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/extended-user-profiles.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[[!Register?\n    &submitVar=`registerbtn`\n    &activationResourceId=`8`\n    &activationEmailTpl=`lgnActivateEmailTpl`\n    &activationEmailSubject=`Thanks for Registering!`\n    &submittedResourceId=`7`\n    &usergroups=`Members`\n    &excludeExtended=`email:required:email,login-updprof-btn`\n]]\n\n<div class=\"register\">\n    <div class=\"registerMessage\">[[+error.message]]</div>\n\n    <form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n        <input type=\"hidden\" name=\"nospam:blank\" value=\"\" />\n\n        <label for=\"username\">[[%register.username? &namespace=`login` &topic=`register`]]\n            <span class=\"error\">[[+error.username]]</span>\n        </label>\n        <input type=\"text\" name=\"username:required:minLength=6\" id=\"username\" value=\"[[+username]]\" />\n\n        <label for=\"password\">[[%register.password]]\n            <span class=\"error\">[[+error.password]]</span>\n        </label>\n        <input type=\"password\" name=\"password:required:minLength=6\" id=\"password\" value=\"[[+password]]\" />\n\n        <label for=\"password_confirm\">[[%register.password_confirm]]\n            <span class=\"error\">[[+error.password_confirm]]</span>\n        </label>\n        <input type=\"password\" name=\"password_confirm:password_confirm=`password`\" id=\"password_confirm\" value=\"[[+password_confirm]]\" />\n\n        <label for=\"fullname\">[[%register.fullname]]\n            <span class=\"error\">[[+error.fullname]]</span>\n        </label>\n        <input type=\"text\" name=\"fullname:required\" id=\"fullname\" value=\"[[+fullname]]\" />\n\n        <label for=\"email\">[[%register.email]]\n            <span class=\"error\">[[+error.email]]</span>\n        </label>\n        <input type=\"text\" name=\"email:email\" id=\"email\" value=\"[[+email]]\" />\n\n        <label for=\"custom_field\">Custom Field\n            <span class=\"error\">[[+error.custom_field]]</span>\n        </label>\n        <input type=\"text\" name=\"custom_field\" id=\"custom_field\" value=\"[[+custom_field]]\" />\n\n        <br class=\"clear\" />\n\n        <div class=\"form-buttons\">\n            <input type=\"submit\" name=\"registerbtn\" value=\"Register\" />\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: MODX Section Template with getResourcesTag\nDESCRIPTION: Template for section pages that displays blog posts with pagination. Uses getResourcesTag snippet to filter posts by section and optional tag parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!getResourcesTag?\n  &element=`getResources`\n  &elementClass=`modSnippet`\n  &tpl=`blogPost`\n  &hideContainers=`1`\n  &pageVarKey=`page`\n  &parents=`[[*id]]`\n  &includeTVs=`1`\n  &includeContent=`1`\n]]\n\n[[!+page.nav:notempty=`\n<nav class=\"paging\" role=\"Blog Posts\">\n  <ul class=\"pageList\">\n    [[!+page.nav]]\n  </ul>\n</nav>\n`]]\n```\n\n----------------------------------------\n\nTITLE: Defining xPDOForeignKeyConstraint in XML Schema\nDESCRIPTION: XML schema definition for a model with foreign key constraint validation. Shows how to set up validation rules and relationships between objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdoforeignkeyconstraint.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"test\" baseClass=\"xPDOObject\" platform=\"mysql\"\n       defaultEngine=\"MyISAM\" tablePrefix=\"test_\">\n    <object class=\"myTest\" table=\"test\" extends=\"xPDOSimpleObject\">\n        <field key=\"category\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\"\n               phptype=\"integer\" default=\"0\" null=\"false\" index=\"index\" />\n\n        <validation>\n            <rule field=\"name\"\n                  name=\"preventBlank\"\n                  type=\"xPDOValidationRule\"\n                  rule=\"xPDOForeignKeyConstraint\"\n                  foreign=\"id\"\n                  local=\"category\"\n                  alias=\"Category\"\n                  class=\"modCategory\"\n                  message=\"The category specified does not exist.\"\n             />\n        </validation>\n\n        <aggregate alias=\"Category\" class=\"modCategory\"\n                   local=\"category\" foreign=\"id\"\n                   cardinality=\"one\" owner=\"foreign\" />\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lexicon Entry in PHP\nDESCRIPTION: Base syntax for the lexicon() method which retrieves a processed lexicon entry. The method accepts a key, optional parameters array, and optional language specification.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.lexicon.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring lexicon (string $key, [array $params = array()], [$language = ''])\n```\n\n----------------------------------------\n\nTITLE: Object Validation in modObjectCreateProcessor\nDESCRIPTION: PHP example showing how to implement pre-validation in a MODX processor using xPDOValidator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/* run object validation */\nif (!$this->object->validate()) {\n    /** @var modValidator $validator */\n    $validator = $this->object->getValidator();\n    if ($validator->hasMessages()) {\n        foreach ($validator->getMessages() as $message) {\n            $this->addFieldError($message['field'],$this->modx->lexicon($message['message']));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Uncached Snippets and Placeholders in PHP\nDESCRIPTION: Example of how to correctly use uncached snippets with uncached placeholders to ensure proper value processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\nHello [[!+username]],\n```\n\n----------------------------------------\n\nTITLE: Authentication with modRest\nDESCRIPTION: Example of how to authenticate with a service using username and password via CURLOPT_HTTPHEADER. The status code indicates if authorization was successful (200) or failed (403).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$url = 'http://site.ru/rest/mymethod';\n/* @var modRest $client */\n$client = $modx->getService('rest', 'rest.modRest');\n\n$client->setOption('username', 'login');\n$client->setOption('password', 'password');\n\n$response = $client->get($url);\nif (property_exists($response->responseInfo, 'scalar')) {\n    $code = $response->responseInfo->scalar;\n}\necho $code; // 200 - authorized, 403 - authorization failed\n```\n\n----------------------------------------\n\nTITLE: Creating Newsletter Subscribers Grid with ExtJS\nDESCRIPTION: This snippet defines an ExtJS grid for displaying newsletter subscribers, configuring fields, URL parameters, and pagination for managing subscribers' data. It establishes necessary relationships to retrieve and manipulate subscriber information effectively.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nSendex.grid.NewsletterSubscribers = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{ \n        id: 'sendex-grid-newsletter-subscribers'\n        ,url: Sendex.config.connector_url\n        ,baseParams: {\n            action: 'mgr/newsletter/subscriber/getlist'\n            ,newsletter_id: config.record.id\n        }\n        ,fields: ['id','username','fullname','email']\n        ,autoHeight: true\n        ,paging: true\n        ,remoteSort: true\n        ,columns: [\n            {header: _('sendex_subscriber_id'),dataIndex: 'id',width: 50}\n            ,{header: _('sendex_subscriber_username'),dataIndex: 'username',width: 100}\n            ,{header: _('sendex_subscriber_fullname'),dataIndex: 'fullname',width: 100}\n            ,{header: _('sendex_subscriber_email'),dataIndex: 'email',width: 100}\n        ]\n        ,tbar: []\n    });\n    Sendex.grid.NewsletterSubscribers.superclass.constructor.call(this,config);\n};\nExt.extend(Sendex.grid.NewsletterSubscribers,MODx.grid.Grid);\nExt.reg('sendex-grid-newsletter-subscribers',Sendex.grid.NewsletterSubscribers);\n\n```\n\n----------------------------------------\n\nTITLE: Defining XML Object (Table)\nDESCRIPTION: This XML snippet defines an object representing a database table (sfStore) in the schema. It specifies the class name, the actual database table name (minus the prefix), and the parent class it extends (xPDOSimpleObject).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n\"<object class=\\\"sfStore\\\" table=\\\"sfinder_stores\\\" extends=\\\"xPDOSimpleObject\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving MODX Component Paths in PHP\nDESCRIPTION: Shows how to retrieve core and assets paths for a MODX component using system settings and fallback options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/package-build.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$corePath = $this->modx->getOption('sendex_core_path', $config, $this->modx->getOption('core_path') . 'components/sendex/');\n$assetsUrl = $this->modx->getOption('sendex_assets_url', $config, $this->modx->getOption('assets_url') . 'components/sendex/');\n```\n\n----------------------------------------\n\nTITLE: Logging User Login Information in MODX\nDESCRIPTION: Plugin example that logs username and login attributes to the MODX error log when a user successfully logs in to the web context. It demonstrates handling the OnWebLogin event and accessing user data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onweblogin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnWebLogin':\n        $name = $user->get('username');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'User logged in '.$name.print_r($attributes));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Extended User Schema in XML\nDESCRIPTION: More detailed XML schema for extending modUser with multiple related tables including phone numbers and additional user data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"extendeduser\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" tablePrefix=\"ext_\">\n    <!-- inherit the modx user and extend it -->\n    <object class=\"extUser\" extends=\"modUser\">\n        <composite alias=\"Phones\" local=\"id\" foreign=\"user\" cardinality=\"many\" owner=\"local\" />\n        <composite alias=\"Table2\" local=\"id\" foreign=\"user\" cardinality=\"many\" owner=\"local\" />\n    </object>\n    <!-- track all user phone numbers -->\n    <object table=\"phone_numbers\" extends=\"xPDOSimpleObject\">\n        <field key=\"user\" dbtype=\"int\" phptype=\"integer\" null=\"false\" default=\"0\" index=\"index\" />\n        <field key=\"areacode\" dbtype=\"varchar\" precision=\"3\" phptype=\"string\" null=\"false\" default=\"\" />\n        <field key=\"number\" dbtype=\"varchar\" precision=\"7\" phptype=\"string\" null=\"false\" default=\"\" />\n        <aggregate alias=\"extUser\" local=\"user\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n    </object>\n    <!-- user extension -->\n    <object table=\"table2\" extends=\"xPDOSimpleObject\">\n        <field key=\"user\" dbtype=\"int\" phptype=\"integer\" null=\"false\" default=\"0\" index=\"index\" />\n        <field key=\"myspaceurl\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" />\n        <aggregate alias=\"extUser\" local=\"user\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Word Filter Plugin Example\nDESCRIPTION: Implements a word filter that replaces specified words with a filtered message before page display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$words = array(\"snippet\", \"template\"); // words to filter\n$output = &$modx->resource->_output; // get a reference to the output\n$output = str_replace($words,\"<b>[filtered]</b>\",$output);\n```\n\n----------------------------------------\n\nTITLE: Cache Replace Example in PHP\nDESCRIPTION: Example showing how to replace a cache value with a new string that expires in 2 hours (7200 seconds).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.replace.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = 'A new value for the cache.';\n$xpdo->cacheManager->replace('mystuff',$str,7200);\n```\n\n----------------------------------------\n\nTITLE: Register Hook in MODX PHP\nDESCRIPTION: Illustrates how to access user-specific fields like modUser and modUserProfile objects using the Hooks API in the Register snippet. These values are necessary for performing actions related to user account settings, such as retrieving user details or registered user groups.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// A reference to the modUser object\n$user = $hook->getValue('register.user');\n// A reference to the modUserProfile object\n$profile = $hook->getValue('register.profile');\n// An array of usergroup names that the User joined\n$usergroups = $hook->getValue('register.usergroups');\n```\n\n----------------------------------------\n\nTITLE: Logging Cache Clearing Operations with OnSiteRefresh Event in PHP\nDESCRIPTION: This plugin example demonstrates how to log cache clearing results when the OnSiteRefresh event is triggered in MODX. It captures the array of cleared partitions and writes them to the error log for debugging purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onsiterefresh.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnSiteRefresh':\n        $modx->log(modX::LOG_LEVEL_ERROR, 'The cache is cleared '.print_r($partitions));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Chunk Creation or Update in MODX Plugin (PHP)\nDESCRIPTION: This plugin writes to the 'Error log' whether a new chunk was created or an existing one was updated. It demonstrates how to use the $mode parameter to determine the action being performed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforechunkformsave.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeChunkFormSave':\n        if ($mode == modSystemEvent::MODE_UPD){\n            echo 'An existing chunk has been updated';\n        } elseif ($mode == modSystemEvent::MODE_NEW){\n            echo 'Chunk was created';\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: AdvSearch Default containerTpl Chunk HTML\nDESCRIPTION: This is the default HTML structure for the containerTpl Chunk used by the AdvSearch snippet. It provides the basic layout for displaying search results, pagination, and result information. The placeholders within the HTML allow for dynamic content insertion.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/containertpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<p class=\\\"advsea-results\\\">[[+resultInfo]] - Elapsed time: [[+etime]]</p>\\n\\n<div class=\\\"advsea-paging[[+pagingType]]\\\">[[+paging]]</div>\\n\\n<div class=\\\"advsea-results-list\\\">\\n    [[+results]]\\n</div>\\n\\n<div class=\\\"advsea-paging[[+pagingType]]\\\">[[+paging]]</div>\"\n```\n\n----------------------------------------\n\nTITLE: Checking Single User Group Membership in MODX Revolution (PHP)\nDESCRIPTION: This example checks if the user is a member of the 'Staff' user group using the isMember method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.ismember.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user->isMember('Staff');\n```\n\n----------------------------------------\n\nTITLE: MODX TV Filters Configuration\nDESCRIPTION: Example of TV filter configuration with AND/OR conditions for filtering MODX resources based on template variable values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoResources.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nfilter2==one,filter1==bar||filter1==foo\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Related Objects with xPDOObject::addMany() in PHP\nDESCRIPTION: Demonstrates how to use the addMany() method to add multiple golf clubs to a golf bag object and save them all at once. This example showcases the creation of related objects and their association with a parent object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/addmany.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$bag = $xpdo->newObject('GolfBag');\n$bag->set('name',\"Chris's Bag\");\n$bag->set('color','blue');\n$clubs = array();\nfor ($i=1;$i<10;$i++) {\n   $club = $xpdo->newObject('GolfClub');\n   $club->set('name',$i.' Iron');\n   $clubs[] = $club;\n}\n$bag->addMany($clubs);\n$bag->save(); // saves both the bag and all the clubs\n```\n\n----------------------------------------\n\nTITLE: Simple Cache Set and Get Operations\nDESCRIPTION: Basic example of setting and retrieving cached data with a 2-hour expiration time\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$str = 'My test cached data.';\n// Writes the data to the default cache partition with an expiry time of 2 hours.\n$modx->cacheManager->set('testdata', $str, 7200);\n// Gets the data from cache again. Returns null if cache is not available or expired.\n$str = $modx->cacheManager->get('testdata');\n```\n\n----------------------------------------\n\nTITLE: Prioritizing Countries with FormItCountryOptions in PHP\nDESCRIPTION: Shows how to use the 'prioritized' property to display certain countries at the top of the dropdown list. This example prioritizes 10 specific countries using their ISO codes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.formitcountryoptions.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormItCountryOptions?\n    &selected=`[[+fi.country]]`\n    &prioritized=`US,GB,DE,RU,JP,FR,NL,CA,AU,UA`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring MODExt Grid Component\nDESCRIPTION: Detailed configuration of a MODExt grid component including URL setup, field definitions, column models, and toolbar configuration. Shows how to implement paging, sorting, and autosave functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyComponent.grid.MyGrid = function( config ) {\n    config = config || {};\n\n    /* Grid configuration options */\n    Ext.applyIf( config, {\n        id : \"mycomponent-grid-mygrid\",\n        title : _( \"my_grid\" ),\n        url : MyComponent.config.connectors_url + \"list.php\",\n        baseParams : {\n            action : \"getlist\"\n        },\n        paging : true,\n        autosave : true,\n        remoteSort : true,\n        /* Store field list */\n        fields : [ {\n            name : \"id\",\n            type : \"int\"\n        }, {\n            name : \"name\",\n            type : \"string\"\n        }, {\n            name : \"menu\"\n        } ],\n        /* Grid ColumnModel */\n        columns : [ {\n            header : _( \"id\" ),\n            dataIndex : \"id\",\n            sortable : true\n        }, {\n            header : _( \"name\" ),\n            dataIndex : \"name\",\n            sortable : true\n        } ],\n        /* Top toolbar */\n        tbar : [ {\n            xtype : \"button\",\n            text : _( \"create\" ),\n            handler : {\n                xtype : \"mycomponent-window-create\",\n                blankValues : true\n            },\n            scope : this\n        } ]\n    } );\n\n    /* Class parent constructor */\n    MyComponent.grid.MyGrid.superclass.constructor.call( this, config );\n};\n\nExt.extend( MyComponent.grid.MyGrid, MODx.grid.Grid, {\n    /* Class members will go here */\n} );\n\n/* Register \"mycomponent-grid-mygrid\" as an xtype */\nExt.reg( \"mycomponent-grid-mygrid\", MyComponent.grid.MyGrid );\n```\n\n----------------------------------------\n\nTITLE: getResources snippet call with tpl parameter (PHP)\nDESCRIPTION: This snippet demonstrates a basic getResources call with the `&tpl` parameter specified. It retrieves resources from parent ID 5, limits the output to 5 resources, and formats each resource using the 'blogPost' chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources? &parents=`5` &limit=`5` &tpl=`blogPost`]]\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDocFormPrerender Plugin in PHP for MODX\nDESCRIPTION: This plugin demonstrates how to use the OnDocFormPrerender event to display a message when clicking on the pagetitle and add text to the page. It uses JavaScript to attach a click event and MODX's regClientStartupHTMLBlock method to inject custom HTML.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformprerender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormPrerender':\n        $modx->regClientStartupHTMLBlock('\n        <script type=\"text/javascript\">\n    \t\tExt.onReady(function() {\n                var pagetitle = Ext.select(\"#modx-resource-pagetitle\");\n                pagetitle.on(\"click\",function(node,e){\n                    Ext.MessageBox.alert(\"Attention\",\"You just clicked on pagetitle.\");\n                    \n                },pagetitle);\n    \t\t});\n    \t</script>');\n    \t$modx->event->output('<h2 style=\"padding: 50px 0 0 15px;\">Hello my friend!</h2>');\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Join Query with Profile Reference\nDESCRIPTION: Example of a complex query using joined tables and class aliases.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$query = $modx->newQuery('myTable');\n$query->where(array('Profile.fullname:LIKE' => '%Company%'));\n$records = $this->ParentCMS->getCollectionGraph('myTable', '{\"modUser\": {\"Profile\":{} } }',$query);\n```\n\n----------------------------------------\n\nTITLE: Loading User Attributes in MODX Revolution (PHP)\nDESCRIPTION: This method loads the principal attributes that define a modUser security profile. It takes parameters for the target, context, and whether to reload the attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.loadattributes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid loadAttributes ( $target, [ $context = ''], [ $reload = false])\n```\n\n----------------------------------------\n\nTITLE: Saving System Settings\nDESCRIPTION: Example of updating a system setting value and saving it to the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$setting = $modx->getObject('modSystemSetting', 'site_name');\n$setting->set('value', 'My New Site Name');\n$setting->save();\n```\n\n----------------------------------------\n\nTITLE: Triggering a Custom Event in MODX using PHP\nDESCRIPTION: This snippet shows how to trigger a custom event in MODX by its name. The invokeEvent method allows passing an options array to any plugins listening for this event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->invokeEvent('OnMyCustomEvent', $options);\n```\n\n----------------------------------------\n\nTITLE: Create Controller Class Implementation\nDESCRIPTION: Custom controller class for handling resource creation, extending ResourceCreateManagerController and implementing custom language topics.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-3-controllers.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CopyrightedResourceCreateManagerController extends ResourceCreateManagerController {\n    public function getLanguageTopics() {\n        return array('resource','copyrightedresource:default');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resource Values with OnDocFormRender Event in MODX Revolution\nDESCRIPTION: This PHP code snippet demonstrates how to set default values for resource fields when creating a new resource using the OnDocFormRender event in MODX Revolution 2.4.0 and above. The code checks if the mode is 'new' and then sets default values for pagetitle, description, and content fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformrender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormRender':\n        if ($mode == modSystemEvent::MODE_NEW) {\n            //устанавливаем значения по умолчанию\n            $resource->set('pagetitle', 'Heading');\n            $resource->set('description', 'Description');\n            $resource->set('content', 'Content');\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Chunks via MODX API\nDESCRIPTION: Demonstrates how to retrieve and process a Chunk using the MODX API, including passing an array of properties and formatting the output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/chunks.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$resources = $modx->getCollection('modResource',array('published' => true));\n$i = 0;\n$output = '';\nforeach ($resources as $resource) {\n  $properties = $resource->toArray();\n  $properties['rowCls'] = $i % 2 ? '' : 'alt';\n\n  $output .= $modx->getChunk('rowTpl',$properties);\n  $i++;\n}\nreturn '<table><tbody>'.$output.'</tbody></table>';\n```\n\n----------------------------------------\n\nTITLE: Displaying Campers Overview with cmCampers Snippet\nDESCRIPTION: This snippet configures the `cmCampers` MODX tag to display a sortable and filterable table containing details about campers. It requires the MODX framework and the CamperManagement component. Key parameters include `limit`, `sort`, and `tplOuter`. The input is filtered based on parameters like status, and outputs an HTML table.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.customizing-the-component.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[!cmCampers? &limit=`0` &sort=`keynr` &dir=`asc` &includeImages=`false` &status=`1,2,3,4` &tplOuter=`cmVoorraadOuter` &tplItem=`cmVoorraadItem` &optionsSeparator=` / `]]\"\n```\n\n----------------------------------------\n\nTITLE: GetResources Latest Posts Query - PHP\nDESCRIPTION: Retrieves the 5 most recent published resources from a specific parent, including content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`5` &limit=`5` &tpl=`blogPost` &includeContent=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Removing Session Context Variables in MODX Revolution (PHP)\nDESCRIPTION: This method removes all session variables associated with a specific context for a user. It takes a single parameter, which is the context key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.removesessioncontextvars.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid removeSessionContextVars (string $context)\n```\n\n----------------------------------------\n\nTITLE: pdoNeighbors Basic Usage\nDESCRIPTION: Demonstrates basic implementation of pdoNeighbors for previous/next navigation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoNeighbors?\n    &sortby=`menuindex`\n    &sortdirc=`desc`\n]]\n```\n\n----------------------------------------\n\nTITLE: Checking Membership of Web Group in modX\nDESCRIPTION: Validates if the current user belongs to a specified web group, enabling role-based access control and functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nmodX->isMemberOfWebGroup()\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard Widget for FX2\nDESCRIPTION: This code snippet is used to create a dashboard widget in MODX that retrieves and displays the FX2 dashboard chunk. It allows users to customize their dashboard experience with FX2 functionalities.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fx2themebase/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn $modx->getChunk('fx2.dashboard');\n```\n\n----------------------------------------\n\nTITLE: Validating Introtext and Restricting Resource Creation in MODX in PHP\nDESCRIPTION: Plugin that prevents saving resources without an introtext field and completely blocks the creation of new resources. It uses the mode parameter to distinguish between updates and new resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforedocformsave.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeDocFormSave':\n        if ($mode == modSystemEvent::MODE_UPD) {\n            //if not filled introtext\n            if (!$resource->get('introtext')){\n                $modx->event->output(\"You have not forgotten your head at home, but you have forgotten about the 'Keywords'!\");\n            }\n        } elseif ($mode == modSystemEvent::MODE_NEW) {\n            $modx->event->output(\"You cannot create resources!\");\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Limited Videos from YouTube Channel with Pagination in MODX\nDESCRIPTION: This snippet shows how to fetch and display videos from the YouTube 'Spotlight' Channel, limiting the output to 10 videos at a time. It uses the 'videoTpl' chunk for formatting and includes pagination links and a total video count.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getyoutube/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!getYoutube? &mode=`channel` &channel=`UCBR8-60-B28hp2BmDPdntcQ` &tpl=`videoTpl` &limit=`10`]]\n[[+prevPage:notempty=`<a href=\"[[+prevPage]]\">prevPage</a><br>`]]\n[[+nextPage:notempty=`<a href=\"[[+nextPage]]\">nextPage</a><br>`]]\nTotal: [[+total]]\n```\n\n----------------------------------------\n\nTITLE: Chaining Output Modifiers\nDESCRIPTION: This snippet illustrates chaining output modifiers in MODX to format a date. It first converts the `mydate` placeholder to a timestamp using `strtotime` and then formats the timestamp using the `date` modifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n[[+mydate:strtotime:date=`%Y-%m-%d`]]\n```\n\n----------------------------------------\n\nTITLE: Basic xPDOQuery Sorting by Column\nDESCRIPTION: Shows how to sort Box objects by name in ascending order using xPDOQuery::sortby(). The method takes a column name and optional direction parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.sortby.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery sortby (string $column, [string $direction = 'ASC'])\n```\n\n----------------------------------------\n\nTITLE: Adding JavaScript to Page Footer Example\nDESCRIPTION: Example showing how to register a JavaScript file to be included at the end of a MODX page using regClientScript.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientscript.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientScript('assets/js/footer.js');\n```\n\n----------------------------------------\n\nTITLE: Blocking Core Access in NGINX Configuration\nDESCRIPTION: NGINX location block to rewrite requests for sensitive MODX directories to a 404 error page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/(\\.(?!well_known)|_build|_gitify|_backup|core|config.core.php) {\n    rewrite ^/(\\.(?!well_known)|_build|_gitify|_backup|core|config.core.php) /index.php?q=doesnotexist;    \n}\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Multiple Fields and Validators\nDESCRIPTION: This snippet showcases how to validate multiple fields with different validators in FormIt. It demonstrates the use of commas to separate fields and validators, including the use of `isDate` validator with a custom format and custom `testFormItValidator`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &validate=`date:required:isDate=^%m/%d/%Y^,\n        name:required:testFormItValidator,\n        email:email:required,\n        colors:required,\n        subject:required,\n        username:required:islowercase,\n        message:stripTags,\n        numbers:required`\n]]\n```\n\n----------------------------------------\n\nTITLE: Combining OR and AND Filters for Advanced Resource Queries in PHP\nDESCRIPTION: This code snippet shows how to group filter conditions by combining OR (||) and AND (,) delimiters for more complex resource filtering. It provides a practical example of how to structure such queries effectively.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nmytv==foo||mytv==bar,bartv==3||bartv==1\n```\n\n----------------------------------------\n\nTITLE: Implementing MODX Parsed Manager Controller in PHP\nDESCRIPTION: Example of a basic Parsed Manager Controller implementation that extends modParsedManagerController. Shows how to set page title and process content through chunks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/parsed.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MycmpWelcomeManagerController extends modParsedManagerController\n{\n    public function getPageTitle()\n    {\n        return 'My Test CMP';\n    }\n    \n    public function process(array $scriptProperties = [])\n    {\n        return '[[$chunk-name]]';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Filter Usage in MODX\nDESCRIPTION: Example of using a custom output filter to modify the output of a placeholder in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*pagetitle:myOutputFilter]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Update Processor Methods\nDESCRIPTION: Example implementation of custom update processor showing override methods for beforeSet, beforeSave, and afterSave operations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-4-processors.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass CopyrightedResourceUpdateProcessor extends modResourceUpdateProcessor {\n    /**\n     * Do any processing before the fields are set\n     * @return boolean\n     */\n    public function beforeSet() {\n        $beforeSet = parent::beforeSet();\n        /* force all Copyrighted Page CRCs to be cacheable always */\n        $this->setProperty('cacheable',true);\n        return $beforeSet;\n    }\n    /**\n     * Do any processing before the save of the Resource but after fields are set.\n     * @return boolean\n     */\n    public function beforeSave() {\n        $beforeSave = parent::beforeSave();\n        if ($this->object->get('longtitle') == 'Send an Error') {\n            $this->addFieldError('longtitle','Specify a different longtitle!');\n        }\n        /* force CopyrightedResource objects to always be non-folders */\n        $this->object->set('isfolder',false);\n        return $beforeSave;\n    }\n    /**\n     * Do any custom after save processing\n     * @return boolean\n     */\n    public function afterSave() {\n        $afterSave = parent::afterSave();\n        $this->modx->log(modX::LOG_LEVEL_DEBUG,'Saving a Copyrighted Page!');\n        return $afterSave;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getPage with getResources to paginate selected resources\nDESCRIPTION: Example of using getPage to paginate all resources beneath Resource ID 5, excluding resource 10, using 'myRowTpl' chunk for formatting each item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getpage/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage? &element=`getResources` &parents=`5` &resources=`-10` &tpl=`myRowTpl`]]\n<div class=\"pageNav\">[[!+page.nav]]</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Variables with Fenom in MODX - PHP\nDESCRIPTION: This snippet shows how to access various global variables using Fenom's syntax. It covers session, request, server, and cookie variables obtainable in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n{$.session['your_key']}\n{$.get['query']} or {$.get.query}\n{$.server['REQUEST_URI']}\n```\n\n----------------------------------------\n\nTITLE: HTML Template for FileLister Output in MODX Revolution\nDESCRIPTION: This HTML template can be used in a MODX Resource to display the output of FileLister. It requires the 'toPlaceholder' property to be set to 'files' in the FileLister snippet call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/index.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h2>Files</h2>\n\n<p>Current Path: <span>[[+filelister.path]]</span></p>\n\n<table>\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Filesize</th>\n            <th>Last Modified</th>\n        </tr>\n    </thead>\n    <tfoot>\n        <tr>\n            <th colspan=\"3\">\n                Files: [[+filelister.total.files]] | Directories:\n                [[+filelister.total.directories]]\n            </th>\n        </tr>\n    </tfoot>\n\n    <tbody>\n        [[+files]]\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Basic MODX URL Generation\nDESCRIPTION: Simple example showing how to generate a URL for a resource with ID 4.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.makeurl.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$url = $modx->makeUrl(4);\n```\n\n----------------------------------------\n\nTITLE: Implementing ResetPassword Snippet in PHP\nDESCRIPTION: This snippet is used to reset a user's password. It should be placed on the page that users will visit from the confirmation email to reset their password. The 'loginResourceId' parameter specifies where to redirect users after a successful password reset.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.resetpassword.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!ResetPassword? &loginResourceId=`72`]]\n```\n\n----------------------------------------\n\nTITLE: Implementing the getChunk method in PHP\nDESCRIPTION: The `getChunk` method retrieves a chunk's content, either from the MODX database or a file. It first checks if the chunk is already stored in the `$this->chunks` array. If not, it tries to load it from the database using `modx->getObject`. If not found in the database, it calls the `_getTplChunk` method to load it from a file. The method then processes the chunk with the given properties and returns the result.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n    public function getChunk($name,$properties = array()) {\n        $chunk = null;\n        if (!isset($this->chunks[$name])) {\n            $chunk = $this->modx->getObject('modChunk',array('name' => $name));\n            if (empty($chunk) || !is_object($chunk)) {\n                $chunk = $this->_getTplChunk($name);\n                if ($chunk == false) return false;\n            }\n            $this->chunks[$name] = $chunk->getContent();\n        } else {\n            $o = $this->chunks[$name];\n            $chunk = $this->modx->newObject('modChunk');\n            $chunk->setContent($o);\n        }\n        $chunk->setCacheable(false);\n        return $chunk->process($properties);\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Log Target in PHP\nDESCRIPTION: Example of setting the log target to format messages in HTML and output them to the browser.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.setlogtarget.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->setLogTarget('HTML');\n```\n\n----------------------------------------\n\nTITLE: MODX Resource Field Selection JSON Example\nDESCRIPTION: Example JSON structure for selecting specific fields from MODX resources using the select property. This demonstrates how to specify which resource fields should be retrieved.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoResources.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"modResource\":\"id,pagetitle,content\"}\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Required Field\nDESCRIPTION: This snippet demonstrates how to make the 'username' field required using the `required` validator in FormIt. The `&validate` property is used to specify the field and validator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &validate=`username:required`]]\n```\n\n----------------------------------------\n\nTITLE: Loading Lexicon Topics in MODX Revolution PHP\nDESCRIPTION: Demonstrates how to load custom lexicon topics for internationalization in MODX Revolution. This example shows loading a custom 'buttons' lexicon topic for TinyMCE component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/menus/actions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon->load('tinymce:buttons');\n```\n\n----------------------------------------\n\nTITLE: Using Register Snippet with Activation Email in MODX\nDESCRIPTION: Demonstrates how to configure the Register snippet to send an activation email to the user upon registration. It specifies the email template chunk, subject, and the page where the user is directed after registration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!Register?\n   &activationEmailTpl=`myActivationEmailTpl`\n   &activationEmailSubject=`Please activate your account!`\n   &activationResourceId=`26`\n   &submittedResourceId=`325`\n]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Fields for an Object Class in PHP using xPDO\nDESCRIPTION: This snippet demonstrates how to use the xPDO::getFields method to retrieve a list of fields for a 'Box' object class, including their default values. The method returns an array of field names and their corresponding default values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getfields.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$fields = $xpdo->getFields('Box');\nprint_r($fields); // prints: Array ([id] => 1, [width] => 10, [height] => 23)\n```\n\n----------------------------------------\n\nTITLE: Creating New xPDO Object Instance in PHP\nDESCRIPTION: Demonstrates the syntax and usage of the xPDO.newObject method to create new instances of xPDO objects. It shows how to create a basic object and how to initialize it with predefined field values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.newobject.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nobject|null newObject (string $className, [array $fields = array ()])\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$box = $xpdo->newObject('Box');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$box = $xpdo->newObject('Box',array(\n   'width' => 10,\n   'height' => 4,\n));\n```\n\n----------------------------------------\n\nTITLE: Setting Default Properties in MODX Snippets\nDESCRIPTION: Example of how to use the getOption method to read properties passed to a MODX snippet and set default values for those properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-snippet.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$headTpl = $modx->getOption('headTpl', $scriptProperties, 'myHeadTpl');\n```\n\n----------------------------------------\n\nTITLE: Loading Single Object Instance with xPDOObject::load in PHP\nDESCRIPTION: Static method signature for loading a single object instance from a database table row. Takes parameters for the xPDO instance, class name, criteria for selecting the row, and an optional cache flag. Returns either an object instance or null if not found.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/static-object-loaders/load.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstatic object|null load(\n   xPDO &$xpdo,\n   string $className,\n   mixed $criteria,\n   [boolean|integer $cacheFlag = true]\n)\n```\n\n----------------------------------------\n\nTITLE: Preparing Query for Search (PHP)\nDESCRIPTION: This PHP snippet modifies the xPDOQuery object to add search functionality to a MODX processor. It extends the prepareQueryBeforeCount method to add a WHERE clause that searches the name and description fields based on the provided query parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    public function prepareQueryBeforeCount(xPDOQuery $c) {\n        $query = $this->getProperty('query');\n        if (!empty($query)) {\n            $c->where(array(\n                'name:LIKE' => '%'.$query.'%',\n                'OR:description:LIKE' => '%'.$query.'%',\n            ));\n        }\n        return $c;\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Fred Dropzones in HTML\nDESCRIPTION: Example showing how to create multiple dropzones for Fred elements, typically used for split layouts or pages with sidebars.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-fred-dropzone=\"left\" class=\"left-content\"></div>\n<div data-fred-dropzone=\"right\" class=\"right-content\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating New Subscriber Object\nDESCRIPTION: PHP code for creating a new subscriber object with basic user data\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/self-subscribe.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$subscriber = $this->xpdo->newObject('sxSubscriber');\n$subscriber->fromArray(array(\n    'newsletter_id' => $this->id,\n    'user_id' => $user_id,\n    'email' => $email\n), '', true, true);\n```\n\n----------------------------------------\n\nTITLE: Example: Updating Multiple Resources with updateCollection() in xPDO (PHP)\nDESCRIPTION: This example shows how to update the 'published' field of multiple 'modResource' objects using the `updateCollection()` method.  It sets the 'published' field to `true` for all resources that are currently unpublished.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$modx->updateCollection('modResource', ['published' => true], ['published' => false]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving YouTube Channel Videos with getYoutube\nDESCRIPTION: This example retrieves all videos from the YouTube 'Spotlight' Channel and displays them using the 'videoTpl' chunk template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getyoutube/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getYoutube? &mode=`channel` &channel=`UCBR8-60-B28hp2BmDPdntcQ` &tpl=`videoTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Custom Placeholder and Template for SimpleSearchForm\nDESCRIPTION: In this example, a custom template ('MySearchForm') is used for the search form. The output is sent to a placeholder ('search.form'), and a specific landing page is set. Important for creating a customizable search experience, the example requires the corresponding chunk to exist in the MODX system.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.simplesearchform.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[SimpleSearchForm? &tpl=`MySearchForm` &landing=`123` &toPlaceholder=`search.form`]]\n\n<h2>Search</h2>\n[[+search.form]]\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in MODX XML Schema\nDESCRIPTION: This XML snippet demonstrates how to define indexes for a database table within a MODX schema file. Indexes improve query performance by allowing the database to quickly locate specific rows. The attributes include `alias`, `name`, `primary` (whether it's a primary key), `unique` (whether it enforces unique values), and `type` (index type).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/work-logic/index.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<index alias=\\\"name\\\" name=\\\"name\\\" primary=\\\"false\\\" unique=\\\"false\\\" type=\\\"BTREE\\\">\\n    <column key=\\\"name\\\" length=\\\"\\\" collation=\\\"A\\\" null=\\\"false\\\" />\\n</index>\\n<index alias=\\\"active\\\" name=\\\"active\\\" primary=\\\"false\\\" unique=\\\"false\\\" type=\\\"BTREE\\\">\\n    <column key=\\\"active\\\" length=\\\"\\\" collation=\\\"A\\\" null=\\\"false\\\" />\\n</index>\"\n```\n\n----------------------------------------\n\nTITLE: Syntax of xPDOObject::addMany() Method in PHP\nDESCRIPTION: Shows the method signature for the addMany() method in xPDOObject class. It takes two parameters: a reference to an object or array of objects to be added, and an optional alias string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/addmany.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nboolean addMany (\n   mixed &$obj,\n   [string $alias = '']\n)\n```\n\n----------------------------------------\n\nTITLE: User Logout Processor Implementation\nDESCRIPTION: Demonstrates how to implement user logout functionality using MODX's security/logout processor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$response = $modx->runProcessor('/security/logout');\nif ($response->isError()) {\n    $modx->log(modX::LOG_LEVEL_ERROR, 'Logout error. Username: '.$modx->user->get('username').', uid: '.$modx->user->get('id').'. Message: '.$response->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Permission Check in MODX PHP\nDESCRIPTION: Demonstrates checking a single permission 'edit_chunk' and denying access if the user doesn't have it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.haspermission.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$pm = 'edit_chunk';\nif (!$modx->hasPermission($pm)) {\n    die('Access Denied!');\n}\n```\n\n----------------------------------------\n\nTITLE: Using getParser Method - PHP Example\nDESCRIPTION: Example showing how to retrieve the MODX Parser object using the getParser() method on the modX instance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getparser.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$parser = $modx->getParser();\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information in MODx JS\nDESCRIPTION: Demonstrates accessing current user information through the MODx.user object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar userId = MODx.user.id;\n```\n\n----------------------------------------\n\nTITLE: Exact Phrase Search with Results Placeholder in PHP\nDESCRIPTION: Example of SimpleSearch configured to require all words in the search query (exact phrase matching) and store results in a placeholder named 'results' for custom display elsewhere in the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch? &useAllWords=`1` &toPlaceholder=`results`]]\n```\n\n----------------------------------------\n\nTITLE: isAuthenticated Method Signature in PHP\nDESCRIPTION: Method signature showing the isAuthenticated function definition that accepts an optional sessionContext parameter defaulting to 'web'. Returns a boolean indicating authentication status.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.isauthenticated.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean isAuthenticated ([string $sessionContext = 'web'])\n```\n\n----------------------------------------\n\nTITLE: Installing Composer and Gitify in MODX Cloud\nDESCRIPTION: Commands to install Composer and clone Gitify repository into a MODX Cloud instance. These commands should be executed from the home directory of your MODX Cloud installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd www; curl http://modx.co/scripts/install.sh | sh\nmkdir ../gitify; cd ../gitify\ngit clone https://github.com/modmore/Gitify.git ./\n```\n\n----------------------------------------\n\nTITLE: Creating UTM Snippet in PHP for MODX\nDESCRIPTION: This PHP snippet retrieves UTM tag values from a MIGX TV and returns the corresponding content based on the input parameter. It handles GET parameters and JSON parsing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/utm-tags-for-modx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$utm_point = $modx->stripTags($_GET['utm']);\n$migx = $modx->resource->getTVValue('utm');\n$array = $modx->fromJSON($migx);\n\nif(!empty($input)) {\n    foreach($array as $utm) {\n        if($utm['utm'] == $utm_point && !empty($utm[$input])) return $utm[$input];\n    }\n}\nreturn;\n```\n\n----------------------------------------\n\nTITLE: Defining AdvSearch Result Template in PHP\nDESCRIPTION: This PHP snippet defines the default template for rendering search results in AdvSearch. It uses placeholders such as idx, link, and extracts to dynamically display search data. The template supports overriding the URL target with its link placeholder, aligning with resource IDs. Dependencies include MODX placeholders and template variables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"advsea-result\">\n    <h3>[[+idx]]. <a href=\"[[+link:is=``:then=`[[~[[+id]]]]`:else=`[[+link]]`]]\" title=\"[[+longtitle]]\">[[+pagetitle]]</a></h3>\n    <div>[[+extracts]]</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating an xPDOQuery with WHERE Clause Conditions in PHP\nDESCRIPTION: Example showing how to create a query for Box objects with a WHERE clause that filters for boxes with width greater than 10.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.newquery.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->newQuery('Box',array(\n   'width:>' => 10,\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Personalize Snippet for Dynamic Header in MODX\nDESCRIPTION: This snippet personalizes the header content based on whether the user is logged in or not, using separate chunks for members and guests.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<div id=\"your_header\">\n[[!Personalize? &yesChunk=`header_for_members` &noChunk=`header_for_guests` &ph=`name`]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Update Profile Form\nDESCRIPTION: This code snippet is an HTML form for updating user profile information. It includes fields for fullname and email, along with error placeholders and lexicon entries for localization. The UpdateProfile snippet is called to handle profile updates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/user-profiles.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\n[[!UpdateProfile? &useExtended=`0`]]\n\n<div class=\"update-profile\">\n    <div class=\"updprof-error\">[[+error.message]]</div>\n    [[+login.update_success:if=`[[+login.update_success]]`:is=`1`:then=`[[%login.profile_updated? &namespace=`login` &topic=`updateprofile`]]`]]\n\n    <form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n        <input type=\"hidden\" name=\"nospam:blank\" value=\"\" />\n\n        <label for=\"fullname\">[[!%login.fullname? &namespace=`login` &topic=`updateprofile`]]\n            <span class=\"error\">[[+error.fullname]]</span>\n        </label>\n        <input type=\"text\" name=\"fullname\" id=\"fullname\" value=\"[[+fullname]]\" />\n\n        <label for=\"email\">[[!%login.email]]\n            <span class=\"error\">[[+error.email]]</span>\n        </label>\n        <input type=\"text\" name=\"email:required:email\" id=\"email\" value=\"[[+email]]\" />\n\n                <br class=\"clear\" />\n\n        <div class=\"form-buttons\">\n            <input type=\"submit\" name=\"login-updprof-btn\" value=\"[[!%login.update_profile]]\" />\n        </div>\n    </form>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: Default Quip Report Template Implementation in PHP\nDESCRIPTION: The default template chunk for rendering the spam report link in Quip comments. Shows either a report link or a reported status message based on whether the comment has already been reported.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip/tplreport.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<span class=\"quip-comment-report\">\n    [[+reported:empty=`<a href=\"[[+reportUrl]]\">[[%quip.report_as_spam]]</a>`]]\n    [[+reported:notempty=`<span>[[%quip.reported_as_spam]]</span>`]]\n</span>\n```\n\n----------------------------------------\n\nTITLE: Calling Shopkeeper Snippet with Property Set in PHP\nDESCRIPTION: This snippet is used within a MODX template to display a shopping cart. It requires a predefined Property Set that defines the snippet's configuration. The Property Set name is passed as an argument to the snippet, allowing customization of the shopping cart's appearance and functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/shopkeeper/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Shopkeeper@catalog?propertySetName=`catalog`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Snippets to Category in MODX Transport Package\nDESCRIPTION: Code section that loads snippets into the category vehicle for transport package building.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/* add snippets */\n$modx->log(modX::LOG_LEVEL_INFO,'Packaging in snippets...');\n$snippets = include $sources['data'].'transport.snippets.php';\nif (empty($snippets)) $modx->log(modX::LOG_LEVEL_ERROR,'Could not package in snippets.');\n$category->addMany($snippets);\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page Link with MODX Revolution System Tags in HTML\nDESCRIPTION: Demonstrates how to create a link to the home page using MODX Revolution system tags. This example uses the site_start tag in combination with the link syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"logo\" href=\"[[~[[++site_start]]]]\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Inline Snippet Calls with If\nDESCRIPTION: Example showing how to conditionally call other snippets based on user authentication status using the If snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/if/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!If?\n   &subject=`[[+modx.user.id]]`\n   &operator=`EQ`\n   &operand=`0`\n   &then=`[[Login]]`\n   &else=`[[Logout]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Selecting a Collection with xPDO.query in PHP\nDESCRIPTION: Demonstrates how to use xPDO.query to fetch multiple rows from the database and process them using a foreach loop or the fetchAll method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.query.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$output = '';\n$sql = \"SELECT * FROM modx_users\";\nforeach ($modx->query($sql) as $row) {\n    $output .= $row['username'] .'<br/>';\n}\nreturn $output;\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$output = '';\n$sql = \"SELECT * FROM modx_users\";\n$result = $modx->query($sql);\n$data = $result->fetchAll(PDO::FETCH_ASSOC);\nreturn $data;\n```\n\n----------------------------------------\n\nTITLE: Validating Form Data in MODx Processor (PHP)\nDESCRIPTION: This PHP snippet implements form data validation within a MODx processor using the `beforeSet` method. It checks for required fields ('name', 'template') and ensures the 'name' field is unique.  It also converts the 'active' field to a boolean value and adds field errors if validation fails, returning false if there are errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeSet() {\n\n    $required = array('name', 'template');\n    foreach ($required as $tmp) {\n        if (!$this->getProperty($tmp)) {\n            $this->addFieldError($tmp, $this->modx->lexicon('field_required'));\n        }\n    }\n\n    if ($this->hasErrors()) {\n        return false;\n    }\n\n    $unique = array('name');\n    foreach ($unique as $tmp) {\n        if ($this->modx->getCount($this->classKey, array('name' => $this->getProperty($tmp)))) {\n            $this->addFieldError($tmp, $this->modx->lexicon('sendex_newsletter_err_ae'));\n        }\n    }\n\n    $active = $this->getProperty('active');\n    $this->setProperty('active', !empty($active));\n\n    return !$this->hasErrors();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Placeholder with setPlaceholder in MODX PHP\nDESCRIPTION: This method sets a placeholder value that can be accessed in templates using the [[+name]] syntax. It takes a key parameter that defines the placeholder name and a value parameter that sets the placeholder's content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.setplaceholder.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid setPlaceholder (string $key, mixed $value)\n```\n\n----------------------------------------\n\nTITLE: Basic getPKType Method Signature\nDESCRIPTION: Method declaration for getPKType which returns a string representing the primary key field type.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getpktype.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getPKType()\n```\n\n----------------------------------------\n\nTITLE: MODX HTTPS URL Generation\nDESCRIPTION: Example demonstrating URL generation with HTTPS scheme and disabled XHTML URLs option.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.makeurl.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$url = $modx->makeUrl(12, '', '', 'https', array('xhtml_urls' => false));\n```\n\n----------------------------------------\n\nTITLE: Testing Custom Hook Execution in PHP\nDESCRIPTION: This code snippet demonstrates how to test if a custom hook is executing by logging a message to the MODX error log. It's crucial to return true for form validation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.custom-hook.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->log(xPDO::LOG_LEVEL_ERROR,'Testing my custom hook.');\nreturn true;  //<-- if you omit this or return false, your form won't validate\n```\n\n----------------------------------------\n\nTITLE: Using Slimbox with MODX Gallery\nDESCRIPTION: This snippet demonstrates how to integrate the Slimbox plugin with the MODX Gallery by simply adding a custom parameter. It requires MODX and the Slimbox2 plugin for jQuery. The main parameter, `&plugin=\\`slimbox\\``, is used to activate Slimbox in the Gallery snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.plugins/slimbox.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery? &plugin=\\`slimbox\\`]]\n```\n\n----------------------------------------\n\nTITLE: Assigning User to User Groups Upon Registration in MODX\nDESCRIPTION: Demonstrates how to use the Register snippet to assign a user to multiple user groups at the time of registration, either by name or by ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!Register? &usergroups=`Marketing,Research`]]\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Image Effects with phpThumbOf\nDESCRIPTION: This snippet chains multiple effects together: complete desaturation, brightness increase by 20%, and a 6% teal tint, while resizing to 960x300 pixels. It demonstrates how multiple filters can be applied sequentially.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=gray&fltr[]=brit|20&fltr[]=clr|6|00ab86`]]\n```\n\n----------------------------------------\n\nTITLE: Implementing MODX CMP with ExtJS Grid\nDESCRIPTION: PHP and JavaScript code that creates a CMP page with an ExtJS grid showing resources. Includes grid configuration, store setup, and column definitions with sorting and paging functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/8.-ext-js-tutorial-inside-a-cmp.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Generic MODX CMP\n */\n$url = MODX_ASSETS_URL.'components/your_pkg_name/'; // <-- update this\n//------------------------------------------------------------------------------\n//!Grid\n//------------------------------------------------------------------------------\n$modx->regClientStartupHTMLBlock(\"<script>\nfunction myactions(val) {\n    return '<a href=\\\"index.php?a=30&id='+val+'\\\">Edit</a>';\n}\n\n\nExt.onReady(function(){\n\n    // create the Data Store\n    var store = new Ext.data.JsonStore({\n        root: 'results',\n        totalProperty: 'total',\n        idProperty: 'id',\n        remoteSort: true,\n\n        fields: [\n            'id',\n            'createdon',\n            'pagetitle',\n            'action'\n        ],\n\n        // load using script tags for cross domain, if the data in on the same domain as\n        // this page, an HttpProxy would be better\n        proxy: new Ext.data.HttpProxy({\n            url: '{$url}getpages.php'  // <------- set this to point to your Ajax Controller\n        })\n    });\n    store.setDefaultSort('id', 'ASC');\n\n\n    var grid = new Ext.grid.GridPanel({\n        id: 'articlesGrid',\n        width:700,\n        height:500,\n        store: store,\n        trackMouseOver:true,  // will highlight rows on hover\n        disableSelection:true, // will allow you to select row(s)\n        loadMask: true,  // will generate a spinner icon\n\n        // grid columns\n        columns:[{\n            header: 'Date',\n            dataIndex: 'createdon',\n            width: 150,\n            sortable: true\n        },{\n            header: 'Page Title',\n            dataIndex: 'pagetitle',\n            width: 350,\n            sortable: true\n        },{\n            header: '',\n            dataIndex: 'id',\n            width: 100,\n            sortable: false,\n            renderer : myactions,\n        }],\n\n        // paging bar on the bottom\n        bbar: new Ext.PagingToolbar({\n            pageSize: 25,\n            store: store,\n            displayInfo: true,\n            displayMsg: 'Displaying Records {0} - {1} of {2}',\n            emptyMsg: 'No Records to display'\n        })\n    });\n\n    // render it\n    grid.render('articles-grid');\n\n    // trigger the data store load\n    // NOTE: the parameter names here correspond to keys in _POST\n    store.load({params:{start:0, limit:25}});\n});\n</script>\");\n\n// Be sure to print an HTML div that is ref'd by the grid.render() method\nreturn '\n<h2>Example</h2>\n<div id=\"articles-grid\"></div>';\n```\n\n----------------------------------------\n\nTITLE: Original MODX Context Initialization Line\nDESCRIPTION: The default initialization line found in the index.php file that initializes MODX to use the 'web' context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/gateway-plugin.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->initialize('web');\n```\n\n----------------------------------------\n\nTITLE: Retrieving MODX Full Version Example\nDESCRIPTION: Example showing how to get and display the full version number of MODX using getVersionData() method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getversiondata.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$vers = $modx->getVersionData();\necho $vers['full_version'];\n```\n\n----------------------------------------\n\nTITLE: Integration with pdoPage\nDESCRIPTION: Demonstrates how to combine pdoUsers with pdoPage for pagination functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoUsers.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &element=`pdoUsers`\n    &groups=`Authors`\n    &tpl=`tpl.Authors.author`\n    &sortdir=`asc`\n]]\n```\n\n----------------------------------------\n\nTITLE: PHP Processor for Subscriber Removal\nDESCRIPTION: Server-side processor class for handling subscriber removal requests. Extends modObjectRemoveProcessor to provide secure object deletion with permission checking.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass sxSubscriberRemoveProcessor extends modObjectRemoveProcessor {\n    public $checkRemovePermission = true;\n    public $objectType = 'sxSubscriber';\n    public $classKey = 'sxSubscriber';\n    public $languageTopics = array('sendex');\n\n}\n\nreturn 'sxSubscriberRemoveProcessor';\n```\n\n----------------------------------------\n\nTITLE: Two-Level Menu with Permission Filtering\nDESCRIPTION: Creates a two-level menu with specific parent exclusions and permission checks. Ensures users can only access resources they have permissions to load, list, or view.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoMenu.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[pdoMenu?\n    &parents=`-10,-15`\n    &level=`2`\n    &checkPermissions=`load,list,view`]]\n```\n\n----------------------------------------\n\nTITLE: Processing Welcome Chunk\nDESCRIPTION: Example of processing a chunk with simple property replacement.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->getChunk('WelcomeChunk',array(\n   'name' => 'John',\n));\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: String Comparison with If Snippet\nDESCRIPTION: Example demonstrating string comparison with the If snippet, providing different outputs based on whether a name matches 'George'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/if/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!If?\n   &subject=`[[+name]]`\n   &operator=`EQ`\n   &operand=`George`\n   &then=`Hey George! Long time no see!`\n   &else=`You're not George. Go away.`\n]]\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript to HEAD in MODX\nDESCRIPTION: These examples show how to register JavaScript files to the HEAD of a MODX document using the regClientStartupScript method. The examples include registering local scripts and external CDN scripts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/register-assets.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupScript('assets/js/site.js');\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupScript('//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"');\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupScript('http://code.jquery.com/jquery-latest.min.js');\n```\n\n----------------------------------------\n\nTITLE: GetResources Specific Resources Query - PHP\nDESCRIPTION: Retrieves specific resources while excluding others, using parent constraints and template chunks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`5` &resources=`-10` &tpl=`myRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Modifying Resource Parameters in MODX OnLoadWebDocument Event\nDESCRIPTION: This code demonstrates how to modify resource parameters such as cacheability and template at runtime using the OnLoadWebDocument event in MODX. These modifications will affect how the page is processed and displayed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onloadwebdocument.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Set all pages to be uncached (for debugging)\n$modx->resource->set('cacheable', 0);\n// Or switch the template\n$modx->resource->set('template', 6);\n// Alternate syntax\n$modx->resource->template = 6;\n```\n\n----------------------------------------\n\nTITLE: Foreign Database Connection Reuse Class - PHP\nDESCRIPTION: This snippet outlines a class that manages a reusable connection to a foreign database using xPDO. It prevents opening a new connection for each snippet call to improve performance. It requires the xPDO library and connection parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cmpgenerator/cmpgenerator.foreign-databases.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass ForeignConnect {\n    /**\n     * @var (Array) of db_dsn => (Object) the xPDO instance\n     */\n    private static $instance = array();\n\n    /**\n     * private constructor\n     */\n    private function __construct($database_dsn, $username, $password){\n\n    }\n    public function __destruct(){\n        $this->close();\n    }\n    /**\n     * This static method creates an instance of the class if no instance already exists.\n     * @param (String) $database_dsn\n     * @param (String) $username\n     * @param (String) $password\n    */\n    static public function getInstance($database_dsn, $username, $password){\n        //global $modx;\n        //$modx->log(xPDO::LOG_LEVEL_ERROR, 'getInstance');\n        //instance must be static in order to be referenced here\n        if(!isset(self::$instance[$database_dsn]) ){\n            // new connection\n            //$modx->log(xPDO::LOG_LEVEL_ERROR, 'New Connection getInstance DB: '.$database_dsn);\n            self::$instance[$database_dsn] = new xPDO($database_dsn,\n                $username,\n                $password );\n\n        }\n        //$modx->log(xPDO::LOG_LEVEL_ERROR, 'Return Connection');\n        return self::$instance[$database_dsn];\n    }\n    /**\n     * Close the instance\n     */\n    public function close(){\n        self::$instance = array();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FormIt Configuration Without FormSave\nDESCRIPTION: Example of a standard FormIt snippet call for a contact form without FormSave integration, showing basic validation and email functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formsave/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n   &hooks=`recaptcha,spam,email,redirect`\n   &emailTpl=`MyEmailChunk`\n   &emailTo=`user@example.com`\n   &redirectTo=`123`\n   &validate=`name:required,\n      email:email:required,\n      subject:required,\n      text:required:stripTags,\n      numbers:required,\n      colors:required`\n]]\n```\n\n----------------------------------------\n\nTITLE: Returning Error Messages from Custom FormIt Hooks (PHP)\nDESCRIPTION: Shows how to add an error message to a specific field and return a failure status from a custom FormIt hook.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$errorMsg = 'User not found';\n$hook->addError('user',$errorMsg);\nreturn false;\n```\n\n----------------------------------------\n\nTITLE: Caching Data with Lifetime in MODX Snippet (PHP)\nDESCRIPTION: This snippet demonstrates caching data for a specific lifetime using the MODX cache manager. It retrieves data from the cache if it exists and is still valid; otherwise, it generates new data (the current time), stores it in the cache with a lifetime of 10 seconds, and returns the data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/caching/lifetimes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$cacheManager = $modx->getCacheManager();\n\n$lifetime = 10; // in seconds\n\nif (!$payload = $cacheManager->get('my_cache_key')) {\n    $payload = date('H:i:s');\n    $cacheManager->set('my_cache_key',$payload, $lifetime);\n}\n\nreturn $payload;\n```\n\n----------------------------------------\n\nTITLE: Implementing jQuery Tabs with getResources\nDESCRIPTION: Implementation of jQuery tabs using getResources to dynamically generate tab links. This retrieves child resources under parent 123 and formats them as tab links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<script type=\"text/javascript\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\"tabs\">\n  <ul>\n    [[getResources? &parents=`123` &depth=`1` &tpl=`myRowTpl` &includeContent=`1` &includeTVs=`1`]]\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Getting Current User's Username in MODX\nDESCRIPTION: Example showing how to retrieve the currently authenticated user and display their username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getuser.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getUser();\necho $user->get('username');\n```\n\n----------------------------------------\n\nTITLE: Basic Sitemap Generation\nDESCRIPTION: Simplest implementation of pdoSitemap for the default context\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[pdoSitemap]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Alert Dialog with Callback in MODx\nDESCRIPTION: Example of using MODx.msg.alert() to show a warning dialog and execute a callback function to clear cache\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.msg.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.msg.alert('Warning!','You are out of space! We should clear the cache.',function() {\n  MODx.clearCache();\n},MODx);\n```\n\n----------------------------------------\n\nTITLE: Defining xPDOCacheManager.matches Method Syntax in PHP\nDESCRIPTION: Specifies the syntax for the xPDOCacheManager.matches method, which takes a string and a pattern (string or array) as parameters and returns a boolean.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.matches.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean matches (string $string, string|array $pattern)\n```\n\n----------------------------------------\n\nTITLE: Initializing Fred Sidebar Plugin in JavaScript\nDESCRIPTION: Example implementation of a Fred sidebar plugin initialization function that creates a help link in the sidebar. Shows the basic structure including title, icon, and expandable settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/sidebar_plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar TestSidebarPluginInit = function(fred, SidebarPlugin, pluginTools) {\n    class TestSidebarPlugin extends SidebarPlugin {\n        static title = \"TestPlugin\";\n        static icon = \"fred--sidebar_more\";\n        static expandable = true;\n\n        init() {\n            this.content = this.render();\n        }\n\n        click() {\n            return this.content;\n        }\n\n        render() {\n            const moreList = pluginTools.ui.els.dl();\n\n            const helpLink = pluginTools.ui.els.a(\n                \"fred.fe.more.help\",\n                \"fred.fe.more.help\",\n                \"https://modxcms.github.io/fred/\"\n            );\n            helpLink.target = \"_blank\";\n\n            moreList.appendChild(pluginTools.ui.els.dt(helpLink));\n\n            return moreList;\n        }\n    }\n\n    return TestSidebarPlugin;\n};\n```\n\n----------------------------------------\n\nTITLE: XML Schema Definition for xPDO Object Class\nDESCRIPTION: Example of an XML schema definition for an xPDO object class, showing the relationship between the class name and table name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollection.md#2025-04-17_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<object class=\"MyClassName\" table=\"my_class_name\" extends=\"xPDOObject\">\n```\n\n----------------------------------------\n\nTITLE: Configuring VK.com API Keys for HybridAuth in MODX\nDESCRIPTION: This snippet shows the format for setting the VK.com API keys in the MODX system setting 'ha.keys.Vkontakte'. It includes the application ID and secure key obtained from the VK.com developer portal.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hybridauth/hybridauth.integrating-vk.com.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{\"id\":\"Application ID\",\"secret\":\"Secure key\"}\n```\n\n----------------------------------------\n\nTITLE: User Message Plugin Example\nDESCRIPTION: Shows how to send a custom message to users when creating/editing a page in MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->event->output('Hi there user!');\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Information in OnPackageUninstall Event\nDESCRIPTION: Example showing how to access the package name from the modTransportPackage instance that was uninstalled when the OnPackageUninstall event fires.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onpackageuninstall.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$package->get('package_name')\n```\n\n----------------------------------------\n\nTITLE: Adding the getContextMenuText Method with static strings\nDESCRIPTION: This snippet demonstrates an alternative implementation of the `getContextMenuText` method using static strings instead of lexicon entries. While this approach works, using lexicon entries is preferred for internationalization purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function getContextMenuText() {\n return array(\n   'text_create' => 'Страница, защищенная авторским правом',\n   'text_create_here' => 'Создать страницу, защищенную авторским правом, здесь',\n );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Logging User Logout in MODX Manager\nDESCRIPTION: This PHP snippet demonstrates how to handle the OnManagerLogout event in MODX. It logs the user ID, logout context, and additional contexts to the error log when a user logs out of the manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onmanagerlogout.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnManagerLogout':\n        $id = $user->get('id');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'User logged out with id '.$id.' out of context '.$loginContext.' and these more '.print_r($addContexts));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic pdoUsers Implementation\nDESCRIPTION: Shows how to list users filtered by specific groups with sorting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoUsers?\n    &groups=`Authors`\n    &sortdir=`asc`\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic getParentIds Method Syntax\nDESCRIPTION: Method signature showing parameters for retrieving parent resource IDs. Takes optional resource ID, height limit, and options array parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getparentids.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getParentIds ([integer $id = null], [integer $height = 10], [array $options = array()] )\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of getTVValue for Template Variables in PHP\nDESCRIPTION: Demonstrates the correct way to retrieve Template Variable values using the getTVValue helper function instead of getObjectGraph.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobjectgraph.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$page = $modx->getObject('modResource', 123);\nreturn $page->getTVValue('my_tv_name');\n// or (faster)\nreturn $page->getTVValue($tvId); // (ID of the TV)\n```\n\n----------------------------------------\n\nTITLE: Using Articles Snippet for Custom Placeholders in MODX\nDESCRIPTION: Demonstrates how to use the Articles snippet to access Articles-specific placeholders from any Resource, targeting a specific Articles container.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/articles/retrieving-articles-outside-of-articles.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[Articles? &container=`10`]]\n[[+latest_posts]]\n```\n\n----------------------------------------\n\nTITLE: Creating Ajax Controller for MODX CMP\nDESCRIPTION: PHP controller that handles Ajax requests for the CMP, including MODX initialization, permission checking, and data retrieval for resources with pagination support.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/8.-ext-js-tutorial-inside-a-cmp.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Controller for Ajax requests.\n */\n// Adjust the path appropriately\n$docroot = dirname(dirname(dirname(dirname(__FILE__))));\ninclude $docroot . '/config.core.php';\nif (!defined('MODX_API_MODE')) {\n    define('MODX_API_MODE', false);\n}\ninclude_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n$modx = new modX();\n$modx->initialize('mgr');\n\nif (!$modx->hasPermission('view_document')) {\n    header('HTTP/1.0 401 Unauthorized');\n    print 'Operation not allowed.';\n    exit;\n}\n// These are the standard values that are posted to the Ajax URL by Ext JS\n$start = (int) $modx->getOption('start',$_POST,0);\n$limit = (int) $modx->getOption('limit',$_POST,20);\n$sort = $modx->getOption('sort',$_POST);\n$dir = $modx->getOption('dir',$_POST,'ASC');\n\n// error_log(print_r($_POST,true));  // <--- uncomment this for debugging\n\n$c = $modx->newQuery('modResource');\n$count = $modx->getCount('modResource',$c);\n$c->sortby($sort,$dir);\n$c->limit($limit,$start);\n\n//$c->prepare(); error_log($c->toSQL()); // <-- uncomment for debugging\n\n$pages = $modx->getCollection('modResource',$c);\n\n$list = array();\nforeach ($pages as $p) {\n    $array = $p->toArray();\n    $list[] = $array;\n}\n\n// The format of the output is not well documented, but it requires a node for \"total\" and \"rows\"\nprint '{\"total\":\"'.$count.'\",\"results\":'.$modx->toJSON($list).',\"success\":true,\"msg\":\"Got our rows...\"}';\n\n//error_log(print_r($list,true));  // <-- another debugging point\n\n@session_write_close();\nexit();\n```\n\n----------------------------------------\n\nTITLE: Implementing QuickCrumbs Breadcrumb Navigation in MODX\nDESCRIPTION: Complete example of QuickCrumbs implementation including the main container and template chunks for home, current, and standard breadcrumb items. Uses custom templates for different states and includes configuration parameters for customizing the breadcrumb display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quickcrumbs/quickcrumbs.example.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<!--Call-->\n<div id=\"crumbs\">\n    <nav class=\"container\">\n        <ul>\n            [[QuickCrumbs?\n            &tpl=`Crumb`\n            &selfTpl=`Here`\n            &siteStartTpl=`Home`\n            &separator=``\n            &hideEmptyContainers=`1`\n            &showSiteStart=`1`\n            ]]\n        </ul>\n    </nav>\n</div>\n\n<!--Crumb-->\n<li><a href=\"[[~[[+id]]]]\"[[+menutitle:default=`[[+pagetitle]]`]]</a></li>\n\n<!--Here-->\n<li class=\"last clearfix\"><span>[[+menutitle:default=`[[+pagetitle]]`]]</span></li>\n<li class=\"end\">&nbsp;</li>\n\n<!--Home-->\n<li class=\"first\"><a href=\"[[~[[+id]]]]\"[[+menutitle:default=`[[+pagetitle]]`]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Format in MODX Revolution\nDESCRIPTION: The 'cache_format' setting specifies the format used for caching data in MODX Revolution. It accepts three possible values: 0 for PHP arrays, 1 for JSON, and 2 for PHP serialized data. This setting is available from Revolution 2.1 onwards.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/cache_format.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0 = PHP arrays, 1 = JSON, 2 = PHP serialized data.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Template Variable with fastField in MODX\nDESCRIPTION: Demonstrates how to use fastField to retrieve a Template Variable (TV) value from a specific resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[#10.tv.image]]\n```\n\n----------------------------------------\n\nTITLE: Loading Lexicon Service in PHP\nDESCRIPTION: Shows how to initialize the MODX lexicon service in PHP code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/internationalization.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('lexicon','modLexicon');\n```\n\n----------------------------------------\n\nTITLE: Example of Generating XML Schema from Existing Database in PHP\nDESCRIPTION: A practical example showing how to use the xPDOGenerator::writeSchema method to generate an XML schema from an existing database. This example specifically filters tables with the 'mydb_' prefix and demonstrates the necessary initialization steps.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdogenerator/xpdogenerator.writeschema.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo= new xPDO('mysql:host=localhost;dbname=myolddatabase','username','password','mydb_');\n$manager= $xpdo->getManager();\n$generator= $manager->getGenerator();\n\n$xml= $generator->writeSchema('/path/to/my/new/packagename.schema.xml','mypackage', 'xPDOObject','mydb_');\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Output Properties Configuration\nDESCRIPTION: Configuration options for HTML Tag output type including tag name, ID, class, style and custom attributes. This allows wrapping content in specified HTML tags with customizable properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/output-types/html.md#2025-04-17_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<tag_name id=\"tag_id\" class=\"css_classes\" style=\"style_attributes\" custom_attributes>\n    content\n</tag_name>\n```\n\n----------------------------------------\n\nTITLE: Sending a Basic Email with modSwiftMailer\nDESCRIPTION: Simple email sending example demonstrating how to set recipient, sender, subject, and body using modSwiftMailer's methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modswiftmailer/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('mail', 'mail.modSwiftMailer');\n\n$modx->mail->address('to', 'recipient@domain.tld', 'Recipient');\n$modx->mail->address('sender', 'sender@domain.tld');\n$modx->mail->subject('Dear GOD why won\\'t my code function properly!');\n$modx->mail->body(print_r($data, true));\n\n$modx->mail->send();\n```\n\n----------------------------------------\n\nTITLE: Escaping Custom Table Name in modX\nDESCRIPTION: Safely escapes a provided custom table name to prevent SQL injection risks and ensure integrity within queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nor modX->escape($customTableName)\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Page Title with MODX Revolution Tags in HTML\nDESCRIPTION: Illustrates how to create a dynamic page title using both system and resource tags in MODX Revolution. This example combines the site name and the page title.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<title>[[++site_name]] | [[*pagetitle]]</title>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Chunks from Category Example\nDESCRIPTION: Example demonstrating how to retrieve all Chunk objects related to a Category object and iterate through them to display chunk names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/getmany.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$category = $xpdo->getObject('Category',1);\n$chunks = $category->getMany('Chunk');\nforeach ($chunks as $chunk) {\n   echo $chunk->get('name').'<br />';\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax for modUser::addSessionContext Method in PHP\nDESCRIPTION: This snippet shows the syntax for the addSessionContext method of the modUser class. It takes a string parameter representing the context to be added to the user session.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.addsessioncontext.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nvoid addSessionContext (string $context)\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Output Filters in MODX\nDESCRIPTION: Example of chaining output modifiers to format a date string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[[+mydate:strtotime:date=`%Y-%m-%d`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Static Resource Include Usage\nDESCRIPTION: Example of how to call the include snippet with a direct file path in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/static-resources-and-elements.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[include? &file=`/path/to/my/svn/checkout/snippet.php`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Items in MODX PHP\nDESCRIPTION: Demonstrates how to add multiple menu items to a MODX component, including setting controllers and descriptions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/package-build.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$tmp = array(\n    'sendex' => array(\n        'description' => 'sendex_menu_desc',\n        'action' => array(\n            'controller' => 'index',\n        ),\n    ),\n    'another_menu' => array(\n        'description' => 'My description',\n        'action' => array(\n        'controller' => 'and here is the file controller',\n        ),\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validation Messages in PHP using xPDOValidator\nDESCRIPTION: This snippet demonstrates how to use the getMessages method to retrieve validation error messages after performing validation on an object. It iterates through the messages and displays them.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.getmessages.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n   $errorMessages = $validator->getMessages();\n   foreach ($errorMessages as $message) {\n       echo 'An error occurred on field \"'.$message['field'].'\": '.$message['message'];\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Snippets with MODX @EVAL Binding in PHP\nDESCRIPTION: This code uses the MODX @EVAL binding to execute PHP and runs the snippet 'listMyResources', passing a 'parent' parameter with its properties. The result is returned for use in the 'Listbox (multi-select)' input type of a template variable. The $modx object is used to run the snippet within an eval statement.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@EVAL return $modx->runSnippet('listMyResources',array('parent' => 9));\n```\n\n----------------------------------------\n\nTITLE: Checking Service Availability with modRest\nDESCRIPTION: Example of how to verify if a service is responding by setting a timeout and checking for responseError. This helps identify when services are down or responding too slowly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$url = 'http://site.ru/rest/mymethod';\n/* @var modRest $client */\n$client = $modx->getService('rest', 'rest.modRest');\n$client->setOption('timeout', 15); // Set the timeout\n$response = $client->get($url);\nif ($response->responseError) {\n    echo $response->responseError; // print error message\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Resource-Specific Media Source in MODX\nDESCRIPTION: PHP code snippet for setting up a dynamic media source that creates a unique folder for each resource. It uses the migxResourceMediaPath snippet to generate the path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/use-resource-specific-mediasource-and-multifile-uploader.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[migxResourceMediaPath?\n    &pathTpl=`assets/resourceimages/{id}/`\n    &createFolder=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Form Fields in MODx Window\nDESCRIPTION: This JavaScript snippet demonstrates adding various form fields within a MODx window, showcasing different xtypes.  It defines fields for name, template, snippet, description, email subject, email from, email from name, email reply, active status, and image. It includes usage of textfield, numberfield, textarea, combo-boolean xtypes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\n,fields: [\n    {xtype: 'textfield',fieldLabel: _('name'),name: 'name',id: 'sendex-'+this.ident+'-name',anchor: '99%'}\n    ,{xtype: 'numberfield',fieldLabel: _('sendex_newsletter_template'),name: 'template',id: 'sendex-'+this.ident+'-template',anchor: '99%'}\n    ,{xtype: 'numberfield',fieldLabel: _('sendex_newsletter_snippet'),name: 'snippet',id: 'sendex-'+this.ident+'-snippet',anchor: '99%'}\n    ,{xtype: 'textarea',fieldLabel: _('description'),name: 'description',id: 'sendex-'+this.ident+'-description',height: 150,anchor: '99%'}\n\n    ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_subject'),name: 'email_subject',id: 'sendex-'+this.ident+'-email_subject',anchor: '99%'}\n    ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_from'),name: 'email_from',id: 'sendex-'+this.ident+'-email_from',anchor: '99%'}\n    ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_from_name'),name: 'email_from_name',id: 'sendex-'+this.ident+'-email_from_name',anchor: '99%'}\n    ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_reply'),name: 'email_reply',id: 'sendex-'+this.ident+'-email_reply',anchor: '99%'}\n\n    ,{xtype: 'combo-boolean',fieldLabel: _('sendex_newsletter_active'),name: 'active',hiddenName: 'active',id: 'sendex-'+this.ident+'-active',anchor: '50%'}\n    ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_image'),name: 'image',id: 'sendex-'+this.ident+'-image',anchor: '99%'}\n]\n\n```\n\n----------------------------------------\n\nTITLE: Extending Gallery Database Schema with XML\nDESCRIPTION: Defines XML schema for creating tag and tag-image relationship tables in MODX xPDO, establishing relationships between gallery images and tags\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/add-image-tagging.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"mygalTag\" table=\"migx_gallery_tags\" extends=\"xPDOSimpleObject\">\n    <field key=\"tag\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" index=\"index\" />\n    <field key=\"alias\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" index=\"index\" />\n    <composite alias=\"Images\" class=\"mygalTagImage\" local=\"id\" foreign=\"tag\" cardinality=\"many\" owner=\"local\" />\n</object>\n<object class=\"mygalTagImage\" table=\"migx_gallery_tag_images\" extends=\"xPDOObject\">\n    <field key=\"tag\" dbtype=\"integer\" attributes=\"unsigned\" precision=\"10\" phptype=\"int\" null=\"false\" index=\"pk\" />\n    <field key=\"image\" dbtype=\"integer\" attributes=\"unsigned\" precision=\"10\" phptype=\"int\" null=\"false\" index=\"pk\" />\n    <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\" type=\"BTREE\">\n        <column key=\"tag\" length=\"\" collation=\"A\" null=\"false\" />\n        <column key=\"image\" length=\"\" collation=\"A\" null=\"false\" />\n    </index>\n    <aggregate alias=\"Tag\" class=\"mygalTag\" local=\"tag\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n    <aggregate alias=\"Image\" class=\"myGallery\" local=\"image\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: Logging User Logout Actions with OnWebLogout in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a plugin that responds to the OnWebLogout event in MODX. It logs information about the user who logged out, including their user ID and the contexts they were logged out from.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onweblogout.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnWebLogout':\n        $id = $user->get('id');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'User with id logged out '.$id.' out of context '.$loginContext.' and these more '.print_r($addContexts));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Error Flag Placeholder\nDESCRIPTION: This snippet demonstrates how to use the `[[!+fi.validation_error]]` placeholder to check for validation errors in FormIt. It returns 1 if there are errors and 0 if there are no errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!+fi.validation_error]]\n```\n\n----------------------------------------\n\nTITLE: Handling Prefixed Keys with fromArray() in PHP\nDESCRIPTION: Shows how to use fromArray() with a key prefix to strip 'ghost_' prefixes from the provided array keys when setting object fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/fromarray.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$object->fromArray(array(\n    'ghost_fname' => 'Nearly Headless',\n    'ghost_lname' => 'Nick',\n),'ghost_');\necho $object->get('fname').' '.$object->get('lname');\n// prints \"Nearly Headless Nick\"\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Error Message Placeholder\nDESCRIPTION: This snippet shows how to use the `[[!+fi.validation_error_message]]` placeholder to display a general validation error message in FormIt. The message can be customized using the `&validationErrorMessage` property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!+fi.validation_error_message]]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Menu in MIGXdb\nDESCRIPTION: This snippet provides instructions for adding a new menu item within the Components section of MIGXdb, specifying the lexicon key, action, and parameters required for setup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem->Actions\nright-click 'Components' ->Place Action here\n- lexicon key: **migx**\n- action: **migx - index**\n- parameters: `&configs=packagemanager||migxconfigs||setup`\n```\n\n----------------------------------------\n\nTITLE: Instantiating xPDO with Custom Loader Classes in PHP\nDESCRIPTION: This code snippet demonstrates how to specify custom loader classes when instantiating an xPDO instance. The custom loader class 'myCustomLoaderClass' is added to the options array using the xPDO::OPT_LOADER_CLASSES key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/static-object-loaders/using-custom-loader-classes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo = new xPDO($dsn, $username, $password, array(\n    xPDO::OPT_LOADER_CLASSES => array('myCustomLoaderClass')\n));\n```\n\n----------------------------------------\n\nTITLE: Validating Math Input as Required\nDESCRIPTION: This snippet illustrates how to validate the math input field as a required field within a FormIt form. It configures FormIt to ensure that users must answer the mathematical question before submitting the form.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.hooks/math.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &hooks=`math` &validate=`math:required`]]\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Form Fields in Custom FormIt Hooks (PHP)\nDESCRIPTION: Shows how to access form field values and set new values within a custom FormIt hook. Includes examples for both single and multiple value fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = $hook->getValue('email');\n$allFormFields = $hook->getValues();\n\n$hook->setValue('email','john.doe@fake-emails.com');\n$hook->setValues(array(\n    'name' => 'John Doe',\n    'books' => 'Hunger Games,To Kill a Mockingbird,Mindset',\n));\n\n$hook->setValue('hobbies',json_encode(array('music','films','books')));\n```\n\n----------------------------------------\n\nTITLE: Using modX.switchContext Method in PHP\nDESCRIPTION: The switchContext method allows switching the primary Context for a modX instance. It takes the context key as a required parameter and an optional reload parameter that forces context data regeneration before switching. The method returns a boolean value indicating success or failure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.switchcontext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean switchContext (string $contextKey, [boolean $reload = false])\n```\n\n----------------------------------------\n\nTITLE: Generating Google Sitemap with Custom Template in MODX Revolution\nDESCRIPTION: This snippet call generates a Google Sitemap using a custom item template Chunk. It uses the legacy version of GoogleSiteMap, which is suitable for a modest number of Resources but may time out with a large number of pages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap? &itemTpl=`myCustomTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Modifying index.php for MODX Context Initialization\nDESCRIPTION: Change to the index.php file that initializes MODX with the 'dev' context instead of the default 'web' context. This allows MODX to load the correct context for the subdomain.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/virtual-host.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->initialize('web');\n```\n\n----------------------------------------\n\nTITLE: Image+ Template Variable Input Options in JSON\nDESCRIPTION: JSON configuration options for Image+ template variables in MODX. These options control image dimensions, aspect ratio, thumbnail settings, and whether to allow additional metadata like alt tags, captions, and credits.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"targetWidth\": \"\",\n    \"targetHeight\": \"\",\n    \"targetRatio\": \"\",\n    \"thumbnailWidth\": \"\",\n    \"allowAltTag\": \"true\",\n    \"allowCaption\": \"false\",\n    \"allowCredits\": \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging xPDOQuery SQL Output\nDESCRIPTION: Shows how to debug xPDOQuery by preparing and displaying the generated SQL query using the toSQL() method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$c = $xpdo->newQuery('Person');\n// add filters here...\n$c->prepare();\nprint $c->toSQL();\n```\n\n----------------------------------------\n\nTITLE: User Login Processor Implementation\nDESCRIPTION: Shows how to implement user authentication using MODX's security/login processor with username and password credentials.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$username = 'ivanpetrov';\n$password = '*********';\n$data = array(\n    'username' => $username,\n    'password' => $password,\n    'rememberme' => 1,\n    'login_context' => 'web',\n);    \n$response = $modx->runProcessor('/security/login', $data);\nif ($response->isError()) {\n    $modx->log(modX::LOG_LEVEL_ERROR, 'login error. Username: '.$username.', Message: '.$response->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced siblingNav Navigation with Parents and Limits\nDESCRIPTION: Complex siblingNav call demonstrating limit configuration, parent-based navigation, and custom placeholder prefixes for navigating between child resources of multiple parents.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siblingnav/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!siblingNav? &limit=`7` &id=`[[*parent]]` &placeholderPrefix=`snparent.`]]\n[[+snparent.prev]][[+snparent.prevlinks]][[+snparent.self]][[+snparent.nextlinks]][[+snparent.next]]\n\n[[!siblingNav? &limit=`9` &parents=`29,261`]]\n[[+sn.first]][[+sn.prev]][[+sn.prevlinks]][[+sn.self]][[+sn.nextlinks]][[+sn.next]][[+sn.last]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Field Values with xPDOObject::get() in PHP\nDESCRIPTION: This snippet demonstrates the syntax for the get() method of xPDOObject. It shows how to retrieve a single field value or multiple field values, with optional formatting parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/get.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nmixed get(\n   string|array $k,\n   [string|array $format = null],\n   [mixed $formatTemplate = null]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Advanced Fields using runProcessor in MODX\nDESCRIPTION: This code shows how to create a complete user in MODX with advanced fields, group assignments, password generation, and email notification using the runProcessor method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/processors/using-runprocessor.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$groups = array();\n$groups['Group1']['usergroup'] = '7'; // ID of group\n$groups['Group1']['role'] = '1'; // ID of role\n$groups['Group2']['usergroup'] = '8';\n$groups['Group2']['role'] = '1';\n$fields = array();\n$fields['active'] = true;\n$fields['passwordgenmethod'] = 'g';\n$fields['passwordnotifymethod'] = 'e';\n$fields['email'] = $email;\n$fields['username'] = $username;\n$fields['fullname'] = $fullname;\n$fields['extended']['container']['name'] = $value;\n$fields['groups'] = $groups;\n$response = $modx->runProcessor('security/user/create', $fields);\n```\n\n----------------------------------------\n\nTITLE: Installing xPDOTransport Package with Options\nDESCRIPTION: Syntax definition for installing a transport package using xPDOTransport. The method accepts an optional array of options and returns a boolean indicating success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdotransport/xpdotransport.install.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean install ([array $options = array ()])\n```\n\n----------------------------------------\n\nTITLE: Getting Primary Key Field Name - PHP Syntax\nDESCRIPTION: Basic syntax definition for the getPK() method which returns the primary key field name(s) as a mixed type.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getpk.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed getPK ()\n```\n\n----------------------------------------\n\nTITLE: Accessing Extended User Data in PHP\nDESCRIPTION: Example snippet showing how to interact with extended user data in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('extendeduser', MODX_CORE_PATH . 'components/extendeduser/model/', 'ext_');\n$user = $modx->getObject('extUser', 123); // where 123 is the id of a user\n$data = $user->getOne('Data'); // use the alias from the schema\n// toArray will print all the extra data, e.g. facebook_url\nreturn print_r($data->toArray(), true);\n```\n\n----------------------------------------\n\nTITLE: Calculating a Field Value Based on Parent in MODX in PHP\nDESCRIPTION: Plugin to automatically set a specific template (4) for resources under a particular parent (123). This demonstrates how to modify resource properties before saving.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforedocformsave.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ($resource->get('parent') == 123) {\n    $resource->set('template', 4);\n}\n```\n\n----------------------------------------\n\nTITLE: ModX regClientCSS Method Declaration\nDESCRIPTION: Method signature for registering CSS to be injected inside the HEAD tag of a resource. Takes source CSS file path and optional media type parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientcss.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid regClientCSS (string $src, [string $media = null])\n```\n\n----------------------------------------\n\nTITLE: Implementing TV Output Controller in PHP\nDESCRIPTION: Output controller class that handles the frontend rendering of the custom TV value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-tvs/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif(!class_exists('TemplateSelectOutputRender')) {\n    class TemplateSelectOutputRender extends modTemplateVarOutputRender {\n        public function process($value,array $params = array()) {\n            return '<div class=\"template\">'.$value.'</div>';\n        }\n    }\n}\nreturn 'TemplateSelectOutputRender';\n```\n\n----------------------------------------\n\nTITLE: Using the getSelections Snippet with Collections\nDESCRIPTION: PHP code snippet showing how to use the getSelections snippet to display selected resources from a Selections container. This snippet acts as a wrapper for getResources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/collections/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getSelections?\n    &selections=`[[*id]]`\n    &tpl=`myTplChunk`\n]]\n```\n\n----------------------------------------\n\nTITLE: Set Placeholders in modX with namespace\nDESCRIPTION: This code snippet demonstrates how to use the `setPlaceholders` method to set multiple placeholders within modX.  It defines an associative array of placeholders ('name' and 'email') and then calls `$modx->setPlaceholders` to register them with the system, prefixing each placeholder key with 'my.'. This allows for namespaced placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.setplaceholders.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"$modx->setPlaceholders(array(\n   'name' => 'John',\n   'email' => 'jdoe@gmail.com',\n),'my.');\"\n```\n\n----------------------------------------\n\nTITLE: Resource Properties and Page ID Access in PHP\nDESCRIPTION: Demonstrates how to access resource properties and page ID after saving, with mode detection for new vs updated resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Log all available properties of the $resource\n$modx->log(modX::LOG_LEVEL_ERROR, print_r($resource->toArray(),true) );\n// Get the page id\n$page_id = $resource->get('id');\n// or simply\n$page_id = $id;\n\nif ($mode == 'new') {\n    // resource created\n}\nelse {\n   // existing resource was updated\n}\n```\n\n----------------------------------------\n\nTITLE: Default Quip Comment Template Implementation in HTML\nDESCRIPTION: The default template chunk for displaying individual comments in Quip. Includes support for nested comments, gravatar images, comment metadata, and moderation options. Uses MODX placeholders for dynamic content insertion.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip/tplcomment.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<li class=\"[[+cls]]\" id=\"[[+idprefix]][[+id]]\" [[+depth_margin:notempty=`style=\"padding-left: [[+depth_margin]]px\"`]]>\n<div id=\"[[+idprefix]][[+id]]-div\" class=\"quip-comment-body [[+alt]]\">\n    <div class=\"quip-comment-right\">\n        [[+gravatarUrl:notempty=`<img src=\"[[+gravatarUrl]]\" class=\"quip-avatar\" alt=\"\" />`]]\n    </div>\n\n    <p class=\"quip-comment-meta\">\n        <span class=\"quip-comment-author\">[[+authorName]]:</span><br />\n        <span class=\"quip-comment-createdon\"><a href=\"[[+url]]\">[[+createdon]]</a>\n        [[+approved:if=`[[+approved]]`:is=`1`:then=``:else=`- <em>[[%quip.unapproved? &namespace=`quip` &topic=`default`]]</em>`]]\n        </span>\n    </p>\n\n    <div class=\"quip-comment-text\">\n        <p>[[+body]]</p>\n\n        [[+replyUrl:notempty=`<p><span class=\"quip-reply-link\"><a href=\"[[+replyUrl]]\">[[%quip.reply? &namespace=`quip` &topic=`default`]]</a></span></p>`]]\n    </div>\n\n    <div class=\"quip-comment-options\">\n        [[+report]]\n        [[+options]]\n    </div>\n    <div class=\"quip-break\"></div>\n</div>\n    [[+children:notempty=`<ol class=\"quip-comment-list\">[[+children]]</ol>`]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: FormItRetriever Usage on Thank You Page in MODX\nDESCRIPTION: Demonstrates how to use FormItRetriever on a thank you page to display submitted form data and redirect if not found.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.formitretriever.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!FormItRetriever? &redirectToOnNotFound=`444`]]\n<p>Thanks [[!+fi.name]] for submitting. An auto-response email will be sent to you at [[!+fi.email]]. Here's a copy of your message:</p>\n[[!+fi.message]]\n```\n\n----------------------------------------\n\nTITLE: Implementing FormItStateOptions in a Form Select Element (PHP)\nDESCRIPTION: This snippet demonstrates how to use FormItStateOptions within a select element in a form. It includes the FormItStateOptions call and shows how to pass the previously selected state value to maintain form state.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.formitstateoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<select name=\"state\">\n[[!FormItStateOptions? &selected=`[[!+fi.state]]`]]\n</select>\n```\n\n----------------------------------------\n\nTITLE: HTML Output Generated by MetaX CSS Property\nDESCRIPTION: Demonstrates the HTML output generated by the MetaX snippet when using the &css property with Internet Explorer conditional statements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/metax/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"file1.css\" type=\"text/css\" />\n<!--[if lte IE 7]>\n<link rel=\"stylesheet\" href=\"file2.css\" type=\"text/css\" />\n<![endif]-->\n<!--[if lt IE 7]>\n<link rel=\"stylesheet\" href=\"file3.css\" type=\"text/css\" />\n<![endif]-->\n```\n\n----------------------------------------\n\nTITLE: Getting Parent IDs with Context Specification\nDESCRIPTION: Example showing how to get parent IDs while explicitly specifying the context to avoid issues with wrong context cache.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getparentids.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$pids = $modx->getParentIds($id, 10, array('context' => 'web'));\n```\n\n----------------------------------------\n\nTITLE: Setting TV Value on OnDocFormSave in PHP\nDESCRIPTION: This snippet demonstrates how to set a Template Variable (TV) value when the `OnDocFormSave` event is triggered.  It checks if the resource's template is 8 and, if so, sets the TV 'my_tv' to 'Some Value'. It also includes error logging if setting the TV value fails.  This example shows conditional TV modification based on resource template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nswitch ($modx->event->name) {\n\n        // Documents\n        case 'OnDocFormSave':\n            if ($resource->get('template') == 8) {  \n                if(!$resource->setTVValue('my_tv', 'Some Value')) {\n                    $modx->log(modX::LOG_LEVEL_ERROR, 'There was a problem setting the TV value.');\n                }\n            }\n\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Using handleRequest Method in MODX\nDESCRIPTION: Demonstrates how to call the handleRequest method on a MODX instance to process the current request.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.handlerequest.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->handleRequest();\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax for modX::runProcessor\nDESCRIPTION: The basic method signature for running a MODX processor, which takes an action string, properties array, and options array as parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.runprocessor.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed runProcessor(string $action = '', array $scriptProperties = array(), array $options = array())\n```\n\n----------------------------------------\n\nTITLE: Using Custom Template Variables in Wayfinder\nDESCRIPTION: This snippet demonstrates how to use a placeholder without the 'wf.' prefix to access custom template variables (TVs) in MODX's Wayfinder. It highlights that only the raw TV value will be returned, necessitating further processing with the 'processTV' snippet to get the fully formatted output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n... <img src=\"[[processTV? &myId=`[[+id]]` &myTV=`icon` ]]\" /> ...\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$doc = $modx->getObject('modResource', $myId);\nreturn $doc->getTVValue($myTV);\n?>\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Conditional Rendering\nDESCRIPTION: Example of an element that only appears when Fred is active, useful for editor instructions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p data-fred-render=\"false\" class=\"editor-instructions\">\n    Add a *Link Location* setting for this Element to make a call to action\n    button appear. (This block is only visible when using Fred.)\n</p>\n```\n\n----------------------------------------\n\nTITLE: Fetching Table Metadata in modX\nDESCRIPTION: Retrieves metadata for a given database table, allowing users to understand the structure and constraints applied to that table.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->getTableMetaData($table)\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Resources in MODX Snippet\nDESCRIPTION: This code snippet loops through the related page IDs, fetches the corresponding resources, and formats them using the specified template chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nforeach ($ids as $key => $value) {\n  $resource = $modx->getObject('modResource',array(\n    'published' => 1,\n    'id' => $value));\n  if ($resource instanceof modResource) {\n    $output[] = $modx->getChunk($tpl,$resource->toArray());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MODX Manager Page Section\nDESCRIPTION: Implements the main page section that loads and configures the home panel component in the MODX manager interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nExt.onReady(function() {\n    MODx.load({ xtype: \"doodles-page-home\"});\n});\nDoodles.page.Home = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        components: [{\n            xtype: \"doodles-panel-home\",\n            renderTo: \"doodles-panel-home-div\"\n        }]\n    });\n    Doodles.page.Home.superclass.constructor.call(this,config);\n};\nExt.extend(Doodles.page.Home, MODx.Component);\nExt.reg(\"doodles-page-home\",Doodles.page.Home);\n```\n\n----------------------------------------\n\nTITLE: Invoking Events with Parameters in MODX PHP\nDESCRIPTION: Method signature for invokeEvent showing the required eventName parameter and optional params array. The method returns void and is used to trigger system events in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.invokeevent.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid invokeEvent (string $eventName, [array $params = array ()])\n```\n\n----------------------------------------\n\nTITLE: Initializing modX Class Reference\nDESCRIPTION: Basic class definition for modX that extends from xPDO, representing the core MODX Revolution class with access to various services and utilities.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass modX extends xPDO\n```\n\n----------------------------------------\n\nTITLE: Using xPDO::getIterator to Retrieve an Iterator of Objects in PHP\nDESCRIPTION: This code shows how to use xPDO's getIterator method to access a collection of objects in a memory-efficient way, iterating through the results without loading them all into memory at once.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$boxes = $xpdo->getIterator('Box', [\n  'width' => 14,\n]);\nforeach ($boxes as $box) {\n   echo $box->get('color').\"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: MODX Blog Post Template Chunk\nDESCRIPTION: Template chunk for displaying individual blog post previews in lists. Includes title, author, tags, excerpt, and metadata.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<article>\n  <h2>\n    <a href=\"[[~[[+id]]]]\">[[+pagetitle]]</a>\n  </h2>\n  <p>\n    Posted by [[+createdby:userinfo=`fullname`]]\n    [[+tv.tags:notempty=`\n      | <span class=\"tags\">Tags: [[!tolinks? &items=`[[+tv.tags]]` &tagKey=`tags` &target=`1`]]\n      </span>\n    `]]\n  </p>\n  <div>\n    <p>[[+introtext]]</p>\n  </div>\n  <footer class=\"meta\">\n    <span>\n      <a href=\"[[~[[+id]]]]\">Read more</a> |\n      <a href=\"[[~[[+id]]]]#comments\">\n        Comments ([[!QuipCount? &thread=`blog-post-[[+id]]`]])\n      </a> |\n      <time datetime=\"[[+publishedon:strtotime:date=`%Y-%m-%d`]]\">\n        [[+publishedon:strtotime:date=`%b %d, %Y`]]\n      </time>\n    </span>\n  </footer>\n</article>\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX for Package Building\nDESCRIPTION: Code that loads the MODX class, initializes a MODX instance in the manager context, and configures logging based on whether the script is run via command line or browser.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n$modx= new modX();\n$modx->initialize('mgr');\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n```\n\n----------------------------------------\n\nTITLE: HybridAuth Snippet Usage for User Registration (MODX)\nDESCRIPTION: MODX snippet call to implement HybridAuth for user registration with Google, Twitter, and Facebook, assigning new users to the 'Users' group.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hybridauth/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!HybridAuth? providers=`Google,Twitter,Facebook` &groups=`Users`]]\n```\n\n----------------------------------------\n\nTITLE: Generating Breadcrumb for Specific Resource in PHP\nDESCRIPTION: This snippet generates a breadcrumb path for a specific resource by specifying the resource ID using the 'to' parameter. This is useful for rendering breadcrumbs for pages other than the current one.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n[[BreadCrumb? &to=`72`]]\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Output Modifiers in MODX Revolution\nDESCRIPTION: Shows how to chain multiple output modifiers in sequence, with execution happening from left to right. This allows for complex transformations of data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]\n```\n\n----------------------------------------\n\nTITLE: Checking Method Availability with modRest\nDESCRIPTION: Example of how to check if a REST method exists by examining the HTTP status code in the responseInfo property. Returns 200 if the method is available or 404 if it doesn't exist.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$url = 'http://site.ru/rest/mymethod';\n/* @var modRest $client */\n$client = $modx->getService('rest', 'rest.modRest');\n$client->setOption('header', true); // Return title\n$response = $client->get($url);\nif (property_exists($response->responseInfo, 'scalar')) {\n    $code = $response->responseInfo->scalar;\n}\necho $code; // 200 - method is available, 404 - method or page does not exist\n```\n\n----------------------------------------\n\nTITLE: Building Output Array in MODX Snippet\nDESCRIPTION: Using modElement::toArray and modX::getChunk, this snippet builds an output array with parsed placeholders from resource objects. It demonstrates extending the MODX framework for dynamic content generation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nforeach ($ids as $key => $value) {\n  $resource = $modx->getObject('modResource',array(\n    'published' => 1,\n    'id' => $value));\n  if ($resource instanceof modResource) {\n    $output[] = $modx->getChunk($tpl,$resource->toArray());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MIGX Snippet for Looping Database Collection\nDESCRIPTION: Retrieves and displays database items using MIGX package and classname with a specified template chunk\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/creating-cmp/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!migxLoopCollection?\n    &packageName=`electrica`\n    &classname=`electricaItem`\n    &tpl=`testTPL`]]\n```\n\n----------------------------------------\n\nTITLE: Generating Events with PHP Snippet\nDESCRIPTION: The PHP snippet generates a list of events for a specified month and year, defaulting to the current month and year if none are provided. It creates an array of events with random dates within the month and returns them as a JSON string. The snippet can be used for debugging purposes. Dependencies include PHP with JSON and date-time functions. Input parameters are 'year' and 'month' from the request. The output is a JSON formatted string containing the events.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.generating-events.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$year = !empty($_REQUEST['year']) ? $_REQUEST['year'] : date('Y');\n$month = !empty($_REQUEST['month']) ? $_REQUEST['month'] : date('n');\n$days = date('t', strtotime(\"$year-$month\"));\n\n$start = strtotime(\"$year-$month-1\");\n$end = strtotime(\"$year-$month-$days\") + 60*60*23;\n\n$arr = array();\nfor ($i = 1; $i <= 10; $i++) {\n    $arr[] = array(\n            'date' => strftime('%Y-%m-%d %H:%M:%S', rand($start, $end))\n            ,'pagetitle' => 'Testing news '.$i\n            ,'introtext' => 'Lorem ipsum dolar'\n    );\n\n}\n\nreturn json_encode($arr);\n```\n\n----------------------------------------\n\nTITLE: Filtering CollectionGraph by Criteria in MODX, PHP\nDESCRIPTION: This snippet illustrates how to add criteria to an xPDO getCollectionGraph method to filter results. Specifically, it filters zip codes within the state of California, demonstrating the use of aliases in the criteria. It is essential for the `modx` instance to have proper configurations and the necessary schema aliases.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$criteria = $modx->newQuery('Zip');\n$criteria->where(['ST.statename' => 'CA']);\n$collection = $xpdo->getCollectionGraph('Zip', '{\"TZ\":{},\"ST\":{},\"CT\":{}}', $criteria);\nif ($collection) {\n    foreach ($collection as $obj) {\n        $out = $obj->toArray();\n        $out['timezone'] = $obj->TZ->get('tzname');\n        $out['state'] = $obj->ST->get('statename');\n        $out['county'] = $obj->CT->get('countyname');\n        print_r($out);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Errors in MODX Snippets\nDESCRIPTION: Example of how to log errors in MODX snippets to help users troubleshoot issues, such as missing required properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-snippet.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_ERROR, '[mySnippet] missing the &xyz property!');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Default Properties in Doodles Snippet\nDESCRIPTION: This snippet demonstrates how to set up default properties for a Doodles snippet including template, sort order, and direction. It initializes variables necessary for fetching data and prepares the output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n/* setup default properties */\n$tpl = $modx->getOption('tpl',$scriptProperties,'rowTpl');\n$sort = $modx->getOption('sort',$scriptProperties,'name');\n$dir = $modx->getOption('dir',$scriptProperties,'ASC');\n$output = '';\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Initializing Related Pages Snippet in MODX\nDESCRIPTION: This code snippet checks for input, sets the template chunk, and handles error cases for the related pages functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (empty($input)) { return 'This article is so unique, that we couldn\\'t find anything related to it!'; }\n$tpl = $modx->getOption('tpl',$scriptProperties,'relatedPagesTpl');\nif ($modx->getChunk($tpl) == '') { return 'We found some related pages, but don\\'t know how to present it.'; }\n```\n\n----------------------------------------\n\nTITLE: Converting PHP Array to JSON String with xPDO toJSON Method\nDESCRIPTION: Demonstrates how to use the xPDO::toJSON method to convert a PHP associative array into a JSON encoded string. The method takes an array as input and returns a JSON string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.tojson.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$ar = array('name' => 'John');\n$str = $xpdo->toJSON($ar);\necho $str; // prints: {name:\"John\"}\n```\n\n----------------------------------------\n\nTITLE: Initializing Extended User Service in MODX\nDESCRIPTION: Code snippet showing how to load and initialize the extended user service in MODX, including error handling if the service fails to load.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$x = $modx->getService('extendeduser','Sampleclass',$modx->getOption('core_path',null, MODX_CORE_PATH).'components/extendeduser/',$scriptProperties);\nif (!($x instanceof Extendeduser)) {\n    $modx->log(modX::LOG_LEVEL_ERROR,'[Extendeduser] Could not load Extendeduser class.');\n    $modx->event->output(true);\n}\nreturn;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Content with xFPCAjax in MODX Revolution\nDESCRIPTION: This snippet demonstrates how to use the xFPCAjax snippet to load dynamic content in a cached page. It replaces a direct snippet call with an AJAX-loaded version to maintain page caching while still providing dynamic content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/xfpc/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[xFPCAjax?\n    &resource=`300`\n]]\n```\n\n----------------------------------------\n\nTITLE: Sending Emails to Multiple Recipients with modPHPMailer\nDESCRIPTION: This code snippet shows how to address an email to multiple recipients using modPHPMailer in MODX Revolution by calling the address method multiple times with different email addresses.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modmail.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->mail->address('to','user@example.com');\n$modx->mail->address('to','mom@example.org');\n```\n\n----------------------------------------\n\nTITLE: Handling Fred Element Setting Change Event in JavaScript\nDESCRIPTION: Event listener implementation for when settings are changed on any Fred Element. Triggers the $owl() function to reinitialize carousel functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/js_events.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener(\"FredElementSettingChange\", function() {\n    $owl();\n});\n```\n\n----------------------------------------\n\nTITLE: Calling getPage Snippet\nDESCRIPTION: This code snippet demonstrates how to call the getPage snippet in MODX Revolution. It specifies the element to be processed (`getResources`) and its class (`modSnippet`). Note the use of the non-cacheable token `!` to prevent caching issues.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getpage/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage?\n    &elementClass=`modSnippet`\n    &element=`getResources`\n]]\n```\n\n----------------------------------------\n\nTITLE: Registering Custom xtype in ExtJS\nDESCRIPTION: This JavaScript snippet defines and registers a custom xtype in ExtJS for use within MODx. It creates a combo box specifically for selecting snippets, utilizing the MODx connectors URL to fetch snippet data.  It configures the combo box with display and value fields, and sets up parameters for retrieving the snippet list.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nSendex.combo.Snippet = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        name: 'snippet'\n        ,hiddenName: 'snippet'\n        ,displayField: 'name'\n        ,valueField: 'id'\n        ,fields: ['id','name']\n        ,pageSize: 10\n        ,hideMode: 'offsets'\n        ,url: MODx.config.connectors_url + 'element/snippet.php'\n        ,baseParams: {\n            action: 'getlist'\n        }\n    });\n    Sendex.combo.Snippet.superclass.constructor.call(this,config);\n};\nExt.extend(Sendex.combo.Snippet,MODx.combo.ComboBox);\nExt.reg('sendex-combo-snippet',Sendex.combo.Snippet);\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Implementation\nDESCRIPTION: PHP code showing how to implement basic validation using the generated model and handle validation errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$modx->addPackage('test','/path/to/my/test/model/','test_');\n$obj = $modx->newObject('myTest');\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $output .= 'An error occurred on field \"'.$errorMsg['field'].'\": '.$errorMsg['message'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Load More Button Implementation\nDESCRIPTION: pdoPage implementation with button-based Ajax loading of additional content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<div id=\"pdopage\">\n    [[!+page.nav]]\n    <div class=\"rows\">\n        [[!pdoPage?\n            &parents=`0`\n            &ajaxMode=`button`\n            &limit=`5`\n        ]]\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Getting Document in modX\nDESCRIPTION: Retrieves a specific document object of type 'modResource' based on defined criteria, facilitating access to content resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nmodX->getDocument\n```\n\n----------------------------------------\n\nTITLE: FormIt - Custom Validators Property\nDESCRIPTION: This snippet demonstrates how to register a custom validator snippet with FormIt using the `&customValidators` property. This property is required for FormIt to recognize and execute the custom validator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &customValidators=`isBigEnough`]]\n```\n\n----------------------------------------\n\nTITLE: Using Lexicons in MODX Templates\nDESCRIPTION: This snippet demonstrates how to call lexicon strings in MODX templates using the placeholder tag syntax. It includes parameters for specifying the topic, namespace, and language of the lexicon entry.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/i18n/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[%key? &topic=`topicname` &namespace=`namespace_name` &language=`en`]]\n```\n\n----------------------------------------\n\nTITLE: Complex Query Snippet in PHP\nDESCRIPTION: Demonstrates a more complex database query using xPDO in MODX. This snippet retrieves resources based on specific criteria and sorts them.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$c = $modx->newQuery('modResource');\n$c->where(array(\n   'parent:IN' => array(23,24,25),\n   'deleted' => false,\n   'hidemenu' => false,\n   'published' => true,\n));\n$c->sortby('menuindex','ASC');\n$c->limit(10);\n$resources = $modx->getCollection('modResource',$c);\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Processor in PHP\nDESCRIPTION: PHP processor class that handles the creation of new Doodle objects with validation for name uniqueness and required fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DoodleCreateProcessor extends modObjectCreateProcessor {\n    public $classKey = 'Doodle';\n    public $languageTopics = array('doodles:default');\n    public $objectType = 'doodles.doodle';\n    public function beforeSave() {\n        $name = $this->getProperty('name');\n        if (empty($name)) {\n            $this->addFieldError('name',$this->modx->lexicon('doodles.doodle_err_ns_name'));\n        } else if ($this->doesAlreadyExist(array('name' => $name))) {\n            $this->addFieldError('name',$this->modx->lexicon('doodles.doodle_err_ae'));\n        }\n        return parent::beforeSave();\n    }\n}\nreturn 'DoodleCreateProcessor';\n```\n\n----------------------------------------\n\nTITLE: PDF to JPG Conversion with phpThumbOf in MODX\nDESCRIPTION: Demonstrates converting PDF files to JPG previews with specific width constraints using two different methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/phpthumbof/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[*downloadable-pdf:phpthumbof=`w=610&f=jpg`]]\n\n[[!phpthumbof? &input=`[[+pdf-link]]` &options=`&w=610&f=jpg`]]\n```\n\n----------------------------------------\n\nTITLE: Optimized Many-to-Many Query in PHP\nDESCRIPTION: PHP code showing an optimized way to fetch related owners for a store using xPDO's query builder instead of multiple separate queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/relationships.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$c = $xpdo->newQuery('sfOwner');\n$c->innerJoin('sfStoreOwner','StoreOwners');\n$c->where(array(\n   'StoreOwners.store' => 43, // the ID of our Store\n));\n$owners = $xpdo->getCollection('sfOwner',$c);\nforeach ($owners as $owner) {\n   echo $owner->get('name').'<br />';\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Image Resizing with phpThumbOf in MODX\nDESCRIPTION: Transforms an image to fixed dimensions of 120x120 pixels using phpThumbOf output filter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/phpthumbof/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*image:phpthumbof=`w=120&h=120`]]\n```\n\n----------------------------------------\n\nTITLE: Loading Lexicon Topics in PHP\nDESCRIPTION: Demonstrates various ways to load lexicon topics in PHP, including namespace-specific and language-specific loading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/internationalization.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon->load('topicname');\n$modx->lexicon->load('school:default');\n$modx->lexicon->load('chunk','user','school:playground');\n$modx->lexicon->load('es:school:playground');\n```\n\n----------------------------------------\n\nTITLE: Advanced Search Customization with AdvSearch in MODX\nDESCRIPTION: This snippet is a customized search query that searches within the 'introtext' field and a custom TV 'mytv'. It specifies the fields to display and the number of extracts to show, storing results in a placeholder named 'results'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!AdvSearch?\n    &withFields=`introtext`\n    &withTVs=`mytv`\n    &fields=`pagetitle,introtext`\n    &showExtract=`2:introtext`\n    &toPlaceholder=`results`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX TV for Child Resource Processing - PHP File\nDESCRIPTION: This PHP configuration snippet sets custom configurations for the MIGXdb processing of child resources, including the inclusion of TVs that need to be edited or displayed in the management grid.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/manage-child-resources-in-a-grid-tv-with-help-of-migxdb.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$this->customconfigs['includeTVs'] = 1;\n$this->customconfigs['includeTVList'] = 'price,images,categories';\n?>\n```\n\n----------------------------------------\n\nTITLE: Complete MODX Transport Package Build Script\nDESCRIPTION: The main build script that handles package creation, namespace registration, and transport package compilation. Sets up package metadata, defines file paths, and initializes the MODX environment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$tstart = explode(' ', microtime());\n$tstart = $tstart[1] + $tstart[0];\nset_time_limit(0);\n\n/* define package names */\ndefine('PKG_NAME','Doodles');\ndefine('PKG_NAME_LOWER','doodles');\ndefine('PKG_VERSION','1.0');\ndefine('PKG_RELEASE','beta4');\n\n/* define build paths */\n$root = dirname(dirname(__FILE__)).'/';\n$sources = array(\n    'root' => $root,\n    'build' => $root . '_build/',\n    'data' => $root . '_build/data/',\n    'resolvers' => $root . '_build/resolvers/',\n    'chunks' => $root.'core/components/'.PKG_NAME_LOWER.'/chunks/',\n    'lexicon' => $root . 'core/components/'.PKG_NAME_LOWER.'/lexicon/',\n    'docs' => $root.'core/components/'.PKG_NAME_LOWER.'/docs/',\n    'elements' => $root.'core/components/'.PKG_NAME_LOWER.'/elements/',\n    'source_assets' => $root.'assets/components/'.PKG_NAME_LOWER,\n    'source_core' => $root.'core/components/'.PKG_NAME_LOWER,\n);\nunset($root);\n\n/* override with your own defines here (see build.config.sample.php) */\nrequire_once $sources['build'] . 'build.config.php';\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n$modx= new modX();\n$modx->initialize('mgr');\necho ''; /* used for nice formatting of log messages */\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget('ECHO');\n\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$builder = new modPackageBuilder($modx);\n$builder->createPackage(PKG_NAME_LOWER,PKG_VERSION,PKG_RELEASE);\n$builder->registerNamespace(PKG_NAME_LOWER,false,true,'{core_path}components/'.PKG_NAME_LOWER.'/');\n\n/* zip up package */\n$modx->log(modX::LOG_LEVEL_INFO,'Packing up transport package zip...');\n$builder->pack();\n\n$tend= explode(\" \", microtime());\n$tend= $tend[1] + $tend[0];\n$totalTime= sprintf(\"%2.4f s\",($tend - $tstart));\n$modx->log(modX::LOG_LEVEL_INFO,\"\\n<br />Package Built.<br />\\nExecution time: {$totalTime}\\n\");\n\n\nsession_write_close();\nexit ();\n```\n\n----------------------------------------\n\nTITLE: Displaying Child Resources with pdoPage in MODX - PHP\nDESCRIPTION: This snippet demonstrates how to display child resources using the pdoPage snippet in MODX. It uses an inline template to format the output with the resource index and title linked to its URI.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &tpl=`@INLINE <p>[[+idx]] <a href=\"/[[+uri]]\">[[+pagetitle]]</a></p>`\n]]\n[[!+page.nav]]\n```\n\n----------------------------------------\n\nTITLE: Example: Getting User Session Contexts in MODX Revolution (PHP)\nDESCRIPTION: This example demonstrates how to retrieve all user session contexts for a user that is logged into the web and mgr contexts. The result is an array of context keys.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.getsessioncontexts.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$keys = $user->getSessionContexts();\nprint_r($keys); // prints Array ( 'web', 'mgr' );\n```\n\n----------------------------------------\n\nTITLE: Adding Related Object with xPDOObject::addOne() in PHP\nDESCRIPTION: Demonstrates how to use the addOne() method to add a Rank object to a Person object and save both through cascading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/addone.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$person = $xpdo->newObject('Person',1);\n$person->set('fname','Johnny');\n$person->set('lname','Benjamins');\n$rank = $xpdo->newObject('Rank');\n$rank->set('title','CEO');\n$rank->set('level',1);\n$person->addOne($rank);\n$person->save(); // will save both person and rank\n```\n\n----------------------------------------\n\nTITLE: SimpleSearch Snippet Call with Custom Search Index\nDESCRIPTION: This PHP snippet shows how to invoke the SimpleSearch snippet while setting a custom searchIndex parameter. This ensures that the search field aligns with the specified index in the HTML template form ('my_custom_search_field'). Correct setup is crucial to capture search terms submitted via the form.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.simplesearchform.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch? &searchIndex=`my_custom_search_field`]]\n```\n\n----------------------------------------\n\nTITLE: Example of Removing a Placeholder in MODX PHP\nDESCRIPTION: An example showing how to use the unsetPlaceholder method to remove a specific placeholder named 'myPlaceholder' from the system.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.unsetplaceholder.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->unsetPlaceholder('myPlaceholder');\n```\n\n----------------------------------------\n\nTITLE: MIGX Template Chunk for Item Display\nDESCRIPTION: Chunk template for rendering individual database item with title and description placeholders\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/creating-cmp/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<h1>[[+title]]</h1>\n<p>[[+description]]</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing User Registration Form in MODX\nDESCRIPTION: This code snippet demonstrates how to create a user registration form using the Register snippet in MODX. It includes form fields for username, password, fullname, and email, along with error handling and custom placeholder prefixes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register/example-form-1.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<h2>Register</h2>\n\n[[!Register?\n    &submitVar=`registerbtn`\n    &activationResourceId=`12`\n    &activationEmailTpl=`myActivationEmailTpl`\n    &activationEmailSubject=`Thanks for Registering!`\n    &submittedResourceId=`45`\n    &usergroups=`Marketing,Research`\n    &validate=`nospam:blank,\n  username:required:minLength=^6^,\n  password:required:minLength=^6^,\n  password_confirm:password_confirm=^password^,\n  fullname:required,\n  email:required:email`\n    &placeholderPrefix=`reg.`\n]]\n\n<div class=\"register\">\n    <div class=\"registerMessage\">[[!+reg.error.message]]</div>\n\n    <form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n        <input type=\"hidden\" name=\"nospam\" value=\"[[!+reg.nospam]]\" />\n\n        <label for=\"username\">[[%register.username? &namespace=`login` &topic=`register`]]\n            <span class=\"error\">[[!+reg.error.username]]</span>\n        </label>\n        <input type=\"text\" name=\"username\" id=\"username\" value=\"[[!+reg.username]]\" />\n\n        <label for=\"password\">[[%register.password]]\n            <span class=\"error\">[[!+reg.error.password]]</span>\n        </label>\n        <input type=\"password\" name=\"password\" id=\"password\" value=\"[[!+reg.password]]\" />\n\n        <label for=\"password_confirm\">[[%register.password_confirm]]\n            <span class=\"error\">[[!+reg.error.password_confirm]]</span>\n        </label>\n        <input type=\"password\" name=\"password_confirm\" id=\"password_confirm\" value=\"[[!+reg.password_confirm]]\" />\n\n        <label for=\"fullname\">[[%register.fullname]]\n            <span class=\"error\">[[!+reg.error.fullname]]</span>\n        </label>\n        <input type=\"text\" name=\"fullname\" id=\"fullname\" value=\"[[!+reg.fullname]]\" />\n\n        <label for=\"email\">[[%register.email]]\n            <span class=\"error\">[[!+reg.error.email]]</span>\n        </label>\n        <input type=\"text\" name=\"email\" id=\"email\" value=\"[[!+reg.email]]\" />\n\n        <br class=\"clear\" />\n\n        <div class=\"form-buttons\">\n            <input type=\"submit\" name=\"registerbtn\" value=\"Register\" />\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection from xPDO Model\nDESCRIPTION: This snippet retrieves a collection of objects from the 'sfStore' model using `$modx->getCollection()`. It then counts the number of objects in the collection and outputs the total count.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$stores = $modx->getCollection('sfStore');\necho 'Total: '.count($stores);\n```\n\n----------------------------------------\n\nTITLE: Setting Slimbox JS and CSS to Load at Page Bottom\nDESCRIPTION: This example shows how to configure a Slimbox gallery in MODX such that the JavaScript and CSS files load at the bottom of the webpage, potentially improving page load times by deferring unnecessary script execution. This is controlled by setting `&slimboxRenderJsOnStartup=\\`0\\``.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.plugins/slimbox.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[Gallery?\n    &album=\\`2\\`\n    &plugin=\\`slimbox\\`\n    &slimboxRenderJsOnStartup=\\`0\\`\n]]\n```\n\n----------------------------------------\n\nTITLE: LexRating Group Parameter in MODX Quip Comment Template\nDESCRIPTION: Illustrates how to set the group parameter for LexRating within a Quip comment template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lexrating/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n&group=`Overall Rating` // <== replace this\n```\n\n----------------------------------------\n\nTITLE: Reading Response Headers with modRest\nDESCRIPTION: Example of how to read response headers from a service call. Requires setting the 'header' option to true before sending the request, which makes the headers available in the responseHeaders property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$url = 'http://site.ru/rest/mymethod';\n/* @var modRest $client */\n$client = $modx->getService('rest', 'rest.modRest');\n$client->setOption('header', true);\n$response = $client->get($url);\necho '<pre>' . print_r($response->responseHeaders, true) . '</pre>;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Title Generation Snippet\nDESCRIPTION: Complex snippet for generating dynamic page titles including breadcrumb integration, caching, and pagination support\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoCrumbs.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// We define variables\nif (empty($separator)) {$separator = ' / ';}\nif (empty($titlefield)) {$titlefield = 'longtitle';}\nif (empty($parents_limit)) {$parents_limit = 3;}\nif (empty($tplPages)) {$tplPages = 'No. [[+page]] of [[+pageCount]]';}\n\n// Key and cache settings\n$cacheKey = $modx->resource->getCacheKey() . '/title_' . sha1(serialize($_REQUEST));\n$cacheOptions = array('cache_key' => 'resource');\n\nif (!$title = $modx->cacheManager->get($cacheKey, $cacheOptions)) {\n    // We learn the name of the page\n    $title = !empty($modx->resource->$titlefield)\n        ? $modx->resource->$titlefield\n        : $modx->resource->pagetitle;\n\n    // Add a search query, if there is one\n    if (!empty($_GET['query']) && strlen($_GET['query']) > 2) {\n        // We need to use a placeholder to avoid\n        $title .= ' «[[+mse2_query]]»';\n    }\n\n    // Adding pagination if indicated\n    if (!empty($_GET['page'])) {\n        $title .= $separator . str_replace('[[+page]]', intval($_GET['page']), $tplPages);\n    }\n\n    // Adding parents\n    $crumbs = $modx->runSnippet('pdoCrumbs', array(\n        'to' => $modx->resource->id,\n        'limit' => $parents_limit,\n        'outputSeparator' => $separator,\n        'showHome' => 0,\n        'showAtHome' => 0,\n        'showCurrent' => 0,\n        'direction' => 'rtl',\n        'tpl' => '@INLINE [[+menutitle]]',\n        'tplCurrent' => '@INLINE [[+menutitle]]',\n        'tplWrapper' => '@INLINE [[+output]]',\n        'tplMax' => ''\n    ));\n    if (!empty($crumbs)) {\n        $title = $title . $separator . $crumbs;\n    }\n\n    // By caching the results\n    $modx->cacheManager->set($cacheKey, $title, 0, $cacheOptions);\n}\n\n// return title\nreturn $title;\n```\n\n----------------------------------------\n\nTITLE: Displaying comments by a specific user with QuipRss\nDESCRIPTION: This snippet demonstrates how to fetch comments made by a user with the username 'jb2009' using the QuipRss snippet.  It utilizes the `type` and `user` properties to filter the comments.  The snippet returns comments created by the specified user.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiprss.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\n[[!QuipRss? &type=`user` &user=`jb2009`]]\n\n```\n\n----------------------------------------\n\nTITLE: Using Resource Fields in MODX Template Title Tag\nDESCRIPTION: Example showing how to reference a Resource field (pagetitle) in the HTML title tag using MODX tag syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/templates.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<title>[[*pagetitle]]</title>\n```\n\n----------------------------------------\n\nTITLE: Adding a Context to User Session in PHP\nDESCRIPTION: This snippet demonstrates how to add a new context to the user session context array using the addSessionContext method of modUser class. It adds a 'sports' Context session to the user.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.addsessioncontext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->addSessionContext('sports');\n```\n\n----------------------------------------\n\nTITLE: Custom 404 Error Page Forwarding\nDESCRIPTION: Example showing how to send the user to a 404 error page with custom response code, error headers, page title and error message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendforward.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$options = array(\n   'response_code' => '404 Not Found',\n   'error_type' => '404',\n   'error_header' => '404 Not Found',\n   'error_pagetitle' => 'Error 404: Page not found',\n   'error_message' => '<h1>Page not found</h1><p>The page you requested was not found.</p>'\n);\n$this->sendForward($this->getOption('error_page', $options, $this->getOption('site_start')), $options, false);\n```\n\n----------------------------------------\n\nTITLE: Preparing Date for modX Database Interaction\nDESCRIPTION: Converts PHP date types to SQL-compatible formats, ensuring that data passed to the database retains its intended format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->prepareDate($timestamp, $fieldType= 'DATETIME')\n```\n\n----------------------------------------\n\nTITLE: Cron Job Configuration for Email Sending\nDESCRIPTION: Crontab configuration to run the email sender script every 2 minutes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/scheduled-newsletter.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n*/2  *  * * *   php /var/www/site/www/core/components/sendex/cron/send.php\n```\n\n----------------------------------------\n\nTITLE: Alternative Faster Templating Method\nDESCRIPTION: An alternative approach to process templates that's more efficient for large result sets by pre-loading the chunk and reusing it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// first get the template chunk in a variable\n$tpl = $this->modx->getParser()->getElement('modChunk', 'chunkName');\n$tpl->setCacheable(false);\n\n// now loop trough the result collection\nforeach ($resources as $resource) {\n   $resourceArray = $resource->toArray();\n   $tpl->_processed = false; // This line is important!\n   $output .= $tpl->process($resourceArray);\n}\n```\n\n----------------------------------------\n\nTITLE: Infinite Scroll Implementation\nDESCRIPTION: pdoPage implementation with scroll-based automatic content loading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<div id=\"pdopage\">\n    [[!+page.nav]]\n    <div class=\"rows\">\n        [[!pdoPage?\n            &parents=`0`\n            &ajaxMode=`scroll`\n        ]]\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with MODX Output Modifiers\nDESCRIPTION: Examples of how to format dates in MODX using the date output modifier with strftime format parameters. These snippets demonstrate converting timestamps to various human-readable date formats.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/date-formats.md#2025-04-17_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n[[*createdon:strtotime:date=`%a %b %d, %Y`]]\n```\n\n----------------------------------------\n\nTITLE: Excluding Plugins in JSON\nDESCRIPTION: This JSON snippet shows how to exclude specific Toolbar Plugins from being registered with an element in MODX. It demonstrates the use of the 'plugins-exclude' option to prevent undesired plugins from appearing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/toolbar_plugins.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"toolbarPluginsExclude\": [\"fredfontawesome5iconeditor\"],\n  \"settings\": [\n    {\n        …\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ajax Pagination with pdoPage\nDESCRIPTION: Demonstrates implementation of ajax-based pagination using pdoPage snippet with default ajax mode.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<div id=\"pdopage\">\n    <div class=\"rows\">\n        [[!pdoPage?\n            &parents=`0`\n            &ajaxMode=`default`\n        ]]\n    </div>\n    [[!+page.nav]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Assigning User Groups and Roles via MODX API in PHP\nDESCRIPTION: This PHP snippet demonstrates how to assign a user to a User Group and optionally assign a Role using the MODX API. It retrieves a user object by username and then uses the joinGroup method to add the user to a specified User Group.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/user-groups.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Get modUser object\n$user = $modx->getObject('modUser', array('username' => $username));\nif( $user ){\n    // Assign new user to User Group / Role\n    $user->joinGroup('UserGroupNameOrId','OptionalRoleNameOrId');\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Contact Form in MODX\nDESCRIPTION: This HTML code defines the structure of the contact form, including input fields for name, email, subject, message, and additional fields like dropdown and checkboxes. It also includes placeholders for error messages and reCaptcha integration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.simple-contact-page.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h2>Contact Form</h2>\n\n[[!+fi.validation_error_message:notempty=`<p>[[!+fi.validation_error_message]]</p>`]]\n\n<form action=\"[[~[[*id]]]]\" method=\"post\" class=\"form\">\n    <input type=\"hidden\" name=\"nospam\" value=\"\" />\n\n    <label for=\"name\">\n        Name:\n        <span class=\"error\">[[!+fi.error.name]]</span>\n    </label>\n    <input type=\"text\" name=\"name\" id=\"name\" value=\"[[!+fi.name]]\" />\n\n    <label for=\"email\">\n        Email:\n        <span class=\"error\">[[!+fi.error.email]]</span>\n    </label>\n    <input type=\"text\" name=\"email\" id=\"email\" value=\"[[!+fi.email]]\" />\n\n    <label for=\"subject\">\n        Subject:\n        <span class=\"error\">[[!+fi.error.subject]]</span>\n    </label>\n    <input type=\"text\" name=\"subject\" id=\"subject\" value=\"[[!+fi.subject]]\" />\n\n    <label for=\"text\">\n        Message:\n        <span class=\"error\">[[!+fi.error.text]]</span>\n    </label>\n    <textarea name=\"text\" id=\"text\" cols=\"55\" rows=\"7\" value=\"[[!+fi.text]]\">[[!+fi.text]]</textarea>\n\n    <label>\n        Numbers:[[+fi.error.numbers]]\n        <select name=\"numbers\" value=\"[[!+fi.numbers]]\">\n            <option value=\"\">Select an option...</option>\n            <option value=\"one\" [[!+fi.numbers:FormItIsSelected=`one`]]>One</option>\n            <option value=\"two\" [[!+fi.numbers:FormItIsSelected=`two`]]>Two</option>\n            <option value=\"three\" [[!+fi.numbers:FormItIsSelected=`three`]]>Three</option>\n        </select>\n    </label>\n\n    <label>\n        Colors:[[!+fi.error.colors]]\n        <input type=\"hidden\" name=\"colors[]\" value=\"\" />\n    </label>\n    <ul>\n      <li>\n        <label><input type=\"checkbox\" name=\"colors[]\" value=\"red\" [[!+fi.colors:FormItIsChecked=`red`]] /> Red</label>\n      </li>\n      <li>\n        <label><input type=\"checkbox\" name=\"colors[]\" value=\"blue\" [[!+fi.colors:FormItIsChecked=`blue`]] /> Blue</label>\n      </li>\n      <li>\n        <label><input type=\"checkbox\" name=\"colors[]\" value=\"green\" [[!+fi.colors:FormItIsChecked=`green`]] /> Green</label>\n      </li>\n    </ul>\n\n    <br class=\"clear\" />\n    [[!+formit.recaptcha_html]]\n    [[!+fi.error.recaptcha]]\n\n    <br class=\"clear\" />\n\n    <div class=\"form-buttons\">\n        <input type=\"submit\" value=\"Send Contact Inquiry\" />\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generating User Dropdown Options with EVAL Binding in PHP\nDESCRIPTION: Uses @EVAL binding with the Rowboat snippet to generate a dropdown list of users. This example demonstrates how to create dynamic input options for a template variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/eval-binding.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n@EVAL return '-- choose a user --||' . $modx->runSnippet('Rowboat',array('table'=>'modx_users','tpl'=>'userOption','outputSeparator'=>'||'));\n```\n\n----------------------------------------\n\nTITLE: Calling Chunks with Named Template in PHP for MODX\nDESCRIPTION: This snippet demonstrates the use of the '@CHUNK' prefix to indicate the name of a chunk to be rendered, showcasing the ability to dynamically include various templates in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/General_settings.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &tpl=`@CHUNK tpl.Resource.row`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &tpl=`tpl.Resource.row`\n]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Settings in MODX Revolution (PHP)\nDESCRIPTION: This method retrieves all user settings for a modUser object in MODX Revolution. It returns an array containing all the user's settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.getsettings.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getSettings ()\n```\n\n----------------------------------------\n\nTITLE: Running Welcome Snippet Example\nDESCRIPTION: Example demonstrating how to run a 'Welcome' snippet with a custom name parameter and echo the result. Shows practical usage of the runSnippet method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.runsnippet.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->runSnippet('Welcome',array(\n   'name' => 'John'\n));\necho $output; // prints 'Welcome John!'\n```\n\n----------------------------------------\n\nTITLE: Connecting to Foreign Database with xPDO in PHP\nDESCRIPTION: This example script demonstrates how to connect to a foreign database using xPDO, including defining connection parameters and testing the connection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/connections.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndefine('MODX_CORE_PATH', '/path/to/revo/core/');\ndefine('MODX_CONFIG_KEY','config');\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n// Criteria for foreign Database\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n$port = 3306;\n$charset = 'utf8';\n\n$dsn = \"mysql:host=$host;dbname=$dbname;port=$port;charset=$charset\";\n$xpdo = new xPDO($dsn, $username, $password);\n\n// Test your connection\necho $o = ($xpdo->connect()) ? 'Connected' : 'Not Connected';\n\n// Issue queries against the foreign database:\n$results = $xpdo->query(\"SELECT id FROM some_table\");\n$recordCount = $results->rowCount();\nprint $recordCount;\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of GetRelated Snippet in MODX\nDESCRIPTION: This PHP code snippet demonstrates the minimum required syntax to call the GetRelated snippet in MODX. It creates an unordered list with a maximum of three related resources based on the pagetitle and introtext.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getrelated/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[getRelated]]\n```\n\n----------------------------------------\n\nTITLE: Creating xPDOQuery Objects with PHP\nDESCRIPTION: Shows the method signature for creating a new xPDOQuery object. The method accepts a class name, optional criteria for filtering, and an optional cache flag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.newquery.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery newQuery (string $class, [mixed $criteria = null], [boolean|integer $cacheFlag = true])\n```\n\n----------------------------------------\n\nTITLE: Complete Form Implementation with FormIt and Field Snippets\nDESCRIPTION: Comprehensive example showing a complete form implementation using FormIt and multiple field snippets. Demonstrates various field types including text, checkbox, select, textarea, and submit button, along with default value management.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &prefix=`myprefix.` &submitVar=`submitForm`]]\n<form action=\"[[~[[*id]]]]\" method=\"post\">\n    [[!fieldSetDefaults? &prefix=`myprefix.` &outer_tpl=`myWrapTpl` &resetDefaults=`1`]]\n    [[!field? &name=`full_name` &type=`text` &class=`required`]]\n    [[!field? &name=`favorite_color` &type=`checkbox` &options=`Blue||Red||Yellow`]]\n    [[!field? &name=`location` &type=`select` &label=`Where are you from?` &options=`United States==US||New Zealand==NZ||Never Never Land==NNL`]]\n    [[!field? &name=`message` &type=`textarea`]]\n    [[!field? &name=`submitForm` &type=`submit` &label=` ` &message=`Submit Form`]]\n</form>\n```\n\n----------------------------------------\n\nTITLE: Removing Extension Packages with removeExtensionPackage Method\nDESCRIPTION: PHP method signature for programmatically removing extension packages from MODX. This convenience function allows developers to clean up by removing a specific package from the extension_packages system setting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/extension_packages.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nboolean removeExtensionPackage (string $pkg = '')\n```\n\n----------------------------------------\n\nTITLE: Custom Validator Snippet Example\nDESCRIPTION: Shows how to create a custom validator snippet that checks if a value is greater than 1000\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.validators.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$value = (float)$value;\n$success = $value > 1000;\nif (!$success) {\n    // Add error to the field\n    $validator->addError($key,'Маловато будет!');\n}\nreturn $success;\n```\n\n----------------------------------------\n\nTITLE: Creating Smarty Template for Custom Manager Page\nDESCRIPTION: Simple HTML template using Smarty for the custom manager page interface. Contains a basic welcome message with container styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/tutorial.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n<h2>Welcome!</h2>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Restoring MySQL Database for MODX\nDESCRIPTION: This command restores the MODX MySQL database from a SQL dump file on the new server.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u username -p target_db < my_revo_db.sql\n```\n\n----------------------------------------\n\nTITLE: Complete Related Pages Snippet for MODX\nDESCRIPTION: This is the full implementation of the 'relatedPages' snippet, which processes related page IDs, fetches resources, and formats them using a specified template chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif (empty($input)) { return 'This article is so unique, that we couldn\\'t find anything related to it!'; }\n$tpl = $modx->getOption('tpl',$scriptProperties,'relatedPagesTpl');\nif ($modx->getChunk($tpl) == '') { return 'We found some related pages, but don\\'t know how to present it.'; }\n$ids = explode(',', $input);\n$output = array();\nforeach ($ids as $key => $value) {\n  $resource = $modx->getObject('modResource',array(\n    'published' => 1,\n    'id' => $value));\n  if ($resource instanceof modResource) {\n    $output[] = $modx->getChunk($tpl,$resource->toArray());\n  }\n}\nreturn implode('',$output);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple xPDO Connections in PHP\nDESCRIPTION: This snippet shows how to define multiple database connections in xPDO 2.2+, including read-only and writable connections for master/slave configurations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/connections.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$xpdo = new xPDO('mysql:host=127.0.0.1:19570;dbname=xpdotest;charset=utf8', 'username', 'password' array(\n    xPDO::OPT_CONN_MUTABLE => true,\n    xPDO::OPT_CONN_INIT => array(xPDO::OPT_CONN_MUTABLE => false),\n    xPDO::OPT_CONNECTIONS => array(\n            array(\n                'dsn' => 'mysql:host=127.0.0.1:19571;dbname=xpdotest;charset=utf8',\n                'username' => 'username',\n                'password' => 'password',\n                'options' => array(\n                    xPDO::OPT_CONN_MUTABLE => false,\n                ),\n                'driverOptions' => array(),\n            ),\n            array(\n                'dsn' => 'mysql:host=127.0.0.1:19572;dbname=xpdotest;charset=utf8',\n                'username' => 'username',\n                'password' => 'password',\n                'options' => array(\n                    xPDO::OPT_CONN_MUTABLE => false,\n                ),\n                'driverOptions' => array(),\n            ),\n        ),\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing Foreign Key Validation in PHP\nDESCRIPTION: PHP code demonstrating how to use the foreign key constraint validation in a MODX snippet. Shows object creation, validation, and error handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdoforeignkeyconstraint.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$modx->addPackage('test','/path/to/my/test/model/','test_');\n$obj = $modx->newObject('myTest');\n$obj->set('category',123);\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $output .= $errorMsg['message'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MODX Database Reverse Engineering Script\nDESCRIPTION: Complete script for reverse engineering MySQL database tables into xPDO maps and classes. Includes configuration options, directory validation, schema generation, and class file generation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php /* ------------------------------------------------------------------------------\n  ================================================================================\n  === Reverse Engineer Existing MySQL Database Tables to xPDO Maps and Classes ===\n  ================================================================================\n\n  SYNOPSIS:\n  This script generates the XML schema and PHP class files that describe custom\n  database tables.\n\n  This script is meant to be executed once only: after the class and schema files\n  have been created, the purpose of this script has been served, though you will need to run it again if you modify your schema.\n\n  USAGE:\n  1. Upload this file to the root of your MODX installation\n  2. Set the configuration details below\n  3. Navigate to this script in a browser to execute it,\n  e.g. http://yoursite.com/thisscript.php\n  or, you can do this via the command line, e.g. php this-script.php\n\n  INPUT:\n  Please configure the options below.\n\n  OUTPUT:\n  Creates XML and PHP files:\n  core/components/$package_name/model/$package_name/*.class.php\n  core/components/$package_name/model/$package_name/mysql/*.class.php\n  core/components/$package_name/model/$package_name/mysql/*.inc.php\n  core/components/$package_name/schema/$package_name.mysql.schema.xml\n\n  SEE ALSO:\n  https://forums.modx.com/index.php?topic=40174.0\n  https://docs.modx.org/current/en/extending-modx/tutorials/using-custom-database-tables\n  https://docs.modx.com/current/en/extending-modx/xpdo/class-reference/xpdogenerator/xpdogenerator.writeschema\n  ------------------------------------------------------------------------------ */\n\n/* ------------------------------------------------------------------------------\n  CONFIGURATION\n  ------------------------------------------------------------------------------\n  Be sure to create a valid database user with permissions to the appropriate\n  databases and tables before you try to run this script, e.g. by running\n  something like the following:\n\n  CREATE USER 'your_user'@'localhost' IDENTIFIED BY 'y0urP@$$w0rd';\n  GRANT ALL ON your_db.* TO 'your_user'@'localhost';\n  FLUSH PRIVILEGES;\n\n  Be sure to test that the login criteria you created actually work before\n  continuing. If you *can* log in, but you receive errors (e.g. SQLSTATE[42000] [1044] )\n  when this script runs, then you may need to grant permissions for CREATE TEMPORARY TABLES\n  ------------------------------------------------------------------------------ */\n$debug = false;         // if true, will include verbose debugging info, including SQL errors.\n$verbose = true;        // if true, will print status info.\n// The XML schema file *must* be updated each time the database is modified, either\n// manually or via this script. By default, the schema is regenerated.\n// If you have spent time adding in composite/aggregate relationships to your\n// XML schema file (i.e. foreign key relationships), then you may want to set this\n// to 'false' in order to preserve your custom modifications.\n$regenerate_schema = true;\n\n// Class files are not overwritten by default\n$regenerate_classes = true;\n\n// Your package shortname:\n$package_name = '';\n\n\n// Database Login Info can be set explicitly:\n$database_server = 'localhost';          // most frequently, your database resides locally\n$dbase = '';           // name of your database\n$database_user = '';           // name of the user\n$database_password = '';   // password for that database user\n// if this file is not placed side by side with the config.core.php file, add the directory path\ninclude_once 'config.core.php';\n// OR, use your MODX Revo connection details.  Just uncomment the next line:\n//include(MODX_CORE_PATH . 'config/' . MODX_CONFIG_KEY . '.inc.php');\n// If your tables use a prefix, this will help identify them and it ensures that\n// the class names appear \"clean\", without the prefix.\n$table_prefix = '';\n// If you specify a table prefix, you probably want this set to 'true'. E.g. if you\n// have custom tables alongside the modx_xxx tables, restricting the prefix ensures\n// that you only generate classes/maps for the tables identified by the $table_prefix.\n$restrict_prefix = false;\n\n//------------------------------------------------------------------------------\n//  DO NOT TOUCH BELOW THIS LINE\n//------------------------------------------------------------------------------\nif (!defined('MODX_CORE_PATH')) {\n    print_msg('<h1?>Reverse Engineering Error\n        <p>MODX_CORE_PATH not defined! Did you include the correct config file?</p>');\n    exit;\n}\n\n$xpdo_path = strtr(MODX_CORE_PATH . 'xpdo/xpdo.class.php', '\\\\', '/');\ninclude_once ( $xpdo_path );\n\n// A few definitions of files/folders:\n$package_dir = MODX_CORE_PATH . \"components/$package_name/\";\n$model_dir = MODX_CORE_PATH . \"components/$package_name/model/\";\n$class_dir = MODX_CORE_PATH . \"components/$package_name/model/$package_name\";\n$schema_dir = MODX_CORE_PATH . \"components/$package_name/model/schema\";\n$mysql_class_dir = MODX_CORE_PATH . \"components/$package_name/model/$package_name/mysql\";\n$xml_schema_file = MODX_CORE_PATH . \"components/$package_name/model/schema/$package_name.mysql.schema.xml\";\n\n// A few variables used to track execution times.\n$mtime = microtime();\n$mtime = explode(' ', $mtime);\n$mtime = $mtime[1] + $mtime[0];\n$tstart = $mtime;\n\n// Validations\nif (empty($package_name)) {\n    print_msg('<h1>Reverse Engineering Error</h1>\n                <p>The $package_name cannot be empty!  Please adjust the configuration and try again.</p>');\n    exit;\n}\n\n// Create directories if necessary\n$dirs = array($package_dir, $schema_dir, $mysql_class_dir, $class_dir);\n\nforeach ($dirs as $d) {\n    if (!file_exists($d)) {\n        if (!mkdir($d, 0777, true)) {\n            print_msg(sprintf('<h1>Reverse Engineering Error</h1>\n                                <p>Error creating <code>%s</code></p>\n                                <p>Create the directory (and its parents) and try again.</p>'\n                            , $d\n            ));\n            exit;\n        }\n    }\n    if (!is_writable($d)) {\n        print_msg(sprintf('<h1>Reverse Engineering Error</h1>\n                        <p>The <code>%s</code> directory is not writable by PHP.</p>\n                        <p>Adjust the permissions and try again.</p>'\n                        , $d));\n        exit;\n    }\n}\n\nif ($verbose) {\n    print_msg(sprintf('<br></br><strong>Ok:</strong> The necessary directories exist and have the correct permissions inside of <br></br>`%s`', $package_dir));\n}\n\n// Delete/regenerate map files?\nif (file_exists($xml_schema_file) && !$regenerate_schema && $verbose) {\n    print_msg(sprintf('<br></br><strong>Ok:</strong> Using existing XML schema file:<br></br>`%s`', $xml_schema_file));\n}\n\n$xpdo = new xPDO(\"mysql:host=$database_server;dbname=$dbase\", $database_user, $database_password, $table_prefix);\n\n// Set the package name and root path of that package\n$xpdo->setPackage($package_name, $package_dir, $package_dir);\n$xpdo->setDebug($debug);\n\n$manager = $xpdo->getManager();\n$generator = $manager->getGenerator();\n$time = time();\n//Use this to create an XML schema from an existing database\nif ($regenerate_schema) {\n    if (is_file($xml_schema_file)) {\n        $rename = $xml_schema_file . '-' . $time;\n        print_msg(\"<br></br>The old XML schema file: <br></br>`{$xml_schema_file}` <br></br>has been renamed to <br></br>`{$rename}`.\");\n        rename($xml_schema_file, $rename);\n    }\n    $xml = $generator->writeSchema($xml_schema_file, $package_name, 'xPDOObject', $table_prefix, $restrict_prefix);\n    if ($verbose) {\n        print_msg(sprintf('<br></br><strong>Ok:</strong> XML schema file generated: `%s`<hr></hr>', $xml_schema_file));\n    }\n}\n\n// Use this to generate classes and maps from your schema\nif ($regenerate_classes) {\n    if (is_dir($class_dir)) {\n        $rename = $class_dir . '-' . $time;\n        print_msg(\"<br></br>The old class dir: <br></br>`{$class_dir}` <br></br>has been renamed to <br></br>`{$rename}`.\");\n        rename($class_dir, $rename);\n    }\n    $generator->parseSchema($xml_schema_file, $model_dir);\n}\n\n$mtime = microtime();\n$mtime = explode(\" \", $mtime);\n$mtime = $mtime[1] + $mtime[0];\n$tend = $mtime;\n$totalTime = ($tend - $tstart);\n$totalTime = sprintf(\"%2.4f s\", $totalTime);\n\nif ($verbose) {\n    print_msg(\"<br></br><br></br><strong>Finished!</strong> Execution time: {$totalTime}<br></br>\");\n\n    if ($regenerate_schema) {\n        print_msg(\"<br></br>If you need to define aggregate/composite relationships in your XML schema file, be sure to regenerate your class files.\");\n    }\n}\n\nexit();\n\n/* ------------------------------------------------------------------------------\n  Formats/prints messages.  The behavior is different if the script is run\n  via the command line (cli).\n  ------------------------------------------------------------------------------ */\n\nfunction print_msg($msg) {\n    if (php_sapi_name() == 'cli') {\n        $msg = preg_replace('#<br></br>#i', \"\\n\", $msg);\n        $msg = preg_replace('#<h1>#i', '== ', $msg);\n\n```\n\n----------------------------------------\n\nTITLE: Retrieve Comments for Specific Thread\nDESCRIPTION: Fetch comments for a specific thread using the thread parameter in thread mode\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiplatestcomments.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[QuipLatestComments? &type=`thread` &thread=`mythread`]]\n```\n\n----------------------------------------\n\nTITLE: Array Checking with If Snippet\nDESCRIPTION: Example demonstrating how to check if a value exists in an array using the inarray operator in the If snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/if/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[If?\n   &subject=`[[*id]]`\n   &operator=`inarray`\n   &operand=`3,4`\n   &then=`This text will show if id is 3 or 4.`\n   &else=`This text is printed for all other resource id's.`\n]]\n```\n\n----------------------------------------\n\nTITLE: Rendering MIGX TV Data with getImageList Snippet in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the getImageList snippet to render the MIGX TV data in a table format on the frontend.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/simple-opening-hours-table.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<table>\n[[getImageList?\n  &tvname=`operatingHours`\n  &tpl=`operatingHoursTpl`\n]]\n</table>\n```\n\n----------------------------------------\n\nTITLE: Initializing Toolbar Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an 'init' function for a Toolbar Plugin in MODX Fred, which must return a class that extends the ToolbarPlugin. It includes a test plugin that logs a message upon clicking the toolbar button.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/toolbar_plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar TestToolbarPluginInit = function(fred, ToolbarPlugin, pluginTools) {\n    class TestToolbarPlugin extends ToolbarPlugin {\n        static title = \"Test Plugin\";\n        static icon = \"fred--element-settings\";\n\n        onClick() {\n            console.log(\"Test Plugin icon pressed from the toolbar\");\n        }\n    }\n\n    return TestToolbarPlugin;\n};\n```\n\n----------------------------------------\n\nTITLE: Setup Options Script for MODX Transport Package\nDESCRIPTION: This PHP script generates the setup options form displayed during installation of a MODX Extra. It shows different content based on whether the package is being installed, upgraded, or uninstalled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$output = '';\nswitch ($options[xPDOTransport::PACKAGE_ACTION]) {\n    case xPDOTransport::ACTION_INSTALL:\n        $output = '<h2>Doodles Installer</h2>\n<p>Thanks for installing Doodles! Please review the setup options below before proceeding.</p><br />';\n        break;\n    case xPDOTransport::ACTION_UPGRADE:\n    case xPDOTransport::ACTION_UNINSTALL:\n        break;\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Introduction to FastField Tags in MODX - PHP\nDESCRIPTION: This snippet introduces FastField tags that allow access to resource fields using a special syntax. It provides examples of how to fetch resource attributes and TV parameters efficiently within MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[#15.pagetitle]]\n[[#20.content]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[#15.date]]\n[[#20.some_tv]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[#21.price]]\n[[#22.article]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[#12.properties.somefield]]\n[[#15.size.1]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[#POST.key]]\n[[#SESSION.another_key]]\n[[#GET.key3]]\n[[#REQUEST.key]]\n[[#SERVER.key]]\n[[#FILES.key]]\n[[#COOKIE.some_key]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[#15.properties.key1.key2]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[#GET]]\n[[#15.colors]]\n[[#12.properties]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[#[[++site_start]].pagetitle]]\n<pre>\n    [[#[[++site_start]]]]\n</pre>\n```\n\n----------------------------------------\n\nTITLE: Syntax for unsetPlaceholder Method in MODX PHP\nDESCRIPTION: The method signature for unsetPlaceholder, which takes a single string parameter for the placeholder key to be removed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.unsetplaceholder.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid unsetPlaceholder (string $key)\n```\n\n----------------------------------------\n\nTITLE: Performing Inner Join with Owner and Box Tables\nDESCRIPTION: Example of using innerJoin to query Boxes with an Owner named Mark, demonstrating table relationship and filtering\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.innerjoin.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->innerJoin('Owner','Owner');\n$query->where(array(\n   'Owner.name' => 'Mark',\n));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Preventing Manager Logout in MODX\nDESCRIPTION: This PHP snippet shows how to use the OnBeforeManagerLogout event to prevent a user from logging out of the 'mgr' context by returning a JSON response with an error message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforemanagerlogout.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeManagerLogout':\n        //if he tries to run away, we leave him\n        if ($loginContext = 'mgr'){\n            $response = array(\n            \t'success' => false,\n            \t'message' => \"You can't go out! You are one of us .. one of us .. one of us\",\n            \t'data' => array(),\n            );\n            echo $modx->toJSON($response);\n            exit;\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-context GoogleSiteMap Implementation in PHP\nDESCRIPTION: Implementation of the GoogleSiteMap snippet that generates a sitemap combining resources from multiple contexts (web and marketing). The context parameter accepts a comma-separated list of context keys.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemap.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap? &context=`web,marketing`]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Action IDs in MODx JS\nDESCRIPTION: Demonstrates accessing modAction objects mapped by their controller to their ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar actionId = MODx.action['resource/create'];\n```\n\n----------------------------------------\n\nTITLE: Email Template Implementation\nDESCRIPTION: Demonstrates how to use the generated report values in an email template using the figr_values placeholder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.figeneratereport.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>\n    A <strong>[[++site_name]]</strong> contact form submission was sent from the\n    <strong>[[*pagetitle]]</strong> page:\n</p>\n[[+figr_values]]\n```\n\n----------------------------------------\n\nTITLE: Calling Chunks with Inline Template in PHP for MODX\nDESCRIPTION: This code snippet demonstrates how to call a chunk using the '@INLINE' prefix to define a template directly within the MODX environment, allowing for dynamic rendering of pagetitle in a list item format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/General_settings.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &tpl=`@INLINE <li>[[+pagetitle]]</li>`\n]]\n```\n\n----------------------------------------\n\nTITLE: Sitemap for Specific Containers\nDESCRIPTION: Generate sitemap only from specific parent resources\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[pdoSitemap?\n    &parents=`10`\n]]\n```\n\n----------------------------------------\n\nTITLE: Image Resizing with Zoom Crop in phpThumbOf\nDESCRIPTION: This snippet resizes an image to 960x300 pixels and uses zoom crop (zc) to crop off the longer dimension, making the image fit proportionally without padding.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&zc=1`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Galleries via sekUserGalleries.browse.galleries\nDESCRIPTION: This snippet displays all available galleries to the user. It is essential for presenting the gallery overview to users when accessing the gallery management features.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.browse.galleries]\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Register in MODX\nDESCRIPTION: Example demonstrating how to add a database-powered register named 'food' using modDbRegister implementation, suitable for high-volume operations and load-balanced environments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->registry->addRegister('food', 'registry.modDbRegister', array('directory' => 'food'));\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation Rule Snippet\nDESCRIPTION: Example of a FormIt validation rule parameter showing required field validation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n&validate=`name:required`\n```\n\n----------------------------------------\n\nTITLE: Creating a PHP Connector for Custom GridClassKey Components\nDESCRIPTION: PHP connector file that routes requests to custom processors for the GridClassKey extension. This connector initializes MODX and GridClassKey, then handles requests targeted at custom processors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gridclasskey/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// beware of the location of this file!\nrequire_once dirname(dirname(dirname(dirname(__FILE__)))) . '/config.core.php';\nrequire_once MODX_CORE_PATH . 'config/' . MODX_CONFIG_KEY . '.inc.php';\nrequire_once MODX_CONNECTORS_PATH . 'index.php';\n$corePath = $modx->getOption('gridclasskey.core_path', null, $modx->getOption('core_path') . 'components/gridclasskey/');\nrequire_once $corePath . 'model/gridclasskey.class.php';\n$modx->gridclasskey = new GridClassKey($modx);\n$modx->lexicon->load('gridclasskey:default');\n/* handle request */\n$modx->request->handleRequest(array(\n    'processors_path' => $modx->getOption('core_path') . 'components/customize-gck/processors/',\n    'location' => '',\n));\n```\n\n----------------------------------------\n\nTITLE: Basic spieFeed Snippet Call in MODX Revolution\nDESCRIPTION: Basic implementation of the spieFeed snippet to display an RSS feed. The uncached call with a single feed URL parameter fetches and displays content from the specified RSS source.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/spiefeed/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!spieFeed? &setFeedUrl=`http://path.com/to/my/rss.feed.rss`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Web-based Cron URL for VirtuNewsletter Queue Processing\nDESCRIPTION: HTTP URL endpoint for third-party cron services to process the VirtuNewsletter queue. Requires a valid MODX site_id parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nhxxp://www.your_cool_website.com/assets/components/virtunewsletter/conn/web.php?action=web/crons/queues/process&site_id=modx12abc345678d90.12345678\n```\n\n----------------------------------------\n\nTITLE: Testing Email Sending with QuickEmail Snippet in MODX\nDESCRIPTION: This snippet call demonstrates how to use the QuickEmail extra to test email sending functionality in MODX. The debug parameter is set to 1 to display detailed debug information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/sending-mail/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n[[!QuickEmail? &debug=`1`]]\n```\n```\n\n----------------------------------------\n\nTITLE: Placing Register Snippet in MODX Resource\nDESCRIPTION: Instructions for implementing the Register snippet in a MODX resource. It should be placed where the registration form is located. The snippet requires user activation through email.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSimply place the Register snippet in the Resource where your registration form is. (A default one called lgnRegisterForm is provided by the [Login](extras/login \"Login\") 3PC.) This snippet also requires Activation by the User, so they will get an email in their inbox regarding their signup.\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Variables for Document Children\nDESCRIPTION: To access template variables (TVs) and child resources at once in MODX, the `modResource\\->getMany('Children')` method is used along with iterating over children. This facilitates obtaining TV values or rendering them for any resource object using `modResource\\->getTVValue()` and `modTemplateVar\\->getValue($resourceId)/renderOutput($resourceId)`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getDocumentChildrenTVars()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session State in MODX - PHP\nDESCRIPTION: Method signature for getting the current session state in MODX. Returns an integer corresponding to one of the session state constants: UNINITIALIZED, UNAVAILABLE, EXTERNAL, or INITIALIZED.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getsessionstate.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninteger getSessionState ()\n```\n\n----------------------------------------\n\nTITLE: MODX Environment Setup and Package Building\nDESCRIPTION: Initializes the MODX environment, sets up logging, and creates the transport package with namespace registration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modx= new modX();\n$modx->initialize('mgr');\necho ''; /* used for nice formatting of log messages */\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget('ECHO');\n\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$builder = new modPackageBuilder($modx);\n$builder->createPackage(PKG_NAME_LOWER,PKG_VERSION,PKG_RELEASE);\n$builder->registerNamespace(PKG_NAME_LOWER,false,true,'{core_path}components/'.PKG_NAME_LOWER.'/');\n```\n\n----------------------------------------\n\nTITLE: Basic CopyrightedResource Class Implementation\nDESCRIPTION: Initial PHP class implementation showing basic structure with class_key setting\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CopyrightedResource extends modResource {\n    public $showInContextMenu = true;\n    function __construct(xPDO & $xpdo) {\n        parent :: __construct($xpdo);\n        $this->set('class_key','CopyrightedResource');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Boxes Using AND Condition\nDESCRIPTION: Example showing how to query Box objects with specific width and height criteria using the andCondition method. Demonstrates proper method calling order with where clause.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.andcondition.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array('width' => 12));\n$query->andCondition(array('height' => 4));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Implementing Save Method with Hash Generation\nDESCRIPTION: PHP method to generate and save a unique unsubscribe code for subscribers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/self-subscribe.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function save($cacheFlag = null) {\n    $hash = sha1(uniqid(sha1($this->user_id . $this->newsletter_id . $this->email), true));\n\n    $this->set('code', $hash);\n    return parent::save($cacheFlag);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic WHERE Clause Syntax in xPDOQuery\nDESCRIPTION: Demonstrates the basic syntax pattern for creating WHERE conditions using attribute-operator pairs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray('attribute:operator' => 'value')\n```\n\n----------------------------------------\n\nTITLE: Using pdoMenu Snippet for Dynamic Navigation\nDESCRIPTION: An implementation of the pdoMenu snippet to create a dynamic navigation menu in MODX. The snippet automatically generates menu items based on resources in the site and handles the 'active' class for the current page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\" itemscope itemtype=\"http://schema.org/Organization\">\n<head>\n   <meta charset=\"UTF-8\">\n   <base href=\"[[!++site_url]]\" />\n   <title>[[*pagetitle]]</title>\n   [[$metaData]]\n   [[- Continue to insert your CSS, Scripts and other assets here. ]]\n</head>\n<body>\n    <!-- Header Start -->\n    <header>\n        <nav>\n            [[pdoMenu?\n              &parents=`0`\n              &level=`1`\n            ]]\n        </nav>\n    </header>\n    <!-- Header End -->\n```\n\n----------------------------------------\n\nTITLE: Using modRest Instead of Deprecated modRestClient\nDESCRIPTION: Example showing how to properly instantiate the modRest class rather than the deprecated modRestClient class, which will generate deprecation warnings since MODX 2.3.0.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$client = $this->modx->getService('rest', 'rest.modRest');\n```\n\n----------------------------------------\n\nTITLE: Email Notification PostHook Example in MODX\nDESCRIPTION: Provides sample code for a postHook that sends an email whenever a user registers in a MODX site. Requires modPHPMailer service for email operations and interacts with the modMail object for setting and sending emails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$message = 'Hi, a new User signed up: '.$hook->getValue('username')\n . ' with email '.$hook->getValue('email').'.';\n$modx->getService('mail', 'mail.modPHPMailer');\n$modx->mail->set(modMail::MAIL_BODY,$message);\n$modx->mail->set(modMail::MAIL_FROM,'admin@jerrys.org');\n$modx->mail->set(modMail::MAIL_FROM_NAME,'Jerrys Site');\n$modx->mail->set(modMail::MAIL_SENDER,'Jerrys Site');\n$modx->mail->set(modMail::MAIL_SUBJECT,'New User Signed Up');\n$modx->mail->address('to','communitymanager@jerrys.com');\n$modx->mail->setHTML(true);\nif (!$modx->mail->send()) {\n    $modx->log(modX::LOG_LEVEL_ERROR,'An error occurred while trying to send the email: '.$err);\n}\n$modx->mail->reset();\n/* tell our snippet we're good and can continue */\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Configuring FormItAutoResponder Properties in Markdown\nDESCRIPTION: A markdown table listing the available properties for the FormItAutoResponder hook, including their names and descriptions. This table provides details on how to configure the auto-response email settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/formitautoresponder.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| name               | description                                                                                                                                   |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------- |\n| fiarTpl            | Required. Tpl chunk for auto-response message.                                                                                                |\n| fiarSubject        | The subject of the email.                                                                                                                     |\n| fiarToField        | The name of the form field to use as the submitter's email. Defaults to \"email\".                                                              |\n| fiarFrom           | Optional. If set, will specify the From: address for the email. Defaults to the `emailsender` system setting.                                 |\n| fiarFromName       | Optional. If set, will specify the From: name for the email.                                                                                  |\n| fiarSender         | Optional. Specify the email Sender header. Defaults to the `emailsender` system setting.                                                      |\n| fiarHtml           | Optional. Whether or not the email should be in HTML-format. Defaults to true.                                                                |\n| fiarReplyTo        | Required.An email to set as the reply-to.                                                                                                     |\n| fiarReplyToName    | Optional. The name for the Reply-To field.                                                                                                    |\n| fiarCC             | A comma-separated list of emails to send via cc.                                                                                              |\n| fiarCCName         | Optional. A comma-separated list of names to pair with the fiarCC values.                                                                     |\n| fiarBCC            | A comma-separated list of emails to send via bcc.                                                                                             |\n| fiarBCCName        | Optional. A comma-separated list of names to pair with the fiarBCC values.                                                                    |\n| fiarMultiWrapper   | Wraps values submitted by checkboxes/multi-selects with this value. Defaults to just the value.                                               |\n| fiarMultiSeparator | Separates checkboxes/multi-selects with this value. Defaults to a newline. (\"\\\\n\")                                                            |\n| fiarFiles          | Optional. Comma separated list of files to add as attachment to the email. You cannot use a url here, only a local filesystem path.           |\n| fiarRequired       | Optional. If set to false, the FormItAutoResponder hook doesn't stop when the field defined in 'fiarToField' is left empty. Defaults to true. |\n```\n\n----------------------------------------\n\nTITLE: GetPage Integration Example - HTML\nDESCRIPTION: Complex example showing getResources integration with getPage for pagination, including TV values and content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n[[!getPage?\n    &elementClass=`modSnippet`\n    &element=`getResources`\n    &parents=`17`\n    &depth=`2`\n    &limit=`10`\n    &pageVarKey=`page`\n    &includeTVs=`1`\n    &includeContent=`1`\n    &tpl=`blogListPost`\n]]\n<div class=\"paging\">\n    <ul class=\"pageList\">\n        [[!+page.nav]]\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Core Manager Lexicon Translations in MODX\nDESCRIPTION: Instructions for creating a new language translation for the MODX manager interface by copying the English language directory and translating the .inc.php files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/i18n/add-missing-translation.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncore/lexicon/en/ -> core/lexicon/[mylanguage]/\n```\n\n----------------------------------------\n\nTITLE: Updated Loop Using getChunk for Templating\nDESCRIPTION: Modified loop that converts each resource object to an array and uses getChunk to process the template with resource data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nforeach ($resources as $resource) {\n   $resourceArray = $resource->toArray();\n   $output .= $modx->getChunk($tpl,$resourceArray);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Frontmatter in MODX Documentation\nDESCRIPTION: Example of how to add frontmatter to documentation files to set a title and meta description. This metadata is important for all files and helps with search engine optimization.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'Excellent Documentation'\ndescription: 'This meta data description will be used by search engines.'\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Info Section with Tags in MODX\nDESCRIPTION: Code for displaying post metadata including publish date, tags, and comments count. Uses tolinks snippet for tag functionality and QuipCount for comment counting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<p class=\"post-info\">\n  Posted on <time datetime=\"[[*publishedon:strtotime:date=`%Y-%m-%d`]]\">[[*publishedon:strtotime:date=`%b %d, %Y`]]</time>\n  [[*tags:notempty=`\n     | Tags: [[!tolinks? &items=`[[*tags]]` &tagKey=`tag` &target=`1`]] |\n  `]]\n  <a href=\"[[~[[*id]]]]#comments\">\n    Comments ([[!QuipCount? &thread=`blog-post-[[*id]]`]])\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Complete Templated ResourceLister Snippet\nDESCRIPTION: The final version of the ResourceLister snippet with all templating improvements, including customizable template, parent ID, and row class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$tpl = $modx->getOption('tpl',$scriptProperties,'ResourceItem');\n$id = (int)$modx->getOption('id',$scriptProperties,390);\n$rowCls = $modx->getOption('rowCls',$scriptProperties,'resource-item');\n$c = $modx->newQuery('modResource');\n$c->where(array(\n  'published' => true,\n  'deleted' => false,\n));\n$children = $modx->getChildIds($id);\nif (count($children) > 0) {\n    $c->where(array(\n        'id:IN' => $children,\n    ));\n}\n$c->sortby('menuindex','ASC');\n$resources = $modx->getCollection('modResource',$c);\n$output = '';\nforeach ($resources as $resource) {\n    $resourceArray = $resource->toArray();\n    $resourceArray['cls'] = $rowCls;\n    $output .= $modx->getChunk($tpl,$resourceArray);\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Adding HTML and Inline JavaScript Before BODY End in MODX\nDESCRIPTION: This example demonstrates using regClientHTMLBlock to add custom HTML and inline JavaScript before the closing BODY tag. This approach is useful for adding custom elements or executing JavaScript functions after the page has loaded.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/register-assets.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientHTMLBlock('\n<div>custom stuff here</div>\n<script type=\"text/javascript\">\nrunAnalytics();\n</script>');\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Fred Template with One Dropzone\nDESCRIPTION: This code snippet demonstrates how to create a basic HTML structure for a MODX template that includes one Dropzone. The Dropzone is defined with a minimum height and references the dynamic content placeholder. This setup allows the Fred editing environment to load and display content within the specified Dropzone.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/templates/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>[[*pagetitle]]</title>\n    </head>\n    <body>\n        <div data-fred-dropzone=\"content\" data-fred-min-height=\"500px\">\n            [[*content]]\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Executing Ajax Request with MODx Console\nDESCRIPTION: Sends an Ajax request to a MODX connector with specified action and register, and handles console completion\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.console.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.Ajax.request({\n    url: URL_TO_MY_CONNECTOR\n    ,params: {\n        action: MY_ACTION\n        ,register: register\n        ,topic: topic\n    }\n    ,listeners: {\n        'success':{fn:function() {\n            console.fireEvent('complete');\n        },scope:this}\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Listing Snippet in MODX with PHP\nDESCRIPTION: This code snippet defines a PHP script for MODX that lists child resources of a specified parent. The snippet assigns a 'parent' property, retrieves child resources, formats them as a string of key-value pairs using '==' and '||' for the Listbox input type, and returns the result. The MODX methods getOption, getObject, and getMany are utilized to manage properties and resource retrievals.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$parent = $modx->getOption('parent',$scriptProperties,9);\n$parentObj = $modx->getObject('modResource',$parent);\nif (!($parentObj instanceof modResource)) { return ''; }\n$resArray = $parentObj->getMany('Children');\n$resources = array();\nforeach($resArray as $res) {\n  if ($res instanceof modResource) {\n    $resources[] = $res->get('pagetitle') . '==' . $res->get('id');\n  }\n}\n$out = implode(\"||\",$resources);\nreturn $out;\n```\n\n----------------------------------------\n\nTITLE: Registering RTE Plugin in FredBeforeRender\nDESCRIPTION: Example of registering a Rich Text Editor plugin in Fred's beforeRender function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/modx_events.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$beforeRender = '\n    this.registerRTE(\"TinyMCE\", FredRTETinyMCE);\n';\n```\n\n----------------------------------------\n\nTITLE: Setting Object Fields with set() in xPDO (PHP)\nDESCRIPTION: This code demonstrates how to set the values of object fields using the `set()` method in xPDO. It shows setting the 'width' and 'height' fields of a `$myBox` object. The `set()` method modifies the object's in-memory values until the object is saved to the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$myBox->set('width',10);\n$myBox->set('height',4);\n```\n\n----------------------------------------\n\nTITLE: JavaScript Fenom Compatibility Examples\nDESCRIPTION: Shows proper JavaScript formatting to avoid Fenom parsing conflicts and the use of ignore tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<script>\nvar y = {\"key\": \"value\"}; // will cause an error\nvar x = { \"key\": \"value\" } // it is ok\n</script>\n\n<script>\n{ignore}\nvar y = {\"key\": \"value\"}; // it is ok now\n{/ignore}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Base MODX Controller Class\nDESCRIPTION: Creates a base controller class for the Doodles CMP that extends modExtraManagerController. Handles initialization, permissions, CSS/JS loading, and template configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once dirname(dirname(__FILE__)) . '/model/doodles/doodles.class.php';\nclass DoodlesIndexManagerController extends modExtraManagerController {\n    /** @var Doodles $doodles */\n    public $doodles;\n    public function initialize() {\n        $this->doodles = new Doodles($this->modx);\n        $this->addCss($this->doodles->config['cssUrl'].'mgr.css');\n            $this->addJavascript($this->doodles->config['jsUrl'].'mgr/doodles.js');\n            $this->addHtml('<script type=\"text/javascript\">\n            Ext.onReady(function() {\n                Doodles.config = '.$this->modx->toJSON($this->doodles->config).';\n            });\n            </script>');\n            return parent::initialize();\n    }\n    public function getLanguageTopics() {\n            return array('doodles:default');\n    }\n    public function checkPermissions() { return true;}\n    public function process(array $scriptProperties = array()) {}\n    public function getPageTitle() { return $this->modx->lexicon('doodles'); }\n    public function loadCustomCssJs() {\n        //$this->addJavascript($this->doodles->config['jsUrl'].'mgr/widgets/doodles.grid.js');\n        $this->addJavascript($this->doodles->config['jsUrl'].'mgr/widgets/home.panel.js');\n        $this->addLastJavascript($this->doodles->config['jsUrl'].'mgr/sections/index.js');\n    }\n    public function getTemplateFile() {\n        return $this->doodles->config['templatesPath'].'home.tpl';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FormIt Snippet Call\nDESCRIPTION: This snippet call invokes FormIt with specified hooks for reCaptcha, email sending, and redirection. It configures email template, recipient, and redirection target, along with validation rules for various form fields, including spam prevention, required fields, email format, and stripping HTML tags from the text field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.tutorials-and-examples/examples.simple-contact-page.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n   &hooks=`recaptcha,email,redirect`\n   &emailTpl=`MyEmailChunk`\n   &emailTo=`user@example.com`\n   &redirectTo=`123`\n   &validate=`nospam:blank,\n    name:required,\n    email:email:required,\n    subject:required,\n    text:required:stripTags,\n    numbers:required,\n    colors:required`\n]]\n```\n\n----------------------------------------\n\nTITLE: Handling Validation Messages after Saving in PHP\nDESCRIPTION: Shows how to handle and display validation messages after attempting to save an object with xPDO, using the object's validator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/save.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (!$object->save()) {\n    // @var modValidator $validator\n    $validator = $object->getValidator();\n    if ($validator->hasMessages()) {\n        foreach ($validator->getMessages() as $message) {\n            $this->addFieldError($message['field'],$this->modx->lexicon($message['message']));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ConfirmRegister Snippet in MODX\nDESCRIPTION: This snippet is placed on a separate 'Registration Activated' page to confirm a user's registration. It activates the user's account, allowing them to log in.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.confirmregister.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!ConfirmRegister]]\n```\n\n----------------------------------------\n\nTITLE: Redirecting Using META HTTP-EQUIV in MODX\nDESCRIPTION: Example of redirecting to an external URL using the META HTTP-EQUIV refresh method instead of the default header location method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendredirect.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendRedirect('https://modx.com',array('type' => 'REDIRECT_META'));\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Values in FormIt Hook using PHP\nDESCRIPTION: This snippet shows how to set a new field value (datestamp) in a custom hook. This can be used to add information not directly submitted in the form.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.custom-hook.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$datestamp = date('Y-m-d H:i:s');\n$hook->setValue('datestamp_submitted', $datestamp);\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Values with PreHook in FormIt (PHP)\nDESCRIPTION: Shows how to use the setValues method to set multiple field values at once in a preHook. This approach also makes the values available as placeholders in email chunks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$hook->setValues(array(\n    'name' => 'John Doe',\n    'email' => 'john.doe@fake-emails.com',\n));\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationship in MySQL\nDESCRIPTION: MySQL table definitions for a one-to-many relationship between 'blogposts' and 'comments' tables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `blogposts` (\n  `blogpost_id` int(11) NOT NULL AUTO_INCREMENT,\n  `content` text,\n  PRIMARY KEY (`blogpost_id`)\n) ENGINE=MyISAM;\nCREATE TABLE `comments` (\n  `comment_id` int(11) NOT NULL AUTO_INCREMENT,\n  `blogpost` int(11) DEFAULT NULL,\n  `comment` text,\n  PRIMARY KEY (`comment_id`)\n) ENGINE=MyISAM;\n```\n\n----------------------------------------\n\nTITLE: Modifying Chunks via MODX API\nDESCRIPTION: Shows how to create, modify, and delete Chunks programmatically using the MODX API.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/chunks.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* create a new chunk, give it some content and save it to the database */\n$chunk = $modx->newObject('modChunk');\n$chunk->set('name','NewChunkName');\n$chunk->setContent('<p>This is my new chunk!</p>');\n$chunk->save();\n\n/* get an existing chunk, modify the content and save changes to the database */\n$chunk = $modx->getObject('modChunk', array('name' => 'MyExistingChunk'));\nif ($chunk) {\n    $chunk->setContent('<p>This is my existing chunks new content!</p>');\n    $chunk->save();\n}\n\n/* get an existing chunk and delete it from the database */\n$chunk = $modx->getObject('modChunk', array('name' => 'MyObsoleteChunk'));\nif ($chunk) $chunk->remove();\n?>\n```\n\n----------------------------------------\n\nTITLE: Attachment PreHook Example in MODX\nDESCRIPTION: Shows how to attach files to user registration emails using a preHook. Uses the modPHPMailer service to add attachments to outbound emails within the Register snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// it can be a list/array of files and even passed to the hook from the outside. This example will be limited to a single hard-fixed file\n\n$attachment = 'relative_file_path.pdf';\n$hook->modx->getService('mail', 'mail.modPHPMailer');\n$hook->modx->mail->mailer->AddAttachment(MODX_BASE_PATH.$attachment);\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Basic MODExt Grid Extension\nDESCRIPTION: Example of extending MODx.grid.Grid class to create a custom grid component. Shows basic class structure and xtype registration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMyComponent.grid.MyGrid = function( config ) {\n    /* Class parent constructor */\n    MyComponent.grid.MyGrid.superclass.constructor.call( this, config );\n};\nExt.extend( MyComponent.grid.MyGrid, MODx.grid.Grid, {\n    /* Class members will go here */\n} );\n/* Register \"mycomponent-grid-mygrid\" as an xtype */\nExt.reg( \"mycomponent-grid-mygrid\", MyComponent.grid.MyGrid );\n```\n\n----------------------------------------\n\nTITLE: Display All User Groups in PHP\nDESCRIPTION: Shows all User Groups by setting limit to 0.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroups.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[PeopleGroups? &limit=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving MODX Resources by ID in PHP\nDESCRIPTION: Example of retrieving a MODX resource (page) by its ID and accessing its properties. This demonstrates the most common use case for getObject.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobject.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$page = $modx->getObject('modResource', ['id' => 555]);\n$output = $page->get('pagetitle');\n```\n\n----------------------------------------\n\nTITLE: Checking File Extensions with xPDOCacheManager.endsWith in PHP\nDESCRIPTION: Example of using the endsWith method to check if a filename has a specific extension (.flv in this case). The method returns true if the string ends with the specified pattern.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.endswith.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$filename = '/my/site/test.flv';\nif ($xpdo->cacheManager->endsWith($filename,'flv')) {\n  echo 'Ends with flv!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Google Sitemap for Large Sites in MODX Revolution\nDESCRIPTION: This snippet call generates a Google Sitemap for tens of thousands of Resources in MODX Revolution. It uses the new, optimized version of GoogleSiteMap that can handle large numbers of pages without timing out.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap]]\n```\n\n----------------------------------------\n\nTITLE: MODX JSON Sort Configuration\nDESCRIPTION: Example of JSON configuration for multiple field sorting in MODX queries using Template Variables (TVs) and resource fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoResources.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"tvname\":\"ASC\", \"pagetitle\":\"DESC\"}\n```\n\n----------------------------------------\n\nTITLE: Sending Named Messages to Registry\nDESCRIPTION: Shows how to send messages with specific keys that will be read according to key order.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->registry->food->send(\"/beer/\", array(\"Heineken\" => \"not so good\", \"Pabst Blue Ribbon\" => \"rocks\", \"Molson Golden\" => \"ok for Canadian beer\"));\n```\n\n----------------------------------------\n\nTITLE: PHP Event Parameters Example\nDESCRIPTION: Demonstrates the structure of parameters passed to plugins listening for the OnFileManagerUpload event in MODX. The event provides access to uploaded files, target directory, and media source information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onfilemanagerupload.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$files     // Array of uploaded files from $_FILES\n$directory // modDirectory object reference\n$source    // modMediaSource object\n```\n\n----------------------------------------\n\nTITLE: Custom TV Output Controller\nDESCRIPTION: This PHP class defines the output controller for the custom 'templateselect' TV. It extends the `modTemplateVarOutputRender` class. The `process()` function takes the TV's value (the selected template ID) and wraps it within a `<div>` tag with the class 'template'. This formatted value is then returned for display on the frontend.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-tvs/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif(!class_exists('TemplateSelectOutputRender')) {\n    class TemplateSelectOutputRender extends modTemplateVarOutputRender {\n        public function process($value,array $params = array()) {\n            return '<div class=\"template\">'.$value.'</div>';\n        }\n    }\n}\nreturn 'TemplateSelectOutputRender';\n```\n\n----------------------------------------\n\nTITLE: Parsing Schema and Finalizing Build Script in MODX Revolution\nDESCRIPTION: PHP code that parses the XML schema into PHP model files, calculates execution time, and outputs the result. The parseSchema method generates all necessary PHP class files and maps based on the XML schema definition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$generator->parseSchema($sources['schema'].'storefinder.mysql.schema.xml', $sources['model']);\n$mtime= microtime();\n$mtime= explode(\" \", $mtime);\n$mtime= $mtime[1] + $mtime[0];\n$tend= $mtime;\n$totalTime= ($tend - $tstart);\n$totalTime= sprintf(\"%2.4f s\", $totalTime);\necho \"\\nExecution time: {$totalTime}\\n\";\nexit ();\n```\n\n----------------------------------------\n\nTITLE: Authenticating Manager User in MODX\nDESCRIPTION: This snippet demonstrates how to authenticate a user in the manager context, replacing the deprecated `$_SESSION[\"mgrValidated\"]`. It utilizes the `modX->user->isAuthenticated('mgr')` method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\"`modX->user->isAuthenticated('mgr')`\"\n```\n\n----------------------------------------\n\nTITLE: Using IN Operator for Template Filtering in MODX (PHP)\nDESCRIPTION: Outputs child resources of the current resource that use template IDs 1, 2, or 3 using the IN operator in the where condition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources?\n    &parents=`[[*id]]`\n    &where=`{\"template:IN\":[1,2,3]}`\n    &tpl=`myRowTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: FormIt2db/db2FormIt - Retrieving xPDO Objects\nDESCRIPTION: This snippet retrieves xPDO objects before displaying FormIt forms, allowing pre-existing data to be populated. It uses xPDO to query the database for the relevant objects. Dependencies include MODX and proper configuration of FormIt.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit2db/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Hook for retrieving xPDO object\n$object = $xpdo->getObject('xPDOObject', $id);\nif ($object) {\n    // Populate form with data\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX Core Path for Subdomain\nDESCRIPTION: Configuration in config.core.php that defines the path to the MODX core directory. This example shows how to reference the core folder when it's in the same directory as the index.php file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/virtual-host.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndefine('MODX_CORE_PATH', dirname(__FILE__) . '/core/');\n```\n\n----------------------------------------\n\nTITLE: Манипуляции с кешем в xPDO\nDESCRIPTION: Этот сниппет демонстрирует основные операции с кэшем с использованием `xPDOCacheManager`, а именно: установку значения в кеш, его получение и последующее удаление. Используются методы `set`, `get` и `delete`. Работает с кэшем по умолчанию.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/caching/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$str = 'Мои кэшированные данные.';\n$xpdo->cacheManager->set('testdata', $str);\n\necho $xpdo->cacheManager->get('testdata');\n// outputs: Мои кэшированные данные.\n\n$xpdo->cacheManager->delete('testdata');\n```\n\n----------------------------------------\n\nTITLE: Basic Resource Forwarding Example\nDESCRIPTION: A simple example showing how to forward a user to Resource ID 234 without changing the URL in the address bar.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendforward.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendForward(234);\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure for GoogleSiteMap Item in MODX\nDESCRIPTION: This XML snippet defines the structure for each item in the GoogleSiteMap. It includes placeholders for URL, last modified date, change frequency, and priority of the resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemap/itemtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<url>\n    <loc>[[+url]]</loc>\n    <lastmod>[[+date]]</lastmod>\n    <changefreq>[[+update]]</changefreq>\n    <priority>[[+priority]]</priority>\n</url>\n```\n\n----------------------------------------\n\nTITLE: Slider Element HTML Template with Dynamic Slides\nDESCRIPTION: HTML markup for a slider component using Owl Carousel. Implements dynamic slide generation based on the 'slides' setting value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/js_events.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"col-md-8 owl-init slider-main owl-carousel\">\n    {% for i in 0..(slides - 1) %}\n        <div class=\"item-slide\">\n            <div class=\"card-banner\" style=\"height:600px;\">\n                <div class=\"overlay-cover d-flex align-items-center justify-content-center\">\n                    <div class=\"text-center\">\n                        <h3 data-fred-name=\"slider_header{{i}}\">Default Value {{i+1}}</h3>\n                        <p data-fred-name=\"slider_text{{i}}\">This is some default text.</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    {% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Extended Profile Fields with Profile Snippet in MODX\nDESCRIPTION: Illustrates how to display extended profile fields using the Profile snippet with a custom prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.profile.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile? &prefix=`usr.`]]\n\n<p>[[+usr.username]]'s favorite color is [[+usr.color]]</p>\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Chained Validators\nDESCRIPTION: This snippet illustrates how to chain validators in FormIt. It checks if the 'text' field is required and then strips all HTML tags from the input using the `stripTags` validator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &validate=`text:required:stripTags`\n```\n\n----------------------------------------\n\nTITLE: Git Remote Repository Setup Commands\nDESCRIPTION: Commands to initialize a remote connection to GitHub repository and push the master branch. These commands link a local Git repository to a remote GitHub repository and perform the initial push.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/git-basics.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngit remote add origin https://github.com/bezumkin/Sendex.git\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: PreHook Error Handling in MODX\nDESCRIPTION: Shows how to handle errors in preHooks, returning false upon failure and providing error messages via the `hook` member of the `scriptProperties`. Returning false halts further hook execution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$errorMsg = 'User not found';\n$hook->addError('user',$errorMsg);\nreturn false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Rewrite Rules for Discuss\nDESCRIPTION: Nginx server block rewrite rules for Discuss forum URLs. These rules should be called before the main rewrite for MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrewrite ^/forums/thread/([0-9]+)/(.*)$ /index.php?q=forums/&action=thread&thread=$1 last;\nrewrite ^/forums/u/(.+)$ /index.php?q=forums/&action=user&user=$1 last;\nrewrite ^/forums/board/([0-9]+)/(.*)$ /index.php?q=forums/&action=board&board=$1 last;\nrewrite ^/forums/category/([0-9]+)/(.*)$ /index.php?q=forums/&category=$1 last;\nrewrite ^/forums/(.+)$ /index.php?q=forums/&action=$1 last;\nrewrite ^/forums/(.+)/$ /index.php?q=forums/&action=$1 last;\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources by Template in MODX (PHP)\nDESCRIPTION: Outputs child resources of the current resource that use template ID 8, formatted with the 'myRowTpl' chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources?\n    &parents=`[[*id]]`\n    &where=`{\"template:=\":8}`\n    &tpl=`myRowTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Executing Schema Parsing\nDESCRIPTION: Parses the XML schema file and generates the corresponding PHP classes and maps in the target directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$schema = '/path/to/storefinder.mysql.schema.xml';\n$target = '/path/to/storefinder/model/';\n$generator->parseSchema($schema,$target);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of xPDOCacheManager writeFile Method\nDESCRIPTION: Practical example showing how to write content to a file using the xPDOCacheManager writeFile method. Creates a string and writes it to a specified file path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.writefile.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = 'The contents of the file.';\n$xpdo->cacheManager->writeFile('/path/to/the/file.txt',$str);\n```\n\n----------------------------------------\n\nTITLE: Advanced Analytics Example\nDESCRIPTION: This snippet illustrates an advanced use of the Analytics tool with comprehensive settings, including debugging, context exclusions, and various tracking parameters to customize the Google Analytics experience.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/analytics/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\[[!Analytics?\\n    &debug=`1`\\n    &isLocalhost=`1`\\n    &excludeContextList=`content_editors`\\n    &excludeLoggedInUserContextList=`mgr`\\n    &displayfeatures=`0`\\n    &enhancedLinkAttribution=`0`\\n    &webPropertyID=`UA-XXXXX-Y`\\n    &cookieDomain=`domain.tld`\\n    &forceSSL=`1`\\n    &anonymizeIP=`1`\\n    &pagePath=`/home/landingPage`\\n    &setAccount=`GA-XXXXX-Y`\\n    &setDomainName=`domain.tld`\\n    &trackPageview=`/home/landingPage`\\n]\\]\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Response Handler in PHP\nDESCRIPTION: Example of loading a custom response handler class named 'myResponse' from a specific file path. This demonstrates how to override the default response handler with a custom implementation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getresponse.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->getResponse('myResponse','/path/to/');\n```\n\n----------------------------------------\n\nTITLE: Listing Tags and Groups with MODX in PHP\nDESCRIPTION: The TaggerGetCurrentTag snippet lists groups and tags based on the current request's GET parameters. To ensure accurate data retrieval, always run this snippet uncached. It offers various properties to customize the output using templates for tags, groups, and the whole output. The snippet provides placeholder options to create custom HTML for tags and groups dynamically.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tagger/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// tagTpl\n[[+tag]]\n[[+label]]\n[[+alias]]\n[[+uri]] => The URL contains all the tags of the current request, excluding the one of this template\n[[+group_name]] => Name of the group the tag belongs to\n[[+group_alias]] => Alias of the group the tag belongs to\n\n// groupTpl\n[[+name]] => Group name\n[[+alias]] => Group alias\n[[+multipleTags]] => Whether this group has more than 1 active tag\n[[+tags]] => The markup of the active tags of this group\n\n// outTpl\n[[+groups]] => The markup of all the active groups\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!TaggerGetCurrentTag?\n    &tagTpl=`@INLINE [[+label]]`\n    &groupTpl=`@INLINE <li>[[+name]]: [[+tags]]</li>`\n    &outTpl=`@INLINE <ul>[[+groups]]</ul>`\n    &tagSeparator=`, `\n]]\n```\n\n----------------------------------------\n\nTITLE: OR Conditions with Joined Tables\nDESCRIPTION: Demonstrates using OR conditions across joined tables to search for users by email or username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.orcondition.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$query = $modx->newQuery('modUser');\n$query->innerJoin('modUserProfile','Profile');\n$query->where(array(\n   'modUser.username' => $email,\n));\n$query->orCondition(array(\n   'Profile.email' => $email,\n));\n$user = $modx->getObject('modUser', $query);\n```\n\n----------------------------------------\n\nTITLE: pdoNeighbors with Custom Sorting\nDESCRIPTION: Example showing pdoNeighbors implementation with custom sorting by publication date in ascending order.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoNeighbors.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[pdoNeighbors?\n    &sortby=`publishedon`\n    &sortdir=`asc`\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FormItCountryOptions in HTML\nDESCRIPTION: Demonstrates how to use the FormItCountryOptions snippet within a select element in an HTML form. It shows how to pass the previously selected country value to maintain form state.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.formitcountryoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<select name=\"country\">\n    [[!FormItCountryOptions? &selected=`[[!+fi.country]]`]]\n</select>\n```\n\n----------------------------------------\n\nTITLE: Using Gallery with Galleriffic Plugin and Tag Filtering in PHP\nDESCRIPTION: This snippet demonstrates the use of the Galleriffic plugin with the Gallery snippet. It displays photos tagged with 'Cool' and applies the Galleriffic plugin for enhanced presentation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery?\n    &tag=`Cool`\n    &plugin=`Galleriffic`\n]]\n```\n\n----------------------------------------\n\nTITLE: Caching Hits Results with getCache in MODX Revolution\nDESCRIPTION: This snippet shows how to use getCache to cache and share the results of a 'Most Viewed Pages' query across multiple pages, improving performance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[!getCache?\n    &element=`getMostViewed`\n    &cacheExpires=`900`\n    &cacheKey=`hits`\n    &cacheElementKey=`getMostViewed`\n]]\n```\n\n----------------------------------------\n\nTITLE: Fetching All Videos from YouTube Channel with Pagination in MODX\nDESCRIPTION: This snippet demonstrates how to fetch and display all videos from the YouTube 'Spotlight' Channel using the 'videoTpl' chunk. It includes pagination links for navigating through the results and displays the total number of videos.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getyoutube/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!getYoutube? &mode=`channel` &channel=`UCBR8-60-B28hp2BmDPdntcQ` &tpl=`videoTpl`]]\n[[+prevPage:notempty=`<a href=\"[[+prevPage]]\">prevPage</a><br>`]]\n[[+nextPage:notempty=`<a href=\"[[+nextPage]]\">nextPage</a><br>`]]\nTotal: [[+total]]\n```\n\n----------------------------------------\n\nTITLE: Creating PHP Data Store for Ext JS Grid\nDESCRIPTION: PHP backend implementation that handles data requests from the Ext JS grid, including pagination and sorting functionality. Queries MODX resources and returns JSON-formatted data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/7.-ext-js-tutoral-advanced-grid.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// -- start the little hack -------------------\n// This would not be necessary if this code were\n// inside a Snippet or the MODX mgr! Demo purposes only!\ndefine('MODX_API_MODE', true);\nrequire_once 'index.php';\n$modx= new modX();\n$modx->initialize('mgr');\n// -- end the little hack ---------------------\n\n// Get parameters sent here from the Grid controls\n// The limit and start parameters are configurable,\n// but the sort and dir are less so (?)\n$limit = (int) $modx->getOption('limit',$_POST,10);\n$start = (int) $modx->getOption('start',$_POST,0);\n$sort = $modx->getOption('sort',$_POST,'id');\n$dir = $modx->getOption('dir',$_POST,'ASC');\n\n$criteria = $modx->newQuery('modResource');\n$total_pages = $modx->getCount('modResource',$criteria);\n$criteria->limit($limit, $start);\n$criteria->sortby($sort,$dir);\n$pages = $modx->getCollection('modResource',$criteria);\n\n// Init our array\n$data = array(\n    'results'=>array(),\n    'total' => $total_pages,\n);\nforeach ($pages as $p) {\n    $data['results'][] = $p->toArray();\n}\n// Use the log for debugging Ajax\n$modx->log(1,print_r($_POST,true));\nprint json_encode($data);\n\n/*EOF*/\n```\n\n----------------------------------------\n\nTITLE: Adding Related Objects with Aliases using addOne in xPDO PHP\nDESCRIPTION: This snippet illustrates the use of aliases when adding multiple related objects of the same class to differentiate between different relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/related-objects.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$car->addOne($ownerUser,'Owner');\n$car->addOne($sellerUser,'Seller');\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX .htaccess File for Friendly URLs\nDESCRIPTION: Sample .htaccess configuration file provided by MODX that enables friendly URLs, prevents exposing hidden directories, handles www/non-www redirects, and sets up URL rewriting rules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n# MODX supports Friendly URLs via this .htaccess file. You must serve web\n# pages via Apache with mod_rewrite to use this functionality, and you must\n# change the file name from ht.access to .htaccess.\n#\n# Make sure RewriteBase points to the directory where you installed MODX.\n# E.g., \"/modx\" if your installation is in a \"modx\" subdirectory.\n#\n# You may choose to make your URLs non-case-sensitive by adding a NC directive\n# to your rule: RewriteRule ^(.*)$ index.php?q=$1 [L,QSA,NC]\n\nRewriteEngine On\nRewriteBase /\n\n\n# Prevent rewrite the .well-known directory used by LetsEncrypt by rules below of this rule\nRewriteRule \"^\\.well-known/\" - [L]\n\n\n# Prevent dot directories (hidden directories like .git) to be exposed to the public\n# Except for the .well-known directory used by LetsEncrypt a.o\nRewriteRule \"/\\.|^\\.(?!well-known/)\" - [F]\n\n\n# Rewrite www.example.com -> example.com -- used with SEO Strict URLs plugin\n#RewriteCond %{HTTP_HOST} .\n#RewriteCond %{HTTP_HOST} ^www.(.*)$ [NC]\n#RewriteRule ^(.*)$ https://%1/$1 [R=301,L]\n#\n# or for the opposite example.com -> www.example.com use the following\n# DO NOT USE BOTH\n#\n#RewriteCond %{HTTP_HOST} !^$\n#RewriteCond %{HTTP_HOST} !^www\\. [NC]\n#RewriteCond %{HTTP_HOST} (.+)$\n#RewriteRule ^(.*)$ https://www.%1/$1 [R=301,L] .\n\n\n# Force rewrite to https for every host\n#RewriteCond %{HTTPS} !=on [OR]\n#RewriteCond %{SERVER_PORT} !^443\n#RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n\n\n# Redirect the manager to a specific domain - don't rename the ht.access file\n# in the manager folder to use this this rule\n#RewriteCond %{HTTP_HOST} !^example\\.com$ [NC]\n#RewriteCond %{REQUEST_URI} ^/manager [NC]\n#RewriteRule ^(.*)$ https://example.com/$1 [R=301,L]\n\n\n# The Friendly URLs part\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php?q=$1 [L,QSA]\n\n\n# For servers that support output compression, you should pick up a bit of\n# speed by un-commenting the following lines.\n\n#php_flag zlib.output_compression On\n#php_value zlib.output_compression_level 5\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron for aSES Mail Dispatch in PHP\nDESCRIPTION: This crontab entry is used to configure the periodic execution of the cron.php script, which handles the dispatch of emails through the aSES package. The script sends 100 emails per run utilizing Amazon SES, leveraging placeholders like [[+name]] for personalization.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/amazonses-mailing-list/index.md#2025-04-17_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n* * * * * php /absoulte/path/to/modx/web/directory/assets/components/aSES/cron.php\n```\n\n----------------------------------------\n\nTITLE: UpdateProfile Hook in MODX PHP\nDESCRIPTION: Explains accessing fields specific to the UpdateProfile snippet, important for understanding changes made to user profiles after any update operation. Highlights the modUser object and checks if the username has changed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// A reference to the modUser object\n$user = $hook->getValue('updateprofile.user');\n// A reference to the modUserProfile object\n$profile = $hook->getValue('updateprofile.profile');\n// A boolean stating if the username was changed\n$changed = $hook->getValue('updateprofile.usernameChanged');\n```\n\n----------------------------------------\n\nTITLE: OnPageNotFound Event Parameters Definition\nDESCRIPTION: A markdown table defining the parameters available in the OnPageNotFound event, including response codes, error types, headers, and messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onpagenotfound.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name             | Description                                                     |\n| ---------------- | --------------------------------------------------------------- |\n| response_code   | The response code to send. Defaults to \"HTTP/1.1 404 Not Found\" |\n| error_type      | The type. Defaults to 404.                                      |\n| error_header    | The header being sent: Defaults to \"HTTP/1.1 404 Not Found\"     |\n| error_pagetitle | The pagetitle of the error page.                                |\n| error_message   | The message being sent in the error page.                       |\n```\n\n----------------------------------------\n\nTITLE: Logging Chunk Saves with OnChunkFormSave Event in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the OnChunkFormSave event in a MODX plugin to log when a chunk is saved, differentiating between new and updated chunks. It writes the chunk ID to the error log.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onchunkformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnChunkFormSave':\n        if ($mode == modSystemEvent::MODE_NEW) {\n            $modx->log(modX::LOG_LEVEL_ERROR, 'New chunk saved with id '.$id);\n        } elseif ($mode == modSystemEvent::MODE_UPD){\n            $modx->log(modX::LOG_LEVEL_ERROR, 'The existing chunk is saved with id '.$id);\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ForgotPassword Snippet in MODX\nDESCRIPTION: This PHP snippet sets up the ForgotPassword snippet in a MODX resource. It includes the resource ID of the ResetPassword snippet for user redirection post-confirmation email interactions. Accurate resource ID linkage is required for seamless operation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.forgotpassword.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!ForgotPassword? &resetResourceId=`123`]]\n```\n\n----------------------------------------\n\nTITLE: substring Output Filter\nDESCRIPTION: An output filter that extracts a substring from the input text based on starting position and optional length.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$options=explode(',',$options);\nreturn count($options)>1 ? substr($input,$options[0],$options[1]) : substr($input,$options[0]);\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining MODX Object Class in XML Schema\nDESCRIPTION: Example of defining a newsletter object class that extends xPDOSimpleObject in MODX schema XML\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/work-logic.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"sxNewsletter\" table=\"sendex_newsletters\" extends=\"xPDOSimpleObject\">\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom User Combo and Grid Filter in JavaScript\nDESCRIPTION: JavaScript code that defines a combo box for user filtering and extends the grid's functionality. It creates a combo box for users, adds it to the grid's toolbar, and implements filtering logic when a user is selected.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gridclasskey/index.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Define the combo\nGridClassKey.combo.Users = function(config) {\n    config = config || {};\n    Ext.applyIf(config, {\n        // this goes to a custom connector, to refer the custom path of the processor\n        url: MODx.config.base_url + 'assets/components/customize-gck/connector.php'\n        , baseParams: {\n            action: 'authors/getlist'\n        }\n        , fields: ['id', 'name']\n        , width: config.comboWidth || 190\n        /**\n         * Don't give name, exclude this combo out of the saving\n         */\n//        , name: 'mainfield'\n//        , hiddenName: 'mainfield'\n        , displayField: 'name'\n        , valueField: 'id'\n        , listeners: {\n            select: {\n                fn: function(combo, record, index) {\n                    this.filter(record);\n                },\n                scope: this\n            }\n        }\n    });\n    GridClassKey.combo.Users.superclass.constructor.call(this, config);\n};\nExt.extend(GridClassKey.combo.Users, MODx.combo.ComboBox, {\n    filter: function(record) {\n        var grid = Ext.getCmp('gridclasskey-grid-children');\n        if (typeof (grid) === 'undefined') {\n            return false;\n        }\n        var s = grid.getStore();\n        s.baseParams.advancedSearch = true;\n        s.baseParams.fields = JSON.stringify([{\n                'name': 'author', // name of the TV\n                'value': record['id']\n        }]);\n        grid.getBottomToolbar().changePage(1);\n        grid.refresh();\n    }\n});\nExt.reg('gridclasskey-combo-users', GridClassKey.combo.Users);\n// Manipulate the grid to add above combo to its top toolbar\nExt.onReady(function() {\n    var grid = Ext.getCmp('gridclasskey-grid-children');\n    if (typeof (grid) === 'undefined') {\n        return false;\n    }\n    // get top toolbar, add more stuffs\n    var tbar = grid.getTopToolbar();\n    var newTbar = new Ext.Toolbar({\n        renderTo: tbar.id,\n        anchor: '100%',\n        items: [\n            '->', {\n                xtype: 'panel',\n                html: 'Filter by user:'\n            }, {\n                xtype: 'gridclasskey-combo-users',\n                id: 'gridclasskey-combo-users'\n            }\n        ]\n    });\n    newTbar.show();\n    // reset users combo when \"Clear\" button is clicked\n    var btns = tbar.findByType('button');\n    var clearBtn;\n    Ext.each(btns, function(item){\n        if (item.iconCls === \"icon-gridclasskey-filter-delete\") {\n            clearBtn = item;\n        }\n    });\n    clearBtn.on('click', function(e){\n        var usersCombo = Ext.getCmp('gridclasskey-combo-users');\n        usersCombo.reset();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Field Hydration Example in PHP\nDESCRIPTION: Demonstrates how to set and access a hydrated field directly as a public member variable when xPDO::OPT_HYDRATE_FIELDS is enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/hydrating-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object->set('name',$name);\necho $object->name;\n```\n\n----------------------------------------\n\nTITLE: Basic GoogleSiteMap Snippet Implementation in PHP\nDESCRIPTION: The basic implementation of the GoogleSiteMap snippet for MODX. This places the snippet in a resource and requires setting the resource's template to 'blank' and content type to 'xml'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemapversion1.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap]]\n```\n\n----------------------------------------\n\nTITLE: Fetching Gallery Images with migxLoopCollection\nDESCRIPTION: Retrieves and displays published images associated with the current resource, sorted by position in ascending order\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!migxLoopCollection?\n&packageName=`mygallery`\n&classname=`myGallery`\n&sortConfig=`[{\"sortby\":\"pos\",\"sortdir\":\"ASC\"}]`\n&where=`{\"resource_id\":\"[[*id]]\",\"published\":\"1\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using Lexicons in JavaScript\nDESCRIPTION: Demonstrates how to use lexicon entries in JavaScript within MODX manager interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/internationalization.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n_('lexicon.key')\n_('lexicon.key',{ userinput: 'amazing' })\n```\n\n----------------------------------------\n\nTITLE: Defining Self-Join Hierarchies in MySQL\nDESCRIPTION: This snippet defines a `categories` table to illustrate a self-join for hierarchical data, such as category-subcategory relationships. It uses a `parent_id` field that references the primary key, `category_id`, to establish the hierarchy.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `categories` (\n  `category_id` int(11) NOT NULL AUTO_INCREMENT,\n  `parent_id` int(11) DEFAULT NULL,\n  `name` varchar(255) DEFAULT NULL,\n  `seq` smallint(4) DEFAULT NULL,\n  PRIMARY KEY (`category_id`)\n) ENGINE=MyISAM;\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Tables in xPDO Schema\nDESCRIPTION: Shows the definition of additional tables (sfOwner and sfStoreOwner) in the xPDO schema, including fields and indexes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/database-and-tables.md#2025-04-17_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"sfOwner\" table=\"owners\" extends=\"xPDOSimpleObject\">\n  <field key=\"name\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" index=\"index\" />\n  <field key=\"email\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n\n  <index alias=\"name\" name=\"name\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n      <column key=\"name\" length=\"\" collation=\"A\" null=\"false\" />\n  </index>\n</object>\n\n<object class=\"sfStoreOwner\" table=\"store_owners\" extends=\"xPDOSimpleObject\">\n  <field key=\"store\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" index=\"index\" />\n  <field key=\"owner\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" index=\"index\" />\n\n  <index alias=\"store\" name=\"store\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n      <column key=\"store\" length=\"\" collation=\"A\" null=\"false\" />\n  </index>\n  <index alias=\"owner\" name=\"owner\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n      <column key=\"owner\" length=\"\" collation=\"A\" null=\"false\" />\n  </index>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Complete Extension Package Installation Script\nDESCRIPTION: Full implementation script for adding an extension package to MODX. The script needs to be placed in the MODX web root and executed via browser. It handles MODX initialization and package registration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Use this script to add your extension package to MODX's \"radar\".\n * This should only need to be done once.\n * Note that we have to instantiate MODX: xPDO is not sufficient\n * because we're running functions that exist only in MODX, not in the\n * underlying xPDO framework.\n *\n * USAGE:\n * 1. Copy this file into the docroot (web root) of your MODX installation.\n * 2. Execute the file by visiting it in a browser, e.g. <a href=\"http://yoursite.com/add_extension.php\"> <a href=\"http://yoursite.com/add_extension.php\"> http://yoursite.com/add_extension.php\n</a>\n</a>\n */\n//------------------------------------------------------------------------------\n//! CONFIGURATION\n//------------------------------------------------------------------------------\n// Your package shortname:\n$package_name = 'copyrightedresource';\n//------------------------------------------------------------------------------\n//  DO NOT TOUCH BELOW THIS LINE\n//------------------------------------------------------------------------------\ndefine('MODX_API_MODE', true);\nrequire_once('index.php');\nif (!defined('MODX_CORE_PATH')) {\n    print '<p>MODX_CORE_PATH not defined! Did you put this script in the web root of your MODX installation?</p>';\n    exit;\n}\n$modx= new modX();\n$modx->initialize('mgr');\n$modx->setLogLevel(xPDO::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n$modx->addExtensionPackage($package_name,\"[[++core_path]]components/$package_name/model/\");\nprint 'Success!';\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating MODX Database Workspace Path\nDESCRIPTION: This SQL query updates the path information in the MODX database to reflect the new server location.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE `your_revo_db`.`workspaces` SET path='/path/to/modx_doc_root/core/' WHERE id='1';\n```\n\n----------------------------------------\n\nTITLE: Using UpdateProfile Snippet\nDESCRIPTION: This snippet demonstrates how to use the UpdateProfile snippet to enable profile editing.  It shows how to call the snippet and configure the validate property. It requires the UpdateProfile snippet to be installed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.updateprofile.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!UpdateProfile? &validate=`fullname:required,email:required:email`]]\n```\n\n----------------------------------------\n\nTITLE: Calling BreadCrumb Snippet in PHP\nDESCRIPTION: This snippet calls the BreadCrumb snippet within a MODX template or page to render breadcrumb navigation. No additional parameters are required for basic usage, making it straightforward to implement.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n[[BreadCrumb]]\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'gt' in MODX\nDESCRIPTION: Demonstrates the usage of 'gt' (greater than) modifier for conditional output. It checks if the number of books is greater than 5 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:gt=`5`:then=`Есть более 5 книг`:else=`Есть менее 5 книг`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in xPDO (PHP)\nDESCRIPTION: This example demonstrates how to set the log level of an xPDO instance to show messages with at least INFO status. The method controls which log messages will be processed based on their severity level.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.setloglevel.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->setLogLevel(xPDO::LOG_LEVEL_INFO);\n```\n\n----------------------------------------\n\nTITLE: Including Template Variables in Resource Query\nDESCRIPTION: Extends previous example to include a 'image' Template Variable, enabling access to the image TV in the template chunk via `[[+tv.image]]` placeholder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoResources.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[pdoResources?\n    &parents=`1`\n    &depth=`0`\n    &tpl=`ListRowTpl`\n    &includeTVs=`image`]]\n```\n\n----------------------------------------\n\nTITLE: Logging Resource Deletion Details in MODX\nDESCRIPTION: Plugin that logs information about the deleted resource and its children to the MODX error log. Captures the resource title and any child resource IDs that will be deleted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforedocformdelete.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeDocFormDelete':\n        if (count($childrenIds) > 0) {\n            $children = $childrenIds;\n        }\n        $modx->log(modX::LOG_LEVEL_ERROR, 'A resource was deleted '.$resource->get('pagetitle').print_r($children));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Ad Hoc Field Hydration Example in PHP\nDESCRIPTION: Shows how to use ad hoc fields when xPDO::OPT_HYDRATE_ADHOC_FIELDS is enabled, allowing for fields not defined in the schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/hydrating-fields.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$object->set('name','Arthur Dent');\n$object->set('puns',42);\necho $object->get('name') .' has '. $object->get('puns') . ' puns.';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Value from modX Database\nDESCRIPTION: Obtains a single value from the executed SQL query result, leveraging the xPDOCriteria class to process the fetch operation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->getValue($dsq)\n```\n\n----------------------------------------\n\nTITLE: Adjusting Event Date Range for Upcoming Events in PHP\nDESCRIPTION: This snippet showcases additional parameters for the mxCalendar snippet that control the date range of listed events. It allows displaying events starting now and extending to a specified number of weeks in the future.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/mxcalendar.examples.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n&elStartDate=`now`\n&elEndDate=`+16 weeks`\n```\n\n----------------------------------------\n\nTITLE: MODX Registration Confirmation Handler\nDESCRIPTION: PHP snippet that processes user registration confirmation and redirects to the home page after successful activation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[ConfirmRegister? &redirectTo=`9`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookies in MODX Revolution - PHP\nDESCRIPTION: The getCookie snippet retrieves the value of a specified cookie. It utilizes the [[!getCookie]] tag and optionally supports templating via a specified chunk and can assign the output to a placeholder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cookiejar/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getCookie?\n    &name=`foo`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!getCookie?\n    &name=`foo`\n    &tpl=`cookieTpl`\n    &toPlaceholder=`cookieValue`\n]]\n```\n\n----------------------------------------\n\nTITLE: Connecting to MODX Registry\nDESCRIPTION: Code showing how to connect to a previously initialized 'food' register. Returns boolean indicating connection success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$connected = $modx->registry->food->connect();\n```\n\n----------------------------------------\n\nTITLE: Basic Wayfinder Navigation Menu Implementation in MODX\nDESCRIPTION: The simplest Wayfinder call that requires only a starting resource ID. This generates a fully nested unordered list navigation structure with default formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`55` ]]\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <li class=\"first\"><a href=\"media-hub/news\" title=\"HG in the News\">HG in the News</a></li>\n    <li><a href=\"media-hub/events\" title=\"HG Events\">HG Events</a></li>\n    <li><a href=\"media-hub/press\" title=\"Press Releases\">Press Releases</a></li>\n    <li><a href=\"media-hub/blog/\" title=\"HG Blog\">HG Blog</a>\n\n    <ul>\n        <li class=\"first\"><a href=\"media-hub/blog/test-section/\" title=\"Blog Test Section\">Blog Test Section</a>\n\n        <ul>\n            <li class=\"first\"><a href=\"media-hub/blog/test-section/test-post\" title=\"Test Post\">Test Post</a></li>\n            <li><a href=\"media-hub/blog/test-section/other-post\" title=\"Other Post\">Other Post</a></li>\n            <li class=\"last\"><a href=\"media-hub/blog/test-section/third-post\" title=\"Third Post\">Third Post</a></li>\n        </ul>\n\n        </li>\n        <li class=\"last\"><a href=\"media-hub/blog/archives\" title=\"Blog Archives\">Archives</a></li>\n    </ul>\n\n    </li>\n    <li><a href=\"media-hub/fast-facts\" title=\"HG Fast Facts\">HG Fast Facts</a></li>\n    <li><a href=\"media-hub/publications\" title=\"HG Publications\">HG Publications</a></li>\n    <li class=\"last\"><a href=\"media-hub/media-contact\" title=\"Media Contact\">Media Contact</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Dumping MySQL Database for MODX\nDESCRIPTION: This command dumps the MODX MySQL database to a SQL file for backup and migration purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u username -p your_revo_db > /path/to/backups/my_revo_db.sql\n```\n\n----------------------------------------\n\nTITLE: Paginating getVimeo Results with getPage in PHP\nDESCRIPTION: This example demonstrates how to combine getVimeo with the getPage snippet to enable pagination of video results, limiting the output to 5 videos per page and displaying navigation controls.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getvimeo/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage?\n    &element=`getVimeo`\n    &channel=`staffpicks`\n    &id=`all`\n    &tpl=`vimeoTpl`\n    &limit=`5`\n]]\n\n<div class=\"paging\">\n    <ul class=\"pageList\">\n        [[!+page.nav]]\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: MIGX Chunk Using getResources Properties\nDESCRIPTION: Example chunk showing how to use getResources properties passed to a MIGX call within the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.frontend-usage.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n  <li>\n    <img src=\"[[+image:phpthumbof=`w=300&h=300&zc=1`]]\" alt=\"[[+title]]\" />\n    <a href=\"[[~[[+property.originalResourceId]]]]\">See more images from [[+property.pagetitle]]</a>\n  </li>\n```\n\n----------------------------------------\n\nTITLE: Basic getYoutube Snippet Call in MODX Revolution\nDESCRIPTION: The basic uncached call to the getYoutube snippet. The '&mode' property is required to specify which type of YouTube content to retrieve.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getyoutube/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getYoutube]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Reset Request with MODX ForgotPassword Snippet\nDESCRIPTION: This snippet call sets up the form for users to request a password reset. It specifies the page ID for handling the reset and the template for the form.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!ForgotPassword? &resetResourceId=`3` &tpl=`lgnForgotPassTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Initializing pdoTools Service in MODX\nDESCRIPTION: Basic example of getting pdoTools service instance and retrieving a chunk with values\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoTools.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$pdo = $modx->getService('pdoTools');\n$chunk = $pdo->getChunk('chunkName', array('with', 'values'));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Articles with getResources in MODX\nDESCRIPTION: Shows how to fetch the 8 most recent Articles from a specific container using getResources. The showHidden parameter is important since Articles are hidden from menus by default.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/articles/retrieving-articles-outside-of-articles.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources?\n  &parents=`10`\n  &tpl=`myTpl`\n  &showHidden=`1`\n  &limit=`8`\n]]\n```\n\n----------------------------------------\n\nTITLE: HybridAuth Snippet for Profile Updates (MODX)\nDESCRIPTION: MODX snippet call to use HybridAuth for updating user profiles with Google, Twitter, and Facebook authentication.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hybridauth/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!HybridAuth? providers=`Google,Twitter,Facebook` &action=`UpdateProfile`]]\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Revolution Schema Build Script\nDESCRIPTION: PHP script that initializes the MODX Revolution schema build process. It sets up time tracking, includes configuration, initializes MODX, and defines source paths for the build process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Build Schema script\n *\n * @package storefinder\n * @subpackage build\n */\n$mtime = microtime();\n$mtime = explode(\" \", $mtime);\n$mtime = $mtime[1] + $mtime[0];\n$tstart = $mtime;\nset_time_limit(0);\nrequire_once dirname(__FILE__) . '/build.config.php';\ninclude_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n$modx= new modX();\n$modx->initialize('mgr');\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n$root = dirname(dirname(__FILE__)).'/'; \n$sources = array(\n    'root' => $root,\n    'core' => $root.'core/components/storefinder/',\n    'model' => $root.'core/components/storefinder/model/',\n    'assets' => $root.'assets/components/storefinder/',\n    'schema' => $root.'_build/schema/',\n);\n```\n\n----------------------------------------\n\nTITLE: Get Cache Manager Method Signature in PHP\nDESCRIPTION: Method signature for getCacheManager that returns an xPDOCacheManager instance with optional class name and configuration options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getcachemanager.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nobject getCacheManager([string $class = ''], [[array $options = array('path' => XPDO_CORE_PATH, 'ignorePkg' => true)]])\n```\n\n----------------------------------------\n\nTITLE: Defining Related Resource Search Strategy in MODX\nDESCRIPTION: Outlines the core algorithm for finding related resources through content analysis, word extraction, and ranking\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getrelated/index.md#2025-04-17_snippet_0\n\nLANGUAGE: pseudocode\nCODE:\n```\n1. Find base resource\n2. Extract distinct words from specified fields\n3. Filter out stopwords\n4. Query database for matching resources\n5. Calculate ranking based on field weights\n6. Sort and output results\n```\n\n----------------------------------------\n\nTITLE: Retrieving modChunk Content in PHP\nDESCRIPTION: Demonstrates how to retrieve the raw content of a MODX chunk using the getContent method. The example shows getting a chunk by name and accessing its content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modchunk/modchunk.getcontent.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid getContent ([ $options = array()])\n```\n\nLANGUAGE: php\nCODE:\n```\n$chunk = $modx->getObject('modChunk',array('name' => 'MyChunk'));\nif ($chunk) {\n  $content = $chunk->getContent();\n}\n```\n\n----------------------------------------\n\nTITLE: xPDO Schema and Class Generation Methods\nDESCRIPTION: Two core xPDO methods used for database reverse engineering: writeSchema() to generate XML schema and parseSchema() to create PHP classes from the generated schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Generate XML schema from database\n$xml = $generator->writeSchema($xml_schema_file, $package_name, 'xPDOObject', $table_prefix, $restrict_prefix);\n\n// Parse XML schema and generate PHP classes\n$generator->parseSchema($xml_schema_file, $model_dir);\n```\n\n----------------------------------------\n\nTITLE: Related Pages Template Chunk for MODX\nDESCRIPTION: This chunk formats each related page as a list item, including a link to the page, its title, and the author's name. It demonstrates the use of MODX placeholders and output modifiers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <a href=\"[[~[[+id]]]]\" title=\"[[+pagetitle]]\">\n    [[+longtitle:default=`[[+pagetitle]]`]]\n  </a>, by [[+createdby:userinfo=`fullname`]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Checking User Session Context in MODX Revolution (PHP)\nDESCRIPTION: This method checks if a user has a specific session context, effectively determining if they are logged into a certain context. It returns a boolean value indicating whether the user has the specified session context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.hassessioncontext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean hasSessionContext (mixed $context)\n```\n\n----------------------------------------\n\nTITLE: GetResources With Wrapper - PHP\nDESCRIPTION: Demonstrates wrapping getResources results in additional markup using placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? ... &toPlaceholder=`results`]]\n[[+results:notempty=`<ol>[[+results]]</ol>`]]\n```\n\n----------------------------------------\n\nTITLE: Defining the AdvSearchForm Template in HTML\nDESCRIPTION: This snippet defines the HTML structure of the AdvSearch form, incorporating placeholders for dynamic content provided by MODX. Key inputs include hidden fields for the landing resource ID and the search instance identifier, along with a text input for the search term and a submit button. The form's action and method attributes are dynamically set based on placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch.advsearchform/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"advsea-search-form\" action=\"[[~[[+landing]]]]\" method=\"[[+method]]\">\n  <fieldset>\n    <input type=\"hidden\" name=\"id\" value=\"[[+landing]]\" />\n    <input type=\"hidden\" name=\"asId\" value=\"[[+asId]]\" />\n    [[+helpLink]]<input type=\"text\" id=\"[[+asId]]_search\" name=\"[[+searchIndex]]\" value=\"[[+searchValue]]\" />\n    <input type=\"submit\" name=\"sub\" value=\"[[%advsearch.search? &namespace=`advsearch` &topic=`default`]]\" />\n  </fieldset>\n</form>\n[[+resultsWindow]]\n```\n\n----------------------------------------\n\nTITLE: Default Ajax Pagination Implementation\nDESCRIPTION: Basic pdoPage implementation with default Ajax mode showing wrapper structure and snippet call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<div id=\"pdopage\">\n    <div class=\"rows\">\n        [[!pdoPage?\n            &parents=`0`\n            &ajaxMode=`default`\n        ]]\n    </div>\n    [[!+page.nav]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: String Formatting in MODX\nDESCRIPTION: Examples of string formatting using wordwrap, limit, and ellipsis modifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_9\n\nLANGUAGE: modx\nCODE:\n```\n[[+bodytext:wordwrap=`80`]]\n[[+bodytext:wordwrapcut=`80`]]\n[[+description:limit=`50`]]\n[[+description:ellipsis=`50`]]\n```\n\n----------------------------------------\n\nTITLE: Regular Expression Validation Example\nDESCRIPTION: Implementation of a preg_match validation rule that checks if a field contains specific text.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$obj->set('name','test');\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $o .= 'An error occurred on field \"'.$errorMsg['field'].'\": '.$errorMsg['message'].'<br />';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Merging with sendForward\nDESCRIPTION: Example demonstrating how to merge fields from the original resource with the target resource, preserving certain fields like pagetitle and introtext while excluding specified fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendforward.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$options = array(\n\t'merge' => 1, // field gluing mechanism enabled\n\t// original fields list that need to be excluded from the result\n\t'forward_merge_excludes' => 'id,template,type,published,class_key'\n);\n$this->sendForward(15, $options);\n```\n\n----------------------------------------\n\nTITLE: Configuring xPDO Log Settings\nDESCRIPTION: Sets up logging configuration for xPDO to display debug information either in CLI mode or HTML format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->setLogLevel(xPDO::LOG_LEVEL_INFO);\n$xpdo->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n```\n\n----------------------------------------\n\nTITLE: Displaying Extended Fields in Profile Snippet for MODX\nDESCRIPTION: Uses the Profile snippet to display user information, including the 'custom_field' extended field. This allows viewing of extended profile data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/extended-user-profiles.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\n\n<p>Username: [[+username]]</p>\n<p>Full Name: [[+fullname]]</p>\n<p>Email: [[+email]]</p>\n<p>Custom Field: [[+custom_field]]</p>\n\n<p><a href=\"[[~10]]\">Edit</a></p>\n```\n\n----------------------------------------\n\nTITLE: Outputting All Videos from a Vimeo Channel in PHP\nDESCRIPTION: This example shows how to output all videos from the Vimeo 'Staff Picks' channel using a template chunk named 'vimeoTpl'. The '!' prefix indicates the snippet should run uncached.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getvimeo/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getVimeo? &channel=`staffpicks` &id=`all` &tpl=`vimeoTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Logging Resource Data with OnDocFormSave Event in PHP\nDESCRIPTION: This plugin code snippet logs the array representation of the `$resource` object to the MODX error log during the `OnDocFormSave` event. The code retrieves the event name and executes the logging action if the event is `OnDocFormSave`, printing all resource data for debugging purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormSave':\n        $modx->log(MODX_LOG_LEVEL_ERROR, print_r($resource->toArray(),true) );\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying MIGX Items with getImageList in PHP\nDESCRIPTION: Basic usage of the getImageList snippet to display MIGX TV data as an image gallery with titles.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.frontend-usage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<ul>\n  [[getImageList?\n    &tvname=`myMIGXtv`\n    &tpl=`@CODE:<li>[[+idx]]<img src=\"[[+image]]\"/><p>[[+title]]</p></li>\n  `]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Schema Parsing Script in PHP for MODX\nDESCRIPTION: Script that parses XML schema file and generates xPDO classes and maps for the component. It initializes MODX, sets up logging, and creates database tables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once dirname(__FILE__).'/build.config.php';\ninclude_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n$modx= new modX();\n$modx->initialize('mgr');\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n$sources = array(\n    'model' => $modx->getOption('doodles.core_path').'model/',\n    'schema_file' => $modx->getOption('doodles.core_path').'model/schema/doodles.mysql.schema.xml'\n);\n$manager= $modx->getManager();\n$generator= $manager->getGenerator();\nif (!is_dir($sources['model'])) { $modx->log(modX::LOG_LEVEL_ERROR,'Model directory not found!'); die(); }\nif (!file_exists($sources['schema_file'])) { $modx->log(modX::LOG_LEVEL_ERROR,'Schema file not found!'); die(); }\n$generator->parseSchema($sources['schema_file'],$sources['model']);\n$modx->addPackage('doodles', $sources['model']); // add package to make all models available\n$manager->createObjectContainer('Doodle'); // created the database table\n$modx->log(modX::LOG_LEVEL_INFO, 'Done!');\n```\n\n----------------------------------------\n\nTITLE: Using toJSON Method to Convert xPDOObject to JSON in PHP\nDESCRIPTION: An example demonstrating how to use the toJSON method. It sets object properties and then converts the object to a JSON string, which is then echoed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/tojson.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$object->set('name','Bob');\n$object->set('email','pinkdaisies@gmail.com');\n$json = $object->toJSON();\necho $json;\n// prints {\"name\":\"Bob\",\"email\":\"pinkdaisies@gmail.com\"}\n```\n\n----------------------------------------\n\nTITLE: Getting Manager User ID in MODX\nDESCRIPTION: This snippet shows how to retrieve the ID of an authenticated manager user, replacing the deprecated `$_SESSION[\"mgrInternalKey\"]`. It checks if the user is authenticated in the manager context before retrieving the ID using `modX->user->get('id')`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\"`modX->user->get('id')` when `modX->user->isAuthenticated('mgr')`\"\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple User Group Membership (OR) in MODX Revolution (PHP)\nDESCRIPTION: This snippet checks if the user is a member of either the 'Staff' or 'Investors' user group using an array of group names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.ismember.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user->isMember(array('Staff','Investors'));\n```\n\n----------------------------------------\n\nTITLE: Handling OnDocPublished Event in MODX Plugin\nDESCRIPTION: Plugin code demonstrating how to handle the OnDocPublished event in MODX. It logs the published resource details to the error log and returns a JSON success message. The plugin responds to the resource publication event triggered through the context menu.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocpublished.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocPublished':\n        $response = array(\n        \t'success' => false,\n        \t'message' => 'The publication was successful!',\n        \t'data' => array(),\n        );\n        echo $modx->toJSON($response);\n        exit; \n        $modx->log(modX::LOG_LEVEL_ERROR, print_r($resource->toArray(),true));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Context Example in MODX PHP\nDESCRIPTION: Example showing how to retrieve a specific context named 'sports' using the getContext method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getcontext.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$ctx = $modx->getContext('sports');\n```\n\n----------------------------------------\n\nTITLE: Word Replacement Plugin for MODX Pages (PHP)\nDESCRIPTION: This plugin example shows how to replace specific words on MODX pages using the OnWebPagePrerender event. It defines an array of words to be replaced and modifies the page output accordingly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onwebpageprerender.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nswitch($eventName) {\n    case 'OnWebPagePrerender': \n        // words to be replaced\n        $words = array(\"Product\", \"Price\");\n        // get access to the page content\n        $output = &$modx->resource->_output;\n        // we replace words\n        $output = str_replace($words,\"changed\",$output); \n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Usage Examples - PHP\nDESCRIPTION: Example usage of ExerPlan snippets including Login, Galleries and Assessments with common parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Login]]<br>\n\n<!-- &toArray is commented out, remove _ to run -->\n[[!exerplan.Galleries?\n&requireAuth=`1`\n&userId=`[[+modx.user.id]]`\n&galleryMediatype=`video`\n&_toArray=`1`\n]]\n\n[[!exerplan.Assessments?\n&requireAuth=`1`\n&assesseeId=`[[+modx.user.id]]`\n&_toArray=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Filtered Search Results with AdvSearch in MODX\nDESCRIPTION: This snippet demonstrates filtering search results by specifying resource IDs, hiding container resources, and using a strong tag for highlighting. The &ids parameter pulls the IDs dynamically through the GetIds snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!AdvSearch?\n    &ids=`[[!GetIds? &ids=`c15`]]`\n    &hideContainers=`1`\n    &highlightTag=`strong`\n]]\n```\n\n----------------------------------------\n\nTITLE: Deleting Cache Entry Using xPDOCacheManager - PHP\nDESCRIPTION: Method signature for deleting a key-value pair from the cache provider. Takes a required key parameter and optional array of configuration options. Returns boolean indicating success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.delete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean delete (string $key, [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Objects by Primary Key in PHP\nDESCRIPTION: Examples showing how to retrieve a custom object (Box) by its primary key, demonstrating both array syntax and direct ID specification.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobject.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$box = $xpdo->getObject('Box', ['id' => 134]);\n$box = $xpdo->getObject('Box', 134); //\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Metadata with MODX Snippet\nDESCRIPTION: This snippet provides additional details about an image, such as the date it was taken and the camera used. Dependencies include having MODX set up and access to image metadata. Optionally, specify a template container using &tplContainer parameter. The snippet is executed using MODX syntax, and results in metadata display based on defined templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.image.information.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!image.information]]\n```\n\n----------------------------------------\n\nTITLE: Ext JS Alert with Variables\nDESCRIPTION: This JavaScript code demonstrates displaying an Ext JS alert message box using variables for the title and message. It utilizes the Ext.onReady function to ensure the DOM is fully loaded before executing the Ext JS code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"Ext.onReady(function() {\n    var title = 'Мой заголовок';\n    var msg = 'DOM подготовлен...';\n    Ext.MessageBox.alert(title,msg);\n});\n\"\n```\n\n----------------------------------------\n\nTITLE: PHP JSON Response Example for ExtJS\nDESCRIPTION: Demonstrates a typical JSON response structure from a server that ExtJS widgets can process, showing success/error states and data payload\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/extjs-widgets/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$array = array(\n    'success' => false,\n    'message' => 'Возника ошибка при сохранении формы',\n    'total' => 1\n    'data' => array(\n        'id' => 'alias',\n        'msg' => 'Это поле обязательно'\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Correct modAction Configuration for MODX Custom Manager Page\nDESCRIPTION: The proper configuration for a modAction object when using abstract classes in MODX. The controller path should be just 'index' rather than 'controllers/index'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$action= $modx->newObject('modAction');\n$action->fromArray(array(\n    'id' => 1,\n    'namespace' => 'doodles',\n    'parent' => 0,\n    'controller' => 'index',\n    'haslayout' => true,\n    'lang_topics' => 'doodles:default',\n    'assets' => '',\n),'',true,true);\n```\n\n----------------------------------------\n\nTITLE: Using Lexicons in PHP Code for MODX\nDESCRIPTION: This snippet shows how to load and use lexicon entries in PHP code. It first loads a lexicon topic from a specific namespace, then outputs a lexicon value by its key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/i18n/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon->load('namespace_name:topicname');\necho $modx->lexicon('key');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Snippet Vehicle in MODX\nDESCRIPTION: Demonstrates creating a basic vehicle for a MODX snippet with unique key settings, update options, and key preservation settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$snippet = $modx->newObject('modSnippet');\n$snippet->set('id',1);\n$snippet->set('name','Test');\n$vehicle = $builder->createVehicle($snippet,array(\n    xPDOTransport::UNIQUE_KEY => 'name',\n    xPDOTransport::UPDATE_OBJECT => true,\n    xPDOTransport::PRESERVE_KEYS => false,\n));\n```\n\n----------------------------------------\n\nTITLE: Updating UpdateProfile Snippet for Extended Fields in MODX\nDESCRIPTION: Modifies the UpdateProfile snippet call and form to include the 'custom_field' extended field. This allows users to update their extended profile data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/extended-user-profiles.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[!UpdateProfile? &excludeExtended=`email:required:email,login-updprof-btn` &useExtended=`1`]]\n\n<div class=\"update-profile\">\n    <div class=\"updprof-error\">[[+error.message]]</div>\n    [[+login.update_success:if=`[[+login.update_success]]`:is=`1`:then=`[[%login.profile_updated? &namespace=`login` &topic=`updateprofile`]]`]]\n\n    <form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n        <input type=\"hidden\" name=\"nospam:blank\" value=\"\" />\n\n        <label for=\"fullname\">[[!%login.fullname? &namespace=`login` &topic=`updateprofile`]]\n            <span class=\"error\">[[+error.fullname]]</span>\n        </label>\n        <input type=\"text\" name=\"fullname\" id=\"fullname\" value=\"[[+fullname]]\" />\n\n        <label for=\"email\">[[!%login.email]]\n            <span class=\"error\">[[+error.email]]</span>\n        </label>\n        <input type=\"text\" name=\"email:required:email\" id=\"email\" value=\"[[+email]]\" />\n\n        <label for=\"custom_field\">Custom Field\n            <span class=\"error\">[[+error.custom_field]]</span>\n        </label>\n        <input type=\"text\" name=\"custom_field\" id=\"custom_field\" value=\"[[+custom_field]]\" /><br/>\n\n                <br class=\"clear\" />\n\n        <div class=\"form-buttons\">\n            <input type=\"submit\" name=\"login-updprof-btn\" value=\"[[!%login.update_profile]]\" />\n        </div>\n    </form>\n</div>\n\n<p><a href=\"[[~12]]\">Change Password</a></p>\n```\n\n----------------------------------------\n\nTITLE: MODx.FormPanel Field Manipulation Methods\nDESCRIPTION: Common methods used for field manipulation in MODx.FormPanel instances\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.formpanel.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nformPanel.getField('fieldName'); // Get field object\nformPanel.hideField('fieldName'); // Hide field\nformPanel.showField('fieldName'); // Show field\nformPanel.setLabel('fieldName', 'New Label'); // Set field label\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Chunk Content in MODX\nDESCRIPTION: Practical example demonstrating how to set HTML content for a MODX chunk using the setContent method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modchunk/modchunk.setcontent.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$chunk->setContent('<h2>Hello!</h2>');\n```\n\n----------------------------------------\n\nTITLE: Handling OnTemplateVarSave Event in MODX Revolution PHP Plugin\nDESCRIPTION: This PHP code snippet demonstrates how to create a plugin that responds to the OnTemplateVarSave event. It outputs the saved template variable's data to the error log and checks whether a new TV was created or an existing one was updated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ontemplatevarsave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnTemplateVarSave':\n        //array tv, with all parameters\n        print_r($templateVar->toArray());\n        //checking for updating or creating the tv itself\n        if ($mode == modSystemEvent::MODE_NEW){\n            echo 'New TV has been saved';\n        } elseif ($mode == modSystemEvent::MODE_UPD){\n            echo 'Old TV was kept';\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Log Target in PHP\nDESCRIPTION: Demonstrates a cleaner way to define a custom logging target once and reuse it for multiple log calls.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$log_target = array(\n    'target'=>'FILE',\n    'options' => array(\n        'filename'=>'my_custom.log'\n    )\n);\n$xpdo->log(xPDO::LOG_LEVEL_ERROR, 'My Error...',$log_target);\n$xpdo->log(xPDO::LOG_LEVEL_ERROR, 'Some other error...',$log_target);\n```\n\n----------------------------------------\n\nTITLE: Changing Password for a Specific User in MODX\nDESCRIPTION: This snippet demonstrates how to change the password for a user with the username 'foobar' from 'boo123' to 'b33r4me' using the modUser::changePassword method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.changepassword.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$user = $modx->getObject('modUser',array('username' => 'foobar'));\n$user->changePassword('b33r4me', 'boo123');\n```\n\n----------------------------------------\n\nTITLE: Sitemap with Selective Resource Exclusion\nDESCRIPTION: Generate sitemap excluding specific resource but including its descendants\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[pdoSitemap?\n    &resources=`-25`\n    &parents=`-15,10`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Tabs for MIGX TV in JSON\nDESCRIPTION: JSON configuration for defining the input form structure of a MIGX TV. This example sets up tabs for 'Info' and 'Image' with fields for title, description, and image.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.backend-usage.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"caption\": \"Info\",\n    \"fields\": [\n      {\n        \"field\": \"title\",\n        \"caption\": \"Title\"\n      },\n      {\n        \"field\": \"description\",\n        \"caption\": \"Description\",\n        \"inputTVtype\": \"richtext\"\n      }\n    ]\n  },\n  {\n    \"caption\": \"Image\",\n    \"fields\": [\n      {\n        \"field\": \"image\",\n        \"caption\": \"Image\",\n        \"inputTVtype\": \"image\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Logging Resource Properties on OnDocFormSave in PHP\nDESCRIPTION: This snippet demonstrates how to log all available properties of the `$resource` object when the `OnDocFormSave` event is triggered.  It retrieves the page ID using `$resource->get('id')` and also shows how to access the ID directly using `$id`. It includes conditional logic based on whether the resource is new or updated.  This is useful for debugging or auditing resource changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Log all available properties of the $resource\n$modx->log(MODX_LOG_LEVEL_ERROR, print_r($resource->toArray(),true) );\n// Get the page id\n$page_id = $resource->get('id');\n// or simply\n$page_id = $id;\n\nif ($mode == 'new') {\n    // resource created\n}\nelse {\n   // existing resource was updated\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Login Form Template in MODX\nDESCRIPTION: This HTML chunk creates a customized login form with username and password fields, and includes a link to the 'Forgot Password' page. It's used as the loginTpl for the Login snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"loginForm\">\n    <div class=\"loginMessage\">[[+errors]]</div>\n    <div class=\"loginLogin\">\n        <form class=\"loginLoginForm\" action=\"[[~[[*id]]]]\" method=\"post\">\n            <fieldset class=\"loginLoginFieldset\">\n                <legend class=\"loginLegend\">[[+actionMsg]]</legend>\n                <label class=\"loginUsernameLabel\">[[%login.username]]\n                    <input class=\"loginUsername\" type=\"text\" name=\"username\" />\n                </label>\n                <label class=\"loginPasswordLabel\">[[%login.password]]\n                    <input class=\"loginPassword\" type=\"password\" name=\"password\" />\n                </label>\n                <input class=\"returnUrl\" type=\"hidden\" name=\"returnUrl\" value=\"[[+request_uri]]\" />\n                [[+login.recaptcha_html]]\n                <input class=\"loginLoginValue\" type=\"hidden\" name=\"service\" value=\"login\" />\n                <span class=\"loginLoginButton\"><input type=\"submit\" name=\"Login\" value=\"[[+actionMsg]]\" /></span>\n            </fieldset>\n        </form>\n    </div>\n</div>\n<a href=\"[[~2]]\">Forgot your Password?</a>\n```\n\n----------------------------------------\n\nTITLE: Managing MODX Class Key Relationships\nDESCRIPTION: Examples demonstrating how to work with class_key modifications and their effects on object relationships in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// both of these work when class_key is \"extUser\":\n$User = $modx->getObject('modUser', 123);\n$User = $modx->getObject('extUser', 123);\n\n$Data = $modx->newObject('Userdata');\n$Data->set('facebook_url',$url); // ... etc ...\n$User->addOne($Data);\n$User->save(); // this will not save related data if the class_key does not have the relations defined!\n$User->set('class_key', 'extUser');\n$User->save(); // now we can set related data\n$User->addOne($Data);\n$User->save(); // and now we can save related data\n```\n\n----------------------------------------\n\nTITLE: Pagination with Rowboat Using getPage in PHP\nDESCRIPTION: This snippet shows how to combine the Rowboat snippet with the getPage snippet in MODX for pagination. It defines parameters to paginate results and sets up navigation links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rowboat/rowboat.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage?\n   &element=`Rowboat`\n   &table=`modx_doodles`\n   &sortBy=`name`\n   &where=`{\"name:LIKE\":\"%Fun%\"}`\n   &totalVar=`rowboat.total`\n   &tpl=`myDoodle`\n   &cache=`0`\n   &limit=`10`\n]]\n<div class=\"paging\">\n<ul class=\"pageList\">\n  [[!+page.nav]]\n</ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Zoom Cropping with phpThumbOf in MODX\nDESCRIPTION: Creates a 300x300 thumbnail with zoom cropping enabled for better image fitting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/phpthumbof/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*thumbnailImage:phpthumbof=`w=300&h=300&zc=1`]]\n```\n\n----------------------------------------\n\nTITLE: Querying Related Settings by Area\nDESCRIPTION: Shows how to retrieve all settings from a specific area using getCollection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$relatedSettings = $modx->getCollection('modSystemSetting', array('area'=>'Mail'));\nforeach ( $relatedSettings as $Setting ) {\n        print $Setting->get('value');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic GoogleSiteMap Implementation in PHP\nDESCRIPTION: The most basic implementation of the GoogleSiteMap snippet that generates a sitemap for the current context. This should be placed in a resource with a blank template and XML content type.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemap.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap]]\n```\n\n----------------------------------------\n\nTITLE: Output Result of CSSSweet Prefix for Border-Radius\nDESCRIPTION: Shows the resulting CSS output after applying the prefix modifier to a border-radius property, adding vendor prefixes for WebKit and Mozilla browsers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.prefix.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n-webkit-border-radius: 3px;\n-moz-border-radius: 3px;\nborder-radius: 3px;\n```\n\n----------------------------------------\n\nTITLE: Rendering Upcoming Events List with EventsX Snippet in MODX Revolution\nDESCRIPTION: This snippet call uses the EventsX component to display a list of upcoming events. It utilizes the 'upcomingEvents' chunk as a template and limits the output to 10 events.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventsx/eventsx.examples.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<h2>next events:</h2>\n<ol id=\"eventcal\">\n    [[!EventsX? &tpl=`upcomingEvents` &limit=`10`]]\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Basic User Listing with Peoples Snippet\nDESCRIPTION: Demonstrates the basic usage of the Peoples snippet to list the first 10 users, sorted by username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Peoples]]\n```\n\n----------------------------------------\n\nTITLE: Customizing users.gallery.manage Template in MODX\nDESCRIPTION: This snippet example shows how to specify a custom template for the user gallery form. The 'tplFormGallery' parameter is used to set a different form container, enhancing customization of the user gallery interface within MODX. Paths are relative to MODX's assets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.users.gallery.manage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!users.gallery.manage? &tplFormGallery=`users.gallery.form`]]\n```\n\n----------------------------------------\n\nTITLE: Get Current User and Print Username (PHP)\nDESCRIPTION: This snippet retrieves the currently authenticated user and prints their username. It demonstrates basic usage of the getUser() method and accessing user properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getuser.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getUser();\necho $user->get('username');\n```\n\n----------------------------------------\n\nTITLE: Viewing Images in Album via sekUserGalleries.album.view\nDESCRIPTION: This snippet provides the ability to view images within the specified album. Users can navigate and visualize contents of albums using this feature.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.album.view]\n```\n\n----------------------------------------\n\nTITLE: Basic AdvSearch Implementation with Form and Results\nDESCRIPTION: Demonstrates how to display a search form with results below it using the AdvSearchForm and AdvSearch snippets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!AdvSearchForm]]\n\n<h2>Results</h2>\n[[!AdvSearch]]\n```\n\n----------------------------------------\n\nTITLE: Configuring boilerX Example Template\nDESCRIPTION: Demonstrates the basic template structure using boilerX chunks for creating a standard HTML5 page layout with configurable components\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[[$bx-head-open]]\n[[$bx-head-append]]\n[[$bx-head-close]]\n[[$bx-container-open]]\n[[*content]]\n[[$bx-container-close]]\n[[$bx-bottom-open]]\n[[$bx-bottom-close]]\n```\n\n----------------------------------------\n\nTITLE: Checking Page Locks with modX::checkForLocks\nDESCRIPTION: Method signature for checking if a page is currently locked by another user. Takes user ID, action type, and lock type as parameters to determine if content is being edited by another user.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.checkforlocks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid checkForLocks (integer $id, string $action, string $type)\n```\n\n----------------------------------------\n\nTITLE: Customized Login Form Snippet Call in MODX\nDESCRIPTION: An example of calling the Login snippet with custom template and template type parameters in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Login? &tplType=`modChunk` &loginTpl=`myLoginChunk`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Weather Snippet in MODX\nDESCRIPTION: A custom MODX snippet that fetches weather data from an API and returns the current weather description. This example demonstrates how to create dynamic functionality using PHP within MODX snippets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Stash API URL\n$jsonurl = \"https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\";\n\n// Call API\n$json = file_get_contents($jsonurl);\n\n// Stash results\n$weather = json_decode($json);\n\n// Return weather description\nreturn $weather->weather[0]->main;\n```\n\n----------------------------------------\n\nTITLE: Using System Settings for Date Formatting\nDESCRIPTION: Example of using the manager_date_format system setting to dynamically format dates according to the site configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/date-formats.md#2025-04-17_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\n[[*createdon:strtotime:date=`[[++manager_date_format]]`]]\n```\n\n----------------------------------------\n\nTITLE: Using EletterFormItEmail Hook with FormIt\nDESCRIPTION: Example of using the EletterFormItEmail hook with FormIt to send an email using Eletter Resource #10 after form validation. This code demonstrates a basic implementation with validation and email settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eletters/eletters.formit.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n &submitVar=`submit`\n &validationErrorMessage=`<h3>Please fill in all fields</h3>`\n &validate=`email:email:required,question:required`\n &hooks=`eletterFormItEmail`\n &emailSubject=`Question`\n &emailTo=`email@email.com`\n &emailResourceID=`10`\n]]\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Documents from modX\nDESCRIPTION: Fetches a collection of document objects of type 'modResource' according to provided criteria, enabling bulk content management.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nmodX->getDocuments\n```\n\n----------------------------------------\n\nTITLE: Sorting Resources by Specific IDs in PHP\nDESCRIPTION: This code snippet demonstrates how to sort resources by a list of specific resource IDs, allowing for controlled ordering in the query results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n&sortby=`FIELD(modResource.id, 4,7,2,5,1 )`\n```\n\nLANGUAGE: php\nCODE:\n```\n&sortby=`FIELD(modResource.id,[[*templateVariable]])`\n```\n\n----------------------------------------\n\nTITLE: Setting TV Value with setTVValue in PHP\nDESCRIPTION: Demonstrates how to use the setTVValue method to save a new value to a Template Variable. This method immediately stores values in the database but does not clear the resource cache.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/accessing-tvs.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$page = $modx->getObject('modResource', 123);\nif (!$page->setTVValue('bio', 'This is my new bio...')) {\n    $modx->log(xPDO::LOG_LEVEL_ERROR, 'There was a problem saving your TV...');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache .htaccess for StatCache with MODX in Document Root\nDESCRIPTION: Apache .htaccess configuration for serving StatCache static files when MODX is installed directly in the document root. These rules check for static cached files before passing requests to MODX's standard processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/statcache/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# If MODX is directly in your DOCUMENT_ROOT,\n# add this before your MODX Friendly URLs RewriteCond's and RewriteRule...\nRewriteCond %{DOCUMENT_ROOT}/statcache%{REQUEST_URI}/~index.html -f\nRewriteRule ^(.*)$ statcache/$1~index.html [L,QSA]\n\nRewriteCond %{DOCUMENT_ROOT}/statcache%{REQUEST_URI} -f\nRewriteRule ^(.*)$ statcache/$1 [L,QSA]\n```\n\n----------------------------------------\n\nTITLE: User List SELECT Binding Query\nDESCRIPTION: Query to retrieve a list of active users for a select box, returning username and ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/select-binding.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n@SELECT `username` AS `name`,`id` FROM `[[+PREFIX]]users` WHERE `active` = 1\n```\n\n----------------------------------------\n\nTITLE: Dynamic Title Implementation\nDESCRIPTION: Example of implementing the dynamic title snippet in a page template\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoCrumbs.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<title>[[Title]] / [[++site_name]] - my best website in the world</title>\n```\n\n----------------------------------------\n\nTITLE: Customizing Gallery Display with MODX using PHP\nDESCRIPTION: This snippet is an enhanced version of the gallery listing that allows users to specify customized templates for the gallery container and rows. It accepts parameters for tplContainer and tplRow, enhancing the flexibility of output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.browse.galleries.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!users.gallery.view? &tplContainer=`browse.galleries.container` &tplRow=`browse.galleries.row`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Join Tables in MySQL\nDESCRIPTION: This MySQL code snippet defines a many-to-many relationship using three tables: `blogposts`, `tags`, and a join table `blogposts_tags`. Each table is created with a primary key, and the join table associates blog posts and tags by referencing the respective primary keys.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `blogposts` (\n  `blogpost_id` int(11) NOT NULL AUTO_INCREMENT,\n  `content` text,\n  PRIMARY KEY (`blogpost_id`)\n) ENGINE=MyISAM;\nCREATE TABLE `tags` (\n  `tag_id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`tag_id`)\n) ENGINE=MyISAM;\n/* The Join Table: */\nCREATE TABLE `blogposts_tags` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `blogpost` int(11) DEFAULT NULL,\n  `tag` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM;\n```\n\n----------------------------------------\n\nTITLE: Using getPage with getResources to paginate child resources\nDESCRIPTION: Example of using getPage to paginate a list of all child Resources of the current Resource, using a chunk called 'myRowTpl' for the output of each row.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getpage/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage? &element=`getResources` &parents=`[[*id]]` &tpl=`myRowTpl`]]\n<div class=\"pageNav\">[[!+page.nav]]</div>\n```\n\n----------------------------------------\n\nTITLE: Fenom Placeholder Processing Example\nDESCRIPTION: Demonstrates the correct order of processing placeholders in Fenom, showing how to handle search results and form display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n{'!pdoPage' | snippet : [\n    'element' => 'mSearch2',\n    'toPlaceholder' => 'searchResults'\n]}\n\n{'!mSearchForm' | snippet}\n\n{'searchResults' | placeholders}\n```\n\n----------------------------------------\n\nTITLE: Using Lexicon Tags for Localization in MODX Revolution\nDESCRIPTION: Illustrates the use of lexicon tags for localizing messages in MODX Revolution. This example retrieves a localized setting message with specific parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n[[!%setting_emailsender? &topic=`setting` &namespace=`core` &language=`en`]]\n```\n\n----------------------------------------\n\nTITLE: numberformat Output Filter\nDESCRIPTION: An output filter that formats numbers using PHP's number_format function with configurable decimals, decimal point and thousands separator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$number = floatval($input);\n$optionsXpld = @explode('&', $options);\n$optionsArray = array();\nforeach ($optionsXpld as $xpld) {\n    $params = @explode('=', $xpld);\n    array_walk($params, function(&$v) { return $v = trim($v);});\n    if (isset($params[1])) {\n        $optionsArray[$params[0]] = $params[1];\n    } else {\n        $optionsArray[$params[0]] = '';\n    }\n}\n$decimals = isset($optionsArray['decimals']) ? $optionsArray['decimals'] : null;\n$dec_point = isset($optionsArray['dec_point']) ? $optionsArray['dec_point'] : null;\n$thousands_sep = isset($optionsArray['thousands_sep']) ? $optionsArray['thousands_sep'] : null;\n$output = number_format($number, $decimals, $dec_point, $thousands_sep);\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Accessing FormIt Configuration in Custom Hooks (PHP)\nDESCRIPTION: Demonstrates how to access FormIt snippet properties (configuration) within a custom hook using the formit object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$hook->formit->config['key']\n```\n\n----------------------------------------\n\nTITLE: Fourth Tpl Chunk Content (HTML)\nDESCRIPTION: This HTML snippet defines a chunk named `4thTplChunk` that includes the `GenericTplChunk` and applies a highlight class. The example provided demonstrates how to workaround MODX's caching issues when calling a generic chunk from within another chunk. A dummy tag, &idx=`[[+idx]]`, is added to the generic chunk call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"highlight\">[[$GenericTplChunk]]</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"highlight\">[[$GenericTplChunk? &idx=`[[+idx]]` ]]</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Output Modifier Snippet Implementation\nDESCRIPTION: This is the PHP code for a custom output modifier snippet called `makeExciting`. It takes an input string and adds a specified number of exclamation marks to it, returning the modified string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$defaultExcitementLevel = 1;\n$result = $input;\nif (isset($options)) {\n    $numberOfExclamations = $options;\n} else {\n    $numberOfExclamations = $defaultExcitementLevel;\n}\nfor ( $i = $numberOfExclamations; $i > 0; $i-- ) {\n    $result = $result . '!';\n}\nreturn $result;\n```\n\n----------------------------------------\n\nTITLE: Using createObjectContainer Within MODX Snippets\nDESCRIPTION: Demonstrates how to create a database table for a custom object within a MODX snippet by first adding the package and then using the manager to create the container.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.createobjectcontainer.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('yourpkg',MODX_CORE_PATH.'components/yourpkg/model/','prefix_');\n$manager = $modx->getManager();\n$manager->createObjectContainer('Myobject');\n```\n\n----------------------------------------\n\nTITLE: Adding reCaptcha to MODX Login Snippet\nDESCRIPTION: This snippet demonstrates how to add reCaptcha functionality to the MODX Login snippet using the 'recaptcha' preHook. It requires setting up reCaptcha API keys in System Settings and including the reCaptcha HTML placeholder in the loginTpl chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Login? &preHooks=`recaptcha`]]\n```\n\n----------------------------------------\n\nTITLE: Debugging getResources Results in PHP\nDESCRIPTION: Using the debug parameter with getResources to output the full result set of resources, which is necessary since version 1.6.1-pl to see complete resource data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &debug=`1`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`choose_an_id` &debug=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Logging Deleted Chunk Information in MODX\nDESCRIPTION: Plugin example that logs information about a deleted chunk to the MODX error log, including the chunk's ID and name. The plugin captures the chunk details when the OnChunkFormDelete event is triggered.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onchunkformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnChunkFormDelete':\n        $n = $chunk->get('name');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'The chunk has been removed from id '.$id.' his name was '.$n.' you have no heart!');\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Using pdoField as Output Modifier\nDESCRIPTION: Basic usage of pdoField as an output modifier to get a specific field value\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoField.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*id:pdofield=`longtitle`]]\n```\n\n----------------------------------------\n\nTITLE: Ajax Callback Functions\nDESCRIPTION: JavaScript callback functions for handling pre and post Ajax load events.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\npdoPage.callbacks['before'] = function(config) {\n    console.log('The config before load!', config);\n};\npdoPage.callbacks['after'] = function(config, response) {\n    console.log('The config after load!', config);\n    console.log('The response from server!', response);\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Output Modifiers to Snippet Output in MODX\nDESCRIPTION: Demonstrates how to apply output modifiers to the results of a snippet. The modifier is placed after the snippet name and before the question mark that marks the beginning of parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[mySnippet:modifier=`value`? &mySnippetParam=`something`]]\n```\n\n----------------------------------------\n\nTITLE: Getting Authenticated User Syntax in ModX PHP\nDESCRIPTION: Method signature for retrieving an authenticated user from a specified context. Takes an optional contextKey parameter as string and returns the user object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getauthenticateduser.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nunknown getAuthenticatedUser ([string $contextKey = ''])\n```\n\n----------------------------------------\n\nTITLE: Debugging Queries in xPDO using xPDOQuery in PHP\nDESCRIPTION: This code snippet demonstrates how to output the SQL query generated by an xPDOQuery object. This can help in debugging by showing the actual SQL that will be executed against the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/index.md#2025-04-17_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$c = $xpdo->newQuery('Box');\n// ... add some more criteria...\n$c->prepare();\nprint $c->toSQL();\n```\n\n----------------------------------------\n\nTITLE: FormIt - Custom Validator Snippet Example\nDESCRIPTION: This snippet provides an example of a custom validator snippet for FormIt. It checks if the value of the field is greater than 1000 and adds an error message if it is not.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$value = (float)$value;\n$success = $value > 1000;\nif (!$success) {\n    // Note how we can add an error to the field here.\n    $validator->addError($key,'Not big enough!');\n}\nreturn $success;\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Switching with OnHandleRequest Plugin in MODX\nDESCRIPTION: A PHP plugin that switches MODX contexts based on the HTTP host domain. The plugin checks the incoming domain and switches to the appropriate context, allowing multiple domains to be served from a single MODX installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/gateway-plugin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* don't execute if in the Manager */\nif ($modx->context->get('key') == 'mgr') {\n        return;\n}\n\nswitch ($_SERVER['HTTP_HOST']) {\n        case 'domain2.tld':\n                // if the http_host is of a specific domain, switch the context\n                $modx->switchContext('domain2.tld');\n                break;\n        case 'domain3.tld':\n                // if the http_host is of a specific domain, switch the context\n                $modx->switchContext('domain3.tld');\n                break;\n        default:\n                // by default, don't do anything\n                break;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Basic xPDOQuery Select Method Syntax\nDESCRIPTION: Shows the basic syntax for using getSelectColumns() method to specify columns to return from SQL query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetSelectColumns($className, $tableAlias= '', $columnPrefix= '', $columns= array (), $exclude= false)\n```\n\n----------------------------------------\n\nTITLE: Logging User Logout Details PHP Plugin\nDESCRIPTION: A PHP plugin that logs the user ID and logout context when a user logs out of the web context. Demonstrates how to use the OnBeforeWebLogout event to capture logout information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onbeforeweblogout.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeWebLogout':\n        $u = $user->get('id');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'Пользователь с id '.$u.' разлогинился в контексте '.$loginContext.' и еще вот в этих'.print_r($addContexts));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Resource Edit (Revolution 2.3+)\nDESCRIPTION: Updated JavaScript navigation method using direct controller names without action identifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/menus/action-list.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.loadPage('resource/update', 'id=5');\n```\n\n----------------------------------------\n\nTITLE: Logging to a Custom File in PHP\nDESCRIPTION: Shows how to log messages to a custom log file by passing an array to the target argument with specific options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->log(xPDO::LOG_LEVEL_ERROR, 'Error for my custom log file', array(\n    'target' => 'FILE',\n    'options' => array(\n        'filename' => 'custom.log'\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Filtering Words from MODX Document Output (PHP)\nDESCRIPTION: This snippet demonstrates how to filter specific words from a MODX document's output before it's displayed on the web. It uses the OnWebPagePrerender event to access and modify the page content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onwebpageprerender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$words = array(\"snippet\", \"template\"); // words to filter\n$output = &$modx->resource->_output; // get a reference to the output\n$output = str_replace($words,\"<b>[filtered]</b>\",$output);\n```\n\n----------------------------------------\n\nTITLE: Inline Template Usage\nDESCRIPTION: Shows how to use pdoUsers with an inline template to display member names and IDs with custom sorting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoUsers.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoUsers?\n    &roles=`Member`\n    &tpl=`@INLINE <p>Имя - [[+fullname]], ID - [[+id]]</p>`\n    &sortby=`id`\n    &sortdir=`asc`\n]]\n```\n\n----------------------------------------\n\nTITLE: Adding Records to Database for Testing\nDESCRIPTION: This snippet adds two new records to the 'sfStore' table. It creates new objects, populates them with data using the `fromArray()` method, and then saves them to the database using the `save()` method.  It's crucial to only execute this code once to avoid duplicate entries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$store = $modx->newObject('sfStore');\n$store->fromArray(array(\n    'name' => 'Store 1',\n    'address' => '12 Grimmauld Place',\n    'city' => 'London',\n    'country' => 'England',\n    'zip' => '12345',\n    'phone' => '555-2134-543',\n));\n$store->save();\n$store = $modx->newObject('sfStore');\n$store->fromArray(array(\n    'name' => 'Store 2',\n    'address' => '4 Privet Drive',\n    'city' => 'London',\n    'country' => 'England',\n    'zip' => '53491',\n    'phone' => '555-2011-978',\n));\n$store->save();\n```\n\n----------------------------------------\n\nTITLE: Resolver Script Structure for MODX Component (PHP)\nDESCRIPTION: Template for a resolver script used in MODX component packages. Resolvers are executed during package installation, update, and uninstallation to perform custom actions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/component-structure.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($object->xpdo) {\n    /* @var modX $modx */\n    $modx =& $object->xpdo;\n\n    switch ($options[xPDOTransport::PACKAGE_ACTION]) {\n        case xPDOTransport::ACTION_INSTALL:\n            // Actions on first package installation\n            break;\n\n        case xPDOTransport::ACTION_UPGRADE:\n            // Actions when updating a package\n            break;\n\n        case xPDOTransport::ACTION_UNINSTALL:\n            // What to do when removing a package\n            break;\n    }\n}\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Width Resizing with MODX Revolution - PHP\nDESCRIPTION: This snippet illustrates how to resize an image to 150 pixels in width using the RezImgCrop filter, allowing the height to adjust proportionally.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`r-150x`]]\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Request Handler Example\nDESCRIPTION: Example demonstrating how to load a custom request handler class named 'myRequest' from a specific file path. Shows practical usage of the getRequest method with custom parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getrequest.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->getRequest('myRequest','/path/to/');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Fields with BreadCrumb Instead of titleField\nDESCRIPTION: Demonstrates how to replace the titleField property from Breadcrumbs by using custom template chunks in BreadCrumb that can reference alternative field names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[[Breadcrumbs? &titleField=`menutitle`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[BreadCrumb? &linkCrumbTpl=`myLinkCrumbTpl` &currentCrumbTpl=`myCurrentCrumbTpl`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<li><a href=\"[[+link]]\">[[+menutitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Query Condition Operators Demonstration\nDESCRIPTION: Showcases various comparison and filtering operators available in xPDOQuery for building flexible database queries\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$c = $xpdo->newQuery('Person');\n$c->where(array(\n  'name:=' => 'John', /* Равно */\n  'name:!=' => 'Sue', /* Неравно */\n  'age:>' => '21', /* Больше чем */\n  'age:>=' => '21', /* Больше или равно */\n  'age:<' => '18', /* Меньше, чем */\n  'age:<=' => '18', /* Меньше или равно */\n  'search:LIKE' => 'Term', /* LIKE statement */\n  'field' => null, /* проверка на NULL */\n  'ids:IN' => array(1,2,3), /* IN statement */\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring Thumbnail Properties in Gallery Snippet with PHP\nDESCRIPTION: This snippet demonstrates how to customize thumbnail properties using the Gallery snippet. It sets the output of thumbnails to 90% quality JPG format instead of the default PNG.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery?\n    &album=`My Album`\n    &thumbProperties=`{\"f\":\"jpg\",\"q\":\"90%\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Processing User Link Chunk\nDESCRIPTION: Example of processing a chunk with nested properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->getChunk('UserLink',array(\n   'user' => array('id' => 123)\n);\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Displaying Home Crumb in PHP\nDESCRIPTION: By setting the 'showHomeCrumb' parameter to 1, this snippet includes the home page in the breadcrumb path, positioned at the start. This enhances navigation visibility.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n[[BreadCrumb? &showHomeCrumb=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Theme Assets Directory Structure\nDESCRIPTION: Shows the directory path where theme-specific assets should be stored.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/cmp/themes.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nassets/themes/{{theme-name}}\n```\n\n----------------------------------------\n\nTITLE: pdoNeighbors with Custom Resource ID\nDESCRIPTION: Implementation of pdoNeighbors snippet with a specific resource ID to show neighbors for.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoNeighbors.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[pdoNeighbors?\n    &id=`55`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining Time Format with PHP date() Format in MODX Manager\nDESCRIPTION: This setting controls how time is displayed in the MODX manager interface using PHP's date() format syntax. The default format 'g:i a' displays time as hours:minutes with AM/PM indicator (e.g., '3:45 pm').\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/manager_time_format.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ng:i a\n```\n\n----------------------------------------\n\nTITLE: Custom Template for Facet Searches\nDESCRIPTION: Sets up a custom template for displaying 'people' facet results, using a specific chunk called 'OurPeopleChunk'. This configuration allows customization of the output format for the custom facet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch/faceted-search-through-posthooks.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch?\n    &toPlaceholder=`simplesearch.results`\n    &perPage=`20`\n    &postHooks=`PeopleFacetHook`\n    &tplpeople=`OurPeopleChunk`\n    &facetLimit=`5`\n]]\n\n<h2>Search Results</h2>\n[[+simplesearch.results]]\n\n<h2>People</h2>\n[[+simplesearch.people.results]]\n```\n\n----------------------------------------\n\nTITLE: Initializing File-based Register in MODX\nDESCRIPTION: Example showing how to add a file-based register named 'food' using modFileRegister implementation. This register stores messages in the registry/ folder under MODX cache_path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->getService('registry', 'registry.modRegistry');\n$modx->registry->addRegister('food', 'registry.modFileRegister', array('directory' => 'food'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook Authentication Keys in MODX System Settings\nDESCRIPTION: This snippet shows how to format the Facebook application credentials (App ID and Secret) in the ha.keys.Facebook system setting. The credentials are structured as a JSON object containing id and secret properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hybridauth/hybridauth.integrating-facebook.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{\"id\":\"1234567890\",\"secret\":\"f384hf3894hf8394hf843hf\"}\n```\n\n----------------------------------------\n\nTITLE: Simple Parent IDs Retrieval Example\nDESCRIPTION: Basic example showing how to get parent IDs for resource #23.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getparentids.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$parentIds = $modx->getParentIds(23);\n```\n\n----------------------------------------\n\nTITLE: Updating MODX Configuration File Paths\nDESCRIPTION: This PHP code snippet shows the variables in the MODX configuration file that need to be updated with new paths when moving to a new server.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/* PATHS */\n$modx_core_path= '/path/to/modx_doc_root/core/';\n$modx_processors_path= '/path/to/modx_doc_root/core/model/modx/processors/';\n$modx_connectors_path= '/path/to/modx_doc_root/connectors/';\n$modx_manager_path= '/path/to/modx_doc_root/manager/';\n$modx_base_path= '/path/to/modx_doc_root/';\n$modx_assets_path= '/path/to/modx_doc_root/assets/';\n\n/* HOST (used for command-line PHP stuff) */\n$http_host='yoursite.com';\n```\n\n----------------------------------------\n\nTITLE: Using commit Method in xPDO Class in PHP\nDESCRIPTION: Demonstrates how to call the commit method on an xPDO instance to commit a database transaction. This method wraps PHP's PDO commit functionality to finalize changes made during a transaction.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.commit.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->commit();\n```\n\n----------------------------------------\n\nTITLE: Instantiating GalleryItemPagination Snippet in PHP\nDESCRIPTION: A PHP snippet that retrieves gallery items from an album and sets placeholders for navigation between items. It handles dynamic item selection based on URL parameters and supports album-specific navigation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem/galleryitempagination.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// First instantiate the Gallery package\n$modx->addPackage('gallery',$modx->getOption('gallery.core_path',$config,$modx->getOption('core_path').'components/gallery/').'model/');\n$curItem = $modx->getOption('curItem',$scriptProperties,1);\nif ($modx->getOption('checkForRequestVar',$scriptProperties,true)) {\n    $getParam = $modx->getOption('getParam',$scriptProperties,'galItem');\n    if (!empty($_REQUEST[$getParam])) { $curItem = (int)$_REQUEST[$getParam]; }\n}\nif (empty($curItem)) return '';\n$album = $modx->getOption('album',$scriptProperties,1);\nif ($modx->getOption('checkForRequestAlbumVar',$scriptProperties,true)) {\n    $albumRequestVar = $modx->getOption('albumRequestVar',$scriptProperties,'galAlbum');\n    if (!empty($_REQUEST[$albumRequestVar])) $album = $_REQUEST[$albumRequestVar];\n}\n// We pass the album name/ID to an &album property and find the gallery object\nif (!is_int($album)) {\n    $gallery = $modx->getObject('galAlbum',array('name' => $album));\n    if ($gallery instanceof galAlbum)\n        $album = $gallery->get('id');\n}\n$c = $modx->newQuery('galAlbumItem');\n$c->innerJoin('galItem','Item');\n$c->where(\n    array(\n        'album' => $album,\n    )\n);\n$c->select(\n    array(\n        'galAlbumItem.*',\n        'Item.*',\n    )\n);\n$c->sortby('rank','asc');\n$collection = $modx->getCollection('galAlbumItem',$c);\n$items = array();\nforeach ($collection as $i) {\n    $items[] = $i->toArray();\n}\n$continue = true;\n$i = 0; $prev = array(); $cur = array(); $next = array();\nwhile ($continue) {\n    $prev = $cur;\n    $cur = $items[$i];\n    if ($cur['id'] == $curItem) {\n        $next = $items[$i+1];\n        $continue = false;\n    }\n    $i++;\n}\n$first = $items[0];\n$last = $items[count($items)-1];\n$phs['galitem.cur.'] = $cur;\n$phs['galitem.prev.'] = $prev;\n$phs['galitem.next.'] = $next;\n$phs['galitem.first.'] = $first;\n$phs['galitem.last.'] = $last;\n$modx->setPlaceholders($phs);\nreturn '';\n```\n\n----------------------------------------\n\nTITLE: Putting Chunk in modX\nDESCRIPTION: Stores a chunk of content within modX, allowing reusability of HTML templates and code segments throughout the application.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nmodX->putChunk()\n```\n\n----------------------------------------\n\nTITLE: parseLinks Output Filter\nDESCRIPTION: An output filter that finds URLs in text and converts them to clickable HTML links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/*\n * Based on phx:parseLinks\n */\n$t = $input;\n$t = ereg_replace(\"[a-zA-Z]+://([.]?[a-zA-Z0-9_/-])*\", \"<a href=\\\"\\\\0\\\">\\\\0</a>\", $t);\n$t = ereg_replace(\"(^| |\\n)(www([.]?[a-zA-Z0-9_/-])*)\", \"\\\\1<a href=\\\"http://\\\\2\\\">\\\\2</a>\", $t);\nreturn $t;\n```\n\n----------------------------------------\n\nTITLE: Creating XML Schema for Doodles with MIGXdb\nDESCRIPTION: This XML schema defines the structure of the 'doodles' database table, including fields like name, description, createdon, and createdby. It specifies the data types, lengths, and default values for each field. The schema is used to create the database table and associated xPDO classes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-doodles-manager-with-help-of-migxdb.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<model package=\\\"doodles\\\" baseClass=\\\"xPDOObject\\\" platform=\\\"mysql\\\" defaultEngine=\\\"MyISAM\\\" version=\\\"1.1\\\">\\n    <object class=\\\"Doodle\\\" table=\\\"doodles\\\" extends=\\\"xPDOSimpleObject\\\">\\n        <field key=\\\"name\\\" dbtype=\\\"varchar\\\" precision=\\\"255\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\"/>\\n        <field key=\\\"description\\\" dbtype=\\\"text\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\"/>\\n        <field key=\\\"createdon\\\" dbtype=\\\"datetime\\\" phptype=\\\"datetime\\\" null=\\\"true\\\"/>\\n        <field key=\\\"createdby\\\" dbtype=\\\"int\\\" precision=\\\"10\\\" attributes=\\\"unsigned\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"editedon\\\" dbtype=\\\"datetime\\\" phptype=\\\"datetime\\\" null=\\\"true\\\"/>\\n        <field key=\\\"editedby\\\" dbtype=\\\"int\\\" precision=\\\"10\\\" attributes=\\\"unsigned\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"deleted\\\" dbtype=\\\"tinyint\\\" precision=\\\"1\\\" attributes=\\\"unsigned\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"published\\\" dbtype=\\\"tinyint\\\" precision=\\\"1\\\" attributes=\\\"unsigned\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <aggregate alias=\\\"CreatedBy\\\" class=\\\"modUser\\\" local=\\\"createdby\\\" foreign=\\\"id\\\" cardinality=\\\"one\\\" owner=\\\"foreign\\\"/>\\n        <aggregate alias=\\\"EditedBy\\\" class=\\\"modUser\\\" local=\\\"editedby\\\" foreign=\\\"id\\\" cardinality=\\\"one\\\" owner=\\\"foreign\\\"/>\\n    </object>\\n</model>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationship in xPDO XML Schema\nDESCRIPTION: XML schema definitions for a one-to-many relationship between 'Blogposts' and 'Comments' objects in xPDO.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"Blogposts\" table=\"blogposts\" extends=\"xPDOObject\">\n        <field key=\"blogpost_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n        <field key=\"content\" dbtype=\"text\" phptype=\"string\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"blogpost_id\" collation=\"A\" null=\"false\" />\n        </index>\n        <composite alias=\"Comments\" class=\"Comments\" local=\"blogpost_id\" foreign=\"blogpost\" cardinality=\"many\" owner=\"local\" />\n</object>\n<object class=\"Comments\" table=\"comments\" extends=\"xPDOObject\">\n        <field key=\"comment_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n        <field key=\"blogpost\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"true\" />\n        <field key=\"comment\" dbtype=\"text\" phptype=\"string\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"comment_id\" collation=\"A\" null=\"false\" />\n        </index>\n        <aggregate alias=\"Blogposts\" class=\"Blogposts\" local=\"blogpost\" foreign=\"blogpost_id\" cardinality=\"one\" owner=\"foreign\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: getResourceField with ID Parameter\nDESCRIPTION: This example demonstrates how to use the 'id' parameter to retrieve the pagetitle from a specific resource. The 'id' parameter is set to '123', so the pagetitle of the resource with ID 123 will be returned.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresourcefield/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getResourceField? &id=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for CopyrightedResource\nDESCRIPTION: XML schema definition for creating a custom resource class that extends modResource\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"copyrightedresource\" version=\"1.0\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\">\n    <object class=\"CopyrightedResource\" extends=\"modResource\" />\n</model>\n```\n\n----------------------------------------\n\nTITLE: Implementing Eletters API Email Trigger in PHP\nDESCRIPTION: This snippet demonstrates how to use the Eletters API to send an email to the currently logged-in MODX user. It loads the Eletters service, retrieves user information, sets up email options including recipient details and resource ID, and sends the email with custom placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eletters/eletters.api.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Eletter Trigger/Response code example snippet\n * @return (String) $html\n *\n *\n * This example will just email the MODX User on page load\n *\n */\n\nif (!isset($modx->eletters)) {\n    $modx->addPackage('eletters', $modx->getOption('core_path').'components/eletters/model/');\n    $modx->eletters = $modx->getService('eletters', 'Eletters', $modx->getOption('core_path').'components/eletters/model/eletters/');\n}\n$eletters =& $modx->eletters;\n\n$profile = $modx->user->getOne('Profile');\n$to = $to_name = '';\nif ( is_object($profile) ) {\n    $to = $profile->get('email');\n    $to_name = $profile->get('fullname');\n} else {\n    return 'Cannot find MODX user';\n}\n\n$options = array(\n    'to_address' => $to,\n    'to_name' => $to_name,\n    'EResourceID' => 10,\n);\n\n$placeholders = $profile->toArray();\n\n/**\n *\n * @param (Array) $options  - name=>value ex: for auto response form_address=Fname Lname\n *              'from_address' => '',\n                'from_name' => '',\n                'to_address' => '',\n                'to_name' => '',\n                'cc_address' => '',\n                'cc_name' => '',\n                'bcc_address' => '',\n                'bcc_name' => '',\n                'reply_to_address' => '',\n                'reply_to_name' => '',\n                'ishtml' => TRUE,\n                'NewsletterID' => '',\n                'EResourceID' => '',\n                'uploads' => TRUE,\n                'files' => TRUE,\n * @param (Array) $placeholders - MODX placehoders -name=>value\n * @param (Boolean) $log - TRUE will save completed email to DB\n * @param (Array) $attachments - add addtional attachments\n */\n\n$sent = $eletters->sendResponse($options, $placeholders, $log=TRUE);\n\n$output = '';\nif ( $sent ) {\n    $output = 'An email was sent to '.$to_name.' at '.$to.' email address.';\n} else  {\n    $output = 'An email could not be sent to '.$to_name.' at '.$to.' email address.';\n}\n\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Fetching Document Identifier\nDESCRIPTION: Retrieve resource identifiers using `modRequest\\->getResourceIdentifier()` within MODX to work with specific document or resource identifiers accurately.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getDocumentIdentifier()\n```\n\n----------------------------------------\n\nTITLE: Debugging Email in MODX with QuickEmail\nDESCRIPTION: Debug mode implementation of QuickEmail snippet that enables detailed logging and troubleshooting of email functionality in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quickemail/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!QuickEmail? &debug=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties in a Snippet using $scriptProperties in MODX\nDESCRIPTION: This snippet shows how to access properties passed to a snippet through the $scriptProperties array. The property 'propertyName' is retrieved from the array and assigned to the $prop variable. This allows the snippet to utilize parameters passed to it via tag syntax or property sets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/properties-and-property-sets.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$prop = $scriptProperties['propertyName'];\n```\n\n----------------------------------------\n\nTITLE: Number Input Type JSON Configuration Options\nDESCRIPTION: JSON configuration options for the Number input type. Includes settings for controlling decimals, negative values, and validation constraints.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"allowDecimals\": \"Yes\",\n    \"allowNegative\": \"Yes\",\n    \"decimalPrecision\": \"2\",\n    \"decimalSeparator\": \".\",\n    \"maxValue\": \"\",\n    \"minValue\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Link to the Next Resource with selfLink in PHP\nDESCRIPTION: This code snippet demonstrates how to use the selfLink snippet in MODX Revolution to create a link to the next resource in the hierarchy. The snippet relies on the selfLink package, which must be installed via the MODX Package Manager. The primary parameter used here is 'direction', which specifies that the link should point to the 'next' resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/selflink/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[selfLink? &direction=`next`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Host Settings\nDESCRIPTION: Demonstrates how to set up context settings for domain routing in MODX ContextRouter, including http_host and http_host_aliases\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/contextrouter/index.md#2025-04-17_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nhttp_host = \"sub.domain.com\"\nhttp_host_aliases = \"otherdomain.tld,another-domain.com\"\nbase_url = \"/\"\nsite_url = \"http://sub.domain.com/\"\nsite_start = \"15\"\n```\n\n----------------------------------------\n\nTITLE: Basic Twitter Profile Retrieval in PHP\nDESCRIPTION: A basic example of retrieving Twitter profile data for the 'modx' user with debugging enabled and setting data to placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.gettwitterprofile.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getTwitterProfile? &user=`modx` &showAvailableData=`1` &toPlaceholders=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Completed Related Pages Snippet in MODX\nDESCRIPTION: This complete PHP code snippet fetches related resource objects based on IDs, validates them, and outputs a formatted string using a chunk template. It highlights methods such as getObject and getChunk for resource and template management within MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nif (empty($input)) { return 'This article is so unique, that we couldn\\'t find anything related to it!'; }\n$tpl = $modx->getOption('tpl',$scriptProperties,'relatedPagesTpl');\nif ($modx->getChunk($tpl) == '') { return 'We found some related pages, but don\\'t know how to present it.'; }\n$ids = explode(',', $input);\n$output = array();\nforeach ($ids as $key => $value) {\n  $resource = $modx->getObject('modResource',array(\n    'published' => 1,\n    'id' => $value));\n  if ($resource instanceof modResource) {\n    $output[] = $modx->getChunk($tpl,$resource->toArray());\n  }\n}\nreturn implode('',$output);\n```\n\n----------------------------------------\n\nTITLE: Appending Content with Ext JS\nDESCRIPTION: Shows two methods of appending child content to an element using createChild() - both string HTML and object configuration approaches\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/4.-ext-js-tutorial-manipulating-nodes.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nExt.onReady(function() {\n    var myDiv1 = Ext.get('div1');\n    myDiv1.createChild('<div>My baby goes here.</div>');\n\n    // OR a bit more verbose and self-documenting\n\n    myDiv1.createChild({\n        tag: 'div',\n        html: 'My baby goes here.'\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Editing in Grid Configuration\nDESCRIPTION: This JavaScript snippet enables inline editing for the grid by adding save_action and autosave properties to the grid configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n,save_action: 'mgr/doodle/updateFromGrid'\n,autosave: true\n```\n\n----------------------------------------\n\nTITLE: Adding xPDO Package to MODX\nDESCRIPTION: Registers the StoreFinder package with xPDO to enable model functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('storefinder',$base_path.'model/');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Doodles with Conditions in Rowboat Snippet in PHP\nDESCRIPTION: This example demonstrates how to use Rowboat to fetch top 10 Doodles from the modx_doodles table, including a condition where the name contains 'Test'. Parameters used include &where to filter results based on column values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rowboat/rowboat.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Rowboat?\n   &table=`modx_doodles`\n   &tpl=`myDoodle`\n   &limit=`10`\n   &where=`{\"name:LIKE\":\"%Test%\"}`\n   &sortBy=`name`\n]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Comments in PHP\nDESCRIPTION: This snippet showcases enabling pagination for Quip comments within MODX, setting a limit of 5 root comments per page and applying a CSS class to pagination links. The &limit parameter specifies the number of comments per page, and &pageCls applies styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n[[!Quip? &thread=`blog-post-[[*id]]` &limit=`5` &pageCls=`pageLink`]]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Removing a Directory with modFileHandler in PHP\nDESCRIPTION: This snippet demonstrates how to use modFileHandler to create a modDirectory object from a given path and remove the directory. It checks if the path is a valid directory before attempting removal.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modfilehandler.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (!isset($path)) $path = '/www/test/';\n\n$modx->getService('fileHandler','modFileHandler');\n$directory = $modx->fileHandler->make($path);\nif (!is_object($directory) || !($directory instanceof modDirectory)) return 'Not a directory!';\n\nif (!$directory->remove()) {\n   return 'Could not remove directory.';\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Requests for PageBreaker in JavaScript\nDESCRIPTION: This JavaScript snippet is employed to manage AJAX requests initiated by clicking links with the 'load_page' class. It is contingent upon enabling the 'pb_ajax' parameter in the PageBreaker plugin. The script listens for link clicks, fetches the 'href' attribute, and sends a POST request to the server. The response is then injected into a specified HTML element marked by the variable 'elem'. Dependencies include jQuery for DOM manipulation and AJAX handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pagebreaker/tpl.pagebreaker.ajax.md#2025-04-17_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script type='text/javascript'>\n  var elem = '#content'; // HTML element on webpage in which will be loaded new block of text\n\n  $(document).ready(function () {\n    $('.load_page').live('click', function () {\n      var href = $(this).attr('href');\n      $.post(href, {\n        'action': 'PageBreakLoad'\n      }, function (data) {\n        $(elem).html(data);\n      })\n      return false;\n    })\n  })\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Content to Empty Chunks and Saving (PHP)\nDESCRIPTION: This plugin adds content to a chunk only if it has no existing content, then saves the changes when updating an existing chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onchunkformrender.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnChunkFormRender':\n        //if we update the existing\n        if ($mode == modSystemEvent::MODE_UPD) {\n            //we take the content of the chunk\n            $content = $chunk->getContent();\n            // if there is no content, push in a new one\n            if (!$content){\n                $chunk->setContent('<p>New content</p>');\n                //you can immediately save new content\n                $chunk->save();\n            }\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: xPDOQuery WHERE Method Signature\nDESCRIPTION: Shows the full method signature for the where() function including optional parameters for conditions, conjunction type, binding, and condition grouping.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery where ([mixed $conditions = ''],\n    [string $conjunction = xPDOQuery::SQL_AND],\n    [mixed $binding = null],\n    [integer $condGroup = 0])\n```\n\n----------------------------------------\n\nTITLE: Updating Quip Comment Template in HTML\nDESCRIPTION: This code snippet shows the updated HTML structure for comments in Quip 1.0.1. Key changes include the removal of form tags and proper nesting of child comments within list items. Users are advised to update their templates and CSS to accommodate these changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.upgrading/upgrading-to-1.0.1.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<li class=\"[[+cls]]\" id=\"[[+idprefix]][[+id]]\" [[+depth_margin:notempty=`style=\"padding-left: [[+depth_margin]]px\"`]]>\n<div id=\"[[+idprefix]][[+id]]-div\" class=\"quip-comment-body [[+alt]]\">\n    <div class=\"quip-comment-right\">\n        [[+md5email:notempty=`<img src=\"http://www.gravatar.com/avatar/[[+md5email]]?s=[[+gravatarSize]]&d=[[+gravatarIcon]]\" class=\"quip-avatar\" />`]]\n    </div>\n\n    <p class=\"quip-comment-meta\">\n        <span class=\"quip-comment-author\">[[+authorName]]:</span><br />\n        <span class=\"quip-comment-createdon\"><a href=\"[[+url]]\">[[+createdon]]</a>\n        [[+approved:if=`[[+approved]]`:is=`1`:then=``:else=`- <em>[[%quip.unapproved? &namespace=`quip` &topic=`default`]]</em>`]]\n        </span>\n    </p>\n\n    <div class=\"quip-comment-text\">\n        <p>[[+body]]</p>\n\n        [[+replyUrl:notempty=`<p><span class=\"quip-reply-link\"><a href=\"[[+replyUrl]]\">[[%quip.reply? &namespace=`quip` &topic=`default`]]</a></span></p>`]]\n    </div>\n\n    <div class=\"quip-comment-options\">\n        [[+report]]\n        [[+options]]\n    </div>\n</div>\n    [[+children:notempty=`<ol class=\"quip-comment-list\">[[+children]]</ol>`]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: pdoField with JSON Properties\nDESCRIPTION: Example showing how to use pdoField with JSON-formatted properties to select a parent resource's longtitle\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoField.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*id:pdofield=`{\"top\":2,\"field\":\"longtitle\"}`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Form Values in MODx Window\nDESCRIPTION: Demonstrates how to set form values in a MODx.Window component using the setValues method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.window.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = Ext.getCmp('my-window-id');\nw.setValues({\n  name: 'John'\n  ,email: 'my@email.com'\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Output Filter Syntax in MODX Revolution\nDESCRIPTION: Demonstrates the basic syntax for applying an output filter to an element in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[elemento:modificador=`valor`]]\n```\n\n----------------------------------------\n\nTITLE: Register Form with Extended Field\nDESCRIPTION: This snippet demonstrates how to create a registration form that includes a custom field for 'Favorite Color'. The field is mandatory and will be stored as an extended field in the user's profile.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-custom-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Register? &submitVar=`go`]]\n...\n<label>Favorite Color:\n<span class=\"error\">[[+error.color]]</span>\n<input type=\"text\" name=\"color:required\" value=\"[[+color]]\" />\n</label>\n...\n<input type=\"submit\" name=\"go\" value=\"Register!\" />\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Query with xPDO.query in PHP\nDESCRIPTION: Demonstrates the basic syntax for using the xPDO.query method to execute an SQL statement and return a result set as a PDOStatement object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.query.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nxPDOObject|false query (string $statement)\n```\n\n----------------------------------------\n\nTITLE: TV Value Calculation in PHP\nDESCRIPTION: Example of setting a TV value based on template conditions during the OnDocFormSave event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nswitch ($modx->event->name) {\n\n        // Documents\n        case 'OnDocFormSave':\n            if ($resource->get('template') == 8) {  \n                if(!$resource->setTVValue('my_tv', 'Some Value')) {\n                    $modx->log(modX::LOG_LEVEL_ERROR, 'There was a problem setting the TV value.');\n                }\n            }\n\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Template for Password Reset Email in MODX Revolution\nDESCRIPTION: This HTML template is used for the email sent to users who request a password reset. It includes placeholders for the username, activation link URL components, password, and other dynamic content that will be replaced when the email is sent.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/forgot_login_email.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello [[+username]],</p>\n<p>A request for a password reset has been issued for your MODX user. If you sent this, you may follow this link and use this password to login. If you did not send this request, please ignore this email.</p>\n\n<p>\n    <strong>Activation Link:</strong> [[+url_scheme]][[+http_host]][[+manager_url]]?modahsh=[[+hash]]<br />\n    <strong>Username:</strong> [[+username]]<br />\n    <strong>Password:</strong> [[+password]]<br />\n</p>\n\n<p>After you log into the MODX Manager, you can change your password again, if you wish.</p>\n\n<p>Regards,<br />Site Administrator</p>\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Custom Manager Controller (Pre-Revolution 2.3)\nDESCRIPTION: JavaScript method to navigate to a custom manager page controller with namespace and URL parameters\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/menus/action-list.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.loadPage(MODx.action['mycomponent:update'], 'foo=bar&bar=foo');\n```\n\n----------------------------------------\n\nTITLE: Executing getFacebookShares from PHP Code\nDESCRIPTION: Shows how to run the getFacebookShares snippet from within PHP code in another snippet, allowing programmatic access to share counts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookshares.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'http://google.com/';\n$shares = $modx->runSnippet('getFacebookShares', array('url' => $url));\nreturn \"The url {$url} has been shared {$shares} times on Facebook.\";\n```\n\n----------------------------------------\n\nTITLE: Grouped Media Type sekFancyBox Implementation in PHP\nDESCRIPTION: Four examples demonstrating grouped media modal windows with different helper options. Group1 uses thumbnail helpers while group2 uses button helpers, with different modal classes to prevent conflicts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`media`\n &linktext=`<img src=\"thumbs/image1.jpg\" />`\n &link=`images/image1.jpg`\n &modalclass=`class-thumb`\n &thumbnailhelper=`1`\n &group=`group1`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`media`\n &linktext=`<img src=\"thumbs/image2.jpg\" />`\n &link=`images/image2.jpg`\n &modalclass=`class-thumb`\n &thumbnailhelper=`1`\n &group=`group1`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`media`\n &linktext=`<img src=\"thumbs/image3.jpg\" />`\n &link=`images/image3.jpg`\n &modalclass=`class-button`\n &buttonhelper=`1`\n &group=`group2`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`media`\n &linktext=`<img src=\"thumbs/image4.jpg\" />`\n &link=`images/image4.jpg`\n &modalclass=`class-button`\n &buttonhelper=`1`\n &group=`group2`\n]]\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources with Exclusions in MODX (PHP)\nDESCRIPTION: Outputs all resources beneath resource ID 5, except for resource 10, using the 'myRowTpl' chunk for formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources?\n    &parents=`5`\n    &resources=`-10`\n    &tpl=`myRowTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using getProfile Snippet in MODX Revolution\nDESCRIPTION: The getProfile snippet retrieves user profile information. This can be called with or without caching enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/usertools/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getProfile]]\n```\n\n----------------------------------------\n\nTITLE: Defining xPDO Model Schema with MinLength Validation\nDESCRIPTION: XML schema definition that sets up a model with minimum length validation rule. Creates a 'myTest' object with a 'name' field that must be at least 1 character long.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdominlengthvalidationrule.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"test\" baseClass=\"xPDOObject\" platform=\"mysql\"\n       defaultEngine=\"MyISAM\" tablePrefix=\"test_\">\n    <object class=\"myTest\" table=\"test\" extends=\"xPDOSimpleObject\">\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\"\n               phptype=\"string\" default=\"\" null=\"false\" />\n\n        <validation>\n            <rule field=\"name\"\n                  name=\"myMinLenRule\"\n                  type=\"xPDOValidationRule\"\n                  rule=\"xPDOMinLengthValidationRule\"\n                  value=\"1\"\n                  message=\"Please specify a name.\"\n             />\n        </validation>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Configuring Depth-Limited Threaded Comments in PHP\nDESCRIPTION: This PHP example sets up a threaded Quip comment thread within MODX, limiting the comments to 3 levels deep and closing comments automatically after 21 days. &maxDepth controls the depth of nested comments, and &closeAfter specifies the auto-closure duration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n[[!Quip? &thread=`blog-post-[[*id]]` &maxDepth=`3` &closeAfter=`21`]]\n```\n```\n\n----------------------------------------\n\nTITLE: Multi-context Sitemap Generation\nDESCRIPTION: Generate sitemap for multiple contexts with resource exclusions\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[pdoSitemap?\n    &resources=`-25`\n    &parents=`-15,10`\n    &context=`web,catalog`\n]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current User Username via MODX API\nDESCRIPTION: This snippet demonstrates how to get the username of the currently logged-in user using the MODX API. It accesses the user object directly from the MODX context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/users.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn $modx->user->get('username');\n```\n\n----------------------------------------\n\nTITLE: Loading Class with Error Handling\nDESCRIPTION: Example demonstrating how to load a class with error handling, including instantiation after successful loading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.loadclass.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (!$xpdo->loadClass('myBox','/my/path/to/model/',true,true)) {\n    die('Could not load class myBox!');\n}\n$Box = new myBox();\n```\n\n----------------------------------------\n\nTITLE: Listbox Template Variable Input Options in JSON\nDESCRIPTION: JSON configuration options for Listbox template variables in MODX. These options control field validation and user interface features like typeahead, dimensions, and empty text display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"listWidth\": \"\",\n    \"title\": \"\",\n    \"typeAhead\": \"false\",\n    \"typeAheadDelay\": \"250\",\n    \"listEmptyText\": \"\",\n    \"stackItems\": \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Breadcrumb Direction in PHP\nDESCRIPTION: Sets the breadcrumb direction to either Left To Right (ltr) or Right To Left (rtl) using the 'direction' parameter, catering to different language requirements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n[[BreadCrumb? &direction=`rtl`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Columns for Images - JSON Setup\nDESCRIPTION: This snippet outlines the configuration of grid columns used for displaying uploaded images and their respective titles within the MIGXdb grid. It sets properties such as width and sorting capabilities.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/manage-child-resources-in-a-grid-tv-with-help-of-migxdb.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n{\"header\": \"Title\", \"width\": \"160\", \"sortable\": \"true\", \"dataIndex\": \"title\"},\n{\"header\": \"Image\", \"width\": \"50\", \"sortable\": \"false\", \"dataIndex\": \"image\",\"renderer\": \"this.renderImage\"}\n]\n```\n\n----------------------------------------\n\nTITLE: MIGX Configuration JSON for Resource Album\nDESCRIPTION: JSON configuration for setting up a MIGX TV to manage a resource-specific image album. It defines form fields, grid columns, and various MIGX settings for handling images.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/use-resource-specific-mediasource-and-multifile-uploader.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formtabs\": [{\n    \"MIGX_id\": 71,\n    \"caption\": \"Image\",\n    \"print_before_tabs\": \"0\",\n    \"fields\": [{\n        \"field\": \"title\",\n        \"caption\": \"Title\",\n        \"MIGX_id\": 327,\n        \"pos\": 1\n      },\n      {\n        \"MIGX_id\": 329,\n        \"field\": \"description\",\n        \"caption\": \"Description\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"\",\n        \"validation\": \"\",\n        \"configs\": \"\",\n        \"restrictive_condition\": \"\",\n        \"display\": \"\",\n        \"sourceFrom\": \"config\",\n        \"sources\": \"\",\n        \"inputOptionValues\": \"\",\n        \"default\": \"test\",\n        \"useDefaultIfEmpty\": \"0\",\n        \"pos\": 2\n      },\n      {\n        \"MIGX_id\": 425,\n        \"field\": \"image\",\n        \"caption\": \"Image\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"image\",\n        \"validation\": \"\",\n        \"configs\": \"\",\n        \"restrictive_condition\": \"\",\n        \"display\": \"none\",\n        \"sourceFrom\": \"migx\",\n        \"sources\": \"\",\n        \"inputOptionValues\": \"\",\n        \"default\": \"\",\n        \"useDefaultIfEmpty\": \"0\",\n        \"pos\": 4\n      }\n    ],\n    \"pos\": 1\n  }],\n  \"contextmenus\": \"edit_migx||duplicate_migx||remove_migx_and_image||movetotop_migx||movetotop_bottom\",\n  \"actionbuttons\": \"loadfromsource||uploadfiles\",\n  \"columnbuttons\": \"\",\n  \"filters\": \"\",\n  \"extended\": {\n    \"migx_add\": \"Add Image\",\n    \"disable_add_item\": 1,\n    \"add_items_directly\": \"\",\n    \"formcaption\": \"Image\",\n    \"update_win_title\": \"\",\n    \"win_id\": \"resourcegallery\",\n    \"maxRecords\": \"\",\n    \"addNewItemAt\": \"bottom\",\n    \"multiple_formtabs\": \"\",\n    \"multiple_formtabs_label\": \"\",\n    \"multiple_formtabs_field\": \"\",\n    \"multiple_formtabs_optionstext\": \"\",\n    \"multiple_formtabs_optionsvalue\": \"\",\n    \"actionbuttonsperrow\": 4,\n    \"winbuttonslist\": \"\",\n    \"extrahandlers\": \"this.handleColumnSwitch\",\n    \"filtersperrow\": 4,\n    \"packageName\": \"\",\n    \"classname\": \"\",\n    \"task\": \"\",\n    \"getlistsort\": \"\",\n    \"getlistsortdir\": \"\",\n    \"sortconfig\": \"\",\n    \"gridpagesize\": \"\",\n    \"use_custom_prefix\": \"0\",\n    \"prefix\": \"\",\n    \"grid\": \"\",\n    \"gridload_mode\": 1,\n    \"check_resid\": 1,\n    \"check_resid_TV\": \"\",\n    \"join_alias\": \"\",\n    \"has_jointable\": \"yes\",\n    \"getlistwhere\": \"\",\n    \"joins\": \"\",\n    \"hooksnippets\": \"\",\n    \"cmpmaincaption\": \"\",\n    \"cmptabcaption\": \"\",\n    \"cmptabdescription\": \"\",\n    \"cmptabcontroller\": \"\",\n    \"winbuttons\": \"\",\n    \"onsubmitsuccess\": \"\",\n    \"submitparams\": \"\"\n  },\n  \"columns\": [{\n      \"MIGX_id\": 1,\n      \"header\": \"ID\",\n      \"dataIndex\": \"MIGX_id\",\n      \"width\": 10,\n      \"renderer\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1\n    },\n    {\n      \"MIGX_id\": 2,\n      \"header\": \"Title\",\n      \"dataIndex\": \"title\",\n      \"width\": 20,\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1,\n      \"renderer\": \"\",\n      \"clickaction\": \"\",\n      \"selectorconfig\": \"\",\n      \"renderchunktpl\": \"\",\n      \"renderoptions\": \"\",\n      \"editor\": \"this.textEditor\"\n    },\n    {\n      \"MIGX_id\": 3,\n      \"header\": \"Image\",\n      \"dataIndex\": \"image\",\n      \"width\": 20,\n      \"renderer\": \"this.renderImage\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1\n    },\n    {\n      \"MIGX_id\": 4,\n      \"header\": \"Published\",\n      \"dataIndex\": \"published\",\n      \"width\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1,\n      \"renderer\": \"this.renderSwitchStatusOptions\",\n      \"clickaction\": \"switchOption\",\n      \"selectorconfig\": \"\",\n      \"renderchunktpl\": \"\",\n      \"renderoptions\": [{\n          \"MIGX_id\": 1,\n          \"name\": \"published\",\n          \"use_as_fallback\": 1,\n          \"value\": 1,\n          \"clickaction\": \"switchOption\",\n          \"handler\": \"\",\n          \"image\": \"assets\\/components\\/migx\\/style\\/images\\/cb_ticked.png\"\n        },\n        {\n          \"MIGX_id\": 2,\n          \"name\": \"published\",\n          \"use_as_fallback\": \"\",\n          \"value\": 1,\n          \"clickaction\": \"switchOption\",\n          \"handler\": \"\",\n          \"image\": \"assets\\/components\\/migx\\/style\\/images\\/cb_ticked.png\"\n        },\n        {\n          \"MIGX_id\": 3,\n          \"name\": \"unpublished\",\n          \"use_as_fallback\": \"\",\n          \"value\": \"0\",\n          \"clickaction\": \"switchOption\",\n          \"handler\": \"\",\n          \"image\": \"assets\\/components\\/migx\\/style\\/images\\/cb_empty.png\"\n        }\n      ],\n      \"editor\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Category Management in MODX\nDESCRIPTION: Handles category assignment and creation for chunks, allowing dynamic category creation if needed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-3.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// category\n$category = $modx->getObject('modCategory',array('id' => $_POST['category']));\nif ($category == null) {\n        $category = $modx->newObject('modCategory');\n        if (empty($_POST['category'])) {\n                $category->set('id',0);\n        } else {\n                $category->set('category',$_POST['category']);\n                $category->save();\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up INHERIT Binding in Template Variables\nDESCRIPTION: Shows the syntax for implementing the @INHERIT binding by placing it in the Default Value field of a Template Variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/inherit-binding.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@INHERIT\n```\n\n----------------------------------------\n\nTITLE: Inactive Users Display with Peoples Snippet\nDESCRIPTION: Displays all inactive users in the site by setting active parameter to 0.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[Peoples? &limit=`0` &active=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Refreshing System Settings Cache\nDESCRIPTION: Shows how to clear the system settings cache after making changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$cacheRefreshOptions =  [\n    'system_settings' => [],\n    'resource' => [],\n];\n$modx->cacheManager->refresh($cacheRefreshOptions);\n```\n\n----------------------------------------\n\nTITLE: Simple Box Query with OR Condition\nDESCRIPTION: Demonstrates how to query boxes with specific widths using OR condition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.orcondition.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   'width' => 14,\n));\n$query->orCondition(array(\n   'width' => 12,\n));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Forking and Cloning MODX Revolution for Contribution in PHP\nDESCRIPTION: Series of commands to fork MODX Revolution, clone your fork, and add the upstream repository for contributions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ngit clone git@github.com:yourgitusernamehere/revolution.git\ncd revolution\ngit remote add upstream -f http://github.com/modxcms/revolution.git\n```\n\n----------------------------------------\n\nTITLE: Accessing User Attributes with Output Modifiers in MODX\nDESCRIPTION: Comprehensive example of accessing various user attributes from modx_user_attributes table using the userinfo modifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nUser Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]<br />\nUser name: [[!+modx.user.id:userinfo=`username`]]<br />\nFull Name: [[!+modx.user.id:userinfo=`fullname`]]<br />\nE-mail: [[!+modx.user.id:userinfo=`email`]]<br />\nPhone: [[!+modx.user.id:userinfo=`phone`]]<br />\nMobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]<br />\nFax: [[!+modx.user.id:userinfo=`fax`]]<br />\nDate of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]<br />\nGender: [[!+modx.user.id:userinfo=`gender`]]<br />\nCountry: [[+modx.user.id:userinfo=`country`]]<br />\nState: [[+modx.user.id:userinfo=`state`]]<br />\nZip Code: [[+modx.user.id:userinfo=`zip`]]<br />\nPhoto: [[+modx.user.id:userinfo=`photo`]]<br />\nComment: [[+modx.user.id:userinfo=`comment`]]<br />\nPassword: [[+modx.user.id:userinfo=`password`]]<br />\nCache Password: [[+modx.user.id:userinfo=`cachepwd`]]<br />\nLast Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]<br />\nThe Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]<br />\nNumber of Logins: [[+modx.user.id:userinfo=`logincount`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of getFacebookPhotos Snippet\nDESCRIPTION: Simple example showing how to call the getFacebookPhotos snippet to display photos grouped by album using the default templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookphotos.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!getFacebookPhotos?\n    &user=`modxcms`\n    &perAlbum=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Setting Request Headers with modRest\nDESCRIPTION: Example of how to send custom headers with a request. Shows two ways to set headers: either during client initialization or directly in the request method call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$url = 'http://site.ru/rest/mymethod';\n\n$headers=  array(\n    'Content-type' => 'application/json', // We inform the service that we want to receive a response in json format\n    'Authorization' => 'OAuth OUR TOKEN' // Authorization through headers\n);\n\n// we pass our headers immediately to the class\n/* @var modRest $client */\n$client = $this->modx->getService('rest', 'rest.modRest', array('headers' => $headers));\n\n# or write headers in the request\n`$response = $client->get($url, array(), $headers);`\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Equivalent of getCollectionGraph for ZIP Collection in MySQL\nDESCRIPTION: Shows how to manually construct a SQL query equivalent to the PHP getCollectionGraph call. The query joins ZIP-related tables to extract detailed object relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/graphs.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nSELECT *\nFROM `sw_zips` AS Z\nLEFT JOIN `sw_county` AS CT ON CT.`id` = Z.`sw_county_id`\nLEFT JOIN `sw_states` AS ST ON ST.`id` = Z.`sw_states_id`\nLEFT JOIN `sw_timezones` AS TZ ON TZ.`id` = Z.`sw_timezones_id`\nWHERE Z.`id` = 32117\n```\n\n----------------------------------------\n\nTITLE: Initializing Quip Threads without Threading in PHP\nDESCRIPTION: This PHP snippet demonstrates the basic initialization of a Quip comment thread without threading, suitable for blog posts. It requires MODX and the Quip plugin. The &thread parameter signifies the unique identifier of the comment thread, while &threaded set to '0' disables threading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n[[!Quip? &thread=`blog-post-[[*id]]` &threaded=`0`]]\n```\n```\n\n----------------------------------------\n\nTITLE: Creating an Update Controller in MODX\nDESCRIPTION: This code snippet defines an update controller class for a custom resource in MODX. It extends the `ResourceUpdateManagerController` class and overrides the `getLanguageTopics` method to load custom language topics. This allows for localization of strings on the resource update panel.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/step-3-controllers.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CopyrightedResourceUpdateManagerController extends ResourceUpdateManagerController {\n    public function getLanguageTopics() {\n        return array('resource','copyrightedresource:default');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Date Validation with Carets\nDESCRIPTION: This snippet demonstrates the correct usage of carets (^) instead of backticks (`) inside a FormIt validation call, specifically when using the `isDate` validator with a custom format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &validate=`date:required:isDate=^%m/%d/%Y^`]]\n```\n\n----------------------------------------\n\nTITLE: Creating Login Form Template in MODX\nDESCRIPTION: This HTML template defines the structure of the login form, including fields for username and password, and links for password recovery and membership application.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"loginForm\">\n    <div class=\"loginMessage\">[[+errors]]</div>\n    <div class=\"loginLogin\">\n        <form class=\"loginLoginForm\" action=\"[[~[[*id]]]]\" method=\"post\">\n            <fieldset class=\"loginLoginFieldset\">\n                <legend class=\"loginLegend\">[[+actionMsg]]</legend>\n                <label class=\"loginUsernameLabel\">[[%login.username]]\n                    <input class=\"loginUsername\" type=\"text\" name=\"username\" />\n                </label>\n\n                <label class=\"loginPasswordLabel\">[[%login.password]]\n                    <input class=\"loginPassword\" type=\"password\" name=\"password\" />\n                </label>\n                <input class=\"returnUrl\" type=\"hidden\" name=\"returnUrl\" value=\"[[+request_uri]]\" />\n\n                [[+login.recaptcha_html]]\n\n                <input class=\"loginLoginValue\" type=\"hidden\" name=\"service\" value=\"login\" />\n                <span class=\"loginLoginButton\"><input type=\"submit\" name=\"Login\" value=\"[[+actionMsg]]\" /></span>\n            </fieldset>\n        </form>\n    </div>\n</div>\n\n<a href=\"[[~2]]\">Forgot your Password?</a>  <a href=\"[[~6]]\">Apply for Membership</a>\n```\n\n----------------------------------------\n\nTITLE: Using Property Sets with getPage\nDESCRIPTION: This code snippet illustrates how to use a property set with the getPage snippet in MODX Revolution. This allows you to modify the default template properties of getPage without directly editing the snippet code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getpage/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage@PropertySetName? &element=`getResources` &parents=`3` ...]]\n```\n\n----------------------------------------\n\nTITLE: Accessing MODX Version Information\nDESCRIPTION: Retrieves version details of the current MODX installation using the MODx.version object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar fv = MODx.version.full_version;\n```\n\n----------------------------------------\n\nTITLE: Defining a City Auto-Complete Field with State Filter\nDESCRIPTION: This snippet defines an auto-complete field for city names, filtered by the selected state in the \"ftstate\" combo box. It uses the `filter` property to specify the input ID, object name, and field for filtering, ensuring the city suggestions are relevant to the chosen state.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools-advanced-examples.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<label for=\\\"ftcity\\\">City</label>\\n[[!input.autocomplete? &input_id=`ftcity`\\n    &object=`{\\\"name\\\": \\\"sekftUSCities\\\", \\\"sortby\\\": \\\"city_name\\\", \\\"value\\\": \\\"city_name\\\", \\\"label\\\": \\\"city_name\\\"}`\\n    &filter=`{\\\"input_id\\\": \\\"ftstate\\\", \\\"name\\\": \\\"sekftStates\\\", \\\"field\\\": \\\"state_name\\\"}`\\n]]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing homeCrumbDescription in BreadCrumb\nDESCRIPTION: Shows how to replace the homeCrumbDescription property from Breadcrumbs by customizing the containerTpl in BreadCrumb to include a home crumb with a specific description.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n[[Breadcrumbs? &homeCrumbDescription=`Home`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n[[BreadCrumb? &containerTpl=`myContainerTpl`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <li><a href=\"[[++site_url]]\">Home</a></li>\n    [[+crumbs]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic getChunk Method Syntax\nDESCRIPTION: Core method signature for getChunk showing the required chunkName parameter and optional properties array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getChunk (string $chunkName, [array $properties = array ()])\n```\n\n----------------------------------------\n\nTITLE: pdoCrumbs Integration in Content Chunk\nDESCRIPTION: Example of pdoCrumbs usage within a content chunk, combining page title, intro text, and breadcrumbs\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoCrumbs.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<h3>[[+pagetitle]]</h3>\n<p>[[+introtext]]</p>\n[[pdoCrumbs?\n    &to=`[[+id]]`\n    &showCurrent=`0`\n]]\n```\n\n----------------------------------------\n\nTITLE: MODX Tag Examples in SyntaxChecker Documentation\nDESCRIPTION: Examples of MODX tag syntax that SyntaxChecker will validate, including snippets, chunks, resources, settings, document variables, property sets, output filters, and parameter formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/syntaxchecker/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[' and ']]'\n[[*content]]\n[[Waaaayfinder]]\n[[$mispelled]]\n[[~123]]\n[[++site_url]]\n[[*kontent]]\n[[Snippet@myPropSet]]\n[[Snippet:my_filter]]\n[[Snippet? whoops=`xyz`]]\n[[Snippet &no=`question`]]\n[[Snippet &not`equal`]]\n```\n\n----------------------------------------\n\nTITLE: Check Multiple Resource Group Membership (AND)\nDESCRIPTION: Checks if a resource belongs to all specified resource groups using AND logic by setting the second parameter to true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modresource/modresource.ismember.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$resource->isMember(array('Marketing', 'Finances'), true);\n```\n\n----------------------------------------\n\nTITLE: Calling mxCalendar Snippet with AJAX Navigation and Modal View in PHP\nDESCRIPTION: This snippet shows how to call the mxCalendar snippet with AJAX navigation and modal event details. It requires creating a separate resource (`ajaxResourceId`) with a blank template to handle AJAX responses.  `modalView` is set to `1` to enable modal display of event details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!mxcalendar?\n&ajaxResourceId=`43`\n&modalView=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating Continuously Looping Slimbox Gallery with jQuery\nDESCRIPTION: This code illustrates how to configure a Slimbox gallery for an album in MODX, set to loop images continually and ensure jQuery is loaded. The snippet sets parameters such as `&loop=\\`1\\`` for continuous looping and `&slimboxLoadJQuery=\\`1\\`` to load jQuery, particularly useful if jQuery is not already included.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.plugins/slimbox.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[Gallery?\n    &album=\\`2\\`\n    &plugin=\\`slimbox\\`\n    &loop=\\`1\\`\n    &slimboxLoadJQuery=\\`1\\`\n]]\n```\n\n----------------------------------------\n\nTITLE: Complex Template Variables Query\nDESCRIPTION: Advanced query demonstrating how to access template variables with joins and date formatting, filtering based on a custom opening_date field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/select-binding.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n        page.alias,\n        tv_val.value,\n        DATE_FORMAT(STR_TO_DATE(tv_val.value, '%d-%m-%Y %H:%i:%s'), '%Y-%m-%d %H:%i:%s') as `Formatted Opening Date`,\n\nFROM site_content as page\nJOIN site_tmplvar_contentvalues as tv_val ON page.id=tv_val.id\nWHERE\n        page.parent='95'\n        AND tv_val.tmplvarid='6' /* 6 is the opening_date */\n        AND DATE_FORMAT(STR_TO_DATE(tv_val.value, '%d-%m-%Y %H:%i:%s'), '%Y-%m-%d %H:%i:%s')>'2008-10-24 13:04:57'\n;\n```\n\n----------------------------------------\n\nTITLE: UpdateProfile Form with Extended Field\nDESCRIPTION: This snippet illustrates how to use an extended field in the UpdateProfile form, allowing the user to update their 'Favorite Color'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-custom-fields.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!UpdateProfile]]\n...\n<label>Favorite Color:\n<span class=\"error\">[[+error.color]]</span>\n<input type=\"text\" name=\"color:required\" value=\"[[+color]]\" />\n</label>\n```\n\n----------------------------------------\n\nTITLE: Resource List Input Type JSON Configuration Options\nDESCRIPTION: JSON configuration options for the Resource List input type. Includes settings for parent resources, depth, filtering with WHERE conditions, and result limits.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"1\",\n    \"showNone\": \"1\",\n    \"parents\": \"\",\n    \"depth\": \"10\",\n    \"includeParent\": \"1\",\n    \"limitRelatedContext\": \"0\",\n    \"where\": \"[{\\\"isfolder: = \\\":\\\"1\\\"},{\\\"hidemenu\\\":\\\"0\\\",\\\"OR:hidemenu:=\\\":\\\"1\\\"}]\",\n    \"limit\": \"0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered GoogleSiteMap Implementation with Template and Resource Exclusions in PHP\nDESCRIPTION: Advanced implementation of GoogleSiteMap with filtering by template name and excluding specific resources by ID. This demonstrates how to create a more targeted sitemap for specific content types.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemapversion1.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap?\n    &allowedtemplates=`BlogTemplate`\n    &templateFilter=`templatename`\n    &excludeResources=`123,78`\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Availability Combo Box Component in JavaScript\nDESCRIPTION: JavaScript code for a custom inline editor component that creates a dropdown with \"Available\" and \"Not Available\" options. This component extends MODx.combo.Boolean and is registered for use in GridClassKey.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gridclasskey/index.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nGridClassKey.combo.Availability = function (config) {\n    config = config || {};\n    Ext.applyIf(config, {\n        store: new Ext.data.SimpleStore({\n            fields: ['d', 'v']\n            , data: [['Available', 'Available'], ['Not Available', 'Not Available']]\n        })\n        , displayField: 'd'\n        , valueField: 'v'\n        , listWidth: 150\n    });\n    GridClassKey.combo.Availability.superclass.constructor.call(this, config);\n};\nExt.extend(GridClassKey.combo.Availability, MODx.combo.Boolean);\nExt.reg('gridclasskey-combo-availability', GridClassKey.combo.Availability);\n```\n\n----------------------------------------\n\nTITLE: Creating an Output Filter Snippet for Author Names in PHP\nDESCRIPTION: This PHP snippet converts a user ID into a human-readable name by fetching the user's profile and displaying either their full name or username. It's used as an output filter for the author field in GridClassKey.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gridclasskey/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$output = $input;\nif (is_numeric($input)) {\n    $user = $modx->getObject('modUser', $input);\n    if ($user) {\n        $profile = $user->getOne('Profile');\n        $fullname = $profile->get('fullname');\n        $output = !empty($fullname) ? $fullname : $user->get('username');\n    }\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Get Extended User Field (PHP)\nDESCRIPTION: This snippet retrieves a custom field from the user's extended profile data.  It checks if the user and profile exist before attempting to access the extended data and prints the value if it exists, otherwise prints an empty string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getuser.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getUser();\nif (!$user) return '';\n$profile = $user->getOne('Profile');\nif (!$profile) return '';\n$extended = $profile->get('extended');\nprint (isset($extended['custom_user_field'])) ? $extended['custom_user_field'] : '';\n```\n\n----------------------------------------\n\nTITLE: Example Newsletter Template for DitsNews\nDESCRIPTION: A sample HTML template for creating newsletters with DitsNews, including placeholders for personalization and required base URL settings for proper link rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/ditsnews/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[!ditsnewsPlaceholders? &firstnameDefault=`Subscriber`]]\n<!-- Sets firstname field of email newsletter to \"Subscriber\" when empty -->\n<html>\n    <head>\n        <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n        <title>My newsletter</title>\n        <base href=\"[[++site_url]]\" />\n        <!-- Important! DitsNews needs this to create correct URLs! -->\n        <style type=\"text/css\">\n            a {\n                font-weight: bold;\n                color: #ff0000;\n            }\n        </style>\n    </head>\n    <body>\n        <p>Hello [[!+firstname:default=`Subscriber`]],</p>\n        [[*content]]\n        <p><a href=\"[[~10]]\">Unsubscribe</a></p>\n        <!-- Link to unsubscribe page: user data will be added while sending -->\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing Login Controller Logic with Parameters (PHP)\nDESCRIPTION: This code snippet initializes the Login controller with custom templates and hooks for handling login and logout processes. It is crucial for managing user authentication directly within the MODX framework. The required parameters include loginTpl and logoutTpl which define the templates used for the login and logout views, as well as preHooks and postHooks for additional processing during these actions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/login.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[!Login?\\n    &loginTpl=`disLoginTpl`\\n    &logoutTpl=`disLogoutTpl`\\n    &preHooks=`preHook.DiscussLogin`\\n    &postHooks=`postHook.DiscussLogin`\\n]]\"\n```\n\n----------------------------------------\n\nTITLE: Completing Console Output in PHP\nDESCRIPTION: Shows how to send the completion message to the console, which stops polling and enables the OK button.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.console.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'COMPLETED');\n```\n\n----------------------------------------\n\nTITLE: Remote Commands Plugin for Load Balanced MODX Nodes\nDESCRIPTION: Plugin that registers server instances and processes remote commands across multiple web nodes. Handles cache clearing operations in distributed environments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* RemoteCommands plugin -- register with OnWebPageComplete event */\n\n/* find any remote commands to execute from the master instance */\n$instance = $_SERVER['SERVER_ADDR'];\nif (!empty($instance) && $modx->getService('registry', 'registry.modRegistry')) {\n    $modx->registry->addRegister('remotes', 'registry.modDbRegister', array('directory' => 'remotes'));\n    $modx->registry->remotes->connect();\n\n    /* register this instance */\n    $modx->registry->remotes->subscribe(\"/distrib/instances/\");\n    $modx->registry->remotes->send(\"/distrib/instances/\", array($instance => true), array('expires' => time() + 1440));\n\n    /* find any valid command messages for this instance and act on them */\n    $modx->registry->remotes->subscribe(\"/distrib/commands/{$instance}/\");\n    $commands = $modx->registry->remotes->read(array('poll_limit' => 1, 'msg_limit' => 1));\n    if (!empty($commands)) {\n        $command = reset($commands);\n        if (!empty($command)) {\n             switch ($command) {\n                 case 'clearCache':\n                    $results= $modx->cacheManager->refresh();\n                    break;\n                 default:\n                    break;\n             }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Home Panel with ExtJS\nDESCRIPTION: Creates a custom panel extending MODx.Panel with tabs and header configuration. Includes MODX-specific styling and i18n support for lexicon strings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nDoodles.panel.Home = function (config) {\n    config = config || {};\n    Ext.apply(config, {\n        border: false,\n        baseCls: \"modx-formpanel\",\n        cls: \"container\",\n        items: [\n            {\n                html: \"<h2>\" + _(\"doodles.management\") + \"</h2>\",\n                border: false,\n                cls: \"modx-page-header\",\n            },\n            {\n                xtype: \"modx-tabs\",\n                defaults: { border: false, autoHeight: true },\n                border: true,\n                items: [\n                    {\n                        title: _(\"doodles\"),\n                        defaults: { autoHeight: true },\n                        items: [\n                            {\n                                html:\n                                    \"<p>\" +\n                                    _(\"doodles.management_desc\") +\n                                    \"</p>\",\n                                border: false,\n                                bodyCssClass: \"panel-desc\",\n                            }\n                        ],\n                    },\n                ],\n                listeners: {\n                    afterrender: function (tabPanel) {\n                        tabPanel.doLayout();\n                    },\n                },\n            },\n        ],\n    });\n    Doodles.panel.Home.superclass.constructor.call(this, config);\n};\nExt.extend(Doodles.panel.Home, MODx.Panel);\nExt.reg(\"doodles-panel-home\", Doodles.panel.Home);\n```\n\n----------------------------------------\n\nTITLE: Setting use_flock in MODX Config to Fix Blank Pages\nDESCRIPTION: Configuration fix for blank frontend pages or 500 errors that are temporarily resolved by clearing the cache. This solution sets use_flock to false in the MODX configuration file to help with hosting providers like RackSpace Cloud and GoDaddy.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/faqs-and-troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// In your MODX config file add this to your $config_options array\n$config_options = array(\n    'use_flock' => false\n);\n```\n\n----------------------------------------\n\nTITLE: Logging Manager Controller Information with OnBeforeManagerPageInit\nDESCRIPTION: This PHP code snippet demonstrates how to create a plugin that listens for the OnBeforeManagerPageInit event and logs the current manager controller's action array to the MODX error log. This allows developers to understand which controller is being loaded in different contexts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onbeforemanagerpageinit.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeManagerPageInit':\n        print_r($action);\n        break;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Getting Session State Example - PHP\nDESCRIPTION: Example usage of the getSessionState method to retrieve the current session state from the MODX instance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getsessionstate.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$state = $modx->getSessionState();\n```\n\n----------------------------------------\n\nTITLE: Defining Update Window for MODX Doodle Component in JavaScript\nDESCRIPTION: Creates a window component for updating Doodle records with a form containing name and description fields. The window extends MODx.Window and sends form data to the update processor when submitted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nDoodles.window.UpdateDoodle = function (config) {\n    config = config || {};\n    Ext.applyIf(config, {\n        title: _(\"doodles.doodle_update\"),\n        url: Doodles.config.connectorUrl,\n        baseParams: {\n            action: \"mgr/doodle/update\",\n        },\n        fields: [\n            {\n                xtype: \"hidden\",\n                name: \"id\",\n            },\n            {\n                xtype: \"textfield\",\n                fieldLabel: _(\"doodles.name\"),\n                name: \"name\",\n                anchor: \"100%\",\n            },\n            {\n                xtype: \"textarea\",\n                fieldLabel: _(\"doodles.description\"),\n                name: \"description\",\n                anchor: \"100%\",\n            },\n        ],\n    });\n    Doodles.window.UpdateDoodle.superclass.constructor.call(this, config);\n};\nExt.extend(Doodles.window.UpdateDoodle, MODx.Window);\nExt.reg(\"doodles-window-doodle-update\", Doodles.window.UpdateDoodle);\n```\n\n----------------------------------------\n\nTITLE: Dropdown Filter for Categories - PHP Configuration\nDESCRIPTION: This PHP snippet specifies a dropdown filter configuration for filtering child resources based on categories. It integrates with the MIGX processing system to provide dynamic filter options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/manage-child-resources-in-a-grid-tv-with-help-of-migxdb.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntvFilter::categories=inArray=[[+category]]\n```\n\n----------------------------------------\n\nTITLE: Getting MODX Site Configuration Example\nDESCRIPTION: Example showing how to retrieve the complete site configuration into an array variable using the getConfig() method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$config = $modx->getConfig();\n```\n\n----------------------------------------\n\nTITLE: Limiting Gallery Output and Using Placeholders in PHP\nDESCRIPTION: This example shows how to limit the number of photos displayed and set the output to a placeholder. It retrieves 3 photos from the 'Cars' album and sets the result to the 'gallery' placeholder for custom positioning in the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery?\n    &limit=`3`\n    &album=`Cars`\n    &toPlaceholder=`gallery`\n]]\n<div class=\"my-gallery\">\n[[+gallery]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Verifying Session in Custom Context\nDESCRIPTION: Example showing how to check if a user has an active session in a custom context named 'sports'. Returns true if the user has an active session in the sports context, false otherwise.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.checksession.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->checkSession('sports');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Count with xPDO.getCount in PHP\nDESCRIPTION: Demonstrates how to use the xPDO.getCount method to get a count of Box objects with a specific width. This snippet shows the basic usage of the method with simple criteria.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcount.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$total = $xpdo->getCount('Box',array(\n   'width' => 20,\n));\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin to MODX Event Example\nDESCRIPTION: Example showing how to add a plugin with ID 12 to the OnChunkPrerender event using the addEventListener method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.addeventlistener.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->addEventListener('OnChunkPrerender', 12);\n```\n\n----------------------------------------\n\nTITLE: Adding Table Controls to TinyMCE in MODX System Settings\nDESCRIPTION: This snippet shows the necessary modifications to TinyMCE system settings in MODX to enable table controls. It involves adding 'table' to the custom_plugins setting and 'tablecontrols' to one of the custom_buttons settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tinymce/tinymce.table-controls.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ntiny.custom_plugins: Add 'table' somewhere in there, making sure it stays a proper comma delimited list.\ntiny.custom_buttonsN: Any of the 5 settings where you want the table controls to be shown, for example tiny.custom_buttons3, and add 'tablecontrols' while making sure it stays a proper comma delimited list.\n```\n\n----------------------------------------\n\nTITLE: Displaying Sorted and Filtered Resource List with getImageList in PHP\nDESCRIPTION: This snippet call retrieves the sorted and filtered resource list from the MIGX TV and displays it in the frontend.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/sortable-resourcelist.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[getImageList?\n  &tvname=`migx_input_options`\n  &outputSeparator=`,`\n  &tpl=`@CODE:[[+id]]`\n  &where=`{\"active:=\":\"1\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining a State Combo Box with Country Filter\nDESCRIPTION: This snippet defines a state combo box filtered by the country selected in the \"ftcountry\" combo box. It utilizes the `filter` property to specify the input ID, object name, and field to filter by, ensuring the state options are relevant to the selected country.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools-advanced-examples.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<label for=\\\"ftstate\\\">State</label>\\n[[!input.combobox? &input_id=`ftstate`\\n    &object=`{\\\"name\\\": \\\"sekftStates\\\", \\\"sortby\\\": \\\"state_name\\\", \\\"value\\\": \\\"state_name\\\", \\\"label\\\": \\\"state_name\\\"}`\\n    &filter=`{\\\"input_id\\\": \\\"ftcountry\\\", \\\"name\\\": \\\"sekftCountries\\\", \\\"field\\\": \\\"country_name\\\", \\\"value\\\": \\\"United States\\\"}`\\n]]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing OnDocFormDelete Email Notification Plugin in PHP\nDESCRIPTION: A MODX plugin that sends email notifications when resources are deleted. The plugin captures the deleted resource ID and its children, compiles them into an email message, and sends it using modPHPMailer.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormDelete':\n        $modx->getService('mail', 'mail.modPHPMailer');\n        $modx->mail->set(modMail::MAIL_FROM, $modx->getOption('emailsender'));\n        $modx->mail->set(modMail::MAIL_FROM_NAME, $modx->getOption('site_name'));\n        //Address of the recipient\n        $modx->mail->address('to', 'mail@pitrooo.ru');\n        //Title\n        $modx->mail->set(modMail::MAIL_SUBJECT, 'Resources have been removed');\n        // Body of letter\n        foreach ($children as $value) {\n            $resource = $modx->getObject('modResource', $value);\n            $name .= '<br>'.$resource->get('pagetitle');\n        }\n        $contentbody = 'The resource was removed from id '.$id.' and with him '.$name;\n        $modx->mail->set(modMail::MAIL_BODY, $contentbody);\n        // We send\n        $modx->mail->setHTML(true);\n        if (!$modx->mail->send()) {\n            $modx->log(modX::LOG_LEVEL_ERROR,'An error occurred while trying to send an email message: '.$modx->mail->mailer->ErrorInfo);\n        }\n        $modx->mail->reset();\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Properties Array Example\nDESCRIPTION: Demonstrates how to structure nested property arrays for complex placeholder usage.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$properties = array(\n    'user' => array('id' => 1),\n    'document' => array('id' => 27)\n);\n// or:\n$properties['user']['id'] = 1;\n$properties['document']['id'] = 27;\n\n// Corresponds to the following placeholders:\n// [[+user.id]]\n// [[+document.id]]\n```\n\n----------------------------------------\n\nTITLE: Defining Snippet Properties in PHP\nDESCRIPTION: Defines configurable properties for a MODX snippet including template, sorting and direction options with i18n support via lexicon keys.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$properties = array(\n    array(\n        'name' => 'tpl',\n        'desc' => 'prop_doodles.tpl_desc',\n        'type' => 'textfield',\n        'options' => '',\n        'value' => 'rowTpl',\n        'lexicon' => 'doodles:properties',\n    ),\n    array(\n        'name' => 'sort',\n        'desc' => 'prop_doodles.sort_desc',\n        'type' => 'textfield',\n        'options' => '',\n        'value' => 'name',\n        'lexicon' => 'doodles:properties',\n    ),\n    array(\n        'name' => 'dir',\n        'desc' => 'prop_doodles.dir_desc',\n        'type' => 'list',\n        'options' => array(\n            array('text' => 'prop_doodles.ascending','value' => 'ASC'),\n            array('text' => 'prop_doodles.descending','value' => 'DESC'),\n        ),\n        'value' => 'DESC',\n        'lexicon' => 'doodles:properties',\n    ),\n);\nreturn $properties;\n```\n\n----------------------------------------\n\nTITLE: Viewing User's Gallery via sekUserGalleries.users.gallery.view\nDESCRIPTION: This snippet shows the albums of the selected gallery. If no specific gallery is indicated in the URL, it defaults to the user's personal gallery if they are logged in and permitted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.users.gallery.view]\n```\n\n----------------------------------------\n\nTITLE: Server Requirements Table for MODX\nDESCRIPTION: A markdown table listing the minimum and recommended specifications for PHP, database, and webserver components required to run MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/server-requirements.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Component | Minimum            | Recommended                                     |\n| --------- | ------------------ | ----------------------------------------------- |\n| PHP       | 5.6.x              | 7.2 or higher                                   |\n| Database  | Latest MySQL 5.6.x | MariaDB 10.1.x or Percona Server 5.6.x or above |\n| Webserver | *                  | Latest NGINX 1.18.x or above or Apache 2.4                         |\n```\n\n----------------------------------------\n\nTITLE: Using Snippet Parameters with getWeather Snippet\nDESCRIPTION: An example of how to pass parameters between MODX snippets. This implementation passes the result of a getLocation snippet as a parameter to the getWeather snippet for location-based weather data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[!getWeather? &location=`[[!getLocation]]`]]\n```\n\n----------------------------------------\n\nTITLE: Querying Child Resources in MODX\nDESCRIPTION: Retrieve direct children of resource #1 using pdoResources snippet with default configuration. Displays resources using a custom template chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoResources.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[pdoResources?\n    &parents=`1`\n    &depth=`0`\n    &tpl=`ListRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Media Source Specification\nDESCRIPTION: Examples of elements with specific media source configurations for different file types.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"assets/pdfs/brochure.pdf\"\n    data-fred-name=\"brochure\"\n    data-fred-media-source=\"Assets\"\n    >download our brochure</a>\n```\n\n----------------------------------------\n\nTITLE: Getting System Settings Value in PHP\nDESCRIPTION: Demonstrates retrieving a system setting value using getOption function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$siteStartId = $modx->getOption('site_start');\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment and Return with EVAL Binding in PHP\nDESCRIPTION: Shows how to assign a value to a variable and return it using the @EVAL binding in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/eval-binding.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n@EVAL $a = 'dog'; return $a;\n```\n\n----------------------------------------\n\nTITLE: Registering Fred Sidebar Plugin in PHP\nDESCRIPTION: PHP code example showing how to register a sidebar plugin with Fred, including the necessary JavaScript and CSS file includes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/sidebar_plugins.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$includes = '\n    <script type=\"text/javascript\" src=\"/path/to/plugin/file.js\"></script>\n    <link rel=\"stylesheet\" href=\"/path/to/stylsheet/style.css\" />\n';\n\n$beforeRender = '\n    this.registerSidebarPlugin(\"TestSidebarPlugin\", TestSidebarPluginInit);\n';\n\n$modx->event->_output = [\n    'includes' => $includes,\n    'beforeRender' => $beforeRender\n];\n```\n\n----------------------------------------\n\nTITLE: Incorporating TVs in CustomUrls Pattern\nDESCRIPTION: Shows how to include Template Variables (TVs) in a CustomUrls pattern.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+tv.mytv]]-[[+id]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Galleries in MODX using PHP\nDESCRIPTION: This snippet provides a simple way to list galleries on the website using the browse.galleries functionality. It allows users to call the galleries directly using shortcodes. Users can also personalize how galleries are rendered by specifying templates via the tplContainer and tplRow properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.browse.galleries.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!browse.galleries]]\n```\n\n----------------------------------------\n\nTITLE: Using modFileHandler to Remove a Directory in MODX Revolution\nDESCRIPTION: This snippet creates a modDirectory object from a given path and then removes the directory. It includes error handling to check if the path is a valid directory and if the removal operation was successful.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/services/modfilehandler.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (!isset($path)) $path = '/www/test/';\n\n$modx->getService('fileHandler','modFileHandler');\n$directory = $modx->fileHandler->make($path);\nif (!is_object($directory) || !($directory instanceof modDirectory)) return 'Not a directory!';\n\nif (!$directory->remove()) {\n   return 'Could not remove directory.';\n}\n```\n\n----------------------------------------\n\nTITLE: Using getResources to Fetch Form Customization Rules in MODX\nDESCRIPTION: This code snippet uses the getResources snippet in MODX to fetch resources about form customization rules from parent 133 in the revolution context. This appears to be a templating tag that would be processed by MODX to generate a list of available rules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`133` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Chunks to MODX Category\nDESCRIPTION: Code snippet showing how to add chunks to a MODX category using the addMany() method with error checking.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/* add chunks */\n$chunks = include $sources['data'].'transport.chunks.php';\nif (is_array($chunks)) {\n    $category->addMany($chunks);\n} else { $modx->log(modX::LOG_LEVEL_FATAL,'Adding chunks failed.'); }\n```\n\n----------------------------------------\n\nTITLE: Build Configuration File Definition\nDESCRIPTION: Sample content for the build.config.php file, which defines essential MODX path constants needed for the build process, including the core path and configuration key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Define the MODX path constants necessary for core installation\n *\n * @package quip\n * @subpackage build\n */\ndefine('MODX_CORE_PATH', '/absolute/path/to/modx/core/');\ndefine('MODX_CONFIG_KEY','config');\n```\n\n----------------------------------------\n\nTITLE: Using Form Field as Email Subject Line\nDESCRIPTION: Configuration to use a form field value as the email subject line. Uses emailUseFieldForSubject property to look for a 'subject' field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/email.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    ...\n    &emailUseFieldForSubject=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Outer Template Parameter for Wayfinder\nDESCRIPTION: This code snippet illustrates how to define an outer template for Wayfinder's output in MODX. It includes place holders for classes and the wrapper, demonstrating how to integrate them into the surrounding tags for menu rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<ul id=\"topnav\"[[+wf.classes]]>[[+wf.wrapper]]</ul>\n```\n\n----------------------------------------\n\nTITLE: Storing User Activation Data with MODX Registry\nDESCRIPTION: Example of writing user activation data to a registry topic for later retrieval. Uses FileRegister to store username and password with a configurable time-to-live (TTL).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->getService('registry', 'registry.modRegistry');\n$modx->registry->addRegister('login', 'registry.modFileRegister', array('directory' => 'login'));\n$modx->registry->login->connect();\n$modx->registry->login->subscribe('/useractivation/');\n$modx->registry->login->send('/useractivation/',array($user->get('username') => $pword),array(\n    'ttl' => ($modx->getOption('activationttl',$scriptProperties,180)*60),\n));\n```\n\n----------------------------------------\n\nTITLE: SiteEditor Field for Different Resource ID\nDESCRIPTION: Shows how to edit fields from a different resource using placeholders and specifying the resource ID with the siteEditorField modifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siteeditor/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[+pagetitle:siteEditorField=`resource=[[+id]]`]]\n```\n\n----------------------------------------\n\nTITLE: Snippet Related Object Attributes\nDESCRIPTION: This PHP code defines the attributes for related Snippet objects within a MODX transport package.  It specifies whether keys should be preserved, whether the object should be updated if it already exists, and the unique key used to identify the snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n'Snippets' => array(\n   xPDOTransport::PRESERVE_KEYS => false,\n   xPDOTransport::UPDATE_OBJECT => true,\n   xPDOTransport::UNIQUE_KEY => 'name',\n),\n```\n\n----------------------------------------\n\nTITLE: Searching Quip Comments with SimpleSearch in PHP\nDESCRIPTION: Example of using SimpleSearch to search Quip comments by configuring the customPackages property. This demonstrates how to search the comment body field in the quipComment class and join it with modResource table.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n&customPackages=`quipComment:body:quip:{core_path}components/quip/model/:quipComment.resource = modResource.id`\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getChildIds Method\nDESCRIPTION: Example showing how to get child IDs for Resource 23, limiting to 6 levels deep and specifically in the web context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchildids.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$array_ids = $modx->getChildIds(23,6,array('context' => 'web'));\n```\n\n----------------------------------------\n\nTITLE: MODX Custom Controllers Path\nDESCRIPTION: Example path for custom controllers directory matching the custom theme name\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/custom-manager-themes.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nmanager/controllers/custom\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resources with getResources in PHP\nDESCRIPTION: This snippet uses the getResources function in MODX to retrieve resources from specified parent contexts. Dependencies include MODX installation and the getResources function. Key parameters are &parents, &context, &limit, and &resources, which control the scope and selection of the resource retrieval.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-head-close.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n[[getResources@section?\\n    &parents=`1316`\\n    &context=`extras`\\n    &limit=`0`\\n    &resources=`1316,[[*id]]`\\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating Table in MODX Context\nDESCRIPTION: Example demonstrating how to create a database table within a MODX snippet, including package registration with custom prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.createobjectcontainer.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('yourpkg',MODX_CORE_PATH.'components/yourpkg/model/','prefix_');\n$manager = $modx->getManager();\n$manager->createObjectContainer('Myobject');\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL with MODX Revolution System Tags in HTML\nDESCRIPTION: Shows how to set the base URL using MODX Revolution system tags. This is commonly used in CMS setups that rely on Apache rewrites.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<base href=\"[[++site_url]]\" />\n```\n\n----------------------------------------\n\nTITLE: Wayfinder Snippet with Complete Template Configuration\nDESCRIPTION: Full Wayfinder snippet call showing all template parameters including inner templates and row templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`55` &rowTpl=`rowTpl` &outerTpl=`outerTpl` &parentRowTpl=`parentRow` &innerTpl=`innerTpl` &innerRowTpl=`innerRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Integrating RampartHook with FormIt PHP\nDESCRIPTION: This PHP snippet demonstrates how to integrate Rampart spam prevention with FormIt forms in MODX by specifying 'hook.RampartFormIt' as a hook. The snippet includes key settings like 'rptErrorField' to designate specific fields for error messages upon spam detection. Dependencies include the MODX framework, FormIt, and Rampart.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rampart/rampart.hook.rampartformit.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &hook=`hook.RampartFormIt`\n    &rptErrorField=`rampart`\n    &submitVar=`contact_me`\n]]\n\n/* somewhere in my form */\n[[!+fi.error.rampart]]\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX Core Path for Parent Directory\nDESCRIPTION: Alternative configuration for config.core.php that references the core directory when it's located one level up in the filesystem hierarchy. Useful when the subdomain is in a subfolder of the main domain.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/virtual-host.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndefine('MODX_CORE_PATH', dirname(dirname(__FILE__)) . '/core/');\n```\n\n----------------------------------------\n\nTITLE: Managing Album Items via sekUserGalleries.album.items.manage\nDESCRIPTION: This snippet allows users to manage items within an album, specifically for uploading images. User permissions and login status are required.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.album.items.manage]\n```\n\n----------------------------------------\n\nTITLE: Using getResourcesTag with tolinks in MODX\nDESCRIPTION: This snippet call demonstrates how to display resources tagged with a specific tag. It uses getResourcesTag with getResources to fetch and display blog posts with specific template, parent constraints, and pagination.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/taglister.tolinks.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getResourcesTag?\n    &element=`getResources`\n    &elementClass=`modSnippet`\n    &tpl=`blogPost`\n    &hideContainers=`1`\n    &pageVarKey=`page`\n    &parents=`59`\n    &includeTVs=`1`\n    &includeContent=`1` ]]\n    [[!+page.nav:notempty=`\n    [[!+page.nav]]\n`]]\n```\n\n----------------------------------------\n\nTITLE: Testing Package Addition with Error Logging\nDESCRIPTION: Example of adding a package with enhanced error logging and output. It sets the log level, log target, and checks for successful package addition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.addpackage.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->setLogLevel(xPDO::LOG_LEVEL_INFO);\n$xpdo->setLogTarget('ECHO');\nif (!$xpdo->addPackage('my_package','/path/to/docroot/core/components/my_package/model/','pkg_')) {\n    print 'There was a problem adding your package.';\n}\n```\n\n----------------------------------------\n\nTITLE: TV Input Option Value using mxfbTvFormList Snippet\nDESCRIPTION: This snippet populates a Template Variable's dropdown list with forms created using the mxFormBuilder extra. It uses the mxfbTvFormList snippet to retrieve the list of forms and formats it for display in the TV's input options. It allows content creators to select from published forms.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxformbuilder/mxformbuilder.create-form-list-in-tv.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"@EVAL return '-- Select --||' . $modx->runSnippet('mxfbTvFormList');\"\n```\n\n----------------------------------------\n\nTITLE: Setting Object Fields from Array in PHP\nDESCRIPTION: Demonstrates how to use fromArray() to set object fields from an associative array, including an example of setting a person's name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/fromarray.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object->fromArray(array(\n    'fname' => 'Boo',\n    'lname' => 'Radley',\n));\necho $object->get('fname').' '.$object->get('lname');\n// prints \"Boo Radley\"\n```\n\n----------------------------------------\n\nTITLE: Build Directory Structure Example\nDESCRIPTION: Directory structure showing the key components needed for building a MODX Transport Package, including data packaging scripts, resolvers, main build script, and setup options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n_build/\n  data/\n  resolvers/\n  build.transport.php\n  setup.options.php\n```\n\n----------------------------------------\n\nTITLE: Initializing QuipReply Snippet in MODX\nDESCRIPTION: Example of using the QuipReply snippet to display a reply form for a specific thread with moderator group configuration. Demonstrates how to set thread and moderator group parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipreply.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipReply? &thread=`myThread` &moderatorGroup=`Moderators`]]\n```\n\n----------------------------------------\n\nTITLE: Writing Files with xPDOCacheManager in PHP\nDESCRIPTION: Method signature for writing files to the filesystem using xPDOCacheManager. The method accepts a filename, content, optional mode (defaults to 'wb'), and optional options array. Returns boolean indicating success or failure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.writefile.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean writeFile (string $filename, string $content, [string $mode = 'wb'], [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Simple Search Results with Titles Only in PHP\nDESCRIPTION: Example of using SimpleSearch to display search results showing only the titles by setting the showExtract parameter to 0. This creates a more compact search results display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch? &showExtract=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Polls Snippet Implementation in MODX\nDESCRIPTION: Basic implementation of the Polls snippet using a direct question ID to display a poll form and results view.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Polls? &id=`your-question-id`]]\n```\n\n----------------------------------------\n\nTITLE: Registration Pending Message Template\nDESCRIPTION: Simple HTML message template shown to users after successful registration, instructing them to check their email for activation link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>Thank you for your interest in our site! Check your email for an activation link.\nYou will need to click this link before you can log into our site.</p>\n```\n\n----------------------------------------\n\nTITLE: modX::getCacheManager Syntax\nDESCRIPTION: Defines the syntax for the `getCacheManager` method. This includes the optional class name and options array parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getcachemanager.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nobject getCacheManager([string $class = ''], [[array $options = array('path' => XPDO_CORE_PATH, 'ignorePkg' => true)]])\n```\n\n----------------------------------------\n\nTITLE: Setting Up Doodles Snippet with Default Properties in PHP\nDESCRIPTION: This snippet initializes the Doodles service, sets up default properties for sorting and templating, and prepares for database querying using xPDO.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$dood = $modx->getService('doodles','Doodles',$modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/doodles/',$scriptProperties);\nif (!($dood instanceof Doodles)) return '';\n/* setup default properties */\n$tpl = $modx->getOption('tpl',$scriptProperties,'rowTpl');\n$sort = $modx->getOption('sort',$scriptProperties,'name');\n$dir = $modx->getOption('dir',$scriptProperties,'ASC');\n$output = '';\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Implementing a Plugin for OnCacheUpdate Event in MODX\nDESCRIPTION: This example demonstrates a plugin that listens for the OnCacheUpdate event and logs the results to the MODX error log. The plugin captures the clearing operation results and writes them to the error log for debugging purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/oncacheupdate.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnCacheUpdate':\n        $modx->log(modX::LOG_LEVEL_ERROR, print_r($results));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing XML Schema with MODX\nDESCRIPTION: This script parses an XML schema file to generate xPDO classes and maps, which are PHP representations of the schema. It initializes MODX, sets up logging, defines source paths, and utilizes the manager and generator to parse the schema and create object containers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once dirname(__FILE__).'/build.config.php';\ninclude_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n$modx= new modX();\n$modx->initialize('mgr');\n$modx->loadClass('transport.modPackageBuilder','',false, true);\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n$sources = array(\n    'model' => $modx->getOption('doodles.core_path').'model/',\n    'schema_file' => $modx->getOption('doodles.core_path').'model/schema/doodles.mysql.schema.xml'\n);\n$manager= $modx->getManager();\n$generator= $manager->getGenerator();\nif (!is_dir($sources['model'])) { $modx->log(modX::LOG_LEVEL_ERROR,'Model directory not found!'); die(); }\nif (!file_exists($sources['schema_file'])) { $modx->log(modX::LOG_LEVEL_ERROR,'Schema file not found!'); die(); }\n$generator->parseSchema($sources['schema_file'],$sources['model']);\n$modx->addPackage('doodles', $sources['model']); // add package to make all models available\n$manager->createObjectContainer('Doodle'); // created the database table\n$modx->log(modX::LOG_LEVEL_INFO, 'Done!');\n```\n\n----------------------------------------\n\nTITLE: Creating listMyResources Snippet for MODX Template Variable\nDESCRIPTION: Custom MODX snippet that generates a list of child resources for a given parent, formatting the output for use in a multi-select Template Variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$parent = $modx->getOption('parent',$scriptProperties,9);\n$parentObj = $modx->getObject('modResource',$parent);\nif (!($parentObj instanceof modResource)) { return ''; }\n$resArray = $parentObj->getMany('Children');\n$resources = array();\nforeach($resArray as $res) {\n  if ($res instanceof modResource) {\n    $resources[] = $res->get('pagetitle') . '==' . $res->get('id');\n  }\n}\n$out = implode(\"||\",$resources);\nreturn $out;\n```\n\n----------------------------------------\n\nTITLE: MODX CLI Installation XML Configuration Template\nDESCRIPTION: XML configuration file used for command-line installation of MODX, defining database connection, installation settings, system paths, and other critical parameters\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/cli/config.xml.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<modx>\n  <database_type>mysql</database_type>\n  <database_server>localhost</database_server>\n  <database>modx_modx</database>\n  <database_user>db_username</database_user>\n  <database_password>db_password</database_password>\n  <table_prefix>modx_</table_prefix>\n  <!-- Additional configuration parameters -->\n</modx>\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Update Processor in PHP\nDESCRIPTION: PHP processor class that handles updates from inline grid editing by extending the base update processor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nrequire_once (dirname(__FILE__).'/update.class.php');\nclass DoodleUpdateFromGridProcessor extends DoodleUpdateProcessor {\n    public function initialize() {\n        $data = $this->getProperty('data');\n        if (empty($data)) return $this->modx->lexicon('invalid_data');\n        $data = $this->modx->fromJSON($data);\n        if (empty($data)) return $this->modx->lexicon('invalid_data');\n        $this->setProperties($data);\n        $this->unsetProperty('data');\n        return parent::initialize();\n    }\n}\nreturn 'DoodleUpdateFromGridProcessor';\n```\n\n----------------------------------------\n\nTITLE: Handling Template Variable Removal in MODX Plugin\nDESCRIPTION: This PHP code snippet demonstrates how to handle the OnTemplateVarRemove event in a MODX plugin. The plugin captures the removed template variable data and prints it to the error log for debugging purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ontemplatevarremove.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnTemplateVarRemove':\n        //array tv, with all parameters\n        print_r($templateVar->toArray());\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Snippet Properties in MODX\nDESCRIPTION: Demonstrates how to access properties passed to MODX snippets such as Register and Login. Snippet properties are accessed via the 'config' member, enabling dynamic configuration retrieval.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$properties = $hook->login->controller->config;\n```\n\n----------------------------------------\n\nTITLE: Displaying MoneyBird Contacts with Templates\nDESCRIPTION: This snippet usage shows how to specify additional templates for rendering the contacts list and individual entries, providing greater customization in the output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/moneybird.contacts.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!MoneyBirdContacts? &tpl=`mbContact` &outerTpl=`mbContacts`]]\n```\n\n----------------------------------------\n\nTITLE: Resetting Password via Database Query in MODX 2.1+\nDESCRIPTION: This SQL query updates the user's password and hash class in MODX 2.1+. It changes the hash_class to MD5 and sets a new password using the MD5 function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/troubleshooting-security/resetting-a-user-password-manually.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE modx_users SET hash_class = 'hashing.modMD5', password = MD5('the-new-password') WHERE username = 'theusername';\n```\n\n----------------------------------------\n\nTITLE: BaseTemplate Configuration for migxMultiLang\nDESCRIPTION: This snippet shows how to structure the MODX BaseTemplate to support multilingual content using migxMultiLang. It uses the mmlCache snippet to process the content through pdoResources with appropriate parameters for translations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/migxmultilang.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!mmlCache?\n&element=`pdoResources`\n&parents=`0`\n&resources=`[[*id]]`\n&tpl=`MainTpl`\n&includeTVs=`[[mmlGetTemplateTVs]]`\n&prepareTVs=`1`\n&processTVs=`1`\n&tvPrefix=``\n&loadModels=`migxmultilang`\n&prepareSnippet = `mmlTranslatePdoToolsRow`\n]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Titles Only with AdvSearch in MODX\nDESCRIPTION: This snippet utilizes the AdvSearch component to display only the titles of search results. The &showExtract parameter is set to '0' to hide description extracts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!AdvSearch?\n    &showExtract=`0`\n]]\n```\n\n----------------------------------------\n\nTITLE: Handling Fred Element Drop Event in JavaScript\nDESCRIPTION: Event listener implementation for when a Fred Element is dropped into a dropzone. Triggers the $owl() function to reinitialize carousel functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/js_events.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.body.addEventListener(\"FredElementDrop\", function() {\n    $owl();\n});\n```\n\n----------------------------------------\n\nTITLE: Default extractTpl Chunk in AdvSearch\nDESCRIPTION: Defines the default HTML structure for displaying search result extracts using the AdvSearch snippet. The placeholder [[+extract]] is used to insert the actual extract text into the paragraph element with the class 'advsea-extract'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/extracttpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<p class=\\\"advsea-extract\\\">[[+extract]]</p>\"\n```\n\n----------------------------------------\n\nTITLE: Manejo de Solicitudes en Conectores PHP de MODX\nDESCRIPTION: Este snippet muestra cómo manejar solicitudes en los conectores de MODX. Se incluye el archivo index.php principal y se utiliza el método handleRequest() del objeto de solicitud.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/directory-structure.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->request->handleRequest();\n```\n\n----------------------------------------\n\nTITLE: Custom Thumbnail Properties\nDESCRIPTION: Configures album cover thumbnail to output as a 90% quality JPG instead of the default PNG. Shows advanced thumbnail configuration using JSON properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryAlbums?\n    &thumbProperties=`{\"f\":\"jpg\",\"q\":\"90%\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Search Form and Results Display in MODX\nDESCRIPTION: Demonstrates how to implement a simple search form and display search results using SimpleSearch snippets in a MODX template\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearchForm]]\n\n<h2>Results</h2>\n[[!SimpleSearch]]\n```\n\n----------------------------------------\n\nTITLE: Implementing MinLength Validation in PHP\nDESCRIPTION: PHP code demonstrating how to use the validation rule in practice. Creates a new object, attempts validation, and handles any validation error messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdominlengthvalidationrule.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$modx->addPackage('test','/path/to/my/test/model/','test_');\n$obj = $modx->newObject('myTest');\n$obj->set('name','');\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $output .= $errorMsg['message'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Connection Prefix in MODX\nDESCRIPTION: The 'mail_smtp_prefix' setting allows you to specify the connection prefix for SMTP in MODX. It can be set to an empty string, 'ssl', or 'tls' to determine the type of connection used for sending emails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/mail_smtp_prefix.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n**Name**: SMTP Connection Prefix\n**Type**: String\n**Default**:\n\nSets connection prefix. Options are \"\", \"ssl\" or \"tls\".\n```\n\n----------------------------------------\n\nTITLE: Using removeAllEventListener to Clear All Events in MODX\nDESCRIPTION: An example showing how to use the removeAllEventListener method to eliminate any other events from firing in the current request.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.removealleventlistener.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->removeAllEventListener();\n```\n\n----------------------------------------\n\nTITLE: Dropdown List Template Variable Input Options in JSON\nDESCRIPTION: JSON configuration options for Dropdown List template variables in MODX. These options can be used in MIGX configurations to control field validation and display properties like list dimensions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"listWidth\": \"\",\n    \"listHeight\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Radio Button Field for Action Selection\nDESCRIPTION: This snippet creates a radio button field for selecting actions within a form, providing options for publishing, saving as draft, or previewing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`radio`\n    &label=` `\n    &options=`Publish==publish||Save as draft==save||Preview==preview`\n    &name=`action`\n    &default=``\n]]\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Block Class\nDESCRIPTION: Examples showing how block class attribute affects element wrapping with and without Fred.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"image\" data-fred-block-class=\"special-wrapper\"></div>\n```\n\n----------------------------------------\n\nTITLE: Camper Item Display Configuration\nDESCRIPTION: This chunk, `cmVoorraadItem`, defines how each camper item is rendered with associated details like number, brand, and status. It uses placeholder syntax for data population. Dependencies include proper MODX configuration and CamperManagement setup. The input placeholders represent camper attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.customizing-the-component.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<tr>\\n  <td rowspan=\\\"2\\\">\\n    <strong>[[+keynr:notempty=`Nr. [[+keynr]]`]]\\n      [[+plate:notempty=`<br />[[+plate]]`]]</strong>\\n  </td>\\n\\n  <td rowspan=\\\"2\\\">\\n    [[+brand]] / [[+type]] / [[+car:notempty=`[[+car]] /`]] [[+engine:notempty=`[[+engine]] /`]] Bouwjaar [[+manufactured:eq=`0`:then=`onbekend`:else=`[[+manufactured]]`]] / Gewicht [[+weight:eq=`0`:then=`onbekend`:else=`[[+weight]]`]] /\\n    [[+beds]] Slaapplaatsen / Kilometerstand [[+mileage:eq=`0`:then=`onbekend`:else=`[[+mileage]]`]] / APK tot [[+periodiccheck:eq=`0`:then=`onbekend`:else=`[[+periodiccheck]]`]] /\\n    [[+options]]\\n    [[+remarks]]\\n  </td rowspan=\\\"2\\\">\\n\\n  <td>\\n\\n[[+status:eq=`2`:then=\\`\\n<img src=\\\"/assets/templates/lighthouse/cmimg/banner_topper_sm.png\\\" alt=\\\"Topper\\\" />\\`]]\\n[[+status:eq=`3`:then=\\\"<img src=\\\"/assets/templates/lighthouse/cmimg/banner_optie_sm.png\\\" alt=\\\"In optie\\\" />\\\"]]\\n[[+status:eq=`4`:then=\\`\\n<img src=\\\"/assets/templates/lighthouse/cmimg/banner_verkocht_sm.png\\\" alt=\\\"Verkocht\\\" />\\`]]\\n</td></tr><tr><td>\\n    <strong>&euro; [[+price]]</strong>\\n  </td>\\n</tr>\"\n```\n\n----------------------------------------\n\nTITLE: Extracting MODX Files from Archive (UNIX)\nDESCRIPTION: These commands extract the MODX files from a compressed tar archive after moving to the new server.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngunzip modx_revo_site.tar.gz\ntar xvf modx_revo_site.tar\n```\n\n----------------------------------------\n\nTITLE: Implementing Lingua Selector Wrapper Chunk in PHP\nDESCRIPTION: Default chunk template for the lingua.selector wrapper which creates a dropdown button to select languages. Uses Bootstrap styling for the dropdown interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lingua/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"container\">\n    <div class=\"btn-group\">\n        <button class=\"btn btn-link btn-mini dropdown-toggle\"\n                data-toggle=\"dropdown\"\n                >[[%lingua.select_language]]\n        </button>\n        <ul class=\"dropdown-menu\">\n            [[+lingua.languages]]\n        </ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Options Configuration in MODx Forms\nDESCRIPTION: Defines options for nested field types like checkboxes, radios, and selects using TV-style format with label and value delimiters\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"options\": \"Label One==value1||Label Two==value2||Label Three==value3\"}\n```\n\n----------------------------------------\n\nTITLE: MODX Manager Date Format Setting Definition\nDESCRIPTION: System setting that specifies how dates are formatted in the MODX manager interface using PHP date() format string. The default format is Y-m-d which displays dates as YYYY-MM-DD.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/manager_date_format.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Manager Date Format\n**Type**: String\n**Default**: Y-m-d\n```\n\n----------------------------------------\n\nTITLE: Creating Doodle Window Component in JavaScript\nDESCRIPTION: Defines a window component for creating new Doodle entries with name and description fields. Extends MODx.Window functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nDoodles.window.CreateDoodle = function (config) {\n    config = config || {};\n    Ext.applyIf(config, {\n        title: _(\"doodles.doodle_create\"),\n        url: Doodles.config.connectorUrl,\n        baseParams: {\n            action: \"mgr/doodle/create\",\n        },\n        fields: [\n            {\n                xtype: \"textfield\",\n                fieldLabel: _(\"doodles.name\"),\n                name: \"name\",\n                anchor: \"100%\",\n            },\n            {\n                xtype: \"textarea\",\n                fieldLabel: _(\"doodles.description\"),\n                name: \"description\",\n                anchor: \"100%\",\n            },\n        ],\n    });\n    Doodles.window.CreateDoodle.superclass.constructor.call(this, config);\n};\nExt.extend(Doodles.window.CreateDoodle, MODx.Window);\nExt.reg(\"doodles-window-doodle-create\", Doodles.window.CreateDoodle);\n```\n\n----------------------------------------\n\nTITLE: Creating an In-Page Anchor with sLink in PHP\nDESCRIPTION: This snippet illustrates how to use sLink to create an in-page anchor link. It sets the 'name', 'link', and 'title' attributes to customize the anchor. sLink should be set up in the MODX installation for this to execute properly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/slink/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[sLink? &to=`#myAnchor` &name=`myAnchor` &link=`This is an anchor` &title=`Clicking me focuses your screen`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Post Info in MODX Revolution Blog Template\nDESCRIPTION: This snippet shows how to display post metadata like publication date and comment count in a MODX Revolution blog template. It uses MODX's date formatting and the QuipCount snippet for comment counting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<p class=\"post-info\">\n  Posted on <time datetime=\"[[*publishedon:strtotime:date=`%Y-%m-%d`]]\">[[*publishedon:strtotime:date=`%b %d, %Y`]]</time>\n  <a href=\"[[~[[*id]]]]#comments\">\n    Comments ([[!QuipCount? &thread=`blog-post-[[*id]]`]])\n  </a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Polls Snippet Implementation with TV in MODX\nDESCRIPTION: Implementation of the Polls snippet using a Template Variable (TV) of type 'Polls question list' to dynamically select which poll to display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Polls? &id=`[[*yourPollsTVname]]`]]\n```\n\n----------------------------------------\n\nTITLE: Output Filter Syntax in MODX Revolution\nDESCRIPTION: This snippet demonstrates the basic syntax for applying an output modifier to a MODX element. The modifier allows you to change the value of a template variable or snippet output. The value is passed to the modifier for processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[element:modifier=`value`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Example for form_customization_use_all_groups\nDESCRIPTION: Example showing the Yes value setting for form_customization_use_all_groups that enables using FC Sets from all User Groups.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/form_customization_use_all_groups.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nYes\n```\n\n----------------------------------------\n\nTITLE: Custom Caching for sitemapFriend in PHP\nDESCRIPTION: This snippet uses the getCache snippet to provide custom caching control for the sitemapFriend output. It allows for cache expiration settings, improving performance when generating sitemaps. The 'type' parameter is set to 'html'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!getCache? &element=`sitemapFriend` &cacheKey=`sitemap` &cacheExpires=`21600` &type=`html`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Only Files with FileLister in MODX\nDESCRIPTION: Shows how to configure FileLister to display only files (excluding directories) from a specific path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/filelister.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FileLister? &path=`assets/downloads` &showDirectories=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Theme with Gitify\nDESCRIPTION: Commands to install all required packages and build the theme using Gitify. This process installs necessary Extras and builds the theme components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/www\ngitify package:install --all\ngitify build\n```\n\n----------------------------------------\n\nTITLE: Creating Auth-Restricted Comment Threads without Gravatars in PHP\nDESCRIPTION: The snippet initializes a Quip comment thread that requires user authentication and disables Gravatars. It's part of MODX with Quip, where &useGravatar set to '0' disables Gravatar images, and &requireAuth requires users to login before commenting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n[[!Quip? &thread=`blog-post-[[*id]]` &useGravatar=`0` &requireAuth=`1`]]\n```\n```\n\n----------------------------------------\n\nTITLE: Calling Chunks with Template Identifier in PHP for MODX\nDESCRIPTION: This snippet illustrates how to utilize the '@TEMPLATE' prefix to specify a template ID, allowing for flexible content rendering based on defined templates within MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/General_settings.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &tpl=`@TEMPLATE 10`\n]]\n```\n\n----------------------------------------\n\nTITLE: Initializing Build Script with Timer and Time Limit Setting\nDESCRIPTION: The initial PHP code that starts the build script with documentation comments, begins a timer to track execution time, and sets an unlimited time limit to prevent script timeout.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Quip build script\n *\n * @package quip\n * @subpackage build\n */\n$mtime = microtime();\n$mtime = explode(\" \", $mtime);\n$mtime = $mtime[1] + $mtime[0];\n$tstart = $mtime;\nset_time_limit(0); /* makes sure our script doesnt timeout */\n```\n\n----------------------------------------\n\nTITLE: Loading MODExt Components Dynamically\nDESCRIPTION: Dynamically creates and configures MODExt components using the MODx.load method with custom configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = MODx.load({\n  xtype: 'modx-window-namespace-create'\n  ,blankValues: true\n});\nw.setValues({ name: 'My Namespace' });\nw.show();\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Check for Chunk Editing\nDESCRIPTION: Example showing how to check if there are any locks on the edit_chunk action for the currently logged-in user. Uses getLoginUserID() to get the current user's ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.checkforlocks.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ($modx->checkForLocks($modx->getLoginUserID(),'edit_chunk','edit');\n```\n\n----------------------------------------\n\nTITLE: Formatting Multi-Select Values with HTML Lists\nDESCRIPTION: Configuration for formatting checkbox or multi-select values in email output using HTML list items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/email.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    ...\n    &emailMultiWrapper=`<li>[[+value]]</li>`\n]]\n```\n\n----------------------------------------\n\nTITLE: Friendly URL Pagination Handler Plugin\nDESCRIPTION: MODX plugin for handling friendly URL pagination requests.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($modx->event->name == 'OnPageNotFound') {\n    $req = $modx->getOption('request_param_alias');\n    $pageVarKey = 'page';\n    if (preg_match(\"#.*?({$pageVarKey}-(\\d+))#\", $_REQUEST[$req], $matches)) {\n        $uri = str_replace($matches[1], '', $matches[0]);\n        $id = 0;\n        if (!$id = $modx->findResource($uri)) {\n            $id = $modx->findResource(rtrim($uri, '/'));\n        }\n        if ($id) {\n            $_GET[$pageVarKey] = $_REQUEST[$pageVarKey] = $matches[2];\n            $modx->sendForward($id);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Tpl Chunk Content (HTML)\nDESCRIPTION: This HTML snippet defines a generic chunk named `GenericTplChunk` that displays the page title. It's used as a template for formatting resource data within getResources.  The issue comes in when this chunk is called from another chunk, because of MODX's caching.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<div>Hi [[+pagetitle]]</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing FormIt Redirect Hook with Parameters in PHP\nDESCRIPTION: This snippet demonstrates how to use the FormIt redirect hook with custom parameters. It redirects to resource 212 and includes 'user' and 'success' parameters in the URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/redirect.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n   &hooks=`redirect`\n   &redirectTo=`212`\n   &redirectParams=`{\"user\":\"123\",\"success\":\"1\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Sending a 301 Permanent Redirect in MODX\nDESCRIPTION: Example of sending a 301 Moved Permanently HTTP response code instead of the default 302 Moved Temporarily when redirecting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendredirect.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendRedirect('https://modx.com',array('responseCode' => 'HTTP/1.1 301 Moved Permanently'));\n```\n\n----------------------------------------\n\nTITLE: Integrating Quip Comments in MODX Revolution Blog Template\nDESCRIPTION: This snippet demonstrates how to integrate Quip comments into a MODX Revolution blog template. It includes both the comment display and reply form, with options for moderation and auto-closing after a specified time.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<section class=\"post-comments\" id=\"comments\">\n  [[!Quip?\n    &thread=`blog-post-[[*id]]`\n    &replyResourceId=`123`\n    &closeAfter=`30`\n  ]]\n  <hr />\n  [[!QuipReply?\n    &thread=`blog-post-[[*id]]`\n    &notifyEmails=`my@email.com`\n    &moderate=`1`\n    &moderatorGroup=`Moderators`\n    &closeAfter=`30`\n  ]]\n</section>\n```\n\n----------------------------------------\n\nTITLE: Alphanumerically Sorted Prominent Albums\nDESCRIPTION: Retrieves 10 albums sorted alphabetically by name in ascending order. Demonstrates custom sorting configuration for album display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryAlbums?\n    &sort=`name`\n    &dir=`ASC`\n]]\n```\n\n----------------------------------------\n\nTITLE: Updating Connectors Path in MODX Configuration\nDESCRIPTION: PHP configuration changes in MODX core config file to update the connectors path and URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$modx_connectors_path = '/home/youruser/public_html/0therp4th/';\n$modx_connectors_url = '/0therp4th/';\n```\n\n----------------------------------------\n\nTITLE: Creating Activation Email Template in MODX\nDESCRIPTION: This code snippet shows the content of the myActivationEmailTpl chunk, which is used as a template for the activation email sent to newly registered users. It includes placeholders for username, password, and the confirmation URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register/example-form-1.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<p>[[+username]],</p>\n\n<p>Thanks for registering! To activate your new account, please click on the following link:</p>\n\n<p><a href=\"[[+confirmUrl]]\">[[+confirmUrl]]</a></p>\n\n<p>After activating, you may login with your password and username:</p>\n\n<p>\nUsername: <strong>[[+username]]</strong><br />\nPassword: <strong>[[+password]]</strong></p>\n\n<p>If you did not request this message, please ignore it.</p>\n\n<p>Thanks,<br />\n<em>Site Administrator</em></p>\n```\n\n----------------------------------------\n\nTITLE: Context-Specific GoogleSiteMap Implementation in PHP\nDESCRIPTION: Example of generating a sitemap that combines multiple contexts (web and marketing). This allows for creating a comprehensive sitemap across different sections of a MODX site.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemapversion1.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap? &context=`web,marketing`]]\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Setting Change Handler\nDESCRIPTION: Example of element with JavaScript function call on setting change.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"clock\" data-fred-on-setting-change=\"reInitClock\"></div>\n```\n\n----------------------------------------\n\nTITLE: Grid Column Definition Using a Local ComboBox\nDESCRIPTION: This code shows how to integrate the Doodles.combo.Units ComboBox into a grid column definition as an editor.  It sets the xtype to 'doodle-combo-units' and enables the renderer to display the selected unit correctly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n       {\n            header: _('unit')\n            ,dataIndex: 'unit'\n            ,sortable: false\n            ,width: 50\n            ,editor: { xtype: 'doodle-combo-units', renderer: true }\n        }\n```\n\n----------------------------------------\n\nTITLE: Declaring Self-Join Relationships in XML Schema\nDESCRIPTION: This XML snippet defines hierarchical relationships within a `categories` table using self-joins in xPDO. It includes two aggregate relationships, `Parent` and `Children`, to represent the parent-child hierarchy.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"Categories\" table=\"categories\" extends=\"xPDOObject\">\n        <field key=\"category_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n        <field key=\"parent_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"true\" />\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"true\" />\n        <field key=\"seq\" dbtype=\"smallint\" precision=\"4\" phptype=\"integer\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"category_id\" collation=\"A\" null=\"false\" />\n        </index>\n        <aggregate alias=\"Parent\" class=\"Categories\" local=\"parent_id\" foreign=\"category_id\" cardinality=\"one\" owner=\"foreign\" />\n        <composite alias=\"Children\" class=\"Categories\" local=\"category_id\" foreign=\"parent_id\" cardinality=\"many\" owner=\"local\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: Example REST API JSON Response\nDESCRIPTION: Sample JSON response format from the REST API endpoint.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/developing-restful-api.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  results: [\n    {\n       id: 1,\n       sortorder: 1,\n       name: \"Finish documenting RESTful APIs\",\n       added: \"2014-09-14\",\n       target_completion_date: \"2014-10-14\",\n       assigned_to: \"\"\n    }\n  ],\n  total: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authenticated User Example in ModX PHP\nDESCRIPTION: Example showing how to get the authenticated user for a specific context named 'sports' using the getAuthenticatedUser method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getauthenticateduser.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getAuthenticatedUser('sports');\n```\n\n----------------------------------------\n\nTITLE: Running Basic MODX Upgrade via Command Line\nDESCRIPTION: Command to perform a basic upgrade of MODX via the PHP command line. This should be executed from the MODX setup directory after configuring the upgrade XML file with required attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/cli.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp ./index.php --installmode=upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating a Chunk with runProcessor in MODX\nDESCRIPTION: This code demonstrates how to create a new Chunk element in MODX using the runProcessor method. It includes error handling and retrieves the created chunk's information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/using-runprocessor.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$response = $modx->runProcessor('element/chunk/create',array(\n   'name' => 'NewChunk',\n   'description' => 'A test Chunk made with runProcessor.',\n   'snippet' => '<h3>Chunkify!</h3>',\n));\nif ($response->isError()) {\n    return $response->getMessage();\n}\n$chunkArray = $response->getObject();\nreturn 'The chunk \"'.$chunkArray['name'].' was created with ID '.$chunkArray['id'];\n```\n\n----------------------------------------\n\nTITLE: Cleaning up a feature/bug-fix branch\nDESCRIPTION: This snippet shows how to clean up after a feature or bug fix, by returning to the development branch and deleting the now redundant feature branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"git checkout 2.x\\ngit branch -d myworkflow\"\n```\n\n----------------------------------------\n\nTITLE: Resource List Input Type WHERE Condition Example\nDESCRIPTION: PHP array example for filtering resources in the Resource List input type. This demonstrates how to exclude resources with a specific pagetitle.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[{\"pagetitle:!=\":\"Home\"}]\n```\n\n----------------------------------------\n\nTITLE: Implementing a Plugin for OnChunkFormPrerender in MODX\nDESCRIPTION: This example plugin listens for the OnChunkFormPrerender event and injects custom CSS into the manager page to make form text fields appear red. The plugin demonstrates how to use regClientStartupHTMLBlock to add custom styles to the chunk editor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onchunkformprerender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnChunkFormPrerender':\n        $modx->regClientStartupHTMLBlock('\n        <style>\n        .x-form-text {color: #ff0000;}\n        </style>');\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Snippet in MODX Dashboard Widget\nDESCRIPTION: This example shows how to reference a snippet in a MODX dashboard widget. Simply provide the name of the snippet without any tags, and the output from the snippet will be displayed in the dashboard widget.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/dashboards/widget-types/snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMyCustomDashboardSnippet\n```\n\n----------------------------------------\n\nTITLE: Displaying Selected Album Images in HTML\nDESCRIPTION: This snippet uses the MODX Gallery snippet to display images from a selected album, starting with Album ID 1. If invoked from a GalleryAlbums snippet link, the album ID will be overridden. The output is set to the 'gallery' placeholder for showing album details such as name and description.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.setting-up-your-gallery.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[!Gallery? &album=`1` &toPlaceholder=`gallery`]]\n<h1><a href=\"[[~[[*id]] &galAlbum=`[[+gallery.id]]`]]\">[[+gallery.name]]</a></h1>\n<p>[[+gallery.description]]</p>\n\n[[+gallery]]\n```\n\n----------------------------------------\n\nTITLE: Upcoming Events Template with EventsX Snippet\nDESCRIPTION: HTML template for displaying a list of upcoming events using the EventsX snippet with a custom template and limit parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventsx/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>[[++site_name]] - [[*pagetitle]]</title>\n        <base href=\"[[++site_url]]\" />\n    </head>\n    <body>\n        [[!EventsX? &tpl=`evxEventTpl` &limit=`10`]] [[*content]]\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Action in MIGXdb\nDESCRIPTION: This code snippet outlines the steps to create a new action for MIGXdb within the MODX Revolution interface. It includes navigating to the System actions and right-clicking to create a new action with the specified controller.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem->Actions\nright-click 'migx' ->create Action here\ncontroller: index\n```\n\n----------------------------------------\n\nTITLE: HTML Pagination Wrapper Template\nDESCRIPTION: Default template chunk for the overall pagination wrapper that contains all navigation elements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n@INLINE <div class=\"pagination\"><ul class=\"pagination\">[[+first]][[+prev]][[+pages]][[+next]][[+last]]</ul></div>\n```\n\n----------------------------------------\n\nTITLE: Registro de Errores en MODX usando PHP\nDESCRIPTION: Este snippet demuestra cómo registrar una entrada en el archivo de registro de errores de MODX utilizando el método log() del objeto MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/directory-structure.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->log();\n```\n\n----------------------------------------\n\nTITLE: Minimum Resize and Cropping with MODX Revolution - PHP\nDESCRIPTION: This snippet combines the functionality of setting a minimum resize and applying cropping to the image, ensuring the final output fits specific dimensions set by the user.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`min-150,c-150x150`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Message for No Results in MODX (PHP)\nDESCRIPTION: Shows how to display a default message when no resources match the criteria, similar to the 'empty' parameter in Ditto.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources:default=`No results found`?\n    &parents=`[[*id]]`\n    &tpl=`myRowTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Script Template for Fancybox in Cliche\nDESCRIPTION: This JavaScript snippet integrates Fancybox with Cliche for zoom functionality. Dependencies include jQuery and Fancybox. It applies Fancybox to HTML elements with class 'zoom'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n$(\"a.zoom\").fancybox();\n```\n\n----------------------------------------\n\nTITLE: Registering Toolbar Plugin in PHP\nDESCRIPTION: This snippet demonstrates how to register a toolbar plugin in MODX using PHP. It includes including necessary JavaScript and CSS files, as well as the call to register the plugin with Fred.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/toolbar_plugins.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$includes = '\n    <script type=\"text/javascript\" src=\"/path/to/plugin/file.js\"></script>\n    <link rel=\"stylesheet\" href=\"/path/to/stylsheet/style.css\" />\n';\n\n$beforeRender = '\n    this.registerToolbarPlugin(\"TestToolbarPlugin\", TestToolbarPluginInit);\n';\n\n$modx->event->_output = [\n    'includes' => $includes,\n    'beforeRender' => $beforeRender\n];\n```\n\n----------------------------------------\n\nTITLE: Confirmation Dialog with AJAX Request in MODx\nDESCRIPTION: Example of using MODx.msg.confirm() to show a confirmation dialog that triggers an AJAX request with params and success listener\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.msg.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.msg.confirm({\n   title: 'Are you sure?',\n   text: 'Do you want to delete the world? This is irreversible.',\n   url: 'http://rest.endofdays.com/armageddon/',\n   params: {\n      deleteWorld: true\n   },\n   listeners: {\n        'success':{fn: function(r) {\n             MODx.clearCache(); /* clear cache after world destruction, so we dont have latent data */\n        },scope:true}\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Drag&Drop JavaScript Code\nDESCRIPTION: This JavaScript code should be deleted to remove the drag and drop functionality from the component. Removing this file is the first step in disabling drag and drop.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bxrextra/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"assets/components/yourcomponent/js/mgr/extra/griddraganddrop.js\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch for Contribution in PHP\nDESCRIPTION: Command to create a new branch for feature development from the main development branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngit checkout -b myworkflow 2.x\n```\n\n----------------------------------------\n\nTITLE: Checking for Validation Errors with xPDOValidator in PHP\nDESCRIPTION: This example shows how to use the validate method to check if any validation errors occurred. It gets the validator from an object and calls the validate method, then checks the result.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.validate.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$validator = $obj->getValidator();\nif ($validator->validate()) {\n   echo 'Errors occurred!';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grid Columns for MIGX TV in JSON\nDESCRIPTION: JSON configuration for defining the grid view of MIGX TV data. This example sets up columns for 'Title' and 'Image' with specific rendering options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.backend-usage.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"header\": \"Title\",\n    \"width\": \"160\",\n    \"sortable\": \"true\",\n    \"dataIndex\": \"title\"\n  },\n  {\n    \"header\": \"Image\",\n    \"width\": \"50\",\n    \"sortable\": \"false\",\n    \"dataIndex\": \"image\",\n    \"renderer\": \"this.renderImage\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Canonical Tags with GatewayManager in MODX PHP\nDESCRIPTION: The provided PHP snippet demonstrates how to use the MODX GatewayManager to automatically generate canonical tags. This snippet utilizes a placeholder to check and generate a canonical link element if the `gateway.canonical` variable is not empty. This setup is useful for ensuring SEO optimization by preventing duplicate content issues with canonical links in MODX-managed websites.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gatewaymanager/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[!+gateway.canonical:notempty=\\`<link rel=\\\"canonical\\\" href=\\\"[[+gateway.canonical]]\\\" />\\`]\\n\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters in MODx JS\nDESCRIPTION: Demonstrates how to access the current page's GET parameters through the MODx.request object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = MODx.request.id;\n```\n\n----------------------------------------\n\nTITLE: Displaying Larger Image from Thumbnails in HTML\nDESCRIPTION: The MODX GalleryItem snippet displays a larger image when a thumbnail is clicked. It checks the 'galItem' URL parameter to load the appropriate image. Metadata including image name, associated albums, and tags are also displayed. This functionality requires the GalleryItem snippet configured in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.setting-up-your-gallery.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n[[!GalleryItem]]\n[[!+galitem.image:notempty=`\n<div class=\"image\">\n  <a href=\"[[+galitem.image]]\"><img class=\"[[+galitem.imgCls]]\" src=\"[[+galitem.image]]\" alt=\"[[+galitem.name]]\" /></a>\n  <br />Albums: [[+galitem.albums]]\n  <br />Tags: [[+galitem.tags]]\n</div>\n`]]\n```\n\n----------------------------------------\n\nTITLE: Initializing Doodles JavaScript Component\nDESCRIPTION: Sets up the base Doodles JavaScript object that extends Ext.Component, providing namespace and structure for the CMP interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar Doodles = function(config) {\n    config = config || {};\n    Doodles.superclass.constructor.call(this,config);\n};\nExt.extend(Doodles, Ext.Component, {\n    page:{},\n    window:{},\n    grid:{},\n    tree:{},\n    panel:{},\n    combo:{},\n    config:{},\n});\nExt.reg(\"doodles\", Doodles);\nDoodles = new Doodles();\n```\n\n----------------------------------------\n\nTITLE: MODX URL Tag Example\nDESCRIPTION: Example showing how to use makeUrl parameters in MODX URL tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.makeurl.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[~123? &scheme=`full`]]\n```\n\n----------------------------------------\n\nTITLE: MODX Archivist Widget Template\nDESCRIPTION: Template for displaying an archives widget that shows a month-by-month list of posts from specified sections.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<h3>Archives</h3>\n<ul>\n  [[!Archivist? &target=`30` &parents=`34,35`]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic pdoCrumbs Implementation\nDESCRIPTION: Simple implementation of pdoCrumbs snippet for generating breadcrumb navigation\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoCrumbs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[pdoCrumbs]]\n```\n\n----------------------------------------\n\nTITLE: Creating a getField Snippet for MODX Resource Fields\nDESCRIPTION: Custom PHP snippet to retrieve a specific field from a MODX resource. This snippet can fetch any resource field by ID, defaulting to pagetitle if no field is specified.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Grabs a field for a specified Resource\n */\n/* setup some default properties */\n$id = $modx->getOption('id',$scriptProperties,false);\n$field = $modx->getOption('field',$scriptProperties,'pagetitle');\nif ($id) { /* grab the resource object */\n    $resource = $modx->getObject('modResource',$id);\n    if ($resource == null) return '';\n} else { /* if no id specified, use current doc */\n    $resource =& $modx->resource;\n}\n/* return the field value */\nreturn $resource->get($field);\n?>\n```\n\n----------------------------------------\n\nTITLE: Finalizing and packaging a MODX Transport Package in PHP\nDESCRIPTION: Finalizes the Transport Package creation process by zipping up the package files, calculating the total execution time, and displaying build completion information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/* zip up package */\n$modx->log(modX::LOG_LEVEL_INFO,'Packing up transport package zip...');\n$builder->pack();\n\n$tend= explode(\" \", microtime());\n$tend= $tend[1] + $tend[0];\n$totalTime= sprintf(\"%2.4f s\",($tend - $tstart));\n$modx->log(modX::LOG_LEVEL_INFO,\"\\n<br />Package Built.<br />\\nExecution time: {$totalTime}\\n\");\nexit ();\n```\n\n----------------------------------------\n\nTITLE: Retrieve Comments by User\nDESCRIPTION: Get comments for a specific user by username in user mode\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiplatestcomments.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[QuipLatestComments? &type=`user` &user=`jb2009`]]\n```\n\n----------------------------------------\n\nTITLE: Fixing Duplicate Index Page URLs in .htaccess\nDESCRIPTION: RewriteRule that redirects requests for index.php, index.html, or index.htm to the root URL, preventing search engines from indexing duplicate content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\\ /index\\.(php|html|htm)\\ HTTP/\nRewriteRule ^(.*)index\\.(php|html|htm)$ $1 [R=301,L]\n```\n\n----------------------------------------\n\nTITLE: Basic Databackup Usage with getCache in PHP\nDESCRIPTION: Example snippet call that backs up a MODX site every 24 hours using the getCache element to reduce processing overhead. This configuration excludes specific tables and automatically purges backups older than the default 21 days.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/databackup/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getCache?\n&element=`backup`\n&excludeTables=`my_custom_table,my_other_custom_table`\n&cacheExpires=`86400`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using imageHERE Basic Syntax in MODX\nDESCRIPTION: Basic syntax for calling the imageHERE chunk in MODX templates or content. This creates a placeholder image using default settings (300x200 pixels).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/imagehere/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[[$imageHERE]]\n```\n\n----------------------------------------\n\nTITLE: Checking Group Membership with modUser.isMember in PHP\nDESCRIPTION: This method checks if a user is a member of a specified user group. It takes the group name or ID as a parameter and returns a boolean indicating membership status.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modresource/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmodUser.isMember\n```\n\n----------------------------------------\n\nTITLE: ComboBox Grid Implementation\nDESCRIPTION: Example of implementing the Units ComboBox within a grid column configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n       {\n            header: _('unit')\n            ,dataIndex: 'unit'\n            ,sortable: false\n            ,width: 50\n            ,editor: { xtype: 'doodle-combo-units', renderer: true }\n        }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Scripts in MODX\nDESCRIPTION: Gets all registered JavaScript and HTML blocks from the MODX system and returns them as a string. This method is useful for collecting all client-side scripts that have been registered throughout the execution cycle.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getregisteredclientscripts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getRegisteredClientScripts ()\n```\n\nLANGUAGE: php\nCODE:\n```\n$scripts = $modx->getRegisteredClientScripts();\n```\n\n----------------------------------------\n\nTITLE: Sorting Resources Randomly in PHP\nDESCRIPTION: This code snippet demonstrates how to sort filtered resources randomly using the RAND() function within the MODX query syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n&sortby=`RAND()`\n```\n\n----------------------------------------\n\nTITLE: PHP Plugin for Automatic URL Addition to Anchors in MODX\nDESCRIPTION: A PHP plugin for MODX that automatically prepends the current resource's URL to anchor links. This plugin should be assigned to the 'OnWebPagePrerender' event and helps resolve issues with named anchors when using friendly URLs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/named-anchor.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif($modx->resource->get('id') !=$modx->config['site_start']) {\n  $modx->resource->_output =str_replace('href=\"#','href=\"' .$modx->makeUrl($modx->resource->get('id')) .'#',$modx->resource->_output);\n}\n```\n\n----------------------------------------\n\nTITLE: Validation Error Message Placeholder\nDESCRIPTION: Demonstrates how to access the validation error message using a FormIt placeholder\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.validators.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!+fi.validation_error_message]]\n```\n\n----------------------------------------\n\nTITLE: Adding HTML and Inline JavaScript to HEAD in MODX\nDESCRIPTION: This snippet demonstrates using regClientStartupHTMLBlock to add custom HTML and inline JavaScript to the HEAD of a MODX page. This is useful for setting JS variables or adding meta tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/register-assets.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupHTMLBlock('\n<meta tag=\"here\" />\n<script type=\"text/javascript\">\nvar myCustomJSVar = 123;\n</script>');\n```\n\n----------------------------------------\n\nTITLE: Displaying Template Variables in MODX Templates\nDESCRIPTION: Example showing how to reference a Template Variable (TV) named 'bioPhoto' within a template. TVs use the same tag syntax as Resource fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/templates.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"photo\">\n[[*bioPhoto]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Gallery Snippet in MODX\nDESCRIPTION: This snippet demonstrates how to call the Gallery and GalleryAlbums snippets in MODX using the tag syntax. It shows how to specify the album or set limits on the display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Gallery? &album=`My Album`]]\n[[GalleryAlbums? &limit=`10`]]\n```\n\n----------------------------------------\n\nTITLE: getResourceField with Multiple Parameters\nDESCRIPTION: This snippet call uses multiple parameters: 'id', 'field', 'processTV', and 'default'. It fetches a template variable ('myTV') from the parent resource, processes its output, and if the TV is empty, outputs 'Sorry, no data available'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresourcefield/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[getResourceField? &id=`[[*parent]]` &field=`myTV` &processTV=`1` &default=`Sorry, no data available`]]\n```\n\n----------------------------------------\n\nTITLE: Allowing Login in OnBeforeManagerLogin Event in PHP\nDESCRIPTION: Code snippet showing how to allow the login process when using the OnBeforeManagerLogin event. By default, this event denies login unless specifically allowed with this code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforemanagerlogin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->event->output(true);\n// before Revo 2.3.0 you should use instead:\n$modx->event->_output = true;\n```\n\n----------------------------------------\n\nTITLE: Using UTM Tags with Fenom in MODX\nDESCRIPTION: This Fenom snippet shows how to implement UTM tags within the HTML structure using Fenom syntax. It provides examples for setting the page title and H1 header with default values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/utm-tags-for-modx/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<head>\n    <title>{('title' | utm) ?: 'Default page title'}</title>\n</head>\n\n<body>\n    <h1>{('pagetitle' | utm) ?: 'Default H1 Header'}</h1>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Basic pdoNeighbors Usage in MODX\nDESCRIPTION: Basic implementation of pdoNeighbors snippet that displays neighbors based on menuindex.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoNeighbors.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[pdoNeighbors]]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Resource ID Retrieval with getResources\nDESCRIPTION: This snippet shows how to integrate 'aliasid' with the getResources call in MODX to dynamically retrieve and use Resource IDs by alias rather than static numeric IDs in different contexts. This ensures consistent functionality across multiple site setups that may share structure but have unique content. This setup requires the proper alias to be used for correct resource retrieval.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/aliasid/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources? &parents=`[[aliasid?&alias=`events/`]]` &tpl=`eventListTPL`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring ResetPassword Snippet in MODX\nDESCRIPTION: This PHP snippet demonstrates the configuration of the ResetPassword snippet within a MODX resource. It specifies the resource ID where the login interface is located, allowing proper redirection after password reset confirmation. Ensure the correct resource ID is provided for redirections.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.forgotpassword.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!ResetPassword? &loginResourceId=`72`]]\n```\n\n----------------------------------------\n\nTITLE: Using MODX Lexicon Tag for Translated Messages (MODX Revolution)\nDESCRIPTION: Demonstrates the use of the [[%translated_message]] syntax to display translated messages, including additional parameters for topic, namespace, and language.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n[[!%setting_emailsender? &topic=`setting` &namespace=`core` &language=`en`]]\n```\n\n----------------------------------------\n\nTITLE: Rendering Target Groups with bdTargets Snippet in MODX\nDESCRIPTION: The bdTargets snippet is used to render target groups in an unordered list format. It accepts several properties to control the output, including the limit of results, offset, sorting field, and direction. The snippet handles placeholders like 'id', 'name', and 'sortorder', and uses templates for wrapping the entire result set and individual items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdtargets.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<h2>Target Groups</h2>\n<ul>\n    [[+wrapper]]\n</ul>\n```\n\nLANGUAGE: php\nCODE:\n```\n<li>[[+name]]</li>\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination with getPage and renderResources in MODX (PHP)\nDESCRIPTION: Demonstrates how to combine getPage with renderResources to create paginated lists of resources, including pagination navigation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage?\n   &elementClass=`modSnippet`\n   &element=`renderResources`\n\n   &parents=`17`\n   &depth=`2`\n   &limit=`10`\n   &pageVarKey=`page`\n\n   &tpl=`blogListPost`\n]]\n<div class=\"paging\">\n<ul class=\"pageList\">\n  [[!+page.nav]]\n</ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Facebook Photos Output Example in PHP/HTML\nDESCRIPTION: Example of the HTML output generated by the getFacebookPhotos snippet when using default templates, showing album titles, creation dates, and thumbnails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookphotos.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<h2><a href=\"http://www.facebook.com/album.php?fbid=437577137979&id=19110642979&aid=235059\">Profile Pictures</a> <span class=\"smalldate\">(1 photos, created on 12/09/2010)</span></h2>\n<div class=\"gfp-photos-wrapper\">\n    <ul>\n        <li class=\"gfp-photo\">\n    <img src=\"http://photos-a.ak.fbcdn.net/hphotos-ak-snc6/179529_10150898281902980_465676445_t.jpg\" width=\"75\" height=\"75\" />\n</li>\n\n    </ul>\n</div>\n<br />\n\n\n<h2><a href=\"http://www.facebook.com/album.php?fbid=10150883337702980&id=19110642979&aid=434455\">CMS Expo 2012</a> <span class=\"smalldate\">(33 photos, created on 12/05/2012)</span></h2>\n<div class=\"gfp-photos-wrapper\">\n    <ul>\n        <li class=\"gfp-photo\">\n    <img src=\"http://photos-c.ak.fbcdn.net/hphotos-ak-ash3/529915_10150883341757980_1041537877_t.jpg\" width=\"75\" height=\"56\" />\n</li>\n\n<li class=\"gfp-photo\">\n    <img src=\"http://photos-d.ak.fbcdn.net/hphotos-ak-ash3/537753_10150883341637980_1323647473_t.jpg\" width=\"75\" height=\"56\" />\n</li>\n<!-- ... -->\n<li class=\"gfp-photo\">\n    <img src=\"http://photos-c.ak.fbcdn.net/hphotos-ak-ash3/534903_10150883337842980_1414876671_t.jpg\" width=\"75\" height=\"50\" />\n</li>\n\n    </ul>\n</div>\n<!-- ... -->\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Navigation with Anchors in HTML for MODX FormIt\nDESCRIPTION: This code snippet demonstrates how to create a form that jumps to a specific section (identified by an anchor) when there are validation errors. It uses MODX's dynamic ID placeholder and an HTML anchor in the form's action attribute.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/form-and-anchors.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"[[~[[*id]]]]#message\" method=\"post\" class=\"form\">\n<div id=\"message\">\n... Your message content here ...\n</div>\n... Your input fields here ...\n</form>\n```\n\n----------------------------------------\n\nTITLE: Displaying comments from a specific thread with character limit using QuipRss\nDESCRIPTION: This example shows how to get the latest comments in thread \"thread32\", with a body limit of 100 characters. The `type` is set to `thread`, the `thread` is set to `thread32` and `bodyLimit` is set to `100`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiprss.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\n[[!QuipRss? &type=`thread` &thread=`thread32` &bodyLimit=`100`]]\n\n```\n\n----------------------------------------\n\nTITLE: Creating Registration Form in HTML\nDESCRIPTION: This HTML form template facilitates user registration with fields for username, password, and email. It handles input validation errors and uses MODX discuss-specific placeholders like [[%discuss.username]] and [[+error.username]]. Key functionalities include error handling and optional reCAPTCHA integration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/register.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"dis-form dis-register\" action=\"[[~[[*id]]]]register\" method=\"post\">\n    <h2>[[%discuss.register? &namespace=`discuss` &topic=`web`]]</h2>\n    <span class=\"error\">[[+error.spam_empty]]</span>\n    <input type=\"hidden\" name=\"spam_empty\" value=\"\" />\n    <label for=\"dis-register-username\">[[%discuss.username]]:\n        <span class=\"error\">[[+error.username]]</span>\n    </label>\n    <input type=\"text\" name=\"username\" id=\"dis-register-username\" value=\"[[+username]]\" />\n    <label for=\"dis-register-password\">[[%discuss.password]]:\n        <span class=\"error\">[[+error.password]]</span>\n    </label>\n    <input type=\"password\" name=\"password\" id=\"dis-register-password\" value=\"[[+password]]\" />\n    <label for=\"dis-register-password-confirm\">[[%discuss.password_confirm]]:\n        <span class=\"error\">[[+error.password_confirm]]</span>\n    </label>\n    <input type=\"password\" name=\"password_confirm\" id=\"dis-register-password-confirm\" value=\"[[+password]]\" />\n    <label for=\"dis-register-email\">[[%discuss.email]]:\n        <span class=\"error\">[[+error.email]]</span>\n    </label>\n    <input type=\"text\" name=\"email\" id=\"dis-register-email\" value=\"[[+email]]\" />\n    <label for=\"dis-register-show-email\">[[%discuss.show_email]]:\n        <span class=\"error\">[[+error.show_email]]</span>\n    </label>\n    <input type=\"checkbox\" name=\"show_email\" id=\"dis-register-show-email\" value=\"1\" [[+show_email]] />\n\n    <div style=\"padding-left: 140px; clear:both;\">\n    [[+recaptcha_html]]\n    [[+error.recaptcha]]\n    </div>\n\n    <br class=\"clearfix\" />\n    [[+discuss.login_error]]\n    <div class=\"dis-form-buttons\">\n    <input type=\"submit\" class=\"dis-action-btn\" name=\"dis-register-btn\" value=\"[[%discuss.register]]\" />\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating Enhanced Prompt with Multiline Input\nDESCRIPTION: Shows how to create an advanced prompt with multiline input, pre-filled value, and custom styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\nExt.onReady(function() {\n    var myCallback = function(btn, text) {\n        console.info('You pressed ' + btn);\n        if (text) {\n            console.info('You entered '+ text);\n        }\n    }\n    Ext.MessageBox.show({\n        title : 'Confirm Your Name',\n        msg : 'Please correct any misspellings below:',\n        width : 300,\n        multiline: 20,\n        value : 'Yodah',\n        buttons : Ext.MessageBox.YESNOCANCEL,\n        fn : myCallback,\n        icon : Ext.MessageBox.WARNING\n    });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: jQuery Tabs with getResources for Dynamic Content\nDESCRIPTION: This code snippet integrates jQuery tabs with the getResources snippet to dynamically generate tab content based on MODX resources. It sets parameters such as `parents`, `depth`, `tpl`, `includeContent`, and `includeTVs` to configure the getResources snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\\\"tabs\\\">\n  <ul>\n    [[getResources? &parents=`123` &depth=`1` &tpl=`myRowTpl` &includeContent=`1` &includeTVs=`1`]]\n  </ul>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: MODX URL Generation with Query Parameters\nDESCRIPTION: Examples showing how to generate URLs with query parameters using both array and string formats.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.makeurl.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$url = $modx->makeUrl(25, '', array('hello' => 'world'));\n$url = $modx->makeUrl(25, '', 'hello=world');\n```\n\n----------------------------------------\n\nTITLE: Management URL Placeholders\nDESCRIPTION: Demonstrates usage of subscription management and unsubscribe URL placeholders\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eletters/eletters.templates.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nManage your subscriptions: [[+manageSubscriptionsUrl]]\nUnsubscribe: [[+unsubscribeUrl]]\n```\n\n----------------------------------------\n\nTITLE: Handling Password Reset with MODX ResetPassword Snippet\nDESCRIPTION: This snippet call handles the actual password reset process when a user clicks the link in their reset email. It specifies the login page to redirect to after reset.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!ResetPassword? &loginResourceId=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring FormIt Snippet Call with Custom Hook in PHP\nDESCRIPTION: This snippet shows how to include a custom hook named 'customhook' in the FormIt call. The hook order is important, as hooks are executed in the order listed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.custom-hook.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n   &hooks=`spam,customhook,email,redirect`\n   &emailTpl=`MyEmailChunk`\n   &emailTo=`user@example.com`\n   &redirectTo=`123`\n   &validate=`name:required,\n      email:email:required,\n      subject:required,\n      text:required:stripTags,\n]]\n```\n\n----------------------------------------\n\nTITLE: Backup Apache Configuration File\nDESCRIPTION: This shell command creates a backup of the Apache main configuration file (`httpd.conf`). This is a crucial step before making any changes to the configuration, allowing to revert if something goes wrong.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd /usr/local/apache/conf\ncp -p httpd.conf httpd.conf.backup\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies Implementation in PHP\nDESCRIPTION: Example showing how to implement package dependencies requiring FormIt 2.2 or higher using the 'requires' attribute in the package attributes array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/dependencies.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$builder->setPackageAttributes(array(\n    'license' => file_get_contents($sources['docs'].'license.txt'),\n    'readme' => file_get_contents($sources['docs'].'readme.txt'),\n    'changelog' => file_get_contents($sources['docs'].'changelog.txt'),\n    'setup-options' => array(\n        'source' => $sources['build'].'setup.options.php',\n    ),\n    'requires' => array(\n        'formit' => '>=2.2.0',\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Complete Slider Implementation with Dependencies and Event Handlers\nDESCRIPTION: Full implementation of the slider component including required CSS/JS dependencies, jQuery initialization, and Fred event handlers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/js_events.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link\n    rel=\"stylesheet\"\n    href=\"//unpkg.com/owl.carousel/dist/assets/owl.carousel.min.css\"\n/>\n<link\n    rel=\"stylesheet\"\n    href=\"//unpkg.com/owl.carousel/dist/assets/owl.theme.default.min.css\"\n/>\n<script src=\"//unpkg.com/jquery/dist/jquery.js\"></script>\n<script src=\"//unpkg.com/owl.carousel/dist/owl.carousel.js\"></script>\n<script>\n    var $owl = function() {\n        $(\".owl-carousel\").owlCarousel({\n            loop: true,\n            margin: 10,\n            nav: true,\n            items: 1\n        });\n    };\n    document.body.addEventListener(\"FredElementDrop\", function() {\n        $owl();\n    });\n    document.body.addEventListener(\"FredElementSettingChange\", function() {\n        $owl();\n    });\n    $(document).ready(function() {\n        $owl();\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Logging Resource ID Before Cache Save in MODX Plugin\nDESCRIPTION: A MODX plugin that demonstrates using the OnBeforeSaveWebPageCache event to log the ID of the resource being cached to the error log. The event fires only for cacheable resources after loading and before caching.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforesavewebpagecache.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeSaveWebPageCache':\n        $res = $modx->resource->get('id');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'Resource with id '.$res.' booted successfully');\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Threaded Comments with Quip in MODX Revolution\nDESCRIPTION: This snippet shows the basic setup for enabling threaded comments using Quip in MODX Revolution. It should be placed on the page specified by the replyResourceId in the main Quip call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipReply]]\n<br />\n[[!Quip]]\n```\n\n----------------------------------------\n\nTITLE: xPDOQuery leftJoin Method Syntax\nDESCRIPTION: Method signature for the leftJoin function showing required and optional parameters. The method adds a LEFT JOIN clause to an xPDO query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.leftjoin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid leftJoin ( $class, [ $alias = ''], [ $conditions = array ()], [ $conjunction = xPDOQuery::SQL_AND], [ $binding = null], [ $condGroup = 0])\n```\n\n----------------------------------------\n\nTITLE: Creating XML Sitemap Entry Template Chunk in MODX\nDESCRIPTION: A template chunk named 'google-sitemap-tpl' that formats each resource as an XML sitemap entry with location, last modified date, priority, and change frequency values. The template uses MODX placeholders to populate resource data and template variable values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/getresources.examples/google-xml-sitemap.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<url>\n  <loc>[[~[[+id]]? &scheme=`full`]]</loc>\n  <lastmod>[[+editedon]]</lastmod>\n  <priority>[[+tv.google-site-map-priority]]</priority>\n  <changefreq>[[+tv.change-frequency]]</changefreq>\n</url>?\n```\n\n----------------------------------------\n\nTITLE: Rendering Single Event HTML Template\nDESCRIPTION: A MODX chunk template for displaying event details with dynamic placeholders that can be populated from resource or custom event data\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.tplevent2.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <span class=\"num\"><b>[[+ec.num]].</b></span>\n    <span class=\"eventdate\">[[+ec.date]]</span>\n    <span class=\"link\"><a href=\"[[+ec.url]]\">[[+ec.longtitle:default=`[[+ec.pagetitle]]`]]</a></span>\n    <span class=\"notice\">[[+ec.introtext]]</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Counting Phone Records in MODX Extended User\nDESCRIPTION: Example of how to count related phone records for a user in the extended user system using MODX's getCount method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-users.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    $this->modx->getCount('extPhones', array('user' => $this->userID));\n    $this->modx->getCount('extPhones');\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Path with FileLister in MODX Revolution (HTML)\nDESCRIPTION: This chunk is used to display the directory path in FileLister. It creates a linked directory name using the current page ID, navigation key, and directory information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/filelister/pathtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*id]]]]?[[+navKey]]=[[+key]]\">[[+dir]]</a>[[+separator]]\n```\n\n----------------------------------------\n\nTITLE: Removing User Session Context in MODX (PHP)\nDESCRIPTION: This method removes a user session context in MODX. It takes a string or array parameter representing the context(s) to remove. The method doesn't return any value (void).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.removesessioncontext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid removeSessionContext (string|array $context)\n```\n\n----------------------------------------\n\nTITLE: Basic siblingNav Navigation Snippet Call\nDESCRIPTION: Minimum configuration for generating sibling navigation with all available placeholders. Displays first, previous, current, next, and last resource links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siblingnav/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!siblingNav]]\n[[+sn.first]][[+sn.prev]][[+sn.prevlinks]][[+sn.self]][[+sn.nextlinks]][[+sn.next]][[+sn.last]]\n```\n\n----------------------------------------\n\nTITLE: Resizing, Cropping, and Grayscale Conversion with MODX Revolution - PHP\nDESCRIPTION: This snippet demonstrates the use of the RezImgCrop filter to not only resize and crop images but also convert them into grayscale. This is useful for maintaining a consistent visual theme across images.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`r-150x,c-150x75,g-`]]\n```\n\n----------------------------------------\n\nTITLE: Prepending Content with Ext JS\nDESCRIPTION: Demonstrates how to insert content at the beginning of an element using the insertFirst() method\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/4.-ext-js-tutorial-manipulating-nodes.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nExt.onReady(function() {\n    var myDiv1 = Ext.get('div1');\n\n    myDiv1.insertFirst({\n        tag  : 'div',\n        html : 'Child inserted at node 0',\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering by TV Values in pdoResources\nDESCRIPTION: Shows how to filter resources by TV values using pdoResources snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoFetch.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &parents=`0`\n    &includeTVs=`tv1`\n    &where=`{\"tv1\":\"my_value\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Accessing System Settings in MODx JS\nDESCRIPTION: Shows how to access MODX system settings through the MODx.config object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tpl = MODx.config.default_template;\n```\n\n----------------------------------------\n\nTITLE: Creating Parent Page Link with MODX Parent Tag (HTML)\nDESCRIPTION: Shows how to use the [[*parent]] tag in combination with the link syntax to create a 'Back to Parent' link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*parent]]]]\">Volver arriba</a>\n```\n\n----------------------------------------\n\nTITLE: Outer Template Chunk for CamperManagement Slideshow\nDESCRIPTION: A minimal template chunk named 'cmHomeOuter' that only outputs the inner content without additional wrapping elements. This replaces the default unordered list structure typically used by cmCampers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcampers-snippet.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[+items]]\n```\n\n----------------------------------------\n\nTITLE: Loading Ext JS Dependencies\nDESCRIPTION: Required CSS and JavaScript files that need to be included to enable Ext JS functionality in MODX manager interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/5.-ext-js-tutorial-panels.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n<script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n<script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Primary Key Type Example\nDESCRIPTION: Example showing how to get the primary key type of a MODX Resource object. The Resource table uses an auto-incrementing integer ID field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getpktype.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$resource = $xpdo->getObject('Resource',1);\necho $resource->getPKType();\n// prints \"integer\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up SimpleSearch Faceted Search\nDESCRIPTION: This snippet configures SimpleSearch with placeholders and facet limits. It sets up a search interface including a custom people facet for user profiles, using MODX's templating system.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch/faceted-search-through-posthooks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch?\n    &toPlaceholder=`simplesearch.results`\n    &perPage=`10`\n    &postHooks=`PeopleFacetHook`\n    &facetLimit=`5`\n]]\n\n<h2>Search Results</h2>\n[[+simplesearch.results]]\n\n<br />\n<h2>People Results ([[+simplesearch.people.total]])</h2>\n<ol>[[+simplesearch.people.results]]</ol>\n\n<a href=\"[[~123]]?facet=people&search=[[!+simplesearch.query]]\">Get more Peoples...</a>\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch?\n    &toPlaceholder=`simplesearch.results`\n    &perPage=`20`\n    &postHooks=`PeopleFacetHook`\n    &facetLimit=`5`\n]]\n\n<h2>Search Results</h2>\n[[+simplesearch.results]]\n```\n\n----------------------------------------\n\nTITLE: pdoMenu with Permissions Check\nDESCRIPTION: Example of pdoMenu usage with permission checking enabled for menu items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoMenu?\n    &parents=`0`\n    &checkPermissions=`list`\n]]\n```\n\n----------------------------------------\n\nTITLE: Customizing Event Display with MODX eventsCalendar2 Parameters PHP\nDESCRIPTION: This snippet customizes the event display using the eventsCalendar2 snippet by specifying parent resources and a TV date source for events. The snippet uncaches with specified parents and date sources for dynamic event loading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!eventsCalendar2\n  &parents=`4,11`\n  &dateSource=`date_of_event`\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Template Variable Output in MODX\nDESCRIPTION: Demonstrates how to output a subsection template variable using a placeholder in MODX content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/step-by-step.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nViewing: [[+subsection]]\n```\n\n----------------------------------------\n\nTITLE: Fenom Inline Templating with Basic Output in MODX - PHP\nDESCRIPTION: This snippet replicates the previous example using Fenom syntax for inline templating, showcasing the equivalent output format. It retrieves and displays the same resource fields directly with placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n&tpl=`@INLINE <p>{$id}. {$pagetitle} {$createdon}</p>`\n```\n\n----------------------------------------\n\nTITLE: Using getResources Values in MIGX Calls\nDESCRIPTION: Demonstration of passing getResources values to a MIGX getImageList call for use in the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.frontend-usage.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n[[getImageList?\n    &tvname=`myMIGXtv`\n    &tpl=`thumbTpl2`\n    &docid=`[[+id]]`\n    &limit=`1`\n    &pagetitle=`[[+pagetitle]]`\n    &originalResourceId=`[[+id]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Read-Only LexRating Display in MODX Revolution\nDESCRIPTION: Implementation of LexRating in read-only mode to display existing ratings without allowing new votes. This configuration is useful for showing ratings to non-members or in contexts where voting isn't allowed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lexrating/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[LexRating?\n&name=`[[*pagetitle]]`\n&group=`articles`\n&initialAjax=`0`\n&readOnly=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Sending Single Message with Kill Option\nDESCRIPTION: Example of sending a single message with the kill option, which stops message consumers from reading further messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->registry->food->send(\"/beer/\", \"It's Miller Time!\", array('kill' => true));\n```\n\n----------------------------------------\n\nTITLE: Basic QuipLatestComments Usage\nDESCRIPTION: Retrieve the latest comments using default settings without any specific parameters\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiplatestcomments.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipLatestComments]]\n```\n\n----------------------------------------\n\nTITLE: Setting up a Template with Dropzone in HTML\nDESCRIPTION: This snippet demonstrates how to set up a dropzone in a MODX Template by using the data-fred-dropzone attribute to define where content should be rendered. It is necessary for integrating with Fred's functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/themes.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div data-fred-dropzone=\"content\">\n    [[*content]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Context and User Operations in MODX\nDESCRIPTION: Context checking and user group membership operations migration from Evolution to Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// Evolution\nif ($modX->isFrontend()) { }\n\n// Revolution\nif ($modX->context->get('key') == 'web') { }\n\n// Evolution\n$isMember = $modX->isMemberOfWebGroup();\n\n// Revolution\n$isMember = $modX->user->isMember();\n// or\n$isMember = $modUser->isMember();\n```\n\n----------------------------------------\n\nTITLE: Displaying a Tag Cloud with Comma-Separated Tags using tagLister in PHP\nDESCRIPTION: This example uses tagLister to display a list of tags specified in the 'tags' TV, which are separated by commas. The links will go to the home page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!tagLister? &tv=`tags`]]\n```\n\n----------------------------------------\n\nTITLE: Gallery Container Custom Chunk\nDESCRIPTION: Creates a simple unordered list container for gallery thumbnails with a custom CSS class\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/sekfancybox-and-gallery.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<ul class=\"image-container\">\n[[+thumbnails]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Debugging Newsletter Reader with Placeholder Dump\nDESCRIPTION: Modified reader snippet call that outputs all available placeholders for debugging purposes. Useful for checking what data is available to customize the newsletter display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!virtuNewsletter.reader? &toArray=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Preventing Events for a Specific Plugin in PHP\nDESCRIPTION: Example showing how to prevent events from firing on 'OnLoadDocument' specifically for the plugin with ID 2.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.removeeventlistener.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->removeEventListener('OnLoadDocument', 2);\n```\n\n----------------------------------------\n\nTITLE: GetResources Inline Template - PHP\nDESCRIPTION: Uses an inline template definition instead of a chunk reference.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &tpl=`@INLINE <li title=\"[[+longtitle]]\">[[+pagetitle]]</li>`]]\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Manager Theme Scripts in MODX\nDESCRIPTION: Modifies the script reference in custom MODX manager themes to integrate the HTTP_MODAUTH token after upgrading to versions 2.8.2 or 2.8.3. This change is necessary due to enhanced security in the new versions, which requires the proper authentication token for configuration script loading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/2.8.2.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{$_config.connectors_url}modx.config.js.php?action={$smarty.get.a|default|htmlspecialchars}{if $_ctx}&wctx={$_ctx}{/if}\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{$_config.connectors_url}modx.config.js.php?action={$smarty.get.a|default|htmlspecialchars}{if $_ctx}&wctx={$_ctx}{/if}&HTTP_MODAUTH={$_authToken|default|htmlspecialchars}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Random Gallery Images with HTML Template\nDESCRIPTION: Renders published images in random order using a custom HTML template that wraps each image in an img tag\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!migxLoopCollection?\n  &packageName=`mygallery`\n  &classname=`myGallery`\n  &sortConfig=`[{\"sortby\":\"RAND()\"}]`\n  &where=`{\"resource_id\":\"[[*id]]\",\"published\":\"1\"}`\n  &tpl=`@CODE:<img src=\"[[+image]]\" />`\n]]\n```\n\n----------------------------------------\n\nTITLE: Querying Resource ID with aliasid in MODX Revolution\nDESCRIPTION: Demonstrates how to use the 'aliasid' MODX Revolution Extra to dynamically query for a Resource ID based on its alias within the current context. It eliminates the need for hardcoded Resource IDs in multiple-context installations. Dependencies include MODX Revolution 2.2.x+ and PHP 5.3. The expected input is the alias of the resource, and the output is the corresponding Resource ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/aliasid/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[aliasid? &alias=`events/`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring HybridAuth API Keys in JSON (MODX)\nDESCRIPTION: JSON configuration for setting up API keys in MODX system settings for HybridAuth. This example shows how to structure the key and secret for a Twitter application.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hybridauth/index.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"key\":\"your key from twitter\",\"secret\":\"secret from twitter\"}\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for MODX Fred Blueprints\nDESCRIPTION: Structured documentation explaining the concept, usage, and creation of Blueprints in MODX Fred, including both full-page and partial Blueprint types.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/blueprints.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Blueprints\"\n---\n\nBlueprints are pre-designed content sections or even full pages of content. These can be used as starting points for structured content like landing pages, product pages, etc. Blueprints function as a \"replace the placeholders\" way to create content. They are a collection of one or more Elements with sample content and images in place.\n\nYou can also use Blueprints as demo pages which theme users can use to start a site with complete layouts made up of any combination of content and Elements.\n\nBlueprints are organized into user-determined categories such as Headers, Landing Pages, Galleries, etc.\n\n## Using Blueprints\n\nLike Elements, find a Blueprint you wish to use and drag-and-drop it into a Dropzone on a Fred-enabled page.\n\n## Creating Blueprints\n\nUsers with permissions to do so can save Blueprints and share them with others or keep them private so only their users can see them.\n\nUse cases for private Blueprints include testing by theme creators (since they won't be included in exported Themes), saving specific combinations and settings for Elements that _only_ you will use, and end users currating frequently used Blueprints acros categories into a single location.\n\nA more advanced use case is overriding default settings of commonly used Elements to match frequently changed settings like changing margins, padding or text-alignment.\n\n### Blueprint Screenshots\n\nWhen creating a Blueprint, it will generate a screenshot image for you. However, you may wish to manually create your own screenshot as the libary used to build screen captures does not understand all CSS properties.\n\n### Full-page Blueprints\n\nComplete Blueprints are a copy of an entire page of content. You create these from the front-end when Fred is enabled.\n\nTo create a complete Blueprint, click the Blueprints icon in the Fred sidebar, then choose an existing category from the top or create a new category for your Blueprints. Give your Blueprint a name and save\n\n### Partial Blueprints\n\nPartial Blueprints are made from the overlapping, rounded-corner squares icon that appears when hovering/focusing an Element in the front-end. Click this Blueprint icon, choose a category, give it a name, and save.\n```\n\n----------------------------------------\n\nTITLE: Using prettyNumbers as a Standalone Snippet in MODX\nDESCRIPTION: Examples of using prettyNumbers as a standalone snippet with an input parameter that can be either a placeholder or another snippet call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.prettynumbers.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[prettyNumbers? &input=`[[+count]]`]]\n[[prettyNumbers? &input=`[[!getFacebookShares? &url=`http://google.com/`]]`]]\n```\n\n----------------------------------------\n\nTITLE: SimpleSearchForm HTML Template\nDESCRIPTION: The code defines an HTML form structure used with the SimpleSearchForm snippet. Here, 'my_custom_search_field' is the input field's name and aligns with the SimpleSearch snippet's searchIndex parameter. It illustrates how to specify form actions and methods effectively using template placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.simplesearchform.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"my_id\" action=\"[[~[[+landing:default=`[[*id]]`]]]]\" method=\"[[+method:default=`get`]]\">\n    <input id=\"searchField\" class=\"my_class\" type=\"text\" name=\"my_custom_search_field\" value=\"[[+searchValue:default=`Search the site`]]\"/>\n    <input id=\"searchIcon\" class=\"utilityButton\" type=\"image\" alt=\"Search\" src=\"/assets/templates/my/images/searchButton.png\">\n    <input type=\"hidden\" name=\"id\" value=\"[[+landing:default=[[*id]]]]\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: MODX System Setting Definition - allow_forward_across_contexts\nDESCRIPTION: Defines the allow_forward_across_contexts system setting which controls whether Symlinks and modX::sendForward() API calls can forward requests to Resources across different Contexts in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/allow_forward_across_contexts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Allow Forwarding Across Contexts\n**Type**: Yes/No\n**Default**: No\n**Available In:** 2.1+\n```\n\n----------------------------------------\n\nTITLE: Default Page Navigation Templates\nDESCRIPTION: These are the default template properties that can be customized for controlling the look of the page navigation. These values are used to generate the HTML for the navigation elements, such as first, previous, next, and last page links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getpage/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n`[[+first]][[+prev]][[+pages]][[+next]][[+last]]`\n```\n\nLANGUAGE: html\nCODE:\n```\n<li[[+classes]]><a[[+classes]][[+title]] href=\"[[+href]]\">[[+pageNo]]</a></li>\n```\n\nLANGUAGE: html\nCODE:\n```\n```<li[[+activeClasses]]><a[[+activeClasses:default=` class=\"active\"`]][[+title]] href=\"[[+href]]\">[[+pageNo]]</a></li>```\n```\n\nLANGUAGE: html\nCODE:\n```\n<li class=\"control\"><a[[+classes]][[+title]] href=\"[[+href]]\">First</a></li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<li class=\"control\"><a[[+classes]][[+title]] href=\"[[+href]]\">Last</a></li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<li class=\"control\"><a[[+classes]][[+title]] href=\"[[+href]]\"><<</a></li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<li class=\"control\"><a[[+classes]][[+title]] href=\"[[+href]]\">>></a></li>\n```\n\n----------------------------------------\n\nTITLE: Archive Listing with Parent Resources\nDESCRIPTION: Example showing how to display archive listings for resources under specific parent IDs, with results linking to a target page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/archivist/archivist/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Archivist? &target=`123` &parents=`2,4,6`]]\n```\n\n----------------------------------------\n\nTITLE: Single Event Template with Event Details\nDESCRIPTION: HTML template for displaying detailed information about a single event, including event name, dates, description, location, and website link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventsx/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n[[!evxEvent?]]\n<html>\n    <head>\n        <title>[[++site_name]] - [[*pagetitle]]</title>\n        <base href=\"[[++site_url]]\" />\n    </head>\n    <body>\n        <p>Name: [[+event.name]]</p>\n        <p>Start date: [[+event.startdate:strtotime:date=`%d-%m-%Y`]]</p>\n        <p>End date: [[+event.enddate:strtotime:date=`%d-%m-%Y`]]</p>\n        [[+event.description]]<!-- Description is a TinyMCE field by default, so no <p> here -->\n        <h2>Location</h2>\n        <p>\n            [[+event.location]]<br />\n            [[+event.street]]<br />\n            [[+event.pc]]<br />\n            [[+event.city]]<br />\n            [[+event.region]]<br />\n            [[+event.country]]\n        </p>\n        <p><a href=\"[[+event.website]]\">Visit website</a></p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Hook for UpdateProfile in PHP\nDESCRIPTION: Configures a post-hook for the UpdateProfile call in MODX, enabling additional functionality to be executed after the profile is updated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n&postHooks=`postHook.DiscussUpdateProfile`\n```\n\n----------------------------------------\n\nTITLE: pdoTitle Implementation\nDESCRIPTION: Shows how to implement pdoTitle for generating page titles with site name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<title>[[!pdoTitle]] / [[++site_name]]</title>\n```\n\n----------------------------------------\n\nTITLE: Managing User Settings via sekUserGalleries.users.gallery.manage\nDESCRIPTION: This snippet allows users to modify their gallery settings. Access is contingent on user login status and permission to manage their own gallery.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.users.gallery.manage]\n```\n\n----------------------------------------\n\nTITLE: Plugin for Custom TV Paths in MODX\nDESCRIPTION: This plugin, assigned to specific TV-related events, instructs MODX to look for custom TV files within defined directories. These directories are set using the 'core_path' option and the 'components/ourtvs/' path. The plugin handles both input and output rendering, along with loading custom properties for both.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-tvs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$corePath = $modx->getOption('core_path',null,MODX_CORE_PATH).'components/ourtvs/';\nswitch ($modx->event->name) {\n    case 'OnTVInputRenderList':\n        $modx->event->output($corePath.'tv/input/');\n        break;\n    case 'OnTVOutputRenderList':\n        $modx->event->output($corePath.'tv/output/');\n        break;\n    case 'OnTVInputPropertiesList':\n        $modx->event->output($corePath.'tv/inputoptions/');\n        break;\n    case 'OnTVOutputRenderPropertiesList':\n        $modx->event->output($corePath.'tv/properties/');\n        break;\n    case 'OnManagerPageBeforeRender':\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Template Chunks for pdoMenu\nDESCRIPTION: Default template chunks used for rendering the outer menu wrapper and individual menu items in pdoMenu.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoMenu.md#2025-04-17_snippet_0\n\nLANGUAGE: modx\nCODE:\n```\n@INLINE <ul[[+classes]]>[[+wrapper]]</ul>\n```\n\nLANGUAGE: modx\nCODE:\n```\n@INLINE <li[[+classes]]><a href=\"[[+link]]\" [[+attributes]]>[[+menutitle]]</a>[[+wrapper]]</li>\n```\n\nLANGUAGE: modx\nCODE:\n```\n@INLINE <h2[[+classes]]>[[+menutitle]]</h2>[[+wrapper]]\n```\n\n----------------------------------------\n\nTITLE: Use Filter to Dynamically Change Product ID in MODX\nDESCRIPTION: This PHP snippet employs a filter to dynamically change the product ID by replacing placeholders with actual IDs. It's useful for customizing the display of products on the product page by updating the ID in real-time based on the current context. The replace filter is used to achieve the dynamic replacement.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/shopkeeper/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[*param1:replace=`[[+id]]==[[*id]]`]]\n```\n\n----------------------------------------\n\nTITLE: modResourceInterface Definition\nDESCRIPTION: Interface defining required methods for Custom Resource Classes\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ninterface modResourceInterface {\n    public static function getControllerPath(xPDO &$modx);\n    public function getContextMenuText();\n    public function getResourceTypeName();\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'or' in MODX\nDESCRIPTION: Demonstrates the usage of 'or' modifier for conditional output. It checks if the number of books is either 5 or 6 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:is=`5`:or:is=`6`:then=`Есть 5 или 6 книг!` :else=`Не уверен, сколько книг`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Package Attributes Setup in PHP\nDESCRIPTION: Example of basic package attributes setup including license, readme, changelog, and setup options in a MODX build script.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/dependencies.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$builder->setPackageAttributes(array(\n    'license' => file_get_contents($sources['docs'].'license.txt'),\n    'readme' => file_get_contents($sources['docs'].'readme.txt'),\n    'changelog' => file_get_contents($sources['docs'].'changelog.txt'),\n    'setup-options' => array(\n        'source' => $sources['build'].'setup.options.php',\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Helper Functionality for Album Items via sekUserGalleries.album.items.helper\nDESCRIPTION: This helper snippet performs all the necessary operations for the album items management snippet, streamlining the process of managing items within albums.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.album.items.helper]\n```\n\n----------------------------------------\n\nTITLE: Using FormItLoadSavedForm Prehook in FormIt Snippet (PHP)\nDESCRIPTION: This snippet demonstrates how to use the FormItLoadSavedForm prehook in a FormIt snippet call. It loads saved form data and allows updating. The form is accessed via a custom URL parameter containing the form hash.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/prehooks.formitloadsavedform.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &preHooks=`FormItLoadSavedForm`\n    &updateSavedForm=`true`\n    &savedFormHashKeyField=`yourCustomGetParameter`\n    &hooks=`FormItSaveForm`\n    &formFields=`name,address,zipCode,town` // parameter of FormItSaveForm\n]]\n// open the page in the browser\n// http://your-domain.com/path/to/form?yourCustomGetParameter=<FormHashFromFormItCMP>\n```\n\n----------------------------------------\n\nTITLE: Enhanced Weather Snippet with Location Parameter\nDESCRIPTION: An updated version of the getWeather snippet that accepts a location parameter. This implementation demonstrates how to handle snippet properties in MODX to create more flexible, reusable code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Get properties\n$location = $modx->getOption('location', $scriptProperties);\n\n// Stash API URL\n$jsonurl = \"https://samples.openweathermap.org/data/2.5/weather?q=\" . $location . \"&appid=b6907d289e10d714a6e88b30761fae22\";\n\n// Call API\n$json = file_get_contents($jsonurl);\n\n// Stash results\n$weather = json_decode($json);\n\n// Return weather description\nreturn $weather->weather[0]->main;\n```\n\n----------------------------------------\n\nTITLE: Creating Comment Form for QuipReply in HTML\nDESCRIPTION: This snippet generates the HTML form used to add comments in the QuipReply system. It includes fields for the user's name, email, website, comment, and also handles reCAPTCHA if enabled. The form is designed with several placeholders for dynamic content, ensuring that it integrates seamlessly into the QuipReply framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipreply/tpladdcomment.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<form\\n    id=\\\"quip-add-comment-[[+idprefix]]\\\"\\n    action=\\\"[[+url]]#quip-comment-preview-box-[[+idprefix]]\\\"\\n    method=\\\"post\\\"\\n>\\n    <div class=\\\"quip-comment quip-add-comment\\\">\\n        <input type=\\\"hidden\\\" name=\\\"nospam\\\" value=\\\"\\\" />\\n        <input type=\\\"hidden\\\" name=\\\"thread\\\" value=\\\"[[+thread]]\\\" />\\n        <input type=\\\"hidden\\\" name=\\\"parent\\\" value=\\\"[[+parent]]\\\" />\\n        <input type=\\\"hidden\\\" name=\\\"auth_nonce\\\" value=\\\"[[+auth_nonce]]\\\" />\\n        <input type=\\\"hidden\\\" name=\\\"preview_mode\\\" value=\\\"[[+preview_mode]]\\\" />\\n\\n        <div class=\\\"quip-fld\\\">\\n            <label for=\\\"quip-comment-name-[[+idprefix]]\\\">[[%quip.name? &namespace=\\\"quip\\\" &topic=\\\"default\\\"]]:<span class=\\\"quip-error\\\">[[+error.name]]</span></label>\\n            <input type=\\\"text\\\" name=\\\"name\\\" id=\\\"quip-comment-name-[[+idprefix]]\\\" value=\\\"[[+name]]\\\" />\\n            <br />\\n        </div>\\n\\n        <div class=\\\"quip-fld\\\">\\n            <label for=\\\"quip-comment-email-[[+idprefix]]\\\">[[%quip.email]]:<span class=\\\"quip-error\\\">[[+error.email]]</span></label>\\n            <input type=\\\"text\\\" name=\\\"email\\\" id=\\\"quip-comment-email-[[+idprefix]]\\\" value=\\\"[[+email]]\\\" />\\n            <br />\\n        </div>\\n\\n        <div class=\\\"quip-fld\\\">\\n            <label for=\\\"quip-comment-website-[[+idprefix]]\\\">[[%quip.website]]:<span class=\\\"quip-error\\\">[[+error.website]]</span></label>\\n            <input type=\\\"text\\\" name=\\\"website\\\" id=\\\"quip-comment-website-[[+idprefix]]\\\" value=\\\"[[+website]]\\\" />\\n            <br />\\n        </div>\\n\\n        <div class=\\\"quip-fld\\\">\\n            <label for=\\\"quip-comment-notify-[[+idprefix]]\\\">[[%quip.notify_me]]:<span class=\\\"quip-error\\\">[[+error.notify]]</span></label>\\n            <input type=\\\"checkbox\\\" value=\\\"1\\\" name=\\\"notify\\\" id=\\\"quip-comment-notify-[[+idprefix]]\\\" [[+notify:if=\\\"[[+notify]]\\\":eq=\\\"1\\\":then=\\\"checked=\\\"checked\\\"\\\"]] />\\n            <br />\\n        </div>\\n\\n        <div class=\\\"quip-fld recaptcha\\\">\\n            [[+quip.recaptcha_html]]\\n            <span class=\\\"quip-error\\\">[[+error.recaptcha]]</span>\\n        </div>\\n\\n        <p>\\n            <span class=\\\"quip-allowed-tags\\\">[[%quip.allowed_tags? &tags=\\\"[[++quip.allowed_tags:htmlent]]\\\"]]</span>[[%quip.comment_add_new]]<span class=\\\"quip-error\\\">[[+error.comment]]</span>\\n        </p>\\n        <textarea name=\\\"comment\\\" id=\\\"quip-comment-box-[[+idprefix]]\\\" rows=\\\"5\\\">[[+comment]]</textarea>\\n\\n        <button type=\\\"submit\\\" name=\\\"[[+preview_action]]\\\" value=\\\"1\\\">\\n            [[%quip.preview]]\\n        </button>\\n        [[+can_post:is=\\\"1\\\":then=\\\"<button\\n            type=\\\"submit\\\"\\n            name=\\\"[[+post_action]]\\\"\\n            value=\\\"1\\\"\\n        >\\n            [[%quip.post]]</button>\\\"]]\\n\\n        <br class=\\\"clear\\\" />\\n    </div>\\n</form>\"}\n```\n\n----------------------------------------\n\nTITLE: Excluding Resources from Breadcrumb in PHP\nDESCRIPTION: Excludes specified resources from appearing in the breadcrumb by using the 'exclude' parameter with a comma-separated list of resource IDs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n[[BreadCrumb? &exclude=`23,135`]]\n```\n\n----------------------------------------\n\nTITLE: Display User Groups for Specific User in PHP\nDESCRIPTION: Shows all User Groups for a specific user (ID 23) by setting the user parameter and removing the limit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroups.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[PeopleGroups? &user=`23` &limit=`0`]]\n```\n\n----------------------------------------\n\nTITLE: MIGX Configuration JSON\nDESCRIPTION: This JSON configuration defines the structure and behavior of a MIGX database TV named 'mygallery'. It specifies form tabs, context menus, action buttons, columns, and extended settings for managing gallery images within the MODX CMS. The configuration includes settings for adding, editing, publishing, and deleting images, as well as defining the fields and layout of the image management interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/index.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"{\\n  \\\"formtabs\\\": [{\\n      \\\"MIGX_id\\\": 6,\\n      \\\"caption\\\": \\\"Image\\\",\\n      \\\"print_before_tabs\\\": \\\"0\\\",\\n      \\\"fields\\\": [{\\n          \\\"MIGX_id\\\": 14,\\n          \\\"field\\\": \\\"title\\\",\\n          \\\"caption\\\": \\\"Title\\\",\\n          \\\"inputTV\\\": \\\"\\\",\\n          \\\"inputTVtype\\\": \\\"\\\",\\n          \\\"configs\\\": \\\"\\\",\\n          \\\"pos\\\": 1\\n        },\\n        {\\n          \\\"MIGX_id\\\": 15,\\n          \\\"field\\\": \\\"image\\\",\\n          \\\"caption\\\": \\\"Image\\\",\\n          \\\"description\\\": \\\"\\\",\\n          \\\"description_is_code\\\": \\\"0\\\",\\n          \\\"inputTV\\\": \\\"\\\",\\n          \\\"inputTVtype\\\": \\\"image\\\",\\n          \\\"validation\\\": \\\"\\\",\\n          \\\"configs\\\": \\\"\\\",\\n          \\\"restrictive_condition\\\": \\\"\\\",\\n          \\\"display\\\": \\\"\\\",\\n          \\\"sourceFrom\\\": \\\"config\\\",\\n          \\\"sources\\\": \\\"\\\",\\n          \\\"inputOptionValues\\\": \\\"\\\",\\n          \\\"default\\\": \\\"\\\",\\n          \\\"useDefaultIfEmpty\\\": \\\"0\\\",\\n          \\\"pos\\\": 2\\n        },\\n        {\\n          \\\"MIGX_id\\\": 16,\\n          \\\"field\\\": \\\"pos\\\",\\n          \\\"caption\\\": \\\"Position\\\",\\n          \\\"inputTV\\\": \\\"\\\",\\n          \\\"inputTVtype\\\": \\\"\\\",\\n          \\\"configs\\\": \\\"\\\",\\n          \\\"pos\\\": 3\\n        }\\n      ],\\n      \\\"pos\\\": 1\\n    },\\n    {\\n      \\\"MIGX_id\\\": 7,\\n      \\\"caption\\\": \\\"Description\\\",\\n      \\\"fields\\\": [{\\n        \\\"MIGX_id\\\": 17,\\n        \\\"field\\\": \\\"description\\\",\\n        \\\"caption\\\": \\\"Description\\\",\\n        \\\"inputTV\\\": \\\"\\\",\\n        \\\"inputTVtype\\\": \\\"textarea\\\",\\n        \\\"configs\\\": \\\"\\\",\\n        \\\"pos\\\": 1\\n      }],\\n      \\\"pos\\\": 2\\n    }\\n  ],\\n  \\\"contextmenus\\\": \\\"update||publish||unpublish||recall_remove_delete\\\",\\n  \\\"actionbuttons\\\": \\\"addItem||toggletrash\\\",\\n  \\\"columnbuttons\\\": \\\"\\\",\\n  \\\"filters\\\": \\\"\\\",\\n  \\\"extended\\\": {\\n    \\\"migx_add\\\": \\\"Add Image\\\",\\n    \\\"disable_add_item\\\": \\\"\\\",\\n    \\\"add_items_directly\\\": \\\"\\\",\\n    \\\"formcaption\\\": \\\"\\\",\\n    \\\"update_win_title\\\": \\\"\\\",\\n    \\\"win_id\\\": \\\"\\\",\\n    \\\"maxRecords\\\": \\\"\\\",\\n    \\\"addNewItemAt\\\": \\\"bottom\\\",\\n    \\\"media_source_id\\\": \\\"\\\",\\n    \\\"multiple_formtabs\\\": \\\"\\\",\\n    \\\"multiple_formtabs_label\\\": \\\"\\\",\\n    \\\"multiple_formtabs_field\\\": \\\"\\\",\\n    \\\"multiple_formtabs_optionstext\\\": \\\"\\\",\\n    \\\"multiple_formtabs_optionsvalue\\\": \\\"\\\",\\n    \\\"actionbuttonsperrow\\\": 1,\\n    \\\"winbuttonslist\\\": \\\"\\\",\\n    \\\"extrahandlers\\\": \\\"\\\",\\n    \\\"filtersperrow\\\": 1,\\n    \\\"packageName\\\": \\\"mygallery\\\",\\n    \\\"classname\\\": \\\"myGallery\\\",\\n    \\\"task\\\": \\\"\\\",\\n    \\\"getlistsort\\\": \\\"\\\",\\n    \\\"getlistsortdir\\\": \\\"\\\",\\n    \\\"sortconfig\\\": \\\"\\\",\\n    \\\"gridpagesize\\\": \\\"\\\",\\n    \\\"use_custom_prefix\\\": \\\"0\\\",\\n    \\\"prefix\\\": \\\"\\\",\\n    \\\"grid\\\": \\\"\\\",\\n    \\\"gridload_mode\\\": 1,\\n    \\\"check_resid\\\": 1,\\n    \\\"check_resid_TV\\\": \\\"\\\",\\n    \\\"join_alias\\\": \\\"Resource\\\",\\n    \\\"has_jointable\\\": \\\"no\\\",\\n    \\\"getlistwhere\\\": \\\"\\\",\\n    \\\"joins\\\": \\\"\\\",\\n    \\\"hooksnippets\\\": \\\"\\\",\\n    \\\"cmpmaincaption\\\": \\\"\\\",\\n    \\\"cmptabcaption\\\": \\\"\\\",\\n    \\\"cmptabdescription\\\": \\\"\\\",\\n    \\\"cmptabcontroller\\\": \\\"\\\",\\n    \\\"winbuttons\\\": \\\"\\\",\\n    \\\"onsubmitsuccess\\\": \\\"\\\",\\n    \\\"submitparams\\\": \\\"\\\"\\n  },\\n  \\\"columns\\\": [{\\n      \\\"MIGX_id\\\": 1,\\n      \\\"header\\\": \\\"ID\\\",\\n      \\\"dataIndex\\\": \\\"id\\\",\\n      \\\"renderer\\\": \\\"\\\",\\n      \\\"sortable\\\": \\\"false\\\",\\n      \\\"show_in_grid\\\": 1\\n    },\\n    {\\n      \\\"MIGX_id\\\": 2,\\n      \\\"header\\\": \\\"Title\\\",\\n      \\\"dataIndex\\\": \\\"title\\\",\\n      \\\"renderer\\\": \\\"\\\",\\n      \\\"sortable\\\": true,\\n      \\\"show_in_grid\\\": 1\\n    },\\n    {\\n      \\\"MIGX_id\\\": 3,\\n      \\\"header\\\": \\\"image\\\",\\n      \\\"dataIndex\\\": \\\"image\\\",\\n      \\\"renderer\\\": \\\"this.renderImage\\\",\\n      \\\"sortable\\\": \\\"false\\\",\\n      \\\"show_in_grid\\\": 1\\n    },\\n    {\\n      \\\"MIGX_id\\\": 4,\\n      \\\"header\\\": \\\"Published\\\",\\n      \\\"dataIndex\\\": \\\"published\\\",\\n      \\\"renderer\\\": \\\"this.renderCrossTick\\\",\\n      \\\"sortable\\\": true,\\n      \\\"show_in_grid\\\": 1\\n    },\\n    {\\n      \\\"MIGX_id\\\": 5,\\n      \\\"header\\\": \\\"Position\\\",\\n      \\\"dataIndex\\\": \\\"pos\\\",\\n      \\\"renderer\\\": \\\"\\\",\\n      \\\"sortable\\\": true,\\n      \\\"show_in_grid\\\": 1\\n    },\\n    {\\n      \\\"MIGX_id\\\": 6,\\n      \\\"header\\\": \\\"\\\",\\n      \\\"dataIndex\\\": \\\"deleted\\\",\\n      \\\"renderer\\\": \\\"\\\",\\n      \\\"sortable\\\": \\\"false\\\",\\n      \\\"show_in_grid\\\": \\\"0\\\"\\n    }\\n  ],\\n  \\\"category\\\": \\\"\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Accessing modX Database Configuration\nDESCRIPTION: Retrieves various configuration options related to the database connection, aligning legacy keys with modern standards.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nmodX->dbConfig\n```\n\n----------------------------------------\n\nTITLE: Registering Footer HTML in MODX\nDESCRIPTION: Example showing how to inject a simple copyright footer into a MODX page using regClientHTMLBlock.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclienthtmlblock.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientHTMLBlock('<div id=\"footer\">(c) 2009 MODX</div>');\n```\n\n----------------------------------------\n\nTITLE: Ajax Request Implementation\nDESCRIPTION: Example of making direct Ajax requests using ExtJS with JSON handling\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/2.-ext-js-tutorial-ajax-include.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n    function makeAjaxRequest(var1) {\n        Ext.Ajax.request({\n            url: 'http://yoursite.com/some/controller',\n            params: {\n                myvar: var1\n            },\n            success: function(response, opts){\n                // If the response is JSON, you have to decode it\n                var obj = Ext.decode(response.responseText);\n                Ext.fly('some_div').update('Success!');\n            },\n            failure: function(response, opts) {\n                Ext.fly('some_div').update('Fail!');\n            },\n        callback: function(options,success,response){\n        // use this if you need to perform your own success/failure checking\n        }\n        });\n    }\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Camper Overview Table\nDESCRIPTION: Defines the HTML structure for listing campers using chunks in MODX. The `cmVoorraadOuter` chunk wraps individual camper entries (`[[+items]]`) in a table. This requires the CamperManagement namespace to be configured and the snippets to correctly render data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.customizing-the-component.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<table id=\\\"voorraadPrint\\\">\\n   [[+items]]\\n</table>\"\n```\n\n----------------------------------------\n\nTITLE: Default Date Format for SimplePie (PHP)\nDESCRIPTION: Default date format string used by SimplePie for formatting dates using PHP's date() function. This format produces dates like '15 January 2023, 2:30 pm'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/spiefeed/index.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\"j F Y, g:i a\"\n```\n\n----------------------------------------\n\nTITLE: Darkening a Hex Color Value in MODX with CSSSweet\nDESCRIPTION: This snippet demonstrates how to darken a hex color value by 30% using the 'lighten' output modifier with a negative percentage in CSSSweet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.lighten.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[+color:lighten=`-30`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX Base Paths\nDESCRIPTION: This configuration file defines constants for the base paths of a MODX installation. These paths are used to locate the core, manager, connectors, and assets directories, as well as their corresponding URLs. The paths need to be adjusted based on the MODX installation directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefine('MODX_BASE_PATH', '/www/modx/');\ndefine('MODX_CORE_PATH', MODX_BASE_PATH . 'core/');\ndefine('MODX_MANAGER_PATH', MODX_BASE_PATH . 'manager/');\ndefine('MODX_CONNECTORS_PATH', MODX_BASE_PATH . 'connectors/');\ndefine('MODX_ASSETS_PATH', MODX_BASE_PATH . 'assets/');\ndefine('MODX_BASE_URL','/modx/');\n/* define('MODX_CORE_URL', MODX_BASE_URL . 'core/'); */ /* There isn't a core URL!! */\ndefine('MODX_MANAGER_URL', MODX_BASE_URL . 'manager/');\ndefine('MODX_CONNECTORS_URL', MODX_BASE_URL . 'connectors/');\ndefine('MODX_ASSETS_URL', MODX_BASE_URL . 'assets/');\n```\n\n----------------------------------------\n\nTITLE: Using Longtitle Tag in HTML Heading (MODX Revolution)\nDESCRIPTION: Demonstrates the use of the [[*longtitle]] tag within an H1 HTML element to display the long title of a page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>[[*longtitle]]</h1>\n```\n\n----------------------------------------\n\nTITLE: Defining xPDOObject::toArray() Method in PHP\nDESCRIPTION: Signature of the toArray() method, showing its parameters and return type. It allows converting object fields to an array with options for key prefixing, raw values, lazy field exclusion, and related object inclusion.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/toarray.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray toArray(\n   [string $keyPrefix = ''],\n   [boolean $rawValues = false],\n   [boolean $excludeLazy = false],\n   [boolean|integer|string|array $inludeRelated = false])\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Long Title in MODX Revolution HTML\nDESCRIPTION: Illustrates the use of the longtitle tag in MODX Revolution, typically used for displaying a more detailed title in the page content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>[[*longtitle]]</h1>\n```\n\n----------------------------------------\n\nTITLE: Validating Field Values Using xPDOValidator in PHP\nDESCRIPTION: This method validates the field values of an xPDOObject using an xPDOValidator. It returns a boolean indicating whether the validation was successful. The method accepts an optional array of options to customize the validation process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/validation/validate.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nboolean validate ([array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Calling mxCalendar Snippet for Default Calendar View in PHP\nDESCRIPTION: This snippet demonstrates how to call the mxCalendar snippet with the default calendar view. It provides a calendar view with full page load on navigation. This is the most basic way to integrate mxCalendar into a ModX resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[!mxcalendar?]]\n\n```\n\n----------------------------------------\n\nTITLE: alternateClass Output Filter\nDESCRIPTION: An output filter that checks if an integer can be divided by two, returning a CSS class name for alternating row styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/*\n * Based on phx:alternateClass by Smashingred\n * Updated for Revolution by Mark Hamstra\n */\nif ($input % 2) {\n  return $options;\n} else {\n  return ''; // Could set another class here\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Local Data ComboBox for Units\nDESCRIPTION: Implementation of a custom ComboBox component with local data store for unit measurements. Demonstrates extending MODx.combo.ComboBox with array store data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDoodles.combo.Units = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        store: new Ext.data.ArrayStore({\n            id: 0\n            ,fields: ['unit','display']\n            ,data: [\n                ['MB','Megabyte']\n                ,['GB','Gigabyte']\n                ,['TB','Terabyte']\n                ,['PB','Petabyte']\n                ,['EB','Exabyte']\n                ,['ZB','Zettabyte']\n                ,['YB','Yottabyte']\n            ]\n        })\n        ,mode: 'local'\n        ,displayField: 'display'\n        ,valueField: 'unit'\n    });\n    Doodles.combo.Units.superclass.constructor.call(this,config);\n};\nExt.extend(Doodles.combo.Units,MODx.combo.ComboBox);\nExt.reg('doodle-combo-units',Doodles.combo.Units);\n```\n\n----------------------------------------\n\nTITLE: Safely Retrieving GET Variable with fastField in MODX\nDESCRIPTION: Shows how to safely retrieve a GET variable using fastField, with the stripTags output filter to prevent XSS attacks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[!#get.name:stripTags]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Logout WebLink in MODX\nDESCRIPTION: This MODX WebLink creates a dedicated logout link that can be used for testing or as a standalone logout page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[~1? &service=`logout`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Emails to Newsletter Queue via API\nDESCRIPTION: Example code showing how to programmatically add emails to the newsletter queue by retrieving a newsletter object and calling its addQueues method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/scheduled-newsletter.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('sendex', MODX_CORE_PATH . 'components/sendex/model/');\n\n/** @var sxNewsletter $newsletter */\nif ($newsletter = $modx->getObject('sxNewsletter', array('name' => 'Newsletter'))) {\n    $newsletter->addQueues();\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Multi-Select Values with Line Breaks\nDESCRIPTION: Configuration for formatting checkbox or multi-select values in email output using HTML break tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/email.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    ...\n    &emailMultiSeparator=`<br />`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using getFacebookShares in getResources Template\nDESCRIPTION: Shows how to get Facebook comments count for a specific resource when using within a getResources template, ensuring proper URL generation with the full scheme.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookshares.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nComments: [[!getFacebookShares? &node=`comments` &url=`[[~[[+id]]? &scheme=`full`]]`]]\n```\n\n----------------------------------------\n\nTITLE: pdoField Resource Field Retrieval\nDESCRIPTION: Examples of using pdoField to fetch specific fields from resources, including parent resource fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[pdoField?\n    &id=`15`\n    &field=`longtitle`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[pdoField?\n    &id=`[[*id]]`\n    &field=`pagetitle`\n    &top=`2`\n]]\n```\n\n----------------------------------------\n\nTITLE: FormIt Validation - Custom Error Message Override\nDESCRIPTION: This snippet demonstrates how to override the default error messages for FormIt validators using the `&vTextRequired` property. It also shows how to specify a custom error message for a specific field using the `&field.vTextRequired` property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.validators.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &vTextRequired=`Please enter a value for this field.`\n    &subject.vTextRequired=`Please enter a subject.`\n]]\n```\n\n----------------------------------------\n\nTITLE: Applying Output Modifiers to Snippet Output in MODX Revolution\nDESCRIPTION: Demonstrates how to apply output modifiers to the result of a snippet in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[miSnippet:modificador=`valor`? &miSnippetParam=`algo`]]\n```\n\n----------------------------------------\n\nTITLE: Email Template Variable Input Options in JSON\nDESCRIPTION: JSON configuration options for Email template variables in MODX. These options control field validation including whether blank values are allowed and length constraints for the email input.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"maxLength\": \"\",\n    \"minLength\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating MODX Core Path in Additional Config Files\nDESCRIPTION: This PHP code defines constants that need to be updated in three additional MODX configuration files when moving to a new server.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndefine('MODX_CORE_PATH', '/path/to/modx_doc_root/core/');\ndefine('MODX_CONFIG_KEY', 'config');\n```\n\n----------------------------------------\n\nTITLE: Reading Form Values in Custom Hook using PHP\nDESCRIPTION: These code snippets show how to read submitted form values in a custom hook, either individually or all at once.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.custom-hook.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = $hook->getValue('email');\n```\n\nLANGUAGE: php\nCODE:\n```\n$formFields = $hook->getValues();\n$email = $formFields['email'];\n```\n\n----------------------------------------\n\nTITLE: Getting Facebook Comments Count with getFacebookShares\nDESCRIPTION: Customizes the getFacebookShares snippet to retrieve the number of Facebook comments instead of shares for the current resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookshares.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getFacebookShares? &node=`comments`]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Information in OnPackageInstall Event (PHP)\nDESCRIPTION: Demonstrates how to access the package name using the $package variable provided in the OnPackageInstall event. This snippet shows how to retrieve the package name from the modTransportPackage instance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onpackageinstall.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$package->get('package_name')\n```\n\n----------------------------------------\n\nTITLE: ResourceItem Chunk Template\nDESCRIPTION: A MODX chunk template that defines the HTML structure for each resource item, using placeholders for dynamic content that will be replaced with actual resource data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<li><a href=\"[[~[[+id]]]]]\">[[+pagetitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for StatCache with MODX in Subdirectory\nDESCRIPTION: Nginx configuration block for serving StatCache static files when MODX is installed in a subdirectory of the document root. This setup handles requests by checking for cached versions before falling back to dynamic processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/statcache/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nlocation /modx {\n    try_files /modx/statcache$uri~index.html /modx/statcache$uri $uri $uri/ @modx-rewrite2;\n}\nlocation @modx-rewrite2 {\n    rewrite ^/(.[^/]*)/(.*)$ /$1/index.php?q=$2 last;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating MIGX with getResources in MODX\nDESCRIPTION: Example of using MIGX within a getResources call to create a gallery of galleries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.frontend-usage.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <a href=\"[[~[[+id]]]]\">[[+pagetitle]]</a>  \n  [[getImageList?\n    &tvname=`myMIGXtv`\n    &tpl=`thumbTpl`\n    &limit=`1`\n    &docid=`[[+id]]`\n  ]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Displaying Hello World with Inline PHP Dashboard Widget in MODX\nDESCRIPTION: This code snippet demonstrates how to use the Inline PHP dashboard widget to display a simple 'Hello, World!' message. The PHP code is placed directly in the widget's content panel and returns the output as a string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/dashboards/widget-types/inline-php.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nreturn 'Hello, World!';\n```\n\n----------------------------------------\n\nTITLE: Using getSettings Method in MODX Revolution (PHP)\nDESCRIPTION: This example demonstrates how to use the getSettings method to retrieve all User Settings for a specific user in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.getsettings.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$settings = $user->getSettings();\n```\n\n----------------------------------------\n\nTITLE: Initializing Alert Message in MODx\nDESCRIPTION: Displays a warning alert dialog with a callback function to clear MODx cache after user interaction\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.msg.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.msg.alert('Предупреждение!','Недостаточно места! Мы должны очистить кэш.',function() {\n  MODx.clearCache();\n},MODx);\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic MODX Datepicker Input\nDESCRIPTION: Demonstrates basic usage of the input.datepicker snippet with a predefined date value. Allows quick integration of a datepicker into MODX forms with minimal configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.datepicker.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[input.datepicker? &value=`5/3/2012`]]\n```\n\n----------------------------------------\n\nTITLE: getResources Date Filtering with getDate\nDESCRIPTION: Use getDate to dynamically filter resources based on publication dates and custom date template variables\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getdate/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources?\n    &parents=`[[*id]]`\n    &tpl=`myRowTpl`\n    &where=`[{\"publishedon:>=\":\"[[!getDate? &offset=`-3 month`]]\"}]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Counting Comments in a Thread using QuipCount in MODX\nDESCRIPTION: This snippet demonstrates how to use the QuipCount snippet to retrieve the number of comments associated with a specific thread. The `thread` property specifies the thread to count comments from.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipcount.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[QuipCount? &thread=`mythread`]]\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Selected Attributes in MODX Frontend\nDESCRIPTION: PHP code snippet for rendering the selected attributes list in the frontend. It uses getImageList to retrieve and display active attributes with their icons, titles, and comments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/create-selectable-and-sortable-attributes-list-for-whatever-you-need-it.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<ul>\n[[getImageList?\n    &tvname=`migx_attributes`\n    &where=`{\"active\":\"1\"}`\n    &tpl=`@CODE:\n      <li>\n      <img src=\"[[+icon]]\" alt=\"[[+title]]\" title=\"[[+title]]\" />\n      <span>[[+title]]</span>\n      [[+comment:nl2br]]\n      </li> `\n]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Default tagLister 'all' Chunk Template in PHP\nDESCRIPTION: The default template for the 'all' Chunk used in the tagLister snippet. It creates a list item with a link to show all tags, including the tag count.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/taglister/all.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+cls]]\">\n<a href=\"[[~[[+target]]? &[[+tagVar]]=``]]\">[[+tag]]</a> ([[+count]])\n</li>\n```\n\n----------------------------------------\n\nTITLE: Implementation of makeExciting Snippet in MODX\nDESCRIPTION: Sample implementation of the makeExciting snippet that adds a configurable number of exclamation marks to the input string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$defaultExcitementLevel = 1;\n$result = $input;\nif (isset($options)) {\n    $numberOfExclamations = $options;\n} else {\n    $numberOfExclamations = $defaultExcitementLevel;\n}\nfor ( $i = $numberOfExclamations; $i > 0; $i-- ) {\n    $result = $result . '!';\n}\nreturn $result;\n```\n\n----------------------------------------\n\nTITLE: Configuring ModSecurity Location Rules for MODX\nDESCRIPTION: Apache configuration rules to whitelist specific MODX directories and files from ModSecurity restrictions. Includes rules for manager and connector paths.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<LocationMatch \"/manager/index.php\">\nSecRuleRemoveById 300016\n</LocationMatch>\n\n<LocationMatch \"/connectors/resource/index.php\">\n  SecRuleRemoveById 300013 300014 300015 300016\n</LocationMatch>\n\n<LocationMatch \"/connectors/element/tv.php\">\n  SecRuleRemoveById 300013 300016\n</LocationMatch>\n```\n\n----------------------------------------\n\nTITLE: Basic pdoSitemap with Permissions Check\nDESCRIPTION: Example showing how to enable permission checking when generating a sitemap\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoSitemap?\n    &checkPermissions=`list`\n]]\n```\n\n----------------------------------------\n\nTITLE: Two Column Layout HTML Template for MODX\nDESCRIPTION: HTML chunk for creating a two-column layout with images, headlines and content areas. Each column uses grid_h_6 class for 50% width and includes phpthumbof for image processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/varying-layout-boxes.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"box grid_h_6 grid_v_4\">\n    <div class=\"grid_h_6 alpha_h omega_h grid_v_1 alpha_v\"><img src=\"[[+cell_1_image:phpthumbof=`w=460&h=320&zc=1`]]\"/></div>\n    <div class=\"grid_h_6 alpha_h omega_h grid_v_1\"><h2>[[+cell_1_headline]]</h2></div>\n    <div class=\"grid_h_6 alpha_h omega_h grid_v_2 omega_v\">[[+cell_1_content]]</div>\n</div>\n<div class=\"box grid_h_6 grid_v_4\">\n    <div class=\"grid_h_6 alpha_h omega_h grid_v_1 alpha_v\"><img src=\"[[+cell_2_image:phpthumbof=`w=460&h=320&zc=1`]]\"/></div>\n    <div class=\"grid_h_6 alpha_h omega_h grid_v_1\"><h2>[[+cell_2_headline]]</h2></div>\n    <div class=\"grid_h_6 alpha_h omega_h grid_v_2 omega_v\">[[+cell_2_content]]</div>\n</div>\n<div class=\"clear\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Metadata Chunk in MODX\nDESCRIPTION: A MODX Chunk containing common metadata tags that can be included in multiple templates. This chunk uses MODX system settings to populate metadata values dynamically.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n  <!-- SEO Microdata (Schema.org variant) - Google, Bing, Yahoo -->\n  <meta content=\"[[++site_name]]\" itemprop=\"description\">\n  <meta content=\"[[++site_name]]\" itemprop=\"name\">\n  <meta content=\"http://www.[[!++http_host]]\" itemprop=\"url\">\n  <meta content=\"http://www.[[!++http_host]]/meta_thumbnail.png\" itemprop=\"image\">\n  <meta content=\"info@[[!++http_host]]\" itemprop=\"email\">\n  <meta content=\"[[++site_name]]\" name=\"companyright\">\n```\n\n----------------------------------------\n\nTITLE: Discuss Snippet Call\nDESCRIPTION: This snippet call is placed in a MODX resource to route all forum requests to the Discuss component. The resource is set to a blank template and the snippet handles all request processing based on the URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[!Discuss]]\n\n```\n\n----------------------------------------\n\nTITLE: Setting up migxMultiLang Configuration Parameter\nDESCRIPTION: This snippet shows the configurations parameter for the migxdb input type used in the translations TV. It specifies two configurations: mml_translations and mml_translate, both using the migxmultilang template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/migxmultilang.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmml_translations:migxmultilang,mml_translate:migxmultilang\n```\n\n----------------------------------------\n\nTITLE: Accessing MODx Request Parameters in JavaScript\nDESCRIPTION: Retrieves GET parameters from the current page using the MODx.request object. This allows dynamic access to URL query parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = MODx.request.id;\n```\n\n----------------------------------------\n\nTITLE: Initializing FormIt Math Hook in PHP\nDESCRIPTION: This snippet shows how to include the math hook in a FormIt call. It demonstrates basic usage and how to make the math question required for form submission.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/math.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &hooks=`math`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &hooks=`math` &validate=`math:required`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Archive Results in MODX Revolution\nDESCRIPTION: Example of using the getArchives snippet to display archive results for specific parent resources. Results are stored in a placeholder and displayed with month/year header.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/archivist/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getArchives?\n   &parents=`54,55`\n   &toPlaceholder=`archives`]]\n\n<h2>[[!+arc_month_name]] [[!+arc_year]] Archives</h2>\n\n[[!+archives]]\n```\n\n----------------------------------------\n\nTITLE: Extending xPDO Base Class in PHP\nDESCRIPTION: Shows the basic class declaration for extending the xPDO framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/getting-started/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass myClass extends xPDO\n```\n\n----------------------------------------\n\nTITLE: Implementing Lingua CultureKey Snippet in PHP\nDESCRIPTION: Simple snippet that returns the current active language (cultureKey). This is different from just getting the system setting as it returns the active language determined by Lingua.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lingua/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn $modx->cultureKey;\n```\n\n----------------------------------------\n\nTITLE: Creating a Page List with Hit Counts using getResources in MODX\nDESCRIPTION: This code snippet demonstrates how to create a template for getResources that displays page titles along with their hit counts using the HitsPage TV.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hitspage/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<li>[[+pagetitle]] has been viewed [[+tv.HitsPage]] times.</li>\n```\n\n----------------------------------------\n\nTITLE: Implementing FredBeforeRender Event Output Structure\nDESCRIPTION: Demonstrates the required output structure for the FredBeforeRender event that must be assigned to $modx->event->_output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/modx_events.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->event->_output = [\n    'includes' => $includes,\n    'beforeRender' => $beforeRender,\n    'lexicons' => $lexicons,\n    'modifyPermissions' => $modifyPermissions\n];\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema with Validation Rules\nDESCRIPTION: XML schema definition for creating a model with validation rules for a 'myTest' object that includes a name field with a minimum length validation rule.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/index.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"test\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" tablePrefix=\"test_\">\n    <object class=\"myTest\" table=\"test\" extends=\"xPDOSimpleObject\">\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\"\n            phptype=\"string\" default=\"\" null=\"false\" />\n\n        <validation>\n            <rule field=\"name\"\n                name=\"preventBlank\"\n                type=\"xPDOValidationRule\"\n                rule=\"xPDOMinLengthValidationRule\"\n                value=\"1\"\n                message=\"Please specify a name.\"\n             />\n        </validation>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Subscribe Page with virtuNewsletter Snippet\nDESCRIPTION: Resource content for the subscription page that processes new newsletter subscriptions. This snippet handles form submissions and adds subscribers to the appropriate category.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!virtuNewsletter.subscribe]]\n```\n\n----------------------------------------\n\nTITLE: Basic Loginza Snippet Usage in MODX Revolution\nDESCRIPTION: This snippet call demonstrates the basic usage of Loginza for user authentication. It should be called uncached on the desired page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/loginza/loginza.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Loginza]]\n```\n\n----------------------------------------\n\nTITLE: Defining XML Item Template for MODX Sitemap in XML\nDESCRIPTION: This chunk is used for XML sitemaps for each result item. It includes elements for location, last modification date, change frequency, and priority.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<url>\n    <loc>[[+url]]</loc>\n    <lastmod>[[+lastmod]]</lastmod>\n    <changefreq>[[+changefreq]]</changefreq>\n    <priority>[[+priority]]</priority>\n</url>\n[[+items]]\n```\n\n----------------------------------------\n\nTITLE: Configuring cmCampers in MODX Snippet\nDESCRIPTION: Example usage of the cmCampers snippet to retrieve and display a list of the latest camper vehicles added. It utilizes custom templates for items and images, linking to a detailed view of each vehicle. Parameters such as 'tplItem', 'tplImageItem', 'limit', and 'target' are used to customize the snippet's behavior. Outputs a prepared HTML list ready for additional styling as vehicles' details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcampers-snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!cmCampers? &tplItem=`cmTplItem` &tplImageItem=`cmTplImage` &limit=`4` &target=`12`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<li onclick=\"location.href='[[+url]]'\">\n    <div class=\"status[[+status]]\"></div>\n    [[+images:default=`<img src=\"/assets/templates/lighthouse/cmimg/ph.png\" />`]]\n    <h4><a href=\"[[+url]]\" title=\"[[+brand]] [[+type]]\">[[+brand]] [[+type]]</a></h4>\n    <ul>\n        <li><span>Manufactured:</span> [[+manufactured]]</li>\n        <li><span>Mileage:</span> [[+mileage]]</li>\n        <li><span>Engine:</span> [[+engine]]</li>\n        <li><span>Price:</span> &euro; [[+price]]</li>\n    </ul>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Rendering User Profile Edit Form with Loginza in MODX Revolution\nDESCRIPTION: This HTML chunk creates a form for editing user profiles. It includes fields for username, full name, and email, with error handling and success/error messages. The form uses MODX placeholders for dynamic content and error display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/loginza/tpl.loginza.profile.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"[[~[[*id]]]]\" method=\"post\" class=\"form-horizontal\">\n    <div class=\"control-group[[+error.username:notempty=` error`]]\">\n        <label class=\"control-label\">???</label>\n        <div class=\"controls\">\n            <input type=\"text\" name=\"username\" value=\"[[+username]]\" />\n            <span class=\"help-inline\">[[+error.username]]</span>\n        </div>\n    </div>\n\n    <div class=\"control-group[[+error.fullname:notempty=` error`]]\">\n        <label class=\"control-label\">?????? ???</label>\n        <div class=\"controls\">\n            <input type=\"text\" name=\"fullname\" value=\"[[+fullname]]\" />\n            <span class=\"help-inline\">[[+error.fullname]]</span>\n        </div>\n    </div>\n\n    <div class=\"control-group[[+error.email:notempty=` error`]]\">\n        <label class=\"control-label\">Email</label>\n        <div class=\"controls\">\n            <input type=\"text\" name=\"email\" value=\"[[+email]]\" />\n            <span class=\"help-inline\">[[+error.email]]</span>\n        </div>\n    </div>\n    <input type=\"hidden\" name=\"action\" value=\"updateProfile\" />\n    <div class=\"form-actions\">\n        <button type=\"submit\" class=\"btn btn-primary\">Update profile</button>\n    </div>\n</form>\n[[+success:is=`1`:then=`<div class=\"alert alert-block\">Profile was successfully updated</div>`]]\n[[+success:is=`0`:then=`<div class=\"alert alert-block alert-error\">Error on profile update</div>`]]\n```\n\n----------------------------------------\n\nTITLE: Limited Items pdoCrumbs Implementation\nDESCRIPTION: Example of pdoCrumbs with limit parameter to restrict number of breadcrumb items\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoCrumbs.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[pdoCrumbs?\n    &limit=`2`\n]]\n```\n\n----------------------------------------\n\nTITLE: Handling Required Attribute for Checkboxes\nDESCRIPTION: This snippet demonstrates how to handle the 'required' attribute for checkboxes using a hidden field.  Since unchecked checkboxes do not submit a value, a hidden field with the same name is added to ensure that at least an empty value is sent, allowing FormIt to validate that at least one checkbox is selected.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.tutorials-and-examples/handling-selects,-checkboxes-and-radios.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\"[[!FormIt? &validate=`color:required`]] ...\\n<label>Цвет: [[!+fi.error.color]]</label>\\n<input type=\\\"hidden\\\" name=\\\"color[]\\\" value=\\\"\\\" />\\n<input\\n    type=\\\"checkbox\\\"\\n    name=\\\"color[]\\\"\\n    value=\\\"blue\\\"\\n    [[!+fi.color:FormItIsChecked=\\\"`blue`\\\"]}\\\"\\n/>\\nСиний\\n<input\\n    type=\\\"checkbox\\\"\\n    name=\\\"color[]\\\"\\n    value=\\\"red\\\"\\n    [[!+fi.color:FormItIsChecked=\\\"`red`\\\"]}\\\"\\n/>\\nКрасный\\n<input\\n    type=\\\"checkbox\\\"\\n    name=\\\"color[]\\\"\\n    value=\\\"green\\\"\\n    [[!+fi.color:FormItIsChecked=\\\"`green`\\\"]}\\\"\\n/>\\nЗеленый\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the MODX Revolution Repository in PHP\nDESCRIPTION: Command to clone the official MODX Revolution repository from GitHub using Git.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngit clone http://github.com/modxcms/revolution.git\n```\n\n----------------------------------------\n\nTITLE: Using FormIt Spam Hook in MODX Revolution\nDESCRIPTION: This snippet demonstrates how to use the spam hook in a FormIt call. The hook checks submitted email fields against StopForumSpam to prevent spam submissions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/spam.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &hooks=`spam`]]\n```\n\n----------------------------------------\n\nTITLE: Basic modX::sendForward Syntax\nDESCRIPTION: The basic syntax for the modX::sendForward method that forwards requests to another resource while maintaining the original URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendforward.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid sendForward (integer $id, [string|array $options = null], [boolean $sendErrorPage = true])\n```\n\n----------------------------------------\n\nTITLE: Displaying Price Groups in List Format using MODX\nDESCRIPTION: This snippet utilizes the `bdPriceGroups` to output price groups in a HTML list format. It allows for customization of limits, sorting, and separators. The expected inputs include optional parameters like limit, offset, sortby, and sortdir. The output is a structured list of price groups within a wrapping template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdpricegroups.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<h2>Price Groups</h2>\n<ul>\n    [[+wrapper]]\n</ul>\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!bdPriceGroups]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<h2>Price Groups</h2>\n<ul>\n  <li>Cheap</li>\n  <li>Good Value</li>\n  <li>Exact Budget</li>\n  <li>Too frick'n expensive</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Resources Using Fenom in MODX - PHP\nDESCRIPTION: This code snippet illustrates how to retrieve and iterate over multiple published resources using Fenom. It defines a variable for the resources and uses a foreach loop to output formatted information for each resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n{var $resources = $_modx->getResources(\n    ['published' => 1, 'deleted' => 0],\n    ['sortby' => 'id', 'sortdir' => 'ASC', 'limit' => 50]\n)}\n{foreach $resources as $resource}\n    {$_modx->getChunk('@INLINE <p>{$id} {$pagetitle}</p>', $resource)}\n{/foreach}\n```\n\n----------------------------------------\n\nTITLE: Loading a Specific Package from FormIt Snippet\nDESCRIPTION: Demonstrates how to load a specific package (recaptcha) from the FormIt snippet's model directory using the addPackage method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.addpackage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->addPackage('recaptcha', MODX_CORE_PATH.'components/formit/model/');\n```\n\n----------------------------------------\n\nTITLE: Displaying Gallery Item by ID with Chunk Template in PHP\nDESCRIPTION: This snippet shows how to render a gallery item using a specific chunk template named 'Photo'. It requires specifying the item ID and setting the &tpl parameter to control the rendering template. The &toPlaceholders parameter must be set to '0' to enable chunk output instead of placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryItem?\\n    &id=`23`\\n    &toPlaceholders=`0`\\n    &tpl=`Photo`\\n]]\n```\n\n----------------------------------------\n\nTITLE: LexRating Snippet Call in MODX Quip Comment Template\nDESCRIPTION: Demonstrates how to include LexRating within a Quip comment template, using extended properties for identification and customizing display options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lexrating/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!LexRating?\n&group=`Overall Rating`\n&name=`[[+thread]]`\n&extended=`{\"quipReplyId\":\"[[+idprefix]][[+id]]\"}`\n&readOnly=`1`\n&tpl=`lexrating.quip`\n&js=``\n&loadjQuery=`0`\n&initialAjax=`0`\n&_toArray=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining Toolbar Button in HTML\nDESCRIPTION: This snippet shows how to define a button for the toolbar in HTML with specific classes and attributes. It illustrates how the classes determine button appearance and functionality within the MODX Fred interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/toolbar_plugins.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"fred--trash\" role=\"button\" title=\"Delete\"></button>\n```\n\n----------------------------------------\n\nTITLE: Displaying Introtext in HTML Div (MODX Revolution)\nDESCRIPTION: Demonstrates how to use the [[*introtext]] tag to display a summary or introductory text within a div element.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"summary\">[[*introtext]]</div>\n```\n\n----------------------------------------\n\nTITLE: Dividing Numeric Placeholder Value with Units in MODX\nDESCRIPTION: Shows how modval can modify a placeholder value containing a numeric value with a unit, by dividing the numeric portion and preserving the original unit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.modval.md#2025-04-17_snippet_1\n\nLANGUAGE: modx\nCODE:\n```\n[[+line_height:modval=`/2`]]\n```\n\n----------------------------------------\n\nTITLE: Standard pdoField Snippet Call\nDESCRIPTION: Recommended usage of pdoField as a regular snippet call for better performance and readability\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoField.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[pdoField?\n    &id=`[[*id]]`\n    &field=`longtitle`\n    &top=`2`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring sekFancyBox Helpers with PHP\nDESCRIPTION: Example of configuring the title, overlay, and thumbs helpers for sekFancyBox using a JSON string in PHP. This snippet shows how to set specific properties for each helper component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n&helpers=`{\n\"title\":{\"type\":\"inside\"},\n\"overlay\":{\"opacity\": 0.8,\"css\":{\"'background-color'\": \"#000\"}},\n\"thumbs\":{\"width\": 50,\"height\": 50},\n}`\n```\n\n----------------------------------------\n\nTITLE: Displaying Reply Form for a Thread in MODX\nDESCRIPTION: The snippet QuipReply is used to display a reply form for a specific thread. If no thread is specified, it will fetch the thread ID from the 'quip_thread' GET parameter, allowing dynamic usage for threaded comments. Dependencies include the MODX framework, and it requires a valid thread parameter to function correctly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipreply.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipReply? &thread=`myThread`]]\n```\n\n----------------------------------------\n\nTITLE: Callable Validation Rule Example\nDESCRIPTION: Example of implementing a callable validation rule that checks if a number meets minimum value requirements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction myCallable($value,$parameters) {\n    return $value < $parameters['min'];\n}\n$obj->set('number',101);\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $o .= 'An error occurred on field \"'.$errorMsg['field'].'\": '.$errorMsg['message'].'<br />';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Three Column Layout HTML Template for MODX\nDESCRIPTION: HTML chunk for creating a three-column layout with images, headlines and content areas. Each column uses grid_h_4 class for 33% width and includes phpthumbof for image processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/varying-layout-boxes.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"box grid_h_4 grid_v_4\">\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_1 alpha_v\"><img src=\"[[+cell_1_image:phpthumbof=`w=300&h=250&zc=1`]]\"/></div>\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_1\"><h2>[[+cell_1_headline]]</h2></div>\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_2 omega_v\">[[+cell_1_content]]</div>\n</div>\n<div class=\"box grid_h_4 grid_v_4\">\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_1 alpha_v\"><img src=\"[[+cell_2_image:phpthumbof=`w=300&h=250&zc=1`]]\"/></div>\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_1\"><h2>[[+cell_2_headline]]</h2></div>\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_2 omega_v\">[[+cell_2_content]]</div>\n</div>\n    <div class=\"box grid_h_4 grid_v_4\">\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_1 alpha_v\"><img src=\"[[+cell_3_image:phpthumbof=`w=300&h=250&zc=1`]]\"/></div>\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_1\"><h2>[[+cell_3_headline]]</h2></div>\n    <div class=\"grid_h_4 alpha_h omega_h grid_v_2 omega_v\">[[+cell_3_content]]</div>\n</div>\n<div class=\"clear\"></div>\n```\n\n----------------------------------------\n\nTITLE: MODX Context Access Error Message\nDESCRIPTION: Error message that appears in MODX error logs when there are insufficient context access permissions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ndoes not have permission to load object of class modContext with primary key\n```\n\n----------------------------------------\n\nTITLE: Using getGroups Snippet in MODX Revolution\nDESCRIPTION: The getGroups snippet retrieves user group information. This can be called with or without caching enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/usertools/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[getGroups]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Activation Data from MODX Registry\nDESCRIPTION: Example of reading previously stored user activation data from a registry topic. Retrieves a specific message based on username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->getService('registry', 'registry.modRegistry');\n$modx->registry->addRegister('login','registry.modFileRegister');\n$modx->registry->login->connect();\n$modx->registry->login->subscribe('/useractivation/'.$user->get('username'));\n$msgs = $modx->registry->login->read(array('poll_limit' => 1));\n$password = reset($msgs);\n```\n\n----------------------------------------\n\nTITLE: Syntax of getFieldName Method in PHP\nDESCRIPTION: This snippet shows the syntax of the getFieldName method. It takes a required string parameter for the field name and an optional string parameter for the alias. It returns a string representing the fully-qualified field name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getfieldname.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nstring getFieldName (string $k, [string $alias = null])\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for MODX Uploadable File Types\nDESCRIPTION: The default value for the 'upload_files' system setting that defines which file extensions can be uploaded to media sources such as 'assets/files/' using the Resource Manager. This comma-separated list includes common web formats, documents, media files, and fonts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/upload_files.md#2025-04-17_snippet_0\n\nLANGUAGE: config\nCODE:\n```\ntxt,html,htm,xml,js,js.map,css,scss,less,css.map,zip,gz,rar,z,tgz,tar,mp3,mp4,\naac,wav,au,wmv,avi,mpg,mpeg,pdf,doc,docx,xls,xlsx,ppt,pptx,jpg,jpeg,\npng,tiff,svg,svgz,gif,psd,ico,bmp,webp,odt,ods,odp,odb,odg,odf,md,ttf,woff,woff2,eot\n```\n\n----------------------------------------\n\nTITLE: XML Schema Class Definition\nDESCRIPTION: Example showing how to define a class name and table mapping in xPDO XML schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getiterator.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"MyClassName\" table=\"my_class_name\" extends=\"xPDOObject\">\n```\n\n----------------------------------------\n\nTITLE: Resetting MODx Window Form\nDESCRIPTION: Shows how to reset all fields in a MODx.Window form to empty values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.window.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = Ext.getCmp('my-window-id');\nw.reset();\n```\n\n----------------------------------------\n\nTITLE: Resetting and Adding Hits for a Resource in MODX Revolution\nDESCRIPTION: This snippet zeroes out the hit count for resource 3 before adding 2 hits by using the knockout parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &punch=`3` &amount=`2` &knockout=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'else' in MODX\nDESCRIPTION: Demonstrates the usage of 'else' modifier with 'then' for conditional output. It checks if the number of books is greater than 0 and outputs corresponding messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:gt=`0`:then=`Now available!`:else=`Sorry, currently sold out.`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Ajax Request with jQuery\nDESCRIPTION: Simple jQuery GET request example to fetch paginated content via Ajax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.get('document.html?page=5', function(response) {\n    console.log(response);\n}, 'json');\n```\n\n----------------------------------------\n\nTITLE: Hiding and Showing MODx Window Fields\nDESCRIPTION: Example of toggling visibility of form fields in a MODx.Window component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.window.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = Ext.getCmp('my-window-id');\nw.hideField('email');\nw.showField('comments');\n```\n\n----------------------------------------\n\nTITLE: Appending Parameter to Cachebuster (PHP)\nDESCRIPTION: This snippet illustrates how to append a URL parameter to the cachebuster result, allowing customization of the cache-busting strategy by modifying the URL with a parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cachebuster/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[$smartcache? &param=`?cb`]]\n```\n\n----------------------------------------\n\nTITLE: Set session.auto_start in .htaccess\nDESCRIPTION: This snippet demonstrates setting the `session.auto_start` directive in the `.htaccess` file. Setting it to '0' can resolve issues with login redirects after MODX installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nphp_value session.auto_start 0\n```\n\n----------------------------------------\n\nTITLE: Creating Logout Link in MODX\nDESCRIPTION: This code snippet shows how to create a logout link in MODX. It uses the Login snippet on page 21 and appends the 'service=logout' parameter to the URL, triggering the logout functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"[[~21? &service=logout]]\" title=\"Logout\">Logout</a>\n```\n\n----------------------------------------\n\nTITLE: Using Lingua GetField Snippet in MODX\nDESCRIPTION: Example of using the lingua.getField snippet to format dates according to the current language's date format settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lingua/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nCreated on: [[*createdon:date=`[[!lingua.getField? &field=`date_format_lite`]]`]]\n```\n\n----------------------------------------\n\nTITLE: Basic PeopleGroups Display in PHP\nDESCRIPTION: Basic usage of PeopleGroups snippet to display the first 10 User Groups sorted by name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroups.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!PeopleGroups]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Remove Method for MODX Grid in JavaScript\nDESCRIPTION: Adds a removeDoodle method to display a confirmation dialog before deleting a Doodle record. On confirmation, it sends a request to the remove processor and refreshes the grid on success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n,removeDoodle: function() {\n    MODx.msg.confirm({\n        title: _('doodles.doodle_remove')\n        ,text: _('doodles.doodle_remove_confirm')\n        ,url: this.config.url\n        ,params: {\n            action: 'mgr/doodle/remove'\n            ,id: this.menu.record.id\n        }\n        ,listeners: {\n            'success': {fn:this.refresh,scope:this}\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Single Column Layout HTML Template for MODX\nDESCRIPTION: HTML chunk for creating a single full-width column layout with image, headline and content areas. Uses grid classes for responsive layout and phpthumbof for image processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/varying-layout-boxes.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"box grid_h_12 grid_v_4\">\n    <div class=\"grid_h_12 alpha_h omega_h grid_v_1 alpha_v\"><img src=\"[[+cell_1_image:phpthumbof=`w=900&h=250&zc=1`]]\"/></div>\n    <div class=\"grid_h_12 alpha_h omega_h grid_v_1\"><h2>[[+cell_1_headline]]</h2></div>\n    <div class=\"grid_h_12 alpha_h omega_h grid_v_2 omega_v\">[[+cell_1_content]]</div>\n</div>\n<div class=\"clear\"></div>\n```\n\n----------------------------------------\n\nTITLE: Customizing List Containers with outerTpl in Wayfinder\nDESCRIPTION: Extends customization by adding the &outerTpl parameter which formats each list container (UL) in the navigation structure. This controls the HTML wrapper for groups of menu items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`55` &rowTpl=`rowTpl` &outerTpl=`outerTpl`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<!-- outerTpl -->\n<ul id=\"topnav\"[[+wf.classes]]>\n[[+wf.wrapper]]\n</ul>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- outerTpl -->\n<ul class=\"topnav\">\n    <!-- rowTpl -->\n    <li class=\"first\"><a href=\"media-hub/news\" title=\"HG in the News\">HG in the News</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/events\" title=\"HG Events\">HG Events</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/press\" title=\"Press Releases\">Press Releases</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/blog/\" title=\"HG Blog\">HG Blog</a>\n\n    <!-- outerTpl -->\n    <ul class=\"topnav\">\n        <!-- rowTpl -->\n        <li class=\"first\"><a href=\"media-hub/blog/test-section/\" title=\"Blog Test Section\">Blog Test Section</a>\n\n        <!-- outerTpl -->\n        <ul class=\"topnav\">\n            <!-- rowTpl -->\n            <li class=\"first\"><a href=\"media-hub/blog/test-section/test-post\" title=\"Test Post\">Test Post</a></li>\n            <!-- rowTpl -->\n            <li><a href=\"media-hub/blog/test-section/other-post\" title=\"Other Post\">Other Post</a></li>\n            <!-- rowTpl -->\n            <li class=\"last\"><a href=\"media-hub/blog/test-section/third-post\" title=\"Third Post\">Third Post</a></li>\n        </ul>\n\n        </li>\n        <!-- rowTpl -->\n        <li class=\"last\"><a href=\"media-hub/blog/archives\" title=\"Blog Archives\">Archives</a></li>\n    </ul>\n\n    </li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/fast-facts\" title=\"HG Fast Facts\">HG Fast Facts</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/publications\" title=\"HG Publications\">HG Publications</a></li>\n    <!-- rowTpl -->\n    <li class=\"last\"><a href=\"media-hub/media-contact\" title=\"Media Contact\">Media Contact</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Lightening a Hex Color Value in MODX with CSSSweet\nDESCRIPTION: This snippet demonstrates how to lighten a hex color value by 20% using the 'lighten' output modifier in CSSSweet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.lighten.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+color:lighten=`20`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Slideshow Snippet Usage in MODX\nDESCRIPTION: Demonstrates how to include a basic slideshow in a MODX template, displaying the first album using the jgSlideShow snippet. This example shows how to render a slideshow within a div wrapper.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/slideshow-manager/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div id=\"slider-wrapper\">\n\n [[!jgSlideShow?\n   &album_id=`1`\n ]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using input.autocomplete with object property (Uncached)\nDESCRIPTION: This example demonstrates how to use the uncached version of the input.autocomplete snippet with the `object` property.  The `object` property is a JSON object containing the configuration for fetching data from a MODX table. It specifies the table name (`sekftUSCities`), the field to sort by (`city_name`), and the fields to use for the value and label of the auto-complete options (`city_name`). The `[[!` syntax prevents the snippet from being cached.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.autocomplete.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!input.autocomplete?\n    &object=`{\"name\": \"sekftUSCities\", \"sortby\": \"city_name\", \"value\": \"city_name\", \"label\": \"city_name\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom JavaScript File in MODx Controller\nDESCRIPTION: This PHP snippet adds a custom JavaScript file to the MODx manager page.  It leverages the `$this->addJavascript()` method to include the specified JavaScript file in the manager interface. This allows for extending and customizing the manager functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\n$this->addJavascript($this->Sendex->config['jsUrl'] . 'mgr/misc/sendex.combo.js');\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin to Add Custom Field to MODX Manager Form\nDESCRIPTION: This PHP code adds a custom 'Home' field to the document form in MODX Revolution. It handles three events: OnDocFormPrerender for loading scripts/CSS, OnDocFormRender for rendering the field with appropriate values, and OnDocFormSave for processing the submitted data. The example stores the field value in the resource's longtitle property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/custom-manager-fields.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Register a form field to forms\n */\nswitch ($modx->event->name) {\n    case 'OnDocFormPrerender':\n        /* if you want to add custom scripts, css, etc, register them here */\n        break;\n    case 'OnDocFormRender':\n        $v = '';\n        if (isset($scriptProperties['resource'])) {\n            /* on the update screen, so set the value */\n            $v = $scriptProperties['resource']->get('longtitle');\n        } else {\n            /* on the create screen, so set the default */\n            $profile = $modx->user->getOne('Profile');\n            $v = $profile->get('address');\n        }\n        /* now do the HTML */\n        $fields = '\n<div class=\"x-form-item x-tab-item\">\n    <label class=\"x-form-item-label\" style=\"width:150px;\">Home</label>\n    <div class=\"x-form-element\">\n        <input type=\"text\" name=\"home\" value=\"'.$v.'\" class=\"x-form-text x-form-field\" />\n    </div>\n</div>\n';\n        $modx->event->output($fields);\nbreak;\n    case 'OnDocFormSave':\n        /* do processing logic here. */\n        $resource =& $scriptProperties['resource'];\n        $resource->set('longtitle',$_POST['home']);\n        $resource->save();\n        break;\n}\nreturn;\n```\n\n----------------------------------------\n\nTITLE: Basic Articles Content Template Structure in PHP\nDESCRIPTION: Default content structure for displaying articles listing and pagination in an Articles Container Template. This template uses MODX placeholders to render the list of articles and pagination controls.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/articles/creating-a-blog.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+articles]]\n\n[[+paging]]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Processor Classes\nDESCRIPTION: Basic class definitions extending MODX's resource processors for create and update operations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-4-processors.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass CopyrightedResourceCreateProcessor extends modResourceCreateProcessor {\n}\nclass CopyrightedResourceUpdateProcessor extends modResourceUpdateProcessor {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Socket in PHP.ini\nDESCRIPTION: This code snippet shows the PHP.ini configuration for setting the MySQL socket path. It includes settings for mysql, mysqli, and pdo_mysql extensions to ensure proper database connectivity.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmysql.default_socket=/path/to/my/mysql.sock\nmysqli.default_socket=/path/to/my/mysql.sock\npdo_mysql.default_socket=/path/to/my/mysql.sock\n```\n\n----------------------------------------\n\nTITLE: Using xPDO.getCount with Query Object in PHP\nDESCRIPTION: Illustrates using xPDO.getCount with a query object, highlighting potential issues with limit criteria. This example shows how the limit may be ignored when passing a query object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcount.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $modx->newQuery('States');\n$query->limit(10, 0);  // <-- probably you want to put this line AFTER the getCount\n\n$total_states = $modx->getCount('States',$query);\n\n// If you have 50 states, this may print 50, not 10!  Be careful!\n$modx->log(modX::LOG_LEVEL_ERROR, \"Total States: $total_states\");\n```\n\n----------------------------------------\n\nTITLE: Getting Most Visited Pages in MODX Revolution\nDESCRIPTION: This snippet retrieves a comma-delimited list of IDs for the 10 most visited pages within 10 levels of the web context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &parents=`0` &depth=`10` &limit=`10` &outputSeparator=`,`]]\n```\n\n----------------------------------------\n\nTITLE: Rendering Smarty Templates in MODX Revolution\nDESCRIPTION: Example of how MODX uses Smarty templating to generate Manager pages. This code assigns the $resource array to a Smarty variable and then fetches a template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/directory-structure.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->smarty->assign('resource',$resource); return $modx->smarty->fetch('resource/staticresource/update.tpl');\n```\n\n----------------------------------------\n\nTITLE: Album Wrapper Template in Cliche\nDESCRIPTION: This PHP template creates a wrapper for a specific gallery album in the Cliche component, using MODX and Cliche. It outputs a DIV container with a unique gallery ID and album items nested in it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"cliche galleryid-[[+id]]\" id=\"album-[[+id]]\">\n [[+items]]\n</div><!-- End #album-[[+id]] -->\n```\n\n----------------------------------------\n\nTITLE: parseTags Output Filter\nDESCRIPTION: An output filter that converts a comma-delimited list of tags into links to a specific resource with tag query parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/*\n * parseTags output filter\n * by Mark Hamstra (http://www.markhamstra.nl)\n * free to use / modify / distribute to your will\n */\nif ($input == '') { return ''; } // Output filters are also processed when the input is empty, so check for that.\n  $tags = explode(', ',$input); // Based on a delimiter of comma-space.\n  foreach ($tags as $key => $value) { // Process them individually\n    $output[] = '<a href=\"'.$modx->makeurl(9, '', array('tag' => $value)).'\">'.$value.'</a>';\n  }\n  return implode(', ',$output); // Delimit again with a comma-space\n```\n\n----------------------------------------\n\nTITLE: Using getVimeo with Placeholders in PHP\nDESCRIPTION: This example shows how to assign the output of getVimeo to a placeholder named 'videos' and then conditionally display it only if the placeholder is not empty.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getvimeo/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!getVimeo? &channel=`staffpicks` &id=`all` &tpl=`vimeoTpl` &toPlaceholder=`videos`]]\n[[+videos:notempty=`[[+videos]]`]]\n```\n\n----------------------------------------\n\nTITLE: Accessing ClientConfig Settings with Tag Syntax in MODX\nDESCRIPTION: This code snippet demonstrates how to access ClientConfig settings using MODX's placeholder tag syntax. The value of a ClientConfig setting can be retrieved by using the key with the ++ prefix in square brackets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/clientconfig/index.md#2025-04-17_snippet_0\n\nLANGUAGE: modx\nCODE:\n```\n[[++key]]\n```\n\n----------------------------------------\n\nTITLE: Checking Template Condition and Applying Stylesheet in PHP\nDESCRIPTION: This snippet uses the \"If\" extra in MODX to conditionally apply a stylesheet based on the current template. It checks if the template is 'mobile' and applies a specific CSS file, otherwise it uses a common layout CSS. The snippet requires the 'If' extra to function properly, and the 'modxSiteTemplate' variable must be provided to switch templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modmobile/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[If?\n    &subject=`[[+modxSiteTemplate]]`\n    &operand=`mobile`\n    &then=`<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/assets/templates/css/mobileLayout.css\" />`\n    &else=`<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/assets/templates/css/commonLayout.css\" />\n    <!--[if IE 6]>\n        <link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"/assets/templates/css/ie6.css\" />\n    <![endif]-->`\n]]\n```\n\n----------------------------------------\n\nTITLE: Getting MODX Version Data Method Definition\nDESCRIPTION: Method signature for retrieving MODX version information, returns an array containing version details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getversiondata.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getVersionData ()\n```\n\n----------------------------------------\n\nTITLE: Generating Google XML Sitemap with sitemapFriend in PHP\nDESCRIPTION: This snippet generates a Google XML sitemap using the sitemapFriend snippet in MODX Revolution. This can be used to improve SEO by submitting your sitemap to search engines. The 'type' parameter is set to 'xml'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[sitemapFriend? &type=`xml`]]\n```\n\n----------------------------------------\n\nTITLE: Using rightJoin in xPDOQuery Example\nDESCRIPTION: Example demonstrating how to use the rightJoin method to join a Box table with an Owner table in a database query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.rightjoin.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->rightJoin('Owner','Owner');\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Setting up Gitify with Composer\nDESCRIPTION: Commands to install Gitify dependencies using Composer and create a symbolic link for easier access. This creates a global command 'gitify' that can be used from anywhere.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/gitify\ncomposer install\nchmod +x Gitify; cd ~/.bin; ln -s ../gitify/Gitify gitify\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Prefix Setting\nDESCRIPTION: Example of the cache prefix format used to differentiate cache keys between multiple MODX installations using Memcache.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/memcache.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nyoursite_\n```\n\n----------------------------------------\n\nTITLE: Example of Setting DB Caching Option in xPDO with PHP\nDESCRIPTION: Example of using the setOption method to disable database caching by setting the xPDO::OPT_CACHE_DB option to false. This change only affects the current request and is not stored permanently.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.setoption.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->setOption(xPDO::OPT_CACHE_DB,false);\n```\n\n----------------------------------------\n\nTITLE: Default User Information Access in MODX\nDESCRIPTION: Shows how to access basic user information without using the userinfo modifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[!+modx.user.id]] - Prints the ID\n[[!+modx.user.username]] - Prints the username\n```\n\n----------------------------------------\n\nTITLE: Complex Option Retrieval with Properties Array in PHP\nDESCRIPTION: Demonstrates the priority order when checking for options across different sources: first in provided properties array, then in xPDO config, and finally falling back to default value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/configuration-accessors/getoption.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$props = array();\n$depth = $xpdo->getOption('depth',$props,10);\necho $depth; // prints 10\n\n$xpdo->setOption('depth',20);\n$depth = $xpdo->getOption('depth',$props,10);\necho $depth; // prints 20\n\n$props['depth'] = 30;\n$depth = $xpdo->getOption('depth',$props,10);\necho $depth; // prints 30\n```\n\n----------------------------------------\n\nTITLE: Defining Option Set for Panel Settings in JSON\nDESCRIPTION: This JSON snippet defines a comprehensive option set for a web panel's settings. It includes a variety of setting types such as text, image, file upload, textarea, select, and slider, allowing for dynamic customization of the panel’s appearance and behavior. Each setting is defined with properties such as name, label, type, value, and additional options where applicable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/settings.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"remote\": true,\n    \"settings\": [\n        {\n            \"name\": \"panel_class\",\n            \"label\": \"Panel Classes\",\n            \"type\": \"text\",\n            \"value\": \"col-6 col-sm-12\"\n        },\n        {\n            \"name\": \"logo\",\n            \"label\": \"Logo\",\n            \"type\": \"image\",\n            \"mediaSource\": \"site-assets\",\n            \"value\": \"assets/images/logo.svg\"\n        },\n        {\n            \"name\": \"nda-file\",\n            \"label\": \"Upload NDA\",\n            \"type\": \"file\",\n            \"mediaSource\": \"site-assets-files\",\n            \"value\": \"assets/files/contract.pdf\"\n        },\n        {\n            \"name\": \"slogan\",\n            \"label\": \"Slogan\",\n            \"type\": \"textarea\",\n            \"value\": \"Enter your slogan here\"\n        },\n        {\n            \"name\": \"panel_type\",\n            \"label\": \"Type of Panel\",\n            \"type\": \"select\",\n            \"options\": {\n                \"info\": \"Info Panel\",\n                \"warn\": \"Warning Panel\",\n                \"error\": \"Error panel\"\n            },\n            \"value\": \"info\"\n        },\n        {\n            \"name\": \"padding_top\",\n            \"label\": \"Top padding\",\n            \"type\": \"slider\",\n            \"min\": 0,\n            \"max\": 100,\n            \"step\": 10,\n            \"value\": 20\n        },\n        {\n            \"group\": \"CTA\",\n            \"settings\": [\n                {\n                    \"name\": \"cta_class\",\n                    \"label\": \"CTA Class\",\n                    \"type\": \"select\",\n                    \"options\": {\n                        \"danger\": \"Red CTA\",\n                        \"info\": \"Blue CTA\",\n                        \"default\": \"Default CTA\"\n                    },\n                    \"value\": \"default\"\n                },\n                {\n                    \"name\": \"show_cta\",\n                    \"label\": \"Show CTA\",\n                    \"type\": \"toggle\",\n                    \"value\": false\n                },\n                {\n                    \"name\": \"color\",\n                    \"label\": \"Text Color\",\n                    \"type\": \"colorswatch\",\n                    \"value\": \"black\",\n                    \"options\": [\n                        {\n                            \"value\": \"primary\",\n                            \"color\": \"blue\",\n                            \"label\": \"Primary\"\n                        },\n                        \"lightcoral\",\n                        \"black\",\n                        \"rgba(0,255,0,.5)\"\n                    ]\n                },\n                {\n                    \"name\": \"bg_color\",\n                    \"label\": \"Background COlor\",\n                    \"type\": \"colorpicker\",\n                    \"value\": \"white\",\n                    \"showAlpha\": true,\n                    \"options\": [\"lightcoral\", \"black\", \"white\"]\n                },\n                {\n                    \"name\": \"page\",\n                    \"label\": \"Linked Page\",\n                    \"type\": \"page\",\n                    \"value\": { \"id\": 1, \"url\": \"[[~1]]\" }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Default View Mode - MODX - Markdown\nDESCRIPTION: This configuration option enables users to set their default view mode in the MODX browser, facilitating easier access to resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[modx_browser_default_viewmode](building-sites/settings/modx_browser_default_viewmode)\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Columns from modx_doodles Table in Rowboat in PHP\nDESCRIPTION: This snippet showcases fetching only specific columns (id, name, description) with aliases through the Rowboat snippet. The &columns parameter is used to specify and control the subset of retrieved data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rowboat/rowboat.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!Rowboat?\n   &table=`modx_doodles`\n   &tpl=`myDoodle`\n   &columns=`{\"id\":\"\",\"name\":\"\",\"description\":\"desc\"}`\n   &limit=`10`\n   &where=`{\"name:LIKE\":\"%Test%\"}`\n   &sortBy=`name`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using xPDO::getTableName with Box Class Example in PHP\nDESCRIPTION: Example demonstrating how to use the getTableName method to output the table name for a Box object which has a corresponding table name of 'boxes'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.gettablename.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\necho $xpdo->getTableName('Box');\n```\n\n----------------------------------------\n\nTITLE: Converting maxDelimiter to Custom Template in BreadCrumb\nDESCRIPTION: Shows how to replace the maxDelimiter property from Breadcrumbs with a custom maxCrumbTpl chunk in BreadCrumb.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[[Breadcrumbs? &maxDelimiter=`(...)`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[BreadCrumb? &maxCrumbTpl=`myMaxCrumbTpl`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<li>(...)</li>\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Item Template for MODX Sitemap in PHP\nDESCRIPTION: This chunk is used for each result item in the HTML sitemap. It creates a list item with a link to the resource and a placeholder for nested items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<li>\n    <a href=\"[[+url]]\">[[+title]]</a>\n    [[+items]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Displaying Gallery Photos from a Specific Album in PHP\nDESCRIPTION: This snippet demonstrates how to use the Gallery snippet to display photos from an album named 'My Album'. It uses the default configuration without any customization.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery?\n    &album=`My Album`\n]]\n```\n\n----------------------------------------\n\nTITLE: Breadcrumb from Specific Parent Level in PHP\nDESCRIPTION: Utilizes the 'from' parameter with the UltimateParent snippet to start the breadcrumb from a specific ancestor, offering flexibility in breadcrumb path construction.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n[[BreadCrumb? &from=`[[UltimateParent? &topLevel=`2`]]` &to=`72`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX for Attributes Selector in MODX\nDESCRIPTION: JSON configuration for the migx_attributes TV, including formtabs, columns, and extended settings. This sets up the structure for selecting and customizing attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/create-selectable-and-sortable-attributes-list-for-whatever-you-need-it.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formtabs\": [{\n    \"MIGX_id\": 1,\n    \"caption\": \"Attribute\",\n    \"print_before_tabs\": \"0\",\n    \"fields\": [{\n        \"MIGX_id\": 4,\n        \"field\": \"active\",\n        \"caption\": \"Active\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"listbox\",\n        \"configs\": \"\",\n        \"sourceFrom\": \"config\",\n        \"sources\": \"[]\",\n        \"inputOptionValues\": \"yes==1||no==0\",\n        \"default\": \"\"\n      },\n      {\n        \"field\": \"attribute\",\n        \"caption\": \"Attribute\",\n        \"inputTVtype\": \"hidden\",\n        \"MIGX_id\": 1\n      },\n      {\n        \"field\": \"title\",\n        \"caption\": \"Title\",\n        \"inputTVtype\": \"hidden\",\n        \"MIGX_id\": 2\n      },\n      {\n        \"field\": \"icon\",\n        \"caption\": \"Icon\",\n        \"inputTVtype\": \"hidden\",\n        \"MIGX_id\": 3\n      },\n      {\n        \"MIGX_id\": 5,\n        \"field\": \"comment\",\n        \"caption\": \"Comment\",\n        \"description\": \"\",\n        \"description_is_code\": \"0\",\n        \"inputTV\": \"\",\n        \"inputTVtype\": \"textarea\",\n        \"configs\": \"\",\n        \"sourceFrom\": \"config\",\n        \"sources\": \"[]\",\n        \"inputOptionValues\": \"\",\n        \"default\": \"\"\n      }\n    ]\n  }],\n  \"contextmenus\": \"\",\n  \"actionbuttons\": \"\",\n  \"columnbuttons\": \"\",\n  \"filters\": \"[]\",\n  \"extended\": {\n    \"migx_add\": \"\",\n    \"formcaption\": \"\",\n    \"update_win_title\": \"\",\n    \"win_id\": \"\",\n    \"maxRecords\": \"\",\n    \"multiple_formtabs\": \"\",\n    \"extrahandlers\": \"this.handleColumnSwitch\",\n    \"packageName\": \"\",\n    \"classname\": \"\",\n    \"task\": \"\",\n    \"getlistsort\": \"\",\n    \"getlistsortdir\": \"\",\n    \"use_custom_prefix\": \"0\",\n    \"prefix\": \"\",\n    \"grid\": \"\",\n    \"gridload_mode\": 1,\n    \"check_resid\": 1,\n    \"check_resid_TV\": \"\",\n    \"join_alias\": \"\",\n    \"has_jointable\": \"yes\",\n    \"getlistwhere\": \"\",\n    \"joins\": \"\",\n    \"cmpmaincaption\": \"\",\n    \"cmptabcaption\": \"\",\n    \"cmptabdescription\": \"\",\n    \"cmptabcontroller\": \"\",\n    \"winbuttons\": \"\",\n    \"onsubmitsuccess\": \"\",\n    \"submitparams\": \"\"\n  },\n  \"columns\": [{\n      \"header\": \"Attribute\",\n      \"dataIndex\": \"attribute\",\n      \"MIGX_id\": 1\n    },\n    {\n      \"header\": \"Title\",\n      \"dataIndex\": \"title\",\n      \"MIGX_id\": 2\n    },\n    {\n      \"header\": \"Icon\",\n      \"dataIndex\": \"icon\",\n      \"renderer\": \"this.renderImage\",\n      \"MIGX_id\": 3\n    },\n    {\n      \"MIGX_id\": 2,\n      \"header\": \"Active\",\n      \"dataIndex\": \"active\",\n      \"width\": \"\",\n      \"sortable\": \"false\",\n      \"show_in_grid\": 1,\n      \"renderer\": \"this.renderSwitchStatusOptions\",\n      \"clickaction\": \"switchOption\",\n      \"selectorconfig\": \"\",\n      \"renderoptions\": [{\n          \"MIGX_id\": 1,\n          \"name\": \"published\",\n          \"value\": 1,\n          \"clickaction\": \"\",\n          \"handler\": \"\",\n          \"image\": \"assets\\/components\\/migx\\/style\\/images\\/tick.png\"\n        },\n        {\n          \"MIGX_id\": 2,\n          \"name\": \"unpublished\",\n          \"value\": \"0\",\n          \"clickaction\": \"\",\n          \"handler\": \"\",\n          \"image\": \"assets\\/components\\/migx\\/style\\/images\\/cross.png\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: FormIt Configuration With FormSave Hook\nDESCRIPTION: Enhanced FormIt snippet call that includes the FormSave hook to save form submissions to database, while maintaining existing validation and email functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formsave/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n   &hooks=`recaptcha,spam,FormSave,email,redirect`\n   &emailTpl=`MyEmailChunk`\n   &emailTo=`user@example.com`\n   &redirectTo=`123`\n   &fsFormTopic=`contact`\n   &validate=`name:required,\n      email:email:required,\n      subject:required,\n      text:required:stripTags,\n      numbers:required,\n      colors:required`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using the Canonical Snippet in MODX Revolution\nDESCRIPTION: Places a canonical link tag in the head section of HTML pages for Symlinks to prevent duplicate content penalties from search engines. The snippet only executes for Symlinks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/canonical/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[[!Canonical]]\n```\n\n----------------------------------------\n\nTITLE: Using toArray() with Key Prefix in PHP\nDESCRIPTION: Example showing how to use toArray() with a key prefix. It sets object properties and then calls toArray() with a 'dev_' prefix, resulting in an array with prefixed keys.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/toarray.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$object->set('name','Mark');\n$object->set('version','1.0');\n$a = $object->toArray('dev_');\nprint_r($a);\n// prints \"Array ( [dev_name] => Mark [dev_version] => 1.0 )\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Activation Email Template in PHP for virtuNewsletter\nDESCRIPTION: Email template resource used for subscription confirmation emails. Contains placeholders for subscriber details and activation link. This template is triggered when a user subscribes to a newsletter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<p>Hello [[+virtuNewsletter.email.name:default=`[[+virtuNewsletter.email.email]]`]],</p>\n<p>Thank you for your subscription.</p>\n<p>To complete this, please click this link to activate your account:\n    <a href=\"[[~62?\n        &subid=`[[+virtuNewsletter.email.subid]]`\n        &h=`[[+virtuNewsletter.email.hash]]`\n        &act=`subscribe`\n        &scheme=`full`]]\">\n        target=\"_blank\">activate</a>.\n</p>\n<p>You can unsubscribe back later if it is required.</p>\n<p> </p>\n<p>Regards,</p>\n<p><a href=\"http://www.example.com\" target=\"_blank\">Example.com</a></p>\n```\n\n----------------------------------------\n\nTITLE: Formatting Dates with Full Weekday and Month Names\nDESCRIPTION: Example of formatting a date to include the full weekday name, full month name, day of month, and year.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/date-formats.md#2025-04-17_snippet_2\n\nLANGUAGE: markup\nCODE:\n```\n[[*createdon:strtotime:date=`%A, %B %d, %Y`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring phpThumb Error Text Color in MODX\nDESCRIPTION: This setting defines the text color for phpThumb error messages. It accepts a hexadecimal color value without the '#' symbol. The default value is set to red (FF0000).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/phpthumb_error_textcolor.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: phpThumb Error Text Color\n**Type**: textfield\n**Default**: FF0000\n**Available In:** 2.0.8+\n```\n\n----------------------------------------\n\nTITLE: Carga de Clases en MODX usando PHP\nDESCRIPTION: Este snippet demuestra cómo cargar una clase en MODX utilizando el método loadClass(). Se utiliza un punto como separador de directorios en la ruta de la clase.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/directory-structure.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->loadClass('transport.modPackageBuilder');\n```\n\n----------------------------------------\n\nTITLE: Logging User Logout Information in MODX\nDESCRIPTION: This PHP snippet demonstrates how to use the OnBeforeManagerLogout event to log information about the user logging out, including their ID and the contexts they're logging out from.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforemanagerlogout.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeManagerLogout':\n        $modx->log(modX::LOG_LEVEL_ERROR, 'User with id'.$user->get('id').' logged out in context '.$loginContext.' and also in these'.print_r($addContexts));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Output Modifier with Tag Properties in MODX\nDESCRIPTION: Shows how to use an output modifier with additional tag properties in a getResources call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources:default=`Sorry - nothing matched your search.`?\n    &tplFirst=`blogTpl`\n    &parents=`2,3,4,8`\n    &tvFilters=`blog_tags==%[[!tag:htmlent]]%`\n    &includeTVs=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Submitting MODx Window Form\nDESCRIPTION: Example showing how to manually trigger form submission in a MODx.Window component with an optional close parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.window.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = Ext.getCmp('my-window-id');\nw.submit(true); /* submit and then close window */\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Thumb Far - MODX - Markdown\nDESCRIPTION: This configuration defines the aspect ratio handling method used by PHPThumb, enabling control over how images are resized and cropped.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_22\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_far](building-sites/settings/phpthumb_far)\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Variables using ClientConfig and MODX Placeholders\nDESCRIPTION: This CSS snippet demonstrates how to use MODX placeholders and ClientConfig settings to dynamically adjust typography and color values within site styles. It highlights how to integrate user-customizable settings into CSS using defined MODX placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fx2themebase/fx2.how-to-use-fx2/for-theme-authors.md#2025-04-17_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nh1, h2, h3, h4, h5, h6 {\n    font-family: \"[[++header_font:default=`[[++body_font]]`:replace=`+== `]]\", Helvetica, Arial, sans-serif;\n    color: #[[++header_font_color]];\n}\nh1 small, h2 small, h3 small, h4 small, h5 small, h6 small {\n    color: #[[++header_font_color:lighten=`226`]];\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Resource Objects in MODX Snippet\nDESCRIPTION: This snippet fetches resource objects in MODX based on published status and ID. It checks that each object is an instance of modResource to prevent errors during template rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nforeach ($ids as $key => $value) {\n  $resource = $modx->getObject('modResource',array(\n    'published' => 1,\n    'id' => $value));\n  if ($resource instanceof modResource) {\n    // We are sure we have a resource here, so let's do something!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing jQuery Tabs with Wayfinder\nDESCRIPTION: Implementation of jQuery tabs using Wayfinder to dynamically generate tab links. This creates tabs from resources starting at ID 123 with a depth of 1 level.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<script type=\"text/javascript\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\"tabs\">\n  <ul>\n    [[Wayfinder? &startId=`123` &level=`1` &rowTpl=`myRowTpl`]]\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Class-Based Dashboard Widget Implementation\nDESCRIPTION: Advanced implementation of a dashboard widget using an object-oriented approach by extending the modDashboardWidgetInterface abstract class. Demonstrates custom rendering with a version property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/client-proofing/dashboards/widget-types/file.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass modDashboardWidgetHelloWorld extends modDashboardWidgetInterface {\n    public $version = '1.0';\n\n    public function render() {\n        $o = 'Hello, World! Version: '.$this->version;\n        return $o;\n    }\n}\nreturn 'modDashboardWidgetHelloWorld';\n```\n\n----------------------------------------\n\nTITLE: New Features in TinyMCE Rich Text Editor 2.0.0\nDESCRIPTION: Lists the new features and changes introduced in version 2.0.0 of the TinyMCE Rich Text Editor for MODX Revolution. Includes upgrades to TinyMCE 5, MODX 3 compatibility, and various plugin refactoring.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tinymcerte/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Upgrade TinyMCE to 5\n- MODX 3 compatibility\n- Refactored `modxlink` TinyMCE plugin to use the nested `link_list` option\n- Refactored `modximage` TinyMCE plugin\n- Recursive merge the external config with the config\n- Remove the deprecated `file_browser_callback` and use the `file_picker_callback`\n- Add `link_list_enable` system setting\n- Allow direct JSON based `style_formats` items\n- MODX `skintool.json` for [TinyMCE 5 Skin Tool](http://skin.tiny.cloud/t5/)\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple and Enhanced Fred Elements with HTML and Twig\nDESCRIPTION: Examples showing both a simple Fred Element with basic data attributes and an enhanced version using Twig conditionals and dynamic classes. Demonstrates the use of data-fred-name attributes for editable content and template variables for dynamic rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/markup.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Simple Element -->\n<div class=\"panel\">\n    <p data-fred-name=\"header_text\">Default Value</p>\n    <img\n        src=\"http://via.placeholder.com/450x150\"\n        data-fred-name=\"header_image\"\n    />\n</div>\n\n<!-- Enhanced Element -->\n<div class=\"panel {{ panel_class }}\">\n    <p data-fred-name=\"panel_text\">Default Value</p>\n\n    {% if cta_link %}\n    <a class=\"btn {{ cta_class }}\" href=\"{{ cta_link }}\">{{ cta_text }}</a>\n    {% endif %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: SELECT Binding for Dropdown List Template Variables\nDESCRIPTION: SQL query using @SELECT binding to populate a dropdown template variable with name-value pairs from a custom database table. This is used to create dynamic option lists from database content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n@SELECT name, value FROM your_table\n```\n\n----------------------------------------\n\nTITLE: Implementing TV Input Controller Class in PHP\nDESCRIPTION: Input controller class that handles the rendering of custom TV input interface in the MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-tvs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif(!class_exists('TemplateSelectInputRender')) {\n    class TemplateSelectInputRender extends modTemplateVarInputRender {\n        public function getTemplate() {\n            return $this->modx->getOption('core_path').'components/ourtvs/tv/input/tpl/templateselect.tpl';\n        }\n        public function process($value,array $params = array()) {\n        }\n    }\n}\nreturn 'TemplateSelectInputRender';\n```\n\n----------------------------------------\n\nTITLE: Album Cover Template in Cliche\nDESCRIPTION: This PHP template displays an album cover with a link to the album, showcasing the image thumbnail. Dependencies include MODX and the Cliche component. Key parameters include image attributes and album identifiers. Outputs an HTML DL element with image data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<dl class=\"item\">\n    <dt class=\"album-icon\">\n        <a title=\"[[+albumname]]\" href=\"[[+url]]\">\n            <img width=\"[[+width]]\" height=\"[[+height]]\" title=\"[[+albumname]]\" alt=\"[[+description]]\" class=\"attachment-thumbnail\" src=\"[[+thumbnail]]\"/>\n        </a>\n    </dt>\n</dl><!-- End .item -->\n```\n\n----------------------------------------\n\nTITLE: Combobox with Database Object and City Filtering in PHP\nDESCRIPTION: Shows filtering cities by state ID using a database object and filter parameter\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.combobox.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!input.combobox?\n    &object=`{\"name\": \"sekftUSCities\", \"sortby\": \"city_name\", \"value\": \"city_name\", \"label\": \"city_name\"}`\n    &filter=`{\"field\": \"state_id\", \"value\": \"62\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Adding Unsubscribe and Web View Links to Newsletter Templates in PHP\nDESCRIPTION: Code snippet for including unsubscribe and web view links in newsletter templates. Uses placeholders that will be populated with subscriber-specific data when emails are sent.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<!-- unsubscribe link -->\n<a href=\"[[~62?\n    &subid=`[[+virtuNewsletter.email.subid]]`\n    &h=`[[+virtuNewsletter.email.hash]]`\n    &act=`unsubscribe`\n    &scheme=`full`\n]]\">\nUnsubscribe\n</a>\n<!-- read the newsletter on the website -->\n<a href=\"[[~63?\n    &scheme=`full`\n    &newsid=`[[+virtuNewsletter.email.newsid]]`\n    &e=`[[+virtuNewsletter.email.email]]`\n    &h=`[[+virtuNewsletter.email.hash]]`\n]]\">read this newsletter on the website</a>\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Sitemap with sitemapFriend in PHP\nDESCRIPTION: This snippet generates an HTML sitemap using the sitemapFriend snippet in MODX Revolution. This format is user-friendly and can be displayed on your website for navigation purposes. The 'type' parameter is set to 'html'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[sitemapFriend? &type=`html`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Hit Count with PHP Placeholder in MODX\nDESCRIPTION: This snippet shows how to display the hit count for a page using a MODX placeholder. It must be present on the page you wish to track.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hitspage/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!+hitss]]\n```\n\n----------------------------------------\n\nTITLE: Defining Current Crumb Template in PHP for MODX\nDESCRIPTION: This snippet defines the default output format for the current breadcrumb item using a simple list item. It retrieves the pagetitle placeholder to display the title of the current page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/breadcrumb.currentcrumbtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li>[[+pagetitle]]</li>\n```\n\n----------------------------------------\n\nTITLE: Default directoryTpl for FileLister in MODX Revolution\nDESCRIPTION: This code snippet shows the default HTML template used for displaying directories in the FileLister output. It creates a table row with a single cell spanning three columns, containing the directory link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/filelister/directorytpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<tr class=\"[[+cls]]\">\n    <td colspan=\"3\" class=\"feo-dirname\">[[+link]]</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Linking RSS Feed in HTML (PHP)\nDESCRIPTION: This code snippet enables the browser to recognize the RSS feed by including a link tag in the HTML header. It facilitates easy subscription for users.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/getresources.examples/building-a-rss-feed.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<link rel=\"alternate\" type=\"application/rss+xml\" title=\"Follow this website with RSS\" href=\"[[~52]]\" />\n```\n\n----------------------------------------\n\nTITLE: Using leftJoin to Query Related Data\nDESCRIPTION: Example showing how to use leftJoin to select all Boxes and their related Owner names. The query joins the Box and Owner tables using a left join.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.leftjoin.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->select($xpdo->getSelectColumns('Box'));\n$query->select(array(\n  'Owner.name'\n));\n$query->leftJoin('Owner','Owner');\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: getResourceField with UltimateParent Snippet\nDESCRIPTION: This example shows how to retrieve the introtext field from the ultimate parent resource. It requires the UltimateParent snippet to be installed and uses its output as the 'id' parameter for getResourceField.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresourcefield/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[getResourceField? &id=`[[UltimateParent]]` &field=`introtext`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources Tagged with a Specific Term using getResourcesTag in PHP\nDESCRIPTION: This snippet uses getResourcesTag to display all pages tagged with a given term. It searches the entire site and uses a custom template for formatting results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getResourcesTag? &parents=`0` &tagKey=`my_tags` &tpl=`result_tpl`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Tags for a Specific Page using toLinks in PHP\nDESCRIPTION: This snippet uses toLinks to display all tags associated with a given page. It retrieves tags from a Template Variable and links them to a specified target page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!toLinks? &items=`[[*my_tags]]` &target=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Update From Grid Processor in PHP\nDESCRIPTION: This PHP class handles updating a Doodle from the grid's inline editing. It extends the DoodleUpdateProcessor and parses the incoming JSON data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once (dirname(__FILE__).'/update.class.php');\nclass DoodleUpdateFromGridProcessor extends DoodleUpdateProcessor {\n    public function initialize() {\n        $data = $this->getProperty('data');\n        if (empty($data)) return $this->modx->lexicon('invalid_data');\n        $data = $this->modx->fromJSON($data);\n        if (empty($data)) return $this->modx->lexicon('invalid_data');\n        $this->setProperties($data);\n        $this->unsetProperty('data');\n        return parent::initialize();\n    }\n}\nreturn 'DoodleUpdateFromGridProcessor';\n```\n\n----------------------------------------\n\nTITLE: Adding xPDO Package\nDESCRIPTION: This snippet adds a package to xPDO. It allows the use of xPDO's functions with a custom model. It takes the package name ('storefinder') and the path to the model directory as parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('storefinder',$base_path.'model/');\n```\n\n----------------------------------------\n\nTITLE: MIGX Configuration - layout_1 Columns\nDESCRIPTION: JSON configuration for columns in the first MIGX layout, defining headers, widths, and rendering options for images\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/varying-layout-boxes/configurator-version.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"header\": \"Row Format\",\n  \"width\": \"30\",\n  \"sortable\": \"true\",\n  \"dataIndex\": \"MIGX_formname\"\n}, {\n  \"header\": \"First\",\n  \"width\": \"160\",\n  \"sortable\": \"false\",\n  \"dataIndex\": \"cell_1_image\",\n  \"renderer\": \"this.renderImage\"\n}, {\n  \"header\": \"Second\",\n  \"width\": \"160\",\n  \"sortable\": \"false\",\n  \"dataIndex\": \"cell_2_image\",\n  \"renderer\": \"this.renderImage\"\n}, {\n  \"header\": \"Third\",\n  \"width\": \"160\",\n  \"sortable\": \"false\",\n  \"dataIndex\": \"cell_3_image\",\n  \"renderer\": \"this.renderImage\"\n}]\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX TV for Attributes Builder in MODX\nDESCRIPTION: JSON configuration for the formtabs and grid columns of the migx_attributes_builder TV. This sets up the structure for creating attributes with titles and icons.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/create-selectable-and-sortable-attributes-list-for-whatever-you-need-it.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"caption\": \"Attribute\",\n  \"fields\": [{\n      \"field\": \"attribute\",\n      \"caption\": \"Attribute\"\n    },\n    {\n      \"field\": \"title\",\n      \"caption\": \"Title\"\n    },\n    {\n      \"field\": \"icon\",\n      \"caption\": \"Icon\",\n      \"inputTVtype\": \"image\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"header\": \"Attribute\",\n    \"width\": \"50\",\n    \"sortable\": \"true\",\n    \"dataIndex\": \"attribute\"\n  },\n  {\n    \"header\": \"Title\",\n    \"width\": \"50\",\n    \"sortable\": \"true\",\n    \"dataIndex\": \"title\"\n  },\n  {\n    \"header\": \"Image\",\n    \"width\": \"50\",\n    \"sortable\": \"false\",\n    \"dataIndex\": \"icon\",\n    \"renderer\": \"this.renderImage\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Using prettyNumbers as an Output Filter in MODX\nDESCRIPTION: Basic usage of prettyNumbers as an output filter to format a placeholder value containing a number.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.prettynumbers.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+count:prettyNumbers]]\n```\n\n----------------------------------------\n\nTITLE: Full Settings Import for CTA Button Element\nDESCRIPTION: Demonstrates how to import a complete settings object using the fred-import key to reference a CTA settings configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/import.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"settings\": {\n        \"fred-import\": \"cta_settings\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing position Field in XML Schema\nDESCRIPTION: This XML snippet outlines the removal of the 'position' field from the database schema.  This step is crucial for removing drag and drop functionality, as it's used for sorting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bxrextra/index.md#2025-04-17_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n\"in core/components/yourcomponent/model/schema/yourcomponent.mysql.schema.xml\\n    - remove field with \\\"position\\\" key\"\n```\n\n----------------------------------------\n\nTITLE: Overriding link_tag_scheme in MODX Link Tags\nDESCRIPTION: Example of how to override the default link_tag_scheme system setting for an individual link by passing the scheme parameter. This allows you to control URL generation on a per-link basis.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/link_tag_scheme.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[~123? &scheme=`full`]]\n```\n\n----------------------------------------\n\nTITLE: Get User Email from Web Context (PHP)\nDESCRIPTION: This snippet retrieves the user's email address from their profile within the 'web' context.  It handles cases where the user or profile might not exist. It also forces the loading of settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getuser.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getUser('web', true);\nif (!$user) return '';\n$profile = $user->getOne('Profile');\nif (!$profile) return '';\nprint $profile->get('email');\n```\n\n----------------------------------------\n\nTITLE: Using Cachebuster with a Placeholder (PHP)\nDESCRIPTION: This PHP snippet shows how to configure the Cachebuster to return its value into a specified placeholder instead of directly returning a value, allowing for more flexible template handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cachebuster/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[$smartcache? &placeholder=`cbtime`]]\n```\n\n----------------------------------------\n\nTITLE: Integrating aSES Snippet in MODX Resource\nDESCRIPTION: This PHP snippet is used to integrate the Amazon SES mailing functionality within a MODX resource. The snippet call ensures that the aSES package processes the mailing list logic when the resource is accessed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/amazonses-mailing-list/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!aSES]]\n```\n\n----------------------------------------\n\nTITLE: Wayfinder Menu Item SiteEditor Configuration\nDESCRIPTION: Demonstrates configuring SiteEditor for editing menu item text using Wayfinder placeholders and specifying the specific resource and field to edit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siteeditor/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[+wf.linktext:siteEditorField=`resource=[[+wf.docid]]&field=pagetitle`]]\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Chunk for Fancybox Image Display in MODX\nDESCRIPTION: This HTML chunk defines the structure for displaying Fancybox images. It uses phpThumbOf for creating thumbnails and sets up the Fancybox link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/fancybox-images-with-seperate-placeholders-in-richtext-content.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[+image]]\" class=\"fancyimg\">\n    <img src=\"[[+image:phpthumbof=`w=100&h=75&zc=1`]]\" alt=\"\"/>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Fatal Error for Class xPDODriver\\_ in PHP\nDESCRIPTION: A PHP fatal error occurs when MODX configuration files are misconfigured with placeholders instead of real values. Verify `core/config/config.inc.php` to fix mangled entries, which should contain actual database and driver details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nFatal error: Class 'xPDODriver_' not found in /path/to/webroot/core/xpdo/xpdo.class.php on line 1823\n```\n\n----------------------------------------\n\nTITLE: Loading MODX Class\nDESCRIPTION: Example of loading a MODX class using dot notation to navigate subdirectories within the core model\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/directory-structure.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->loadClass('transport.modPackageBuilder');\n```\n\n----------------------------------------\n\nTITLE: Retrieving ModX Startup Scripts Example\nDESCRIPTION: Demonstrates how to get all registered startup scripts and store them in an array variable using the getRegisteredClientStartupScripts method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getregisteredclientstartupscripts.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$startupScripts = $modx->getRegisteredClientStartupScripts();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Profile Snippet in MODX\nDESCRIPTION: Demonstrates how to use the Profile snippet to set user profile fields as placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.profile.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Box Objects Collection in PHP\nDESCRIPTION: Example of using xPDO.getCollection to retrieve a collection of Box objects with a specific width.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollection.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$boxes = $xpdo->getCollection('Box',array(\n   'width' => 40,\n));\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Before BODY End in MODX\nDESCRIPTION: These examples show how to register JavaScript files right before the closing BODY tag using the regClientScript method. This is often used for analytics scripts or JavaScript that needs to run after the page content has loaded.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/register-assets.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientScript('assets/js/footer.js');\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientScript('//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"');\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientScript('http://code.jquery.com/jquery-latest.min.js');\n```\n\n----------------------------------------\n\nTITLE: xPDOValidator HasMessages Method Signature\nDESCRIPTION: Method signature for the hasMessages() function that returns a boolean indicating if validation messages exist.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.hasmessages.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nboolean hasMessages ()\n```\n\n----------------------------------------\n\nTITLE: PHP Box Objects Iterator Example\nDESCRIPTION: Example demonstrating how to retrieve and iterate over Box objects with a specific width criteria.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getiterator.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$boxes = $xpdo->getIterator('Box',array(\n   'width' => 40,\n));\nforeach ($boxes as $idx => $box) {\n    echo \"Box #{$idx} has an id of {$box->get('id')} and a width of {$box->get('width')}\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Snippet in HTML Dashboard Widget\nDESCRIPTION: This example shows how to call a custom snippet within an HTML Dashboard Widget. Note that snippets in this context have no 'active resource', so references to $modx->resource may cause issues.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/dashboards/widget-types/html.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[MyDashboardSnippet]]\n```\n\n----------------------------------------\n\nTITLE: Using Events in MODX Template\nDESCRIPTION: This snippet shows how to invoke the 'eventsGenerator' snippet within the MODX framework to populate an events calendar. The 'eventsCalendar2' call is used to integrate the generated events. Dependencies include the 'eventsCalendar2' snippet within MODX. The purpose is to generate an events calendar dynamically with the events from 'eventsGenerator'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.generating-events.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n[[!eventsCalendar2?\n  &events=`[[!eventsGenerator]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific YouTube Videos with getYoutube\nDESCRIPTION: This example retrieves only the specified YouTube videos by their IDs and displays them using the 'videoTpl' chunk template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getyoutube/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!getYoutube? &mode=`video` &video=`_X-jSkrqYzk,FoRRybrFR0c,yXBPbnv1H-U` &tpl=`videoTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Using printdiv Snippet in MODX\nDESCRIPTION: This code shows how to use the printdiv snippet to create a link that opens a printer-friendly version of the content within the div with the ID 'test'.  The `divID` and `linkText` parameters are required.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/seksitetools/seksitetools.printdiv.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[printdiv? &divID=`test` &linkText=`link`]]\n<div id=\"test\">test data</div>\n```\n\n----------------------------------------\n\nTITLE: Profile Snippet with Custom User and Prefix in MODX\nDESCRIPTION: Shows how to use the Profile snippet with a specific user and custom placeholder prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.profile.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile? &user=`marksmith` &prefix=`user.`]]\n```\n\n----------------------------------------\n\nTITLE: Rendering Gallery TV Image\nDESCRIPTION: Demonstrates how to output a Gallery TV in MODX content by using standard MODX tag syntax for a TV named 'photo'\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.setting-up-the-galleryitem-tv.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*photo]]\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Page Linking\nDESCRIPTION: Example of creating MODX-format page links using Fred attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"fred.html\" data-fred-link-type=\"page\" data-fred-link-page=\"2\">Fred</a>\n```\n\n----------------------------------------\n\nTITLE: MODX Manager Login Template Path\nDESCRIPTION: File path for the default manager login template that can be customized\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/custom-manager-themes.md#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmanager/templates/default/security/login.tpl\n```\n\n----------------------------------------\n\nTITLE: Defining the modX.removeEventListener Method Syntax in PHP\nDESCRIPTION: This snippet shows the method signature for the removeEventListener method which takes an event name and an optional plugin ID parameter to remove an event from the eventMap.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.removeeventlistener.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean removeEventListener (string $event, [integer $pluginId = 0])\n```\n\n----------------------------------------\n\nTITLE: Reading Messages from Registry\nDESCRIPTION: Demonstrates reading messages from a topic with specific polling and message limit options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$msgs = $modx->registry->food->read(array(\n    'poll_limit' => 1,\n    'msg_limit' => 5\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing jQuery Tabs with FastField or pdoTools\nDESCRIPTION: Implementation of jQuery tabs using FastField or pdoTools extended parser. This uses the # tag syntax to efficiently retrieve resource fields without separate snippet calls.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<script type=\"text/javascript\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\"tabs\">\n  <ul>\n    <li><a href=\"[[~92]]\">[[#92.pagetitle]]</a></li>\n    <li><a href=\"[[~546]]\">[[#546.pagetitle]]</a></li>\n    <li><a href=\"[[~123]]\">[[#123.pagetitle]]</a></li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: FormIt2db/db2FormIt - Saving xPDO Objects\nDESCRIPTION: This snippet is responsible for saving xPDO objects from FormIt submissions. It is invoked as a hook in the FormIt call, allowing data to be stored in the database. Required dependencies include MODX and the FormIt plugin.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit2db/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Hook for saving xPDO object\n$object = new xPDOObject($submittedData);\n$object->save();\n?>\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Class for the Custom Resource\nDESCRIPTION: This is the initial PHP class generated for the custom resource.  It extends the modResource class, inheriting its properties and methods. This basic class will be further customized in subsequent steps to add specific functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CopyrightedResource extends modResource {\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Parent ID Property\nDESCRIPTION: Code that adds an 'id' property to allow specifying which parent resource's children to display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$id = (int)$modx->getOption('id',$scriptProperties,390);\n```\n\n----------------------------------------\n\nTITLE: Text Field with Different Template\nDESCRIPTION: This snippet demonstrates how to set a custom template for a required text field in MODX, specifying outer templates and required attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`text`\n    &req=`1`\n    &name=`email`\n    &tpl=`aDifferentTemplate`\n    &outer_tpl=`ADifferentOuterTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Specifying URL Scheme in MODX Resource Link Tag\nDESCRIPTION: This code demonstrates how to use the scheme parameter in a MODX Resource link tag to generate a URL with HTTPS protocol. The tag will render the URL for Resource ID 123 using HTTPS regardless of the current system or context settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/resources/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[~123? &scheme=`https`]]\n```\n\n----------------------------------------\n\nTITLE: Complex Nested Menu with Custom Templating\nDESCRIPTION: Advanced menu generation with custom inner and parent row templates, child counting, and inline template definitions for maximum flexibility.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoMenu.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[pdoMenu?\n    &parents=`0`\n    &level=`2`\n    &tplInner=`@INLINE [[+wrapper]]`\n    &tplParentRow=`@INLINE <li[[+classes]]><a href=\"[[+link]]\" [[+attributes]]>[[+menutitle]]</a> ([[+children]])</li>[[+wrapper]]`\n    &countChildren=`1`]]\n```\n\n----------------------------------------\n\nTITLE: mxfbTvFormList Snippet with Context Parameter\nDESCRIPTION: This snippet shows how to call the mxfbTvFormList snippet with a specific context.  It demonstrates how to filter forms based on their context setting. The snippet returns a list of forms for the specified context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxformbuilder/mxformbuilder.create-form-list-in-tv.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"$modx->runSnippet('mxfbTvFormList', _array('context'=>'web')_ )\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Cache for pdoPage in MODX - PHP\nDESCRIPTION: This snippet enables caching for the pdoPage output for 30 minutes. It specifies both cache parameters and a maximum page limit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &tpl=`@INLINE <p>[[+idx]] <a href=\"/[[+uri]]\">[[+pagetitle]]</a></p>`\n    &parents=`0`\n    &pageLimit=`7`\n    &cache=`1`\n    &cacheTime=`1800`\n]]\n[[!+page.nav]]\n```\n\n----------------------------------------\n\nTITLE: Displaying comments from a specific thread with QuipRss\nDESCRIPTION: This code snippet shows how to retrieve comments specifically from a thread named 'mythread' using the QuipRss snippet. It uses the `type` and `thread` properties to filter comments. The snippet will only display comments associated with the specified thread.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiprss.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\n[[!QuipRss? &type=`thread` &thread=`mythread`]]\n\n```\n\n----------------------------------------\n\nTITLE: Cached If Snippet Call for Resource Fields\nDESCRIPTION: Example of using the cached If snippet call for checking resource fields or template variables that don't change before the cache does.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/if/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[If?\n   &subject=`[[*hidemenu]]`\n   &operator=`EQ`\n   &operand=`1`\n   &then=`This resource is not visible in the menu.`\n   &else=`This resource shows up in the menu in spot [[*menuindex]].`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Header for MODX\nDESCRIPTION: This HTML snippet sets up the document header with conditional comments for Internet Explorer versions less than 9, includes meta tags, and links CSS and JavaScript files. It depends on template variables and settings from MODX such as bx.x-ua-compatible, site_name, and bx.meta_desc.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-head-open.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--[if lt IE 7]>      <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\"> <![endif]-->\n<!--[if IE 7]>         <html class=\"no-js lt-ie9 lt-ie8\"> <![endif]-->\n<!--[if IE 8]>         <html class=\"no-js lt-ie9\"> <![endif]-->\n<!--[if gt IE 8]><!-->\n<html class=\"no-js\">\n<!--<![endif]-->\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"[[++bx.x-ua-compatible]]\">\n  <title>[[++site_name]] - [[*pagetitle]]</title>\n  <meta name=\"description\" content=\"[[++bx.meta_desc]]\">\n  <meta name=\"viewport\" content=\"[[++bx.meta_viewport]]\">\n\n  [[++bx.show_comments:if=`[[++bx.show_comments]]`:eq=`1`:then=`\n  <!-- Place favicon.ico and apple-touch-icon.png in the root directory -->\n  `]]\n  <link rel=\"stylesheet\" href=\"[[++bx.css_normalize_path]]\">\n  <link rel=\"stylesheet\" href=\"[[++bx.css_path]]\">\n  <script src=\"[[++bx.modernizr_js_path]]\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Forms with JSON Configuration\nDESCRIPTION: This JSON snippet demonstrates how to define multiple forms within a MIGX configuration.  Each form is given a unique name and associated form tabs and fields. The `formname` is used to switch forms, and `formtabs` defines the structure and fields within each form.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.backend-usage.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\n[\n  [{\n    \"formname\": \"image_description\",\n    \"formtabs\": [{\n        \"caption\": \"Info\",\n        \"fields\": [{\n            \"field\": \"title\",\n            \"caption\": \"Title\"\n          },\n          {\n            \"field\": \"tpl\",\n            \"caption\": \"Tpl\",\n            \"inputTV\": \"tplDropdown\"\n          }, {\n            \"field\": \"description\",\n            \"caption\": \"Description\",\n            \"inputTV\": \"richtext\"\n          }\n        ]\n      },\n      {\n        \"caption\": \"Image\",\n        \"fields\": [{\n          \"field\": \"image\",\n          \"caption\": \"Image\",\n          \"inputTV\": \"image\"\n        }]\n      }\n    ]\n  }, {\n    \"formname\": \"textonly\",\n    \"formtabs\": [{\n      \"caption\": \"Info\",\n      \"fields\": [{\n          \"field\": \"title\",\n          \"caption\": \"Title\"\n        },\n        {\n          \"field\": \"tpl\",\n          \"caption\": \"Tpl\",\n          \"inputTV\": \"tplDropdown\"\n        }, {\n          \"field\": \"description\",\n          \"caption\": \"Description\",\n          \"inputTV\": \"richtext\"\n        }\n      ]\n    }]\n  }]\n]\n\n```\n\n----------------------------------------\n\nTITLE: Default homeCrumbTpl Chunk\nDESCRIPTION: This is the default chunk code for homeCrumbTpl used by the BreadCrumb snippet. It defines the HTML structure and placeholders for generating a breadcrumb link. The placeholders such as `[[+link]]` and `[[+pagetitle]]` are dynamically replaced with the appropriate values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/breadcrumb.homecrumbtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<li><a href=\\\"[[+link]]\\\">[[+pagetitle]]</a></li>\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Template for Images in MODX\nDESCRIPTION: This snippet defines the default template used to wrap around images within a listing in MODX. It uses placeholders to insert image paths and captions dynamically. This allows for consistent image rendering in the output while still offering flexibility based on user-defined data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdlistings.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n<img src=\"[[+image:phpthumbof=`w=150&h=150&zc=1`]]\" alt=\"[[+caption]]\" />\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Name-based Sorting with xPDOQuery\nDESCRIPTION: Demonstrates creating a query to retrieve Box objects sorted by their name field in ascending order.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.sortby.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->sortby('name','ASC');\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Displaying Child Resources with renderResources in MODX (PHP)\nDESCRIPTION: Outputs a list of child resources of the current resource using the 'myRowTpl' chunk for formatting each item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources?\n    &parents=`[[*id]]`\n    &tpl=`myRowTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Image Cropping with Zoom Cropping\nDESCRIPTION: Apply zoom cropping to maintain aspect ratio while resizing. The zc=1 parameter ensures the image fits the specified dimensions without distortion.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&zc=1`]]\n```\n\n----------------------------------------\n\nTITLE: Page-Not-Found Handler Plugin\nDESCRIPTION: Implements custom 404 error handling with email notification and redirect functionality using system settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif ($modx->event->name == 'OnPageNotFound') {\n     $errorPage = $modx->getOption('pnf.page');\n     if (empty($errorPage)) {\n         $modx->sendErrorPage();\n     } else {\n         $mailto = $modx->getOption('pnf.mailto');\n         if (!empty($mailto)) {\n            // send a message to a local account\n            $resourceId = $modx->resource->get('id');\n            $subject = 'Page not found';\n            $body = 'Someone tried to access document id '.$resourceId;\n            $modx->getService('mail', 'mail.modPHPMailer');\n            $modx->mail->set(modMail::MAIL_BODY, $body);\n            $modx->mail->set(modMail::MAIL_FROM, $modx->getOption('pnf.mailfrom'));\n            $modx->mail->set(modMail::MAIL_FROM_NAME, 'MODX');\n            $modx->mail->set(modMail::MAIL_SENDER, 'MODX');\n            $modx->mail->set(modMail::MAIL_SUBJECT, $subject);\n            $modx->mail->address('to',$mailto);\n            $modx->mail->setHTML(true);\n            $modx->mail->send();\n         }\n         $url = $this->makeUrl($scriptProperties['page']);\n         $modx->sendRedirect($url, 1);\n         exit;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using phpthumbof snippet in MODX\nDESCRIPTION: This snippet demonstrates how to use the phpthumbof snippet within a MODX tag to generate a thumbnail image. It specifies the input file and various options for resizing and cropping the image. The `&aoe=0&far=0` parameters prevent smaller images from being enlarged.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/phpthumbof/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\n[[!phpthumbof? &input=`[[+filename]]` &options=`&w=640&h=480&zc=0&aoe=0&far=0`]]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX Tagging Input Option Values in PHP\nDESCRIPTION: Generates dynamic tag options for a multiple listbox input using a MODX snippet, retrieving existing tags from the database\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/add-image-tagging.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@EVAL return $modx->runSnippet('migxLoopCollection',array('classname'=>'mygalTag','sortConfig'=>'[{\"sortby\":\"\"tag}]','tpl'=>'@CODE:[[+tag]]==[[+id]]','outputSeparator'=>'||'));\n```\n\n----------------------------------------\n\nTITLE: Fetching Resources in MODX Context - PHP\nDESCRIPTION: This PHP snippet retrieves resources within a specified context in MODX using the getResources plugin. It defines parameters such as 'parents', 'context', 'limit', and 'resources' to customize the query builder's behavior. This snippet requires MODX and the getResources plugin to function correctly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-container-open.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section?\\n    &parents=`1316`\\n    &context=`extras`\\n    &limit=`0`\\n    &resources=`1316,[[*id]]`\\n]]\n```\n\n----------------------------------------\n\nTITLE: Filtering Prominent Events with ChurchEventsList in PHP\nDESCRIPTION: Shows how to configure ChurchEventsList to display only prominent events with a custom limit of 10 events.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/church-events-calendar/churcheventslist-snippet.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!ChurchEventsList?\n  &prominent=`Yes`\n  &limit=`10`\n]]\n```\n\n----------------------------------------\n\nTITLE: Welcome Chunk Template\nDESCRIPTION: Example chunk template showing basic placeholder usage.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<p>Welcome [[+name]]!</p>\n```\n\n----------------------------------------\n\nTITLE: Defining modX.sendError Method Syntax in PHP\nDESCRIPTION: The function signature for the modX.sendError method, showing it returns void and accepts two optional parameters: a string error type and an options array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.senderror.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid sendError ([string $type = ''], [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Table for Discuss Configuration Options\nDESCRIPTION: This markdown table defines various configuration options for the Discuss extra, including their default values and descriptions. It covers settings for displaying subboards, readers, moderators, pagination, and formatting of last posts and subforums.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/board.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Key                              | Default                    | Description                                                                                                                                                                                                                                                                                                                                                          |\n| -------------------------------- | -------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| showSubBoards                    |                            | When set to true, subboards will be available in the \"boards\" placeholder. When no boards are available, the \"boards\" placeholder will be empty and \"boards\\_toggle\" will have a value of \"display: none;\", which can be used to hide outer wrappers for subboards.                                                                                                  |\n| showReaders                      |                            | When set to true, users viewing the board will be available in the \"readers\" placeholder. User needs discuss.view\\_online permission. Setting discuss.show\\_whos\\_online needs to be enabled. Text is built up from the users' username, wrapped in an `<a>` tag if the user has access to view profiles, with multiple people viewing joined together with a comma. |\n| showModerators                   |                            | When set to true, the moderators for the current board will be available in the \"moderators\" placeholder. The text in here will be built up from the users display or username, wrapped in an `<a>` tag if the viewer has access to view profiles, with multiple moderators joined together with a comma.                                                            |\n| showPaginationIfOnePage          |                            | If there is only one page of threads, this switch decides if there should be a pagination available in the \"pagination\" placeholder or not.                                                                                                                                                                                                                                          |\n| **board/getlist common options** |                            |                                                                                                                                                                                                                                                                                                                                                                      |\n| lastPostTpl                      | board/disLastPostBy        | Chunk used to create the \"lastpost\" placeholder. This chunk gets fed the following placeholders:                                                                                                                                                                                                                                                                     |\n|                                  |                            | - createdon: timestamp of post formatted to discuss.date\\_format system setting.                                                                                                                                                                                                                                                                                     |\n|                                  |                            | - user: iD of the user that last posted                                                                                                                                                                                                                                                                                                                              |\n|                                  |                            | - username: username of the user that last posted                                                                                                                                                                                                                                                                                                                    |\n|                                  |                            | - thread: ID of the thread last posted in                                                                                                                                                                                                                                                                                                                            |\n|                                  |                            | - id: the post ID                                                                                                                                                                                                                                                                                                                                                    |\n|                                  |                            | - url: the url to the last post                                                                                                                                                                                                                                                                                                                                      |\n|                                  |                            | - author\\_link: `<a>` tag to author if user has access to view profiles, otherwise just the username.                                                                                                                                                                                                                                                                |\n| subBoardTpl                      | board/disSubForumLink      | Chunk used to loop over subforums to eventually fill the \"subforums\" placeholder after joined together with the value of the subBoardSeparator option. This chunk gets the following placeholders:                                                                                                                                                                   |\n|                                  |                            | - id: the ID of the subboard                                                                                                                                                                                                                                                                                                                                         |\n|                                  |                            | - title: the title of the subboard                                                                                                                                                                                                                                                                                                                                   |\n| subBoardSeparator                | comma and line break (\\n) | Used to join together the subBoardTpl chunks to one string.                                                                                                                                                                                                                                                                                                          |\n| categoryRowTpl                   | category/disCategoryLi     | Chunk used to loop over categories. Gets the following placeholders:                                                                                                                                                                                                                                                                                                 |\n|                                  |                            | - list: boards belonging to the current category, formatted with the boardRowTpl option's chunk, joined with a newline (\\n)                                                                                                                                                                                                                                         |\n|                                  |                            | - rowClass: classes to apply to the category, either \"alt\" or \"even\".                                                                                                                                                                                                                                                                                                |\n```\n\n----------------------------------------\n\nTITLE: Integrating Hits with getResources in MODX Revolution\nDESCRIPTION: This snippet demonstrates how to pass a list of most visited page IDs from Hits to getResources to display most visited pages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[getResources?\n    &resources=`[[!Hits? &parents=`0` &depth=`10` &limit=`10` &outputSeparator=`,`]]`\n    ...\n]]\n```\n\n----------------------------------------\n\nTITLE: HTML Load More Button Template\nDESCRIPTION: Template chunk for the 'Load More' button used in ajax pagination mode.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n@INLINE <button class=\"btn btn-default btn-more\">[[%pdopage_more]]</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Functionality with MODX Login Snippet\nDESCRIPTION: This snippet call sets up the login form, specifying templates for login, logout, and error messages, as well as redirect pages for successful login and logout.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Login?\n&loginTpl=`lgnLoginTpl`\n&logoutTpl=`lgnLogoutTpl`\n&errTpl=`lgnErrTpl`\n&loginResourceId=`4`\n&logoutResourceId=`5`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using TaggingAtoZ Snippet in MODX\nDESCRIPTION: This snippet displays tags from specified TVs and links them to a target resource. It uses 'MyTags' TV and the TV with ID 16, setting the target to the current resource ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taggingatoz/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[TaggingAtoZ? &tvs=`MyTags,16` &target=`[[*id]]`]]\n```\n\n----------------------------------------\n\nTITLE: Adding URL Parameters to Resource Links in MODX\nDESCRIPTION: Example of adding URL parameters to resource links using MODX link tags\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/resources/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[~42? &tag=`Snacks` &sort=`Taste`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default TinyMCE Editor Settings for Fred\nDESCRIPTION: Default configuration for TinyMCE editor in Fred with comprehensive formatting options, including plugins for links, images, media, and lists. Includes both inline and selection toolbars with various formatting controls.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/rte_configs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"theme\": \"inlite\",\n    \"inline\": true,\n    \"plugins\": \"modxlink image imagetools media lists\",\n    \"insert_toolbar\": \"image media quicktable modxlink\",\n    \"selection_toolbar\": \"bold italic underline | alignleft aligncenter alignright | bullist numlist | modxlink h2 h3 h4 blockquote\",\n    \"image_advtab\": true,\n    \"imagetools_toolbar\": \"alignleft aligncenter alignright | rotateleft rotateright | flipv fliph | editimage imageoptions\",\n    \"auto_focus\": false,\n    \"branding\": false,\n    \"relative_urls\": false,\n    \"image_dimensions\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Logging User Manager Login Details in PHP\nDESCRIPTION: A PHP plugin that logs user login information to the MODX error log when a manager login occurs, capturing the user ID and login attributes\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onmanagerlogin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnManagerLogin':\n        $id = $user->get('id');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'Авторизовался пользователь с id '.$id.print_r($attributes));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Permissions Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing the default permissions included in the Resource Policy. These permissions apply to all MODX objects and provide basic content access.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/policies/permissions/resource-policy.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name |\n|------|\n| add_children |\n| create |\n| delete |\n| list |\n| load |\n| move |\n| publish |\n| remove |\n| save |\n| steal_lock |\n| undelete |\n| unpublish |\n| view |\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Session Contexts in MODX Revolution (PHP)\nDESCRIPTION: This method returns an array of user session context keys. It can be used to determine which contexts a user is currently logged into.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.getsessioncontexts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getSessionContexts ()\n```\n\n----------------------------------------\n\nTITLE: Incorrect Configuration for MODX modAction Object\nDESCRIPTION: An incorrect configuration for a MODX modAction object that includes 'controllers/' in the controller path. This syntax is not compatible with the new abstract classes in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$action= $modx->newObject('modAction');\n$action->fromArray(array(\n 'id' => 1,\n 'namespace' => 'doodles',\n 'parent' => 0,\n 'controller' => 'controllers/index',\n 'haslayout' => true,\n 'lang\\_topics' => 'doodles:default',\n 'assets' => '',\n),'',true,true);\n```\n\n----------------------------------------\n\nTITLE: Meta Description Tag Usage\nDESCRIPTION: Illustrates using the page description tag within meta tags for SEO purposes\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"[[*description]]\"/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Calendar Header in HTML for EventsCalendar2\nDESCRIPTION: This HTML snippet defines the structure of the calendar header for EventsCalendar2. It includes navigation arrows for previous and next months, as well as the current month and year display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.tplhead2.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tr>\n    <td class=\"[[+ec.class_prev]]\"><a href=\"[[+ec.link_prev]]\">&larr;</a></td>\n    <td class=\"[[+ec.class_month]]\" colspan=\"5\" style=\"text-align:center;\"><strong>[[+ec.month_name]] [[+ec.year]]</strong></td>\n    <td class=\"[[+ec.class_next]]\"><a href=\"[[+ec.link_next]]\">&rarr;</a></td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Creating getAttributeOptions Chunk for MIGX in MODX\nDESCRIPTION: PHP code for the getAttributeOptions chunk, which retrieves the attribute options from the migx_attributes_builder TV using getImageList.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/create-selectable-and-sortable-attributes-list-for-whatever-you-need-it.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[getImageList?\n    &tvname=`migx_attributes_builder`\n    &docid=`90`\n    &toJsonPlaceholder=`json`\n]]\n[[+json]]\n```\n\n----------------------------------------\n\nTITLE: Custom Extra Service Loading Examples\nDESCRIPTION: Two approaches for loading services in custom MODX extras, demonstrating both direct path and dot notation methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getservice.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Use path to point directly to the relevant sub-dir:\nif(!$Product = $this->modx->getService('mypkg.product','Product',MODX_CORE_PATH.'components/mypkg/model/mypkg/')) {\n    return 'NOT FOUND';\n}\n// Or use dot-notation in the classname and point the $path to the model directory:\nif(!$Product = $this->modx->getService('mypkg.product','mypkg.Product',MODX_CORE_PATH.'components/mypkg/model/')) {\n    return 'NOT FOUND';\n}\n```\n\n----------------------------------------\n\nTITLE: Creando una rama para nuevas características en MODX\nDESCRIPTION: Comando Git para crear una nueva rama local para desarrollar características específicas en MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/git.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ngit checkout -b myworkflow 2.x\n```\n\n----------------------------------------\n\nTITLE: Form Filtering with jQuery Plugin\nDESCRIPTION: Implementation of form filtering using the pdoPage jQuery plugin.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n    var pdoPageWrapper = $('[[+wrapper]]');\n    pdoPageWrapper.pdoPage([[+config]]);\n    $(document).ready(function () {\n        $(\"form#my_id\").on('click', 'button[type=\"submit\"]', function(e) {\n            e.preventDefault();\n            var form = $(e.delegateTarget);\n            $('[[+wrapper]]').pdoPage('loadPage',\n                form.attr('action') + '?' + form.serialize(), 'force');\n        });\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Multi-Category PollsPrevious Implementation\nDESCRIPTION: Implementation of PollsPrevious that selects latest questions from multiple specified categories\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollsprevious.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsLatest? &category=`1,3,5`]]\n```\n\n----------------------------------------\n\nTITLE: User Groups Listing with PeopleGroups Snippet\nDESCRIPTION: Shows how to use the PeopleGroups snippet to list the first 10 user groups, sorted by name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[PeopleGroups]]\n```\n\n----------------------------------------\n\nTITLE: Calling Breadcrumbs Snippet in MODX\nDESCRIPTION: This code snippet shows how to call the Breadcrumbs snippet within a MODX Revolution resource or template.  The snippet is invoked using MODX tags, which are processed by the MODX parser. No specific dependencies beyond the Breadcrumbs snippet being installed are required.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumbs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n``` php\n[[Breadcrumbs]]\n```\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Galleriffic Plugin with Gallery\nDESCRIPTION: This code shows how to use the Gallery snippet with an additional plugin parameter to enable the Galleriffic jQuery plugin for a specific album named 'My Album'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery? &album=`My Album` &plugin=`galleriffic`]]\n```\n\n----------------------------------------\n\nTITLE: Efficient Nested fastField Usage in MODX\nDESCRIPTION: Demonstrates a more efficient way to retrieve parent resource fields using nested fastField tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[[[#[[*parent]].introtext:default=`#[[*parent]].description`]]]]\n```\n\n----------------------------------------\n\nTITLE: Including Navigation with Page Limit in pdoPage - PHP\nDESCRIPTION: This snippet shows how to include navigation while limiting the number of pages displayed in the pdoPage snippet. If less than 7 pages are present, the navigation will function normally.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &tpl=`@INLINE <p>[[+idx]] <a href=\"/[[+uri]]\">[[+pagetitle]]</a></p>`\n    &parents=`0`\n    &pageLimit=`7`\n]]\n[[!+page.nav]]\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Contrast for a Hex Color in MODX with CSSSweet\nDESCRIPTION: This snippet demonstrates how to use the 'max' option with the 'lighten' output modifier to set a color to either white or black based on a threshold value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.lighten.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[+color:lighten=`max`]]\n```\n\n----------------------------------------\n\nTITLE: Advanced PeopleGroup Configuration in PHP\nDESCRIPTION: Advanced example demonstrating how to display Marketing group users sorted by role authority instead of username. Uses custom placeholder prefix and output placeholder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroup.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!PeopleGroup?\n  &usergroup=`Marketing`\n  &placeholderPrefix=`ug.`\n  &toPlaceholder=`ug.users`\n  &sortBy=`authority`\n  &sortByAlias=`UserGroupRole`\n]]\n\n<h2>Users in [[+ug.name]]</h2>\n\n[[+ug.users]]\n```\n\n----------------------------------------\n\nTITLE: Creating Pathing Plugin in PHP for Custom TV Directories\nDESCRIPTION: Plugin that defines directory paths for TV input rendering, output rendering, and properties handling in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-tvs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$corePath = $modx->getOption('core_path',null,MODX_CORE_PATH).'components/ourtvs/';\nswitch ($modx->event->name) {\n    case 'OnTVInputRenderList':\n        $modx->event->output($corePath.'tv/input/');\n        break;\n    case 'OnTVOutputRenderList':\n        $modx->event->output($corePath.'tv/output/');\n        break;\n    case 'OnTVInputPropertiesList':\n        $modx->event->output($corePath.'tv/inputoptions/');\n        break;\n    case 'OnTVOutputRenderPropertiesList':\n        $modx->event->output($corePath.'tv/properties/');\n        break;\n    case 'OnManagerPageBeforeRender':\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Method Signature for regClientHTMLBlock in PHP\nDESCRIPTION: Method signature showing the basic structure of the regClientHTMLBlock function that accepts an HTML string parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclienthtmlblock.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid regClientHTMLBlock (string $html)\n```\n\n----------------------------------------\n\nTITLE: Pulling Remote Theme Updates\nDESCRIPTION: Command to synchronize local repository with upstream changes from the origin master branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify_in_action.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit pull origin master\n```\n\n----------------------------------------\n\nTITLE: xPDOQuery andCondition Method Syntax\nDESCRIPTION: Method signature for adding AND conditions to a query's WHERE clause. Takes conditions parameter, optional binding, and optional group parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.andcondition.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid andCondition ( $conditions, [ $binding = null], [ $group = 0])\n```\n\n----------------------------------------\n\nTITLE: Simple Equality WHERE Condition\nDESCRIPTION: Example of querying boxes with a specific width using a simple equality condition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   'width' => 15,\n));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Context Menu Text Implementation\nDESCRIPTION: Method to provide translated text for context menu entries\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getContextMenuText() {\n  $this->xpdo->lexicon->load('copyrightedresource:default');\n  return array(\n    'text_create' => $this->xpdo->lexicon('copyrightedresource'),\n    'text_create_here' => $this->xpdo->lexicon('copyrightedresource_create_here'),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Plugin Creation by User ID in MODX (PHP)\nDESCRIPTION: Plugin that prevents users with ID=1 from creating new plugins by intercepting the save process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforepluginformsave.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforePluginFormSave':\n        // if it's a new plugin\n        if ($mode == modSystemEvent::MODE_NEW){\n            if ($modx->user->get('id') == 1){\n                $modx->event->output(\"You are not allowed to create new plugins!\");\n            }\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing jQuery Tabs with MODX Resource IDs\nDESCRIPTION: Basic implementation of jQuery UI tabs to load MODX resources via AJAX. The script initializes tabs functionality and defines tab links using MODX resource syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<script type=\"text/javascript\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\"tabs\">\n  <ul>\n    <li><a href=\"[[~92]]\">Resource with ID 92</a></li>\n    <li><a href=\"[[~546]]\">Resource with ID 546</a></li>\n    <li><a href=\"[[~123]]\">Resource with ID 123</a></li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Image Information Retrieval via sekUserGalleries.image.information\nDESCRIPTION: This snippet provides additional information regarding an image, such as the date taken and camera specifications, enhancing user insights about their uploaded content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.image.information]\n```\n\n----------------------------------------\n\nTITLE: Uncached Snippet Call Example\nDESCRIPTION: Example of how to call the readCache snippet in an uncached manner within MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/example.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!readCache]]\n```\n\n----------------------------------------\n\nTITLE: Initializing bdRedirect Snippet in MODX Resource\nDESCRIPTION: Implements a simple uncached redirect snippet that routes users to a website URL or an error page based on listing information. Requires setting the &redirectResource property in bdListings snippet calls.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdredirect.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!bdRedirect]]\n```\n\n----------------------------------------\n\nTITLE: Implementing ForgotPassword Snippet in PHP\nDESCRIPTION: This snippet is used in conjunction with ResetPassword to initiate the password reset process. The 'resetResourceId' parameter specifies the resource containing the ResetPassword snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.resetpassword.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!ForgotPassword? &resetResourceId=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Button Field in MODX\nDESCRIPTION: This field snippet allows the definition of a radio button input type for favorite colors, including required fields and options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`radio`\n    &req=`1`\n    &name=`color`\n    &label=`Your Favorite Color:`\n    &default=``\n    &options=`Red==red||Blue==blue||Other==default`\n]]\n```\n\n----------------------------------------\n\nTITLE: Modified FileDownload Template with Upload to Users Integration for MODX\nDESCRIPTION: A modified HTML template for FileDownload R that incorporates the UploadToUsers snippet to display custom file titles and descriptions from the Upload to Users database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/upload-to-users-cmp/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<tr[[+fd.class]]>\n    <td style=\"width:16px;\"><img src=\"[[+fd.image]]\" alt=\"[[+fd.image]]\" /></td>\n    <td><a href=\"[[+fd.link]]\"[[+fd.linkAttribute]]>\n            [[!uploadtousers:default=`[[+fd.filename]]`? &path=`[[+fd.fullPath]]` &field=`title`]]\n        </a>\n        <span style=\"font-size:80%\">([[+fd.count]] downloads)</span>\n    </td>\n    <td>[[+fd.sizeText]]</td>\n    <td>[[+fd.date]]</td>\n</tr>\n<tr>\n    <td></td>\n    <td colspan=\"3\">[[!uploadtousers? &path=`[[+fd.fullPath]]` &field=`description`]]</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Input Validation for Chunk Creation\nDESCRIPTION: Sanitizes input data and validates chunk name uniqueness in the system.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-3.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// default values\nif ($_POST['name'] == '') $_POST['name'] = $modx->lexicon('chunk_untitled');\n\n// get rid of invalid chars\n$_POST['name'] = str_replace('>','',$_POST['name']);\n$_POST['name'] = str_replace('<','',$_POST['name']);\n\n// if the name already exists for this chunk, send back an error\n$name_exists = $modx->getObject('modChunk',array('name' => $_POST['name']));\nif ($name_exists != null) return $modx->error->failure($modx->lexicon('chunk_err_exists_name'));\n```\n\n----------------------------------------\n\nTITLE: Rendering Selected Gallery Album in Page Template\nDESCRIPTION: A MODX template tag for rendering the gallery album specifically assigned to a resource using the custom template variable\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/assinging-a-gallery-album-to-a-specifc-resource.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery? &album=`[[*assignedGallery]]`]]\n```\n\n----------------------------------------\n\nTITLE: Defining MODX Base Paths in PHP\nDESCRIPTION: This PHP code defines the base paths for a MODX Revolution installation, including the core, manager, connectors, and assets directories.  It's essential for the build script to locate the MODX installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\ndefine('MODX_BASE_PATH', dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/MODxRevolution/');\\ndefine('MODX_CORE_PATH', MODX_BASE_PATH . 'core/');\\ndefine('MODX_MANAGER_PATH', MODX_BASE_PATH . 'manager/');\\ndefine('MODX_CONNECTORS_PATH', MODX_BASE_PATH . 'connectors/');\\ndefine('MODX_ASSETS_PATH', MODX_BASE_PATH . 'assets/');\"\n```\n\n----------------------------------------\n\nTITLE: Build Configuration File for MODX Path Definition in PHP\nDESCRIPTION: Defines essential MODX path constants that the build script requires to locate the MODX core and its configuration. Includes absolute path to MODX core and config key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Определите константы пути MODX, необходимые для установки ядра \n *\n * @package quip\n * @subpackage build\n */\ndefine('MODX_CORE_PATH', '/absolute/path/to/modx/core/');\ndefine('MODX_CONFIG_KEY','config');\n```\n\n----------------------------------------\n\nTITLE: Installing mxCalendar Module Code in ModX Evolution\nDESCRIPTION: This snippet represents the code that needs to be pasted into the Module code (php) section when creating a new module for mxCalendar in ModX Evolution. This enables basic setup and functionality of the mxCalendar manager inside of ModX Evolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nsnippets/mxCalendar.module.txt\n```\n\n----------------------------------------\n\nTITLE: Basic AdvSearchForm Implementation in PHP\nDESCRIPTION: Simple implementation of the AdvSearchForm snippet with a landing page parameter that specifies where search results will be displayed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch.advsearchform/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!AdvSearchForm? &landing=`82`]]\n```\n\n----------------------------------------\n\nTITLE: Configuration Placeholders in PHP\nDESCRIPTION: This example from a MODX config file shows placeholders, indicating misconfiguration. Update these with actual database configuration details to ensure proper setup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$database_type = '{database_type}';\n$database_server = '{database_server}';\n$database_user = '{database_user}';\n$database_password = '{database_password}';\n$database_connection_charset = '{database_connection_charset}';\n$dbase = '{dbase}';\n$table_prefix = '{table_prefix}';\n$database_dsn = '{database_dsn}';\n$config_options = {config_options};\n$driver_options = {driver_options};\n```\n\n----------------------------------------\n\nTITLE: Rendering List Item for Album with PHP in MODX\nDESCRIPTION: The snippet creates a list item for each album featuring an anchor element that links to the album. It utilizes MODX placeholders for dynamic content such as album ID and name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/rowtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li[[+cls:notempty=``]]><a href=\"[[~[[*id]]? &[[+albumRequestVar]]=`[[+id]]`]]\">[[+showName:notempty=`[[+name]]`]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Full URL tpl Chunk for tagLister.tolinks in MODX (PHP)\nDESCRIPTION: A modified version of the tpl Chunk that generates full URLs by incorporating the site_url system setting. This is useful when you need to create absolute links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/taglister.tolinks/tpl.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"[[++site_url]][[+url]]\" class=\"[[+cls]]\">[[+item]]</a>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Container Suffix URL Rendering in MODX\nDESCRIPTION: These examples show how the container_suffix setting affects the rendering of Friendly URLs for container Resources in MODX. The first example uses the default '/' suffix, while the second uses a custom '.html' suffix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/container_suffix.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwww.mysite.com/test/\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nwww.mysite.com/test.html\n```\n\n----------------------------------------\n\nTITLE: Outputting All Available Documents with pdoPage in MODX - PHP\nDESCRIPTION: This snippet illustrates how to output all documents available on the site using the pdoPage snippet, specifying the parent as 0 to include all resources. It uses the same inline template as the previous example.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &tpl=`@INLINE <p>[[+idx]] <a href=\"/[[+uri]]\">[[+pagetitle]]</a></p>`\n    &parents=`0`\n]]\n[[!+page.nav]]\n```\n\n----------------------------------------\n\nTITLE: Basic QuickCrumbs Snippet Call in MODX Revolution\nDESCRIPTION: The basic implementation of the QuickCrumbs snippet to generate breadcrumbs. Without a tpl property specified, it outputs an array listing of each Resource and their fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quickcrumbs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[QuickCrumbs]]\n```\n\n----------------------------------------\n\nTITLE: Returning Processed Output in MODX Snippet\nDESCRIPTION: This PHP snippet for MODX combines the elements in the output array into a single string using implode, effectively concluding the processing of related pages and readying it for the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn implode('',$output);\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Rule XML Structure\nDESCRIPTION: Base XML structure for defining validation rules in MODX schemas with supported attributes including field, name, type, rule, value and message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<validation>\n    <rule field=\"$name_of_field\"\n        name=\"$name_of_rule\"\n        type=\"callable|preg_match|xPDOValidationRule\"\n        rule=\"$various\"\n        value=\"$optional_parameter\"\n        message=\"string\" />\n</validation>\n```\n\n----------------------------------------\n\nTITLE: Removing Background Color with phpThumbOf\nDESCRIPTION: This snippet removes a white background from an image, converts it to PNG format with transparency, and resizes it to 960x300 pixels. It uses the 'stc' (source transparent color) filter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=stc|ffffff&f=png`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Grid with MODExt in Javascript\nDESCRIPTION: This code snippet illustrates how to configure a custom MODExt grid, extending MODx.grid.Grid with specific settings for ID, title, URL, base parameters, paging, autosave, remote sorting, fields, columns, and a top toolbar. It initializes the grid's configuration, applies default values, and defines store fields and a column model. The toolbar includes a button for creating new records in the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n        \"MyComponent.grid.MyGrid = function( config ) {\n    config = config || {};\n\n    /* Опции конфигурации сетки */\n    Ext.applyIf( config, {\n        id : \\\"mycomponent-grid-mygrid\\\",\n        title : _( \\\"my_grid\\\" ),\n        url : MyComponent.config.connectors_url + \\\"list.php\\\",\n        baseParams : {\n            action : \\\"getlist\\\"\n        },\n        paging : true,\n        autosave : true,\n        remoteSort : true,\n        /* Store field list */\n        fields : [ {\n            name : \\\"id\\\",\n            type : \\\"int\\\"\n        }, {\n            name : \\\"name\\\",\n            type : \\\"string\\\"\n        }, {\n            name : \\\"menu\\\"\n        } ],\n        /* Grid ColumnModel */\n        columns : [ {\n            header : _( \\\"id\\\" ),\n            dataIndex : \\\"id\\\",\n            sortable : true\n        }, {\n            header : _( \\\"name\\\" ),\n            dataIndex : \\\"name\\\",\n            sortable : true\n        } ],\n        /* Top toolbar */\n        tbar : [ {\n            xtype : \\\"button\\\",\n            text : _( \\\"create\\\" ),\n            handler : {\n                xtype : \\\"mycomponent-window-create\\\",\n                blankValues : true\n            },\n            scope : this\n        } ]\n    } );\n\n    /* Конструктор родительского класса */\n    MyComponent.grid.MyGrid.superclass.constructor.call( this, config );\n};\n\nExt.extend( MyComponent.grid.MyGrid, MODx.grid.Grid, {\n    /* Члены класса будут здесь */\n} );\n\n/* Зарегистрировать \\\"mycomponent-grid-mygrid\\\" как тип xtype */\nExt.reg( \\\"mycomponent-grid-mygrid\\\", MyComponent.grid.MyGrid );\"\n```\n\n----------------------------------------\n\nTITLE: Debug Sitemap Generation\nDESCRIPTION: Generate sitemap with execution log enabled and XML formatting disabled\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[pdoSitemap?\n    &resources=`-25`\n    &parents=`-15,10`\n    &context=`web,catalog`\n    &showLog=`1`\n    &forceXML=`0`\n]]\n```\n\n----------------------------------------\n\nTITLE: Minimum Call for Resource Link using sLink in PHP\nDESCRIPTION: This snippet demonstrates how to utilize the sLink snippet to generate a link to a MODX resource. It defaults to using the resource's menutitle for the link text and longtitle for the title attribute. sLink must be installed and available in the MODX environment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/slink/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[sLink? &to=`5`]]\n```\n\n----------------------------------------\n\nTITLE: Markdown Platform-Specific Documentation Example\nDESCRIPTION: Demonstrates correct way to document platform-specific instructions using Markdown headers and clear sectioning.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/documentation/style-guide.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### Linux\n\nTo start MODX POS run the shell script start.sh either by clicking it or by typing ./start.sh from a shell.\n\n#### Windows\n\nTo start MODX POS run the batch file start.bat either by double clicking it or by typing start.bat from the command line.\n```\n\n----------------------------------------\n\nTITLE: Rendering Gallery Thumbnail Template in PHP/MODX\nDESCRIPTION: Default HTML template for displaying gallery item thumbnails with configurable linking, image paths, and placeholders for dynamic content rendering\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/thumbtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"[[+cls]]\">\n    <a href=\"[[+linkToImage:if=`[[+linkToImage]]`:is=`1`:then=`[[+image_absolute]]`:else=`[[~[[*id]]?\n            &[[+imageGetParam]]=`[[+id]]`\n            &[[+albumRequestVar]]=`[[+album]]`\n            &[[+tagRequestVar]]=`[[+tag]]` ]]`]]\">\n        <img class=\"[[+imgCls]]\" src=\"[[+thumbnail]]\" alt=\"[[+name]]\" />\n    </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Anchor in HTML\nDESCRIPTION: Demonstrates how to create a basic named anchor in HTML. This is a typical structure for a named anchor, which can be used to link to specific content within a page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/named-anchor.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a name=\"prohibited\"></a>\n```\n\n----------------------------------------\n\nTITLE: CHUNK Binding Example\nDESCRIPTION: Practical example showing how to bind a Template Variable to a chunk named 'MycontactForm'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/chunk-binding.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n@CHUNK MycontactForm\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Context Menu in JavaScript\nDESCRIPTION: Shows how to create a context menu by extending the Grid component and implementing the getMenu method in JavaScript.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.grid.grid.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngetMenu: function() {\n    var m = [];\n    m.push({\n        text: _('my_lexicon_key')\n        ,handler: this.myHandler\n    });\n    return m;\n}\n```\n\n----------------------------------------\n\nTITLE: FormIt Snippet Call with Store Property in MODX\nDESCRIPTION: Example of a FormIt snippet call with the store property set to 1, which is required for FormItRetriever to work.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.formitretriever.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &submitVar=`go`\n    &hooks=`spam,FormItAutoResponder,redirect`\n    &emailTo=`my@email.com`\n    &store=`1`\n    &redirectTo=`123`\n]]\n<form action=\"[[~[[*id]]]]\" method=\"post\">\n    <input type=\"hidden\" name=\"nospam\" value=\"\" />\n    <label for=\"name\">Name: [[!+fi.error.name]]</label>\n    <input type=\"text\" name=\"name:required\" id=\"name\" value=\"[[!+fi.name]]\" />\n    <label for=\"email\">Email: [[!+fi.error.email]]</label>\n    <input type=\"text\" name=\"email:email:required\" id=\"email\" value=\"[[!+fi.email]]\" />\n    <label for=\"message\">Message: [[!+fi.error.message]]</label>\n    <textarea name=\"message:stripTags\" id=\"message\" cols=\"55\" rows=\"7\">[[!+fi.message]]</textarea>\n    <br />\n    <input type=\"submit\" name=\"go\" value=\"Send Contact Inquiry\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Check Multiple Resource Group Membership (OR)\nDESCRIPTION: Checks if a resource belongs to any of the specified resource groups using OR logic.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modresource/modresource.ismember.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$resource->isMember(array('Marketing', 'Finances'));\n```\n\n----------------------------------------\n\nTITLE: Displaying Product Parameter in MODX with Template Variable\nDESCRIPTION: This snippet is used to access and display product parameters defined in template variables within MODX. The parameters are formatted as placeholders and represent various product options. This requires the getResources chunk where the placeholder [[+tv.param1]] will be replaced with the actual parameter value defined in the resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/shopkeeper/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[+tv.param1]]\n```\n\n----------------------------------------\n\nTITLE: MODX Link Tag Syntax for Resources\nDESCRIPTION: This HTML snippet demonstrates MODX's link tag syntax for creating dynamic links to resources. The `[[~1]]` tag generates a link to the resource with ID 1. This approach ensures that links are automatically updated if resources are moved, preventing broken links and simplifying website maintenance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/friendly-urls.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\"<a href=\\\"[[~1]]\\\" title=\\\"какой-то заголовок\\\">Какая-то страница</a>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Field Defaults in MODX\nDESCRIPTION: This snippet sets the default values for subsequent field snippets during a request. It can be called multiple times with different parameters to adjust defaults dynamically. The resetDefaults parameter is available to reset the settings. Be aware that it cannot override parameters set in property sets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/fieldsetdefaults.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[!fieldSetDefaults? &outer_type=`personal`]]\\n[[!field? &name=`first_name`]]\\n[[!field? &name=`last_name`]]\\n[[!fieldSetDefaults? &outer_type=`company`]]\\n[[!field? &name=`company_name`]]\\n[[!field? &name=`company_address`]]\"\n```\n\n----------------------------------------\n\nTITLE: Building the MODX Core\nDESCRIPTION: Command to run the PHP script that builds the MODX core and the output showing successful build completion.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_8\n\nLANGUAGE: plain\nCODE:\n```\nphp transport.core.php\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Beginning build script processes...\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Removed pre-existing core/ and core.transport.zip.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Core transport package created.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Core Namespace packaged.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Default workspace packaged.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged modx.com transport provider.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 2 modMenus.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged all default modContentTypes.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged all default modClassMap objects.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 181 default events.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 225 default system settings.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 2 default context settings.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 1 default user groups.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 1 default dashboards.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 1 default media sources.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 5 default dashboard widgets.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 2 default roles Member and SuperUser.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 6 default Access Policy Template Groups.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 7 default Access Policy Templates.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in 12 default Access Policies.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in web context.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in mgr context.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Packaged in connectors.\n[2017-02-24 11:52:17] (INFO @ transport.core.php) Beginning to zip up transport package...\n[2017-02-24 11:52:18] (INFO @ transport.core.php) Transport zip created. Build script finished.\n\nExecution time: 1.5657 s\n```\n\n----------------------------------------\n\nTITLE: Creating Gallery Dropdown List Chunk\nDESCRIPTION: A chunk template for generating a dynamic dropdown list of gallery albums with their IDs and names\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/assinging-a-gallery-album-to-a-specifc-resource.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+name]]==[[+id]]||\n```\n\n----------------------------------------\n\nTITLE: Defining xPDOQuery Inner Join Method Signature\nDESCRIPTION: Method signature for the innerJoin method in xPDOQuery, demonstrating parameters for creating database joins\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.innerjoin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid innerJoin ( $class, [ $alias = ''], [ $conditions = array ()], [ $conjunction = xPDOQuery::SQL_AND], [ $binding = null], [ $condGroup = 0])\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Content using easytabs in PHP\nDESCRIPTION: This code snippet demonstrates how to use the easytabs snippet by providing a JSON array of tab data. It showcases the syntax needed to define each tab's ID, name, and content, allowing for dynamic tab creation based on provided data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/seksitetools/seksitetools.easytabs.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[easytabs? &tabContent=\\n    [{\\\"tab_id\\\":\\\"one\\\",\\\"tab_name\\\":\\\"One\\\",\\\"tab_content\\\":\\\"Content 1\\\"},\\n    {\\\"tab_id\\\":\\\"two\\\",\\\"tab_name\\\":\\\"Two\\\",\\\"tab_content\\\":\\\"Content 2\\\"},\\n    {\\\"tab_id\\\":\\\"three\\\",\\\"tab_name\\\":\\\"Three\\\",\\\"tab_content\\\":\\\"$chunkName\\\"}]\\n`]]\"\n```\n\n----------------------------------------\n\nTITLE: Page Title Tag Usage\nDESCRIPTION: Demonstrates using the page title tag in HTML title element to dynamically set page titles based on resource metadata\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<title>[[*pagetitle]]</title>\n```\n\n----------------------------------------\n\nTITLE: Returning a Message from OnDocFormSave in PHP\nDESCRIPTION: This code snippet shows how to return a string from the `OnDocFormSave` event, which will be logged in the MODX error log. This can be helpful for debugging purposes or to provide custom messages when a resource is saved.  This example illustrates how any returned data gets recorded in MODX's logs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn \"Help I'm a bug!\";\n```\n\n----------------------------------------\n\nTITLE: Combining Prefixes with Nested Placeholders in MODX using PHP\nDESCRIPTION: Example showing how prefixes work with nested placeholder data. This creates placeholders accessible with [[+tmp.test]] and [[+tmp.document.pagetitle]] in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.toplaceholders.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->toPlaceholders(\n  array(\n    'test' => 'this',\n    'document' => array('pagetitle' => 'My Page')\n  ), 'tmp'\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX REST Service Bootstrap\nDESCRIPTION: Bootstrap code for setting up a MODX REST service, including MODX initialization, service configuration, and request processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/developing-restful-api.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once dirname(dirname(__FILE__)) . '/config.core.php';\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n$modx = new modX();\n$modx->initialize('web');\n$modx->getService('error','error.modError', '', '');\n$path = $modx->getOption('mypackage.core_path', null,\n   $modx->getOption('core_path').'components/mypackage/') . 'model/mypackage/';\n$modx->getService('mypackage', 'myPackage', $path);\n$rest = $modx->getService('rest', 'rest.modRestService', '', array(\n    'basePath' => dirname(__FILE__) . '/Controllers/',\n    'controllerClassSeparator' => '',\n    'controllerClassPrefix' => 'MyController',\n    'xmlRootNode' => 'response',\n));\n$rest->prepare();\nif (!$rest->checkPermissions()) {\n    $rest->sendUnauthorized(true);\n}\n$rest->process();\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions\nDESCRIPTION: Conditionally executes code based on user permissions stored in the MODx.perm object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (MODx.perm.file_upload) { /* ...код... */ }\n```\n\n----------------------------------------\n\nTITLE: Formatting Last Post Details in PHP\nDESCRIPTION: This PHP code builds an array to represent the last post's metadata, formatting the 'author_link' with an HTML anchor tag if the user has permission to view profiles. It uses placeholders for details like 'createdon', 'user', and 'thread', drawing upon system options like 'discuss.date_format'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/home.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nArray(\n 'createdon' => strftime($modx->getOption('discuss.date_format'),strtotime($board\\['last_post_createdon'\\])),\n 'user' => $board['last_post_author'],\n 'username' => $username,\n 'thread' => $board['last_post_thread'],\n 'id' => $board['last_post_id'],\n 'url' => $board['last_post_url'],\n 'author_link' => $canViewProfiles ? '<a class=\"dis-last-post-by\" href=\"'.$discuss->request->makeUrl('u/'.$board['last_post_username']).'\">'.$username.'</a>' : $username,\n );\n```\n\n----------------------------------------\n\nTITLE: FormPanel Success Listener with Status Message\nDESCRIPTION: Example of adding a success listener to a FormPanel that displays a status message using MODx.msg.status()\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.msg.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n        listeners: {\n            'success': function (res) {\n                MODx.msg.status({\n                    title: _('save_successful'),\n                    message: res.result['message'],\n                    delay: 3\n                });\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Managing Album Items - PHP\nDESCRIPTION: This snippet allows logged-in users with appropriate permissions to manage items within an album. It supports adding, editing, and deleting functionalities, utilizing template parameters for customization.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.album.items.manage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!album.items.manage]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!album.items.manage? &tplItemsForm=`album.items.form`]]\n```\n\n----------------------------------------\n\nTITLE: Rendering Thread Template in HTML for Discuss Extension\nDESCRIPTION: The Thread controller template that displays a complete thread of posts. It includes functionality for showing the thread title, status, posts, pagination, action buttons for subscribe/unsubscribe, and a quick reply form when the thread is not locked.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/thread.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- thread/index.html -->\n[[+top]]\n\n[[+aboveThread]]\n<div class=\"status [[+locked:is=`1`:then=`locked`:else=`unlocked`]]\">\n    <div class=\"f1-f12 h-group [[+answered:notempty=`answered`]]\">\n        <h1 class=\"Category\" post=\"[[+id]]\">\n            [[+answered:notempty=`<span class=\"tag solved\">[[%discuss.solved]]</span>`:default=``]]\n            <a href=\"[[+url]]\" title=\"[[+title]]\">[[+title]]</a>\n        </h1>\n    </div>\n    <div class=\"f1-f9\">\n        <div class=\"a-dis-actionbuttons h-group\">\n            Subscribe: <a href=\"[[~[[*id]]]]thread/feed.xml?thread=[[+id]]\">RSS</a>\n                    [[+actionlink_subscribe:notempty=`\n                    <a href=\"[[+actionlink_subscribe]]\">By email</a>`]]\n                    [[+actionlink_unsubscribe:notempty=`\n                    <a href=\"[[+actionlink_unsubscribe]]\">Stop emails</a>`]]\n        </div>\n    </div>\n    <div class=\"f1-f9\">\n        <header class=\"dis-cat-header dark-gradient h-group sticky-bar top\">\n            [[+pagination:default=``]]\n            [[- USER LOGGED IN ]]\n            [[!+discuss.user.id:notempty=`\n            <div class=\"post-box\">\n                [[+locked:is=`1`:then=``:else=`<a class=\"dis-action-reply Button\" href=\"[[+actionlink_reply]]\">Reply to thread</a>`]]\n                <a class=\"Button\" href=\"[[+actionlink_unread]]\">Mark as unread</a>\n                [[+moderators]]\n            </div>`]]\n            [[- USER NOT LOGGED IN ]]\n            [[!+discuss.user.id:is=``:then=`\n            <div class=\"post-box\">\n                <a href=\"[[~[[*id]]]]login\" class=\"Button dis-action-login\" >Login to Post</a>\n            </div>`]]\n        </header>\n        <ul class=\"dis-list h-group\">\n            [[+posts]]\n        </ul>\n        [[+pagination:notempty=`\n        <div class=\"paginate stand-alone bottom horiz-list\">[[+pagination]]</div>`]]\n        [[$thread-login-post]]\n        [[+locked:notempty=`<p class=\"m-notice\">[[%discuss.thread_locked]]</p>`:default=`[[+quick_reply_form]]`]]\n        [[+belowThread]]\n        [[+discuss.error_panel]]\n    </div><!-- Close Content From Wrapper -->\n\n    [[+bottom]]\n\n    [[+sidebar]]\n</div>\n<!--close thread/index.html -->\n```\n\n----------------------------------------\n\nTITLE: Basic getResourceField Usage\nDESCRIPTION: This is the simplest form of the getResourceField snippet. It retrieves and outputs the pagetitle of the current resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresourcefield/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResourceField]]\n```\n\n----------------------------------------\n\nTITLE: Defining xPDOObjectExistsValidationRule in XML Schema\nDESCRIPTION: XML schema definition showing how to configure an object model with xPDOObjectExistsValidationRule. The rule checks if a specific modChunk object exists before allowing the current object to be saved.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdoobjectexistsvalidationrule.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"test\" baseClass=\"xPDOObject\" platform=\"mysql\"\n       defaultEngine=\"MyISAM\" tablePrefix=\"test_\">\n    <object class=\"myTest\" table=\"test\" extends=\"xPDOSimpleObject\">\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\"\n               phptype=\"string\" default=\"\" null=\"false\" />\n\n        <validation>\n            <rule field=\"name\"\n                  name=\"chunkExists\"\n                  type=\"xPDOValidationRule\"\n                  rule=\"xPDOObjectExistsValidationRule\"\n                  pk=\"12\"\n                  classKey=\"modChunk\"\n                  message=\"The Chunk does not exist, so this object cannot be saved.\"\n             />\n        </validation>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Calendar Display Classes\nDESCRIPTION: A comprehensive set of CSS class definitions for styling different calendar elements such as days, events, navigation buttons, and special dates\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* Calendar Display CSS Classes */\n.class_dow { /* Day of week styling */ }\n.class_month { /* Month and year styling */ }\n.class_workday { /* Workday styling */ }\n.class_weekend { /* Weekend styling */ }\n.class_today { /* Current day styling */ }\n.class_event { /* Event container styling */ }\n.class_isevent { /* Cell with event styling */ }\n.class_noevent { /* Cell without event styling */ }\n.class_date { /* Event date styling */ }\n.class_emptyday { /* Empty day styling */ }\n.class_prev { /* Previous month button styling */ }\n.class_next { /* Next month button styling */ }\n```\n\n----------------------------------------\n\nTITLE: Sample Facebook Profile Data Output\nDESCRIPTION: Example of the data returned by the getFacebookProfile snippet when querying the MODX Facebook page, showing various available fields including name, likes, about information, and other page details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookprofile.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nname = MODX\nis_published = 1\nwebsite = https://modx.com/\nusername = modxcms\nfounded = November 2004\ncompany_overview = MODX is the Content Management System that gives developers, designers and end-users the creative freedom and power to build and maintain websites and online applications with ease. Lose the limitations. There's no steep learning curve, no cumbersome template language, and no awkward or restrictive structures forced on your site. MODX gives you the freedom to work your way and get things done.\nproducts = MODX Evolution, MODX Revolution\nabout = MODX CMS is the Content Management System, framework and platform. https://modx.com/ MODX Revolution https://modx.com/download/\ntalking_about_count = 45\ncategory = Software\nid = 19110642979\nlink = http://www.facebook.com/modxcms\nlikes = 2348\ncover.cover_id = 10150742956652980\ncover.source = http://sphotos-d.ak.fbcdn.net/hphotos-ak-prn1/s720x720/559491_10150742956652980_2095164733_n.jpg\ncover.offset_y = 0\n```\n\n----------------------------------------\n\nTITLE: Random Sorting with xPDOQuery\nDESCRIPTION: Shows how to implement random sorting using the RAND() function in xPDOQuery::sortby().\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.sortby.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->sortby('RAND()');\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MODX-friendly URL structure in HTML\nDESCRIPTION: This code snippet shows an example of a MODX-friendly URL structure, illustrating how easy it is to create custom, SEO-friendly URLs in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/what-is-modx.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nmysite.com/my/own/custom/url.html\n```\n\n----------------------------------------\n\nTITLE: Customizing Operator Text in PHP\nDESCRIPTION: This PHP snippet shows how to customize the operator text in the math equation, making it more human-readable and potentially more difficult for spam bots to interpret.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/math.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<label>[[!+fi.op1]] [[!+fi.operator:is=`-`:then=`minus`:else=`plus`]] [[!+fi.op2]]?</label>\n```\n\n----------------------------------------\n\nTITLE: Category-Specific PollsLatest Query in PHP\nDESCRIPTION: Implementation showing how to display polls from a specific category using the category parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollslatest.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsLatest? &category=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context Settings in MODX Templates\nDESCRIPTION: This snippet demonstrates how to retrieve a context setting in a MODX template or chunk using the placeholder syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[++my_context_setting]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal TinyMCE Editor Settings\nDESCRIPTION: Streamlined configuration for TinyMCE editor with minimal formatting options, limited to only bold and italic text styling. Ideal for simple text editing needs like headlines.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/rte_configs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"theme\": \"inlite\",\n    \"inline\": true,\n    \"selection_toolbar\": \"bold italic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming MODX Component via GET Parameter\nDESCRIPTION: URL demonstrating how to rename a MODX component by passing the new name as a GET parameter to the rename_it.php script.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/git-basics.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nhttp://c2263.paas2.ams.modxcloud.com/Sendex/rename_it.php?name=Sendex\n```\n\n----------------------------------------\n\nTITLE: Rendering Specific Resources in MODX (PHP)\nDESCRIPTION: Outputs only the resources with IDs 10, 11, and 12, using the 'myRowTpl' chunk for formatting. Sets parents to -1 to ignore parent-child relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources?\n    &parents=`-1`\n    &resources=`10,11,12`\n    &tpl=`myRowTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Displaying User Directory Size via sekUserGalleries.directory\nDESCRIPTION: This snippet provides users with information about the amount of server space they are currently utilizing, using a binary measurement approach.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.directory]\n```\n\n----------------------------------------\n\nTITLE: PHP Email Testing Script\nDESCRIPTION: PHP script to test email functionality on the server using PHP's mail() function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n $to = \"recipient@example.com\";\n $subject = \"Hi!\";\n $body = \"Hi,\\n\\nHow are you?\";\n if (mail($to, $subject, $body)) {\n   echo(\"<p>Message successfully sent!</p>\");\n  } else {\n   echo(\"<p>Message delivery failed...</p>\");\n  }\n ?>\n```\n\n----------------------------------------\n\nTITLE: Logging Entries to MODX Error Log\nDESCRIPTION: Shows how to use the $modx->log() method to write entries to the error.log file located in core/cache/logs/.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/directory-structure.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->log()\n```\n\n----------------------------------------\n\nTITLE: Setting a Placeholder in modX\nDESCRIPTION: This code snippet demonstrates how to use the `setPlaceholder` method in modX to define a placeholder named 'name' with the value 'Barry'. This makes the placeholder accessible within templates using the `[[+name]]` syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.setplaceholder.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->setPlaceholder('name','Barry');\n```\n\n----------------------------------------\n\nTITLE: cmDetailImage Chunk Content for Slideshow in MODX\nDESCRIPTION: This code snippet shows the content of the `cmDetailImage` chunk, which is used as a template for displaying a single image in a slideshow. It uses MODX placeholders to display the brand, type, and image, with the image placeholder utilizing the phpthumbof snippet for resizing and cropping.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcamperdetails-snippet.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <h3>[[+brand]] [[+type]] </h3>\n  <span>[[+image:phpthumbof=`w=620&h=360&far=c`]]</span>\n  <img src=\"[[+image:phpthumbof=`w=45&h=33&zc=1`]]\" alt=\"thumb\" />\n</li>\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Box Prompt with Callback\nDESCRIPTION: Shows how to create a message box prompt that captures user input using a callback function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\nExt.onReady(function() {\n    var title = 'Input Desired';\n    var msg = 'Please enter some text.';\n    var myCallback = function(btn, text) {\n        console.info('You pressed ' + btn);\n        if (text) {\n            console.info('You entered '+ text);\n        }\n    }\n    Ext.MessageBox.prompt(title,msg,myCallback);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of tolinks Snippet in MODX\nDESCRIPTION: This example shows how to convert a TV value 'tags' into links pointing to Resource 123 with the GET parameter 'tag'. The snippet processes a comma-delimited list of tags and generates relative URLs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/taglister.tolinks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!tolinks? &items=`[[*tags]]` &key=`tag` &target=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Customizing the Operation Description\nDESCRIPTION: This snippet showcases customizing the operator description in the math equation for enhanced obfuscation. It uses output filters to display \"minus\" or \"plus\" instead of the -/+ symbols, making it more difficult for spam bots to interpret.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.hooks/math.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<label>[[!+fi.op1]] [[!+fi.operator:is=`-`:then=`минус`:else=`плюс`]] [[!+fi.op2]]?</label>\n```\n\n----------------------------------------\n\nTITLE: Configuring DB Filters for MIGXdb Doodle Manager\nDESCRIPTION: This JSON snippet configures a search filter for the MIGXdb Doodle Manager. It allows users to search for doodles by name or description using a textbox. The 'getlist where' clause specifies the database query to perform when the filter is applied.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-doodles-manager-with-help-of-migxdb.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"{\\\"name:LIKE\\\":\\\"%[[+search]]%\\\",\\\"OR:description:LIKE\\\":\\\"%[[+search]]%\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Custom Package Format for SimpleSearch in PHP\nDESCRIPTION: Defines the format for searching custom tables in SimpleSearch using the customPackages property. The format includes class name, field names, package name, package path, and join criteria, with multiple packages separated by double pipes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclassName:fieldName(s):packageName:packagePath:joinCriteria||class2Name:fieldName(s):package2Name:package2Path:join2Criteria\n```\n\n----------------------------------------\n\nTITLE: Displaying a Tag Cloud with Space-Separated Tags using tagLister in PHP\nDESCRIPTION: This example uses tagLister to display a list of tags specified in the 'blog-tags' TV, which are separated by spaces. The links will go to Resource ID 123.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!tagLister? &tv=`blog-tags` &tvDelimiter=` ` &target=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Updated ResourceItem Chunk with Class Placeholder\nDESCRIPTION: Modified chunk template that includes a class placeholder for styling resource items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+rowCls]]\"><a href=\"[[~[[+id]]]]]\">[[+pagetitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Implementing PostHook for People Facet\nDESCRIPTION: Defines a PHP snippet for a PeopleFacetHook to query MODX users based on search input. It uses MODX query objects to filter users by username, fullname, or email and formats them for SimpleSearch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch/faceted-search-through-posthooks.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$c = $modx->newQuery('modUser');\n$c->innerJoin('modUserProfile','Profile');\n$c->where(array(\n    'username:LIKE' => '%'.$search.'%',\n    'OR:Profile.fullname:LIKE' => '%'.$search.'%',\n    'OR:Profile.email:LIKE' => '%'.$search.'%',\n));\n$count = $modx->getCount('modUser',$c);\n$c->select(array(\n    'modUser.*',\n    'Profile.fullname',\n    'Profile.email',\n));\n$c->limit($limit,$offset);\n$users = $modx->getCollection('modUser',$c);\n\n$results = array();\nforeach ($users as $user) {\n    $results[] = array(\n        'pagetitle' => $user->get('fullname'),\n        'longtitle' => $user->get('email'),\n        'link' => $modx->makeUrl(10,'',array(\n            'user' => $user->get('id'),\n        )),\n        'excerpt' => '',\n    );\n}\n$hook->addFacet('people',$results,$count);\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Image Desaturation with phpThumbOf\nDESCRIPTION: This snippet desaturates an image by 90% while resizing it to 960x300 pixels. It uses the 'sat' (saturation) filter with a negative value to reduce saturation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=sat|-90`]]\n```\n\n----------------------------------------\n\nTITLE: Invoking MoneyBird Invoices Snippet - PHP\nDESCRIPTION: This snippet demonstrates how to invoke the MoneyBirdInvoices snippet in a MODX template. It can be used to display invoices and can be customized with templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/moneybird.invoices.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!MoneyBirdInvoices]]\n```\n\n----------------------------------------\n\nTITLE: Dynamic Email Recipient Form Field Implementation\nDESCRIPTION: HTML select field implementation for dynamic email recipient selection, working in conjunction with emailSelectTo property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/email.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<select name=\"emailselect\">\n    <option value=\"1\" [[!+fi.emailselect:default=`1`:FormItIsSelected=`1`]]>Address 1</option>\n    <option value=\"2\" [[!+fi.emailselect:default=`1`:FormItIsSelected=`2`]]>Address 2</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: HTML Template for addToCookieList Snippet - MODX Revolution - PHP\nDESCRIPTION: The default chunk template for the addToCookieList snippet that defines how the link is displayed in HTML. It utilizes placeholders for dynamic content based on the current cookie state.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cookielist/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"[[+link]]\" title=\"[[+label]]\">[[+label]]</a>\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of MetaX Snippet with CSS Property\nDESCRIPTION: Shows how to use the MetaX snippet with the &css property to include multiple CSS files with Internet Explorer conditional statements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/metax/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!MetaX? &css=`file1.css,file2.css:lte IE 7,file3.css:lt IE 7`]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Ext JS Animation\nDESCRIPTION: JavaScript code that performs a div resize animation using Ext JS with bounce effect\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/3.-ext-js-tutorial-animation.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n    Ext.onReady(function() {\n        var myDiv1 = Ext.get('div1');\n        myDiv1.setSize(350,350, {duration: 1, easing:'bounceOut'});\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using CSSSweet Prefix Snippet Directly with Options\nDESCRIPTION: Shows how to use the prefix snippet directly with parameters, specifying the CSS to prefix and using the 'all' option to include all browser prefixes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.prefix.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[prefix?to=`transition: all 300ms ease;` &options=`all`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getFacebookProfile Snippet in MODX\nDESCRIPTION: Basic implementation of the getFacebookProfile snippet to retrieve MODX's Facebook page data with debugging enabled and setting results to placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookprofile.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getFacebookProfile? &user=`modxcms` &showAvailableData=`1` &toPlaceholders=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Using Breadcrumbs Snippet with Custom Separator in MODX Revolution\nDESCRIPTION: This snippet call demonstrates how to use the Breadcrumbs snippet with a custom pipe separator character instead of the default separator. The crumbSeparator property allows customizing how breadcrumb navigation items are visually separated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumbs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[Breadcrumbs? &crumbSeparator=`|`]]\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Feed using getFeed PHP Snippet\nDESCRIPTION: This snippet demonstrates how to embed a Twitter feed using the getFeed snippet in MODX. Required dependencies include installing the getFeed package. The code shows how to call the snippet to retrieve Twitter statuses in RSS format and display them using a specified template. Key parameters include the URL of the Twitter feed, the template name, and the tweet limit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getfeed/getfeed.adding-a-twitter-feed.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<ul>\n[[!getFeed?\n   &url=`http://twitter.com/statuses/user_timeline/123456789.rss`\n   &tpl=`twitterFeedTpl`\n   &limit=`3`\n]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Assessment Item Template - HTML\nDESCRIPTION: Default chunk template for displaying individual assessment items with alternating background colors and assessment details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div\n    id=\"exerplan-assessment-item-[[+exerplan.assessment.id]]\"\n    [[+exerplan.assessment.row_index:mod:is=`0`:then=`\n    style=\"border-top: 1px dotted #ddd; border-bottom: 1px dotted #ddd; background-color: #ddd; padding: 10px;\"\n    `:else=`\n    style=\"border-top: 1px dotted #ddd; border-bottom: 1px dotted #ddd; background-color: #efefef;padding: 10px;\"\n    `]]\n    >\n    <div\n        style=\"font-style: italic; font-size: smaller; color: grey;\"\n        >By: [[+exerplan.assessment.assessor.fullname:notempty=`\n        [[+exerplan.assessment.assessor.fullname]]\n        `:default=`\n        [[+exerplan.assessment.assessor.username]]\n        `]], [[+exerplan.assessment.created_on:date=`%d-%m-%Y`]]\n    </div>\n    <div>[[+exerplan.assessment.assessment]]</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Syntax for removeSessionCookie Method in MODX (PHP)\nDESCRIPTION: This snippet shows the syntax for the removeSessionCookie method of the modUser class. It takes a string parameter representing the context name and returns void.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.removesessioncookie.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nvoid removeSessionCookie (string $context)\n```\n\n----------------------------------------\n\nTITLE: Patch for MODX 2.1.0-rc4 and Earlier\nDESCRIPTION: A bug fix for MODX 2.1.0-rc4 and earlier that allows Solr to reindex the Resource if unpublished. Requires editing 'core/model/modx/processors/resource/unpublish.php' to replace 'OnDocUnpublished' with 'OnDocUnPublished', correcting the event invocation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.solr.md#2025-04-17_snippet_1\n\nLANGUAGE: MODX\nCODE:\n```\n\"core/model/modx/processors/resource/unpublish.php\"\nFind the string \\\"OnDocUnpublished\\\" in the invokeEvent call. Replace it with: `OnDocUnPublished`\n```\n\n----------------------------------------\n\nTITLE: Retrieving YouTube Playlist Videos with getYoutube\nDESCRIPTION: This example retrieves all videos from a specific YouTube playlist and displays them using the 'videoTpl' chunk template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getyoutube/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!getYoutube? &mode=`playlist` &playlist=`PLMC9KNkIncKtPzgY-5rmhvj7fax8fdxoj` &tpl=`videoTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Defining deleteTree Method Signature in PHP\nDESCRIPTION: Shows the method signature for deleteTree with its default parameters and return type. The method accepts a directory path and options array for configuring the deletion behavior.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.deletetree.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean deleteTree (string $dirname, [array $options = array(\n   'deleteTop' => false,\n   'skipDirs' => false,\n   'extensions' => array('.cache.php')\n)])\n```\n\n----------------------------------------\n\nTITLE: Accessing Fenom Placeholders with Special Characters\nDESCRIPTION: Example showing how to access Fenom placeholders that contain dots or dashes using the $_pls array syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{$_pls['my.tv']} for placeholders with dots or dashes\nor\n{$pagetitle} for placeholders without it\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Template in HTML\nDESCRIPTION: This HTML snippet shows how to create an email template (Chunk) for use with the FormIt email hook. It demonstrates the use of placeholders to insert form field values into the email content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/email.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello,</p>\n<p>[[+name]] just purchased the CDO package: [[+cdo_package]].</p>\n<p>Their email: [[+email]]</p>\n<p>Thanks!</p>\n```\n\n----------------------------------------\n\nTITLE: Getting User ID for a Specific Context in modX\nDESCRIPTION: This code snippet demonstrates how to retrieve the currently logged-in user's ID within the 'sports' context using the `getLoginUserID` method of the `$modx` object. The returned ID is stored in the `$id` variable. The `$modx` object is assumed to be initialized and available in the current scope.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getloginuserid.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n``` php\n$id = $modx->getLoginUserID('sports');\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Wrong Documentation Example\nDESCRIPTION: Shows incorrect way of documenting platform-specific instructions without proper platform identification.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/documentation/style-guide.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo start MODX POS double click start.bat\n```\n\n----------------------------------------\n\nTITLE: Adding PHP Resolver to Vehicle in MODX Transport Package\nDESCRIPTION: Code that adds a PHP resolver to the Menu vehicle in a MODX transport package. This resolver will handle database table creation when the package is installed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'Adding in PHP resolvers...');\n$vehicle->resolve('php',array(\n    'source' => $sources['resolvers'] . 'resolve.tables.php',\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving Content from Resource ID 12 in MODX\nDESCRIPTION: Example of how to use @RESOURCE binding to output the parsed content of a resource with ID 12. This binding returns a string containing the parsed content of the specified resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/resource-binding.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@RESOURCE 12\n```\n\n----------------------------------------\n\nTITLE: Using UTM Tags in MODX Syntax\nDESCRIPTION: This MODX snippet demonstrates how to use the UTM tags within the HTML structure. It shows examples for setting the page title and H1 header with default values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/utm-tags-for-modx/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<head>\n    <title>[[!utm:default=`Default page title`? &input=`title`]]</title>\n</head>\n\n<body>\n    <h1>[[!utm:default=`Default H1 Header`? &input=`pagetitle`]]</h1>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Apache Loaded Modules Output Example\nDESCRIPTION: This shows example output of the apachectl command, specifically highlighting the `security2_module` which indicates that ModSecurity is enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nLoaded Modules:\n core_module (static)\n rewrite_module (static)\n so_module (static)\n suphp_module (shared)\n security2_module (shared)  # <--- this is ModSecurity\n```\n\n----------------------------------------\n\nTITLE: Deleting Complete Directory with Files in PHP\nDESCRIPTION: Example showing how to delete an entire directory and its contents by setting deleteTop to true and extensions to false to include all file types.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.deletetree.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->cacheManager->deleteTree(MODX_ASSETS_PATH.'videos/',array(\n   'deleteTop' => true,\n   'extensions' => false,\n));\n```\n\n----------------------------------------\n\nTITLE: pdoSitemap Implementation\nDESCRIPTION: Shows pdoSitemap usage with logging enabled and XML forcing disabled for performance testing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoSitemap?\n    &forceXML=`0`\n    &showLog=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using getUsers Snippet in MODX Revolution\nDESCRIPTION: The getUsers snippet retrieves user information. This can be called with or without caching enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/usertools/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getUsers]]\n```\n\n----------------------------------------\n\nTITLE: Recent Albums with Placeholder and Non-Prominent Filter\nDESCRIPTION: Retrieves the 3 most recent albums, including non-prominent albums, and sets the result to a placeholder named 'albums'. Shows advanced filtering and placeholder assignment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryAlbums?\n    &limit=`3`\n    &prominentOnly=`0`\n    &toPlaceholder=`albums`\n]]\n```\n\n----------------------------------------\n\nTITLE: GetResources Template Filter Query - PHP\nDESCRIPTION: Filters child resources based on a specific template ID using WHERE condition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`[[*id]]` &where=`{\"template:=\":8}` &tpl=`myRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Basic pdoUsers Implementation\nDESCRIPTION: Simple implementation of pdoUsers snippet to list all users without any parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoUsers.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoUsers]]\n```\n\n----------------------------------------\n\nTITLE: Default tplPreview Chunk for QuipReply in MODX\nDESCRIPTION: This is the default Chunk for the tplPreview parameter of the QuipReply extra. It displays a preview of the comment using placeholders for username, creation date, and the comment itself. The gravatarUrl placeholder is used to display the user's Gravatar image if available.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipreply/tplpreview.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<div class=\\\"quip-comment quip-preview\\\" id=\\\"quip-comment-preview-box-[[+idprefix]]\\\">\\n    <div class=\\\"quip-comment-right\\\">\\n        [[+gravatarUrl:notempty=`<img src=\\\"[[+gravatarUrl]]\\\" class=\\\"quip-avatar\\\" alt=\\\"\\\" />`]]\\n    </div>\\n\\n    <p class=\\\"quip-comment-meta\\\">\\n        <span class=\\\"quip-comment-author\\\">[[+username]]:</span><br />\\n        <span class=\\\"quip-comment-createdon\\\">[[+createdon]]</span>\\n    </p>\\n\\n<div class=\\\"quip-comment-body\\\"><p>[[+comment]]</p></div>\\n    <br class=\\\"clear\\\" />\\n</div>\\n\"\n```\n\n----------------------------------------\n\nTITLE: Using getCollectionGraph to Fetch ZIP Details in PHP\nDESCRIPTION: Illustrates fetching of ZIP-related details using getCollectionGraph with xPDO framework. Outputs a structured array with data like timezone, state, and county. Requires xPDO package setup and proper database schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/graphs.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$out = false;\n$xpdo->setPackage('sw_zipCode', MODX_BASE_PATH.'wsw/model/', 'sw_');\n$collection= $xpdo->getCollectionGraph('Zip', '{\"TZ\":{},\"ST\":{},\"CT\":{}}', $lookupZip);\nforeach ($collection as $obj)\n{\n    if (is_object($obj))\n    {\n        $out = $obj->toArray();                      // 'Zip'\n        $out[timezone] = $obj->TZ->get('tzname');\n        $out[state] = $obj->ST->get('statename');\n        $out[county] = $obj->CT->get('countyname');\n    }\n}\nreturn $out;\n?>\n```\n\n----------------------------------------\n\nTITLE: Declaring modX::getTree Method Signature\nDESCRIPTION: Method signature showing the getTree function parameters including resource ID(s), depth limit, and options array for filtering. Returns an array representing the resource tree structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.gettree.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getTree ([int|array $id = null], [int $depth = 10], [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Iframe Type sekFancyBox Implementation in PHP\nDESCRIPTION: Example of implementing an iframe modal window with sekFancyBox to display external website content. The type property must be set to iframe for this functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`iframe`\n &linktext=`SEKNet Solutions`\n &link=`<http://www.seknetsolutions.com>`\n]]\n```\n\n----------------------------------------\n\nTITLE: Loading a Class with xPDO::loadClass in PHP\nDESCRIPTION: Demonstrates how to use the xPDO::loadClass method to load a class file. The method takes a fully qualified name and an optional path parameter. It returns the class name on success or false on failure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdo/xpdo.loadclass.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nstring|boolean loadClass (string $fqn, [ $path = ''], [ $ignorePkg = false], [ $transient = false])\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX TV Form Tabs in JSON\nDESCRIPTION: This JSON configuration defines the structure of the MIGX TV form, creating a tab for 'Operating Hours' with fields for day, opening time, and closing time.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/simple-opening-hours-table.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"caption\": \"Operating Hours\",\n  \"fields\": [{\n      \"field\": \"day\",\n      \"caption\": \"Day\"\n    },\n    {\n      \"field\": \"from\",\n      \"caption\": \"From\"\n    },\n    {\n      \"field\": \"until\",\n      \"caption\": \"Until\"\n    }\n  ]\n}]\n```\n\n----------------------------------------\n\nTITLE: MODx.FormPanel Dirty Field Methods\nDESCRIPTION: Methods for handling form field dirty state management\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.formpanel.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nformPanel.isDirty(); // Check dirty status\nformPanel.clearDirty(); // Clear dirty status\nformPanel.markDirty(); // Mark as dirty\n```\n\n----------------------------------------\n\nTITLE: Accessing Extended User Data in MODX Snippet\nDESCRIPTION: Example of retrieving and working with extended user data using the custom extension\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-users.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('extendeduser', MODX_CORE_PATH . 'components/extendeduser/model/', 'ext_');\n$user = $modx->getObject('extUser', 123); // where 123 is the user ID\n$data = $user->getOne('Data'); // use alias from schema\n// toArray will print additional data, like facebook_url\nreturn print_r($data->toArray(), true);\n```\n\n----------------------------------------\n\nTITLE: Menu Generation from Multiple Parents with Parent Display\nDESCRIPTION: Generates a menu from specified parent resources and enables displaying parent resources themselves using the displayStart parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoMenu.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[pdoMenu?\n    &parents=`10,15`\n    &displayStart=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Gallery Item Thumbnail with sekFancyBox Integration\nDESCRIPTION: Configures individual gallery item thumbnails with sekFancyBox modal window settings and image display properties\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/sekfancybox-and-gallery.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<li>\n[[!sekfancybox?\n    &type=`media`\n    &mousewheel=`1`\n    &buttonhelper=`1`\n    &modalclass=`[[+cls]]`\n    &group=`gal`\n    &title=`[[+description]]`\n    &linktext=`<img class=\"[[+imgCls]]\" src=\"[[+thumbnail]]\" alt=\"[[+name]]\" [[+image_attributes]] />`\n    &link=`[[+image]]`]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Loading modSmarty Service Example\nDESCRIPTION: Simple example demonstrating how to load the modSmarty service using dot notation for class specification.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getservice.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('smarty','smarty.modSmarty');\n```\n\n----------------------------------------\n\nTITLE: Using getImageList Chunk for Preview\nDESCRIPTION: This PHP snippet shows how to use the `getImageList` snippet in MODX to render the output of MIGX items within a preview resource. The `&tpl` parameter uses `@FIELD:MIGX_formname` to dynamically select a chunk based on the form name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.backend-usage.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!getImageList? &tpl=`@FIELD:MIGX_formname`&tvname=`multiitemsgridTv`]]\n[[!getImageList? &tvname=`multiitemsgridTv2`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a MODX Snippet to Interact with CMPGenerator Table\nDESCRIPTION: This PHP snippet demonstrates how to interact with a table created using CMPGenerator within a MODX Revolution snippet. It adds the package, creates a new object, saves data to the table, queries the table, and outputs the data in an HTML table.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cmpgenerator/cmpgenerator.5-minute-example.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n/**\\n * mytest table\\n */\\n$output = '';// this is what the snippet will return\\n\\n// add package so xpdo can be used:\\n$package_path = $modx->getOption('core_path').'components/mytest/model/';\n// see the scheme file and the xml model element and you will see the attribute package and that must match here\n$modx->addPackage('mytest', $package_path);\n\n// lets add some data!\\n// see the scheme file and the xml object element and you will see the attribute class and that must match here\\n// the class name is taken from table names without the prefixed, and is capitalized.\\n$myRow = $modx->newObject('Test');\n\n$data = array(\n        'name' => 'MODX Revolution',\n        'description' => 'A great CMS product...'\n    );\n$myRow->fromArray($data);\n\nif ( !$myRow->save() ) {\\n    $output .= '<p>Could not create row</p>';\\n} else {\\n    $output .= '<p>Created row successfully</p>';\\n}\n\n// now lets show the data in a quick and dirty table:\\n$output .= '\\n<table>\\n    <tr>\\n        <th>ID</th>\\n        <th>Name</th>\\n        <th>Description</th>\\n    </tr>';\n\n// Note for all HTML you should be using Chunks see: <a href=\\\"https://docs.modx.com/current/en/building-sites/elements/chunks\\\"> chunks</a>\n/* build query */\n$query = $modx->newQuery('Test');\n$rows = $modx->getIterator('Test', $query);\n\n/* iterate */\n$list = array();\nforeach ($rows as $row) {\\n    // from object to array you can also do $row->get('name');\n    $row_array = $row->toArray();\n\n    $output .= '\\n    <tr>\\n        <td>'.$row_array['id'].'</td>\\n        <td>'.$row_array['name'].'</td>\\n        <td>'.$row_array['description'].'</td>\\n    </tr>';\n}\n$output .= '\\n</table>';\n\nreturn $output;\"\n```\n\n----------------------------------------\n\nTITLE: Creating Fred Sidebar Menu Structure\nDESCRIPTION: Example HTML structure for a settings menu in the Fred sidebar, showing the proper nesting of form elements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/sidebar_plugins.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<dd>\n    <h3 class=\"\">Settings</h3>\n    <form class=\"fred--page_settings_form\">\n        <fieldset class=\"\">\n            <label class=\"\">Page Title<input class=\"\" type=\"text\"/></label>\n            …\n        </fieldset>\n    </form>\n</dd>\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Paths for Package Structure\nDESCRIPTION: Code that defines essential directory paths for the build process, storing them in a 'sources' array for easy reference throughout the script. These paths point to build resources, core files, assets, and documentation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$root = dirname(dirname(__FILE__)).'/';\n$sources= array (\n    'root' => $root,\n    'build' => $root .'_build/',\n    'resolvers' => $root . '_build/resolvers/',\n    'data' => $root . '_build/data/',\n    'source_core' => $root.'core/components/quip',\n    'lexicon' => $root . 'core/components/quip/lexicon/',\n    'source_assets' => $root.'assets/components/quip',\n    'docs' => $root.'core/components/quip/docs/',\n);\nunset($root); /* save memory */\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Fonts and Setting Default Styles for TinyMCE in CSS\nDESCRIPTION: This CSS snippet imports Google Fonts (Open Sans and Roboto) and sets default styles for the TinyMCE editor body and headings. It demonstrates how to apply custom fonts to different elements within the editor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tinymcerte/customfonts.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400&display=swap');\n@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400&display=swap');\n\nbody {\n  font-family: 'Open Sans', sans-serif;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  font-family: 'Roboto', sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Customized PollsResult Implementation in MODX\nDESCRIPTION: Advanced implementation of PollsResult with custom templates and result link variable configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollsresult.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsResult?\n  &tpl=`myVoteOuter`\n  &tplAnswer=`myVoteAnswer`\n  &resultLinkVar=`myPoll`\n]]\n```\n\n----------------------------------------\n\nTITLE: Running New MODX Installation via Command Line\nDESCRIPTION: Command to run a new installation of MODX via the PHP command line. This command should be executed from the MODX setup directory after configuring the XML file with appropriate database information and MODX paths.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/cli.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp ./index.php --installmode=new\n```\n\n----------------------------------------\n\nTITLE: Configuring .htaccess for SmartOptimizer with PHP\nDESCRIPTION: Describes the process of setting up SmartOptimizer through .htaccess, allowing for all CSS and JS files to be processed automatically. Includes configurations for expiration and rewrite rules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/smartoptimizer/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<IfModule mod_expires.c>\n  <FilesMatch \"\\.(gif|jpg|jpeg|png|swf|css|js|html?|xml|txt|ico)$\">\n    ExpiresActive On\n    ExpiresDefault \"access plus 10 years\"\n  </FilesMatch>\n</IfModule>\n<IfModule mod_rewrite.c>\n  RewriteEngine On  \n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteRule ^(.*\\.(js|css))$ assets/components/smartoptimizer/connector.php?$1\n  <IfModule mod_expires.c>\n    RewriteCond %{REQUEST_FILENAME} -f\n    RewriteRule ^(.*\\.(js|css|html?|xml|txt))$ assets/components/smartoptimizer/connector.php?$1\n  </IfModule>\n  <IfModule !mod_expires.c>\n    RewriteCond %{REQUEST_FILENAME} -f\n    RewriteRule ^(.*\\.(gif|jpg|jpeg|png|swf|css|js|html?|xml|txt|ico))$ assets/components/smartoptimizer/connector.php?$1\n  </IfModule>\n</IfModule>\n<FilesMatch \"\\.(gif|jpg|jpeg|png|swf|css|js|html?|xml|txt|ico)$\">\n  FileETag none\n</FilesMatch>\n```\n\nLANGUAGE: php\nCODE:\n```\nRewriteCond %{REQUEST_FILENAME} !(\\.css)$\nRewriteCond %{REQUEST_FILENAME} !(\\.js)$\n```\n\nLANGUAGE: php\nCODE:\n```\nRewriteRule ^(.*)$ index.php?q=$1 [L,QSA]\n```\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"assets/css/file1.css,file2.css\"/>\n<link rel=\"stylesheet\" href=\"assets/css/file1.css,file2.css\"/>\n```\n\n----------------------------------------\n\nTITLE: Using xPDOCacheManager.getCachePath Example in PHP\nDESCRIPTION: Example demonstrates how to use the getCachePath method to retrieve and display the absolute path to the cache directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.getcachepath.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\necho $xpdo->cacheManager->getCachePath();\n// outputs: '/path/to/xpdo/cache/';\n```\n\n----------------------------------------\n\nTITLE: Default Archivist Template Chunk\nDESCRIPTION: The default template chunk used by the Archivist snippet to display archive entries. It creates a list item containing a link to the archive with the date and count of resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/archivist/archivist/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+cls]]\">\n    <a href=\"[[+url]]\" title=\"[[+date]]\">[[+date]]</a> ([[+count]])\n</li>\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Message Box Options\nDESCRIPTION: Demonstrates advanced message box configuration including custom width, buttons, and icons.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\nExt.onReady(function() {\n    var myCallback = function(btn, text) {\n        console.info('You pressed ' + btn);\n        if (text) {\n            console.info('You entered '+ text);\n        }\n    }\n    Ext.MessageBox.show({\n        title : 'Be Careful!',\n        msg : 'Are you sure?',\n        width : 300,\n        buttons : Ext.MessageBox.YESNOCANCEL,\n        fn : myCallback,\n        icon : Ext.MessageBox.QUESTION\n    });\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Wayfinder Chunk Template for Tab Titles\nDESCRIPTION: This MODX chunk template is used with the Wayfinder snippet to generate the HTML for each tab. It utilizes Wayfinder-specific placeholders like `[[+wf.id]]`, `[[+wf.classes]]`, `[[+wf.link]]`, `[[+wf.title]]`, and `[[+wf.linktext]]` to create the tab structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"<li[[+wf.id]][[+wf.classes]]]><a href=\\\"[[+wf.link]]\\\" title=\\\"[[+wf.title]]\\\">[[+wf.linktext]]</a></li>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Foreign Key Definition in PHP using xPDOObject\nDESCRIPTION: This snippet demonstrates how to use the getFKDefinition method to retrieve the foreign key definition for a User who edited a Document. It shows the method syntax and an example of the returned array structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getfkdefinition.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray getFKDefinition (string $alias)\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$document = $xpdo->getObject('Document',1);\n$fkdef = $document->getFKDefinition('EditedBy');\nprint_r($fkdef);\n\n/* Outputs:\nArray (\n  [class] => User\n  [key] => editedby\n  [local] => editedby\n  [foreign] => id\n  [cardinality] => one\n  [owner] => foreign\n  [type] => aggregate\n) */\n```\n\n----------------------------------------\n\nTITLE: Displaying User Information in HTML Dashboard Widget\nDESCRIPTION: This snippet demonstrates how to use a cached placeholder to display the username of the logged-in user within an HTML Dashboard Widget.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/dashboards/widget-types/html.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHello, [[+modx.user.username]]!\n```\n\n----------------------------------------\n\nTITLE: Default URL Template for Sitemap\nDESCRIPTION: XML template for individual URL entries in the sitemap, including location, last modified date, change frequency and priority\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n@INLINE <url>\\n\\t\n<loc>[[+url]]</loc>\\n\\t\n<lastmod>[[+date]]</lastmod>\\n\\t\n<changefreq>[[+update]]</changefreq>\\n\\t\n<priority>[[+priority]]</priority>\\n\n</url>\n```\n\n----------------------------------------\n\nTITLE: Getting Least Visited Child Pages with Custom Chunk in MODX Revolution\nDESCRIPTION: This snippet retrieves a comma-delimited list of IDs for the 4 least visited pages that are children of resource 2, using a custom chunk to render results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &parents=`2` limit=`4` &dir=`ASC`  &chunk=`hitInfo` &outputSeparator=`,`]]\n```\n\n----------------------------------------\n\nTITLE: Using album.manage with Templates in MODX\nDESCRIPTION: This snippet expands on the previous example by allowing the user to specify template parameters for the album management functionality. This enables customization of the forms and confirmation dialogs for album actions. The example highlights how to set specific templates for the album form and delete confirmation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.album.manage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!album.manage? &tplFormAlbum=`album.form` &tplDeleteConfirmation=`album.delete`]]\n```\n\n----------------------------------------\n\nTITLE: Typical File Structure for MODX CMP Components\nDESCRIPTION: Shows the standard file structure and locations for key CMP components including connectors, processors and controllers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- Connector: assets/components/mycomponent/connector.php or assets/components/mycomponent/mgr/connector.php\n- Processor: core/components/mycomponent/processors/mgr/processorname.php\n- Controller: core/components/mycomponent/controllers/controllername.php\n```\n\n----------------------------------------\n\nTITLE: MODX Token Format Example\nDESCRIPTION: Example showing the format of a MODX authentication token stored in the HTTP_MODAUTH POST parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/security/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$_POST['HTTP_MODAUTH'] => modx12345xxxx.9887_abcdef1234.0987654\n```\n\n----------------------------------------\n\nTITLE: Defining Form Fields in MODx Window\nDESCRIPTION: This JavaScript snippet demonstrates how to define form fields within a MODx window using xtypes.  It shows how to specify field types, labels, names, ids, and layout anchors to create a form for data input. The snippet utilizes various standard xtypes like textfield and textarea.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\n,fields: [\n    {xtype: 'textfield',fieldLabel: _('name'),name: 'name',id: 'sendex-'+this.ident+'-name',anchor: '99%'}\n    ,{xtype: 'textarea',fieldLabel: _('description'),name: 'description',id: 'sendex-'+this.ident+'-description',height: 150,anchor: '99%'}\n]\n\n```\n\n----------------------------------------\n\nTITLE: Calling ObjectExplorer snippet with 'columns' parameter\nDESCRIPTION: This snippet shows how to call the ObjectExplorer snippet with the `columns` parameter set to `5`.  This changes the number of columns in the index at the top of the output. Adjusting the width of the JumpList in the CSS file may be required.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/objectexplorer/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\n[[ObjectExplorer? &columns=`5`]]\n\n```\n\n----------------------------------------\n\nTITLE: FormIt Properties Table in Markdown\nDESCRIPTION: Markdown table documenting FormIt properties with their descriptions and default values. Includes properties for hooks, validation, error handling, storage and placeholder configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                      | Description                                                                                                                                                                                                                                                                                                                                                                                          | Default Value                                                               |\n| ------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------- |\n| preHooks                  | What scripts to fire, if any, once the form loads. This can be a comma-separated list of [hooks](extras/formit/formit.hooks \"FormIt.Hooks\"), and if the first fails, the proceeding ones will not fire. A hook can also be a Snippet name that will execute that Snippet.                                                                            |                                                                             |\n| renderHooks               | What scripts to fire, if any, once the form loads, preHooks are finished and all fields & errors has been set. This can be a comma-separated list of [hooks](extras/formit/formit.hooks) used for manipulating all the fields of the form before everything is set based on given data from other packages or preHooks. A hook can also be a Snippet name that will execute that Snippet. |                                                                             |\n| hooks                     | What scripts to fire, if any, after the form passes validation. This can be a comma-separated list of [hooks](extras/formit/formit.hooks), and if the first fails, the proceeding ones will not fire. A hook can also be a Snippet name that will execute that Snippet.                                                                                                                   |                                                                             |\n| submitVar                 | If set, will not begin form processing if this POST variable is not passed. Notice: Needed if you use `&store` property (+ set submit var in input=\"submit\"!).                                                                                                                                                                                                                                                       |                                                                             |\n| validate                  | A comma-separated list of fields to validate, with each field name as name:validator (eg: `username:required,email:required`). [Validators](extras/formit/formit.validators \"FormIt.Validators\") can also be chained, like `email:email:required`. This property can be specified on multiple lines.                                                                                                                 |                                                                             |\n| validationErrorMessage    | A general error message to set to a placeholder `[[!+fi.validation_error_message]]` if validation fails. Can contain `[[+errors]]` if you want to display a list of all errors at the top.                                                                                                                                                                                                                           | A form validation error occurred. Please check the values you have entered. |\n| validationErrorBulkTpl    | HTML tpl that is used for each individual error in the generic validation error message value.                                                                                                                                                                                                                                                                                                                       | `[[+error]]`                                                                |\n| errTpl                    | The wrapper html for error messages. Note: not a chunk, just straight HTML.                                                                                                                                                                                                                                                                                                                                          | `[[+error]]`                                                                |\n| customValidators          | A comma-separated list of custom validator names (snippets) you plan to use in this form. They must be explicitly stated here, or they will not be run.                                                                                                                                                                                                                                                              |                                                                             |\n| clearFieldsOnSuccess      | If true, will clear the fields on a successful form submission that does not redirect.                                                                                                                                                                                                                                                                                                                               | 1                                                                           |\n| store                     | If true, will store the data in the cache for retrieval using the [FormItRetriever](extras/formit/formit.formitretriever \"FormIt.FormItRetriever\") snippet.                                                                                                                                                                                                                                                          | 0                                                                           |\n| storeTime                 | If 'store' is set to true, this specifies the number of seconds to store the data from the form submission. Defaults to five minutes.                                                                                                                                                                                                                                                                                | 300                                                                         |\n| storeLocation             | When using store, this defines where the form is stored after submit. Possible options are 'cache' and 'session'. Defaults to 'cache'.                                                                                                                                                                                                                                                                               | cache                                                                       |\n| placeholderPrefix         | The prefix to use for all placeholders set by FormIt for fields. Make sure to include the '.' separator in your prefix.                                                                                                                                                                                                                                                                                              | fi.                                                                         |\n| successMessage            | If not using the redirect hook, display this success message after a successful submission.                                                                                                                                                                                                                                                                                                                          |                                                                             |\n| successMessagePlaceholder | The name of the placeholder to set the success message to.                                                                                                                                                                                                                                                                                                                                                           | fi.successMessage                                                           |\n| redirectTo                | page ID of a \"Thank You\" page, where the visitor can be sent after successfully submitting the form, but this parameter is read ONLY if you include \"redirect\" in the list of &hooks.                                                                                                                                                                                                                                |                                                                             |\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic LexRating in MODX Revolution\nDESCRIPTION: Basic implementation of the LexRating snippet that allows members to rate content. It uses the page title as the rating name and categorizes ratings under the 'articles' group.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lexrating/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[LexRating?\n&name=`[[*pagetitle]]`\n&group=`articles`\n&userGroups=`Members`\n]]\n```\n\n----------------------------------------\n\nTITLE: Resource Management Migration in MODX\nDESCRIPTION: Resource (document) management operations migration from Evolution to Revolution, showing new object-oriented approach.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n// Evolution\n$doc = $modX->getDocument($id);\n\n// Revolution\n$doc = $modX->getObject('modResource', $criteria);\n\n// Evolution\n$docs = $modX->getDocuments();\n\n// Revolution\n$docs = $modX->getCollection('modResource', $criteria);\n// or\n$docs = $modX->getIterator('modResource', $criteria);\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL Parameters with getUrlParam Snippet\nDESCRIPTION: Example of retrieving the 'val' parameter and ensuring it's an integer. The snippet is called uncached to get the current value from the URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/geturlparam/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getUrlParam? &name=`val` &int=`1`]]\n```\n\n----------------------------------------\n\nTITLE: getField Snippet to Retrieve Resource Field\nDESCRIPTION: This PHP snippet retrieves a specific field from a MODX resource. It takes the resource ID and the field name as parameters and returns the corresponding field value.  If no ID is provided, it gets the field from the current resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\n/**\n * Захватывает поле для указанного ресурса\n */\n\n/* Установка некоторых свойств по умолчанию */\n$id = $modx->getOption('id',$scriptProperties,false);\n$field = $modx->getOption('field',$scriptProperties,'pagetitle');\nif ($id) { /* Захват объекта ресурса */\n  $resource = $modx->getObject('modResource',$id);\n  if ($resource == null) return '';\n} else { /* если идентификатор не указан, используйте текущий документ */\n  $resource =& $modx->resource;\n}\n/* вернуть значение поля */\nreturn $resource->get($field);\n?>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Reply Controller in PHP\nDESCRIPTION: This code snippet provides an example of configuring the thread/reply controller in the Discuss plugin using PHP. It demonstrates how to add a JavaScript footer file and specify a custom page template, allowing for template reuse across controllers. Dependencies include the manifest.php array in the Discuss plugin’s templates directory. The key parameters include the controller name, JavaScript files, and page template options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.creating-a-discuss-theme.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'thread/reply' => array(\n    'js' => array(\n        'footer' => array(\n            'dis.thread.js',\n        ),\n    ),\n    'options' => array(\n        'pageTpl' => 'common/thread-with-form',\n    ),\n    /* ...*/\n),\n```\n\n----------------------------------------\n\nTITLE: Retrieving User ID for Specific Context\nDESCRIPTION: Example showing how to retrieve the current user ID for a specific context named 'sports' using the getLoginUserID method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getloginuserid.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$id = $modx->getLoginUserID('sports');\n```\n\n----------------------------------------\n\nTITLE: Defining a Country Combo Box\nDESCRIPTION: This code snippet defines a country combo box using the `input.combobox` snippet in MODX. It sets the `input_id` to \"ftcountry\", pre-selects \"United States\", and specifies the object to pull data from, including sorting and labeling options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools-advanced-examples.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<label for=\\\"ftcountry\\\">Country</label>\\n[[!input.combobox? &input_id=`ftcountry` &value=`United States`\\n    &object=`{\\\"name\\\": \\\"sekftCountries\\\", \\\"sortby\\\": \\\"country_name\\\", \\\"value\\\": \\\"country_name\\\", \\\"label\\\": \\\"country_name\\\"}`\\n]]\"\n```\n\n----------------------------------------\n\nTITLE: Gallery Snippet Call with Pagination\nDESCRIPTION: Configures getPage and Gallery snippets to display paginated image gallery with custom settings for thumbnails and album display\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/sekfancybox-and-gallery.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage?\n    &elementClass=`modSnippet`\n    &element=`Gallery`\n    &totalVar=`gallery.total`\n    &limit=`20`\n    &album=`3`\n    &containerTpl=`galContainer.custom`\n    &thumbTpl=`galItemThumb.custom`\n    &thumbWidth=`145`\n    &thumbHeight=`145`\n    &imageWidth=`700`\n    &imageHeight=`500`]]\n```\n\n----------------------------------------\n\nTITLE: Loading a Lexicon Topic in MODX\nDESCRIPTION: This PHP code snippet demonstrates how to load a specific lexicon topic within a MODX Revolution environment. The `$modx->lexicon->load()` function is used to load the 'buttons' topic from the 'tinymce' lexicon. This is useful for accessing translated strings within custom manager pages or components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/menus/actions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon->load('tinymce:buttons');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic MODX Template with Resource Fields in HTML\nDESCRIPTION: A simple HTML template for MODX that demonstrates how to use Resource field placeholders like pagetitle, description, longtitle, id, introtext, menutitle, and content. The [[*content]] tag is essential as it indicates where the Resource's content will be displayed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/templates.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head>\n    <title>[[*pagetitle]]</title>\n    <meta name=\"description\" content=\"[[*description]]\"/>\n</head>\n<body>\n<h1>[[*longtitle]]</h1>\n\nPage ID: [[*id]]<br/>\nIntroText (Summary): [[*introtext]]<br/>\nMenuTitle: [[*menutitle]]\n\n<hr/>\n\n[[*content]]\n\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Date Template Variable Input Options in JSON\nDESCRIPTION: JSON configuration options for Date template variables in MODX. These options can be used in MIGX configurations to control date validation, restrictions, and display preferences including time handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"disabledDates\": \"\",\n    \"disabledDays\": \"\",\n    \"minDateValue\": \"\",\n    \"minTimeValue\": \"\",\n    \"maxDateValue\": \"\",\n    \"maxTimeValue\": \"\",\n    \"startDay\": \"\",\n    \"timeIncrement\": \"\",\n    \"hideTime\": \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tag Input Type JSON Configuration Options\nDESCRIPTION: JSON configuration options for the Tag input type. Only includes the allowBlank setting to control whether empty values are permitted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Validating Properties in MODX Snippet\nDESCRIPTION: This PHP snippet for MODX verifies the input and tpl properties, ensuring they are set before proceeding. It uses modX::getOption and modX::getChunk for option retrieval and chunk verification, returning an error message if conditions are not met.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (empty($input)) { return 'This article is so unique, that we couldn\\'t find anything related to it!'; }\n$tpl = $modx->getOption('tpl',$scriptProperties,'relatedPagesTpl');\nif ($modx->getChunk($tpl) == '') { return 'We found some related pages, but don\\'t know how to present it.'; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Field with fastField in MODX\nDESCRIPTION: Demonstrates how to use the fastField plugin to retrieve the pagetitle of a specific resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[#123.pagetitle]]\n```\n\n----------------------------------------\n\nTITLE: Removing Session Cookie for User in MODX (PHP)\nDESCRIPTION: This snippet demonstrates how to use the removeSessionCookie method of the modUser class to remove a session cookie for a user in a specific context. It requires an instance of modUser and takes the context name as a parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.removesessioncookie.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user->removeSessionCookie('sports');\n```\n\n----------------------------------------\n\nTITLE: Loginza Logout Chunk Template\nDESCRIPTION: This chunk template displays a welcome message with the user's full name and a logout link. It also includes an error message area that appears if there are any errors. The placeholders can access user profile data and the logout URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/loginza/tpl.loginza.logout.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"Wellcome, [[+fullname]]!\\n<br/><br/>\\n<a href='[[+logout_url]]'>Logout</a>\\n[[+error:notempty=`<div class=\\\"alert alert-block alert-error\\\">[[+error]]</div>`]]\"\n```\n\n----------------------------------------\n\nTITLE: Contact Form HTML\nDESCRIPTION: This HTML code defines the structure of the contact form, including input fields for name, email, subject, and message. It incorporates MODX placeholders to display validation errors and populate form fields with previously entered values. The form includes hidden fields for spam prevention, select and checkbox elements with FormItIsSelected and FormItIsChecked functionality, and recaptcha support.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.tutorials-and-examples/examples.simple-contact-page.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h2>Контактная форма</h2>\n\n[[!+fi.validation_error_message:notempty=`\n<p>[[!+fi.validation_error_message]]</p>\n`]]\n\n<form action=\"[[~[[*id]]]]\" method=\"post\" class=\"form\">\n    <input type=\"hidden\" name=\"nospam\" value=\"\" />\n\n    <label for=\"name\">\n        Имя:\n        <span class=\"error\">[[!+fi.error.name]]</span>\n    </label>\n    <input type=\"text\" name=\"name\" id=\"name\" value=\"[[!+fi.name]]\" />\n\n    <label for=\"email\">\n        Email:\n        <span class=\"error\">[[!+fi.error.email]]</span>\n    </label>\n    <input type=\"text\" name=\"email\" id=\"email\" value=\"[[!+fi.email]]\" />\n\n    <label for=\"subject\">\n        Тема:\n        <span class=\"error\">[[!+fi.error.subject]]</span>\n    </label>\n    <input type=\"text\" name=\"subject\" id=\"subject\" value=\"[[!+fi.subject]]\" />\n\n    <label for=\"text\">\n        Сообщение:\n        <span class=\"error\">[[!+fi.error.text]]</span>\n    </label>\n    <textarea name=\"text\" id=\"text\" cols=\"55\" rows=\"7\" value=\"[[!+fi.text]]\">\n[[!+fi.text]]</textarea\n    >\n\n    <label>\n        Числа:[[+fi.error.numbers]]\n        <select name=\"numbers\" value=\"[[!+fi.numbers]]\">\n            <option value=\"\">Select an option...</option>\n            <option value=\"one\" [[!+fi.numbers:FormItIsSelected=\"`one`]]\">\n                Один\n            </option>\n            <option value=\"two\" [[!+fi.numbers:FormItIsSelected=\"`two`]]\">\n                Два\n            </option>\n            <option value=\"three\" [[!+fi.numbers:FormItIsSelected=\"`three`]]\">\n                Три\n            </option>\n        </select>\n    </label>\n\n    <label>\n        Цвета:[[!+fi.error.colors]]\n        <input type=\"hidden\" name=\"colors[]\" value=\"\" />\n    </label>\n    <ul>\n        <li>\n            <label\n                ><input\n                    type=\"checkbox\"\n                    name=\"colors[]\"\n                    value=\"red\"\n                    [[!+fi.colors:FormItIsChecked=\"`red`]]\"\n                />\n                Красный</label\n            >\n        </li>\n        <li>\n            <label\n                ><input\n                    type=\"checkbox\"\n                    name=\"colors[]\"\n                    value=\"blue\"\n                    [[!+fi.colors:FormItIsChecked=\"`blue`]]\"\n                />\n                Синий</label\n            >\n        </li>\n        <li>\n            <label\n                ><input\n                    type=\"checkbox\"\n                    name=\"colors[]\"\n                    value=\"green\"\n                    [[!+fi.colors:FormItIsChecked=\"`green`]]\"\n                />\n                Зеленый</label\n            >\n        </li>\n    </ul>\n\n    <br class=\"clear\" />\n    [[!+formit.recaptcha_html]] [[!+fi.error.recaptcha]]\n\n    <br class=\"clear\" />\n\n    <div class=\"form-buttons\">\n        <input type=\"submit\" value=\"Отправить\" />\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Parse MODX Chunk Example\nDESCRIPTION: Demonstrates parsing a chunk named 'myChunk' by replacing the [[+name]] placeholder with 'John' using an associative array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.parsechunk.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->parseChunk('myChunk',array('name' => 'John'));\n```\n\n----------------------------------------\n\nTITLE: Wildcard Filtering for Template Variables in PHP\nDESCRIPTION: This code snippet demonstrates how to use wildcard characters (%) to filter resources based on template variable values, allowing for flexible matching patterns such as substrings and prefixes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nmytv==%a%\n```\n\nLANGUAGE: php\nCODE:\n```\nmytv==a%\n```\n\nLANGUAGE: php\nCODE:\n```\nmytv==%a\n```\n\n----------------------------------------\n\nTITLE: Displaying Gallery Albums in HTML\nDESCRIPTION: This snippet displays a list of gallery albums using the MODX GalleryAlbums snippet. It floats the list to the right to optimize screen space. No extra dependencies other than MODX are required.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.setting-up-your-gallery.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"float: right\">\n<h2>Galleries</h2>\n<ul>\n[[!GalleryAlbums]]\n</ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Slider Element Configuration Options in JSON\nDESCRIPTION: JSON configuration for slider element settings, defining the number of slides with minimum and maximum constraints.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/js_events.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"settings\": [\n        {\n            \"name\": \"slides\",\n            \"label\": \"Slides\",\n            \"type\": \"slider\",\n            \"value\": 3,\n            \"min\": 1,\n            \"max\": 6\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Template AdvSearchForm with Placeholder in PHP\nDESCRIPTION: Advanced implementation using a custom template chunk and setting the form output to a placeholder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch.advsearchform/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[AdvSearchForm? &tpl=`MySearchForm` &landing=`82` &toPlaceholder=`search.form`]]\n\n<h2>Search</h2>\n[[+search.form]]\n```\n\n----------------------------------------\n\nTITLE: MODX Archives Page Template\nDESCRIPTION: Template for the archives page that displays posts organized by date with month/year navigation and pagination.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[!getPage?\n  &element=`getArchives`\n  &elementClass=`modSnippet`\n  &tpl=`blogPost`\n  &hideContainers=`1`\n  &pageVarKey=`page`\n  &parents=`34,35`\n  &includeTVs=`1`\n  &toPlaceholder=`archives`\n  &limit=`10`\n  &cache=`0`\n]]\n<h3>[[+arc_month_name]] [[+arc_year]] Archives</h3>\n[[+archives]]\n[[!+page.nav:notempty=`\n<nav class=\"paging\" role=\"Archives\">\n  <ul class=\"pageList\">\n    [[!+page.nav]]\n  </ul>\n</nav>\n`]]\n```\n\n----------------------------------------\n\nTITLE: Custom Landing Page AdvSearch Implementation\nDESCRIPTION: Shows how to configure AdvSearchForm to direct search results to a specific resource page (ID 82) using the landing parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!AdvSearchForm? &landing=`82`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Search Results and Pagination in MODX SimpleSearch\nDESCRIPTION: The code snippet defines the default chunk for the &containerTpl property in SimpleSearch, responsible for displaying search results, pagination, and count messages. It uses MODX placeholders like [[+resultInfo]], [[+results]], and [[+paging]] to dynamically insert search-related content. This chunk relies on the SimpleSearch plugin and requires MODX setup with SimpleSearch configured.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch/containertpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<p class=\"sisea-results\">[[+resultInfo]]</p>\n\n<div class=\"sisea-paging\"><span class=\"sisea-result-pages\">[[%simplesearch.result_pages? &namespace=`sisea` &topic=`default`]]</span>[[+paging]]</div>\n\n<div class=\"sisea-results-list\">\n    [[+results]]\n</div>\n\n<div class=\"sisea-paging\"><span class=\"sisea-result-pages\">[[%simplesearch.result_pages? &namespace=`sisea` &topic=`default`]]</span>[[+paging]]</div>\n```\n\n----------------------------------------\n\nTITLE: Validating Newsletter Template or Snippet\nDESCRIPTION: PHP validation logic ensuring either a template or snippet is provided for a newsletter, with error handling using lexicon messages\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (!$this->getProperty('template') && !$this->getProperty('snippet')) {\n    $this->addFieldError('template', $this->modx->lexicon('sendex_newsletter_err_template'));\n    $this->addFieldError('snippet', $this->modx->lexicon('sendex_newsletter_err_snippet'));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic xPDOQuery Object in PHP\nDESCRIPTION: Example of creating a simple query for the Box object without any conditions. This creates the base query object that can be further customized with conditions, joins, or other SQL elements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdo/xpdo.newquery.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->newQuery('Box');\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Field Value in PHP using xPDOObject::get()\nDESCRIPTION: This example demonstrates how to set a value for a field named 'name' and then retrieve it using the get() method. The method returns the stored value directly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/get.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$object->set('name','Charles');\n$name = $object->get('name');\necho $name; // produces \"Charles\"\n```\n\n----------------------------------------\n\nTITLE: Calling Chunks with File Template in PHP for MODX\nDESCRIPTION: This snippet shows the use of the '@FILE' prefix to specify that the chunk's content should be sourced from an external file rather than the database, allowing for modular template management.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/General_settings.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &tpl=`@FILE fileBasedRow.tpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Managing Albums via sekUserGalleries.album.manage\nDESCRIPTION: This snippet facilitates the addition, editing, and removal of albums from the gallery, subject to user authentication and permissions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.album.manage]\n```\n\n----------------------------------------\n\nTITLE: Creating Lexicon Entries for Doodles CMP in PHP\nDESCRIPTION: This code creates the lexicon entries for the Doodles Custom Manager Page. It defines various translation strings stored in the $_lang array, which MODX uses for internationalization. The lexicon entries include labels, error messages, and descriptions for the Doodles management interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$_lang['doodle'] = 'Doodle';\n$_lang['doodles'] = 'Doodles';\n$_lang['doodles.desc'] = 'Manage your doodles here.';\n$_lang['doodles.description'] = 'Description';\n$_lang['doodles.doodle_err_ae'] = 'A doodle with that name already exists.';\n$_lang['doodles.doodle_err_nf'] = 'Doodle not found.';\n$_lang['doodles.doodle_err_ns'] = 'Doodle not specified.';\n$_lang['doodles.doodle_err_ns_name'] = 'Please specify a name for the doodle.';\n$_lang['doodles.doodle_err_remove'] = 'An error occurred while trying to remove the doodle.';\n$_lang['doodles.doodle_err_save'] = 'An error occurred while trying to save the doodle.';\n$_lang['doodles.doodle_create'] = 'Create New Doodle';\n$_lang['doodles.doodle_remove'] = 'Remove Doodle';\n$_lang['doodles.doodle_remove_confirm'] = 'Are you sure you want to remove this doodle?';\n$_lang['doodles.doodle_update'] = 'Update Doodle';\n$_lang['doodles.downloads'] = 'Downloads';\n$_lang['doodles.location'] = 'Location';\n$_lang['doodles.management'] = 'Doodles Management';\n$_lang['doodles.management_desc'] = 'Manage your doodles here. You can edit them by either double-clicking on the grid or right-clicking on the respective row.';\n$_lang['doodles.name'] = 'Name';\n$_lang['doodles.search...'] = 'Search...';\n$_lang['doodles.top_downloaded'] = 'Top Downloaded Doodles';\n```\n\n----------------------------------------\n\nTITLE: Hiding Files in Browser Tree - MODX - Markdown\nDESCRIPTION: This setting allows users to hide files in the browser's tree view, providing a cleaner interface tailored to user preferences.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[modx_browser_tree_hide_files](building-sites/settings/modx_browser_tree_hide_files)\n```\n\n----------------------------------------\n\nTITLE: Controller Path Implementation\nDESCRIPTION: Method to specify custom controller path for the resource class\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic static function getControllerPath(xPDO &$modx) {\n    return $modx->getOption('copyrightedresource.core_path',null,$modx->getOption('core_path').'components/copyrightedresource/').'controllers/';\n}\n```\n\n----------------------------------------\n\nTITLE: MODX TV Filters Example\nDESCRIPTION: Example of TV filter syntax using AND/OR conditions for filtering resources based on TV values. Shows how to combine multiple filter conditions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/General_settings.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nfilter2==one,filter1==bar||filter1==foo\n```\n\n----------------------------------------\n\nTITLE: Configuring Git remotes for MODX Revolution fork\nDESCRIPTION: Git commands to set up remotes for a forked MODX Revolution repository, allowing collaboration with the main project.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/modxcms/revolution.git\ngit remote set-url origin {your github repo url}\ngit remote set-url --push origin {your github repo url}\n```\n\n----------------------------------------\n\nTITLE: Creating Section JavaScript for MODX CMP\nDESCRIPTION: Defines the home page section for the MODX Extra, loading and registering the main panel using MODx and ExtJS components\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nExt.onReady(function() {\n    MODx.load({ xtype: 'doodles-page-home'});\n});\nDoodles.page.Home = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        components: [{\n            xtype: 'doodles-panel-home'\n            ,renderTo: 'doodles-panel-home-div'\n        }]\n    });\n    Doodles.page.Home.superclass.constructor.call(this,config);\n};\nExt.extend(Doodles.page.Home,MODx.Component);\nExt.reg('doodles-page-home',Doodles.page.Home);\n```\n\n----------------------------------------\n\nTITLE: Using xPDOCacheManager.matches for String Pattern Matching in PHP\nDESCRIPTION: Demonstrates how to use the xPDOCacheManager.matches method to check if a string contains a specific word (case-insensitive). The method returns true if the pattern is found, allowing conditional execution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.matches.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ($xpdo->cacheManager->matches('This string loves PHP!','/php/i')) {\n  echo 'Yay!';\n}\n// Outputs: 'Yay!'\n```\n\n----------------------------------------\n\nTITLE: Default Comment Options Template in PHP\nDESCRIPTION: Default template chunk for displaying comment management options. Shows a remove link based on user permissions and time threshold.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip/tplcommentoptions.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+allowRemove:notempty=`| <a href=\"[[+removeUrl]]\">[[%quip.remove]]</a>`]]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic jQuery Tabs with MODX Resource Links\nDESCRIPTION: This HTML snippet creates a basic jQuery tabs structure with links to MODX resources using their IDs. The `[[~ID]]` syntax is MODX's way of generating URLs based on resource IDs. The surrounding javascript initializes the tabs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\\\"tabs\\\">\n  <ul>\n    <li><a href=\\\"[[~92]]\\\">Ресурс с ID 92</a></li>\n    <li><a href=\\\"[[~546]]\\\">Ресурс с ID 546</a></li>\n    <li><a href=\\\"[[~123]]\\\">Ресурс с ID 123</a></li>\n  </ul>\n</div>ы\"\n```\n\n----------------------------------------\n\nTITLE: Wayfinder with Custom CSS Classes\nDESCRIPTION: Example showing how to add custom CSS classes to Wayfinder menu items using various class parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[!Wayfinder? &startId=`55`\n&rowTpl=`rowTpl`\n&outerTpl=`outerTpl`\n&firstClass=`my_first_class`\n&lastClass=`my_last_class`\n&rowClass=`my_row_class`\n&outerClass=`my_outer_class`\n]]\n```\n\n----------------------------------------\n\nTITLE: Passing Properties to a Chunk in PHP\nDESCRIPTION: Demonstrates how to call a chunk with a property to populate a placeholder within the chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[$Hello? &name=`George`]]\n```\n\n----------------------------------------\n\nTITLE: Snippet Description Validation using OnBeforeSnipFormSave in MODX\nDESCRIPTION: This plugin demonstrates how to use the OnBeforeSnipFormSave event in MODX to check if the 'description' field of a snippet is filled. If the description is empty, the plugin outputs an error message, preventing the snippet from being saved.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onbeforesnipformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeSnipFormSave':\n        if (!$snippet->get('description')){\n            $modx->event->output(\"Голову ты дома не забыл, а про дескрипшен забыл!\");\n        }\n        break;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Displaying Gallery Item by ID with Placeholders in PHP\nDESCRIPTION: This code snippet demonstrates how to display a gallery item with a specific ID using placeholders to manage and display item details. It assumes the presence of the MODX snippet call convention and necessitates a set item ID and configuration for placeholders or chunk usage.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryItem? &id=`12`]]\\n[[!+galitem.image:notempty=`\\n    <div class=\\\"image\\\">\\n    <a href=\\\"[[+galitem.image]]\\\">\\n    <img src=\\\"[[+galitem.image]]\\\" alt=\\\"[[+galitem.name]]\\\" />\\n    </a>\\n    <br />Albums: [[+galitem.albums]]\\n    <br />Tags: [[+galitem.tags]]\\n    </div>\\n`]]\n```\n\n----------------------------------------\n\nTITLE: After Save Tag Management Snippet in PHP\nDESCRIPTION: Handles saving and managing image tags after a gallery item is saved, creating new tags and managing tag-image relationships\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/add-image-tagging.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$object = &$modx->getOption('object',$scriptProperties,null);\nif ($object){\n    $newtags = explode(',',$object->get('newtag'));\n    $tags = explode('||',$object->get('tags'));\n    $object_id = $object->get('id');\n    //add new tags\n    foreach ($newtags as $newtag){\n        if (!empty($newtag)){\n            if ($tag = $modx->getObject('mygalTag',array('tag'=>$newtag))){\n            } else {\n                $tag = $modx->newObject('mygalTag');\n                $tag->set('tag',$newtag);\n                $tag->save();\n                $tags[] = $tag->get('id');\n            }\n        }\n    }\n    //get old imagetags\n    $oldtags = array();\n    $c = $modx->newQuery('mygalTagImage');\n    $c->where(array('image'=>$object_id));\n    if ($collection = $modx->getCollection('mygalTagImage',$c)){\n    foreach ($collection as $tagimage){\n            $oldtags[$tagimage->get('tag')] = $tagimage->get('tag');\n        }\n    }\n    //add new imagetags\n    foreach ($tags as $tag){\n        if (!empty($tag)){\n            unset($oldtags[$tag]);\n            if ($tagimage = $modx->getObject('mygalTagImage',array('image'=>$object_id,'tag'=>$tag))){\n            } else {\n                $tagimage = $modx->newObject('mygalTagImage');\n                $tagimage->set('image',$object_id);\n                $tagimage->set('tag',$tag);\n                $tagimage->save();\n            }\n        }\n    }\n    //remove removed imagetags\n    foreach ($oldtags as $tag){\n        if ($tagimage = $modx->getObject('mygalTagImage',array('image'=>$object_id,'tag'=>$tag))){\n            $tagimage->remove();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Profile Placeholders in MODX\nDESCRIPTION: Shows how to display user profile information using placeholders set by the Profile snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.profile.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<p>Username: [[+username]]</p>\n<p>Email: [[+email]]</p>\n<p>State: [[+state]]</p>\n```\n\n----------------------------------------\n\nTITLE: FormitFastPack Basic Form Implementation with FormIt\nDESCRIPTION: Example showing how to implement a basic contact form using FormitFastPack's field snippet with FormIt. Demonstrates email validation, required fields, and form submission handling with redirection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n  &hooks=`email,redirect`\n  &emailTpl=`ContactFormReport`\n  &emailTo=`[[++emailsender]]`\n  &emailSubject=`New contact form submission`\n  &validate=`email:email:required,message:required`\n  &redirectTo=`1`\n]]\n<form action=\"[[~[[*id]]]]\" method=\"post\">\n[[!field? &type=`text` &name=`email` &req=`1`]]\n[[!field? &type=`textarea` &name=`message` &class=`cleardefault` &req=`1`]]\n[[!field? &type=`submit` &name=`submitForm` &label=` ` &message=`Send this Message!`]]\n</form>\n```\n\n----------------------------------------\n\nTITLE: Listing Files and Directories with FileLister in MODX Revolution (PHP)\nDESCRIPTION: This snippet call lists all files and directories in the 'assets/downloads' directory using FileLister.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FileLister? &path=`assets/downloads/`]]\n```\n\n----------------------------------------\n\nTITLE: Listing Contacts Using MoneyBird\nDESCRIPTION: This snippet retrieves and lists all contacts associated with a specified user in MODX using the MoneyBird component, simplifying the management of user contacts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// MoneyBird.Contacts snippet to fetch and display user contacts\n$contacts = moneybird_contacts($user_id);\nforeach ($contacts as $contact) {\n    echo $contact->name . ' - ' . $contact->email . '\\n';\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Logging Messages in PHP Processor\nDESCRIPTION: Demonstrates different log levels and message types using $modx->log() method in a MODX processor\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.console.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'Информационное сообщение нормального цвета.');\n$modx->log(modX::LOG_LEVEL_ERROR,'Ошибка в красном цвете!');\n$modx->log(modX::LOG_LEVEL_WARN,'Предупреждение в голубом цвете!');\n\n$modx->log(modX::LOG_LEVEL_INFO,'COMPLETED');\n```\n\n----------------------------------------\n\nTITLE: Multi-line Conditional Output in MODX Revolution\nDESCRIPTION: Shows how to format conditional then/else statements across multiple lines for better readability while maintaining proper syntax in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+placeholder:is=`0`:then=`\n // code\n`:else=`\n // code\n`]]\n```\n\n----------------------------------------\n\nTITLE: Setting up directory structure for MODX component in PHP\nDESCRIPTION: Defines the directory structure for a MODX component including paths for build files, chunks, lexicon entries, documentation, and other component resources. Note that source_core and source_assets paths intentionally do not have trailing slashes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/* define build paths */\n$root = dirname(dirname(__FILE__)).'/';\n$sources = array(\n    'root' => $root,\n    'build' => $root . '_build/',\n    'data' => $root . '_build/data/',\n    'resolvers' => $root . '_build/resolvers/',\n    'chunks' => $root.'core/components/'.PKG_NAME_LOWER.'/chunks/',\n    'lexicon' => $root . 'core/components/'.PKG_NAME_LOWER.'/lexicon/',\n    'docs' => $root.'core/components/'.PKG_NAME_LOWER.'/docs/',\n    'elements' => $root.'core/components/'.PKG_NAME_LOWER.'/elements/',\n    'source_assets' => $root.'assets/components/'.PKG_NAME_LOWER,\n    'source_core' => $root.'core/components/'.PKG_NAME_LOWER,\n);\nunset($root);\n\n/* override with your own defines here (see build.config.sample.php) */\nrequire_once $sources['build'] . 'build.config.php';\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n```\n\n----------------------------------------\n\nTITLE: Using Properties in MODX Snippet Call\nDESCRIPTION: Demonstrates how to use a property in a MODX snippet call. The 'debug' property is set to '1' for the Quip snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/properties-and-property-sets.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Quip? &debug=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Calling mhPayPal Snippet Uncached in MODX\nDESCRIPTION: The mhPayPal snippet must always be called uncached due to its dynamic nature, depending on user input and URL parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage.md#2025-04-17_snippet_0\n\nLANGUAGE: MODX\nCODE:\n```\n[[!mhPayPal]]\n```\n\n----------------------------------------\n\nTITLE: Implementing jQuery Tabs with getField Snippet\nDESCRIPTION: Implementation of jQuery tabs using the custom getField snippet to display page titles. This approach makes individual database queries for each tab to retrieve resource titles.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<script type=\"text/javascript\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\"tabs\">\n  <ul>\n    <li><a href=\"[[~92]]\">[[getField? &id=`92` &field=`pagetitle`]]</a></li>\n    <li><a href=\"[[~546]]\">[[getField? &id=`546` &field=`pagetitle`]]</a></li>\n    <li><a href=\"[[~123]]\">[[getField? &id=`123` &field=`pagetitle`]]</a></li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyMCE Editor Settings in JSON for MODX\nDESCRIPTION: This JSON configuration sets up custom toolbars, font formats, and font sizes for the TinyMCE editor in MODX. It includes custom fonts like Open Sans and Roboto alongside standard web fonts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tinymcerte/customfonts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n{\n  \"toolbar1\": \"undo redo | styleselect| bullist numlist outdent indent | link image\",\n  \"toolbar2\": \"fontselect fontsizeselect forecolor|formatselect lineheight | bold italic | alignleft aligncenter alignright alignjustify|\",\n  \"font_formats\":\"Open Sans=open sans; Roboto=roboto; Andale Mono=andale mono,times; Arial=arial,helvetica,sans-serif; Arial Black=arial black,avant garde; Book Antiqua=book antiqua,palatino; Comic Sans MS=comic sans ms,sans-serif; Courier New=courier new,courier; Georgia=georgia,palatino; Helvetica=helvetica; Impact=impact,chicago; Symbol=symbol; Tahoma=tahoma,arial,helvetica,sans-serif; Terminal=terminal,monaco; Times New Roman=times new roman,times; Trebuchet MS=trebuchet ms,geneva; Verdana=verdana,geneva; Webdings=webdings; Wingdings=wingdings,zapf dingbats\",\n  \"fontsize_formats\": \"8pt 10pt 12pt 14pt 18pt 24pt 36pt 48pt 72pt 96pt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Peoples Template Chunk in PHP\nDESCRIPTION: The default template chunk used to display individual user entries in the Peoples snippet. It creates a list item with a dynamic CSS class and username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+cls]]\">[[+username]]</li>\n```\n\n----------------------------------------\n\nTITLE: Overriding Resource Content in MODX Cache\nDESCRIPTION: Demonstrates how to override the cached resource content using the OnLoadWebPageCache event parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Override Output\n$modx->event->params['resource']->_content = 'Overridden...';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comment Count with QuipCount in MODX\nDESCRIPTION: Snippet demonstrating how to retrieve the comment count for a specific article post using QuipCount. The thread parameter follows the format 'article-b{blog-id}-{post-id}'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/articles/theming-articles.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipCount? &thread=`article-b9-[[+id]]`]]\n```\n\n----------------------------------------\n\nTITLE: Basic getChunk Placeholder Replacement in PHP\nDESCRIPTION: Demonstrates simple placeholder substitution using getChunk with a basic welcome message chunk. Shows how to replace [[+name]] placeholder with a dynamic value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<p>Привет, [[+name]]!</p>\n```\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->getChunk('WelcomeChunk',array(\n   'name' => 'John',\n));\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Sorting MODX Resources with getResources in PHP\nDESCRIPTION: Illustrates methods to sort MODX resources using PHP. Includes examples of sorting randomly with RAND(), and sorting by multiple fields using JSON arrays. Details the use of specific resource ID lists for ordering and discusses scenarios where specifying sort direction is necessary.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n&sortby=`RAND()`\n```\n\nLANGUAGE: PHP\nCODE:\n```\n&sortby=`{\"publishedon\":\"ASC\",\"createdon\":\"DESC\"}`\n```\n\nLANGUAGE: PHP\nCODE:\n```\n&sortby=`FIELD(modResource.id, 4,7,2,5,1 )`\n```\n\nLANGUAGE: PHP\nCODE:\n```\n&sortby=`FIELD(modResource.id,[[*templateVariable]])`\n```\n\nLANGUAGE: PHP\nCODE:\n```\n&sortby=`FIELD(modResource.id, 4,7,2,5,1 )` &sortdir=`ASC`\n```\n\n----------------------------------------\n\nTITLE: Applying Output Filters in CustomUrls Pattern\nDESCRIPTION: Demonstrates the application of output filters in a CustomUrls pattern for date formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[+publishedon:strtotime:date=`%Y-%m-%d`]]/[[+id]]-[[+alias]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving xPDOValidator in PHP\nDESCRIPTION: This method returns the xPDOValidator class configured for the current instance. It takes no parameters and returns either a string representation of the validator or a boolean false if no validator is configured.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/validation/getvalidator.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nstring|boolean getValidator ()\n```\n\n----------------------------------------\n\nTITLE: Comparing Static and Dynamic Content Implementation in MODX Templates\nDESCRIPTION: This snippet shows the difference between a static snippet call and the xFPCAjax implementation for dynamic content in MODX templates. It illustrates how to modify templates to work with xFPC caching.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/xfpc/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"awesome-quote\">[[!getRandomAwesomeQuote]]</div>\n```\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"awesome-quote\">\n[[xFPCAjax?\n    &resource=`300`\n]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reading and Modifying TV Values in OnLoadWebPageCache\nDESCRIPTION: Demonstrates how to read and modify Template Variable (TV) values in the OnLoadWebPageCache event in MODX\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Reading value of TV named \"my_tv\"\\n$my_tv = $modx->event->params['resource']->my_tv[1]\n```\n\n----------------------------------------\n\nTITLE: Sample Changelog for MODX Extra\nDESCRIPTION: A sample changelog file for a MODX Extra, showing version history and changes made to the component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nChangelog file for Doodles component.\n\nDoodles 1.0\n====================================\n- Updating text, ready to build\n- Added default properties to Doodles snippet in build\n- Fixes to doodles class\n- Fixed bugs with build, updated readme\n- Initial commit\n```\n\n----------------------------------------\n\nTITLE: SimpleSearch Result Template Chunk\nDESCRIPTION: This is the default chunk template used by the SimpleSearch snippet for displaying search results. It includes placeholders for the result index, resource link, page title, and extract of the content where the search term was found. The link either points to the resource's URL or to the resource's ID if the URL is empty.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<div class=\\\"sisea-result\\\">\\n    <h3>[[+idx]]. <a href=\\\"[[+link:is=``:then=`[[~[[+id]]]]`:else=`[[+link]]`]]\\\" title=\\\"[[+longtitle]]\\\">[[+pagetitle]]</a></h3>\\n    <div class=\\\"extract\\\"><p>[[+extract]]</p></div>\\n</div>\\n\"\n```\n\n----------------------------------------\n\nTITLE: ModX getLoginUserID Method Syntax\nDESCRIPTION: Basic syntax for the getLoginUserID method that returns the current user ID. Takes an optional context parameter as a string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getloginuserid.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getLoginUserID ([string $context = ''])\n```\n\n----------------------------------------\n\nTITLE: Updating MODX core path in config.inc.php\nDESCRIPTION: This snippet demonstrates how to update the `$modx_core_path` variable within the `core/config/config.inc.php` file. It's crucial to modify this path after moving the MODX core directory outside the web root to ensure MODX can locate its core files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"core/config/config.inc.php\" (измените `$modx_core_path` переменную)\n```\n\n----------------------------------------\n\nTITLE: Different Formatting Options for MODX Tags in PHP\nDESCRIPTION: Shows both single-line and multi-line formatting options for MODX tags, demonstrating that whitespace doesn't affect functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources? &parents=`123` &limit=`5`]]\n\n[[!getResources?\n  &parents=`123`\n  &limit=`5`\n]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Resources with getResources in MODX\nDESCRIPTION: This snippet call uses getResources to fetch related documents within the Revolution context, specifically for the parent with ID 314.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/tv-title.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`314` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Post Method for SimpleSearchForm\nDESCRIPTION: This snippet configures the SimpleSearchForm snippet to use the POST method for search queries instead of the default GET method. No other configuration is necessary, but the MODX installation must be properly set up to handle POST requests.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.simplesearchform.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[SimpleSearchForm? &method=`POST`]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Fields in MODX Snippets\nDESCRIPTION: Example snippet showing how to access and manipulate resource fields programmatically\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/resources/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/* output the current Resource's pagetitle */\n$output = $modx->resource->get('pagetitle');\nreturn strrev($output);\n```\n\n----------------------------------------\n\nTITLE: Authenticated User Comments Implementation\nDESCRIPTION: Implementation requiring user authentication for commenting with specified reply resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Quip? &thread=`post45` &replyResourceId=`123`]]\n<br />\n[[!QuipReply? &thread=`post45` &requireAuth=`1`]]\n```\n\n----------------------------------------\n\nTITLE: HTML and String Escaping in MODX\nDESCRIPTION: Examples of HTML entity conversion and string escaping using htmlent and escape modifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_6\n\nLANGUAGE: modx\nCODE:\n```\n[[+email:htmlent]]\n[[+email:escape]]\n```\n\n----------------------------------------\n\nTITLE: Using CSSSweet Prefix with a Placeholder in MODX\nDESCRIPTION: Demonstrates applying browser prefixes to CSS contained in a MODX placeholder. This example shows how to add vendor prefixes to a border-radius property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.prefix.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+my_radius_css:prefix]]\n```\n\n----------------------------------------\n\nTITLE: Using xPDOValidator for Custom Validation\nDESCRIPTION: Example demonstrating how to perform custom validation using the validator object, adding a custom message for an empty name field and then retrieving and displaying validation errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.addmessage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$validator = $obj->getValidator();\nif ($obj->get('name') == '') {\n   $validator->addMessage('name','emptyName','Please enter a valid name.');\n}\n\n$errors = $validator->getMessages();\nforeach ($errors as $error) {\n   echo 'An error occurred with field \"'.$error['name'].'\": '.$error['message'];\n}\n```\n\n----------------------------------------\n\nTITLE: View Profile Link on Members Home Page\nDESCRIPTION: This code demonstrates how to add a link to the 'View Profile' page on the Members Home Page.  It uses the MODX resource link syntax to generate the URL for resource ID 11.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/user-profiles.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n...\n<p><a href=\"[[~11]]\">View Profile</a></p>\n\n```\n\n----------------------------------------\n\nTITLE: Getting Memory Cache Provider Example in PHP\nDESCRIPTION: Example showing how to get a cache manager instance and retrieve a specific cache provider (xPDOMemCache).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.getcacheprovider.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$cacheManager = $xpdo->getCacheManager();\n$provider = $cacheManager->getCacheProvider('xPDOMemCache');\n```\n\n----------------------------------------\n\nTITLE: Basic getDate Snippet Call\nDESCRIPTION: Retrieve the current unix timestamp without any modifications\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getdate/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getDate]]\n```\n\n----------------------------------------\n\nTITLE: Applying Color Tint with phpThumbOf\nDESCRIPTION: This snippet applies a 30% magenta tint to an image while resizing it to 960x300 pixels. It uses the 'clr' (color) filter with a hex color value (#ff00ff).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=clr|30|ff00ff`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Editing Configuration in PHP\nDESCRIPTION: Configuration settings to enable inline editing functionality in the grid.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n,save_action: 'mgr/doodle/updateFromGrid'\n,autosave: true\n```\n\n----------------------------------------\n\nTITLE: Using makeUrl() Method in MODX for WebLinks\nDESCRIPTION: This snippet refers to the makeUrl() method used in MODX for generating URLs. When the 'use_weblink_target' setting is enabled, this method will generate the target URL for WebLinks instead of the internal MODX URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/use_weblink_target.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmakeUrl()\n```\n\n----------------------------------------\n\nTITLE: MODX Custom Manager Login Template Path\nDESCRIPTION: Example path for a customized manager login template\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/custom-manager-themes.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nmanager/templates/custom/security/login.tpl\n```\n\n----------------------------------------\n\nTITLE: MIGX Chunk for phpthumbof Image Processing\nDESCRIPTION: Chunk template for processing MIGX images with phpthumbof, including alt text.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.frontend-usage.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <img src=\"[[+image:phpthumbof=`w=300&h=300&zc=1`]]\" alt=\"[[+title]]\"/>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Page Title with MODX Site Name and Pagetitle Tags (HTML)\nDESCRIPTION: Demonstrates how to combine the [[++site_name]] and [[*pagetitle]] tags to create a dynamic page title in the HTML head.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<title>[[++site_name]]  [[*pagetitle]]</title>\n```\n\n----------------------------------------\n\nTITLE: Implementing sekFancyBox Snippet\nDESCRIPTION: Basic usage of the sekFancyBox snippet in a MODX template or resource. This snippet enables modal popup functionality with various configuration options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_0\n\nLANGUAGE: MODX\nCODE:\n```\n[[sekfancybox]]\n```\n\n----------------------------------------\n\nTITLE: Capturing MODX Log Messages in Registry\nDESCRIPTION: Demonstrates how to redirect MODX log messages to a registry for later retrieval. Useful for user feedback and audit views.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->getService('registry', 'registry.modRegistry');\n$modx->registry->addRegister('logging', 'registry.modFileRegister', array('directory' => 'logging'));\n$modx->registry->logging->connect();\n$modx->registry->logging->subscribe($topic);\n\n/* set the logTarget to the register instance */\n$oldTarget = $modx->setLogTarget($modx->registry->logging);\n\n/* code here that sends log messages */\n\n/* set the old target back */\n$modx->setLogTarget($oldTarget);\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Snippet in MODX Revolution\nDESCRIPTION: This snippet sets up the login form with options for forgot password, logout redirection, and error handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Login?\n&loginTpl=`lgnLoginTpl`\n&logoutTpl=`lgnLogoutTpl`\n&errTpl=`lgnErrTpl`\n&logoutResourceId=`5`\n]]\n```\n\n----------------------------------------\n\nTITLE: HTML5 Boilerplate Markup Example\nDESCRIPTION: Full example of HTML5 Boilerplate markup generated by boilerX, including IE conditional comments, meta tags, and standard web development best practices\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!--[if lt IE 7]>      <html class=\"no-js lt-ie9 lt-ie8 lt-ie7\"> <![endif]-->\n<!--[if IE 7]>         <html class=\"no-js lt-ie9 lt-ie8\"> <![endif]-->\n<!--[if IE 8]>         <html class=\"no-js lt-ie9\"> <![endif]-->\n<!--[if gt IE 8]><!--> <html class=\"no-js\"> <!--<![endif]-->\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\"  content=\"IE=edge,chrome=1\">\n    <title>MODX Revolution - Home</title>\n    <meta name=\"description\" content=\"Site Description\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <link rel=\"stylesheet\" href=\"assets/components/boilerx/css/normalize.css\">\n    <link rel=\"stylesheet\" href=\"assets/components/boilerx/css/main.css\">\n    <script src=\"assets/components/boilerx/js/vendor/modernizr-2.6.2.min.js\"></script>\n</head>\n<body class=\"t-2 id-1 p-0 ck-modDocument\">\n    <!--[if lt IE 8]>\n    <p class=\"chromeframe\">You are using an <strong>outdated</strong> browser...</p>\n    <![endif]-->\n    <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"></script>\n    <script>window.jQuery || document.write('<script src=\"assets/components/boilerx/js/vendor/jquery-1.9.1.min.js\"><\\/script>')</script>\n    <script src=\"assets/components/boilerx/js/plugins.js\"></script>\n    <script src=\"assets/components/boilerx/js/main.js\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Height Resizing with Partial Specification using MODX Revolution - PHP\nDESCRIPTION: This snippet shows how to resize an image with the height defined, where the width is set to be ignored (defaulting based on aspect ratio).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`r-x75`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Object Fields with fromArray() and keyPrefix in xPDO (PHP)\nDESCRIPTION: This snippet demonstrates using the `$keyPrefix` parameter in `fromArray()` to strip a prefix from the keys of the array being passed in. This is useful when passing `$_POST` variables to an object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Let us say that:\n// $_POST = array(\n//    'test_w' => 12,\n//    'test_h' => 13,\n// );\n$myBox->fromArray($_POST,'test_');\n\necho $myBox->get('w'); // prints '12'\n```\n\n----------------------------------------\n\nTITLE: Specifying Microsoft SQL Server Connection in PHP\nDESCRIPTION: Shows how to specify the host for a Microsoft SQL Server connection when installing MODX, using either named pipes or TCP/IP.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/standard.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n(local)/SQLEXPRESS\n```\n\nLANGUAGE: PHP\nCODE:\n```\n127.0.0.1,2301\n```\n\n----------------------------------------\n\nTITLE: Loading a Class from a Specific Path in PHP\nDESCRIPTION: Example of loading a class named 'myBox' from a specific model path using xPDO::loadClass. This demonstrates how to provide a custom path for class loading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdo/xpdo.loadclass.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->loadClass('myBox','/my/path/to/model/');\n```\n\n----------------------------------------\n\nTITLE: Example Usage of hasSessionContext in MODX Revolution (PHP)\nDESCRIPTION: This example demonstrates how to use the hasSessionContext method to check if a user has a session for the 'sports' context. If the user has the session context, the code within the conditional block will be executed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.hassessioncontext.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ($user->hasSessionContext('sports')) {\n    // do code here\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Email Recipients in FormIt\nDESCRIPTION: Properties configuration for setting up dynamic email recipient selection based on form field values. Uses emailSelectTo to map numeric values to email addresses, preventing direct email input manipulation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/email.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n&emailSelectTo=`mail1@my.domain,mail2@my.domain;different@my.domain`\n&emailSelectToName=`Mail1,Mail2;Different`\n&emailSelectField=`emailselect`\n```\n\n----------------------------------------\n\nTITLE: Fetching Page Information in MODX\nDESCRIPTION: Use modX\\->getObject('modResource', $criteria) to retrieve detailed page information according to specified criteria, which is crucial for accessing page attributes and configurations in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getPageInfo()\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Tree Node Display in MODX\nDESCRIPTION: The 'resource_tree_node_name' setting specifies which Resource field is used to render nodes in the MODX Resource Tree. It accepts any valid Resource field name as input. The default value is 'pagetitle', but it can be set to other fields like 'menutitle', 'alias', or 'longtitle'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/resource_tree_node_name.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nresource_tree_node_name\n```\n\n----------------------------------------\n\nTITLE: Accessing One-to-One Relationship Data in MODX Snippet\nDESCRIPTION: PHP code for a MODX snippet to access data from a one-to-one relationship between Users and Userdata objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n        $base_path = MODX_CORE_PATH . 'components/one_to_one/';\n        $modx->addPackage('one_to_one',$base_path.'model/','');\n        $user = $modx->getObject('Users', array('user_id' => 1 ) );\n        $userdata = $user->getOne('Userdata');\n        $output = '';\n        $output .= $user->get('username');\n        $output .= $userdata->get('age');\n        return $output;\n?>\n```\n\n----------------------------------------\n\nTITLE: Direct User Information Access\nDESCRIPTION: This example illustrates the default MODX syntax for accessing the currently logged in user's ID and username.  Using the `modx.user.id` and `modx.user.username` placeholders directly provides a simplified way to access this information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n[[!+modx.user.id]] - Prints the ID\n[[!+modx.user.username]] - Prints the username\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-threaded Comments in MODX with Quip\nDESCRIPTION: Basic snippet call for displaying non-threaded comments and reply form on a page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Quip? &thread=`threadNameHere` &threading=`0`]]\n<br />\n[[!QuipReply? &thread=`threadNameHere`]]\n```\n\n----------------------------------------\n\nTITLE: Validating Object Field Length with xPDO in PHP\nDESCRIPTION: This PHP snippet demonstrates how to initialize an object using MODX and validate its fields against the defined XML model. It adds the package, creates a new object, and validates the 'name' field's length. If validation fails, error messages are collected and displayed. It requires the 'test' model package and assumes validation rules are predefined in the XML schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdomaxlengthvalidationrule.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$modx->addPackage('test','/path/to/my/test/model/','test_');\n$obj = $modx->newObject('myTest');\n$obj->set('name','This is a really long string that will fail.');\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $output .= $errorMsg['message'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Price Payment with mhPayPal\nDESCRIPTION: This snippet call forces a fixed price payment setup by ignoring user input, forcing the currency to USD, and setting a specific amount and tax. It allows customization of the product description, making it suitable for quick product checkouts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"[[!mhPayPal?\\n  &amount=\\`15\\`\\n  &amountTax=\\`2.85\\`\\n  &description=\\`Product XYZ ([[+currency]][[+amount]])\\`\\n  &currencies=\\`USD\\`\\n]]\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of TaggerGetTags Snippet in PHP\nDESCRIPTION: Shows different ways to use the TaggerGetTags snippet in MODX templates. Examples include retrieving all tags, tags from specific groups, tags for the current resource, and tags within getResources templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tagger/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Get tags for all resources, including unused tags\n[[TaggerGetTags? &showUnused=`1`]]\n// Get tags from groups 1 and 3 for all resources\n[[TaggerGetTags? &groups=`1,3` &rowTpl=`tag_links_tpl`]]\n// Get tags for current resource\n[[!TaggerGetTags? &resources=`[[*id]]` &rowTpl=`tag_links_tpl`]]\n// Get tags for current resource in getResources tpl\n[[!TaggerGetTags? &resources=`[[+id]]` &rowTpl=`tag_links_tpl`]]\n```\n\n----------------------------------------\n\nTITLE: Implementing StoreLocator with Custom Parameters in MODX\nDESCRIPTION: This snippet call demonstrates how to implement StoreLocator in a MODX template with custom parameters for map size, zoom level, marker image, and map center coordinates. It also shows the proper placement of the StoreLocator placeholders within an HTML table layout.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/storelocator/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!StoreLocator?\n    &searchZoom=`10`\n    &zoom=`7`\n    &markerImage=`/assets/mcdonalds.png`\n    &width=`640`\n    &height=`480`\n    &centerLongitude=`5.509644`\n    &centerLatitude=`52.469397`\n]]\n\n<table>\n   <tr>\n      <td style=\"width: 640px;\">\n        [[+StoreLocator.map]]        <!-- This shows the google map -->\n      </td>\n      <td style=\"vertical-align: top;\">\n        [[+StoreLocator.form]]       <!-- This shows the search form -->\n        <hr />\n        [[+StoreLocator.matchedStores]] / [[+StoreLocator.totalStores]] <!-- This shows number of found stores / total stores -->\n        [[+StoreLocator.storeList]]  <!-- This shows the list of stores and search results -->\n      </td>\n   </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Quip Comment Thread in MODX\nDESCRIPTION: Basic implementation of the Quip snippet to display a comment thread. The snippet requires a thread parameter to specify the unique identifier for the comment thread being displayed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Quip? &thread=`myThread`]]\n```\n\n----------------------------------------\n\nTITLE: Text Color Partial Option Set\nDESCRIPTION: Defines a color selection configuration with custom swatches and different color format options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/import.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"color\",\n    \"label\": \"Text Color\",\n    \"type\": \"colorswatch\",\n    \"value\": \"black\",\n    \"options\": [\n        { \"value\": \"primary\", \"color\": \"blue\", \"label\": \"Primary\" },\n        \"lightcoral\",\n        \"black\",\n        \"rgba(0,255,0,.5)\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Output Filters to Template Variables in MODX\nDESCRIPTION: Example of using the 'limit' output filter to restrict a Template Variable's output to 100 characters. Output filters allow for modification of TV values before they are displayed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[*bioMessage:limit=`100`]]\n```\n\n----------------------------------------\n\nTITLE: Grid Column Editor Configuration with Renderer\nDESCRIPTION: This code snippet demonstrates how to configure a grid column editor using MODx.combo.ComboBox and enable the renderer feature. Setting renderer: true in the editor definition ensures the displayValue is correctly shown in the grid cell.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\n{  header: _('usergroup')  ,dataIndex: 'usergroup'  ,width: 140  ,editor: { xtype: 'modx-combo-usergroup' ,renderer: true}}\n\n```\n\n----------------------------------------\n\nTITLE: Parent Ids Retrieval with Explicit Context\nDESCRIPTION: Shows how to retrieve parent identifiers with an explicitly specified context, which is useful in plugins or external applications\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getparentids.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$pids = $modx->getParentIds($id, 10, array('context' => 'web'));\n```\n\n----------------------------------------\n\nTITLE: Adding PHP Resolver to MODX Vehicle\nDESCRIPTION: This code adds a PHP resolver to a MODX Transport Vehicle. The resolver points to a PHP script that will execute after the vehicle is installed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'Adding in PHP resolvers...');\n$vehicle->resolve('php',array(\n    'source' => $sources['resolvers'] . 'resolve.tables.php',\n));\n```\n\n----------------------------------------\n\nTITLE: Customizing Templates for album.view Snippet\nDESCRIPTION: This snippet demonstrates how to specify custom templates for the album.view snippet. The `tplAlbum` property defines the template for the album container, and `tplAlbumItems` defines the template for displaying the album items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.album.view.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!album.view? &tplAlbum=`album.view` &tplAlbumItems=`album.items.list`]]\n```\n\n----------------------------------------\n\nTITLE: Disable Context Filtering - Cached Snippet\nDESCRIPTION: This snippet shows how to call the Analytics tool while disabling context filtering and caching it. It allows customization of the property ID and defines contexts to exclude from tracking.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/analytics/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\[[Analytics?\\n    &excludeContextList=``\\n    &excludeLoggedInUserContextList=``\\n    &webPropertyID=`UA-XXXXX-Y`\\n]\\]\n```\n\n----------------------------------------\n\nTITLE: Select Field with Options Element in MODX\nDESCRIPTION: This snippet defines a select field that uses a predefined chunk for options, enabling cleaner management of potentially extensive option lists.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`select`\n    &default=`1`\n    &name=`country_id`\n    &label=`Country:`\n    &options_element=`optionsCountries`\n    &header=`Please select...`\n]]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of TaggerGetResourcesWhere Snippet with getResources in PHP\nDESCRIPTION: Demonstrates how to integrate the TaggerGetResourcesWhere snippet with getResources to filter resources by specific tags. The snippet generates a SQL WHERE condition that can be used in resource queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tagger/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources?\n    &where=`[[!TaggerGetResourcesWhere?\n    &tags=`Books,Vehicles`\n    &where=`{\"isfolder\": 0}`]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Rendering User Group Template in ModX\nDESCRIPTION: Default template chunk for displaying user groups with their name and member count. The template supports styling through CSS classes and includes placeholders for group ID, name, parent ID, and number of children.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroups/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+cls]]\">[[+name]] ([[+children]])</li>\n```\n\n----------------------------------------\n\nTITLE: Basic Archivist Implementation\nDESCRIPTION: Simple implementation of the Archivist snippet to display archive listings from specified parent resources and target them to a specific page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/archivist/archivist/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Archivist? &target=`123` &parents=`4,12,33`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Country and State Combo Boxes, and City Auto-Complete\nDESCRIPTION: This code defines three form elements: a country combo box, a state combo box that is filtered by the selected country, and a city auto-complete field that is filtered by the selected state. The `input.combobox` and `input.autocomplete` snippets are MODX snippets that use sekFormTools.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools-advanced-examples.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<label for=\\\"ftcountry\\\">Country</label>\\n[[!input.combobox? &input_id=`ftcountry` &value=`United States`\\n    &object=`{\\\"name\\\": \\\"sekftCountries\\\", \\\"sortby\\\": \\\"country_name\\\", \\\"value\\\": \\\"country_name\\\", \\\"label\\\": \\\"country_name\\\"}`\\n]]\\n\\n<label for=\\\"ftstate\\\">State</label>\\n[[!input.combobox? &input_id=`ftstate`\\n    &object=`{\\\"name\\\": \\\"sekftStates\\\", \\\"sortby\\\": \\\"state_name\\\", \\\"value\\\": \\\"state_name\\\", \\\"label\\\": \\\"state_name\\\"}`\\n    &filter=`{\\\"input_id\\\": \\\"ftcountry\\\", \\\"name\\\": \\\"sekftCountries\\\", \\\"field\\\": \\\"country_name\\\", \\\"value\\\": \\\"United States\\\"}`\\n]]\\n\\n<label for=\\\"ftcity\\\">City</label>\\n[[!input.autocomplete? &input_id=`ftcity`\\n    &object=`{\\\"name\\\": \\\"sekftUSCities\\\", \\\"sortby\\\": \\\"city_name\\\", \\\"value\\\": \\\"city_name\\\", \\\"label\\\": \\\"city_name\\\"}`\\n    &filter=`{\\\"input_id\\\": \\\"ftstate\\\", \\\"name\\\": \\\"sekftStates\\\", \\\"field\\\": \\\"state_name\\\"}`\\n]]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Snippet in MODX Revolution\nDESCRIPTION: Helper code for development that loads a snippet from an external file system path, allowing development outside the MODX installation directory. Includes error handling and logging.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$base_path = dirname(dirname($modx->getOption('core_path'))).'/MODx Components/tutorials/storefinder/trunk/core/components/storefinder/';\n/* change above line to your path */\n$o = '';\n$f = $base_path.'snippet.storefinder.php';\nif (file_exists($f)) {\n   $o = include $f;\n} else {\n   $modx->setLogTarget('ECHO');\n   $modx->log(modX::LOG_LEVEL_ERROR,'StoreFinder not found at: '.$f);\n}\nreturn $o;\n```\n\n----------------------------------------\n\nTITLE: Fred CMS Options Documentation Structure\nDESCRIPTION: Markdown structure defining the Options documentation page, including sections for Option Sets, importing, and overrides.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Options\"\n---\n\nOptions are what defines the controls given to end users when configuring Elements. They are defined in a Option Sets that are attached to Elements.\n\n## Option Sets\n\nOption Sets allow you to create Element configuration settings and frequently used sub-sets for use with Elements.\n\n### Complete Option Sets\n\nOption Sets with the `complete` flag set to `Yes` can be assigned to individual [Element](extras/fred/themer/elements). Option Sets can also be assigned to more than one Element, making it easier to reuse common settings across Elements.\n\n### Partial Option Sets\n\nOption Sets with `No` in this flag are meant to be [imported](extras/fred/themer/options/import) into other Option Sets. You can use these to define commonly used settings or specific options that will repeat across multiple Option Sets, for example, color swatches, margins and padding, or text style settings.\n\nOne option set can be used with multiple Elements. If you have frequently used sub-sections of option sets you'd like to share across many option sets, you can use partial option sets. These can then be imported into many other option sets, and are useful for things like color pallets, etc.\n\nA variety of [option controls/settings](extras/fred/themer/options/settings) give you flexibility in how your end users create and update content. These controls can further be grouped into sub-groups that can be opened/closed for better organization of large option sets.\n\n## Importing\n\nIf you use similar Option settings across many sets, you might want to organize them in to partial option sets, and [import](extras/fred/themer/options/import) them to make managing Option Sets more straightforward.\n\n## Option Overrides\n\nOn the Fred Manager page for the Create/Edit Element view you can define a unique non-reusable set of controls for the settings. [Overrides](extras/fred/themer/options/override) only affect the current Element and will not affect other Elements using the same Option Set.\n```\n\n----------------------------------------\n\nTITLE: Implementing Comments with reCaptcha\nDESCRIPTION: Non-threaded comments implementation with reCaptcha spam protection enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!Quip? &thread=`spamproof123` &threaded=`0`]]\n<br />\n[[!QuipReply? &thread=`spamproof123` &recaptcha=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Object Table in xPDO Schema for MODX Revolution\nDESCRIPTION: XML definition for a custom database table in xPDO schema. This defines the class name, table name, and extension from xPDOSimpleObject which automatically provides an ID field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"sfStore\" table=\"sfinder_stores\" extends=\"xPDOSimpleObject\">\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Title in OnLoadWebPageCache\nDESCRIPTION: Shows how to modify the page title of a cached resource using the OnLoadWebPageCache event in MODX\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Override Pagetitle\\n$modx->event->params['resource']->pagetitle = 'My New Pagetitle'\n```\n\n----------------------------------------\n\nTITLE: Eliminando una rama de características en MODX\nDESCRIPTION: Comandos Git para cambiar a la rama principal y eliminar una rama de características en MODX después de completar el desarrollo.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/git.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ngit checkout 2.x\ngit branch -d myworkflow\n```\n\n----------------------------------------\n\nTITLE: MySQL Socket Configuration in PHP\nDESCRIPTION: This snippet sets the default socket paths for MySQL, MySQLi, and PDO_MySQL in the php.ini configuration file. It ensures that PHP can locate the MySQL socket file for database connections, resolving potential \"Could not connect to the mysql server\" errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmysql.default_socket=/path/to/my/mysql.sock\nmysqli.default_socket=/path/to/my/mysql.sock\npdo_mysql.default_socket=/path/to/my/mysql.sock\n```\n\n----------------------------------------\n\nTITLE: Running Schema Parser with Composer in MODX\nDESCRIPTION: Executes the schema parsing script using Composer to build model files from XML schema definitions. This command processes all schema files in the core/model/schema/ directory and generates the necessary xPDO model files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/tooling/model.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run-script parse-schema\n```\n\n----------------------------------------\n\nTITLE: Getting Row in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->getRow($ds, $mode= 'assoc')` for getting a row. Use xPDOCriteria->stmt->fetch() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n\"see xPDOCriteria->stmt->fetch()\"\n```\n\n----------------------------------------\n\nTITLE: Gitify YAML Configuration for MODX Fred Theme\nDESCRIPTION: YAML configuration for Gitify defining the data structure and export settings for Fred themes, elements, blueprints, and related components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/initial_extract.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndata_directory: _data/\nbackup_directory: _backup/\ndata:\n    fred_themes:\n        class: FredTheme\n        primary: id\n        exclude_keys: [\"config\"]\n        package: fred\n    fred_element_categories:\n        class: FredElementCategory\n        primary: id\n    fred_element_option_sets:\n        class: FredElementOptionSet\n        primary: id\n        extension: .json\n    fred_element_rte_configs:\n        class: FredElementRTEConfig\n        primary: id\n        extension: .json\n    fred_elements:\n        class: FredElement\n        primary: id\n        extension: .html\n    fred_blueprint_categories:\n        class: FredBlueprintCategory\n        primary: id\n    fred_blueprints:\n        class: FredBlueprint\n        primary: id\n        extension: .json\n```\n\n----------------------------------------\n\nTITLE: Basic Parent Ids Retrieval for Resource\nDESCRIPTION: Demonstrates retrieving parent identifiers for a specific resource using default parameters\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getparentids.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$parentIds = $modx->getParentIds(23);\n```\n\n----------------------------------------\n\nTITLE: Defining xPDO.log Method Syntax in PHP\nDESCRIPTION: Defines the syntax for the xPDO.log method, including parameters for log level, message, target, definition, file, and line number.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->log($level, $msg, $target= '', $def= '', $file= '', $line= '');\n```\n\nLANGUAGE: PHP\nCODE:\n```\nvoid log (integer $level, string $msg, [string $target = ''], [string $def = ''], [string $file = ''], [string $line = ''])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Resources with getResources in MODX Revolution (PHP)\nDESCRIPTION: This snippet uses the getResources plugin in MODX Revolution to fetch related resources. It specifies parents and context parameters to narrow down the results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/tab-title.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`300` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Single Image Display Template in Cliche\nDESCRIPTION: This PHP template is used to display a single image within the Cliche gallery component. Key dependencies are MODX and Cliche, and it outputs a DIV with styling for image display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"cliche\">\n    <div class=\"item\">\n        <a title=\"[[+name]]\" class=\"zoom\" href=\"[[+image]]\">\n            <img width=\"[[+width]]\" height=\"[[+height]]\" title=\"[[+name]]\" alt=\"[[+description]]\" class=\"attachment-thumbnail\" src=\"[[+thumbnail]]\"/>\n        </a>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties in MODX Snippets\nDESCRIPTION: Shows how to access properties within a MODX snippet using the $scriptProperties array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/properties-and-property-sets.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$prop = $scriptProperties['propertyName'];\n```\n\n----------------------------------------\n\nTITLE: Adding Users to Forum Members Group in Register Snippet\nDESCRIPTION: Snippet parameter to automatically add newly registered users to the 'Forum Members' user group with the 'Member' role.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n&usergroups=`Forum Members:Member`\n```\n\n----------------------------------------\n\nTITLE: Performing a LEFT JOIN to Select Boxes with Owner Information\nDESCRIPTION: Example of using leftJoin to retrieve box records along with their owner's name by joining the Box and Owner tables in an xPDO query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.leftjoin.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->select($xpdo->getSelectColumns('Box'));\n$query->select(array(\n  'Owner.name'\n));\n$query->leftJoin('Owner','Owner');\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Checking Session Status in ModX\nDESCRIPTION: Method signature for checking if a user has an active session in a specified context. Returns a boolean value indicating session status. The optional sessionContext parameter defaults to 'web' if not specified.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.checksession.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean checkSession ([string $sessionContext = 'web'])\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Elements Documentation\nDESCRIPTION: YAML front matter block defining the title of the documentation page for Elements in Fred.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/cmp/elements.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"Elements\"\n---\n```\n\n----------------------------------------\n\nTITLE: Basic users.gallery.view Snippet Usage (PHP)\nDESCRIPTION: This snippet shows the basic usage of the users.gallery.view snippet. It does not specify any custom templates and relies on the default settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.users.gallery.view.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[!users.gallery.view]]\n\n```\n\n----------------------------------------\n\nTITLE: Basic PollsResult Implementation in MODX\nDESCRIPTION: Simplest implementation of the PollsResult snippet to display poll results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollsresult.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsResult]]\n```\n\n----------------------------------------\n\nTITLE: Basic Call for Analytics\nDESCRIPTION: This snippet demonstrates the most basic usage of the Analytics tool, which is always executed uncached. It requires a Google Analytics web property ID to function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/analytics/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\[[!Analytics? &webPropertyID=`UA-XXXXX-Y`]\\]\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Options Chunk in PHP for MIGX\nDESCRIPTION: This chunk uses migxLoopCollection to fetch resources from a specified parent and convert them to JSON for use in MIGX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/sortable-resourcelist.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[migxLoopCollection?\n    &classname=`modResource`\n    &selectfields=`id,pagetitle`\n    &where=`{\"parent\":\"3\"}`\n    &toJsonPlaceholder=`json`\n]]\n[[+json]]\n```\n\n----------------------------------------\n\nTITLE: Album Zoom Cover Template in Cliche\nDESCRIPTION: This PHP template provides a zoomable album cover functionality for image thumbnails. It requires MODX and Cliche component dependencies. It outputs an HTML DL element with zoom functionality enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<dl class=\"item\">\n    <dt class=\"album-icon\">\n        <a class=\"zoom\" title=\"[[+albumname]]\" href=\"[[+image]]\">\n            <img width=\"[[+width]]\" height=\"[[+height]]\" title=\"[[+albumname]]\" alt=\"[[+description]]\" class=\"attachment-thumbnail\" src=\"[[+thumbnail]]\"/>\n        </a>\n    </dt>\n</dl><!-- End .item -->\n```\n\n----------------------------------------\n\nTITLE: Outputting Specific Videos from a Vimeo Channel in PHP\nDESCRIPTION: This example demonstrates how to retrieve only specific videos from the Vimeo 'Staff Picks' channel by providing a comma-separated list of video IDs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getvimeo/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!getVimeo? &channel=`staffpicks` &id=`68688561,69239313,68146128` &tpl=`vimeoTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying a Template Variable in MODX Templates\nDESCRIPTION: Basic syntax for displaying the value of a Template Variable named 'bio' in a MODX template. The double asterisk syntax is used to reference Template Variables in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*bio]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context Settings Programmatically in MODX Snippets\nDESCRIPTION: This code shows how to programmatically retrieve a context-specific setting within a MODX snippet using the getOption method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/contexts.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$setting = $modx->getOption('my_context_setting');\n```\n\n----------------------------------------\n\nTITLE: Loading Lexicon in MODX\nDESCRIPTION: Method for loading lexicon files in MODX Revolution, demonstrating the language loading mechanism with namespace and topic parameters\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/directory-structure.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->lexicon->load( 'lang:namespace:topic' );\n```\n\n----------------------------------------\n\nTITLE: Properties File Usage - PHP\nDESCRIPTION: Shows how to execute the upgrade script using a properties file for configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/upgrade-schema-v1.0-to-v1.1.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuser@hostname:/home/user/xpdo$ php xpdo/tools/schema/upgrade-mysql-1.1.php --include=sample.schema.properties.php\n```\n\n----------------------------------------\n\nTITLE: Using isNew Method with xPDO Object Example\nDESCRIPTION: Demonstrates how to use isNew() to check the persistence state of a 'Broom' object before and after saving it to the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/state-accessors/isnew.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$broom = $xpdo->newObject('Broom');\n$broom->set('name','Firebolt');\n\necho $broom->isNew() ? 1 : 0; // prints 1\n\n$broom->save();\n\necho $broom->isNew() ? 1 : 0; // prints 0\n```\n\n----------------------------------------\n\nTITLE: Setting session_cookie_domain for Cross-Subdomain Authentication in MODX\nDESCRIPTION: Example of setting the session_cookie_domain configuration value to allow session persistence across all subdomains of a top-level domain. This enables shared login sessions between different MODX Contexts running on subdomains of the same parent domain.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/session_cookie_domain.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.mydomain.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Activated Email Template in HTML\nDESCRIPTION: Email template sent after a successful subscription confirmation. This template informs subscribers that their subscription has been activated and they will receive upcoming newsletters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p>Thank you.</p>\n<p>Your subscription has been activated successfully.</p>\n<p>We will send you the upcoming newsletter once they are published.</p>\n<p> </p>\n<p>Regards,</p>\n<p><a href=\"http://www.example.com\" target=\"_blank\">Example.com</a></p>\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statements in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->exec($sql)` for executing SQL statements. Use modX->execute($criteria) instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n\"see modX->execute($criteria)\"\n```\n\n----------------------------------------\n\nTITLE: Listing MODX System Setting Field Types in Markdown\nDESCRIPTION: This code snippet enumerates the different types of system settings in MODX, detailing the xtype attribute for each field type. It includes descriptions for boolean, text, number, and various combo fields for selecting MODX-specific elements like templates, content types, and namespaces.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n## Types of System Settings\n\nThe **xtype** attribute defines what type of field the GUI will use when rendering the interface for this field:\n\n-   **combo-boolean** : stored values are 1 and 0; the GUI will display \"Yes\" and \"No\"\n-   **textfield** : standard text field\n-   **textarea** : standard textearea\n-   **text-password** : standard password field (input is masked)\n-   **numberfield** : used for entering numbers\n-   **modx-combo-language** : allows user to select a language\n-   **modx-combo-source** :\n-   **modx-combo-template** : allows user to select a template\n-   **modx-combo-content-type** : allows user to select a content type\n-   **modx-combo-charset** : allows user to select a character set\n-   **modx-combo-rte** : like the textarea, but with formatting controls\n-   **modx-combo-context** : allows user to select a context\n-   **modx-combo-namespace** : allows user to select a namespace\n-   **modx-combo-manager-theme** : allows user to select a MODX manager theme\n```\n\n----------------------------------------\n\nTITLE: Example of Removing an Item Object\nDESCRIPTION: Demonstrates how to retrieve an Item object by ID and remove it from the database, with error handling to check if the removal was successful.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/remove.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$item = $xpdo->getObject('Item',123);\n\nif ($item->remove() == false) echo 'The Item failed to remove.';\n```\n\n----------------------------------------\n\nTITLE: Default monthContainer Template for ArchivistGrouper\nDESCRIPTION: Default template chunk used for displaying month-based archive groups, showing the month name, year, and containing resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/archivist/archivist.archivistgrouper.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<li><a href=\"[[+url]]\">[[+month_name]] [[+year]]</a>\n<ul>\n[[+resources]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Filtered File Listing with FileLister in MODX Revolution (PHP)\nDESCRIPTION: This snippet call restricts file listings in 'assets/pdfs' to only PDF files, hiding directories.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!FileLister? &path=`assets/pdfs/` &hideDirectories=`1` &showExt=`pdf`]]\n```\n\n----------------------------------------\n\nTITLE: Combining Resource Placeholders in CustomUrls Pattern\nDESCRIPTION: Demonstrates how to combine multiple resource placeholders in a CustomUrls pattern.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[+id]]-[[+alias]]\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'memberof' in MODX\nDESCRIPTION: Demonstrates the usage of 'memberof' modifier for checking user group membership. It checks if the user is a member of the specified group (Administrator).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n[[+modx.user.id:memberof=`Administrator`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Description with MODX Revolution Tags in HTML\nDESCRIPTION: Demonstrates how to set the meta description using MODX Revolution tags. This example uses the description tag, which represents the description field of the current resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"[[*description]]\"/>\n```\n\n----------------------------------------\n\nTITLE: Invoking MoneyBird Invoices with Templates - PHP\nDESCRIPTION: This snippet shows how to invoke the MoneyBirdInvoices snippet with specific templates for individual and outer invoice listings. It provides customization options for displaying the output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/moneybird.invoices.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!MoneyBirdInvoices? &tpl=`mbInvoice` &outerTpl=`mbInvoices`]]\n```\n\n----------------------------------------\n\nTITLE: Calling the cmCamperDetails Snippet in MODX\nDESCRIPTION: This code snippet demonstrates how to call the cmCamperDetails snippet in a MODX template. It includes parameters to specify a custom template for images (`tplImageItem`), enable image retrieval (`includeImages`), and disable owner retrieval (`includeOwner`). The snippet is called uncached using `[[! ... ]]` syntax, ensuring it's dynamically executed on each request.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcamperdetails-snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[!cmCamperDetails? &tplImageItem=`cmDetailImage` &includeImages=`1` &includeOwner=`0`]]\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Inline Editor in MIGX Grid\nDESCRIPTION: This JSON snippet demonstrates how to configure a MIGX grid column to be editable inline. The `editor` property is set to either `this.textEditor` or `this.listboxEditor` depending on the type of editor desired.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.backend-usage.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"header\": \"Title\", \"width\": \"160\", \"sortable\": \"true\", \"dataIndex\": \"title\", \"editor\": \"this.textEditor\"}\n```\n\n----------------------------------------\n\nTITLE: Wayfinder Snippet Call with Inner Template\nDESCRIPTION: MODX Wayfinder snippet call demonstrating the use of innerTpl parameter for nested menu formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`55` &rowTpl=`rowTpl` &outerTpl=`outerTpl` &parentRowTpl=`parentRow` &innerTpl=`innerTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Custom Database Configuration for Snippets - PHP\nDESCRIPTION: This snippet establishes the necessary database configuration settings that will be required in MODX snippets. It sets up the database type, server, user credentials, and the data source name (DSN). This configuration file is necessary for establishing a connection to the foreign database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cmpgenerator/cmpgenerator.foreign-databases.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$database_type = 'mysql';\n\n$database_server = 'localhost';\n$database_user = 'user';\n$database_password = 'pass';\n$database_connection_charset = 'utf8';\n\ndbase = 'foreign_db';\ntable_prefix = '';\n$database_dsn = $database_type.':host='.$database_server.';dbname='.$dbase.';charset='.$database_connection_charset;\n```\n\n----------------------------------------\n\nTITLE: Protecting Manager Access in NGINX\nDESCRIPTION: NGINX configuration to restrict manager access to a specific subdomain and rewrite unauthorized attempts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nset $mgrcheck $host$request_uri;\nif ($mgrcheck ~* \"((?<!cms.)example\\.com/manager)\") {\n    rewrite /manager /index.php?q=doesnotexist;    \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Combobox with Value List in PHP\nDESCRIPTION: Demonstrates creating a simple combobox using a predefined JSON value list with color options\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.combobox.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[input.combobox? &value_list=`[{ \"value\": \"r\", \"label\": \"Red\" }, { \"value\": \"b\", \"label\": \"Blue\" }]`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Rewrite Rules for Discuss\nDESCRIPTION: Apache .htaccess rewrite rules for Discuss forum URLs. These rules should be added before the regular MODX rewrite rules but after the RewriteBase directive.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n# If imported from SMF, you can include the following lines to make sure existing urls don't break.\nRewriteRule ^forums/index.php/topic,(.*).msg(.*).html$ forums/?action=thread&thread=$1&i=1\nRewriteRule ^forums/index.php/topic,(.*).(.*).html$ forums/?action=thread&thread=$1&i=1&start=$2\nRewriteRule ^forums/\\?topic=(.+).(.+)$ forums/?action=thread&thread=$1&i=1\nRewriteRule ^forums/index.php/board,(.*).(.*).html$ forums/?action=board&board=$1&i=1&start=$2\nRewriteRule ^forums/\\?board=(.+).(.+)$ forums/?action=board&board=$1&i=1\n\n\n# Discuss rewrite rules\nRewriteRule ^forums/thread/([0-9]+)/(.*)$ forums/?action=thread&thread=$1 [L,QSA]\nRewriteRule ^forums/u/(.+)$ forums/?action=user&user=$1 [L,QSA]\nRewriteRule ^forums/board/([0-9]+)/(.*)$ forums/?action=board&board=$1 [L,QSA]\nRewriteRule ^forums/category/([0-9]+)/(.*)$ forums/?category=$1 [L,QSA]\nRewriteRule ^forums/(.+)$ forums/?action=$1 [L,QSA]\nRewriteRule ^forums/(.+)/$ forums/?action=$1 [L,QSA]\n```\n\n----------------------------------------\n\nTITLE: Customizing Metadata Display with Template\nDESCRIPTION: This variant allows specifying a template to format image metadata display. It requires modifying the &tplContainer parameter to use a custom MODX template, which defaults to `image.information`. This enables tailored presentation of metadata, while still depending on the MODX framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.image.information.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!image.information? &tplContainer=`image.information`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Event in MODX using PHP\nDESCRIPTION: This snippet demonstrates how to create a custom event in MODX using the API. It sets up a new modEvent object with a custom name, service type, and groupname for visual organization in the MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$Event = $modx->newObject('modEvent');\n$Event->set('name', 'OnMyCustomEvent');\n$Event->set('service',1);\n$Event->set('groupname', 'Custom');\n```\n\n----------------------------------------\n\nTITLE: Template Chunk for getRTImages Output\nDESCRIPTION: Example HTML template chunk used with getRTImages to format each extracted image. This template creates a list item with a linked image, using the src, title, and alt placeholders from the extracted image data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getrtimages/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<li><a href=\"[[+src]]\" title=\"[[+title]]\"><img src=\"[[+src]]\" alt=\"[[+alt]]\"></a></li>\n```\n\n----------------------------------------\n\nTITLE: Main ExtJS Window Implementation\nDESCRIPTION: Complete HTML file (a.html) demonstrating ExtJS window creation with Ajax content loading\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/2.-ext-js-tutorial-ajax-include.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <title>My Ext JS Test Page</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n        function buildWindow() {\n            var win = new Ext.Window({\n                id: 'my_window'\n                , title : \"Welcome to Ext JS\"\n                , width : 300\n                , height: 150\n                , layout: \"fit\"\n                , autoLoad: {\n                    url : \"b.html\"\n                    , scripts : true\n                }\n            });\n            win.show();\n        }\n        Ext.onReady(buildWindow);\n    </script>\n    <body>\n        <h1>Intro to Ext JS</h1>\n        <p>I've uploaded this HTML to the root of my site and I'm including the Ext JS libraries that ship with the MODX manager.</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Chunk Array for modExtra (PHP)\nDESCRIPTION: Example of defining a chunk array for modExtra. This array is used in the build process to create chunks for the MODX component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/component-structure.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tmp = array(\n    'tpl.modExtra.item' => array(\n        'file' => 'item',   // File name in /core/components/имя/chunks/\n        'description' => '',    // Description - will be visible in the corresponding field in the admin panel\n    ),\n);\n```\n\n----------------------------------------\n\nTITLE: Cambiando a una rama específica en MODX\nDESCRIPTION: Comandos Git para cambiar a una rama específica en el repositorio de MODX y actualizar con los últimos cambios.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/git.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ngit fetch upstream\ngit checkout 2.5.x upstream/2.5.x\n```\n\n----------------------------------------\n\nTITLE: Documenting Placeholder and Chunk Relationships\nDESCRIPTION: Provides a detailed mapping of placeholders to specific chunks used across different templates in the Discuss system, including common placeholders and template-specific mappings\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.chunkmap.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Placeholder | Chunks |\n|-------------|--------|\n| trail | breadcrumbs/disBreadcrumbsLink |\n```\n\n----------------------------------------\n\nTITLE: Custom Template PollsLatest Implementation in PHP\nDESCRIPTION: Example showing how to customize the poll display using custom templates for vote and answer views.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollslatest.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsLatest? &tplVote=`myVoteOuter` &tplVoteAnswer=`myVoteAnswer`]]\n```\n\n----------------------------------------\n\nTITLE: Incorrect modAction Configuration for MODX Custom Manager Page\nDESCRIPTION: An example of incorrect configuration for a modAction object in MODX. This shows the wrong way to specify the controller path with 'controllers/index'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$action= $modx->newObject('modAction');\n$action->fromArray(array(\n 'id' => 1,\n 'namespace' => 'doodles',\n 'parent' => 0,\n 'controller' => 'controllers/index',\n 'haslayout' => true,\n 'lang\\_topics' => 'doodles:default',\n 'assets' => '',\n),'',true,true);\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in xPDO Connection with PHP\nDESCRIPTION: This code snippet demonstrates how to enable debug mode in an xPDO connection. Setting debug to true enables more verbose logging and error information during database operations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.setdebug.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->setDebug(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Math Question in HTML Form\nDESCRIPTION: This HTML snippet demonstrates how to integrate the math question into a form. It includes placeholders for the equation components and an input field for the answer.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/math.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label>[[!+fi.op1]] [[!+fi.operator]] [[!+fi.op2]]?</label>\n[[!+fi.error.math]]\n<input type=\"text\" name=\"math\" value=\"[[!+fi.math]]\" />\n<input type=\"hidden\" name=\"op1\" value=\"[[!+fi.op1]]\" />\n<input type=\"hidden\" name=\"op2\" value=\"[[!+fi.op2]]\" />\n<input type=\"hidden\" name=\"operator\" value=\"[[!+fi.operator]]\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcache Server Path Setting\nDESCRIPTION: Example of the memcached server connection string format for the resource_memcached_server system setting in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/memcache.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmemcache.tld:121212\n```\n\n----------------------------------------\n\nTITLE: Latest Posts Template for MODX\nDESCRIPTION: Template chunk for formatting individual post entries in the latest posts list, including title and publication date formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <a href=\"[[~[[+id]]]]\">[[[+pagetitle]]</a>\n  [[+publishedon:notempty=`<br /> - [[+publishedon:strtotime:date=`%b %d, %Y`]]`]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Inner Row Template Definition\nDESCRIPTION: HTML template chunk used for formatting inner menu items in Wayfinder navigation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<li><a href=\"[[+wf.link]]\">[[+wf.linktext]]</a>[[+wf.wrapper]]</li>\n```\n\n----------------------------------------\n\nTITLE: Creating a MODX Template with Sidebar\nDESCRIPTION: An extended HTML template for MODX that includes a sidebar alongside the main content area. This template is designed for blog posts or pages requiring additional navigation or related content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\" itemscope itemtype=\"http://schema.org/Organization\">\n<head>\n   <meta charset=\"UTF-8\">\n   <base href=\"[[!++site_url]]\" />\n   <title>[[*pagetitle]]</title>\n   [[- Continue to insert your CSS, Scripts and other assets here. ]]\n</head>\n<body>\n    <!-- Header Start -->\n    <header>\n        <nav>\n            <ul>\n                <li class=\"active\"><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Blog</a></li>\n            </ul>\n        </nav>\n    </header>\n    <!-- Header End -->\n    <main>\n        [[*content]]\n    </main>\n    <!-- Aside Start -->\n    <aside>\n        <section>\n            <h4>Related posts</h4>\n            <ul>\n                <li><a href=\"#\">Link</a></li>\n                <li><a href=\"#\">Link</a></li>\n            </ul>\n        </section>\n    </aside>\n    <!-- Aside End -->\n    <!-- Footer Start -->\n    <footer>\n        <nav>\n            <ul>\n                <li><a href=\"#\">Privacy Policy</a></li>\n                <li><a href=\"#\">Terms &amp; Conditions</a></li>\n            </ul>\n        </nav>\n    </footer>\n    <!-- Footer End -->\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring mChimpX FormIt Hook for Mailchimp Subscription in MODX\nDESCRIPTION: This snippet demonstrates how to set up the mChimpX FormIt hook in MODX Revolution. It includes various configuration options such as API key, list ID, email field, merge tags, and error handling settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mchimpx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n  &hooks=`mChimpXSubscribe`\n  &mcApiKey=`xxxxxx5229a6a84acd58xxxxxx210ax-us11`\n  &mcListId=`yyyyyyyyyyy`\n  &mcEmailField=`EMAIL`\n  &mcMergeTags=`FNAME:FNAME,LNAME:LNAME,BIRTHDATE:BIRTHDATE,CODE:CODE,SOURCE:SOURCE`\n  &mcDoubleOptin=`1`\n  &mcDebug=`true`\n  &mcUpdateExisting=`0`\n  &mcFailOnAlreadySubscribed=`1`\n  &mcFailOnNotSubscribed=`1`\n  &mcFailOnMissingRequired=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Checking Backend Context in modX\nDESCRIPTION: Checks if the current user context is in the backend, facilitating backend-specific operations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nmodX->isBackend()\n```\n\n----------------------------------------\n\nTITLE: Opening Container with Chrome Frame Support - PHP\nDESCRIPTION: This PHP snippet opens the body tag with specific classes in MODX and includes support for old browsers using Chrome Frame. It uses MODX placeholders for dynamic classes and a conditional check to include additional HTML if comments are to be shown. The snippet requires MODX placeholders and is dependent on proper configuration of MODX settings like 'bx.show_comments'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-container-open.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[++bx.show_comments:if=`[[++bx.show_comments]]`:eq=`1`:then=`\\n<!-- Use these body classes to target any combination of specific templates, ids, children, and class_keys -->\\n`]]\\n\\n<body class=\"t-[[*template]] id-[[*id]] p-[[*parent]] ck-[[*class_key]]\">\\n<!--[if lt IE [[++bx.chrome_frame_version:add=`1`]]]>\\n        <p class=\"chromeframe\">You are using an <strong>outdated</strong> browser. Please <a href=\"http://browsehappy.com/\">upgrade your browser</a> or <a href=\"http://www.google.com/chromeframe/?redirect=true\">activate Google Chrome Frame</a> to improve your experience.</p>\\n<![endif]-->\n```\n\n----------------------------------------\n\nTITLE: Structuring Lexicon Files in MODX Revolution 2.0.0-rc2\nDESCRIPTION: Demonstrates the new directory structure for lexicon files in MODX Revolution 2.0.0-rc2. Lexicon files should be placed in a 'lexicon' directory within the namespace path, organized by language and topic.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/2.0.0-rc2.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlexicon/[language]/[topic].inc.php\n```\n\n----------------------------------------\n\nTITLE: Albums Wrapper Template in Cliche\nDESCRIPTION: This PHP template wraps album items in a container for the Cliche image gallery. Dependents include MODX and Cliche component. The output is a DIV element containing album items for gallery purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"cliche\" id=\"albums_list\">\n    [[+items]]\n</div><!-- End #albums_list -->\n```\n\n----------------------------------------\n\nTITLE: Using Output Filters with Resource Fields in MODX\nDESCRIPTION: Demonstrates how to apply output filters to resource fields for formatting and data transformation\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/resources/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Renders a limited version of the introtext field.\n// If it is longer than 100 chars, adds an ...\n[[*introtext:ellipsis=`100`]]\n// Grabs the user who last edited the Resource's username\n[[*editedby:userinfo=`username`]]\n// Grabs the user who published the Resource's email\n[[*publishedby:userinfo=`email`]]\n```\n\n----------------------------------------\n\nTITLE: Example of outerTpl Definition in EVO and REVO\nDESCRIPTION: This code snippet provides examples for defining the &outerTpl in both the Evolution and Revolution versions of MODX, showcasing how to utilize different placeholders for outputting menu items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<ul id=\"topnav\"[+wf.classes+]>[+wf.wrapper+]</ul>\n```\n\nLANGUAGE: php\nCODE:\n```\n<ul id=\"topnav\"[[+wf.classes]]>[[+wf.wrapper]]</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring FormIt with Report Generation\nDESCRIPTION: Extended FormIt configuration showing how to implement the fiGenerateReport hook for automated email reports.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.tutorial.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n  &hooks=`math,spam,fiGenerateReport,email,redirect`\n  &figrExcludedFields=`op1,op2,operator,math`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple SMTP Hosts in MODX\nDESCRIPTION: Example configuration string for specifying multiple SMTP hosts with different ports in MODX. Hosts must be separated by semicolons and will be tried in the specified order.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/mail_smtp_hosts.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsmtp1.example.com:25;smtp2.example.com\n```\n\n----------------------------------------\n\nTITLE: Generating Link to Current Resource with Named Anchor in MODX\nDESCRIPTION: Shows how to create a link to the current resource that includes a named anchor. This method uses MODX's template variables and URL generation syntax to ensure the link works correctly with friendly URLs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/named-anchor.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*id]]]]#prohibited\">Prohibited Activities</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing the addSubscriber Method for Handling User Selection\nDESCRIPTION: Extends the newsletter subscribers grid to handle user selection from the combo box. Sends an AJAX request to create a new subscriber and refreshes the grid on success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nExt.extend(Sendex.grid.NewsletterSubscribers,MODx.grid.Grid, {\n\n    addSubscriber: function(combo, user, e) {\n        // Очищаем выбор в комбобоксе\n        combo.reset();\n\n        // Отправляем ajax запрос на сервер, в процессор добавления\n        MODx.Ajax.request({\n            url: Sendex.config.connector_url\n            ,params: {\n                action: 'mgr/newsletter/subscriber/create'\n                // И передаём ему id юзера\n                ,user_id: user.id\n                ,newsletter_id: this.config.record.id\n            }\n            ,listeners: {\n                // Если все хорошо - обновляем таблицу подписчиков\n                success: {fn:function® {this.refresh();},scope:this}\n            }\n        });\n    }\n\n});\nExt.reg('sendex-grid-newsletter-subscribers',Sendex.grid.NewsletterSubscribers);\n```\n\n----------------------------------------\n\nTITLE: Preventing Resource Deletion Plugin in MODX\nDESCRIPTION: Plugin that prevents deletion of a specific resource (ID=7) and logs an error message. Returns a JSON response to block the deletion with a custom message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforedocformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeDocFormDelete':\n        //if a id=7\n        if ($id == 7){\n            $modx->log(modX::LOG_LEVEL_ERROR, 'Someone tried to delete a resource '.$resource->get('pagetitle'));\n            $response = array(\n            \t'success' => false,\n            \t'message' => \"Can't be deleted! And then head off your shoulders!\",\n            \t'data' => array(),\n            );\n            echo $modx->toJSON($response);\n            exit;\n        } \n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: AdvSearch CurrentPageLink Chunk Default Value\nDESCRIPTION: This is the default chunk for the currently active page link in pagination. It defines the HTML structure of the current page link, using a placeholder for the page number.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/paging0tpl.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n\"<span class=\\\"advsea-page advsea-current-page\\\">[[+text]]</span>\"\n```\n\n----------------------------------------\n\nTITLE: Using Lingua GetValue with Wayfinder in MODX\nDESCRIPTION: Example of integrating Lingua with Wayfinder navigation by replacing the default link text with translated page titles using the lingua.getValue snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lingua/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<li[[+wf.id]][[+wf.classes]]>\n    <a href=\"[[+wf.link]]\" title=\"[[+wf.title]]\" [[+wf.attributes]]>\n        <-- [[-+wf.linktext]] -->\n        [[lingua.getValue:default=`[[+wf.linktext]]`? &id=`[[+id]]` &field=`pagetitle`]]\n        <!-- rowTpl -->\n    </a>\n    [[+wf.wrapper]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Content Type Validation Example\nDESCRIPTION: Example of using xPDOMinLengthValidationRule for content type name validation in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"modContentType\" table=\"content_type\" extends=\"xPDOSimpleObject\">\n    <field key=\"name\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" index=\"unique\" />\n    <!-- ... more fields here ... -->\n    <validation>\n        <rule field=\"name\" name=\"name\" type=\"xPDOValidationRule\" rule=\"xPDOMinLengthValidationRule\" value=\"1\" message=\"content_type_err_ns_name\" />\n    </validation>\n</object>\n```\n\n----------------------------------------\n\nTITLE: ISO Date Formatting in MODX\nDESCRIPTION: Example of formatting a date in ISO format (YYYY-MM-DD) using the date output modifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/date-formats.md#2025-04-17_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\n[[*createdon:strtotime:date=`%Y-%m-%d`]]\n```\n\n----------------------------------------\n\nTITLE: Structuring Fred Sidebar HTML Elements\nDESCRIPTION: HTML structure example for a sidebar button in Fred, showing the required class naming and HTML element hierarchy.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/sidebar_plugins.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<dt class=\"fred--sidebar_page_settings\" tabindex=\"0\" role=\"tab\">Settings</dt>\n```\n\n----------------------------------------\n\nTITLE: Uncached WriteCache Call Example\nDESCRIPTION: Example showing how to call the writeCache snippet in an uncached manner for dynamic updates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/example.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!writeCache]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Enhanced Login Snippet with Redirection in MODX\nDESCRIPTION: This snippet sets up the login form with additional functionality to redirect users to their previous page after login.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Login?\n&loginTpl=`lgnLoginTpl`\n&logoutTpl=`lgnLogoutTpl`\n&errTpl=`lgnErrTpl`\n&logoutResourceId=`5`\n&redirectToPrior=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Using Lingua CultureKey with Lexicons in MODX\nDESCRIPTION: Example of using the lingua.cultureKey snippet with MODX lexicons. Shows two different versions - one using uncached calls (Version 1) and one using Lingua's cache system (Version 2).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lingua/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!%login? &namespace=`Login` &language=`[[!lingua.cultureKey]]`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[%login? &namespace=`Login` &language=`[[lingua.cultureKey]]`]]\n```\n\n----------------------------------------\n\nTITLE: Defining the XML Schema for the Custom Resource\nDESCRIPTION: This snippet demonstrates how to define the XML schema for a custom resource class in MODX.  The schema specifies the package name, version, base class, platform, and the object class, which extends modResource. This XML file is used by xPDO to generate the PHP class files for the custom resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/index.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"copyrightedresource\" version=\"1.0\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\">\n   <object class=\"CopyrightedResource\" extends=\"modResource\" />\n</model>\n```\n\n----------------------------------------\n\nTITLE: Concise Error Handling for xPDOObject Save in PHP\nDESCRIPTION: Demonstrates a more concise way to handle errors when saving an xPDOObject, using modError to check validation and return a failure message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/save.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif ($object->save() == false) {\n    $modx->error->checkValidation($object);\n    return $this->failure($modx->lexicon($objectType.'_err_save'));\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for a Custom Event in MODX Plugin\nDESCRIPTION: This incomplete code snippet indicates how a plugin would be set up to listen for a custom event. When the event is triggered, the plugin can receive options passed to it from the invokeEvent method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//... TODO...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Context Key in MODX PHP\nDESCRIPTION: Simple method to get the current context key from the MODX system.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getcontext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->context->key;\n```\n\n----------------------------------------\n\nTITLE: Complex Combobox with Value List in PHP\nDESCRIPTION: Demonstrates creating a more detailed combobox with multiple flavor options using a comprehensive JSON value list\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.combobox.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!input.combobox? &value_list=`[\n{ \"value\": \"101\", \"label\": \"Regular\" },\n{ \"value\": \"102\", \"label\": \"Chocolate\" },\n{ \"value\": \"103\", \"label\": \"Blueberry\" },\n{ \"value\": \"104\", \"label\": \"Devil's Food\"}\n]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using getResources in MODX Documentation\nDESCRIPTION: This PHP snippet demonstrates how to use the getResources snippet within MODX to fetch resources based on specified criteria. It is blank by default, designed to close any wrapper tags that were opened in bx-container-open. Key parameters include 'parents', 'context', 'limit', and 'resources'. The expected output is a list of resources matching the criteria. Ensure MODX is properly installed to use this snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-container-close.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section?\\n    &parents=`1316`\\n    &context=`extras`\\n    &limit=`0`\\n    &resources=`1316,[[*id]]`\\n]]\n```\n\n----------------------------------------\n\nTITLE: Inserting reCaptcha Placeholders in PHP\nDESCRIPTION: These placeholders are required in the form to render the reCaptcha widget and display any error messages. The first placeholder shows the reCaptcha form, while the second displays error messages if any.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/recaptcha.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+formit.recaptcha_html]]\n[[!+fi.error.recaptcha]]\n```\n\n----------------------------------------\n\nTITLE: Media Type sekFancyBox Implementation in PHP\nDESCRIPTION: Two examples of implementing media modal windows with sekFancyBox to display images or Flash content. The type property must be set to media for this functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`media`\n &linktext=`<img src=\"thumbs/image.jpg\" />`\n &link=`images/image.jpg`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`media`\n &linktext=`SWF File`\n &link=`[http://www.adobe.com/jp/events/cs3\\_web\\_edition\\_tour/swfs/perform.swf](http://www.adobe.com/jp/events/cs3_web_edition_tour/swfs/perform.swf)`\n]]\n```\n\n----------------------------------------\n\nTITLE: Resizing Image with phpthumbof\nDESCRIPTION: Resize an image to specific width and height using phpthumbof output filter. Demonstrates basic image resizing in MODX with width set to 960 pixels and height to 300 pixels.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300`]]\n```\n\n----------------------------------------\n\nTITLE: Using fastField with Wayfinder in MODX\nDESCRIPTION: Shows how to use fastField to retrieve the content of resources within a Wayfinder rowTpl chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[#[[+wf.docid]].content]]\n```\n\n----------------------------------------\n\nTITLE: Getting Controller Path in MODX\nDESCRIPTION: Code snippet showing how to specify the path to custom controllers directory for a copyrighted resource implementation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-3-controllers.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn $modx->getOption('copyrightedresource.core_path',null,$modx->getOption('core_path').'components/copyrightedresource/').'controllers/';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Graph with xPDO in PHP\nDESCRIPTION: Demonstrates the syntax for using the xPDO::getObjectGraph method to retrieve a single object instance and related objects defined by a graph.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobjectgraph.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOObject|null getObjectGraph (string $className, array|str $graph, [xPDOCriteria|array|str|int $criteria = null], [bool|int $cacheFlag = true])\n```\n\n----------------------------------------\n\nTITLE: Customizing Galleriffic Plugin with numThumbs\nDESCRIPTION: This snippet shows how to use the Galleriffic plugin with the Gallery snippet, setting the `numThumbs` property to control the number of thumbnails displayed per page.  The snippet also assigns the output to a placeholder named 'gallery'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.plugins/galleriffic.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery?\n   &toPlaceholder=`gallery`\n   &album=`My Photos`\n   &plugin=`galleriffic`\n   &numThumbs=`10`\n]]\n```\n\n----------------------------------------\n\nTITLE: MODX makeUrl Method Signature\nDESCRIPTION: The primary method signature for makeUrl() showing all available parameters including id, context, args, scheme and options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.makeurl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring makeUrl (integer $id, [string $context = ''], [string|array $args = ''], [mixed $scheme = -1], [array $options = null])\n```\n\n----------------------------------------\n\nTITLE: Configuring User Group Permissions for Gallery Access\nDESCRIPTION: Table showing the manager group settings for controlling user permissions in sekUserGalleries. These settings determine which users can create, edit, or delete content and how much storage space they're allocated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting    | Description                                                                                                                                                                                           | Version |\n| ---------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------- |\n| User Group | Select a single user group from the drop down to define the permissions for the user's gallery.                                                                                                       | >0.0.1  |\n| User Role  | This uses the Modx User Groups to manage the permissions. Select a role from the drop down.                                                                                                           | >0.0.1  |\n| Amount     | Integer to define the amount of space the user, with the defined user group and role, can use.                                                                                                        | >0.0.1  |\n| Unit       | The unit of measure for the amount of space allocated for the user. (MiB,GiB, etc)                                                                                                                    | >0.0.1  |\n| Level      | The level of enforcement. Soft will allow users to continue to add files after the maximum amount of space is reached. Hard will prevent further uploads if the amount of space allocated is reached. | >0.0.1  |\n| Private    | Set to Yes, only the user who owns the gallery can access the images. If set to No, anyone can view the files in the gallery.                                                                         | >0.0.1  |\n```\n\n----------------------------------------\n\nTITLE: Auto-Tag Input Options Configuration in JSON\nDESCRIPTION: JSON configuration options for Auto-Tag template variables in MODX. These options can be used in MIGX configurations to control field validation including blank values, length constraints, and regex validation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"maxLength\": \"\",\n    \"minLength\": \"\",\n    \"regex\": \"\",\n    \"regexText\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Version Information in MODx JS\nDESCRIPTION: Shows how to access MODX version information through the MODx.version object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar fv = MODx.version.full_version;\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Items to/from CookieList - MODX Revolution - PHP\nDESCRIPTION: The addToCookieList snippet allows generating a link for users to add or remove items from their CookieList. Unique to each user, it requires uncached calls to prevent differing user states from affecting resource caching.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cookielist/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!addToCookieList]]\n```\n\n----------------------------------------\n\nTITLE: Creating Parent Page Link in MODX Revolution HTML\nDESCRIPTION: Illustrates how to create a link to the parent page using MODX Revolution tags. This example uses the parent tag in combination with the link syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*parent]]]]\">Up to parent page</a>\n```\n\n----------------------------------------\n\nTITLE: Filtering Resources by Multiple Template Options in MODX (PHP)\nDESCRIPTION: Outputs child resources of the current resource that use either template ID 1 or 2, using the OR operator in the where condition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources?\n    &parents=`[[*id]]`\n    &where=`{\"template:=\":1, \"OR:template:=\":2}`\n    &tpl=`myRowTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Session Auto Start in .htaccess\nDESCRIPTION: This .htaccess configuration sets the PHP session auto start value to 0. It's used to resolve login issues where users are redirected back to the login screen after installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/troubleshooting.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nphp_value session.auto_start 0\n```\n\n----------------------------------------\n\nTITLE: jQuery DOM Ready Equivalent\nDESCRIPTION: Comparison between ExtJS and jQuery DOM ready syntax\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/2.-ext-js-tutorial-ajax-include.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$(function() {\n});\n```\n\n----------------------------------------\n\nTITLE: Select Field Using Options in MODX\nDESCRIPTION: This snippet creates a multi-select field with predefined options in MODX, aiding in the selection of favorite things.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`select`\n    &name=`favorite_things`\n    &multiple=`1`\n    &array=`1`\n    &options=`MODx==modx||Money==money||Power==power||Other==default`\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating and Committing to Feature Branch\nDESCRIPTION: Commands to create a feature branch and commit local changes using Gitify\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/pr_workflow.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/www\ngit checkout -b my-feature\ngitify extract\ngit add --all\ngit commit -m \"My Changes\"\n```\n\n----------------------------------------\n\nTITLE: Complete SiteEditor Example Template\nDESCRIPTION: A full HTML template demonstrating SiteEditor field usage across different resource fields including pagetitle, introtext, content, and a custom template variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siteeditor/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<html>\n    <head>\n    </head>\n    <body>\n        <h1>[[*pagetitle:siteEditorField]]</h1>\n        <p>\n                [[*introtext:siteEditorField]]\n        </p>\n        [[*content:siteEditorField]]\n        <hr />\n        [[*footerTv:siteEditorField]]\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Migrating VersionX 2.0 Data to VersionX 3.0\nDESCRIPTION: Command line script to migrate existing VersionX 2.0 data to the new VersionX 3.0 delta-based data model. This script should be run from the root of your MODX installation after updating to VersionX 3.0.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/versionx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp core/components/versionx/migrate.php\n```\n\n----------------------------------------\n\nTITLE: Using SmartOptimizer with HTML\nDESCRIPTION: Illustrates how to integrate SmartOptimizer in an HTML page by modifying the way CSS and JS files are called. Designed for users who can't modify their .htaccess file directly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/smartoptimizer/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Your CSS files -->\n<link rel=\"stylesheet\" href=\"assets/css/file1.css\"/>\n<link rel=\"stylesheet\" href=\"assets/css/file2.css\"/>\n\n<!-- Your JS files -->\n<script src=\"assets/js/file.js\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Your CSS files -->\n<link rel=\"stylesheet\" href=\"[[SmartOptimizer? &files=`assets/css/file1.css,file2.css`]]\"/>\n\n<!-- Your JS files -->\n<script src=\"[[SmartOptimizer? &files=`assets/js/file.js`]]\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Package Attributes in MODX Transport Package\nDESCRIPTION: Code that adds package attributes including license, readme, changelog, and setup options to the transport package. These will be displayed during the installation process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'Adding package attributes and setup options...');\n$builder->setPackageAttributes(array(\n    'license' => file_get_contents($sources['docs'] . 'license.txt'),\n    'readme' => file_get_contents($sources['docs'] . 'readme.txt'),\n    'changelog' => file_get_contents($sources['docs'] . 'changelog.txt'),\n    'setup-options' => array(\n        'source' => $sources['build'].'setup.options.php',\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Custom Output Modifier Implementation in MODX\nDESCRIPTION: Implementation of the makeExciting snippet that serves as a custom output modifier to append exclamation marks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$defaultExcitementLevel = 1;\n$result = $input;\nif (isset($options)) {\n    $numberOfExclamations = $options;\n} else {\n    $numberOfExclamations = $defaultExcitementLevel;\n}\nfor ( $i = $numberOfExclamations; $i > 0; $i-- ) {\n    $result = $result . '!';\n}\nreturn $result;\n```\n\n----------------------------------------\n\nTITLE: Adding ComboBox to Newsletter Subscribers Toolbar\nDESCRIPTION: Code for adding the user selection combo box to the toolbar of the subscribers grid. Configures the combo box with width and event listeners for handling user selection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n,tbar: [{\n    xtype: 'sendex-combo-user'\n    // Имя поля\n    ,name: 'user_id'\n    ,hiddenName: 'user_id'\n    // Ширина - 50%\n    ,width: '50%'\n    ,listeners: {\n        // При выборе позиции нужно запустить метод addSubscriber таблицы\n        select: {fn: this.addSubscriber, scope: this}\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Icon Editor Element Markup\nDESCRIPTION: HTML structure required for the Fred Icon Editor plugin to target icon elements. Elements must be <i> tags with a data-fred-name attribute.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/system_settings/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i data-fred-name=\"icon-name\"></i>\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Column Form Layout in MODx Window\nDESCRIPTION: This JavaScript snippet creates a multi-column layout within a MODx window using ExtJS layout configurations. It defines a two-column layout for form fields, enhancing the UI for better organization. The snippet utilizes nested arrays within the `fields` configuration, leveraging the `column` and `form` layouts provided by ExtJS.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\n,fields: [\n    {xtype: 'textfield',fieldLabel: _('name'),name: 'name',id: 'sendex-'+this.ident+'-name',anchor: '99%'}\n    ,{\n        layout:'column'\n        ,border: false\n        ,anchor: '100%'\n        ,items: [{\n            columnWidth: .5\n            ,layout: 'form'\n            ,defaults: { msgTarget: 'under' }\n            ,border:false\n            ,items: [\n                {xtype: 'modx-combo-template',fieldLabel: _('sendex_newsletter_template'),name: 'template',id: 'sendex-'+this.ident+'-template',anchor: '99%'}\n                ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_subject'),name: 'email_subject',id: 'sendex-'+this.ident+'-email_subject',anchor: '99%'}\n                ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_reply'),name: 'email_reply',id: 'sendex-'+this.ident+'-email_reply',anchor: '99%'}\n                ,{xtype: 'combo-boolean',fieldLabel: _('sendex_newsletter_active'),name: 'active',hiddenName: 'active',id: 'sendex-'+this.ident+'-active',anchor: '50%'}\n            ]\n        },{\n            columnWidth: .5\n            ,layout: 'form'\n            ,defaults: { msgTarget: 'under' }\n            ,border:false\n            ,items: [\n                {xtype: 'sendex-combo-snippet',fieldLabel: _('sendex_newsletter_snippet'),name: 'snippet',id: 'sendex-'+this.ident+'-snippet',anchor: '99%'}\n                ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_from'),name: 'email_from',id: 'sendex-'+this.ident+'-email_from',anchor: '99%'}\n                ,{xtype: 'textfield',fieldLabel: _('sendex_newsletter_email_from_name'),name: 'email_from_name',id: 'sendex-'+this.ident+'-email_from_name',anchor: '99%'}\n                ,{xtype: 'modx-combo-browser',fieldLabel: _('sendex_newsletter_image'),name: 'image',id: 'sendex-'+this.ident+'-image',anchor: '99%'}\n            ]\n        }]\n    }\n    ,{xtype: 'textarea',fieldLabel: _('description'),name: 'description',id: 'sendex-'+this.ident+'-description',height: 75,anchor: '99%'}\n]\n\n```\n\n----------------------------------------\n\nTITLE: String Manipulation in MODX\nDESCRIPTION: Examples of string cleaning and manipulation using strip, stripString, and replace modifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_7\n\nLANGUAGE: modx\nCODE:\n```\n[[+textdocument:strip]]\n[[+name:stripString=`Mr.`]]\n[[+pagetitle:replace=`Mr.==Mrs.`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Redirect Hook Properties in Markdown\nDESCRIPTION: A markdown table showing the properties for the redirect hook in mhPayPal, including property names, descriptions, default values, and version information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage/hooks.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| &property       | Description                                                                                                                                                                            | Default value                                | Version |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------- | ------- |\n| redirectTo      | \\[integer                                                                                                                                                                              | string\\] Either a resource ID or a full URL. |         | 1.1.0 |\n| redirectParams  | \\[JSON string\\] A JSON style string with extra parameters you want to add to the URL. Only used if redirectTo is a resource ID.                                                        |                                              | 1.1.0   |\n| redirectContext | \\[string\\] The key of the context to use in building the URL if redirectTo is a resource ID.                                                                                           | Current context                              | 1.1.0   |\n| redirectScheme  | Any valid value for the [modX::makeUrl](developing-in-modx/other-development-resources/class-reference/modx/modx.makeurl \"modX.makeUrl\") scheme, indication what kind of url to build. | link\\_tag\\_scheme setting or -1              | 1.1.0   |\n```\n\n----------------------------------------\n\nTITLE: Resource Type Name Implementation\nDESCRIPTION: Method to provide translated name for the resource type\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function getResourceTypeName() {\n  $this->xpdo->lexicon->load('copyrightedresource:default');\n  return $this->xpdo->lexicon('copyrightedresource');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX TV Grid Columns in JSON\nDESCRIPTION: This JSON configuration defines the grid columns for the MIGX TV in the MODX manager, specifying the display of day, opening time, and closing time columns.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/simple-opening-hours-table.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"header\": \"Day\",\n    \"width\": \"60\",\n    \"sortable\": \"false\",\n    \"dataIndex\": \"day\"\n  },\n  {\n    \"header\": \"From\",\n    \"width\": \"50\",\n    \"sortable\": \"false\",\n    \"dataIndex\": \"from\"\n  },\n  {\n    \"header\": \"Until\",\n    \"width\": \"50\",\n    \"sortable\": \"false\",\n    \"dataIndex\": \"until\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Expected Twitter Profile Output in PHP\nDESCRIPTION: Sample output from the previous placeholder example, showing the formatted display of Twitter profile information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.gettwitterprofile.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTwitter Name: MODX\nLikes: 2348\n```\n\n----------------------------------------\n\nTITLE: Check Single Resource Group Membership\nDESCRIPTION: Checks if a resource is a member of a single resource group by passing the group name as a string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modresource/modresource.ismember.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$resource->isMember('Marketing');\n```\n\n----------------------------------------\n\nTITLE: Defining tplLoginToComment Chunk in PHP\nDESCRIPTION: This PHP chunk defines a simple HTML structure that prompts users to log in before commenting. It is specifically used in QuipReply's comment section when the user is not authenticated. The displayed message is retrieved from MODX's language strings using the placeholder [[%quip.login_to_comment]].\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipreply/tpllogintocomment.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"quip-comment\">\n    <p>[[%quip.login_to_comment]]</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Cloning Theme Repository to MODX Instance\nDESCRIPTION: Commands to clone a theme repository into a temporary directory and then move its contents to the web root using rsync.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/www\ngit clone git@github.com:modxcms/fred-theme-starter.git tmp\nrsync -av ./tmp ./\nrm -rf ./tmp\n```\n\n----------------------------------------\n\nTITLE: Using Inline Chunks with Custom Placeholders\nDESCRIPTION: Demonstration of using @INLINE chunks with custom placeholder syntax {{}} to prevent premature processing\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoTools.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &parenets=`0`\n    &tpl=`@INLINE <p>{{+id}} - {{+pagetitle}}</p>`\n]]\n```\n\n----------------------------------------\n\nTITLE: Direct 404 Response in NGINX for Core Access\nDESCRIPTION: NGINX configuration to return a direct 404 response for sensitive MODX directories, bypassing PHP processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ ^/(\\.(?!well_known)|_build|_gitify|_backup|core|config.core.php) {\n    return 404;    \n}\n```\n\n----------------------------------------\n\nTITLE: Customized ChurchEvents Calendar Implementation in PHP\nDESCRIPTION: This snippet shows how to display a calendar grid with a custom template for calendar events by specifying the calEventTpl parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/church-events-calendar/churcheventscalendar-snippet.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!ChurchEventsCalendar?\n  &calEventTpl=`MyCustomCalEventTpl`\n]]\n```\n\n----------------------------------------\n\nTITLE: PDOResources with Basic Inline Templating in MODX - PHP\nDESCRIPTION: Similar to the first snippet, this code demonstrates the use of `pdoResources` with simple inline templating, without any output modifiers. It illustrates how to render resource data such as id, pagetitle, and creation date directly from the resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n&tpl=`@INLINE <p>{{+id}}. {{+pagetitle}} {{+createdon}}`\n```\n\n----------------------------------------\n\nTITLE: Displaying latest comments for a user with limit using QuipRss\nDESCRIPTION: This example shows how to get the latest 10 comments for user `mikegeorge`. The `type` is set to `user`, the `user` is set to `mikegeorge` and `limit` is set to `10`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiprss.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\n[[!QuipRss? &type=`user` &user=`mikegeorge` &limit=`10`]]\n\n```\n\n----------------------------------------\n\nTITLE: Cached Camper Placeholder Usage in MODX\nDESCRIPTION: Example of using placeholders in cached cmCampers snippet with proper syntax for retrieving brand information\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/placeholders-you-can-use.md#2025-04-17_snippet_0\n\nLANGUAGE: modx\nCODE:\n```\n[[+brand]]\n```\n\n----------------------------------------\n\nTITLE: Enabling PHP Thumb Cache Source - MODX - Markdown\nDESCRIPTION: This configuration enables caching for the source images processed by PHPThumb, promoting faster access to frequently used images.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_cache_source_enabled](building-sites/settings/phpthumb_cache_source_enabled)\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in MODx JS\nDESCRIPTION: Shows how to check user permissions through the MODx.perm object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nif (MODx.perm.file_upload) { /* ...code... */ }\n```\n\n----------------------------------------\n\nTITLE: jQuery Tabs with pdoTools FastField for Page Titles\nDESCRIPTION: This snippet showcases the use of pdoTools' FastField parser to efficiently retrieve page titles for jQuery tabs.  It utilizes the `#ID.field` syntax to directly access the resource's `pagetitle` field, providing a concise and performant way to dynamically generate tab labels.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\\\"tabs\\\">\n  <ul>\n    <li><a href=\\\"[[~92]]\\\">[[#92.pagetitle]]</a></li>\n    <li><a href=\\\"[[~546]]\\\">[[#546.pagetitle]]</a></li>\n    <li><a href=\\\"[[~123]]\\\">[[#123.pagetitle]]</a></li>\n  </ul>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Update Controller Class Implementation\nDESCRIPTION: Custom controller class for handling resource updates, extending ResourceUpdateManagerController and implementing custom language topics.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-3-controllers.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CopyrightedResourceUpdateManagerController extends ResourceUpdateManagerController {\n    public function getLanguageTopics() {\n        return array('resource','copyrightedresource:default');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modified MODX Context Initialization for Custom Context\nDESCRIPTION: Modified initialization line for the index.php file that tells MODX to use a custom context instead of the default 'web' context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/gateway-plugin.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->initialize('aContextNameOfYourChoice');\n```\n\n----------------------------------------\n\nTITLE: Using MIGX with phpthumbof in MODX\nDESCRIPTION: Example of using MIGX with phpthumbof for image processing, requiring the use of a separate chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.frontend-usage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<ul>\n  [[getImageList?\n    &tvname=`myMIGXtv`\n    &tpl=`thumbTpl`]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving the MODX Parser\nDESCRIPTION: This code snippet demonstrates how to retrieve the MODX parser object using the `getParser()` method of the `modX` class. This parser is responsible for handling MODX tags within content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getparser.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$parser = $modx->getParser();\n```\n\n----------------------------------------\n\nTITLE: Getting Child Resource IDs in MODX using getChildIds Method\nDESCRIPTION: Method definition for retrieving child resource IDs. Takes optional parameters for parent ID, depth limit, and additional options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchildids.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getChildIds ([integer $id = null], [integer $depth = 10], [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Category-Specific PollsPrevious Implementation\nDESCRIPTION: Implementation of PollsPrevious that selects the latest poll from a specific category\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollsprevious.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsLatest? &category=`1`]]\n```\n\n----------------------------------------\n\nTITLE: ContextRouter System Settings Configuration\nDESCRIPTION: Shows the available system settings for the ContextRouter plugin in the MODX system settings area\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/contextrouter/index.md#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ncontextrouter.includeWww = true\ncontextrouter.defaultContext = \"web\"\n```\n\n----------------------------------------\n\nTITLE: Using sekSiteTools.google.analytics Snippet in MODX\nDESCRIPTION: This snippet inserts the Google Analytics tracking code into a MODX website. The required dependency is the Google Analytics account, from which you'll need the account number. The key parameters include 'accountNumber' for the Analytics account, and optionally 'domainName' if handling subdomains. The input is a snippet call with properties, and it implicitly outputs the Analytics JS code on the webpage.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/seksitetools/seksitetools.google.analytics.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[google.analytics? &accountNumber=`U123456`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[google.analytics? &accountNumber=`U123456` &domainName=`domain.com`]]\n```\n\n----------------------------------------\n\nTITLE: Using xPDO::fromJSON Method in PHP\nDESCRIPTION: Method signature for the fromJSON function that converts a JSON source string into a PHP representation. The method takes a JSON string and an optional boolean parameter to determine if the result should be returned as an array (true) or an object (false).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.fromjson.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed fromJSON (string $src, [boolean $asArray = true])\n```\n\n----------------------------------------\n\nTITLE: Accessing Field Aliases in PHP\nDESCRIPTION: This PHP snippet demonstrates accessing a field alias in xPDO. It retrieves an `sfStore` object and accesses the `postalcode` field, which is an alias for `zip`, to output the store's postal code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->addPackage('storefinder', MODX_CORE_PATH . 'components/storefinder/model/');\n$output = '';\n$store = $modx->getObject('sfStore', array('name' => 'My Store'));\nif ($store) {\n    $output = \"Postal code is {$store->get('postalcode')}\";\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Использование определенных разделов кэша в xPDO\nDESCRIPTION: Этот сниппет показывает, как использовать определенные разделы кеша, передавая конфигурацию в методы `xPDOCacheManager`.  В конфигурации указывается `xPDO::OPT_CACHE_KEY` и `xPDO::OPT_CACHE_HANDLER` для выбора конкретного раздела и обработчика кэша.  В данном примере используется `xPDOAPCCache`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/caching/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$cacheOptions = array(\n    xPDO::OPT_CACHE_KEY => 'myCache',\n    xPDO::OPT_CACHE_HANDLER => 'cache.xPDOAPCCache',\n);\n\n$xpdo->cacheManager->set('testdata', 'Мои кэшированные данные.', 0, $cacheOptions);\n\necho $xpdo->cacheManager->get('testdata', $cacheOptions);\n// outputs: Мои кэшированные данные.\n\n$xpdo->cacheManager->delete('testdata', $cacheOptions);\n```\n\n----------------------------------------\n\nTITLE: Setting Controller Path in MODX\nDESCRIPTION: This code snippet demonstrates how to define the controller path for a custom resource in MODX. It uses the `$modx->getOption()` method to retrieve the path, defaulting to the 'core_path' if not explicitly set. The path is used by MODX to locate the controller files for the custom resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/step-3-controllers.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn $modx->getOption('copyrightedresource.core_path',null,$modx->getOption('core_path').'components/copyrightedresource/').'controllers/';\n```\n\n----------------------------------------\n\nTITLE: Accessing Package Data in OnPackageRemove Event (PHP)\nDESCRIPTION: This snippet demonstrates how to access the name of the removed package using the $package variable provided in the OnPackageRemove event. It's important to note that while the package data is available, it has already been removed from the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onpackageremove.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$package->get('package_name')\n```\n\n----------------------------------------\n\nTITLE: Configuring the PHP Class with class_key and Context Menu\nDESCRIPTION: This snippet shows how to configure the PHP class for the custom resource.  It sets the `class_key` to \"CopyrightedResource\" and enables the resource to be shown in the context menu. The `class_key` is crucial for MODX to identify the resource type and ensures it's available in the resource tree.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CopyrightedResource extends modResource {\n   public $showInContextMenu = true;\n   function __construct(xPDO & $xpdo) {\n       parent :: __construct($xpdo);\n       $this->set('class_key','CopyrightedResource');\n   }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Camper Details with cmCamperDetails\nDESCRIPTION: A snippet for rendering detailed information about a specific camper vehicle, using a 'cid' GET parameter to identify and retrieve the specific camper's details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end.md#2025-04-17_snippet_1\n\nLANGUAGE: MODX\nCODE:\n```\n[[cmCamperDetails]]\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener Method Signature in PHP\nDESCRIPTION: Method signature for addEventListener showing required and optional parameters. Takes an event name, plugin ID, and optional property set name as parameters. Returns boolean.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.addeventlistener.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean addEventListener (string $event, integer $pluginId, [string $propertySetName = ''])\n```\n\n----------------------------------------\n\nTITLE: Default Number Formatting Examples with prettyNumbers\nDESCRIPTION: A comprehensive list of examples showing how different number sizes are formatted by the prettyNumbers filter using the default settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.prettynumbers.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n5 => 5\n515 => 515\n5141 => 5.1k\n5151 => 5.2k\n51415 => 51k\n51515 => 52k\n515151 => 515k\n5151515 => 5.2m\n51515151 => 52m\n515151515 => 515m\n5151515151 => 5.2b\n51515151515 => 52b\n515151515151 => 515b\n5151515151515 => 5,152b\n51515151515151 => 51,515b\n515151515151515 => 515,152b\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Limit in pdoPage Query - PHP\nDESCRIPTION: This snippet specifies a maximum limit of results per page using the pdoPage snippet in MODX. It ensures that even if the user does not set a limit, no more than 10 results are returned.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &tpl=`@INLINE <p>[[+idx]] <a href=\"/[[+uri]]\">[[+pagetitle]]</a></p>`\n    &parents=`0`\n    &pageLimit=`7`\n    &cache=`1`\n    &cacheTime=`1800`\n    &maxLimit=`10`\n]]\n[[!+page.nav]]\n```\n\n----------------------------------------\n\nTITLE: Select Field with Custom Snippet\nDESCRIPTION: This snippet illustrates how to use a custom snippet to populate options in a select field, allowing for dynamic categories selection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`select`\n    &name=`category`\n    &req=`1`\n    &multiple=`1`\n    &title=`Choose some categories`\n    &array=`1`\n    &options_element=`mySnippetToListTopics`\n    &options_element_class=`modSnippet`\n    &options_element_properties=`{\"tpl\":\"fieldOptionTopic\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Namespaced Actions in MODx JS\nDESCRIPTION: Shows how to access non-core actions with namespace prefixes in MODX 2.2+.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar actionId = MODx.action['mycomponent:controllers/index'];\n```\n\n----------------------------------------\n\nTITLE: Getting Record Count in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->getRecordCount($ds)` for getting the record count. Use modX->getCount($className, $criteria= null) instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n\"modX->getCount($className, $criteria= null)\"\n```\n\n----------------------------------------\n\nTITLE: Defining toJSON Method in PHP for xPDOObject\nDESCRIPTION: The toJSON method signature for the xPDOObject class. It takes optional parameters for key prefix and raw values, and returns a JSON string representation of the object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/tojson.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nstring toJSON (\n   [string $keyPrefix = ''],\n   [boolean $rawValues = false]\n)\n```\n\n----------------------------------------\n\nTITLE: Handling OnDocUnPublished Event in MODX Plugin (PHP)\nDESCRIPTION: This plugin example demonstrates how to handle the OnDocUnPublished event in MODX. It creates a response showing a success message to be displayed on screen, and logs the unpublished resource's data to the error log. The plugin exits after sending the JSON response.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocunpublished.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocUnPublished':\n        $response = array(\n        \t'success' => false,\n        \t'message' => 'Resource removed from publication!',\n        \t'data' => array(),\n        );\n        echo $modx->toJSON($response);\n        exit; \n        $modx->log(modX::LOG_LEVEL_ERROR, print_r($resource->toArray(),true));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Snippet Call with a Parameter in MODX\nDESCRIPTION: This code shows a snippet call in MODX with a 'debug' parameter set to '1'. This parameter can be accessed within the Quip snippet for debugging purposes. The parser passes the parameter to the element, where it is interpreted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/properties-and-property-sets.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Quip? &debug=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Using numberformat Output Filter\nDESCRIPTION: Example of implementing the numberformat output filter to format price values with specific decimal and thousand separators.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[[+price:numberformat=`&decimals=2&dec_point=,&thousands_sep=.`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Package Attributes for MODX Transport Package\nDESCRIPTION: This code adds package attributes including license, readme, changelog, and setup options to a MODX transport package. It reads the content from external files and adds them to the package builder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'Adding package attributes and setup options...');\n$builder->setPackageAttributes(array(\n    'license' => file_get_contents($sources['docs'] . 'license.txt'),\n    'readme' => file_get_contents($sources['docs'] . 'readme.txt'),\n    'changelog' => file_get_contents($sources['docs'] . 'changelog.txt'),\n    'setup-options' => array(\n        'source' => $sources['build'].'setup.options.php',\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Path Static Resource Include\nDESCRIPTION: Example showing how to use MODX system settings within the file parameter for dynamic path resolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/static-resources-and-elements.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[include? &file=`[[++assets_path]]/js/myscript.js`]]\n```\n\n----------------------------------------\n\nTITLE: Using Output Filters with Resource Fields in MODX\nDESCRIPTION: Example demonstrating how to apply output filters to Resource fields. This snippet strips HTML tags from the introtext field and limits it to 400 characters with an ellipsis.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/templates.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"rightbar\">\n[[*introtext:stripTags:ellipsis=`400`]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Error Display in MODX PHP Files\nDESCRIPTION: Code snippet to enable full error reporting and display in MODX index.php files for development purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/package-build.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nini_set('display_errors', 1);\nini_set('error_reporting', -1);\n```\n\n----------------------------------------\n\nTITLE: Numeric Operations in MODX\nDESCRIPTION: Examples of numeric modifications using add/increment and subtract/decrement modifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_10\n\nLANGUAGE: modx\nCODE:\n```\n[[+downloads:incr]]\n[[+countdown:decr]]\n[[+moneys:subtract=`100`]]\n```\n\n----------------------------------------\n\nTITLE: StoreFinder Complete Schema with Relationships\nDESCRIPTION: Complete XML schema for a StoreFinder application showing multiple object definitions with fields, indexes, and relationships between stores and owners.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/relationships.md#2025-04-17_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<model package=\"storefinder\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\" phpdoc-package=\"storefinder\" phpdoc-subpackage=\"model\" version=\"1.1\">\n  <object class=\"sfStore\" table=\"sfinder_stores\" extends=\"xPDOSimpleObject\">\n    <field key=\"name\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" />\n    <field key=\"address\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n    <field key=\"city\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n    <field key=\"state\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n    <field key=\"zip\" dbtype=\"varchar\" precision=\"10\" phptype=\"string\" null=\"false\" default=\"0\" />\n    <field key=\"country\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n    <field key=\"phone\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n    <field key=\"fax\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"false\" default=\"\" />\n    <field key=\"active\" dbtype=\"int\" precision=\"1\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" />\n\n    <alias key=\"postalcode\" field=\"zip\" />\n\n    <index alias=\"name\" name=\"name\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n        <column key=\"name\" length=\"\" collation=\"A\" null=\"false\" />\n    </index>\n    <index alias=\"zip\" name=\"zip\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n        <column key=\"zip\" length=\"\" collation=\"A\" null=\"false\" />\n    </index>\n  </object>\n  \n  <object class=\"sfOwner\" table=\"sfinder_owners\" extends=\"xPDOSimpleObject\">\n    <field key=\"name\" dbtype=\"varchar\" precision=\"100\" phptype=\"string\" null=\"false\" default=\"\" index=\"index\" />\n    <field key=\"email\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"false\" default=\"\" />\n\n    <index alias=\"name\" name=\"name\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n        <column key=\"name\" length=\"\" collation=\"A\" null=\"false\" />\n    </index>\n  </object>\n  \n  <object class=\"sfStoreOwner\" table=\"sfinder_store_owners\" extends=\"xPDOSimpleObject\">\n    <field key=\"store\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" index=\"index\" />\n    <field key=\"owner\" dbtype=\"int\" precision=\"10\" attributes=\"unsigned\" phptype=\"integer\" null=\"false\" default=\"0\" index=\"index\" />\n\n    <index alias=\"store\" name=\"store\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n        <column key=\"store\" length=\"\" collation=\"A\" null=\"false\" />\n    </index>\n    <index alias=\"owner\" name=\"owner\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n        <column key=\"owner\" length=\"\" collation=\"A\" null=\"false\" />\n    </index>\n  </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Theme Changes\nDESCRIPTION: Gitify commands to install all packages and build changes after pulling updates, ensuring everything functions correctly in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify_in_action.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngitify package:install --all\ngitify build\n```\n\n----------------------------------------\n\nTITLE: Analyzing Controller Placeholders in Discuss\nDESCRIPTION: Describes common placeholders available across different Discuss controllers, providing dynamic user and system information\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Placeholder       | Description                                                                                                                                                                                                                                                                                                                                                                               |\n| ----------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| actionbuttons     | Buttons generated from the chunks/disactionbutton.chunk.tpl chunk, wrapped in the chunks/disactionbuttons.chunk.tpl chunk. Actions are controller specific and can include login, logout, reply, subscribe, etc. All action buttons are assigned a class of dis-action-action\\_name where action\\_name is the name of the action; this can be used to style specific buttons differently. |\n| discuss.user.*   | Call uncached. If logged in, the discuss.user.field\\_name placeholder will contain information about the currently logged in user. Available fields:                                                                                                                                                                                                                                      |\n|                   | - id                                                                                                                                                                                                                                                                                                                                                                                      |\n|                   | - username                                                                                                                                                                                                                                                                                                                                                                                |\n|                   | - fullname                                                                                                                                                                                                                                                                                                                                                                                |\n|                   | - name\\_first                                                                                                                                                                                                                                                                                                                                                                             |\n|                   | - name\\_last                                                                                                                                                                                                                                                                                                                                                                              |\n|                   | - email                                                                                                                                                                                                                                                                                                                                                                                   |\n|                   | - posts                                                                                                                                                                                                                                                                                                                                                                                   |\n|                   | - posts\\_formatted                                                                                                                                                                                                                                                                                                                                                                        |\n|                   | - avatar\\_url                                                                                                                                                                                                                                                                                                                                                                             |\n|                   | - isModerator (1 or 0)                                                                                                                                                                                                                                                                                                                                                                    |\n|                   | - ... and much more TBA                                                                                                                                                                                                                                                                                                                                                                   |\n| discuss\\_version  | The current version of Discuss installed.                                                                                                                                                                                                                                                                                                                                                 |\n| discuss.pagetitle | Call uncached. Contains the title of the current controller.                                                                                                                                                                                                                                                                                                                              |\n```\n\n----------------------------------------\n\nTITLE: Get Cache Manager in MODX\nDESCRIPTION: Retrieves the Cache Manager instance to set a dummy cache file. It shows how to obtain the cache manager and then use it to store data in the cache.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getcachemanager.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$cacheManager = $modx->getCacheManager();\n$cacheManager->set('testcachefile','test123');\n```\n\n----------------------------------------\n\nTITLE: PDO Connection Test Script in PHP\nDESCRIPTION: This PHP script attempts to establish a database connection using PDO. It specifies the DSN, username, and password for the database connection. The script includes a try-catch block to handle potential PDOException errors during the connection attempt, printing an error message if the connection fails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* Connect to an ODBC database using driver invocation */\n$dsn = 'mysql:dbname=testdb;host=localhost';\n$user = 'dbuser';\n$password = 'dbpass';\n\ntry {\n  $dbh = new PDO($dsn, $user, $password);\n} catch (PDOException $e) {\n  echo 'Connection failed: ' . $e->getMessage();\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Checking Out Git Branch in Bash\nDESCRIPTION: Command to checkout the appropriate Git branch for Discuss development. Replace '<branch>' with the desired branch name, typically 'develop' or a specific theme or release branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation/installation-from-git.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <branch>\n```\n\n----------------------------------------\n\nTITLE: Redirecting WWW to Non-WWW URLs in Apache .htaccess\nDESCRIPTION: Apache rewrite configuration to redirect www.domain.com to domain.com using mod_rewrite rules. Helps maintain consistent URL structure and prevent potential session issues.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/friendly-urls.md#2025-04-17_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\n# Rewrite www.domain.com -> domain.com -- used with SEO Strict URLs plugin\n#RewriteCond %{HTTP_HOST} .\n#RewriteCond %{HTTP_HOST} !^example-domain-please-change\\.com [NC]\n#RewriteRule (.*) http://example-domain-please-change.com/$1 [R=301,L]\n```\n\nLANGUAGE: apache\nCODE:\n```\n# Rewrite www.domain.com -> domain.com -- used with SEO Strict URLs plugin\nRewriteCond %{HTTP_HOST} .\nRewriteCond %{HTTP_HOST} !^tusitio\\.com [NC]\nRewriteRule (.*) http://tusitio.com/$1 [R=301,L]\n```\n\n----------------------------------------\n\nTITLE: Advanced Email Configuration with Multiple Headers\nDESCRIPTION: Comprehensive example showing how to configure various email headers like sender, from, bounce, receipt, and reply-to addresses.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modswiftmailer/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modx->mail->address('sender', 'sender@domain.tld');\n$modx->mail->address('from', 'from@domain.tld', 'Graphical sender');\n$modx->mail->bounce('bounce@domain.tld');\n$modx->mail->receipt('receipt@domain.tld');\n$modx->mail->replyto('no-reply@domain.tld');\n\n$modx->mail->subject('A subject');\n$modx->mail->body('Some content');\n\n$modx->mail->send();\n```\n\n----------------------------------------\n\nTITLE: Textbox Filter for Searching in Resources - JSON Setup\nDESCRIPTION: This JSON snippet provides the configuration for a textbox filter that allows users to search through the `pagetitle`, `longtitle`, and `content` fields of the child resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/manage-child-resources-in-a-grid-tv-with-help-of-migxdb.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"pagetitle:LIKE\":\"%[[+search]]%\",\"OR:longtitle:LIKE\":\"%[[+search]]%\",\"OR:content:LIKE\":\"%[[+search]]%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Object Fields with set() and vType in xPDO (PHP)\nDESCRIPTION: This snippet shows how to use the `$vType` parameter in the `set()` method to specify the data type of the value being set.  It also demonstrates using a custom function to set the value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/* Set date as an unix timestamp integer rather than a string date */\n$myBox->set('birthday',432432543,'integer');\n\n/* Set dimension of box based on width and height via custom function */\nfunction setDim($k,$v,&$obj) {\n   $w = $obj->get('width');\n   $h = $obj->get('height');\n   $dim = $w * $h;\n   $obj->set($k,$dim);\n}\n$myBox->set('dimension','','setDim');\n```\n\n----------------------------------------\n\nTITLE: Using PrepareSnippet with TicketComments\nDESCRIPTION: Example of using prepareSnippet parameter with TicketComments snippet\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoTools.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!TicketComments?\n    &prepareSnippet=`prepareComments`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining cache_lexicon_topics System Setting in MODX\nDESCRIPTION: This snippet defines the 'cache_lexicon_topics' system setting in MODX. It specifies the setting's name, type, default value, and provides a detailed explanation of its purpose and impact on system performance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/cache_lexicon_topics.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## cache\\_lexicon\\_topics\n\n**Name**: Cache Lexicon Topics\n**Type**: Yes/No\n**Default**: Yes\n\nWhen enabled, all Lexicon Topics will be cached so as to greatly reduce load times for Internationalization functionality. MODX strongly recommends leaving this set to Yes, as setting it to No will greatly slow down your manager load times.\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'if' and 'input' in MODX\nDESCRIPTION: Demonstrates the 'if' modifier to add an additional condition along with 'input' modifier. It outputs \"Да\" if the resource ID is 1 and not equal to 2, otherwise it outputs \"Нет\".\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[*id:is=`1`:and:if=`[[*id]]`:ne=`2`:then=`Да`:else=`Нет`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Blog Post Comments Implementation\nDESCRIPTION: Simple implementation for non-threaded comments on a blog post using the resource ID in the thread name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[Quip? &thread=`blogpost[[*id]]` &threading=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Override Settings Configuration in Fred CMS\nDESCRIPTION: Modified version of the option set that removes the scroll link and changes the link type from text to page selector, demonstrating how to override existing settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/override.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"settings\": [\n        {\n            \"name\": \"image\",\n            \"label\": \"Background Image\",\n            \"type\": \"image\",\n            \"value\": \"assets/themes/starter/img/Fred-hero.jpg\"\n        },\n        {\n            \"fred-import\": \"background_settings\"\n        },\n        {\n            \"name\": \"link\",\n            \"label\": \"Link\",\n            \"type\": \"page\",\n            \"value\": {\n                \"id\": 1,\n                \"url\": \"[[~1]]\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Related Pages Snippet in MODX Template\nDESCRIPTION: This snippet call fetches related pages based on the IDs stored in the 'relatedPages' template variable and uses the 'relatedPagesTpl' chunk for formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[relatedPages? &input=`[[*relatedPages]]` &tpl=`relatedPagesTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Protecting Manager Access in Apache .htaccess\nDESCRIPTION: Apache rewrite rules to block manager access on specified domains, returning a 404 error.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_6\n\nLANGUAGE: apache\nCODE:\n```\nRewriteCond %{HTTP_HOST} ^(www\\.)?example\\.com$ [OR]\nRewriteCond %{HTTP_HOST} ^promos\\example\\.com$ [OR]\nRewriteCond %{HTTP_HOST} ^blog\\.example\\.com$ [NC]\nRewriteRule ^manager/ /index.php?q=doesnotexist [L,R=404]\n```\n\n----------------------------------------\n\nTITLE: Multi-Category PollsLatest Query in PHP\nDESCRIPTION: Example demonstrating how to display polls from multiple categories using comma-separated category IDs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollslatest.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsLatest? &category=`1,3,5`]]\n```\n\n----------------------------------------\n\nTITLE: Advanced Loginza Snippet Usage with Custom Parameters in MODX Revolution\nDESCRIPTION: This snippet call shows how to use Loginza with custom parameters. It registers the user to the 'Users' group, disables profile updates on subsequent logins, and enables the 'remember me' functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/loginza/loginza.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Loginza?\n  &groups=`Users`\n  &updateProfile=`0`\n  &rememberme=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Executing Processor Method Definition in PHP\nDESCRIPTION: Method signature for executeProcessor that takes an options array as parameter. The method is deprecated as of MODX 2.1 and replaced by runProcessor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.executeprocessor.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed executeProcessor (array $options)\n```\n\n----------------------------------------\n\nTITLE: HTML Input for LexRating Group Name in MODX Quip Template\nDESCRIPTION: Shows how to include hidden input fields for LexRating group and object names in a Quip comment form template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lexrating/index.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- replace lexrating_groupName's value with what you have as the &group -->\n<input type=\"hidden\" name=\"lexrating_groupName\" value=\"Overall Rating\" />\n\n<!-- but leave this one untouched because the &name is using the same placeholder [[+thread]] anyway -->\n<input type=\"hidden\" name=\"lexrating_objectName\" value=\"[[+thread]]\" />\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Value Binding\nDESCRIPTION: Example of binding content from one element to another location within the same element.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div data-fred-name=\"name\" data-fred-render=\"false\">John Doe</div>\n<div class=\"modal\">\n    <div class=\"modal-header\" data-fred-bind=\"name\"></div>\n    <div class=\"modal-content\">Hello there</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic orCondition Method Syntax\nDESCRIPTION: Shows the basic method signature for adding OR conditions to a query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.orcondition.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid orCondition ( $conditions, [ $binding = null], [ $group = 0])\n```\n\n----------------------------------------\n\nTITLE: Escaping Strings for Database Queries in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->escape($s)` for escaping strings. Uses the `$modx->quote()` method to properly escape strings for safe inclusion in database queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n\"modX->quote()\"\n```\n\n----------------------------------------\n\nTITLE: Logging User Logout Information in MODX with OnBeforeWebLogout Event (PHP)\nDESCRIPTION: This plugin logs the ID of the user logging out and the context(s) they're logging out from. It uses the OnBeforeWebLogout event to capture this information before the logout occurs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforeweblogout.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeWebLogout':\n        $u = $user->get('id');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'User with id '.$u.' logged out in context '.$loginContext.' and also in these'.print_r($addContexts));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Rampart Spam Prevention with MODX Register Forms in PHP\nDESCRIPTION: This PHP snippet demonstrates how to add the preHook.RampartRegister to a MODX Register form to enable spam prevention. It specifies various properties such as moderatedResourceId, submittedResourceId, and others to control the registration flow and spam filtering. Dependencies include the Rampart component and MODX setup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rampart/rampart.prehook.rampartregister.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Register?\n    &preHooks=`math,preHook.RampartRegister`\n    &moderatedResourceId=`217`\n    &submittedResourceId=`194`\n    &activationResourceId=`193`\n    &submitVar=`login-register-btn`\n]]\n```\n\n----------------------------------------\n\nTITLE: Executing users.gallery.manage Snippet in MODX\nDESCRIPTION: This snippet displays the gallery options for logged-in users with appropriate permissions. It can be customized with different templates and supports loading jQuery and custom CSS settings. Usage includes invoking the snippet directly in the template. The expected input is soon-to-be-rendered placeholders in MODX, and the output is the gallery management interface for the user.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.users.gallery.manage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!users.gallery.manage]]\n```\n\n----------------------------------------\n\nTITLE: Format of Data Returned from SELECT Bindings in MODX\nDESCRIPTION: Demonstrates the string format that MODX uses when converting recordset data from SELECT bindings into a format usable by input controls like radio buttons or select lists.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncol1row1Value==col2row1Value||col1row2Value==col2row2Value,...\n```\n\n----------------------------------------\n\nTITLE: Configuring .htaccess for Friendly URLs in MODX\nDESCRIPTION: This snippet configures the .htaccess file to enable friendly URLs in MODX. It includes rules to rewrite URLs to the index.php file, prevent access to hidden directories, and handle www to non-www URL conversion. The RewriteBase directive is crucial for specifying the MODX installation directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/friendly-urls.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"# MODX supports Friendly URLs via this .htaccess file. You must serve web\n# pages via Apache with mod_rewrite to use this functionality, and you must\n# change the file name from ht.access to .htaccess.\n#\n# Make sure RewriteBase points to the directory where you installed MODX.\n# E.g., \\\"/modx\\\" if your installation is in a \\\"modx\\\" subdirectory.\n#\n# You may choose to make your URLs non-case-sensitive by adding a NC directive\n# to your rule: RewriteRule ^(.*)$ index.php?q=$1 [L,QSA,NC]\n\nRewriteEngine On\nRewriteBase /\n\n\n# Prevent rewrite the .well-known directory used by LetsEncrypt by rules below of this rule\nRewriteRule \\\"^\\.well-known/\\\" - [L]\n\n\n# Prevent dot directories (hidden directories like .git) to be exposed to the public\n# Except for the .well-known directory used by LetsEncrypt a.o\nRewriteRule \\\"/\\.|^\\.(?!well-known/)\\\" - [F]\n\n\n# Rewrite www.example.com -> example.com -- used with SEO Strict URLs plugin\n#RewriteCond %{HTTP_HOST} .\n#RewriteCond %{HTTP_HOST} ^www.(.*)$ [NC]\n#RewriteRule ^(.*)$ https://%1/$1 [R=301,L]\n#\n# or for the opposite example.com -> www.example.com use the following\n# DO NOT USE BOTH\n#\n#RewriteCond %{HTTP_HOST} !^$\n#RewriteCond %{HTTP_HOST} !^www\\. [NC]\n#RewriteCond %{HTTP_HOST} (.+)$\n#RewriteRule ^(.*)$ https://www.%1/$1 [R=301,L] .\n\n\n# Force rewrite to https for every host\n#RewriteCond %{HTTPS} !=on [OR]\n#RewriteCond %{SERVER_PORT} !^443\n#RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n\n\n# Redirect the manager to a specific domain - don't rename the ht.access file\n# in the manager folder to use this this rule\n#RewriteCond %{HTTP_HOST} !^example\\.com$ [NC]\n#RewriteCond %{REQUEST_URI} ^/manager [NC]\n#RewriteRule ^(.*)$ https://example.com/$1 [R=301,L]\n\n\n# The Friendly URLs part\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php?q=$1 [L,QSA]\n\n\n# For servers that support output compression, you should pick up a bit of\n# speed by un-commenting the following lines.\n\n#php_flag zlib.output_compression On\n#php_value zlib.output_compression_level 5\"\n```\n\n----------------------------------------\n\nTITLE: Default User Information Access in MODX\nDESCRIPTION: Examples of accessing basic user information without using the userinfo modifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n[[!+modx.user.id]] - Prints the ID\n[[!+modx.user.username]] - Prints the username\n```\n\n----------------------------------------\n\nTITLE: Initializing xPDO with Custom Loader Class\nDESCRIPTION: Example showing how to specify custom loader classes when instantiating an xPDO instance prior to version 2.0.0-pl. This allows extending or overriding default object loader behavior.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-object-loaders.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo = new xPDO($dsn, $username, $password, array(\n    xPDO::OPT_LOADER_CLASSES => array('myCustomLoaderClass')\n));\n```\n\n----------------------------------------\n\nTITLE: Non-Editable Fred Element with Target\nDESCRIPTION: Example of a non-editable element that targets a specific description field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p\n    data-fred-name=\"description\"\n    data-fred-editable=\"false\"\n    data-fred-target=\"description\"\n>\n    The value from the description field goes here\n</p>\n```\n\n----------------------------------------\n\nTITLE: Direct 404 for Manager Access in NGINX\nDESCRIPTION: NGINX configuration to return a direct 404 response for unauthorized manager access attempts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nset $mgrcheck $host$request_uri;\n\nif ($mgrcheck ~* \"((?<!cms.)example\\.com/manager)\") {\n    return 404;    \n}\n```\n\n----------------------------------------\n\nTITLE: ModSecurity Whitelist Rule Example\nDESCRIPTION: This is the standard format for whitelisting a ModSecurity rule by its ID. It is added to the virtual host or in a dedicated file included from the virtual host configuration.  This configuration will remove the specified rule if the request URI matches `/path/to/URI`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n<LocationMatch \"/path/to/URI\">\n  <IfModule mod_security2.c>\n    SecRuleRemoveById (Rule number)\n    SecRuleRemoveById (Rule number, if more for this domain)\n    SecRuleRemoveById (etc)\n    SecRuleRemoveById (etc)\n  </IfModule>\n</LocationMatch>\n```\n\n----------------------------------------\n\nTITLE: xPDOQuery rightJoin Method Syntax\nDESCRIPTION: Method signature for performing a RIGHT JOIN operation in xPDOQuery. Takes parameters for class name, alias, conditions, conjunction type, binding, and condition group.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.rightjoin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid rightJoin ( $class, [ $alias = ''], [ $conditions = array ()], [ $conjunction = xPDOQuery::SQL_AND], [ $binding = null], [ $condGroup = 0])\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Cached Value Using xPDOCacheManager.get Method in PHP\nDESCRIPTION: The basic syntax for retrieving a value from cache using the xPDOCacheManager.get method. The method accepts a key parameter and an optional array of options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.get.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed get (string $key, [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Dual AdvSearchForm Implementation in PHP\nDESCRIPTION: Example showing two search forms with different configurations - one without help link and another without clearDefault feature.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch.advsearchform/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[AdvSearchForm? &help=`0`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[AdvSearchForm? &asId=`as1` &clearDefault=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Handling Request Method Declaration in MODX PHP\nDESCRIPTION: Core method declaration from modManagerRequest class that triggers the OnHandleRequest event at the start of request handling. This method is responsible for initiating request processing in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onhandlerequest.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function handleRequest()\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Thumb Cache Maximum Age - MODX - Markdown\nDESCRIPTION: This setting specifies the maximum age for the PHPThumb cache, allowing control over caching behavior and performance optimization.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_cache_maxage](building-sites/settings/phpthumb_cache_maxage)\n```\n\n----------------------------------------\n\nTITLE: Enabling Rampart Spam Prevention in Quip\nDESCRIPTION: This snippet demonstrates how to integrate the Rampart spam prevention hook into a Quip call. By adding `hook.RampartQuip` as a preHook, the email provided in the Quip form will be checked against known spammers in the system, enhancing comment submission security against spam attacks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rampart/rampart.hook.rampartquip.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Quip?\n    &preHook=`hook.RampartQuip`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining Selectbox Options for ClientConfig\nDESCRIPTION: This code snippet shows the format for defining options in a Selectbox field type. Each option consists of a text label and value pair, separated by == and with multiple options separated by ||.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/clientconfig/index.md#2025-04-17_snippet_2\n\nLANGUAGE: modx\nCODE:\n```\nText==value||Text2==value\n```\n\n----------------------------------------\n\nTITLE: Fetching Resource Method in MODX\nDESCRIPTION: The `modRequest\\->getResourceMethod()` function in MODX is used to determine the method used for processing a given resource, aiding in the appropriate handling of resource requests.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getDocumentMethod()\n```\n\n----------------------------------------\n\nTITLE: Cloning modExtra via Git in PHP\nDESCRIPTION: This snippet demonstrates the cloning of the modExtra repository from GitHub using PHP's command execution. The clone is either placed in the current directory or specified in a new path. Dependencies include a Git installation and network access to GitHub. This command prepares the local machine with the modExtra template for further MODX development.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modextra/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngit clone http://github.com/splittingred/modExtra.git ./\n```\n\nLANGUAGE: php\nCODE:\n```\ngit clone http://github.com/splittingred/modExtra.git /path/to/my/downloads/modExtra\n```\n\n----------------------------------------\n\nTITLE: Albums with Random Cover Image\nDESCRIPTION: Retrieves 3 recent albums with randomly selected cover images. Demonstrates the albumCoverSort parameter for dynamic image selection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryAlbums?\n    &limit=`3`\n    &albumCoverSort=`random`\n]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving POST Variable with fastField in MODX\nDESCRIPTION: Demonstrates how to use fastField to access a POST variable. Note the use of the uncached tag for dynamic content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!#post.myVar]]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Threaded Comments Reply Page\nDESCRIPTION: Snippet calls needed on a dedicated reply page for threaded comments functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<h2>Reply to Thread</h2>\n[[!Quip]]\n<br />\n[[!QuipReply]]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Core Path for MODX CLI Installation\nDESCRIPTION: Command line option for specifying a non-standard core folder location during MODX installation via CLI. This parameter should be used when your core folder is located outside the default location.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/cli.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--core_path=/path/to/core/\n```\n\n----------------------------------------\n\nTITLE: Restarting Apache Server\nDESCRIPTION: Command to restart the Apache web server after configuration changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/etc/init.d/httpd restart\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for MODX Development\nDESCRIPTION: Creates a new feature branch named 'bug-1111' for working on a specific issue. This is the recommended way to organize work when contributing to MODX repositories.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/git-github/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngit checkout -b bug-1111\n```\n\n----------------------------------------\n\nTITLE: Checking Out the Development Branch\nDESCRIPTION: Command to switch to the current development branch (2.7.x in this example).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 2.7.x\n```\n\n----------------------------------------\n\nTITLE: shorten Output Filter\nDESCRIPTION: An output filter that shortens text to a specified length without truncating words, adding an ellipsis when truncated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$output = '';\n$options = !empty($options)?$options:50;\nif (!empty($input) && !empty($options)) {\n  if (strlen($input) > $options) {\n    $output = substr($input, 0, strrpos(substr($input, 0, $options), ' ')).' …';\n  }\n  else{\n    $output = $input;\n  }\n}\nreturn $output;\n?>\n```\n\n----------------------------------------\n\nTITLE: Correct Configuration for MODX modAction Object\nDESCRIPTION: The correct configuration for a MODX modAction object when using the new abstract classes. The controller value should just be 'index' without the preceding 'controllers/' path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$action= $modx->newObject('modAction');\n$action->fromArray(array(\n    'id' => 1,\n    'namespace' => 'doodles',\n    'parent' => 0,\n    'controller' => 'index',\n    'haslayout' => true,\n    'lang_topics' => 'doodles:default',\n    'assets' => '',\n),'',true,true);\n```\n\n----------------------------------------\n\nTITLE: Basic Image Resizing with phpThumbOf in MODX\nDESCRIPTION: This snippet resizes an image to 960x300 pixels by using the phpThumbOf output filter. It takes an image from a Template Variable called 'big_image' and applies width and height parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Error Messages in FormIt Hooks (PHP)\nDESCRIPTION: Demonstrates how to add an error message to a specific field in a FormIt hook and return the error status.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$hook->addError('user','User not found.');\nreturn $hook->hasErrors();\n```\n\n----------------------------------------\n\nTITLE: Adding a Logout Link to MODX Pages\nDESCRIPTION: This HTML snippet demonstrates how to add a logout link to MODX pages, using the same logic as the WebLink but embedded in an anchor tag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~1? &service=`logout`]]\" title=\"Logout\">Logout</a>\n```\n\n----------------------------------------\n\nTITLE: Default tagTpl Chunk for GalleryItem\nDESCRIPTION: This is the default chunk used by GalleryItem to render each tag associated with an item. It creates a link to the current page with the tag as a query parameter, allowing filtering of items by tag. The placeholders allow for dynamic generation of the link and tag text.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem/tagtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<span class=\\\"gal-item-tag\\\"><a href=\\\"[[~[[*id]]]]?[[+tagRequestVar]]=[[+tag]]\\\">[[+tag]]</a></span>\"\n```\n\n----------------------------------------\n\nTITLE: Logging Deleted Resource and Child Resource IDs\nDESCRIPTION: A PHP plugin that logs the details of a resource being deleted, including its title and the IDs of any child resources that will also be removed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onbeforedocformdelete.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeDocFormDelete':\n        if (count($childrenIds) > 0) {\n            $children = $childrenIds;\n        }\n        $modx->log(modX::LOG_LEVEL_ERROR, 'Был удален ресурс '.$resource->get('pagetitle').print_r($children));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AdvSearch Snippet in MODX\nDESCRIPTION: The code snippet demonstrates how to use the AdvSearch snippet within a MODX Resource to display search results based on specified criteria. This snippet does not have dependencies but requires understanding of the specified properties for customization. Key parameters include 'contexts', 'fields', 'sortby', and 'engine'. No inputs are directly needed, but search queries should be configured via the available properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!AdvSearch]]\n```\n\n----------------------------------------\n\nTITLE: Overriding forward_merge_excludes with sendForward in MODX\nDESCRIPTION: This example demonstrates how to override the default 'forward_merge_excludes' setting when calling the sendForward() method in MODX. The code enables the field gluing mechanism and specifies a custom list of fields to exclude from the merge operation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/forward_merge_excludes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$options = array(\n\t'merge' => 1, // field gluing mechanism enabled\n\t// original fields list that need to be excluded from the result\n\t'forward_merge_excludes' => 'id,template,type,published,class_key'\n);\n$modx->sendForward(15, $options);\n```\n\n----------------------------------------\n\nTITLE: Creating Ext JS Grid with Paging (HTML)\nDESCRIPTION: This HTML page creates an Ext JS grid with paging functionality. It includes links to Ext JS CSS and JavaScript files, and defines the grid configuration within a JavaScript block. The grid fetches data from 'store.php' and displays it in a tabular format with sortable columns and a paging toolbar.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/7.-ext-js-tutoral-advanced-grid.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<html>\n    <title>Сетка Ext JS с постраничным разбиением</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n\nExt.onReady(function(){\n\n    // Создать хранилище данных\n    var store = new Ext.data.JsonStore({\n        root: 'results',\n        totalProperty: 'total',\n        idProperty: 'id',\n        remoteSort: true,\n\n        // Определить поля, которые мы хотим показать\n        fields: [\n            'pagetitle',\n            'alias',\n            {name: 'createdby', type: 'int'}\n        ],\n\n        // Использовать HttpProxy для локального хранилища, ScriptTagProxy для удаленных хранилищ\n        proxy: new Ext.data.HttpProxy({\n            url: 'store.php'\n        })\n    });\n    store.setDefaultSort('id', 'ASC');\n\n\n    var grid = new Ext.grid.GridPanel({\n        width:700,\n        height:500,\n        title:'MODExt - просмотр страниц',\n        store: store,\n        trackMouseOver:true,  // Подсветит строки при наведении курсора мыши\n        disableSelection:true, // Позволит вам выбрать строку(и)\n        loadMask: true,  // Сгенерирует крутящуюся иконку\n\n        // Колонки сетки\n        columns:[{\n            header: \"Заголовок страницы\",\n            dataIndex: 'pagetitle',\n            width: 420,\n            sortable: true\n        },{\n            header: \"Псевдоним\",\n            dataIndex: 'alias',\n            width: 100,\n            sortable: true\n        },{\n            header: \"Автор\",\n            dataIndex: 'createdby',\n            width: 80,\n            align: 'right',\n            sortable: true\n        }],\n\n        // Панель постраничного разбиения внизу\n        bbar: new Ext.PagingToolbar({\n            pageSize: 25,\n            store: store,\n            displayInfo: true,\n            displayMsg: 'Отображаются записи {0} - {1} из {2}',\n            emptyMsg: \"Нет записей для отображения\"\n        })\n    });\n\n    // Отобразить сетку\n    grid.render('topic-grid');\n\n    // Запустить загрузку локального хранилища\n    // ПРИМЕЧАНИЕ: имена параметров здесь соответствуют ключам в массиве $_POST\n    store.load({params:{start:0, limit:25}});\n});\n    </script>\n\n    <body>\n        <h1>Продвинутая сетка</h1>\n        <div id=\"topic-grid\"></div>\n    </body>\n</html>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Prefix Example with xPDO.getOption in PHP\nDESCRIPTION: Example showing how to get the table prefix from xPDO configuration using the predefined constant xPDO::OPT_TABLE_PREFIX as the key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getoption.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tablePrefix = $xpdo->getOption(xPDO::OPT_TABLE_PREFIX);\n```\n\n----------------------------------------\n\nTITLE: Setting xPDO Hydration Option Example\nDESCRIPTION: Example showing how to set the HYDRATE_FIELDS option to true for an xPDO object instance. This affects how the object handles field data during runtime.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/configuration-accessors/setoption.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$object->setOption(xPDO::OPT_HYDRATE_FIELDS,true);\n```\n\n----------------------------------------\n\nTITLE: Migrating Changes to xPDO Core\nDESCRIPTION: Commands for updating the xpdo-core repository with changes from the complete xPDO repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/xpdo.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[xpdo-core]$ git remote add -f xpdo git@github.com:YourGitUsername/xpdo.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n[xpdo-core]$ git fetch upstream\n[xpdo-core]$ git checkout develop\nSwitched to branch \"develop\"\n[xpdo-core]$ git merge --ff-only upstream/develop\n[xpdo-core]$ git push origin develop\n[xpdo-core]$ git fetch xpdo\n[xpdo-core]$ git checkout -b feature-1234 develop\n[xpdo-core]$ git merge -s subtree --log xpdo/feature-1234\n[xpdo-core]$ git push origin feature-1234\n```\n\n----------------------------------------\n\nTITLE: Syncing Local Development Branch with Upstream in Git\nDESCRIPTION: Commands to update a local development branch with changes from the upstream repository. This assumes the official repository is added as 'upstream' and your fork as 'origin'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/git-github/frequent-commands.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit checkout 2.x\nSwitched to branch \"2.x\"\ngit merge --ff-only upstream/2.x\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'notequalto' in MODX\nDESCRIPTION: Demonstrates the usage of 'notequalto' modifier for conditional output based on inequality. It checks if the number of books is not equal to 5 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:notequalto=`5`:then=`Не уверен, сколько книг`:else=`Есть 5 книг!`]]\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'lt' in MODX\nDESCRIPTION: Demonstrates the usage of 'lt' (less than) modifier for conditional output. It checks if the number of books is less than 5 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:lt=`5`:then=`Есть менее 5 книг`:else=`Есть более 5 книг`]]\n```\n\n----------------------------------------\n\nTITLE: Querying MODX Database for Workspace Path\nDESCRIPTION: This SQL query retrieves the path information stored in the MODX database, which may need to be updated after moving to a new server.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT `path` FROM `your_revo_db`.`workspaces`;\n```\n\n----------------------------------------\n\nTITLE: Displaying Price Groups as Select Box using MODX\nDESCRIPTION: This snippet call demonstrates how to render price groups in a select box format. By providing specific template variables for rows and the outer wrapper, it outputs a dropdown for users to choose their desired price group. Essential inputs are the template chunk names for both row and outer wrappers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdpricegroups.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<label for=\"pricegroup\">Price Group</label>\n[[!bdTargets? &tplRow=`bdl.pricegroup.row` &tplOuter=`bdl.pricegroup.outer`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<option value=\"[[+id]]\">[[+display]]</option>\n```\n\nLANGUAGE: php\nCODE:\n```\n<select name=\"pricegroup\">\n  <option value=\"0\">Choose a Price Group</option>\n  [[+wrapper]]\n</select>\n```\n\n----------------------------------------\n\nTITLE: Logging User Login Information with OnWebLogin Event in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the OnWebLogin event to log information about user logins. It captures the username and login attributes, then logs them to the MODX error log.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onweblogin.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnWebLogin':\n        $name = $user->get('username');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'Авторизовался пользователь '.$name.print_r($attributes));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'in' in MODX\nDESCRIPTION: Demonstrates the usage of 'in' modifier for conditional output. It checks if the ID is in the array of values and outputs \"Yes in array\" if true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[[+id:in=`5,15,22`:then=`Yes in array`]]\n```\n\n----------------------------------------\n\nTITLE: Styling Animated Element\nDESCRIPTION: CSS styling for the div that will be animated\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/3.-ext-js-tutorial-animation.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style type=\"text/css\">\n    .myDiv {\n        border: 1px solid #AAAAAA;\n        background: yellow;\n        width: 200px;\n        height: 35px;\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using ditto Command for Directory Merging on Mac OS X\nDESCRIPTION: Example of using the 'ditto' command in Mac OS X terminal to merge MODX upgrade files into an existing installation directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nditto modx-2.1.0-pl /www/public_html/modx/\n```\n\n----------------------------------------\n\nTITLE: Snippet for Direct Testing from MODX\nDESCRIPTION: This snippet allows direct testing of a PHP file from within a MODX Revolution instance. It defines the base path, includes the specified file, and handles errors by logging them to the MODX log.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$base_path = dirname(dirname($modx->getOption('core_path'))).'/MODx Components/tutorials/storefinder/trunk/core/components/storefinder/';\n/* change above line to your path */\n$o = '';\n$f = $base_path.'snippet.storefinder.php';\nif (file_exists($f)) {\n   $o = include $f;\n} else {\n   $modx->setLogTarget('ECHO');\n   $modx->log(modX::LOG_LEVEL_ERROR,'StoreFinder not found at: '.$f);\n}\nreturn $o;\n```\n\n----------------------------------------\n\nTITLE: Template Variable with Property Set Usage\nDESCRIPTION: Shows how to use a template variable with a custom property set named 'CarsSectionTVPS' in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/step-by-step.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[*viewingSS@CarsSectionTVPS]]\n```\n\n----------------------------------------\n\nTITLE: Checking Parser Mode in MODX\nDESCRIPTION: This snippet demonstrates how to check if the current context is not the manager context, replacing the deprecated `IN_PARSER_MODE` constant. It checks if the context is not 'mgr'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"check context is not mgr\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic xPDO Object in PHP\nDESCRIPTION: Demonstrates how to create a new xPDO object of class 'Box' using the newObject method. This creates an instance of the object without persisting it to the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/creating-objects.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$myBox = $xpdo->newObject('Box');\n```\n\n----------------------------------------\n\nTITLE: Convert WWW to non-WWW URLs\nDESCRIPTION: This code snippet provides the .htaccess directives to convert WWW URLs to non-WWW URLs for SEO purposes. It uses RewriteCond and RewriteRule directives to check if the HTTP_HOST starts with 'www.' and then redirects the request to the non-WWW version of the domain.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/friendly-urls.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"# Rewrite www.domain.com -> domain.com -- used with SEO Strict URLs plugin\nRewriteCond %{HTTP_HOST} .\nRewriteCond %{HTTP_HOST} !^yoursite\\.com [NC]\nRewriteRule (.*) http://yoursite.com/$1 [R=301,L]\"\n```\n\n----------------------------------------\n\nTITLE: Legacy MODX 1.x Data Retrieval Methods\nDESCRIPTION: Examples of how data was retrieved in MODX 1.x and earlier versions, showing the more complex and verbose approach to accessing documents, chunks, and user data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// The old way of doing things in MODx 1.x and earlier\n$doc = $modx->getDocument(23);\n$doc = $modx->getDocument(45,'pagetitle,introtext');\n$chunk = $modx->getChunk('chunkName');\n\n// or even more convoluted\n$res = $modx->db->select('id,username',$table_prefix.'.modx_manager_users');\n$users = array();\nif ($modx->db->getRecordCount($res))\n{\n   while ($row = $modx->db->getRow($res)) {\n       array_push($users,$row);\n   }\n}\nreturn $users;\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in modX (PHP)\nDESCRIPTION: This code snippet demonstrates how to enable debug mode in a modX instance using the `setDebug` method.  It sets the debug mode to `true`, which can trigger more verbose logging and potentially halt execution on certain error levels. Requires a valid `$modx` object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.setdebug.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->setDebug(true);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Includes in FredBeforeRender\nDESCRIPTION: Example of adding HTML markup for including external resources like TinyMCE editor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/modx_events.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$includes = '\n    <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.9.2/tinymce.min.js\"></script>\n';\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Class for Media Source Icons\nDESCRIPTION: Specifies the CSS class name used to display Media Source icons in the MODX files tree. The default value is icon-folder-open-o and is available in MODX version 2.4 and above.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/mgr_source_icon.md#2025-04-17_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nicon-folder-open-o\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Repository for MODX Theme\nDESCRIPTION: Commands to initialize a Git repository and connect it to a remote GitHub repository for a MODX theme project.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/initial_extract.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit init\ngit remote add origin git@github.com:your_name/example_theme.git\n```\n\n----------------------------------------\n\nTITLE: Default Template for GetRelated Outer Wrapper in PHP\nDESCRIPTION: This is the default 'tplOuter' template that acts as a wrapper for related resources. It displays a heading with a localized string indicating the number of related pages found, followed by an unordered list that will contain the individual related resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getrelated/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<h3>[[%getrelated.pagesfound? &namespace=`getrelated` &count=`[[+count]]`]]</h3>\n<ul>\n  [[+wrapper]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining xPDOMaxValueValidationRule in XML\nDESCRIPTION: This XML snippet demonstrates how to define the xPDOMaxValueValidationRule within an xPDO model. It specifies the rule for the 'number' field of the 'myTest' object, ensuring that its value does not exceed 100. The 'message' attribute provides a custom error message to be displayed if the validation fails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdomaxvaluevalidationrule.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"test\" baseClass=\"xPDOObject\" platform=\"mysql\"\n       defaultEngine=\"MyISAM\" tablePrefix=\"test_\">\n    <object class=\"myTest\" table=\"test\" extends=\"xPDOSimpleObject\">\n        <field key=\"number\" dbtype=\"int\" precision=\"10\"\n               phptype=\"integer\" default=\"0\" null=\"false\" />\n\n        <validation>\n            <rule field=\"name\"\n                  name=\"myMaxValRule\"\n                  type=\"xPDOValidationRule\"\n                  rule=\"xPDOMaxValueValidationRule\"\n                  value=\"100\"\n                  message=\"The number cannot be greater than 100.\"\n             />\n        </validation>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Using MODx 'directory' Snippet in PHP\nDESCRIPTION: Displays the amount of space used and available for a user. Can be customized with template options. Required templates: `tplDirContainer` for the container and `tplDirGraph` for the graph representation. Can load jQuery and custom CSS if needed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.directory.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n[[!directory]]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n[[!directory? &tplDirContainer=`directory.container` &tplDirGraph=`directory.bargraph`]]\n```\n\n----------------------------------------\n\nTITLE: Submit Field using Field Snippet in MODX\nDESCRIPTION: This snippet demonstrates how to utilize a field snippet to create a submit button for forms in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`submit`\n    &name=`submitForm`\n]]\n```\n\n----------------------------------------\n\nTITLE: Lexicon String Prefixing for Components in PHP\nDESCRIPTION: Example of properly prefixed lexicon strings for MODX components, using dot notation to separate the component name from the string identifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/coding-standards.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$_lang['mycomponent.welcome_message'] = 'Welcome!';\n```\n\n----------------------------------------\n\nTITLE: Default GalleryItem tpl Chunk\nDESCRIPTION: This is the default template for displaying a GalleryItem when `toPlaceholders` is 0. It creates a link to the full image or URL (if specified) and displays a thumbnail of the image. Available placeholders like `url`, `image`, `thumbnail`, and `name` are used to populate the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<a href=\\\"[[+url:is=``:then=`[[+image]]`:else=`[[+url]]`]]\\\">\\n    <img src=\\\"[[+thumbnail]]\\\" alt=\\\"[[+name]]\\\" />\\n</a>\"\n```\n\n----------------------------------------\n\nTITLE: emRowTpl Chunk Content\nDESCRIPTION: This is the default template for displaying each event row when using the emListEvents snippet. It includes placeholders for the event date, title, description, reservation link, and other event details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventmanager/eventmanager.emlistevents.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<p>[[+date]]</p> <p></p>[[+title]]</p> <p>[[+description]]<br />[[+reservationlink]]</p>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring FormIt with fiProcessArrays Hook\nDESCRIPTION: Example configuration for using the fiProcessArrays hook in a FormIt form submission, demonstrating proper hook order and syntax for processing array values before email generation\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/fiprocessarrays.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &hooks=`math,spam,fiProcessArrays,fiGenerateReport,email,redirect`\n    ...\n    &figrExcludedFields=`op1,op2,operator,math`\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Field Snippet Usage in MODX\nDESCRIPTION: Basic example of generating a text input field with a label using the field snippet. Shows the minimal required parameters including name, type, and label.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n&name=`full_name`\n&type=`text`\n&label=`Enter your name:`]]\n```\n\n----------------------------------------\n\nTITLE: Example CSV Format for ImportX in MODX\nDESCRIPTION: Demonstrates a basic CSV structure for importing resources into MODX using ImportX. The example includes columns for pagetitle, alias, and isfolder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/importx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npagetitle;alias;isfolder\nAnalysing;analysing;1\nCommunicating;communicating;0\nRock solid copy;sepiariverstudios;0\nEditing your resources remotely;modxmobile;0\n```\n\n----------------------------------------\n\nTITLE: Using pdoPage with Collections' getSelections\nDESCRIPTION: Example of integrating pdoTools with Collections by using pdoPage to display items from a Selections container. This allows for pagination and additional features from pdoTools.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/collections/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoPage?\n    &elementClass=`modSnippet`\n    &element=`getSelections`\n    &getResourcesSnippet=`pdoResources`\n    &parents=`[[*id]]`\n    &tpl=`myTplChunk`\n]]\n```\n\n----------------------------------------\n\nTITLE: Initializing AdvSearchHelp MODX Snippet\nDESCRIPTION: Calls the AdvSearchHelp snippet to generate help content for advanced search functionality. Typically invoked as an ajax request to a specific resource named 'AdvSearch Help'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch.advsearchhelp/index.md#2025-04-17_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n[[!AdvSearchHelp]]\n```\n\n----------------------------------------\n\nTITLE: Defining Lexicon Message Format in PHP\nDESCRIPTION: Example of defining a lexicon message string with a placeholder that can be populated by parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.lexicon.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$_lang['welcome_message'] = 'Hello [[+name]]!  How are you today?';\n```\n\n----------------------------------------\n\nTITLE: Change Password Form\nDESCRIPTION: This snippet provides an HTML form for users to change their passwords. It utilizes the ChangePassword snippet to handle password updates. Parameters are used to customize the behavior of the ChangePassword snippet, like setting a submit variable, removing the default placeholder prefix, enabling old password validation and setting success messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/user-profiles.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2>Change Password</h2>\n[[!ChangePassword?\n   &submitVar=`change-password`\n   &placeholderPrefix=``\n   &validateOldPassword=`1`\n   &validate=`nospam:blank`\n   &reloadOnSuccess=`0`\n   &successMessage=`Your password has been updated!`\n]]\n<div>[[!+successMessage]]</div>\n<div class=\"updprof-error\">[[!+error_message]]</div>\n<form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n    <input type=\"hidden\" name=\"nospam\" value=\"\" />\n    <div class=\"ff\">\n        <label for=\"password_old\">Old Password\n            <span class=\"error\">[[!+error.password_old]]</span>\n        </label>\n        <input type=\"password\" name=\"password_old\" id=\"password_old\" value=\"[[+password_old]]\" />\n    </div>\n    <div class=\"ff\">\n        <label for=\"password_new\">New Password\n            <span class=\"error\">[[!+error.password_new]]</span>\n        </label>\n        <input type=\"password\" name=\"password_new\" id=\"password_new\" value=\"[[+password_new]]\" />\n    </div>\n    <div class=\"ff\">\n        <label for=\"password_new_confirm\">Confirm New Password\n            <span class=\"error\">[[!+error.password_new_confirm]]</span>\n        </label>\n        <input type=\"password\" name=\"password_new_confirm\" id=\"password_new_confirm\" value=\"[[+password_new_confirm]]\" />\n    </div>\n    <div class=\"ff\">\n        <input type=\"submit\" name=\"change-password\" value=\"Change Password\" />\n    </div>\n</form>\n\n```\n\n----------------------------------------\n\nTITLE: Adding xPDO Package and Retrieving Data in MODX\nDESCRIPTION: PHP code demonstrating how to load custom xPDO models using addPackage and retrieve data with getCollection. This example shows how to access custom database tables and iterate through their contents.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif(!$modx->addPackage('mypackage','/full/path/to/core/components/mypackage/model/','mp_')) {\n    return 'There was a problem adding your package!  Check the logs for more info!';\n}\n$my_items = $modx->getCollection('Items');\n$output = '';\nif ($my_items) {\n    foreach ($my_items as $item) {\n        $output .= $item->get('itemname') . '<br/>';\n    }\n}\nelse {\n    return 'No items found.';\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Getting Document Object in modX\nDESCRIPTION: Fetches a document object by its identifier using a specified method. This method is not public and lacks direct replacement options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nmodX->getDocumentObject($method, $identifier)\n```\n\n----------------------------------------\n\nTITLE: Custom Output Filter with Parameter\nDESCRIPTION: Example showing how to use a custom output filter with a parameter in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+file:makeDownloadLink=`notitle`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Core Lexicon Topic Caching in MODX\nDESCRIPTION: This setting determines whether non-core Lexicon Topics are cached in MODX. When set to 'Yes', non-core Lexicon Topics will be cached, improving performance. Setting it to 'No' is useful during development of custom Extras.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/cache_noncore_lexicon_topics.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Cache Non-Core Lexicon Topics\n**Type**: Yes/No\n**Default**: Yes\n```\n\n----------------------------------------\n\nTITLE: Defining Default Template for Row in MODX\nDESCRIPTION: This code snippet defines the default template for a single listing row in a MODX environment. It utilizes various placeholders such as title, description, and images to dynamically generate listing content. The snippet supports multiple properties that influence its output, such as redirection URL and Google Map integration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdlistings.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n<div>\n    <h2>\n        [[+redirect_url:notempty=`<a href=\"[[+redirect_url]]\">[[+title]]</a>`:default=`[[+title]]`]]\n    </h2>\n    [[+images:notempty=`<p>[[+primaryimage:notempty=`<img src=\"[[+primaryimage:phpthumbof=`w=300&h=200`]]\" alt=\"[[+title]]\" /><br />`]] [[+images]]</p>`]]\n    <p>In [[+city]] - [[+neighborhood]] - [[+companyname]] - <a href=\"[[+redirect_url]]\">[[+companyname]]</a></p>\n    [[+description:notempty=`<p>[[+description:nl2br]]</p>`]]\n    [[+googlemap_url:notempty=`<a href=\"[[+googlemap_url]]\" title=\"View on Google Maps\"><img src=\"[[+googlemap_static]]\" alt=\"Google Maps\"></a>`]]\n</div>\n?>\n```\n\n----------------------------------------\n\nTITLE: Displaying Form with mxfb Snippet using TV Value\nDESCRIPTION: This snippet displays a form using the mxfb snippet, retrieving the form ID from a Template Variable (TV). It assumes a TV named 'mxform' contains the ID of the desired form. The snippet requires mxFormBuilder to be installed and configured.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxformbuilder/mxformbuilder.create-form-list-in-tv.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"[[\"!mxfb? &formid=`[[*mxform]]` \"]]\"\n```\n\n----------------------------------------\n\nTITLE: Lexicon Tag Definition\nDESCRIPTION: This snippet defines the format for language tags, which are used to reference lexicon entries within MODX. They allow for easy localization and translation of content. The tag consists of double square brackets, a percent sign, and the lexicon string key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/glossary.md#2025-04-17_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n\"[[%LanguageStringKey]]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX Grid Columns for Fancybox Image Display\nDESCRIPTION: This JSON configuration defines the grid columns for displaying Fancybox images in the MIGX TV. It includes columns for placeholder, title, and image preview.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/fancybox-images-with-seperate-placeholders-in-richtext-content.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"header\": \"Placeholder\",\n    \"width\": \"10\",\n    \"sortable\": \"true\",\n    \"dataIndex\": \"placeholder\",\n    \"renderer\": \"this.renderPlaceholder\"\n  },\n  {\n    \"header\": \"Title\",\n    \"width\": \"160\",\n    \"sortable\": \"true\",\n    \"dataIndex\": \"title\"\n  },\n  {\n    \"header\": \"Image\",\n    \"width\": \"50\",\n    \"sortable\": \"false\",\n    \"dataIndex\": \"image\",\n    \"renderer\": \"this.renderImage\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example Output HTML from CamperManagement Slideshow\nDESCRIPTION: The resulting HTML output from the cmCampers snippet with the custom template chunks. This shows how the template properties combine to create the final markup structure for a single slideshow item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcampers-snippet.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n <div class=\"cycle\">\n  <a href=\"aanbod/details.html?cid=12\" title=\"TEC Siena Saphir 510 TR\" ><img src=\"/assets/components/campermanagement/uploads/2011/12/cm25917-723.jpg\" alt=\"TEC Siena Saphir 510 TR\" /></a>\n  <div class=\"slider-infobox\">\n    <p><a href=\"aanbod/details.html?cid=12\" title=\"TEC Siena Saphir 510 TR\" >TEC Siena Saphir 510 TR - &euro; 5.999,00</a></p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Conditional Class\nDESCRIPTION: Example of adding classes only when Fred is not loaded.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row\" data-fred-class=\"visible-grid foo\"></div>\n```\n\n----------------------------------------\n\nTITLE: Smarty Template Integration for MODX Manager Pages\nDESCRIPTION: Example of using Smarty template syntax to display placeholders in a MODX manager page template file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h2 class=\"modx-page-header\">{$foo}</h2>\n```\n\n----------------------------------------\n\nTITLE: SELECT Binding for Checkbox Template Variables in SQL\nDESCRIPTION: SQL query used with @SELECT binding to populate a checkbox template variable with values from the database. This example retrieves page titles and IDs from resources that are children of parent ID 35.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n@SELECT pagetitle, id FROM modx_site_content WHERE parent=35\n```\n\n----------------------------------------\n\nTITLE: Combining Album and Tag Filters in Gallery\nDESCRIPTION: This example shows how to retrieve all photos from the album 'My Album' that also have the tag 'Blue', leveraging the Gallery snippet parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery? &album=`My Album` &tag=`blue`]]\n```\n\n----------------------------------------\n\nTITLE: Example: Checking Debug Mode Status in PHP\nDESCRIPTION: This example demonstrates how to check if debug mode is enabled for an xPDO connection by calling the getDebug() method on an xPDO instance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getdebug.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$isDebugOn = $xpdo->getDebug();\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrectly Overusing Output Modifiers in MODX Chunk\nDESCRIPTION: This code snippet demonstrates an anti-pattern where excessive logic is placed in a Chunk using complex nested Output Modifiers. This approach makes maintenance difficult, reduces performance, and complicates debugging.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-chunk.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+tv.RemovePin:eq=`active`:then=`[[+modx.user.id:memberof=`\nMembers`:then=`{address:'[[+tv.country]], [[+pagetitle]]', data:'<div class=\"googleBubble\">\n[[+tv.Socialicons:replace=`||==`:replace=`facebook==<img src=\"/assets/images/mapof/facebook.png\"\nalt=\"Facebook\" width=\"16\" height=\"16\" class=\"pull-right mR2\">`:replace=`linkedin==<img src=\"/assets/images/mapof/linkedin.png\" alt=\"linked in\" width=\"16\" height=\"16\" class=\"pull-right mR2\">`:replace=`twitter==<img src=\"/assets/images/mapof/twitter.png\" alt=\"twitter\" width=\"16\" height=\"16\" class=\"pull-right mR2\">`]]<b>[[+tv.GPGroupName:replace=`'==&apos;`:default=`Dr [[+createdby:userinfo=`fullname`:ucwords]]`]]</b><br>[[+tv.occupation:notempty=`Occupation: [[+tv.occupation]]<br>`]][[+tv.other:notempty=`Occupation: [[+tv.other]]<br><br>`]]\n[[+content:replace=`\n==<br>`:replace=`'==&apos;`:strip]]<br>[[+tv.leadadmin:notempty=`<br>Admin contact: [[+tv.leadadmin]]`]] [[+tv.opentomembers:notempty=`<br>Open to new members?: [[+tv.opentomembers]]`]]\n<br>[[+tv.showEmailAddress:eq=`Yes`:then=`Email: <a href=\"mailto:[[+createdby:userinfo=`email`]]\">\n[[+createdby:userinfo=`email`]]</a>`:else=``]]</div>',options:{[[+tv.leadadmin:neq=``:then=`icon: new\ngoogle.maps.MarkerImage('/assets/images/mapof/pin-gold.png')`:else=`icon: new\ngoogle.maps.MarkerImage('/assets/images/mapof/pin-blue.png')`]]}},`:else=`{address:'[[+tv.country]], [[+pagetitle]]', data:'<div class=\"googleBubble\"><h3>Login to view</h3><p>To view the details of this pin please <a href=\"[[~702]]\">create an account</a> or <a href=\"[[~702]]\">login</a></p>\n</div>',options:{[[+tv.leadadmin:neq=``:then=`icon: new\ngoogle.maps.MarkerImage('/assets/images/mapof/pin-gold.png')`:else=`icon: new\ngoogle.maps.MarkerImage('/assets/images/mapof/pin-blue.png')`]]}},`]]`]]\n```\n\n----------------------------------------\n\nTITLE: Example of Switching to a Different Context in MODX Revolution\nDESCRIPTION: This example demonstrates how to switch to a context named 'sports' using the modX.switchContext method. The context key is passed as a string parameter to the method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.switchcontext.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->switchContext('sports');\n```\n\n----------------------------------------\n\nTITLE: Creating Lexicon Entries for Properties\nDESCRIPTION: Defines language strings for property descriptions and options to enable internationalization of the snippet interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$_lang['prop_doodles.ascending'] = 'Ascending';\n$_lang['prop_doodles.descending'] = 'Descending';\n$_lang['prop_doodles.dir_desc'] = 'The direction to sort by.';\n$_lang['prop_doodles.sort_desc'] = 'The field to sort by.';\n$_lang['prop_doodles.tpl_desc'] = 'The chunk for displaying each row';\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'hide' in MODX\nDESCRIPTION: Demonstrates the usage of 'hide' modifier. It checks if the number of books is less than 1 and hides the element if true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:lt=`1`:hide]]\n```\n\n----------------------------------------\n\nTITLE: Text Input Type JSON Configuration Options\nDESCRIPTION: JSON configuration options for the Text input type. Includes settings for validation with min/max length and regex patterns.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"maxLength\": \"\",\n    \"minLength\": \"\",\n    \"regex\": \"\",\n    \"regexText\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Comments by a User using QuipCount in MODX\nDESCRIPTION: This snippet showcases how to use the QuipCount snippet to count the number of comments made by a particular user. The `type` property is set to `user`, and the `user` property specifies the username of the user whose comments are to be counted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipcount.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\n[[QuipCount? &type=`user` &user=`jb2009`]]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Success Template in PHP for mhPayPal\nDESCRIPTION: This code snippet shows the default success template for the mhPayPal snippet. It displays a thank you message and transaction details after a successful payment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage/templating.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<div>\n    <h3>Thanks! You're awesome!</h3>\n    <p>PayPal says your [[+description]] ([[+currency]] [[+amount]]) transaction is [[+PAYMENTSTATUS]]! You're really cool for helping out on this project further. Do not hesitate to get in touch should you need help!</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Custom Thumbnail Size in PHP\nDESCRIPTION: The snippet generates an image tag using the image placeholder from the album, allowing for customization of the image size and cropping through URL parameters. It effectively integrates PHP thumbnail functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/rowtpl.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<img src=\"[[+image]]&w=240&h=160&zc=1\" alt=\"[[+name]]\" />\n```\n\n----------------------------------------\n\nTITLE: Copying Configuration Files for Build\nDESCRIPTION: Commands to copy the sample configuration files needed for building the MODX core.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncp build.config.sample.php build.config.php\ncp build.properties.sample.php build.properties.php\n```\n\n----------------------------------------\n\nTITLE: Updated getChildIds Call with Custom ID\nDESCRIPTION: Modified getChildIds call that uses the custom parent ID property instead of a hardcoded value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$children = $modx->getChildIds($id);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Newsletter Reader Page with virtuNewsletter Snippet\nDESCRIPTION: Resource content for the web-based newsletter reader page. This page displays newsletters in browser format and can be used to view archives or when emails don't render properly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!virtuNewsletter.reader]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Message After Registration in MODX\nDESCRIPTION: Explains how to configure the Register snippet to display a custom success message using the 'successMsg' property when the registration is successful and no redirect resource is specified.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!Register? &successMsg=`Thanks for registering!`]]\n```\n\n----------------------------------------\n\nTITLE: Multiline Conditional Operator in MODX\nDESCRIPTION: This snippet demonstrates how to write a longer conditional operator (`:then=``:else=``) over multiple lines for better readability.  It is important to maintain the structure and avoid line breaks within the modifier names or operators.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+placeholder:is=`0`:then=`\n // code\n`:else=`\n // code\n`]]\n```\n\n----------------------------------------\n\nTITLE: Multiplying Numeric Value with Units in PHP\nDESCRIPTION: Demonstrates multiplying a numeric value with a unit by using the modval output modifier. The modifier extracts the numeric portion, performs multiplication, and reattaches the original unit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.modval.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[modval?input=`4px`&options=`*3`]]\n```\n\n----------------------------------------\n\nTITLE: Finalizing and Pushing Feature Branch\nDESCRIPTION: Commands to build changes in MODX and push the feature branch to Github for PR submission\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/pr_workflow.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngitify package:install --all\ngitify build\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-feature\ngit checkout master\ngitify package:install --all\ngitify build\n```\n\n----------------------------------------\n\nTITLE: Disabling Schema Regeneration in PHP\nDESCRIPTION: This code snippet sets a boolean variable to false, preventing the regeneration of the database schema. This is useful when you only want to apply changes to the XML schema and update PHP class files without altering the database structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$regenerate_schema = false;\n```\n\n----------------------------------------\n\nTITLE: Adding Country Dropdown with FormItCountryOptions in MODX\nDESCRIPTION: Demonstrates how to use the FormItCountryOptions snippet to create a dropdown for selecting countries in a user profile form.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/extended-user-profiles.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<select name=\"country\">\n[[!FormItCountryOptions? &selected=`[[!+country]]` &prioritized=`US,GB,CA,AU` &prioritizedGroupText=`Frequent Visitors` &allGroupText=`Other Countries`]]\n</select>\n```\n\n----------------------------------------\n\nTITLE: Formatting date using strftime in MODX\nDESCRIPTION: These snippets demonstrate how to format dates within MODX using the `date` output modifier. They utilize `strtotime` to convert formatted dates into Unix timestamps, which are then formatted using `strftime` parameters. The examples showcase different date formats using various strftime codes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/date-formats.md#2025-04-17_snippet_0\n\nLANGUAGE: MODX\nCODE:\n```\n\"`[[*createdon:strtotime:date=`%a %b %d, %Y`]]`\"\n```\n\nLANGUAGE: MODX\nCODE:\n```\n\"`[[*createdon:strtotime:date=`%d %B %Y`]]`\"\n```\n\nLANGUAGE: MODX\nCODE:\n```\n\"`[[*createdon:strtotime:date=`%A, %B %d, %Y`]]`\"\n```\n\nLANGUAGE: MODX\nCODE:\n```\n\"`[[*createdon:strtotime:date=`%Y-%m-%d`]]`\"\n```\n\nLANGUAGE: MODX\nCODE:\n```\n\"`[[*createdon:strtotime:date=`[[++manager_date_format]]`]]`\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Gallery Item with Custom Tag Separator in PHP\nDESCRIPTION: This example illustrates how to use the GalleryItem snippet to display an item and customize the separator for associated tags using a pipe ('|'). The snippet demonstrates passing parameters to adjust the display, including the use of a chunk template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryItem?\\n    &id=`432`\\n    &toPlaceholders=`0`\\n    &tpl=`Photo`\\n    &tagSeparator=` | `\\n]]\n```\n\n----------------------------------------\n\nTITLE: Customized users.gallery.view Snippet Usage (PHP)\nDESCRIPTION: This snippet demonstrates how to customize the users.gallery.view snippet by specifying custom templates for the gallery container and the album list.  It allows for more tailored presentation of the gallery and albums.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.users.gallery.view.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\n[[!users.gallery.view? &tplGallery=`users.gallery.view` &tplAlbumList=`users.gallery.albumlist`]]\n\n```\n\n----------------------------------------\n\nTITLE: Display Limited User Groups for Specific User in PHP\nDESCRIPTION: Shows the first 10 User Groups for a specific user (ID 15) using default limit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroups.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!PeopleGroups? &user=`15`]]\n```\n\n----------------------------------------\n\nTITLE: Complex LexRating Integration with Quip in MODX\nDESCRIPTION: Shows how to integrate LexRatingList with Quip for comments and ratings. Includes total rating display, comment list, and reply form with LexRatingQuipPostHook.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lexrating/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<p>Total Rating:</p>\n[[!LexRatingList?\n&name=`threadNameHere`\n&group=`Overall Rating`\n]]\n<br />\n[[!Quip?\n&thread=`threadNameHere`\n&tplComment=`lexrating.quipComment`\n]]\n<br />\n[[!QuipReply?\n&thread=`threadNameHere`\n&postHooks=`LexRatingQuipPostHook`\n&tplAddComment=`lexrating.quipAddComment`\n&redirectTo=`[[*id]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring phpThumb Error Font Size in MODX\nDESCRIPTION: This setting defines the font size for error messages in phpThumb output. It uses an em value and is available in MODX version 2.0.8 and later. The default value is 1.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/phpthumb_error_fontsize.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nName: phpThumb Error Font Size\nType: textfield\nDefault: 1\nAvailable In: 2.0.8+\n```\n\n----------------------------------------\n\nTITLE: Specific ModSecurity Whitelist Rule Example\nDESCRIPTION: Example of a specific ModSecurity whitelist rule for allowing MODX TV element operations that would otherwise be blocked.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<LocationMatch \"/connectors/element/tv.php\">\n  <IfModule mod_security2.c>\n    SecRuleRemoveById 300016\n  </IfModule>\n</LocationMatch>\n```\n\n----------------------------------------\n\nTITLE: Including math Hook in FormIt Call\nDESCRIPTION: This code snippet demonstrates how to include the `math` hook in a FormIt call.  It showcases the basic syntax for integrating the math hook into your FormIt form processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.hooks/math.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[!FormIt? &hooks=`math`]]\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'show' in MODX\nDESCRIPTION: Demonstrates the usage of 'show' modifier. It checks if the number of books is greater than 0 and shows the element if true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:gt=`0`:show]]\n```\n\n----------------------------------------\n\nTITLE: User Link Chunk Template\nDESCRIPTION: Example chunk template showing nested placeholder usage.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"http://site.com/profile?user_id=[[+user.id]]!\">User Details</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Directory Paths for Transport Package Build in PHP\nDESCRIPTION: Sets up an array of directory paths needed for the build process. Includes paths for the build directory, resolvers, data, core components, lexicon files, assets, and documentation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$root = dirname(dirname(__FILE__)).'/';\n$sources= array (\n    'root' => $root,\n    'build' => $root .'_build/',\n    'resolvers' => $root . '_build/resolvers/',\n    'data' => $root . '_build/data/',\n    'source_core' => $root.'core/components/quip',\n    'lexicon' => $root . 'core/components/quip/lexicon/',\n    'source_assets' => $root.'assets/components/quip',\n    'docs' => $root.'core/components/quip/docs/',\n);\nunset($root); /* бережем память */\n```\n\n----------------------------------------\n\nTITLE: Readme File for MODX Component\nDESCRIPTION: A readme file that provides basic information about the Doodles component, including its version and purpose. This file will be displayed during installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n--------------------\nExtra: Doodles\n--------------------\nVersion: 1.0\n\nA simple demo extra for creating robust 3rd-Party Components in MODX Revolution.\n```\n\n----------------------------------------\n\nTITLE: Defining Simple Text Pattern in CustomUrls for MODX\nDESCRIPTION: A basic example of defining a simple text pattern for CustomUrls in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsimple-text\n```\n\n----------------------------------------\n\nTITLE: Using FileLister and FileDownload with Upload to Users CMP in MODX\nDESCRIPTION: Examples showing how to integrate FileLister and FileDownload R snippets with Upload to Users CMP to display files from user-specific folders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/upload-to-users-cmp/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[FileLister? &path=`assets/userfile/[[+modx.user.id]]/`]]\n[[FileDownload? &getDir=`assets/userfile/[[+modx.user.username]]/`]]\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Class Validation Schema\nDESCRIPTION: XML schema definition for a Custom Resource Class with parent validation rules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"MyCRC\" extends=\"modResource\">\n    <composite alias=\"Things\" cardinality=\"many\" class=\"Things\" foreign=\"parent\" local=\"id\" owner=\"local\"></composite>\n    <validation>\n      <rule field=\"parent\" message=\"Invalid parent\" name=\"parent\" rule=\"NormalParents\" type=\"xPDOValidationRule\"></rule>\n    </validation>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Implementing modRegistry Email Check\nDESCRIPTION: PHP code using MODX's modRegistry service to store temporary email verification data\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/self-subscribe.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Connect service\n$registry = $this->xpdo->getService('registry', 'registry.modRegistry');\n$instance = $registry->getRegister('user', 'registry.modDbRegister');\n$instance->connect();\n\n// Create your channel\n$instance->subscribe('/sendex/subscribe/');\n// We save the necessary data\n$instance->send('/sendex/subscribe/',\n    array(\n        $hash => array(\n            'user_id' => $user_id,\n            'newsletter_id' => $this->id,\n            'email' => $email,\n        )\n    ),\n    array(\n        'ttl' => $linkTTL\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: MODX LoadModels Parameter Example\nDESCRIPTION: Example showing how to specify multiple component models to load for query building.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/General_settings.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nms2gallery,msearch2\n```\n\n----------------------------------------\n\nTITLE: Defining EventsCalendar2 Properties in Markdown Table\nDESCRIPTION: This snippet presents a markdown table listing all available properties for the EventsCalendar2 snippet. It includes property names, descriptions, and default values, providing a comprehensive reference for configuring the calendar functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                                                                                             | Description                                                                                                                                                                            | Default Value    |\n| -------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------- |\n| parents                                                                                                                          | The ids of an comm-separated list of existing containers.                                                                                                                              | ?urrent resource |\n| events                                                                                                                           | An json-array of events. Overrides all settings. Allows you to display random events from any source. Required date parameter in an array of events to date in the format \"Ymd H:i:s\". | none             |\n| month                                                                                                                            | A month to display events.                                                                                                                                                             | date('m')        |\n| year                                                                                                                             | A year to display events.                                                                                                                                                              | date('Y')        |\n| dateSource                                                                                                                       | Field for search the events date. It can be a TV.                                                                                                                                      | createdon        |\n| dateFormat                                                                                                                       | Date format. Used [strftime()](http://docs.php.net/manual/en/function.strftime.php).                                                                                                   | %d %b %Y %H:%M   |\n|                                                                                                                                  |                                                                                                                                                                                        |                  |\n| hideContainers                                                                                                                   | Hide containers?                                                                                                                                                                       | 0                |\n| showHidden                                                                                                                       | Show hidden in menu resources?                                                                                                                                                         | 1                |\n| includeContent                                                                                                                   | Include content field? Disabling may increase perfomance.                                                                                                                              | 1                |\n| includeTVs                                                                                                                       | Include template variables?                                                                                                                                                            | 0                |\n| includeTVList                                                                                                                    | List of comma-separated template variables for including.                                                                                                                              | none             |\n| processTVs                                                                                                                       | Process template variables according to its type?                                                                                                                                      | 0                |\n| processTVList                                                                                                                    | List of comma-separated template variables for processing of events.                                                                                                                   | none             |\n|                                                                                                                                  |                                                                                                                                                                                        |                  |\n| tplMain                                                                                                                          | Name of existing chunk for templating calendar container.                                                                                                                              | tplCalendar2     |\n| tplEvent                                                                                                                         | Name of existing chunk for template events.                                                                                                                                            | tplEvent2        |\n| tplHead                                                                                                                          | Name of existing chunk for template events.                                                                                                                                            | tplHead2         |\n| tplCell                                                                                                                          | Name of existing chunk for template events.                                                                                                                                            | tplCell2         |\n| theme                                                                                                                            | CSS theme for calendar. File must be in /core/assets/components/eventscalendar2/css/**%themename%**/theme.css.                                                                         |\n| _For example theme bootstrap, included in package is in /core/assets/components/eventscalendar2/css/_**_bootstrap_**_/theme.css_ | default                                                                                                                                                                                |\n| regCss                                                                                                                           | Load built-in CSS (or theme) for calendar?                                                                                                                                             | 1                |\n| regJs                                                                                                                            | Load built-in javascript for calendar?                                                                                                                                                 | 1                |\n| plPrefix                                                                                                                         | Placeholders prefix.                                                                                                                                                                   | ec.              |\n|                                                                                                                                  |                                                                                                                                                                                        |                  |\n| calendar_id                                                                                                                     | Unique id of calendar table on page.                                                                                                                                                   | Calendar         |\n| class_calendar                                                                                                                  | CSS classname for calendar table.                                                                                                                                                      | calendar         |\n```\n\n----------------------------------------\n\nTITLE: Example of Permanent Sort Syntax for Collections\nDESCRIPTION: Demonstrates syntax for configuring permanent sort options in Collections 3.2.0+. This example shows how to prioritize unpublished resources when sorting by publication date.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/collections/index.md#2025-04-17_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\npublishedon=published:asc\n-- Setting above as Permanent sort - Before will pull all unpublished resources on top of the grid when sorting by published on. Because sort_dir is present, doesn't matter if you sorting asc/desc by published on, unpublished resources will always be on top.\n```\n\n----------------------------------------\n\nTITLE: FormIt HTML Input Field Example\nDESCRIPTION: Example showing how to create a text input field with FormIt placeholders for form value retention.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" name=\"firstname\" id=\"firstname\" value=\"[[!+fi.firstname]]\" />\n```\n\n----------------------------------------\n\nTITLE: GetResources Multiple Templates Query - PHP\nDESCRIPTION: Filters resources matching multiple template IDs using OR condition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`[[*id]]` &where=`{\"template:=\":1, \"OR:template:=\":2}` &tpl=`myRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Chaining Output Modifiers in MODX\nDESCRIPTION: Example of chaining multiple output modifiers to format a date string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[+mydate:strtotime:date=`%Y-%m-%d`]]\n```\n\n----------------------------------------\n\nTITLE: MIGX Configuration - layout_2 Formtabs\nDESCRIPTION: JSON configuration for the second MIGX layout with form tabs, expanding on the first layout by adding a second set of content fields\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/varying-layout-boxes/configurator-version.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"caption\": \"Row Format\",\n  \"fields\": [{\n    \"field\": \"fake\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_3_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_3_headline\",\n    \"caption\": \"Headline\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_3_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"hidden\"\n  }]\n}, {\n  \"caption\": \"First\",\n  \"fields\": [{\n    \"field\": \"cell_1_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"image\"\n  }, {\n    \"field\": \"cell_1_headline\",\n    \"caption\": \"Headline\"\n  }, {\n    \"field\": \"cell_1_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"richtext\"\n  }]\n}, {\n  \"caption\": \"Second\",\n  \"fields\": [{\n    \"field\": \"cell_2_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"image\"\n  }, {\n    \"field\": \"cell_2_headline\",\n    \"caption\": \"Headline\"\n  }, {\n    \"field\": \"cell_2_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"richtext\"\n  }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Defining SMTP Port System Setting in MODX\nDESCRIPTION: YAML-style configuration definition for the SMTP port setting in MODX. This setting specifies the default port number used for SMTP server connections, with a default value of 587 which is commonly used for TLS/STARTTLS.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/mail_smtp_port.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"mail_smtp_port\"\n_old_id: \"180\"\n_old_uri: \"2.x/administering-your-site/settings/system-settings/mail_smtp_port\"\n```\n\n----------------------------------------\n\nTITLE: Blog Post Template Chunk - HTML\nDESCRIPTION: Template chunk for formatting blog post listings with date, author, and content summary.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"blogPost\">\n    <div class=\"date\">[[+publishedon:strtotime:date=`%b %d %Y`]]</div>\n    <h2><a href=\"[[~[[+id]]]]\" title=\"[[+pagetitle]]\">[[+pagetitle]]</a></h2>\n    <p class=\"author\">\n        <strong>Author:</strong>\n        <span class=\"author\">[[+createdby:userinfo=`username`]]</span>\n    </p>\n    <p class=\"summary\">[[+introtext]]</p>\n    <p class=\"readmore\">\n        <a href=\"[[~[[+id]]]]\"><span>Read more</span></a>\n    </p>\n    <div class=\"clear\"></div>\n</div>\n<hr/>\n```\n\n----------------------------------------\n\nTITLE: Length Validation Rule Example\nDESCRIPTION: Example of using xPDOMinLengthValidationRule to ensure a category field is not blank.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<rule field=\"category\" name=\"preventBlank\" type=\"xPDOValidationRule\" rule=\"xPDOMinLengthValidationRule\" value=\"1\" message=\"category_err_ns_name\" />\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Container for Child Resources in MODX Sitemap in PHP\nDESCRIPTION: This chunk is used as a wrapper for the children of a resource folder in the HTML sitemap. It creates an unordered list to contain child items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<ul>\n    [[+items]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing the modX::sendUnauthorizedPage Method in PHP\nDESCRIPTION: Demonstrates how to use the sendUnauthorizedPage method to redirect users to the unauthorized page. The script does not need to be terminated after calling this method as it handles the redirection process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendunauthorizedpage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendUnauthorizedPage();\n```\n\n----------------------------------------\n\nTITLE: Configuring Board XML Controller Options in Discuss Manifest\nDESCRIPTION: Example of how to configure options for the board.xml controller in the Discuss manifest. This includes settings for the template chunk, mode, and category name retrieval.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/board/xml.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"board.xml\" => array(\n    \"tpl\" => \"disBoardPostXml\",\n    \"mode\" => \"rss\",\n    \"get_category_name\" => true\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Option Set with Multiple Imports\nDESCRIPTION: Shows how to combine custom settings with multiple partial option set imports in a complete configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/import.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"settings\": [\n        {\n            \"name\": \"panel_class\",\n            \"label\": \"Panel Class\",\n            \"type\": \"text\",\n            \"value\": \"\"\n        },\n        {\n            \"fred-import\": \"cta_settings\"\n        },\n        {\n            \"fred-import\": \"text_color\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Template for Displaying Resource Thumbnails in MODX (PHP)\nDESCRIPTION: This PHP code snippet defines an HTML template for displaying individual resource thumbnails in MODX. It uses MODX placeholders for page title, link, image, and intro text. phpThumbOf is required for image transformation, and it receives its inputs from MODX TVs. Outputs are part of the HTML structure for each listed resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/getresources.examples/category-index-page-with-thumbnails.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"list-item column span-6\">\n    <h2>[[+pagetitle]]</h2>\n    <a href=\"[[~[[+id]]]]\" title=\"[[+pagetitle]]\">\n        <img src=\"[[+tv.page-thumb:phpthumbof=`w=153&h=200&zc=1`]]\" alt=\"[[+pagetitle]]\" />\n    </a>  \n    <p>[[+introtext]]</p>\n</div>  <!-- eof item -->?\n```\n\n----------------------------------------\n\nTITLE: Creating Complex URI Pattern in CustomUrls\nDESCRIPTION: Demonstrates a more complex URI pattern using parent URI, custom text, and a snippet call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[+cu.parent_uri]]/some-text/[[getResourceField? &id=`[[+parent]]`]]/[[+id]]-[[+alias]]\n```\n\n----------------------------------------\n\nTITLE: Updating Local Git Repository in PHP\nDESCRIPTION: Commands to update your local Git repository with the latest changes from the remote repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ngit fetch origin\ngit rebase origin/2.x\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Sports Context - PHP Example\nDESCRIPTION: Example showing how to initialize a specific MODX context named 'sports' using the initialize method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.initialize.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->initialize('sports');\n```\n\n----------------------------------------\n\nTITLE: Git Commands for PR Testing\nDESCRIPTION: Collection of Git commands used for checking out and merging pull requests for testing, including checkout and merge commands.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/testing-pull-requests.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout name-of-branch\\ngit merge --no-ff --no-commit name-of-branch\n```\n\n----------------------------------------\n\nTITLE: Getting Web User ID in MODX\nDESCRIPTION: This snippet shows how to retrieve the ID of an authenticated web user, replacing the deprecated `$_SESSION[\"webInternalKey\"]`. It checks if the user is authenticated in the web context before retrieving the ID using `modX->user->get('id')`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\"`modX->user->get('id')` when `modX->user->isAuthenticated('web')`\"\n```\n\n----------------------------------------\n\nTITLE: Template Chunk Example for Related Pages in MODX\nDESCRIPTION: This example MODX chunk template formats resource information into list items with hyperlinks. It offers dynamic content capabilities by using fields such as pagetitle and createdby, allowing for customization within the related pages display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <a href=\"[[~[[+id]]]]\" title=\"[[+pagetitle]]\">\n    [[+longtitle:default=`[[+pagetitle]]`]]\n  </a>, by [[+createdby:userinfo=`fullname`]]\n</li>\n```\n\n----------------------------------------\n\nTITLE: Adding Exemptions for POST Requests and Query Strings in Apache\nDESCRIPTION: Apache .htaccess configuration to exempt POST requests and query strings from StatCache, ensuring dynamic requests are processed by MODX directly instead of using cached static pages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/statcache/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRewriteCond %{REQUEST_METHOD} !=POST\nRewriteCond %{QUERY_STRING} !.*=.*\n```\n\n----------------------------------------\n\nTITLE: Snippet Call with Custom Template\nDESCRIPTION: Example of how to call the snippet with a custom template chunk from a MODX template or content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!ResourceLister? &tpl=`MyOwnChunk`]]\n```\n\n----------------------------------------\n\nTITLE: Creating Category and Snippet Objects\nDESCRIPTION: Demonstrates creating a category object and adding a snippet with properties loaded from external files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/* create category */\n$category= $modx->newObject('modCategory');\n$category->set('id',1);\n$category->set('category','Quip');\n\n/* create the snippet */\n$snippet= $modx->newObject('modSnippet');\n$snippet->set('id',0);\n$snippet->set('name', 'Quip');\n$snippet->set('description', 'A simple commenting component.');\n$snippet->set('snippet',file_get_contents($sources['source_core'].'/snippet.quip.php');\n\n$properties = include $sources['data'].'properties.inc.php';\n$snippet->setProperties($properties);\n$category->addMany($snippet);\n```\n\n----------------------------------------\n\nTITLE: Manager Controller Render Method Signature\nDESCRIPTION: Method signature from the modManagerController class where the OnManagerPageAfterRender event is triggered after processing content and before returning the response.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onmanagerpageafterrender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n```\n\n----------------------------------------\n\nTITLE: Llamada a Chunk con Propiedad en PHP\nDESCRIPTION: Demuestra cómo llamar al chunk 'Hola' pasando un valor para el marcador de posición 'nombre'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[$Hola? &nombre=`Jorge`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch with Descriptive Name in Git\nDESCRIPTION: Example of creating a feature branch with a descriptive name. This follows the recommendation to use meaningful branch names that don't resemble release version numbers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/git-github/frequent-commands.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b myAwesomeFeature 2.x\n```\n\n----------------------------------------\n\nTITLE: Adding Resolvers to MODX Vehicle\nDESCRIPTION: Implementation of file and PHP resolvers for a MODX transport vehicle, handling file copying and setup options during package installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$vehicle->resolve('file',array(\n    'source' => $sources['source_core'],\n    'target' => \"return MODX_CORE_PATH . 'components/';\",\n));\n$vehicle->resolve('file',array(\n    'source' => $sources['source_assets'],\n    'target' => \"return MODX_ASSETS_PATH . 'components/';\",\n));\n$vehicle->resolve('php',array(\n    'source' => $sources['resolvers'] . 'setupoptions.resolver.php',\n));\n$builder->putVehicle($vehicle);\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Description with MODX Description Tag (HTML)\nDESCRIPTION: Shows how to use the [[*description]] tag to set the meta description in the HTML head.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"description\" content=\"[[*description]]\"/>\n```\n\n----------------------------------------\n\nTITLE: Custom Template PollsPrevious Implementation\nDESCRIPTION: Implementation of PollsPrevious with custom templates for vote outer and vote answer\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollsprevious.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsLatest? &tplVote=`myVoteOuter` &tplVoteAnswer=`myVoteAnswer`]]\n```\n\n----------------------------------------\n\nTITLE: Using myDoodle Chunk for Output in PHP\nDESCRIPTION: The below Chunk definition, named 'myDoodle', defines how each doodle is displayed by specifying placeholders for the properties of each doodle such as id, name, and description.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rowboat/rowboat.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<li id=\"doodle[[+id]]\"><strong>[[+name]]</strong> - [[+description]]</li>\n```\n\n----------------------------------------\n\nTITLE: Implementing Lingua Selector Item Chunk in PHP\nDESCRIPTION: Default chunk template for individual language items in the selector dropdown. Uses conditional logic to hide the current language option and displays a flag with the language name for other options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lingua/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[+lingua.cultureKey:is=`[[+lingua.lang_code]]`:then=``:else=`<li>\n    <a href=\"[[+lingua.url]]\" title=\"[[+lingua.local_name]]\">\n        <img src=\"[[+lingua.flag]]\" alt=\"\"/> [[+lingua.local_name]]\n    </a>\n</li>`]]\n```\n\n----------------------------------------\n\nTITLE: Searching modExtra References in Files with Grep\nDESCRIPTION: Illustrates using grep to locate all instances of 'modExtra' in the directory. This step is crucial for renaming references in newly cloned files to match a new Extra name. The code functions on Unix-like systems and requires grep installed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modextra/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngrep -rl 'modExtra' .\n```\n\n----------------------------------------\n\nTITLE: Using Template Variable with Chunk Binding\nDESCRIPTION: Demonstrates how to reference a Template Variable that contains a chunk binding. The TV value will be replaced with the chunk's contents.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/chunk-binding.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*MyChunk]]\n```\n\n----------------------------------------\n\nTITLE: Complex PrepareComments Snippet Implementation\nDESCRIPTION: Complete implementation of prepareComments snippet showing user group caching and class assignment\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Classes/pdoTools.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif (empty($row['createdby'])) {return json_encode($row);}\n\n// If we do not have cached groups\nif (!$groups = $pdoTools->getStore('groups')) {\n    $tstart = microtime(true);\n    $q = $modx->newQuery('modUserGroupMember');\n    $q->innerJoin('modUserGroup', 'modUserGroup', 'modUserGroupMember.user_group = modUserGroup.id');\n    $q->select('modUserGroup.name, modUserGroupMember.member');\n    $q->where(array('modUserGroup.name:!=' => 'Users'));\n    if ($q->prepare() && $q->stmt->execute()) {\n        $modx->queryTime += microtime(true) - $tstart;\n        $modx->executedQueries++;\n        $groups = array();\n        while ($tmp = $q->stmt->fetch(PDO::FETCH_ASSOC)) {\n            $name = strtolower($tmp['name']);\n            if (!isset($groups[$name])) {\n                $groups[$name] = array($tmp['member']);\n            }\n            else {\n                $groups[$name][] = $tmp['member'];\n            }\n        }\n    }\n    foreach ($groups as & $v) {\n        $v = array_flip($v);\n    }\n    // Save groups to cache\n    $pdoTools->setStore('groups', $groups);\n}\n\n$class = '';\nif (!empty($row['blocked'])) {\n    $class = 'blocked';\n}\nelseif (isset($groups['administrator'][$row['createdby']])) {\n    $class = 'administrator';\n}\n$row['class'] = $class;\n\nreturn json_encode($row);\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Default Sort Order - MODX - Markdown\nDESCRIPTION: This snippet sets the default sorting order for files in the browser interface, enhancing file management by aligning it with user preferences.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[modx_browser_default_sort](building-sites/settings/modx_browser_default_sort)\n```\n\n----------------------------------------\n\nTITLE: FormIt with Excluded Fields\nDESCRIPTION: Example showing how to configure FormIt with fiGenerateReport while excluding specific fields from the report.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.figeneratereport.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &hooks=`math,spam,fiGenerateReport,email,redirect`\n    ...\n    &figrExcludedFields=`op1,op2,operator,math`]]\n```\n\n----------------------------------------\n\nTITLE: Modifying Resource Pagetitle in MODX Cache\nDESCRIPTION: Shows how to modify a resource's pagetitle property through the cache event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Override Pagetitle\n$modx->event->params['resource']->pagetitle = 'My New Pagetitle';\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Content with MODX Content Tag (HTML)\nDESCRIPTION: Demonstrates how to use the [[*content]] tag to display the main content of a page within the body tag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body>[[*content]]</body>\n```\n\n----------------------------------------\n\nTITLE: Checking Lazy Loading Status in xPDOObject in PHP\nDESCRIPTION: The isLazy() method of xPDOObject indicates if the object or a specified field is lazy-loaded. It takes an optional string parameter for the field key and returns a boolean value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/state-accessors/islazy.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean isLazy ([string $key = ''])\n```\n\n----------------------------------------\n\nTITLE: Basic PollsPrevious Implementation in MODX\nDESCRIPTION: Simple implementation of the PollsPrevious snippet without any parameters\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollsprevious.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsPrevious]]\n```\n\n----------------------------------------\n\nTITLE: AdvSearch Paging0Tpl Chunk Default Value\nDESCRIPTION: This is the default chunk used by AdvSearch for pagination type 0. It displays the result pages and the pagination links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/paging0tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<span class=\\\"advsea-result-pages\\\">[[%advsearch.result_pages? &namespace=`advsearch` &topic=`default`]]</span>[[+paging0]]\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Photo Template Chunk in MODX\nDESCRIPTION: This is the default photoTpl chunk used by the getFacebookPhotos snippet to display individual Facebook photos. It creates a list item containing the small version of a photo with appropriate dimensions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookphotos.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li>\n    <img src=\"[[+src_small]]\" width=\"[[+src_small_width]]\" height=\"[[+src_small_height]]\" />\n</li>\n```\n\n----------------------------------------\n\nTITLE: Custom Output Modifier Example in MODX\nDESCRIPTION: Example of using a custom output modifier called 'makeExciting' with a document variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[*pagetitle:makeExciting=`4`]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Album Template in PHP/HTML\nDESCRIPTION: Default template for displaying a Facebook album with links, photo count, and creation date. Used with the getFacebookPhotos snippet when perAlbum is enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookphotos.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n <h2><a href=\"[[+link]]\">[[+name]]</a> <span>([[+photo_count]] photos, created on [[+created:date=`%d/%m/%Y`]])</span></h2>\n<div>\n    <ul>\n        [[+photos]]\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Changing Password for the Currently Logged-in User in MODX\nDESCRIPTION: This snippet shows how to change the password for the currently logged-in user from 'mypass' to 's3cur3d' using the modUser::changePassword method on the $modx->user object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.changepassword.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->user->changePassword('s3cur3d','mypass');\n```\n\n----------------------------------------\n\nTITLE: Textarea Input Type JSON Configuration Options\nDESCRIPTION: JSON configuration options for the Textarea input type. Only includes the allowBlank setting to control whether empty values are permitted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Full Page Content Rendering\nDESCRIPTION: Demonstrates embedding the full page content within the body element\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<body>[[*content]]</body>\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Gallery Albums TV Input\nDESCRIPTION: A PHP snippet for dynamically populating template variable input options with available gallery albums, including a 'none' option\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/assinging-a-gallery-album-to-a-specifc-resource.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->runSnippet(\"GalleryAlbums\",array(\"rowTpl\"=>\"galleryDropdownList\")).\"none==0\"; return $output;\n```\n\n----------------------------------------\n\nTITLE: Basic DIRECTORY Binding Syntax in MODX\nDESCRIPTION: Demonstrates the basic syntax for using @DIRECTORY binding in Template Variables to read contents from a specified directory. The path is relative to the site's root.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/directory-binding.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@DIRECTORY /path/to/some_directory\n```\n\n----------------------------------------\n\nTITLE: Adding a Search Field to a Grid (JavaScript)\nDESCRIPTION: This JavaScript snippet adds a textfield to the top bar of a grid in ExtJS for searching. It includes event listeners to trigger a search function on change and when the Enter key is pressed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n,tbar:[{\n    xtype: 'textfield'\n    ,id: 'doodles-search-filter'\n    ,emptyText: _('doodles.search...')\n    ,listeners: {\n        'change': {fn:this.search,scope:this}\n        ,'render': {fn: function(cmp) {\n            new Ext.KeyMap(cmp.getEl(), {\n                key: Ext.EventObject.ENTER\n                ,fn: function() {\n                    this.fireEvent('change',this);\n                    this.blur();\n                    return true;\n                }\n                ,scope: cmp\n            });\n        },scope:this}\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Template Variables\nDESCRIPTION: Use the function modX\\->getCollection('modTemplateVar', $criteria) to retrieve collections of template variables based on specified criteria, enabling batch processing and manipulation in bulk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getTemplateVars()\n```\n\n----------------------------------------\n\nTITLE: Creating Attribute Containers in Extended Fields\nDESCRIPTION: This snippet shows how to create hidden input fields that can be used to store data for extended fields under a specified container, such as 'january'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-custom-fields.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n  <input type=\"hidden\" name=\"january[Spaces]\" value=\"\" />\n  <input type=\"hidden\" name=\"january[Tables]\" value=\"\" />\n  <input type=\"hidden\" name=\"january[Chairs]\" value=\"\" />\n  <input type=\"hidden\" name=\"january[NeedsElectric]\" value=\"\" />\n  <input type=\"hidden\" name=\"january[Misc]\" value=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Thumb Error Font Size - MODX - Markdown\nDESCRIPTION: This parameter configures the font size for error messages returned by PHPThumb, improving readability for end users.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_error_fontsize](building-sites/settings/phpthumb_error_fontsize)\n```\n\n----------------------------------------\n\nTITLE: Implementing Unsubscription Email Template in HTML\nDESCRIPTION: Email template sent after a successful unsubscription. This template confirms to users that they have been unsubscribed and will no longer receive newsletters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p>Thank you.</p>\n<p>Your subscription has been cancelled successfully.</p>\n<p>We will no longer send you the upcoming newsletters.</p>\n<p> </p>\n<p>Regards,</p>\n<p><a href=\"http://www.example.com\" target=\"_blank\">Example.com</a></p>\n```\n\n----------------------------------------\n\nTITLE: Package Compilation and Completion\nDESCRIPTION: Finalizes the transport package creation by zipping the contents and displaying build completion information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/* zip up package */\n$modx->log(modX::LOG_LEVEL_INFO,'Packing up transport package zip...');\n$builder->pack();\n\n$tend= explode(\" \", microtime());\n$tend= $tend[1] + $tend[0];\n$totalTime= sprintf(\"%2.4f s\",($tend - $tstart));\n$modx->log(modX::LOG_LEVEL_INFO,\"\\n<br />Package Built.<br />\\nExecution time: {$totalTime}\\n\");\nexit ();\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Error Template in PHP for mhPayPal\nDESCRIPTION: This code snippet shows the default error template for the mhPayPal snippet. It displays an error message within a span element.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage/templating.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<span>[[+error]]</span>\n```\n\n----------------------------------------\n\nTITLE: Multi-line Conditional Output in MODX Revolution\nDESCRIPTION: Shows how to format longer conditional statements using :then and :else across multiple lines for better readability.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+placeholder:is=`0`:then=`\n // code\n`:else=`\n // code\n`]]\n```\n\n----------------------------------------\n\nTITLE: Rendering Navigation Links with AdvSearch in PHP\nDESCRIPTION: This PHP snippet is the default value for the paging1Tpl Chunk used in AdvSearch. It renders pagination links utilizing placeholders such as previouslink, first, last, total, and nextlink. The primary dependencies are MODX and the AdvSearch component. It requires input for current page details to output pagination links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/paging1tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+previouslink:isnot=\\\"\\\":then=\\`<span class=\\\"advsea-previous\\\"><a href=\\\"[[+previouslink]]\\\">Previous</a></span>\\`]]<span class=\\\"advsea-current\\\"> [[+first]] - [[+last]] / [[+total]] </span>[[+nextlink:isnot=\\\"\\\":then=\\`<span class=\\\"advsea-next\\\"><a href=\\\"[[+nextlink]]\\\">Next</a></span>\\`]]\n```\n\n----------------------------------------\n\nTITLE: Using Property Sets with Snippets in MODX\nDESCRIPTION: Calling a MODX snippet with a predefined Property Set named 'Menu' that contains multiple property configurations. This approach allows for reusing common property configurations across multiple snippet calls.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/snippets.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!Wayfinder@Menu]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Controller Information in Error Log with OnManagerPageBeforeRender\nDESCRIPTION: This PHP snippet demonstrates how to use the OnManagerPageBeforeRender event to display information about the active controller in the error log. It accesses the controller's configuration and script properties for debugging purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onmanagerpagebeforerender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnManagerPageBeforeRender':\n        // which controller is loading\n        print_r($scriptProperties['controller']->config);\n        print_r($scriptProperties['controller']->scriptProperties);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Snippets in CustomUrls Pattern\nDESCRIPTION: Illustrates the use of MODX snippets within a CustomUrls pattern.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[MySnippet? &id=`[[+id]]`]]\n```\n\n----------------------------------------\n\nTITLE: Setup Options Script for MODX Package Installation\nDESCRIPTION: A PHP script that generates output to be shown during package installation. This allows displaying custom messages or collecting user input during the setup process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$output = '';\nswitch ($options[xPDOTransport::PACKAGE_ACTION]) {\n    case xPDOTransport::ACTION_INSTALL:\n        $output = '<h2>Doodles Installer</h2>\n<p>Thanks for installing Doodles! Please review the setup options below before proceeding.</p><br />';\n        break;\n    case xPDOTransport::ACTION_UPGRADE:\n    case xPDOTransport::ACTION_UNINSTALL:\n        break;\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Available TabPanels in MODX Form Customization\nDESCRIPTION: This markdown table lists the IDs for corresponding tab panels on various MODX manager pages. It includes IDs for Resource, Chunk, Snippet, Plugin, Template, Template Variable, User, User Group, and Context pages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/new-tab.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| ID                  | Corresponding Page             |\n| ------------------- | ------------------------------ |\n| modx-resource-tabs  | The Resource edit/create page. |\n| modx-chunk-tabs     | The Chunk page.                |\n| modx-snippet-tabs   | The Snippet page.              |\n| modx-plugin-tabs    | The Plugin page.               |\n| modx-template-tabs  | The Template page.             |\n| modx-tv-tabs        | The Template Variable page.    |\n| modx-user-tabs      | The User page.                 |\n| modx-usergroup-tabs | The User Group page.           |\n| modx-context-tabs   | The Context page.              |\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Manager Path Issues in PHP\nDESCRIPTION: This PHP error message indicates that a cached old path is causing issues during MODX manager login. Clear the site's cache manually if the error persists after a migration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nCould not find action file at: /path/to/manager/controllers/default/welcome.php\n```\n\n----------------------------------------\n\nTITLE: Configuring MAMP on Mac OS X for MODX Development in PHP\nDESCRIPTION: Command to adjust the dynamic linker library path to include MAMP PHP libraries on Mac OS X.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nexport DYLD_LIBRARY_PATH=/Applications/MAMP/Library/lib:$\\{DYLD_LIBRARY_PATH\\}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with Day and Month Names\nDESCRIPTION: Examples showing how to format dates with different combinations of day and month names, ranging from abbreviated to full names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/date-formats.md#2025-04-17_snippet_1\n\nLANGUAGE: markup\nCODE:\n```\n[[*createdon:strtotime:date=`%d %B %Y`]]\n```\n\n----------------------------------------\n\nTITLE: Resizing and Cropping Images with MODX Revolution - PHP\nDESCRIPTION: This snippet shows how to use the RezImgCrop filter to resize images to a specific width and crop them to desired dimensions. It ensures that the image maintains its proportions when processed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`r-150x,c-150x75`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying latest comments for all threads beginning with using QuipRss\nDESCRIPTION: This example shows how to get the latest 20 comments for all threads beginning with 'blog-post'. The `type` is set to `family`, the `family` is set to `blog-post` and `limit` is set to `10`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiprss.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\n[[!QuipRss? &type=`family` &family=`blog-post` &limit=`10`]]\n\n```\n\n----------------------------------------\n\nTITLE: Displaying MoneyBird Contacts\nDESCRIPTION: This snippet allows developers to display MoneyBird contacts using MODX. It can be used with or without templates to customize the output of the contacts list.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/moneybird.contacts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!MoneyBirdContacts]]\n```\n\n----------------------------------------\n\nTITLE: Fetching Photos by Tag Using Gallery\nDESCRIPTION: This snippet demonstrates how to fetch the first 10 photos tagged as 'Fun' using the Gallery snippet in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery? &tag=`Fun`]]\n```\n\n----------------------------------------\n\nTITLE: EventsCalendar2 Configuration Parameters\nDESCRIPTION: Configuration settings that control calendar behavior, including error display, week start day, and time zone adjustments\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$show_errors = 1; // Display calendar errors\n$first_day = 1; // 0: Sunday start, 1: Monday start\n$time_shift = 0; // Time zone offset in seconds\n```\n\n----------------------------------------\n\nTITLE: Basic SELECT Binding Query in MODX\nDESCRIPTION: Basic example of @SELECT binding syntax that queries page titles and IDs from the site_content table where pages are published and not deleted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/select-binding.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n@SELECT `pagetitle` AS `name`,`id` FROM `[[+PREFIX]]site_content` WHERE `published` = 1 AND `deleted` = 0\n```\n\n----------------------------------------\n\nTITLE: Implementing ChurchEventsRss in MODX Revolution\nDESCRIPTION: A basic implementation of the ChurchEventsRss snippet in a MODX resource. This uncached call will generate an RSS feed for church events using default parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/church-events-calendar/churcheventsrss-snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!ChurchEventsRss?]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Variable Data with OnTemplateVarBeforeRemove Event in PHP\nDESCRIPTION: This plugin code demonstrates how to access template variable data right before it's removed. It uses the OnTemplateVarBeforeRemove event to capture and print the complete template variable information to the error log for debugging or processing purposes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ontemplatevarbeforeremove.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnTemplateVarBeforeRemove':\n        //array tv, with all parameters\n        print_r($templateVar->toArray());\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Upcoming Events with mxCalendar in PHP\nDESCRIPTION: This snippet demonstrates how to display a list of upcoming events using the mxCalendar snippet in MODX Revolution. Key parameters include event listing limit, display type, and AJAX resource ID. The output can be customized by modifying additional parameters or using different chunks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/mxcalendar.examples.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!mxcalendar?\n    &eventListlimit=`8`\n    &displayType=`list`\n    &ajaxResourceId=`49`\n    &modalView=`1`\n    &dir=`ASC`\n]]\n```\n\n----------------------------------------\n\nTITLE: Setting Object Name Field Example\nDESCRIPTION: Example demonstrating how to set a name field value on an xPDOObject instance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/set.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$object->set('name','Billy');\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote Repository\nDESCRIPTION: Command to add the original MODX repository as an upstream remote for syncing your fork.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:modxcms/revolution.git\n```\n\n----------------------------------------\n\nTITLE: LIKE Operator in WHERE Clause\nDESCRIPTION: Shows how to use the LIKE operator for pattern matching in queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   'name:LIKE' => '%q%',\n));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Caching Placeholder Example\nDESCRIPTION: This snippet illustrates the use of a placeholder with a default value, highlighting the importance of caching considerations.  If the placeholder's value can change dynamically, it should be cached along with the snippet that sets it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n\n[[+placeholder:default=`A default value!`]]\n\n```\n\n----------------------------------------\n\nTITLE: Setting Defaults for Field Snippets in MODX\nDESCRIPTION: This snippet initializes default settings for field snippets in MODX, allowing for easy adjustments of prefixes and paths.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[!fieldSetDefaults?\n    &prefix=`myprefix`\n    &chunks_path=`/path/to/chunks/if/using/file/based/chunks/`\n    &outer_class=`ui-widget`\n]]\n```\n\n----------------------------------------\n\nTITLE: AdvSearch PageLink Chunk Default Value\nDESCRIPTION: This is the default chunk for each page link in pagination. It defines the HTML structure of a single page link, using placeholders for the link URL and the page number.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch/paging0tpl.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<span class=\\\"advsea-page\\\"><a href=\\\"[[+link]]\\\">[[+text]]</a></span>\"\n```\n\n----------------------------------------\n\nTITLE: PHP getIterator Method Syntax\nDESCRIPTION: The core method signature for xPDO::getIterator showing the required className parameter and optional criteria and cacheFlag parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getiterator.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOIterator getIterator (string $className, [xPDOCriteria|array|str|int $criteria = null], [bool|int $cacheFlag = true])\n```\n\n----------------------------------------\n\nTITLE: Quoting Inputs for xPDO.query in PHP\nDESCRIPTION: Shows how to properly quote user inputs when using xPDO.query to prevent SQL injection, including examples for quoting strings and integers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.query.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$username = $modx->quote($username);\n$sql = \"SELECT * FROM modx_users WHERE username = $username\";\n$result = $modx->query($sql);\n$row = $result->fetch(PDO::FETCH_ASSOC);\nreturn print_r($row,true);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$id = $modx->quote(1, PDO::PARAM_INT);\n$sql = \"SELECT * FROM cms_users WHERE id = $id\";\n$result = $modx->query($sql);\n$row = $result->fetch(PDO::FETCH_ASSOC);\nreturn print_r($row, true);\n```\n\n----------------------------------------\n\nTITLE: MIGX Configuration - layout_1 Formtabs\nDESCRIPTION: JSON configuration for the first MIGX layout with form tabs, defining fields for a flexible row format with image, headline, and content fields\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/varying-layout-boxes/configurator-version.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"caption\": \"Row Format\",\n  \"fields\": [{\n    \"field\": \"fake\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_2_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_2_headline\",\n    \"caption\": \"Headline\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_2_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_3_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_3_headline\",\n    \"caption\": \"Headline\",\n    \"inputTVtype\": \"hidden\"\n  }, {\n    \"field\": \"cell_3_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"hidden\"\n  }]\n}, {\n  \"caption\": \"First\",\n  \"fields\": [{\n    \"field\": \"cell_1_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"image\"\n  }, {\n    \"field\": \"cell_1_headline\",\n    \"caption\": \"Headline\"\n  }, {\n    \"field\": \"cell_1_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"richtext\"\n  }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Cache Size for PHP Thumb - MODX - Markdown\nDESCRIPTION: This setting limits the total size of the PHPThumb cache, essential for preventing excessive use of storage resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_cache_maxsize](building-sites/settings/phpthumb_cache_maxsize)\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote in Git for MODX Development\nDESCRIPTION: This command adds the official MODX repository as the 'upstream' remote in Git. This allows developers to easily update their fork from the official repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/development-environment.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/modxcms/revolution.git\n```\n\n----------------------------------------\n\nTITLE: Registering CSS File Example\nDESCRIPTION: Example showing how to register a CSS file to the HEAD tag with the 'all' media type specification.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientcss.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientCSS('assets/css/style.css', 'all');\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Field in MODX\nDESCRIPTION: This snippet demonstrates how to create a basic text field in MODX with a specified name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[[!field? &name=`name`]]\n```\n\n----------------------------------------\n\nTITLE: Using Input Helper for sekFormTools in PHP\nDESCRIPTION: This snippet demonstrates how to invoke the input helper for sekFormTools, providing a simple usage example. It illustrates how to call the 'input.helper' with an example syntax, which is helpful for integrating with jQuery calls in the context of the sekFormTools framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.helper.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[input.helper]]\"\n```\n\n----------------------------------------\n\nTITLE: Syntax for xPDO::getFields Method in PHP\nDESCRIPTION: This snippet shows the syntax for the xPDO::getFields method. It takes a string parameter representing the class name and returns an array of fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getfields.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\narray getFields (string $className)\n```\n\n----------------------------------------\n\nTITLE: Syntax for xPDOValidator::getMessages Method in PHP\nDESCRIPTION: This snippet shows the syntax for the getMessages method of the xPDOValidator class. The method returns an array of validation messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.getmessages.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\narray getMessages ()\n```\n\n----------------------------------------\n\nTITLE: Register HTML Block Before HEAD Tag - MODX PHP Method Definition\nDESCRIPTION: Method definition for registering HTML content to be injected before the closing HEAD tag. Takes a string parameter containing the HTML to inject.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientstartuphtmlblock.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid regClientStartupHTMLBlock (string $html)\n```\n\n----------------------------------------\n\nTITLE: Custom Plugins Configuration for TinyMCE\nDESCRIPTION: This snippet defines the necessary plugin configuration for TinyMCE, ensuring that the PageBreaker functionality is recognized and accessible within the editor. This is crucial for developers implementing the plugin in their projects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pagebreaker/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"pagebreak\\n\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Slideshows with jgSlideshow in MODX\nDESCRIPTION: This code demonstrates how to display multiple slideshows on a single page using the jgSlideshow snippet.  Each slideshow must have a unique `slide_div_id` to avoid conflicts. The `album_id` specifies the image album for each slideshow instance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/slideshow-manager/jgslideshow-snippet.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<div id=\\\"slider-wrapper\\\">\\n    [[!jgSlideShow?\\n        &album_id=\\`1\\`\\n    ]]\\n</div>\\n<!-- Make sure you use a different ID for each instance: -->\\n<div id=\\\"slider-wrapper2\\\">\\n    [[!jgSlideShow?\\n        &album_id=\\`8\\`\\n        &slide_div_id=\\`slider2\\`\\n    ]]\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Using getGooglePlusShares with Custom URL and Output Filter\nDESCRIPTION: Example showing how to get Google+ shares for a specific URL and format the result with the prettyNumbers output filter that comes with SocialSuite.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getgoogleplusshares.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getGooglePlusShares:prettyNumbers? &url=`http://google.com/`]]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Newsletter Subscription Form in HTML/PHP\nDESCRIPTION: HTML form for newsletter subscription that can be used as a chunk. Includes email field and hidden category field to assign subscribers to the appropriate newsletter group.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<form action=\"[[~61]]\" method=\"POST\">\n    <p>Email: <input type=\"email\" name=\"email\"></p>\n    <input type=\"hidden\" name=\"category\" value=\"Customer News\">\n    <p><input type=\"submit\" name=\"submit\" value=\"Subscribe\"></p>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic LexRatingList Usage in MODX\nDESCRIPTION: Demonstrates how to use the LexRatingList snippet with a group parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/lexrating/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[LexRatingList? &group=`articles`]]\n```\n\n----------------------------------------\n\nTITLE: Tag Filtering Snippet for Frontend in PHP\nDESCRIPTION: Prepares a query filter for retrieving gallery images based on a selected tag, useful for tag-based image filtering\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/add-image-tagging.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$tag = isset($_GET['tag']) ? (int) $_GET['tag'] : 0;\n$resource_id = $modx->getOption('resource_id',$scriptProperties,$modx->resource->get('id'));\n$output='';\nif (!empty($tag)){\n    $c = $modx->newQuery('mygalTagImage');\n    $c->leftjoin('myGallery','Image');\n    $c->where(array('tag'=>$tag,'Image.resource_id'=>$resource_id));\n    //$c->prepare();echo $c->toSql();\n    if ($collection = $modx->getCollection('mygalTagImage',$c)){\n        $image_ids = array();\n        foreach ($collection as $object){\n            $image_ids[] = $object->get('image');\n        }\n        $output = ',\"id:IN\":['.implode(',',$image_ids).']';\n    }\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for MODX CMP\nDESCRIPTION: Minimal HTML template for rendering the custom manager page, providing a container div for ExtJS components\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"doodles-panel-home-div\"></div>\n```\n\n----------------------------------------\n\nTITLE: Example URL Structure in MODX with friendly_alias_urls Enabled\nDESCRIPTION: Demonstrates how MODX generates SEO-friendly URLs based on resource aliases and content type. Shows URL structure for both standalone and nested resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/friendly_alias_urls.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwww.mysite.com/blog.html\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nwww.mysite.com/test/blog.html\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Renderer with MODx ComboBox\nDESCRIPTION: Example showing how to use the built-in grid renderer with a usergroup combo box in a column model definition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  header: _('usergroup')\n  ,dataIndex: 'usergroup'\n  ,width: 140\n  ,editor: { xtype: 'modx-combo-usergroup' ,renderer: true}\n}\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Rich Text Editor\nDESCRIPTION: Example of enabling the Rich Text Editor for content editing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-fred-name=\"rte-content\" data-fred-rte=\"true\">Default Content</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Lexicon Entries for Settings\nDESCRIPTION: Shows how to add localized strings for system setting names and descriptions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$_lang['setting_mykey'] = 'Name of My Setting';\n$_lang['setting_mykey_desc'] = 'Description of my key';\n```\n\n----------------------------------------\n\nTITLE: Getting ModX Client Startup Scripts Basic Syntax\nDESCRIPTION: Shows the basic method signature for retrieving registered startup scripts in MODX. The method returns a string containing all registered startup CSS, JavaScript, or HTML blocks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getregisteredclientstartupscripts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getRegisteredClientStartupScripts ()\n```\n\n----------------------------------------\n\nTITLE: Basic EVAL Binding Syntax in PHP\nDESCRIPTION: Demonstrates the basic syntax for using the @EVAL binding in MODX. The binding executes the specified PHP code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/eval-binding.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@EVAL php_code_here\n```\n\n----------------------------------------\n\nTITLE: Getting Last Insert ID in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->getInsertId()` for getting the last inserted ID. Use modX->lastInsertId() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n\"see modX->lastInsertId()\"\n```\n\n----------------------------------------\n\nTITLE: Simple File Widget Result Return\nDESCRIPTION: Basic example of returning a simple string from a file dashboard widget in PHP. This method directly outputs the returned value in the dashboard content panel.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/client-proofing/dashboards/widget-types/file.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn 'Hello, world!';\n```\n\n----------------------------------------\n\nTITLE: MODX Theme Gitignore Configuration\nDESCRIPTION: Gitignore file configuration to exclude MODX core files and system-generated content while preserving theme-specific assets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/initial_extract.md#2025-04-17_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n# MODX & Gitify #\n#################\n/_backup\n/config.core.php\n/connectors\n/core\n/ht.access\n/index.php\n/manager\n/assets/*\n!/assets/themes/{{your-theme-name}}\n\n# IDE files (optional or add more #\n###################################\n.idea\n.vscode\n.settings\nnbproject\n.project\n\n# OS generated files (optional) #\n#################################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\nnode_modules\nnpm-debug.log\n.sass-cache\n```\n\n----------------------------------------\n\nTITLE: Retrieving Banners at Specific Positions using MODX\nDESCRIPTION: This code snippet demonstrates how to use the BannerY snippet in MODX to display a single randomly-selected active banner at a specified position. The 'position' parameter determines which banners are retrieved, while 'sortby' and 'limit' control the ordering and number of banners displayed. The 'tpl' parameter allows for template customization. Expected inputs include MODX tag syntax parameters, and the output is rendered HTML with banners.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bannery/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[BannerY? &position=`1` &sortby=`RAND()` &limit=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Basic GalleryAlbums Snippet Usage\nDESCRIPTION: Retrieves first 10 active, prominent albums with default settings. Demonstrates the simplest way to use the GalleryAlbums snippet in a MODX template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryAlbums]]\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Database in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->delete($from, $where= \\\"\\\",$fields='')` for deleting data from a database table.  Use modX->query() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n\"see modX->query()\"\n```\n\n----------------------------------------\n\nTITLE: Basic Properties Array Structure\nDESCRIPTION: Shows the standard structure for a properties array used with getChunk for simple key-value placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$properties = array('key' => 'value');\n```\n\n----------------------------------------\n\nTITLE: Expanded Doodles Service Initialization in PHP\nDESCRIPTION: This snippet shows the expanded version of initializing the Doodles service, breaking down the path resolution steps for clarity. It demonstrates how to handle custom and default core paths.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$defaultDoodlesCorePath = $modx->getOption('core_path').'components/doodles/';\n$doodlesCorePath = $modx->getOption('doodles.core_path',null,$defaultDoodlesCorePath);\n$dood = $modx->getService('doodles','Doodles',$doodlesCorePath.'model/doodles/',$scriptProperties);\n```\n\n----------------------------------------\n\nTITLE: Initial Theme Commit Commands\nDESCRIPTION: Shell commands for extracting theme data with Gitify and performing the initial commit to the remote repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/initial_extract.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/www\ngitify extract\ngit add --all  # or git add on files you want to commit\ngit commit -m \"Initalize My Awesome Theme\"  # please write your own message\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Thumb Document Root - MODX - Markdown\nDESCRIPTION: This snippet defines the document root used by PHPThumb, necessary for accurately locating images and resources within the file structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_document_root](building-sites/settings/phpthumb_document_root)\n```\n\n----------------------------------------\n\nTITLE: MODX System Setting: archive_with Parameter\nDESCRIPTION: System setting documentation for archive_with parameter that controls zip archive handling. When enabled, forces use of PCLZip instead of ZipArchive extension for better compatibility when experiencing extraction issues.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/archive_with.md#2025-04-17_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n**Name**: Force PCLZip Archives\n**Type**: Yes/No\n**Default**: Yes\n**Available In**: Revolution 2.0.7+\n```\n\n----------------------------------------\n\nTITLE: Setting New Folder Permissions - MODX - Markdown\nDESCRIPTION: This configuration option establishes default permissions for newly created folders, essential for maintaining security protocols.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n[new_folder_permissions](building-sites/settings/new_folder_permissions)\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'contains' in MODX\nDESCRIPTION: Demonstrates the usage of 'contains' modifier for conditional output. It checks if the author's name contains \"Samuel Clemens\" and outputs \"Mark Twain\" if true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[[+author:contains=`Samuel Clemens`:then=`Mark Twain`]]\n```\n\n----------------------------------------\n\nTITLE: Processing Related Page IDs in MODX Snippet\nDESCRIPTION: This code snippet splits the input string into an array of IDs and initializes an output array for the related pages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$ids = explode(',', $input);\n$output = array();\n```\n\n----------------------------------------\n\nTITLE: Configuring printdiv with width and height\nDESCRIPTION: This example demonstrates how to customize the width and height of the popup window using the `width` and `height` parameters. This allows you to control the size of the printer-friendly version's popup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/seksitetools/seksitetools.printdiv.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[printdiv? &divID=`test` &linkText=`link` &width=`200` &height=`300`]]\n<div id=\"test\">test data</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu Items in PHP for MODx Grid\nDESCRIPTION: This PHP code snippet demonstrates how to create context menu items for each row in a MODx grid. The code iterates through items, retrieves their ID and name, and defines a 'menu' array containing the text (from a lexicon key) and handler function for each menu item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.grid.grid.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nforeach( $items as $item ) {\n    $data[] = array(\n        'id'    => $obj->get( 'id' ),\n        'name'  => $obj->get( 'name' ),\n        'menu'  => array(\n            array(\n                'text'      => $modx->lexicon( 'my_lexicon' ),\n                'handler'   => 'this.myHandler'\n            )\n        )\n    );\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Field Type Templates\nDESCRIPTION: Comprehensive template definitions for various form field types including text inputs, textareas, checkboxes, and select fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.tutorial.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- default -->\n  <input type=\"[[+type]]\" name=\"[[+name]]\" id=\"[[+key]]\" value=\"[[+current_value]]\" class=\"[[+type]] [[+class]][[+error_class]]\" size=\"[[+size:default=`40`]]\" />\n<!-- default -->\n<!-- file -->\n  <input type=\"[[+type]]\" name=\"[[+name]][[+array:notempty=`[]`]]\" id=\"[[+key]]\" class=\"[[+type]] [[+class]][[+error_class]]\" />\n<!-- file -->\n<!-- hidden -->\n  <input type=\"[[+type]]\" name=\"[[+name]]\" value=\"[[+current_value]]\" />\n<!-- hidden -->\n<!-- textarea -->\n  <textarea id=\"[[+key]]\" class=\"[[+type]] [[+class]][[+error_class]]\" name=\"[[+name]]\">[[+current_value]]</textarea>\n<!-- textarea -->\n<!-- checkbox -->\n<span class=\"boolWrap[[+error_class]]\">\n<input name=\"[[+name]][[+array:notempty=`[]`]]\" type=\"hidden\" value=\"\" />\n[[+options_html]]\n</span>\n<!-- checkbox -->\n<!-- radio -->\n<span class=\"boolWrap[[+error_class]]\">\n<input type=\"hidden\" name=\"[[+name]]\" value=\"\" />\n[[+options_html]]\n</span>\n<!-- radio -->\n<!-- select -->\n<span class=\"[[+class]][[+error_class]]\">\n<input type=\"hidden\" name=\"[[+name]][[+array:notempty=`[]`]]\" value=\"\" />\n<select name=\"[[+name]][[+array:notempty=`[]`]]\" id=\"[[+key]]\" class=\"[[+class]]\"[[+multiple:notempty=` multiple=\"multiple\"`]][[+title:notempty=` title=\"[[+title]]\"`]]>\n  [[+header:notempty=`<option value=\"[[+default_value]]\">[[+header]]</option>`]]\n  [[+options_html]]\n</select>\n</span>\n<!-- select -->\n<!-- static -->\n<span class=\"static_field[[+error_class]]\">[[!+[[+name]]]]</span>\n<!-- static -->\n<!-- submit -->\n<input id=\"[[+key]]\" class=\"button [[+type]] [[+class]]\" name=\"[[+name]]\" type=\"[[+type]]\" value=\"[[+message:default=`Submit`]]\" />\n<input id=\"[[+name]]-clear\" class=\"button [[+type]] [[+class]]\" type=\"reset\" value=\"[[+clear_message:default=`Clear Form`]]\" />\n<!-- submit -->\n<!-- option --><option value=\"[[+value]]\">[[+label]]</option><!-- option -->\n<!-- bool -->\n<span class=\"boolDiv [[+class]]\">\n<input type=\"[[+type]]\" class=\"[[+type]]\" value=\"[[+value]]\" name=\"[[+name]][[+array:notempty=`[]`]]\" id=\"[[+key]]\"  />\n<label for=\"[[+key]]\" class=\"[[+type]]\" id=\"label[[+key]]\">[[+label]]</label></span><!-- bool -->\n```\n\n----------------------------------------\n\nTITLE: Fetching Updates from Upstream MODX Repository\nDESCRIPTION: This command fetches the latest commits from the official MODX repository (upstream). Developers can then update their local clone using pull, reset, or rebase.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/development-environment.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Displaying Calendar Events with MODX eventsCalendar2 PHP\nDESCRIPTION: The first snippet demonstrates the basic usage of the eventsCalendar2 snippet, which displays a calendar of events that are children of the current resource. It requires the eventsCalendar2 snippet to be called uncached.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!eventsCalendar2]]\n```\n\n----------------------------------------\n\nTITLE: Using input.autocomplete with object property\nDESCRIPTION: This example demonstrates how to use the input.autocomplete snippet with the `object` property, which is a JSON object containing the configuration for fetching data from a MODX table. It specifies the table name (`sekftUSCities`), the field to sort by (`city_name`), and the fields to use for the value and label of the auto-complete options (`city_name`).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.autocomplete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[input.autocomplete? &object=`{\"name\": \"sekftUSCities\", \"sortby\": \"city_name\", \"value\": \"city_name\", \"label\": \"city_name\"}`]]\n```\n\n----------------------------------------\n\nTITLE: MODX System Setting Definition for New File Permissions\nDESCRIPTION: YAML frontmatter defining the new_file_permissions system setting documentation page. This setting controls the default permission mask (0644) applied to newly uploaded files in the MODX File Manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/new_file_permissions.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"new_file_permissions\"\n_old_id: \"210\"\n_old_uri: \"2.x/administering-your-site/settings/system-settings/new_file_permissions\"\n---\n```\n\n----------------------------------------\n\nTITLE: FormIt Delimiter Template Example\nDESCRIPTION: Example of the default delimiter template used for chunk type separation\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- [[+type]] -->\n```\n\n----------------------------------------\n\nTITLE: Example Usage of getFKClass in PHP\nDESCRIPTION: Demonstrates retrieving a related class name using getFKClass() by getting an xPDO object and calling the method with a field name. Shows how to get the related class name for a 'book' field on a 'myChapter' object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getfkclass.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$chapter = $xpdo->getObject('myChapter',12);\necho $chapter->getFKClass('book');\n// prints \"myBook\"\n```\n\n----------------------------------------\n\nTITLE: Basic Node Removal with Ext JS\nDESCRIPTION: Example showing basic page setup with Ext JS dependencies and simple node removal using Ext.get().remove()\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/4.-ext-js-tutorial-manipulating-nodes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<html>\n    <title>My Ext JS Test Page</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n        Ext.onReady(function() {\n            Ext.get('div2').remove();\n        });\n    </script>\n\n    <body>\n        <h1>Handling Elements</h1>\n\n        <div id=\"div1\" class=\"myDiv\">I am here to stay</div>\n\n        <div id=\"div2\" class=\"myDiv\">I will get deleted</div>\n\n        <div class=\"myclass\">One</div>\n        <div class=\"myclass\">Two</div>\n        <div class=\"myclass\">Three</div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Получение и использование конкретного раздела кэша в xPDO\nDESCRIPTION: Этот сниппет демонстрирует, как получить конкретный раздел кеша с использованием `getCacheProvider` и напрямую использовать его методы `set`, `get` и `delete`.  В конфигурации указывается `xPDO::OPT_CACHE_KEY` и `xPDO::OPT_CACHE_HANDLER` для выбора конкретного раздела и обработчика кэша. В данном примере используется `xPDOAPCCache`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/caching/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$myCache = $xpdo->cacheManager->getCacheProvider('myCache', array(\n    xPDO::OPT_CACHE_KEY => 'myCache',\n    xPDO::OPT_CACHE_HANDLER => 'cache.xPDOAPCCache',\n));\n\n$myCache->set('testdata', 'Мои кэшированные данные.');\n\necho $myCache->get('testdata');\n// outputs: Мои кэшированные данные.\n\n$myCache->delete('testdata');\n```\n\n----------------------------------------\n\nTITLE: Default Signup Email Message Template in MODX\nDESCRIPTION: The default HTML template for emails sent to new users when an account is created for them in MODX. It includes placeholders for username, password, site name, and login URL that get automatically replaced when the email is sent.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/signupemail_message.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHello [[+uid]]\n\nHere are your login details for [[+sname]] Content Manager:\n\nUsername: [[+uid]]\nPassword: [[+pwd]]\n\nOnce you log into the Content Manager ([[+surl]]), you can change your password.\n\nRegards,\nSite Administrator\n```\n\n----------------------------------------\n\nTITLE: Creating a new branch for feature/bug-fix\nDESCRIPTION: This snippet demonstrates how to create a new branch for adding a feature or fixing a bug, ensuring a clean and organized development workflow.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"git checkout -b myworkflow 2.x\"\n```\n\n----------------------------------------\n\nTITLE: Using MoneyBird NrFormat Placeholder in PHP\nDESCRIPTION: This snippet demonstrates the basic usage of the MoneyBird NrFormat placeholder to format numbers in PHP. The primary input is the placeholder itself, which can be customized with optional parameters to adjust the number of decimals, decimal separator, and thousands separator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/moneybird.nrformat.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[+placeholder:MoneyBirdNrFormat]]\"\n```\n\n----------------------------------------\n\nTITLE: Subscriber Placeholder Usage Example\nDESCRIPTION: Shows how to use various subscriber information placeholders in an email template\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eletters/eletters.templates.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nHello [[+first_name]] [[+last_name]],\n\nThank you for subscribing with [[+email]].\n```\n\n----------------------------------------\n\nTITLE: Styling Fred Sidebar Icons with CSS\nDESCRIPTION: CSS example for styling a sidebar icon using SVG background image, demonstrating the proper selector structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/sidebar_plugins.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.fred .fred--sidebar_page_settings:before {\n    background: url(data:image/svg+xml, %3Csvg xmlns=http://www.w3.org/2000/svg viewBox=0 0 …35.888-80 80 35.888 80 80 80 80-35.888 80-80z fill=%23fff/%3E%3C/svg%3E)\n        center center no-repeat;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of ChurchEventsList in PHP\nDESCRIPTION: A simple implementation that displays the next 15 events in an unordered list using the default settings of the ChurchEventsList snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/church-events-calendar/churcheventslist-snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<ul>\n[[!ChurchEventsList]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic String Concatenation in MODX\nDESCRIPTION: Examples of appending and prepending strings using cat, after/append, and before/prepend modifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_4\n\nLANGUAGE: modx\nCODE:\n```\n[[+numbooks:cat=`books`]]\n[[+totalnumber:after=`total`]]\n[[+booknum:before=`book #`]]\n```\n\n----------------------------------------\n\nTITLE: Preventing Plugin Deletion with OnBeforePluginFormDelete in PHP\nDESCRIPTION: This example demonstrates how to use the OnBeforePluginFormDelete event to prevent a specific plugin (with ID 18) from being deleted in the MODX manager. The code outputs a warning message when a deletion attempt is made.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforepluginformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforePluginFormDelete':\n        // if plugin id = 18, display a message\n        if ($id == 18){\n            $modx->event->output(\"What are you doing !? Plugin cannot be deleted \".$plugin->get('name'));\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Gallery Pagination Modification for getPage\nDESCRIPTION: Adds a critical line to enable pagination functionality within the Gallery snippet by setting the start property\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/sekfancybox-and-gallery.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$properties['start'] = $properties['offset'];\n```\n\n----------------------------------------\n\nTITLE: Getting Manager Username in MODX\nDESCRIPTION: This snippet shows how to retrieve the username of an authenticated manager user, replacing the deprecated `$_SESSION[\"mgrShortname\"]`. It checks if the user is authenticated in the manager context before retrieving the username using `modX->user->get('username')`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\"`modX->user->get('username')` when `modX->user->isAuthenticated('mgr')`\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Facebook Share Count with Output Filter\nDESCRIPTION: Demonstrates using the prettyNumbers output filter that comes with SocialSuite to format the Facebook share count for a specific URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookshares.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!getFacebookShares:prettyNumbers? &url=`http://google.com/`]]\n```\n\n----------------------------------------\n\nTITLE: Initializing modSwiftMailer Service in MODX\nDESCRIPTION: Basic service initialization for sending emails using modSwiftMailer. Required to set up the mail service before sending any emails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modswiftmailer/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('mail', 'mail.modSwiftMailer');\n```\n\n----------------------------------------\n\nTITLE: Implementing the _getTplChunk method in PHP\nDESCRIPTION: The `_getTplChunk` method attempts to load a chunk from a file. It constructs the file path using the `chunksPath` configuration, the chunk name, and the `.chunk.tpl` postfix. If the file exists, it reads the file's contents, creates a new `modChunk` object, sets the name and content, and returns the chunk. If the file does not exist, it returns `false`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n    private function _getTplChunk($name,$postfix = '.chunk.tpl') {\n        $chunk = false;\n        $f = $this->config['chunksPath'].strtolower($name).$postfix;\n        if (file_exists($f)) {\n            $o = file_get_contents($f);\n            $chunk = $this->modx->newObject('modChunk');\n            $chunk->set('name',$name);\n            $chunk->setContent($o);\n        }\n        return $chunk;\n    }\n```\n\n----------------------------------------\n\nTITLE: Default Element Format Example\nDESCRIPTION: Shows the format for specifying a default Fred Element and target area. The format uses an ID and target separated by a pipe character.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/cmp/themes.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nID|target\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Form Template in PHP for mhPayPal\nDESCRIPTION: This code snippet shows the default form template for the mhPayPal snippet. It includes fields for currency selection, amount input, and submission, along with error handling placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage/templating.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<form action=\"[[+action]]\" method=\"[[+config.method]]\" id=\"mhpp_form_[[+config.id]]\">\n    <p>Your donation will be safely processed by PayPal, allowing you to donate via a PayPal account or directly with a credit card.</p>\n    [[+errors:notempty=`\n        <p>Uh oh.. The following error(s) were found in your form: <br />[[+errors]]</p>\n    `]]\n    <div>\n        <label for=\"mhpp_amount_[[+config.id]]\">Amount</label>\n        <div>\n            <select name=\"currency\" id=\"mhpp_currency_[[+config.id]]\">\n                <option value=\"EUR\"[[+currency_EUR:notempty=` selected=\"selected\"`]]>EUR &euro;</option>\n                <option value=\"USD\"[[+currency_USD:notempty=` selected=\"selected\"`]]>USD &#36;</option>\n                <option value=\"GBP\"[[+currency_GBP:notempty=` selected=\"selected\"`]]>GBP &#163;</option>\n            </select>\n\n\n            <input type=\"text\" name=\"amount\" id=\"mhpp_amount_[[+config.id]]\" />\n            [[+currency.error]] [[+amount.error]]\n        </div>\n    </div>\n\n    <div>\n        <div>\n            <input type=\"submit\" name=\"[[+config.submitVar]]\" value=\"Donate!\" />\n        </div>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Error Page Redirect\nDESCRIPTION: Sends the user to the default site error page without any additional configuration. This method is used when a system-wide error occurs and the user needs to be redirected to a standard error handling page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.senderrorpage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendErrorPage();\n```\n\n----------------------------------------\n\nTITLE: Potential Redirect Loop with getResourceField\nDESCRIPTION: This example highlights a potential error with getResourceField that can cause a redirect loop. If the 'featured_article' TV is not set, the snippet defaults to the current page's ID, potentially creating an infinite loop if the snippet call is within the requested content field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresourcefield/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n [[getResourceField? &id=`[[*featured_article]]` &field=`content`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Default File Template for FileLister in HTML\nDESCRIPTION: This snippet defines the default HTML structure for individual file entries displayed by the FileLister snippet. The template uses placeholders to dynamically insert file-related data such as name, size, and modification date. It requires the FileLister snippet to function properly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/filelister/filetpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<tr class=\"[[+cls]]\">\n    <td class=\"feo-filename\">[[+link]]</td>\n    <td class=\"feo-filesize\">[[+filesize]]</td>\n    <td class=\"feo-lastmod\">[[+lastmod:date=`[[+dateFormat]]`]]</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Searchability for New Resources in MODX\nDESCRIPTION: The 'search_default' setting in MODX controls whether newly created resources are automatically set as searchable. When enabled, it makes all new resources searchable by default, potentially improving content discoverability.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/search_default.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"search_default\"\n_old_id: \"269\"\n_old_uri: \"2.x/administering-your-site/settings/system-settings/search_default\"\n---\n\n## search\\_default\n\n**Name**: Published Default\n**Type**: Yes/No\n**Default**: Yes\n\nIf true, makes all new resources searchable by default.\n```\n\n----------------------------------------\n\nTITLE: MODX Default Controllers Path\nDESCRIPTION: Default path for MODX manager controllers that need to be copied when creating custom themes\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/custom-manager-themes.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nmanager/controllers/default\n```\n\n----------------------------------------\n\nTITLE: Original Settings Configuration in Fred CMS\nDESCRIPTION: Example of an original option set configuration including background image, background settings import, scroll link toggle, and text-based link input.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/override.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"settings\": [\n        {\n            \"name\": \"image\",\n            \"label\": \"Background Image\",\n            \"type\": \"image\",\n            \"value\": \"assets/themes/starter/img/Fred-hero.jpg\"\n        },\n        {\n            \"fred-import\": \"background_settings\"\n        },\n        {\n            \"name\": \"linkscroll\",\n            \"label\": \"Scroll Link\",\n            \"type\": \"toggle\",\n            \"value\": true\n        },\n        {\n            \"name\": \"link\",\n            \"label\": \"Link anchor or URL\",\n            \"type\": \"text\",\n            \"value\": null\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Albums via sekUserGalleries.search\nDESCRIPTION: This snippet enables users to search through album titles, descriptions, and keywords, facilitating easier navigation and content discovery within the gallery.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n[sekUserGalleries.search]\n```\n\n----------------------------------------\n\nTITLE: Logging with File and Line Information in PHP\nDESCRIPTION: Demonstrates logging an error message with additional file and line number information using PHP magic constants.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->log(xPDO::LOG_LEVEL_ERROR, 'This is my error message...', '', 'MySnippet', __FILE__, __LINE__);\n```\n\n----------------------------------------\n\nTITLE: Calling a Property Set in a Snippet in MODX\nDESCRIPTION: This snippet illustrates how to call a property set within a snippet and override parameters defined in the set. In this example, the 'user' parameter defined in the 'DebugMode' property set is overridden with the value '1' in the snippet call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/properties-and-property-sets.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[TestSnippet@DebugMode? &user=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Using Comment Tags in MODX Content\nDESCRIPTION: MODX 2.2 introduces comment tags that allow users to add comments in their content. These comments are removed before page rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/2.2.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[- comment goes here]]\n```\n\n----------------------------------------\n\nTITLE: Overriding Content in MODX OnLoadWebDocument Event\nDESCRIPTION: This code shows how to override a resource's content completely after it has been cached by modifying the _content property. This allows for dynamic content manipulation after the initial caching process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onloadwebdocument.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->resource->_content = 'Content override';\n```\n\n----------------------------------------\n\nTITLE: Setting Up StoreFinder Base Path\nDESCRIPTION: Initializes the base path for the StoreFinder component, with fallback to the default MODX components directory if no custom path is specified.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @package storefinder\n */\n$base_path = !empty($base_path) ? $base_path : $modx->getOption('core_path').'components/storefinder/';\n```\n\n----------------------------------------\n\nTITLE: getDate with Offset Parameter\nDESCRIPTION: Generate a timestamp with a specified time offset using strtotime() compatible relative formats\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getdate/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[getDate:date=`%Y-%m-%d`? &offset=`-2 month`]]\n```\n\n----------------------------------------\n\nTITLE: Default tagLister tpl Chunk Template in PHP\nDESCRIPTION: This is the default template for the tpl Chunk used with the tagLister snippet. It creates a list item with a link to the target resource, displaying the tag name and count.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/taglister/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+cls]]\">\n<a href=\"[[~[[+target]]? &[[+tagVar]]=`[[+tag]]`]]\">[[+tag]]</a> ([[+count]])\n</li>\n```\n\n----------------------------------------\n\nTITLE: Single User Chunk Template\nDESCRIPTION: Example chunk template for displaying user information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nUsername: [[+username]]<br/>\nActive?:  [[+active]]<br/>\n<hr/>\n```\n\n----------------------------------------\n\nTITLE: Loading xPDO Manager and Generator in Schema Build Script\nDESCRIPTION: PHP code to load the xPDOManager and xPDOGenerator instances, which are required to build schema map files from the XML schema definition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$manager= $modx->getManager();\n$generator= $manager->getGenerator();\n```\n\n----------------------------------------\n\nTITLE: Recording a Hit for Specific Resource in MODX Revolution\nDESCRIPTION: This snippet records a page hit for resource with ID 3.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &punch=`3`]]\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de Snippet No Almacenado en Caché con Marcadores de Posición en PHP\nDESCRIPTION: Demuestra cómo llamar a un snippet no almacenado en caché que establece marcadores de posición, asegurándose de que los marcadores de posición también estén configurados como no almacenados en caché.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\nHola [[!+username]],\n```\n\n----------------------------------------\n\nTITLE: Configuring allow_multiple_emails Setting in MODX Revolution\nDESCRIPTION: The 'allow_multiple_emails' setting is a Yes/No option that determines if users can share the same email address in MODX Revolution. When enabled, multiple users can use the same email address. This setting is available from Revolution 2.0.6 onwards.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/allow_multiple_emails.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Allow Duplicate Emails for Users\n**Type**: Yes/No\n**Default**: Yes\n**Available In**: Revolution 2.0.6+\n```\n\n----------------------------------------\n\nTITLE: Advanced Search Snippet with Custom Templates\nDESCRIPTION: Demonstrates customizing search snippet with specific container and album list templates. Allows fine-tuning of search result presentation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.search.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!search? &tplContainer=`search.container` &tplAlbumList=`users.gallery.albumlist`]]\n```\n\n----------------------------------------\n\nTITLE: Creating Combobox with Database Object in PHP\nDESCRIPTION: Shows how to generate a combobox using a database object with state abbreviations and names\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.combobox.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[input.combobox? &object=`[{\"name\": \"sekftStates\", \"sortby\": \"state_name\", \"value\": \"state_abbr\", \"label\": \"state_name\"}]`]]\n```\n\n----------------------------------------\n\nTITLE: Using imageHERE with Property Sets in MODX\nDESCRIPTION: Syntax for using imageHERE with a predefined property set in MODX. This allows reusing configurations by setting up property sets in the Chunk properties tab.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/imagehere/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n[[$imageHERE@myPropertySet]]\n```\n\n----------------------------------------\n\nTITLE: Logging Chunk Deletion with OnChunkFormDelete in MODX\nDESCRIPTION: This plugin demonstrates how to log the ID and name of a deleted Chunk when the OnChunkFormDelete event is triggered in MODX. It accesses the chunk object and ID, then uses the modX::log function to write an error message to the MODX error log.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onchunkformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnChunkFormDelete':\n        $n = $chunk->get('name');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'Был удален чанк с id '.$id.' его звали '.$n.' сердца у тебя нет!');\n        break;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Preventing Snippet Deletion with OnBeforeSnipFormDelete Event in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the OnBeforeSnipFormDelete event in a MODX plugin to prevent snippet deletion. It checks the event name and outputs a message when a snippet deletion is attempted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforesnipformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeSnipFormDelete':\n        $modx->event->output(\"You cannot delete snippets!?\");\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying currentPageTpl in MODX with PHP\nDESCRIPTION: This snippet outputs the current page number using MODX's SimpleSearch snippet. It utilizes the &currentPageTpl property, showing a span element with a class 'sisea-page sisea-current-page'. The main parameter is 'text', representing the text or number of each page. No dependencies are required other than the MODX framework and SimpleSearch plugin.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch/currentpagetpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<span class=\\\"sisea-page sisea-current-page\\\">[[+text]]</span>\n```\n\n----------------------------------------\n\nTITLE: Adding Database Fields in PHP Resolver\nDESCRIPTION: PHP code to add the code field and index to the database through MODX's schema manager\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/self-subscribe.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$manager->addField('sxSubscriber', 'code');\n$manager->addIndex('sxSubscriber', 'code');\n```\n\n----------------------------------------\n\nTITLE: Creating Update Method for MODX Grid in JavaScript\nDESCRIPTION: Implements the updateDoodle method that creates and displays a window for editing a Doodle record. It reuses the window object if it already exists and sets the form values from the selected record.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n,updateDoodle: function(btn,e) {\n    e.preventDefault();\n    if (!this.updateDoodleWindow) {\n        this.updateDoodleWindow = MODx.load({\n            xtype: 'doodles-window-doodle-update'\n            ,record: this.menu.record\n            ,listeners: {\n                'success': {fn:this.refresh,scope:this}\n            }\n        });\n    }\n    this.updateDoodleWindow.setValues(this.menu.record);\n    this.updateDoodleWindow.show(e.target);\n}\n```\n\n----------------------------------------\n\nTITLE: Item Zoom Template in Cliche\nDESCRIPTION: This PHP snippet provides a template for displaying image items with zoom in Cliche galleries, using MODX and Cliche framework dependencies. It results in an HTML DL element for dynamic image display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<dl class=\"item\">\n    <dt class=\"album-icon\">\n        <a class=\"zoom\" title=\"[[+name]]\" href=\"[[+image]]\">\n            <img width=\"[[+width]]\" height=\"[[+height]]\" title=\"[[+name]]\" alt=\"[[+description]]\" class=\"attachment-thumbnail\" src=\"[[+thumbnail]]\"/>\n        </a>\n    </dt>\n</dl><!-- End .item -->\n```\n\n----------------------------------------\n\nTITLE: Client Config Integration Configuration - JSON\nDESCRIPTION: Extract template configuration for integrating Client Config package, including package details and vehicle configuration for cgGroup class with settings relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/cmp/theme_settings_and_resolvers.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        {\n            \"name\": \"clientconfig\",\n            \"class\": \"ClientConfig\"\n        }\n    ],\n    \"vehicles\": [\n        {\n            \"object\": {\n                \"class\": \"cgGroup\",\n                \"graph\": {\n                    \"Settings\": []\n                }\n            },\n            \"attributes\": {\n                \"preserve_keys\": false,\n                \"update_object\": true,\n                \"unique_key\": \"label\",\n                \"related_objects\": true,\n                \"related_object_attributes\": {\n                    \"Settings\": {\n                        \"preserve_keys\": false,\n                        \"update_object\": true,\n                        \"unique_key\": [\"key\", \"group\"]\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Package Output Path\nDESCRIPTION: Shows the file path and naming convention for the generated theme package file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/cmp/themes.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncore/packages/{{theme-name}}.transport.zip\n```\n\n----------------------------------------\n\nTITLE: Advanced Ext JS Message Box with Show Method\nDESCRIPTION: This JavaScript code demonstrates the use of Ext.MessageBox.show() to create a customized message box with specific title, message, width, buttons, a callback function, and an icon. The example uses predefined constants for the buttons (YESNOCANCEL) and icon (QUESTION).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\nExt.onReady(function() {\n    var myCallback = function(btn, text) {\n        console.info('Вы нажали ' + btn);\n        if (text) {\n            console.info('Вы ввели '+ text);\n        }\n    }\n    Ext.MessageBox.show({\n        title : 'Будьте осторожны!',\n        msg : 'Вы уверены?',\n        width : 300,\n        buttons : Ext.MessageBox.YESNOCANCEL,\n        fn : myCallback,\n        icon : Ext.MessageBox.QUESTION\n    });\n});\n</script>\n\"\n```\n\n----------------------------------------\n\nTITLE: Reversing a Hex Color with Percentage in MODX with CSSSweet\nDESCRIPTION: This snippet demonstrates how to reverse a hex color value (to either white or black) and apply a 60% opacity using the 'rev' option with the 'lighten' output modifier.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.lighten.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+color:lighten=`rev60`]]\n```\n\n----------------------------------------\n\nTITLE: Custom Snippet Combobox Generation in PHP\nDESCRIPTION: Demonstrates creating a combobox using a custom XPDO snippet that retrieves and transforms state data\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.combobox.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!input.combobox? &snippet=`xpdo`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n$items = $modx->getCollection('sekftStates');\n$itemListArray = array();\nforeach ($items as $item) {\n    $itemArray = $item->toArray();\n    $itemList = array();\n    $itemList['value'] = $itemArray['id'];\n    $itemList['label'] = $itemArray['state_name'];\n    $itemListArray[] = $itemList;\n}\nreturn $modx->toJSON($itemListArray);\n```\n\n----------------------------------------\n\nTITLE: Defining getSelectColumns Method Signature\nDESCRIPTION: Static method signature showing parameters for generating SQL column names from an xPDOObject. Parameters include xPDO instance, class name, table alias, column prefix, columns array, and exclude flag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getselectcolumns.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstatic string getSelectColumns (\n   xPDO &$xpdo,\n   string $className,\n   [string $tableAlias = ''],\n   [string $columnPrefix = ''],\n   [array $columns = array ()],\n   [boolean $exclude = false]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Weather Widget in MODX Aside\nDESCRIPTION: An example of how to implement a custom weather snippet in a MODX template sidebar. This creates a dynamic weather widget that displays current weather conditions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<aside>\n    <section>\n        <h4>Current Weather</h4>\n        [[getWeather]]\n    </section>\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Getting Foreign Key Class Name in PHP using xPDOObject\nDESCRIPTION: Method signature for getFKClass() which takes a string parameter representing the field key and returns the related class name. Used for retrieving class names in one-to-one relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getfkclass.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid getFKClass (string $k)\n```\n\n----------------------------------------\n\nTITLE: Including ExtJS Dependencies\nDESCRIPTION: Basic HTML markup showing required ExtJS CSS and JavaScript file includes\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/2.-ext-js-tutorial-ajax-include.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n<script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n<script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Field Templates in HTML\nDESCRIPTION: Examples of default templates for field types (FieldTypesTpl) and field wrappers (FieldWrapTpl) used by the 'field' snippet. These templates use special separators to manage different field types.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- default -->\n<input type=\"[[+type]]\" name=\"[[+name]]\" id=\"[[+key]]\" value=\"[[+current_value]]\" class=\"[[+type]] [[+class]][[+error_class]]\" />\n<!-- default -->\n<!-- hidden -->\n<input type=\"[[+type]]\" name=\"[[+name]]\" value=\"[[+current_value]]\" />\n<!-- hidden -->\n<!-- textarea -->\n<textarea id=\"[[+key]]\" class=\"[[+type]] [[+class]][[+error_class]]\" name=\"[[+name]]\">[[+current_value]]</textarea>\n<!-- textarea -->\n```\n\n----------------------------------------\n\nTITLE: MODX Settings Documentation Links\nDESCRIPTION: Markdown list of links to individual MODX system settings documentation pages, organized numerically from 140-252.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n140. [manager_login_url_alternate](building-sites/settings/manager_login_url_alternate)\n141. [manager_theme](building-sites/settings/manager_theme)\n[...]\n251. [which_element_editor](building-sites/settings/which_element_editor)\n252. [xhtml_urls](building-sites/settings/xhtml_urls)\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Group using modX::runProcessor in PHP\nDESCRIPTION: This code snippet demonstrates how to invoke the `runProcessor` method of the modX class to create a new resource group. The method takes the specified action and an array of properties needed for resource group creation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.runprocessor.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Cоздать новую группу ресурсов программно\n$response = $modx->runProcessor('security/resourcegroup/create', array(\n    'name' => 'Test', // название новой группы ресурсов\n    'access_contexts' => 'mgr,web', // контекст(ы) новой группы ресурсов ограничивает доступ в\n    'access_admin' => 1, // добавляет доступ к этой группе ресурсов, доступ к этой группе ресурсов для Administrators\n    'access_parallel' => 1, // создает новую группу пользователей \"Test\" параллельно с группой ресурсов\n    'access_usergroups' => 'Editors', // добавляет доступ к новой группе ресурсов для группы пользователей \"Editors\"\n));\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information in the Front-End with MODX Tags\nDESCRIPTION: How to access a logged-in user's information in the front-end of a MODX site using MODX tags. This snippet demonstrates how to display the user ID and username when a user is logged in.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/users.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+modx.user.id]] - Prints the ID\n[[+modx.user.username]] - Prints the username\n```\n\n----------------------------------------\n\nTITLE: Option Retrieval with Default Value in PHP\nDESCRIPTION: Shows how to retrieve a configuration option with a fallback default value if the option is not set.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/configuration-accessors/getoption.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$test = $xpdo->getOption('test',null,'123');\n```\n\n----------------------------------------\n\nTITLE: Using MODX System Settings in Template CSS References\nDESCRIPTION: This code snippet demonstrates how to use the [[++theme_path]] system setting in CSS file references within a MODX template, allowing for dynamic file paths based on theme configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fx2themebase/fx2.how-to-use-fx2/for-theme-authors.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[++theme\\_path]]\n```\n\n----------------------------------------\n\nTITLE: Linking to PayPal API Credentials Guide in HTML\nDESCRIPTION: This HTML snippet provides a link to PayPal's guide on obtaining API credentials, which is a requirement for using mhPayPal.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/index.md#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"https://cms.paypal.com/us/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_api_ECAPICredentials\">How to obtain your API Credentials...</a>\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'select' in MODX\nDESCRIPTION: Demonstrates the usage of 'select' modifier for conditional output. It outputs a replacement if the value is in the list of values before the equals sign.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:select=`0=Value 0&1=Value 1&2=Value 2`]]\n```\n\n----------------------------------------\n\nTITLE: Using Select with toArray() Method\nDESCRIPTION: Demonstrates how to properly use toArray() with select() to ensure only selected fields are returned.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('modUser');\n$query->select('id,username');\n$users = $xpdo->getCollection('modUser',$query);\nforeach ($users as $u) {\n    print_r($u->toArray()); // will print ALL fields.\n    print_r($u->toArray('',false,true)); // will print ONLY the selected fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Setting Groups in MODX Options\nDESCRIPTION: This JSON snippet demonstrates how to group settings in MODX using 'group' and 'settings' keys. The 'group' key defines the group's name, which appears as a label in the user interface, while 'settings' is an array containing the specific settings for the group. This approach helps organize related options and enhances user navigation within the settings panel.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/settings.md#2025-04-17_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\"group\": \"Group Name\",\"settings\": [{…},{…}]}\n```\n\n----------------------------------------\n\nTITLE: Using modX::getTree Example\nDESCRIPTION: Practical example demonstrating how to get a resource tree starting from Resource ID 12 with a maximum depth of 5 levels.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.gettree.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$treeArray = $modx->getTree(12,5);\n```\n\n----------------------------------------\n\nTITLE: Galleriffic Item Template in Cliche\nDESCRIPTION: This PHP template is part of the Galleriffic plugin for Cliche, which uses MODX and Cliche. It creates an item list for Galleriffic galleries, with download options and descriptive captions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<li>\n    <a class=\"thumb\" name=\"leaf\" href=\"[[+image]]\" title=\"[[+name]]\">\n        <img src=\"[[+thumbnail]]\" alt=\"Title #[[+id]]\" />\n    </a>\n    <div class=\"caption\">\n        <div class=\"download\">\n            <a href=\"[[+image]]\">Download Original</a>\n        </div>\n        <div class=\"image-title\">[[+name]]</div>\n        <div class=\"image-desc\">[[+description]]</div>\n    </div>\n</li>\n```\n\n----------------------------------------\n\nTITLE: UpdateProfile Form HTML\nDESCRIPTION: This is an example of the HTML form required for the UpdateProfile snippet. It includes various profile fields such as fullname, email, phone, address, etc.  It must be placed on a resource where the UpdateProfile snippet is called.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.updateprofile.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"update-profile\">\n    <div class=\"updprof-error\">[[+error.message]]</div>\n    [[+login.update_success:is=`1`:then=`[[%login.profile_updated? &namespace=`login` &topic=`updateprofile`]]`]]\n\n    <form class=\"form\" action=\"[[~[[*id]]]]\" method=\"post\">\n        <input type=\"hidden\" name=\"nospam\" value=\"\" />\n\n        <label for=\"fullname\">[[!%login.fullname? &namespace=`login` &topic=`updateprofile`]]\n            <span class=\"error\">[[+error.fullname]]</span>\n        </label>\n        <input type=\"text\" name=\"fullname\" id=\"fullname\" value=\"[[+fullname]]\" />\n\n        <label for=\"email\">[[!%login.email]]\n            <span class=\"error\">[[+error.email]]</span>\n        </label>\n        <input type=\"text\" name=\"email\" id=\"email\" value=\"[[+email]]\" />\n\n        <label for=\"phone\">[[!%login.phone]]\n            <span class=\"error\">[[+error.phone]]</span>\n        </label>\n        <input type=\"text\" name=\"phone\" id=\"phone\" value=\"[[+phone]]\" />\n\n        <label for=\"mobilephone\">[[!%login.mobilephone]]\n            <span class=\"error\">[[+error.mobilephone]]</span>\n        </label>\n        <input type=\"text\" name=\"mobilephone\" id=\"mobilephone\" value=\"[[+mobilephone]]\" />\n\n        <label for=\"fax\">[[!%login.fax]]\n            <span class=\"error\">[[+error.fax]]</span>\n        </label>\n        <input type=\"text\" name=\"fax\" id=\"fax\" value=\"[[+fax]]\" />\n\n        <label for=\"address\">[[!%login.address]]\n            <span class=\"error\">[[+error.address]]</span>\n        </label>\n        <input type=\"text\" name=\"address\" id=\"address\" value=\"[[+address]]\" />\n\n        <label for=\"country\">[[!%login.country]]\n            <span class=\"error\">[[+error.country]]</span>\n        </label>\n        <input type=\"text\" name=\"country\" id=\"country\" value=\"[[+country]]\" />\n\n        <label for=\"city\">[[!%login.city]]\n            <span class=\"error\">[[+error.city]]</span>\n        </label>\n        <input type=\"text\" name=\"city\" id=\"city\" value=\"[[+city]]\" />\n\n        <label for=\"state\">[[!%login.state]]\n            <span class=\"error\">[[+error.state]]</span>\n        </label>\n        <input type=\"text\" name=\"state\" id=\"state\" value=\"[[+state]]\" />\n\n        <label for=\"zip\">[[!%login.zip]]\n            <span class=\"error\">[[+error.zip]]</span>\n        </label>\n        <input type=\"text\" name=\"zip\" id=\"zip\" value=\"[[+zip]]\" />\n\n        <label for=\"website\">[[!%login.website]]\n            <span class=\"error\">[[+error.website]]</span>\n        </label>\n        <input type=\"text\" name=\"website\" id=\"website\" value=\"[[+website]]\" />\n\n        <br class=\"clear\" />\n\n        <div class=\"form-buttons\">\n            <input type=\"submit\" name=\"login-updprof-btn\" value=\"[[!%login.update_profile]]\" />\n        </div>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Create Button to Grid Toolbar in JavaScript\nDESCRIPTION: Adds a create button to the top toolbar of the grid that opens a create window form when clicked.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n,{\n   text: _('doodles.doodle_create')\n   ,handler: { xtype: 'doodles-window-doodle-create' ,blankValues: true }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Invoices Using MoneyBird\nDESCRIPTION: This snippet is designed to list the invoices of all contacts associated with a specific user in the MODX system, allowing for easy access to invoice information through the MoneyBird integration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// MoneyBird.Invoices snippet to fetch and display user invoices\n$invoices = moneybird_invoices($user_id);\nforeach ($invoices as $invoice) {\n    echo $invoice->invoice_number . ' - ' . $invoice->date . '\\n';\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Performing Confirmation Dialog with AJAX Request\nDESCRIPTION: Demonstrates a complex confirmation dialog with custom URL, parameters, and event listeners for world destruction scenario\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.msg.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.msg.confirm({\n   title: 'Вы уверены?',\n   text: 'Вы точно хотите уничтожить этот мир? Это необратимо.',\n   url: 'http://rest.endofdays.com/armageddon/',\n   params: {\n      deleteWorld: true\n   },\n   listeners: {\n        'success':{fn: function(r) {\n             MODx.clearCache();\n        },scope:true}\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Resource Class Format\nDESCRIPTION: Shows the format for specifying custom resource classes using lowercase lexicon key and className. The classes must extend modResource and require a delegate path setting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/custom_resource_classes.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwiki_resource:WikiResource\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Manager Theme Header with HTTP_MODAUTH\nDESCRIPTION: This snippet demonstrates the corrected script inclusion in the `header.tpl` file, adding the `HTTP_MODAUTH` token. This is crucial for custom manager themes to function correctly after upgrading to MODX versions 2.8.2 and later. By including the token, the manager can properly load the configuration due to increased security measures.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/2.8.2.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{$_config.connectors_url}modx.config.js.php?action={$smarty.get.a|default|htmlspecialchars}{if $_ctx}&wctx={$_ctx}{/if}&HTTP_MODAUTH={$_authToken|default|htmlspecialchars}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Setting Tag Syntax in MODX\nDESCRIPTION: This snippet shows the syntax for referencing MODX System Settings, Context Settings, and User Settings using tags in the form of [[++SettingName]].\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/glossary.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[[++SettingName]]\n```\n\n----------------------------------------\n\nTITLE: Using Chunks in MODX Templates\nDESCRIPTION: A template implementation that uses MODX Chunks to modularize the template. This approach allows for easier maintenance by separating header, footer, and sidebar components into reusable chunks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[$headerHTML]]\n    <main>\n        [[*content]]\n    </main>\n    [[$aside]]\n[[$footerHTML]]\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Exercise Wrapper Template - HTML\nDESCRIPTION: Wrapper chunk template for containing multiple exercise items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    [[+exerplan.items]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Event Parameters Table in Markdown\nDESCRIPTION: Markdown table showing the parameters available in the OnFileManagerFileCreate event, including path and source object details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onfilemanagerfilecreate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name   | Description                                       |\n| ------ | ------------------------------------------------- |\n| path   | Contains the full path to the newly created file. |\n| source | Contains the mediasource object.                  |\n```\n\n----------------------------------------\n\nTITLE: Embedding Chunks within Chunks in MODX\nDESCRIPTION: An example of how to embed one MODX Chunk (metaData) inside another (headerHTML). This technique allows for greater modularity and easier maintenance of template components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\" itemscope itemtype=\"http://schema.org/Organization\">\n<head>\n   <meta charset=\"UTF-8\">\n   <base href=\"[[!++site_url]]\" />\n   <title>[[*pagetitle]]</title>\n   [[$metaData]]\n   [[- Continue to insert your CSS, Scripts and other assets here. ]]\n</head>\n<body>\n    <!-- Header Start -->\n    <header>\n        <nav>\n            <ul>\n                <li class=\"active\"><a href=\"#\">Home</a></li>\n                <li><a href=\"#\">About</a></li>\n                <li><a href=\"#\">Blog</a></li>\n            </ul>\n        </nav>\n    </header>\n    <!-- Header End -->\n```\n\n----------------------------------------\n\nTITLE: SELECT Query with Empty Option\nDESCRIPTION: Query that includes a blank option in the results using UNION ALL, useful for dropdown lists that need a 'none' option.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/select-binding.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n@SELECT '-none-' AS username, 0 AS id UNION ALL\nSELECT `username`,`id` FROM `[[+PREFIX]]users` WHERE `active` = 1 ORDER BY username ASC\n```\n\n----------------------------------------\n\nTITLE: Defining XML Fields (Columns)\nDESCRIPTION: This XML snippet defines the fields (columns) for the sfStore object. Each field includes attributes like key, dbtype, precision, phptype, null, default, and index.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n\"<field key=\\\"name\\\" dbtype=\\\"varchar\\\" precision=\\\"100\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" index=\\\"index\\\" />\\n<field key=\\\"address\\\" dbtype=\\\"varchar\\\" precision=\\\"255\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n<field key=\\\"city\\\" dbtype=\\\"varchar\\\" precision=\\\"255\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n<field key=\\\"state\\\" dbtype=\\\"varchar\\\" precision=\\\"255\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n<field key=\\\"zip\\\" dbtype=\\\"varchar\\\" precision=\\\"10\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"0\\\" index=\\\"index\\\" />\\n<field key=\\\"country\\\" dbtype=\\\"varchar\\\" precision=\\\"20\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n<field key=\\\"phone\\\" dbtype=\\\"varchar\\\" precision=\\\"20\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n<field key=\\\"fax\\\" dbtype=\\\"varchar\\\" precision=\\\"20\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n<field key=\\\"active\\\" dbtype=\\\"int\\\" precision=\\\"1\\\" attributes=\\\"unsigned\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Basic PeopleGroup Usage in PHP\nDESCRIPTION: Basic example showing how to display the HR Department user group and its users. Uses placeholders to output the group name, user count, and list of users.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroup.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[PeopleGroup? &usergroup=`HR Department` &toPlaceholder=`users`]]\n\n<h2>[[+peoplegroups.name]] ([[+peoplegroups.userCount]] Users)</h2>\n\n<ul>\n[[+users]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Returning Timestamp with EVAL Binding in PHP\nDESCRIPTION: Example of using @EVAL binding to return the current timestamp. This demonstrates how to execute a simple PHP statement within the binding.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/eval-binding.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@EVAL return \"The time stamp is now \".time();\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for ZIP Collection with xPDO\nDESCRIPTION: Defines an XML model for the ZIP collection used in conjunction with xPDO in MODX, describing object relationships and table structures. Important for ensuring correct functioning of getCollectionGraph.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/graphs.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"sw_zipCode\" version=\"1.0\" baseClass=\"xPDOObject\" platform=\"mysql\" defaultEngine=\"MyISAM\">\n<object class=\"class=\"City\" table=\"city\" extends=\"xPDOSimpleObject\">\n    <field key=\"cityname\" dbtype=\"varchar\" precision=\"50\" phptype=\"string\" null=\"false\"/>\n</object>\n<object class=\"Cityzip\" table=\"cityzip\" extends=\"xPDOSimpleObject\">\n    <field key=\"city\" dbtype=\"int\" precision=\"10\" phptype=\"integer\" null=\"false\"/>\n    <field key=\"zip\" dbtype=\"int\" precision=\"5\" phptype=\"integer\" null=\"false\"/>\n</object>\n<object class=\"County\" table=\"county\" extends=\"xPDOSimpleObject\">\n    <field key=\"countyname\" dbtype=\"varchar\" precision=\"35\" phptype=\"string\" null=\"true\" index=\"index\"/>\n</object>\n<object class=\"States\" table=\"states\" extends=\"xPDOSimpleObject\">\n    <field key=\"statename\" dbtype=\"varchar\" precision=\"40\" phptype=\"string\" null=\"false\" index=\"index\"/>\n    <field key=\"abbrv\" dbtype=\"char\" precision=\"2\" phptype=\"string\" null=\"false\"/>\n</object>\n<object class=\"Timezones\" table=\"timezones\" extends=\"xPDOSimpleObject\">\n    <field key=\"tzname\" dbtype=\"varchar\" precision=\"20\" phptype=\"string\" null=\"true\" index=\"index\"/>\n</object>\n<object class=\"Zip\" table=\"zips\" extends=\"xPDOSimpleObject\">\n    <field key=\"city\" dbtype=\"varchar\" precision=\"50\" phptype=\"string\" null=\"true\"/>\n    <field key=\"areacode\" dbtype=\"int\" precision=\"3\" phptype=\"integer\" null=\"true\"/>\n    <field key=\"lat\" dbtype=\"float\" phptype=\"float\" null=\"true\"/>\n    <field key=\"lon\" dbtype=\"float\" phptype=\"float\" null=\"true\"/>\n    <field key=\"sw_county_id\" dbtype=\"int\" precision=\"4\" phptype=\"integer\" null=\"false\" index=\"pk\"/>\n    <field key=\"sw_states_id\" dbtype=\"int\" precision=\"2\" phptype=\"integer\" null=\"false\" index=\"pk\"/>\n    <field key=\"sw_timezones_id\" dbtype=\"int\" precision=\"2\" phptype=\"integer\" null=\"false\" index=\"pk\"/>\n\n    <aggregate alias=\"TZ\" class=\"Timezones\" local=\"tz_id\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n    <aggregate alias=\"ST\" class=\"County\" local=\"sw_county_id\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n    <aggregate alias=\"CT\" class=\"States\" local=\"sw_states_id\" foreign=\"id\" cardinality=\"one\" owner=\"foreign\" />\n</object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Extended Fields\nDESCRIPTION: This snippet illustrates how to access nested fields within an extended field container in the Profile output. It shows how to retrieve specific values using the . syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-custom-fields.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\n\nValue of nested attribute: [[+test.below]]\n```\n\n----------------------------------------\n\nTITLE: Using cp Command for Directory Merging on Mac OS X\nDESCRIPTION: Example of using the 'cp' command with recursive and force flags in Mac OS X terminal to merge MODX upgrade files into an existing installation directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp -fr modx-2.2.0-pl/* /www/public_html/modx\n```\n\n----------------------------------------\n\nTITLE: Testing Changes in MODX Revolution\nDESCRIPTION: Commands for integrating xPDO changes into MODX Revolution for testing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/xpdo.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[revolution]$ git checkout develop\nSwitched to branch \"develop\"\n[revolution]$ git fetch upstream\n[revolution]$ git merge --ff-only upstream/develop\n[revolution]$ git push origin develop\n[revolution]$ git remote add -f xpdo git@github.com:YourGitUsername/xpdo-core.git\n[revolution]$ git checkout -b xpdo-feature-1234 develop\n[revolution]$ git merge -s subtree --log xpdo/feature-1234\n```\n\nLANGUAGE: bash\nCODE:\n```\n[revolution]$ git push origin xpdo-feature-1234\n```\n\n----------------------------------------\n\nTITLE: Using Full Names in Manager - MODX - Markdown\nDESCRIPTION: This setting enables or disables the use of full user names in the manager interface. This helps in better identification of users for administrative tasks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[manager_use_fullname](building-sites/settings/manager_use_fullname)\n```\n\n----------------------------------------\n\nTITLE: Preventing Resource Deletion in MODX Plugin\nDESCRIPTION: A PHP plugin that prevents deletion of a specific resource by ID, logs an error message, and returns a custom JSON response blocking the deletion process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onbeforedocformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeDocFormDelete':\n        //если id=7\n        if ($id == 7){\n            $modx->log(modX::LOG_LEVEL_ERROR, 'Кто-то пытался удалить ресурс '.$resource->get('pagetitle'));\n            $response = array(\n            \t'success' => false,\n            \t'message' => 'Нельзя удалять! А то голову с плеч!',\n            \t'data' => array(),\n            );\n            echo $modx->toJSON($response);\n            exit;\n        } \n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Ejemplos de Formato de Etiquetas MODX en PHP\nDESCRIPTION: Muestra dos formas válidas de formatear una etiqueta MODX, en una línea y en múltiples líneas.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources? &parents=`123` &limit=`5`]]\n\n[[!getResources?\n  &parents=`123`\n  &limit=`5`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining XML Structure for GoogleSiteMap Container in MODX\nDESCRIPTION: This XML snippet defines the structure for the GoogleSiteMap container. It uses placeholders for the schema URL and item content, which are populated by the GoogleSiteMap snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemap/containertpl.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<urlset xmlns=\"[[+schema]]\">\n[[+items]]\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: Iterating and Processing Doodles Data in PHP\nDESCRIPTION: This code snippet iterates over a collection of `Doodle` objects retrieved from the database. For each `Doodle` object, it converts the object to an array using `toArray()`, then uses the `$dood->getChunk()` method to process the array with the specified chunk template (`$tpl`). The output from each chunk is appended to the `$output` variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nforeach ($doodles as $doodle) {\n    $doodleArray = $doodle->toArray();\n    $output .= $dood->getChunk($tpl,$doodleArray);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Template for Root Resources in MODX in PHP\nDESCRIPTION: Plugin that automatically sets template 1 for all resources located in the root (parent=0). It demonstrates how to use resource properties and explicitly save changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforedocformsave.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeDocFormSave':\n        if ($resource->get('parent') == 0) {\n            $resource->set('template', '1');\n            $resource->save();\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Chained Image Filters\nDESCRIPTION: Demonstrate multiple image filters applied sequentially. This example applies grayscale conversion, brightness adjustment, and color tinting in a single operation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=gray&fltr[]=brit|20&fltr[]=clr|6|00ab86`]]\n```\n\n----------------------------------------\n\nTITLE: Recording a Hit for Current Resource in MODX Revolution\nDESCRIPTION: This snippet records a page hit for the current resource by using the resource ID as the hit key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &punch=`[[*id]]`]]\n```\n\n----------------------------------------\n\nTITLE: GetResources Row Template with SiteEditor\nDESCRIPTION: Example of adding SiteEditor editing capabilities to multiple fields in a getResources row template, allowing front-end editing of pagetitle and introtext.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siteeditor/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+pagetitle:siteEditorField=`resource=[[+id]]`]]\n[[+introtext:siteEditorField=`resource=[[+id]]`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Table Name with xPDO::getTableName Method in PHP\nDESCRIPTION: Method signature for xPDO::getTableName which retrieves the actual run-time table name from a class name. It accepts a class name parameter and an optional boolean to include the database name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.gettablename.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getTableName (string $className, [boolean $includeDb = false])\n```\n\n----------------------------------------\n\nTITLE: Sample Blog Post Template Chunk for renderResources in MODX (PHP)\nDESCRIPTION: Example of a chunk used to format each blog post in the renderResources output, with markup for consistent styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"blogPost\">\n  [[+output]]\n  <div class=\"clear\"></div>\n</div>\n<hr/>\n```\n\n----------------------------------------\n\nTITLE: Basic Output Modifier Usage in MODX\nDESCRIPTION: Demonstrates how to use a default output modifier with a placeholder in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[+placeholder:default=`A default value!`]]\n```\n\n----------------------------------------\n\nTITLE: Overriding Help Pane URL\nDESCRIPTION: Customizes the help pane URL and loads it using MODx.loadHelpPane method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.config.help_url = 'https://modx.com/';\nMODx.loadHelpPane();\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX Tab Panel\nDESCRIPTION: Sets up a tab panel with MODX-specific configuration and styling options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n,{\n   xtype: 'modx-tabs'\n   ,defaults: { border: false ,autoHeight: true }\n   ,border: true\n   ,items: /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Example of @FILE Binding Default Value in MODX Template Variable\nDESCRIPTION: This snippet demonstrates how to set the default value of a Template Variable to use the @FILE binding. It points to a file named headline_news.txt located in the assets/news/ directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/file-binding.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@FILE assets/news/headline_news.txt\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up xPDO Core Repository\nDESCRIPTION: Commands for cloning the xPDO Core repository and adding the upstream remote.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/xpdo.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[repos]$ git clone git@github.com:YourGitUsername/xpdo-core.git\n[repos]$ cd xpdo-core\n[xpdo-core]$ git remote add upstream -f http://github.com/modxcms/xpdo-core.git\n```\n\n----------------------------------------\n\nTITLE: Get Resource Object in MODX\nDESCRIPTION: Retrieves a resource object by its ID using MODX's getObject method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modresource/modresource.ismember.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$resource = $modx->getObject('modResource', array('id' => 2));\n```\n\n----------------------------------------\n\nTITLE: Forcing HTTPS Redirect in NGINX\nDESCRIPTION: NGINX configuration to force HTTPS and handle www subdomain redirects. Ensures all traffic is served over secure connections and maintains consistent domain formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_11\n\nLANGUAGE: nginx\nCODE:\n```\n# The intended URL is \"www.example.com\" over HTTPS.\n\nif ($scheme != \"https\") {\n    return 301 https://www.example.com$request_uri;\n}\n\n# Handles redirects for the \"www.\" on the intended URL and\n# allows other URLs to work when requested over HTTPS\n\nif ($host = \"example.com\") {\n    return 301 https://www.example.com$request_uri;\n}\n```\n\n----------------------------------------\n\nTITLE: Default signupemail_message Content\nDESCRIPTION: This snippet shows the default HTML content for the signupemail_message system setting in MODX. It includes placeholders for username, password, site name, and site URL, which will be replaced with the corresponding values when the email is sent to a new user.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/signupemail_message.md#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n\"Hello [[+uid]] Here are your login details for [[+sname]] Content Manager:\\nUsername: [[+uid]] Password: [[+pwd]] Once you log into the Content Manager\\n([[+surl]]), you can change your password. Regards, Site Administrator\"\n```\n\n----------------------------------------\n\nTITLE: Intro Text Tag in Content Summary\nDESCRIPTION: Demonstrates using the intro text tag to display page summaries or excerpts\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"summary\">\n  [[*introtext]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Deleting Files with Exclusion Patterns in PHP\nDESCRIPTION: Shows how to delete files while excluding specific filenames and pattern matches using delete_exclude_items and delete_exclude_patterns options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.deletetree.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->cacheManager->deleteTree(MODX_ASSETS_PATH.'videos/',array(\n   'deleteTop' => true,\n   'extensions' => false,\n   'delete_exclude_items' => array('george.mov','buddies.flv'),\n   'delete_exclude_patterns' => '/fun/i',\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Ext JS Message Box Page\nDESCRIPTION: Sets up a basic HTML page that loads Ext JS dependencies and displays a simple message box alert when the DOM is ready.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <title>My Ext JS Test Page</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n        Ext.onReady(function() {\n            Ext.MessageBox.alert('My Title','The DOM is ready...');\n        });\n    </script>\n    <body>\n        <h1>Intro to Ext JS</h1>\n        <p>I've uploaded this HTML to the root of my site and I'm including the Ext JS libraries that ship with the MODX manager.</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MODX Build Directory Structure\nDESCRIPTION: Directory structure outline for packaging a MODX extra, showing key files and folders needed for creating a transport package. Includes data directory for packaging scripts, resolvers for custom functionality, build scripts, and setup options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n_build/\n  data/\n  resolvers/\n  build.transport.php\n  setup.options.php\n```\n\n----------------------------------------\n\nTITLE: Defining MODX Manager Language Setting\nDESCRIPTION: Specifies the configuration for the 'manager_language' system setting in MODX. This setting determines the language used in the MODX Manager interface, overriding the cultureKey setting for the mgr context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/manager_language.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Language for the Manager\n**Type**: String\n**Default**: en\n```\n\n----------------------------------------\n\nTITLE: Using mxHasTvs Snippet in MODX - PHP\nDESCRIPTION: This snippet demonstrates how to use the mxHasTvs functionality within MODX to manipulate output based on the values of template variables (TVs). It allows for the conditional display of content, providing parameters for specifying resources and templates, and forcing outcomes based on these conditions. Dependencies include the MODX framework and the correct setup of template variables. Inputs include resource and TV IDs, while outputs are customizable strings based on the evaluation of these inputs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxhastvs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!mxhastvs?\n    &tvIds=`11,20`\n    &true=`[[$doSomethingChunkName]]`\n    &false=``\n    &forceTrueResource=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Alternative OR Condition Method\nDESCRIPTION: Demonstrates an alternative syntax for OR conditions using nested arrays.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   array(\n      'width' => 15\n   ),\n   array(\n      'width' => 10\n   )\n),xPDOQuery::SQL_OR);\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Basic Wayfinder Snippet Call in MODX\nDESCRIPTION: This snippet call demonstrates the minimum required parameters for Wayfinder to generate a multi-level, unordered list of the document tree. It sets the starting ID to 0 (the root) and the level to 1, meaning it will display the first level of documents.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`0`&level=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Gallery and Pagination CSS Styling\nDESCRIPTION: Custom CSS for formatting gallery images, thumbnails, and pagination navigation with responsive inline display\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/sekfancybox-and-gallery.md#2025-04-17_snippet_4\n\nLANGUAGE: css\nCODE:\n```\nul.image-container{\n    margin:0;\n    padding:0;\n}\nul.image-container li {\n    list-style:none;\n    display:inline-table;\n    padding:10px;\n}\nul.pagination-nav li{\n    list-style:none;\n    display:inline-table;\n    padding:10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Username with getLoginUserName in MODX\nDESCRIPTION: Method signature showing how to get the current user's username with an optional context parameter. Returns a string containing the username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getloginusername.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getLoginUserName ([string $context = ''])\n```\n\n----------------------------------------\n\nTITLE: Closing HTML Document Structure\nDESCRIPTION: This snippet demonstrates the correct way to close the HTML document with closing tags for body and html using HTML. It ensures the document structure is properly terminated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-bottom-close.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n</body>\\n</html>\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Content in MODX Template\nDESCRIPTION: Example showing how to place the main content of a Resource within a template using the content tag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/templates.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n[[*content]]\n</body>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Snippet Tag Syntax in MODX\nDESCRIPTION: This snippet demonstrates the syntax for calling MODX Snippets using tags in the form of [[SnippetName]].\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/glossary.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[[SnippetName]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for StatCache with MODX in Document Root\nDESCRIPTION: Nginx configuration block for serving StatCache static files when MODX is installed in the document root. This configuration instructs Nginx to check for static cached versions before processing through MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/statcache/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nlocation / {\n    try_files /statcache$uri~index.html /statcache$uri $uri $uri/ @modx-rewrite;\n}\nlocation @modx-rewrite {\n    rewrite ^/(.*)$ /index.php?q=$1 last;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Template\nDESCRIPTION: This snippet shows a basic HTML template used by the controller. This template defines the main container for the ExtJS component to be rendered within the MODX manager page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/package-build/index.md#2025-04-17_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"sendex-panel-home-div\"></div>\n```\n\n----------------------------------------\n\nTITLE: Discuss Search Form Template (HTML)\nDESCRIPTION: This HTML snippet represents the template for the search form in the Discuss forum. It includes input fields for the search term, board selection, author, and date range, along with advanced search options. The form submits the search query to the \"search\" action of the current resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/search.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"m-fullw-form m-styled-form h-group m-search\" action=\"[[~[[*id]]]]search/\" method=\"get\">\n    <h1>[[%discuss.search? &namespace=`discuss` &topic=`web`]]</h1>\n    <div class=\"m-panel f1-f8\">\n        <div class=\"f1-f5 f-pad h-group\">\n            <label class=\"search\" for=\"dis-search\">[[%discuss.search]]:</label>\n            <input class=\"search\" type=\"text\" id=\"dis-search\" name=\"s\" value=\"[[+search]]\" />\n        </div>\n        <div class=\"f-all f-pad  h-group\">\n            <a id=\"dis-search-advanced-toggle\" href=\"a-search-adavnaced\">[[%discuss.search_advanced_options]]</a>\n        </div>\n        <div id=\"dis-search-advanced\" class=\"f-all m-grouped-content\">\n            <div class=\"f-full\">\n                <div class=\"f1-f4 f-pad\">\n                    <label for=\"dis-search-board\">Post type:\n                        <span class=\"error\">[[+error.board]]</span>\n                    </label>\n                    <select name=\"board\" id=\"dis-search-qa\">\n                        <option value=\"1\">(All Posts)</option>\n                        <option value=\"2\">Discussions</option>\n                        <option value=\"3\" id=\"QA\">Questions</option>\n                    </select>\n                </div>\n                <div id=\"SubOptions\" class=\"f5-f8 sub-options\">\n                    <label for=\"dis-search-board\">Question options:\n                        <span class=\"error\">[[+error.board]]</span>\n                    </label>\n                    <input type=\"radio\" name=\"qa-options\" value=\"Both\" checked>All Questions\n                    <input type=\"radio\" name=\"qa-options\" value=\"Solved\">Answered\n                    <input type=\"radio\" name=\"qa-options\" value=\"Unsolved\">Without Answer\n                </div>\n            </div>\n\n            <div class=\"f-full\">\n                <div class=\"f1-f4 f-pad\">\n                    <label for=\"dis-search-board\">[[%discuss.board]]:\n                        <span class=\"error\">[[+error.board]]</span>\n                    </label>\n                    <select name=\"board\" id=\"dis-search-board\">[[+boards]]</select>\n                </div>\n                <div class=\"f5-f8 f-pad\">\n                    <label for=\"dis-author\">[[%discuss.author]]:</label>\n                    <input type=\"text\" id=\"dis-author\" name=\"user\" value=\"[[+user]]\" class=\"autocomplete\" data-autocomplete-action=\"rest/find_user\" data-autocomplete-single=\"true\" />\n                </div>\n            </div>\n\n            <div class=\"f1-f4 f-pad\">\n                <label for=\"dis-date-start\">[[%discuss.date_start]]:</label>\n                <input type=\"text\" id=\"dis-date-start\" class=\"m-datepicker\" name=\"date_start\" value=\"[[+date_start]]\"/>\n            </div>\n\n            <div class=\"f5-f8 f-pad\">\n                <label for=\"dis-date-end\">[[%discuss.date_end]]:</label>\n                <input type=\"text\" id=\"dis-date-end\" class=\"m-datepicker\" name=\"date_end\" value=\"[[+date_end]]\"/>\n            </div>\n        </div>\n        <div class=\"f1-f8 f-pad\">\n            <input type=\"submit\" value=\"[[%discuss.search]]\" />\n        </div>\n    </div>\n</form>\n\n[[+search:notempty=`\n<header class=\"dis-cat-header dark-gradient h-group sticky-bar top\">\n    [[+results:notempty=`<h1>Displaying [[+start]]-[[+end]] of [[+total]] Results</h1>`]]\n    [[+pagination]]\n</header>\n\n<div class=\"dis-threads\">\n    <ul class=\"dis-list search-results\">`]]\n        [[+results]]\n    [[+search:notempty=`</ul>\n</div>\n<div class=\"paginate stand-alone bottom horiz-list\">\n[[+pagination]]\n</div>\n`]]\n[[+bottom]]\n\n```\n\n----------------------------------------\n\nTITLE: Rebasing with Upstream Repository\nDESCRIPTION: Commands to fetch updates from the upstream repository and rebase your local branch to match it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/2.7.x\nFirst, rewinding head to replay your work on top of it...\nFast-forwarded 2.7.x to upstream/2.7.x.\n```\n\n----------------------------------------\n\nTITLE: Pushing a Feature Branch to Your MODX Fork on GitHub\nDESCRIPTION: Pushes your local feature branch 'bug-1111' to your remote repository 'myRepo' on GitHub. This makes your changes available on GitHub before submitting a pull request.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/git-github/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ngit push myRepo bug-1111\n```\n\n----------------------------------------\n\nTITLE: MainTpl HTML Template with Language Links\nDESCRIPTION: This HTML template demonstrates how to implement a multilingual page structure with migxMultiLang. It includes the mml_LangLinks snippet that renders language selection links and uses the mml_pagetitle placeholder to display the translated page title.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/migxmultilang.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n<head>\n<meta charset=\"[[++modx_charset]]\">\n<title>[[++site_name]] - [[+mml_pagetitle]]</title>\n<base href=\"[[++site_url]]\">\n</head>\n<body>\n[[+mml_pagetitle]]\n[[!mml_LangLinks]]\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining Fields and Columns for Subscription Table\nDESCRIPTION: This snippet defines the fields and columns for the ExtJS grid. The `fields` array specifies the data fields to be retrieved from the server. The `columns` array defines the columns of the table, mapping each column to a data field and specifying its header, width, and renderer.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n,fields: ['id','name','description','active','template','snippet','image','email_subject','email_from','email_from_name','email_reply']И колонки таблицы\n,columns: [\n    {header: _('sendex_newsletter_id'),dataIndex: 'id',width: 50}\n    ,{header: _('sendex_newsletter_name'),dataIndex: 'name',width: 100}\n    //,{header: _('sendex_newsletter_description'),dataIndex: 'description',width: 250}\n    ,{header: _('sendex_newsletter_active'),dataIndex: 'active',width: 75,renderer: this.renderBoolean}\n    ,{header: _('sendex_newsletter_template'),dataIndex: 'template',width: 75}\n    ,{header: _('sendex_newsletter_snippet'),dataIndex: 'snippet',width: 75}\n    ,{header: _('sendex_newsletter_email_subject'),dataIndex: 'description',width: 100}\n    ,{header: _('sendex_newsletter_email_from'),dataIndex: 'email_from',width: 100}\n    //,{header: _('sendex_newsletter_email_from_name'),dataIndex: 'email_from_name',width: 100}\n    //,{header: _('sendex_newsletter_email_reply'),dataIndex: 'email_reply',width: 100}\n    ,{header: _('sendex_newsletter_image'),dataIndex: 'image',width: 75,renderer: this.renderImage}\n]\n```\n\n----------------------------------------\n\nTITLE: Sending Unavailable 503 Error Page in MODX\nDESCRIPTION: Example of sending users to the 'unavailable' error page which represents an HTTP 503 Service Unavailable error.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.senderror.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendError('unavailable');\n```\n\n----------------------------------------\n\nTITLE: Processing Related Page IDs in MODX Snippet\nDESCRIPTION: This snippet processes a comma-delimited list of related page IDs, initializing an empty array for output. It serves as a precursor to looping and fetching resources associated with each ID in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$ids = explode(',', $input);\n$output = array();\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status\nDESCRIPTION: Command and example output for checking the status of modified files in the Git repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_11\n\nLANGUAGE: plain\nCODE:\n```\ngit status\nOn branch bug-13309\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   core/lexicon/en/about.inc.php\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n----------------------------------------\n\nTITLE: Setting Manager Theme - MODX - Markdown\nDESCRIPTION: This snippet indicates the theme used in the MODX manager interface. Users can personalize their experience by selecting a suitable theme from the available options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[manager_theme](building-sites/settings/manager_theme)\n```\n\n----------------------------------------\n\nTITLE: Setting Image Dimensions and File Size Limits\nDESCRIPTION: Configuration settings that control image thumbnail and display dimensions, as well as file size constraints for sekUserGalleries uploaded content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n| sekusergalleries.gallerycover_thumb_max_width    | Set the maximum pixel width of the gallery cover thumbnail image.                                                                                                               | 150      | >0.0.1  |\n| sekusergalleries.gallerycover_thumb_max_height   | Set the maximum pixel height of the gallery cover thumbnail image.                                                                                              | 150      | >0.0.1  |\n| sekusergalleries.gallerycover_display_max_width  | Set the maximum pixel width of the gallery cover display image.                                                                                                 | 300      | >0.0.1  |\n| sekusergalleries.gallerycover_display_max_height | Set the maximum pixel height of the gallery cover display image.                                                                                                | 300      | >0.0.1  |\n| sekusergalleries.image_thumb_max_width           | Set the maximum pixel width of the thumbnail image.                                                                                                             | 150      | >0.0.1  |\n| sekusergalleries.image_thumb_max_height          | Set the maximum pixel height of the thumbnail image.                                                                                                            | 150      | >0.0.1  |\n| sekusergalleries.max_file_size                    | Maximum upload file size in bytes.                                                                                                                              | 5242880  | >0.0.1  |\n| sekusergalleries.min_file_size                    | Minimum file size in bytes.                                                                                                                                     | 1        | >0.0.1  |\n```\n\n----------------------------------------\n\nTITLE: Modifying Permissions in FredBeforeRender\nDESCRIPTION: Example of modifying user permissions through the modifyPermissions function in Fred.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/modx_events.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modifyPermissions = '\n    permissions.save_document = false; // Disable save for the user\n    permissions.my_plugin_show = true; // Custom permission\n';\n```\n\n----------------------------------------\n\nTITLE: Filtered Event List Implementation with ChurchEventsList Snippet in PHP\nDESCRIPTION: This snippet creates a list of prominent events on a MODX Revolution page. It uses the ChurchEventsList snippet with parameters to filter for prominent events only and limit the results to 10 items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/church-events-calendar/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!ChurchEventsList?  &prominent=`Yes`  &limit=`10`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving MODX System Configuration Values\nDESCRIPTION: Accesses system configuration settings through the MODx.config object. Provides a way to programmatically read MODX system settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar tpl = MODx.config.default_template;\n```\n\n----------------------------------------\n\nTITLE: Tag Listing Implementation with tagLister\nDESCRIPTION: Simple implementation of tagLister to display most used tags, linking to a target resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[[!tagLister? &tv=`tags` &target=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Basic ChurchEvents Calendar Implementation in PHP\nDESCRIPTION: This snippet demonstrates the simplest way to display a complete calendar grid using the ChurchEvents component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/church-events-calendar/churcheventscalendar-snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!ChurchEventsCalendar]]\n```\n\n----------------------------------------\n\nTITLE: Creating Menu and Action Objects\nDESCRIPTION: Defines the custom manager page menu entry and associated action for the package interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$action= $modx->newObject('modAction');\n$action->fromArray(array(\n    'id' => 1,\n    'namespace' => 'doodles',\n    'parent' => 0,\n    'controller' => 'index',\n    'haslayout' => true,\n    'lang_topics' => 'doodles:default',\n    'assets' => '',\n),'',true,true);\n\n$menu= $modx->newObject('modMenu');\n$menu->fromArray(array(\n    'text' => 'doodles',\n    'parent' => 'components',\n    'description' => 'doodles.desc',\n    'icon' => 'images/icons/plugin.gif',\n    'menuindex' => 0,\n    'params' => '',\n    'handler' => '',\n),'',true,true);\n$menu->addOne($action);\nunset($menus);\n\nreturn $menu;\n```\n\n----------------------------------------\n\nTITLE: Sample Chunk Template in HTML\nDESCRIPTION: This is an example of a chunk template used for displaying data. It contains placeholders `[[+name]]` and `[[+description]]` which will be replaced with actual values during the chunk processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<li><strong>[[+name]]</strong> - [[+description]]</li>\n```\n\n----------------------------------------\n\nTITLE: Get Child Resource IDs in modX\nDESCRIPTION: Retrieves child resource IDs for a specific resource. The depth parameter limits the recursion, and the options array allows specifying the context. When using this method within the manager, explicitly define the context to avoid unexpected results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getchildids.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$array_ids = $modx->getChildIds(23,6,array('context' => 'web'));\n```\n\n----------------------------------------\n\nTITLE: Configuring reCaptcha JSON Options in PHP\nDESCRIPTION: This snippet demonstrates the default value for the 'recaptchaJs' property, which is used to configure the reCaptcha widget. It's an empty JSON object that can be customized with RecaptchaOptions as per the official reCaptcha documentation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/recaptcha.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Transport Package Snippet Creation\nDESCRIPTION: Creates and configures snippet objects for inclusion in the transport package. Includes helper function for content processing and property management.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction getSnippetContent($filename) {\n    $o = file_get_contents($filename);\n    $o = trim(str_replace(array('<?php','?>'),'',$o));\n    return $o;\n}\n$snippets = array();\n\n$snippets[1]= $modx->newObject('modSnippet');\n$snippets[1]->fromArray(array(\n    'id' => 1,\n    'name' => 'Doodles',\n    'description' => 'Displays a list of Doodles.',\n    'snippet' => getSnippetContent($sources['elements'].'snippets/snippet.doodles.php'),\n),'',true,true);\n$properties = include $sources['data'].'properties/properties.doodles.php';\n$snippets[1]->setProperties($properties);\nunset($properties);\n\nreturn $snippets;\n```\n\n----------------------------------------\n\nTITLE: Creating Category Vehicle in MODX Transport Package\nDESCRIPTION: Creates a category object and configures its transport vehicle with specific attributes for package installation. Handles category preservation, updates, and related object relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$category= $modx->newObject('modCategory');\n$category->set('id',1);\n$category->set('category',PKG_NAME);\n\n/* add snippets */\n//$modx->log(modX::LOG_LEVEL_INFO,'Packaging in snippets...');\n//$snippets = include $sources['data'].'transport.snippets.php';\n//if (empty($snippets)) $modx->log(modX::LOG_LEVEL_ERROR,'Could not package in snippets.');\n//$category->addMany($snippets);\n\n/* create category vehicle */\n$attr = array(\n    xPDOTransport::UNIQUE_KEY => 'category',\n    xPDOTransport::PRESERVE_KEYS => false,\n    xPDOTransport::UPDATE_OBJECT => true,\n    xPDOTransport::RELATED_OBJECTS => true,\n    xPDOTransport::RELATED_OBJECT_ATTRIBUTES => array (\n        'Snippets' => array(\n            xPDOTransport::PRESERVE_KEYS => false,\n            xPDOTransport::UPDATE_OBJECT => true,\n            xPDOTransport::UNIQUE_KEY => 'name',\n        ),\n    ),\n);\n$vehicle = $builder->createVehicle($category,$attr);\n$builder->putVehicle($vehicle);\n```\n\n----------------------------------------\n\nTITLE: Listing Files Only with FileLister in MODX Revolution (PHP)\nDESCRIPTION: This snippet call lists only files (not directories) in the 'assets/pdfs' directory using FileLister.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FileLister? &path=`assets/pdfs/`]]\n```\n\n----------------------------------------\n\nTITLE: Multiple Inline sekFancyBox Windows with Unique IDs in PHP\nDESCRIPTION: Two examples showing how to create multiple inline modal windows on a single page by assigning unique link IDs to each instance. This prevents clashing between modal windows.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &link=`modal-one`\n &linktext=`Text 1 to display as link`\n &text=`Text 1 that will display in the modal window.`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &link=`modal-two`\n &linktext=`Text 2 to display as link`\n &text=`Text 2 that will display in the modal window.`\n]]\n```\n\n----------------------------------------\n\nTITLE: Ajax Content with Highlighting\nDESCRIPTION: Content file (b.html) loaded into ExtJS window with self-executing highlight animation\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/2.-ext-js-tutorial-ajax-include.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<div>Here's my Ajax payload!</div>\n<script type=\"text/javascript\">\n    function highlightWindow() {\n        var win = Ext.getCmp('my_window');\n        var winBody = win.body;\n        winBody.highlight();\n    }\n    highlightWindow.defer(1000);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Header Chunk for Guest Users in MODX\nDESCRIPTION: This chunk defines the header content displayed to guest users, including a link to sign in.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span id=\"logged_in_status\">Not signed in (<a href=\"[[~1]]\">Sign in</a>)</span>\n```\n\n----------------------------------------\n\nTITLE: Renaming ExtJS Library Files for Debugging\nDESCRIPTION: A tip for renaming ExtJS library files to use the uncompressed version during development, which helps in debugging JavaScript errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/directory-structure.md#2025-04-17_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Rename ext-all.js to ext-all-compressed.js\n// Rename ext-all-debug.js to ext-all.js\n```\n\n----------------------------------------\n\nTITLE: Defining pdoResources Title in MODX Documentation\nDESCRIPTION: Markdown frontmatter defining the title of the pdoResources documentation page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoResources.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"pdoResources\"\n---\n```\n\n----------------------------------------\n\nTITLE: Logging Debug Messages in PHP\nDESCRIPTION: Shows how to log a debug message by adjusting the log level parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->log(xPDO::LOG_LEVEL_DEBUG,'This is a debugging statement.');\n```\n\n----------------------------------------\n\nTITLE: Configuring Week Start Day - MODX - Markdown\nDESCRIPTION: This setting specifies the starting day of the week in the MODX manager, accommodating different regional practices for weekly scheduling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[manager_week_start](building-sites/settings/manager_week_start)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Primary Key Type in PHP using xPDOObject::getPKType()\nDESCRIPTION: This snippet demonstrates how to use the getPKType() method to retrieve the primary key type of a Resource object in MODX. It shows that for a table with an auto-increment ID field, the method returns 'integer'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getpktype.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$resource = $xpdo->getObject('Resource',1);\necho $resource->getPKType();\n// prints \"integer\"\n```\n\n----------------------------------------\n\nTITLE: Custom Error Pages in NGINX Configuration\nDESCRIPTION: NGINX configuration to use custom error pages for 404 and 500-series errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_3\n\nLANGUAGE: nginx\nCODE:\n```\nerror_page 404 /custom_404.html;\nerror_page 500 502 503 504 /custom_500.html;\n```\n\n----------------------------------------\n\nTITLE: Using MODX System Path Placeholders\nDESCRIPTION: Example of a MODX placeholder that can be used in extension_packages configurations to reference the core path dynamically.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/extension_packages.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[++core_path]]\n```\n\n----------------------------------------\n\nTITLE: Packaging Menu and Action for MODX Custom Manager Page\nDESCRIPTION: This snippet includes the configuration for packaging a menu and its associated action in a MODX transport package. It creates a new modAction object and a modMenu object, defines several properties for the menu and action, and adds the action to the menu. The use of unique keys ensures proper functionality during installation. Dependencies require MODX methods for packaging transport objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$action= $modx->newObject('modAction');\n$action->fromArray(array(\n    'id' => 1,\n    'namespace' => 'doodles',\n    'parent' => 0,\n    'controller' => 'index',\n    'haslayout' => true,\n    'lang_topics' => 'doodles:default',\n    'assets' => '',\n),'',true,true);\n\n$menu= $modx->newObject('modMenu');\n$menu->fromArray(array(\n    'text' => 'doodles',\n    'parent' => 'components',\n    'description' => 'doodles.desc',\n    'icon' => 'images/icons/plugin.gif',\n    'menuindex' => 0,\n    'params' => '',\n    'handler' => '',\n),'',true,true);\n$menu->addOne($action);\nunset($menus);\n\nreturn $menu;\n```\n\n----------------------------------------\n\nTITLE: Setting xPDOObject Option Method Signature\nDESCRIPTION: Method signature for setOption showing parameters and return type. Takes a string key and mixed value parameter, returns void.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/configuration-accessors/setoption.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid setOption(\n    string $key,\n    mixed $value\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Keepalive in MODX\nDESCRIPTION: The mail_smtp_keepalive setting determines whether SMTP connections are kept open after sending each email. It is a Yes/No setting, defaulting to No. Enabling this option is not recommended as it may lead to potential issues with the SMTP connection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/mail_smtp_keepalive.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: SMTP User\n**Type**: Yes/No\n**Default**: No\n\nPrevents the SMTP connection from being closed after each mail sending. Not recommended.\n```\n\n----------------------------------------\n\nTITLE: Old Extension Packages Format in PHP\nDESCRIPTION: Shows the old format for the extension_packages setting in MODX Revolution prior to 2.0.5. This format used a comma-separated list of package names and paths.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/2.0.5.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npackage_name:package_path,another_package:another_path\n```\n\n----------------------------------------\n\nTITLE: Using Facebook Placeholders in MODX Templates\nDESCRIPTION: Example of how to use the Facebook data placeholders set by getFacebookProfile in a MODX template to display specific Facebook page information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookprofile.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFacebook Name: [[!+fb.name]]<br />\nLikes: [[!+fb.likes]]\n```\n\n----------------------------------------\n\nTITLE: Setting New File Permissions - MODX - Markdown\nDESCRIPTION: This snippet defines the default file permissions when creating new files, providing a baseline for security and access control.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n[new_file_permissions](building-sites/settings/new_file_permissions)\n```\n\n----------------------------------------\n\nTITLE: Querying Settings by Prefix\nDESCRIPTION: Demonstrates using xPDOQuery to find settings with a specific prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$query = $modx->newQuery('modSystemSetting');\n$query->where(array('key:LIKE' => 'quip.%') );\n$relatedSettings = $modx->getCollection('modSystemSetting', $query);\nforeach ( $relatedSettings as $Setting ) {\n        print $Setting->get('value');\n}\n```\n\n----------------------------------------\n\nTITLE: MODX proxy_host Setting Definition\nDESCRIPTION: System setting definition for proxy_host in MODX, including name, type and default value. This setting specifies the hostname of the proxy server used for RSS feeds and package management connections.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/proxy_host.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Proxy Host\n**Type**: String\n**Default**:\n```\n\n----------------------------------------\n\nTITLE: Loading DiscussUpdateProfile in PHP\nDESCRIPTION: Calls the DiscussUpdateProfileLoader after the UpdateProfile process to handle further operations associated with profile updates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[!DiscussUpdateProfileLoader]]\n```\n\n----------------------------------------\n\nTITLE: Long Title Tag Implementation\nDESCRIPTION: Shows how to use the long title tag within header elements for more detailed page headings\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>[[*longtitle]]</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders in MODX Chunks\nDESCRIPTION: HTML markup for a MODX chunk that accepts placeholders from a snippet, demonstrating the separation of presentation from logic.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/good-snippet.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- myChunk -->\nA cow says \"[[+cow]]\" and a pig says \"[[+pig]]\".\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Custom Namespace Controller (Revolution 2.3+)\nDESCRIPTION: Modern method for navigating to custom namespace controllers with direct controller names\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/menus/action-list.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.loadPage('update', 'namespace=mycomponent&foo=bar&bar=foo');\n```\n\n----------------------------------------\n\nTITLE: Basic getResources Snippet Call in PHP\nDESCRIPTION: Basic usage of the getResources snippet without parameters, which returns resource listings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources]]\n```\n\n----------------------------------------\n\nTITLE: Getting Last Error in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->getLastError()` for getting the last error. Use xPDOCriteria->stmt->errorCode or xPDOCriteria->stmt->errorInfo instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n\"see xPDOCriteria->stmt->errorCode or xPDOCriteria->stmt->errorInfo\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Tree with PHP in MODX\nDESCRIPTION: Method to obtain a hierarchical tree of resources from one or more resource IDs, with configurable depth and optional context filtering\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.gettree.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getTree ([int|array $id = null], [int $depth = 10], [array $options = array()])\n```\n\nLANGUAGE: php\nCODE:\n```\n$treeArray = $modx->getTree(12,5);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Strip HTML Tags in SimplePie (PHP)\nDESCRIPTION: Default array of HTML tags that get stripped from an entry's content in SimplePie. These tags are typically removed to ensure safe display of feed content without unwanted elements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/spiefeed/index.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\narray(\"base\", \"blink\", \"body\", \"doctype\", \"embed\", \"font\", \"form\", \"frame\", \"frameset\", \"html\", \"iframe\", \"input\", \"marquee\", \"meta\", \"noscript\", \"object\", \"param\", \"script\", \"style\")\n```\n\n----------------------------------------\n\nTITLE: Configuration File for MODX Revolution Schema Build Script\nDESCRIPTION: PHP configuration file that defines paths for MODX Revolution installation. This is used by the schema build script to locate the necessary MODX files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefine('MODX_BASE_PATH', dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/MODxRevolution/');\ndefine('MODX_CORE_PATH', MODX_BASE_PATH . 'core/');\ndefine('MODX_MANAGER_PATH', MODX_BASE_PATH . 'manager/');\ndefine('MODX_CONNECTORS_PATH', MODX_BASE_PATH . 'connectors/');\ndefine('MODX_ASSETS_PATH', MODX_BASE_PATH . 'assets/');\n```\n\n----------------------------------------\n\nTITLE: Sending Fatal 500 Error Page in MODX\nDESCRIPTION: Example of sending users to the 'fatal' error page which represents an HTTP 500 Internal Server Error.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.senderror.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendError('fatal');\n```\n\n----------------------------------------\n\nTITLE: Snippet Tag Definition\nDESCRIPTION: This snippet defines the format for snippet tags in MODX. Snippet tags are used to call snippets and execute their PHP code within MODX templates or content. The tag consists of double square brackets and the snippet name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/glossary.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"[[SnippetName]]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing MODx Console in JavaScript\nDESCRIPTION: Creates a new MODx Console instance with custom configuration, specifying register, topic, and shutdown event handling\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.console.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar topic = '/mytopic/';\nvar register = 'mgr';\nvar console = MODx.load({\n   xtype: 'modx-console'\n   ,register: register\n   ,topic: topic\n   ,show_filename: 0\n   ,listeners: {\n     'shutdown': {fn:function() {\n         /* выполнить код здесь, когда вы закроете консоль */\n     },scope:this}\n   }\n});\nconsole.show(Ext.getBody());\n```\n\n----------------------------------------\n\nTITLE: Using SmartOptimizer as an Output Filter with PHP\nDESCRIPTION: Demonstrates how to apply SmartOptimizer as an output filter in MODX templates by appending the `:smartoptimizer` filter to placeholder tags for CSS and JS files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/smartoptimizer/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Your CSS files -->\n<link rel=\"stylesheet\" href=\"[[+link_to_css]]\"/>\n\n<!-- Your JS files -->\n<script src=\"[[+link_to_js]]\"></script>\n```\n\nLANGUAGE: php\nCODE:\n```\n<!-- Your CSS files -->\n<link rel=\"stylesheet\" href=\"[[+link_to_css:smartoptimizer]]\"/>\n\n<!-- Your JS files -->\n<script src=\"[[+link_to_js:smartoptimizer]]\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendering MODX Discuss Board Template\nDESCRIPTION: HTML template for rendering a Discuss board view. Includes search functionality, pagination, thread listing, and various placeholder sections for dynamic content injection. The template uses MODX placeholders for dynamic content and supports customization through system events.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/board.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[+top]]\n<div>\n    <form action=\"[[~[[*id]]]]search\" method=\"GET\">\n        <input type=\"hidden\" name=\"board\" value=\"[[+id]]\" />\n        <input type=\"text\" name=\"s\" value=\"\" style=\"width: 200px; margin-right: 5px;\" placeholder=\"[[%discuss.search_this_board]]\" />\n\n        <input type=\"submit\"  value=\"[[%discuss.search]]\" />\n    </form>\n</div>\n[[+trail]]\n\n[[+aboveBoards]]\n<ol style=\"[[+boards_toggle]]\">\n[[+boards]]\n</ol>\n\n[[+belowBoards]]\n\n<br />\n\n[[+actionbuttons]]\n\n<div><span>[[%discuss.pages? &namespace=`discuss` &topic=`web`]]:</span> <ul>[[+pagination]]</ul></div>\n\n<br />\n\n<div>\n<div>\n    <div>\n        <div style=\"width: 25%\">[[%discuss.last_post]]</div>\n        <div style=\"width: 10%\">[[%discuss.replies]]</div>\n        <div style=\"width: 10%\">[[%discuss.views]]</div>\n        <div style=\"width: 55%;\">[[%discuss.message]]</div>\n    </div>\n    <br />\n</div>\n<ol>\n[[+posts]]\n</ol>\n</div>\n\n<br />\n\n[[+actionbuttons]]\n\n<div><span>[[%discuss.pages]]:</span> <ul>[[+pagination]]</ul></div>\n\n[[+belowThreads]]\n\n<p>[[+readers]]</p>\n<p>[[+moderators]]</p>\n<p>[[+trail]]</p>\n\n[[+bottom]]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FormItRetriever Snippet in MODX\nDESCRIPTION: Demonstrates how to add the FormItRetriever snippet to a page and display form data using placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.formitretriever.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormItRetriever]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<p>Thanks [[!+fi.name]] for submitting. An email will be sent to you at [[!+fi.email]].</p>\n```\n\n----------------------------------------\n\nTITLE: RESOURCE Binding Syntax in MODX\nDESCRIPTION: The basic syntax for using @RESOURCE binding in MODX to return the parsed contents of a specified resource. The resource_id parameter represents the ID of the target resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/resource-binding.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@RESOURCE resource_id\n```\n\n----------------------------------------\n\nTITLE: Setting Charset - MODX - Markdown\nDESCRIPTION: This setting configures the character set used in MODX, essential for ensuring proper text encoding and preventing issues with special characters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n[modx_charset](building-sites/settings/modx_charset)\n```\n\n----------------------------------------\n\nTITLE: Verifying PHP Installation\nDESCRIPTION: Command to check if PHP is installed and available in your path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp -v\nPHP 7.0.15 (cli) (built: Jan 22 2017 08:51:45) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n```\n\n----------------------------------------\n\nTITLE: Logging Resources Being Deleted in MODX OnBeforeEmptyTrash Event\nDESCRIPTION: This plugin logs the IDs of resources that are about to be permanently deleted from the trash. It triggers when the OnBeforeEmptyTrash event fires and prints the resource IDs array to the error log.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforeemptytrash.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeEmptyTrash':\n        // remote resource array\n        print_r($ids);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Message Box Alert with Variables\nDESCRIPTION: Demonstrates how to create a message box alert using variables for the title and message content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nExt.onReady(function() {\n    var title = 'My Title';\n    var msg = 'The DOM is ready...';\n    Ext.MessageBox.alert(title,msg);\n});\n```\n\n----------------------------------------\n\nTITLE: FormIt with Array Processing\nDESCRIPTION: Implementation showing how to handle array values by adding the fiProcessArrays hook before fiGenerateReport.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.figeneratereport.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &hooks=`math,spam,fiProcessArrays,fiGenerateReport,email,redirect`\n    ...\n    &figrExcludedFields=`op1,op2,operator,math`]]\n```\n\n----------------------------------------\n\nTITLE: Complete Ext JS Panel Implementation\nDESCRIPTION: Full HTML page implementation showing how to create a simple Ext JS panel with title and content. The panel is rendered to the document body with specified dimensions and styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/5.-ext-js-tutorial-panels.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <title>Ext JS Panels</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n\n        Ext.onReady(function() {\n            var myPanel = new Ext.Panel({\n                renderTo : document.body,\n                height   : 50,\n                width    : 150,\n                title    : 'Simple Panel',\n                html     : 'This is my content',\n                frame    : true\n            });\n        });\n\n    </script>\n\n    <body>\n        <h1>Panels</h1>\n        <div id=\"target_div\"></div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: MODX Client Resource Registration (Legacy Method)\nDESCRIPTION: Legacy methods for registering CSS and JavaScript resources in MODX components. These methods are the traditional way to load client-side resources but may not be compatible with AjaxManager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/package-build.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->modx->regClientCSS()\n$this->modx->regClientStartupScript()\n$this->modx->regClientScript()\n$this->modx->regClientStartupHTMLBlock()\n```\n\n----------------------------------------\n\nTITLE: Handling Template Variable Save Event in MODX\nDESCRIPTION: Example plugin demonstrating how to handle the OnTemplateVarBeforeSave event in MODX. The code logs template variable data and checks whether it's a new TV or an update operation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ontemplatevarbeforesave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnTemplateVarBeforeSave':\n        //array tv, with all parameters\n        print_r($templateVar->toArray());\n        //checking for updating or creating the tv itself\n        if ($mode == modSystemEvent::MODE_NEW){\n            echo 'A new TV was created';\n        } elseif ($mode == modSystemEvent::MODE_UPD){\n            echo 'Old TV has been updated';\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx Configuration for Discuss Posts\nDESCRIPTION: This configuration defines two Sphinx indexes: a main index (discuss_posts) and a delta index (discuss_delta) for the Discuss forum. It specifies the MySQL data source, SQL queries to retrieve post data, and index settings like path and charset. Delta indexing is used for faster and more frequent updates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/configuring-sphinx-for-search.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsource discuss_posts {\n    type                    = mysql\n    sql_host                = localhost\n    sql_user                = dbuser\n    sql_pass                = dbpassword\n    sql_db                  = discuss\n    sql_port                = 3306\n    sql_query_pre           = SET NAMES utf8\n    sql_query_pre           = REPLACE INTO modx_discuss_sphinx_delta SELECT 1, IF (MAX(post_first) >= MAX(post_last), MAX(post_first), MAX(post_last)) FROM modx_discuss_threads WHERE private = 0\n\n    sql_query               = SELECT post.id, post.thread, post.board, post.title, post.message, UNIX_TIMESTAMP(post.createdon) AS createdon, \\\n                            disThread.answered AS answered, \\\n                            CONCAT('discuss_username_', disUser.username) AS username, CONCAT('discuss_user_id_', post.author) AS userid, \\\n                            disThread.class_key AS class_key \\\n                            FROM modx_discuss_posts post \\\n                            INNER JOIN modx_discuss_users disUser ON disUser.id = post.author \\\n                            INNER JOIN modx_discuss_threads disThread ON disThread.id = post.thread \\\n                            WHERE post.id <= (SELECT max_doc_id FROM modx_discuss_sphinx_delta WHERE counter_id = 1) AND disThread.private = 0\n\n    sql_attr_uint           = thread\n    sql_attr_uint           = board\n    sql_attr_timestamp      = createdon\n    sql_attr_uint           = answered\n    sql_attr_string         = class_key\n}\n\nsource discuss_delta : discuss_posts\n{\n    sql_query_pre           = SET NAMES utf8\n    sql_query               = SELECT post.id, post.thread, post.board, post.title, post.message, UNIX_TIMESTAMP(post.createdon) AS createdon, \\\n                            disThread.answered AS answered, \\\n                            CONCAT('discuss_username_', disUser.username) AS username, CONCAT('discuss_user_id_', post.author) AS userid, \\\n                            disThread.class_key AS class_key \\\n                            FROM modx_discuss_posts post \\\n                            INNER JOIN modx_discuss_users disUser ON disUser.id = post.author \\\n                            INNER JOIN modx_discuss_threads disThread ON disThread.id = post.thread \\\n                            WHERE post.id > (SELECT max_doc_id FROM modx_discuss_sphinx_delta WHERE counter_id = 1) AND disThread.private = 0\n}\n\nindex discuss_posts {\n    source                  = discuss_posts\n    path                    = /var/lib/sphinx/data/discuss_posts\n    charset_type            = utf-8\n}\n\nindex discuss_delta {\n    source                  = discuss_delta\n    path                    = /var/lib/sphinx/data/discuss_delta\n    charset_type            = utf-8\n}\n\nindexer {\n    mem_limit               = 256M\n}\n\nsearchd {\n    port                    = 9312\n    log                     = /var/log/mysql/sphinx.log\n    query_log               = /var/log/mysql/sphinx-query.log\n    pid_file                = /var/run/sphinx.pid\n}\n\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Default Error Page in MODX\nDESCRIPTION: Example showing how to redirect a user to the site's default error page using the sendErrorPage method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.senderrorpage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->sendErrorPage();\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de Salida de Chunk en PHP\nDESCRIPTION: Muestra la salida resultante después de procesar el chunk 'Hola' con el valor proporcionado.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nHola Jorge!\n```\n\n----------------------------------------\n\nTITLE: Implementing Facebook Photos Outer Template in PHP/HTML\nDESCRIPTION: Default outer template that wraps all photos in an unordered list. This template only accepts the photos placeholder.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookphotos.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n <ul>\n    [[+photos]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Replacing homeCrumbTitle in BreadCrumb with containerTpl\nDESCRIPTION: Demonstrates how to replace the homeCrumbTitle property from Breadcrumbs by modifying the containerTpl in BreadCrumb.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n[[Breadcrumbs? &homeCrumbTitle=`Home`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n[[BreadCrumb? &containerTpl=`myContainerTpl`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <li><a href=\"[[++site_url]]\" title=\"Home\">Home</a></li>\n    [[+crumbs]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Item Template in Cliche\nDESCRIPTION: A PHP template that handles individual image items within the Cliche gallery component. It requires MODX and Cliche environment. The output is a styled DL item element wrapped with zoom functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<dl class=\"item\">\n    <dt class=\"album-icon\">\n        <a class=\"zoom\" title=\"[[+name]]\" href=\"[[+image]]\">\n            <img width=\"[[+width]]\" height=\"[[+height]]\" title=\"[[+name]]\" alt=\"[[+description]]\" class=\"attachment-thumbnail\" src=\"[[+thumbnail]]\"/>\n        </a>\n    </dt>\n</dl><!-- End .item -->\n```\n\n----------------------------------------\n\nTITLE: Virtual Host Configuration Example\nDESCRIPTION: This is an example of a VirtualHost block in an Apache configuration file. It shows where to look for included configuration files, specifically those related to the domain `yoursite.com`.  These are generally where you will want to add your rules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n<VirtualHost 123.123.123.123>\n    ServerName yoursite.com\n    ServerAlias www.yoursite.com\n    DocumentRoot /home/youruser/public_html\n    # ... more stuff here ...\n    Include \"/usr/local/apache/conf/userdata/std/2/yoursite/*.conf\"\n    Include \"/usr/local/apache/conf/userdata/std/2/yoursite/yoursite.com/*.conf\"\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Using input.textfield Snippet in MODX\nDESCRIPTION: This snippet demonstrates how to use the `input.textfield` snippet in MODX to add a text field with a title. The `title` property sets the prompt displayed above the text field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.textfield.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[input.textfield? &title=`Search...`]]\n```\n\n----------------------------------------\n\nTITLE: Fetching and Creating a Bug Fix Branch in Git\nDESCRIPTION: This snippet demonstrates how to fetch updates from the upstream repository and create a new branch for a bug fix. It utilizes the `git fetch` and `git checkout` commands to synchronize with the main repository and create a local branch based on the desired upstream branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/contribute/code/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit checkout -b bug-12345 upstream/2.x\n```\n\n----------------------------------------\n\nTITLE: Alternative Window Creation Syntax\nDESCRIPTION: Alternative way to create ExtJS window using inline function\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/2.-ext-js-tutorial-ajax-include.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    <script type=\"text/javascript\">\n        Ext.onReady(function() {\n            var win = new Ext.Window({\n                id: 'my_window'\n                , title : \"Welcome to Ext JS\"\n                , width : 300\n                , height: 150\n                , layout: \"fit\"\n                , autoLoad: {\n                    url : \"b.html\"\n                    , scripts : true\n                }\n            });\n            win.show();\n        });\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Removing an Object Using xPDOObject::remove() Method in PHP\nDESCRIPTION: This example demonstrates how to remove an Item object with ID 123 from the database using the remove() method, with error checking to verify if the removal was successful.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/remove.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$item = $xpdo->getObject('Item',123);\n\nif ($item->remove() == false) echo 'The Item failed to remove.';\n```\n\n----------------------------------------\n\nTITLE: Email Chunk (MyEmailChunk)\nDESCRIPTION: This PHP code represents the template (chunk) for the email that FormIt sends. It contains placeholders for the form data (name, email, text) submitted by the user.  This template is referenced by the `&emailTpl` parameter in the FormIt snippet call.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.tutorials-and-examples/examples.simple-contact-page.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\nЭто Чанк нашей формы.\n\n<br />[[+name]] ([[+email]]) Wrote: <br />\n\n[[+text]]\n```\n\n----------------------------------------\n\nTITLE: Switching to Different Branches in PHP\nDESCRIPTION: Commands to switch to a different branch that has already been checked out locally.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ngit fetch upstream\ngit checkout 2.5.x upstream/2.5.x\n```\n\n----------------------------------------\n\nTITLE: HTML5 Block Level Tags Configuration\nDESCRIPTION: List of HTML5 block level tags to add to the new-blocklevel-tags property for HTML5 support.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/php-tidy-(plugin)/index.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\narticle, aside, bdi, command, details, summary, figure, figcaption, footer, header, hgroup, mark, meter, nav, progress, ruby, rt, rp, section, time, wbr, audio, video, source, embed, track, canvas, datalist, keygen, output\n```\n\n----------------------------------------\n\nTITLE: Defining isDirty Method Syntax in PHP\nDESCRIPTION: Shows the syntax for the isDirty() method in the xPDOObject class. It takes a string parameter $key and returns a boolean value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/state-accessors/isdirty.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean isDirty (string $key)\n```\n\n----------------------------------------\n\nTITLE: HTML Active Page Template\nDESCRIPTION: Template chunk for the currently active page in the pagination interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n@INLINE <li class=\"active\"><a href=\"[[+href]]\">[[+pageNo]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'containsnot' in MODX\nDESCRIPTION: Demonstrates the usage of 'containsnot' modifier for conditional output. It checks if the author's name does not contain \"Samuel Clemens\" and outputs \"Somebody Else\" if true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n[[+author:containsnot=`Samuel Clemens`:then=`Somebody Else`]]\n```\n\n----------------------------------------\n\nTITLE: Getting Web Username in MODX\nDESCRIPTION: This snippet shows how to retrieve the username of an authenticated web user, replacing the deprecated `$_SESSION[\"webShortname\"]`. It checks if the user is authenticated in the web context before retrieving the username using `modX->user->get('username')`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\"`modX->user->get('username')` when `modX->user->isAuthenticated('web')`\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SiteEditor Field for Introtext\nDESCRIPTION: Demonstrates how to add SiteEditor functionality to an introtext field using the siteEditorField modifier. This allows front-end editing of the introtext for the current resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siteeditor/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*introtext:siteEditorField]]\n```\n\n----------------------------------------\n\nTITLE: RegEx Pattern for MODX FURL Alias Character Restrictions\nDESCRIPTION: A regular expression pattern that defines which characters are restricted from use in MODX resource aliases. This pattern is used to ensure clean and safe URLs by preventing problematic characters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/friendly_alias_restrict_chars_pattern.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/[\\0\\x0B\\t\\n\\r\\f\\a&=+%#<>\"~:`@\\?\\[\\]\\{\\}\\|\\^\\'\\\\\\\\]/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resources with getResources in MODX\nDESCRIPTION: A MODX tag that retrieves resources using getResources snippet, filtering by specific parent IDs and context. Used to fetch content from the revolution context with parent ID 123.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/field-label.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`123` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Allowing Login in OnBeforeWebLogin Event in PHP\nDESCRIPTION: This snippet demonstrates how to allow a login attempt when intercepting the OnBeforeWebLogin event. By default, the event denies login, so developers must explicitly output a true value to permit login to proceed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforeweblogin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->event->output(true);\n// before Revo 2.3.0 you should use instead:\n$modx->event->_output = true;\n```\n\n----------------------------------------\n\nTITLE: Updating Active Property Validation\nDESCRIPTION: Handling boolean conversion for active field, ensuring proper type casting when updating subscriptions\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->setProperty('active', !empty($active) && $active != 'false');\n```\n\n----------------------------------------\n\nTITLE: Resetting User Password and Email via MODX API\nDESCRIPTION: This PHP script uses the MODX API to reset a user's password and email address. It also ensures the user is a member of the Administrator User Group. The script requires the full path to the MODX index.php file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/troubleshooting-security/resetting-a-user-password-manually.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefine('MODX_API_MODE', true); // Gotta set this one constant.\n\n// Reset the password and email of an existing user\n// and ensure they are a member of the specified group\n$username = 'theusername';\n$password = 'newpassword';\n$email = 'new@email.com';\n\n$user_group = 1; // 1 for Administrator\n\n// Full path to the MODX index.php file\nrequire_once('/full/path/to/index.php');\n\n// ====== Don't change anything below this line ======\nif (empty($username) || empty($password) || empty($email)) {\n        die('ERROR: Missing criteria.');\n}\n\n$modx= new modX();\n$modx->initialize('mgr');\n\n$query = $modx->newQuery('modUser');\n$query->where( array('username'=>$username) );\n$user = $modx->getObjectGraph('modUser', '{ \"Profile\":{}, \"UserGroupMembers\":{} }', $query);\n// print_r($user); exit;\nif (!$user) {\n        die(\"ERROR: No user with username $username\");\n}\n\n$user->set('username',$username);\n$user->set('active',1);\n$user->set('password', $password);\n$user->Profile->set('email', $email);\n$user->Profile->set('blocked', 0);\n$user->Profile->set('blockeduntil', 0);\n$user->Profile->set('blockedafter', 0);\n\n// Verify the user is a member of specified User Group\n$is_member = false;\nif (!empty($user->UserGroupMembers)) {\n        foreach ($user->UserGroupMembers as $UserGroupMembers) {\n                if ($UserGroupMembers->get('user_group') == $user_group) {\n                        $is_member = true;\n                        break;\n                }\n        }\n}\n// Add the User to the User Group if he is not a member\nif (!$is_member) {\n        // Verify the user group exists\n        $UserGroup = $modx->getObject('modUserGroup', $user_group);\n        if (!$UserGroup) {\n                die (\"ERROR: User Group $user_group does not exist.\");\n        }\n\n        $Member = $modx->newObject('modUserGroupMember');\n        $Member->set('user_group', $user_group);\n        $Member->set('member', $user->get('id'));\n        // Super User = role 2\n        $Member->set('role', 2);\n        $Member->set('rank', 0);\n        $user->addOne($Member,'UserGroupMembers');\n}\n\n/* save user */\nif (!$user->save()) {\n        die('ERROR: Could not save user.');\n}\n\nprint \"SUCCESS: User $username updated.\";\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Basic PollsLatest Implementation in PHP\nDESCRIPTION: The simplest implementation of the PollsLatest snippet to display polls in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/polls/polls.pollslatest.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!PollsLatest]]\n```\n\n----------------------------------------\n\nTITLE: Creating Setup/Installer Translations in MODX\nDESCRIPTION: Instructions for creating translations for the MODX installer by copying the English language directory and translating the files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/i18n/add-missing-translation.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsetup/lang/en/ -> setup/lang/[mylanguage]/\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Placeholders in MODX with PHP\nDESCRIPTION: Example of using nested arrays to create hierarchical placeholders. This code creates a placeholder that can be accessed using [[+document.pagetitle]] in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.toplaceholders.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->toPlaceholders(array(\n  'document' => array('pagetitle' => 'My Page')\n));\n```\n\n----------------------------------------\n\nTITLE: Creating a Compressed Archive of MODX Files (UNIX)\nDESCRIPTION: This command creates a compressed tar archive of the MODX document root, which is useful for packaging files before moving to a new server.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar -czf /path/to/backups/modx_revo_site.tar.gz /path/to/modx_doc_root/\n```\n\n----------------------------------------\n\nTITLE: Navigating to Build Directory and Checking Path\nDESCRIPTION: Commands to move to the build directory and verify your current location.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd _build\npwd\n/your-absolute-path-here/revolution/_build\n```\n\n----------------------------------------\n\nTITLE: Renaming Component via PHP Script\nDESCRIPTION: Script for renaming a MODX component by specifying a new name via GET parameter\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/git-basics/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nhttp://c2263.paas2.ams.modxcloud.com/Sendex/rename_it.php?name=Sendex\n```\n\n----------------------------------------\n\nTITLE: Converting currentAsLink Property from Breadcrumbs to BreadCrumb\nDESCRIPTION: Shows how to replace the currentAsLink property from Breadcrumbs by using a custom currentCrumbTpl chunk in BreadCrumb.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n[[Breadcrumbs? &currentAsLink=`1`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n[[BreadCrumb? &currentCrumbTpl=`myCurrentCrumbTpl`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n<li><a href=\"[[+link]]\">[[+pagetitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Basic Peoples Snippet Usage in MODX\nDESCRIPTION: Basic implementation of the Peoples snippet to show all users on a site with no limit.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Peoples? &limit=`0`]]\n```\n\n----------------------------------------\n\nTITLE: Frontmatter with Sort Order in YAML for Menu Ordering\nDESCRIPTION: An example of frontmatter that includes a sortorder parameter to control page position in the navigation menu. Documents with sortorder are displayed before those without.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/documentation/index.md#2025-04-17_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\n---\ntitle: 'Excellent Documentation'\ndescription: 'This meta data description will be used by search engines.'\nsortorder: 3\n---\n```\n\n----------------------------------------\n\nTITLE: Identifying Lighttpd Server Configuration Block\nDESCRIPTION: An example of the server configuration block in lighttpd.conf where you need to add URL rewrite rules. This snippet shows the standard format for a domain-specific configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls/lighttpd.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$SERVER[\"socket\"] == \":80\" {\n$HTTP[\"host\"] =~ \"yourdomainname.com\" {\n    server.document-root = \"/path/to/your/doc/root\"\n    server.name = \"yourservername\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of getObjectGraph for Template Variables in PHP\nDESCRIPTION: An example of how not to use getObjectGraph to retrieve MODX Template Variable values, as it may result in unusable JSON encoded values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobjectgraph.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// DO NOT DO THIS!!!  TV's have some special methods\n$page = $modx->getObjectGraph('modResource', '{\"TemplateVarResources\":{}}',123);\n$output = '';\nforeach ($page->TemplateVarResources as $tv) {\n    $output .= $tv->get('value');  // or do something else with this value\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Item Template Chunk for CamperManagement Slideshow\nDESCRIPTION: Template chunk named 'cmHomeItem' for formatting individual vehicle entries in a slideshow. This chunk creates a slide container with vehicle information and includes a placeholder for images and an information box with pricing details.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcampers-snippet.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"slide\">\n  <a href=\"[[+url]]\" title=\"[[+brand]] [[+type]]\" >[[+images]]</a>\n  <div class=\"slider-infobox\">\n    <p><a href=\"[[+url]]\" title=\"[[+brand]] [[+type]]\" >[[+brand]] [[+type]] - &euro; [[+price]]</a></p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: OnFileManagerDirCreate Event Parameters Table\nDESCRIPTION: Markdown table showing the parameters available in the OnFileManagerDirCreate event, including the directory path and mediasource object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onfilemanagerdircreate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name      | Description                                            |\n| --------- | ------------------------------------------------------ |\n| directory | Contains the full path of the newly created directory. |\n| source    | Contains the mediasource object.                       |\n```\n\n----------------------------------------\n\nTITLE: Creating MODX Custom Manager Page with Ext JS Grid\nDESCRIPTION: JavaScript and PHP implementation for rendering a grid in a custom manager page, including data store configuration, grid columns, and pagination\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/8.-ext-js-tutorial-inside-a-cmp.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Обычный MODX CMP\n */\n$url = MODX_ASSETS_URL.'components/your_pkg_name/'; // <-- update this\n\n$modx->regClientStartupHTMLBlock(\"<script>\nfunction myactions(val) {\n    return '<a href=\\\"index.php?a=30&id='+val+'\\\">Edit</a>';\n}\n\nExt.onReady(function(){\n    var store = new Ext.data.JsonStore({\n        root: 'results',\n        totalProperty: 'total',\n        idProperty: 'id',\n        remoteSort: true,\n\n        fields: [\n            'id',\n            'createdon',\n            'pagetitle',\n            'action'\n        ],\n\n        proxy: new Ext.data.HttpProxy({\n            url: '{$url}getpages.php'\n        })\n    });\n    store.setDefaultSort('id', 'ASC');\n\n    var grid = new Ext.grid.GridPanel({\n        id: 'articlesGrid',\n        width:700,\n        height:500,\n        store: store,\n        trackMouseOver:true,\n        disableSelection:true,\n        loadMask: true,\n\n        columns:[{\n            header: 'Дата',\n            dataIndex: 'createdon',\n            width: 150,\n            sortable: true\n        },{\n            header: 'Заголовок страницы',\n            dataIndex: 'pagetitle',\n            width: 350,\n            sortable: true\n        },{\n            header: '',\n            dataIndex: 'id',\n            width: 100,\n            sortable: false,\n            renderer : myactions,\n        }],\n\n        bbar: new Ext.PagingToolbar({\n            pageSize: 25,\n            store: store,\n            displayInfo: true,\n            displayMsg: 'Отображаются записи {0} - {1} из {2}',\n            emptyMsg: \"Нет записей для отображения\"\n        })\n    });\n\n    grid.render('articles-grid');\n    store.load({params:{start:0, limit:25}});\n});\n</script>\");\n\nreturn '\n<h2>Пример</h2>\n<div id=\"articles-grid\"></div>';\n```\n\n----------------------------------------\n\nTITLE: Static Array Snippet for Combobox in PHP\nDESCRIPTION: Shows how to generate a combobox using a static array within a custom snippet\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools.input.combobox.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!input.combobox? &snippet=`array`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n$itemListArray = array(\n    array(\n        'value' => '1',\n        'label' => 'One'\n    ),\n    array(\n        'value' => '2',\n        'label' => 'Two'\n    ),\n    array(\n        'value' => '3',\n        'label' => 'Three'\n    ),\n    array(\n        'value' => '4',\n        'label' => 'Four'\n    )\n);\nreturn $modx->toJSON($itemListArray);\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Upcoming Events in MODX Revolution\nDESCRIPTION: This chunk defines the HTML structure for displaying individual events. It includes the event location, name, URL, and start date, with some basic formatting and accessibility attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventsx/eventsx.examples.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li>[[+location:htmlentities]]: <a href=\"[[+url]]\" title=\"[[+name:htmlentities]]\">[[+name:htmlentities]]</a> <time datetime=\"[[+startdate:strtotime:date=`%Y-%m-%d`]]\" title=\"event is scheduled on [[+startdate:strtotime:date=`%d.%m.%Y`]]\">[[+startdate:strtotime:date=%d.%m.%Y`]]</time></li>\n```\n\n----------------------------------------\n\nTITLE: Getting Column Names for modX Database\nDESCRIPTION: Fetches the names of columns related to a specific class via its database query, useful for mapping structures to class properties.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->getColumnNames($dsq)\n```\n\n----------------------------------------\n\nTITLE: Checking Manager Mode in MODX\nDESCRIPTION: This snippet shows how to check if the current context is the manager context, replacing the deprecated `IN_MANAGER_MODE` constant. It checks if the context is 'mgr'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"check context is mgr\"\n```\n\n----------------------------------------\n\nTITLE: Getting Cache Provider Method Syntax in PHP\nDESCRIPTION: Method signature for getCacheProvider that returns a cache provider instance. Takes optional key and options array parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.getcacheprovider.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid &getCacheProvider ([ $key = ''], [ $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Accessing Inherited Template Variable Values via MODX API\nDESCRIPTION: Shows how to retrieve Template Variable values that use the @INHERIT binding through the MODX API. The getTVValue() method automatically traverses up the resource hierarchy to find the inherited value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/inherit-binding.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$pages = $modx->getCollection('modResource');\nforeach ($pages as $p) {\n    print $p->getTVValue('my_inheritance');\n}\n```\n\n----------------------------------------\n\nTITLE: Output Placeholders for TaggerGetTags in PHP\nDESCRIPTION: Example of available placeholders that can be used in template chunks when working with the TaggerGetTags snippet. These placeholders include tag information, group details, and relationship data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tagger/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+id]] => 1\n[[+tag]] => News\n[[+alias]] => news\n[[+group]] => 3\n[[+group_id]] => 3\n[[+group_alias]] => mediatype\n[[+group_name]] => Media Type\n[[+group_field_type]] => tagger-combo-tag\n[[+group_allow_new]] => 0\n[[+group_remove_unused]] => 0\n[[+group_allow_blank]] => 1\n[[+group_allow_type]] => 0\n[[+group_show_autotag]] => 0\n[[+group_show_for_templates]] => 21\n[[+cnt]] => 1\n[[+uri]]\n[[+idx]] = Number starting from one for each tag\n[[+active]] => 1 (1/0 based on if current tag is active or not)\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Registry Topic\nDESCRIPTION: Example of subscribing to a specific topic ('/beer/') within the 'food' register for sending or reading messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$modx->registry->food->subscribe(\"/beer/\");\n```\n\n----------------------------------------\n\nTITLE: Example URL Transformation\nDESCRIPTION: Demonstrates how the friendly_url_prefix setting transforms a standard MODX URL to a SEO-friendly format. Using 'page' as the prefix would convert '/index.php?id=2' to '/page2.html'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/friendly_url_prefix.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOriginal URL: /index.php?id=2\nFriendly URL: /page2.html\n```\n\n----------------------------------------\n\nTITLE: ExtJS Component Selection\nDESCRIPTION: Comparison between ExtJS and jQuery component selection syntax\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/2.-ext-js-tutorial-ajax-include.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n    var win = Ext.getCmp('my_window');\n    // vs. jQuery's selector:\n    var win = jQuery('#my_window');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Search Snippet Usage in MODX\nDESCRIPTION: Simple invocation of the search snippet without additional parameters. Renders album search results using default templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.search.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!search]]\n```\n\n----------------------------------------\n\nTITLE: Permission Check in MODX Processor\nDESCRIPTION: Validates user permissions for chunk creation, returning a failure response if unauthorized.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-3.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (!$modx->hasPermission('new_chunk')) $modx->error->failure($modx->lexicon('permission_denied'));\n```\n\n----------------------------------------\n\nTITLE: Advanced getFeed Configuration with Template and Limits\nDESCRIPTION: Shows a more complex usage of getFeed with additional parameters to control feed item display, including template selection, item limits, and offset configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getfeed/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getFeed? \n  &url=`http://example.com/feed.rss` \n  &tpl=`myFeedItemChunk` \n  &limit=`5` \n  &offset=`0` \n  &toPlaceholder=`feedResults`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Context Menu for Subscriber Removal\nDESCRIPTION: Implements context menu functionality for the subscribers grid to support subscriber removal. Adds a menu item and handler method for the removal action.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nExt.extend(Sendex.grid.NewsletterSubscribers,MODx.grid.Grid, {\n\n    getMenu: function() {\n        var m = [];\n        m.push({\n            text: _('sendex_subscriber_remove')\n            ,handler: this.removeSubscriber\n        });\n        this.addContextMenuItem(m);\n    }\n\n    // ...\n\n    ,removeSubscriber:function(btn,e) {\n        MODx.msg.confirm({\n            title: _('sendex_subscriber_remove')\n            ,text: _('sendex_subscriber_remove_confirm')\n            ,url: Sendex.config.connector_url\n            ,params: {\n                action: 'mgr/newsletter/subscriber/remove'\n                ,id: this.menu.record.id\n            }\n            ,listeners: {\n                success: {fn:function® {this.refresh();},scope:this}\n            }\n        });\n    }\n\n});\nExt.reg('sendex-grid-newsletter-subscribers',Sendex.grid.NewsletterSubscribers);\n```\n\n----------------------------------------\n\nTITLE: Configuring TinyMCE Template List in MODX Revolution\nDESCRIPTION: This code snippet demonstrates the format for adding custom templates to the TinyMCE editor in MODX Revolution. Each template is defined with a name, path to the template file, and a description, separated by colons.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tinymce/tinymce.template.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nname:path-to-the-template:description\n```\n\n----------------------------------------\n\nTITLE: Basic ResourceLister Snippet with Inline HTML in PHP\nDESCRIPTION: The initial implementation of the ResourceLister snippet that queries and displays child resources of a specific parent, but with HTML markup embedded directly in the PHP code.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/* first, build the query */\n$c = $modx->newQuery('modResource');\n/* we only want published and undeleted resources */\n$c->where(array(\n  'published' => true,\n  'deleted' => false,\n));\n/* get all the children of ID 390 */\n$children = $modx->getChildIds(390);\nif (count($children) > 0) {\n    $c->where(array(\n        'id:IN' => $children,\n    ));\n}\n/* sort by menuindex ascending */\n$c->sortby('menuindex','ASC');\n/* get the resources as xPDOObjects */\n$resources = $modx->getCollection('modResource',$c);\n$output = '';\nforeach ($resources as $resource) {\n   $output .= '<li><a href=\"'.$modx->makeUrl($resource->get('id')).'\">'.$resource->get('pagetitle').'</a></li>';\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Defining disPost Table Schema in Markdown\nDESCRIPTION: This snippet outlines the database schema for the disPost table, which stores forum post data. It includes fields for post content, author information, threading, and metadata.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.database-model.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field          | Type (length) | Description                                                                                                                                                                                                           |\n| -------------- | ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| board          | int           | ID of the disBoard the post is in                                                                                                                                                                                     |\n| thread         | int           | ID of the disThread the post belongs to                                                                                                                                                                               |\n| parent         | int           | ID of the disPost that is the parent of this object. There is always one root post with a parent of 0 which is the first post in the thread, others are threaded and usually referencing the last post on the thread. |\n| title          | string (255)  | Title of the post, usually \"Re: `<name of thread>`\" but can be different depending on reply forms.                                                                                                                    |\n| message        | string        | The posts' content.                                                                                                                                                                                                   |\n| author         | int           | ID of the disUser object who authored the post.                                                                                                                                                                       |\n| createdon      | int           | Unix timestamp of the time this post was created                                                                                                                                                                      |\n| editedon       | int           | Unix timestampe of the time this post was edited (if it was edited, that is)                                                                                                                                          |\n| editedby       | int           | ID of the disUser object who edited the post.                                                                                                                                                                         |\n| icon           | string (255)  | ?? Unused                                                                                                                                                                                                             |\n| allow_replies | bool (1       | 0)                                                                                                                                                                                                                    | Does not seem to be used.                       |\n| rank           | string        | Ranking order within thread.                                                                                                                                                                                          |\n| ip             | string (255)  | IP of the poster                                                                                                                                                                                                      |\n| integrated_id | int           | Used for keeping IDs from imports.                                                                                                                                                                                    |\n| depth          | int (10)      | Depth of the current post inside the threaded model.                                                                                                                                                                  |\n| answer         | bool (1       | 0)                                                                                                                                                                                                                    | Wether this post is marked as an answer or not. |\n```\n\n----------------------------------------\n\nTITLE: Default pageTpl Chunk for SimpleSearch Pagination\nDESCRIPTION: This is the default Chunk used to render pagination links in SimpleSearch. It provides placeholders for the link URL, the text of the link (page number), and a separator between links. The Chunk is rendered using MODX's parser, replacing the placeholders with actual values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch/pagetpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<span class=\\\"sisea-page\\\"><a href=\\\"[[+link]]\\\">[[+text]]</a>[[+separator]]</span>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring bdHookNewListing Form Fields\nDESCRIPTION: Comprehensive form configuration for creating new listings with multiple input fields covering details like title, description, contact information, and geolocation data\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdhooknewlisting.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Sample Form Fields for bdHookNewListing -->\n<form>\n  <input name=\"title\" type=\"text\" />\n  <input name=\"description\" type=\"textarea\" />\n  <input name=\"price\" type=\"number\" step=\"0.01\" />\n  <input name=\"category\" type=\"select\" />\n  <input name=\"publishedon\" type=\"date\" />\n  <input name=\"companyname\" type=\"text\" />\n  <input name=\"address\" type=\"text\" />\n  <input name=\"zip\" type=\"text\" />\n  <input name=\"country\" type=\"hidden\" />\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Snippet Resource IDs for sekUserGalleries\nDESCRIPTION: This table displays the system settings related to resource IDs needed for various sekUserGalleries snippets. These settings must be configured with the appropriate page IDs where each snippet is implemented.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/index.md#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n| sekusergalleries.browsegalleries_resource_id      | The id of the page using the `[[browse.galleries]]` snippet.                                                                                                                    |          | >0.0.1  |\n| sekusergalleries.usersgallery_resource_id         | The id of the page using the `[[users.gallery.view]]` snippet.                                                                                                  |          | >0.0.1  |\n| sekusergalleries.editgallery_resource_id          | The id of the page using the `[[users.gallery.manage]]` snippet.                                                                                                |          | >0.0.1  |\n| sekusergalleries.album_view_resource_id          | The id of the page using the `[[album.view]]` snippet.                                                                                                          |          | >0.0.1  |\n| sekusergalleries.album_manage_resource_id        | The id of the page using the `[[album.manage]]` snippet.                                                                                                        |          | >0.0.1  |\n| sekusergalleries.items_manage_resource_id        | The id of the page using the `[[album.items.manage]]` snippet.                                                                                                  |          | >0.0.1  |\n| sekusergalleries.items_helper_resource_id        | The id of the page using the `[[album.items.helper]]` snippet.                                                                                                  |          | >0.0.1  |\n| sekusergalleries.album_search_resource_id        | The id of the page using the `[[search]]` snippet.                                                                                                              |          | >0.0.1  |\n| sekusergalleries.image_info_resource_id          | The id of the page using the `[[image.information]]` snippet.                                                                                                   |          | >0.0.1  |\n| sekusergalleries.directory_stats_resource_id     | The id of the page using the `[[directory]]` snippet.                                                                                                           |          | >0.0.1  |\n```\n\n----------------------------------------\n\nTITLE: Syncing Feature Branch with Updated Master\nDESCRIPTION: Commands to sync a feature branch with changes from the updated master branch\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/pr_workflow.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit fetch upstream\ngit merge --ff-only upstream/master\ngit push origin master\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout my-feature\ngit rebase master\n```\n\n----------------------------------------\n\nTITLE: Defining Manager Login URL Setting - MODX - Markdown\nDESCRIPTION: This snippet specifies the alternate URL for the manager login page in MODX. This setting allows customization for the access point to the administrator dashboard based on your site's requirements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[manager_login_url_alternate](building-sites/settings/manager_login_url_alternate)\n```\n\n----------------------------------------\n\nTITLE: MODX Manager Default Template Path\nDESCRIPTION: Shows the default file path for MODX manager template files\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/custom-manager-themes.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmanager/templates/default\n```\n\n----------------------------------------\n\nTITLE: Referencing Theme System Setting in MODX Template\nDESCRIPTION: This snippet shows the use of the [[++theme]] system setting which forms the base of the theme_path setting and allows for customized theming in MODX templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fx2themebase/fx2.how-to-use-fx2/for-theme-authors.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n[[++theme]]\n```\n\n----------------------------------------\n\nTITLE: Registering CSS and JS in MODX (Legacy)\nDESCRIPTION: This snippet demonstrates the legacy methods for registering CSS and JavaScript files in MODX components. These methods are used in older versions and might not be compatible with modern extensions like AjaxManager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/package-build/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$this->modx->regClientCSS()\n$this->modx->regClientStartupScript()\n$this->modx->regClientScript()\n$this->modx->regClientStartupHTMLBlock()\n```\n\n----------------------------------------\n\nTITLE: Preventing Events from Firing on OnChunkRender in PHP\nDESCRIPTION: Example of how to prevent any events from firing on the 'OnChunkRender' event by removing it from the eventMap.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.removeeventlistener.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->removeEventListener('OnChunkRender');\n```\n\n----------------------------------------\n\nTITLE: Accessing MODX Configuration Option\nDESCRIPTION: Replaces the deprecated `$modx->db->config` to access configurations. Uses the `modX->getOption()` method to retrieve configuration values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n\"[modX->getOption()](extending-modx/xpdo/class-reference/xpdoobject/configuration-accessors/getoption \\\"getOption\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Backing up Apache Configuration\nDESCRIPTION: Commands to back up the Apache configuration file before making modifications to whitelist ModSecurity rules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ncd /usr/local/apache/conf\ncp -p httpd.conf httpd.conf.backup\n```\n\n----------------------------------------\n\nTITLE: Database Table Resolver Script\nDESCRIPTION: PHP script to dynamically add new fields and indexes during package installation with error handling\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$level = $modx->getLogLevel();\n$modx->setLogLevel(xPDO::LOG_LEVEL_FATAL);\n\n$manager->addField('sxQueue', 'hash');\n$manager->addIndex('sxQueue', 'hash');\n\n$modx->setLogLevel($level);\n```\n\n----------------------------------------\n\nTITLE: SimpleSearchForm Default Tpl Chunk\nDESCRIPTION: This HTML snippet represents the default template for the SimpleSearchForm. It includes a form with input fields for search terms, a hidden field for the landing page ID, and a submit button. Placeholders are used to dynamically populate attributes and values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.simplesearchform/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"sisea-search-form\" action=\"[[~[[+landing:default=`[[*id]]`]]]]\" method=\"[[+method:default=`get`]]\">\n  <fieldset>\n    <label for=\"[[+searchIndex]]\">[[%sisea.search? &namespace=`sisea` &topic=`default`]]</label>\n    <input type=\"text\" name=\"[[+searchIndex]]\" id=\"[[+searchIndex]]\" value=\"[[+searchValue]]\" />\n    <input type=\"hidden\" name=\"id\" value=\"[[+landing:default=[[*id]]]]\" />\n    <input type=\"submit\" value=\"[[%sisea.search? &namespace=`sisea` &topic=`default`]]\" />\n  </fieldset>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Basic File Widget Output Example in PHP\nDESCRIPTION: Simple example showing how to return direct output from a File Dashboard Widget. This approach simply returns a string that will be displayed in the widget's content panel.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/dashboards/widget-types/file.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn 'Hello, world!';\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Information in MODX\nDESCRIPTION: Utilize the `$user = $this\\->getObjectGraph('modUser', '{\"Profile\":{}}', $uid, true)` function to access user details along with their profile data in MODX, which is vital for handling user-specific operations and data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getUserInfo()\n```\n\n----------------------------------------\n\nTITLE: Key ModSecurity Error Information\nDESCRIPTION: Essential information extracted from a ModSecurity error message needed for creating a whitelist rule.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[id \"300016\"]\n[hostname \"yoursite.com\"]\n[uri \"/connectors/element/tv.php\"]\n```\n\n----------------------------------------\n\nTITLE: Triggering OnChunkRender Event in MODX PHP\nDESCRIPTION: Example of invoking the OnChunkRender event with a params array containing the chunk ID. This demonstrates practical usage of the invokeEvent method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.invokeevent.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->invokeEvent('OnChunkRender',array(\n   'id' => $chunk->get('id'),\n));\n```\n\n----------------------------------------\n\nTITLE: Configuring FURL Alias Trim Characters in MODX Revolution\nDESCRIPTION: The friendly_alias_trim_chars setting specifies characters to be trimmed from the beginning and end of resource aliases in MODX Revolution. This affects how friendly URLs are generated for resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/friendly_alias_trim_chars.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/.-_\n```\n\n----------------------------------------\n\nTITLE: GetResources Template Array Query - PHP\nDESCRIPTION: Filters resources matching an array of template IDs using IN condition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`[[*id]]` &where=`{\"template:IN\":[1,2,3]}` &tpl=`myRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Variable Data in OnTemplateVarBeforeSave Plugin Example in PHP\nDESCRIPTION: This plugin demonstrates how to access template variable data during the OnTemplateVarBeforeSave event. It outputs the template variable's data to the error log and checks whether it's a new TV being created or an existing one being updated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ontemplatevarbeforesave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnTemplateVarBeforeSave':\n        //массив твшки, со всеми параметрами\n        print_r($templateVar->toArray());\n        //проверка на обновление или создание самого тв\n        if ($mode == modSystemEvent::MODE_NEW){\n            echo 'Был создан новый ТВ';\n        } elseif ($mode == modSystemEvent::MODE_UPD){\n            echo 'Был обновлен старый ТВ';\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Facebook Placeholder Output\nDESCRIPTION: Shows the rendered output of the Facebook placeholders when displayed on a MODX page, demonstrating how the dynamic values appear to site visitors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookprofile.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nFacebook Name: MODX\nLikes: 2348\n```\n\n----------------------------------------\n\nTITLE: Resource Tag Definition\nDESCRIPTION: This snippet defines the format for resource tags in MODX. Resource tags are used to reference resource fields or template variables within MODX templates or content. The tag consists of double square brackets, an asterisk, and the resource field or template variable name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/glossary.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"[[*ResourceFieldTV]]\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Remote for Pull Requests\nDESCRIPTION: Git remote configuration that enables fetching pull requests as special branches. Shows the original and modified configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/testing-pull-requests.md#2025-04-17_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[remote \"upstream\"]\\n        url = git@github.com:modxcms/revolution.git\\n        fetch = +refs/heads/*:refs/remotes/upstream/*\n```\n\nLANGUAGE: ini\nCODE:\n```\n[remote \"upstream\"]\\n        url = git@github.com:modxcms/revolution.git\\n        fetch = +refs/heads/*:refs/remotes/upstream/*\\n        fetch = +refs/pull/*/head:refs/remotes/upstream/pr/*\n```\n\n----------------------------------------\n\nTITLE: Template Variable Retrieval in MODX\nDESCRIPTION: Fetch individual template variables through the `modX\\->getObject('modTemplateVar', $criteria)` method in MODX, which allows for specific queries to identify and work with template variables according to defined criteria.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getTemplateVar()\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Echo and Die\nDESCRIPTION: This snippet demonstrates a simple PHP code for debugging. It echoes \"Hello world\" to the page and terminates the script execution, allowing quick verification of file execution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/package-build/index.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n<?php:\necho 'Hello world';\ndie;\n```\n\n----------------------------------------\n\nTITLE: Default PeopleGroup User Template in MODX\nDESCRIPTION: Default template chunk for displaying individual users within a PeopleGroup listing. Shows username and role in a list item format with dynamic classes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.peoplegroup/usertpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+cls]]\">[[+username]] - <em>[[+role]]</em></li>\n```\n\n----------------------------------------\n\nTITLE: XML Schema Class Definition Example in PHP\nDESCRIPTION: Example of an XML schema definition showing how class names are defined in xPDO schema, demonstrating that class names are not the same as table names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollectiongraph.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<object class=\"MyClassName\" table=\"my_class_name\" extends=\"xPDOObject\">\n```\n\n----------------------------------------\n\nTITLE: Setting DYLD_LIBRARY_PATH for MAMP\nDESCRIPTION: This snippet shows how to set the DYLD_LIBRARY_PATH environment variable in Mac OS X to include the MAMP PHP libraries, resolving potential issues when running `transport.core.php` from the terminal.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\"export DYLD_LIBRARY_PATH=/Applications/MAMP/Library/lib:\\${DYLD_LIBRARY_PATH\\}\"\n```\n\n----------------------------------------\n\nTITLE: Running Discuss Build Script in PHP\nDESCRIPTION: Command to execute the Discuss build script, which creates a package for installation. This can be run from the command line or by accessing the file via a web browser.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation/installation-from-git.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp _build/build.transport.php\n```\n\n----------------------------------------\n\nTITLE: Cloning BxrExtra Repository\nDESCRIPTION: This command clones the BxrExtra repository from GitHub into the specified directory. This is the first step in setting up the extra within a MODX Revolution environment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bxrextra/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone git://github.com/TheBoxer/BxrExtra.git .\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Resources with getResources in MODX\nDESCRIPTION: A MODX snippet call that retrieves resources related to the current section using the getResources snippet. It filters resources by parent ID 313 in the revolution context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/tv-default.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`313` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Closing HTML Head Tag\nDESCRIPTION: This snippet closes the head tag in an HTML document. It ensures that the head section of the HTML document is properly terminated before starting the body. No additional dependencies are required to use this tag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-head-close.md#2025-04-17_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n</head>\n```\n\n----------------------------------------\n\nTITLE: Converting DropMenu to Wayfinder in MODX Revolution\nDESCRIPTION: This code snippet shows how to replace an outdated DropMenu call with Wayfinder in MODX Revolution templates. It involves changing parameters like 'startDoc' to 'startId' and 'levelLimit' to 'level'. The replacement facilitates the switch to a supported navigation menu tool.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[DropMenu?startDoc=`0`&levelLimit=`1` ]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`0`&level=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Listing Campers with cmCampers Snippet\nDESCRIPTION: A getResources-inspired snippet for displaying a list of campers in the system. Retrieves and renders camper information dynamically based on specified parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end.md#2025-04-17_snippet_0\n\nLANGUAGE: MODX\nCODE:\n```\n[[cmCampers]]\n```\n\n----------------------------------------\n\nTITLE: Select Method Parameter Options\nDESCRIPTION: Shows the two possible parameter types that the select method can accept - string or array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery select ([string $columns = '*'])\nxPDOQuery select ([array $columns =  array()])\n```\n\n----------------------------------------\n\nTITLE: Output Rendering of Template Variables\nDESCRIPTION: Render the output of a collection of template variables using modTemplateVar\\->renderOutput() in MODX. This is essential for dynamically generating content representations from template variable data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getTemplateVarOutput()\n```\n\n----------------------------------------\n\nTITLE: Loading Lexicon in MODX Processor\nDESCRIPTION: Initializes the processor by loading the necessary language strings from the 'chunk' lexicon topic.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-3.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @package modx\n * @subpackage processors.element.chunk\n */\n$modx->lexicon->load('chunk');\n```\n\n----------------------------------------\n\nTITLE: Testing Object Modification with isDirty in PHP\nDESCRIPTION: Demonstrates how to use the isDirty() method to check if a Skrewt object has been modified. It shows the result before and after modifying an object property.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/state-accessors/isdirty.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$skrewt = $xpdo->getObject('Skrewt',1);\n\necho $skrewt->isDirty() ? 1 : 0; // prints 0\n\n$skrewt->set('poisonous',false);\n\necho $skrewt->isDirty() ? 1 : 0; // prints 1\n```\n\n----------------------------------------\n\nTITLE: Deprecated MODX API Mode Initialization in PHP\nDESCRIPTION: Deprecated method for initializing MODX in API mode. Uses the main index.php file and sets up manager context. This approach is no longer recommended.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/loading-externally.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndefine('MODX_API_MODE', true);\n// Full path to the index\nrequire_once('/path/to/modx/public_html/index.php');\n$modx->initialize('mgr');\n```\n\n----------------------------------------\n\nTITLE: Defining Twitter Feed Template Chunk in PHP\nDESCRIPTION: This PHP template chunk is used for displaying individual tweets in the Twitter feed. It relies on placeholders for the description, publication date, and source of the tweet. The template outputs formatted HTML for each tweet entry, and the :ago filter is applied for formatting the publication date.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getfeed/getfeed.adding-a-twitter-feed.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"tweet\">\n    <p>[[+description]]\n    <br /><a href=\"[[+link]]\">[[+pubDate:ago]]</a> via [[+twitter.source]]</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Album Links with Placeholders in HTML\nDESCRIPTION: This HTML snippet is used to create a link for each Album associated with an Item using the GalleryItem snippet. The chunk utilizes placeholders such as id, name, and albumRequestVar to render dynamic links to Albums. Appropriate for systems where MODX is utilized and placeholders are dynamically replaced by the framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem/albumtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"gal-item-album\"><a href=\"[[~[[*id]]]]?[[+albumRequestVar]]=[[+id]]\">[[+name]]</a></span>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Logout Message in MODX\nDESCRIPTION: This HTML snippet creates a simple message to display after a user has successfully logged out.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/basic-setup.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<p>Thank you for visiting! Come again soon!</p>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Field Value with xPDOObject::get() in PHP\nDESCRIPTION: This example shows how to retrieve the value of a single field ('name') from an xPDOObject using the get() method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/get.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$object->set('name','Charles');\n$name = $object->get('name');\necho $name; // produces \"Charles\"\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationship in xPDO XML Schema\nDESCRIPTION: XML schema definitions for a one-to-one relationship between 'Users' and 'Userdata' objects in xPDO.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"Users\" table=\"users\" extends=\"xPDOObject\">\n        <field key=\"user_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n        <field key=\"username\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"true\" />\n        <field key=\"bio\" dbtype=\"text\" phptype=\"string\" null=\"true\" />\n        <field key=\"joindate\" dbtype=\"date\" phptype=\"date\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"user_id\" collation=\"A\" null=\"false\" />\n        </index>\n        <composite alias=\"Userdata\" class=\"Userdata\" local=\"user_id\" foreign=\"userdata_id\" cardinality=\"one\" owner=\"local\" />\n</object>\n<object class=\"Userdata\" table=\"userdata\" extends=\"xPDOObject\">\n        <field key=\"userdata_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n        <field key=\"age\" dbtype=\"tinyint\" precision=\"3\" attributes=\"unsigned\" phptype=\"integer\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"userdata_id\" collation=\"A\" null=\"false\" />\n        </index>\n        <aggregate alias=\"Users\" class=\"Users\" local=\"userdata_id\" foreign=\"user_id\" cardinality=\"one\" owner=\"foreign\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: Basic Placeholder Usage in MODX\nDESCRIPTION: Example of using a basic placeholder in MODX templates to display content from a resource field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[*pagetitle]]\n```\n\n----------------------------------------\n\nTITLE: Multiple Feed Sources with spieFeed in MODX Revolution\nDESCRIPTION: Example of how to configure spieFeed to fetch from multiple RSS sources. Feed URLs are separated by pipe (|) symbols to allow the snippet to aggregate content from different sources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/spiefeed/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nhttp://feeds.feedburner.com/modx-announce | http://www.voanews.com/templates/Articles.rss?sectionPath=/russian/news\n```\n\n----------------------------------------\n\nTITLE: Custom Field Order Sorting with xPDOQuery\nDESCRIPTION: Demonstrates using the FIELD() function to specify a custom sort order for modResource objects by their IDs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.sortby.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('modResource');\n$query->sortby('FIELD(modResource.id, 4,7,2,5,1 )');\n$boxes = $xpdo->getCollection('modResource',$query);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Context Event Map in PHP\nDESCRIPTION: Example showing how to get the event map for the current MODX context. This returns an array containing all events and their associated plugins.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.geteventmap.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$map = $modx->getEventMap();\n```\n\n----------------------------------------\n\nTITLE: Galleriffic Script for Image Gallery\nDESCRIPTION: This JavaScript snippet initializes Galleriffic gallery components. It requires jQuery, Galleriffic, and integrates control features and hover effects for thumbnails.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\njQuery(document).ready(function ($) {\n    $(\"div.navigation\").css({ width: \"220px\", float: \"left\" });\n    $(\"div.content\").css(\"display\", \"block\");\n\n    // Initially set opacity on thumbs and add\n    // additional styling for hover effect on thumbs\n    var onMouseOutOpacity = 0.67;\n    $(\"#thumbs ul.thumbs li\").opacityrollover({\n        mouseOutOpacity: onMouseOutOpacity,\n        mouseOverOpacity: 1.0,\n        fadeSpeed: \"fast\",\n        exemptionSelector: \".selected\",\n    });\n\n    // Initialize Advanced Galleriffic Gallery\n    var gallery = $(\"#thumbs\").galleriffic({\n        delay: 2500,\n        numThumbs: 15,\n        preloadAhead: 10,\n        enableTopPager: true,\n        enableBottomPager: true,\n        maxPagesToShow: 7,\n        imageContainerSel: \"#slideshow\",\n        controlsContainerSel: \"#controls\",\n        captionContainerSel: \"#caption\",\n        loadingContainerSel: \"#loading\",\n        renderSSControls: true,\n        renderNavControls: true,\n        playLinkText: \"Play Slideshow\",\n        pauseLinkText: \"Pause Slideshow\",\n        prevLinkText: \"&lsaquo; Previous Photo\",\n        nextLinkText: \"Next Photo &rsaquo;\",\n        nextPageLinkText: \"Next &rsaquo;\",\n        prevPageLinkText: \"&lsaquo; Prev\",\n        enableHistory: false,\n        autoStart: false,\n        syncTransitions: true,\n        defaultTransitionDuration: 900,\n        onSlideChange: function (prevIndex, nextIndex) {\n            // 'this' refers to the gallery, which is an extension of $('#thumbs')\n            this.find(\"ul.thumbs\")\n                .children()\n                .eq(prevIndex)\n                .fadeTo(\"fast\", onMouseOutOpacity)\n                .end()\n                .eq(nextIndex)\n                .fadeTo(\"fast\", 1.0);\n        },\n        onPageTransitionOut: function (callback) {\n            this.fadeTo(\"fast\", 0.0, callback);\n        },\n        onPageTransitionIn: function () {\n            this.fadeTo(\"fast\", 1.0);\n        },\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Page Title with MODX Pagetitle Tag (HTML)\nDESCRIPTION: Shows how to use the [[*pagetitle]] tag to dynamically set the page title in the HTML head.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<title>[[*pagetitle]]</title>\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Grid from modX Database Query\nDESCRIPTION: Constructs an HTML grid based on results from a SQL database query. Currently, there is no direct analogous function to this implementation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->getHTMLGrid($dsq, $params)\n```\n\n----------------------------------------\n\nTITLE: Using Resource ID Tag in HTML Link (MODX Revolution)\nDESCRIPTION: Demonstrates how to use the resource ID tag [[*id]] within an HTML anchor tag to create a self-referencing link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*id]]]]\">¡Añade esta página a marcadores!</a>\n```\n\n----------------------------------------\n\nTITLE: Sample VirtualHost Configuration\nDESCRIPTION: Example VirtualHost block from Apache configuration showing where to find domain-specific configuration files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<VirtualHost 123.123.123.123>\n    ServerName yoursite.com\n    ServerAlias www.yoursite.com\n    DocumentRoot /home/youruser/public_html\n    # ... more stuff here ...\n    Include \"/usr/local/apache/conf/userdata/std/2/yoursite/*.conf\"\n    Include \"/usr/local/apache/conf/userdata/std/2/yoursite/yoursite.com/*.conf\"\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Creating Home Page Link with MODX Site Start Tag (HTML)\nDESCRIPTION: Shows how to use the [[++site_start]] tag in combination with the link syntax to create a link to the designated home page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"logo\" href=\"[[~[[++site_start]]]]\"> Inicio </a>\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Thumb Error Background Color - MODX - Markdown\nDESCRIPTION: This configuration sets the background color for error messages displayed by PHPThumb, contributing to the visual consistency of error handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_error_bgcolor](building-sites/settings/phpthumb_error_bgcolor)\n```\n\n----------------------------------------\n\nTITLE: Adding Menu and Action Vehicles\nDESCRIPTION: Demonstrates loading and adding menu and action vehicles to the package builder from external transport files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/* load action/menu */\n$menu = include $sources['data'].'transport.menu.php';\n\n$vehicle= $builder->createVehicle($menu,array (\n    xPDOTransport::PRESERVE_KEYS => true,\n    xPDOTransport::UPDATE_OBJECT => true,\n    xPDOTransport::UNIQUE_KEY => 'text',\n    xPDOTransport::RELATED_OBJECTS => true,\n    xPDOTransport::RELATED_OBJECT_ATTRIBUTES => array (\n        'Action' => array (\n            xPDOTransport::PRESERVE_KEYS => false,\n            xPDOTransport::UPDATE_OBJECT => true,\n            xPDOTransport::UNIQUE_KEY => array ('namespace','controller'),\n        ),\n    ),\n));\n$builder->putVehicle($vehicle);\nunset($vehicle,$action); /* to keep memory low */\n```\n\n----------------------------------------\n\nTITLE: Loading jQuery in HTML Template for sekFancyBox\nDESCRIPTION: Example of properly loading jQuery in an HTML template for use with sekFancyBox. The type attribute must be explicitly set to \"text/javascript\" for compatibility with sekFancyBox.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"assets/js/libs/jquery-1.8.3.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX and Package Builder in PHP\nDESCRIPTION: This PHP code initializes the MODX environment and loads the necessary classes for building the schema. It sets up logging and defines the source paths for the build process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"<?php\\n/**\\n * Build Schema script\\n *\\n * @package storefinder\\n * @subpackage build\\n */\\n$mtime = microtime();\\n$mtime = explode(\\\" \\\", $mtime);\\n$mtime = $mtime[1] + $mtime[0];\\n$tstart = $mtime;\\nset_time_limit(0);\\nrequire_once dirname(__FILE__) . '/build.config.php';\\ninclude_once MODX_CORE_PATH . 'model/modx/modx.class.php';\\n$modx= new modX();\\n$modx->initialize('mgr');\\n$modx->loadClass('transport.modPackageBuilder','',false, true);\\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\\n$root = dirname(dirname(__FILE__)).'/';\\n$sources = array(\\n    'root' => $root,\\n    'core' => $root.'core/components/storefinder/',\\n    'model' => $root.'core/components/storefinder/model/',\\n    'assets' => $root.'assets/components/storefinder/',\\n    'schema' => $root.'_build/schema/',\\n);\"\n```\n\n----------------------------------------\n\nTITLE: Basic xPDOTransport Package Installation\nDESCRIPTION: Simple example showing how to install a transport package using the install() method without any custom options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdotransport/xpdotransport.install.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$transport->install();\n```\n\n----------------------------------------\n\nTITLE: ModSecurity Error Log Example\nDESCRIPTION: Sample ModSecurity error message showing a blocked SQL operation in the MODX manager with rule ID, hostname, and URI information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[Sat Nov 19 19:16:32 2011] [error] [client 123.123.123.123] ModSecurity: Access denied with code 500 (phase 2).\nPattern match \"(insert[[:space:]]+into.+values|select.*from.+[a-z|A-Z|0-9]|select.+from|bulk[[:space:]]+insert|union.+select|convert.+\\\\(.*from)\"\nat ARGS:els.\n[file \"/usr/local/apache/conf/modsec2.user.conf\"]\n[line \"359\"]\n[id \"300016\"]\n[rev \"2\"]\n[msg \"Generic SQL injection protection\"]\n[severity \"CRITICAL\"]\n[hostname \"yoursite.com\"]\n[uri \"/connectors/element/tv.php\"]\n[unique_id \"TshG4EWntHMAAAfIFmUAAAAI\"]\n```\n\n----------------------------------------\n\nTITLE: Fetching Document Children in MODX\nDESCRIPTION: Retrieve child resources of a document using modX\\->getCollection('modResource', $criteria) with specified criteria in the MODX framework, allowing for efficient navigation through hierarchical resource structures.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getDocumentChildren()\n```\n\n----------------------------------------\n\nTITLE: Defining default_template System Setting\nDESCRIPTION: System setting that specifies which Template should be pre-selected by default when creating new Resources in MODX. The setting is of type Template with a default value of 1.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/default_template.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Default Template\n**Type**: Template\n**Default**: 1\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of MetaX Snippet in MODX Revolution\nDESCRIPTION: Demonstrates the simplest way to call the MetaX snippet in a MODX Revolution template. This uses the default XHTML4 template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/metax/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!MetaX]]\n```\n\n----------------------------------------\n\nTITLE: Handling OnBeforeCacheUpdate Event in MODX Plugin (PHP)\nDESCRIPTION: This code snippet demonstrates how to handle the OnBeforeCacheUpdate event in a MODX plugin. It logs a message when the cache update process begins.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforecacheupdate.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeCacheUpdate':\n        $modx->log(modX::LOG_LEVEL_ERROR, \"Let's start!\");\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure in xPDO Schema\nDESCRIPTION: Shows how to define a table (sfStore) in the xPDO schema, including its class name, table name, and parent class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/database-and-tables.md#2025-04-17_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"sfStore\" table=\"stores\" extends=\"xPDOSimpleObject\">\n```\n\n----------------------------------------\n\nTITLE: Complete OnLoadWebPageCache Plugin Example\nDESCRIPTION: Comprehensive plugin example showing how to modify pagetitle, TV values, and content during the cache loading event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnLoadWebPageCache':\n        $modx->event->params['resource']->pagetitle = 'New title';\n        // меняем значение ТВ\n        $tv = $modx->event->params['resource']->price[1] = '128';\n        /*\n        // массив значений ТВ \n        array (\n            0 => 'name', //название ТВ\n            1 => 'значение', //значение ТВ\n            2 => 'default', //параметры вывода ТВ\n            3 => NULL,\n            4 => 'text', //тип ТВ\n        )\n        */\n        $modx->event->params['resource']->_content = 'New content'.$tv;\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Exercise Item Template - HTML\nDESCRIPTION: Default chunk template for displaying individual exercise items with details like name, description, goal, level, sets and repetitions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"exerplan-exercise-[[+exerplan.id]]\">\n    <div>Exercise: [[+exerplan.name]]</div>\n    <div>Description: [[+exerplan.description]]</div>\n    <div>Goal: [[+exerplan.goal]]</div>\n    <div>Level: [[+exerplan.level_name]]</div>\n    <div>Sets: [[+exerplan.set]]</div>\n    <div>Reps: [[+exerplan.repetition]]</div>\n    [[+exerplan.usergroup:notempty=`\n    <div>Usergroup: [[+exerplan.usergroup]]</div>\n    `]]\n    [[+exerplan.galleries:notempty=`\n    [[+exerplan.galleries]]\n    `]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reverse Engineering Database Schema Generation with xPDO\nDESCRIPTION: A comprehensive PHP script for automatically generating XML schema and PHP model classes from existing MySQL database tables in a MODX environment. The script provides configuration options for database connection, package naming, and generation settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$debug = false; // Enable detailed debug information\n$verbose = true; // Output status information\n$regenerate_schema = true; // Regenerate XML schema\n$regenerate_classes = true; // Regenerate PHP classes\n\n$package_name = ''; // Short package name\n$database_server = 'localhost';\n$dbase = ''; // Database name\n$database_user = ''; // Database username\n$database_password = ''; // Database password\n$table_prefix = ''; // Optional table prefix\n```\n\n----------------------------------------\n\nTITLE: Setting Chunk Content in MODX using PHP\nDESCRIPTION: Method signature showing how to set content for a MODX chunk. Takes a content parameter and an optional options array parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/modchunk/modchunk.setcontent.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid setContent ( $content, [ $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Checking Apache Modules via Command Line\nDESCRIPTION: This shell command uses `apachectl` to list all loaded Apache modules. It's useful to confirm if ModSecurity (security2_module) is enabled on the server. The command either uses the direct path, or searches for the executable path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\napachectl -t -D DUMP_MODULES\n```\n\nLANGUAGE: PHP\nCODE:\n```\nfind / -name apachectl\n```\n\nLANGUAGE: Shell\nCODE:\n```\n/usr/local/apache/bin/apachectl -t -D DUMP_MODULES\n```\n\n----------------------------------------\n\nTITLE: Getting Affected Rows in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->getAffectedRows()` for getting the number of affected rows. Use modX->getCount() or xPDOCriteria->stmt->rowCount() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n\"see modX->getCount() or xPDOCriteria->stmt->rowCount()\"\n```\n\n----------------------------------------\n\nTITLE: Increasing Logging Level for Debugging in PHP\nDESCRIPTION: Shows how to increase the logging level in MODX to display all debugging information when troubleshooting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/addone.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->setLogLevel(4); // show all debugging info\n```\n\n----------------------------------------\n\nTITLE: getResources snippet call with limit parameter (PHP)\nDESCRIPTION: This example illustrates an incorrect getResources call where the ampersand (&) is missing from the `&limit` parameter. This will cause the snippet call to fail. The correct format requires the ampersand.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nlimit=`5`\n```\n\nLANGUAGE: php\nCODE:\n```\n&limit=`5`\n```\n\n----------------------------------------\n\nTITLE: Resetting Password via Database Query in MODX 2.0.x\nDESCRIPTION: This SQL query updates the user's password in MODX 2.0.x. It sets a new password using the MD5 function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/security/troubleshooting-security/resetting-a-user-password-manually.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE modx_users SET password = MD5('the-new-password') WHERE username = 'theusername';\n```\n\n----------------------------------------\n\nTITLE: Closing XML Object and Model Tags\nDESCRIPTION: This XML snippet closes the object and model tags, completing the XML schema definition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"</object>\\n</model>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX Session Handler System Setting\nDESCRIPTION: System setting for defining the session handler class in MODX. The default value 'modSessionHandler' enables database-managed sessions. Can be left blank for standard PHP session management or set to a custom session handling class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/session_handler_class.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodSessionHandler\n```\n\n----------------------------------------\n\nTITLE: Identifying Key Information from ModSecurity Error\nDESCRIPTION: This highlights the important parts of the ModSecurity error message to extract: the ID of the rule that was triggered, the hostname the rule was triggered on, and the URI that triggered the rule.  These are the components you need in order to create a whitelist entry.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n[id \"300016\"]\n[hostname \"yoursite.com\"]\n[uri \"/connectors/element/tv.php\"]\n```\n\n----------------------------------------\n\nTITLE: Loading jQuery and Analytics Tracking - HTML\nDESCRIPTION: This snippet is responsible for including the jQuery library and initiating Google Analytics tracking. It checks if jQuery is already loaded; if not, it loads the specified version from a local source. Google Analytics tracking is conditionally included based on the site's settings, allowing for customizable user tracking.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-bottom-open.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"ajax.googleapis.com/ajax/libs/jquery/[[++bx.jquery_version]]/jquery.min.js\"></script>\n<script>\n  window.jQuery || document.write(\n    '<script src=\"[[++assets_url]]components/boilerx/js/vendor/jquery-[[++bx.jquery_version]].min.js\"><\\/script>')\n</script>\n<script src=\"[[++assets_url]]components/boilerx/js/plugins.js\"></script>\n<script src=\"[[++assets_url]]components/boilerx/js/main.js\"></script>\n\n[[++bx.show_comments:if=`[[++bx.show_comments]]`:eq=`1`:then=`\n<!-- Change UAXXXXXXXX1 to be your site's ID by setting bx.ga-id System Setting to auto-enable tracking -->\n`]]\n<[[++bx.ga-id:if=`[[++bx.ga-id]]`:eq=`UAXXXXXXXX1`:then=`!--`]]script>\n  var _gaq=[ ['_setAccount','[[++bx.ga-id]]'],['_trackPageview'] ];\n  (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];\n  g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';\n  s.parentNode.insertBefore(g,s)}(document,'script'));\n  </script[[++bx.ga-id:if=`[[++bx.ga-id]]`:eq=`UAXXXXXXXX1`:then=`--`]]>\n```\n\n----------------------------------------\n\nTITLE: Implementing Loginza Authentication Interface in HTML\nDESCRIPTION: This chunk loads the Loginza script and displays login buttons for various providers. It includes a placeholder for error messages and generates a login URL. The chunk is designed for unauthenticated users and redirects back to the site after validation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/loginza/tpl.loginza.login.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"http://loginza.ru/js/widget.js\"></script>\nAuthentication through Loginza\n<a href=\"https://loginza.ru/api/widget?token_url=[[+login_url]]\">\n    <img src=\"http://loginza.ru/img/providers/yandex.png\" alt=\"Yandex\" title=\"Yandex\">\n    <img src=\"http://loginza.ru/img/providers/google.png\" alt=\"Google\" title=\"Google Accounts\">\n    <img src=\"http://loginza.ru/img/providers/vkontakte.png\" alt=\"Vkontakte\" title=\"Vkontakte\">\n    <img src=\"http://loginza.ru/img/providers/mailru.png\" alt=\"Mail.ru\" title=\"Mail.ru\">\n    <img src=\"http://loginza.ru/img/providers/twitter.png\" alt=\"Twitter\" title=\"Twitter\">\n    <img src=\"http://loginza.ru/img/providers/loginza.png\" alt=\"Loginza\" title=\"Loginza\">\n    <img src=\"http://loginza.ru/img/providers/myopenid.png\" alt=\"MyOpenID\" title=\"MyOpenID\">\n    <img src=\"http://loginza.ru/img/providers/openid.png\" alt=\"OpenID\" title=\"OpenID\">\n    <img src=\"http://loginza.ru/img/providers/webmoney.png\" alt=\"WebMoney\" title=\"WebMoney\">\n</a>\n[[+error:notempty=`<div class=\"alert alert-block alert-error\">[[+error]]</div>`]]\n```\n\n----------------------------------------\n\nTITLE: Cloning a Forked MODX Revolution Git Repository\nDESCRIPTION: This snippet shows how to clone your forked repository from GitHub. It includes the standard cloning process and adds the upstream remote to enable contribution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"git clone git@github.com:yourgitusernamehere/revolution.git\\ncd revolution\\ngit remote add upstream -f http://github.com/modxcms/revolution.git\"\n```\n\n----------------------------------------\n\nTITLE: Creating Calendar Container in MODX PHP\nDESCRIPTION: This snippet generates the basic HTML structure for a calendar within a MODX context. It uses placeholders to dynamically insert the calendar ID and the generated calendar content from an events calendar processor.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.tplcalendar2.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<div id='[[+calendar_id]]'>\\n    [[+ec.Calendar]]\\n    <div class='cover'></div>\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Listening for a Custom Event in MODX with PHP Plugin\nDESCRIPTION: This snippet indicates the location to place the code to listen for a custom event.  The `TODO` indicates that the plugin code would go here.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n//... TODO...\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Components in MODx JS\nDESCRIPTION: Demonstrates how to create new objects with specified xtypes using MODx.load method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar w = MODx.load({\n  xtype: 'modx-window-namespace-create'\n  ,blankValues: true\n});\nw.setValues({ name: 'My Namespace' });\nw.show();\n```\n\n----------------------------------------\n\nTITLE: Specifying MySQL Server Port and Socket in PHP\nDESCRIPTION: Demonstrates how to specify a custom MySQL server port or socket when configuring the database connection for MODX installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/standard.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"my.basededatos.com; port = 3307\"\n```\n\nLANGUAGE: PHP\nCODE:\n```\n\";unix_socket=MySQL\"\n```\n\n----------------------------------------\n\nTITLE: Basic xPDOManager.createObjectContainer Syntax\nDESCRIPTION: Basic method signature for creating a container (database table) for a persistent data object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.createobjectcontainer.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid createObjectContainer (string $className)\n```\n\n----------------------------------------\n\nTITLE: Profile Snippet to Display Extended Field\nDESCRIPTION: This snippet retrieves and displays the user's 'Favorite Color' from the extended fields when using the Profile component. It provides a personalized view of the user's profile.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-custom-fields.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\n\n<p>[[+username]]'s Favorite Color: [[+color]]</p>\n```\n\n----------------------------------------\n\nTITLE: Using Default MODX Alias in CustomUrls Pattern\nDESCRIPTION: An example of using the default MODX alias placeholder in a CustomUrls pattern.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[+alias]]\n```\n\n----------------------------------------\n\nTITLE: Getting All Children of a Document in modX\nDESCRIPTION: Retrieves all child documents under a specified parent document, defined by criteria, supporting hierarchical content structures.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nmodX->getAllChildren()\n```\n\n----------------------------------------\n\nTITLE: Regex Validation for modChunk Schema\nDESCRIPTION: Example of regex validation for chunk names in MODX, ensuring valid characters and formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"modChunk\" table=\"site_htmlsnippets\" extends=\"modElement\">\n    <field key=\"name\" dbtype=\"varchar\" precision=\"50\" phptype=\"string\" null=\"false\" default=\"\" index=\"unique\" />\n    <!-- ... more fields here -->\n    <validation>\n        <rule field=\"name\" name=\"invalid\" type=\"preg_match\" rule=\"/^(?!\\s)[a-zA-Z0-9\\x2d-\\x2f\\x7f-\\xff_-\\s]+(?!\\s)$/\" message=\"chunk_err_invalid_name\" />\n    </validation>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Basic If Snippet Call in MODX\nDESCRIPTION: The basic syntax for calling the If snippet in MODX Revolution, which allows for implementing conditional logic in templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/if/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[If]]\n```\n\n----------------------------------------\n\nTITLE: Array Index Naming Convention in PHP\nDESCRIPTION: Example of proper array index naming for MODX lexicon strings, using underscore separators and lowercase letters, with values enclosed in single quotes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/coding-standards.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$_lang['chunk_create_text'] = 'Test';\n```\n\n----------------------------------------\n\nTITLE: Implementing CamperManagement Slideshow Call with Custom Template Properties\nDESCRIPTION: MODX template code for initializing a slideshow of favorite campers using the cmCampers snippet with custom template properties. This snippet filters vehicles by status code 2 (favorites) and uses custom template chunks for formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcampers-snippet.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<div id=\"slideshow\">  \n   [[!cmCampers? &status=`2` &tplOuter=`cmHomeOuter` &tplItem=`cmHomeItem` &tplImageItem=`cmHomeImage` &searchFromRequest=`0` &target=`12` ]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Changing User Passwords in MODX\nDESCRIPTION: Employ `modUser\\->changePassword()` to facilitate the modification of user passwords within the MODX environment, ensuring secure management of user credentials.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->changeWebUserPassword()\n```\n\n----------------------------------------\n\nTITLE: tplCell2 Chunk Definition\nDESCRIPTION: This code defines the structure of a single cell within the EventsCalendar2 calendar table. It uses placeholders to dynamically insert data such as the cell ID, full date, CSS classes, day number, and event information. The output is an HTML table cell element (`<td>`) with nested `<div>` elements for the date and event content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.tplcell2.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<td id=\\\"[[+ec.cell_id]]\\\" data-fulldate=\\\"[[+ec.fulldate]]\\\"><td class=\\\"cell [[+ec.class]]\\\" id=\\\"[[+ec.cell_id]]\\\" data-fulldate=\\\"[[+ec.fulldate]]\\\">\\n    <div class=\\\"[[+ec.class_date]]\\\">[[+ec.day]]</div>\\n    <div class=\\\"[[+ec.class_event]]\\\">[[+ec.events]]</div>\\n</td>\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Field Wrapper Template\nDESCRIPTION: Custom field wrapper template (fieldWrapTpl) defining the HTML structure for form field containers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.tutorial.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<!-- default -->\n<div class=\"[[+outer_class:default=`field_wrap`]] [[+type]]_wrap\" id=\"[[+name]]_wrap\">\n<label for=\"[[+name]]\" title=\"[[+name:replace=`_== `:ucwords]]\">[[+label:default=`[[+name:replace=`_== `:ucwords]]`]][[+req:notempty=` *`]]</label>\n[[+inner_html]]\n[[+note:notempty=`<span class=\"[[+note_class:default=`note`]]\"><em>[[+note]]</em></span>`]]\n[[+error:notempty=`<span class=\"[[+error_class]]\">[[+error]]</span>`]]\n</div>\n<!-- default -->\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Database in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->update($fields, $table, $where= \\\"\\\")` for updating data in a database table.  Use modX->query() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n\"see modX->query()\"\n```\n\n----------------------------------------\n\nTITLE: Disabling APC Caching in PHP (MODX)\nDESCRIPTION: PHP code to disable APC caching in the MODX index.php file. This resolves issues with user sessions being cached by opcode-cachers like php-apc.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hybridauth/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nini_set('apc.cache_by_default', 0);\n```\n\n----------------------------------------\n\nTITLE: Monitoring Apache Error Logs in Real-time\nDESCRIPTION: Command to watch Apache error logs in real-time to detect ModSecurity blocking actions in the MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntail -f /usr/local/apache/logs/error_log\n```\n\n----------------------------------------\n\nTITLE: Basic Required Field Validation in FormIt\nDESCRIPTION: Demonstrates how to validate a username field as required using FormIt's validation syntax\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.validators.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt? &validate=`username:required`]]\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de Chunk con Marcador de Posición en PHP\nDESCRIPTION: Muestra cómo definir un chunk simple llamado 'Hola' con un marcador de posición para el nombre.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nHola [[+nombre]]!\n```\n\n----------------------------------------\n\nTITLE: Translation Frontmatter in YAML for Localized Documentation\nDESCRIPTION: An example of frontmatter for translated documentation pages. The translation parameter links the page to its English counterpart by specifying the path without version or language prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/documentation/index.md#2025-04-17_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\n---\ntitle: \"Friendly URLs in my language\"\ntranslation: \"getting-started/friendly-urls\"\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Manager Time Format - MODX - Markdown\nDESCRIPTION: This setting defines the time format for the manager's display. It allows users to customize how time is presented throughout the MODX admin panel.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[manager_time_format](building-sites/settings/manager_time_format)\n```\n\n----------------------------------------\n\nTITLE: Executing PHP script with MAMP\nDESCRIPTION: This snippet shows how to execute the `transport.core.php` script using the absolute path to the MAMP PHP executable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n\"/Applications/MAMP/bin/php5/bin/php transport.core.php\"\n```\n\n----------------------------------------\n\nTITLE: Generating Link to Specific Resource with Named Anchor in MODX\nDESCRIPTION: Demonstrates how to create a link to a specific resource (by ID) that includes a named anchor. This method combines MODX's resource linking syntax with a named anchor to create a precise link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/integrating-templates/named-anchor.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~12]]#prohibited\">Prohibited Activities</a>\n```\n\n----------------------------------------\n\nTITLE: Chaining Output Modifiers in MODX Revolution\nDESCRIPTION: Shows how to chain multiple output modifiers in MODX Revolution, executed from left to right.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[elemento:modificador:otromodificador=`valor`:yotromodificador:yotromas=`valor2`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving MODX Configuration Syntax\nDESCRIPTION: Basic syntax declaration for the getConfig() method that returns an array of all MODX configuration settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getconfig.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getConfig ()\n```\n\n----------------------------------------\n\nTITLE: Setting Definition and Values\nDESCRIPTION: System configuration parameter for enabling script caching in MODX. When enabled, it caches Snippets and Plugins to file for improved performance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/cache_scripts.md#2025-04-17_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n**Name**: Enable Script Cache\n**Type**: Yes/No\n**Default**: Yes\n```\n\n----------------------------------------\n\nTITLE: Accessing Twitter Profile Data via Placeholders in PHP\nDESCRIPTION: Example showing how to use the Twitter data retrieved by getTwitterProfile when using the toPlaceholders property, displaying the name and likes count.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.gettwitterprofile.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nTwitter Name: [[!+tw.name]]<br />\nLikes: [[!+tw.likes]]\n```\n\n----------------------------------------\n\nTITLE: Method Signature for escapeSingleQuotes in PHP\nDESCRIPTION: Method signature showing the function definition that takes a string parameter and returns an escaped string.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.escapesinglequotes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring escapeSingleQuotes (string $s)\n```\n\n----------------------------------------\n\nTITLE: Simple Output Modifier Implementation\nDESCRIPTION: Basic implementation of a custom output modifier that converts input text to lowercase.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn strtolower($input);\n```\n\n----------------------------------------\n\nTITLE: Uncached CamperDetails Placeholder Usage in MODX\nDESCRIPTION: Example of using placeholders in uncached cmCamperDetails snippet with cm prefix and uncached tag\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/placeholders-you-can-use.md#2025-04-17_snippet_1\n\nLANGUAGE: modx\nCODE:\n```\n[[!+cm.brand]]\n```\n\n----------------------------------------\n\nTITLE: Textarea Field with Required Attribute\nDESCRIPTION: This snippet describes a textarea field that is marked as required and includes a class for styling, designated for user comments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`textarea`\n    &class=`elastic`\n    &req=`1`\n    &name=`message`\n    &label=`Comment`\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Inline sekFancyBox Implementation in PHP\nDESCRIPTION: A simple example of implementing an inline modal window with sekFancyBox. This basic implementation just requires linktext and text properties to display content in a modal.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &linktext=`Text to display as a link`\n &text=`Text that will display in the modal window.`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining disPostAttachment Table Schema in Markdown\nDESCRIPTION: This snippet outlines the database schema for the disPostAttachment table, which stores information about file attachments to forum posts. It includes fields for file metadata and download statistics.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.database-model.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Field            | Type (length) | Description                                 |\n| ---------------- | ------------- | ------------------------------------------- |\n| post             | int (10)      | ID of the post this attachment was added to |\n| board            | int (10)      | ID of the board the post is in              |\n| filename         | string (255)  | Name and path to the file                   |\n| createdon        | date          | When the attachment was added               |\n| filesize         | int (10)      | Size of the attachment.. guess in bytes.    |\n| downloads        | int (10)      | Amount of downloads                         |\n| integrated_id   | int (10)      | ID of the attachment if imported.           |\n| integrated_data | string        | Extra data of an attachment import          |\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Virtual Host for MODX Subdomain\nDESCRIPTION: Apache configuration that sets up a virtual host for a subdomain in MODX. This configuration defines the server name, document root, and log file locations for the subdomain.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/virtual-host.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nNameVirtualHost dev.modxcms.com\n<VirtualHost dev.modxcms.com>\n  ServerAdmin dev@modxcms.com\n  DocumentRoot /home/modxcms.com/public_html/dev\n  ServerName dev.modxcms.com\n  ErrorLog logs/devmodxcms-error_log\n  TransferLog logs/devmodxcms-access_log\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Class xPDODriver_ Not Found Error in MODX\nDESCRIPTION: This snippet shows the error message 'Fatal error: Class 'xPDODriver_' not found' which occurs when the core configuration file has been corrupted and the xPDO driver cannot be initialized. This usually means that the database configuration is incorrect or missing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nФатальная ошибка: класс 'xPDODriver_' не найден в /path/to/webroot/core/xpdo/xpdo.class.php on line 1823\n```\n\n----------------------------------------\n\nTITLE: Actualizando el repositorio local de MODX en Git\nDESCRIPTION: Comandos Git para actualizar el repositorio local con los últimos cambios del repositorio remoto de MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/git.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ngit fetch origin\ngit rebase origin/2.x\n```\n\n----------------------------------------\n\nTITLE: jQuery Plugin Initialization\nDESCRIPTION: Initialization script for the jQuery pdoPage plugin with event handlers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"text/javascript\">\n    $('[[+wrapper]]').pdoPage([[+config]]);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache .htaccess for StatCache with MODX in Subdirectory\nDESCRIPTION: Apache .htaccess configuration for serving StatCache static files when MODX is installed in a subdirectory of the document root. These rules direct traffic to static files when available.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/statcache/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n# If MODX is in a subdirectory of your DOCUMENT_ROOT,\n# add this before your MODX Friendly URLs RewriteCond's and RewriteRule...\nRewriteCond %{DOCUMENT_ROOT}/modx/statcache%{REQUEST_URI}/~index.html -f\nRewriteRule ^(.*)$ modx/statcache/$1~index.html [L,QSA]\n\nRewriteCond %{DOCUMENT_ROOT}/modx/statcache%{REQUEST_URI} -f\nRewriteRule ^(.*)$ modx/statcache/$1 [L,QSA]\n```\n\n----------------------------------------\n\nTITLE: xPDOTransport Pack Method Syntax\nDESCRIPTION: Method signature for the pack() method that returns a boolean indicating success or failure of the packaging operation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdotransport/xpdotransport.pack.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean pack ()\n```\n\n----------------------------------------\n\nTITLE: Disabling eAccelerator in PHP.ini\nDESCRIPTION: This configuration snippet demonstrates how to disable eAccelerator in PHP.ini. It's used to resolve issues where eAccelerator causes problems with MODX functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/troubleshooting.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\neaccelerator.enable = 0;\neaccelerator.optimizer = 0;\neaccelerator.debug = 0;\n```\n\n----------------------------------------\n\nTITLE: Image Template Chunk for CamperManagement Slideshow\nDESCRIPTION: Simple template chunk named 'cmHomeImage' that creates an image tag for a vehicle. This chunk uses the image source and vehicle metadata (brand and type) for the alt attribute.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcampers-snippet.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<img src=\"[[+image]]\" alt=\"[[+brand]] [[+type]]\" />\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Drop Event Handler\nDESCRIPTION: Example of element with JavaScript function call on drop event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"clock\" data-fred-on-drop=\"initClock\"></div>\n```\n\n----------------------------------------\n\nTITLE: Basic modX::sendRedirect Method Syntax in PHP\nDESCRIPTION: The basic method signature for the sendRedirect method, which redirects to a specified URL using the specified method. Note that type and responseCode parameters are deprecated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.sendredirect.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid sendRedirect (string $url, [array $options = false], [string $type = ''], [string $responseCode])\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Object in MODX Revolution (PHP)\nDESCRIPTION: This snippet demonstrates how to retrieve a user object using the getObject method. It searches for a user with the username 'boss'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.ismember.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getObject('modUser', array('username' => 'boss'));\n```\n\n----------------------------------------\n\nTITLE: Context List Processor Example in PHP\nDESCRIPTION: Example showing how to execute the Context getList processor using the executeProcessor method. Demonstrates setting the location and action parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.executeprocessor.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->executeProcessor(array(\n    'location' => 'context',\n    'action' => 'getList',\n));\n```\n\n----------------------------------------\n\nTITLE: Basic getVimeo Snippet Call in PHP\nDESCRIPTION: The simplest way to call the getVimeo snippet in MODX Revolution. Note that without specifying the required 'channel', 'id', and 'tpl' properties, this call will output nothing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getvimeo/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getVimeo]]\n```\n\n----------------------------------------\n\nTITLE: Registering CSS and JS in MODX (Modern)\nDESCRIPTION: This snippet shows the modern methods for registering CSS and JavaScript files in MODX components, designed for compatibility with extensions like AjaxManager. These methods provide better integration and flexibility for managing assets.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/package-build/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$this->addCss()\n$this->addJavascript()\n$this->addLastJavascript()\n$this->addHtml()\n```\n\n----------------------------------------\n\nTITLE: Mixed MODX and Fenom Syntax Example\nDESCRIPTION: Demonstrates how to combine MODX and Fenom syntax for conditional authentication checks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n{$_modx->isAuthenticated($_modx->content.key)}\n    Hello, {$_modx->user.fullname}!\n{else}\n    [[Login?params...]]\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Primary Key Field Example - PHP\nDESCRIPTION: Demonstrates how to get the primary key field name from a Person object instance where the primary key field is 'id'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getpk.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$person = $xpdo->getObject('Person',1);\n$pk = $person->getPK();\necho $pk;\n// prints \"id\"\n```\n\n----------------------------------------\n\nTITLE: Getting Most Hit Resources with Offset in MODX Revolution\nDESCRIPTION: This snippet retrieves the four most hit resources, excluding the first (most hit) resource by using the offset parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &parents=`0` &limit=`4` &offset=`1` &outputSeparator=`,`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Strip Attributes in SimplePie (PHP)\nDESCRIPTION: Default array of HTML attributes that get stripped from an entry's content in SimplePie. These attributes are typically removed for security reasons to prevent malicious code execution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/spiefeed/index.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\narray(\"bgsound\", \"class\", \"expr\", \"id\", \"style\", \"onclick\", \"onerror\", \"onfinish\", \"onmouseover\", \"onmouseout\", \"onfocus\", \"onblur\", \"lowsrc\", \"dynsrc\")\n```\n\n----------------------------------------\n\nTITLE: PHP MB String Function Test\nDESCRIPTION: PHP script to verify the existence of the multibyte string function required for the Register snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nif (function_exists('mb_ereg')) {\n print 'Yes, the multibyte function exists';\n}\nelse {\n print 'No, the function does not exist. The Register Snippet may fail.';\n}\n```\n\n----------------------------------------\n\nTITLE: Finding the Apache Control Utility Path\nDESCRIPTION: Command to locate the apachectl utility on your server when it's not in your current path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfind / -name apachectl\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Apache Configuration on cPanel\nDESCRIPTION: Commands for rebuilding Apache configuration files on cPanel servers using the rebuildhttpdconf utility.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ncd /usr/local/apache/conf\n/scripts/rebuildhttpdconf\n```\n\n----------------------------------------\n\nTITLE: Including Build Configuration File\nDESCRIPTION: Code that includes a separate build configuration file which will contain MODX path constants and other build settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once dirname(__FILE__) . '/build.config.php';\n```\n\n----------------------------------------\n\nTITLE: Including Ext JS Dependencies\nDESCRIPTION: Required CSS and JavaScript files for Ext JS functionality\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/3.-ext-js-tutorial-animation.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n<script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n<script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de Etiqueta MODX Compleja en PHP\nDESCRIPTION: Ilustra una etiqueta MODX compleja que combina varios elementos como snippet, conjunto de propiedades, filtros y propiedades.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!MiSnippet@miPropSet:filtro1:filtro2=`modificador`? &prop1=`x` &prop2=`y`]]\n```\n\n----------------------------------------\n\nTITLE: Radio Options Input Type JSON Configuration\nDESCRIPTION: JSON configuration options for the Radio Options input type. Specifies whether blank values are allowed and defines the number of columns for display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"allowBlank\": \"true\",\n    \"columns\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: getContext Method Syntax in MODX PHP\nDESCRIPTION: Function signature for retrieving a context by name without initialization. Returns a modContext object reference.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getcontext.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n&$modContext getContext (string $contextKey)\n```\n\n----------------------------------------\n\nTITLE: Setting Definition - proxy_port Configuration\nDESCRIPTION: System setting definition for proxy server port configuration in MODX. This setting allows specifying the port number used for proxy server connections.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/proxy_port.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Proxy Port\n**Type**: String\n**Default**:\n```\n\n----------------------------------------\n\nTITLE: Configuring MODX System Settings\nDESCRIPTION: Essential system settings that need to be configured after MODX installation for proper functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_9\n\nLANGUAGE: plain\nCODE:\n```\nfriendly_urls     => Yes\nuse_alias_path    => Yes\npublish_default   => Yes\ncache_disabled    => Yes\n```\n\n----------------------------------------\n\nTITLE: Checking Validation Messages in PHP with xPDOValidator\nDESCRIPTION: Example showing how to check if any validation messages exist after validating an object using xPDOValidator. The method returns a boolean indicating whether validation messages are present.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.hasmessages.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$validator = $obj->getValidator();\n$validator->validate();\n\n$failed = $validator->hasMessages();\necho $failed ? 'Oh noes! We failed!' : 'Success!';\n```\n\n----------------------------------------\n\nTITLE: Template Variable Usage with Image Display\nDESCRIPTION: Shows how to use a Template Variable with DIRECTORY binding in an HTML template to display selected images.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/directory-binding.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"[[*myTV]]\" alt=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Using Media Source Path in MODX Template\nDESCRIPTION: This snippet illustrates how to utilize the 'addmediasourcepath' processor in a MODX template to dynamically generate the image paths based on the media source ID. It demonstrates the use of custom parameters for controlling the output and image resizing using pthumb.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/add-resource-specific-mediasource-and-multifile-uploader-to-the-gallery.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[+image:addmediasourcepath=`3`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[+image:addmediasourcepath=`3`:pthumb=`w=500`]]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Templates for Breadcrumb in PHP\nDESCRIPTION: Customizes the breadcrumb's appearance by specifying the 'linkCrumbTpl' parameter with inline code, file paths, or chunk names. This allows for complete control over the presentation of breadcrumb items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n[[BreadCrumb? &linkCrumbTpl=`myLinkCrumbTpl`]]\n[[BreadCrumb? &linkCrumbTpl=`@INLINE <li><a href=\"[[+link]]\">[[+pagetitle]]</a></li>`]]\n[[BreadCrumb? &linkCrumbTpl=`@FILE [[++assets_path]]my_link_crumb_tpl.html`]]\n```\n\n----------------------------------------\n\nTITLE: Setting xPDO Configuration Options with setOption Method in PHP\nDESCRIPTION: This method sets an xPDO configuration option value for the current request. The syntax shows it takes a string key and a mixed value parameter, but changes are not persisted beyond the current request.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.setoption.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid setOption (string $key, mixed $value)\n```\n\n----------------------------------------\n\nTITLE: Available Placeholders in DitsNews\nDESCRIPTION: Lists the available placeholders that can be used in newsletter templates to personalize content for subscribers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/ditsnews/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[+firstname]]\n[[+lastname]]\n[[+fullname]]\n[[+company]]\n[[+email]]\n```\n\n----------------------------------------\n\nTITLE: Disabling eAccelerator in .htaccess\nDESCRIPTION: This .htaccess configuration snippet shows how to disable eAccelerator using PHP flags. It's an alternative method to disabling eAccelerator if the server supports php_flag directives.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting.md#2025-04-17_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\nphp_flag eaccelerator.enable 0\nphp_flag eaccelerator.optimizer 0\nphp_flag eaccelerator.debug 0\n```\n\n----------------------------------------\n\nTITLE: Indexing Resources with SimpleSearch Snippet\nDESCRIPTION: The 'SimpleSearchIndexAll' snippet indexes existing MODX Resources into Solr. Ensure Solr is set up, then place the snippet on any page and view it to perform the indexing. It automatically indexes resources as you develop your site using the SimpleSearchIndexer plugin. Remove this snippet call after indexing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.solr.md#2025-04-17_snippet_0\n\nLANGUAGE: MODX\nCODE:\n```\n\"SimpleSearchIndexAll\"\n```\n\n----------------------------------------\n\nTITLE: Converting WWW URLs to Non-WWW in .htaccess\nDESCRIPTION: Example .htaccess code to redirect www URLs to non-www versions, which helps prevent duplicate content issues and session handling problems.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n# Rewrite www.domain.com -> domain.com -- used with SEO Strict URLs plugin\nRewriteCond %{HTTP_HOST} .\nRewriteCond %{HTTP_HOST} !^yoursite\\.com [NC]\nRewriteRule (.*) http://yoursite.com/$1 [R=301,L]\n```\n\n----------------------------------------\n\nTITLE: Error Logging Example in PHP\nDESCRIPTION: Shows how to return error messages that will be written to the MODX error logs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn \"Help I'm a bug!\";\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of prettyNumbers with Custom Options\nDESCRIPTION: Examples showing how to customize the prettyNumbers formatting with options like case, decimal separator, and thousands separator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.prettynumbers.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+count:prettyNumbers=`case=upper&decimal=,&thousands=.`]][[prettyNumbers? &input=`[[!getFacebookShares? &url=`http://google.com/`]]` &options=`case=upper&decimal=,&thousands=.`]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Archive Month Listing in MODX Revolution\nDESCRIPTION: Example of using the Archivist snippet to display a month-based archive listing for resources with specific parent IDs. The target parameter specifies the resource ID where archive results will be displayed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/archivist/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Archivist? &parents=`54,55` &target=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Initializing Tabbed Subscription Update Window using ExtJS\nDESCRIPTION: This snippet sets up a subscription editing window with two tabs: one for subscription details and another for subscriber management. Key components like layout types, tab configuration, and styling are defined. It leverages ExtJS's tab functionality to enhance the user interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n,fields: {\n    // У нас здесь табы\n    xtype: 'modx-tabs'\n    // Рендерим их сразу\n    ,deferredRender: false\n    // Добавляем обводку\n    ,border: true\n    // И отступы для контекта внутри таба\n    ,bodyStyle: 'padding:5px;'\n    // Пошло перечисление табов\n    ,items: [{\n        // Таб №1 - Подписка\n        title: _('sendex_newsletter')\n        // Как прятать при переключении - советую всегда использовать offset\n        ,hideMode: 'offsets'\n        // Указываем, что содержимое таба - форма\n        ,layout: 'form'\n        // Здесь уже не нужна обводка\n        ,border:false\n        // Пошли поля формы\n        ,items: [\n            // Обязательно скрытый input с id, чтобы процессор понял, что мы обновляем\n            {xtype: 'hidden',name: 'id',id: 'sendex-'+this.ident+'-id'}\n            // Дальше все те же поля, что и в форме создания\n            // ...\n        ]\n    },{\n        // Таб №2 - Пользователи\n        title: _('sendex_subscribers')\n        // Здесь должен быть xtype с таблицей подписчиков, пока комментируем\n        //,xtype: 'sendex-grid-newsletter-subscribers'\n        ,xtype: 'displayfield'\n        ,html: '<p>Таблица с юзерами</p>'\n    }]}\n\n```\n\n----------------------------------------\n\nTITLE: Rendering Target Groups as Select Box with bdTargets Snippet\nDESCRIPTION: This snippet call renders target groups as a select box in a form. Custom chunks bdl.target.row and bdl.target.outer are used for individual options and as a wrapper for the select element. This provides a user-friendly dropdown to choose from available target groups.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdtargets.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<label for=\"target\">Target Group</label>\n[[!bdTargets? &tplRow=`bdl.target.row` &tplOuter=`bdl.target.outer`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<option value=\"[[+id]]\">[[+name]]</option>\n```\n\nLANGUAGE: php\nCODE:\n```\n<select name=\"target\">\n  <option value=\"0\">Choose a Target Group</option>\n  [[+wrapper]]\n</select>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cache Path with xPDOCacheManager.getCachePath in PHP\nDESCRIPTION: This method returns the absolute path to the current writable directory used for storing cache files. It takes no parameters and returns a string containing the full path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.getcachepath.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring getCachePath ()\n```\n\n----------------------------------------\n\nTITLE: Linking to an External URL using sLink in PHP\nDESCRIPTION: The code sample shows how to create an external link using sLink, specifying custom text for both the link text and the title attribute. sLink is expected to be installed and accessible within MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/slink/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[sLink? &to=`https://rtfm.modx.com` &title=`Please, read that manual!` &link=`RTFM`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Field Values with xPDOObject::get() in PHP\nDESCRIPTION: This example demonstrates how to retrieve values for multiple fields ('name_first' and 'name_last') from an xPDOObject using the get() method with an array of field names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/get.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$object->set('name_first','Charles');\n$object->set('name_last','Longbottom');\n$names = $object->get(array('name_first','name_last'));\necho $names['name_first'].' '.$names['name_last'];\n// produces \"Charles Longbottom\"\n```\n\n----------------------------------------\n\nTITLE: Default tpl Chunk for tagLister.tolinks in MODX (PHP)\nDESCRIPTION: The default Chunk used with the &tpl property on the tagLister.tolinks snippet. It generates a link with a class and the item text.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/taglister/taglister.tolinks/tpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"[[+url]]\" class=\"[[+cls]]\">[[+item]]</a>\n```\n\n----------------------------------------\n\nTITLE: Handling OnDocUnPublished Event in MODX Plugin\nDESCRIPTION: A PHP plugin that logs the unpublished resource details and outputs a JSON response when a resource is unpublished via the context menu\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ondocunpublished.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocUnPublished':\n        $response = array(\n        \t'success' => false,\n        \t'message' => 'Ресурс снят с публикации!',\n        \t'data' => array(),\n        );\n        echo $modx->toJSON($response);\n        exit; \n        $modx->log(modX::LOG_LEVEL_ERROR, print_r($resource->toArray(),true));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Carga de Léxicos en MODX usando PHP\nDESCRIPTION: Este snippet muestra cómo cargar un léxico en MODX. Se especifica el idioma, el espacio de nombres y el tema del léxico a cargar.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/directory-structure.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->lexicon->load( 'lang:namespace:topic' );\n```\n\n----------------------------------------\n\nTITLE: Using Default MODX URI in CustomUrls Pattern\nDESCRIPTION: Shows how to incorporate the default MODX URI structure in a CustomUrls pattern.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/customurls/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[+cu.parent_uri]]/[[+alias]]\n```\n\n----------------------------------------\n\nTITLE: Example: Removing All Validation Rules from Book Object\nDESCRIPTION: Practical example demonstrating how to remove all validation rules from a Book object instance. The example retrieves a Book object by ID and removes all its validation rules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/validation/removevalidationrules.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$book = $xpdo->getObject('Book',1);\n$book->removeValidationRules();\n```\n\n----------------------------------------\n\nTITLE: Including Build Configuration File in PHP\nDESCRIPTION: Includes an external configuration file that contains MODX path constants needed for the build process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once dirname(__FILE__) . '/build.config.php';\n```\n\n----------------------------------------\n\nTITLE: Running Apache Control with Full Path\nDESCRIPTION: Example of running the apachectl utility with a full path to check loaded modules.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/usr/local/apache/bin/apachectl -t -D DUMP_MODULES\n```\n\n----------------------------------------\n\nTITLE: Translating Extras in MODX\nDESCRIPTION: Example path for adding translations to MODX extras, using Quip component as an example. Translations are stored in the component's lexicon directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/i18n/add-missing-translation.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncore/components/quip/lexicon/en/\n```\n\n----------------------------------------\n\nTITLE: Default Base Parameters Configuration\nDESCRIPTION: Shows the default baseParams configuration for remote data loading in MODx.grid.Grid.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.grid.grid.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nbaseParams: { action: 'getList' }\n```\n\n----------------------------------------\n\nTITLE: Switching Context in modX - PHP\nDESCRIPTION: The switchContext method switches the active context for the modX instance. It accepts a context key and an optional reload parameter to refresh the context data. The contextKey is mandatory, while reload is optional and defaults to false.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.switchcontext.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean switchContext (string $contextKey, [boolean $reload = false])\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->switchContext('sports');\n```\n\n----------------------------------------\n\nTITLE: Committing Local Theme Changes\nDESCRIPTION: Git commands for staging and committing local changes to the Fred theme repository. Includes both selective and bulk file staging options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify_in_action.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit add --all  # or git add on files you want to commit\ngit commit -m \"Your commit message here\"  # please write your own message\n```\n\n----------------------------------------\n\nTITLE: Fetching Manager Path Option\nDESCRIPTION: Use `modX\\->getOption('manager_url', null, MODX_MANAGER_URL)` to fetch the path to the MODX manager, providing a reliable way to retrieve configuration settings for manager URL management.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getManagerPath()\n```\n\n----------------------------------------\n\nTITLE: FoundationX Site Settings Table in Markdown\nDESCRIPTION: A markdown table describing all available FoundationX site settings, their keys, and descriptions. The table includes configuration options for address, social media, layout preferences, and business information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/foundationx/foundationx.how-to-use-foundationx.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                            | Key              | Description                                                                                                                                                                                                                         |\n| ------------------------------- | ---------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Physical Address                | fx.address       | Enter the physical address of your business. If you don't want an address displayed, save this as blank.                                                                                                                            |\n| City Location                   | fx.city          | If you have an address set in \"Physical Address\", enter the city name here. If not, save this as blank.                                                                                                                             |\n| Make Content Area Panel?        | fx.contentPanel  | If \"Yes\", your main content area will display as a FoundationX Panel. More on those in the Site Styles section below.                                                                                                               |\n| Country                         | fx.country       | If you have an address set in \"Physical Address\", enter the country name here. If not, save this as blank.                                                                                                                          |\n```\n\n----------------------------------------\n\nTITLE: Basic Login Form Snippet Call in MODX\nDESCRIPTION: A simple example of calling the Login snippet to display a login form in MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Login]]\n```\n\n----------------------------------------\n\nTITLE: Creating MODX Template File\nDESCRIPTION: Simple template file that creates a container div for the Doodles panel in the manager interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"doodles-panel-home-div\"></div>\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific File Extensions in PHP\nDESCRIPTION: Demonstrates deleting only files with .flv extension within a specified directory while preserving other file types.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.deletetree.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->cacheManager->deleteTree(MODX_ASSETS_PATH.'videos/',array(\n   'deleteTop' => true,\n   'extensions' => array('.flv'),\n));\n```\n\n----------------------------------------\n\nTITLE: xPDOQuery Select Method Alternative Syntax\nDESCRIPTION: Alternative syntax for the select method that takes either a string wildcard or specific column names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery select ([string $columns = '*'])\n```\n\n----------------------------------------\n\nTITLE: Initializing Ajax Controller for MODX Content Retrieval\nDESCRIPTION: PHP script to handle Ajax requests for retrieving resources with permission checking and data pagination\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/8.-ext-js-tutorial-inside-a-cmp.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Контроллер для запросов Ajax.\n */\n// Отрегулировать путь соответственно\n$docroot = dirname(dirname(dirname(dirname(__FILE__))));\ninclude $docroot . '/config.core.php';\nif (!defined('MODX_API_MODE')) {\n    define('MODX_API_MODE', false);\n}\ninclude_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n$modx = new modX();\n$modx->initialize('mgr');\n\nif (!$modx->hasPermission('view_document')) {\n    header('HTTP/1.0 401 Unauthorized');\n    print 'Операция не разрешена.';\n    exit;\n}\n// Следующие значения стандартны для Ajax URL в Ext JS\n$start = (int) $modx->getOption('start',$_POST,0);\n$limit = (int) $modx->getOption('limit',$_POST,20);\n$sort = $modx->getOption('sort',$_POST);\n$dir = $modx->getOption('dir',$_POST,'ASC');\n\n$c = $modx->newQuery('modResource');\n$count = $modx->getCount('modResource',$c);\n$c->sortby($sort,$dir);\n$c->limit($limit,$start);\n\n$pages = $modx->getCollection('modResource',$c);\n\n$list = array();\nforeach ($pages as $p) {\n    $array = $p->toArray();\n    $list[] = $array;\n}\n\nprint '{\n\"total\":\"'.$count.'\",\n\"results\":'.$modx->toJSON($list).',\n\"success\":true,\n\"msg\":\"Got our rows...\"\n}';\n\n@session_write_close();\nexit();\n```\n\n----------------------------------------\n\nTITLE: Extending ExtJS Grid with Custom Rendering Functions\nDESCRIPTION: This snippet extends the `Sendex.grid.Newsletters` object with custom functions. It overrides the `renderBoolean` function to display boolean values as \"yes\" or \"no\" with different colors. It also overrides the `renderImage` function to display image URLs as images in the grid.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nExt.extend(Sendex.grid.Newsletters,MODx.grid.Grid,{\n    windows: {}\n    // ...\n    ,renderBoolean: function(val,cell,row) {\n        return val == '' || val == 0\n            ? '<span style=\"color:red\">' + _('no') + '<span>'\n            : '<span style=\"color:green\">' + _('yes') + '<span>';\n    }\n\n    ,renderImage: function(val,cell,row) {\n        return val != ''\n            ? '<img src=\"' + val + '\" alt=\"\" height=\"50\" />'\n            : '';\n    }Там же рядом, кстати, есть встроенная функция для вывод контекстного меню:\n,getMenu: function() {\n    var m = [];\n    m.push({\n        text: _('sendex_newsletter_update')\n        ,handler: this.updateItem\n    });\n    m.push('-');\n    m.push({\n        text: _('sendex_newsletter_remove')\n        ,handler: this.removeItem\n    });\n    this.addContextMenuItem(m);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Calendar Implementation with ChurchEventsCalendar Snippet in PHP\nDESCRIPTION: This snippet creates a calendar on a MODX Revolution page. It utilizes the ChurchEventsCalendar snippet with no parameters for default behavior.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/church-events-calendar/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!ChurchEventsCalendar?]]\n```\n\n----------------------------------------\n\nTITLE: Custom TV Input Template (Smarty/ExtJS)\nDESCRIPTION: This Smarty template utilizes ExtJS to create a combobox (dropdown) for template selection within the MODX manager. It defines the 'modx-combo-template' xtype, binds it to the TV's ID, and sets various configuration options like width and initial value. The `listeners` configuration ensures that the resource form is updated whenever the selection changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-tvs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<select id=\"tv{$tv->id}\" name=\"tv{$tv->id}\" class=\"combobox\"></select>\n<script type=\"text/javascript\">\n// <![CDATA[\n{literal}\nMODx.load({\n{/literal}\n    xtype: 'modx-combo-template'\n    ,name: 'tv{$tv->id}'\n    ,hiddenName: 'tv{$tv->id}'\n    ,transform: 'tv{$tv->id}'\n    ,id: 'tv{$tv->id}'\n    ,width: 300\n    ,value: '{$tv->value}'\n{literal}\n    ,listeners: { 'select': { fn:MODx.fireResourceFormChange, scope:this}}\n});\n{/literal}\n// ]]>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Numeric Comparison with If Snippet\nDESCRIPTION: Example showing how to compare a numeric value using the If snippet, displaying a message when the total is greater than 3.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/if/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!If? &subject=`[[+total]]` &operator=`GT` &operand=`3` &then=`You have more than 3 items!`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for MODX Development\nDESCRIPTION: Command to create a new feature branch based on the version branch (e.g., 2.x). This should be done after ensuring your local version branch is up-to-date.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/git-github/frequent-commands.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b myFeatureBranchName 2.x\n```\n\n----------------------------------------\n\nTITLE: Database Operations Migration in MODX\nDESCRIPTION: Database operations migration from Evolution to Revolution, showing equivalents for column names, value retrieval, and XML handling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// Evolution\n$columnNames = $modX->db->getColumnNames($dsq);\n\n// Revolution\n$columnNames = $modX->getFields($className);\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscriber Get List Processor\nDESCRIPTION: This PHP class defines a processor to retrieve a list of subscribers associated with a specific newsletter. It prepares the query to filter by 'newsletter_id', joining necessary user tables for complete user data retrieval.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass sxSubscriberGetListProcessor extends modObjectGetListProcessor {\n    public $objectType = 'sxSubscriber';\n    public $classKey = 'sxSubscriber';\n    public $defaultSortField = 'id';\n    public $defaultSortDirection = 'DESC';\n\n\n    /**\n     * @param xPDOQuery $c\n     *\n     * @return xPDOQuery\n     */\n    public function prepareQueryBeforeCount(xPDOQuery $c) {\n        // Выбираем только нужные записи\n        $c->where(array('newsletter_id' => $this->getProperty('newsletter_id')));\n        // И присоединяем свойства пользователей\n        $c->leftJoin('modUser', 'modUser', 'sxSubscriber.user_id = modUser.id');\n        $c->leftJoin('modUserProfile', 'modUserProfile', 'sxSubscriber.user_id = modUserProfile.internalKey');\n\n        // Выбираем поля подписчика\n        $c->select($this->modx->getSelectColumns($this->classKey, $this->classKey));\n        // И добавляем псевдоним и имя\n        $c->select('modUser.username, modUserProfile.fullname');\n\n        return $c;\n    }\n\n}\n\nreturn 'sxSubscriberGetListProcessor';\n\n```\n\n----------------------------------------\n\nTITLE: Setting Log Target Method Signature in PHP\nDESCRIPTION: The method signature for xPDO::setLogTarget showing the parameters and return type. It accepts a target parameter defaulting to 'ECHO' and returns the previously set log target.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.setlogtarget.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed setLogTarget ([string $target = 'ECHO'], mixed 1)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Tag Syntax in MODX Revolution\nDESCRIPTION: Shows how tags can now have tags within their properties in MODX Revolution, which was not possible in Evolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/functional-changes.md#2025-04-17_snippet_0\n\nLANGUAGE: modx\nCODE:\n```\n[[mySnippet? &tag=`test`[[call]]``]]\n```\n\n----------------------------------------\n\nTITLE: Removing Hits from a Resource in MODX Revolution\nDESCRIPTION: This snippet removes 4 hits from resource 5 by using a negative amount parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &punch=`5` &amount=`-4`]]\n```\n\n----------------------------------------\n\nTITLE: Manual Table Drop Alternative\nDESCRIPTION: Alternative approach using direct SQL query to drop a table when xPDO classes have been removed or renamed. Includes error handling and success confirmation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.removeobjectcontainer.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$removed = $modx->exec('DROP TABLE IF EXISTS your_table');\nif ($removed === false && $modx->errorCode() !== '' && $modx->errorCode() !== PDO::ERR_NONE) {\n    print 'Could not drop table! ERROR: ' . print_r($modx->pdo->errorInfo(),true);\n}\nelse {\n    print 'Table dropped successfully.';\n}\n```\n\n----------------------------------------\n\nTITLE: Ext JS Prompt with Callback (Named Function)\nDESCRIPTION: This JavaScript code provides an alternative way to define the callback function for Ext.MessageBox.prompt. Instead of a lambda function, a named function `myCallback` is defined and passed as the callback. The functionality remains the same: processing the button click and entered text, logging to the console.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\nfunction myCallback(btn, text) {\n    console.info('Вы нажали ' + btn);\n    if (text) {\n        console.info('Вы ввели '+ text);\n    }\n}\n\nExt.onReady(function() {\n    var title = 'Необходим ввод';\n    var msg = 'Пожалуйста, введите какой-нибудь текст.';\n    Ext.MessageBox.prompt(title,msg,myCallback);\n});\n</script>\n\"\n```\n\n----------------------------------------\n\nTITLE: Original FileDownload Template for MODX\nDESCRIPTION: The default HTML template used by FileDownload R to display file listings before integration with Upload to Users.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/upload-to-users-cmp/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr[[+fd.class]]>\n    <td style=\"width:16px;\"><img src=\"[[+fd.image]]\" alt=\"[[+fd.image]]\" /></td>\n    <td><a href=\"[[+fd.link]]\"[[+fd.linkAttribute]]>[[+fd.filename]]</a>\n        <span style=\"font-size:80%\">([[+fd.count]] downloads)</span>\n    </td>\n    <td>[[+fd.sizeText]]</td>\n    <td>[[+fd.date]]</td>\n</tr>\n[[-- This is the description row if the &chkDesc=`chunkName` is provided --]]\n[[+fd.description:notempty=`<tr>\n    <td></td>\n    <td colspan=\"3\">[[+fd.description]]</td>\n</tr>`:default=``]]\n```\n\n----------------------------------------\n\nTITLE: SQL Schema for Sphinx Delta Indexing\nDESCRIPTION: This SQL snippet creates a table `modx_discuss_sphinx_delta` to store the maximum document ID for delta indexing. This table is used to track changes in the Discuss posts table for incremental indexing with Sphinx. The `counter_id` and `max_doc_id` columns are essential for the delta updates process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/configuring-sphinx-for-search.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `modx_discuss_sphinx_delta` (\n  `counter_id` int(11) NOT NULL,\n  `max_doc_id` int(11) NOT NULL,\n  PRIMARY KEY (`counter_id`)\n)\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Theme Changes to Remote\nDESCRIPTION: Command to push local theme changes to the origin repository, making them available to other collaborators.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify_in_action.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin master\n```\n\n----------------------------------------\n\nTITLE: Newsletter Queue Processing Processor\nDESCRIPTION: PHP processor for adding newsletter queues with error handling and validation\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function process() {\n    if (!$id = $this->getProperty('newsletter_id')) {\n        return $this->failure($this->modx->lexicon('sendex_newsletter_err_ns'));\n    }\n    elseif (!$newsletter = $this->modx->getObject('sxNewsletter', $id)) {\n        return $this->failure($this->modx->lexicon('sendex_newsletter_err_nf'));\n    }\n\n    $result = $newsletter->addQueues();\n    if ($result !== true) {\n        return $this->failure($result);\n    }\n    else {\n        return $this->success();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default AdvSearch Help Link Template in PHP\nDESCRIPTION: The default template for rendering the help link in AdvSearch. It creates an anchor tag with specific ID, title translation placeholder, and CSS class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch.advsearchhelp/helplinktpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<a id=\"[[+asId]]_helplink\" title=\"[[%advsearch.help_title? &namespace=`advsearch` &topic=`default`]]\" href=\"[[+helpId]]\" class=\"advsea-helplink\"><span>help</span></a>\n```\n\n----------------------------------------\n\nTITLE: Sitemap with Resource Exclusions\nDESCRIPTION: Generate sitemap excluding specific resources and their descendants\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[pdoSitemap?\n    &parents=`10,-15,-25`\n]]\n```\n\n----------------------------------------\n\nTITLE: Configuring File-Based Logging with Timestamp in PHP\nDESCRIPTION: Example showing how to set the log level to WARN and direct output to a timestamped log file. This is particularly useful for installation procedures to maintain separate logs for each execution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.setlogtarget.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->setLogLevel(xPDO::LOG_LEVEL_WARN);\n$xpdo->setLogTarget(array(\n   'target' => 'FILE',\n   'options' => array(\n       'filename' => 'install.' . strftime('%Y-%m-%dT%H:%M:%S')\n    )\n));\n```\n\n----------------------------------------\n\nTITLE: Loading Grid JavaScript in MODX Controller\nDESCRIPTION: PHP code to include the grid widget JavaScript file in the MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$this->addJavascript($doodles->config['jsUrl'].'mgr/widgets/doodles.grid.js');\n```\n\n----------------------------------------\n\nTITLE: Creating ResourceGroup Using runProcessor\nDESCRIPTION: Example showing how to create a new resource group programmatically using the security/resourcegroup/create processor with specific configuration parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.runprocessor.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// create new resource group programatically\n$response = $modx->runProcessor('security/resourcegroup/create', array(\n    'name' => 'Test', // the name of the new resource group\n    'access_contexts' => 'mgr,web', // the context(s) the new resource group is restricting access in\n    'access_admin' => 1, // adds access to this resource group for Administrators\n    'access_parallel' => 1, // creates a new user group \"Test\" parallel to the resource group\n    'access_usergroups' => 'Editors', // adds access to the new resource group for the user group \"Editors\"\n));\n```\n\n----------------------------------------\n\nTITLE: Using xPDOCacheManager.endsWith Method in PHP\nDESCRIPTION: The endsWith method checks if a string ends with a specific pattern. It accepts a string to check and a pattern (string or array) to match against, returning a boolean result.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.endswith.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean endsWith (string $string, string|array $pattern)\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Menu Items with rowTpl in Wayfinder\nDESCRIPTION: Uses the &rowTpl parameter to customize the formatting of each individual link in the navigation menu. The rowTpl chunk controls the HTML structure of each menu item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/wayfinder/wayfinder-introductory-examples.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[Wayfinder? &startId=`55` &rowTpl=`rowTpl`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<!-- rowTpl -->\n<li[[+wf.id]][[+wf.classes]]>\n<a href=\"[[+wf.link]]\" title=\"[[+wf.title]]\" [[+wf.attributes]]>[[+wf.linktext]]</a>\n[[+wf.wrapper]]\n</li>\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    <!-- rowTpl -->\n    <li class=\"first\"><a href=\"media-hub/news\" title=\"HG in the News\">HG in the News</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/events\" title=\"HG Events\">HG Events</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/press\" title=\"Press Releases\">Press Releases</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/blog/\" title=\"HG Blog\">HG Blog</a>\n\n    <ul>\n        <!-- rowTpl -->\n        <li class=\"first\"><a href=\"media-hub/blog/test-section/\" title=\"Blog Test Section\">Blog Test Section</a>\n\n        <ul>\n            <!-- rowTpl -->\n            <li class=\"first\"><a href=\"media-hub/blog/test-section/test-post\" title=\"Test Post\">Test Post</a></li>\n            <!-- rowTpl -->\n            <li><a href=\"media-hub/blog/test-section/other-post\" title=\"Other Post\">Other Post</a></li>\n            <!-- rowTpl -->\n            <li class=\"last\"><a href=\"media-hub/blog/test-section/third-post\" title=\"Third Post\">Third Post</a></li>\n        </ul>\n\n        </li>\n        <!-- rowTpl -->\n        <li class=\"last\"><a href=\"media-hub/blog/archives\" title=\"Blog Archives\">Archives</a></li>\n    </ul>\n\n    </li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/fast-facts\" title=\"HG Fast Facts\">HG Fast Facts</a></li>\n    <!-- rowTpl -->\n    <li><a href=\"media-hub/publications\" title=\"HG Publications\">HG Publications</a></li>\n    <!-- rowTpl -->\n    <li class=\"last\"><a href=\"media-hub/media-contact\" title=\"Media Contact\">Media Contact</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Snippet Properties in PHP\nDESCRIPTION: This PHP snippet defines the default properties for a MODX snippet, including 'tpl', 'sort', and 'dir' with types and lexicon references. It returns an array of properties which can be accessed in the MODX context. Dependencies include MODX framework to utilize snippet properties and lexicons.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$properties = array(\n    array(\n        'name' => 'tpl',\n        'desc' => 'prop_doodles.tpl_desc',\n        'type' => 'textfield',\n        'options' => '',\n        'value' => 'rowTpl',\n        'lexicon' => 'doodles:properties',\n    ),\n    array(\n        'name' => 'sort',\n        'desc' => 'prop_doodles.sort_desc',\n        'type' => 'textfield',\n        'options' => '',\n        'value' => 'name',\n        'lexicon' => 'doodles:properties',\n    ),\n    array(\n        'name' => 'dir',\n        'desc' => 'prop_doodles.dir_desc',\n        'type' => 'list',\n        'options' => array(\n            array('text' => 'prop_doodles.ascending','value' => 'ASC'),\n            array('text' => 'prop_doodles.descending','value' => 'DESC'),\n        ),\n        'value' => 'DESC',\n        'lexicon' => 'doodles:properties',\n    ),\n);\nreturn $properties;\n```\n\n----------------------------------------\n\nTITLE: Displaying Doodles from modx_doodles Table with Rowboat in PHP\nDESCRIPTION: This snippet uses the Rowboat MODX snippet to display the first 10 entries from the modx_doodles table sorted by name, utilizing a specified template ('myDoodle'). The basic parameters used include &table, &tpl, &limit, and &sortBy.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rowboat/rowboat.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Rowboat?\n   &table=`modx_doodles`\n   &tpl=`myDoodle`\n   &limit=`10`\n   &sortBy=`name`\n]]\n```\n\n----------------------------------------\n\nTITLE: Get Placeholder Value Syntax in MODX PHP\nDESCRIPTION: Method signature for retrieving a placeholder value by key in MODX. Returns a mixed value based on the placeholder's content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getplaceholder.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed getPlaceholder (string $key)\n```\n\n----------------------------------------\n\nTITLE: Checking out a specific branch in Git\nDESCRIPTION: This snippet demonstrates how to checkout a specific branch (2.x in this case) after cloning the repository, ensuring you are working on the intended version of MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"git checkout -b 2.x origin/2.x\"\n```\n\n----------------------------------------\n\nTITLE: Using Field Snippet in PHP Scripts\nDESCRIPTION: Example of how to use the 'field' snippet within PHP scripts to generate form fields programmatically. This approach allows for dynamic form generation based on configuration arrays.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$output .= $modx->runSnippet('field', array('name'=> 'name', 'type'=> 'text'));\n$output .= $modx->runSnippet('field', array('name'=> 'email', 'type'=> 'email'));\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: xPDOTransport Pack Method Example\nDESCRIPTION: Example showing how to use the pack() method to package a transport into a zip file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdotransport/xpdotransport.pack.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$transport->pack();\n```\n\n----------------------------------------\n\nTITLE: Making Array from modX Database Result Set\nDESCRIPTION: Transforms the resultant set from a database query into an array format for easier manipulation and access.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->makeArray($rs= '')\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Basic Cache Record in PHP\nDESCRIPTION: Example of retrieving a simple cache record called 'test' into a string variable using the xPDOCacheManager.get method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.get.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$test = $xpdo->cacheManager->get('test');\n```\n\n----------------------------------------\n\nTITLE: Counting Comments for Specific User using QuipCount in MODX\nDESCRIPTION: This example demonstrates retrieving the comment count for a user named \"mikegeorge\" using the QuipCount snippet. The `&type` is set to `user` and the `&user` property specifies the username whose comments should be counted from.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipcount.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\n[[QuipCount? &type=`user` &user=`mikegeorge`]]\n\n```\n\n----------------------------------------\n\nTITLE: Calling the MODX Snippet in a Resource\nDESCRIPTION: This MODX tag calls the `mytest` snippet within a MODX resource.  The `[[!mytest]]` tag will execute the snippet and render its output into the resource where it is placed. The `!` prevents caching.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cmpgenerator/cmpgenerator.5-minute-example.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"[[!mytest]]\"\n```\n\n----------------------------------------\n\nTITLE: Adding Content to a Chunk and Saving (PHP)\nDESCRIPTION: This plugin adds content to a chunk and saves it immediately when updating an existing chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onchunkformrender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnChunkFormRender':\n        //if we update the existing\n        if ($mode == modSystemEvent::MODE_UPD) {\n            //added chunk content\n            $chunk->setContent('<p>Chunk content</p>');\n            //you can immediately save new content\n            $chunk->save();\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getFacebookShares Snippet in MODX\nDESCRIPTION: Retrieves the number of Facebook shares for the current resource page without any customization.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getfacebookshares.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getFacebookShares]]\n```\n\n----------------------------------------\n\nTITLE: Overriding Property Set Values in MODX Snippets\nDESCRIPTION: Calling a MODX snippet with a Property Set while also overriding specific properties. This example uses the 'Menu' Property Set but changes the 'level' property value from the default in the set.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/snippets.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Wayfinder@Menu? &level=`2`]]\n```\n\n----------------------------------------\n\nTITLE: Loading Default Response Handler in PHP\nDESCRIPTION: Basic method signature for loading the MODX response handler class. If no parameters are provided, it defaults to loading the modResponse class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getresponse.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean getResponse ([$string $class = 'modResponse'], [$path $path = ''])\n```\n\n----------------------------------------\n\nTITLE: ExtJS Queue Grid Configuration\nDESCRIPTION: JavaScript configuration for creating an ExtJS grid to display letter queue information\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nSendex.grid.Queues = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        id: 'sendex-grid-queues'\n        ,url: Sendex.config.connector_url\n        ,baseParams: {\n            action: 'mgr/queue/getlist'\n        }\n        ,fields: ['id','newsletter_id','subscriber_id','timestamp','email_to','email_subject','email_body','email_from','email_from_name','email_reply','newsletter']\n        ,autoHeight: true\n        ,paging: true\n        ,remoteSort: true\n        ,columns: [\n            {header: _('sendex_queue_id'),dataIndex: 'id',width: 50}\n            ,{header: _('sendex_newsletter'),dataIndex: 'newsletter',width: 100}\n            ,{header: _('sendex_queue_email_to'),dataIndex: 'email_to',width: 75}\n            ,{header: _('sendex_queue_email_subject'),dataIndex: 'email_subject',width: 100}\n            ,{header: _('sendex_queue_email_from'),dataIndex: 'email_from',width: 100}\n            ,{header: _('sendex_queue_timestamp'),dataIndex: 'timestamp',width: 75}\n        ]\n    });\n    Sendex.grid.Queues.superclass.constructor.call(this,config);\n};\nExt.extend(Sendex.grid.Queues,MODx.grid.Grid);\n```\n\n----------------------------------------\n\nTITLE: Setting Base URL with MODX Site URL Tag (HTML)\nDESCRIPTION: Shows how to use the [[++site_url]] tag to set the base URL in the HTML head, which is common in CMS systems using Apache rewrites.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/tag-syntax/common.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<base href=\"[[++site_url]]\"/>\n```\n\n----------------------------------------\n\nTITLE: Search Form with Custom Landing Page in MODX\nDESCRIPTION: Shows how to configure a search form to redirect results to a specific resource using the landing parameter\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearchForm? &landing=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Utilizing album.items.helper in MODx PHP Snippet\nDESCRIPTION: The album.items.helper snippet is used within MODx to handle requests related to album items management. It should be utilized on a resource that employs an empty or blank template, as indicated in its usage example. There are currently no specific properties required for this snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.album.items.helper.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n[[!album.items.helper]]\n```\n\n----------------------------------------\n\nTITLE: Default Report Row Template\nDESCRIPTION: The default chunk template used for formatting each field in the generated report.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.figeneratereport.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<p><strong>[[+field:replace=`_== `:ucwords]]:</strong> [[+value:nl2br]]</p><br>\n```\n\n----------------------------------------\n\nTITLE: Handling Select Dropdowns with FormItIsSelected\nDESCRIPTION: This snippet demonstrates how to use the FormItIsSelected output filter to preserve the selected value in a dropdown menu. The filter checks if the value of the 'color' field matches the option's value and adds the 'selected' attribute if they match, ensuring the previously selected option remains selected after form submission, even with errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.tutorials-and-examples/handling-selects,-checkboxes-and-radios.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"<select name=\\\"color\\\">\\n   <option value=\\\"blue\\\" [[!+fi.color:FormItIsSelected=`blue`]] >Синий</option>\\n   <option value=\\\"red\\\" [[!+fi.color:FormItIsSelected=`red`]] >Красный</option>\\n   <option value=\\\"green\\\" [[!+fi.color:FormItIsSelected=`green`]] >Зеленый</option>\\n   <!-- Это также могло бы работать -->\\n   <option value=\\\"yellow\\\" [[!+fi.color:is=`yellow`:then=`selected`]]>Желтый</option>\\n</select>\"\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Package in MODX\nDESCRIPTION: Simple command to add a CRC package to MODX's Extension Packages. This needs to be run once to register the package with MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$modx->addExtensionPackage('copyrightedresource','/path/to/copyrightedresource/model/');\n```\n\n----------------------------------------\n\nTITLE: Creating a MODX Connector\nDESCRIPTION: This code snippet demonstrates how to create a MODX connector file in PHP.  It loads core MODX configuration, initializes the Doodles extra, and handles the request by routing it to the appropriate processor based on the specified path. The connector acts as a gateway to MODX processors, restricting access and handling requests.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once dirname(dirname(dirname(dirname(__FILE__)))).'/config.core.php';\nrequire_once MODX_CORE_PATH.'config/'.MODX_CONFIG_KEY.'.inc.php';\nrequire_once MODX_CONNECTORS_PATH.'index.php';\n$corePath = $modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/');\nrequire_once $corePath.'model/doodles/doodles.class.php';\n$modx->doodles = new Doodles($modx);\n$modx->lexicon->load('doodles:default');\n/* handle request */\n$path = $modx->getOption('processorsPath',$modx->doodles->config,$corePath.'processors/');\n$modx->request->handleRequest(array(\n    'processors_path' => $path,\n    'location' => '',\n));\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in MODX XML Schema\nDESCRIPTION: This XML snippet demonstrates how to define relationships between objects in a MODX schema. It showcases both `composite` and `aggregate` relationships, defining how objects are linked to each other.  The attributes specify aliases for accessing related objects, the class of the related object, the local and foreign keys used for the relationship, the cardinality (one-to-one or one-to-many), and the owner of the relationship.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/work-logic/index.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n\"<composite alias=\\\"Subscribers\\\" class=\\\"sxSubscriber\\\" local=\\\"id\\\" foreign=\\\"newsletter_id\\\" cardinality=\\\"many\\\" owner=\\\"local\\\" />\\n<aggregate alias=\\\"Template\\\" class=\\\"modTemplate\\\" local=\\\"template\\\" foreign=\\\"id\\\" cardinality=\\\"one\\\" owner=\\\"foreign\\\" />\\n<aggregate alias=\\\"Snippet\\\" class=\\\"modSnippet\\\" local=\\\"snippet\\\" foreign=\\\"id\\\" cardinality=\\\"one\\\" owner=\\\"foreign\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Email Hook Properties in Markdown\nDESCRIPTION: A markdown table showing the properties for the email and email2 hooks in mhPayPal, including property names, descriptions, default values, and version information.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage/hooks.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| &property     | Description                                                                                                                                                           | Default value                    | Version |\n| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------- | ------- |\n| emailTpl      | \\[string\\] Name of a chunk to use for the email contents.                                                                                                             | mhPayPalEmail (file-based)       | 1.1.0   |\n| emailSubject  | \\[string\\] The subject of the email to send. Can include all properties included in the data returned.                                                                | Thank you for your Donation!     | 1.1.0   |\n| emailTo       | \\[string\\] Comma separated list of emails to send the email to. Can use `[[+email]]` in this property, which will be replaced with the email as received from PayPal. | The \"emailsender\" system setting | 1.1.0   |\n| emailCC       | \\[string\\] Comma separated list of emails to CC the email to.                                                                                                         |                                  | 1.1.0   |\n| emailBCC      | \\[string\\] Comma separated list of emails to BCC the email to.                                                                                                        |                                  | 1.1.0   |\n| emailFrom     | \\[string\\] Email address to set up as \"from\" email.                                                                                                                   | The \"emailsender\" system setting | 1.1.0   |\n| emailFromName | \\[string\\] The name to attach to the \"from\" email.                                                                                                                    | The \"site\\_name\" system setting. | 1.1.0   |\n```\n\n----------------------------------------\n\nTITLE: Defining writeTree Method Syntax - PHP\nDESCRIPTION: Method signature for the writeTree function that takes a directory path and optional options array. Returns boolean indicating success or failure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.writetree.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean writeTree (string $dirname, [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Target HTML Element\nDESCRIPTION: HTML markup for the div that will be animated\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/3.-ext-js-tutorial-animation.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"div1\" class=\"myDiv\"></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Email Character Set in MODX\nDESCRIPTION: The 'mail_charset' setting in MODX allows administrators to specify the default character set for emails. It accepts string values such as 'UTF-8' or 'iso-8859-1'. This setting is crucial for ensuring proper encoding of email content, especially for non-ASCII characters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/mail_charset.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmail_charset = \"UTF-8\"\n```\n\n----------------------------------------\n\nTITLE: Loading Additional Lexicons in FredBeforeRender\nDESCRIPTION: Example of specifying additional lexicons for Fred to load.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/modx_events.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$lexicons = ['fredrtetinymce:default'];\n```\n\n----------------------------------------\n\nTITLE: modX::addEventListener Syntax - PHP\nDESCRIPTION: Shows the syntax for the addEventListener method in modX. It includes the return type, method name, and parameters with their types. Includes the event name, plugin ID and property set name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.addeventlistener.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n``` php\nboolean addEventListener (string $event, integer $pluginId, [string $propertySetName = ''])\n```\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Gallery Item Template - HTML\nDESCRIPTION: Default chunk template for displaying individual gallery items with optional URL linking and description.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"exerplan-gallery-item-[[+exerplan.gallery.id]]\">\n    [[+exerplan.gallery.url:notempty=`\n    <div>\n        <a href=\"[[+exerplan.gallery.url]]\"\n           title=\"[[+exerplan.gallery.description]]\"\n           class=\"lightbox\">\n            [[+exerplan.gallery.name]]\n        </a>\n    </div>\n    `:default=`\n    <div>[[+exerplan.gallery.name]]</div>\n    `]]\n    <div>[[+exerplan.gallery.description]]</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Keys with fromArray() in xPDO (PHP)\nDESCRIPTION: This example shows how to set primary keys when creating new objects using `fromArray()` and setting `$setPrimaryKeys` to `true`.  This allows specifying the ID of the object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$myBox = $xpdo->newObject('Box');\n$myBox->fromArray(array(\n   'id' => 23,\n   'width' => 5,\n   'height' => 5,\n),'',true);\n\necho $myBox->get('id'); // prints '23'\n```\n\n----------------------------------------\n\nTITLE: ComboBox Window Implementation\nDESCRIPTION: Example of implementing the Units ComboBox within a window form configuration, including necessary hiddenName parameter for saving values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n       {\n            xtype: 'doodle-combo-units'\n            ,fieldLabel: _('unit')\n            ,name: 'unit'\n            ,hiddenName: 'unit'\n            ,anchor: '100%'\n        }\n```\n\n----------------------------------------\n\nTITLE: Enhanced Ext JS Prompt with Multiline Input\nDESCRIPTION: This JavaScript code extends the Ext.MessageBox.show() method to create a multiline prompt for user input.  It uses the `multiline` attribute to specify the height of the text area and the `value` attribute to provide a default value for the input field. The code also specifies the title, message, buttons, callback function and icon.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\nExt.onReady(function() {\n    var myCallback = function(btn, text) {\n        console.info('Вы нажали ' + btn);\n        if (text) {\n            console.info('Вы ввели '+ text);\n        }\n    }\n    Ext.MessageBox.show({\n        title : 'Подтвердите ваше имя',\n        msg : 'Исправьте орфографические ошибки ниже:',\n        width : 300,\n        multiline: 20,\n        value : 'Yodah',\n        buttons : Ext.MessageBox.YESNOCANCEL,\n        fn : myCallback,\n        icon : Ext.MessageBox.WARNING\n    });});\n</script>\n\"\n```\n\n----------------------------------------\n\nTITLE: Registering CSS to HEAD in MODX\nDESCRIPTION: This snippet demonstrates how to register a CSS file to the HEAD of a MODX page by providing the file URL to the regClientCSS method. The example shows both a direct path and using the MODX_ASSETS_URL constant for better compatibility.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/register-assets.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientCSS('assets/css/my-custom.css');\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientCSS(MODX_ASSETS_URL.'css/my-custom.css');\n```\n\n----------------------------------------\n\nTITLE: Rendering Category with Default Template in MODX\nDESCRIPTION: This PHP snippet demonstrates using the bdCategories snippet to generate category listings dynamically. It utilizes MODX templates to define how categories and subcategories are displayed. Dependencies include the proper setup of category structures in bdListings and accessible templates in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdcategories.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<h2>Categories</h2>\n<h3>[[+name]]</h3>\n<p>[[+description]]</p>\n[[+subcategories]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<p>Subcategories: [[+subcategories]]</p>\n```\n\nLANGUAGE: php\nCODE:\n```\n<h2>Categories</h2>\n[[+wrapper]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<a title=\"[[+description:htmlentities]]\">[[+name]]</a>\n```\n\n----------------------------------------\n\nTITLE: Creating User Option Chunk in PHP\nDESCRIPTION: Defines a chunk named 'userOption' for creating dropdown options. This chunk is used in conjunction with the Rowboat snippet for generating user selection options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/eval-binding.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+username]]==[[+id]]\n```\n\n----------------------------------------\n\nTITLE: Adding Discuss Login Hooks to Login Snippet\nDESCRIPTION: Snippet parameters to add Discuss-specific pre and post hooks to the Login snippet call. These hooks enable Discuss to add extra functionality to the login process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n&preHooks=`preHook.DiscussLogin`\n&postHooks=`postHook.DiscussLogin`\n```\n\n----------------------------------------\n\nTITLE: Fetching CookieList Items - MODX Revolution - PHP\nDESCRIPTION: The getCookieList snippet retrieves and returns a comma-separated list of user favorites stored in cookies. It's a simple snippet that takes no parameters and returns either an empty string or the stored values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cookielist/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getCookieList]]\n```\n\n----------------------------------------\n\nTITLE: Creating a MODX GetList Processor\nDESCRIPTION: This PHP code creates a MODX processor for retrieving a list of 'Doodle' objects. It extends the `modObjectGetListProcessor` class, which provides a streamlined way to handle common CRUD (Create, Read, Update, Delete) operations. The code sets class variables like `$classKey`, `$languageTopics`, `$defaultSortField`, `$defaultSortDirection`, and `$objectType` to configure the processor's behavior.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DoodleGetListProcessor extends modObjectGetListProcessor {\n    public $classKey = 'Doodle';\n    public $languageTopics = array('doodles:default');\n    public $defaultSortField = 'name';\n    public $defaultSortDirection = 'ASC';\n    public $objectType = 'doodles.doodle';\n}\nreturn 'DoodleGetListProcessor';\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Server Block for MODX with FURLs Support\nDESCRIPTION: A complete Nginx server block configuration for MODX installation that enables friendly URLs. It includes directives for PHP processing through FastCGI, URL rewriting for MODX, file size limits, and security settings. This configuration requires php-fpm to be installed and properly configured.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls/nginx.md#2025-04-17_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n        listen 80;\n        server_name example.com www.example.com;\n        root /home/sites/example.com;\n        index index.php;\n        client_max_body_size 30M;\n        location / {\n                root /home/sites/example.com;\n                if (!-e $request_filename) {\n                        rewrite ^/(.*)$ /index.php?q=$1 last;\n                }\n        }\n        location ~ \\.php$ {\n                try_files $uri =404;\n                fastcgi_split_path_info ^(.+\\.php)(.*)$;\n                fastcgi_pass   127.0.0.1:9000;\n                fastcgi_index  index.php;\n                fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n                include fastcgi_params;\n                fastcgi_ignore_client_abort on;\n                fastcgi_param  SERVER_NAME $http_host;\n        }\n\n        location ~ /\\.ht {\n                deny  all;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Limitations with getCollectionGraph in PHP\nDESCRIPTION: This example demonstrates the limitations of using traditional query debugging methods with getCollectionGraph. The JOIN operations are not visible in the query until the getCollectionGraph method is executed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollectiongraph.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$criteria['modResource.id:IN'] = array(1,2,3);\n$criteria['TemplateVarResources.tmplvarid'] = 5;\n$criteria = $modx->newQuery('modResource', $criteria);\n$criteria->prepare();\nprint $criteria->toSQL();\n$pages = $modx->getCollectionGraph('modResource', '{\"TemplateVarResources\":{\"TemplateVar\":{}}}', $criteria);\n```\n\n----------------------------------------\n\nTITLE: Basic pdoCrumbs Usage\nDESCRIPTION: Simple implementation of breadcrumbs using pdoCrumbs snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoCrumbs]]\n```\n\n----------------------------------------\n\nTITLE: Adding a Search Field to an ExtJS Grid\nDESCRIPTION: This JavaScript snippet adds a textfield to the top toolbar of an ExtJS grid for implementing search functionality. It defines the `xtype`, `id`, `emptyText`, and `listeners` for the textfield.  The `change` listener triggers the `search` method, while the `render` listener enables the change event when the ENTER key is pressed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n,tbar:[{\n    xtype: 'textfield'\n    ,id: 'doodles-search-filter'\n    ,emptyText: _('doodles.search...')\n    ,listeners: {\n        'change': {fn:this.search,scope:this}\n        ,'render': {fn: function(cmp) {\n            new Ext.KeyMap(cmp.getEl(), {\n                key: Ext.EventObject.ENTER\n                ,fn: function() {\n                    this.fireEvent('change',this);\n                    this.blur();\n                    return true;\n                }\n                ,scope: cmp\n            });\n        },scope:this}\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Git Push Output Example\nDESCRIPTION: This snippet shows an example of the output after pushing a branch to origin. It provides information about the objects being counted, compressed, and written, as well as a link to create a pull request on GitHub. This output confirms that the branch has been successfully pushed to the remote repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/contribute/code/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCounting objects: 18, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (18/18), done.\nWriting objects: 100% (18/18), 111.86 KiB | 1.43 MiB/s, done.\nTotal 18 (delta 12), reused 0 (delta 0)\nremote: Resolving deltas: 100% (12/12), completed with 9 local objects.\nremote:\nremote: Create a pull request for 'bug-12345' on GitHub by visiting:\nremote:      https://github.com/YourUsername/revolution/pull/new/bug-12345\nremote:\nTo github.com:YourUsername/revolution.git\n * [new branch]      bug-12345 -> bug-12345\n```\n\n----------------------------------------\n\nTITLE: Unsetting a Placeholder in modX\nDESCRIPTION: This snippet demonstrates how to unset a placeholder in modX using the `unsetPlaceholder` method. The `$key` parameter specifies the name of the placeholder to remove. No output is produced directly, but the placeholder will no longer be available for rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.unsetplaceholder.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->unsetPlaceholder('myPlaceholder');\n```\n\n----------------------------------------\n\nTITLE: xPDOCacheManager copyFile Method Signature in PHP\nDESCRIPTION: This snippet shows the method signature for the copyFile method of xPDOCacheManager. It includes the parameters and return type, indicating that the method can return either a boolean or an array depending on the options used.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.copyfile.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nboolean|array copyFile (string $source, string $target, [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Get Placeholder Value Example in MODX PHP\nDESCRIPTION: Example showing how to retrieve a placeholder value using the getPlaceholder method. The value is stored in the $value variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getplaceholder.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = $modx->getPlaceholder('MyPlaceholder');\n```\n\n----------------------------------------\n\nTITLE: Basic BannerX Implementation in MODX\nDESCRIPTION: Example usage of BannerX snippet to display a single random banner for position 1. Shows how to implement basic banner display with sorting and limiting options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bannerx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[BannerX? &position=`1` &sortby=`RAND()` &limit=`1`]]\n```\n\n----------------------------------------\n\nTITLE: jQuery Event Handler for pdopage_load\nDESCRIPTION: Event handler implementation for the pdopage_load event.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).on('pdopage_load', function(e, config, response) {\n    console.log(e, config, response);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Source Container Method Signature in PHP\nDESCRIPTION: Method signature for createSourceContainer() which creates a physical data container. Takes DSN string, optional username, password, and container options as parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.createsourcecontainer.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid createSourceContainer (\n   $dsn,\n   [$username = ''],\n   [$password = ''],\n   [$containerOptions = null]\n)\n```\n\n----------------------------------------\n\nTITLE: Advanced Comments Retrieval with Custom Parameters\nDESCRIPTION: Retrieve latest comments with custom body limit and limit on total comments returned\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiplatestcomments.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipLatestComments? &type=`thread` &thread=`thread32` &bodyLimit=`100`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipLatestComments? &type=`user` &user=`mikegeorge` &limit=`10`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[!QuipLatestComments? &type=`family` &family=`blog-post` &limit=`10`]]\n```\n\n----------------------------------------\n\nTITLE: FormIt Array Parameter Example\nDESCRIPTION: Example showing the syntax for passing an array of options to a FormIt field\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nOne||Two||Three\n```\n\n----------------------------------------\n\nTITLE: Creating an H1 Heading Element in HTML\nDESCRIPTION: This snippet shows how to create a simple H1 Heading Element in Fred, including the necessary data attributes for identifying the element type. This is the first step in adding content to a page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/themes.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1 data-fred-name=\"heading\">H1 Heading</h1>\n```\n\n----------------------------------------\n\nTITLE: Pushing a Bug Fix Branch to Origin in Git\nDESCRIPTION: This snippet shows how to push a local branch containing a bug fix to your origin repository. The `-u` flag configures the branch to track the remote branch, allowing for simpler `git push` commands in the future. It involves using the `git push` command.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/contribute/code/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin bug-12345\n```\n\n----------------------------------------\n\nTITLE: getMany Method Signature in PHP\nDESCRIPTION: Method signature showing required and optional parameters for getMany(). Takes an alias string for the relationship, optional criteria object, and optional cache flag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/related-object-accessors/getmany.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray &getMany (\n   string $alias,\n   [object $criteria = null],\n   [boolean|integer $cacheFlag = true]\n)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Database in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->insert($fields, $intotable, $fromfields= \\\"*\\\", $fromtable= \\\"\\\", $where= \\\"\\\", $limit= \\\"\\\")` for inserting data into a database table. Use modX->query() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n\"see modX->query()\"\n```\n\n----------------------------------------\n\nTITLE: Logging Messages to MODx Console in PHP\nDESCRIPTION: Shows how to output different types of messages to the console using PHP, including info, error and warning levels.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.console.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->log(modX::LOG_LEVEL_INFO,'An information message in normal colors.');\n$modx->log(modX::LOG_LEVEL_ERROR,'An error in red!');\n$modx->log(modX::LOG_LEVEL_WARN,'A warning in blue!');\n```\n\n----------------------------------------\n\nTITLE: Removing xPDOObject Method Signature\nDESCRIPTION: Method signature for the remove() function that accepts an optional ancestors array parameter and returns a boolean indicating success or failure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/remove.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean remove ([array $ancestors = array ()])\n```\n\n----------------------------------------\n\nTITLE: Getting XML from modX Database Query\nDESCRIPTION: This method retrieves XML data based on a SQL query. Note that there is no direct analogous method in the current implementation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->getXML($dsq)\n```\n\n----------------------------------------\n\nTITLE: Output Result of CSSSweet Prefix for Transition with All Options\nDESCRIPTION: Shows the resulting CSS output when using the prefix snippet with the 'all' option, adding vendor prefixes for WebKit, Mozilla, Microsoft, and Opera browsers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/csssweet.prefix.md#2025-04-17_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n-webkit-transition: all 300ms ease;\n-moz-transition: all 300ms ease;\n-ms-transition: all 300ms ease;\n-o-transition: all 300ms ease;\ntransition: all 300ms ease;\n```\n\n----------------------------------------\n\nTITLE: Checking Validation Status with xPDOObject::isValidated\nDESCRIPTION: Method signature for checking if an xPDOObject or a specific field has been validated. Takes an optional string parameter $key to check validation status of a specific field. Returns boolean indicating validation status.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/validation/isvalidated.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean isValidated ([string $key = ''])\n```\n\n----------------------------------------\n\nTITLE: Git Remote Repository Setup Commands\nDESCRIPTION: Git commands to add a remote repository and push initial commit to GitHub\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/git-basics/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add origin https://github.com/bezumkin/Sendex.git\\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Basic Ext JS Page Structure\nDESCRIPTION: This HTML code sets up a basic web page that includes the necessary Ext JS (MODExt) CSS and JavaScript files. It then uses Ext.onReady to execute a JavaScript function when the DOM is ready, which displays a simple alert message box.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<html>\n    <title>Моя тестовая страница Ext JS</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n        Ext.onReady(function() {\n            Ext.MessageBox.alert('Мой заголовок','DOM подготовлен...');\n        });\n    </script>\n    <body>\n        <h1>Ввод в Ext JS</h1>\n        <p>Я загрузил этот HTML в корень моего сайта и включаю библиотеки Ext JS, которые поставляются вместе с менеджером MODX.</p>\n    </body>\n</html>\n\"\n```\n\n----------------------------------------\n\nTITLE: Syntax for xPDOManager::removeSourceContainer Method in PHP\nDESCRIPTION: This snippet shows the syntax for the removeSourceContainer method of the xPDOManager class. It takes a DSN string, username, and password as parameters and returns an integer.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.removesourcecontainer.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nint removeSourceContainer (string $dsn, string $username, string $password)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resources PHP Snippet\nDESCRIPTION: Demonstrates a getResources snippet call to fetch resources from a specific parent and context\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/client-proofing/form-customization/rules/tab-title.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`300` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: getResources Chunk Template for Tab Titles\nDESCRIPTION: This MODX chunk template is used with the getResources snippet to generate the HTML for each tab. It uses placeholders like `[[+id]]`, `[[+longtitle]]`, and `[[+pagetitle]]` to dynamically populate the tab's content with resource data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"<li id=\\\"[[+id]]\\\"><a href=\\\"[[~[[+id]]]]\\\" title=\\\"[[+longtitle]]\\\">[[+pagetitle]]</a></li>\"\n```\n\n----------------------------------------\n\nTITLE: Basic Chunk with Placeholder in PHP\nDESCRIPTION: A simple MODX chunk named 'Hello' containing a placeholder that can be filled with dynamic content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nHello [[+name]]!\n```\n\n----------------------------------------\n\nTITLE: Displaying Introductory Text in MODX Revolution HTML\nDESCRIPTION: Shows how to display the introductory text (summary) of a resource using MODX Revolution tags. This is often used in snippets for summarizing posts.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"summary\">[[*introtext]]</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Comments Template in Quip\nDESCRIPTION: Default template chunk for wrapping comment threads in Quip. It creates a container div with a heading showing total comments count, displays the list of comments, and includes pagination. The template uses several placeholders for dynamic content insertion.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip/tplcomments.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"quip\">\n    <h3>[[%quip.comments]] ([[+total]])</h3>\n\n<div id=\"quip-topofcomments-[[+idprefix]]\"></div>\n\n    [[+comments:notempty=`<ol class=\"quip-comment-list\">\n    [[+comments]]\n    </ol>`]]\n\n    [[+pagination]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Resource Array Logging in PHP\nDESCRIPTION: Plugin that logs the complete resource array to the error log after saving.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormSave':\n        $modx->log(MODX_LOG_LEVEL_ERROR, print_r($resource->toArray(),true) );\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Chunk Deletion with OnBeforeChunkFormDelete in MODX PHP\nDESCRIPTION: This plugin example demonstrates how to prevent deletion of a specific chunk by ID. When the OnBeforeChunkFormDelete event is triggered, the plugin checks if the chunk ID matches a specific value (69) and outputs an error message if it does, preventing the deletion process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforechunkformdelete.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeChunkFormDelete':\n        if ($id == 69){\n            $modx->event->output(\"Chunk cannot be deleted \".$chunk->get('name'));\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TV 'price' on OnDocFormSave based on Template ID in PHP\nDESCRIPTION: This plugin snippet sets the Template Variable (TV) 'price' to '128' when the `OnDocFormSave` event is triggered and the resource's template is 5.  It includes error logging if setting the TV value fails. The example shows that the value of the 'price' TV is set to 128 regardless of the existing value.  The PHP code checks the template ID of the resource and then sets the TV value accordingly.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormSave':\n        //если у ресурса шаблон=5\n        if ($resource->get('template') == 5) {  \n            // после сохранения значение ТВ price=128\n            if(!$resource->setTVValue('price', '128')) {\n                $modx->log(MODX_LOG_LEVEL_ERROR, 'Возникли проблемы при установке значения ТВ.');\n            }\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: modX::unsetPlaceholder Syntax\nDESCRIPTION: This snippet shows the function signature of the `unsetPlaceholder` method in modX. It accepts a single string argument, `$key`, which represents the name of the placeholder to be unset. The method returns void, meaning it doesn't return any value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.unsetplaceholder.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nvoid unsetPlaceholder (string $key)\n```\n\n----------------------------------------\n\nTITLE: Fred Elements with Resource Field Targeting\nDESCRIPTION: Examples of elements targeting specific MODX resource fields and Template Variables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<h1 data-fred-name=\"title\" data-fred-target=\"pagetitle\">Default Page Title</h1>\n\n<h1 data-fred-name=\"my-tv\" data-fred-target=\"tv_job-title\">\n    Targets the \"job-title\" TV field\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Email from Web Context\nDESCRIPTION: Example demonstrating how to get a user's email address from their profile in the 'web' context, including null checks.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getuser.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = $modx->getUser('web', true);\nif (!$user) return '';\n$profile = $user->getOne('Profile');\nif (!$profile) return '';\nprint $profile->get('email');\n```\n\n----------------------------------------\n\nTITLE: Defining OnCategoryBeforeRemove Event Parameters in Markdown\nDESCRIPTION: This snippet defines the parameters for the OnCategoryBeforeRemove event using a Markdown table. It specifies the 'category' parameter, which is a reference to the modCategory object being removed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/oncategorybeforeremove.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Description                            |\n| -------- | -------------------------------------- |\n| category | A reference to the modCategory object. |\n```\n\n----------------------------------------\n\nTITLE: Extract Template Base Structure - JSON\nDESCRIPTION: Basic structure for extract templates that define package dependencies and vehicle configurations for MODX themes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/cmp/theme_settings_and_resolvers.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [],\n    \"vehicles\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'then' in MODX\nDESCRIPTION: Demonstrates the usage of 'then' modifier for conditional output. It checks if the number of books is greater than 0 and outputs \"Now available!\" if true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:gt=`0`:then=`Now available!`]]\n```\n\n----------------------------------------\n\nTITLE: Basic ArchivistGrouper Usage in MODX\nDESCRIPTION: Simple implementation of the ArchivistGrouper snippet to display archive listings from specified parent resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/archivist/archivist.archivistgrouper.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!ArchivistGrouper? &parents=`12`]]\n```\n\n----------------------------------------\n\nTITLE: Parent Page Link Tag\nDESCRIPTION: Shows how to create a dynamic link to the parent page using the parent resource ID tag\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*parent]]]]\">Up to parent page</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing jQuery Tabs\nDESCRIPTION: This JavaScript snippet initializes jQuery tabs using the tabs() function. It targets an HTML element with the ID 'tabs' and converts it into a jQuery UI tabs interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Status\nDESCRIPTION: Command to verify that your working directory is clean with no uncommitted changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit status\nOn branch 2.7.x\nYour branch is up-to-date with 'origin/2.7.x'.\nnothing to commit, working tree clean\n```\n\n----------------------------------------\n\nTITLE: Disabling ModSecurity Request Body Access\nDESCRIPTION: Configuration to disable ModSecurity request body access for handling large file downloads.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nSecRequestBodyAccess Off\n```\n\n----------------------------------------\n\nTITLE: Running Schema Parser with PHP Composer in MODX\nDESCRIPTION: Alternative method for executing the schema parsing script using the PHP Composer executable directly. This approach is useful when the Composer binary is not in the system path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/tooling/model.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp composer.phar run-script parse-schema\n```\n\n----------------------------------------\n\nTITLE: Defining System Setting Lexicons\nDESCRIPTION: Shows how to create lexicon entries for system settings in a component namespace.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/internationalization.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$_lang['setting_gallery.display_thumbs'] = 'Display Thumbnails';\n$_lang['setting_gallery.display_thumbs_desc'] = 'When set to true, this will display thumbnails for the gallery.';\n```\n\n----------------------------------------\n\nTITLE: Creating an Output Filter for Auto-Tag Template Variables in PHP\nDESCRIPTION: This PHP snippet demonstrates how to process auto-tag template variable values and convert them into clickable links. It splits the input by comma delimiter, creates links to a specific resource with the tag as a GET parameter, and returns the formatted output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/input-types/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ($input == '') { return 'Error'; } // In case the TV is empty\n$tags = explode(', ',$input); // Based on a delimiter of \", \" this will split each one up in an array\nforeach ($tags as $key => $value) { // Loop through the tags\n    $output[] = '<a href=\"'.$modx->makeurl(9, '', array('tag' => $value)).'\">'.$value.'</a>'; // Add it to an output array, with a link to resource 9 and the get parameter.\n}\nreturn implode(', ',$output); // Merge the output array and output\n```\n\n----------------------------------------\n\nTITLE: Using Grid Confirmation Dialog in MODExt\nDESCRIPTION: Demonstrates how to implement a confirmation dialog before executing a grid action. The method takes two parameters: the processor action name and the confirmation message to display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.grid.grid.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrid.confirm(\"approve\",\"Are you sure you want to approve this article?\");\n```\n\n----------------------------------------\n\nTITLE: Setting up Components Menu for Revo 2.3+\nDESCRIPTION: This snippet details the setup process for the Components menu in MODX Revolution 2.3 or higher, including specifying the lexicon key, action, parameters, and ensuring the configuration table is correctly created and updated.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSystem->Top Menu, select 'Components', click 'Create Menu'\n- lexicon key: **migx**\n- action: **index**\n- parameters: `&configs=packagemanager||migxconfigs||setup`\n- namespace: **migx**\n```\n\n----------------------------------------\n\nTITLE: Initializing Doodles Base Class in PHP\nDESCRIPTION: This code defines the Doodles base class, which sets up configuration paths and a reference to the MODX object. It's used to establish common functionality across the custom Extra.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Doodles {\n    public $modx;\n    public $config = array();\n    public function __construct(modX &$modx,array $config = array()) {\n        $this->modx =& $modx;\n        $basePath = $this->modx->getOption('doodles.core_path',$config,$this->modx->getOption('core_path').'components/doodles/');\n        $assetsUrl = $this->modx->getOption('doodles.assets_url',$config,$this->modx->getOption('assets_url').'components/doodles/');\n        $this->config = array_merge(array(\n            'basePath' => $basePath,\n            'corePath' => $basePath,\n            'modelPath' => $basePath.'model/',\n            'processorsPath' => $basePath.'processors/',\n            'templatesPath' => $basePath.'templates/',\n            'chunksPath' => $basePath.'elements/chunks/',\n            'jsUrl' => $assetsUrl.'js/',\n            'cssUrl' => $assetsUrl.'css/',\n            'assetsUrl' => $assetsUrl,\n            'connectorUrl' => $assetsUrl.'connector.php',\n        ),$config);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Doodles Base Class in PHP\nDESCRIPTION: This snippet defines a Doodles class that initializes with modX and sets up configuration paths for the MODX component. It helps manage paths and configurations for other functionalities within the Extra.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Doodles {\n    public $modx;\n    public $config = array();\n    public function __construct(modX &$modx,array $config = array()) {\n        $this->modx =& $modx;\n        $basePath = $this->modx->getOption('doodles.core_path',$config,$this->modx->getOption('core_path').'components/doodles/');\n        $assetsUrl = $this->modx->getOption('doodles.assets_url',$config,$this->modx->getOption('assets_url').'components/doodles/');\n        $this->config = array_merge(array(\n            'basePath' => $basePath,\n            'corePath' => $basePath,\n            'modelPath' => $basePath.'model/',\n            'processorsPath' => $basePath.'processors/',\n            'templatesPath' => $basePath.'templates/',\n            'chunksPath' => $basePath.'elements/chunks/',\n            'jsUrl' => $assetsUrl.'js/',\n            'cssUrl' => $assetsUrl.'css/',\n            'assetsUrl' => $assetsUrl,\n            'connectorUrl' => $assetsUrl.'connector.php',\n        ),$config);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Send Clear Cache Plugin for MODX Load Balanced Nodes\nDESCRIPTION: Plugin that sends cache clear commands to registered remote server instances. Triggers on OnSiteRefresh event to propagate cache clearing across distributed nodes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modregistry.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* SendClearCache plugin -- register with OnSiteRefresh event */\n\n/* read instances and write clear cache msg to each command directory */\nif ($modx->getService('registry', 'registry.modRegistry')) {\n    $modx->registry->addRegister('remotes', 'registry.modDbRegister', array('directory' => 'remotes'));\n    $modx->registry->remotes->connect();\n    $modx->registry->remotes->subscribe('/distrib/instances/');\n    $instances = $modx->registry->remotes->read(array('poll_limit' => 1, 'msg_limit' => 25, 'remove_read' => false));\n    if (!empty($instances)) {\n        foreach ($instances as $instance) {\n            if ($instance == $_SERVER['SERVER_ADDR']) continue;\n            $modx->registry->remotes->subscribe(\"/distrib/commands/{$instance}/\");\n            $modx->registry->remotes->send(\"/distrib/commands/{$instance}/\", 'clearCache', array('expires' => time() + 1440));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drag and Drop for MODx Tree Fields\nDESCRIPTION: Code example showing how to enable drag and drop functionality for MODx.FormPanel fields by configuring enableDD and ddGroup parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.tree.tree.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n,enableDD: true\n,ddGroup: 'modx-treedrop-dd'\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Socket in PHP.ini\nDESCRIPTION: This code snippet shows the PHP configuration settings needed to correctly set up the MySQL socket path. It's used to resolve connection issues related to invalid MySQL socket configurations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmysql.default_socket=/path/to/my/mysql.sock\nmysqli.default_socket=/path/to/my/mysql.sock\npdo_mysql.default_socket=/path/to/my/mysql.sock\n```\n\n----------------------------------------\n\nTITLE: Converting HTML Tags to Text Formatting with PHP\nDESCRIPTION: A PHP code snippet that uses regular expressions to convert HTML heading tags into text-based formatting markers. This appears to be part of a larger script for processing content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n        $msg = preg_replace('#</h1>#i', ' ==', $msg);\n        $msg = preg_replace('#<h2>#i', '=== ', $msg);\n        $msg = preg_replace('#</h2>#i', ' ===', $msg);\n        $msg = strip_tags($msg) . \"\\n\";\n    }\n    print $msg;\n}\n/* EOF */\n```\n\n----------------------------------------\n\nTITLE: Running MODX Core Transport Package Build via PHP CLI\nDESCRIPTION: This command executes the transport.core.php script that generates the core.transport.zip package. The process typically takes 5-30 seconds to complete and can be run from the command line as shown.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/tooling/core.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp _build/transport.core.php\n```\n\n----------------------------------------\n\nTITLE: Custom TV Input Controller\nDESCRIPTION: This PHP class defines the input controller for the custom 'templateselect' TV. It extends the `modTemplateVarInputRender` class. The `getTemplate()` function specifies the location of the Smarty template file used to render the input field. The `process()` function is available to perform any business logic before rendering, but is left empty in this example.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-tvs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif(!class_exists('TemplateSelectInputRender')) {\n    class TemplateSelectInputRender extends modTemplateVarInputRender {\n        public function getTemplate() {\n            return $this->modx->getOption('core_path').'components/ourtvs/tv/input/tpl/templateselect.tpl';\n        }\n        public function process($value,array $params = array()) {\n        }\n    }\n}\nreturn 'TemplateSelectInputRender';\n```\n\n----------------------------------------\n\nTITLE: Function with Arguments and Variable Declaration in PHP\nDESCRIPTION: Example of a method in a MODX class demonstrating proper camelCase function naming, argument formatting, type hinting with 'array', and local variable declaration with reference assignment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/coding-standards.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass modFactor {\n    public function testFunc($testVar, array &$anotherTest = array()) {\n        $this->_privateVar = $testVar;\n        $local_variable =& $anotherTest;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Checkboxes with FormItIsChecked\nDESCRIPTION: This snippet shows how to use the FormItIsChecked output filter to maintain checkbox states after form submission. The filter checks if the value of the 'color' array field contains the checkbox's value and adds the 'checked' attribute if it does, preserving the selected state across submissions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.tutorials-and-examples/handling-selects,-checkboxes-and-radios.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"<label>Цвет: [[!+fi.error.color]]</label>\\n<input type=\\\"checkbox\\\" name=\\\"color[]\\\" value=\\\"blue\\\" [[!+fi.color:FormItIsChecked=`blue`]] > Синий\\n<input type=\\\"checkbox\\\" name=\\\"color[]\\\" value=\\\"red\\\" [[!+fi.color:FormItIsChecked=`red`]] > Красный\\n<input type=\\\"checkbox\\\" name=\\\"color[]\\\" value=\\\"green\\\" [[!+fi.color:FormItIsChecked=`green`]] > Зеленый\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Cache Files for PHP Thumb - MODX - Markdown\nDESCRIPTION: This configuration limits the number of cache files PHPThumb can create, managing disk space effectively and enhancing performance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_cache_maxfiles](building-sites/settings/phpthumb_cache_maxfiles)\n```\n\n----------------------------------------\n\nTITLE: Sending Email with Simple Recipient\nDESCRIPTION: Example of sending an email to a single recipient with HTML content, demonstrating basic modSwiftMailer functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modswiftmailer/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('mail', 'mail.modSwiftMailer');\n\n$modx->mail->address('to', 'recipient@domain.tld', 'Recipient');\n$modx->mail->address('sender', 'sender@domain.tld');\n$modx->mail->subject('A simple e-mail');\n$modx->mail->body('<h1>Simple e-mail</h1><p>With a basic message</p>');\n\n$modx->mail->send();\n```\n\n----------------------------------------\n\nTITLE: Disabling PHP Session Auto-Start in .htaccess\nDESCRIPTION: This .htaccess configuration snippet disables PHP's session auto-start feature. It can help resolve login issues in the MODX manager after installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting.md#2025-04-17_snippet_4\n\nLANGUAGE: apache\nCODE:\n```\nphp_value session.auto_start 0\n```\n\n----------------------------------------\n\nTITLE: Printing Messages Based on Environment in PHP\nDESCRIPTION: This function formats and prints messages differently depending on whether the script is run from the command line (CLI) or a web server. When running in CLI mode, it replaces HTML tags with simpler text formatting for better readability in the console.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction print_msg($msg) {\n    if (php_sapi_name() == 'cli') {\n        $msg = preg_replace('#<br></br>#i', \"\\n\", $msg);\n        $msg = preg_replace('#<h1>#i', '== ', $msg);\n        $msg = preg_replace('#</h1>#i', ' ==', $msg);\n        $msg = preg_replace('#<h2>#i', '=== ', $msg);\n        $msg = preg_replace('#</h2>#i', ' ===', $msg);\n        $msg = strip_tags($msg) . \"\\n\";\n    }\n    print $msg;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Resources with getResources Snippet in MODX\nDESCRIPTION: This code snippet uses the getResources snippet in MODX to fetch related resources. It specifies the parent resource ID, section parameter, and the context to retrieve resources from.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/move-tv-to-tab.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`1353` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Tracking Branch in PHP\nDESCRIPTION: Command to create a local tracking branch from a remote branch in Git.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngit checkout -b 2.x origin/2.x\n```\n\n----------------------------------------\n\nTITLE: Using imageHERE with Custom Parameters in MODX\nDESCRIPTION: Advanced usage of imageHERE with custom parameters including width, height, background color, foreground color, custom text, and alt attribute for the placeholder image.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/imagehere/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n[[$imageHERE?\n\n &w=`600`\n\n &h=`400`\n\n &bg=`#555`\n\n &fg=`#fff`\n\n &text=`Custom Text`\n\n &alt=`alt text here`\n\n]]\n```\n\n----------------------------------------\n\nTITLE: Registering JavaScript Method Definition\nDESCRIPTION: Method signature for regClientScript showing parameters and return type. Used to register JavaScript that will be injected before the closing BODY tag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientscript.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid regClientScript (string $src, [boolean $plaintext = false])\n```\n\n----------------------------------------\n\nTITLE: Basic regClientStartupScript Method Signature\nDESCRIPTION: The method signature showing parameters for registering JavaScript in the HEAD tag. Takes a source string and optional plaintext boolean parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientstartupscript.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid regClientStartupScript (string $src, [boolean $plaintext = false])\n```\n\n----------------------------------------\n\nTITLE: Discuss Manifest: Global CSS and JS Definition\nDESCRIPTION: This PHP code snippet shows the structure of a Discuss manifest file for defining global CSS and JS files.  These files are loaded on every controller (except XML pages).  The location of the css and js files are relative to the assets/components/discuss/themes/theme_name/css or js/ directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$manifest = array(\n    'global' => array(\n        'css' => array(\n            'header' => array(\n                'index.css',\n                'forums-styles.css',\n                'jquery-ui-1.8.16.custom.css',\n            ),\n        ),\n        'js' => array(\n            'header' => array(\n                'jquery-1.6.2.min.js',\n                'jquery-ui-1.8.16.custom.min.js',\n                'forums.js',\n            ),\n        ),\n    ),\n    'print' => array(\n        'css' => array(\n            'header' => array(\n                'print.css',\n            ),\n        ),\n    ),\n    'home' => array(\n        'js' => array(\n            'header' => array(\n                'forums.home.js',\n            ),\n        ),\n        'options' => array(\n            'showBoards' => true,\n            'showBreadcrumbs' => true,\n            'showRecentPosts' => false,\n            'showStatistics' => true,\n            'showLoginForm' => false,\n            'bypassUnreadCheck' => true,\n            'checkUnread' => true,\n            'showLogoutActionButton' => false,\n            'hideIndexBreadcrumbs' => true,\n            'subBoardSeparator' => '',\n        ),\n    ),\n\n);\nreturn $manifest;\n\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple User Group Membership (AND) in MODX Revolution (PHP)\nDESCRIPTION: This example checks if the user is a member of both the 'Staff' and 'Investors' user groups by passing an array of group names and setting the second parameter to true.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.ismember.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user->isMember(array('Staff','Investors'), true);\n```\n\n----------------------------------------\n\nTITLE: Displaying Status Message in FormPanel\nDESCRIPTION: Shows a temporary status message in the top-right corner of the screen after successful form submission\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.msg.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlisteners: {\n            'success': function (res) {\n                MODx.msg.status({\n                    title: _('save_successful'),\n                    message: res.result['message'],\n                    delay: 3\n                });\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: MODX Manager Interface HTML Structure\nDESCRIPTION: HTML markup demonstrating how to create manager-style interfaces using ExtJS CSS classes without requiring ExtJS JavaScript. Includes page header, panels, and button styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/parsed.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n    <h2  class=\"modx-page-header\">[[+ph._pagetitle]]</h2>\n\n    <div class=\"x-panel-body shadowbox\">\n        <div class=\"panel-desc\">Some description</div>\n        <div class=\"x-panel main-wrapper\">\n            <p>Content can take place here Lorem ipsum dolor sit amet, consectetur adipisicing elit. Culpa dolore minima unde voluptatem voluptates. Consequuntur delectus id quo reiciendis sapiente voluptatum. Amet dignissimos eaque eum quae. Ad eveniet minus sunt! Lorem ipsum dolor sit amet, consectetur adipisicing elit. Culpa debitis eligendi eveniet excepturi, fugiat harum inventore itaque laboriosam laudantium nisi repellat repellendus repudiandae tempora vel voluptatem. Aliquid deleniti laudantium ut. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Alias architecto at atque commodi deserunt, dolores fugiat harum in iste laboriosam molestias officiis omnis quam reprehenderit saepe sunt veritatis voluptas voluptates?</p>\n\n            <div>\n                <span class=\"x-btn\">\n                    <button>Some button</button>\n                </span>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div id=\"modx-action-buttons\" class=\"x-toolbar\">\n    <span class=\"x-btn x-btn-small primary-button\">\n        <em class=\"\">\n            <button type=\"button\" class=\"x-btn-text\">Some button</button>\n        </em>\n    </span>\n    <span class=\"x-btn x-btn-small\">\n        <em class=\"\">\n            <button type=\"button\" class=\"x-btn-text\">Some other button</button>\n        </em>\n    </span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Sleep Method in JavaScript\nDESCRIPTION: Pauses JavaScript execution for a specified number of seconds using the MODx.sleep method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.sleep(3); /* остановиться на 3 секунды */\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Example in YAML for Documentation Pages\nDESCRIPTION: An example of basic frontmatter that should be added to the top of documentation files. This YAML block sets the page title and meta description for search engines.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/documentation/index.md#2025-04-17_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n---\ntitle: 'Excellent Documentation'\ndescription: 'This meta data description will be used by search engines.'\n---\n```\n\n----------------------------------------\n\nTITLE: POST Method AdvSearchForm Configuration in PHP\nDESCRIPTION: Example showing how to configure the search form to use POST instead of the default GET method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/advsearch/advsearch.advsearchform/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[AdvSearchForm? &method=`POST`]]\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for User ComboBox Items\nDESCRIPTION: Defines the visual appearance of user items in the combo box dropdown list. Includes styling for normal state, hover state, and text formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_5\n\nLANGUAGE: css\nCODE:\n```\nsendex-list-item {font:normal 11px tahoma, arial, helvetica, sans-serif;padding:3px 10px 3px 10px;border:1px solid #fff;border-bottom:1px solid #eeeeee;white-space:normal;color:#555;cursor: pointer;}\n\nsendex-list-item:hover {background: #efefef;}\n\nsendex-list-item h3 {display:block;font:inherit;font-weight:bold;font-size: 1.1em;line-height: 1.1em;}\n```\n\n----------------------------------------\n\nTITLE: Example of a Corrupted MODX Configuration File\nDESCRIPTION: This snippet demonstrates the structure of a corrupted `core/config/config.inc.php` file, where placeholders are present instead of actual values. This corruption can lead to a 'Class xPDODriver_ not found' error.  It's crucial to check and restore the file with correct database credentials and settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$database_type = '{database_type}';\n$database_server = '{database_server}';\n$database_user = '{database_user}';\n$database_password = '{database_password}';\n$database_connection_charset = '{database_connection_charset}';\n$dbase = '{dbase}';\n$table_prefix = '{table_prefix}';\n$database_dsn = '{database_dsn}';\n$config_options = {config_options};\n$driver_options = {driver_options};\n```\n\n----------------------------------------\n\nTITLE: Defining a ComboBox with Local Data Store\nDESCRIPTION: This code defines a custom ComboBox, Doodles.combo.Units, using a local Ext.data.ArrayStore. It specifies the data fields ('unit', 'display') and the data itself, along with configurations for local mode, displayField, and valueField.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nDoodles.combo.Units = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        store: new Ext.data.ArrayStore({\n            id: 0\n            ,fields: ['unit','display']\n            ,data: [\n                ['MB','Megabyte']\n                ,['GB','Gigabyte']\n                ,['TB','Terabyte']\n                ,['PB','Petabyte']\n                ,['EB','Exabyte']\n                ,['ZB','Zettabyte']\n                ,['YB','Yottabyte']\n            ]\n        })\n        ,mode: 'local'\n        ,displayField: 'display'\n        ,valueField: 'unit'\n    });\n    Doodles.combo.Units.superclass.constructor.call(this,config);\n};\nExt.extend(Doodles.combo.Units,MODx.combo.ComboBox);\nExt.reg('doodle-combo-units',Doodles.combo.Units);\n```\n\n----------------------------------------\n\nTITLE: Adding Snippet to Transport\nDESCRIPTION: This PHP code defines a function to retrieve snippet content from a file, creates a modSnippet object, sets its properties, and includes properties from another file. It then returns an array containing the snippet object, enabling packaging.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction getSnippetContent($filename) {\n    $o = file_get_contents($filename);\n    $o = trim(str_replace(array('<?php','?>'),'',$o));\n    return $o;\n}\n$snippets = array();\n\n$snippets[1]= $modx->newObject('modSnippet');\n$snippets[1]->fromArray(array(\n    'id' => 1,\n    'name' => 'Doodles',\n    'description' => 'Displays a list of Doodles.',\n    'snippet' => getSnippetContent($sources['elements'].'snippets/snippet.doodles.php'),\n),'',true,true);\n$properties = include $sources['data'].'properties/properties.doodles.php';\n$snippets[1]->setProperties($properties);\nunset($properties);\n\nreturn $snippets;\n```\n\n----------------------------------------\n\nTITLE: Initializing Last Post Array in PHP\nDESCRIPTION: This PHP snippet creates an associative array with information about the last forum post in a board. It utilizes placeholders like 'createdon', 'user', and 'author_link', dependent on preset configurations such as 'discuss.date_format'. The snippet may conditionally format links based on user profile permissions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/home.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n Array('createdon' => strftime($modx->getOption('discuss.date_format'),strtotime($board['last_post_createdon'])),\n 'user' => $board['last_post_author'],\n 'username' => $username,\n 'thread' => $board['last_post_thread'],\n 'id' => $board['last_post_id'],\n 'url' => $board['last_post_url'],\n 'author_link' => $canViewProfiles ? '<a href=\"'.$discuss->request->makeUrl('u/'.$board['last_post_username']).'\">'.$username.'</a>' : $username,\n );\n```\n\n----------------------------------------\n\nTITLE: Validating Snippet Description Plugin in PHP\nDESCRIPTION: Plugin that checks if the description field is filled before saving a snippet. Shows an error message if the description is empty.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforesnipformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeSnipFormSave':\n        if (!$snippet->get('description')){\n            $modx->event->output(\"You haven't forgotten your head at home, but you forgot about the description! =)\");\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable eAccelerator via php.ini\nDESCRIPTION: This snippet shows how to disable eAccelerator within the php.ini configuration file. Disabling eAccelerator can resolve compatibility issues during MODX installation or runtime.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\neaccelerator.enable = 0;\neaccelerator.optimizer = 0;\neaccelerator.debug = 0;\n```\n\n----------------------------------------\n\nTITLE: Loading xPDO Package and Retrieving Data in PHP\nDESCRIPTION: This snippet demonstrates how to load a custom xPDO package in MODX Revolution and retrieve data using the `addPackage` and `getCollection` methods.  It includes error handling and iterates through the retrieved collection to display the 'itemname' for each item.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif(!$modx->addPackage('mypackage','/full/path/to/core/components/mypackage/model/','mp_')) {\n    return 'При добавлении вашего пакета возникла проблема! Проверьте журналы для получения дополнительной информации!';\n}\n$my_items = $modx->getCollection('Items');\n$output = '';\nif ($my_items) {\n    foreach ($my_items as $item) {\n        $output .= $item->get('itemname') . '<br/>';\n    }\n}\nelse {\n    return 'Ничего не найдено.';\n}\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Running Advanced MODX Upgrade via Command Line\nDESCRIPTION: Command to perform an advanced upgrade of MODX via the PHP command line. This should be executed from the MODX setup directory after configuring the advanced upgrade XML file with all attributes that can be changed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/cli.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nphp ./index.php --installmode=upgrade-advanced\n```\n\n----------------------------------------\n\nTITLE: Merging the newest commits to the branch\nDESCRIPTION: This snippet shows how to merge the newest commits from the origin branch to your current branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"git merge --ff-only origin/2.x\"\n```\n\n----------------------------------------\n\nTITLE: jQuery Library Integration URL\nDESCRIPTION: External URL reference for loading jQuery library from Google CDN\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/index.md#2025-04-17_snippet_3\n\nLANGUAGE: markup\nCODE:\n```\nhttps://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\n```\n\n----------------------------------------\n\nTITLE: Referencing Core Connector in MODX (PHP)\nDESCRIPTION: This snippet shows the file path for the core connector in MODX, which is used to route AJAX requests in the manager to core processors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/connectors.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nconnectors/index.php\n```\n\n----------------------------------------\n\nTITLE: Formatting Prices in MoneyBird\nDESCRIPTION: This output filter snippet formats monetary values according to PHP's number format functionalities, ensuring prices are displayed in a user-friendly manner in the MODX system linked with MoneyBird.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// MoneyBird.NrFormat snippet to format prices\nfunction moneybird_nrformat($number) {\n    return number_format($number, 2, '.', ',');\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Multiple Element Selection and Removal\nDESCRIPTION: Demonstrates using Ext.select() to select multiple elements by class name and remove them using the each() iterator\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/4.-ext-js-tutorial-manipulating-nodes.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nExt.onReady(function() {\n    Ext.select('.myclass').each(function(el){\n        el.remove();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing descField Property with Custom Templates in BreadCrumb\nDESCRIPTION: Illustrates how to replace the descField property from Breadcrumbs by using custom template chunks in BreadCrumb that can access alternative fields.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n[[Breadcrumbs? &descField=`longtitle`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n[[BreadCrumb? &linkCrumbTpl=`myLinkCrumbTpl` &currentCrumbTpl=`myCurrentCrumbTpl`]]\n```\n\nLANGUAGE: html\nCODE:\n```\n<li><a href=\"[[+link]]\" title=\"[[+longtitle]]\">[[+pagetitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Testing PDOResources with Inline Templating in MODX - PHP\nDESCRIPTION: This code snippet uses the `pdoResources` snippet in MODX to fetch resources starting from the root parent (0) and displays their ids, titles, and creation dates. The output is limited to 1000 resources, sorted by id in ascending order with logging enabled. It uses inline templating with placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoResources?\n    &parents=`0`\n    &tpl=`@INLINE <p>{{+id}}. {{+longtitle:default=`{{+pagetitle}}`}} {{+createdon:dateago}}</p>`\n    &limit=`1000`\n    &sortby=`id`\n    &sortdir=`asc`\n    &showLog=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining the Search Method in JavaScript\nDESCRIPTION: This JavaScript code extends the `Doodles.grid.Doodles` class with a `search` method.  The method retrieves the grid's store, adds a 'query' parameter to the baseParams using the textfield value, resets the grid's pagination to the first page, and refreshes the grid. This triggers a new request to the server with the search query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nExt.extend(Doodles.grid.Doodles,MODx.grid.Grid,{\n    search: function(tf,nv,ov) {\n        var s = this.getStore();\n        s.baseParams.query = tf.getValue();\n        this.getBottomToolbar().changePage(1);\n        this.refresh();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Doctrine Database Models\nDESCRIPTION: Simple example showing how Doctrine generates models from database schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/generating-the-model/reverse-engineer.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Sample Doctrine code:\nDoctrine_Core::generateModelsFromDb();\n```\n\n----------------------------------------\n\nTITLE: modX::reloadConfig method syntax in PHP\nDESCRIPTION: The syntax definition for the reloadConfig method in the modX class. This method returns an array of configuration settings after reloading them from the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.reloadconfig.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\narray reloadConfig ()\n```\n\n----------------------------------------\n\nTITLE: Basic isNew Method Syntax in PHP\nDESCRIPTION: Shows the basic syntax for the isNew() method which returns a boolean indicating if the object has been persisted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/state-accessors/isnew.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean isNew ()\n```\n\n----------------------------------------\n\nTITLE: Disabling sekFancyBox Helpers with PHP\nDESCRIPTION: Example of disabling the title and overlay helpers by setting their values to null in a JSON string. This allows selective disabling of sekFancyBox helper components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n&helpers=`{\n\"title\":\"null\",\n\"overlay\":\"null\"\n}`\n```\n\n----------------------------------------\n\nTITLE: Nested fastField Usage for Parent Resource in MODX\nDESCRIPTION: Shows how to use fastField to retrieve the introtext of a parent resource, with a fallback to the description field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[#[[*parent]].introtext:default=`[[#[[*parent]].description]]`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Setting Metadata\nDESCRIPTION: Demonstrates how to access all metadata for a system setting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$Setting = $modx->getObject('modSystemSetting', 'site_name');\nprint_r( $Setting->toArray() );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating xPDOManager Class Reference\nDESCRIPTION: Core class used for database manipulation in MODX, providing methods for creating and removing database containers and object containers (tables). This class is essential for database management operations within the MODX framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOManager\n```\n\n----------------------------------------\n\nTITLE: Creating MODX Lexicon Strings\nDESCRIPTION: PHP file containing lexicon string definitions for the Doodles extra. Defines translations and messages used throughout the custom manager page interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$_lang['doodle'] = 'Doodle';\n$_lang['doodles'] = 'Doodles';\n$_lang['doodles.desc'] = 'Manage your doodles here.';\n$_lang['doodles.description'] = 'Description';\n$_lang['doodles.doodle_err_ae'] = 'A doodle with that name already exists.';\n$_lang['doodles.doodle_err_nf'] = 'Doodle not found.';\n$_lang['doodles.doodle_err_ns'] = 'Doodle not specified.';\n$_lang['doodles.doodle_err_ns_name'] = 'Please specify a name for the doodle.';\n$_lang['doodles.doodle_err_remove'] = 'An error occurred while trying to remove the doodle.';\n$_lang['doodles.doodle_err_save'] = 'An error occurred while trying to save the doodle.';\n$_lang['doodles.doodle_create'] = 'Create New Doodle';\n$_lang['doodles.doodle_remove'] = 'Remove Doodle';\n$_lang['doodles.doodle_remove_confirm'] = 'Are you sure you want to remove this doodle?';\n$_lang['doodles.doodle_update'] = 'Update Doodle';\n$_lang['doodles.downloads'] = 'Downloads';\n$_lang['doodles.location'] = 'Location';\n$_lang['doodles.management'] = 'Doodles Management';\n$_lang['doodles.management_desc'] = 'Manage your doodles here. You can edit them by either double-clicking on the grid or right-clicking on the respective row.';\n$_lang['doodles.name'] = 'Name';\n$_lang['doodles.search...'] = 'Search...';\n$_lang['doodles.top_downloaded'] = 'Top Downloaded Doodles';\n```\n\n----------------------------------------\n\nTITLE: jQuery Tabs with Wayfinder for Dynamic Navigation\nDESCRIPTION: This snippet demonstrates the integration of jQuery tabs with the Wayfinder snippet to dynamically generate tab navigation based on MODX's site structure. It leverages Wayfinder's capabilities to create menu structures based on specified parameters such as `startId`, `level`, and `rowTpl`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\\\"tabs\\\">\n  <ul>\n    [[Wayfinder? &startId=`123` &level=`1` &rowTpl=`myRowTpl`]]\n  </ul>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Uncached If Snippet Call in MODX\nDESCRIPTION: The uncached syntax for calling the If snippet, used when the subject can be modified before the resource cache gets cleared.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/if/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!If]]\n```\n\n----------------------------------------\n\nTITLE: Displaying Evolution to Revolution Extras Comparison Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table comparing MODX Evolution extras to their MODX Revolution equivalents. It lists popular extras and their replacements in the new system.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Evolution   | Revolution                                                                                                                                                                        |\n| ----------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Ditto       | [getResources](/extras/getresources \"getResources\"), [getPage](/extras/getpage \"getPage\"), [tagLister](/extras/taglister \"tagLister\"), [Archivist](/extras/archivist \"Archivist\") |\n| Jot         | [Quip](/extras/quip \"Quip\")                                                                                                                                                       |\n| SiteMap     | [GoogleSiteMap](/extras/googlesitemap \"GoogleSiteMap\")                                                                                                                            |\n| MaxiGallery | [Gallery](/extras/gallery \"Gallery\")                                                                                                                                              |\n| eForm       | [FormIt](/extras/formit \"FormIt\")                                                                                                                                                 |\n| Wayfinder   | [Wayfinder](/extras/wayfinder \"Wayfinder\")                                                                                                                                        |\n| DocManager  | [Batcher](/extras/batcher \"Batcher\")                                                                                                                                              |\n| AjaxSearch  | [SimpleSearch](/extras/simplesearch \"SimpleSearch\")                                                                                                                               |\n| WebLogin    | [Login](/extras/login \"Login\")                                                                                                                                                    |\n```\n\n----------------------------------------\n\nTITLE: Setting Default Resource Values in MODX OnDocFormRender Event (PHP)\nDESCRIPTION: This code snippet demonstrates how to use the OnDocFormRender event in MODX to set default values for resource fields such as pagetitle, description, and content when a new resource is being created. It checks if the mode is 'new' and then uses the $resource object to set the default values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/ondocformrender.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormRender':\n        if ($mode == modSystemEvent::MODE_NEW) {\n            //устанавливаем значения по умолчанию\n            $resource->set('pagetitle', 'Заголовок');\n            $resource->set('description', 'Описание');\n            $resource->set('content', 'Контент');\n        }\n        break;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Tail Apache Error Log in Real Time\nDESCRIPTION: This shell command uses `tail` with the `-f` flag to continuously monitor the Apache error log file. This allows real-time observation of errors generated while interacting with the MODX manager, which aids in identifying ModSecurity-related issues. The error log path may need to be adjusted.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ntail -f /usr/local/apache/logs/error_log\n```\n\n----------------------------------------\n\nTITLE: Implementing Processor for Newsletter Update with Uniqueness Check\nDESCRIPTION: This PHP snippet checks for the uniqueness of newsletter names during the update process. It ensures the name provided does not conflict with existing records by comparing against other newsletter IDs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ($this->modx->getCount($this->classKey, array('name' => $this->getProperty($tmp), 'id:!=' => $this->getProperty('id')))) {\n    $this->addFieldError($tmp, $this->modx->lexicon('sendex_newsletter_err_ae'));\n}\n\n```\n\n----------------------------------------\n\nTITLE: Galleriffic Wrapper Template\nDESCRIPTION: This PHP template structures the Galleriffic gallery layout, requiring MODX and Cliche components. It combines album navigation, slideshow, and additional gallery controls into cohesive HTML elements.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n <div id=\"gallery\" class=\"content\">\n    <div id=\"controls\" class=\"controls\"></div>\n    <div class=\"slideshow-container\">\n        <div id=\"loading\" class=\"loader\"></div>\n        <div id=\"slideshow\" class=\"slideshow\"></div>\n    </div>\n    <div id=\"caption\" class=\"caption-container\"></div>\n</div>\n<div id=\"thumbs\" class=\"navigation\">\n    <ul class=\"thumbs noscript\">\n        [[+items]]\n    </ul>\n</div>\n<div style=\"clear: both;\"></div>\n```\n\n----------------------------------------\n\nTITLE: Monitoring Manager Controller Loading with OnBeforeManagerPageInit in PHP\nDESCRIPTION: This plugin example demonstrates how to use the OnBeforeManagerPageInit event to log which controller is being loaded in the MODX manager. It prints the controller's action array to the error log.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforemanagerpageinit.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeManagerPageInit':\n        print_r($action);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Action File Error in MODX Manager\nDESCRIPTION: This snippet describes how to handle the 'Failed to find action file' error that may occur when logging into the MODX Manager after migrating a site. The error occurs because the old path is still cached. Clearing the site cache and manually refreshing the Manager page cache in the browser are recommended solutions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/moving-your-site.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nНе удалось найти файл действия в: /path/to/manager/controllers/default/welcome.php\n```\n\n----------------------------------------\n\nTITLE: View Profile Information\nDESCRIPTION: This snippet displays user profile information such as username, full name, and email. It uses the Profile snippet to retrieve the user data and placeholders to output the values. A link to the update profile page is included.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/user-profiles.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Profile]]\n\n<p>Username: [[+username]]</p>\n<p>Full Name: [[+fullname]]</p>\n<p>Email: [[+email]]</p>\n\n<p><a href=\"[[~10]]\">Edit</a></p>\n\n```\n\n----------------------------------------\n\nTITLE: Height Resizing with MODX Revolution - PHP\nDESCRIPTION: This snippet demonstrates how to resize an image to 75 pixels in height while allowing the width to adjust automatically to preserve the aspect ratio.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`r-0x75`]]\n```\n\n----------------------------------------\n\nTITLE: Defining OnCategoryBeforeSave Event Parameters in Markdown\nDESCRIPTION: This snippet defines the parameters available for the OnCategoryBeforeSave event in a markdown table format. It includes the parameter names and their descriptions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/oncategorybeforesave.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name     | Description                            |\n| -------- | -------------------------------------- |\n| id       | The ID of the modCategory object.      |\n| category | A reference to the modCategory object. |\n```\n\n----------------------------------------\n\nTITLE: Basic FormIt Hook Implementation\nDESCRIPTION: Shows how to add fiGenerateReport to FormIt hooks chain to generate a report before sending email.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.figeneratereport.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &hooks=`math,spam,fiGenerateReport,email,redirect`\n    ...]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Listing Row Template in MODX\nDESCRIPTION: This chunk named 'bdl.listings.list' defines how each listing item appears in a list. It creates a link to resource 14 (a search results page) with the listing ID passed as a URL parameter, allowing users to view the full details of a specific listing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdlistings.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <a href=\"[[~14? &listings=`[[+id]]`]]\" title=\"[[+title]]\">[[+title]]</a>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Fenom Variable Assignment\nDESCRIPTION: Shows how to assign snippet results to Fenom variables for later use in templates.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n{var $date = 'dateAgo' | snippet : ['input' => '2016-09-10 12:55:35']}\n\n...\n\nYour date: {$date}.\n```\n\n----------------------------------------\n\nTITLE: Localizing System Settings in PHP\nDESCRIPTION: Example showing how to define localized strings for system settings in a lexicon file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$_lang['setting_quip.emailsFrom'] = 'From Email';\n$_lang['setting_quip.emailsFrom_desc'] = 'The email address to send system emails from';\n```\n\n----------------------------------------\n\nTITLE: Creating Git Branch for Bug Fix\nDESCRIPTION: Command to create a new Git branch for fixing a specific issue, using the bug number in the branch name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_10\n\nLANGUAGE: plain\nCODE:\n```\ngit checkout -b bug-13309\n```\n\n----------------------------------------\n\nTITLE: Latest Comments Widget Implementation with QuipLatestComments\nDESCRIPTION: Snippet to display recent comments across blog posts using QuipLatestComments component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<ol>\n\t[[!QuipLatestComments? &tpl=`latestCommentTpl`]]\n</ol>\n```\n\n----------------------------------------\n\nTITLE: Multiple Recipients with Different Formats\nDESCRIPTION: Demonstrates multiple ways of adding recipients to an email using different array formats, supporting named and unnamed email addresses.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modswiftmailer/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$modx->getService('mail', 'mail.modSwiftMailer');\n\n$modx->mail->address('to', array(\n    'barneystinson@howimetyourmother.tld' => 'Barney Stison',\n    'tedmosby@howimetyourmother.tld' => 'Ted Mosby'\n));\n\n$modx->mail->address('to', array(\n    'barneystinson@howimetyourmother.tld',\n    'tedmosby@howimetyourmother.tld'\n), 'How I Met Your Mother cast');\n```\n\n----------------------------------------\n\nTITLE: Creating Lexicon for Snippet Properties in PHP\nDESCRIPTION: This snippet sets up lexicon entries for the MODX snippet properties, providing translations for sorting directions and template descriptions. The keys in this snippet match those referenced in the properties definition, facilitating internationalization of the properties through the lexicon. Dependencies include MODX framework for utilizing lexicons.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$_lang['prop_doodles.ascending'] = 'Ascending';\n$_lang['prop_doodles.descending'] = 'Descending';\n$_lang['prop_doodles.dir_desc'] = 'The direction to sort by.';\n$_lang['prop_doodles.sort_desc'] = 'The field to sort by.';\n$_lang['prop_doodles.tpl_desc'] = 'The chunk for displaying each row.';\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Manager Theme Header\nDESCRIPTION: This snippet shows how to update the header.tpl file in a custom manager theme to include the HTTP_MODAUTH token, resolving issues with configuration loading after upgrading to MODX 2.8.2 or later.  This change addresses enhanced security measures that prevent proper configuration loading in older custom themes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/2.8.2.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"{$_config.connectors_url}modx.config.js.php?action={$smarty.get.a|default|htmlspecialchars}{if $_ctx}&wctx={$_ctx}{/if}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Changelog File for MODX Component\nDESCRIPTION: A changelog file that documents the version history and changes made to the Doodles component. This file will be included in the transport package.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nChangelog file for Doodles component.\n\nDoodles 1.0\n====================================\n- Updating text, ready to build\n- Added default properties to Doodles snippet in build\n- Fixes to doodles class\n- Fixed bugs with build, updated readme\n- Initial commit\n```\n\n----------------------------------------\n\nTITLE: Loading Collection Instance in xPDOObject - PHP\nDESCRIPTION: Static method signature for loading an xPDOObject instance into a collection. The method handles caching, criteria matching, and object instantiation within MODX's xPDO framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/static-object-loaders/loadcollectioninstance.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstatic boolean _loadCollectionInstance(\n   xPDO &$xpdo,\n   array &$objCollection,\n   string $className,\n   mixed $criteria,\n   array $row,\n   boolean $fromCache,\n   boolean|integer $cacheFlag\n)\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for use_editor Documentation\nDESCRIPTION: YAML frontmatter defining metadata for the use_editor system setting documentation page, including title and legacy ID references.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/use_editor.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: \"use_editor\"\n_old_id: \"326\"\n_old_uri: \"2.x/administering-your-site/settings/system-settings/use_editor\"\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of bdTargets Snippet in MODX\nDESCRIPTION: This is the minimum way to call the bdTargets snippet, which results in listing targeted groups based on the data available. The call does not include any additional properties, so default values are used for formatting the output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdtargets.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!bdTargets]]\n```\n\n----------------------------------------\n\nTITLE: Defining XML Schema for Gallery\nDESCRIPTION: This XML schema defines the structure of the 'myGallery' table within the 'mygallery' package. It includes fields such as title, description, image, and other metadata related to gallery images. The schema also defines relationships with modResource and modUser objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.tutorials/create-a-basic-gallery-management-from-scratch-with-migxdb/index.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<model package=\\\"mygallery\\\" baseClass=\\\"xPDOObject\\\" platform=\\\"mysql\\\" defaultEngine=\\\"MyISAM\\\" version=\\\"1.1\\\">\\n    <object class=\\\"myGallery\\\" table=\\\"migx_gallery\\\" extends=\\\"xPDOSimpleObject\\\" >\\n        <field key=\\\"title\\\" dbtype=\\\"varchar\\\" precision=\\\"255\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" index=\\\"index\\\" />\\n        <field key=\\\"description\\\" dbtype=\\\"text\\\" phptype=\\\"string\\\" index=\\\"fulltext\\\" />\\n        <field key=\\\"resource_id\\\" dbtype=\\\"int\\\" precision=\\\"11\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"resource_ids\\\" dbtype=\\\"text\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n        <field key=\\\"image\\\" dbtype=\\\"varchar\\\" precision=\\\"255\\\" phptype=\\\"string\\\" null=\\\"false\\\" default=\\\"\\\" />\\n        <field key=\\\"extended\\\" dbtype=\\\"text\\\" phptype=\\\"json\\\" null=\\\"false\\\" default=\\\"\\\" />\\n        <field key=\\\"pos\\\" dbtype=\\\"int\\\" precision=\\\"10\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"published\\\" dbtype=\\\"tinyint\\\" precision=\\\"1\\\" attributes=\\\"unsigned\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"createdby\\\" dbtype=\\\"int\\\" precision=\\\"10\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"createdon\\\" dbtype=\\\"datetime\\\" phptype=\\\"datetime\\\" null=\\\"true\\\" />\\n        <field key=\\\"editedby\\\" dbtype=\\\"int\\\" precision=\\\"10\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"editedon\\\" dbtype=\\\"datetime\\\" phptype=\\\"datetime\\\" null=\\\"true\\\" />\\n        <field key=\\\"deleted\\\" dbtype=\\\"tinyint\\\" precision=\\\"1\\\" attributes=\\\"unsigned\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"deletedon\\\" dbtype=\\\"datetime\\\" phptype=\\\"datetime\\\" null=\\\"true\\\" />\\n        <field key=\\\"deletedby\\\" dbtype=\\\"int\\\" precision=\\\"10\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <field key=\\\"publishedon\\\" dbtype=\\\"datetime\\\" phptype=\\\"datetime\\\" null=\\\"true\\\" />\\n        <field key=\\\"publishedby\\\" dbtype=\\\"int\\\" precision=\\\"10\\\" phptype=\\\"integer\\\" null=\\\"false\\\" default=\\\"0\\\" />\\n        <aggregate alias=\\\"Resource\\\" class=\\\"modResource\\\" local=\\\"resource_id\\\" foreign=\\\"id\\\" cardinality=\\\"one\\\" owner=\\\"foreign\\\" />\\n        <aggregate alias=\\\"Creator\\\" class=\\\"modUser\\\" local=\\\"createdby\\\" foreign=\\\"id\\\" cardinality=\\\"one\\\" owner=\\\"foreign\\\" />\\n    </object>\\n</model>\"\n```\n\n----------------------------------------\n\nTITLE: Ext JS Prompt with Callback (Lambda)\nDESCRIPTION: This JavaScript code shows how to use Ext.MessageBox.prompt to display a prompt dialog box and capture user input. It uses a lambda function as the callback function to process the button click and the entered text, logging the results to the console.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-tutorials/1.-ext-js-tutorial-message-boxes.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\nExt.onReady(function() {\n    var title = 'Необходим ввод';\n    var msg = 'Пожалуйста, введите какой-нибудь текст.';\n    var myCallback = function(btn, text) {\n        console.info('Вы нажали ' + btn);\n        if (text) {\n            console.info('Вы ввели '+ text);\n        }\n    }\n    Ext.MessageBox.prompt(title,msg,myCallback);\n});\n</script>\n\"\n```\n\n----------------------------------------\n\nTITLE: Git-based Discuss Theme Initialization in PHP\nDESCRIPTION: This series of PHP commands initializes a Discuss theme using a git-powered workflow. It involves cloning a Discuss repository, setting up a remote upstream, and creating a theme-specific branch for modifications. Dependencies include Git and an existing Discuss repository on GitHub. Key parameters involve the Git repository URL, branch names, and a suitable MODX setup for integration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.creating-a-discuss-theme.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngit clone git@github.com:Your_Username/Discuss.git\ngit remote add upstream https://github.com/modxcms/Discuss.git\n```\n\nLANGUAGE: php\nCODE:\n```\ncd Discuss\ngit checkout release-1.1\n```\n\nLANGUAGE: php\nCODE:\n```\ngit checkout -b theme-name_of_theme\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefine('MODX_CORE_PATH', '/Applications/MAMP/htdocs/modx/core/');\ndefine('MODX_CONFIG_KEY', 'config');\n```\n\n----------------------------------------\n\nTITLE: HTML Base Tag Configuration in MODX Templates\nDESCRIPTION: This code snippet shows the HTML base tag used within MODX templates to ensure correct URL resolution for friendly URLs. The `[[!++site_url]]` tag dynamically inserts the site's base URL, which is crucial for the proper functioning of relative links and resources on the website. It should be placed inside the `<head>` section of the template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/friendly-urls.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n\"<base href=\\\"[[!++site_url]]\\\" />\"\n```\n\n----------------------------------------\n\nTITLE: Defining Create Doodle Window in JavaScript\nDESCRIPTION: This code defines a window for creating a new Doodle. It sets up the form fields and configuration for the create operation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nDoodles.window.CreateDoodle = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        title: _('doodles.doodle_create')\n        ,url: Doodles.config.connectorUrl\n        ,baseParams: {\n            action: 'mgr/doodle/create'\n        }\n        ,fields: [{\n            xtype: 'textfield'\n            ,fieldLabel: _('doodles.name')\n            ,name: 'name'\n            ,anchor: '100%'\n        },{\n            xtype: 'textarea'\n            ,fieldLabel: _('doodles.description')\n            ,name: 'description'\n            ,anchor: '100%'\n        }]\n    });\n    Doodles.window.CreateDoodle.superclass.constructor.call(this,config);\n};\nExt.extend(Doodles.window.CreateDoodle,MODx.Window);\nExt.reg('doodles-window-doodle-create',Doodles.window.CreateDoodle);\n```\n\n----------------------------------------\n\nTITLE: Extracting modExtra Files with Git Archive in PHP\nDESCRIPTION: This snippet exports files from the modExtra repository via git archive, targeting a specified directory. It's critical for setting up a duplicate repository outside the MODX root for independent component development, maintaining GIT integrity. The code requires a tar executable to handle the extraction process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modextra/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ngit archive HEAD | (cd /path/where/I/want/my/new/repo/ && tar -xvf -)\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleSearchForm Snippet Call\nDESCRIPTION: This code snippet demonstrates how to call the SimpleSearchForm snippet with a specified landing page resource. It integrates the SimpleSearch snippet for displaying search results. This example does not set the 'landing' parameter, allowing results to be shown on the same page. MODX platform documentation should be reviewed for more detailed setup instructions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.simplesearchform.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearchForm? &landing=`123`]]\n```\n\n----------------------------------------\n\nTITLE: Logging Password Changes with OnUserChangePassword Plugin in PHP\nDESCRIPTION: This plugin logs information to the Error Log whenever a user changes their password. It captures the username, old password, and new password. The plugin demonstrates how to hook into the OnUserChangePassword event in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onuserchangepassword.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnUserChangePassword':\n        $name = $user->get('username');\n        $modx->log(modX::LOG_LEVEL_ERROR, 'User '.$name.' changed the password from '.'from '.$newpassword.' to '.$oldpassword);\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Delegate Path Format\nDESCRIPTION: Demonstrates the format for specifying the delegate path setting for custom resource classes, which defines the location of create/update PHP files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/custom_resource_classes.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwikiresource_delegate_path\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Template for Fancybox Integration in MODX\nDESCRIPTION: This HTML template sets up the structure for a MODX page with Fancybox integration. It includes necessary JavaScript and CSS files, and uses the getImageList snippet to populate images.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/fancybox-images-with-seperate-placeholders-in-richtext-content.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>[[++site_name]] - [[*pagetitle]]</title>\n        <base href=\"[[++site_url]]\" />\n        <script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js\"></script>\n        <script type=\"text/javascript\" src=\"[[++base_url]]assets/js/fancybox/jquery.fancybox-1.3.4.pack.js\"></script>\n        <script type=\"text/javascript\" src=\"[[++base_url]]assets/js/fancybox/jquery.easing-1.4.pack.js\"></script>\n        <script type=\"text/javascript\">\n            $(document).ready(function() {\n                $(\"a.fancyimg\").fancybox({\n             'transitionIn' : 'elastic',\n             'transitionOut' : 'elastic',\n             'speedIn' : 600,\n                    'speedOut' : 200,\n                    'overlayShow' : false\n                });\n\n            });\n        </script>\n        <link rel=\"stylesheet\" href=\"[[++base_url]]assets/js/fancybox/jquery.fancybox-1.3.4.css\" type=\"text/css\" media=\"screen\" />\n    </head>\n    <body>\n        <div>\n            [[getImageList? &tpl=`fancybox`&tvname=`fancyboxTv`&toSeparatePlaceholders=`img`]]\n            <div id=\"content\">[[*content]]</div>\n            <div id=\"footer\">[^q^] queries, querytime [^qt^], phptime [^p^], totaltime [^t^], source [^s^]</div>\n        </div>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Attribute Preservation\nDESCRIPTION: Example showing how to preserve specific HTML attributes like alt and title when saving content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img\n    src=\"http://via.placeholder.com/450x150\"\n    alt=\"Default Alt\"\n    data-fred-name=\"header-image\"\n    data-fred-attrs=\"alt,title\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Parsing Schema and Measuring Execution Time in PHP\nDESCRIPTION: This PHP code parses the XML schema file using xPDOGenerator and outputs the total time taken for the script to execute. The generated PHP map and class files are then created in the specified model directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"$generator->parseSchema($sources['schema'].'storefinder.mysql.schema.xml', $sources['model']);\\n$mtime= microtime();\\n$mtime= explode(\\\" \\\", $mtime);\\n$mtime= $mtime[1] + $mtime[0];\\n$tend= $mtime;\\n$totalTime= ($tend - $tstart);\\n$totalTime= sprintf(\\\"%2.4f s\\\", $totalTime);\\necho \\\"\\\\nExecution time: {$totalTime}\\\\n\\\";\\nexit ();\"\n```\n\n----------------------------------------\n\nTITLE: Checking Apache Modules via Command Line\nDESCRIPTION: Command to check which modules are loaded in Apache, used to verify if ModSecurity is installed on your server.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\napachectl -t -D DUMP_MODULES\n```\n\n----------------------------------------\n\nTITLE: Modifying Chunk Properties Without Saving (PHP)\nDESCRIPTION: This plugin demonstrates how to modify various properties of a chunk, including its content, name, and description, without saving the changes immediately.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onchunkformrender.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnChunkFormRender':\n        //if we update the existing\n        if ($mode == modSystemEvent::MODE_UPD) {\n            //change the entire contents of the chunk\n            $chunk->setContent('<p>New content</p>');\n            $chunk->set('name','NewChunkName');\n            $chunk->set('description','Description');\n            //you can immediately save new content $chunk->save();\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning HandyMan from GitHub Repository\nDESCRIPTION: Command to clone the HandyMan repository from GitHub to your local host for development or custom installation. This is the first step when installing HandyMan from source rather than through the package manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/handyman/handyman.installation.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngit clone https://github.com/Mark-H/HandyMan.git\n```\n\n----------------------------------------\n\nTITLE: Extended Nginx Rewrite Rules for Discuss with SMF Compatibility\nDESCRIPTION: Comprehensive set of Nginx rewrite rules for Discuss, including compatibility with SMF (Simple Machines Forum) URLs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n# SMF rules\nrewrite ^/forums/index.php/topic,(.*).msg(.*).html$ /forums/?action=thread&thread=$1&i=1 last;\nrewrite ^/forums/index.php/topic,(.*).(.*).html$ /forums/?action=thread&thread=$1&i=1&start=$2 last;\n\nrewrite ^/forums/index.php\\?topic=(.*).(.*)$ /forums/?action=thread&thread=$1&i=1 last;\nif ($args ~* topic=(.*).(.*)){\n    set $args action=thread&thread=$1&i=1;\n}\nrewrite ^/forums/\\?topic=(.*).(.*)$ /forums/?action=thread&thread=$1&i=1 last;\n\nrewrite ^/forums/index.php/board,(.*).(.*).html$ /forums/?action=board&board=$1&i=1&start=$2 last;\nrewrite ^/forums/\\?board=(.*).(.*)$ /forums/?action=board&board=$1&i=1 last;\nrewrite ^/forums/thread/([0-9]+)/(.*)$ /forums/?action=thread&thread=$1 last;\nrewrite ^/forums/thread/([0-9]+)/(.*)$ /forums/?action=thread&thread=$1 last;\n\nrewrite ^/forums/u/(.+)$ /forums/?action=user&user=$1 last;\nrewrite ^/forums/board/([0-9]+)/(.*)$ /forums/?action=board&board=$1 last;\nrewrite ^/forums/board\\.xml/([0-9]+)/(.*)$ /forums/?action=board.xml&board=$1 last;\nrewrite ^/forums/category/([0-9]+)/(.*)$ /forums/?category=$1 last;\n\nrewrite ^/forums/index.php?action=unread$ /forums/thread/unread last;\nif ($args ~* action=unread){\n    set $args action=thread/unread;\n}\n\n# Discuss main FURL\nif (!-e $request_filename){\n    rewrite ^/forums/(.*)$ /forums/?action=$1 last;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Doodle Processor in PHP\nDESCRIPTION: This PHP class handles the creation of a new Doodle. It extends modObjectCreateProcessor and includes validation for the 'name' field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass DoodleCreateProcessor extends modObjectCreateProcessor {\n    public $classKey = 'Doodle';\n    public $languageTopics = array('doodles:default');\n    public $objectType = 'doodles.doodle';\n    public function beforeSave() {\n        $name = $this->getProperty('name');\n        if (empty($name)) {\n            $this->addFieldError('name',$this->modx->lexicon('doodles.doodle_err_ns_name'));\n        } else if ($this->doesAlreadyExist(array('name' => $name))) {\n            $this->addFieldError('name',$this->modx->lexicon('doodles.doodle_err_ae'));\n        }\n        return parent::beforeSave();\n    }\n}\nreturn 'DoodleCreateProcessor';\n```\n\n----------------------------------------\n\nTITLE: Upgrading MIGX from Versions Prior to 2.0\nDESCRIPTION: This snippet advises on the necessary steps taken to upgrade MIGX from earlier versions, emphasizing the need for a database backup and the upgrade process that introduces new fields required by the getImageList-snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfirst, make a backup of your db-tables, specially the modx_site_tmplvar_contentvalues - table, go to components -> migx -> setup-tab, go to tab upgrade. click 'upgrade'.\nThis will add a new autoincrementing field `MIGX_id` to all your MIGX-TV-items\nThe getImageList-snippet needs this field to work correctly.\n```\n\n----------------------------------------\n\nTITLE: Defining MODX Core Path in config.core.php\nDESCRIPTION: This PHP snippet defines the MODX_CORE_PATH and MODX_CONFIG_KEY constants, which are essential for MODX to locate its core files and configuration. It shows how to set the path to the MODX core directory and the configuration key. This configuration is crucial for the connector to properly initialize the MODX environment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefine('MODX_CORE_PATH', '/www/modx/core/');\ndefine('MODX_CONFIG_KEY', 'config');\n```\n\n----------------------------------------\n\nTITLE: Remote Package Provider URL\nDESCRIPTION: The official MODX.com package provider URL that comes packaged with MODX Revolution 2.0.0\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/extras.md#2025-04-17_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttp://rest.modx.com/extras/\n```\n\n----------------------------------------\n\nTITLE: Cloning Discuss Git Repository in Bash\nDESCRIPTION: Command to clone the forked Discuss repository to your local environment. Replace 'username' with your actual GitHub username.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation/installation-from-git.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:username/Discuss.git\n```\n\n----------------------------------------\n\nTITLE: Configuring CLI Cron Job for VirtuNewsletter Queue Processing in PHP\nDESCRIPTION: Command line interface (CLI) command for setting up a cron job to process the VirtuNewsletter queue. Requires absolute path to the web.php file and a valid MODX site_id.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nphp -q /home/xxx[absolute_path]xxx/public_html/assets/components/virtunewsletter/conn/web.php action=web/crons/queues/process site_id=modx12abc345678d90.12345678\n```\n\n----------------------------------------\n\nTITLE: Filtered Peoples Snippet for HR Department Users\nDESCRIPTION: Shows the first 10 users belonging to the HR Department user group.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[Peoples? &limit=`10` &usergroups=`HR Department`]]\n```\n\n----------------------------------------\n\nTITLE: Deactivating User Account on Login Attempt in PHP\nDESCRIPTION: Plugin that makes a specific user inactive when they attempt to log in to the manager. This demonstrates modifying user properties during the login process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforemanagerlogin.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeManagerLogin':\n        if ($username == 'manager'){\n            $user = $modx->getObject('modUser', array('username' => $username));\n            $user->set('active', '0');\n            $user->save();\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of getGooglePlusShares for Current Resource\nDESCRIPTION: Simple example showing how to call the getGooglePlusShares snippet to get the number of Google+ shares for the current page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getgoogleplusshares.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getGooglePlusShares]]\n```\n\n----------------------------------------\n\nTITLE: Querying Doodles Data in MODX Snippet\nDESCRIPTION: This code retrieves a collection of 'Doodle' objects from the database using `$modx->getCollection()`. It then counts the number of retrieved doodles and assigns it to the `$output` variable. Additionally, it demonstrates how to create a more complex query with sorting using `$modx->newQuery()` and `$c->sortby()`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$doodles = $modx->getCollection('Doodle');\n$output = count($doodles);\n```\n\nLANGUAGE: php\nCODE:\n```\n$c = $modx->newQuery('Doodle');\n$c->sortby($sort,$dir);\n$doodles = $modx->getCollection('Doodle',$c);\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Queries with TaggerGetResourcesWhere\nDESCRIPTION: The TaggerGetResourcesWhere snippet generates a SQL query for use in a WHERE condition within the getResources snippet. It filters resources based on tag aliases, allowing specification of groups, WHERE clauses, and comparison methods. It supports both AND and OR matching for multiple tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/tagger/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"[[!getResources?\n    &where=`[[!TaggerGetResourcesWhere?\n    &tags=`Books,Vehicles`\n    &where=`{\\\"isfolder\\\": 0}`]]`\n]]\"\n```\n\n----------------------------------------\n\nTITLE: HTML Code for Math Question in Form\nDESCRIPTION: This HTML snippet shows the implementation of the math question within an HTML form. It includes labels for the mathematical expression, error messages, input fields for the answer, and hidden fields to store the operands and operator.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.hooks/math.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<label>[[!+fi.op1]] [[!+fi.operator]] [[!+fi.op2]]?</label>\n[[!+fi.error.math]]\n<input type=\"text\" name=\"math\" value=\"[[!+fi.math]]\" />\n<input type=\"hidden\" name=\"op1\" value=\"[[!+fi.op1]]\" />\n<input type=\"hidden\" name=\"op2\" value=\"[[!+fi.op2]]\" />\n<input type=\"hidden\" name=\"operator\" value=\"[[!+fi.operator]]\" />\n```\n\n----------------------------------------\n\nTITLE: Preventing Deletion of Important Resources in MODX OnBeforeEmptyTrash Event\nDESCRIPTION: This plugin prevents the deletion of a specific resource (ID 26) when emptying the trash. It checks if the resource is in the deletion array and returns an error message if found, halting the deletion process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforeemptytrash.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeEmptyTrash':\n        // if there is a document with id = 26, then do not delete\n        if (in_array(\"26\", $ids)){\n            $response = array(\n            \t'success' => false,\n            \t'message' => 'HEY! There is a document that cannot be deleted!',\n            \t'data' => array(),\n            );\n            echo $modx->toJSON($response);\n            exit;\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Animation Example\nDESCRIPTION: Full HTML page implementation showing animation functionality with all required components\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/3.-ext-js-tutorial-animation.md#2025-04-17_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <title>My Ext JS Test Page : Animations</title>\n    <link  rel=\"stylesheet\" type=\"text/css\" href=\"manager/assets/ext3/resources/css/ext-all.css\" />\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/adapter/ext/ext-base.js\"></script>\n    <script type=\"text/javascript\" src=\"manager/assets/ext3/ext-all.js\"></script>\n    <script type=\"text/javascript\">\n\n        Ext.onReady(function() {\n            var myDiv1 = Ext.get('div1');\n            myDiv1.setHeight(200);\n            myDiv1.setSize(350,350, {duration: 1, easing:'bounceOut'});\n        });\n    </script>\n\n    <style type=\"text/css\">\n        .myDiv {\n            border: 1px solid #AAAAAA;\n            background: yellow;\n            width: 200px;\n            height: 35px;\n        }\n    </style>\n    <body>\n        <h1>Animations</h1>\n\n        <div id=\"div1\" class=\"myDiv\"></div>\n\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding the getContextMenuText Method\nDESCRIPTION: This snippet adds the `getContextMenuText` method to the custom resource class. This method returns the text that will be displayed in the context menu when right-clicking on a resource node in the left tree of the MODX manager.  It loads the lexicon for translations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function getContextMenuText() {\n $this->xpdo->lexicon->load('copyrightedresource:default');\n return array(\n   'text_create' => $this->xpdo->lexicon('copyrightedresource'),\n   'text_create_here' => $this->xpdo->lexicon('copyrightedresource_create_here'),\n );\n}\n\n```\n\n----------------------------------------\n\nTITLE: HTML Links for Template Switching in MODX\nDESCRIPTION: This snippet provides HTML anchor links to switch between mobile and full site templates in MODX. The links use the 'modxSiteTemplate' parameter in the URL to determine which template to display. This approach is optional but facilitates easy switching between views.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modmobile/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Moblie Link -->\n<a href=\"[[~[[*id]]]]?modxSiteTemplate=mobile\">Mobile</a>\n<!-- Back to Full site link -->\n<a href=\"[[~[[*id]]]]?modxSiteTemplate=full\">Full Site View</a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Moblie Link -->\n<a href=\"[[~[[*id]]]]?modxSiteTemplate=mobile\">Mobile</a>\n<!-- Back to Full site link -->\n<a href=\"[[~[[*id]]]]?modxSiteTemplate=full\">Full Site View</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX CMP Controller with PHP\nDESCRIPTION: Creates a custom manager controller for a MODX Extra, extending modExtraManagerController to handle initialization, permissions, and UI loading\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once dirname(dirname(__FILE__)) . '/model/doodles/doodles.class.php';\nclass DoodlesIndexManagerController extends modExtraManagerController {\n    /** @var Doodles $doodles */\n    public $doodles;\n    public function initialize() {\n        $this->doodles = new Doodles($this->modx);\n        $this->addCss($this->doodles->config['cssUrl'].'mgr.css');\n        $this->addJavascript($this->doodles->config['jsUrl'].'mgr/doodles.js');\n        $this->addHtml('<script type=\"text/javascript\">\n        Ext.onReady(function() {\n            Doodles.config = '.$this->modx->toJSON($this->doodles->config).';\n        });\n        </script>');\n        return parent::initialize();\n    }\n    // Additional methods for language, permissions, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a MODX Object in XML Schema\nDESCRIPTION: This XML snippet demonstrates how to define a MODX object within a schema file.  It specifies the object's class name (`sxNewsletter`), the database table it maps to (`sendex_newsletters`), and the parent class it extends (`xPDOSimpleObject`).  The table name is specified without the site prefix, as MODX automatically adds it.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/work-logic/index.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<object class=\\\"sxNewsletter\\\" table=\\\"sendex_newsletters\\\" extends=\\\"xPDOSimpleObject\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Copying Directory Tree with xPDOCacheManager\nDESCRIPTION: Shows the method signature for xPDOCacheManager::copyTree which accepts a source directory path, target directory path, and optional configuration array. Returns array or boolean indicating success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.copytree.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray|boolean copyTree (string $source, string $target, [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Direct Cache Partition Manipulation in xPDO\nDESCRIPTION: Demonstrates how to get a specific cache provider instance and use its methods directly for cache manipulation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/caching/index.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$myCache = $xpdo->cacheManager->getCacheProvider('myCache', array(\n    xPDO::OPT_CACHE_KEY => 'myCache',\n    xPDO::OPT_CACHE_HANDLER => 'cache.xPDOAPCCache',\n));\n\n$myCache->set('testdata', 'My cached data.');\n\necho $myCache->get('testdata');\n// outputs: My cached data.\n\n$myCache->delete('testdata');\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Assessment Wrapper Template - HTML\nDESCRIPTION: Wrapper chunk template for containing multiple assessment items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"exerplan-exercise-assessment-wrapper\">\n    [[+exerplan.assessment.items]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Syntax for @FILE Binding in MODX Template Variables\nDESCRIPTION: This snippet shows the basic syntax for using the @FILE binding in MODX. It allows binding a variable to a file, where file_path is the absolute path to the file from the server root or installation directory.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/file-binding.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@FILE file_path\n```\n\n----------------------------------------\n\nTITLE: Syntax for xPDOGenerator::writeSchema Method in PHP\nDESCRIPTION: The method signature for xPDOGenerator::writeSchema showing all parameters including optional ones with their default values. The method returns a boolean value indicating success or failure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdogenerator/xpdogenerator.writeschema.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean writeSchema (\n  string $schemaFile,\n  [string $package = ''],\n  [string $baseClass = ''],\n  [string $tablePrefix = ''],\n  [boolean $restrictPrefix = false])\n```\n\n----------------------------------------\n\nTITLE: Listing Tags with TaggerGetTags\nDESCRIPTION: The TaggerGetTags snippet is used to list tags associated with resources, groups, or all tags. It provides various properties to customize the output, including specifying resources, groups, chunk templates, separators, and limits.  It allows control over which tags are shown, including unused, deleted, and unpublished tags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/tagger/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"[[TaggerGetTags? &showUnused=`1`]]\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"[[TaggerGetTags? &groups=`1,3` &rowTpl=`tag_links_tpl`]]\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"[[!TaggerGetTags? &resources=`[[*id]]` &rowTpl=`tag_links_tpl`]]\"\n```\n\nLANGUAGE: php\nCODE:\n```\n\"[[!TaggerGetTags? &resources=`[[+id]]` &rowTpl=`tag_links_tpl`]]\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Editable Combo Boxes in ExtJS\nDESCRIPTION: Modifying ExtJS widgets to allow editing of template and snippet selection in newsletters grid\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{xtype: 'modx-combo-template', editable:true, fieldLabel: _('sendex_newsletter_template'), name: 'template', id: 'sendex-'+this.ident+'-template', anchor: '99%'}\n// ...\n{xtype: 'sendex-combo-snippet', editable:true, fieldLabel: _('sendex_newsletter_snippet'), name: 'snippet', id: 'sendex-'+this.ident+'-snippet', anchor: '99%'}\n```\n\n----------------------------------------\n\nTITLE: Invoking a Custom Event in MODX with PHP\nDESCRIPTION: This snippet shows how to invoke a custom event in MODX using the `modx->invokeEvent` method. The first argument is the event's name, and the second argument is an array of options that will be passed to any plugins listening for the event.  This allows you to pass data to the plugin.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->invokeEvent('OnMyCustomEvent', $options);\n```\n\n----------------------------------------\n\nTITLE: MODX PHP Resolver for Creating Database Tables\nDESCRIPTION: This resolver script creates the necessary database table for the Doodles component during installation. It adds the Doodles package to MODX and creates the object container for the Doodle class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($object->xpdo) {\n    switch ($options[xPDOTransport::PACKAGE_ACTION]) {\n        case xPDOTransport::ACTION_INSTALL:\n            $modx =& $object->xpdo;\n            $modelPath = $modx->getOption('doodles.core_path',null,$modx->getOption('core_path').'components/doodles/').'model/';\n            $modx->addPackage('doodles',$modelPath);\n\n            $manager = $modx->getManager();\n\n            $manager->createObjectContainer('Doodle');\n\n            break;\n        case xPDOTransport::ACTION_UPGRADE:\n            break;\n    }\n}\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Implementing Friendly URL Rewrite Rules for MODX in Lighttpd\nDESCRIPTION: URL rewrite configuration for Lighttpd that enables MODX Friendly URLs. This rule set excludes specific directories from rewriting and routes all other requests through index.php with appropriate query parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls/lighttpd.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n    url.rewrite-once = ( \"^/(assets|manager|core|connectors)(.*)$\" => \"/$1/$2\",\n           \"^/(?!index(?:-ajax)?\\.php)(.*)\\?(.*)$\" => \"/index.php?q=$1&$2\",\n           \"^/(?!index(?:-ajax)?\\.php)(.*)$\" => \"/index.php?q=$1\"\n     )\n```\n\n----------------------------------------\n\nTITLE: Checking Frontend Context in modX\nDESCRIPTION: Determines if the current user context is set to frontend, allowing for conditional logic based on user interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nmodX->isFrontend()\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for REST API\nDESCRIPTION: This NGINX configuration block directs requests to the /rest/ folder to the index.php file.  It uses try_files to first check if the request is for an existing file, otherwise it rewrites the request to index.php.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/developing-restful-api.md#2025-04-17_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nlocation /rest/ {\n   try_files $uri @modx_rest;\n}\nlocation @modx_rest {\n   rewrite ^/rest/(.*)$ /rest/index.php?_rest=$1&$args last;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Resources - PHP\nDESCRIPTION: This PHP snippet is used to fetch resources from a specific context in the MODX system. It can retrieve resources based on their parent ID and allows the specification of a context, making it flexible for various usages in a MODX template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-bottom-open.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section?\n    &parents=`1316`\n    &context=`extras`\n    &limit=`0`\n    &resources=`1316,[[*id]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating Context Menu Items in JavaScript for MODx Grid\nDESCRIPTION: This JavaScript snippet demonstrates how to define context menu items for a MODx grid by extending the grid class and adding a 'getMenu' method. The method returns an array of menu items, each containing a text property (from a lexicon key) and a handler function.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.grid.grid.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\ngetMenu: function() {\n    var m = [];\n    m.push({\n        text: _('my_lexicon_key')\n        ,handler: this.myHandler\n    });\n    return m;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Link Tag Definition\nDESCRIPTION: This snippet defines the format for link tags in MODX. Link tags are used to create URLs that point to specific resources within the MODX site. The tag consists of double square brackets, a tilde, and the resource ID.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/glossary.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"[[~ResourceId]]\"\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables with Chunks in MODX\nDESCRIPTION: Illustrates how to combine Chunks with Template Variables for more dynamic content generation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/chunks.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!$intro? &name=`[[*usersName]]` &messageCount=`[[*messageCount]]`]]\n```\n\n----------------------------------------\n\nTITLE: Access Control for Resource Editing with OnManagerPageBeforeRender\nDESCRIPTION: This PHP snippet implements an access control system using the OnManagerPageBeforeRender event. It checks if a user has permission to edit a specific resource by comparing the resource ID against a list of allowed IDs stored in the system settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onmanagerpagebeforerender.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnManagerPageBeforeRender':\n        switch($scriptProperties['controller']->config['controller']){\n            //Checking the rights to edit documents\n            case 'resource/update':\n                // Check for the presence of the allow_to_update setting (set in the user settings)\n                // In it we list which documents the user can edit\n                // If the setting is specified, but the document id is not in the listed allowed,\n                // Then return an access error\n                if($allow_to_update = $modx->getOption('allow_to_update')){\n                    if(!is_array($allow_to_update)){\n                        $allow_to_update = explode(\",\", $allow_to_update);\n                        $allow_to_update = array_map('trim', $allow_to_update);\n                    }\n                    if(in_array($scriptProperties['controller']->scriptProperties['id'], $allow_to_update)){\n                        $scriptProperties['controller']->failure('Access is denied');\n                        return;\n                    }\n                }\n                break;\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Direct Resource Link in MODX Revolution HTML\nDESCRIPTION: Shows how to create a direct link to a specific resource using MODX Revolution's link syntax. This example creates a link to the resource with ID 1.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"logo\" href=\"[[~1]]\">Home</a>\n```\n\n----------------------------------------\n\nTITLE: Apache Rewrite Rules for REST API\nDESCRIPTION: These Apache rewrite rules direct all requests to the /rest/ folder to the index.php file, enabling the REST service to handle the requests.  The rules ensure that existing directories and files are not overridden.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/developing-restful-api.md#2025-04-17_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-s\nRewriteRule ^(.*)$ rest/index.php?_rest=$1 [QSA,NC,L]\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteRule ^(.*)$ rest/index.php [QSA,NC,L]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validator for Registration in MODX\nDESCRIPTION: Defines how to implement a custom validator named 'equalTo' that checks if two values are equal during the registration process. The validator is invoked via the 'customValidators' property and uses an HTML input for user feedback on validation errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.register.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($scriptProperties['value'] !== $scriptProperties['param']) {\n    return 'Value not equal to: '.$scriptProperties['param'];\n}\nreturn true;\n?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Time-based Cache in MODX Snippet\nDESCRIPTION: Creates a snippet that caches a timestamp for 10 seconds using MODX's CacheManager. The snippet demonstrates basic cache implementation with a custom lifetime, showing how to set and retrieve cached data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/caching/lifetimes.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$cacheManager = $modx->getCacheManager();\n\n$lifetime = 10; // in seconds\n\nif (!$payload = $cacheManager->get('my_cache_key')) {\n    $payload = date('H:i:s');\n    $cacheManager->set('my_cache_key',$payload, $lifetime);\n}\n\nreturn $payload;\n```\n\n----------------------------------------\n\nTITLE: Accessing Hook Values in MODX PHP\nDESCRIPTION: Demonstrates how to access form fields within a MODX hook using the Hooks API. No specific dependencies are required other than MODX setup. 'fields' include form data, and 'postHooks' offer additional fields related to the action (e.g., modUser object).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$email = $hook->getValue('email');\n```\n\nLANGUAGE: php\nCODE:\n```\n$formFields = $hook->getValues();\n$email = $formFields['email'];\n```\n\n----------------------------------------\n\nTITLE: Defining Independent Custom Events with MODX eventsCalendar2 PHP\nDESCRIPTION: Shows how to use the eventsCalendar2 snippet to display custom events defined independently from any MODX resource. Events are specified directly using a JSON array, allowing full customization without resource association.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventscalendar2/eventscalendar2.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!eventsCalendar2\n  &events=`[{\"id\": \"1\",\"date\": \"2012-01-01 00:00:00\",\"pagetitle\": \"Test page\"},{\"id\": \"2\",\"date\": \"2012-01-02 12:05:00\",\"pagetitle\": \"Test page 2\"}]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Dropping Table Using removeObjectContainer\nDESCRIPTION: Example of dropping a table associated with a 'Person' object using the xPDO manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.removeobjectcontainer.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$manager = $xpdo->getManager();\n$manager->removeObjectContainer('Person');\n```\n\n----------------------------------------\n\nTITLE: Building MODX Revolution core\nDESCRIPTION: Steps to prepare configuration files and build the MODX Revolution core. Requires editing build configuration files with appropriate paths and database credentials.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncp build.config.sample.php build.config.php && cp build.properties.sample.php build.properties.php\nphp transport.core.php\n```\n\n----------------------------------------\n\nTITLE: Creating User ComboBox in ExtJS for MODX\nDESCRIPTION: Implements a combo box component for searching and selecting users from the MODX database. It includes configuration for display fields, templates, and interaction behaviors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nSendex.combo.User = function(config) {\n    config = config || {};\n    Ext.applyIf(config,{\n        name: 'user_id'\n        ,fieldLabel: _('sendex_subscriber')\n        ,hiddenName: config.name || 'user_id'\n        ,displayField: 'username'\n        ,valueField: 'id'\n        ,anchor: '99%'\n        ,fields: ['username','id','fullname']\n        // Количество результатов на странице\n        ,pageSize: 20\n        // Используем родной процессор MODX\n        ,url: MODx.config.connectors_url + 'security/user.php'\n        // Комбо можно редактировать, то есть - искать юзеров\n        ,editable: true\n        // Можно оставлять пустым\n        ,allowBlank: true\n        // Текст по умолчанию\n        ,emptyText: _('sendex_select_user')\n        // Данные для отправки процессору\n        ,baseParams: {\n            action: 'getlist'\n            ,combo: 1\n        }\n        // Шаблон оформления, похоже на Smarty\n        ,tpl: new Ext.XTemplate(''\n            +'<tpl for=\".\"><div class=\"sendex-list-item\">'\n            +'<span><small>({id})</small> <b>{username}</b> ({fullname})</span>'\n            +'</div></tpl>',{\n            compiled: true\n        })\n        // Какой элемент является селекторо. То есть, выбор будет при клике на этот элемент\n        ,itemSelector: 'div.sendex-list-item'\n    });\n    Sendex.combo.User.superclass.constructor.call(this,config);\n};\nExt.extend(Sendex.combo.User,MODx.combo.ComboBox);\nExt.reg('sendex-combo-user',Sendex.combo.User);\n```\n\n----------------------------------------\n\nTITLE: Defining handleRequest Method Syntax in PHP\nDESCRIPTION: Shows the method signature for the handleRequest function that returns a mixed value and takes no parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.handlerequest.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmixed handleRequest ()\n```\n\n----------------------------------------\n\nTITLE: Generating Breadcrumb Link HTML Template\nDESCRIPTION: Default template for rendering individual breadcrumb links, excluding the current page. Uses placeholders to dynamically populate link and page title.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/breadcrumb.linkcrumbtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<li><a href=\"[[+link]]\">[[+pagetitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Handling Checkboxes/Multi-Select in Custom Hook\nDESCRIPTION: This snippet demonstrates how to set an array field (e.g., checkboxes or multi-select) within a custom FormIt hook. To pass the array value correctly, it needs to be encoded as a JSON string using `json_encode` before being set using `$hook->setValue()`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.tutorials-and-examples/handling-selects,-checkboxes-and-radios.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"$hook->setValue('hobbies',json_encode(array('music','films','books')));\"\n```\n\n----------------------------------------\n\nTITLE: Latest Comments Template for MODX\nDESCRIPTION: Template chunk for formatting individual comment entries, including comment body, author name, and relative timestamp.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<li class=\"[[+cls]] [[+alt]]\">\n  <a href=\"[[+url]]\">[[+body:ellipsis=`[[+bodyLimit]]`]]</a>\n  <br /><span class=\"author\">by [[+name]]</span>\n  <br /><span class=\"ago\">[[+createdon:ago]]</span>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Authenticating Web User in MODX\nDESCRIPTION: This snippet demonstrates how to authenticate a user in the web context, replacing the deprecated `$_SESSION[\"webValidated\"]`. It utilizes the `modX->user->isAuthenticated('web')` method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\"`modX->user->isAuthenticated('web')`\"\n```\n\n----------------------------------------\n\nTITLE: GalleryItemPagination Navigation Example\nDESCRIPTION: A MODX template snippet demonstrating how to use GalleryItemPagination placeholders to create previous and next image navigation links with conditional rendering\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryitem/galleryitempagination.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!GalleryItemPagination? &album=`1`]]\n[[!If? &subject=`[[!+galitem.prev.id]]`&operator=`isnotempty` &then=`\n<a id=\"previmg\" href=\"[[++site_url]]?id=[[*id]]&galItem=[[!+galitem.prev.id]]&galAlbum=1&galTag=\">previous image</a>`]]\n[[!If? &subject=`[[!+galitem.next.id]]`&operator=`isnotempty` &then=`\n<a id=\"nextimg\" href=\"[[++site_url]]?id=[[*id]]&galItem=[[!+galitem.next.id]]&galAlbum=1&galTag=\">next image</a>`]]\n`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Create Controller in MODX\nDESCRIPTION: This code snippet defines a create controller class for a custom resource in MODX. It extends the `ResourceCreateManagerController` class and overrides the `getLanguageTopics` method to load custom language topics. The language topics are used to provide localized strings for the resource editing panel.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-resources/step-3-controllers.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass CopyrightedResourceCreateManagerController extends ResourceCreateManagerController {\n    public function getLanguageTopics() {\n        return array('resource','copyrightedresource:default');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flexibility Package Manually in MODX Revolution\nDESCRIPTION: Steps to manually install the Flexibility package in a MODX Revolution environment. This process involves downloading the package, uploading it to the correct directory, and installing it through the MODX package management system.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/flexibility/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Install MODX Revolution on your website.\n2. download the package and upload the \"flexibility-3.0.6-rc.transport.zip\" file to \"<your_modx_install>/core/packages/\" (You only need the transport.zip file, do not unzip it yourself)\n3. Install the \"Flexibility\" package: Go to \"System\" > \"Package Management\" > \"Add New Package\" > \"Search Locally for Packages\" > \"Yes\" (be sure to clear your cache > \"Site\" > \"Clear Cache\")\n```\n\n----------------------------------------\n\nTITLE: MODX Minify Integration Configuration - JSON\nDESCRIPTION: Extract template configuration for integrating MODX Minify package, including package details and vehicle configuration for modxMinifyGroup class with file relationships.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/cmp/theme_settings_and_resolvers.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"packages\": [\n        {\n            \"name\": \"modxminify\",\n            \"class\": \"modxMinify\"\n        }\n    ],\n    \"vehicles\": [\n        {\n            \"object\": {\n                \"class\": \"modxMinifyGroup\",\n                \"graph\": {\n                    \"File\": []\n                }\n            },\n            \"attributes\": {\n                \"preserve_keys\": false,\n                \"update_object\": true,\n                \"unique_key\": \"name\",\n                \"related_objects\": true,\n                \"related_object_attributes\": {\n                    \"File\": {\n                        \"preserve_keys\": false,\n                        \"update_object\": true,\n                        \"unique_key\": \"filename\"\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a REST Controller\nDESCRIPTION: This code snippet defines a REST controller extending modRestController. It sets the classKey property to 'ToDoItem', indicating the associated xPDOObject, and defines default sorting options. This allows interaction with ToDoItem objects via the API.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/developing-restful-api.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyControllerItems extends modRestController {\n   public $classKey = 'ToDoItem';\n   public $defaultSortField = 'sortorder';\n   public $defaultSortDirection = 'ASC';\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Empty Iterator Handling Example\nDESCRIPTION: Example showing proper handling of empty iterator results and common pitfalls when checking for results.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getiterator.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// a parent of -1 doesn't exist, this is intentional =)\n$resourceObjs = $xpdo->getIterator('modResource', array('parent' => -1));\nif ($resourceObjs) { // the same goes for if (!empty($resourceObjs)\n    // this will always run, as the $resourceObjs is never empty\n    // in the sense we would intuitively think of empty\n    // the $resourceObjs contains an empty xPDOIterator object, but it's not an empty array!\n}\n// if you really need to check if there's something to iterate, you could do either:\nif ($xpdo->getCount('modResource', array('parent' => -1))) {\n    // this will not run\n}\n// or\n$resourceObjs->rewind();\nif ($resourceObjs->valid()) {\n    // this will not run\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cliche Snippet in MODX\nDESCRIPTION: These PHP snippets demonstrate how to use the Cliche snippet to display image galleries, albums, or single images within MODX documents. No additional dependencies beyond MODX are required. Parameters like view, id, and others customize the displayed content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cliche/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[Cliche]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[Cliche?\n    &view=`albums`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[Cliche?\n    &id=`your_album_id`\n    &view=`album`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[Cliche?\n    &id=`your_image_id`\n    &view=`image`\n]]\n```\n\n----------------------------------------\n\nTITLE: Recording Multiple Hits for a Resource in MODX Revolution\nDESCRIPTION: This snippet records 20 hits for resource 4 by using the amount parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Hits? &punch=`4` &amount=`20`]]\n```\n\n----------------------------------------\n\nTITLE: Removing Validation Rules from xPDOObject\nDESCRIPTION: Method signature showing how to remove validation rules from an xPDO object. The method accepts optional parameters for field name and specific rules to remove.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/validation/removevalidationrules.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid removeValidationRules ([string $field = null], [array $rules = array()])\n```\n\n----------------------------------------\n\nTITLE: Basic Syntax of xPDO.getCollectionGraph Method in PHP\nDESCRIPTION: The method signature for xPDO::getCollectionGraph which retrieves a collection of xPDOObjects and related objects by specified criteria. Returns an array of objects or an empty array if none are found.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getcollectiongraph.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getCollectionGraph (string $className, array|str $graph, [xPDOCriteria|array|str|int $criteria = null], [bool|int $cacheFlag = true])\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Properties with fastField in MODX\nDESCRIPTION: Shows how to use fastField to retrieve a custom property from a specific resource, particularly useful for custom resource types like Articles.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fastfield/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[#1.properties.articles.articlesPerPage]]\n```\n\n----------------------------------------\n\nTITLE: Using substring Output Filter\nDESCRIPTION: Example of implementing the substring output filter to format text in a template, taking the first character separately.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<span>[[*introtext:substring=`0,1`]]</span>[[*introtext:substring=`1`]]\n```\n\n----------------------------------------\n\nTITLE: Appending Cachebuster to Asset URLs (HTML)\nDESCRIPTION: This snippet demonstrates how to use the Cachebuster plugin to ensure assets are loaded fresh from the server by appending a cache-busting parameter to the stylesheet URL. If the `cb.cachebust` System Setting is enabled, the asset will not be cached by the browser.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/cachebuster/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"[[++assets_url]]css/styles.css?nc=[[$smartcache]]\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Snippet Options with getOption in MODX\nDESCRIPTION: This snippet demonstrates how to use the $modx->getOption() method to retrieve a snippet parameter, providing a default value if the parameter is not set. This method checks the $scriptProperties array for 'propertyName' and returns 'default' if it's not found.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/properties-and-property-sets.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$modx->getOption('propertyName', $scriptProperties, 'default');\n```\n\n----------------------------------------\n\nTITLE: Initializing MODx Console Widget in JavaScript\nDESCRIPTION: Shows how to instantiate a new MODx.Console object with custom configuration including register, topic, and event listeners. The console provides terminal-like output functionality in the MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.console.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar topic = '/mytopic/';\nvar register = 'mgr';\nvar console = MODx.load({\n   xtype: 'modx-console'\n   ,register: register\n   ,topic: topic\n   ,show_filename: 0\n   ,listeners: {\n     'shutdown': {fn:function() {\n         /* do code here when you close the console */\n     },scope:this}\n   }\n});\nconsole.show(Ext.getBody());\n```\n\n----------------------------------------\n\nTITLE: Calling the getRTImages Snippet in MODX\nDESCRIPTION: Basic snippet call for getRTImages that extracts images from a Rich Text TV and formats them using a template chunk. The snippet retrieves image elements, extracts their src, alt, title, and data-index attributes as placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getrtimages/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getRTImages? &tv=`rich_text_TV` &tpl=`image_list_tpl`]]\n```\n\n----------------------------------------\n\nTITLE: Styling Toolbar Button with CSS\nDESCRIPTION: This snippet illustrates how to style a custom toolbar button using CSS, defining background images and hover effects with pseudo-elements for the button.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/developer/toolbar_plugins.md#2025-04-17_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.fred--my_plugin_button::before {\n    background-repeat: no-repeat;\n    background-position: center center;\n    background-image: url(\"data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' fill='%23fff'%3E%3Cpath d='M512 144v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48h88l12.3-32.9c7-18.7 24.9-31.1 44.9-31.1h125.5c20 0 37.9 12.4 44.9 31.1L376 96h88c26.5 0 48 21.5 48 48zM376 288c0-66.2-53.8-120-120-120s-120 53.8-120 120 53.8 120 120 120 120-53.8 120-120zm-32 0c0 48.5-39.5 88-88 88s-88-39.5-88-88 39.5-88 88-88 88 39.5 88 88z'/%3E%3C/svg%3E\");\n    background-color: #e46363;\n}\n.fred--my_plugin_button::before:hover {\n    background-color: #061323;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Placeholders with getYoutube in MODX Revolution\nDESCRIPTION: This example retrieves YouTube channel videos and assigns the output to a placeholder named 'videos', which is then conditionally displayed only if it contains content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getyoutube/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!getYoutube? &mode=`channel` &channel=`UCBR8-60-B28hp2BmDPdntcQ` &tpl=`videoTpl` &toPlaceholder=`videos`]]\n[[+videos:notempty=`[[+videos]]`]]\n```\n\n----------------------------------------\n\nTITLE: Looping Through Related Page IDs in MODX Snippet\nDESCRIPTION: The loop iterates over each related page ID, preparing to fetch resource objects. Further operations within the loop ensure resources are valid and published, forming part of the larger MODX snippet logic.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nforeach ($ids as $key => $value) {\n  // We will do something here in a minute\n}\n```\n\n----------------------------------------\n\nTITLE: Using album.manage in MODX\nDESCRIPTION: This snippet provides a way to manage albums in the sekUserGalleries. If the user is logged in and has the necessary permissions, they can utilize this snippet to display options for adding, editing, and removing albums. The example shows the basic usage of the snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.album.manage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!album.manage]]\n```\n\n----------------------------------------\n\nTITLE: Defining MODX Core Configuration (PHP)\nDESCRIPTION: This snippet defines the core path and configuration key for a MODX installation. It's typically stored in a separate configuration file and used by the connector to load the necessary MODX environment.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefine('MODX_CORE_PATH', '/www/modx/core/');\ndefine('MODX_CONFIG_KEY', 'config');\n```\n\n----------------------------------------\n\nTITLE: Executing PHP Build Script with MAMP on Mac OS X\nDESCRIPTION: Command to execute the MODX transport.core.php build script using the MAMP PHP executable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/Applications/MAMP/bin/php5/bin/php transport.core.php\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Payment Form using mhPayPal\nDESCRIPTION: This snippet call displays the default payment form for users to enter their donation amount. It ensures a minimum donation amount of 5 EUR/USD/GBP without custom modifications.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mhpaypal/mhpaypal.snippet-usage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"[[!mhPayPal]]\"\n```\n\n----------------------------------------\n\nTITLE: Database Schema Update for Queue Table\nDESCRIPTION: XML schema modification to add hash column and indexes for preventing duplicate letters in queue\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<field key=\"hash\" dbtype=\"char\" precision=\"40\" phptype=\"string\" null=\"true\" default=\"\" />\n\n<index alias=\"newsletter_id\" name=\"newsletter_id\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n    <column key=\"newsletter_id\" length=\"\" collation=\"A\" null=\"false\" />\n</index>\n```\n\n----------------------------------------\n\nTITLE: Loading jQuery from Google CDN\nDESCRIPTION: Example of registering jQuery from Google's CDN to be loaded in the page head.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientstartupscript.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupScript('//ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js\"');\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Content in MODX Panel\nDESCRIPTION: Defines the content structure for a tab in the MODX panel including description and styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   title: _('doodles')\n   ,defaults: { autoHeight: true }\n   ,items: [{\n      html: '<p>'+_('doodles.management_desc')+'</p>'\n      ,border: false\n      ,bodyCssClass: 'panel-desc'\n   }]\n}\n```\n\n----------------------------------------\n\nTITLE: Using requestCategory Snippet in MODX\nDESCRIPTION: This code snippet utilizes the requestCategory snippet to conditionally return a set of categories based on a Boolean condition. It is used in the BlogHomeTemplate to modify properties for content retrieval. The key parameter is the Boolean expression which determines the set of categories returned.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fx2themebase/fx2-included-extras.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n  [[!requestCategory:is=`1`:then=`@categories`]]\n```\n\n----------------------------------------\n\nTITLE: Creating Profile Modification Form Fields in HTML\nDESCRIPTION: Generates the HTML form fields necessary for users to update their Discuss profile, including fields for signature, display name, and online status.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<label for=\"signature\">Signature <span class=\"error\">[[!+up.error.signature:stripTags=`p,b,strong,i,a,ul,li`]]</span></label>\n<textarea name=\"signature:allowTags\" id=\"signature\">[[!+up.signature]]</textarea>\n\n<label for=\"use_display_name\">Use Display Name in Forums <span class=\"error\">[[!+up.error.use_display_name]]</span></label>\n<input type=\"hidden\" name=\"use_display_name\" id=\"use_display_name_hidden\" value=\"0\" />\n<input type=\"checkbox\" name=\"use_display_name\" id=\"use_display_name\" value=\"1\" [[!+up.use_display_name:FormItIsChecked=`1`]] />\n\n<label for=\"display_name\">Display Name <span class=\"error\">[[!+up.error.display_name]]</span></label>\n<input type=\"text\" name=\"display_name\" id=\"display_name\" value=\"[[+up.display_name]]\" />\n\n<label for=\"show_online\">Show Online Status <span class=\"error\">[[!+up.error.show_online]]</span> </label>\n<input type=\"hidden\" name=\"show_online\" id=\"show_online_hidden\" value=\"0\" />\n<input type=\"checkbox\" name=\"show_online\" id=\"show_online\" value=\"1\" [[!+up.show_online:FormItIsChecked=`1`]] />\n\n<label for=\"show_email\">Show Email in Forums <span class=\"error\">[[!+up.error.show_email]]</span></label>\n<input type=\"hidden\" name=\"show_email\" id=\"show_email_hidden\" value=\"0\" />\n<input type=\"checkbox\" name=\"show_email\" id=\"show_email\" value=\"1\" [[!+up.show_email:FormItIsChecked=`1`]] />\n```\n\n----------------------------------------\n\nTITLE: Displaying Slideshow with jgSlideshow Snippet in MODX\nDESCRIPTION: This code snippet demonstrates the basic usage of the jgSlideshow snippet within a MODX Revolution page. It renders a slideshow using images from a specified album. The `album_id` parameter is crucial, as it determines which album's images are displayed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/slideshow-manager/jgslideshow-snippet.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n\"<div id=\\\"slideShow\\\">\\n[[!jgSlideshow?\\n    &album_id=\\`1\\`\\n]]\\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Snippet Call with Property Set in MODX\nDESCRIPTION: This snippet demonstrates how to use property sets to simplify snippet calls by encapsulating multiple parameters. Instead of listing numerous parameters in the snippet tag, a property set named 'myPropertySet' is referenced, cleaning up the tag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/properties-and-property-sets.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[MySnippet? &prop1=`a` &prop2=`b` &prop3=`c` &prop4=`d` &prop5=`e` &prop6=`f`]]\n... станет ...\n[[MySnippet@myPropertySet]]\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Instance for Package Building in PHP\nDESCRIPTION: Includes and initializes the MODX class in the manager context. Sets appropriate log levels and targets based on whether the script is running in CLI mode or through the browser.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n\n$modx= new modX();\n$modx->initialize('mgr');\n$modx->setLogLevel(modX::LOG_LEVEL_INFO);\n$modx->setLogTarget(XPDO_CLI_MODE ? 'ECHO' : 'HTML');\n```\n\n----------------------------------------\n\nTITLE: Error Handling when Loading a Class with xPDO::loadClass in PHP\nDESCRIPTION: This example shows how to handle potential errors when loading a class. It attempts to load the 'myBox' class and terminates the script if loading fails. It then creates an instance of the class if loading is successful.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdo/xpdo.loadclass.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nif (!$xpdo->loadClass('myBox','/my/path/to/model/',true,true)) {\n    die('Could not load class myBox!');\n}\n$Box = new myBox();\n```\n\n----------------------------------------\n\nTITLE: Logging Login Attempts in OnBeforeManagerLogin Event in PHP\nDESCRIPTION: Example plugin that logs information about login attempts to the MODX error log, including username, password, and login attributes. This can be used for security monitoring.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforemanagerlogin.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeManagerLogin':\n        $modx->log(modX::LOG_LEVEL_ERROR, 'A user with a name tried to log in '.$username.' and password '.$password.print_r($attributes));\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing File Include Snippet in MODX\nDESCRIPTION: A simple PHP snippet that includes external files in MODX. The snippet checks if the file exists and returns its contents. This allows for including version-controlled files stored outside the database.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/static-resources-and-elements.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (!file_exists($file)) return '';\n$o = include $file;\nreturn $o;\n```\n\n----------------------------------------\n\nTITLE: Dynamic String Parsing with MODX Parser in PHP\nDESCRIPTION: Demonstrates creating a temporary chunk object to parse a string with placeholders using MODX's parsing engine, allowing for advanced placeholder and filter processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$tpl = 'Здравствуйте, меня зовут [[+name]]';\n\n$props = array('name' => 'Bob');\n\n$uniqid = uniqid();\n$chunk = $modx->newObject('modChunk', array('name' => \"{tmp}-{$uniqid}\"));\n$chunk->setCacheable(false);\n\n$output = $chunk->process($props, $tpl);\n```\n\n----------------------------------------\n\nTITLE: Adding Snippets to Category\nDESCRIPTION: This code retrieves snippets from a file, logs messages about the packaging process, and adds the snippets to the category object. This allows the snippets to be included within the category during package installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/* add snippets */\n$modx->log(modX::LOG_LEVEL_INFO,'Packaging in snippets...');\n$snippets = include $sources['data'].'transport.snippets.php';\nif (empty($snippets)) $modx->log(modX::LOG_LEVEL_ERROR,'Could not package in snippets.');\n$category->addMany($snippets);\n```\n\n----------------------------------------\n\nTITLE: Creating xPDOQuery with WHERE Condition in PHP\nDESCRIPTION: Example of creating a query for the Box object with a WHERE condition that filters for boxes with width greater than 10. The criteria is passed as an associative array with the field name and comparison operator as the key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdo/xpdo.newquery.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->newQuery('Box',array(\n   'width:>' => 10,\n));\n```\n\n----------------------------------------\n\nTITLE: Displaying latest comments with QuipRss\nDESCRIPTION: This code snippet demonstrates how to display the latest 5 comments using the QuipRss snippet in MODX Revolution.  It utilizes the default settings without any specified properties. The snippet will retrieve and format the five most recent comments from the entire site.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quiprss.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[!QuipRss]]\n\n```\n\n----------------------------------------\n\nTITLE: Replacing FastField Tags with Fenom in MODX - PHP\nDESCRIPTION: This snippet demonstrates how to replace FastField tags using Fenom syntax to fetch resource attributes. It involves defining a resource variable and checking its existence before accessing its properties for output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Parser.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n{var $resource = $_modx->getResource(15)}\n{if $resource?}\n    {$resource.pagetitle}\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Advanced Galleriffic Configuration\nDESCRIPTION: This snippet demonstrates customizing the Galleriffic plugin by hiding navigation and slideshow controls and automatically starting the slideshow. The snippet sets `renderNavControls`, `renderSSControls`, and `autoStart` parameters to configure the gallery's behavior.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.plugins/galleriffic.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery?\n   &toPlaceholder=`gallery`\n   &album=`My Photos`\n   &plugin=`galleriffic`\n   &renderNavControls=`0`\n   &renderSSControls=`0`\n   &autoStart=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Example: Removing Session Variables for 'sports' Context in MODX (PHP)\nDESCRIPTION: This example demonstrates how to use the removeSessionContextVars method to remove all session variables for a user in the 'sports' context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.removesessioncontextvars.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->removeSessionContextVars('sports');\n```\n\n----------------------------------------\n\nTITLE: Saving New Related Objects with addOne in xPDO PHP\nDESCRIPTION: This snippet shows how to create a new Owner object, set its properties, and associate it with an existing Car object before saving both objects using the addOne method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/related-objects.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$car = $xpdo->getObject('Car',324);\n\n$owner = $xpdo->newObject('Owner');\n$owner->set('name','John');\n$owner->set('email','john@doe.com');\n\n$car->addOne($owner);\n$car->save();\n```\n\n----------------------------------------\n\nTITLE: Output Modifier with Tag Properties\nDESCRIPTION: This code demonstrates how to specify properties for a MODX tag when using an output modifier. The properties are defined after the modifier and are passed to the snippet or element being called.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n[[!getResources:default=`Sorry - nothing matched your search.`?\n    &tplFirst=`blogTpl`\n    &parents=`2,3,4,8`\n    &tvFilters=`blog_tags==%[[!tag:htmlent]]%`\n    &includeTVs=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Testing PDO Database Connection in PHP\nDESCRIPTION: This PHP snippet demonstrates how to test a PDO database connection. It's used to verify if PDO is configured correctly when encountering PDO-related errors during MODX installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* Connect to an ODBC database using driver invocation */\n$dsn = 'mysql:dbname=testdb;host=localhost';\n$user = 'dbuser';\n$password = 'dbpass';\n\ntry {\n  $dbh = new PDO($dsn, $user, $password);\n} catch (PDOException $e) {\n  echo 'Connection failed: ' . $e->getMessage();\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Build Script with Timer in PHP\nDESCRIPTION: Sets up the initial build script with PHPDoc comments and starts a timer to track execution time. Also sets time limit to zero to prevent script timeout.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Quip скрипт сборки\n *\n * @package quip\n * @subpackage build\n */\n$mtime = microtime();\n$mtime = explode(\" \", $mtime);\n$mtime = $mtime[1] + $mtime[0];\n$tstart = $mtime;\nset_time_limit(0); /* гарантирует, что наш скрипт не завершится  */\n```\n\n----------------------------------------\n\nTITLE: Post-Save Operations and Cache Management\nDESCRIPTION: Handles post-save events, logging, cache clearing, and success response.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-3.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// invoke OnChunkFormSave event\n$modx->invokeEvent('OnChunkFormSave',array(\n   'mode' => modSystemEvent::MODE_NEW,\n   'id' => $chunk->get('id'),\n));\n\n// log manager action\n$modx->logManagerAction('chunk_create','modChunk',$chunk->get('id'));\n\n$cacheManager= $modx->getCacheManager();\n$cacheManager->clearCache();\n\nreturn $modx->error->success('',$chunk->get(array('id', 'name', 'description', 'locked', 'category')));\n```\n\n----------------------------------------\n\nTITLE: Calling ObjectExplorer snippet in MODX Resource Content\nDESCRIPTION: This snippet shows how to call the ObjectExplorer snippet within a MODX Revolution resource.  It inserts the output of ObjectExplorer into the resource when viewed. It should be called uncached due to the execution time.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/objectexplorer/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[ObjectExplorer]]\n\n```\n\n----------------------------------------\n\nTITLE: Appending Resources with MODX PHP\nDESCRIPTION: This snippet utilizes MODX's getResources call to dynamically append resources to the head section of a webpage. It specifies parents, context, and resources as parameters to control the resource query. The parameters include &parents for specifying a parent ID, &context for identifying the context, and &resources for targeting specific resource IDs. The output is a list of resources that can be used within the head section. This setup assumes that the MODX extras context is configured.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-head-append.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section?\\n    &parents=`1316`\\n    &context=`extras`\\n    &limit=`0`\\n    &resources=`1316,[[*id]]`\\n]]\n```\n\n----------------------------------------\n\nTITLE: Counting Comments in Specific Thread using QuipCount in MODX\nDESCRIPTION: This example demonstrates retrieving the comment count for a thread named \"thread32\" using the QuipCount snippet.  The `&thread` property is passed in to specify which thread the comments should be counted from.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/quip.quipcount.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\n[[QuipCount? &thread=`thread32`]]\n\n```\n\n----------------------------------------\n\nTITLE: MODX Blog Home Page Template\nDESCRIPTION: Homepage template that displays blog posts from multiple sections with tag filtering and pagination support.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/creating-a-blog.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[!getResourcesTag?\n  &elementClass=`modSnippet`\n  &element=`getResources`\n  &tpl=`blogPost`\n  &parents=`34,35`\n  &limit=`5`\n  &includeContent=`1`\n  &includeTVs=`1`\n  &showHidden=`0`\n  &hideContainers=`1`\n  &cache=`0`\n  &pageVarKey=`page`\n]]\n[[!+page.nav:notempty=`\n<nav class=\"paging\" role=\"Blog\">\n  <ul class=\"pageList\">\n    [[!+page.nav]]\n  </ul>\n</nav>\n`]]\n```\n\n----------------------------------------\n\nTITLE: Custom Manager Page Navigation Pre-MODX 2.3\nDESCRIPTION: Examples showing how to navigate to custom manager pages using MODx.loadPage with action IDs before MODX 2.3, including namespace-specific and legacy approaches.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/menus/action-list.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.loadPage(MODx.action['mycomponent:update'], 'foo=bar&bar=foo');\n// Prior to Revo 2.2 you would need to use this, but risked collisions with core or other packages\nMODx.loadPage(MODx.action['update'], 'foo=bar&bar=foo');\n```\n\n----------------------------------------\n\nTITLE: Using getImageList Snippet for Displaying MIGX Images\nDESCRIPTION: PHP code snippet demonstrating how to use the getImageList snippet to display images from the MIGX TV on the front-end. It includes options for filtering published images and using a custom template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/use-resource-specific-mediasource-and-multifile-uploader.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[getImageList?\n  &tvname=`resourcealbum`\n  &tpl=`@CODE:<h3>[[+title]]</h3><img src=\"[[+image]]\" />`\n  &where=`{\"published\":\"1\"}`\n]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[getImageList?\n  &tvname=`resourcealbum`\n  &tpl=`imageTpl`\n  &where=`{\"published\":\"1\"}`\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining XML Model Header\nDESCRIPTION: This XML snippet defines the header for the storefinder model, specifying the package name, base class, platform, default engine, and custom phpdoc attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<model package=\\\"storefinder\\\" baseClass=\\\"xPDOObject\\\" platform=\\\"mysql\\\" defaultEngine=\\\"MyISAM\\\" phpdoc-package=\\\"storefinder\\\" phpdoc-subpackage=\\\"model\\\">\"\n```\n\n----------------------------------------\n\nTITLE: Setting xPDOObject Fields from JSON - PHP Method Signature\nDESCRIPTION: Method signature showing the fromJSON() parameters including the JSON source string, optional key prefix, flags for primary keys, raw values and adhoc values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/fromjson.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid fromJSON (\n   string $jsonSource,\n   [string $keyPrefix = ''],\n   [boolean $setPrimaryKeys = false],\n   [boolean $rawValues = false],\n   [boolean $adhocValues = false]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing User Information with Output Modifiers\nDESCRIPTION: This example demonstrates how to access user information directly from the `modx_user_attributes` table using the `userinfo` output modifier. It shows how to retrieve various user attributes such as internal key, username, full name, and email.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nUser Internal Key: [[!+modx.user.id:userinfo=`internalKey`]]<br />\nUser name: [[!+modx.user.id:userinfo=`username`]]<br />\nFull Name: [[!+modx.user.id:userinfo=`fullname`]]<br />\nRole:  [[!+modx.user.id:userinfo=`role`]]<br />\nE-mail: [[!+modx.user.id:userinfo=`email`]]<br />\nPhone: [[!+modx.user.id:userinfo=`phone`]]<br />\nMobile Phone: [[!+modx.user.id:userinfo=`mobilephone`]]<br />\nFax: [[!+modx.user.id:userinfo=`fax`]]<br />\nDate of birth: [[!+modx.user.id:userinfo=`dob`:date=`%Y-%m-%d`]]<br />\nGender: [[!+modx.user.id:userinfo=`gender`]]<br />\nCountry: [[+modx.user.id:userinfo=`country`]]<br />\nState: [[+modx.user.id:userinfo=`state`]]<br />\nZip Code: [[+modx.user.id:userinfo=`zip`]]<br />\nPhoto: [[+modx.user.id:userinfo=`photo`]]<br />\nComment: [[+modx.user.id:userinfo=`comment`]]<br />\nPassword: [[+modx.user.id:userinfo=`password`]]<br />\nCache Password: [[+modx.user.id:userinfo=`cachepwd`]]<br />\nLast Login: [[+modx.user.id:userinfo=`lastlogin`:date=`%Y-%m-%d`]]<br />\nThe Login:[[+modx.user.id:userinfo=`thislogin`:date=`%Y-%m-%d`]]<br />\nNumber of Logins: [[+modx.user.id:userinfo=`logincount`]]\n```\n\n----------------------------------------\n\nTITLE: MIGXdb Configuration Tutorial\nDESCRIPTION: This snippet points users to a tutorial for configuring their first MIGXdb setup, emphasizing step-by-step guidance from creating the database schema to managing it through a MIGXdb-TV.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migxdb/migxdb.configuration.md#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nsee [MIGXdb-Tutorials](extras/migxdb/migxdb.tutorials \"MIGXdb.Tutorials\")\n```\n\n----------------------------------------\n\nTITLE: Package Metadata Definition\nDESCRIPTION: Sets up package metadata including name, version and release information. Also initializes build script timing functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$tstart = explode(' ', microtime());\n$tstart = $tstart[1] + $tstart[0];\nset_time_limit(0);\n\n/* define package names */\ndefine('PKG_NAME','Doodles');\ndefine('PKG_NAME_LOWER','doodles');\ndefine('PKG_VERSION','1.0');\ndefine('PKG_RELEASE','beta4');\n```\n\n----------------------------------------\n\nTITLE: Loading Local JavaScript File\nDESCRIPTION: Example of registering a local JavaScript file from the assets directory to be loaded in the page head.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientstartupscript.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupScript('assets/js/onload.js');\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response (JSON)\nDESCRIPTION: This JSON snippet represents an example response when directly accessing the connector file without proper authorization or routing. It indicates an access denied error.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"success\": false,\n    \"message\": \"Access denied.\",\n    \"total\": 0,\n    \"data\": [],\n    \"object\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Class-based Dashboard Widget Implementation in PHP\nDESCRIPTION: Advanced example demonstrating how to create a class-based Dashboard Widget by extending modDashboardWidgetInterface. This approach allows for more structured code organization and unit testing capabilities.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/dashboards/widget-types/file.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass modDashboardWidgetHelloWorld extends modDashboardWidgetInterface {\n    public $version = '1.0';\n\n    public function render() {\n        $o = 'Hello, World! Version: '.$this->version;\n        return $o;\n    }\n}\nreturn 'modDashboardWidgetHelloWorld';\n```\n\n----------------------------------------\n\nTITLE: Constructing Complex SQL Query with xPDOQuery in PHP\nDESCRIPTION: Demonstrates creating a complex query with multiple conditions, joins, sorting, and filtering using xPDOQuery in MODX/xPDO\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->innerJoin('Owner','User');\n$query->where(array(\n    'Owner.name:LIKE' => '%a%',\n    'Box.width:>=' => 10,\n    'Box.height:!=' => 2,\n    'Box.color:IN' => array('red','green','blue'),\n));\n$query->sortby('Box.name','ASC');\n$query->sortby('Box.height','DESC');\n$query->limit(4);\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resources with getResources Snippet in MODX\nDESCRIPTION: A MODX snippet call that retrieves resources from a specific parent ID (315) within the 'revolution' context using the getResources snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/tv-visible.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`315` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: New Extension Packages Format in JSON\nDESCRIPTION: Demonstrates the new JSON format for the extension_packages setting in MODX Revolution 2.0.5. This format uses an array of objects, each containing a package name and its corresponding path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/2.0.5.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[{\"package_name\":{\"path\":\"package_path\"}},{\"another_package\":{\"path\":\"another_path\"}}]\n```\n\n----------------------------------------\n\nTITLE: Batch Adding Related Objects with addMany in xPDO PHP\nDESCRIPTION: This snippet retrieves multiple Wheel objects based on a condition and adds them to a Car object in a single operation using the addMany method, followed by saving the Car object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/related-objects.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$wheels = $xpdo->getCollection('Wheel',array(\n   'width' => 10,\n));\n\n$car->addMany($wheels);\n$car->save();\n```\n\n----------------------------------------\n\nTITLE: Basic modRest Usage in MODX\nDESCRIPTION: Basic example of how to initialize modRest service and send GET or POST requests. Shows how to process the response data from JSON or XML format into a PHP array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/services/modrest.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/* @var modRest $client */\n$client = $modx->getService('rest', 'rest.modRest');\n$response = $client->get('GET request');\n# or\n$response = $client->post('POST request');\n\n// Processing the received data in json or xml format and converting them into an array\n$array = $response->process();\n```\n\n----------------------------------------\n\nTITLE: Fetching Resources with getResources snippet in MODX\nDESCRIPTION: This code snippet demonstrates how to use the getResources snippet to retrieve resources within a specific parent ID and context in MODX Revolution. It retrieves resources from the parent with ID 133 in the 'revolution' context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/client-proofing/form-customization/rules/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`133` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Chunk Template for Rendering Opening Hours Row in PHP\nDESCRIPTION: This PHP chunk template is used to render each row of the opening hours table, handling the display of open and closed days.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/simple-opening-hours-table.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<tr>\n  <td>[[+day]]</td>\n  [[+from:notempty=`<td>[[+from]]</td><td>[[+until]]</td>`:default=`<td colspan=\"2\">Closed</td>`]]\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Customizing Current Crumb Template with Link in PHP for MODX\nDESCRIPTION: This snippet modifies the current crumb output to include a hyperlink. It utilizes the link placeholder to create an anchor tag around the pagetitle, making the current page title clickable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/breadcrumb.currentcrumbtpl.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<li><a href=\"[[+link]]\">[[+pagetitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Creating xPDOQuery with Method Signature in PHP\nDESCRIPTION: The method signature for xPDO::newQuery, which creates a new xPDOQuery for a specified xPDOObject class. It accepts a class name, optional criteria for filtering, and an optional cache flag.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdo/xpdo.newquery.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery newQuery (string $class, [mixed $criteria = null], [boolean|integer $cacheFlag = true])\n```\n\n----------------------------------------\n\nTITLE: jQuery Tabs using getField Snippet for Page Titles\nDESCRIPTION: This example combines jQuery tabs with the `getField` snippet to dynamically display page titles as tab labels.  It retrieves the `pagetitle` field for each specified resource ID and uses it to populate the tab's link text.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n\"<script type=\\\"text/javascript\\\">\n$(function() { $(\"#tabs\").tabs(); });\n</script>\n<div id=\\\"tabs\\\">\n  <ul>\n    <li><a href=\\\"[[~92]]\\\">[[getField? &id=`92` &field=`pagetitle`]]</a></li>\n    <li><a href=\\\"[[~546]]\\\">[[getField? &id=`546` &field=`pagetitle`]]</a></li>\n    <li><a href=\\\"[[~123]]\\\">[[getField? &id=`123` &field=`pagetitle`]]</a></li>\n  </ul>\n</div>\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Latest Resources with Content in MODX (PHP)\nDESCRIPTION: Outputs the 5 most recently published resources beneath resource ID 5, using the 'blogPost' chunk and including the full content of each resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[[!renderResources?\n    &parents=`5`\n    &limit=`5`\n    &tpl=`blogPost`\n    &includeContent=`1`\n]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Field Values in PHP using xPDOObject::get()\nDESCRIPTION: This example shows how to retrieve multiple field values at once by passing an array of field names to the get() method. The method returns an associative array with field names as keys.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/get.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$object->set('name_first','Charles');\n$object->set('name_last','Longbottom');\n$names = $object->get(array('name_first','name_last'));\necho $names['name_first'].' '.$names['name_last'];\n// produces \"Charles Longbottom\"\n```\n\n----------------------------------------\n\nTITLE: Fetching MODX Pages with getCollectionGraph Including Template Variables in PHP\nDESCRIPTION: Provides a method to retrieve MODX resources with associated template variables. Use of getCollectionGraph ensures related template variables are loaded with each resource page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/retrieving-objects/graphs.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$pages = $modx->getCollectionGraph('modResource', '{\"TemplateVarResources\":{}}', array('parent'=>12));\n\nforeach ($pages as $p) {\n    foreach ($p->TemplateVarResources as $tv) {\n        // Do stuff here with the TV\n        $tv_array = $tv->toArray();\n        $tv->get('value');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Gallery Thumbnail Display with Custom Chunk in PHP\nDESCRIPTION: This example shows how to use the Gallery snippet with a custom chunk for thumbnail display. It displays photos from the 'Trucks' album using a custom 'truckThumb' chunk for each thumbnail.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!Gallery?\n    &album=`Trucks`\n    &thumbTpl=`truckThumb`\n]]\n```\n\n----------------------------------------\n\nTITLE: Formatting Unpublish Date in MODX\nDESCRIPTION: This snippet shows how to format the `unpub_date` resource field using the `strtotime` and `date` output filters in MODX. It converts the timestamp representing the unpublish date to a human-readable date format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_8\n\nLANGUAGE: MODX\nCODE:\n```\n\"[[\\[\\*unpub_date\\]:strtotime:date=`%a %b %e, %Y`\\]]]\"\n```\n\n----------------------------------------\n\nTITLE: Width Resizing with Zero Height using MODX Revolution - PHP\nDESCRIPTION: This snippet shows how to specify an image resize operation defining only the width, allowing the height to adjust automatically based on the original image aspect ratio.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`r-150x0`]]\n```\n\n----------------------------------------\n\nTITLE: Chunk Tag Definition\nDESCRIPTION: This snippet defines the format for chunk tags in MODX.  Chunk tags are used to reference chunk elements within MODX templates or content. The tag consists of double square brackets enclosing double square brackets and the chunk name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/glossary.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"[[$ChunkName]]\"\n```\n\n----------------------------------------\n\nTITLE: Get Registered Client Scripts in PHP\nDESCRIPTION: This snippet demonstrates how to use the `getRegisteredClientScripts()` method to retrieve all registered client scripts (JavaScript and HTML blocks) within a modX environment. The returned scripts are stored in the `$scripts` variable.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getregisteredclientscripts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n``` php\n$scripts = $modx->getRegisteredClientScripts();\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Gallery with Galleriffic Plugin\nDESCRIPTION: This snippet demonstrates how to invoke the Gallery snippet in MODX and specify the 'galleriffic' plugin to render the gallery using Galleriffic's visual effects. It showcases the basic integration of the plugin by setting the `plugin` parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.plugins/galleriffic.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\n[[!Gallery? &plugin=`galleriffic`]]\n\n```\n\n----------------------------------------\n\nTITLE: Custom Field with Custom Type in MODX\nDESCRIPTION: This snippet illustrates how to create a custom field with a custom type, requiring specification of placeholders and option types for correct functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`customtype`\n    &name=`custom_field_type`\n    &_note=`Make sure you add this custom field to the &tpl chunk!`\n    &custom_placeholder=`custom_value`\n    &another_custom_placeholder=`And another custom value`\n    &options=`One||Two||Three`\n    &option_type=`radio`\n]]\n```\n\n----------------------------------------\n\nTITLE: Using AND Filters for Resource Queries in PHP\nDESCRIPTION: This code snippet illustrates how to create an AND filter condition using a comma (,) to ensure that all specified template variable conditions are met when filtering resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nmytv==somevalue,othertv==othervalue\n```\n\n----------------------------------------\n\nTITLE: MODX AjaxManager Compatible Resource Registration\nDESCRIPTION: Modern methods for registering CSS and JavaScript resources in MODX components that are compatible with AjaxManager. These methods should be used instead of the legacy registration methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/package-build.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->addCss()\n$this->addJavascript()\n$this->addLastJavascript()\n$this->addHtml()\n```\n\n----------------------------------------\n\nTITLE: Copying a File with xPDOCacheManager in PHP\nDESCRIPTION: This snippet demonstrates how to use the copyFile method of xPDOCacheManager to copy a file from one location to another in MODX. It shows the basic usage without any additional options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.copyfile.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->cacheManager->copyFile('/my/path/to/file.txt','/my/new/path/dir/');\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'gte' in MODX\nDESCRIPTION: Demonstrates the usage of 'gte' (greater than or equal to) modifier for conditional output. It checks if the number of books is greater than or equal to 5 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:gte=`5`:then=`Есть 5 книг или более 5 книг`:else=`Есть менее 5 книг`]]\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Values with PreHook in FormIt (PHP)\nDESCRIPTION: Demonstrates how to use a preHook to set custom field values before loading the form. This example sets 'name' and 'email' fields using setValue method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.hooks/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$hook->setValue('name','John Doe');\n$hook->setValue('email','john.doe@fake-emails.com');\nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Creating Confirmation Page Resource with virtuNewsletter Snippet\nDESCRIPTION: Simple resource content that uses the virtuNewsletter confirm snippet. This page handles both subscription confirmation and unsubscription requests based on URL parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/virtunewsletter/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!virtuNewsletter.confirm]]\n```\n\n----------------------------------------\n\nTITLE: Remove Session Context Variables in PHP\nDESCRIPTION: This snippet demonstrates how to use the `removeSessionContextVars` method of the `modUser` class to remove all session variables for a user within a specified context. It requires an existing `$user` object of type `modUser` and the `$context` string representing the context to remove the session variables from.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/core-model/moduser/moduser.removesessioncontextvars.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$user->removeSessionContextVars('sports');\n```\n\n----------------------------------------\n\nTITLE: Build Path Definitions\nDESCRIPTION: Defines the directory structure and file paths used during the build process. Sets up paths for components, assets, and build-related files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/* define build paths */\n$root = dirname(dirname(__FILE__)).'/';\n$sources = array(\n    'root' => $root,\n    'build' => $root . '_build/',\n    'data' => $root . '_build/data/',\n    'resolvers' => $root . '_build/resolvers/',\n    'chunks' => $root.'core/components/'.PKG_NAME_LOWER.'/chunks/',\n    'lexicon' => $root . 'core/components/'.PKG_NAME_LOWER.'/lexicon/',\n    'docs' => $root.'core/components/'.PKG_NAME_LOWER.'/docs/',\n    'elements' => $root.'core/components/'.PKG_NAME_LOWER.'/elements/',\n    'source_assets' => $root.'assets/components/'.PKG_NAME_LOWER,\n    'source_core' => $root.'core/components/'.PKG_NAME_LOWER,\n);\nunset($root);\n\n/* override with your own defines here (see build.config.sample.php) */\nrequire_once $sources['build'] . 'build.config.php';\nrequire_once MODX_CORE_PATH . 'model/modx/modx.class.php';\n```\n\n----------------------------------------\n\nTITLE: Form Field Definition Using a Local ComboBox\nDESCRIPTION: This code demonstrates how to integrate the Doodles.combo.Units ComboBox into a form field within a window.  It sets the xtype to 'doodle-combo-units', defines fieldLabel, name and hiddenName and sets anchor to '100%'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.combo.combobox.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n       {\n            xtype: 'doodle-combo-units'\n            ,fieldLabel: _('unit')\n            ,name: 'unit'\n            ,hiddenName: 'unit'\n            ,anchor: '100%'\n        }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resources in MODX\nDESCRIPTION: This PHP snippet uses the getResources extra for retrieving and displaying resources within a specified context and parent structure. It requires the existence of designated resource IDs and MODX context identifiers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-head-open.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section?\n    &parents=`1316`\n    &context=`extras`\n    &limit=`0`\n    &resources=`1316,[[*id]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Advanced Inline sekFancyBox Configuration in PHP\nDESCRIPTION: Extended configuration for an inline modal window with sekFancyBox, including title, custom width, and header options. This demonstrates more complex formatting possibilities.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &link=`modal`\n &linktext=`Text to display as link`\n &title=`displays under modal`\n &text=`Text that will display in the modal window.`\n &modalwidth=`600`\n &header=`Displays at top of modal window`\n]]\n```\n\n----------------------------------------\n\nTITLE: Display Specific User Group with PeopleGroup Snippet\nDESCRIPTION: Example of using the PeopleGroup snippet to display a specific user group ('HR Department') and output its users to a placeholder for flexible templating.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[PeopleGroup? &usergroup=`HR Department` &toPlaceholder=`users`]]\n\n<h2>[[+peoplegroups.name]] ([[+peoplegroups.userCount]] Users)</h2>\n\n[[+users]]\n```\n\n----------------------------------------\n\nTITLE: Formatting Published Date in MODX\nDESCRIPTION: This snippet demonstrates how to format the `publishedon` resource field using the `strtotime` and `date` output filters in MODX. It converts the timestamp to a human-readable date format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_7\n\nLANGUAGE: MODX\nCODE:\n```\n\"[[\\[\\*publishedon\\]:strtotime:date=`%a %b %e, %Y`\\]]\"\n```\n\n----------------------------------------\n\nTITLE: modX::getLoginUserName() Syntax - PHP\nDESCRIPTION: Presents the syntax for the modX::getLoginUserName() method. It accepts an optional context string as a parameter and returns a string representing the username. This method is used for retrieving the currently logged in username in the specified context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getloginusername.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n``` php\nstring getLoginUserName ([string $context = ''])\n```\n```\n\n----------------------------------------\n\nTITLE: Using getFieldName Method in PHP\nDESCRIPTION: This snippet demonstrates how to use the getFieldName method of an xPDOObject instance to retrieve a fully-qualified field name. It gets a Document object and prints the qualified name of the 'editedby' field.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getfieldname.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$document = $xpdo->getObject('Document',1);\necho $document->getFieldName('editedby');\n// prints `documents`.`editedby`\n```\n\n----------------------------------------\n\nTITLE: MODX Translation Documentation\nDESCRIPTION: Markdown documentation describing the process for translating MODX into different languages using CrowdIn platform.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/translate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Translate MODX\nsortorder: 5\n---\n\nIf you speak any languages other than English, you can help translate MODX into your language.\n\n[Translations are managed via CrowdIn](https://crowdin.com/project/modx-revolution). \n\nFirst create a CrowdIn account if you don't have one, and then start translating.\n\n> Note that your request to join the translation team will need to be approved. This is usually done pretty quickly. \n\nUpdated translations are automatically added to the next MODX release. If any new lexicons need to be translated, you'll receive a notification from CrowdIn.\n```\n\n----------------------------------------\n\nTITLE: MODX sendErrorPage Method Signature\nDESCRIPTION: Official method signature for the sendErrorPage method, which takes an optional array of options to customize error page behavior. The method returns void and can be used to handle various error scenarios in a MODX application.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.senderrorpage.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nvoid sendErrorPage ([array $options = null])\n```\n\n----------------------------------------\n\nTITLE: Initiating a Database Transaction with xPDO in PHP\nDESCRIPTION: Example of how to begin a database transaction using the xPDO class. This method starts a transaction that can later be committed or rolled back to ensure data integrity across multiple database operations.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.begintransaction.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->beginTransaction();\n```\n\n----------------------------------------\n\nTITLE: Adding Create Button to Grid Toolbar in JavaScript\nDESCRIPTION: This snippet adds a 'Create' button to the top toolbar of a grid. It uses MODExt to load a create window when clicked.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n,{\n   text: _('doodles.doodle_create')\n   ,handler: { xtype: 'doodles-window-doodle-create' ,blankValues: true }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Rule to xPDOObject Field in PHP\nDESCRIPTION: This method adds a validation rule to an object field for the current instance. It takes parameters for the field name, rule name, rule type, rule definition, and optional additional parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/validation/addvalidationrule.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid addValidationRule (\n   string $field,\n   string $name,\n   string $type,\n   string $rule,\n   [array $parameters = array()]\n)\n```\n\n----------------------------------------\n\nTITLE: Default Localized Date Format for SimplePie (PHP)\nDESCRIPTION: Default date format string used by SimplePie for localized date display using PHP's strftime() function. This format displays dates according to the system locale settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/spiefeed/index.md#2025-04-17_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\"%c\"\n```\n\n----------------------------------------\n\nTITLE: Using getGooglePlusShares in a PHP Snippet\nDESCRIPTION: Example demonstrating how to run the getGooglePlusShares snippet inside another PHP snippet to get the share count for a specific URL and create a custom message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.getgoogleplusshares.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$url = 'http://google.com/';\n$shares = $modx->runSnippet('getGooglePlusShares', array('url' => $url));\nreturn \"The url {$url} has been shared {$shares} times on Google+.\";\n```\n\n----------------------------------------\n\nTITLE: Linking to cssSweet Generated CSS File in HTML\nDESCRIPTION: This HTML snippet shows how to include the CSS file generated by cssSweet in your MODX template. It uses the MODX assets_url system setting to create the correct path to the custom CSS file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/csssweet/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"[[++assets_url]]components/csssweet/csss-custom.css\" />\n```\n\n----------------------------------------\n\nTITLE: Category Dropdown in MODX\nDESCRIPTION: This PHP snippet provides an example of rendering categories as a dropdown list. It uses various MODX chunks to format each category and its subcategories accordingly. Required setup includes defining the chunks 'bdl.cat.cat', 'bdl.cat.sub', 'bdl.cat.inner', and 'bdl.cat.outer' in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdcategories.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<select name=\"category\">\n  [[+wrapper]]\n</select>\n```\n\nLANGUAGE: php\nCODE:\n```\n<option value=\"[[+id]]\">[[+name]]</option>\n[[+subcategories]]\n```\n\nLANGUAGE: php\nCODE:\n```\n<option value=\"[[+id]]\">- [[+name]]</option>\n```\n\nLANGUAGE: php\nCODE:\n```\n[[+subcategories]]\n```\n\n----------------------------------------\n\nTITLE: TinyMCE Plugin Configuration for PageBreak\nDESCRIPTION: This code snippet outlines the configuration settings needed to enable the PageBreak buttons in TinyMCE after integrating the PageBreaker plugin. It specifies which custom buttons and plugins should be added to the TinyMCE settings to utilize the PageBreaker functionality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pagebreaker/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"pagebreak,pagebreakmanual,pagebreakauto,pagebreakcls\\n\"\n```\n\n----------------------------------------\n\nTITLE: Calling ObjectExplorer snippet with 'full' parameter\nDESCRIPTION: This snippet demonstrates calling the ObjectExplorer snippet with the `full` parameter set to `1`.  This will output the full reference, which is a dump of the entire schema as an array, instead of the default Quick Reference. The snippet should be called uncached.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/objectexplorer/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\n[[ObjectExplorer? &full=`1`]]\n\n```\n\n----------------------------------------\n\nTITLE: Validating Chunk Description in MODX Plugin (PHP)\nDESCRIPTION: This plugin checks if the description field is filled when updating an existing chunk. It outputs a message if the description is empty.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforechunkformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeChunkFormSave':\n        //if we update an existing chunk\n        if ($mode == modSystemEvent::MODE_UPD){\n            //if description is not filled\n            if (!$chunk->get('description')){\n                $modx->event->output(\"You haven't forgotten anything?\");\n            }\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing MODX Newsletter Object Example - PHP\nDESCRIPTION: Demonstrates how to retrieve and interact with a sxNewsletter object in MODX using the getObject method. Shows basic object method invocation pattern.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/work-logic.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif ($newsletter = $modx->getObject('sxNewsletter', 1)) {\n    echo $newsletter->nameMethod('options');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Doodles JavaScript Namespace with ExtJS\nDESCRIPTION: Sets up a JavaScript namespace and component structure for the MODX Extra, extending Ext.Component\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-2.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar Doodles = function(config) {\n    config = config || {};\n    Doodles.superclass.constructor.call(this,config);\n};\nExt.extend(Doodles,Ext.Component,{\n    page:{},window:{},grid:{},tree:{},panel:{},combo:{},config: {}\n});\nExt.reg('doodles',Doodles);\nDoodles = new Doodles();\n```\n\n----------------------------------------\n\nTITLE: MODX Context Settings Retrieval\nDESCRIPTION: Example of retrieving context settings using relationship methods in MODX Revolution, demonstrating the getMany() method for accessing related objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$context = $modx->getObject('modContext','web');\n$settings = $context->getMany('ContextSetting');\nforeach ($settings as $setting) {\n    echo 'Setting name: '.$setting->get('key').' <br />';\n    echo 'Setting value: '.$setting->get('value').' <br />';\n}\n```\n\n----------------------------------------\n\nTITLE: MODX ExtJS Processor Implementation in PHP\nDESCRIPTION: A basic MODX processor class demonstrating inheritance from modObjectCreateProcessor with configuration for creating a newsletter object\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/extjs-widgets/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass SendexItemCreateProcessor extends modObjectCreateProcessor {\n    public $objectType = 'sxNewsletter';\n    public $classKey = 'sxNewsletter';\n    public $languageTopics = array('sendex');\n    public $permission = 'new_document';\n}\nreturn 'SendexItemCreateProcessor';\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes for xPDO Table\nDESCRIPTION: Shows how to define indexes for the sfStore table using the schema version 1.1 format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/database-and-tables.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<index alias=\"name\" name=\"name\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n    <column key=\"name\" length=\"\" collation=\"A\" null=\"false\" />\n</index>\n<index alias=\"zip\" name=\"zip\" primary=\"false\" unique=\"false\" type=\"BTREE\">\n    <column key=\"zip\" length=\"\" collation=\"A\" null=\"false\" />\n</index>\n```\n\n----------------------------------------\n\nTITLE: Advanced Nested Conditional Query with Logical Operators\nDESCRIPTION: Illustrates creating a complex query with nested conditions and logical operators using xPDOQuery's advanced filtering capabilities\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Person');\n$query->where(array(\n    array(\n        'first_name:=' => 'Bob',\n        array(\n            'OR:last_name:LIKE' => 'Boblablaw',\n            'AND:gender:=' => 'M',\n        ),\n    ),\n    'password:!=' => null,\n));\n```\n\n----------------------------------------\n\nTITLE: Cloning a MODX Revolution Git Repository\nDESCRIPTION: This snippet shows how to clone the MODX Revolution repository from GitHub. It includes the standard cloning process and the process of forking for contribution, including adding an upstream remote.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"git clone http://github.com/modxcms/revolution.git\"\n```\n\n----------------------------------------\n\nTITLE: Defining Country and State Combo Boxes with ISO code\nDESCRIPTION: This code shows how to define country and state combo boxes, using the ISO country code as the value. The country is selected by ISO code and the state is filtered to show only the states of the selected country.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekformtools/sekformtools-advanced-examples.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"<label for=\\\"ftcountry\\\">Country</label>\\n[[!input.combobox? &input_id=`ftcountry` &value=`US`\\n    &object=`{\\\"name\\\": \\\"sekftCountries\\\", \\\"sortby\\\": \\\"country_name\\\", \\\"value\\\": \\\"isoa_two\\\", \\\"label\\\": \\\"country_name\\\"}`\\n]]\\n\\n<label for=\\\"ftstate\\\">State</label>\\n[[!input.combobox? &input_id=`ftstate`\\n    &object=`{\\\"name\\\": \\\"sekftStates\\\", \\\"sortby\\\": \\\"state_name\\\", \\\"value\\\": \\\"state_name\\\", \\\"label\\\": \\\"state_name\\\"}`\\n    &filter=`{\\\"input_id\\\": \\\"ftcountry\\\", \\\"name\\\": \\\"sekftCountries\\\", \\\"field\\\": \\\"isoa_two\\\", \\\"value\\\": \\\"US\\\"}`\\n]]\"\n```\n\n----------------------------------------\n\nTITLE: Defining leftJoin Method Signature in xPDO\nDESCRIPTION: Method signature for the leftJoin method in xPDOQuery, used to add a LEFT JOIN clause to a database query with multiple optional parameters for joining tables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.leftjoin.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid leftJoin ( $class, [ $alias = ''], [ $conditions = array ()], [ $conjunction = xPDOQuery::SQL_AND], [ $binding = null], [ $condGroup = 0])\n```\n\n----------------------------------------\n\nTITLE: Rich Text Editor Element Markup\nDESCRIPTION: HTML structure required for the Fred Rich Text Editor plugin. Elements must have data-fred-name attribute and specific data attributes to enable rich text editing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/system_settings/index.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-fred-name=\"content\" data-fred-editable=\"true\" data-fred-rte=\"true\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining modX::toPlaceholder Method in PHP\nDESCRIPTION: The method signature for modX::toPlaceholder, which recursively validates and sets placeholders. It returns an array containing set placeholder keys and optionally overwritten values.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.toplaceholder.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\narray toPlaceholder (string $key, mixed $value, [string $prefix = ''], [string $separator = '.'], [boolean $restore = false])\n```\n\n----------------------------------------\n\nTITLE: Using fromJSON to Populate Object Fields - PHP Example\nDESCRIPTION: Practical example demonstrating how to use fromJSON() to set object fields from a JSON string and then retrieve the values using get().\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/field-accessors/fromjson.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = '{\"name\":\"Sirius\",\"email\":\"Black\"}';\n$object->fromJSON($str);\necho $object->get('name').' '.$object->get('email');\n// prints \"Sirius Black\"\n```\n\n----------------------------------------\n\nTITLE: Allowing PHP Thumb Above Document Root - MODX - Markdown\nDESCRIPTION: This setting permits the PHPThumb library to serve images located above the document root, useful for managing multimedia content effectively.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_allow_src_above_docroot](building-sites/settings/phpthumb_allow_src_above_docroot)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for phpThumb Error Background Color in MODX\nDESCRIPTION: Shows the default hex color value (CCCCFF) for the phpThumb error background color in MODX Revolution. This value is used without the # symbol to set the background color for error messages generated by phpThumb.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/phpthumb_error_bgcolor.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Default**: CCCCFF\n```\n\n----------------------------------------\n\nTITLE: modX::runProcessor API Syntax in PHP\nDESCRIPTION: This code snippet provides the syntax for the `runProcessor` method, outlining the expected parameters, which include action, script properties, and options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.runprocessor.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmixed runProcessor(string $action = '', array $scriptProperties = array(), array $options = array())\n```\n\n----------------------------------------\n\nTITLE: Generating Canonical Link Tag with GatewayManager\nDESCRIPTION: A PHP snippet demonstrating how to automatically create a canonical link tag using GatewayManager placeholders. This code checks if a canonical URL placeholder exists and generates an HTML link tag if present.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/gatewaymanager/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!+gateway.canonical:notempty=`<link rel=\"canonical\" href=\"[[+gateway.canonical]]\" />`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Dashboard Widget in MODX\nDESCRIPTION: A simple HTML code snippet that displays 'Hello, world!' text as the content of a MODX dashboard widget. This is used in the basic widget creation example to demonstrate the simplest form of dashboard widget content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/dashboards/creating-a-widget.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<p>Hello, world!</p>\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript debug function in MODX\nDESCRIPTION: Example of the MODx.debug() JavaScript function that outputs debug messages to the console when ui_debug_mode is enabled. This function allows developers to debug Custom Manager Pages without breaking production sites.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/ui_debug_mode.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.debug(msg)\n```\n\n----------------------------------------\n\nTITLE: Loading xPDOManager and xPDOGenerator in PHP\nDESCRIPTION: This PHP code loads the xPDOManager and xPDOGenerator classes, which are essential for parsing the schema and building the model map files.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"$manager= $modx->getManager();\\n$generator= $manager->getGenerator();\"\n```\n\n----------------------------------------\n\nTITLE: Setting Base Parameters for MODx Grid Data Loading in JavaScript\nDESCRIPTION: This JavaScript code shows the default base parameters used when loading data into a MODx grid via AJAX. The 'action' parameter is set to 'getList' by default, and these base parameters are sent along with the request to the connector URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modx.grid.grid.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```javascript\nbaseParams: { action: 'getList' }\n```\n```\n\n----------------------------------------\n\nTITLE: CTA Settings Partial Option Set Definition\nDESCRIPTION: Defines a reusable CTA settings configuration with class selection and visibility toggle options.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/options/import.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"name\": \"cta_class\",\n        \"label\": \"CTA Class\",\n        \"type\": \"select\",\n        \"options\": {\n            \"danger\": \"Red CTA\",\n            \"info\": \"Blue CTA\",\n            \"default\": \"Default CTA\"\n        },\n        \"value\": \"default\"\n    },\n    {\n        \"name\": \"show_cta\",\n        \"label\": \"Show CTA\",\n        \"type\": \"toggle\",\n        \"value\": false\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating Manager Path in MODX Configuration\nDESCRIPTION: PHP configuration changes in MODX core config file to update the manager path and URL.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/securing-modx.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$modx_manager_path = '/home/youruser/public_html/r4nd0m/';\n$modx_manager_url = '/r4nd0m/';\n```\n\n----------------------------------------\n\nTITLE: Get Username in Current Context - modX - PHP\nDESCRIPTION: This code snippet demonstrates how to retrieve the current username in the default or current context using the modX::getLoginUserName() method. It assigns the retrieved username to the $username variable.  This function retrieves the currently logged-in user's name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getloginusername.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n``` php\n$username = $modx->getLoginUserName();\n```\n```\n\n----------------------------------------\n\nTITLE: Chaining Output Modifiers in MODX\nDESCRIPTION: This snippet illustrates how to chain multiple output modifiers together, applying them sequentially from left to right. Each modifier acts on the result of the previous modifier, allowing for complex data transformations. The `value`, `value2` represents optional parameter for modifiers.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[element:modifier:anothermodifier=`value`:andanothermodifier:yetanother=`value2`]]\n```\n\n----------------------------------------\n\nTITLE: Transport Package Naming Convention in PHP\nDESCRIPTION: The standard format for naming Transport Packages in MODX, following PHP version number standards. This pattern allows MODX to identify packages and their versions for proper installation or upgrading.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/index.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npackagename-version-release.transport.zip\n```\n\n----------------------------------------\n\nTITLE: Snippet Call for Related Pages in MODX\nDESCRIPTION: This snippet call in MODX sets up the input property with a delimited list of resource IDs and specifies a chunk template to format the output. It is used in the template to display related pages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n [[relatedPages? &input=`[[*relatedPages]]` &tpl=`relatedPagesTpl`]] \n```\n\n----------------------------------------\n\nTITLE: Fetching Column Data from modX Database\nDESCRIPTION: Retrieves a single column's data from the executed SQL query result. The method interacts with the xPDOCriteria class to obtain values from database queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmodX->db->getColumn($name, $dsq)\n```\n\n----------------------------------------\n\nTITLE: Iterating User Collection with getChunk in PHP\nDESCRIPTION: Shows how to use getChunk in a loop to generate dynamic content from a collection of objects, converting each object to an array for placeholder replacement.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nИмя пользователя: [[+username]]<br/>\nАктивный?:  [[+active]]<br/>\n<hr/>\n```\n\nLANGUAGE: php\nCODE:\n```\n$userlist = $modx->getCollection('modUser');\n\n$output = '';\nforeach ($userlist as $user) {\n    $output .= $modx->getChunk('single_user', $user->toArray() );\n}\n\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Basic RSS Feed Retrieval in MODX\nDESCRIPTION: Demonstrates how to use the getFeed snippet to retrieve an RSS feed by providing a URL. The snippet allows flexible configuration with various parameters to control feed item rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getfeed/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!getFeed? &url=`http://path.com/to/my/rss.feed.rss`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Paragraph Element in HTML\nDESCRIPTION: This example illustrates the creation of a paragraph Element in MODX with Fred, including markup that recognizes it as content. This allows flexible editing of textual content on the page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/themes.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p data-fred-name=\"paragraph\">Your content goes here…</p>\n```\n\n----------------------------------------\n\nTITLE: Multiple Field and Validator Validation\nDESCRIPTION: Shows how to apply multiple validators to different form fields, including required, email, and custom validation checks\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.validators.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &validate=`date:required:isDate=^%m/%d/%Y^,\n        name:required:testFormItValidator,\n        email:email:required,\n        colors:required,\n        subject:required,\n        username:required:islowercase,\n        message:stripTags,\n        numbers:required`\n]]\n```\n\n----------------------------------------\n\nTITLE: Removing Background and Creating Transparent PNG\nDESCRIPTION: Remove white background and convert image to transparent PNG using source transparent color (stc) filter. Converts image to 960x300 with white background removed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=stc|ffffff&f=png`]]\n```\n\n----------------------------------------\n\nTITLE: Setting RewriteBase in .htaccess for MODX Subdomain\nDESCRIPTION: Configuration for the .htaccess file that sets the RewriteBase to match the base_url context setting. This ensures proper URL rewriting for the subdomain.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/contexts/virtual-host.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRewriteBase /\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Connector Path for MODX Extras (PHP)\nDESCRIPTION: This snippet demonstrates the typical file path structure for custom connectors used by MODX extras. These connectors are used to expose the extra's processors to manager users.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/processors/connectors.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nassets/components/NAME-OF-EXTRA/connector.php\n```\n\n----------------------------------------\n\nTITLE: Creating Header Chunk for Logged-in Members in MODX\nDESCRIPTION: This chunk defines the header content displayed to logged-in members, including their name and a sign-out link.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/request-membership.md#2025-04-17_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<span id=\"logged_in_status\">Signed in: [[+name]] (<a href=\"[[~1? &service=`logout`]]\">Sign out</a>)</span>\n```\n\n----------------------------------------\n\nTITLE: Uncached Snippet Call in MODX\nDESCRIPTION: Calling a MODX snippet with the uncached format (using the exclamation mark prefix) to ensure the snippet is executed on every page load, providing dynamic content for different users.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/snippets.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!MySnippet]]\n```\n\n----------------------------------------\n\nTITLE: Loading User Attributes for Specific Context and Target in MODX (PHP)\nDESCRIPTION: This example demonstrates how to load attributes for the 'sports' context and the modResource target using the loadAttributes method of the modUser class.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/core-model/moduser/moduser.loadattributes.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->loadAttributes('modResource','sports',true);\n```\n\n----------------------------------------\n\nTITLE: Extracting and Checking Theme Status with Gitify\nDESCRIPTION: Commands to sync Fred Theme to filesystem and check Git status before making changes. This ensures work isn't lost during collaboration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/gitify_in_action.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/www\ngitify extract\ngit status\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Outer Container for MODX Sitemap in PHP\nDESCRIPTION: This chunk is used as an outer container for the entire HTML sitemap output. It provides a basic unordered list structure with a placeholder for sitemap items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sitemapfriend/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<ul id=\"sitemap\">\n    [[+items]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Updating a local Git repository\nDESCRIPTION: This snippet shows how to update a local MODX Revolution installation using Git, fetching the latest changes from the origin and rebasing your local branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"git fetch origin\\ngit rebase origin/2.x\"\n```\n\n----------------------------------------\n\nTITLE: Applying Output Modifier to Snippet Output in MODX\nDESCRIPTION: This snippet shows how to apply an output modifier to the output of a MODX snippet. The modifier is placed between the snippet name and the query string.  `mySnippetParam` is a parameter passed to the snippet\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[mySnippet:modifier=`value`? &mySnippetParam=`something`]]\n```\n\n----------------------------------------\n\nTITLE: Disabling eAccelerator in .htaccess\nDESCRIPTION: This .htaccess configuration shows how to disable eAccelerator using PHP flags. It's an alternative method to disable eAccelerator when PHP.ini modification is not possible.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/troubleshooting.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nphp_flag eaccelerator.enable 0\nphp_flag eaccelerator.optimizer 0\nphp_flag eaccelerator.debug 0\n```\n\n----------------------------------------\n\nTITLE: Manager Navigation in MODX 2.3+\nDESCRIPTION: Updated approach for manager navigation in MODX 2.3+ using direct controller names instead of action IDs, showing both core and namespace-specific examples.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/menus/action-list.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.loadPage('resource/update', 'id=5');\nMODx.loadPage('update', 'namespace=mycomponent&foo=bar&bar=foo');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Level in MODX Snippets\nDESCRIPTION: Demonstrates how to override the global log level for a specific snippet or plugin using setLogLevel().\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Call your snippet like this: [[mySnippet? &log_level=`4`]]\n// Override global log_level value\n$log_level = $modx->getOption('log_level', $scriptProperties, $modx->getOption('log_level'));\n$modx->setLogLevel($log_level);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parent Resource in MODX\nDESCRIPTION: The `modX\\->getObject('modResource', $modx\\->resource\\->get('parent'))` method is used for acquiring the parent resource, with the option to include additional criteria for more detailed querying and resource hierarchies navigation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->getParent()\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Configuration in FoundationX\nDESCRIPTION: Template Variable for adding custom CSS declarations that override default styles. These styles are appended at the end of the final stylesheet to ensure they take precedence over packaged styles.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/foundationx/foundationx.how-to-use-foundationx.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Custom CSS declarations go here */\n/* Will be inserted at the end of the final stylesheet */\n/* Use to override default FoundationX styles */\n```\n\n----------------------------------------\n\nTITLE: Debug Echo Example\nDESCRIPTION: Simple debug code example showing how to verify synchronization between project and server in the MODX admin panel.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/package-build.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php:\necho 'Hello world';\ndie;\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Links in MODX\nDESCRIPTION: MODX link tag syntax for creating links to resources, where the number represents the Resource ID of the target page. This method automatically updates links when resources are moved.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls.md#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~1]]\" title=\"some title\">Some Page</a>\n```\n\n----------------------------------------\n\nTITLE: Apache Modules Output Example\nDESCRIPTION: Sample output from the apachectl command showing loaded modules, including ModSecurity appearing as security2_module.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nLoaded Modules:\n core_module (static)\n rewrite_module (static)\n so_module (static)\n suphp_module (shared)\n security2_module (shared)  # <--- this is ModSecurity\n```\n\n----------------------------------------\n\nTITLE: Using crumbSeparator in Breadcrumbs vs CSS in BreadCrumb\nDESCRIPTION: Demonstrates how to replace the crumbSeparator property from Breadcrumbs with CSS styling in BreadCrumb to achieve the same visual separation between breadcrumbs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/index.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n[[Breadcrumbs? &crumbSeparator=`>`]]\n```\n\nLANGUAGE: css\nCODE:\n```\n#breadcrumb li + li:before{\n    content:  '>';\n    margin:   0 2px;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Resources with getResources Snippet in MODX\nDESCRIPTION: A MODX snippet call that uses getResources to fetch related documentation pages from section 301 in the revolution context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/tab-visible.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`301` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Running GitHub PR Checkout with gh CLI\nDESCRIPTION: Command for checking out a pull request using the GitHub CLI tool, followed by rebasing against the upstream branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/testing-pull-requests.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh pr checkout <id of pull request>\\ngit rebase upstream/2.x\n```\n\n----------------------------------------\n\nTITLE: Adding a Package in MODX Revolution\nDESCRIPTION: Example of using the addPackage method to load a custom package in MODX Revolution. It specifies the package name, path to the model directory, and table prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.addpackage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$modx->addPackage('mypkg',MODX_CORE_PATH.'components/mypkg/model/','mypkg_');\n```\n\n----------------------------------------\n\nTITLE: Adding Base URL Tag to Template\nDESCRIPTION: HTML tag for the base URL that should be placed in the head section of all MODX templates to ensure proper URL resolution when using friendly URLs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/friendly-urls.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<base href=\"[[!++site_url]]\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Object Method in PHP\nDESCRIPTION: The method in the modx class that triggers the OnMODXInit event when initializing the MODX framework. This method accepts a contextKey parameter (defaults to 'web') and optional parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onmodxinit.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function initialize($contextKey= 'web', $options = null)\n```\n\n----------------------------------------\n\nTITLE: HybridAuth Snippet for Profile Updates with Required Fields (MODX)\nDESCRIPTION: MODX snippet call to update user profiles using HybridAuth, specifying required fields including a photo.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hybridauth/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!HybridAuth? providers=`Google,Twitter,Facebook` &action=`UpdateProfile` &requiredFields=`username,email,photo` &profileFields=`username,fullname,email,photo`]]\n```\n\n----------------------------------------\n\nTITLE: Disable eAccelerator via .htaccess\nDESCRIPTION: This snippet demonstrates how to disable eAccelerator using `.htaccess` directives. This allows disabling eAccelerator on a per-directory basis if server configuration allows `php_flag` directives.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nphp_flag eaccelerator.enable 0\nphp_flag eaccelerator.optimizer 0\nphp_flag eaccelerator.debug 0\n```\n\n----------------------------------------\n\nTITLE: Using Lexicon with Parameters in PHP\nDESCRIPTION: Example showing how to use the lexicon() method with a welcome message, passing a name parameter and specifying English language.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.lexicon.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\necho $modx->lexicon('welcome_message', array('name' => 'John'), 'en');\n```\n\n----------------------------------------\n\nTITLE: Sorting Resources by Multiple Fields in PHP\nDESCRIPTION: This code snippet shows how to specify sorting of resources based on multiple fields using a JSON array format, allowing for customized ordering of results in queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n&sortby=`{\"publishedon\":\"ASC\",\"createdon\":\"DESC\"}`\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to an Event - modX.addEventListener - PHP\nDESCRIPTION: This code snippet demonstrates how to add a plugin with a specific ID to a specified event using the modX::addEventListener method. It takes the event name and the plugin ID as parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.addeventlistener.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n``` php\n$modx->addEventListener('OnChunkPrerender', 12);\n```\n```\n\n----------------------------------------\n\nTITLE: Uninstalling xPDOTransport Package in PHP\nDESCRIPTION: Demonstrates how to use the uninstall method of xPDOTransport to remove vehicles from the sponsor xPDO instance. The method returns a boolean value indicating success or failure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdotransport/xpdotransport.uninstall.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean uninstall ([array $options = array ()])\n```\n\nLANGUAGE: php\nCODE:\n```\n$transport->uninstall();\n```\n\n----------------------------------------\n\nTITLE: Caching Hits IDs for getResources in MODX Revolution\nDESCRIPTION: This snippet demonstrates how to cache just the Hits IDs query when results from getResources vary from page to page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/hits/index.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n[[getResources?\n    &resources=`[[!getCache?\n    &element=`mostHitsIDs`\n    &cacheExpires=`900`\n    &cacheKey=`hits`\n    &cacheElementKey=`mostHitsIDs`]]`\n    ...\n]]\n```\n\n----------------------------------------\n\nTITLE: SimpleSearch Snippet Usage in MODX\nDESCRIPTION: This snippet shows how to include the SimpleSearch snippet in a MODX Resource. The snippet is called with the `[[!SimpleSearch]]` tag, which tells MODX to execute the SimpleSearch snippet and display its output.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/simplesearch/simplesearch.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!SimpleSearch]]\n```\n\n----------------------------------------\n\nTITLE: Executing album.view Snippet in MODX\nDESCRIPTION: This snippet demonstrates the basic usage of the album.view snippet. It is called without any parameters, using the default templates and settings defined in the sekUserGalleries configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekusergalleries/sekusergalleries.album.view.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!album.view]]\n```\n\n----------------------------------------\n\nTITLE: MODX CMP Template Structure\nDESCRIPTION: Basic HTML template structure for a MODX Custom Manager Page (CMP) that uses ExtJS. This template provides a container div for ExtJS components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/package-build.md#2025-04-17_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"sendex-panel-home-div\"></div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Box Fields Example\nDESCRIPTION: Example showing how to retrieve a collection of Box objects with only ID and name fields selected.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->select($xpdo->getSelectColumns('Box','Box','',array('id','name')));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Installing MODX Revolution 3.x with Composer\nDESCRIPTION: Commands to create a new MODX Revolution 3.x project using Composer and switch to the development branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/parent/directory\ncomposer create-project modx/revolution your_directory 3.x-dev\ncd your_directory && git checkout 3.x\ngit checkout -b 3.x-myfeaturebranch\n```\n\n----------------------------------------\n\nTITLE: Debugging SQL Query Generation with toSQL()\nDESCRIPTION: Demonstrates how to use the toSQL() method to generate and print the actual SQL query for debugging purposes\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$c = $xpdo->newQuery('Person');\n// добавить фильтры здесь...\n$c->prepare();\nprint $c->toSQL();\n```\n\n----------------------------------------\n\nTITLE: Using HTML Template Chunks in MODX\nDESCRIPTION: This HTML snippet represents a template chunk to be used within a MODX component. The template is intended for file-based storage and allows dynamic content insertion using placeholders like `[[+name]]` and `[[+description]]`. It should be stored in the specified directory path and is utilized within PHP code to format data display. The expected output is an HTML list item formatted with bold name and description placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<li><strong>[[+name]]</strong> - [[+description]]</li>\n```\n\n----------------------------------------\n\nTITLE: Executing Database Queries in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->query($sql)` for executing SQL queries. Uses `$modX->query()` or `$modX->execute($criteria)` instead. Check manual for PDO query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n\"modX->query() or modX->execute($criteria) see manual for PDO query\"\n```\n\n----------------------------------------\n\nTITLE: Adding Row Class Property\nDESCRIPTION: Code that adds a 'rowCls' property to allow custom CSS classes for each resource item without requiring a custom chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/snippets/templating.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$rowCls = $modx->getOption('rowCls',$scriptProperties,'resource-item');\n```\n\n----------------------------------------\n\nTITLE: Minimum Resize for Images with MODX Revolution - PHP\nDESCRIPTION: This snippet shows how to set a minimum width of 150 pixels for images using the RezImgCrop filter. If the image is smaller, it will not be resized, preserving its original quality.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`min-150`]]\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Feature Branches After Integration in PHP\nDESCRIPTION: Commands to switch back to the main branch and delete a feature branch after integration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/git.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ngit checkout 2.x\ngit branch -d myworkflow\n```\n\n----------------------------------------\n\nTITLE: Using Property Sets in MODX Snippet Call\nDESCRIPTION: Shows how to use a Property Set in a MODX snippet call, simplifying a long list of properties into a single Property Set reference.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/properties-and-property-sets.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[MySnippet? &prop1=`a` &prop2=`b` &prop3=`c` &prop4=`d` &prop5=`e` &prop6=`f`]]\n```\n\nLANGUAGE: php\nCODE:\n```\n[[MySnippet@myPropertySet]]\n```\n\n----------------------------------------\n\nTITLE: Sample Readme for MODX Extra\nDESCRIPTION: A simple readme file template for a MODX Extra, providing basic information about the component and its version.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n--------------------\nExtra: Doodles\n--------------------\nVersion: 1.0\n\nA simple demo extra for creating robust 3rd-Party Components in MODX Revolution.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Insert ID after Saving in PHP\nDESCRIPTION: Demonstrates different methods to retrieve the last insert ID after saving an object with xPDO, using PDO::lastInsertId() or object methods.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/persistence-methods/save.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->lastInsertId();\n// OR\n$object->getPrimaryKey();\n// OR\n$object->get('id'); // <-- or whatever the primary field is named\n```\n\n----------------------------------------\n\nTITLE: CLI Usage Example - PHP\nDESCRIPTION: Complete example showing how to execute the upgrade script from command line with multiple arguments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/upgrade-schema-v1.0-to-v1.1.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuser@hostname:/home/user/xpdo$ php xpdo/tools/schema/upgrade-mysql-1.1.php --pkg=sample --pkg_path=models/ --schema_name=sample.mysql.schema.xml --schema_path=schemas/ --echo --write --regen\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Update Page Pre-MODX 2.3\nDESCRIPTION: JavaScript code demonstrating how to redirect to a resource update page using MODx.loadPage with action IDs before MODX Revolution 2.3.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/menus/action-list.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.loadPage(MODx.action['resource/update'], 'id=5');\n```\n\n----------------------------------------\n\nTITLE: Hiding Tooltips in Browser Tree - MODX - Markdown\nDESCRIPTION: This configuration hides tooltips in the browser tree, allowing for a less cluttered experience while navigating resources within MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[modx_browser_tree_hide_tooltips](building-sites/settings/modx_browser_tree_hide_tooltips)\n```\n\n----------------------------------------\n\nTITLE: Generic ModSecurity Whitelist Rule Template\nDESCRIPTION: Template for creating a ModSecurity whitelist rule to allow MODX manager operations for specific paths.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<LocationMatch \"/path/to/URI\">\n  <IfModule mod_security2.c>\n    SecRuleRemoveById (Rule number)\n    SecRuleRemoveById (Rule number, if more for this domain)\n    SecRuleRemoveById (etc)\n    SecRuleRemoveById (etc)\n  </IfModule>\n</LocationMatch>\n```\n\n----------------------------------------\n\nTITLE: Sending URL Parameters in MODX Revolution\nDESCRIPTION: Example of how to send a URL parameter named 'val' with a value of '5' using MODX's URL syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/geturlparam/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[~10? &val=`5`]]\n```\n\n----------------------------------------\n\nTITLE: Simple Top-Level Menu Generation in MODX\nDESCRIPTION: Generates a top-level menu by specifying parents as root (0) and limiting menu depth to level 1. Useful for creating basic site navigation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoMenu.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[pdoMenu?\n    &parents=`0`\n    &level=`1`]]\n```\n\n----------------------------------------\n\nTITLE: GetResources Row Template with SiteEditor Link\nDESCRIPTION: An example of a getResources row template that includes a SiteEditor-enabled link with front-end editing for the page title.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/siteeditor/index.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<li>\n    <a href=\"[[~[[+id]]]]\">[[+pagetitle:siteEditorField=`resource=[[+id]]`]]</a>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Save Validation in modError\nDESCRIPTION: PHP example demonstrating validation handling during object save operations in MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/validators.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/* save object and report validation errors */\nif (!$this->object->save()) {\n    /** @var modValidator $validator */\n    $validator = $this->object->getValidator();\n    if ($validator->hasMessages()) {\n        foreach ($validator->getMessages() as $message) {\n            $this->addFieldError($message['field'],$this->modx->lexicon($message['message']));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Apache REST API Rewrite Rules\nDESCRIPTION: Apache .htaccess configuration for routing REST API requests to the MODX handler.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/developing-restful-api.md#2025-04-17_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteCond %{REQUEST_FILENAME} !-s\nRewriteRule ^(.*)$ rest/index.php?_rest=$1 [QSA,NC,L]\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteRule ^(.*)$ rest/index.php [QSA,NC,L]\n```\n\n----------------------------------------\n\nTITLE: Reference MODX Action Map Components\nDESCRIPTION: Lists the key components related to MODX action map caching - the modManagerRequest class that handles loading action maps and the actionMap array property\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/cache_action_map.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nmodmanagerrequest.class.php::loadActionMap()\n```\n\nLANGUAGE: php\nCODE:\n```\n$modx->actionMap\n```\n\n----------------------------------------\n\nTITLE: Nested Properties Placeholder Replacement in PHP\nDESCRIPTION: Illustrates using nested property arrays with getChunk, demonstrating how to access multi-level placeholders using dot notation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<a href=\"http://site.com/profile?user_id=[[+user.id]]!\">User Details</a>\n```\n\nLANGUAGE: php\nCODE:\n```\n$output = $modx->getChunk('UserLink',array(\n   'user' => array('id' => 123)\n);\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Initializing Parent Ids Retrieval in MODX\nDESCRIPTION: Method signature for retrieving parent resource identifiers with optional parameters for resource ID, maximum retrieval height, and context options\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.getparentids.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getParentIds ([integer $id = null], [integer $height = 10], [array $options = array()] )\n```\n\n----------------------------------------\n\nTITLE: Image Editor Element Markup\nDESCRIPTION: HTML structure required for the Fred Image Editor plugin to target image elements. Elements must be <img> tags with a data-fred-name attribute.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/system_settings/index.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img data-fred-name=\"image-name\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Default Field Wrapper Template in PHP\nDESCRIPTION: Example of the default outer template (FieldWrapTpl) used to wrap field HTML. It includes placeholders for labels, notes, and error messages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<!-- default -->\n<div class=\"[[+outer_class]]\" id=\"[[+name]]_wrap\">\n<label for=\"[[+name]]\" title=\"[[+name:replace=`_== `:ucwords]]\">[[+label:default=`[[+name:replace=`_== `:ucwords]]`]][[+req:notempty=` *`]]</label>\n[[+inner_html]]\n[[+note:notempty=`<span class=\"[[+note_class:default=`note`]]\"><em>[[+note]]</em></span>`]]\n[[+error:notempty=`<span class=\"[[+error_class]]\">[[+error]]</span>`]]\n</div>\n<!-- default -->\n```\n\n----------------------------------------\n\nTITLE: Displaying Gallery Navigation and Overview in MODX using HTML\nDESCRIPTION: This example illustrates the use of containerTpl chunk to render previous, next, and overview links for navigating a gallery in MODX. It leverages the GalleryAlbums snippet and demonstrates placeholder usage for navigation such as nav.prev, nav.next, and albumRequestVar among others. It is preferred in scenarios involving dynamic gallery navigation setup without default values, requiring MODX framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/gallery/gallery.galleryalbums/containertpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n[[+nav.curIdx:ne=\\n<div>\\n    <ul>\\n        <li>\\n            [[+nav.prev:notempty=`<a href=\\\"[[~[[*id]]? &[[+albumRequestVar]]=`[[+nav.prev]]`]]\\\">Previous Gallery</a>`:else=`<span>Previous Gallery</span>`]]\\n        </li>\\n        <li>\\n            <a href=\\\"[[~[[*id]]]]\\\">Overview</a>\\n        </li>\\n        <li>\\n            [[+nav.next:notempty=`<a href=\\\"[[~[[*id]]? &[[+albumRequestVar]]=`[[+nav.next]]`]]\\\">Next Gallery</a>`:else=`<span>Next Gallery</span>`]]\\n        </li>\\n    </ul>\\n    <div>Gallery [[+nav.curIdx]] of [[+nav.count]]</div>\\n</div>\\n`:else=`\\n<div>\\n    [[+albums]]\\n</div>\\n`]]\n```\n\n----------------------------------------\n\nTITLE: Using MoneyBird NrFormat with Options in PHP\nDESCRIPTION: This snippet illustrates how to use the MoneyBird NrFormat placeholder with additional options for customization in PHP. Parameters include 'd' for decimals, 'ds' for decimal separator, 'ts' for thousands separator, and 's' for the symbol before the price.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/moneybird/moneybird.nrformat.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"[[+placeholder:MoneyBirdNrFormat=`d=2&ds=,&ts=.`]]\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Register Snippet in MODX Form\nDESCRIPTION: This snippet initializes the \"Register\" functionality within a MODX form. Key parameters include &submitVar for the submit button variable, &activationResourceId to specify the resource ID for activation, and &activationEmailTpl for the email template during registration. The snippet assumes that MODX placeholders are utilized for rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.controllers/register.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Register?\n    &submitVar=`dis-register-btn`\n    &activationResourceId=`[[*id]]`\n    &activationEmailTpl=`disActivationEmailTpl`\n    &activationEmailSubject=`Thanks for Registering!`\n    &usergroups=`Forum New Member`\n]]\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Configuration for MODX Installation\nDESCRIPTION: This snippet shows the recommended PHP configuration settings for memory limit and max execution time during MODX installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/advanced.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmemory_limit = 128M\nmax_execution_time = 120\n```\n\n----------------------------------------\n\nTITLE: xPDOValidator addMessage Method Signature\nDESCRIPTION: Method signature showing the parameters for adding a validation message to the stack. Takes a field name, message name, and optional message content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdovalidator/xpdovalidator.addmessage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid addMessage (string $field, string $name, [mixed $message = null])\n```\n\n----------------------------------------\n\nTITLE: Adding Spellchecker Button to TinyMCE Custom Buttons in MODX\nDESCRIPTION: This snippet demonstrates how to add the spellchecker button to a custom button row in TinyMCE settings for MODX Revolution.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tinymce/tinymce.spellchecker.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n2. Custom Buttons Row X (key: tiny.custom_buttonsx)\n```\n\n----------------------------------------\n\nTITLE: Properties File Configuration - PHP\nDESCRIPTION: Example of a properties file that can be used to configure the upgrade script instead of command line arguments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/upgrade-schema-v1.0-to-v1.1.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$pkg='sample';\n$pkg_path='models/';\n$schema_name='sample.mysql.schema.xml';\n$schema_path='schemas/';\n$echo=true;\n$write=true;\n$regen=true;\n```\n\n----------------------------------------\n\nTITLE: Extended and Remote Data Access in PHP\nDESCRIPTION: Examples showing how to access extended user attributes and remote data fields in the template chunk using MODX placeholder syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/peoples/peoples/tpl.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[+extended.nameOfExtendedAttribute]]\n[[+remote_data.nameOfRemoteDataAttribute]]\n```\n\n----------------------------------------\n\nTITLE: Setting Manager Source Icon - MODX - Markdown\nDESCRIPTION: This snippet defines the icon used for the source in the manager interface, allowing for a customized appearance based on user preferences.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[mgr_source_icon](building-sites/settings/mgr_source_icon)\n```\n\n----------------------------------------\n\nTITLE: Filtering Users by Authors Group\nDESCRIPTION: Example showing how to list members of the Authors usergroup with custom template and ascending sort order.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoUsers.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!pdoUsers?\n    &groups=`Authors`\n    &tpl=`tpl.Authors.author`\n    &sortdir=`asc`\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic xPDOQuery for Box Objects in PHP\nDESCRIPTION: Simple example showing how to create a new query for the Box object class without any criteria.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.newquery.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->newQuery('Box');\n```\n\n----------------------------------------\n\nTITLE: Queue List Processor with Newsletter Join\nDESCRIPTION: PHP processor for retrieving queue list with joined newsletter information\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/letter-queue-table/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function prepareQueryBeforeCount(xPDOQuery $c) {\n    $c->innerJoin('sxNewsletter', 'sxNewsletter', 'sxNewsletter.id = sxQueue.newsletter_id');\n    $c->select($this->modx->getSelectColumns('sxQueue', 'sxQueue'));\n    $c->select('sxNewsletter.name as newsletter');\n\n    return $c;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lexicon Entry with modX PHP\nDESCRIPTION: Demonstrates how to fetch a lexicon entry with optional language and parameter substitution. The method retrieves translated text with placeholders.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/modx-class/reference/modx.lexicon.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\necho $modx->lexicon('welcome_message', array('name' => 'Иван'), 'ru');\n```\n\nLANGUAGE: php\nCODE:\n```\n$_lang['welcome_message'] = 'Привет [[+name]]!  Как дела?';\n```\n\n----------------------------------------\n\nTITLE: Filtered GoogleSiteMap Implementation with Legacy Features in PHP\nDESCRIPTION: Advanced implementation using the legacy GoogleSiteMap features to filter resources by template name and exclude specific resource IDs. This approach will be slower for large sites as it uses the legacy version.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/googlesitemap/googlesitemap.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!GoogleSiteMap?\n    &allowedtemplates=`BlogTemplate`\n    &templateFilter=`templatename`\n    &excludeResources=`123,78`\n]]\n```\n\n----------------------------------------\n\nTITLE: Fred Element with Custom RTE Configuration\nDESCRIPTION: Example showing how to specify a custom Rich Text Editor configuration.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div\n    data-fred-name=\"rte-content\"\n    data-fred-rte=\"true\"\n    data-fred-rte-config=\"bold-and-italics-only\"\n>\n    The RTE for this content will only show the bold and italics buttons\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Output Modifier Syntax in MODX Revolution\nDESCRIPTION: Demonstrates the basic syntax for applying an output modifier to a MODX element. This allows manipulation of the element's output before rendering.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[element:modifier=`value`]]\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path for Component Development\nDESCRIPTION: This code snippet sets the base path for the component. It checks if a `$base_path` variable is already set. If not, it sets it to the default location in the MODX core components directory using `$modx->getOption('core_path')`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @package storefinder\n */\n$base_path = !empty($base_path) ? $base_path : $modx->getOption('core_path').'components/storefinder/';\n```\n\n----------------------------------------\n\nTITLE: Restricting Snippet Creation by User ID using OnBeforeSnipFormSave in MODX\nDESCRIPTION: This plugin demonstrates how to use the OnBeforeSnipFormSave event in MODX to prevent a specific user (with ID 1) from creating new snippets. It checks the 'mode' parameter to ensure it's a new snippet and then checks the user's ID before outputting an error message to prevent the save.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onbeforesnipformsave.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeSnipFormSave':\n        //если это новый сниппет\n        if ($mode == modSystemEvent::MODE_NEW){\n            if ($modx->user->get('id') == 1){\n                $modx->event->output(\"Тебе нельзя создавать новые сниппеты!\");\n            }\n        }\n        break;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Tag Stripping in MODX\nDESCRIPTION: Examples of removing HTML and MODX tags using strip_tags and stripmodxtags modifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_8\n\nLANGUAGE: modx\nCODE:\n```\n[[+code:strip_tags=` `]]\n[[+code:stripmodxtags]]\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'isequalto' in MODX\nDESCRIPTION: Demonstrates the usage of 'isequalto' modifier for conditional output based on equality. It checks if the number of books is equal to 5 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:isequalto=`5`:then=`Есть 5 или 6 книг!`:else=`Не уверен, сколько книг`]]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Context Settings in MODX Templates\nDESCRIPTION: This snippet demonstrates how to retrieve a context-specific setting within a MODX template or chunk using the placeholder syntax.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/building-sites/contexts.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[++my_context_setting]]\n```\n\n----------------------------------------\n\nTITLE: Default Chunk for GetRelated Snippet in MODX\nDESCRIPTION: This PHP code snippet represents the default chunk used by the GetRelated snippet. It creates a list item with a link to the related resource, displaying the title and rank.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getrelated/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<li>\n  <a href=\"[[~[[+id]]]]\" title=\"[[+longtitle:default=`[[+pagetitle]]`]]\">\n    [[+longtitle:default=`[[+pagetitle]]`]] ([[+rank]])\n  </a>\n</li>\n```\n\n----------------------------------------\n\nTITLE: Related Objects Hydration Example in PHP\nDESCRIPTION: Demonstrates accessing related objects directly as member variables when xPDO::OPT_HYDRATE_RELATED_OBJECTS is enabled.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/hydrating-fields.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$fordPrefect->getMany('Beers');\nforeach ($fordPrefect->Beers as $beer) {\n   echo $beer->get('name').'<br />';\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Local Tracking Branches\nDESCRIPTION: Commands for keeping local tracking branches up-to-date with the upstream repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/xpdo.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[xpdo]$ git fetch upstream\n[xpdo]$ git checkout develop\nSwitched to branch \"develop\"\n[xpdo]$ git merge --ff-only upstream/develop\n[xpdo]$ git checkout master\nSwitched to branch \"master\"\n[xpdo]$ git merge --ff-only upstream/master\n[xpdo]$ git push origin develop master\n```\n\n----------------------------------------\n\nTITLE: Retrieving MODX Parser - PHP Method Declaration\nDESCRIPTION: Method signature for retrieving the MODX parser instance. Returns a modParser object that handles tag parsing and content processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getparser.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nobject getParser()\n```\n\n----------------------------------------\n\nTITLE: Getting Event Map Method Definition in PHP\nDESCRIPTION: Method signature for retrieving the event map for a specified context. Returns an array containing the mapping of events to registered plugins.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.geteventmap.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray getEventMap (string $contextKey)\n```\n\n----------------------------------------\n\nTITLE: Basic removeObjectContainer Method Syntax\nDESCRIPTION: Shows the method signature for removing a database table container. The method takes a className parameter and returns an integer.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.removeobjectcontainer.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nint removeObjectContainer (string $className)\n```\n\n----------------------------------------\n\nTITLE: Inner Element Properties in MODx Forms\nDESCRIPTION: Provides additional parameters to pass to inner element rendering, typically used for customizing chunk or snippet behavior\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\"inner_element_properties\": {\"tpl\": \"myChunk\"}}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Alias in xPDO Schema\nDESCRIPTION: Demonstrates how to create an alias for a field in the xPDO schema, allowing the value to be accessed by multiple keys.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/database-and-tables.md#2025-04-17_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<alias key=\"postalcode\" field=\"zip\" />\n```\n\n----------------------------------------\n\nTITLE: Executing MODX Snippet Method Definition\nDESCRIPTION: Method signature for running MODX snippets programmatically. Takes a snippet name and optional parameters array as arguments.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.runsnippet.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring runSnippet (string $snippetName, [array $params = array ()])\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up MODX Repository\nDESCRIPTION: Commands to clone your forked MODX repository and add the upstream remote to track the official repository.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YOURNAME/revolution.git\ncd revolution\n```\n\n----------------------------------------\n\nTITLE: MODX Date Formatting Example\nDESCRIPTION: Example showing how to format an unpublish date field in MODX using strtotime and custom date formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n[[*unpub_date:strtotime:date=`%a %b %e, %Y`]]\n```\n\n----------------------------------------\n\nTITLE: xPDOQuery Select Method Overloads\nDESCRIPTION: Shows the two possible parameter types for the select method - string or array of column names.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery select ([string $columns = '*'])\nxPDOQuery select ([array $columns =  array()])\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Resource Edit (Pre-Revolution 2.3)\nDESCRIPTION: JavaScript method to redirect browser to edit a resource with a specific ID using legacy action identifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/menus/action-list.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMODx.loadPage(MODx.action['resource/update'], 'id=5');\n```\n\n----------------------------------------\n\nTITLE: Using prettyNumbers with Another Snippet in MODX\nDESCRIPTION: Example of chaining prettyNumbers as an output filter with the getFacebookShares snippet to format the share count.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/socialsuite/socialsuite.prettynumbers.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getFacebookShares:prettyNumbers? &url=`http://google.com/`]]\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes\nDESCRIPTION: Series of Git commands to add, commit, and push changes to a remote repository with proper issue references.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_12\n\nLANGUAGE: plain\nCODE:\n```\ngit add .\ngit commit -m \"Fixed issue #13309 #modxbughunt\"\ngit push origin\ngit push --set-upstream origin bug-13309\nCounting objects: 4, done.\nDelta compression using up to 8 threads.\nCompressing objects: 100% (4/4), done.\nWriting objects: 100% (4/4), 1.69 KiB | 0 bytes/s, done.\nTotal 4 (delta 2), reused 0 (delta 0)\nremote: Resolving deltas: 100% (2/2), completed with 1 local objects.\nTo github.com:gpsietzema/revolution.git\n* [new branch]      bug-13309 -> bug-13309\nBranch bug-13309 set up to track remote branch bug-13309 from origin.\n```\n\n----------------------------------------\n\nTITLE: Testing PDO Database Connection in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to test a PDO database connection. It uses a DSN string to connect to a MySQL database and catches any PDOException that may occur during the connection attempt.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/* Connect to an ODBC database using driver invocation */\n$dsn = 'mysql:dbname=testdb;host=localhost';\n$user = 'dbuser';\n$password = 'dbpass';\n\ntry {\n  $dbh = new PDO($dsn, $user, $password);\n} catch (PDOException $e) {\n  echo 'Connection failed: ' . $e->getMessage();\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Loading Request Handler in MODX\nDESCRIPTION: Method signature showing how to load a request handler class in MODX. The method accepts an optional class name parameter (defaults to modRequest) and an optional path parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getrequest.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean getRequest ([$string $class = 'modRequest'], [$path $path = ''])\n```\n\n----------------------------------------\n\nTITLE: Implementing Threaded Comments with Reply Resource\nDESCRIPTION: Snippet calls for main thread page with threaded comments enabled and reply resource specified.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/quip/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!Quip? &thread=`threadNameHere` &replyResourceId=`123`]]\n<br />\n[[!QuipReply? &thread=`threadNameHere`]]\n```\n\n----------------------------------------\n\nTITLE: Loading External Service (Smarty) in xPDO\nDESCRIPTION: Example of manually loading an external service (Smarty) into xPDO instance using loadClass method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/getting-started/index.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($className= $xpdo->loadClass('Smarty','/path/to/smarty/smarty.class.php', false, true)) {\n    $xpdo->smarty= & new $className ($xpdo);\n}\n\n$xpdo->smarty->someFunc();\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Database Port in MODX Installation\nDESCRIPTION: This snippet demonstrates how to specify a custom database port during MODX installation by appending it to the database host.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/advanced.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"my.database.com;port=3307\"\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Override\nDESCRIPTION: Demonstrates how to override default validation error messages for specific fields\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extras/formit/formit.validators.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &vTextRequired=`Пожалуйста, укажите значение для этого поля.`\n    &subject.vTextRequired=`Пожалуйста введите тему.`\n]]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FileLister Snippet in MODX\nDESCRIPTION: Demonstrates how to use the FileLister snippet to display a list of files and/or directories from a specified path.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/filelister/filelister.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[FileLister? &path=`assets/downloads/`]]\n```\n\n----------------------------------------\n\nTITLE: OR Condition Using Operator Prefix\nDESCRIPTION: Shows how to use the OR operator prefix in the condition array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.where.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('Box');\n$query->where(array(\n   array(\n      'width' => 15\n   ),\n   array(\n      'OR:width:=' => 10\n   )\n));\n$boxes = $xpdo->getCollection('Box',$query);\n```\n\n----------------------------------------\n\nTITLE: Initializing Discuss Forum Content in MODX\nDESCRIPTION: Snippet to initialize the Discuss forum content in a MODX resource. This should be placed in the content field of the main forum resource.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.installation.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!Discuss]]\n```\n\n----------------------------------------\n\nTITLE: Desaturating Image\nDESCRIPTION: Apply grayscale effect by reducing image saturation by 90%. Converts colored image to nearly monochrome.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=sat|-90`]]\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork with Upstream\nDESCRIPTION: Git commands to synchronize a forked repository with the upstream main branch.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/contributors-guide.md#2025-04-17_snippet_13\n\nLANGUAGE: plain\nCODE:\n```\ngit fetch upstream 2.6.x\ngit fetch origin 2.6.x\ngit checkout 2.6.x\ngit pull upstream 2.6.x\n```\n\n----------------------------------------\n\nTITLE: Getting modX Settings\nDESCRIPTION: Retrieves configuration settings from modX after initializing the configuration process, supporting custom application needs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nmodX->getSettings()\n```\n\n----------------------------------------\n\nTITLE: Passing Properties to a Chunk in MODX\nDESCRIPTION: Shows how to pass properties to a Chunk when referencing it, allowing for dynamic content within the Chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/chunks.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[$intro? &name=`George` &messageCount=`12`]]\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of xPDOManager::createObjectContainer in PHP\nDESCRIPTION: Creates a database table for the 'Person' class using the xPDO manager instance.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.createobjectcontainer.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$manager = $xpdo->getManager();\n$manager->createObjectContainer('Person');\n```\n\n----------------------------------------\n\nTITLE: Setting Method Signature for xPDOQuery.setClassAlias\nDESCRIPTION: Defines the method signature for setting a class alias in xPDOQuery, allowing customization of table references in SQL queries\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.setclassalias.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nxPDOQuery setClassAlias ([string $alias = ''])\n```\n\n----------------------------------------\n\nTITLE: CLI Argument Format Example - PHP\nDESCRIPTION: Demonstrates the format for passing arguments when running the upgrade script from command line.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/upgrade-schema-v1.0-to-v1.1.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n--argument[=value]\n```\n\n----------------------------------------\n\nTITLE: Rendering Smarty Template in MODX Manager\nDESCRIPTION: Demonstration of how Smarty templates are used in MODX to render pages by assigning variables and fetching templates\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/directory-structure.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$modx->smarty->assign('resource',$resource);\nreturn $modx->smarty->fetch('resource/staticresource/update.tpl');\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up xPDO Repository\nDESCRIPTION: Commands for cloning the xPDO repository, adding the upstream remote, and creating local tracking branches.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/xpdo.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[repos]$ git clone git@github.com:YourGitUsername/xpdo.git\n[repos]$ cd xpdo\n[xpdo]$ git remote add upstream -f http://github.com/modxcms/xpdo.git\n```\n\nLANGUAGE: bash\nCODE:\n```\n[xpdo]$ git checkout -b master origin/master\nSwitched to a new branch \"master\"\n[xpdo]$ git checkout -b develop origin/develop\nSwitched to a new branch \"develop\"\n```\n\n----------------------------------------\n\nTITLE: Example Cache Deletion with xPDOCacheManager - PHP\nDESCRIPTION: Example showing how to delete a cache entry with key 'mystuff' using the xPDOCacheManager delete method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.delete.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->cacheManager->delete('mystuff');\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'and' in MODX\nDESCRIPTION: Demonstrates the usage of 'and' modifier for conditional output. It checks if the resource ID is 1 and not equal to 2 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[*id:is=`1`:and:if=`[[*id]]`:ne=`2`:then=`Да`:else=`Нет`]]\n```\n\n----------------------------------------\n\nTITLE: Calling renderResources Snippet\nDESCRIPTION: This snippet demonstrates how to call the renderResources snippet within a MODX Revolution template.  Without specifying the `tpl` property, the raw content of each resource is output. renderResources is designed to avoid binary Content Types, modSymLink, and modWebLink Resources automatically.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[renderResources]]\n```\n\n----------------------------------------\n\nTITLE: Using getSelectColumns Example\nDESCRIPTION: Simple example showing how to use getSelectColumns method to get column names for a modChunk object.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/metadata-accessors/getselectcolumns.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$columnString = xPDOObject::getSelectColumns($xpdo,'modChunk');\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Gallery Wrapper Template - HTML\nDESCRIPTION: Wrapper chunk template for containing multiple gallery items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"exerplan-exercise-gallery-wrapper\">\n    [[+exerplan.gallery.items]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: Sitemap Wrapper Template\nDESCRIPTION: XML wrapper template that defines the sitemap structure including XML declaration and urlset element\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoSitemap.md#2025-04-17_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n@INLINE <?xml version=\\\"1.0\\\" encoding=\\\"[[++modx_charset]]\\\"?>\\n<urlset xmlns=\\\"[[+schema]]\\\">\\n[[+output]]\\n</urlset>\n```\n\n----------------------------------------\n\nTITLE: String Case Modification in MODX\nDESCRIPTION: Examples of case transformation using lcase, ucase, ucwords, and ucfirst modifiers\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_5\n\nLANGUAGE: modx\nCODE:\n```\n[[+title:lcase]]\n[[+headline:ucase]]\n[[+title:ucwords]]\n[[+name:ucfirst]]\n```\n\n----------------------------------------\n\nTITLE: Processing User Collection\nDESCRIPTION: Example of processing multiple users using a chunk template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getchunk.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$userlist = $modx->getCollection('modUser');\n\n$output = '';\nforeach ($userlist as $user) {\n    $output .= $modx->getChunk('single_user', $user->toArray() );\n}\n\nreturn $output;\n```\n\n----------------------------------------\n\nTITLE: Closing XML Schema Tags for MODX Revolution xPDO Model\nDESCRIPTION: Closing XML tags for the object and model definitions in xPDO schema file.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/using-custom-database-tables.md#2025-04-17_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n</object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Getting Current User's Username Example\nDESCRIPTION: Example showing how to retrieve the username of the currently logged-in user in the current context.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.getloginusername.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$username = $modx->getLoginUserName();\n```\n\n----------------------------------------\n\nTITLE: Basic GetResources Child Resources Query - PHP\nDESCRIPTION: Outputs a list of child resources from the current resource using a custom template chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`[[*id]]` &tpl=`myRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Event in MODX with PHP\nDESCRIPTION: This snippet demonstrates how to create a new custom event in MODX using the `modx->newObject` method. It sets the event's name, service, and groupname. The `service` attribute determines where the event is loaded (manager vs. front-end).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$Event = $modx->newObject('modEvent');\n$Event->set('name', 'OnMyCustomEvent');\n$Event->set('service',1);\n$Event->set('groupname', 'Custom');\n```\n\n----------------------------------------\n\nTITLE: Excluding Fields from Saving as Extended\nDESCRIPTION: This snippet demonstrates how to use the 'excludeExtended' property in the Register snippet to exclude specific fields from being saved as extended fields. This is useful for fields that do not require storage.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-custom-fields.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Register? &excludeExtended=`nospam,customProp`]]\n```\n\n----------------------------------------\n\nTITLE: Inner Element Configuration in MODx Forms\nDESCRIPTION: Allows specifying a chunk or snippet for rendering form elements with support for placeholders and optional file-based chunks\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"inner_element\": \"name.chunk.tpl\", \"chunks_path\": \"optional_path\"}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Document Identifier (Internal Use)\nDESCRIPTION: The `modRequest\\->_cleanResourceIdentifier()` function serves to clean resource identifiers but is intended for internal use only and is not part of the public API, hence should not be used externally within MODX development.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\nmodX\\->cleanDocumentIdentifier()\n```\n\n----------------------------------------\n\nTITLE: Retrieving MODX Action Identifiers\nDESCRIPTION: Retrieves action identifiers for MODX manager controllers, supporting namespace-prefixed actions in MODX 2.2+.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/custom-manager-pages/modext/modext-modx-object.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar actionId = MODx.action['resource/create'];\n```\n\nLANGUAGE: javascript\nCODE:\n```\nvar actionId = MODx.action['mycomponent:controllers/index'];\n```\n\n----------------------------------------\n\nTITLE: Basic Select Method Syntax in PHP\nDESCRIPTION: Shows the basic syntax for using getSelectColumns method to specify columns in a query.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngetSelectColumns($className, $tableAlias= '', $columnPrefix= '', $columns= array (), $exclude= false)\n```\n\n----------------------------------------\n\nTITLE: Using alternateClass Output Filter\nDESCRIPTION: Example of implementing the alternateClass output filter in a template to style alternate rows.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/custom.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n[[+component.idx:alternateClass=`alt`]]\n```\n\n----------------------------------------\n\nTITLE: Specifying Snippet in Log Message in PHP\nDESCRIPTION: Shows how to add extra information to the log message by specifying the snippet name.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.log.md#2025-04-17_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$xpdo->log(xPDO::LOG_LEVEL_ERROR, 'An error occurred.', '', 'MySnippet');\n```\n\n----------------------------------------\n\nTITLE: Simple Option Retrieval Example in PHP\nDESCRIPTION: Demonstrates retrieving a basic configuration setting for xPDO::OPT_HYDRATE_FIELDS.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoobject/configuration-accessors/getoption.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$hydrateFields = $xpdo->getOption(xPDO::OPT_HYDRATE_FIELDS);\n```\n\n----------------------------------------\n\nTITLE: CHUNK Binding Syntax\nDESCRIPTION: Shows the basic syntax for binding a Template Variable to a chunk, where chunk_name refers to the name of the target chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/chunk-binding.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@CHUNK chunk_name\n```\n\n----------------------------------------\n\nTITLE: Fixing Newsletter Window Rendering Issue\nDESCRIPTION: Updated code to properly handle multiple newsletter windows by destroying existing windows before creating new ones. Ensures each window shows the correct subscriber data.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-edit-window/index.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n,listeners: {\n    success: {fn:function® {\n        // Если окно еже есть - закрываем и уничтожаем\n        if (this.windows.updateNewsletter) {\n            this.windows.updateNewsletter.close();\n            this.windows.updateNewsletter.destroy();\n        }\n        // Создаём новое окно\n        this.windows.updateNewsletter = MODx.load({\n            xtype: 'sendex-window-newsletter-update'\n            ,record: r\n            ,listeners: {\n                success: {fn:function() { this.refresh(); },scope:this}\n            }\n        });\n        this.windows.updateNewsletter.fp.getForm().reset();\n        this.windows.updateNewsletter.fp.getForm().setValues(r.object);\n        this.windows.updateNewsletter.show(e.target);\n    },scope:this}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure Example - PHP\nDESCRIPTION: Example showing how to use the writeTree method to create a new directory structure using the cache manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.writetree.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xpdo->cacheManager->writeTree('/path/to/new/directory/');\n```\n\n----------------------------------------\n\nTITLE: Rendered Output of Chunk with Properties in PHP\nDESCRIPTION: Shows the final output after the MODX parser has processed the chunk with the provided property value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/index.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nHello George!\n```\n\n----------------------------------------\n\nTITLE: Displaying Latest Listings with bdListings in MODX\nDESCRIPTION: This snippet shows how to display the five most recent listings using the bdListings snippet with descending sort by creation date. It creates an unordered list with a heading that can be styled with the ID 'latest_ads'.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bdlistings/bdlistings.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<h3>Lastest 5 Ads</h3>\n<ul id=\"latest_ads\">\n[[!bdListings? &sort=`{\"createdon\":\"DESC\"}`  &tplRow=`bdl.listings.list` &limit=`5`]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Fetching updates from the remote repository\nDESCRIPTION: This snippet fetches updates from the remote repository after a merge.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"git fetch origin\"\n```\n\n----------------------------------------\n\nTITLE: Conditionally Fetching Doodles with Rowboat in PHP\nDESCRIPTION: This example demonstrates a Rowboat snippet call to grab Doodles where the description isn't empty or the name is 'Test'. It illustrates the usage of complex conditions in the &where parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rowboat/rowboat.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[!Rowboat?\n   &table=`modx_doodles`\n   &tpl=`myDoodle`\n   &limit=`10`\n   &where=`{\"description:!=\":\"\",\"OR:name\":\"Test\"}`\n   &sortBy=`name`\n]]\n```\n\n----------------------------------------\n\nTITLE: MODx.FormPanel Configuration Parameters\nDESCRIPTION: Key configuration parameters unique to MODx.FormPanel that extend the base Ext.FormPanel functionality\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modx.formpanel.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  saveMsg: 'Saving...',\n  allowDrop: true,\n  useLoadingMask: false,\n  onDirtyForm: this.getForm()\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Output in OnLoadWebPageCache\nDESCRIPTION: Demonstrates how to override the output of a cached resource using the OnLoadWebPageCache event in MODX\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Override Output\\n$modx->event->params['resource']->_content = 'Overridden...'\n```\n\n----------------------------------------\n\nTITLE: Git Ignore Configuration\nDESCRIPTION: Configuration to exclude PhpStorm project directory from version control\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/git-basics/index.md#2025-04-17_snippet_2\n\nLANGUAGE: gitignore\nCODE:\n```\n.idea\n```\n\n----------------------------------------\n\nTITLE: Initializing FormIt with Field Snippets\nDESCRIPTION: Basic FormIt setup with field snippets for form HTML management, including validation, email hooks, and field definitions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.tutorial.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FormIt?\n    &hooks=`math,spam,email,redirect`\n    &emailTpl=`ContactFormReport`\n    &emailTo=`[[++emailsender]]`\n    &emailSubject=`New message from [[++site_name]] [[*pagetitle]] page.`\n    &redirectTo=`[[++site_start]]`\n    &submitVar=`submitForm` &errTpl=`[[+error]] `\n    &validate=`nospam:blank,full_name:required,email:email:required,message:required`\n]]\n[[!fieldSetDefaults? &prefix=`fi.` &outer_type=`default` &tpl=`fieldTypesTpl` &outer_tpl=`fieldWrapTpl`]]\n<div>[[!+fi.error.error_message]] [[!+fi.validation_error_message]] [[!+fi.error.recaptcha]]</div>\n\n<form id=\"ContactForm\" action=\"[[~[[*id]]]]#ContactForm\" method=\"post\"><div>\n<input name=\"nospam\" type=\"hidden\" />\n[[!field? &type=`text` &name=`full_name` &req=`1`]]\n[[!field? &type=`text` &name=`email` &req=`1`]]\n[[!field? &type=`text` &name=`phone`]]\n[[!field? &type=`textarea` &name=`message` &class=`cleardefault` &req=`1`]]\n[[!field? &type=`text` &req=`1` &name=`math` &label=`What is [[!+fi.op1]] [[!+fi.operator]] [[!+fi.op2]]?`]]\n    <input type=\"hidden\" name=\"op1\" value=\"[[!+fi.op1]]\" />\n    <input type=\"hidden\" name=\"op2\" value=\"[[!+fi.op2]]\" />\n    <input type=\"hidden\" name=\"operator\" value=\"[[!+fi.operator]]\" />\n[[!field? &type=`submit` &name=`submitForm` &label=` ` &message=`Send this Message!`]]\n</div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: GetResources Direct Resources Query - PHP\nDESCRIPTION: Outputs only specifically listed resources using a custom template chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getresources/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n[[getResources? &parents=`-1` &resources=`10,11,12` &tpl=`myRowTpl`]]\n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Packages with Custom Table Prefixes\nDESCRIPTION: JSON configuration example that demonstrates how to specify a custom table prefix for an extension package using the tablePrefix key, useful when your extension needs to use tables with a different prefix than the default MODX tables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/extension_packages.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[{\"extendeduser\":{\"path\":\"[[++core_path]]components/extendeduser/model/\",\"tablePrefix\":\"ext_\"}},{\"articles\":{\"path\":\"[[++core_path]]components/articles/model/\"}}]\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Row Template for Wayfinder\nDESCRIPTION: Template chunk for Wayfinder to create jQuery tab links. This template formats list items with Wayfinder-specific placeholders for navigation items.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<li[[+wf.id]][[+wf.classes]]><a href=\"[[+wf.link]]\" title=\"[[+wf.title]]\">[[+wf.linktext]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Debugging Discuss Templates HTML\nDESCRIPTION: This HTML snippet showcases how enabling the “discuss.debug_templates” setting provides comment-based template debugging in Discuss themes. HTML comments are inserted pre- and post-template chunks for easy identification. No special dependencies are required; the feature is activated through system settings. The snippet identifies template file locations and their corresponding HTML structure.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/discuss/discuss.creating-a-discuss-theme.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Start: board/disBoardLi from file: themes/default/chunks/board/disboardli.chunk.tpl -->\n <div class=\"Depth2 row dis-category h-group dis-category-1 dis-unread\">\n    <a href=\"http://localhost/modx-stable2/forums/board/1/blue-sky\" class=\"h-group\">\n        <div class=\"f1-f7\">\n            <div class=\"wrap\">\n                <span class=\"folder\">35</span>\n                <strong>Blue Sky</strong>\n                <p class=\"dis-board-description\">Thoughts and peer-to-peer discussions for Partners only</p>\n            </div>\n        </div>\n        <div class=\"f8-f10\">\n            <span class=\"clickable\" data-link=\"http://localhost/modx-stable2/forums/thread/74739/this-is-a-test/#dis-post-414487\">This is a test</span>\n        </div>\n        <div class=\"f11 l-txtcenter\">418</div>\n        <div class=\"f12 l-txtcenter\">37</div>\n    </a>\n    <div class=\"h-group f-all\"><p class=\"dis-board-subs dis-unread\">\n<!-- Start: board/disSubForumLink from file: themes/default/chunks/board/dissubforumlink.chunk.tpl -->\n <a href=\"forums/board/?board=277\">New Board</a>\n\n<!-- /End: board/disSubForumLink -->\n</p></div>\n</div>\n\n<!-- /End: board/disBoardLi -->\n```\n\n----------------------------------------\n\nTITLE: Event Handling in MODX Processor\nDESCRIPTION: Triggers the OnBeforeChunkFormSave event before saving the chunk.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-3.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// invoke OnBeforeChunkFormSave event\n$modx->invokeEvent('OnBeforeChunkFormSave',array(\n    'mode'  => modSystemEvent::MODE_NEW,\n    'id'    => $_POST['id'],\n));\n```\n\n----------------------------------------\n\nTITLE: Clonando el repositorio MODX Revolution en PHP\nDESCRIPTION: Comando Git para clonar el repositorio principal de MODX Revolution desde GitHub.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/git.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ngit clone http://github.com/modxcms/revolution.git\n```\n\n----------------------------------------\n\nTITLE: MODX Model Loading Example\nDESCRIPTION: Example of loading multiple component models in MODX for building queries.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoResources.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nms2gallery,msearch2\n```\n\n----------------------------------------\n\nTITLE: Creating Tab Row Template for getResources\nDESCRIPTION: Template chunk for getResources to create jQuery tab links. The template renders individual list items with links to MODX resources.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/jquery-tabs.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<li id=\"[[+id]]\"><a href=\"[[~[[+id]]]]]\" title=\"[[+longtitle]]\">[[+pagetitle]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Registering ExtJS Widget for Subscription Table\nDESCRIPTION: This snippet registers the ExtJS widget, `Sendex.grid.Newsletters`, with the alias `sendex-grid-newsletters`. This allows the widget to be instantiated using the `xtype` configuration option in ExtJS layouts and components.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/creating-components/subscription-table/index.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nExt.reg('sendex-grid-newsletters',Sendex.grid.Newsletters);\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple Objects with updateCollection() in xPDO (PHP)\nDESCRIPTION: This code snippet outlines the usage of `xPDO->updateCollection()` to update multiple objects at once. It shows the function signature and describes its parameters: `$className`, `$setValues`, and `$criteria`.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function updateCollection($className, array $set, $criteria= null) {\n```\n\n----------------------------------------\n\nTITLE: Removing MODX Object\nDESCRIPTION: Shows how to remove a MODX object from the database, which also removes any composite relationships defined in the object's schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/getting-started/tutorial/part-2.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$template->remove();\n```\n\n----------------------------------------\n\nTITLE: Configuring MIGX Form Tabs for Fancybox Image Integration\nDESCRIPTION: This JSON configuration defines the form tabs for the MIGX TV used to manage Fancybox images. It includes fields for placeholder, title, and image selection.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/fancybox-images-with-seperate-placeholders-in-richtext-content.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"caption\": \"Image\",\n  \"fields\": [{\n      \"field\": \"placeholder\",\n      \"caption\": \"Placeholder\",\n      \"inputTV\": \"placeholderTV\"\n    },\n    {\n      \"field\": \"title\",\n      \"caption\": \"Title\",\n      \"description\": \"Title for the image.\"\n    },\n    {\n      \"field\": \"image\",\n      \"caption\": \"Image\",\n      \"inputTV\": \"imageTV\"\n    }\n\n  ]\n}]\n```\n\n----------------------------------------\n\nTITLE: Using Resource ID Tag in MODX Revolution HTML\nDESCRIPTION: Demonstrates how to use the Resource ID tag in a link within MODX Revolution templates. This tag is often used for creating bookmarks or self-referential links.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/common.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*id]]]]\">Bookmark this page!</a>\n```\n\n----------------------------------------\n\nTITLE: Listing Past Events with mxCalendar in PHP\nDESCRIPTION: This snippet outlines how to configure the mxCalendar snippet to return a list of past events. Key parameters include directional filter set to 'past', starting date, and ordering of results from most recent to oldest.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/mxcalendar.examples.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[[!mxcalendar?\n    &displayType=`list`\n    &elDirectional=`past`\n    &isLocked=`1`\n    &resourceId=`71`\n    &tplListHeading=```\n    &tplListItem=`tplListItemNewChunk`\n    &calendarFilter=`2`\n    &elStartDate=`now`\n    &tplListWrap=`tplListWrapNewChunk`\n    &dir=`DESC`\n]]\n```\n\n----------------------------------------\n\nTITLE: Referencing a Chunk in MODX\nDESCRIPTION: Demonstrates how to reference a Chunk by name in MODX templates or page content.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/chunks.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[$chunkName]]\n```\n\n----------------------------------------\n\nTITLE: Extension Package Configuration Example\nDESCRIPTION: Example of how the extension package configuration appears in MODX System Settings after successful installation. Shows the JSON structure stored in the extension_packages key.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[{\"copyrightedresource\":{\"path\":\"[[++core_path]]components/copyrightedresource/model/\"}}]\n```\n\n----------------------------------------\n\nTITLE: Using Specific Cache Partitions with xPDOCacheManager\nDESCRIPTION: Shows how to use a specific cache partition by passing configuration options to xPDOCacheManager methods. This example uses xPDOAPCCache as the cache handler.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/caching/index.md#2025-04-17_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$cacheOptions = array(\n    xPDO::OPT_CACHE_KEY => 'myCache',\n    xPDO::OPT_CACHE_HANDLER => 'cache.xPDOAPCCache',\n);\n\n$xpdo->cacheManager->set('testdata', 'My cached data.', 0, $cacheOptions);\n\necho $xpdo->cacheManager->get('testdata', $cacheOptions);\n// outputs: My cached data.\n\n$xpdo->cacheManager->delete('testdata', $cacheOptions);\n```\n\n----------------------------------------\n\nTITLE: Unset Multiple Placeholders in MODX using PHP\nDESCRIPTION: This snippet demonstrates how to use the modX::unsetPlaceholders method to unset multiple placeholders. It shows two examples: unsetting specific placeholders using an array of keys, and unsetting all placeholders with a common prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.unsetplaceholders.md#2025-04-17_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->unsetPlaceholders(array('my.name','my.email'));\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$modx->unsetPlaceholders('my.');\n```\n\n----------------------------------------\n\nTITLE: Basic Output Modifier Usage in ModX\nDESCRIPTION: Examples of basic output modifier usage including default values and placeholder operations\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[[+placeholder:default=`A default value!`]]\n```\n\n----------------------------------------\n\nTITLE: Adding Subscriber Code Field Schema in XML\nDESCRIPTION: XML schema definition for adding a 'code' field and index to the sxSubscriber object for handling unsubscribe functionality\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/self-subscribe.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"sxSubscriber\" table=\"sendex_subscribers\" extends=\"xPDOSimpleObject\">\n    ....\n    <field key=\"code\" dbtype=\"char\" precision=\"40\" phptype=\"string\" null=\"true\" default=\"\" />\n\n    ....\n    <index alias=\"code\" name=\"code\" primary=\"false\" unique=\"true\" type=\"BTREE\">\n        <column key=\"code\" length=\"\" collation=\"A\" null=\"false\" />\n    </index>\n</object>\n```\n\n----------------------------------------\n\nTITLE: Accessing MODX Component Rename Script\nDESCRIPTION: Example URL to access the rename_it.php script for renaming a MODX component stub. This script requires specifying a new name for the component.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/creating-components/git-basics.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nhttp://c2263.paas2.ams.modxcloud.com/Sendex/rename_it.php\n```\n\n----------------------------------------\n\nTITLE: Loading Required MODX Processor Classes\nDESCRIPTION: Initial setup code to load the necessary MODX processor base classes for custom resource processing.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-resources/step-4-processors.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once MODX_CORE_PATH.'model/modx/modprocessor.class.php';\nrequire_once MODX_CORE_PATH.'model/modx/processors/resource/create.class.php';\nrequire_once MODX_CORE_PATH.'model/modx/processors/resource/update.class.php';\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of FirstChildRedirect Snippet in MODX\nDESCRIPTION: This snippet call demonstrates the simplest way to use FirstChildRedirect. It should be placed uncached in the content or template of the container resource you want to redirect to its first child.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/firstchildredirect/index.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[!FirstChildRedirect]]\n```\n\n----------------------------------------\n\nTITLE: MIGX Configuration - layout_3 Formtabs\nDESCRIPTION: JSON configuration for the third MIGX layout with form tabs, introducing a third set of content fields for maximum flexibility\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/migx/migx.tutorials/varying-layout-boxes/configurator-version.md#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{\n  \"caption\": \"Row Format\",\n  \"fields\": [{\n    \"field\": \"fake\",\n    \"inputTVtype\": \"hidden\"\n  }]\n}, {\n  \"caption\": \"First\",\n  \"fields\": [{\n    \"field\": \"cell_1_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"image\"\n  }, {\n    \"field\": \"cell_1_headline\",\n    \"caption\": \"Headline\"\n  }, {\n    \"field\": \"cell_1_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"richtext\"\n  }]\n}, {\n  \"caption\": \"Second\",\n  \"fields\": [{\n    \"field\": \"cell_2_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"image\"\n  }, {\n    \"field\": \"cell_2_headline\",\n    \"caption\": \"Headline\"\n  }, {\n    \"field\": \"cell_2_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"richtext\"\n  }]\n}, {\n  \"caption\": \"Third\",\n  \"fields\": [{\n    \"field\": \"cell_3_image\",\n    \"caption\": \"Image\",\n    \"inputTVtype\": \"image\"\n  }, {\n    \"field\": \"cell_3_headline\",\n    \"caption\": \"Headline\"\n  }, {\n    \"field\": \"cell_3_content\",\n    \"caption\": \"Content\",\n    \"inputTVtype\": \"richtext\"\n  }]\n}]\n```\n\n----------------------------------------\n\nTITLE: Resource ID Tag in Link Syntax\nDESCRIPTION: Uses the resource ID tag to create a dynamic bookmark link referencing the current page's identifier\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/common.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"[[~[[*id]]]]\">\n  Bookmark this page!\n</a>\n```\n\n----------------------------------------\n\nTITLE: Adding System Settings Vehicle\nDESCRIPTION: Shows how to load and add system settings to the package from an external transport file with specific attributes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/* load system settings */\n$settings = include $sources['data'].'transport.settings.php';\n\n$attributes= array(\n    xPDOTransport::UNIQUE_KEY => 'key',\n    xPDOTransport::PRESERVE_KEYS => true,\n    xPDOTransport::UPDATE_OBJECT => false,\n);\nforeach ($settings as $setting) {\n    $vehicle = $builder->createVehicle($setting,$attributes);\n    $builder->putVehicle($vehicle);\n}\nunset($settings,$setting,$attributes);\n```\n\n----------------------------------------\n\nTITLE: Setting session.gc_maxlifetime in MODX Revolution\nDESCRIPTION: The session_gc_maxlifetime setting customizes the PHP ini setting session.gc_maxlifetime when using the modSessionHandler. It determines how long session data is kept before being considered garbage and potentially removed.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/session_gc_maxlifetime.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nsession.gc_maxlifetime = 604800\n```\n\n----------------------------------------\n\nTITLE: NGINX REST API Location Configuration\nDESCRIPTION: NGINX server configuration for handling REST API requests.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/developing-restful-api.md#2025-04-17_snippet_2\n\nLANGUAGE: plain\nCODE:\n```\nlocation /rest/ {\n    try_files $uri @modx_rest;\n}\nlocation @modx_rest {\n    rewrite ^/rest/(.*)$ /rest/index.php?_rest=$1&$args last;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote\nDESCRIPTION: Command to add the original repository as an upstream remote for syncing\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/pr_workflow.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/modxcms/fred-theme-starter.git\n```\n\n----------------------------------------\n\nTITLE: Initializing MODX Engine Context - PHP Method Signature\nDESCRIPTION: Method signature for initializing MODX engine into a context. Takes an optional context key (defaults to 'web') and options array as parameters. Returns void.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.initialize.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid initialize ([string $contextKey = 'web'], [$options = null])\n```\n\n----------------------------------------\n\nTITLE: TV Price Setting Plugin in PHP\nDESCRIPTION: Plugin that sets a specific TV value for resources with a particular template after saving.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/ondocformsave.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnDocFormSave':\n        //if the resource has a template=5\n        if ($resource->get('template') == 5) {  \n            // after saving the TV value price=128\n            if(!$resource->setTVValue('price', '128')) {\n                $modx->log(modX::LOG_LEVEL_ERROR, 'Having problems setting the TV value.');\n            }\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Email Template with Custom Hook Values in PHP\nDESCRIPTION: This chunk demonstrates how to include a custom value (datestamp_submitted) set by the custom hook in the email template.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formit/formit.tutorials-and-examples/examples.custom-hook.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n[[+name]] ([[+email]]) <br/>\n\nDate Submitted: [[+datestamp_submitted]]<br/>\n```\n\n----------------------------------------\n\nTITLE: HTML Page Link Template\nDESCRIPTION: Default template chunk for rendering individual page links in the pagination interface.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pdoTools/Snippets/pdoPage.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n@INLINE <li><a href=\"[[+href]]\">[[+pageNo]]</a></li>\n```\n\n----------------------------------------\n\nTITLE: Clonando y configurando un fork de MODX Revolution en PHP\nDESCRIPTION: Comandos Git para clonar un fork personal de MODX Revolution y agregar el repositorio original como remoto.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/git.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ngit clone git@github.com:tunombredeusuariogit/revolution.git\ncd revolution\ngit remote add upstream -f http://github.com/modxcms/revolution.git\n```\n\n----------------------------------------\n\nTITLE: Setting Adhoc Fields with fromArray() in xPDO (PHP)\nDESCRIPTION: This code shows how to set adhoc fields using the `$adhocValues` parameter in `fromArray()`. Setting `$adhocValues` to `true` will allow you to set object variables that are not defined as fields in the object's schema.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/setting-object-fields.md#2025-04-17_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$myBox->fromArray(array(\n  'width' 5',\n  'notRealField' => 'boo',\n),'',false,false,true);\n```\n\n----------------------------------------\n\nTITLE: Custom Output Modifier (Snippet Usage)\nDESCRIPTION: This example shows how to use a snippet as a custom output modifier in MODX. The snippet is called by specifying its name after a colon in the output modifier syntax. The input, options, token, name, and tag values are passed to the snippet.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n[[*pagetitle:makeExciting=`4`]]\n```\n\n----------------------------------------\n\nTITLE: Implementing PageBreaker Navigation Template in MODX\nDESCRIPTION: A template chunk for rendering pagination navigation controls. It displays previous/next page links, current page number, and total pages count, with conditional logic for link display and styling.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/pagebreaker/tpl.pagebreaker.navigation.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<div style=\"margin-top: 10px; text-align: center;\"><div style=\"margin-top: 10px; text-align: center;\">\n  [[+pb.link_prev:isnotempty=`<a href=\"[[+pb.link_prev]]\" class=\"load_page\">&larr;&nbsp;Previous page</a>`]]\n  &nbsp;&nbsp;\n  <b>[[+pb.current]]</b> from <b>[[+pb.total]]</b>\n  &nbsp;&nbsp;\n  [[+pb.link_next:ne=``:then=`<a href=\"[[+pb.link_next]]\" class=\"load_page\">Next page&nbsp;&rarr;</a>`:else=`<a href=\"[[~[[*id]]]]\" class=\"load_page\">To beginning</a>`]]\n</div>\n```\n\n----------------------------------------\n\nTITLE: PHP xPDO loadClass Method Syntax\nDESCRIPTION: Shows the method signature for loadClass with its parameters including fqn (fully qualified name), path, ignorePkg, and transient flags.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.loadclass.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nstring|boolean loadClass (string $fqn, [ $path = ''], [ $ignorePkg = false], [ $transient = false])\n```\n\n----------------------------------------\n\nTITLE: Switching Git branches\nDESCRIPTION: This snippet demonstrates how to switch between different branches in the Git repository, essential for working on different MODX Revolution versions or features.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/git.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\"git fetch upstream\\ngit checkout 2.5.x upstream/2.5.x\"\n```\n\n----------------------------------------\n\nTITLE: Implementing xPDO Validation Check\nDESCRIPTION: PHP code demonstrating how to validate an xPDO object against the defined minimum value rule and handle validation errors.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdominvaluevalidationrule.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$output = '';\n$modx->addPackage('test','/path/to/my/test/model/','test_');\n$obj = $modx->newObject('myTest');\n$obj->set('number',12);\n$validator = $obj->getValidator();\nif ($validator->validate() == false) {\n    $messages = $validator->getMessages();\n    foreach ($messages as $errorMsg) {\n        $output .= $errorMsg['message'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Information to MODX Documentation\nDESCRIPTION: Example showing how to connect a translated document to its original English version by adding the translation path to the frontmatter. The path should be provided without version or language prefix.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"Friendly URLs in my language\"\ntranslation: \"getting-started/friendly-urls\"\n---\n```\n\n----------------------------------------\n\nTITLE: Non-Proportional Image Resizing with MODX Revolution - PHP\nDESCRIPTION: This snippet highlights the potential issue when specifying both width and height for resizing, which can lead to non-proportional alterations, therefore, it's recommended to apply cropping afterwards for more control.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/rezimgcrop/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[*tv.images:rezimgcrop=`r-150x75`]]\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationships in XML Schema\nDESCRIPTION: This XML schema snippet defines the structure for a many-to-many relationship between blog posts and tags using xPDO in MODX. It shows the use of `composite` and `aggregate` elements to establish relationships between XML objects corresponding to database tables.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/more-examples.md#2025-04-17_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<object class=\"Blogposts\" table=\"blogposts\" extends=\"xPDOObject\">\n        <field key=\"blogpost_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n        <field key=\"content\" dbtype=\"text\" phptype=\"string\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"blogpost_id\" collation=\"A\" null=\"false\" />\n        </index>\n        <composite alias=\"Comments\" class=\"Comments\" local=\"blogpost_id\" foreign=\"blogpost_id\" cardinality=\"many\" owner=\"local\" />\n        <composite alias=\"BlogpostsTags\" class=\"BlogpostsTags\" local=\"blogpost_id\" foreign=\"blogpost_id\" cardinality=\"many\" owner=\"local\" />\n</object>\n<object class=\"Tags\" table=\"tags\" extends=\"xPDOObject\">\n        <field key=\"tag_id\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"false\" index=\"pk\"  generated=\"native\" />\n        <field key=\"name\" dbtype=\"varchar\" precision=\"255\" phptype=\"string\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"tag_id\" collation=\"A\" null=\"false\" />\n        </index>\n        <composite alias=\"BlogpostsTags\" class=\"BlogpostsTags\" local=\"tag_id\" foreign=\"tag_id\" cardinality=\"many\" owner=\"local\" />\n</object>\n<object class=\"BlogpostsTags\" table=\"blogposts_tags\" extends=\"xPDOSimpleObject\">\n        <field key=\"blogpost\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"true\" />\n        <field key=\"tag\" dbtype=\"int\" precision=\"11\" phptype=\"integer\" null=\"true\" />\n        <index alias=\"PRIMARY\" name=\"PRIMARY\" primary=\"true\" unique=\"true\">\n                <column key=\"id\" collation=\"A\" null=\"false\" />\n        </index>\n        <aggregate alias=\"Tags\" class=\"Tags\" local=\"tag\" foreign=\"tag_id\" cardinality=\"one\" owner=\"foreign\" />\n        <aggregate alias=\"Blogposts\" class=\"Blogposts\" local=\"blogpost\" foreign=\"blogpost_id\" cardinality=\"one\" owner=\"foreign\" />\n</object>\n```\n\n----------------------------------------\n\nTITLE: Events Calendar Template with jQuery and Calendar Scripts\nDESCRIPTION: HTML template for rendering an events calendar, including jQuery and calendar JavaScript dependencies. Provides navigation links and a calendar div for event display.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eventsx/index.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>[[++site_name]] - [[*pagetitle]]</title>\n        <base href=\"[[++site_url]]\" />\n        <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"></script>\n        <script\n            type=\"text/javascript\"\n            src=\"assets/components/eventsx/js/web/jquery.calendar-widget.js\"\n        ></script>\n        <script\n            type=\"text/javascript\"\n            src=\"assets/components/eventsx/js/web/calendar.js\"\n        ></script>\n        <link\n            rel=\"stylesheet\"\n            type=\"text/css\"\n            href=\"assets/components/eventsx/css/calendar.css\"\n        />\n    </head>\n    <body>\n        <a href=\"\" id=\"prevMonth\">previous month</a>\n        <a href=\"\" id=\"nextMonth\">next month</a>\n        <div id=\"calendar\"></div>\n        [[*content]]\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using OR Filters for Resource Queries in PHP\nDESCRIPTION: This code snippet demonstrates how to create an OR filter condition using two pipe symbols (||) to fetch resources that match any of the specified template variable values. The filter syntax is explained in detail for clarity.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/renderresources/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nmytv==somevalue||mytv==othervalue\n```\n\n----------------------------------------\n\nTITLE: Tracking Image Placeholder Example\nDESCRIPTION: Demonstrates how to use the tracking image placeholder in an HTML image tag for email templates\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/eletters/eletters.templates.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"[[+trackingImage]]\" alt=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Complex Plugin for OnLoadWebPageCache Event\nDESCRIPTION: A comprehensive example of a plugin that modifies page title, TV value, and content in the OnLoadWebPageCache event\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$eventName = $modx->event->name;\\nswitch($eventName) {\\n    case 'OnLoadWebPageCache':\\n        $modx->event->params['resource']->pagetitle = 'Новый заголовок';\\n        // меняем значение ТВ\\n        $tv = $modx->event->params['resource']->price[1] = '128';\\n        $modx->event->params['resource']->_content = 'Новый контент'.$tv;\\n        break;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creando una rama de seguimiento local en Git para MODX\nDESCRIPTION: Comando Git para crear una rama local que sigue una rama remota específica del repositorio MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/es/getting-started/installation/git.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngit checkout -b 2.x origin/2.x\n```\n\n----------------------------------------\n\nTITLE: Rebuild Apache Configuration on cPanel\nDESCRIPTION: This shell command, specific to cPanel servers, rebuilds the Apache configuration file. This ensures that any changes are properly integrated and that the configuration is consistent.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n/scripts/rebuildhttpdconf\n```\n\n----------------------------------------\n\nTITLE: Web Request Example - PHP\nDESCRIPTION: Example URL showing how to execute the upgrade script via web request with query parameters.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/defining-a-schema/upgrade-schema-v1.0-to-v1.1.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nhttp://localhost/food/xpdo/tools/schema/upgrade-mysql-1.1.php?pkg=sample&pkg_path=models/&schema_name=sample.mysql.schema.xml&schema_path=schemas/&echo=true&write=true&regen=true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Box Object with Related BoxColors and Color Instances in PHP\nDESCRIPTION: Example of using getObjectGraph to retrieve a Box object with ID 134, along with related BoxColors and Color instances already loaded.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdo/xpdo.getobjectgraph.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$box = $xpdo->getObjectGraph('Box', array('BoxColors' => array('Color' => array())), 134);\nforeach ($box->getMany('BoxColors') as $boxColor) {\n    echo $boxColor->getOne('Color')->get('name');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Spellchecker to TinyMCE Custom Plugins in MODX\nDESCRIPTION: This snippet shows how to add the spellchecker to the comma-separated list of custom plugins for TinyMCE in MODX Revolution system settings.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/tinymce/tinymce.spellchecker.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Custom Plugins (key: tiny.custom_plugins)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resources with getResources Snippet in MODX\nDESCRIPTION: This snippet call retrieves resources from section 122 in the 'revolution' context using the getResources snippet. It's likely used to dynamically include related content on the page.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/client-proofing/form-customization/rules/field-default.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section? &parents=`122` &context=`revolution`]]\n```\n\n----------------------------------------\n\nTITLE: Using cmCamperDetails Placeholders in a MODX Template\nDESCRIPTION: This code snippet demonstrates how to use the placeholders set by the cmCamperDetails snippet in a MODX template.  It retrieves uncached placeholders prefixed with 'cm.' for brand, type, price, car, and engine, and provides default values (non-breaking spaces) if the placeholders are empty. Uncached placeholders are used to ensure the template reflects the current request.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/campermanagement/campermanagement.developing-the-front-end/cmcamperdetails-snippet.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<ul>\n  <li><span>Brand</span>[[!+cm.brand:default=`&nbsp;`]]</li>\n  <li><span>Type</span>[[!+cm.type:default=`&nbsp;`]]</li>\n  <li><span>Price</span>&euro; [[!+cm.price:default=`&nbsp;`]]</li>\n  <li><span>Car</span>[[!+cm.car:default=`&nbsp;`]]</li>\n  <li><span>Engine</span>[[!+cm.engine:default=`&nbsp;`]]</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Getting Full Table Name in modX\nDESCRIPTION: Retrieves the full name of a table within the database, combining the class name with the database's naming conventions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nmodX->getFullTableName()\n```\n\n----------------------------------------\n\nTITLE: Document Type sekFancyBox Implementation in PHP\nDESCRIPTION: Example of implementing a document modal window with sekFancyBox to display content from another MODX resource. This is useful for displaying formatted information without placing it inline.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/sekfancybox/index.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n[[sekfancybox?\n &type=`document`\n &linktext=`link to document`\n &link=`[[~19]]`\n]]\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Menu Vehicle with Related Actions\nDESCRIPTION: Shows how to create a vehicle containing a menu object with related action objects, including preservation of keys and update settings for both parent and child objects.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/transport-packages/build-script.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$action= $modx->newObject('modAction');\n$action->fromArray(array(\n    'id' => 1,\n    'namespace' => 'quip',\n    'parent' => '0',\n    'controller' => 'index',\n    'haslayout' => '1',\n    'lang_topics' => 'quip:default,file',\n    'assets' => '',\n),'',true,true);\n$menu= $modx->newObject('modMenu');\n$menu->fromArray(array(\n    'text' => 'quip',\n    'parent' => 'components',\n    'description' => 'quip_desc',\n    'icon' => 'images/icons/plugin.gif',\n    'menuindex' => '0',\n    'params' => '',\n    'handler' => '',\n),'',true,true);\n$menu->addOne($action);\n$vehicle= $builder->createVehicle($menu,array (\n    xPDOTransport::PRESERVE_KEYS => true,\n    xPDOTransport::UPDATE_OBJECT => true,\n    xPDOTransport::UNIQUE_KEY => 'text',\n    xPDOTransport::RELATED_OBJECTS => true,\n    xPDOTransport::RELATED_OBJECT_ATTRIBUTES => array (\n        'Action' => array (\n            xPDOTransport::PRESERVE_KEYS => false,\n            xPDOTransport::UPDATE_OBJECT => true,\n            xPDOTransport::UNIQUE_KEY => array ('namespace','controller'),\n        ),\n    ),\n));\n```\n\n----------------------------------------\n\nTITLE: Conditional Modifier 'lte' in MODX\nDESCRIPTION: Demonstrates the usage of 'lte' (less than or equal to) modifier for conditional output. It checks if the number of books is less than or equal to 5 and outputs a corresponding message.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tag-syntax/output-filters/index.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n[[+numbooks:lte=`5`:then=`Есть 5 или менее 5 книг`:else=`Есть более 5 книг`]]\n```\n\n----------------------------------------\n\nTITLE: Update Profile Photo PostHook in MODX\nDESCRIPTION: Implementation of a postHook in the UpdateProfile snippet to manage photo uploads, including handling file extensions, error logging, and profile photo path updates. Presumes sufficient permissions on user and content directories.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/login/login.tutorials/using-pre-and-post-hooks.md#2025-04-17_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// get user details\n$profile = $modx->user->getOne('Profile');\n//if post\nif(isset($_POST['login-updprof-btn'])) {\n    //set extensions\n    $validExt=array('jpg','png','jpeg');\n    //set path for file\n    $pathToFile = $modx->config['base_path'].'site_content/content/users/';\n    // set path for cmp because of media resource\n    $pathToFileProfile = 'users/';\n    // get file name\n    $nameFile = $_FILES['photo']['name'];\n    // lowercase and exxtention\n    $extFile = mb_strtolower(pathinfo($nameFile, PATHINFO_EXTENSION));\n    // the tmp file\n    $tmpFile = $_FILES['photo']['tmp_name'];\n    // upload is ok then\n    if((is_uploaded_file($tmpFile)) &&! ($_FILES['photo']['error'])){\n        // check extention types\n        if (in_array($extFile,$validExt)) {\n            // make a file name\n            $tmpzname='user'.$modx->user->get('id');\n            // add a hash and extension\n            $nameFile=hash('adler32',$tmpzname).'.'.$extFile;\n            //full name with path\n            $fullNameFile = $pathToFile.$nameFile;\n            // copy the tmp to new one move_uploaded_file1 and rename1 did not work this will overwrite the old pic as they all have same name\n            copy($tmpFile, $fullNameFile);\n            // name and path for profile as its different because of media resource\n            $fullNameFileProfile = $pathToFileProfile.$nameFile;\n            // delete old pic in profile\n            $hook->setValue('photo','');\n            //set new pic path\n            $hook->setValue('photo',$fullNameFileProfile);\n        }\n        else{\n            $modx->log(modX::LOG_LEVEL_ERROR,'The image has an invalid extension');\n        }\n    }\n      else {\n        $modx->log(modX::LOG_LEVEL_ERROR,'Error loading file. Error code:'.$_FILES['photo']['error']);\n    }\n} \nreturn true;\n```\n\n----------------------------------------\n\nTITLE: Calling a Non-Cached Snippet in MODX (PHP)\nDESCRIPTION: This code snippet shows how to call a MODX snippet that utilizes custom caching, ensuring it's executed without MODX's default caching mechanisms. This allows the snippet to manage its own caching behavior based on its internal logic and specified lifetimes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/caching/lifetimes.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!testCache]]\n```\n\n----------------------------------------\n\nTITLE: Cache Replace Method Syntax in PHP\nDESCRIPTION: Method signature for replacing a key-value pair in the cache provider. Takes a key, variable reference, optional lifetime in seconds, and optional array of options as parameters. Returns boolean indicating success.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.replace.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nboolean replace (string $key, mixed &$var, [integer $lifetime = 0], [array $options = array()])\n```\n\n----------------------------------------\n\nTITLE: Single Dimension Animation\nDESCRIPTION: Example of animating just the height property of an element\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-manager-pages/modext/modext-tutorials/3.-ext-js-tutorial-animation.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmyDiv1.setHeight(200);\n```\n\n----------------------------------------\n\nTITLE: Validating Plugin Description Field in MODX (PHP)\nDESCRIPTION: Plugin that checks if the description field is empty before saving and displays a warning message if it is not filled out.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforepluginformsave.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforePluginFormSave':\n        if (!$plugin->get('description')){\n            $modx->event->output(\"You haven't forgotten your head at home, but you forgot about the description! =)\");\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Resources using MODX in PHP\nDESCRIPTION: This PHP snippet illustrates how to retrieve specific resources in MODX using the getResources snippet. It involves setting parameters like parents, context, limit, and resources to filter the resource fetching process. It is essential for dynamic content management within the MODX framework.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/boilerx/bx-bottom-close.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[getResources@section?\\n    &parents=`1316`\\n    &context=`extras`\\n    &limit=`0`\\n    &resources=`1316,[[*id]]`\\n]]\n```\n\n----------------------------------------\n\nTITLE: Default maxCrumbTpl HTML\nDESCRIPTION: This is the default HTML structure for the maxCrumbTpl. It is a list item that represents a breadcrumb element.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/breadcrumb.maxcrumbtpl.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<li>...</li>\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Apache Configuration on cPanel\nDESCRIPTION: Command to rebuild the Apache configuration file on a cPanel server after backup.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/scripts/rebuildhttpdconf\n```\n\n----------------------------------------\n\nTITLE: Defining MODX Unauthorized Page Setting Syntax\nDESCRIPTION: System setting definition for unauthorized_page that specifies the resource ID where users should be redirected when accessing unauthorized content. Requires a valid published resource ID and appropriate context permissions.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/unauthorized_page.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Name**: Unauthorized Page\n**Type**: Number\n**Default**: 1\n```\n\n----------------------------------------\n\nTITLE: Using Select with toArray Method\nDESCRIPTION: Demonstrates how to properly use select() with toArray() to ensure only selected fields are returned.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdoquery/xpdoquery.select.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$query = $xpdo->newQuery('modUser');\n$query->select('id,username');\n$users = $xpdo->getCollection('modUser',$query);\nforeach ($users as $u) {\n    print_r($u->toArray()); // will print ALL fields.\n    print_r($u->toArray('',false,true)); // will print ONLY the selected fields.\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid File Filtering Example\nDESCRIPTION: Demonstrates an incorrect attempt to filter files by extension using DIRECTORY binding. This syntax is not supported by MODX.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/elements/template-variables/bindings/directory-binding.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n@DIRECTORY /list/*.jpg  # doesn't work!\n```\n\n----------------------------------------\n\nTITLE: modX::removeAllEventListener Method Syntax in PHP\nDESCRIPTION: The syntax definition for the modX::removeAllEventListener method. This method takes no parameters and returns void.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.removealleventlistener.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid removeAllEventListener ()\n```\n\n----------------------------------------\n\nTITLE: Hidden Field Without Outer Template\nDESCRIPTION: This field snippet showcases how to create a hidden field in MODX, specifying that no outer template should be used.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/formitfastpack/formitfastpack.field.md#2025-04-17_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n[[!field?\n    &type=`hidden`\n    &outer_tpl=``\n    &name=`blank`\n]]\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Variable Values from Cache\nDESCRIPTION: Example of accessing and reading cached Template Variable (TV) values from the resource array.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onloadwebpagecache.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Reading value of TV named \"my_tv\"\n$my_tv = $modx->event->params['resource']->my_tv[1];\n/*\n// Where our array\narray (\n    0 => 'name_of_tv',\n    1 => 'Value of TV Goes here',\n    2 => 'default',\n    3 => NULL,\n    4 => 'text', // <-- TV type\n)\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding File Resolvers to Package Vehicle\nDESCRIPTION: Configures file resolvers to copy assets and core files to the correct locations during package installation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$vehicle->resolve('file',array(\n    'source' => $sources['source_assets'],\n    'target' => \"return MODX_ASSETS_PATH . 'components/';\",\n));\n$vehicle->resolve('file',array(\n    'source' => $sources['source_core'],\n    'target' => \"return MODX_CORE_PATH . 'components/';\",\n));\n```\n\n----------------------------------------\n\nTITLE: Retrieving JSON-Formatted Cache Data in PHP\nDESCRIPTION: Example of retrieving JSON-formatted data from cache using the format option set to xPDO::CACHE_JSON, which properly handles JSON data that was stored with the same format.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.get.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$myJsonData = $xpdo->cacheManager->get('myjson',array('format' => xPDO::CACHE_JSON));\n```\n\n----------------------------------------\n\nTITLE: Creating TV Input Template with ExtJS\nDESCRIPTION: Template file that defines the HTML and JavaScript for rendering a template selection dropdown in the MODX manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/custom-tvs/index.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<select id=\"tv{$tv->id}\" name=\"tv{$tv->id}\" class=\"combobox\"></select>\n<script type=\"text/javascript\">\n// <![CDATA[\n{literal}\nMODx.load({\n{/literal}\n    xtype: 'modx-combo-template'\n    ,name: 'tv{$tv->id}'\n    ,hiddenName: 'tv{$tv->id}'\n    ,transform: 'tv{$tv->id}'\n    ,id: 'tv{$tv->id}'\n    ,width: 300\n    ,value: '{$tv->value}'\n{literal}\n    ,listeners: { 'select': { fn:MODx.fireResourceFormChange, scope:this}}\n});\n{/literal}\n// ]]>\n</script>\n```\n\n----------------------------------------\n\nTITLE: MODX Build Configuration\nDESCRIPTION: Configuration file defining core MODX paths and URLs for the build process.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/tutorials/developing-an-extra/index.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\ndefine('MODX_BASE_PATH', '/www/modx/');\ndefine('MODX_CORE_PATH', MODX_BASE_PATH . 'core/');\ndefine('MODX_MANAGER_PATH', MODX_BASE_PATH . 'manager/');\ndefine('MODX_CONNECTORS_PATH', MODX_BASE_PATH . 'connectors/');\ndefine('MODX_ASSETS_PATH', MODX_BASE_PATH . 'assets/');\ndefine('MODX_BASE_URL','/modx/');\n/* define('MODX_CORE_URL', MODX_BASE_URL . 'core/'); */ /* There isn't a core URL!! */\ndefine('MODX_MANAGER_URL', MODX_BASE_URL . 'manager/');\ndefine('MODX_CONNECTORS_URL', MODX_BASE_URL . 'connectors/');\ndefine('MODX_ASSETS_URL', MODX_BASE_URL . 'assets/');\n```\n\n----------------------------------------\n\nTITLE: Creating Database Example in PHP\nDESCRIPTION: Example showing how to create a new MySQL database named 'MyDatabase' using the createSourceContainer() method with username and password credentials.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdomanager/xpdomanager.createsourcecontainer.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$newDatabaseName = 'MyDatabase';\n$dsn = 'mysql:host=localhost;dbname='.$newDatabaseName.';charset=utf8';\n$manager = $xpdo->getManager();\n$manager->createSourceContainer($dsn,'myusername','mypassword');\n```\n\n----------------------------------------\n\nTITLE: Defining sendErrorPage Method Syntax in PHP\nDESCRIPTION: Shows the method signature for sendErrorPage which accepts an optional array of options parameter.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.senderrorpage.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nvoid sendErrorPage ([array $options = null])\n```\n\n----------------------------------------\n\nTITLE: Getting Column in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->getColumn($name, $dsq)` for getting a column. Use xPDOCriteria->stmt->fetchColumn() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n\"see xPDOCriteria->stmt->fetchColumn()\"\n```\n\n----------------------------------------\n\nTITLE: Verifying xPDO Database Connection in PHP\nDESCRIPTION: This code snippet shows how to verify if the xPDO database connection was successful.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/create-xpdo-instance/connections.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\necho $o=($xpdo->connect()) ? 'Connected' : 'Not Connected';\n```\n\n----------------------------------------\n\nTITLE: Defining xPDO Model Schema with MinValue Validation\nDESCRIPTION: XML schema definition for an xPDO object model that includes a minimum value validation rule. The rule ensures a numeric field 'number' must be at least 20.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/custom-models/validation/xpdominvaluevalidationrule.md#2025-04-17_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<model package=\"test\" baseClass=\"xPDOObject\" platform=\"mysql\"\n       defaultEngine=\"MyISAM\" tablePrefix=\"test_\">\n    <object class=\"myTest\" table=\"test\" extends=\"xPDOSimpleObject\">\n        <field key=\"number\" dbtype=\"int\" precision=\"10\"\n               phptype=\"integer\" default=\"0\" null=\"false\" />\n\n        <validation>\n            <rule field=\"name\"\n                  name=\"myMinValRule\"\n                  type=\"xPDOValidationRule\"\n                  rule=\"xPDOMinValueValidationRule\"\n                  value=\"20\"\n                  message=\"The number must be at least 20.\"\n             />\n        </validation>\n    </object>\n</model>\n```\n\n----------------------------------------\n\nTITLE: Fred Dropzone with Minimum Dimensions\nDESCRIPTION: Examples of setting minimum height and width for Fred dropzones.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/themer/elements/attributes.md#2025-04-17_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div data-fred-dropzone=\"content\" data-fred-min-height=\"50px\"></div>\n\n<div data-fred-dropzone=\"content\" data-fred-min-width=\"50px\"></div>\n```\n\n----------------------------------------\n\nTITLE: Google Maps API Integration URL\nDESCRIPTION: External URL reference for loading Google Maps JavaScript API\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/mxcalendar/index.md#2025-04-17_snippet_4\n\nLANGUAGE: markup\nCODE:\n```\nhttp://maps.google.com/maps/api/js?sensor=false\n```\n\n----------------------------------------\n\nTITLE: Rebasing a Feature Branch on Upstream Changes in Git\nDESCRIPTION: Commands to keep a feature branch in sync with upstream changes using git rebase. This helps maintain a clean commit history by replaying your commits on top of the latest upstream changes.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/contribute/code/git-github/frequent-commands.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/2.x\n```\n\n----------------------------------------\n\nTITLE: Setting PHP error_reporting in MODX Revolution\nDESCRIPTION: The 'debug' system setting in MODX Revolution controls debugging and sets the PHP error_reporting level. It accepts empty string, '0', '1', or any valid error_reporting integer value.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/settings/debug.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nerror_reporting = 0\n```\n\nLANGUAGE: php\nCODE:\n```\nerror_reporting = -1\n```\n\n----------------------------------------\n\nTITLE: Disabling CAPTCHA in MODX Revolution Configuration\nDESCRIPTION: A tip for disabling CAPTCHA in MODX Revolution by editing the config.cache.php file. This allows login access when locked out by CAPTCHA.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/directory-structure.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse_captcha = '0'\n```\n\n----------------------------------------\n\nTITLE: Creating Category and Vehicle\nDESCRIPTION: This code snippet creates a modCategory object, sets its properties, defines attributes for the category vehicle, and adds the category to the transport package. The attributes control how MODX handles the category during installation and uninstallation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/extending-modx/tutorials/developing-an-extra/part-3.md#2025-04-17_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$category= $modx->newObject('modCategory');\n$category->set('id',1);\n$category->set('category',PKG_NAME);\n\n/* add snippets */\n//$modx->log(modX::LOG_LEVEL_INFO,'Packaging in snippets...');\n//$snippets = include $sources['data'].'transport.snippets.php';\n//if (empty($snippets)) $modx->log(modX::LOG_LEVEL_ERROR,'Could not package in snippets.');\n//$category->addMany($snippets);\n\n/* create category vehicle */\n$attr = array(\n    xPDOTransport::UNIQUE_KEY => 'category',\n    xPDOTransport::PRESERVE_KEYS => false,\n    xPDOTransport::UPDATE_OBJECT => true,\n    xPDOTransport::RELATED_OBJECTS => true,\n    xPDOTransport::RELATED_OBJECT_ATTRIBUTES => array (\n        'Snippets' => array(\n            xPDOTransport::PRESERVE_KEYS => false,\n            xPDOTransport::UPDATE_OBJECT => true,\n            xPDOTransport::UNIQUE_KEY => 'name',\n        ),\n    ),\n);\n$vehicle = $builder->createVehicle($category,$attr);\n$builder->putVehicle($vehicle);\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Thumb Error Text Color - MODX - Markdown\nDESCRIPTION: This setting establishes the text color for error messages in PHPThumb, allowing for customization of visual feedback to users.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/settings/index.md#2025-04-17_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n[phpthumb_error_textcolor](building-sites/settings/phpthumb_error_textcolor)\n```\n\n----------------------------------------\n\nTITLE: Setting up TV Input Options with @EVAL Binding in MODX\nDESCRIPTION: Uses @EVAL binding to run a custom snippet 'listMyResources' and populate the TV input options with related pages.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/tutorials/multiselect-related-pages.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@EVAL return $modx->runSnippet('listMyResources',array('parent' => 9));\n```\n\n----------------------------------------\n\nTITLE: Removing Drag&Drop JavaScript Configuration\nDESCRIPTION: This JavaScript code shows configuration settings that need to be removed or modified to completely disable drag and drop. The code snippets are part of the item grid definition.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bxrextra/index.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n\"ddGroup config parameter\\nenableDragDrop config parameter, or set to false\\nrender and beforeDestroy listeners\\ngetDragDropText function\"\n```\n\n----------------------------------------\n\nTITLE: Disabling eAccelerator in PHP.ini\nDESCRIPTION: This PHP.ini configuration snippet demonstrates how to disable eAccelerator, which can cause issues during MODX installation. It turns off the eAccelerator engine, optimizer, and debug mode.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/installation/troubleshooting.md#2025-04-17_snippet_2\n\nLANGUAGE: php\nCODE:\n```\neaccelerator.enable = 0;\neaccelerator.optimizer = 0;\neaccelerator.debug = 0;\n```\n\n----------------------------------------\n\nTITLE: Example Usage of escapeSingleQuotes Method\nDESCRIPTION: Demonstrates how to use the escapeSingleQuotes method to escape quotes in a string using the xPDO cache manager.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/xpdo/class-reference/xpdocachemanager/xpdocachemanager.escapesinglequotes.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$str = 'Testing my \"fun\" Windows system.';\necho $xpdo->cacheManager->escapeSingleQuotes($str);\n// outputs: Testing my \\\"fun\\\" Windows system.\n```\n\n----------------------------------------\n\nTITLE: Selecting Data from Database in MODX\nDESCRIPTION: Replaces the deprecated `$modx->db->select($fields= \\\"*\\\", $from= \\\"\\\", $where= \\\"\\\", $orderby= \\\"\\\", $limit= \\\"\\\")` for selecting data from a database table. Use modX->query() instead.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/getting-started/maintenance/upgrading/evolution/legacy-removed-2.1.md#2025-04-17_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n\"see modX->query()\"\n```\n\n----------------------------------------\n\nTITLE: Defining BreadCrumb Container Template in PHP\nDESCRIPTION: This snippet defines the HTML structure for the BreadCrumb container template using the &containerTpl property. It uses MODX placeholders to dynamically render the site URL and site name along with the list of crumbs. The expected output is a structured HTML list for navigation crumbs.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/breadcrumb/breadcrumb.containertpl.md#2025-04-17_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@CODE:\n<ul id=\"breadcrumb\" itemprop=\"breadcrumb\">\n    <li><a href=\"[[++site_url]]\">[[++site_name]]</a></li>\n    [[+crumbs]]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: ExerPlan Snippet: exerplan.Exercises Properties\nDESCRIPTION: This section outlines the properties available for the `exerplan.Exercises` snippet in MODX. It covers various configuration options, including authorization requirements, sorting criteria, placeholder prefixes, gallery inclusions, template customization using chunks, and output formatting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/exerplan/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"| property             | description                                                                         | options                                | default                    |\\n| -------------------- | ----------------------------------------------------------------------------------- | -------------------------------------- | -------------------------- |\\n| **requireAuth**      | is authorization required to see the output?                                        | bool                                   | 1                          |\\n| userId               | get the workouts that apply to this user                                            | int                                    |                            |\\n| sortby               | sort the list by this selection                                                     | the field's name of the workouts table | id                         |\\n| sortdir              | sort the list by this direction                                                     | enum(asc,desc)                         | asc                        |\\n| phsPrefix            | placeholder's prefix of the output                                                  | string                                 | exerplan.                  |\\n| groupByUsergroups    | _not yet implemented_                                                               |                                        |                            |\\n| getGalleries         | include the galleries of each workout                                               | bool                                   |                            |\\n| gallerySource        | if this is used, then filter the output by this media source                        | string                                 |                            |\\n| galleryMediatype     | if this is used, then filter the output by this media type                          | string                                 |                            |\\n| galleryPrefix        | add more placeholder's prefix for the gallery                                       | string                                 | gallery.                   |\\n| getUsergroupWorkouts | Is getting workouts for user groups?                                                | bool                                   | 1                          |\\n| getUserWorkouts      | Is getting workouts for user?                                                       | bool                                   | 1                          |\\n| tplItem              | chunk name, or use any of @BINDINGs for workout rows                                | string                                 | exerplan.exercises.item    |\\n| itemSeparator        | separator of each of item templates output                                          | string                                 | \"\\\\n\"                      |\\n| tplWrapper           | chunk name, or use any of @BINDINGs for wrapper                                     | string                                 | exerplan.exercises.wrapper |\\n| tplGalleryItem       | chunk name, or use any of @BINDINGs for gallery's rows inside the gallery's wrapper | string                                 | exerplan.gallery.item      |\\n| gallerySeparator     | separator of each of gallery's item templates output                                | string                                 | \"\\\\n\"                      |\\n| tplGalleryWrapper    | chunk name, or use any of @BINDINGs for gallery's wrapper                           | string                                 | exerplan.gallery.wrapper   |\\n| **toArray**          | dump the placeholders output, rather parse them in the chunk                        | bool                                   |                            |\\n| toPlaceholder        | place the output into the given name of the placeholder                             | string                                 |                            |\"\n```\n\n----------------------------------------\n\nTITLE: Syncing Fork with Upstream (No Changes)\nDESCRIPTION: Commands to sync a fork with the upstream repository when there are no local changes\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/pr_workflow.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout master\ngit fetch upstream\ngit merge --ff-only upstream/master\ngit push origin master\ngitify package:install --all\ngitify build\n```\n\n----------------------------------------\n\nTITLE: Finding Files with modExtra in Names Using Find Command\nDESCRIPTION: Employs the find command to list files containing 'modExtra' in their filenames, aiding in renaming files for new MODX components. This Unix/Mac command helps developers systematically identify filenames to adjust within their repo.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/modextra/index.md#2025-04-17_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfind . -name *modextra*\n```\n\n----------------------------------------\n\nTITLE: Apache Error Log Example with ModSecurity\nDESCRIPTION: This is an example error message found in the Apache error log, indicating a ModSecurity rule triggered by a specific action in MODX. It includes the rule ID, hostname, and URI that triggered the rule, which is essential for whitelisting.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/getting-started/installation/troubleshooting/modsecurity.md#2025-04-17_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n[Sat Nov 19 19:16:32 2011] [error] [client 123.123.123.123] ModSecurity: Access denied with code 500 (phase 2).\nPattern match \"(insert[[:space:]]+into.+values|select.*from.+[a-z|A-Z|0-9]|select.+from|bulk[[:space:]]+insert|union.+select|convert.+\\\\(.*from)\"\nat ARGS:els.\n[file \"/usr/local/apache/conf/modsec2.user.conf\"]\n[line \"359\"]\n[id \"300016\"]\n[rev \"2\"]\n[msg \"Generic SQL injection protection\"]\n[severity \"CRITICAL\"]\n[hostname \"yoursite.com\"]\n[uri \"/connectors/element/tv.php\"]\n[unique_id \"TshG4EWntHMAAAfIFmUAAAAI\"]\n```\n\n----------------------------------------\n\nTITLE: Register Tag Element Before HEAD - MODX PHP Example\nDESCRIPTION: Example showing how to register a simple tag element to be injected before the closing HEAD tag using the regClientStartupHTMLBlock method.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/modx-class/reference/modx.regclientstartuphtmlblock.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$modx->regClientStartupHTMLBlock('<tag></tag>');\n```\n\n----------------------------------------\n\nTITLE: Restricting Snippet Creation by User ID in PHP\nDESCRIPTION: Plugin that prevents users with ID=1 from creating new snippets. Checks the mode and user ID before allowing snippet creation.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extending-modx/plugins/system-events/onbeforesnipformsave.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$eventName = $modx->event->name;\nswitch($eventName) {\n    case 'OnBeforeSnipFormSave':\n        //если это новый сниппет\n        if ($mode == modSystemEvent::MODE_NEW){\n            if ($modx->user->get('id') == 1){\n                $modx->event->output(\"You are not allowed to create new snippets!\");\n            }\n        }\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Example of Content Type CSS\nDESCRIPTION: Demonstrates how a Resource with alias 'test' and Content Type 'CSS' would render with a .css extension instead of .html.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/building-sites/resources/content-types.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntest.css\n```\n\n----------------------------------------\n\nTITLE: Image Color Tinting\nDESCRIPTION: Tint image with a specific color at a given percentage. Example shows 30% tinting with magenta color (#ff00ff).\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/ru/building-sites/tutorials/image-manipulation.md#2025-04-17_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n[[*big_image:phpthumbof=`w=960&h=300&fltr[]=clr|30|ff00ff`]]\n```\n\n----------------------------------------\n\nTITLE: Renaming BxrExtra using rename_it.sh\nDESCRIPTION: This bash script facilitates renaming the BxrExtra to the desired component name.  It involves setting replacement variables for the old and new names, and the path to the component, and running the script. The script is essential for customizing the extra.\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/bxrextra/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"Edit 'rename_it.sh' and set 'repl1' to 'YourComponent', 'repl2' to 'yourcomponent' and 'path' to './yourcomponent'.\\n\\nRun 'rename_it.sh'.\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository for MODX\nDESCRIPTION: Commands to clone a forked repository into a temporary directory and move it to the web root using rsync\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/fred/collab/pr_workflow.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/www\ngit clone git@github.com:your_username/your-fork-name.git tmp\n```\n\nLANGUAGE: shell\nCODE:\n```\nrsync -av ./tmp ./\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with Output Filters\nDESCRIPTION: Use MODX output filters to transform the unix timestamp into a human-readable date format\nSOURCE: https://github.com/modxorg/Docs/blob/2.x/en/extras/getdate/index.md#2025-04-17_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[[!getDate:date=`%Y-%m-%d`]]\n```"
  }
]