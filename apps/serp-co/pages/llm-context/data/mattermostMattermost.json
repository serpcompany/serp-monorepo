[
  {
    "owner": "mattermost",
    "repo": "mattermost",
    "content": "TITLE: Creating a system administrator user\nDESCRIPTION: This example demonstrates creating a new user with system administrator privileges using the `--system-admin` flag. This user will have elevated permissions within the Mattermost system.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_create.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user create --email user@example.com --username userexample --password Password1 --system-admin\n```\n\n----------------------------------------\n\nTITLE: mmctl auth login command examples\nDESCRIPTION: Provides example usages of the `mmctl auth login` command. The examples showcase different ways to authenticate, including specifying username, password file, server name, and using an access token.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_login.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nauth login https://mattermost.example.com\n```\n\nLANGUAGE: Shell\nCODE:\n```\nauth login https://mattermost.example.com --name local-server --username sysadmin --password-file mysupersecret.txt\n```\n\nLANGUAGE: Shell\nCODE:\n```\nauth login https://mattermost.example.com --name local-server --username sysadmin --password-file mysupersecret.txt --mfa-token 123456\n```\n\nLANGUAGE: Shell\nCODE:\n```\nauth login https://mattermost.example.com --name local-server --access-token myaccesstoken\n```\n\n----------------------------------------\n\nTITLE: Displaying Server Configuration with mmctl\nDESCRIPTION: This command prints the server configuration in JSON format to STDOUT. It can be used to inspect the current server settings. No specific dependencies are required beyond having mmctl configured and connected to a Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_show.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl config show\n```\n\n----------------------------------------\n\nTITLE: Exporting Mattermost Server Configuration using mmctl\nDESCRIPTION: Exports the Mattermost server configuration, which can be useful for backing up or migrating configurations to another server. The `--remove-masked` flag removes sensitive values, and `--remove-defaults` removes default values, resulting in a cleaner configuration file. No specific dependencies are listed beyond the `mmctl` tool itself.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_export.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl config export --remove-masked --remove-defaults\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values via mmctl command\nDESCRIPTION: This example shows how to set a configuration value using the `mmctl config set` command. It sets the `SqlSettings.DriverName` to `mysql`. No specific dependencies are required other than the `mmctl` tool being installed and configured to connect to a Mattermost server.  The input is the command with the setting name and value.  The output is a modified server configuration.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_set.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconfig set SqlSettings.DriverName mysql\n```\n\n----------------------------------------\n\nTITLE: mmctl auth login command usage\nDESCRIPTION: Demonstrates the usage of the mmctl auth login command with various options such as specifying the instance URL, server name, username, password file, and MFA token.  It also shows how to use an access token file instead of username/password.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_login.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl auth login [instance url] --name [server name] --username [username] --password-file [password-file] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Array Configuration Values via mmctl command\nDESCRIPTION: This example shows how to set multiple values for an array setting using the `mmctl config set` command. It sets the `SqlSettings.DataSourceReplicas` to `replica1` and `replica2`. No specific dependencies are required other than the `mmctl` tool being installed and configured to connect to a Mattermost server. The input is the command with the setting name and multiple values. The output is a modified server configuration.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_set.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconfig set SqlSettings.DataSourceReplicas \"replica1\" \"replica2\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Team with mmctl\nDESCRIPTION: This command creates a new team in Mattermost.  It requires a team name and display name.  The `--private` flag creates a private team.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_create.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl team create [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing WebSocket Client and Adding Listener (JavaScript)\nDESCRIPTION: This code shows how to create an instance of the `WebSocketClient`, initialize it with a connection URL and authentication token, and add a message listener to handle incoming WebSocket messages. It requires the `@mattermost/client` package.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {WebSocketClient} from '@mattermost/client';\n\n// If you already have an instance of Client4, you can call its getWebSocketUrl method to get this URL\nconst connectionUrl = 'https://mymattermostserver.example.com/api/v4/websocket';\n\n// In a browser, the token may be passed automatically from a cookie\nconst authToken = process.env.TOKEN;\n\nconst wsClient = new WebSocketClient();\nwsClient.initialize(connectionUrl, authToken);\n\nwsClient.addMessageListener((msg) => {\n    if (msg.event === 'posted') {\n        console.log('New post received', JSON.parse(msg.data.post));\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Outgoing Webhook Example 2 - mmctl\nDESCRIPTION: This example shows the creation of a more complex outgoing webhook, including specifying the team, channel, user, display name, description, trigger conditions, icon, content type, trigger words, and callback URL. The team, user, display name, trigger word and URL are required.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_create-outgoing.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nwebhook create-outgoing --team myteam --channel mychannel --user myusername --display-name mywebhook --description \"My cool webhook\" --trigger-when start --trigger-word build --trigger-word test --icon http://localhost:8000/my-slash-handler-bot-icon.png --url http://localhost:8000/my-webhook-handler --content-type \"application/json\"\n```\n\n----------------------------------------\n\nTITLE: mmctl Team Creation Examples\nDESCRIPTION: These examples demonstrate how to use the `mmctl team create` command with different options.  The first example creates a standard team, while the second creates a private team.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_create.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nteam create --name mynewteam --display-name \"My New Team\"\nteam create --name private --display-name \"My New Private Team\" --private\n```\n\n----------------------------------------\n\nTITLE: Assign users to other system roles\nDESCRIPTION: These examples demonstrate assigning users to other system roles such as 'system_manager', 'system_user_manager', and 'system_read_only_admin'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_assign.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npermissions assign system_manager john.doe jane.doe\n```\n\nLANGUAGE: Shell\nCODE:\n```\npermissions assign system_user_manager john.doe jane.doe\n```\n\nLANGUAGE: Shell\nCODE:\n```\npermissions assign system_read_only_admin john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: mmctl user email Example\nDESCRIPTION: Demonstrates how to use the mmctl user email command to change the email address of a user named 'testuser' to 'user@example.com'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_email.rst#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\nuser email testuser user@example.com\n```\n\n----------------------------------------\n\nTITLE: Setting Access Token for REST Client (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to set the access token for the `Client4` instance, which can be used instead of logging in with a username and password. It requires the `@mattermost/client` package.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Client4} from '@mattermost/client';\n\nconst client = new Client4();\nclient.setUrl('https://mymattermostserver.example.com');\n\nclient.setToken('accesstoken');\n```\n\n----------------------------------------\n\nTITLE: Interactive Password Change - mmctl\nDESCRIPTION: This example shows how to change a user's password interactively using mmctl. The command prompts for the current and new passwords.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_change-password.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user change-password my-username\nAre you changing your own password? (YES/NO): YES\nCurrent password:\nNew password:\n```\n\n----------------------------------------\n\nTITLE: Adding Users to a Team using mmctl\nDESCRIPTION: This command adds specified users to a given team. It requires the team name or ID and a list of user identifiers (email or username) as input.  No specific dependencies are listed, but mmctl must be properly configured to connect to the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_users_add.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl team users add [team] [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding users to a channel\nDESCRIPTION: Adds users to a channel. The command takes the channel identifier (channel name or team:channel) and a list of user identifiers (email or username) as input. The command returns success or failure messages for each user addition. It requires the mmctl tool to be configured and connected to a Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nmmctl channel users add [channel] [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Moving Channels Between Teams\nDESCRIPTION: The 'mmctl channel move' command moves channels from one team to another. It supports specifying channels by team:channel name or by channel ID. The command also moves incoming and outgoing webhooks associated with the channel. It validates that all users in the channel belong to the target team, optionally removing users that are not members if the '--force' flag is used.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_move.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl channel move [team] [channels] [flags]\n```\n\n----------------------------------------\n\nTITLE: Modifying Incoming Webhook with mmctl\nDESCRIPTION: This command modifies an existing incoming webhook. It requires the webhook's ID and accepts flags to change the channel, display name, description, lock-to-channel status, and icon URL. The channel ID, display name, description, and icon URL are specified using flags. The `--lock-to-channel` flag locks the webhook to the specified channel.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_modify-incoming.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl webhook modify-incoming [webhookID] --channel [channelID] --display-name [displayName] --description [webhookDescription] --lock-to-channel --icon [iconURL]\n```\n\n----------------------------------------\n\nTITLE: Promote guests to users using mmctl\nDESCRIPTION: This command promotes specified guest accounts to regular user accounts within the Mattermost system. It requires a list of guest usernames as input and utilizes the mmctl command-line tool. No specific dependencies are explicitly mentioned other than mmctl being configured correctly.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_promote.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user promote [guests] [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating an Incoming Webhook with mmctl\nDESCRIPTION: This command creates an incoming webhook that allows external posting of messages to a specific channel in Mattermost.  It requires the channel ID and user ID, and allows setting a display name, description, locking to the channel, and specifying an icon URL.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_create-incoming.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl webhook create-incoming --channel [channelID] --user [userID] --display-name [displayName] --description [webhookDescription] --lock-to-channel --icon [iconURL]\n```\n\n----------------------------------------\n\nTITLE: Modifying Team Privacy (mmctl)\nDESCRIPTION: This command modifies the privacy setting of a Mattermost team to private. It requires the `mmctl` command-line tool to be configured and authenticated with a Mattermost server. The team name `myteam` is passed as an argument, and the `--private` flag sets the team's visibility.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_modify.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl team modify myteam --private\n```\n\n----------------------------------------\n\nTITLE: Changing User Password with System Permissions - mmctl\nDESCRIPTION: This example shows how to change a user's password using mmctl when you have system administrator permissions. The new password is provided directly in the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_change-password.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user change-password john_doe --password new-password\n```\n\n----------------------------------------\n\nTITLE: mmctl user convert example: user to bot\nDESCRIPTION: Provides examples of how to convert a user to a bot using the `mmctl user convert` command, specifying the user by email, ID, or username.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_convert.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# you can convert a user to a bot providing its email, id or username\n$ mmctl user convert user@example.com --bot\n\n# or multiple users in one go\n$ mmctl user convert user@example.com anotherUser --bot\n```\n\n----------------------------------------\n\nTITLE: mmctl user convert example: bot to user\nDESCRIPTION: Demonstrates how to convert a bot to a user account using `mmctl user convert`, including specifying the new user's email and password.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_convert.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# you can convert a bot to a user specifying the email and password that the user will have after conversion\n$ mmctl user convert botusername --email new.email@email.com --password password --user\n```\n\n----------------------------------------\n\nTITLE: mmctl config patch command usage\nDESCRIPTION: Shows how to patch the Mattermost config with a JSON file using the command-line tool. The example shows applying a configuration file located at `/path/to/config.json` to the server's settings. There are no dependencies outside of the mmctl cli tool.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_patch.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl config patch <config-file> [flags]\n```\n\n----------------------------------------\n\nTITLE: Reset Password Command Example\nDESCRIPTION: This example shows how to use the `mmctl user reset-password` command to send a password reset email to a specific user. The user is identified by their email address.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_reset-password.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user reset-password user@example.com\n```\n\n----------------------------------------\n\nTITLE: Deleting Channels with mmctl\nDESCRIPTION: This command permanently deletes one or more channels along with all related information, including posts, from the database. The --confirm flag is mandatory to ensure that the user confirms the action and a database backup has been performed before proceeding. The channel is identified by its team and channel name (e.g., myteam:mychannel).\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_delete.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl channel delete [channels] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Channel Deletion\nDESCRIPTION: This example shows how to delete a channel named 'mychannel' within a team named 'myteam'.  Remember to include the `--confirm` flag to proceed with the actual deletion. Without the flag, the command will not execute.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_delete.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchannel delete myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Listing Marketplace Plugins with Pagination\nDESCRIPTION: This example demonstrates how to list marketplace plugins using pagination. It uses the `--page` and `--per-page` flags to specify the page number and the number of plugins to fetch per page, respectively.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_marketplace_list.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mmctl plugin marketplace list --page 2 --per-page 10\n```\n\n----------------------------------------\n\nTITLE: Example Channel Move Command\nDESCRIPTION: This example demonstrates how to move a channel named 'mychannel' from a team named 'oldteam' to a team named 'newteam'.  The command `channel move newteam oldteam:mychannel` shows the syntax for this operation.  The channel is identified using the 'oldteam:mychannel' format, which specifies the team and channel name.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_move.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nchannel move newteam oldteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Example: Renew credentials for local-server\nDESCRIPTION: This example shows how to renew the credentials for a server named 'local-server'. This assumes 'local-server' has been configured with mmctl.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_renew.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nauth renew local-server\n```\n\n----------------------------------------\n\nTITLE: mmctl config reload command example\nDESCRIPTION: This example demonstrates how to use the `mmctl config reload` command to reload the Mattermost server configuration. It shows the basic syntax and usage.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_reload.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl config reload [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl User Preference Set Synopsis\nDESCRIPTION: This is the general synopsis of the `mmctl user preference set` command. It outlines the required parameters such as category, name, value, and the user(s) to apply the preference to.  It also includes optional flags to modify the command's behavior.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_set.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user preference set --category [category] --name [name] --value [value] [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting Multiple Posts using mmctl\nDESCRIPTION: This command permanently deletes multiple posts and their corresponding file contents from the database and filestore. It requires the `--permanent` flag and a list of post IDs as input.  It also recommends a database backup.  Requires confirmation using `--confirm` flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_delete.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmmctl post delete udjmt396tjghi8wnsk3a1qs1sw 7jgcjt7tyjyyu83qz81wo84w6o --permanent\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting a Post using mmctl\nDESCRIPTION: This command permanently deletes a post and its associated file contents from the database and filestore. It requires the `--permanent` flag and the post ID as input. It also recommends a database backup before execution. Requires confirmation using `--confirm` flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_delete.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmmctl post delete udjmt396tjghi8wnsk3a1qs1sw --permanent\n```\n\n----------------------------------------\n\nTITLE: Displaying logs using mmctl logs command\nDESCRIPTION: The `mmctl logs` command displays logs from the Mattermost server in a human-readable format. It retrieves a specified number of log lines and formats them using either the default server format or the logrus format. The output is displayed in the terminal.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_logs.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl logs [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl bot create Command\nDESCRIPTION: The `mmctl bot create` command is used to create a new bot in Mattermost. It requires a username and accepts optional flags for description, display name, and token generation. The command also inherits options from parent commands, such as configuration file path and output format.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_bot_create.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl bot create [username] [flags]\n```\n\n----------------------------------------\n\nTITLE: LDAP Synchronization Command\nDESCRIPTION: Synchronizes all LDAP users and groups now using the `mmctl ldap sync` command. It includes options for handling removed members and inherited configurations from parent commands.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_ldap_sync.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl ldap sync [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: These options are inherited from parent commands and allow configuration of the mmctl tool, such as setting the configuration file path, disabling paged output, and specifying security-related settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_generate.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl import upload command example\nDESCRIPTION: Provides an example of how to use the mmctl import upload command. It uploads a zip file named import_file.zip to the Mattermost server. The command assumes that the mmctl tool is properly configured to communicate with the server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_upload.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nimport upload import_file.zip\n```\n\n----------------------------------------\n\nTITLE: Renaming a Team using mmctl\nDESCRIPTION: This command renames an existing team.  It requires the team name and accepts flags for specifying the new display name.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_rename.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl team rename old-team --display-name 'New Display Name'\n```\n\n----------------------------------------\n\nTITLE: Unarchiving a channel using mmctl\nDESCRIPTION: This command unarchives a specific channel within a Mattermost team. The channel is identified by the team name and channel name, separated by a colon.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_unarchive.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl channel unarchive myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Deleting a Webhook with mmctl\nDESCRIPTION: This snippet shows how to delete a webhook using the `mmctl webhook delete` command. It requires the webhook ID as an argument. The command provides options for configuration, output formatting, and security settings inherited from parent commands.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_delete.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl webhook delete [webhookID]\n```\n\n----------------------------------------\n\nTITLE: mmctl user username Example\nDESCRIPTION: Provides an example usage of the mmctl user username command. The example changes the username of 'testuser' to 'newusername'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_username.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nuser username testuser newusername\n```\n\n----------------------------------------\n\nTITLE: Example Get User Preference\nDESCRIPTION: Demonstrates how to retrieve a user's display settings preference for using military time. This command uses the `preference get` subcommand with specific category and name arguments. The output will be the value of the specified preference for the given user.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_get.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npreference get --category display_settings --name use_military_time user@example.com\n```\n\n----------------------------------------\n\nTITLE: Running mmctl import process\nDESCRIPTION: This command starts an import job with a specified import name. It requires the `mmctl` command-line tool to be installed and configured to communicate with a Mattermost server. The import name typically corresponds to a file like a zip archive containing the data to be imported.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_process.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmmctl import process [importname] [flags]\n```\n\n----------------------------------------\n\nTITLE: Archiving a Team Example\nDESCRIPTION: This command archives a Mattermost team named \"myteam\". The `--confirm` flag is essential to confirm the action and ensure a database backup has been performed before archiving. This prevents accidental data loss.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_archive.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl team archive myteam\n```\n\n----------------------------------------\n\nTITLE: Renewing credentials for a server using mmctl\nDESCRIPTION: This command renews the credentials for a specified Mattermost server.  It takes the server name as an argument (e.g., `local-server`). Options include specifying access token, MFA token, and password files.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_renew.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl auth renew [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing LDAP sync jobs\nDESCRIPTION: This command lists LDAP sync jobs. It can fetch all jobs or paginate through them. The number of jobs per page can be configured.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_ldap_job_list.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl ldap job list [flags]\n```\n\n----------------------------------------\n\nTITLE: Example usage of mmctl bot enable\nDESCRIPTION: This is an example of how to use the mmctl bot enable command to enable a bot with the username 'testbot'. The command assumes that mmctl is configured and connected to the Mattermost server. It does not include any flags, so the output will be in the default format.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_bot_enable.rst#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\nbot enable testbot\n```\n\n----------------------------------------\n\nTITLE: Listing plugins with mmctl plugin list\nDESCRIPTION: This command lists all enabled and disabled plugins installed on the Mattermost server. It does not require any specific parameters.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl plugin list\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Reverse Proxy for Mattermost Subpaths\nDESCRIPTION: This Nginx configuration snippet defines upstream servers and location blocks to proxy requests to two Mattermost servers running on different ports under different subpaths. It includes configurations for both standard HTTP requests and WebSocket connections to properly route traffic to the corresponding backend servers. Key directives such as `proxy_pass`, `proxy_set_header`, and `client_max_body_size` are used to handle request forwarding and optimize performance.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/README-Subpath.md#_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nupstream backend1 {\n   server localhost:8065;\n   keepalive 32;\n}\n\nupstream backend2 {\n   server localhost:8066;\n   keepalive 32;\n}\n\nserver {\n        listen 80 default_server;\n        listen [::]:80 default_server;\n\n        location ~ /company/mattermost1/api/v[0-9]+/(users/)?websocket$ {\n               client_body_timeout 60;\n               client_max_body_size 50M;\n               lingering_timeout 5;\n               proxy_buffer_size 16k;\n               proxy_buffers 256 16k;\n               proxy_connect_timeout 90;\n               proxy_pass http://backend1;\n               proxy_read_timeout 90s;\n               proxy_send_timeout 300;\n               proxy_set_header Connection \"upgrade\";\n               proxy_set_header Host $host;\n               proxy_set_header Upgrade $http_upgrade;\n               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n               proxy_set_header X-Forwarded-Proto $scheme;\n               proxy_set_header X-Frame-Options SAMEORIGIN;\n               proxy_set_header X-Real-IP $remote_addr;\n               send_timeout 300;\n        }\n\n        location /company/mattermost1 {\n                client_max_body_size 50M;\n                proxy_buffer_size 16k;\n                proxy_buffers 256 16k;\n                proxy_cache_lock on;\n                proxy_cache_min_uses 2;\n                proxy_cache_revalidate on;\n                proxy_cache_use_stale timeout;\n                proxy_http_version 1.1;\n                proxy_pass http://backend1;\n                proxy_read_timeout 600s;\n                proxy_set_header Connection \"\";\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header X-Frame-Options SAMEORIGIN;\n                proxy_set_header X-Real-IP $remote_addr;\n        }\n\n        location ~ /company/mattermost2/api/v[0-9]+/(users/)?websocket$ {\n               client_body_timeout 60;\n               client_max_body_size 50M;\n               lingering_timeout 5;\n               proxy_buffer_size 16k;\n               proxy_buffers 256 16k;\n               proxy_connect_timeout 90;\n               proxy_pass http://backend2;\n               proxy_read_timeout 90s;\n               proxy_send_timeout 300;\n               proxy_set_header Connection \"upgrade\";\n               proxy_set_header Host $host;\n               proxy_set_header Upgrade $http_upgrade;\n               proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n               proxy_set_header X-Forwarded-Proto $scheme;\n               proxy_set_header X-Frame-Options SAMEORIGIN;\n               proxy_set_header X-Real-IP $remote_addr;\n               send_timeout 300;\n        }\n\n        location /company/mattermost2 {\n                proxy_buffer_size 16k;\n                proxy_buffers 256 16k;\n                proxy_cache_lock on;\n                proxy_cache_min_uses 2;\n                proxy_cache_revalidate on;\n                proxy_cache_use_stale timeout;\n                proxy_http_version 1.1;\n                proxy_pass http://backend2;\n                proxy_read_timeout 600s;\n                proxy_set_header Connection \"\";\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_set_header X-Frame-Options SAMEORIGIN;\n                proxy_set_header X-Real-IP $remote_addr;\n                client_max_body_size 50M;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Authentication Credentials\nDESCRIPTION: Deletes the authentication credentials for a Mattermost server specified by its name. This command removes the stored credentials, requiring re-authentication for subsequent connections to that server. No specific dependencies are listed beyond the mmctl tool being installed and configured.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_delete.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl auth delete [server name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Enabling Group Constraints on a Team - mmctl\nDESCRIPTION: This command enables group constraints in the specified Mattermost team. It requires the team name as input. The command inherits several options from parent commands, such as configuration file path, disabling pager, and output format options.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_team_enable.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl group team enable [team] [flags]\n```\n\n----------------------------------------\n\nTITLE: Demoting users to guests using mmctl\nDESCRIPTION: This example shows how to use the `mmctl user demote` command to convert regular users (user1 and user2) into guests.  No specific dependencies beyond a properly configured `mmctl` installation pointed at a Mattermost instance are required.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_demote.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user demote user1 user2\n```\n\n----------------------------------------\n\nTITLE: Creating a private channel using mmctl\nDESCRIPTION: This command creates a new private channel within a specified team.  It requires the team name or ID, a channel name, and a display name for the channel, and the `--private` flag. The `--team`, `--name`, and `--display-name` flags are mandatory.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_create.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl channel create --team myteam --name mynewprivatechannel --display-name \"My New Private Channel\" --private\n```\n\n----------------------------------------\n\nTITLE: Enabling a bot using mmctl\nDESCRIPTION: This command enables a disabled bot using the mmctl tool. It takes the bot's username as input. No specific dependencies are mentioned other than the mmctl tool being properly configured and connected to a Mattermost instance. The output will be determined by the flags used, such as --json.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_bot_enable.rst#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\nmmctl bot enable [username] [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl user deleteall Example\nDESCRIPTION: Provides an example of how to use the `mmctl user deleteall` command.  It does not require specific inputs, but requires confirmation before execution. This command is only meant for local mode.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_deleteall.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nuser deleteall\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Setting with mmctl\nDESCRIPTION: This example demonstrates how to retrieve a specific configuration setting, 'SqlSettings.DriverName', using the `mmctl config get` command.  The command expects the setting name in dot notation as input. The output will be the value of the specified setting.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_get.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl config get SqlSettings.DriverName\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl export delete\nDESCRIPTION: This example demonstrates how to delete an export file named 'export_file.zip' using the 'mmctl export delete' command. This assumes that the file exists and the user has necessary privileges.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_export_delete.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport delete export_file.zip\n```\n\n----------------------------------------\n\nTITLE: Listing User Tokens with mmctl\nDESCRIPTION: This command lists the tokens associated with a specific user. It accepts a username as input and supports flags to filter tokens by their active status and to paginate the results. The output can be formatted as JSON.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_list.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl token list [user] [flags]\n```\n\n----------------------------------------\n\nTITLE: Cleaning Authentication Credentials with mmctl\nDESCRIPTION: This command is used to remove all stored authentication credentials for the configured Mattermost instances. Running `mmctl auth clean` will clear the currently stored credentials, requiring the user to re-authenticate when interacting with the Mattermost server. There are no specific dependencies other than having mmctl configured.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_clean.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl auth clean [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl job list examples\nDESCRIPTION: Illustrates how to use the `mmctl job list` command with different flags to filter and display jobs. Examples include listing all jobs, jobs with specific IDs, jobs of a particular type and status, and paginated results.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_job_list.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\njob list\njob list --ids jobID1,jobID2\njob list --type ldap_sync --status success\njob list --type ldap_sync --status success --page 0 --per-page 10\n```\n\n----------------------------------------\n\nTITLE: Uploading a Mattermost License\nDESCRIPTION: This command uploads a Mattermost license file, replacing the current license. It takes the path to the license file as input. Requires the mmctl tool to be installed and configured.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_license_upload.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl license upload /path/to/license/mylicensefile.mattermost-license\n```\n\n----------------------------------------\n\nTITLE: Migrate users from email to SAML\nDESCRIPTION: This example shows how to migrate users from email authentication to SAML authentication using a JSON file that maps email addresses to SAML usernames.  The usernames and emails in the JSON must match the SAML service provider and the Mattermost database, respectively.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_migrate-auth.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user migrate-auth email saml users.json\n```\n\n----------------------------------------\n\nTITLE: mmctl channel modify example: private channel\nDESCRIPTION: This snippet shows an example of how to use the `mmctl channel modify` command to convert a channel to a private channel. The channel is specified using the `team:channel` format. The `--private` flag is used to indicate that the channel should be made private.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_modify.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nchannel modify myteam:mychannel --private\n```\n\n----------------------------------------\n\nTITLE: Example mmctl import process usage\nDESCRIPTION: This example demonstrates how to start an import process using a specific import name. The import name `35uy6cwrqfnhdx3genrhqqznxc_import.zip` indicates the file containing the import data. This command assumes that the `mmctl` tool is correctly configured and authenticated with the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_process.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nimport process 35uy6cwrqfnhdx3genrhqqznxc_import.zip\n```\n\n----------------------------------------\n\nTITLE: Showing an export job using mmctl\nDESCRIPTION: This command shows the details of a specific export job based on its ID.  The export job ID is a required parameter.  It can be used to inspect the status and progress of an export.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_export_job_show.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export job show o98rj3ur83dp5dppfyk5yk6osy\n```\n\n----------------------------------------\n\nTITLE: mmctl channel modify usage\nDESCRIPTION: This snippet shows the general usage of the `mmctl channel modify` command to change a channel's public/private type. Channel can be specified by [team]:[channel] or by channel ID.  The `--private` and `--public` flags determine the new channel type. Only one of `--private` or `--public` can be used at a time.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_modify.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl channel modify [channel] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Client via npm (JavaScript)\nDESCRIPTION: This command installs the Mattermost client package using npm. This is the basic installation for JavaScript projects.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @mattermost/client\n```\n\n----------------------------------------\n\nTITLE: mmctl post create flags\nDESCRIPTION: These flags are specific to the `mmctl post create` command. The `-h` or `--help` flag displays help information. The `-m` or `--message` flag sets the message content of the post. The `-r` or `--reply-to` flag specifies the post ID to reply to.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_create.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help              help for create\n  -m, --message string    Message for the post\n  -r, --reply-to string   Post id to reply to\n```\n\n----------------------------------------\n\nTITLE: Listing webhooks using mmctl\nDESCRIPTION: This example demonstrates how to list webhooks using the `mmctl webhook list` command. The command lists all webhooks. The team name must be specified as an argument.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl webhook list myteam\n```\n\n----------------------------------------\n\nTITLE: Deleting a Team using mmctl\nDESCRIPTION: This command demonstrates how to delete a team named 'myteam' using the `mmctl team delete` command. It is crucial to confirm the deletion and ensure a database backup exists before executing this command to prevent data loss.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_delete.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl team delete myteam\n```\n\n----------------------------------------\n\nTITLE: mmctl team restore Example\nDESCRIPTION: Presents an example of using the `mmctl team restore` command to restore a team named 'myteam'.  This demonstrates a basic usage of the command, restoring a team with the specified name. No flags are used in this example.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_restore.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nteam restore myteam\n```\n\n----------------------------------------\n\nTITLE: Example mmctl user list command\nDESCRIPTION: This example demonstrates a basic usage of the `mmctl user list` command without any flags. It lists all active users on the Mattermost instance, subject to default pagination.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_list.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nuser list\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Completion for All Sessions\nDESCRIPTION: This command adds the loading of mmctl bash completion to the .bashrc file, ensuring that autocompletion is enabled for all future bash sessions.  It relies on the `mmctl completion bash` command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_completion_bash.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho '. <(mmctl completion bash)' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Example: Enabling Group Constraints on myteam - mmctl\nDESCRIPTION: This example demonstrates how to enable group constraints on a team named 'myteam' using the `mmctl group team enable` command. It provides a practical application of the command's usage.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_team_enable.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngroup team enable myteam\n```\n\n----------------------------------------\n\nTITLE: Example mmctl system supportpacket usage\nDESCRIPTION: Demonstrates a basic example of using the `mmctl system supportpacket` command without any additional flags.  This will generate a support packet using default settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_supportpacket.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsystem supportpacket\n```\n\n----------------------------------------\n\nTITLE: mmctl user verify synopsis\nDESCRIPTION: Displays the synopsis for the `mmctl user verify` command. This command marks a user's email as verified without requiring the user to complete the email verification path. The command takes a list of usernames as input.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_verify.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user verify [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing config edit Command\nDESCRIPTION: Opens the default editor to modify the server configuration. The EDITOR environment variable needs to be properly set for this to work. This is a conceptual command execution, not actual code.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_edit.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl config edit\n```\n\n----------------------------------------\n\nTITLE: mmctl extract run Usage\nDESCRIPTION: This command initiates a content extraction job. It can extract files based on a specified time range using the `--from` and `--to` flags. The timestamps are expressed in seconds since the Unix epoch. Without flags extracts with current time.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_extract_run.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl extract run [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl group user restore Example\nDESCRIPTION: Provides an example of how to use the `mmctl group user restore` command to restore a group named `examplegroup`. This illustrates the basic usage of the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_user_restore.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngroup user restore examplegroup\n```\n\n----------------------------------------\n\nTITLE: mmctl team restore Synopsis\nDESCRIPTION: Displays the synopsis for the mmctl team restore command. This shows the basic syntax for using the command, including the arguments and flags that can be used with it. The synopsis includes the command name, the required arguments (teams), and the available flags.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_restore.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl team restore [teams] [flags]\n```\n\n----------------------------------------\n\nTITLE: Revoking tokens for a user\nDESCRIPTION: This command revokes tokens for a specified user based on the provided token IDs.  The command expects a list of token IDs as input. The command is part of the mmctl tool for managing Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_revoke.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl token revoke [token-ids] [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying help for config edit\nDESCRIPTION: Shows help information for the `config edit` command, listing available options. This is a conceptual command execution, not actual code.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_edit.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl config edit -h\nmmctl config edit --help\n```\n\n----------------------------------------\n\nTITLE: Running `mmctl system getbusy` example\nDESCRIPTION: This example shows how to execute the `mmctl system getbusy` command to retrieve server busy status. It doesn't require any specific input and outputs the server's busy state information.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_getbusy.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsystem getbusy\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl token list\nDESCRIPTION: This example demonstrates how to list tokens for the user 'testuser'. Additional flags can be used to filter the results and control pagination. The 'active' flag is set to true by default.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_list.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuser tokens testuser\n```\n\n----------------------------------------\n\nTITLE: Installing mattermost-redux package\nDESCRIPTION: This command installs the mattermost-redux package along with its dependencies @mattermost/types and @mattermost/client using npm. This allows to use mattermost redux functionalities.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/mattermost-redux/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install mattermost-redux @mattermost/types @mattermost/client\n```\n\n----------------------------------------\n\nTITLE: Mocking Browser Notifications with Playwright\nDESCRIPTION: This TypeScript code snippet shows how to mock and verify browser notifications using @mattermost/playwright-lib. It sets up users and a team, logs in an admin user, stubs notifications, logs in a regular user, posts a mention, and verifies that a notification is received by the admin user.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/lib/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test, expect} from '@mattermost/playwright-lib';\n\ntest('verify notification on mention', async ({pw}) => {\n    // # Setup users and team\n    const {team, adminUser, user} = await pw.initSetup();\n\n    // # Setup admin browser with notifications\n    const {page: adminPage, channelsPage: adminChannelsPage} = await pw.testBrowser.login(adminUser);\n    await adminChannelsPage.goto(team.name, 'town-square');\n    await pw.stubNotification(adminPage, 'granted');\n\n    // # Setup user browser and post mention\n    const {channelsPage: userChannelsPage} = await pw.testBrowser.login(user);\n    await userChannelsPage.goto(team.name, 'off-topic');\n    await userChannelsPage.postMessage(`@ALL good morning, ${team.name}!`);\n\n    // * Verify notification received\n    const notifications = await pw.waitForNotification(adminPage);\n    expect(notifications.length).toBe(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Example Usage\nDESCRIPTION: This example demonstrates how to add a user to a channel using the command line tool. It assumes that `myteam:mychannel` and user identifiers `user@example.com` and `username` are valid and exist on the connected Mattermost instance.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nchannel users add myteam:mychannel user@example.com username\n```\n\n----------------------------------------\n\nTITLE: Changing Own Password - mmctl\nDESCRIPTION: This example demonstrates how to change your own password using mmctl. The current and new passwords are provided as command-line arguments.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_change-password.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user change-password my-username --current current-password --password new-password\n```\n\n----------------------------------------\n\nTITLE: Disable Group Constraints in a Channel\nDESCRIPTION: This command disables group constraints within a specific channel in a Mattermost team. It requires specifying the team and channel in the format `team:channel`. No specific dependencies are listed, but the mmctl tool must be properly configured to connect to the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_channel_disable.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group channel disable [team]:[channel] [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl system version command usage\nDESCRIPTION: Shows how to use the mmctl system version command to print the remote server version. This command has inherited options from the parent commands that allow you to configure the connection to the Mattermost server and output format.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_version.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl system version [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring E2E Test Environment Variables\nDESCRIPTION: This snippet describes how to configure environment variables for E2E testing using the `.ci/env` file. It lists various variables that can be set to customize the test environment, including server type, CWS URL, test framework, Docker services, and variables passed to the server and Cypress containers. It's crucial to set these variables correctly before running the tests.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* `SERVER`: either `onprem` (default) or `cloud`.\n* `CWS_URL` (mandatory when `SERVER=cloud`, only used in such case): when spinning up a cloud-like test server that communicates with a test instance of a customer web server.\n* `TEST`: either `cypress` (default), `playwright`, or `none` (to avoid creating the cypress/playwright sidecar containers, e.g. if you only want to launch a server instance)\n* `ENABLED_DOCKER_SERVICES`: a space-separated list of services to start alongside the server. Default to `postgres inbucket`, for smoke test purposes and for lightweight and faster start-up time. Depending on the test requirement being worked on, you may want to override as needed, as such:\n  - Cypress full tests require all services to be running: `postgres inbucket minio openldap elasticsearch keycloak`.\n  - Cypress smoke tests require only the following: `postgres inbucket`.\n  - Playwright full tests require only the following: `postgres inbucket`.\n* The following variables, will be passed over to the server container: `MM_LICENSE` (no enterprise features will be available if this is unset; required when `SERVER=cloud`), and the exploded `MM_ENV` (a comma-separated list of env var specifications)\n* The following variables, which will be passed over to the cypress container: `BRANCH`, `BUILD_ID`, `CI_BASE_URL`, `BROWSER`, `AUTOMATION_DASHBOARD_URL` and `AUTOMATION_DASHBOARD_TOKEN`\n* The `SERVER_IMAGE` variable can also be set if you want to select a custom mattermost-server image. If not specified, the value of the `SERVER_IMAGE_DEFAULT` variable defined in file `.ci/.e2erc` is used.\n* The `TEST_FILTER` variable can also be set, to customize which tests you want Cypress/Playwright to run. If not specified, only the smoke tests will run\n  - Its format depends on which tool is used: for Cypress, please check the `e2e-tests/cypress/run_tests.js` file for details. For Playwright, it can simply be populated with arguments you want to give to the `playwright test` command.\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Addition Function\nDESCRIPTION: Defines a PostgreSQL function `add()` that takes two integer inputs (x and y) and returns their sum. The function is written in SQL and uses a simple SELECT statement to perform the addition. This snippet demonstrates a basic SQL function definition.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_postgres.md#_snippet_1\n\nLANGUAGE: pgsql\nCODE:\n```\nCREATE OR REPLACE FUNCTION add(x int, y int)\nRETURNS int\nLANGUAGE SQL\nAS $myfunc$\nSELECT x + y\n$myfunc$\n```\n\n----------------------------------------\n\nTITLE: Disable Group Constraints in Team - mmctl\nDESCRIPTION: Disables group constraints in the specified Mattermost team.  The `team` argument specifies the team to modify.  No specific dependencies are mentioned beyond the availability of the `mmctl` tool.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_team_disable.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group team disable myteam\n```\n\n----------------------------------------\n\nTITLE: Unassign Users from System User Manager Role - mmctl\nDESCRIPTION: This example demonstrates unassigning users 'john.doe' and 'jane.doe' from the 'system_user_manager' role using the `mmctl permissions role unassign` command. This operation only works in the Enterprise Edition of Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_unassign.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npermissions unassign system_user_manager john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: Outgoing Webhook Example 1 - mmctl\nDESCRIPTION: This example creates an outgoing webhook for a specific team and user, with a display name and trigger words.  It defines a callback URL where webhook events will be sent. The team, user, display name, trigger word and URL are required.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_create-outgoing.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nwebhook create-outgoing --team myteam --user myusername --display-name mywebhook --trigger-word \"build\" --trigger-word \"test\" --url http://localhost:8000/my-webhook-handler\n```\n\n----------------------------------------\n\nTITLE: Example LDAP job list command\nDESCRIPTION: This example shows how to list LDAP sync jobs using the command line interface. It demonstrates the basic usage of the `ldap job list` command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_ldap_job_list.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nldap job list\n```\n\n----------------------------------------\n\nTITLE: Reset Role Permissions using mmctl\nDESCRIPTION: Resets the permissions of the specified role (e.g., 'system_read_only_admin') to the originally released defaults. This command is exclusive to Mattermost Enterprise Edition (EE).\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_reset.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions reset <role_name>\n```\n\n----------------------------------------\n\nTITLE: Example: Enable Group Constraints\nDESCRIPTION: Demonstrates enabling group constraints in a channel named 'mychannel' within the team 'myteam'. This is a basic example of how to use the `mmctl group channel enable` command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_channel_enable.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngroup channel enable myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Example import job show command\nDESCRIPTION: An example of using the `mmctl import job show` command to display details of an import job with the ID `f3d68qkkm7n8xgsfxwuo498rah`. This shows how to use the command with a specific import job ID.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_job_show.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nimport job show f3d68qkkm7n8xgsfxwuo498rah\n```\n\n----------------------------------------\n\nTITLE: mmctl Channel Search Options\nDESCRIPTION: This snippet lists the available options for the `mmctl channel search` command. It includes options for displaying help (`-h`, `--help`) and specifying the team (`--team`).\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_search.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help          help for search\n    --team string   Team name or ID\n```\n\n----------------------------------------\n\nTITLE: Setting WebSocket for Node.js (JavaScript)\nDESCRIPTION: This code addresses the requirement of defining `globalThis.WebSocket` when using `WebSocketClient` in a Node.js environment. It imports the `ws` package and assigns it to `globalThis.WebSocket` if it's not already defined.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport WebSocket from 'ws';\n\nif (!globalThis.WebSocket) {\n    globalThis.WebSocket = WebSocket;\n}\n\nconst wsClient = new WebSocketClient();\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl auth clean\nDESCRIPTION: This example demonstrates how to use the `mmctl auth clean` command. It cleans all the currently stored credentials for any configured Mattermost instances. No input parameters are required, and it does not produce any direct output other than potentially error messages if the command fails.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_clean.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nauth clean\n```\n\n----------------------------------------\n\nTITLE: Rename channel name only - mmctl\nDESCRIPTION: This example showcases renaming a channel's name while keeping the display name the same using the `mmctl channel rename` command. It requires the channel identifier (team:oldchannel) and the `--name` flag with the new channel name.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_rename.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmmctl channel rename myteam:oldchannel --name 'new-channel'\n```\n\n----------------------------------------\n\nTITLE: Example usage of group team status command\nDESCRIPTION: Example usage demonstrating how to check the group status of 'myteam'. This command will output the group constrain status for the specified team.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_team_status.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngroup team status myteam\n```\n\n----------------------------------------\n\nTITLE: Setting busy state\nDESCRIPTION: This command sets the Mattermost server's busy state to true for a specified duration.  Non-critical services are disabled during this period. The `-s` flag specifies the number of seconds the server will remain in the busy state. Default is 3600 seconds (1 hour).\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_setbusy.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl system setbusy -s 3600\n```\n\n----------------------------------------\n\nTITLE: mmctl Documentation Generation Command\nDESCRIPTION: This snippet shows the command to generate mmctl documentation. It takes a directory as an option and also lists the help flag. The `mmctl docs` command generates documentation for the `mmctl` tool.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_docs.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl docs [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl user verify example\nDESCRIPTION: Provides an example usage of the `mmctl user verify` command.  This example shows how to verify the email address of a user with the username 'user1'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_verify.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nuser verify user1\n```\n\n----------------------------------------\n\nTITLE: Testing PDF File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a PDF file (`Documents/PDF.pdf`) to Mattermost and verifying that it generates a generic PDF thumbnail and that the file previewer shows the first 5 pages of the PDF. This ensures basic PDF support and preview functionality.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: mmctl token generate Help Option\nDESCRIPTION: The `-h` or `--help` flag displays help information about the `generate` command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_generate.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for generate\n```\n\n----------------------------------------\n\nTITLE: Combined Text Styles in Markdown\nDESCRIPTION: This snippet showcases how multiple text formatting styles can be combined within a single sentence using Markdown.  It demonstrates the use of bold, italic, and strikethrough formatting together.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_text_style.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\nThis sentence contains **bold**, _italic_, ***bold-italic***, and ~~strikethrough~~ text.\n```\n\n----------------------------------------\n\nTITLE: Running Mattermost Server with Docker\nDESCRIPTION: This snippet outlines the steps to run the Mattermost server using Docker, ideal for consistent testing environments. It covers configuring environment variables, setting the server image, adding a license, and running Playwright smoke tests.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# 1. Configure environment variables in e2e-tests/.ci/env\n#    Create this file if it doesn't exist\n\n# 2. Set the server image (optional)\n#    To use the latest master image:\nSERVER_IMAGE=\"mattermostdevelopment/mattermost-enterprise-edition:master\"\n#    If not set, it will use the current commit: mattermostdevelopment/mattermost-enterprise-edition:$(git rev-parse --short=7 HEAD)\n#    Note: The image must exist in Docker Hub at https://hub.docker.com/r/mattermostdevelopment/mattermost-enterprise-edition/tags\n\n# 3. Add your license if needed\nMM_LICENSE=<your-license-key>\n\n# 4. For additional configuration options, see e2e-tests/README.md\n\n# 5. Run the server and Playwright's smoke tests from the e2e-tests directory\ncd e2e-tests && TEST=playwright make\n```\n\n----------------------------------------\n\nTITLE: Testing Excel File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an Excel file (`Documents/Excel.xlsx`) to Mattermost and verifying that it generates a generic Excel thumbnail and preview window. The purpose is to ensure basic Excel file support and preview functionality.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: mmctl auth Options\nDESCRIPTION: These options are available for the `mmctl auth` command. The `-h` or `--help` flag displays help information about the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n  -h, --help   help for auth\n```\n\n----------------------------------------\n\nTITLE: Enable Group Constraints in Channel\nDESCRIPTION: Enables group constraints in the specified channel using the `mmctl group channel enable` command. The command requires the team and channel to be specified in the format `team:channel`. Flags can be used to modify the command's behavior.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_channel_enable.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group channel enable [team]:[channel] [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating Password with Hashed Value - mmctl\nDESCRIPTION: This example shows how to update a user's password using mmctl when you already have the new password hashed. It requires system permissions.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_change-password.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user change-password john_doe --password HASHED_PASSWORD --hashed\n```\n\n----------------------------------------\n\nTITLE: Generating Bash Autocompletion Script\nDESCRIPTION: This command generates the bash autocompletion script for mmctl. It should be sourced in the current shell or added to the .bashrc file for persistent autocompletion.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_completion_bash.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl completion bash\n```\n\n----------------------------------------\n\nTITLE: Marking Post as Deleted using mmctl\nDESCRIPTION: This command marks a specific post as deleted. The post will be removed from user clients but remains in the database unless permanently deleted.  Requires the post ID as input.  No output is generated unless an error occurs.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_delete.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmmctl post delete udjmt396tjghi8wnsk3a1qs1sw\n```\n\n----------------------------------------\n\nTITLE: Importing sample data to the remote server\nDESCRIPTION: This command imports sample data directly into the remote Mattermost server. By not specifying the `--bulk` flag, the command assumes that the data should be imported directly.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_sampledata.rst#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmmctl sampledata\n```\n\n----------------------------------------\n\nTITLE: Example Usage of config reload\nDESCRIPTION: This example illustrates the simplest usage of the `config reload` command without any flags, assuming the user wants to apply configuration changes to the Mattermost server. It shows how to reload the configuration.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_reload.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nconfig reload\n```\n\n----------------------------------------\n\nTITLE: Generating sample data to a file\nDESCRIPTION: This command generates sample data and stores it in a JSONL file locally. The `--bulk` flag specifies the path to the output file.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_sampledata.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl sampledata --bulk sampledata-file.jsonl\n```\n\n----------------------------------------\n\nTITLE: mmctl group channel status command\nDESCRIPTION: Displays the group constrain status for a specified channel in Mattermost. It requires the channel to be specified in the format [team]:[channel].\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_channel_status.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group channel status [team]:[channel] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Excess Files with Shell Script\nDESCRIPTION: This shell script finds files in a directory, skips the first MAX_FILES results, and then deletes the rest. It uses the `find` command to locate files, `sed` to remove the initial files from the list, and a `while` loop to iterate through the remaining files and delete them using `rm -f`. MAX_FILES is assumed to be a previously defined variable.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_shell.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nfind /path/to/whatever -type f | sed \"1,$MAX_FILES d' | while read fn; do\necho \"deleting $fn\"\nrm -f $fn\ndone\n```\n\n----------------------------------------\n\nTITLE: Printing sample data to stdout\nDESCRIPTION: This command generates sample data and prints it to the standard output. The `--bulk -` option indicates that the output should be written to stdout.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_sampledata.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmmctl sampledata --bulk -\n```\n\n----------------------------------------\n\nTITLE: Visual testing with Playwright snapshots\nDESCRIPTION: This TypeScript code uses @mattermost/playwright-lib to perform visual testing using Playwright's snapshot capabilities. It logs in a user, navigates to a channel, hides dynamic content, and takes a snapshot of the page for comparison. This test requires access to 'pw' fixture and other page objects for proper execution.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/lib/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test, expect} from '@mattermost/playwright-lib';\n\ntest('verify channel header appearance', async ({pw, browserName, viewport}, testInfo) => {\n    // # Setup and login\n    const {user} = await pw.initSetup();\n    const {page, channelsPage} = await pw.testBrowser.login(user);\n\n    // # Navigate and prepare page\n    await channelsPage.goto();\n    await expect(channelsPage.appBar.playbooksIcon).toBeVisible();\n    await pw.hideDynamicChannelsContent(page);\n\n    // * Take and verify snapshot\n    await pw.matchSnapshot(testInfo, {page, browserName, viewport});\n});\n```\n\n----------------------------------------\n\nTITLE: Stressing Cypress Test Cases\nDESCRIPTION: This set of commands outlines the process for stressing Cypress test cases.  It involves navigating to the `cypress/` directory, identifying test files, and using `node run_tests.js` with the `--stress-test-count` flag to run the selected tests multiple times. It also requires a properly setup Cypress environment.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd cypress/\nfind cypress/tests/\nnode run_tests.js --include-file=create_a_team_spec.js,demoted_user_spec.js --invert --stress-test-count=3\n```\n\n----------------------------------------\n\nTITLE: Importing GPG Development Keys\nDESCRIPTION: These commands import the public and private GPG development keys, which are required for signing the test plugins. This step needs to be performed only once to set up the environment for plugin signature generation.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngpg --import ./development-public-key.gpg\ngpg --import ./development-private-key.asc\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Mattermost Packages with npm\nDESCRIPTION: This command builds two packages, `platform/client` and `platform/components`, using npm. The `--workspace` flag is used multiple times to specify each package to be built. The `npm run build` command executes the build script defined in each package's `package.json` file.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build --workspace=platform/client --workspace=platform/components\n```\n\n----------------------------------------\n\nTITLE: mmctl extract run Example\nDESCRIPTION: A basic example showing how to execute the `extract run` command without any specific flags. This will start a content extraction job using default settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_extract_run.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nextract run\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl permissions role show\nDESCRIPTION: This is an example showing the command with the role name system_user.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_show.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npermissions role show system_user\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: Lists options inherited from parent commands. These options provide configuration and control over the mmctl tool's behavior, such as specifying the configuration file path, disabling paged output, and setting security-related flags. They affect how `mmctl` interacts with the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_restore.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Testing PNG File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a PNG image (`Images/PNG.png`) to Mattermost and verifying that it generates a scaled thumbnail and preview window as expected. The purpose is to confirm that PNG images are correctly rendered in Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: mmctl system version example\nDESCRIPTION: Provides an example of running the `system version` command.  This will print the Mattermost server version to the console.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_version.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsystem version\n```\n\n----------------------------------------\n\nTITLE: Testing BMP File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a BMP image (`Images/BMP.bmp`) to Mattermost and verifying that it generates a scaled thumbnail and preview window as expected. The objective is to ensure compatibility and correct rendering of BMP images within the platform.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: mmctl config patch options\nDESCRIPTION: Options that can be used when patching config. The help option provides usage instructions for the patch command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_patch.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for patch\n```\n\n----------------------------------------\n\nTITLE: Testing M4A File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an M4A audio file (`Audio/M4a.m4a`) to Mattermost and verifying that it generates a generic audio thumbnail and the preview window behaves as expected (OS/browser dependent). The goal is to ensure basic M4A audio support.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl auth list\nDESCRIPTION: This example demonstrates how to execute the `mmctl auth list` command to display the registered credentials. No additional options are specified.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_list.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nauth list\n```\n\n----------------------------------------\n\nTITLE: Running Mattermost Docker Preview Image\nDESCRIPTION: This command runs the Mattermost Docker preview image. It names the container \"mattermost-preview\", runs it in detached mode, publishes port 8065, and adds a host entry. This setup is not intended for production environments.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/build/docker-preview/README.md#_snippet_0\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run --name mattermost-preview -d --publish 8065:8065 --add-host dockerhost:127.0.0.1 mattermost/mattermost-preview\n```\n\n----------------------------------------\n\nTITLE: Testing MOV File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a MOV video (`Videos/MOV.mov`) to Mattermost and verifying that it generates a generic video thumbnail and the preview window behaves as expected (OS/browser dependent). The purpose is to check MOV video file support and playback.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: mmctl user email Options\nDESCRIPTION: Lists the available options for the mmctl user email command, including the help flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_email.rst#_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\n-h, --help   help for email\n```\n\n----------------------------------------\n\nTITLE: Testing MP3 File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an MP3 audio file (`Audio/MP3.mp3`) to Mattermost and verifying that it generates a generic audio thumbnail and a playable preview window. This confirms basic MP3 audio support and playback.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: mmctl user verify options\nDESCRIPTION: Lists the available options for the `mmctl user verify` command. The main option specific to this command is `-h, --help` for displaying help. Other options are inherited from parent commands, such as config file path, disabling pager, insecure TLS settings, output format, local socket communication, suppressing output, strict version matching, and suppressing warnings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_verify.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n  -h, --help   help for verify\n```\n\n----------------------------------------\n\nTITLE: mmctl group user restore Synopsis\nDESCRIPTION: Shows the general syntax for the `mmctl group user restore` command. It restores a deleted custom user group. The command takes the group name as an argument and supports optional flags.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_user_restore.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl group user restore [groupname] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic mmctl Import Job List Example\nDESCRIPTION: This is a basic example showing how to list import jobs without any additional flags. It will likely use default settings for pagination and number of results per page.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_job_list.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nimport job list\n```\n\n----------------------------------------\n\nTITLE: Link Preview without Image Example\nDESCRIPTION: This snippet provides an example link that should render a link preview in Mattermost but without an image. It includes a link to Coveralls. The expected behavior is that the preview displays the linked content's description but lacks a visual representation.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-link-preview.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n#### B) Link preview without an image\n\nLink 1 example: https://coveralls.io/builds/9818822/source?filename=app%2Faudit.go\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading Levels\nDESCRIPTION: This snippet demonstrates the different heading levels available in Markdown. Each heading level is created using a different number of '#' characters followed by a space and the heading text. The number of '#' symbols indicates the heading level (1-6).\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_headings.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Heading 1 font size\n## Heading 2 font size\n### Heading 3 font size\n#### Heading 4 font size\n##### Heading 5 font size\n###### Heading 6 font size\n```\n\n----------------------------------------\n\nTITLE: JSON Output Option\nDESCRIPTION: Specifies that the output should be formatted as JSON.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\n--json                         the output format will be in json format\n```\n\n----------------------------------------\n\nTITLE: Displaying Websocket Information\nDESCRIPTION: This command displays websocket information in a human-readable format.  It supports flags such as `-h` or `--help` to display help information.  The output format can be controlled using the `--json` flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_websocket.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl websocket [flags]\n```\n\n----------------------------------------\n\nTITLE: Strict Version Matching Option\nDESCRIPTION: Enforces strict version matching between the mmctl client and the Mattermost server. Commands will only run if the versions match.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_10\n\nLANGUAGE: Text\nCODE:\n```\n--strict                       will only run commands if the mmctl version matches the server one\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited command options\nDESCRIPTION: Lists options inherited from parent commands for mmctl, enabling configuration and output customization. These options manage aspects such as configuration file location, output formatting, TLS security, and communication channels (local socket or remote). They also control verbosity and version compatibility.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_license.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: PEM Encoded Public Key\nDESCRIPTION: This code snippet represents a public key encoded in PEM (Privacy Enhanced Mail) format. PEM is a common way to represent cryptographic keys using ASCII encoding. The key is enclosed within BEGIN and END PUBLIC KEY markers.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/channels/utils/license-public-key.txt#_snippet_0\n\nLANGUAGE: PEM\nCODE:\n```\n-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyZmShlU8Z8HdG0IWSZ8r\ntSyzyxrXkJjsFUf0Ke7bm/TLtIggRdqOcUF3XEWqQk5RGD5vuq7Rlg1zZqMEBk8N\nEZeRhkxyaZW8pLjxwuBUOnXfJew31+gsTNdKZzRjrvPumKr3EtkleuoxNdoatu4E\nHrKmR/4Yi71EqAvkhk7ZjQFuF0osSWJMEEGGCSUYQnTEqUzcZSh1BhVpkIkeu8Kk\n1wCtptODixvEujgqVe+SrE3UlZjBmPjC/CL+3cYmufpSNgcEJm2mwsdaXp2OPpfn\na0v85XL6i9ote2P+fLZ3wX9EoioHzgdgB7arOxY50QRJO7OyCqpKFKv6lRWTXuSt\nhwIDAQAB\n-----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl group channel status\nDESCRIPTION: This is an example demonstrating how to check the group channel status for the channel 'mychannel' in the team 'myteam'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_channel_status.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngroup channel status myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: mmctl auth Inherited Options\nDESCRIPTION: These options are inherited from parent commands and can be used to configure the behavior of `mmctl auth`. They control configuration file location, output paging, TLS security, output format, local communication, command verbosity, strict version checking, and warning suppression.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Suppress Warnings Option\nDESCRIPTION: Disables the printing of warning messages during command execution.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_11\n\nLANGUAGE: Text\nCODE:\n```\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl team users remove synopsis\nDESCRIPTION: Shows the basic synopsis of the `mmctl team users remove` command, which is used to remove users from a team. It requires a team name and a list of users as input.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_users_remove.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl team users remove [team] [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl token options\nDESCRIPTION: This section describes the options available for the `mmctl token` command. It includes the help option specific to the `token` command, as well as inherited options from parent commands like configuration file path, disabling pager, insecure TLS settings, output format, local communication, quiet mode, strict version matching, and suppressing warnings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for token\n```\n\n----------------------------------------\n\nTITLE: mmctl global options\nDESCRIPTION: Options inherited from parent commands that control global settings for the mmctl tool, such as config file location, output format, and security settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_patch.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: These options are inherited from the parent command and can be used with `mmctl user`. They configure aspects like the configuration file path, output format, TLS settings, and verbosity.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Deleting an export file with mmctl\nDESCRIPTION: This command deletes an export file specified by its name. The user needs to have the appropriate permissions to perform this action. It removes the file from the storage location.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_export_delete.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl export delete [exportname] [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl config reset examples\nDESCRIPTION: Examples of how to use the mmctl config reset command to reset specific settings or sections.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_reset.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nconfig reset SqlSettings.DriverName LogSettings\n```\n\n----------------------------------------\n\nTITLE: mmctl team delete Inherited Options\nDESCRIPTION: These options are inherited from parent commands. They provide configurations such as specifying the config file path, disabling paged output, allowing insecure TLS protocols/versions, formatting the output as JSON, using a local unix socket, suppressing command output, enforcing strict version matching, and disabling warning messages.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_delete.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n  --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n  --disable-pager                disables paged output\n  --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n  --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n  --json                         the output format will be in json format\n  --local                        allows communicating with the server through a unix socket\n  --quiet                        prevent mmctl to generate output for the commands\n  --strict                       will only run commands if the mmctl version matches the server one\n  --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: Options inherited from parent mmctl commands. These control aspects like configuration file path, output format, and security settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_reset.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl group help\nDESCRIPTION: Displays help information for the mmctl group command, outlining its usage and available options.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n -h, --help   help for group\n```\n\n----------------------------------------\n\nTITLE: JSON Output Flag\nDESCRIPTION: The `--json` flag configures the output format to be in JSON, which is useful for scripting and automation.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_move.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n--json\n```\n\n----------------------------------------\n\nTITLE: mmctl auth list help flag\nDESCRIPTION: Displays help information for the mmctl auth list command, including available options and usage instructions.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_list.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for list\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: Lists the options inherited from parent commands. These options configure the mmctl client, including configuration file path, disabling paged output, insecure TLS protocols and versions, output format, local socket communication, quiet mode, strict version matching, and suppressing warnings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl user convert synopsis\nDESCRIPTION: Shows the synopsis for the `mmctl user convert` command, detailing how to convert user accounts to bots or bots to user accounts using the command-line tool.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_convert.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl user convert (--bot [emails] [usernames] [userIds] | --user <username> --password PASSWORD [--email EMAIL]) [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl user email Command Synopsis\nDESCRIPTION: Shows the basic syntax of the mmctl user email command. This command requires a user identifier and a new email address as arguments.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_email.rst#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\nmmctl user email [user] [new email] [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Zsh Completion Script\nDESCRIPTION: This snippet shows how to generate the zsh autocompletion script for mmctl.  The output of this command should be sourced in your zsh shell to enable autocompletion. You can either source it directly or add it to your .zshrc file for persistent autocompletion.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_completion_zsh.rst#_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\n. <(mmctl completion zsh)\n```\n\n----------------------------------------\n\nTITLE: mmctl permissions role Options\nDESCRIPTION: Displays the help information for the 'mmctl permissions role' command. This option is used to get a description of available subcommands and flags.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n  -h, --help   help for role\n```\n\n----------------------------------------\n\nTITLE: SAML Utilities Options\nDESCRIPTION: Lists the available options for the `mmctl saml` command, including help.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_saml.rst#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\n  -h, --help   help for saml\n```\n\n----------------------------------------\n\nTITLE: CircleCI Dependency Cache Configuration\nDESCRIPTION: Defines the CircleCI configuration to cache compiled subpackage code (in `lib` directory).  Modifying the `paths` under `save_cache` will cache the compiled code for the mentioned packages.  This will speed up subsequent builds.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\naliases:\n  - &save_cache\n    save_cache:\n      paths:\n        - ~/mattermost/mattermost-webapp/packages/apple/lib\n        - ~/mattermost/mattermost-webapp/packages/banana/lib\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: Displays the inherited options from the parent commands for the `mmctl user verify` command. These options include configuration file path, disabling paged output, insecure TLS settings, JSON output format, local socket communication, suppressing output, strict version matching, and suppressing warnings. These are common options for mmctl commands.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_verify.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n  --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n  --disable-pager                disables paged output\n  --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n  --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n  --json                         the output format will be in json format\n  --local                        allows communicating with the server through a unix socket\n  --quiet                        prevent mmctl to generate output for the commands\n  --strict                       will only run commands if the mmctl version matches the server one\n  --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl license command options\nDESCRIPTION: Describes the options available for the mmctl license command. The primary option is `-h, --help` which displays help information for the command. It inherits several options from parent commands, like configuration file path, disabling pager, insecure TLS protocols/versions, JSON output, local socket communication, quiet mode, strict version checking, and suppressing warnings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_license.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-h, --help   help for license\n```\n\n----------------------------------------\n\nTITLE: Testing AVI File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an AVI video (`Videos/AVI.avi`) to Mattermost and verifying that it generates a generic video thumbnail and the preview window behaves as expected (OS/browser dependent). The goal is to ensure basic AVI video support and playback where possible.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Applying Apache License Copyright Notice\nDESCRIPTION: This snippet provides a template for the copyright notice that should be included at the top of files when applying the Apache License 2.0.  It instructs users to replace [yyyy] with the year and [name of copyright owner] with the name of the copyright holder. The notice must be placed within the appropriate comment syntax for the file type.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/public/LICENSE.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n```\n\n----------------------------------------\n\nTITLE: mmctl config inherited options\nDESCRIPTION: Lists options inherited from parent commands, affecting global `mmctl` behavior. These options include configuration file path, pager disabling, TLS protocol settings, output format control (JSON), local socket communication, command output suppression, version matching enforcement, and warning message suppression.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config.rst#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: These options are inherited from parent commands and apply to various `mmctl` commands. They configure aspects like the configuration file path, output format, TLS settings, and warning suppression. They provide global configuration options for interacting with the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_create.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Setting SiteURL and ListenAddress for Mattermost Server 2\nDESCRIPTION: This configuration snippet shows how to set the `SiteURL` and `ListenAddress` parameters for the second Mattermost server.  Similar to the first server, these settings are necessary for configuring subpath access. It's important that each server has a unique `SiteURL` and `ListenAddress` to avoid conflicts.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/README-Subpath.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SiteURL\": \"http://localhost/company/mattermost2\",\n  \"ListenAddress\": \":8066\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Make\nDESCRIPTION: These `make` commands are used to manage the E2E testing environment. `make start-dashboard && make generate-test-cycle` starts the automation dashboard and initiates a test cycle. `make` starts and prepares the server and runs the Cypress smoke tests. `TEST=playwright make` runs Playwright tests. `TEST=none make` starts a local server instance without testing. `make stop` tears down the server and cleans up the environment.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/README.md#_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake start-dashboard && make generate-test-cycle\nmake\nTEST=playwright make\nTEST=none make\nmake cloud-init\nmake cloud-teardown\nmake stop\nmake clean\nmake start-server\n```\n\n----------------------------------------\n\nTITLE: Insecure TLS Version Option\nDESCRIPTION: Allows the use of older, insecure TLS versions 1.0 and 1.1. This is generally not recommended due to known security vulnerabilities.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n```\n\n----------------------------------------\n\nTITLE: Building the Full YAML\nDESCRIPTION: This command builds the full YAML file for the Mattermost API documentation. It also checks the syntax using swagger-cli. The output will be in `v4/html/static/mattermost-openapi-v4.yaml`.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/api/README.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Testing WMV File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a WMV video (`Videos/WMV.wmv`) to Mattermost and verifying that it generates a generic video thumbnail and the preview window behaves as expected (OS/browser dependent). This is a test of WMV video file support and playback.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Link Preview with Image (Top Right)\nDESCRIPTION: This snippet provides example links that should render link previews with an image in the top right corner in Mattermost. It includes links to theglobeandmail.com, Twitter, GitHub, and Stack Overflow. The expected behavior is that each preview displays the linked content's description and a thumbnail image in the specified location.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-link-preview.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n#### C) Link preview with image in top right corner\n\nLink 1 example: http://www.theglobeandmail.com/news/national/three-canadians-shortlisted-for-global-teacher-prize/article33429901/\n\nLink 2 example: https://twitter.com/ArchieComics/status/813007703861841920\n\nLink 3 example: https://github.com/mattermost\n\nLink 4 example: http://stackoverflow.com/questions/36650437/using-mattermost-api-via-gitlab-oauth-as-an-end-user-with-username-and-password\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with Column Alignment\nDESCRIPTION: This markdown table demonstrates how to align columns using colons in the separator row.  Left alignment is indicated by a colon on the left, center alignment by colons on both sides, and right alignment by a colon on the right.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-tables.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| 1 | this text       |  $100 |\n| 2 | is              |   $10 |\n| 3 | centered        |    $1 |\n```\n\n----------------------------------------\n\nTITLE: Display mmctl Version\nDESCRIPTION: This command prints the version of the mmctl command-line tool. It has no required dependencies.  The output is the version string of mmctl.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_version.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl version [flags]\n```\n\n----------------------------------------\n\nTITLE: Insecure SHA1 Intermediate Option\nDESCRIPTION: Allows the use of insecure TLS protocols, specifically SHA-1, for intermediate certificates. This is generally not recommended for security reasons.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands\nDESCRIPTION: These options are inherited from the parent commands in mmctl. They configure the behavior of the mmctl tool itself, such as the configuration file path, output format, and security settings. They don't directly relate to enabling the bot but affect the execution environment of the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_bot_enable.rst#_snippet_3\n\nLANGUAGE: TEXT\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl team restore Options\nDESCRIPTION: Describes the available options for the `mmctl team restore` command. Currently, the only listed option is `-h, --help` which displays help information for the restore command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_restore.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for restore\n```\n\n----------------------------------------\n\nTITLE: Setting SiteURL and ListenAddress for Mattermost Server 1\nDESCRIPTION: This configuration snippet shows how to set the `SiteURL` and `ListenAddress` parameters for the first Mattermost server. The `SiteURL` defines the URL under which the server will be accessible, while `ListenAddress` specifies the port on which the server will listen for incoming connections. These settings are crucial for configuring subpath access through a reverse proxy.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/README-Subpath.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"SiteURL\": \"http://localhost/company/mattermost1\",\n  \"ListenAddress\": \":8065\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Unordered List in Markdown\nDESCRIPTION: This snippet demonstrates a nested unordered list. It tests the correct indentation and bullet style for nested unordered lists. There are no dependencies. Expected output: A nested unordered list with Alpha, Bravo, Charlie, Delta, Echo, and Foxtrot.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n• Alpha\n    • Bravo\n• Charlie\n• Delta\n    • Echo\n    • Foxtrot\n```\n\n----------------------------------------\n\nTITLE: Indented Code Block in Markdown\nDESCRIPTION: This snippet demonstrates an indented code block in Markdown. Indentation is used to denote the code block.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/public/model/testdata/markdown-sample-with-rewritten-image-urls.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n```\n\n----------------------------------------\n\nTITLE: mmctl channel unarchive command options\nDESCRIPTION: These options provide configuration and control over the `mmctl channel unarchive` command's behavior. They include settings for file configuration, disabling paged output, insecure TLS protocols, output format, and communication methods.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_unarchive.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for unarchive\n\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Fenced Code Block in Markdown\nDESCRIPTION: This snippet demonstrates a fenced code block in Markdown.  Backticks are used to delimit the code block.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/public/model/testdata/markdown-sample-with-rewritten-image-urls.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\nSample text here...\n```\n```\n\n----------------------------------------\n\nTITLE: Escaping Markdown Formatting\nDESCRIPTION: This snippet demonstrates cases where the Markdown formatting symbols are intended to be displayed as normal text. It illustrates situations where symbols like underscores and asterisks are not properly paired or escaped, causing the text to render without formatting.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_text_style.md#_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\nNormal Text_\n_Normal Text\n_Normal Text*\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Mixed List in Markdown\nDESCRIPTION: This snippet demonstrates a nested mixed list. It tests the rendering of mixed and nested list types. There are no dependencies. Expected Output: a nested mixed list starting with Alpha and containing mixed ordered and unordered lists.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n• Alpha\n    1. Bravo\n        • Charlie\n        • Delta\n• Echo\n• Foxtrot\n    • Golf\n        1. Hotel\n    • India\n        1. Juliet\n        2. Kilo\n    • Lima\n• Mike\n    1. November\n        4. Oscar\n            5. Papa\n```\n\n----------------------------------------\n\nTITLE: Remove admin privileges from user(s) - mmctl\nDESCRIPTION: This command removes system administrator privileges from one or more specified users in Mattermost. It accepts a list of usernames as arguments. No specific dependencies are listed, but 'mmctl' must be configured and connected to a Mattermost server. The output will likely be a success or failure message for each user.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_roles_member.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# You can remove admin privileges from one user\n$ mmctl roles member john_doe\n\n# Or demote multiple users at the same time\n$ mmctl roles member john_doe jane_doe\n```\n\n----------------------------------------\n\nTITLE: Inherited Options\nDESCRIPTION: Lists the options inherited from parent commands, including configuration file path, disabling pager, insecure TLS protocols, JSON output format, local communication, quiet mode, strict version matching, and suppressing warnings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_saml.rst#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: Lists the options inherited from parent commands, including configuration file path, disabling pager, insecure TLS settings, output format, local socket communication, quiet mode, strict version matching, and suppressing warnings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_email.rst#_snippet_3\n\nLANGUAGE: TEXT\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl group team status command\nDESCRIPTION: Shows the group constrain status for the specified team. Use `mmctl group team status [team] [flags]` to execute the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_team_status.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl group team status [team] [flags]\n```\n\n----------------------------------------\n\nTITLE: Exporting Keycloak Realm Configuration - Bash\nDESCRIPTION: This bash command exports the Keycloak realm configuration to a JSON file. It uses the Keycloak CLI (`kc.sh`) to export the 'mattermost' realm, including users, to the specified file path. This is essential for persisting and sharing Keycloak configurations between environments.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/build/docker/keycloak/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/opt/keycloak/bin/kc.sh export --realm mattermost --users realm_file --file /opt/keycloak/data/import/realm-export.json\n```\n\n----------------------------------------\n\nTITLE: Building Mattermost Components from Webapp root\nDESCRIPTION: This command builds the Mattermost components package from the root directory of the webapp using npm and workspace flag. The `--workspace` flag tells npm to run the `build` script in the specified workspace. This approach is relevant in a multi-product development environment.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/components/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --workspace=platform/components\n```\n\n----------------------------------------\n\nTITLE: Applying AGPLv3 License to a Program\nDESCRIPTION: This snippet outlines the steps to apply the GNU Affero General Public License version 3 to a new software program. It involves adding specific notices to the source files, including copyright information, license terms, and a link to the full license text. It also recommends adding contact information and obtaining a copyright disclaimer from an employer or school if necessary.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/LICENSE.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Example 2\nDESCRIPTION: This is another standard markdown table similar to example 1 but surrounded by pipes on each side. It serves to show that the surrounding pipes are not required.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-tables.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n```\n\n----------------------------------------\n\nTITLE: Modifying Outgoing Webhook with mmctl\nDESCRIPTION: This example demonstrates how to modify an existing outgoing webhook using the `mmctl webhook modify-outgoing` command. It showcases the usage of flags like `--channel`, `--display-name`, `--description`, `--icon`, `--url`, `--content-type`, `--trigger-word`, and `--trigger-when` to update the webhook's attributes. Requires a valid webhook ID.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_modify-outgoing.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmmctl webhook modify-outgoing [webhookId] --channel [channelId] --display-name [displayName] --description \"New webhook description\" --icon http://localhost:8000/my-slash-handler-bot-icon.png --url http://localhost:8000/my-webhook-handler --content-type \"application/json\" --trigger-word test --trigger-when start\n```\n\n----------------------------------------\n\nTITLE: Link Preview with Image (Bottom)\nDESCRIPTION: This snippet provides example links that should render link previews with an image at the bottom in Mattermost. It includes links to Yahoo News and Mattermost. The expected behavior depends on the 'Default appearance of image link previews' setting. If 'Collapsed', the image requires expansion. Otherwise, the image should be visible below the description.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-link-preview.md#_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n#### D) Link preview with image at the bottom\n\nIf \"Account Settings > Display > Default appearance of image link previews\" is set to \"Collapsed\", you must click the expand arrows to display the image.\n\nLink 1 example: https://www.yahoo.com/news/panasonic-unveils-solar-roof-may-212400917.html\n\nLink 2 example: https://mattermost.com\n```\n\n----------------------------------------\n\nTITLE: Inherited Options\nDESCRIPTION: Lists options inherited from parent commands. These options configure the mmctl environment, such as the configuration file path, output format, and security settings. They allow for customization of the command-line tool's behavior.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_get.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n  --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n  --disable-pager                disables paged output\n  --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n  --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n  --json                         the output format will be in json format\n  --local                        allows communicating with the server through a unix socket\n  --quiet                        prevent mmctl to generate output for the commands\n  --strict                       will only run commands if the mmctl version matches the server one\n  --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl preference list\nDESCRIPTION: This example shows how to list preferences for a specific user using their email address. The `mmctl` tool must be configured to connect to the Mattermost server. The command retrieves and displays the preferences associated with the specified user.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_list.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npreference list user@example.com\n```\n\n----------------------------------------\n\nTITLE: Rendering Ordered Lists Separated by Carriage Returns in Markdown\nDESCRIPTION: This snippet demonstrates ordered lists separated by carriage returns. It tests how a parser handles newlines between list items. There are no dependencies. Expected output:  An ordered list followed by more list items after a newline.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n1. One\n  • Two\n2. Two\n3. Three\n```\n\n----------------------------------------\n\nTITLE: mmctl permissions role Inherited Options\nDESCRIPTION: These options are inherited from parent commands and allow for configuration of the mmctl tool. They control aspects like the configuration file path, output format, security settings, and server communication.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Cleaning Mattermost Workspaces with npm\nDESCRIPTION: This command executes the 'clean' script (if defined) in each of the Mattermost web app workspaces.  The `--workspaces` flag specifies that the command should be run for all workspaces and the `--if-present` flag ensures that the script is only executed if it is defined in a package's `package.json` file. This is useful for removing build artifacts or temporary files.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run clean --workspaces --if-present\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent commands\nDESCRIPTION: These options are inherited from the parent commands and can be used to configure the behavior of mmctl, such as specifying the configuration file path, disabling paged output, and setting TLS options.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_list.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited options\nDESCRIPTION: These options are inherited from parent commands and can be used with the mmctl plugin command. They provide configurations such as config file path, output format, and security settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin.rst#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Running Mattermost Server from Source\nDESCRIPTION: This snippet demonstrates how to start the Mattermost server directly from the source code. It shows running the server and webapp together, or separately for improved performance.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Typically run the local server with:\ncd server && make run\n\n# Or run webapp and server on separate terminals for better performance\n# First terminal: Build and run the webapp\ncd webapp && make run\n# Second terminal: Run the server\ncd server && make run-server\n```\n\n----------------------------------------\n\nTITLE: Loading Bash Completion in Current Shell\nDESCRIPTION: This command loads the mmctl bash completion script into the current shell session, enabling autocompletion for mmctl commands. It requires the `mmctl completion bash` command to be executable.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_completion_bash.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n. <(mmctl completion bash)\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: These are the options inherited from the parent mmctl commands. They handle configuration, output format, connection settings, and warnings. The --config flag is used to specify the configuration file path.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_integrity.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: This section describes the options inherited from parent commands. These options configure various aspects of `mmctl`'s behavior, such as configuration file path, output formatting, and security settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_completion.rst#_snippet_1\n\nLANGUAGE: TEXT\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Listing teams with mmctl team list\nDESCRIPTION: This command lists all teams on the Mattermost server.  It shows a basic example of using the `team list` command and mentions options like help, configuration file path, JSON output format and strict version checking. No dependencies are explicitly mentioned, but it relies on a correctly configured mmctl environment.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl team list [flags]\n```\n\n----------------------------------------\n\nTITLE: Publishing Subpackages to npm\nDESCRIPTION: Demonstrates how to publish Mattermost subpackages to npm, including dry runs and generating tar files for inspection. It uses the `npm publish` command with the `--workspace` and `--access=public` flags. Requires npm to be installed and configured with appropriate access rights.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# Run a dry run which will list all the files to be included in the published package.\nnpm publish --dry-run --workspace=packages/apple\n\n# Generate the tar file that will be uploaded to NPM for inspection.\nnpm pack --workspace=packages/apple\n\n# Actually publish these packages. You can also use --workspaces to publish everything.\nnpm publish --access=public --workspace=packages/apple --workspace=packages/banana\n```\n\n----------------------------------------\n\nTITLE: mmctl auth login command options\nDESCRIPTION: Lists available options for the `mmctl auth login` command, including access token file, help, MFA token, name, no-activate, password file, and username. These options allow users to customize the authentication process.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_login.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n  -t, --access-token-file string   Access token file to be read to use instead of username/password\n  -h, --help                       help for login\n  -m, --mfa-token string           MFA token for the credentials\n  -n, --name string                Name for the credentials\n      --no-activate                If present, it won't activate the credentials after login\n  -f, --password-file string       Password file to be read for the credentials\n  -u, --username string            Username for the credentials\n```\n\n----------------------------------------\n\nTITLE: Posting a message using Playwright\nDESCRIPTION: This TypeScript snippet demonstrates how to log in a user and post a message using the @mattermost/playwright-lib. It uses the 'pw' fixture to initialize the setup, login, navigate to a channel, post a message, and verify that the message appears.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/lib/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test, expect} from '@mattermost/playwright-lib';\n\ntest('user can post message', async ({pw}) => {\n    // # Create and login a new user\n    const {user} = await pw.initSetup();\n    const {channelsPage} = await pw.testBrowser.login(user);\n\n    // # Navigate and post a message\n    await channelsPage.goto();\n    const message = 'Hello World!';\n    await channelsPage.postMessage(message);\n\n    // * Verify message appears\n    const lastPost = await channelsPage.getLastPost();\n    await expect(lastPost).toHaveText(message);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessibility testing with axe-core\nDESCRIPTION: This TypeScript code demonstrates how to use the @mattermost/playwright-lib to perform accessibility testing using axe-core. It navigates to a login page, runs an accessibility scan, and verifies that there are no accessibility violations. The test relies on the 'axe' fixture provided by the library.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/lib/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {test, expect} from '@mattermost/playwright-lib';\n\ntest('verify login page accessibility', async ({page, axe}) => {\n    // # Navigate to login page\n    await page.goto('/login');\n\n    // # Run accessibility scan\n    const results = await axe.builder(page).analyze();\n\n    // * Verify no accessibility violations\n    expect(results.violations).toHaveLength(0);\n});\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: Lists options inherited from parent `mmctl` commands. These options configure aspects like config file path, output format, TLS settings, and server communication.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_users_remove.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n  --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n  --disable-pager                disables paged output\n  --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n  --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n  --json                         the output format will be in json format\n  --local                        allows communicating with the server through a unix socket\n  --quiet                        prevent mmctl to generate output for the commands\n  --strict                       will only run commands if the mmctl version matches the server one\n  --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: TypeScript Compiler Options for Subpackage Aliases\nDESCRIPTION: Configures TypeScript compiler options (in `tsconfig.json`) to create import aliases for subpackages. It differentiates between single-module and multi-module packages and uses paths and references.  This configuration is required for TypeScript to resolve the correct import paths.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_2\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"paths\": {\n            \"@mattermost/apple\": [\"packages/apple/lib\"], // import * as Apple from '@mattermost/apple';\n            \"@mattermost/banana/*\": [\"packages/banana/lib/*\"], // import Yellow from    '@mattermost/banana/yellow';\n        }\n    },\n    \"references\": [\n        {\"path\": \"./packages/apple\"},\n        {\"path\": \"./packages/banana\"},\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Show import job usage\nDESCRIPTION: Displays help text and usage instructions for the `mmctl import job show` command. It shows the command's syntax, available options, and how to execute it.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_job_show.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl import job show [importJobID] [flags]\n```\n\n----------------------------------------\n\nTITLE: Force Flag\nDESCRIPTION: The `--force` flag is used to remove users from the channel who are not members of the target team before moving the channel. This ensures that the channel can be moved even if there are users who do not belong to the new team.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_move.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n--force\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Command Options\nDESCRIPTION: These are options inherited from parent commands of `mmctl webhook`. They configure global settings like configuration file path, output format, and security settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Searching teams by name using mmctl\nDESCRIPTION: This example demonstrates how to search for teams using the `mmctl team search` command. It searches for teams with names similar to 'team1'. No specific dependencies are mentioned, but `mmctl` needs to be installed and configured to communicate with a Mattermost server. The command takes team names as input and outputs the search results.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_search.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl team search team1\n```\n\n----------------------------------------\n\nTITLE: Jest Module Name Mapper Configuration\nDESCRIPTION: This snippet shows how to configure Jest's moduleNameMapper to create an alias for '@mattermost/types' to support direct imports from individual files when subpath exports are not natively supported. This configuration maps module requests to the lib directory.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/types/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"moduleNameMapper\": {\n        \"^@mattermost/types/(.*)$\": \"<rootDir>/node_modules/@mattermost/types/lib/$1\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Request and Handling Errors (JavaScript)\nDESCRIPTION: This code demonstrates how to make an API request using the `Client4` instance and handle potential errors. It retrieves a user by ID and catches any errors that occur during the request. The response includes data, headers, and the raw Response object.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet user;\ntry {\n    user = (await client.getUser('userid')).data;\n} catch (e) {\n    console.error(`An error occurred when making a request to ${e.url}: ${e.message}`);\n}\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: Lists options inherited from parent commands for mmctl. Includes config path, pager control, TLS settings, output format, local communication, verbosity and version matching.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_username.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Deleting a User Preference\nDESCRIPTION: This example demonstrates how to delete a specific user preference using the mmctl command-line tool. It requires specifying the category and name of the preference, as well as the user for whom the preference should be deleted. Ensure the mmctl tool is properly configured and authenticated against the Mattermost server before running this command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_delete.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl user preference delete --category display_settings --name use_military_time user@example.com\n```\n\n----------------------------------------\n\nTITLE: mmctl Integrity Command Options\nDESCRIPTION: These are the available options for the mmctl integrity command. The --confirm flag is important as it acknowledges the impact that a full check could have on system performance. Other flags allow for help text, verbose output, and json formatting.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_integrity.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --confirm   Confirm you really want to run a complete integrity check that may temporarily harm system performance\n  -h, --help      help for integrity\n  -v, --verbose   Show detailed information on integrity check results\n```\n\n----------------------------------------\n\nTITLE: mmctl webhook Command Options\nDESCRIPTION: This snippet displays the available options for the `mmctl webhook` command. These options control the behavior of the command, such as displaying help information.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n -h, --help   help for webhook\n```\n\n----------------------------------------\n\nTITLE: mmctl config reset command\nDESCRIPTION: Resets a configuration setting to its default value. Accepts multiple values for array settings. Requires confirmation to reset all settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_reset.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl config reset [flags]\n```\n\n----------------------------------------\n\nTITLE: Example: Listing teams\nDESCRIPTION: This example demonstrates the simplest usage of the `team list` command.  It shows the basic command to list teams and doesn't require any specific setup other than a working `mmctl` installation. The expected output is a list of teams, formatted according to the default output settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_list.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nteam list\n```\n\n----------------------------------------\n\nTITLE: Creating Outgoing Webhook - mmctl\nDESCRIPTION: Creates an outgoing webhook that allows external posting of messages from a specific channel. The command requires specifying the team, user, display name, trigger words, and callback URL.  Optional parameters allow specifying the channel, description, trigger conditions, icon, and content type.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_webhook_create-outgoing.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl webhook create-outgoing [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl config migrate command example\nDESCRIPTION: Example usage of the `mmctl config migrate` command to migrate a Mattermost configuration from a JSON file to a PostgreSQL database.  This command must be executed in `--local` mode. The `from_config` parameter specifies the path to the source configuration file, and the `to_config` parameter specifies the database connection string.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_migrate.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl config migrate path/to/config.json \"postgres://mmuser:mostest@localhost:5432/mattermost_test?sslmode=disable&connect_timeout=10\"\n```\n\n----------------------------------------\n\nTITLE: Testing All Mattermost Workspaces with npm\nDESCRIPTION: This command runs tests for all packages (workspaces) within the Mattermost web app. The `--workspaces` flag instructs npm to execute the `test` script defined in the `package.json` file of each workspace. This is useful for ensuring code quality across the entire application.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm test --workspaces\n```\n\n----------------------------------------\n\nTITLE: Versioning Subpackages with npm version\nDESCRIPTION: Shows how to use `npm version` to manage subpackage versions. Includes examples for setting a specific version, incrementing to the next minor version, and incrementing to a pre-release version.  Requires npm to be installed.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Set a version of a single package\nnpm version 6.7.8 --workspace=packages/apple\n\n# Increment the version of each package to the next minor version\nnpm version minor --workspaces\n\n## Increment the version of a package to a pre-release version of the next minor version\nnpm version preminor --workspace=packages/apple\n```\n\n----------------------------------------\n\nTITLE: Adding permissions to a role (mmctl)\nDESCRIPTION: This command adds specified permissions to an existing role. It only works in the Enterprise Edition of Mattermost.  The user must specify the role and the permissions to be added as arguments to the command. Examples are provided for adding `list_open_teams` to the `system_user` role and `sysconsole_read_user_management_channels` to the `system_manager` role.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_add.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions add <role> <permission...> [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Event Trigger Function\nDESCRIPTION: Defines a PostgreSQL function `snitch()` that is triggered by DDL commands. It uses PL/pgSQL to raise a notice containing the event and tag information.  This function serves as a basic example for capturing and responding to database schema changes.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_postgres.md#_snippet_0\n\nLANGUAGE: pgsql\nCODE:\n```\nCREATE OR REPLACE FUNCTION snitch() RETURNS event_trigger AS $$\nBEGIN\nRAISE NOTICE 'snitch: % %', tg_event, tg_tag;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE EVENT TRIGGER snitch ON ddl_command_start EXECUTE PROCEDURE snitch();\n```\n\nLANGUAGE: postgres\nCODE:\n```\nCREATE OR REPLACE FUNCTION snitch() RETURNS event_trigger AS $$\nBEGIN\nRAISE NOTICE 'snitch: % %', tg_event, tg_tag;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE EVENT TRIGGER snitch ON ddl_command_start EXECUTE PROCEDURE snitch();\n```\n\nLANGUAGE: postgresql\nCODE:\n```\nCREATE OR REPLACE FUNCTION snitch() RETURNS event_trigger AS $$\nBEGIN\nRAISE NOTICE 'snitch: % %', tg_event, tg_tag;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE EVENT TRIGGER snitch ON ddl_command_start EXECUTE PROCEDURE snitch();\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing Mattermost Types Package\nDESCRIPTION: These commands are used by Mattermost members to build and publish the 'platform/types' workspace to NPM.  It first builds the package using npm run build, then publishes the built package using npm publish. Ensure the version number in package.json is incremented before publishing.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/types/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --workspace=platform/types\nnpm publish --workspace=platform/types\n```\n\n----------------------------------------\n\nTITLE: Jest Module Name Mapper for Subpackage Aliases\nDESCRIPTION: Configures Jest's module name mapper to create import aliases for subpackages. It differentiates between single-module and multi-module packages and uses regexes to map the import paths. Required for Jest tests to resolve subpackage imports.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jest\": {\n        \"moduleNameMapper\": {\n            \"^@mattermost/(apple|client)$\": \"<rootDir>/packages/$1/src\",\n            \"^@mattermost/(banana|types)/(.*)$\": \"<rootDir>/packages/$1/src/$2\",\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example usage of mmctl user promote command\nDESCRIPTION: This example demonstrates how to use the `mmctl user promote` command to promote two guest accounts, `guest1` and `guest2`, to regular user accounts. No flags are specified in the example, indicating default behavior. It assumes mmctl is properly configured and accessible in the environment.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_promote.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nuser promote guest1 guest2\n```\n\n----------------------------------------\n\nTITLE: Listing LDAP Groups Example (mmctl)\nDESCRIPTION: This example shows how to use the `mmctl group list-ldap` command to list all available LDAP groups. It assumes that `mmctl` is properly configured to connect to the Mattermost server. No specific input is required; it retrieves all LDAP groups configured within the Mattermost system.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_list-ldap.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl group list-ldap\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin from URL using mmctl\nDESCRIPTION: This command installs a Mattermost plugin from a specified URL. The plugin must be a compressed .tar.gz file. The server's configuration must allow plugin installations for this command to succeed. The `-f` or `--force` flag overwrites existing plugins with the same ID.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_install-url.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl plugin install-url https://example.com/mattermost-plugin.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Updating Setting Name in events.settings - Python/SQL\nDESCRIPTION: This code snippet executes a SQL query to update the 'name' column in the 'events.settings' table. It changes the name from 'review_conditions' to 'paper_review_conditions' where the module is 'editing'. This is typically used for database migrations or schema updates.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_python.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nop.execute(\"\"\"\nUPDATE events.settings\nSET name = 'paper_review_conditions'\nWHERE module = 'editing' AND name = 'review_conditions' \"\"\")\n```\n\n----------------------------------------\n\nTITLE: Remove users from channel using mmctl\nDESCRIPTION: This command removes specified users from a Mattermost channel. It requires the channel identifier (team:channel) and a list of user identifiers (email or username). The `--all-users` flag removes all users from the channel. It depends on the mmctl command-line tool being properly configured to connect to a Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_remove.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl channel users remove [channel] [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting User Preference Example\nDESCRIPTION: This example demonstrates how to set a user preference using the `mmctl user preference set` command. It sets the `use_military_time` preference to `true` for the user `user@example.com` within the `display_settings` category. The command requires `mmctl` to be installed and configured to connect to a Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_set.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user preference set --category display_settings --name use_military_time --value true user@example.com\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Block With Newlines\nDESCRIPTION: This code snippet demonstrates a code block with newlines. The newlines inside the code block should be rendered as they appear in the original markdown.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-basics.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\nLine #1 followed by a blank line\n\nLine #2 following a blank line\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Signatures\nDESCRIPTION: This set of commands updates the detached signatures for the test plugins using the imported private key.  The commands generate both binary and ASCII armored signatures for each plugin. The -u option specifies the key ID, and SHA256 is used for personal digest preferences.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngpg -u F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F --verbose --personal-digest-preferences SHA256 --detach-sign testplugin.tar.gz\ngpg -u F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F --verbose --personal-digest-preferences SHA256 --detach-sign --armor testplugin.tar.gz\ngpg -u F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F --verbose --personal-digest-preferences SHA256 --detach-sign testplugin-v0.0.2.tar.gz\ngpg -u F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F --verbose --personal-digest-preferences SHA256 --detach-sign --armor testplugin-v0.0.2.tar.gz\ngpg -u F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F --verbose --personal-digest-preferences SHA256 --detach-sign testplugin2.tar.gz\ngpg -u F3FACE45E0DE642C8BD6A8E64C7C6562C192CC1F --verbose --personal-digest-preferences SHA256 --detach-sign --armor testplugin2.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Displaying the Synopsis for `mmctl system getbusy`\nDESCRIPTION: This shows the basic syntax for the `mmctl system getbusy` command. It takes optional flags but no mandatory arguments. It retrieves the current busy state (high load) and the timestamp corresponding to when the busy flag will be cleared.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_getbusy.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl system getbusy [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Plugins from URLs using mmctl\nDESCRIPTION: This command installs multiple Mattermost plugins from the provided URLs in a single command. Each plugin must be a compressed .tar.gz file. The server's configuration must allow plugin installations. The order of installation is determined by the order of URLs provided.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_install-url.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmmctl plugin install-url https://example.com/mattermost-plugin-one.tar.gz https://example.com/mattermost-plugin-two.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests\nDESCRIPTION: This snippet details how to install npm packages, browser binaries, and run tests using Playwright. It covers running specific tests or all tests.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install npm packages\nnpm i\n\n# Install browser binaries as prompted if Playwright is just installed or updated\n# See https://playwright.dev/docs/browsers\nnpx playwright install\n\n# Run a specific test of all projects -- Chrome, Firefox, iPhone and iPad.\n# See https://playwright.dev/docs/test-cli.\nnpm run test -- login\n\n# Run a specific test of a project\nnpm run test -- login --project=chrome\n\n# Or run all tests\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Listing jobs using mmctl job list\nDESCRIPTION: This command lists the latest jobs. It supports filtering by job IDs, type, and status. The output can be paginated with specified page number and items per page. The `--all` flag fetches all jobs, ignoring the page flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_job_list.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl job list [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl Channel Search Usage\nDESCRIPTION: This snippet demonstrates the usage of the `mmctl channel search` command. It allows searching for channels by name, with the option to specify a team using either its name or ID. The command supports various flags for configuration and output formatting.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_search.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl channel search [channel]\nmmctl search --team [team] [channel] [flags]\n```\n\n----------------------------------------\n\nTITLE: Synopsis of mmctl team search command\nDESCRIPTION: This snippet shows the synopsis of the `mmctl team search` command, illustrating the general syntax for using the command. It indicates that the command takes a list of teams as input and accepts flags to modify its behavior. The output is a list of teams that match the search criteria.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_search.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl team search [teams] [flags]\n```\n\n----------------------------------------\n\nTITLE: Testing MP4 File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an MP4 video (`Videos/MP4.mp4`) to Mattermost and verifying that it generates a generic video thumbnail and the preview window behaves as expected (OS/browser dependent). The intent is to ensure basic MP4 video support and playback where possible.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Displaying an Inline Image with Markdown\nDESCRIPTION: This Markdown snippet shows how to embed an image from a URL within a Mattermost post.  The `![alt text](URL)` syntax is used, where 'alt text' provides a description for accessibility and 'URL' points to the image location.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_inline_images_5.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Pano](http://amardeepphotography.com/wp-content/uploads/2012/11/Untitled_Panorama6small.jpg)\n```\n\n----------------------------------------\n\nTITLE: Rename channel with name and display name - mmctl\nDESCRIPTION: This example demonstrates how to rename a channel using `mmctl channel rename` command, by specifying both the new name and display name. The command requires the channel identifier (team:oldchannel), the `--name` flag for the new channel name, and the `--display-name` flag for the new display name.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_rename.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl channel rename myteam:oldchannel --name 'new-channel' --display-name 'New Display Name'\n```\n\n----------------------------------------\n\nTITLE: Adding a dependency to a Mattermost Package with npm\nDESCRIPTION: This command adds a React dependency to the 'playbooks' package using npm.  It utilizes the `--workspace` flag to target the specific package within the Mattermost web app's npm workspace. This ensures that the dependency is correctly installed for the specified package.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm add react --workspace=playbooks\n```\n\n----------------------------------------\n\nTITLE: LDAP IdAttribute Migration Example (mmctl)\nDESCRIPTION: This example demonstrates how to use the `mmctl ldap idmigrate` command to migrate the LDAP IdAttribute to `objectGUID`.  This command is executed before updating the System Console configuration to avoid account issues during the transition. Requires mmctl to be installed and configured.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_ldap_idmigrate.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl ldap idmigrate objectGUID\n```\n\n----------------------------------------\n\nTITLE: Enforcing ExternalLink Component Usage - JavaScript\nDESCRIPTION: This rule ensures that any link opening a URL outside of Mattermost using target=\"_blank\" uses the ExternalLink component.  It helps maintain consistency and enforce security practices for external links.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/eslint-plugin/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function SomeLink() {\n    return (\n        <a\n            href=\"https://example.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Horizontal Rule Rendering\nDESCRIPTION: Demonstrates the rendering of horizontal rules using three different Markdown syntaxes: ***, ---, and ___. Each syntax creates a visual separator line between the surrounding text blocks. The purpose is to illustrate the interchangeability of these syntaxes for creating horizontal rules.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_lines.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nText above line\n\n***\n\nText between lines\n\n---\n\nText between lines\n___\n\nText below line\n```\n\n----------------------------------------\n\nTITLE: Creating a user with optional fields\nDESCRIPTION: This snippet illustrates creating a user with optional fields like first name, last name and nick name using `mmctl user create`. The command sets the email, username, password, first name, last name, and nickname for the new user.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_create.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user create --email user@example.com --username userexample --password Password1 --firstname User --lastname Example --nickname userex\n```\n\n----------------------------------------\n\nTITLE: Preventing getState in dispatch (no-dispatch-getstate) - JavaScript\nDESCRIPTION: This rule prevents passing Redux store's getState into its dispatch as an unnecessary second argument. It aims to avoid a misunderstanding about how redux-thunk works. The rule flags instances where getState is passed as a second argument to dispatch.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/eslint-plugin/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function someAction() {\n    return (dispatch, getState) => {\n        dispatch(doSomething(), getState);\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with make fmt-ci\nDESCRIPTION: This `make` command is used to format and check YAML files and shell scripts in the codebase. It ensures code consistency and adherence to the project's coding standards. This should be executed before submitting code changes.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/README.md#_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nmake fmt-ci\n```\n\n----------------------------------------\n\nTITLE: mmctl extract run Options\nDESCRIPTION: These options are available for the `mmctl extract run` command. `--from` and `--to` specify the timestamp range for file extraction. `-h` or `--help` shows help for the run command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_extract_run.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n      --from int   The timestamp of the earliest file to extract, expressed in seconds since the unix epoch.\n  -h, --help       help for run\n      --to int     The timestamp of the latest file to extract, expressed in seconds since the unix epoch. Defaults to the current time.\n```\n\n----------------------------------------\n\nTITLE: Initializing REST Client and Logging In (JavaScript)\nDESCRIPTION: This code snippet shows how to create an instance of the `Client4` class, set the server URL, and log in using a username and password. It requires the `@mattermost/client` package.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Client4} from '@mattermost/client';\n\nconst client = new Client4();\nclient.setUrl('https://mymattermostserver.example.com');\n\nclient.login('username', 'password').then((user) => {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing the busy state\nDESCRIPTION: This command clears the busy state of the Mattermost system. This re-enables non-critical services that might have been disabled during a busy state. It is typically used to restore normal system operation after a period of high load or maintenance.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_clearbusy.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl system clearbusy\n```\n\n----------------------------------------\n\nTITLE: Listing Available Import Files - mmctl\nDESCRIPTION: This snippet shows the basic syntax for listing available import files using the `mmctl import list available` command. It has no required dependencies other than the mmctl tool being installed and configured correctly. The command outputs a list of available import files to the console.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_list_available.rst#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nmmctl import list available [flags]\n```\n\n----------------------------------------\n\nTITLE: Testing PSD File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a PSD image (`Images/PSD.psd`) to Mattermost and verifying that it generates a generic attachment thumbnail and preview window. The aim is to ensure that PSD files are handled gracefully, even if a specific preview is not available.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Testing GIF File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a GIF image (`Images/GIF.gif`) to Mattermost and verifying that it generates a scaled thumbnail and preview window, with the GIF automatically playing in the preview window. The purpose is to ensure proper GIF animation handling in Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Testing MKV File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an MKV video (`Videos/MKV.mkv`) to Mattermost and verifying that it generates a generic video thumbnail and the preview window behaves as expected (OS/browser dependent). This test checks for basic MKV video support and potential playback.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: mmctl team delete Command Options\nDESCRIPTION: This section describes the available options for the `mmctl team delete` command, including the `--confirm` flag, which requires confirmation before deleting a team, and the `--help` flag for displaying help information.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_delete.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n  --confirm   Confirm you really want to delete the team and a DB backup has been performed.\n  -h, --help      help for delete\n```\n\n----------------------------------------\n\nTITLE: Creating a user with mmctl\nDESCRIPTION: This example demonstrates how to create a new user with the `mmctl user create` command. It requires the email, username and password. It also shows optional fields like first name, last name and nick name.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_create.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user create --email user@example.com --username userexample --password Password1\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Block With No Markdown\nDESCRIPTION: This code snippet demonstrates the rendering of a code block, ensuring that markdown syntax within the block is not interpreted. This verifies the code block's isolation from markdown processing.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-basics.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n_Italics_  \n*Italics*  \n**Bold**  \n***Bold-italics***  \n**Bold-italics_**  \n~~Strikethrough~~\n:) :-) ;) ;-) :o :O :-o :-O \n:bamboo: :gift_heart: :dolls: :school_satchel: :mortar_board:\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n> Block Quote\n- List\n  - List Sub-item\n[Link](http://i.giphy.com/xNrM4cGJ8u3ao.gif)\n[![GitHub](https://assets-cdn.github.com/favicon.ico)](https://github.com/mattermost/platform)\n| Left-Aligned Text | Center Aligned Text | Right Aligned Text |\n| :------------ |:---------------:| -----:|\n| Left column 1 | this text       |  $100 |\n```\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited command options\nDESCRIPTION: Lists options inherited from parent commands that can be used with `mmctl auth login`, including options for configuration file path, disabling pager, insecure TLS protocols, JSON output, local communication, suppressing output, strict version checking, and suppressing warnings. These are global settings that can affect the behavior of the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_login.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Listing Import Jobs with mmctl\nDESCRIPTION: This command lists import jobs. It supports options for fetching all jobs, specifying a page number, and setting the number of jobs per page. It also inherits options for configuration, output format, and server communication.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_job_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl import job list [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating a public channel using mmctl\nDESCRIPTION: This command creates a new public channel within a specified team. It requires the team name or ID, a channel name, and a display name for the channel. The `--team`, `--name`, and `--display-name` flags are mandatory.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_create.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl channel create --team myteam --name mynewchannel --display-name \"My New Channel\"\n```\n\n----------------------------------------\n\nTITLE: Listing User Preferences with mmctl\nDESCRIPTION: This command lists user preferences, optionally filtered by category. It requires the `mmctl` tool to be configured and connected to a Mattermost server.  The output displays the user preferences and can be formatted as JSON using the `--json` flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user preference list [--category category] [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing mmgotool for i18n checks (Go)\nDESCRIPTION: This command installs the `mmgotool` CLI, which is used for i18n (internationalization) related checks in Mattermost server development. It requires the Go compiler to be installed. The command downloads and installs the `mmgotool` executable to your Go binary directory.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/tools/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ngo install github.com/mattermost/mattermost/tools/mmgotool\n```\n\n----------------------------------------\n\nTITLE: Rendering Lists with Blank Lines in Markdown\nDESCRIPTION: This snippet renders a list surrounded by blank lines to ensure proper spacing. There are no dependencies. Expected output: Text before and after the list, separated by blank lines, with the list rendered correctly.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\nLine with blank line after \n\nLine with blank line after and before \n\n1. Bullet \n2. Bullet \n3. Bullet \n\nLine with blank line after and before \n\nLine with blank line before\n```\n\n----------------------------------------\n\nTITLE: No Link Preview Example\nDESCRIPTION: This snippet provides example links that should not render a link preview in Mattermost. It includes links to Wikipedia, Techmeme, and GitLab. The expected behavior is that these links should appear as plain text hyperlinks.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-link-preview.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n#### A) No link preview\n\nLink 1 example: https://en.wikipedia.org/wiki/Olympus_Mons\n\nLink 2 example: http://www.techmeme.com/\n\nLink 3 example: https://about.gitlab.com/\n```\n\n----------------------------------------\n\nTITLE: Creating a post using mmctl\nDESCRIPTION: This command creates a new post in a specified channel with a given message. It requires specifying the channel in the format 'team:channel' and the message using the '--message' flag. The '--reply-to' flag can be used to create a reply to an existing post.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_create.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl post create [flags]\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Ordered List in Markdown\nDESCRIPTION: This snippet demonstrates a nested ordered list.  It tests the correct indentation and numbering of nested lists within an ordered list.  There are no dependencies. Expected output: A nested list with Alpha, Bravo, Charlie, Delta, Echo, and Foxtrot.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Alpha\n    1. Bravo\n2. Charlie\n3. Delta\n    1. Echo\n    2. Foxtrot\n```\n\n----------------------------------------\n\nTITLE: Example of Adding Users to a Team with mmctl\nDESCRIPTION: This example demonstrates how to add a user to a team using their email address and username. The command adds the user 'user@example.com' and the user 'username' to the team 'myteam'. The command assumes that mmctl is configured correctly and the specified team and users exist.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_users_add.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nteam users add myteam user@example.com username\n```\n\n----------------------------------------\n\nTITLE: Running Web App Tests with Make\nDESCRIPTION: Executes a series of tests (style checking, type checking, and general tests) for the web app using the `make` command. Requires `make` and the necessary testing tools to be configured.  Ensures the web app integrates correctly with the subpackages.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmake check-style check-types test\n```\n\n----------------------------------------\n\nTITLE: Testing WAV File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a WAV audio file (`Audio/WAV.wav`) to Mattermost and verifying that it generates a generic audio thumbnail and the preview window behaves as expected (OS/browser dependent). The intent is to ensure basic WAV audio format support.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Setting WebSocket using Dynamic Imports (JavaScript)\nDESCRIPTION: This code sets `globalThis.WebSocket` using dynamic imports, useful when you want to load the `ws` package asynchronously. It checks if `globalThis.WebSocket` is already defined before importing.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (!globalThis.WebSocket) {\n    const {WebSocket} = await import('ws');\n    globalThis.WebSocket = WebSocket;\n}\n\nconst wsClient = new WebSocketClient();\n```\n\n----------------------------------------\n\nTITLE: Testing MPG File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an MPG video (`Videos/MPG.mpg`) to Mattermost and verifying that it generates a generic video thumbnail and the preview window behaves as expected (OS/browser dependent). This is intended to check MPG video file support and playback.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Testing Webm File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a Webm video (`Videos/WEBM.webm`) to Mattermost and verifying that it generates a generic video thumbnail and the preview window behaves as expected (OS/browser dependent).  The goal is to ensure Webm video format support.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Running mmctl Integrity Checks\nDESCRIPTION: The `mmctl integrity` command performs relational integrity checks on the Mattermost database. The `--confirm` flag is required for a complete check which may impact system performance. The `-v` or `--verbose` flag shows detailed output of the check.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_integrity.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl integrity [flags]\n```\n\n----------------------------------------\n\nTITLE: Importing Mattermost Subpackages in JavaScript\nDESCRIPTION: Demonstrates the correct way to import Mattermost subpackages using their full names.  This avoids relative paths and ensures consistency.  It also shows the incorrect way that should be avoided.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Correct\nimport {Client4} from '@mattermost/client';\nimport {UserProfile} from '@mattermost/types/users';\n\n// Incorrect\nimport Client4 from 'packages/client/src/client4.ts';\nimport {UserProfile} from '../../types/src/users';\n```\n\n----------------------------------------\n\nTITLE: Tagging Commits for Published Subpackages\nDESCRIPTION: Shows how to tag commits for each published subpackage with a tag name of the form `@mattermost/package-name@x.y.z`. This aids in version tracking and release management.  Requires Git to be installed and configured.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit push release-x.y\ngit push origin @mattermost/apple@x.y.z @mattermost/banana@x.y.z\n```\n\n----------------------------------------\n\nTITLE: Testing Text File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a Text file (`Documents/Text.txt`) to Mattermost and verifying that it generates a generic code thumbnail and uses the file previewer. The aim is to ensure text files are displayed correctly within the platform.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Rendering Multiple Block Quotes - Markdown\nDESCRIPTION: This snippet shows how to render multiple block quotes separated by text.  Each block quote is indicated by the '>' character at the beginning of the line, and the text in between is rendered normally.  There are no dependencies beyond a Markdown renderer.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_block_quotes_1.md#_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n> Block quote 1\n\nText between block quotes\n\n> Block quote 2\n```\n\n----------------------------------------\n\nTITLE: Show LDAP Sync Job Example\nDESCRIPTION: This example demonstrates how to use the `mmctl ldap job show` command to display a specific LDAP sync job by providing its ID.  The command requires the `mmctl` tool to be configured and authenticated with the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_ldap_job_show.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl ldap job show f3d68qkkm7n8xgsfxwuo498rah\n```\n\n----------------------------------------\n\nTITLE: Text Styling with Markdown\nDESCRIPTION: This snippet demonstrates how to apply italics, bold, bold-italics, and strikethrough formatting to text using Markdown syntax. The symbols _, *, **, ***, and ~~ are used to create these styles.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_text_style.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n_Italics_\n_Ita_lics_\n*Italics*\n**Bold**\n***Bold-italics***\n**_Bold-italics_**\n~~Strikethrough~~\n```\n\n----------------------------------------\n\nTITLE: mmctl Documentation Generation Options\nDESCRIPTION: This snippet describes the options available for the `mmctl docs` command. The `-d` or `--directory` option specifies the output directory, defaulting to \"docs\". The `-h` or `--help` option displays help information for the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_docs.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n-d, --directory string   The directory where the docs would be generated in. (default \"docs\")\n-h, --help               help for docs\n```\n\n----------------------------------------\n\nTITLE: Customizing the amount of entities\nDESCRIPTION: This command demonstrates how to customize the amount of teams, users, and guests created by the sampledata command. The `-t`, `-u`, and `-g` flags are used to specify the number of teams, users, and guests, respectively.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_sampledata.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmmctl sampledata -t 7 -u 20 -g 4\n```\n\n----------------------------------------\n\nTITLE: Get User Preference\nDESCRIPTION: Retrieves a specific user preference using the `mmctl user preference get` command. Requires specifying the category and name of the preference, as well as the target user. The command interacts with the Mattermost server to fetch the requested preference.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_get.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user preference get --category [category] --name [name] [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Server Status with mmctl\nDESCRIPTION: This command retrieves and displays the server status using basic health checks. It provides an overview of the server's operational state. No specific dependencies are mentioned, but it requires access to the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_status.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl system status\n```\n\n----------------------------------------\n\nTITLE: Updating a job status with mmctl\nDESCRIPTION: This command updates the status of a specified job.  The `job` argument specifies the job ID, and the `status` argument specifies the new status.  Use `--force true` to bypass status transition restrictions (pending, cancel_requested, canceled).\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_job_update.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl job update myJobID pending\n```\n\nLANGUAGE: bash\nCODE:\n```\nmmctl job update myJobID pending --force true\n```\n\nLANGUAGE: bash\nCODE:\n```\nmmctl job update myJobID canceled --force true\n```\n\n----------------------------------------\n\nTITLE: mmctl user deleteall Options\nDESCRIPTION: Lists the available options for the `mmctl user deleteall` command. The `--confirm` flag is crucial to prevent accidental deletion, and `--help` displays help information.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_deleteall.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n      --confirm   Confirm you really want to delete the user and a DB backup has been performed\n  -h, --help      help for deleteall\n```\n\n----------------------------------------\n\nTITLE: Testing OGG File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an OGG audio file (`Audio/OGG.ogg`) to Mattermost and verifying that it generates a generic audio thumbnail and the preview window behaves as expected (OS/browser dependent).  This confirms OGG audio format support.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Unassign Users from System Read Only Admin Role - mmctl\nDESCRIPTION: This example demonstrates unassigning users 'john.doe' and 'jane.doe' from the 'system_read_only_admin' role using the `mmctl permissions role unassign` command. This operation only works in the Enterprise Edition of Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_unassign.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npermissions unassign system_read_only_admin john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: Rename channel display name only - mmctl\nDESCRIPTION: This example demonstrates how to change only the display name of a channel using `mmctl channel rename`. It involves providing the channel identifier (team:oldchannel) and the `--display-name` flag followed by the desired new display name.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_rename.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmmctl channel rename myteam:oldchannel --display-name 'New Display Name'\n```\n\n----------------------------------------\n\nTITLE: mmctl channel modify example: public channel\nDESCRIPTION: This snippet shows an example of how to use the `mmctl channel modify` command to convert a channel to a public channel. The channel is specified using the channel ID. The `--public` flag is used to indicate that the channel should be made public.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_modify.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nchannel modify channelId --public\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighting with JavaScript\nDESCRIPTION: Demonstrates syntax highlighting for JavaScript code within a fenced code block. The `js` identifier after the opening backticks tells the Markdown parser to apply JavaScript syntax highlighting to the enclosed code. The code defines a simple JavaScript function and logs its output to the console.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/public/model/testdata/markdown-sample.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: This snippet lists the options inherited from parent commands for the `mmctl channel search` command. These include options for configuration file path, disabling paged output, insecure TLS protocols, JSON output format, local communication, suppressing output and warnings, and strict version matching.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_search.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Testing AAC File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading an AAC audio file (`Audio/AAC.aac`) to Mattermost and verifying that it generates a generic audio thumbnail and the preview window behaves as expected (OS/browser dependent).  This confirms AAC audio format support.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Remove all users from channel\nDESCRIPTION: This example illustrates how to remove all users from a channel named `mychannel` in the `myteam` team using the `--all-users` flag. This action requires appropriate administrative privileges. It assumes the `mmctl` tool is configured properly.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_remove.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nchannel users remove myteam:mychannel --all-users\n```\n\n----------------------------------------\n\nTITLE: Help option for mmctl bot enable\nDESCRIPTION: This option displays the help message for the 'mmctl bot enable' command.  It provides information on the command's usage, available options, and other relevant details.  No specific input is required, and the output is the help text.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_bot_enable.rst#_snippet_2\n\nLANGUAGE: TEXT\nCODE:\n```\n-h, --help   help for enable\n```\n\n----------------------------------------\n\nTITLE: mmctl Channel Search Examples\nDESCRIPTION: These examples illustrate how to use the `mmctl channel search` command with and without specifying a team. The first example searches for a channel named 'mychannel'. The second example searches for 'mychannel' within the team 'myteam'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_search.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nchannel search mychannel\nchannel search --team myteam mychannel\n```\n\n----------------------------------------\n\nTITLE: Example: Disable Group Constraints\nDESCRIPTION: This example demonstrates how to use the `mmctl group channel disable` command to disable group constraints in the `mychannel` channel of the `myteam` team. The command assumes that the mmctl tool is properly configured and has the necessary permissions.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_channel_disable.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ngroup channel disable myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: mmctl import upload command synopsis\nDESCRIPTION: Shows the basic syntax of the mmctl import upload command. It takes a filepath as an argument and accepts flags for configuration and control. No dependencies are listed explicitly, but it requires access to the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_upload.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl import upload [filepath] [flags]\n```\n\n----------------------------------------\n\nTITLE: Rendering Multiple Lists in Markdown\nDESCRIPTION: This snippet renders multiple lists to ensure correct separation and numbering. There are no dependencies. Expected output: Two separate lists, labeled \"List A\" and \"List B\", each with one numbered item.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\nList A:\n\n1. One\n\nList B:\n\n2. Two\n```\n\n----------------------------------------\n\nTITLE: Options for Get User Preference\nDESCRIPTION: Lists the available options for the `mmctl user preference get` command. These options allow you to specify the category and name of the preference. The category and name flags are essential for targeting a specific preference.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_preference_get.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n  -c, --category string   The category of the preference\n  -h, --help              help for get\n  -n, --name string       The name of the preference\n```\n\n----------------------------------------\n\nTITLE: Displaying current user credentials using mmctl\nDESCRIPTION: This command displays the currently stored user credentials. It uses the `mmctl auth current` command without any additional flags. It expects no input and outputs the user's credentials if they are stored.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_current.rst#_snippet_0\n\nLANGUAGE: None\nCODE:\n```\nmmctl auth current\n```\n\n----------------------------------------\n\nTITLE: Remove specific users from channel\nDESCRIPTION: This example demonstrates how to remove specific users identified by their email and username from a channel named `mychannel` in the `myteam` team. It assumes that the mmctl tool is correctly configured and has the necessary permissions.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_remove.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nchannel users remove myteam:mychannel user@example.com username\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Listing Available Imports - mmctl\nDESCRIPTION: This snippet provides an example of how to execute the `mmctl import list available` command.  No specific input is required. The command's output will be the list of import files available on the configured Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_list_available.rst#_snippet_1\n\nLANGUAGE: None\nCODE:\n```\nimport list available\n```\n\n----------------------------------------\n\nTITLE: Deleting a User\nDESCRIPTION: This command deletes a user specified by their email address. The `--confirm` flag is required to acknowledge the deletion and that a database backup has been performed. Without confirmation, the command will not proceed.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_delete.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user delete user@example.com\n```\n\n----------------------------------------\n\nTITLE: Unassign Users from System Admin Role - mmctl\nDESCRIPTION: This example demonstrates unassigning users 'john.doe' and 'jane.doe' from the 'system_admin' role using the `mmctl permissions role unassign` command. This operation only works in the Enterprise Edition of Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_unassign.rst#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npermissions unassign system_admin john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: Unassign Users from System Manager Role - mmctl\nDESCRIPTION: This example demonstrates unassigning users 'john.doe' and 'jane.doe' from the 'system_manager' role using the `mmctl permissions role unassign` command. This operation only works in the Enterprise Edition of Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_unassign.rst#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npermissions unassign system_manager john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: Embedding GIF Image in Markdown\nDESCRIPTION: This Markdown snippet demonstrates how to embed a GIF image into a document. The `![gif](http://i.giphy.com/xNrM4cGJ8u3ao.gif)` syntax displays the GIF image located at the specified URL. The `gif` text serves as the alt text for the image.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_inline_images_3.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![gif](http://i.giphy.com/xNrM4cGJ8u3ao.gif)\n```\n\n----------------------------------------\n\nTITLE: Example SAML users JSON file\nDESCRIPTION: This JSON file provides a mapping of email addresses to usernames for SAML migration.  Each email (key) corresponds to a username (value) on the SAML provider. The email must exist in the Mattermost database.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_migrate-auth.rst#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"usr1@email.com\": \"usr.one\",\n  \"usr2@email.com\": \"usr.two\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright's Docker Container\nDESCRIPTION: This snippet describes how to run Playwright's Docker container to ensure consistent screenshot updates. It includes mounting the project directory and specifying the Playwright version.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v \"$(pwd):/mattermost/\" --ipc=host mcr.microsoft.com/playwright:v1.52.0-noble /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Installing a plugin using mmctl\nDESCRIPTION: This command installs a plugin from the Mattermost marketplace using its ID.  It requires the `mmctl` command-line tool to be configured and connected to a Mattermost server. The plugin ID is a unique identifier for the plugin within the marketplace.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_marketplace_install.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl plugin marketplace install <id>\n```\n\n----------------------------------------\n\nTITLE: Example of patching config with JSON file\nDESCRIPTION: This example shows how to use `mmctl config patch` to update the Mattermost configuration using a JSON file.  The config file is specified by the path `/path/to/config.json`. This updates the server config with the content of specified file.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_patch.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nconfig patch /path/to/config.json\n```\n\n----------------------------------------\n\nTITLE: Listing OAuth2 apps using mmctl\nDESCRIPTION: This command lists all OAuth2 apps. It can be used with flags to specify the page number and the number of apps per page. The output can be formatted as JSON using the `--json` flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_oauth_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl oauth list\n```\n\n----------------------------------------\n\nTITLE: Inline PHP Code Example\nDESCRIPTION: This snippet demonstrates how to include inline PHP code within the readme.txt file using backticks. It allows developers to provide short code examples or snippets to illustrate specific functionalities or configurations of the plugin.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/mm_file_testing/Documents/Text.txt#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php code(); // goes in backticks ?>\n```\n\n----------------------------------------\n\nTITLE: Assign users to a role in Mattermost (EE Only)\nDESCRIPTION: This command assigns users to a specified role in Mattermost, using their usernames. It is exclusive to the Enterprise Edition.  The role name and a list of usernames are required as input.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_assign.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions role assign <role_name> <username...> [flags]\n```\n\n----------------------------------------\n\nTITLE: Rendering New Line After a List in Markdown\nDESCRIPTION: This snippet demonstrates a new line after a list. This is used to check if the newline correctly renders after the list. There are no dependencies. Expected output: the text \"This text should be on a new line.\" on a new line after the list.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n1. One\n2. Two\n\nThis text should be on a new line.\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with Escaped Pipes\nDESCRIPTION: This markdown table contains escaped pipes using a backslash to prevent them from being interpreted as column separators. It is used to verify that escaped characters are rendered correctly within the table.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-tables.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| \\\\ | asdf|\n|----|-----|\n| ab | a\\|d|\n```\n\n----------------------------------------\n\nTITLE: Creating and verifying a user's email\nDESCRIPTION: This example shows creating a new user and simultaneously verifying their email address using the `--email-verified` flag. This requires sufficient permissions to verify the email on creation.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_create.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user create --email user@example.com --username userexample --password Password1 --system-admin --email-verified\n```\n\n----------------------------------------\n\nTITLE: Example of creating a post with mmctl\nDESCRIPTION: This example demonstrates how to create a post in a specific channel within a team using the `mmctl post create` command. It includes the team and channel name, as well as the message content.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_create.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npost create myteam:mychannel --message \"some text for the post\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Numbered Task Lists in Markdown\nDESCRIPTION: This snippet demonstrates numbered task lists. It tests the rendering of task lists with numbers and checked/unchecked status. There are no dependencies. Expected output: a numbered task list with \"One\", \"Two\", and a completed item.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n1. [ ] One\n2. [ ] Two\n3. [x] Completed item\n```\n\n----------------------------------------\n\nTITLE: Building Mattermost Components with npm\nDESCRIPTION: This command builds the Mattermost components package using npm.  It leverages the `build` script defined in the package's `package.json` file.  This is a necessary step to ensure the webapp's webpack picks up the changes.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/components/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: mmctl user deleteall Synopsis\nDESCRIPTION: Shows the basic structure of the mmctl user deleteall command. This command permanently deletes all users and all related information including posts and can only be run in local mode.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_deleteall.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user deleteall [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Basic LaTeX Document\nDESCRIPTION: This snippet demonstrates the basic structure of a LaTeX document. It defines the document class as 'article' and includes a 'Hello World!' message within the document environment. This snippet serves as a simple example for creating LaTeX documents.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_latex.md#_snippet_0\n\nLANGUAGE: TeX\nCODE:\n```\n\\documentclass{article}\n\n\\begin{document}\n\nHello World!\n\n\\end{document}\n```\n\n----------------------------------------\n\nTITLE: Filtering Marketplace Plugins\nDESCRIPTION: This example shows how to filter the list of marketplace plugins. The `--filter` flag allows specifying a string to filter plugins by ID, name, or description.  In this example, it filters for plugins containing 'jit'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_marketplace_list.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ mmctl plugin marketplace list --filter jit\n```\n\n----------------------------------------\n\nTITLE: Rendering Mixed List Starting Ordered in Markdown\nDESCRIPTION: This snippet demonstrates a mixed list starting with an ordered list. It checks the rendering when list types are mixed. There are no dependencies. Expected output: a numbered list with 'One', 'Two' and 'Three'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n1. One\n2. Two\n3. Three\n```\n\n----------------------------------------\n\nTITLE: Listing Marketplace Plugins\nDESCRIPTION: This example shows how to list all plugins from the marketplace. It uses the `mmctl plugin marketplace list` command with the `--all` flag to fetch all available plugins, ignoring pagination options.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_marketplace_list.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mmctl plugin marketplace list --all\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Item Unordered List in Markdown\nDESCRIPTION: This snippet demonstrates a multi-item unordered list. It verifies the correct rendering of a bulleted list with multiple items. There are no dependencies. Expected output: A bulleted list with \"One\", \"Two\", and \"Three\".\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n• One\n• Two\n• Three\n```\n\n----------------------------------------\n\nTITLE: mmctl channel options\nDESCRIPTION: This snippet documents the options available for the `mmctl channel` command, including inherited options from parent commands. It outlines options such as specifying a configuration file, disabling paged output, allowing insecure TLS protocols/versions, setting output format to JSON, communicating through a Unix socket, suppressing output, enforcing strict version matching, and disabling warning messages. The `-h, --help` option is also listed for displaying help information.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for channel\n```\n\n----------------------------------------\n\nTITLE: Testing PPT File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a PowerPoint file (`Documents/PPT.pptx`) to Mattermost and verifying that it generates a generic PowerPoint thumbnail and preview window.  This confirms basic PPT file support within Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Example: Add sysconsole_read_user_management_channels to system_manager (mmctl)\nDESCRIPTION: This command demonstrates adding the `sysconsole_read_user_management_channels` permission to the `system_manager` role.  This permits users with the `system_manager` role to read user management channels in the system console.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_add.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npermissions add system_manager sysconsole_read_user_management_channels\n```\n\n----------------------------------------\n\nTITLE: Removing License Example\nDESCRIPTION: This example demonstrates how to remove the current Mattermost license using the `mmctl license remove` command. It reverts the instance to the Team Edition. No specific flags are used in this basic usage.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_license_remove.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmmctl license remove\n```\n\n----------------------------------------\n\nTITLE: Rendering Task Lists in Markdown\nDESCRIPTION: This snippet demonstrates task lists. It tests the rendering of task lists with checked and unchecked items. There are no dependencies. Expected output:  A task list with \"One\", \"Two\", and a completed item.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n[ ] One\n  [ ] Subpoint one\n  - Normal Bullet\n[ ] Two\n[x] Completed item\n```\n\n----------------------------------------\n\nTITLE: Reset MFA for a User with mmctl\nDESCRIPTION: This command disables multi-factor authentication for a specified user. The user is identified by their email address. If MFA is enforced, the user will be prompted to re-enable MFA upon their next login.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_resetmfa.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user resetmfa user@example.com\n```\n\n----------------------------------------\n\nTITLE: Downloading Export Files with mmctl\nDESCRIPTION: This command downloads export files from the Mattermost server. It requires the export name and the desired file path. If only the export name is provided, the file path defaults to the export name.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_export_download.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ mmctl export download samplename sample_export.zip\n$ mmctl export download sample_export.zip\n```\n\n----------------------------------------\n\nTITLE: Creating Basic LaTeX Document\nDESCRIPTION: This snippet demonstrates the basic structure of a LaTeX document. It defines the document class as 'article' and includes a 'Hello World!' message within the document environment. This snippet serves as a simple example for creating LaTeX documents.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_latex.md#_snippet_1\n\nLANGUAGE: LaTeX\nCODE:\n```\n\\documentclass{article}\n\n\\begin{document}\n\nHello World!\n\n\\end{document}\n```\n\n----------------------------------------\n\nTITLE: Listing Credentials with mmctl auth list\nDESCRIPTION: This command prints a list of the registered credentials for remote Mattermost instances. It can be executed without any arguments or with optional flags for configuration and output formatting.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth_list.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl auth list [flags]\n```\n\n----------------------------------------\n\nTITLE: Unassign Users from Role - mmctl\nDESCRIPTION: Unassigns users from a specified role in Mattermost (EE Only).  This command requires the role name and the usernames of the users to be unassigned. The command only works in the Enterprise Edition of Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_unassign.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl permissions role unassign <role_name> <username...> [flags]\n```\n\n----------------------------------------\n\nTITLE: Activate users with mmctl command\nDESCRIPTION: This command activates users that have been deactivated using their email, username or userID. It requires the mmctl tool to be installed and configured to connect to a Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_activate.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmmctl user activate [emails, usernames, userIds] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example usage of token revoke command\nDESCRIPTION: This example demonstrates how to use the `mmctl token revoke` command to revoke a token with the ID `test-token-id` for the user `testuser`. The command utilizes `mmctl`, a command-line tool for Mattermost.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_revoke.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nrevoke testuser test-token-id\n```\n\n----------------------------------------\n\nTITLE: Listing Users with mmctl\nDESCRIPTION: This snippet demonstrates how to use the `mmctl user list` command to list users.  It showcases the basic command structure and implies the existence of configurable options to filter the results.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_list.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl user list [flags]\n```\n\n----------------------------------------\n\nTITLE: Logging Message to Console - TSX\nDESCRIPTION: This snippet demonstrates logging a simple string message to the console using TSX. It declares a constant string variable named 'message' and assigns it the value 'hello world', then logs this variable to the console using console.log().\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_typescript.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst message: string = 'hello world';\nconsole.log(message);\n```\n\n----------------------------------------\n\nTITLE: LDAP Sync Example\nDESCRIPTION: Example usage of the `ldap sync` command to synchronize LDAP users and groups. No specific dependencies are listed, but requires `mmctl` to be installed and configured to connect to a Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_ldap_sync.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nldap sync\n```\n\n----------------------------------------\n\nTITLE: Listing channels for a team using mmctl\nDESCRIPTION: This command lists all channels on a specified team. Archived channels are marked with '(archived)' and private channels accessible to the user are marked with '(private)'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_list.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl channel list myteam\n```\n\n----------------------------------------\n\nTITLE: Example: Add list_open_teams to system_user (mmctl)\nDESCRIPTION: This command shows how to add the `list_open_teams` permission to the `system_user` role using `mmctl permissions add`.  This allows users with the `system_user` role to list open teams.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_add.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npermissions add system_user list_open_teams\n```\n\n----------------------------------------\n\nTITLE: Logging Message to Console - TypeScript\nDESCRIPTION: This snippet demonstrates logging a simple string message to the console using TypeScript. It declares a constant string variable named 'message' and assigns it the value 'hello world', then logs this variable to the console using console.log().\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_typescript.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst message: string = 'hello world';\nconsole.log(message);\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Block With Links\nDESCRIPTION: This code snippet demonstrates the rendering of a code block with links to GIFs and websites. The links should not be auto-linked or generate previews within the code block.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-basics.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\nGIF: http://i.giphy.com/xNrM4cGJ8u3ao.gif\nWebsite: https://en.wikipedia.org/wiki/Dolphin\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Mixed List Starting Unordered in Markdown\nDESCRIPTION: This snippet demonstrates a mixed list starting with an unordered list. It checks rendering behavior with mixed list types. There are no dependencies. Expected output: A bulleted list with 'Monday', 'Tuesday' and 'Wednesday'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n• Monday\n• Tuesday\n• Wednesday\n```\n\n----------------------------------------\n\nTITLE: Correct use of dispatch without getState - JavaScript\nDESCRIPTION: This demonstrates the correct way to use dispatch in Redux actions, without passing getState as an argument. This is the recommended pattern when getState is not needed within the dispatched function.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/eslint-plugin/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport function someAction() {\n    return (dispatch) => {\n        dispatch(doSomething());\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting system admin using mmctl\nDESCRIPTION: This example demonstrates how to use the `mmctl roles system-admin` command to make one or more users system administrators. The command takes usernames as arguments.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_roles_system-admin.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# You can make one user a sysadmin\n$ mmctl roles system-admin john_doe\n```\n\nLANGUAGE: shell\nCODE:\n```\n# Or promote multiple users at the same time\n$ mmctl roles system-admin john_doe jane_doe\n```\n\n----------------------------------------\n\nTITLE: Importing UserProfile from @mattermost/types/users in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the UserProfile type directly from the '@mattermost/types/users' module in JavaScript. This requires technologies that support subpath exports.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/types/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {UserProfile} from '@mattermost/types/users';\n```\n\n----------------------------------------\n\nTITLE: Correct Usage of ExternalLink Component - JavaScript\nDESCRIPTION: This shows the correct way to use the ExternalLink component for external links in Mattermost. It requires importing the ExternalLink component and using it with the href prop.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/eslint-plugin/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ExternalLink from 'components/external_link';\n\nexport function SomeLink() {\n    return <ExternalLink href=\"https://example.com\"/>;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding an Image using Markdown\nDESCRIPTION: This snippet demonstrates how to embed an image into Markdown using a URL. The `![Github](https://github.githubassets.com/favicon.ico)` syntax specifies the alt text \"Github\" and the image URL. This will display the GitHub favicon.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_inline_images_2.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n![Github](https://github.githubassets.com/favicon.ico)\n```\n\n----------------------------------------\n\nTITLE: Showing Role Information using mmctl\nDESCRIPTION: This command displays all the information about a given role. The role name is provided as a parameter. The output can be formatted as JSON using the `--json` flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_show.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl permissions role show <role_name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating Node Modules using Make\nDESCRIPTION: Runs `make node_modules` to download and update the project's Node.js dependencies. Requires `make` and `npm` to be installed and configured. Updates `package-lock.json`.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmake node_modules\n```\n\n----------------------------------------\n\nTITLE: Rendering Unordered List with Line Break in Markdown\nDESCRIPTION: This snippet demonstrates a multi-item unordered list with line breaks between the list items. The line breaks should not render as breaks in the output. There are no dependencies. Expected output: A bulleted list with \"Item A\", \"Item B\", \"Item C\", and \"Item D\".\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n• Item A\n• Item B\n• Item C\n• Item D\n```\n\n----------------------------------------\n\nTITLE: mmctl Options\nDESCRIPTION: Defines the available options for the mmctl command-line tool. These options allow users to configure the tool's behavior, such as specifying the configuration file path, disabling paged output, enabling insecure TLS protocols, setting the output format to JSON, communicating through a Unix socket, suppressing output, enforcing version matching with the server, and disabling warning messages.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n-h, --help                         help for mmctl\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Removing permissions from a role using mmctl\nDESCRIPTION: This example demonstrates how to remove specified permissions from a given role using the `mmctl permissions remove` command. The command requires the role name and the list of permissions to be removed.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_remove.rst#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmmctl permissions remove system_user list_open_teams\n```\n\nLANGUAGE: bash\nCODE:\n```\nmmctl permissions remove system_manager sysconsole_read_user_management_channels\n```\n\n----------------------------------------\n\nTITLE: Rendering Code Block\nDESCRIPTION: This code snippet demonstrates the rendering of a basic code block in markdown. It is expected that the text within the backticks will be rendered as preformatted code without any markdown interpretation.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-basics.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nThis text should render in a code block\n```\n```\n\n----------------------------------------\n\nTITLE: Installing @mattermost/playwright-lib\nDESCRIPTION: Install the @mattermost/playwright-lib package using npm. This command adds the library as a dependency to your project, allowing you to use its features for end-to-end testing.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/lib/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @mattermost/playwright-lib\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Example 1\nDESCRIPTION: This is a standard markdown table with a header row and data rows. It uses hyphens to define the separator between the header and data rows. It demonstrates a basic table structure.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-tables.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell\n```\n\n----------------------------------------\n\nTITLE: Executing mmctl system supportpacket\nDESCRIPTION: Executes the `mmctl system supportpacket` command to generate and download a support packet. The output file name can be specified using the `-o` or `--output-file` flag.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_system_supportpacket.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl system supportpacket [flags]\n```\n\n----------------------------------------\n\nTITLE: Cancelling an Export Job with mmctl\nDESCRIPTION: This command cancels an export job using its ID.  The export job ID is required as an argument.  It assumes mmctl is configured and authenticated with a Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_export_job_cancel.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export job cancel [exportJobID] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example: Reset system_read_only_admin Permissions\nDESCRIPTION: Demonstrates resetting permissions for the 'system_read_only_admin' role using the `mmctl permissions reset` command. This restores the role's permissions to their default state.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_reset.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ mmctl permissions reset system_read_only_admin\n```\n\n----------------------------------------\n\nTITLE: mmctl completion options\nDESCRIPTION: This section describes the available options for the `mmctl completion` command. It includes a help flag (-h, --help) for displaying help information.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_completion.rst#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\n-h, --help   help for completion\n```\n\n----------------------------------------\n\nTITLE: Markdown Table with Markdown Content\nDESCRIPTION: This markdown table contains markdown formatting within the table cells. It demonstrates the rendering of strikethrough, bold, italics, and emoticons within a table.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-tables.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Column\\Row | 1 | 2 |\n| ------------- | ------------- |------------- |\n| A | ~~Strikethrough~~ | **Bold** |\n| B | _italics_  | :dolphin: |\n```\n\n----------------------------------------\n\nTITLE: Reset Password Command Synopsis\nDESCRIPTION: The synopsis of the `mmctl user reset-password` command.  It shows the basic syntax of the command, including the required `users` argument and the optional `flags`.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_reset-password.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl user reset-password [users] [flags]\n```\n\n----------------------------------------\n\nTITLE: Rendering Single-Item Unordered List in Markdown\nDESCRIPTION: This snippet demonstrates a single-item unordered list. It verifies the basic rendering of a bulleted list with one item.  There are no dependencies. Expected output: \"• Single Item\"\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n• Single Item\n```\n\n----------------------------------------\n\nTITLE: Installing Mattermost Client via npm (TypeScript)\nDESCRIPTION: This command installs the Mattermost client and types packages using npm. This is required for TypeScript projects to provide type safety.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @mattermost/client @mattermost/types\n```\n\n----------------------------------------\n\nTITLE: Help Flag\nDESCRIPTION: The `-h` or `--help` flag displays the help message for the `channel move` command, providing information about its usage and available options.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_move.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n-h, --help\n```\n\n----------------------------------------\n\nTITLE: Creating sample users with profile pictures\nDESCRIPTION: This command creates sample users with profile pictures. The `--profile-images` flag specifies the path to the folder containing the images to be used as profile pictures.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_sampledata.rst#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmmctl sampledata --profile-images ./images/profiles\n```\n\n----------------------------------------\n\nTITLE: Archiving a channel using mmctl\nDESCRIPTION: This command archives a specific channel. The channel is specified using the format `team:channel` or by its channel ID. It removes the channel and associated data from the database.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_archive.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl channel archive myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Syntax Highlighted JavaScript Code Block in Markdown\nDESCRIPTION: This snippet demonstrates a fenced code block with syntax highlighting for JavaScript in Markdown. The `js` keyword after the backticks enables highlighting.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/public/model/testdata/markdown-sample-with-rewritten-image-urls.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n``` js\nvar foo = function (bar) {\n  return bar++;\n};\n\nconsole.log(foo(5));\n```\n```\n\n----------------------------------------\n\nTITLE: Listing a specific number of posts\nDESCRIPTION: This example demonstrates how to list a specific number of posts using the `--number` flag. It requires the channel identifier and the desired number of posts to retrieve.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_list.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl post list myteam:mychannel --number 20\n```\n\n----------------------------------------\n\nTITLE: Example Usage of mmctl export job cancel\nDESCRIPTION: This is an example of how to use the `mmctl export job cancel` command with a sample export job ID.  This cancels the export job with the specified ID.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_export_job_cancel.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nexport job cancel o98rj3ur83dp5dppfyk5yk6osy\n```\n\n----------------------------------------\n\nTITLE: mmctl team users remove options\nDESCRIPTION: Displays available options for the `mmctl team users remove` command, specifically the `-h` or `--help` flag for displaying help information.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_users_remove.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  -h, --help   help for remove\n```\n\n----------------------------------------\n\nTITLE: Building and Publishing the Package\nDESCRIPTION: These commands are used by Mattermost developers with write access to the NPM organization to build and publish the package to NPM.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/client/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build --workspace=platform/client\nnpm publish --workspace=platform/client\n```\n\n----------------------------------------\n\nTITLE: Rendering a Single Block Quote - Markdown\nDESCRIPTION: This snippet demonstrates how to render a single block quote in Markdown. The '>' character at the beginning of the line indicates that the text should be rendered as a block quote.  There are no dependencies beyond a Markdown renderer.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/cypress/tests/fixtures/markdown/markdown_block_quotes_1.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n>This text should render in a block quote.\n```\n\n----------------------------------------\n\nTITLE: Disable Pager Option\nDESCRIPTION: Disables the use of a pager for output, displaying all output directly to the terminal.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\n--disable-pager                disables paged output\n```\n\n----------------------------------------\n\nTITLE: Listing Local Marketplace Plugins Only\nDESCRIPTION: This example demonstrates retrieving only locally installed plugins. The `--local-only` flag restricts the results to plugins available locally.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin_marketplace_list.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ mmctl plugin marketplace list --local-only\n```\n\n----------------------------------------\n\nTITLE: mmctl bot create Example\nDESCRIPTION: This example demonstrates how to create a bot with the username 'testbot' using the `mmctl bot create` command. No additional flags are used in this example.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_bot_create.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nbot create testbot\n```\n\n----------------------------------------\n\nTITLE: Uploading License String with mmctl\nDESCRIPTION: This command uploads a Mattermost license from a provided string. It replaces the existing license on the server. The license string should be a valid Mattermost license.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_license_upload-string.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl license upload-string \"mylicensestring\"\n```\n\n----------------------------------------\n\nTITLE: mmctl auth Synopsis\nDESCRIPTION: The synopsis provides a brief overview of the `mmctl auth` command's purpose, which is to manage credentials for remote Mattermost instances.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_auth.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nManages the credentials of the remote Mattermost instances\n```\n\n----------------------------------------\n\nTITLE: mmctl team users remove example\nDESCRIPTION: Provides an example of how to use the `mmctl team users remove` command to remove a user by email and another by username from the team 'myteam'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team_users_remove.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nteam users remove myteam user@example.com username\n```\n\n----------------------------------------\n\nTITLE: Listing posts for a channel\nDESCRIPTION: This example demonstrates how to list posts for a specific channel using `mmctl post list`. It requires the channel identifier in the format `team:channel`.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_post_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl post list myteam:mychannel\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Example 3\nDESCRIPTION: This is a standard markdown table similar to example 1 but demonstrates how spaces are handled around the content of the table.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-tables.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| First Header | Second Header           |\n| ------------- | ----------- |\n| Content Cell     | Content Cell|\n| Content Cell        | Content Cell    |\n```\n\n----------------------------------------\n\nTITLE: Building Subpackages with npm run build\nDESCRIPTION: Executes the `npm run build` command for specific subpackages using the `--workspace` flag. This compiles the code within the listed packages.  Requires `npm` to be installed and the `build` script to be defined in the package.json of the listed workspaces.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build --workspace=packages/apple --workspace=packages/banana\n```\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: This snippet details the options inherited from parent commands that can be used with `mmctl channel`. These options configure various aspects of the `mmctl` tool, such as the configuration file path, output formatting (JSON), security settings (TLS), and verbosity. Understanding these options is crucial for customizing the behavior of `mmctl` commands.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl token generate Synopsis\nDESCRIPTION: The synopsis shows the basic command structure for generating a token. It requires a username and a description for the token.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_generate.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl token generate [user] [description] [flags]\n```\n\n----------------------------------------\n\nTITLE: Listing import files\nDESCRIPTION: This example demonstrates how to list import files using the `import list` command. It provides a basic usage example.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_import_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nimport list\n```\n\n----------------------------------------\n\nTITLE: Help Flag\nDESCRIPTION: Displays the help documentation for the `add` subcommand. This includes available options and usage instructions.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\n-h, --help   help for add\n```\n\n----------------------------------------\n\nTITLE: Assign users to the 'system_admin' role\nDESCRIPTION: This example assigns the users 'john.doe' and 'jane.doe' to the 'system_admin' role using the `permissions assign` command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_permissions_role_assign.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\npermissions assign system_admin john.doe jane.doe\n```\n\n----------------------------------------\n\nTITLE: mmctl plugin help options\nDESCRIPTION: Displays the help options for the mmctl plugin command. This includes a description of the command and available flags.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_plugin.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n  -h, --help   help for plugin\n```\n\n----------------------------------------\n\nTITLE: Example usage of mmctl user activate\nDESCRIPTION: These are example usages of the `mmctl user activate` command.  The first example activates a user by email, the second activates a user by username.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_activate.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nuser activate user@example.com\n```\n\nLANGUAGE: shell\nCODE:\n```\nuser activate username\n```\n\n----------------------------------------\n\nTITLE: mmctl team Options\nDESCRIPTION: Displays help information for the `team` command.  It lists available options for the `team` command itself.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_team.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n-h, --help   help for team\n```\n\n----------------------------------------\n\nTITLE: mmctl user username Synopsis\nDESCRIPTION: Shows the synopsis of the mmctl user username command.  It outlines the command structure: `mmctl user username [user] [new username] [flags]`.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_username.rst#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmmctl user username [user] [new username] [flags]\n```\n\n----------------------------------------\n\nTITLE: mmctl config reset options\nDESCRIPTION: Options available for the mmctl config reset command. Includes flags for confirmation, help, and inherited options.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config_reset.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n--confirm   confirm you really want to reset all configuration settings to its default value\n-h, --help      help for reset\n```\n\n----------------------------------------\n\nTITLE: Configuration File Option\nDESCRIPTION: Specifies the path to the mmctl configuration file. If not provided, it defaults to `$XDG_CONFIG_HOME/mmctl/config`.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n```\n\n----------------------------------------\n\nTITLE: Running Playwright in UI Mode\nDESCRIPTION: This snippet shows how to launch Playwright in UI mode for interactive test debugging and exploration.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run playwright-ui\n```\n\n----------------------------------------\n\nTITLE: Config Flag\nDESCRIPTION: The `--config` flag specifies the path to the configuration file used by mmctl. The default path is '$XDG_CONFIG_HOME/mmctl/config'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_move.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n--config string\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Repository using Make\nDESCRIPTION: Executes `make clean` to clean the repository.  This command is often used to remove build artifacts and prepare the repository for a fresh build. Requires `make` to be installed and configured.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/platform/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmake clean\n```\n\n----------------------------------------\n\nTITLE: mmctl group user restore Help Option\nDESCRIPTION: Displays the help message for the `mmctl group user restore` command.  This option provides detailed information about available flags and usage instructions. This is a standard help flag available in many command-line tools.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_user_restore.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for restore\n```\n\n----------------------------------------\n\nTITLE: mmctl token generate Example\nDESCRIPTION: This example demonstrates how to generate a token for the user 'testuser' with the description 'test-token'.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token_generate.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngenerate testuser test-token\n```\n\n----------------------------------------\n\nTITLE: mmctl config help flag\nDESCRIPTION: Displays the help message for the `mmctl config` command, providing information about its usage and available options.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_config.rst#_snippet_0\n\nLANGUAGE: TEXT\nCODE:\n```\n-h, --help   help for config\n```\n\n----------------------------------------\n\nTITLE: mmctl global options\nDESCRIPTION: Lists options inherited from parent mmctl commands. These options configure the tool's behavior, such as specifying the configuration file path, output format, and security settings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Listing export files with mmctl\nDESCRIPTION: This command lists export files. It provides options for help and inherits options from parent commands such as configuration file path, disabling pager, insecure TLS protocols, JSON output format, local socket communication, quiet mode, strict version matching, and suppressing warnings.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_export_list.rst#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmmctl export list [flags]\n```\n\n----------------------------------------\n\nTITLE: Commands inside Playwright's Docker Container\nDESCRIPTION: This snippet presents the commands to execute within the Playwright Docker container for installing dependencies, running tests, and updating visual test snapshots. It also emphasizes using `npm ci` for a consistent environment.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/e2e-tests/playwright/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport PW_BASE_URL=http://host.docker.internal:8065\nexport PW_HEADLESS=true\ncd mattermost/e2e-tests/playwright\n\n# Install npm packages. Use \"npm ci\" to match the automated environment\nexport PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 npm ci\n\n# Run specific test. See https://playwright.dev/docs/test-cli.\nnpm run test -- login --project=chrome\n\n# Or run all tests\nnpm run test\n\n# Run visual tests\nnpm run test -- visual\n\n# Update snapshots of visual tests\nnpm run test -- visual --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Rendering Fenced Code Block\nDESCRIPTION: Shows how to render a fenced code block using backticks in Markdown.  The code is displayed as a preformatted block of text.  Fenced code blocks allow multi-line code snippets to be included in the document.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/public/model/testdata/markdown-sample.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```\nSample text here...\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Indented Code Block\nDESCRIPTION: Demonstrates rendering an indented code block using Markdown. The code is automatically formatted and displayed in a monospaced font.  Indentation is critical for the parser to recognize it as a code block.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/public/model/testdata/markdown-sample.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n```\n\n----------------------------------------\n\nTITLE: Testing Word File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a Word file (`Documents/Word.docx`) to Mattermost and verifying that it generates a generic Word thumbnail and preview window. The goal is to ensure basic Word file support and preview functionality.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Rendering Single-Item Ordered List in Markdown\nDESCRIPTION: This snippet demonstrates a single-item ordered list.  It verifies the basic rendering of a numbered list with one item. There are no dependencies. Expected output: \"7. Single Item\"\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n7. Single Item\n```\n\n----------------------------------------\n\nTITLE: Rendering Multi-Item Ordered List in Markdown\nDESCRIPTION: This snippet demonstrates a multi-item ordered list. It verifies the correct rendering of a numbered list with multiple items. There are no dependencies. Expected output: A numbered list with \"One\", \"Two\", and \"Three\".\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-markdown-lists.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. One\n2. Two\n3. Three\n```\n\n----------------------------------------\n\nTITLE: Testing JPG File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a JPG image (`Images/JPG.jpg`) to Mattermost and verifying that it generates a scaled thumbnail and preview window as expected. The primary goal is to ensure proper image rendering within the Mattermost interface.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Testing TIFF File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a TIFF image (`Images/TIFF.tiff`) to Mattermost and verifying that it generates a generic attachment thumbnail and preview window. The goal is to ensure basic support for TIFF files, even if a specific thumbnail is not generated.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: Lists the options inherited from parent `mmctl` commands. These options configure global behavior such as config file path, output format, security settings, and connection preferences. These options apply to all `mmctl` subcommands.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_group_user_restore.rst#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Testing FLAC File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a FLAC audio file (`Audio/FLAC.flac`) to Mattermost and verifying that it generates a generic audio thumbnail and the preview window behaves as expected (OS/browser dependent). This test is to check FLAC audio file support.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: Lists options inherited from parent commands, allowing configuration, output formatting, secure communication, and version control. These options influence the overall behavior of `mmctl`.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_deleteall.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Testing WMA File Upload and Display in Mattermost\nDESCRIPTION: This test involves uploading a WMA audio file (`Audio/WMA.wma`) to Mattermost and verifying that it generates a generic audio thumbnail and the preview window behaves as expected (OS/browser dependent). This is a check of WMA audio format support.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/tests/test-attachments.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: mmctl inherited options\nDESCRIPTION: This section describes the options inherited from parent commands. These options control various aspects of the mmctl client, such as the configuration file path, output format, TLS settings, and communication methods. They provide flexibility in how the mmctl interacts with the Mattermost server.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_token.rst#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Configuring Notice.txt Generation\nDESCRIPTION: This YAML configuration is used to generate the Notice.txt file for a Mattermost project. It specifies the title, copyright, description, dependencies and devDependencies to be included in the generated file. The search paths define where to look for go.mod or package.json files.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/build/notice-file/Readme.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Mattermost Playbooks\"\ncopyright: \"©2015-present Mattermost, Inc.  All Rights Reserved.  See LICENSE for license information.\"\ndescription: \"This document includes a list of open source components used in Mattermost Playbooks, including those that have been modified.\"\nsearch:\n  - \"go.mod\"\n  - \"client/go.mod\"\ndependencies: []\ndevDependencies: []\n```\n\n----------------------------------------\n\nTITLE: mmctl Inherited Options\nDESCRIPTION: This snippet lists the options inherited from parent commands. These options control configuration, output format, security settings, and server communication.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_docs.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n--config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n--disable-pager                disables paged output\n--insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n--insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n--json                         the output format will be in json format\n--local                        allows communicating with the server through a unix socket\n--quiet                        prevent mmctl to generate output for the commands\n--strict                       will only only run commands if the mmctl version matches the server one\n--suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: Testing Documentation Locally\nDESCRIPTION: These commands build the YAML and run the documentation server locally, allowing you to preview changes. Navigate to `http://127.0.0.1:8080` to view the documentation.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/api/README.md#_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nmake build\n```\n\nLANGUAGE: Makefile\nCODE:\n```\nmake run\n```\n\n----------------------------------------\n\nTITLE: mmctl Global Options\nDESCRIPTION: These are inherited options that can be used with any `mmctl` command. They configure aspects like config file path, output format, server communication settings, and warning suppression.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_extract_run.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n      --config string                path to the configuration file (default \"$XDG_CONFIG_HOME/mmctl/config\")\n      --disable-pager                disables paged output\n      --insecure-sha1-intermediate   allows to use insecure TLS protocols, such as SHA-1\n      --insecure-tls-version         allows to use TLS versions 1.0 and 1.1\n      --json                         the output format will be in json format\n      --local                        allows communicating with the server through a unix socket\n      --quiet                        prevent mmctl to generate output for the commands\n      --strict                       will only run commands if the mmctl version matches the server one\n      --suppress-warnings            disables printing warning messages\n```\n\n----------------------------------------\n\nTITLE: mmctl user Options\nDESCRIPTION: These options are specific to the `mmctl user` command. The `-h` or `--help` flag displays help information for the command.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user.rst#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n  -h, --help   help for user\n```\n\n----------------------------------------\n\nTITLE: mmctl user username Options\nDESCRIPTION: Lists the available options for the mmctl user username command.  The primary option is `-h, --help   help for username`. Other options are inherited from parent commands.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_user_username.rst#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-h, --help   help for username\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: This YAML configuration defines the structure and content of the `config.yaml` file. It specifies the title, copyright, and description for the Notice.txt file, as well as reviewers, dependencies, devDependencies, and search patterns for package.json files. The pipeline uses these settings to generate the Notice.txt file.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/webapp/channels/build/notice-file/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\ntitle: \"Mattermost Web App\"\ncopyright: \"© 2017-present Mattermost, Inc.  All Rights Reserved.  See LICENSE.txt for license information.\"\ndescription: \"This document includes a list of open source components used in Mattermost Web App, including those that have been modified.\"\nreviewers:\n  - \"mattermost/release-managers\"\n  - \"mattermost/web-platform\"\nsearch:\n  - \"package.json\"\n  - \"packages/**/package.json\"\ndependencies:\n  - \"wix\"\ndevDependencies:\n  - \"webpack\"\n```\n\n----------------------------------------\n\nTITLE: Local Communication Option\nDESCRIPTION: Allows communication with the Mattermost server through a Unix socket, typically used for local development or testing.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_8\n\nLANGUAGE: Text\nCODE:\n```\n--local                        allows communicating with the server through a unix socket\n```\n\n----------------------------------------\n\nTITLE: Quiet Mode Option\nDESCRIPTION: Suppresses output from the mmctl commands, preventing it from generating any output to the console.\nSOURCE: https://github.com/mattermost/mattermost/blob/master/server/cmd/mmctl/docs/mmctl_channel_users_add.rst#_snippet_9\n\nLANGUAGE: Text\nCODE:\n```\n--quiet                        prevent mmctl to generate output for the commands\n```"
  }
]