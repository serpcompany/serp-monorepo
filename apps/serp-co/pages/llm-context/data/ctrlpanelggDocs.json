[
  {
    "owner": "ctrlpanel-gg",
    "repo": "docs",
    "content": "TITLE: Install Composer Packages - Composer\nDESCRIPTION: Installs all the required PHP packages as defined in the `composer.json` file.  The `COMPOSER_ALLOW_SUPERUSER=1` environment variable allows Composer to run as a superuser, `--no-dev` skips installing development dependencies, and `--optimize-autoloader` optimizes the autoloader for performance.  Requires Composer to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Create Database User and Database - MySQL\nDESCRIPTION: Creates a MySQL user `ctrlpaneluser` with a specified password, creates a database named `ctrlpanel`, and grants all privileges on the database to the user. Remember to replace `USE_YOUR_OWN_PASSWORD` with a strong password. The connection is made to localhost (127.0.0.1).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n# Enter to MySQL shell\nmysql -u root -p\n\n# Enter the following SQL commands\nCREATE USER 'ctrlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nCREATE DATABASE ctrlpanel;\nGRANT ALL PRIVILEGES ON ctrlpanel.* TO 'ctrlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Create Systemd Service File\nDESCRIPTION: Defines a systemd service for the Ctrlpanel queue worker. This file specifies the user and group to run the worker as, the command to start the worker, and restart behavior.  It ensures the queue worker is always running in the background to process tasks.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# Ctrlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Ctrlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/ctrlpanel/artisan queue:work --sleep=3 --tries=3\nStartLimitBurst=0\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: NGINX Virtual Host Configuration\nDESCRIPTION: Defines the virtual host configuration for Ctrlpanel, including server name, document root, file upload limits, and directory permissions.  This configuration should be placed in the NGINX configuration file and adjusted to match your specific domain and server setup.  It assumes the Ctrlpanel files are located in /var/www/ctrlpanel/public.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_24\n\nLANGUAGE: conf\nCODE:\n```\n<VirtualHost *:80>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n    DocumentRoot \"/var/www/ctrlpanel/public\"\n    \n    AllowEncodedSlashes On\n    \n    php_value upload_max_filesize 100M\n    php_value post_max_size 100M\n    \n    <Directory \"/var/www/ctrlpanel/public\">\n        AllowOverride all\n        Require all granted\n    </Directory>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Create Storage Symlink - PHP Artisan\nDESCRIPTION: Creates a symbolic link between the `storage/app/public` directory and the `public/storage` directory. This is necessary for Ctrlpanel to correctly serve uploaded files. Requires PHP and the Artisan command-line tool from the Ctrlpanel installation.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Installing Certbot for SSL\nDESCRIPTION: This bash script updates the package list, installs Certbot and its Nginx plugin, and then uses Certbot to automatically obtain and install SSL certificates for the specified domain.  Replace `yourdomain.com` with the actual domain name. This requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n#install certbot for nginx\nsudo apt install -y certbot\nsudo apt install -y python3-certbot-nginx\n#install certificates\nsudo certbot --nginx -d yourdomain.com\n```\n\n----------------------------------------\n\nTITLE: Add Cron Job\nDESCRIPTION: Adds a cron job to run the Ctrlpanel scheduler every minute. This command executes the `schedule:run` Artisan command, which handles tasks such as billing and server suspension.  The output is redirected to `/dev/null` to prevent it from being emailed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/ctrlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration with SSL (Conf)\nDESCRIPTION: This is the Nginx configuration file for Ctrlpanel with SSL.  It configures the server to listen on ports 80 and 443, handles SSL certificates, sets up routing, and configures PHP processing. Replace `YOUR.DOMAIN.HERE` with the correct domain. This configuration assumes PHP 8.3 is used.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_14\n\nLANGUAGE: conf\nCODE:\n```\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 80;\n    server_name YOUR.DOMAIN.HERE;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 443 ssl http2;\n    server_name YOUR.DOMAIN.HERE;\n\n    root /var/www/ctrlpanel/public;\n    index index.php;\n\n    access_log /var/log/nginx/ctrlpanel.app-access.log;\n    error_log  /var/log/nginx/ctrlpanel.app-error.log error;\n\n    # Allow large upload sizes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n    # SSL Configuration - Replace any YOUR.DOMAIN.HERE with the domain you're using for your Ctrlpanel setup.\n    ssl_certificate /etc/letsencrypt/live/YOUR.DOMAIN.HERE/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/YOUR.DOMAIN.HERE/privkey.pem;\n    ssl_session_cache shared:SSL:10m;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\";\n    ssl_prefer_server_ciphers on;\n\n    # See https://hstspreload.org/ before uncommenting the line below.\n    # add_header Strict-Transport-Security \"max-age=15768000; preload;\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header Content-Security-Policy \"frame-ancestors 'self'\";\n    add_header X-Frame-Options DENY;\n    add_header Referrer-Policy same-origin;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        include /etc/nginx/fastcgi_params;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Certbot for SSL\nDESCRIPTION: This snippet updates the package manager and installs Certbot and its Nginx plugin. Certbot is used to generate SSL certificates for the domain. It requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install certbot\nsudo apt install python3-certbot-nginx\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies using Composer\nDESCRIPTION: This command updates the application's dependencies using Composer. The `--no-dev` flag excludes development dependencies, and `--optimize-autoloader` optimizes the autoloader for production environments.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Restore CtrlPanel Database from Backup\nDESCRIPTION: This set of commands restores the CtrlPanel database from a backup. First, it connects to the MySQL server as the root user and creates the database and user with appropriate privileges. Then, it imports the data from the backup.sql file. Replace 'USE_YOUR_OWN_PASSWORD' with an actual strong password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/backups.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE ctrlpanel;\nCREATE USER 'ctrlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON ctrlpanel.* TO 'ctrlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\nmysql -u root -p ctrlpanel < /var/www/ctrlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Install Composer - Curl\nDESCRIPTION: Downloads and installs Composer, the PHP dependency manager.  It retrieves the installer using `curl` and executes it with PHP, placing Composer in `/usr/local/bin` for global access. Requires `curl` and `php-cli`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n```\n\n----------------------------------------\n\nTITLE: Apache VirtualHost Configuration\nDESCRIPTION: Configures an Apache VirtualHost for the Ctrlpanel, specifying the server name, document root, and directory settings.  The configuration includes enabling encoded slashes, setting PHP values for upload and post sizes, and granting access to the Ctrlpanel's public directory.  Replace `YOUR.DOMAIN.HERE` with the actual domain name.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_24\n\nLANGUAGE: conf\nCODE:\n```\n<VirtualHost *:80>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n    DocumentRoot \"/var/www/ctrlpanel/public\"\n    \n    AllowEncodedSlashes On\n    \n    php_value upload_max_filesize 100M\n    php_value post_max_size 100M\n    \n    <Directory \"/var/www/ctrlpanel/public\">\n        AllowOverride all\n        Require all granted\n    </Directory>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Creating a Cronjob for Automated Backups\nDESCRIPTION: This command creates a cronjob that runs daily at midnight to create a database backup. It uses `mysqldump` with the 'controlpanelbackupuser' to create a consistent backup while minimizing impact to the application. The backup is stored in the `/var/www/controlpanel/backups` directory with a filename that includes the date. The password must be properly escaped.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/backups.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n0 0 * * * mysqldump -u controlpanelbackupuser --password=<USE_YOUR_OWN_PASSWORD> --single-transaction --quick --lock-tables=false controlpanel > /var/www/controlpanel/backups-$(date +\\%F).sql\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Packages (Bash)\nDESCRIPTION: This snippet demonstrates how to install the required Composer packages for the Ctrlpanel-gg application.  It sets the `COMPOSER_ALLOW_SUPERUSER` environment variable to 1 and then runs the `composer install` command with the `--no-dev` and `--optimize-autoloader` flags.  This installs only the production dependencies and optimizes the autoloader for better performance. Requires Composer installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Create Database and User - SQL\nDESCRIPTION: Creates a new database and user for CtrlPanel.  Also grants all privileges to the new user on the new database. It's essential to replace `USE_YOUR_OWN_PASSWORD` with a strong, unique password.  This script configures the database connection for localhost.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER 'ctrlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nCREATE DATABASE ctrlpanel;\nGRANT ALL PRIVILEGES ON ctrlpanel.* TO 'ctrlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Creating MariaDB Database and User\nDESCRIPTION: This bash script creates a MariaDB database named `controlpanel`, a user named `controlpaneluser` with a specified password, and grants all privileges on the database to the user from localhost.  It then flushes the privileges and exits the MySQL shell.  Replace `USE_YOUR_OWN_PASSWORD` with a secure password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE controlpanel;\nCREATE USER 'controlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON controlpanel.* TO 'controlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Creating Database and User (SQL)\nDESCRIPTION: This snippet demonstrates how to create a database and a database user with the necessary permissions for the Ctrlpanel-gg application using MariaDB. It connects to the MySQL shell as root, creates a new user 'ctrlpaneluser' with a specified password, creates a database named 'ctrlpanel', grants all privileges on the database to the new user, flushes the privileges, and exits the MySQL shell.  Replace `USE_YOUR_OWN_PASSWORD` with an actual secure password. Access to the MySQL shell with root privileges is required.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n# Enter to MySQL shell\nmysql -u root -p\n\n# Enter the following SQL commands\nCREATE USER 'ctrlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nCREATE DATABASE ctrlpanel;\nGRANT ALL PRIVILEGES ON ctrlpanel.* TO 'ctrlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Enable Redis on Boot - Systemctl\nDESCRIPTION: This command configures Redis server to start automatically on system boot and starts it immediately using systemctl. This ensures that Redis is available after a reboot.  Requires systemd.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now redis-server\n```\n\n----------------------------------------\n\nTITLE: Restart Queue Workers (Bash)\nDESCRIPTION: This command restarts the queue worker to ensure that the new code is loaded in and used. It's essential to restart the queue after every update.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Backup CtrlPanel Database with mysqldump\nDESCRIPTION: This command uses mysqldump to create a backup of the CtrlPanel database. It connects to the database as the root user and saves the backup to a file named backup.sql in the /var/www/ctrlpanel/ directory. The -p flag prompts for the root password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/backups.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u root -p ctrlpanel > /var/www/ctrlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Nginx SSL Configuration\nDESCRIPTION: This Nginx configuration file sets up the server to listen on ports 80 and 443, redirects HTTP to HTTPS, configures SSL with specified certificates, and handles PHP requests via FastCGI. Replace `YOUR.DOMAIN.HERE` with the actual domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_14\n\nLANGUAGE: conf\nCODE:\n```\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 80;\n    server_name YOUR.DOMAIN.HERE;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 443 ssl http2;\n    server_name YOUR.DOMAIN.HERE;\n\n    root /var/www/ctrlpanel/public;\n    index index.php;\n\n    access_log /var/log/nginx/ctrlpanel.app-access.log;\n    error_log  /var/log/nginx/ctrlpanel.app-error.log error;\n\n    # Allow large upload sizes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n    # SSL Configuration - Replace any YOUR.DOMAIN.HERE with the domain you're using for your Ctrlpanel setup.\n    ssl_certificate /etc/letsencrypt/live/YOUR.DOMAIN.HERE/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/YOUR.DOMAIN.HERE/privkey.pem;\n    ssl_session_cache shared:SSL:10m;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\";\n    ssl_prefer_server_ciphers on;\n\n    # See https://hstspreload.org/ before uncommenting the line below.\n    # add_header Strict-Transport-Security \"max-age=15768000; preload;\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header Content-Security-Policy \"frame-ancestors 'self'\";\n    add_header X-Frame-Options DENY;\n    add_header Referrer-Policy same-origin;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        include /etc/nginx/fastcgi_params;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates\nDESCRIPTION: This command generates SSL certificates for the specified domain using Certbot with the Nginx plugin. Replace `YOUR.DOMAIN.HERE` with the actual domain name for the Ctrlpanel setup.  It saves the certificates to `/etc/letsencrypt/live/YOUR.DOMAIN.HERE/`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncertbot certonly --nginx -d YOUR.DOMAIN.HERE\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL Database Backup\nDESCRIPTION: This command creates a backup of the 'controlpanel' database using mysqldump and saves it to a file named 'backup.sql' in the `/var/www/controlpanel/` directory.  It requires MySQL to be installed and the user to have appropriate permissions. The user 'root' is used for the backup.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/backups.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u root -p controlpanel > /var/www/controlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Generating SSL Certificates with Certbot (Bash)\nDESCRIPTION: This command generates SSL certificates using Certbot with the Nginx plugin. Replace `YOUR.DOMAIN.HERE` with the actual domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncertbot certonly --nginx -d YOUR.DOMAIN.HERE\n```\n\n----------------------------------------\n\nTITLE: Apache SSL Configuration\nDESCRIPTION: This Apache configuration file sets up virtual hosts for ports 80 and 443, redirecting HTTP to HTTPS and configuring SSL with specified certificates. Replace `YOUR.DOMAIN.HERE` with the actual domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_20\n\nLANGUAGE: conf\nCODE:\n```\n<VirtualHost *:80>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n\n    RewriteEngine On\n    RewriteCond %{HTTPS} !=on\n    RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L] \n</VirtualHost>\n\n<VirtualHost *:443>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n    DocumentRoot \"/var/www/ctrlpanel/public\"\n\n    AllowEncodedSlashes On\n\n    php_value upload_max_filesize 100M\n    php_value post_max_size 100M\n\n    <Directory \"/var/www/ctrlpanel/public\">\n        Require all granted\n        AllowOverride all\n    </Directory>\n\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/YOUR.DOMAIN.HERE/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/YOUR.DOMAIN.HERE/privkey.pem\n</VirtualHost> \n```\n\n----------------------------------------\n\nTITLE: Set Permissions\nDESCRIPTION: This command updates the file ownership to the web server user (www-data, nginx, or apache depending on the setup). This ensures that the web server has the necessary permissions to access and modify files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nsudo chown -R www-data:www-data /var/www/controlpanel/\n\n# If using NGINX on CentOS:\nsudo chown -R nginx:nginx /var/www/controlpanel/\n\n# If using Apache on CentOS\nsudo chown -R apache:apache /var/www/controlpanel/\n```\n\n----------------------------------------\n\nTITLE: Automated Database Backup Cron Job\nDESCRIPTION: This command creates a cron job that runs daily at midnight to backup the CtrlPanel database. It uses mysqldump with the read-only user created previously. Ensure that the password for ctrlpanelbackupuser is correctly entered in the --password option. The backup file is saved in /var/www/ctrlpanel/backups with a filename that includes the date.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/backups.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n0 0 * * * mysqldump -u ctrlpanelbackupuser --password=<USE_YOUR_OWN_PASSWORD> --single-transaction --quick --lock-tables=false ctrlpanel > /var/www/ctrlpanel/backups-$(date +\\%F).sql\n```\n\n----------------------------------------\n\nTITLE: Nginx No SSL Configuration\nDESCRIPTION: This Nginx configuration file sets up the server to listen on port 80. It handles PHP requests via FastCGI. Replace `YOUR.DOMAIN.HERE` with the actual domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_16\n\nLANGUAGE: conf\nCODE:\n```\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 80;\n    server_name YOUR.DOMAIN.HERE;\n\n    root /var/www/ctrlpanel/public;\n    index index.html index.htm index.php;\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/ctrlpanel.app-error.log error;\n\n    # Allow larger upload sizes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Load and Enable Queue Worker - Bash\nDESCRIPTION: Loads the updated service configuration and enables the queue worker to start on boot. Also checks the status of the queue worker. Requires `systemctl` to manage systemd services.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Load service and enable it\nsystemctl enable --now ctrlpanel.service\n\n# Check status, it should be \"Active: active (running)\"\nsystemctl status ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Creating a Storage Symlink with Artisan\nDESCRIPTION: This snippet demonstrates how to create a symbolic link between the `storage/app/public` and `public/storage` directories using the `php artisan storage:link` command. This link is required for CtrlPanel to correctly serve uploaded files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/additional-configuration.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Set File Permissions\nDESCRIPTION: Sets the correct file permissions for Ctrlpanel files, ensuring the web server can access and use them correctly. It provides different commands for NGINX/Apache on non-CentOS systems, NGINX on CentOS, and Apache on CentOS. The `chown` command changes the file ownership, and `chmod` sets the file permissions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nchown -R www-data:www-data /var/www/ctrlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using NGINX on CentOS:\nchown -R nginx:nginx /var/www/ctrlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using Apache on CentOS\nchown -R apache:apache /var/www/ctrlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration\nDESCRIPTION: This bash script provides a crontab entry for scheduling the `schedule:run` command every minute.  This command is responsible for running scheduled tasks within the Ctrlpanel application, such as billing users and suspending unpaid servers. The script redirects output to `/dev/null`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Enable Apache Configuration (Debian/Ubuntu)\nDESCRIPTION: Enables the Ctrlpanel Apache configuration on Debian/Ubuntu-based systems and restarts the Apache service.  The first command creates a symbolic link in the `sites-enabled` directory, the second enables the rewrite module, and the third restarts Apache to apply the changes.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to run any of these commands on RHEL, Rocky Linux, or AlmaLinux\nsudo ln -s /etc/apache2/sites-available/ctrlpanel.conf /etc/apache2/sites-enabled/ctrlpanel.conf\nsudo a2enmod rewrite\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Create Read-Only User for Backups\nDESCRIPTION: These commands create a read-only MySQL user specifically for database backups. This user has limited privileges, only able to lock tables and select data. Replace 'USE_YOUR_OWN_PASSWORD' with a strong password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/backups.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/ctrlpanel/backups\nmysql -u root -p\nCREATE USER 'ctrlpanelbackupuser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT LOCK TABLES, SELECT ON ctrlpanel.* TO 'ctrlpanelbackupuser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\n```\n\n----------------------------------------\n\nTITLE: Installing Certbot for SSL with Nginx (Bash)\nDESCRIPTION: These commands install Certbot and its Nginx plugin to generate SSL certificates. It updates the package manager and installs the necessary packages.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install certbot\nsudo apt install python3-certbot-nginx\n```\n\n----------------------------------------\n\nTITLE: Edit Crontab\nDESCRIPTION: Opens the crontab file for editing.  This allows the user to schedule tasks to run automatically at specific intervals.  The command opens the crontab file in a text editor.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Enable Maintenance Mode using Artisan\nDESCRIPTION: This command puts the application into maintenance mode, preventing users from accessing it during the update process. It uses the `artisan down` command within the Control Panel's directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n```\n\n----------------------------------------\n\nTITLE: Generate SSL Certificate (Nginx)\nDESCRIPTION: This command generates an SSL certificate for the specified domain using Certbot and the Nginx plugin. Replace `YOUR.DOMAIN.HERE` with your actual domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncertbot certonly --nginx -d YOUR.DOMAIN.HERE\n```\n\n----------------------------------------\n\nTITLE: Systemd Queue Worker Configuration\nDESCRIPTION: Defines the systemd service configuration for the Ctrlpanel queue worker. This service keeps the queue process running in the background, handling tasks such as sending emails and other background processes. The `User` and `Group` parameters should be adjusted according to your system configuration (e.g., `apache` or `nginx`).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# Ctrlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Ctrlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/ctrlpanel/artisan queue:work --sleep=3 --tries=3\nStartLimitBurst=0\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Creating a new theme with artisan\nDESCRIPTION: This command initiates the theme creation process using Laravel's Artisan CLI. It prompts the user for basic theme information and sets up the necessary directory structure and files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/themes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:theme\n```\n\n----------------------------------------\n\nTITLE: Enable Systemd Service\nDESCRIPTION: This snippet enables and starts the Ctrlpanel systemd service. It uses 'systemctl enable' to set the service to start on boot and 'systemctl now' to immediately start the service.  This command is executed after defining the service file.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Clearing Config and Restarting Queue with Artisan\nDESCRIPTION: This snippet shows the commands necessary to clear the configuration cache and restart the queue workers in a Laravel application using Artisan. This is necessary after updating mail configuration to ensure the changes are applied.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/additional-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp /var/www/ctrlpanel/artisan config:clear\nphp /var/www/ctrlpanel/artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode (Artisan)\nDESCRIPTION: This command puts the CtrlPanel application into maintenance mode. This prevents users from accessing the application during the update process.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/ctrlpanel\nsudo php artisan down\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (Example)\nDESCRIPTION: This command provides an example of how to install the required dependencies for Ctrlpanel on an Ubuntu system. It adds necessary repositories, updates the package list, and installs PHP 8.3, MariaDB, NGINX, Git, and related PHP extensions. Please adapt this for your specific operating system and package manager.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add \"add-apt-repository\" command\napt -y install software-properties-common curl apt-transport-https ca-certificates gnupg\n\n# Add additional repositories for PHP (Ubuntu 20.04 and Ubuntu 22.04)\nLC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php\n\n# MariaDB repo setup script (Ubuntu 20.04)\ncurl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash\n\n# Update repositories list\napt update\n\n# Install Dependencies\napt -y install php8.3 php8.3-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip} mariadb-server nginx git\n```\n\n----------------------------------------\n\nTITLE: Restart Laravel Queue Worker (PHP)\nDESCRIPTION: Restarts the Laravel queue worker.  This command is used to ensure that the updated mail configuration is properly loaded for asynchronous email sending.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/additional-configuration.md#_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nphp /var/www/ctrlpanel/artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Packages\nDESCRIPTION: This command installs the composer packages needed for Ctrlpanel.  `COMPOSER_ALLOW_SUPERUSER=1` allows composer to run as a superuser. The `--no-dev` flag skips installing development dependencies, and `--optimize-autoloader` optimizes the autoloader for performance.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Enable Systemd Queue Worker\nDESCRIPTION: Enables and starts the Ctrlpanel queue worker service, ensuring it runs automatically and restarts on machine startup. This is necessary to process background tasks for Ctrlpanel.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Clear Laravel Configuration Cache (PHP)\nDESCRIPTION: Clears the Laravel configuration cache. This is necessary after updating configuration settings to ensure the application uses the new values.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/additional-configuration.md#_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nphp /var/www/ctrlpanel/artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Clear and Restart Configuration Cache (Laravel Artisan)\nDESCRIPTION: These commands clear the configuration cache and restart the queue workers. This is necessary after changing the mail configuration to ensure the new settings are loaded and applied.  It requires access to the server's command line and the Laravel Artisan tool.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/additional-configuration.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp /var/www/controlpanel/artisan config:clear\nphp /var/www/controlpanel/artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Crontab Entry\nDESCRIPTION: Specifies the crontab entry to run the Ctrlpanel scheduler every minute. This cron job is responsible for handling tasks such as billing and server suspensions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/ctrlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Seed Permissions Table (Bash)\nDESCRIPTION: This command seeds the permissions table, which is required when updating from version 0.9.X to 1.0 due to the introduction of a new permissions system.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan db:seed --class=PermissionsSeeder\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Configuration (Bash)\nDESCRIPTION: These commands enable the Nginx configuration by creating a symbolic link and restarting the Nginx service. It also checks for errors in the Nginx configuration. The first command is only needed for Debian based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to symlink this file if you are using CentOS.\nsudo ln -s /etc/nginx/sites-available/ctrlpanel.conf /etc/nginx/sites-enabled/ctrlpanel.conf\n\n# Check for nginx errors\nsudo nginx -t\n\n# You need to restart nginx regardless of OS. only do this you haven't received any errors\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Importing custom CSS in Blade template\nDESCRIPTION: This Blade directive imports a custom CSS file into the theme's layout.  The `asset()` helper function generates the URL to the CSS file within the theme's directory in the public folder. It replaces the default styling.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/themes.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<link rel=\"stylesheet\" href=\"{{ asset('themes/<YourThemeName>/app.css') }}\">\n```\n\n----------------------------------------\n\nTITLE: Restarting Queue Workers (Artisan)\nDESCRIPTION: This command restarts the queue workers. This ensures that the workers are using the latest code and are processing jobs correctly.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Clear Compiled Template Cache (Artisan)\nDESCRIPTION: These commands clear the compiled template cache and configuration cache, ensuring that the application uses the latest templates and configuration settings.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan view:clear\nsudo php artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Edit .env File - Bash\nDESCRIPTION: Opens the `.env` file for editing.  This file contains environment-specific configuration variables.  Requires `nano` or another text editor to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnano /var/www/ctrlpanel/.env\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions (Chown)\nDESCRIPTION: These commands set the correct permissions for the application files. The specific user and group depend on the web server being used (NGINX or Apache) and the operating system (CentOS or other).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nsudo chown -R www-data:www-data /var/www/ctrlpanel/\n\n# If using NGINX on CentOS:\nsudo chown -R nginx:nginx /var/www/ctrlpanel/\n\n# If using Apache on CentOS\nsudo chown -R apache:apache /var/www/ctrlpanel/\n```\n\n----------------------------------------\n\nTITLE: Disabling Maintenance Mode (Artisan)\nDESCRIPTION: This command takes the CtrlPanel application out of maintenance mode, allowing users to access it again.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan up\n```\n\n----------------------------------------\n\nTITLE: Update Database (Artisan)\nDESCRIPTION: This command updates the application's database schema using Artisan migrations and seeds the database with initial data. The `--force` flag bypasses confirmation prompts in production environments.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Restart Queue Workers (Artisan)\nDESCRIPTION: This command restarts the queue workers, ensuring that they load the latest code and process queued jobs correctly. This is important for background tasks and asynchronous operations.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Dependency (Example)\nDESCRIPTION: This command installs the `php8.3-intl` extension, which is an extra dependency used for handling currencies in the dashboard. Ensure the correct PHP version is used, aligning with the system's PHP configuration.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt -y install php8.3-intl\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Symlink (Bash)\nDESCRIPTION: This snippet creates a symbolic link between the `storage/app/public` directory and the `public/storage` directory. This is required for Ctrlpanel-gg to properly serve uploaded files. It assumes the `php` command is available in the system's PATH and that the current working directory is the root of the Ctrlpanel-gg installation.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Restart Queue Workers using Artisan\nDESCRIPTION: This command restarts the queue workers, ensuring that they load the new code. This is crucial for processing background tasks and scheduled jobs.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Install Extra PHP Dependencies (APT)\nDESCRIPTION: Installs the `intl` and `redis` PHP extensions.  The version number must match the installed PHP version. These are used for currency handling and Redis integration. Requires the `apt` package manager.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt -y install php8.3-{intl,redis}\n```\n\n----------------------------------------\n\nTITLE: Pull New Files with Git (Bash)\nDESCRIPTION: These commands fetch the latest changes from the Git repository, stash any local changes, reset the local branch to the remote branch, and set the correct permissions for the CtrlPanel directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nsudo git fetch origin\nsudo git stash\nsudo git reset --hard origin/main\nsudo chmod -R 755 /var/www/ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Edit Crontab - Bash\nDESCRIPTION: Opens the crontab editor to modify scheduled tasks.  This is necessary to update the path to the `artisan` script after renaming the CtrlPanel directory. Requires `crontab` utility.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: This bash script clones the Ctrlpanel git repository from GitHub into the current directory. It uses `git clone` to download the repository's contents, effectively setting up the codebase for the application.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/AVMG20/controlpanel.git ./\n```\n\n----------------------------------------\n\nTITLE: Creating a Read-Only MySQL User\nDESCRIPTION: This set of SQL commands creates a new MySQL user named 'controlpanelbackupuser' with limited privileges for database backups. It grants the `LOCK TABLES` and `SELECT` privileges on the `controlpanel` database to this user, which are needed to perform backups without disrupting the main application. This command is used to enhance the security of automated backups.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/backups.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/controlpanel/backups\nmysql -u root -p\nCREATE USER 'controlpanelbackupuser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT LOCK TABLES, SELECT ON controlpanel.* TO 'controlpanelbackupuser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\n```\n\n----------------------------------------\n\nTITLE: Pull New Files (Git)\nDESCRIPTION: These commands update the application files using Git. `git stash` temporarily saves any local changes, `git pull` fetches the latest changes from the repository, and `chmod` sets the correct file permissions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo git stash\nsudo git pull\nsudo chmod -R 755 /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Cloning Panel Repository (Bash)\nDESCRIPTION: This snippet clones the Ctrlpanel-gg panel from github to local directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Ctrlpanel-gg/panel.git ./\n```\n\n----------------------------------------\n\nTITLE: Enabling Apache Configuration (Bash)\nDESCRIPTION: These commands enable the Apache configuration, enable the rewrite and SSL modules, and restart the Apache service.  The commands are not required on RHEL, Rocky Linux, or AlmaLinux based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to run any of these commands on RHEL, Rocky Linux, or AlmaLinux\nsudo ln -s /etc/apache2/sites-available/ctrlpanel.conf /etc/apache2/sites-enabled/ctrlpanel.conf\nsudo a2enmod rewrite\nsudo a2enmod ssl\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Systemd Queue Worker Configuration\nDESCRIPTION: This snippet creates a systemd service file for the Ctrlpanel queue worker. It defines the user and group, restart policy, and the command to start the queue worker using 'artisan queue:work'.  This ensures the queue processing is always running in the background.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# Ctrlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Ctrlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/controlpanel/artisan queue:work --sleep=3 --tries=3\nStartLimitBurst=0\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Enable Maintenance Mode - Bash\nDESCRIPTION: Enables maintenance mode for the CtrlPanel application. This prevents users from accessing the application while updates are being applied. Requires `php` and `artisan` to be available in the system's PATH.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Without SSL\nDESCRIPTION: This is an example Nginx configuration file for Ctrlpanel without SSL. It defines a server block for HTTP, including routing rules and PHP configuration.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_14\n\nLANGUAGE: conf\nCODE:\n```\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 80;\n    server_name YOUR.DOMAIN.HERE;\n\n    root /var/www/controlpanel/public;\n    index index.html index.htm index.php;\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/ctrlpanel.app-error.log error;\n\n    # Allow larger upload sizes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$; \n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Systemd Service\nDESCRIPTION: Enables the newly created systemd service and starts it. This ensures that the queue worker starts on boot.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now controlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Enable Maintenance Mode (Artisan)\nDESCRIPTION: This command puts the ControlPanel.gg application into maintenance mode, preventing users from accessing the dashboard during the update process. It uses the `artisan down` command, a built-in Laravel utility.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies (Composer)\nDESCRIPTION: This command updates the project dependencies using Composer, ensuring that all required packages are up to date. It runs Composer as the superuser and optimizes the autoloader.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_ALLOW_SUPERUSER=1 sudo composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Edit Crontab\nDESCRIPTION: Opens the crontab file for editing, allowing you to schedule tasks to run automatically. This is necessary to set up the cron job for processing Ctrlpanel tasks.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ncrontab -e\n```\n\n----------------------------------------\n\nTITLE: Database Setup (MariaDB)\nDESCRIPTION: Creates a new database named `controlpanel` and a user `controlpaneluser` with full privileges on the database, using MariaDB's command-line interface. Replace `USE_YOUR_OWN_PASSWORD` with a strong password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE controlpanel;\nCREATE USER 'controlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON controlpanel.* TO 'controlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (Example)\nDESCRIPTION: This example shows how to install required dependencies like PHP, MariaDB, Nginx, Redis, and other utilities using apt on Debian/Ubuntu systems.  It includes adding repositories for PHP and MariaDB before installing the packages. It should be adapted based on the user's operating system.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add \"add-apt-repository\" command\napt -y install software-properties-common curl apt-transport-https ca-certificates gnupg\n\n# Add additional repositories for PHP, Redis, and MariaDB (for Debian 11 and Ubuntu 22.04)\nLC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php\ncurl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash\n\n# Update repositories list\napt update\n\n# Add universe repository if you are on Ubuntu 18.04\napt-add-repository universe\n\n# Install Dependencies \napt -y install php8.0 php8.0-{cli,gd,mysql,pdo,mbstring,tokenizer,bcmath,xml,fpm,curl,zip} mariadb-server nginx tar unzip git redis-server\n```\n\n----------------------------------------\n\nTITLE: Clone Ctrlpanel Repository - Git\nDESCRIPTION: Clones the Ctrlpanel repository from GitHub into the current directory.  It downloads all the source code and necessary files. Requires `git` to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Ctrlpanel-gg/panel.git ./\n```\n\n----------------------------------------\n\nTITLE: Clone Dashboard Repository\nDESCRIPTION: Clones the ControlPanel dashboard repository from GitHub into the current directory. This command assumes that `git` is installed and configured.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ControlPanel-gg/dashboard.git ./\n```\n\n----------------------------------------\n\nTITLE: Removing Files (Bash)\nDESCRIPTION: This snippet removes the Ctrlpanel application files from the server. It uses the `rm -rf` command to recursively and forcefully remove the directory containing the application files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstallation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Enable Apache Configuration\nDESCRIPTION: These commands create a symbolic link to enable the Ctrlpanel configuration, enable the rewrite and ssl modules, and restart the Apache service.  These are not needed on RHEL based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to run any of these commands on RHEL, Rocky Linux, or AlmaLinux\nsudo ln -s /etc/apache2/sites-available/ctrlpanel.conf /etc/apache2/sites-enabled/ctrlpanel.conf\nsudo a2enmod rewrite\nsudo a2enmod ssl\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Check and Restart Nginx - Bash\nDESCRIPTION: Checks the Nginx configuration for errors and restarts the Nginx service to apply the changes.  Requires `nginx` and `systemctl` utilities.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n# Check for nginx errors\nnginx -t\n\n# Restart nginx to apply changes\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Open NGINX Configuration (Debian/Ubuntu)\nDESCRIPTION: Opens the NGINX configuration file for Ctrlpanel on Debian/Ubuntu based operating systems using the nano text editor. This allows for editing of the web server configuration to properly serve the Ctrlpanel application.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/apache2/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Crontab Entry Example - Crontab\nDESCRIPTION: An example of a crontab entry for scheduling the `artisan schedule:run` command. The path `/var/www/controlpanel/artisan` needs to be updated to `/var/www/ctrlpanel/artisan`.  This example shows a cron job that runs every minute.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_3\n\nLANGUAGE: Crontab\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\nLANGUAGE: Crontab\nCODE:\n```\n* * * * * php /var/www/ctrlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Disable Default Apache Configuration\nDESCRIPTION: This command disables the default Apache configuration file.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\na2dissite 000-default.conf\n```\n\n----------------------------------------\n\nTITLE: Clear Compiled Template Cache using Artisan\nDESCRIPTION: These commands clear the compiled view and configuration caches. This ensures that the application uses the latest templates and configuration settings.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan view:clear\nsudo php artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Enable Nginx Configuration\nDESCRIPTION: Creates a symbolic link from the sites-available directory to the sites-enabled directory, tests the Nginx configuration, and restarts the Nginx service to apply the changes.  CentOS might not require the symlink.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to symlink this file if you are using CentOS.\nsudo ln -s /etc/nginx/sites-available/controlpanel.conf /etc/nginx/sites-enabled/controlpanel.conf\n\n# Check for nginx errors\nsudo nginx -t\n\n# You need to restart nginx regardless of OS. only do this you haven't received any errors\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Rename CtrlPanel Directory - Bash\nDESCRIPTION: Renames the CtrlPanel directory from `controlpanel` to `ctrlpanel`.  This is a crucial step in fully adopting the new name. It assumes the initial directory is located at `/var/www/controlpanel/`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmv /var/www/controlpanel/ /var/www/ctrlpanel/\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/ctrlpanel/\n```\n\n----------------------------------------\n\nTITLE: Uninstall Package using Composer remove\nDESCRIPTION: This command uninstalls a package using Composer. Replace `<package-name>` with the name of the package you want to remove.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Packages/general-info.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer remove <package-name>\n```\n\n----------------------------------------\n\nTITLE: Cloning Ctrlpanel Repository\nDESCRIPTION: This command clones the Ctrlpanel repository from GitHub into the current directory (`./`). It downloads the source code of the panel, which is required for installation.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Ctrlpanel-gg/panel.git ./\n```\n\n----------------------------------------\n\nTITLE: Opening Apache Configuration File (Debian/Ubuntu) (Bash)\nDESCRIPTION: This command opens the Apache configuration file for Ctrlpanel using the nano editor on Debian/Ubuntu-based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/apache2/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations\nDESCRIPTION: This command navigates to the ControlPanel directory and runs the PHP Artisan migrate command, which applies any pending database migrations and seeds the database. The `--force` flag is used to bypass confirmation prompts. PHP, Composer, and the Laravel framework must be installed for this command to function correctly. It ensures that the database schema matches the application's requirements after a panel update or restore.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/backups.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Stopping ControlPanel Services (Bash)\nDESCRIPTION: This snippet stops the ControlPanel application and its associated services using systemctl and php artisan. It first navigates to the ControlPanel directory, then puts the application in maintenance mode, and finally stops the systemd service. It requires access to the server via SSH.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Guides/uninstallation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n\nsudo systemctl stop controlpanel\n```\n\n----------------------------------------\n\nTITLE: Nginx PHP-FPM Configuration (Conf)\nDESCRIPTION: This snippet shows the original and updated Nginx configuration for handling PHP files. It updates the `fastcgi_pass` directive to point to the PHP 8.3 FPM socket.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_27\n\nLANGUAGE: conf\nCODE:\n```\nfastcgi_pass unix:/run/php/php8.1-fpm.sock;\n```\n\nLANGUAGE: conf\nCODE:\n```\nfastcgi_pass unix:/run/php/php8.3-fpm.sock;\n```\n\n----------------------------------------\n\nTITLE: Install Composer Packages (Bash)\nDESCRIPTION: This command reinstalls the Composer packages with optimizations. The `COMPOSER_ALLOW_SUPERUSER` environment variable is set to allow Composer to run as a superuser.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nCOMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Enable Nginx Configuration\nDESCRIPTION: These commands create a symbolic link to enable the Ctrlpanel configuration, check for Nginx errors, and restart the Nginx service.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to symlink this file if you are using CentOS.\nsudo ln -s /etc/nginx/sites-available/ctrlpanel.conf /etc/nginx/sites-enabled/ctrlpanel.conf\n\n# Check for nginx errors\nsudo nginx -t\n\n# You need to restart nginx regardless of OS. only do this you haven't received any errors\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel Webconfig & SSL - Bash\nDESCRIPTION: This snippet removes the Nginx or Apache2 web configuration files for Ctrlpanel and reloads the web server. It also provides a command to delete the SSL certificate using Certbot. Replace `<Your Domain>` with the actual domain name.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/uninstallation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# NGINX\nsudo unlink /etc/nginx/sites-enabled/ctrlpanel.conf\nsudo rm /etc/nginx/sites-available/ctrlpanel.conf\nsudo systemctl reload nginx\n# Apache2\nsudo a2dissite ctrlpanel.conf\nsudo rm /etc/apache2/sites-available/ctrlpanel.conf\nsudo systemctl reload apache2\n\nsudo certbot delete --cert-name <Your Domain>\n```\n\n----------------------------------------\n\nTITLE: Remove Control Panel Files (Bash)\nDESCRIPTION: This snippet removes the Control Panel files from the filesystem. It uses `rm -rf` to recursively remove the `/var/www/controlpanel` directory and all its contents.  This operation is irreversible and will delete all data stored in the Control Panel directory.  It requires `sudo` privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/uninstallation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Opening Apache Configuration File (RHEL/CentOS) (Bash)\nDESCRIPTION: This command opens the Apache configuration file for Ctrlpanel using the nano editor on RHEL, CentOS, Rocky Linux, or AlmaLinux-based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/httpd/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Installing Composer\nDESCRIPTION: This command downloads and installs Composer, a PHP dependency manager, globally on the system. Composer is necessary for managing the dependencies required by Ctrlpanel. It places the composer executable in `/usr/local/bin`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n```\n\n----------------------------------------\n\nTITLE: Edit .env file using nano (Bash)\nDESCRIPTION: This command opens the .env file using the nano text editor.  This file typically contains sensitive configuration information such as database credentials and application keys.  The user executing this command must have appropriate permissions to read and write to this file.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/backups.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnano /var/www/ctrlpanel/.env\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel Service & Cronjob - Bash\nDESCRIPTION: This snippet stops and disables the Ctrlpanel service, removes its systemd service file, reloads the systemd daemon, and resets failed services. It also instructs the user to remove a specific cronjob entry.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/uninstallation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop ctrlpanel\nsudo systemctl disable ctrlpanel\nsudo rm /etc/systemd/system/ctrlpanel.service\nsudo systemctl daemon-reload\nsudo systemctl reset-failed\n```\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/ctrlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Install PHP 8.3 - Bash\nDESCRIPTION: Installs PHP 8.3 and necessary extensions from the apt repository.  Requires `apt` package manager and root privileges.  This script updates the package list and installs common PHP extensions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\napt update\napt -y install php8.3 php8.3-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip,intl,redis}\n```\n\n----------------------------------------\n\nTITLE: Install Extra Dependency (intl)\nDESCRIPTION: Installs the `php8.1-intl` extension, which is required for handling currencies within the ControlPanel dashboard. Ensure the PHP version matches the installed PHP version.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt -y install php8.1-intl\n```\n\n----------------------------------------\n\nTITLE: Create Ctrlpanel Directory - Mkdir\nDESCRIPTION: Creates the directory `/var/www/ctrlpanel` if it doesn't exist, and then changes the current directory to it.  This is where the Ctrlpanel files will be stored. Requires standard Linux commands.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/ctrlpanel && cd /var/www/ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Systemd Queue Worker File\nDESCRIPTION: This bash script defines a systemd service file for running the Ctrlpanel queue worker. The queue worker handles background tasks such as sending emails. The service is configured to restart automatically, use the `www-data` user and group, and execute the `queue:work` Artisan command. This configuration assumes that PHP is located at `/usr/bin/php` and Ctrlpanel at `/var/www/ctrlpanel`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# Ctrlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=ctrlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/ctrlpanel/artisan queue:work --sleep=3 --tries=3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Installing PHP 8.3\nDESCRIPTION: Installs PHP 8.3 and required extensions.  This is a prerequisite for upgrading to v0.9 or higher.  It ensures the system has the necessary PHP version and extensions for the Control Panel.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt -y install php8.3 php8.3-{cli,gd,mysql,pdo,mbstring,tokenizer,bcmath,xml,fpm,curl,zip}\napt -y install php8.3-intl\n```\n\n----------------------------------------\n\nTITLE: Opening Nginx Configuration File (RHEL/CentOS) (Bash)\nDESCRIPTION: This command opens the Nginx configuration file for Ctrlpanel using the nano editor on RHEL, CentOS, Rocky Linux, or AlmaLinux-based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel Service and Cronjob (Bash)\nDESCRIPTION: This snippet stops and disables the Ctrlpanel service, removes the service file, reloads the systemd daemon, and resets failed services. Additionally, it requires manual removal of a cronjob entry using `crontab -e`.  The cronjob is responsible for running the scheduler.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/uninstallation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop ctrlpanel\nsudo systemctl disable ctrlpanel\nsudo rm /etc/systemd/system/ctrlpanel.service\nsudo systemctl daemon-reload\nsudo systemctl reset-failed\n```\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/ctrlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Removing Database and User (Bash)\nDESCRIPTION: This snippet removes the ControlPanel database and associated user from the MySQL server. It requires root access to the MySQL server. Ensure you have the correct root password configured.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Guides/uninstallation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p -e \"DROP DATABASE controlpanel;\"\nsudo mysql -u root -p -e \"DROP USER 'controlpaneluser'@'127.0.0.1';\"\nsudo mysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n----------------------------------------\n\nTITLE: Remove Vendor Directory (Bash)\nDESCRIPTION: This command removes the vendor directory which contains the installed composer packages. This is required before reinstalling dependencies during the update process.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/ctrlpanel/vendor\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with APT (Bash)\nDESCRIPTION: This snippet demonstrates how to install required dependencies for Ctrlpanel-gg using the APT package manager on Debian/Ubuntu-based systems. It includes adding PHP repositories, Redis official repository, MariaDB repo setup script, updating repositories list, and installing packages like PHP, MySQL/MariaDB, Nginx, Git, and Redis. It ensures the necessary software components are available for the proper functioning of Ctrlpanel-gg. Requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add \"add-apt-repository\" command\napt -y install software-properties-common curl apt-transport-https ca-certificates gnupg\n\n# Add additional repositories for PHP (Ubuntu 20.04 and Ubuntu 22.04)\nLC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php\n\n# Add Redis official APT repository\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\n# MariaDB repo setup script (Ubuntu 20.04)\ncurl -LsS https://r.mariadb.com/downloads/mariadb_repo_setup | sudo bash\n\n# Update repositories list\napt update\n\n# Install Dependencies\napt -y install php8.3 php8.3-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip} mariadb-server nginx git redis-server\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration with SSL\nDESCRIPTION: This is an example Apache configuration file for Ctrlpanel with SSL enabled. It defines VirtualHost blocks for both HTTP (redirecting to HTTPS) and HTTPS, including SSL certificate paths and directory settings.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_18\n\nLANGUAGE: conf\nCODE:\n```\n<VirtualHost *:80>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n\n    RewriteEngine On\n    RewriteCond %{HTTPS} !=on\n    RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L] \n</VirtualHost>\n\n<VirtualHost *:443>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n    DocumentRoot \"/var/www/controlpanel/public\"\n\n    AllowEncodedSlashes On\n\n    php_value upload_max_filesize 100M\n    php_value post_max_size 100M\n\n    <Directory \"/var/www/controlpanel/public\">\n        Require all granted\n        AllowOverride all\n    </Directory>\n\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/YOUR.DOMAIN.HERE/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/YOUR.DOMAIN.HERE/privkey.pem\n</VirtualHost> \n```\n\n----------------------------------------\n\nTITLE: Opening Nginx Configuration File (RHEL/CentOS)\nDESCRIPTION: Opens the Nginx configuration file for Ctrlpanel using the nano text editor. This command is intended for RHEL, CentOS, Rocky Linux, or AlmaLinux based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests via CLI\nDESCRIPTION: This command executes all Playwright tests in the project from the command line. It requires Playwright to be installed and configured.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Contributing/CTRLPanel Test.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx playwright test`\n```\n\n----------------------------------------\n\nTITLE: Check PHP Version - Bash\nDESCRIPTION: Checks the current PHP version installed on the system.  Requires the `php` command to be available in the system's PATH. The output is used to determine if a PHP upgrade is necessary.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nphp -v\n```\n\n----------------------------------------\n\nTITLE: Open NGINX Configuration (RHEL/CentOS)\nDESCRIPTION: Opens the NGINX configuration file for Ctrlpanel on RHEL, CentOS, Rocky Linux, or AlmaLinux based operating systems using the nano text editor. Necessary to configure the web server to serve the Ctrlpanel application.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/httpd/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Remove Extra Dependencies - Bash\nDESCRIPTION: This snippet removes the specified PHP extensions (intl and redis).  The user is reminded to use the appropriate PHP version.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/uninstallation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove php8.3-{intl,redis}\n```\n\n----------------------------------------\n\nTITLE: Removing ControlPanel Files (Bash)\nDESCRIPTION: This snippet removes the ControlPanel application files from the server. It recursively removes the directory and all its contents. Ensure this is the correct directory before executing to avoid data loss.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Guides/uninstallation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Enable Systemd Service\nDESCRIPTION: Enables the `controlpanel.service` and starts it immediately using `systemctl`. This ensures that the queue worker starts automatically on boot and is running.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now controlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Updating the Database (Artisan)\nDESCRIPTION: This command runs database migrations and seeds the database with initial data using the Artisan command-line tool. The `--force` flag is used to bypass confirmation prompts in production environments. Requires a properly configured database connection.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Symlink (Laravel)\nDESCRIPTION: This bash script creates a symbolic link between the `storage/app/public` directory and the `public/storage` directory, which is required for Laravel to properly serve uploaded files.  The script should be executed in the root of the Laravel project.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Disabling Apache Default Site\nDESCRIPTION: This command disables the default Apache site configuration. This is often done to avoid conflicts and ensure a clean setup for Ctrlpanel. It requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\na2dissite 000-default.conf\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode\nDESCRIPTION: Opens Playwright in UI mode, allowing for interactive test execution and debugging. This command provides a visual interface to run and inspect tests, making it easier to identify and fix issues.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Contributing/CTRLPanel Test.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Install Composer\nDESCRIPTION: Installs Composer, a dependency manager for PHP, which is used to manage the project's dependencies.  The script downloads the Composer installer and executes it using PHP, placing the composer executable in `/usr/local/bin`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n```\n\n----------------------------------------\n\nTITLE: Opening Nginx Configuration File (Debian/Ubuntu) (Bash)\nDESCRIPTION: This command opens the Nginx configuration file for Ctrlpanel using the nano editor on Debian/Ubuntu-based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Open Apache Configuration (Debian/Ubuntu)\nDESCRIPTION: This command opens the Apache configuration file for Ctrlpanel on Debian/Ubuntu based systems using the nano editor.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/apache2/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Removing ControlPanel Cronjob Entry (Bash)\nDESCRIPTION: This snippet shows the cronjob entry that needs to be removed from the crontab. It requires the user to open the crontab using `crontab -e` and manually delete this line. It's crucial for preventing scheduled tasks associated with the uninstalled application.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Guides/uninstallation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Remove Webconfig and SSL Certificates (Bash)\nDESCRIPTION: This snippet removes the ControlPanel's web server configuration for both Nginx and Apache2, and reloads the respective web servers. It unlinks and removes the Nginx configuration files, reloads Nginx, disables and removes the Apache2 site configuration, reloads Apache2, and then deletes the SSL certificate using Certbot.  The user needs to replace `<Your Domain>` with the actual domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/uninstallation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# NGINX\nsudo unlink /etc/nginx/sites-enabled/controlpanel.conf\nsudo rm /etc/nginx/sites-available/controlpanel.conf\nsudo systemctl reload nginx\n# Apache2\nsudo a2dissite controlpanel.conf\nsudo rm /etc/apache2/sites-available/controlpanel.conf\nsudo systemctl reload apache2\n\nsudo certbot delete --cert-name <Your Domain>\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration with SSL\nDESCRIPTION: This is an example Nginx configuration file for Ctrlpanel with SSL enabled. It defines server blocks for both HTTP (redirecting to HTTPS) and HTTPS, including SSL certificate paths, routing rules, and PHP configuration.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_12\n\nLANGUAGE: conf\nCODE:\n```\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 80;\n    server_name YOUR.DOMAIN.HERE;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 443 ssl http2;\n    server_name YOUR.DOMAIN.HERE;\n\n    root /var/www/controlpanel/public;\n    index index.php;\n\n    access_log /var/log/nginx/ctrlpanel.app-access.log;\n    error_log  /var/log/nginx/ctrlpanel.app-error.log error;\n\n    # Allow large upload sizes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n    # SSL Configuration - Replace any YOUR.DOMAIN.HERE with the domain you're     using for         your Ctrlpanel setup.\n    ssl_certificate /etc/letsencrypt/live/YOUR.DOMAIN.HERE/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/YOUR.DOMAIN.HERE/privkey.pem;\n    ssl_session_cache shared:SSL:10m;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers           \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-     CM-SHA38     4:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20       POLY1305  :DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\";\n    ssl_prefer_server_ciphers on;\n\n    # See https://hstspreload.org/ before uncommenting the line below.\n    # add_header Strict-Transport-Security \"max-age=15768000; preload;\";\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Robots-Tag none;\n    add_header Content-Security-Policy \"frame-ancestors 'self'\";\n    add_header X-Frame-Options DENY;\n    add_header Referrer-Policy same-origin;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$; \n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n        include /etc/nginx/fastcgi_params;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check and Restart Nginx (Bash)\nDESCRIPTION: These commands check the Nginx configuration for errors and restart the Nginx service to apply the changes. They ensure that the updated configuration is active.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\n# Check for nginx errors\nnginx -t\n\n# Restart nginx to apply changes\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel service and cronjob\nDESCRIPTION: These commands uninstall the Ctrlpanel systemd service and remove its cronjob configuration. The service is stopped and disabled, the service file is removed, the systemd daemon is reloaded, and any failed service attempts are reset. Then, the cronjob configuration is removed using crontab.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstalling.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop controlpanel\nsudo systemctl disable controlpanel\nsudo rm /etc/systemd/system/controlpanel.service\nsudo systemctl daemon-reload\nsudo systemctl reset-failed\n```\n\n----------------------------------------\n\nTITLE: Displaying Laravel Error Logs (Text)\nDESCRIPTION: This command retrieves and displays the last 100 lines of the Laravel application's error log file directly in the console. It is useful for quickly identifying recent errors without needing to open the log file in a text editor. Requires shell access to the server.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/troubleshooting.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log\n```\n\n----------------------------------------\n\nTITLE: Storage Linking - Bash\nDESCRIPTION: Creates a symbolic link for the storage directory. This ensures that uploaded files and assets are accessible. Requires `php` and `artisan` to be available in the system's PATH.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan storage:link\n```\n\n----------------------------------------\n\nTITLE: Set File Permissions\nDESCRIPTION: Sets the correct file permissions for the ControlPanel dashboard files, ensuring that the web server can access and use them correctly.  The user and group may vary depending on the operating system and web server (NGINX or Apache).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nchown -R www-data:www-data /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using NGINX on CentOS:\nchown -R nginx:nginx /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using Apache on CentOS\nchown -R apache:apache /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n```\n\n----------------------------------------\n\nTITLE: Rename Queue Worker Service File - Bash\nDESCRIPTION: Renames the queue worker service file. This is required after renaming the CtrlPanel directory to maintain consistency.  Requires root privileges to modify system files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmv /etc/systemd/system/controlpanel.service /etc/systemd/system/ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Playwright Codegen Command\nDESCRIPTION: This command launches Playwright's codegen feature, which allows you to interact with the application and automatically generate Playwright code to select elements and perform actions. This is a quick way to find elements you want to use to write tests.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Contributing/CTRLPanel Test.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx playwright codegen`\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode\nDESCRIPTION: Enables maintenance mode for the Control Panel application. This prevents users from accessing the application during the update process. Uses the `artisan down` command.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n```\n\n----------------------------------------\n\nTITLE: Clear Template and Config Cache (Bash)\nDESCRIPTION: These commands clear the compiled template cache and configuration cache. Clearing the cache ensures that the application uses the latest templates and configuration after the update.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan view:clear\nsudo php artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (Example)\nDESCRIPTION: This example demonstrates how to install the necessary dependencies for the ControlPanel dashboard, including PHP 8.1 with required extensions, MariaDB, Redis, and other utilities. It utilizes apt package manager on Debian/Ubuntu systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add \"add-apt-repository\" command\napt -y install software-properties-common curl apt-transport-https ca-certificates gnupg\n\n# Add additional repositories for PHP, Redis, and MariaDB (for Debian 11 and Ubuntu 22.04)\nLC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php\ncurl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash\n\n# Update repositories list\napt update\n\n# Add universe repository if you are on Ubuntu 18.04\napt-add-repository universe\n\n# Install Dependencies \napt -y install php8.1 php8.1-{cli,gd,mysql,pdo,mbstring,tokenizer,bcmath,xml,fpm,curl,zip} mariadb-server nginx tar unzip git redis-server\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Apache Configuration (Bash)\nDESCRIPTION: This command disables the default Apache configuration site.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\na2dissite 000-default.conf\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Example\nDESCRIPTION: Example Nginx server block configuration for the Control Panel. It sets the root directory, index files, server name, and handles PHP requests using FastCGI. Replace `YOUR.DOMAIN.COM` with your actual domain name.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n        listen 80;\n        root /var/www/controlpanel/public;\n        index index.php index.html index.htm index.nginx-debian.html;\n        server_name YOUR.DOMAIN.COM;\n\n        location / {\n                try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        location ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n        }\n\n        location ~ /\\.ht {\n                deny all;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nginx Configuration\nDESCRIPTION: This is an example Nginx server block configuration for serving the Ctrlpanel application.  It listens on port 80, sets the document root to `/var/www/controlpanel/public`, and configures PHP FastCGI proxying.  Replace `YOUR.DOMAIN.COM` with the actual domain name. It also denies access to .ht files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n        listen 80;\n        root /var/www/controlpanel/public;\n        index index.php index.html index.htm index.nginx-debian.html;\n        server_name YOUR.DOMAIN.COM;\n\n        location / {\n                try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        location ~ \\.php$ {\n                include snippets/fastcgi-php.conf;\n                fastcgi_pass unix:/var/run/php/php8.0-fpm.sock;\n        }\n\n        location ~ /\\.ht {\n                deny all;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Logs to Pteropaste using tail and nc\nDESCRIPTION: This command retrieves the last 100 lines from the Ctrlpanel error log and sends them to pteropaste.com using netcat (nc). This is the recommended method for sharing logs with support as it provides a convenient link to the error log. Requires ports 80 and 443 to be unblocked.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log | nc pteropaste.com 99\n```\n\n----------------------------------------\n\nTITLE: Enable Apache Configuration\nDESCRIPTION: This snippet enables the Apache configuration and restarts the Apache service. It creates a symbolic link to the configuration file, enables the rewrite module, and restarts Apache. This snippet should not be executed on RHEL, Rocky Linux, or AlmaLinux based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to run any of these commands on RHEL, Rocky Linux, or AlmaLinux\nsudo ln -s /etc/apache2/sites-available/ctrlpanel.conf /etc/apache2/sites-enabled/ctrlpanel.conf\nsudo a2enmod rewrite\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Tail Log to Hastebin - Bash\nDESCRIPTION: This command retrieves the last 100 lines from the Laravel application log file and pipes them to a Hastebin service. It uses `netcat` (`nc`) to send the log content to `pteropaste.com` on port 99. This creates a shareable link to the logs. Requires `netcat` to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log | nc pteropaste.com 99\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies (APT) - PHP, MariaDB, Nginx\nDESCRIPTION: This bash script installs necessary dependencies using the APT package manager.  It updates package lists, adds repositories for PHP and Redis, and installs PHP 8.3 with required extensions, MariaDB server, Nginx, Git, and Redis server. It is critical to adapt the PHP version to the desired/installed version.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add \"add-apt-repository\" command\napt -y install software-properties-common curl apt-transport-https ca-certificates gnupg\n\n# Add additional repositories for PHP (Ubuntu 20.04 and Ubuntu 22.04)\nLC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php\n\n# Add Redis official APT repository\ncurl -fsSL https://packages.redis.io/gpg | sudo gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/redis.list\n\n# MariaDB repo setup script (Ubuntu 20.04)\ncurl -LsS https://r.mariadb.com/downloads/mariadb_repo_setup | sudo bash\n\n# Update repositories list\napt update\n\n# Install Dependencies\napt -y install php8.3 php8.3-{common,cli,gd,mysql,mbstring,bcmath,xml,fpm,curl,zip} mariadb-server nginx git redis-server\n```\n\n----------------------------------------\n\nTITLE: Output Logs to Console using tail\nDESCRIPTION: This command retrieves the last 100 lines from the Ctrlpanel error log and prints them directly to the console. This method is intended for advanced users familiar with Linux command-line interfaces, as the output can be extensive.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log\n```\n\n----------------------------------------\n\nTITLE: Remove Files (Bash)\nDESCRIPTION: This snippet removes the entire Ctrlpanel directory and all its contents using the `rm -rf` command. This is a destructive operation and should be performed with caution. It assumes the Ctrlpanel installation is located in /var/www/ctrlpanel.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/uninstallation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Create a new theme\nDESCRIPTION: This command is used to create a new theme structure using Laravel Themer. It will prompt you for some basic information and then set up a base for you to start building your theme.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/themes.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:theme\n```\n\n----------------------------------------\n\nTITLE: Enabling Maintenance Mode (Artisan)\nDESCRIPTION: This command puts the ControlPanel.gg application into maintenance mode using the Artisan command-line tool.  This prevents users from accessing the application during the update process. It requires being in the controlpanel directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n```\n\n----------------------------------------\n\nTITLE: Remove Extra Dependencies (Bash)\nDESCRIPTION: This snippet removes specific PHP extensions (intl and redis) used by Ctrlpanel. The user needs to adjust the PHP version in the command to match the installed PHP version (e.g., php8.1, php8.2, php8.3).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/uninstallation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove php8.3-{intl,redis}\n```\n\n----------------------------------------\n\nTITLE: Outputting logs to console\nDESCRIPTION: This command retrieves the last 100 lines of the Laravel error log for Ctrlpanel and outputs them directly to the console. This method is suggested for advanced Linux users due to the potentially large output size.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/ctrlpanel/storage/logs/laravel.log\n```\n\n----------------------------------------\n\nTITLE: Uploading Last 100 Log Lines to Hastebin - Bash\nDESCRIPTION: This command extracts the last 100 lines from the Laravel log file and pipes them to the `pteropaste.com` service via `netcat` to create a shareable link. It requires `netcat` to be installed on the system. The output will be a URL pointing to the hastebin containing the log data.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log | nc pteropaste.com 99\n```\n\n----------------------------------------\n\nTITLE: Disabling Maintenance Mode (Artisan)\nDESCRIPTION: This command takes the ControlPanel.gg application out of maintenance mode using the Artisan command-line tool. This allows users to access the application again after the update. Requires being in the controlpanel directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan up\n```\n\n----------------------------------------\n\nTITLE: Clone Control Panel Repository\nDESCRIPTION: Clones the Control Panel's git repository from GitHub into the current directory. Requires git to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ControlPanel-gg/dashboard.git ./\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode\nDESCRIPTION: This command launches the Playwright test runner in UI mode, providing a visual interface for running and debugging tests. It requires Playwright to be installed and configured.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Contributing/CTRLPanel Test.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx playwright test --ui`\n```\n\n----------------------------------------\n\nTITLE: Open Apache Configuration (RHEL/CentOS/Rocky/Alma)\nDESCRIPTION: This command opens the Apache configuration file for Ctrlpanel on RHEL, CentOS, Rocky Linux, or AlmaLinux based systems using the nano editor.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/httpd/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Install Composer Packages\nDESCRIPTION: Navigates to the Control Panel directory and installs the required PHP packages using Composer. Uses the `--no-dev` flag to skip installing development dependencies and optimizes the autoloader for production.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Create Systemd Queue Worker\nDESCRIPTION: Creates a systemd service file for the ControlPanel queue worker. This worker processes background tasks such as sending emails.  The service is configured to restart automatically if it fails.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Controlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Controlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/controlpanel/artisan queue:work --sleep=3 --tries=3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Uninstall Extra Dependency (Bash)\nDESCRIPTION: This snippet removes an extra dependency, specifically the `php8.1-intl` package.  It uses `apt remove` to uninstall the package.  The user should replace `php8.1` with the appropriate PHP version installed on their system, determined by `php -v`. It requires `sudo` privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/uninstallation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove php8.1-intl\n```\n\n----------------------------------------\n\nTITLE: Opening Apache Configuration File (Debian/Ubuntu)\nDESCRIPTION: Opens the Apache configuration file for Ctrlpanel using the nano text editor. This command is intended for Debian/Ubuntu based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/apache2/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Importing custom CSS in Blade template\nDESCRIPTION: This code snippet demonstrates how to include a custom CSS file in a Blade template. The `asset()` helper function generates the URL to the CSS file located in the theme's directory.  The `YourThemeName` placeholder should be replaced with the actual theme folder name. This allows applying custom styling to the theme.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/themes.md#_snippet_1\n\nLANGUAGE: Blade\nCODE:\n```\n<link rel=\"stylesheet\" href=\"{{ asset('themes/<YourThemeName>/app.css') }}\">\n```\n\n----------------------------------------\n\nTITLE: Remove Default CSS import\nDESCRIPTION: This snippet is meant to remove the default CSS import to avoid conflicts with the custom CSS. Removing the line ensures that only the custom styles are applied from the new theme. Usually, this is the default styling.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/themes.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@vite('themes/default/sass/app.scss')\n```\n\n----------------------------------------\n\nTITLE: Remove Files (Bash)\nDESCRIPTION: This snippet removes the ControlPanel application files from the file system using the `rm -rf` command. It deletes the entire directory located at `/var/www/controlpanel`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/uninstallation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Install Vouchers Package using Composer\nDESCRIPTION: This command installs the Vouchers package using Composer. It directly specifies `controlpanel/vouchers` as the package to install.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Packages/general-info.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require controlpanel/vouchers\n```\n\n----------------------------------------\n\nTITLE: Discord Bot Authorization URL\nDESCRIPTION: This snippet shows how to create a Discord bot authorization URL. Replace `<CLIENT_ID_HERE>` with your bot's client ID to generate a link that allows you to add the bot to your server with the necessary permissions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/additional-configuration.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://discord.com/api/oauth2/authorize?client_id=<CLIENT_ID_HERE>&permissions=8&scope=bot\n```\n\n----------------------------------------\n\nTITLE: Pulling New Files (Git)\nDESCRIPTION: This script uses Git to stash local changes, pull the latest updates from the repository, and set appropriate permissions for the files. It ensures the dashboard files are up to date.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo git stash\nsudo git pull\nsudo chmod -R 755 /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Tail and Paste Laravel Logs with Pteropaste (Bash)\nDESCRIPTION: This command extracts the last 100 lines from the Ctrlpanel's Laravel log file and pipes them to pteropaste.com using netcat (nc) on port 99.  It provides a convenient way to share error logs with support. Ensure that ports 80 and 443 are unblocked for proper network communication.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/ctrlpanel/storage/logs/laravel.log | nc pteropaste.com 99\n```\n\n----------------------------------------\n\nTITLE: Removing Default Nginx Configuration (Bash)\nDESCRIPTION: This command removes the default Nginx configuration file. This is often done to start with a clean configuration for Ctrlpanel.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrm /etc/nginx/sites-enabled/default\n```\n\n----------------------------------------\n\nTITLE: Stop Ctrlpanel Services - Bash\nDESCRIPTION: This snippet stops the Ctrlpanel service and puts the application in maintenance mode using artisan.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/uninstallation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/ctrlpanel\nsudo php artisan down\n\nsudo systemctl stop ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Coding Style Standard\nDESCRIPTION: Specifies that the project follows the PSR12 code standard for PHP, which outlines coding style guidelines to ensure consistency and readability.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Contributing/contributing.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPSR12\n```\n\n----------------------------------------\n\nTITLE: Test File Naming Convention\nDESCRIPTION: Illustrates the file naming convention for Playwright tests within the Ctrlpanel project. It specifies the structure '[What is the test testing].[Permissions].[What is this file].js' for organizing tests based on the tested functionality, permission level, and file type.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Contributing/CTRLPanel Test.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n[What is the test testing].[Permissions].[What is this file].js\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with apt\nDESCRIPTION: This bash script installs required dependencies for Ctrlpanel using the apt package manager.  It adds necessary repositories for PHP, Redis, and MariaDB, updates the package list, and installs the required packages, including PHP extensions, MariaDB, Nginx, and other utilities. The script assumes an Ubuntu-based system and requires root privileges to execute.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Add \"add-apt-repository\" command\napt -y install software-properties-common curl apt-transport-https ca-certificates gnupg\n\n# Add additional repositories for PHP, Redis, and MariaDB\nLC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php\nadd-apt-repository -y ppa:chris-lea/redis-server\ncurl -sS https://downloads.mariadb.com/MariaDB/mariadb_repo_setup | sudo bash\n\n# Update repositories list\napt update\n\n# Add universe repository if you are on Ubuntu 18.04\napt-add-repository universe\n\n# Install Dependencies\napt -y install php8.1 php8.1-{cli,gd,mysql,pdo,mbstring,tokenizer,bcmath,xml,fpm,curl,zip,intl} mariadb-server nginx tar unzip git redis-server\n```\n\n----------------------------------------\n\nTITLE: Posting Laravel Error Logs to Hastebin\nDESCRIPTION: This command retrieves the last 100 lines of the Laravel application's error log and pipes the output to a Hastebin server using netcat (nc). This allows easy sharing of log data via a web link. Requires netcat installed and accessible, and network connectivity to the Hastebin server.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/troubleshooting.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log | nc pteropaste.com 99\n```\n\n----------------------------------------\n\nTITLE: Disable Maintenance Mode (Artisan)\nDESCRIPTION: This command takes the ControlPanel.gg application out of maintenance mode, allowing users to access the dashboard again. It uses the `artisan up` command, a built-in Laravel utility.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan up\n```\n\n----------------------------------------\n\nTITLE: Pulling New Files with Git\nDESCRIPTION: Pulls the latest files from the Git repository.  Uses `git stash` to handle local changes, `git pull` to retrieve updates, and `chmod` to ensure proper file permissions. Assumes that the Control Panel is a git repository.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo git stash\nsudo git pull\nsudo chmod -R 755 /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration without SSL (Conf)\nDESCRIPTION: This is the Nginx configuration file for Ctrlpanel without SSL. It configures the server to listen on port 80, sets up routing, and configures PHP processing. Replace `YOUR.DOMAIN.HERE` with the correct domain. It configures PHP processing similar to the SSL version, assuming PHP 8.3.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_16\n\nLANGUAGE: conf\nCODE:\n```\nserver {\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    listen 80;\n    server_name YOUR.DOMAIN.HERE;\n\n    root /var/www/ctrlpanel/public;\n    index index.html index.htm index.php;\n    charset utf-8;\n\n    location / {\n        try_files $uri $uri/ /index.php?$query_string;\n    }\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location = /robots.txt  { access_log off; log_not_found off; }\n\n    access_log off;\n    error_log  /var/log/nginx/ctrlpanel.app-error.log error;\n\n    # Allow larger upload sizes\n    client_max_body_size 100m;\n    client_body_timeout 120s;\n\n    sendfile off;\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass unix:/run/php/php8.3-fpm.sock;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param PHP_VALUE \"upload_max_filesize = 100M \\n post_max_size=100M\";\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_param HTTP_PROXY \"\";\n        fastcgi_intercept_errors off;\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n        fastcgi_connect_timeout 300;\n        fastcgi_send_timeout 300;\n        fastcgi_read_timeout 300;\n    }\n\n    location ~ /\\.ht {\n        deny all;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: This bash script creates the directory where the control panel files will reside and then changes the current working directory to the newly created directory. This ensures that subsequent operations, such as cloning the repository, are performed in the correct location.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/controlpanel && cd /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Playwright Test File Naming Convention\nDESCRIPTION: Illustrates the naming convention for Playwright test files.  The filename structure is crucial for the testing framework to automatically categorize and execute tests based on user permissions and functionality. This structure enables the framework to differentiate between admin and user test environments.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Contributing/CTRLPanel Test.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n[What is the test testing].[Permissions].[What is this file].js\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration with SSL (Conf)\nDESCRIPTION: This is the Apache configuration file for Ctrlpanel with SSL.  It sets up virtual hosts for both port 80 (redirecting to HTTPS) and port 443 (SSL). It also configures the document root, PHP settings, and SSL certificates. Replace `YOUR.DOMAIN.HERE` with the correct domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_20\n\nLANGUAGE: conf\nCODE:\n```\n<VirtualHost *:80>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n\n    RewriteEngine On\n    RewriteCond %{HTTPS} !=on\n    RewriteRule ^/?(.*) https://%{SERVER_NAME}/$1 [R,L] \n</VirtualHost>\n\n<VirtualHost *:443>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n    DocumentRoot \"/var/www/ctrlpanel/public\"\n\n    AllowEncodedSlashes On\n\n    php_value upload_max_filesize 100M\n    php_value post_max_size 100M\n\n    <Directory \"/var/www/ctrlpanel/public\">\n        Require all granted\n        AllowOverride all\n    </Directory>\n\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/YOUR.DOMAIN.HERE/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/YOUR.DOMAIN.HERE/privkey.pem\n</VirtualHost> \n```\n\n----------------------------------------\n\nTITLE: Check PHP Version (Bash)\nDESCRIPTION: This command checks the currently installed PHP version. It is used to verify if the update to PHP 8.3 was successful.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nphp -v\n```\n\n----------------------------------------\n\nTITLE: Drop Existing Database (Bash)\nDESCRIPTION: This command drops the existing controlpanel database.  It is important to back up the database before running this command as all data will be lost. Replace `root` with the appropriate MySQL username and password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/backups.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p controlpanel -e \"DROP DATABASE controlpanel\"\n```\n\n----------------------------------------\n\nTITLE: Remove Database and User (Bash/MySQL)\nDESCRIPTION: This snippet removes the Control Panel database and user from MySQL.  It uses the `mysql` command-line client to drop the database named `controlpanel`, drop the user `controlpaneluser` from `127.0.0.1`, and flush the privileges. It requires `sudo` privileges and access to the MySQL root user.  The user will be prompted for the MySQL root password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/uninstallation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p -e \"DROP DATABASE controlpanel;\"\nsudo mysql -u root -p -e \"DROP USER 'controlpaneluser'@'127.0.0.1';\"\nsudo mysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n----------------------------------------\n\nTITLE: Remove Database and User (Bash)\nDESCRIPTION: This snippet removes the Ctrlpanel database and associated user from MySQL using command-line commands executed with `sudo mysql`. Requires MySQL root access and the password will be prompted.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/uninstallation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p -e \"DROP DATABASE ctrlpanel;\"\nsudo mysql -u root -p -e \"DROP USER 'ctrlpaneluser'@'127.0.0.1';\"\nsudo mysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for PHP 8.3\nDESCRIPTION: Configures Nginx to use PHP 8.3. This involves navigating to the Nginx configuration directory, editing the Control Panel configuration file, and restarting Nginx for the changes to take effect.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/nginx/sites-available/\nnano controlpanel.conf\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Creating Ctrlpanel Directory\nDESCRIPTION: These commands create the directory `/var/www/controlpanel` where the Ctrlpanel files will be stored and then navigate into it. These commands are essential for preparing the environment before downloading the source code.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/controlpanel && cd /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Install Composer\nDESCRIPTION: Downloads and installs Composer, a dependency manager for PHP, into `/usr/local/bin` making it globally accessible. Requires curl and php to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n```\n\n----------------------------------------\n\nTITLE: Automatic Database Backup Cronjob (Bash)\nDESCRIPTION: This cronjob command creates a daily backup of the controlpanel database at midnight.  It uses mysqldump with specific options for consistent backups. Replace `<USE_YOUR_OWN_PASSWORD>` with the actual password for the `controlpanelbackupuser` user.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/backups.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n0 0 * * * mysqldump -u controlpanelbackupuser --password=<USE_YOUR_OWN_PASSWORD> --single-transaction --quick --lock-tables=false controlpanel > /var/www/controlpanel/backups-$(date +\\%F).sql\n```\n\n----------------------------------------\n\nTITLE: Create Read-Only User for Backups (Bash)\nDESCRIPTION: These commands create a read-only MySQL user specifically for backups.  This user is granted limited privileges (LOCK TABLES and SELECT) on the controlpanel database. Replace `root` with the appropriate MySQL username and password, and `USE_YOUR_OWN_PASSWORD` with a secure password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/backups.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/controlpanel/backups\nmysql -u root -p\nCREATE USER 'controlpanelbackupuser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT LOCK TABLES, SELECT ON controlpanel.* TO 'controlpanelbackupuser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\n```\n\n----------------------------------------\n\nTITLE: Editing Systemd Service File\nDESCRIPTION: Navigates to the systemd service directory and opens the ctrlpanel.service file for editing. The file manages the queue worker process.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/systemd/system\nnano ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Restarting Systemd Service\nDESCRIPTION: Restarts the ctrlpanel.service systemd service. This applies any changes made to the service file and restarts the queue worker process.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl restart ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Restore CtrlPanel Database (Bash & SQL)\nDESCRIPTION: This snippet includes multiple SQL commands executed via bash. It first connects to MySQL, creates the 'ctrlpanel' database, creates a 'ctrlpaneluser' user with appropriate privileges, and then restores the database from the backup file. The password 'USE_YOUR_OWN_PASSWORD' must be replaced with a secure password. Requires MySQL command-line access with root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/backups.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE ctrlpanel;\nCREATE USER 'ctrlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON ctrlpanel.* TO 'ctrlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\nmysql -u root -p ctrlpanel < /var/www/ctrlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Create Control Panel Directory\nDESCRIPTION: Creates the directory `/var/www/controlpanel` if it doesn't exist and then changes the current working directory to it.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/controlpanel && cd /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Updating the Database\nDESCRIPTION: Updates the database schema and seeds the database with initial data.  The command uses `artisan migrate` with the `--seed` and `--force` flags to execute migrations and seeders without prompting for confirmation. Requires a properly configured database connection.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Install Package using Composer require\nDESCRIPTION: This command installs a package using Composer. Replace `<package-name>` with the actual package name. For example, `controlpanel/vouchers` to install the vouchers package.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Packages/general-info.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require <package-name>\n```\n\n----------------------------------------\n\nTITLE: Pull New Files using Git\nDESCRIPTION: This sequence of commands stashes any local changes, pulls the latest code from the repository, and updates file permissions. It assumes that the Control Panel code is managed using Git and that the user has the necessary permissions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo git stash\nsudo git pull\nsudo chmod -R 755 /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Remove Webconfig and SSL Certificates (Bash)\nDESCRIPTION: This snippet removes the Control Panel webserver configuration for Nginx and Apache2.  It unlinks/removes the config files, reloads the web server, and deletes the SSL certificates using certbot. Replace `<Your Domain>` with the actual domain used for the control panel. It requires `sudo` privileges and knowledge of the web server used (Nginx or Apache2).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/uninstallation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# NGINX\nsudo unlink /etc/nginx/sites-enabled/controlpanel.conf\nsudo rm /etc/nginx/sites-available/controlpanel.conf\nsudo systemctl reload nginx\n# Apache2\nsudo a2dissite controlpanel.conf\nsudo rm /etc/apache2/sites-available/controlpanel.conf\nsudo systemctl reload apache2\n\nsudo certbot delete --cert-name <Your Domain>\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions\nDESCRIPTION: This bash script sets the correct file permissions and ownership for the Ctrlpanel files to allow the web server to access and use them correctly.  The script provides different commands depending on the web server (NGINX or Apache) and operating system (CentOS or other). Replace `/var/www/controlpanel/` with the correct directory if necessary.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nchown -R www-data:www-data /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using NGINX on CentOS:\nchown -R nginx:nginx /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using Apache on CentOS\nchown -R apache:apache /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n****\n```\n\n----------------------------------------\n\nTITLE: Import custom CSS in Blade file\nDESCRIPTION: This code snippet imports a custom CSS file located within the theme's directory into a Blade template. It uses the `asset` helper function to generate the correct URL for the CSS file.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/themes.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<link rel=\"stylesheet\" href=\"{{ asset('themes/<YourThemeName>/app.css') }}\">\n```\n\n----------------------------------------\n\nTITLE: Create Read-Only Backup User (Bash & SQL)\nDESCRIPTION: This snippet creates a read-only user for database backups. It includes SQL commands for creating the user 'ctrlpanelbackupuser' and granting SELECT and LOCK TABLES privileges on the 'ctrlpanel' database. The password 'USE_YOUR_OWN_PASSWORD' must be replaced with a secure password. Requires MySQL command-line access with root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/backups.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/ctrlpanel/backups\nmysql -u root -p\nCREATE USER 'ctrlpanelbackupuser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT LOCK TABLES, SELECT ON ctrlpanel.* TO 'ctrlpanelbackupuser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\n```\n\n----------------------------------------\n\nTITLE: Creating and Restoring a MySQL Database\nDESCRIPTION: This set of commands creates a new database named 'controlpanel', a new user 'controlpaneluser' with a specific password, grants all privileges on the database to the user, flushes the privileges, exits the MySQL shell, and then restores the database from a backup file. It requires MySQL to be installed and the user 'root' to have the necessary permissions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/backups.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE controlpanel;\nCREATE USER 'controlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON controlpanel.* TO 'controlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\nmysql -u root -p controlpanel < /var/www/controlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Installing PHP 8.3 and Extensions (apt)\nDESCRIPTION: This script installs PHP 8.3 and essential extensions using the apt package manager. It includes extensions like cli, gd, mysql, pdo, mbstring, tokenizer, bcmath, xml, fpm, curl, zip and intl. The script ensures the system has the necessary PHP version for the ControlPanel.gg dashboard update.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt -y install php8.3 php8.3-{cli,gd,mysql,pdo,mbstring,tokenizer,bcmath,xml,fpm,curl,zip}\napt -y install php8.3-intl\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for PHP 8.3\nDESCRIPTION: This script navigates to the Nginx sites-available directory, opens the controlpanel.conf file for editing (using nano), and restarts the Nginx service. This ensures that Nginx is configured to use the updated PHP version.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd /etc/nginx/sites-available/\nnano controlpanel.conf\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Set File Permissions\nDESCRIPTION: Sets the correct file permissions and ownership for the Ctrlpanel files. This snippet shows different variations depending on the web server (NGINX or Apache) and OS (CentOS or other).  The `chown` command changes the ownership of the files, and the `chmod` command sets the permissions to 755 for the `storage` and `bootstrap/cache` directories.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nchown -R www-data:www-data /var/www/ctrlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using NGINX on CentOS:\nchown -R nginx:nginx /var/www/ctrlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using Apache on CentOS\nchown -R apache:apache /var/www/ctrlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n```\n\n----------------------------------------\n\nTITLE: Install Certbot for SSL\nDESCRIPTION: Installs Certbot and its Nginx plugin, then uses Certbot to obtain and install SSL certificates for the specified domain. Replace `yourdomain.com` with the correct domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n#install certbot for nginx\nsudo apt install -y certbot\nsudo apt install -y python3-certbot-nginx\n#install certificates\nsudo certbot --nginx -d yourdomain.com\n```\n\n----------------------------------------\n\nTITLE: Systemd Queue Worker File\nDESCRIPTION: Creates a systemd service file for the Control Panel queue worker. The queue worker processes background tasks such as sending emails.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Controlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Controlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/controlpanel/artisan queue:work --sleep=3 --tries=3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Opening .env file with Nano\nDESCRIPTION: This command opens the .env file located at /var/www/controlpanel/.env using the nano text editor. This allows users to view and modify environment variables, including the application key.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/backups.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnano /var/www/controlpanel/.env\n```\n\n----------------------------------------\n\nTITLE: Automated Database Backup Cron Job (Bash)\nDESCRIPTION: This command creates a cron job that automatically backs up the CtrlPanel database every day at midnight.  It uses `mysqldump` with a read-only user to create a backup file named with the current date in the /var/www/ctrlpanel/backups/ directory.  The password `<USE_YOUR_OWN_PASSWORD>` must be replaced with the actual password for the backup user.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/backups.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n0 0 * * * mysqldump -u ctrlpanelbackupuser --password=<USE_YOUR_OWN_PASSWORD> --single-transaction --quick --lock-tables=false ctrlpanel > /var/www/ctrlpanel/backups-$(date +\\%F).sql\n```\n\n----------------------------------------\n\nTITLE: Restore Database Backup (Bash)\nDESCRIPTION: These commands restore the controlpanel database from a backup file.  It first connects to the MySQL server, creates the database and user, grants privileges, and then restores the data from the backup file. Replace `root` with the appropriate MySQL username and password, and `USE_YOUR_OWN_PASSWORD` with a secure password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/backups.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE controlpanel;\nCREATE USER 'controlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON controlpanel.* TO 'controlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nexit\nmysql -u root -p controlpanel < /var/www/controlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Remove Control Panel Service and Cronjob (Bash)\nDESCRIPTION: This snippet removes the Control Panel systemd service and cronjob. It stops and disables the service, removes the service file, reloads the systemd daemon, and resets failed service states.  It also provides instructions to manually remove the cronjob from the crontab using `crontab -e`. It requires `sudo` privileges and the existence of a systemd service file named `controlpanel.service`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/uninstallation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop controlpanel\nsudo systemctl disable controlpanel\nsudo rm /etc/systemd/system/controlpanel.service\nsudo systemctl daemon-reload\nsudo systemctl reset-failed\n```\n\n----------------------------------------\n\nTITLE: Displaying Last 100 Lines of Log - Bash\nDESCRIPTION: This command retrieves the last 100 lines from the Laravel log file located in the control panel's storage directory and prints them to the console. It requires access to the server's command line interface and assumes that the control panel is installed in the specified directory. The output will be the most recent log entries, useful for debugging recent errors.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log\n```\n\n----------------------------------------\n\nTITLE: Clearing Template Cache (Artisan)\nDESCRIPTION: These commands clear the compiled view and configuration caches using the Artisan command-line tool. This ensures that the application uses the latest templates and configuration settings. Requires being in the controlpanel directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan view:clear\nsudo php artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Example Nginx Configuration\nDESCRIPTION: This example provides an Nginx configuration file for serving the ControlPanel dashboard.  It defines the server block, root directory, index files, and PHP handling using fastcgi.  Replace `YOUR.DOMAIN.COM` with the actual domain name.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n        listen 80;\n        root /var/www/controlpanel/public;\n        index index.php index.html index.htm index.nginx-debian.html;\n        server_name YOUR.DOMAIN.COM;\n\n        location / {\n                try_files $uri $uri/ /index.php?$query_string;\n        }\n\n        location ~ \\\\.php$ {\n                include snippets/fastcgi-php.conf;\n                fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;\n        }\n\n        location ~ /\\.ht {\n                deny all;\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Systemd Service File Content\nDESCRIPTION: Configuration file for the Ctrlpanel queue worker.  Defines the user, group, restart policy, and execution command for the queue worker service.  Requires correct user and group based on system configuration and proper path to PHP executable.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Ctrlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Ctrlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/controlpanel/artisan queue:work --sleep=3 --tries=3\nStartLimitBurst=0\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Set File Permissions\nDESCRIPTION: This snippet sets the file permissions for the Ctrlpanel installation. It changes the ownership of the Ctrlpanel directory and sets the permissions for the storage and bootstrap/cache directories. Different commands are used depending on the web server (NGINX or Apache) and the operating system (CentOS or other).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nchown -R www-data:www-data /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using NGINX on CentOS:\nchown -R nginx:nginx /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using Apache on CentOS\nchown -R apache:apache /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n```\n\n----------------------------------------\n\nTITLE: Find Queue Worker File - Bash\nDESCRIPTION: Finds the name of the systemd service file for the queue worker, which can be either `ctrlpanel.service` or `controlpanel.service`.  This script uses conditional checks to determine the correct file name. It uses `eval` to execute the dynamically constructed command.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nQUEUE_WORKER_FIND='[ -f /etc/systemd/system/ctrlpanel.service ] && echo -e \"\\nFile name: ctrlpanel.service\" || ([ -f /etc/systemd/system/controlpanel.service ] && echo -e \"\\nFile name: controlpanel.service\" || echo -e \"\\nQueue Worker not found!\")'\neval $QUEUE_WORKER_FIND\n```\n\n----------------------------------------\n\nTITLE: Creating Panel Directory and Cloning (Bash)\nDESCRIPTION: This snippet creates the directory where the Ctrlpanel-gg panel will reside and clones the panel's Git repository into that directory. It first creates the /var/www/ctrlpanel directory if it doesn't exist, then changes the current directory to the newly created one. After that, it clones the panel's repository from GitHub into the current directory. Requires `git` installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/ctrlpanel && cd /var/www/ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Apache Configuration File\nDESCRIPTION: This snippet configures an Apache virtual host for Ctrlpanel. It sets the ServerName, DocumentRoot, enables encoded slashes, configures PHP upload limits, and defines directory access permissions. Replace 'YOUR.DOMAIN.HERE' with the actual domain.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_20\n\nLANGUAGE: conf\nCODE:\n```\n<VirtualHost *:80>\n    # Replace YOUR.DOMAIN.HERE with your domain.\n    ServerName YOUR.DOMAIN.HERE\n    DocumentRoot \"/var/www/controlpanel/public\"\n    \n    AllowEncodedSlashes On\n    \n    php_value upload_max_filesize 100M\n    php_value post_max_size 100M\n    \n    <Directory \"/var/www/controlpanel/public\">\n        AllowOverride all\n        Require all granted\n    </Directory>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Stop Control Panel Services (Bash)\nDESCRIPTION: This snippet stops the Control Panel application and its associated systemd service.  It first navigates to the controlpanel directory, then uses `php artisan down` to put the application into maintenance mode, and finally stops the systemd service.  It requires that the user has sudo privileges and that the controlpanel service is configured with systemd.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/uninstallation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n\nsudo systemctl stop controlpanel\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Configuration\nDESCRIPTION: This bash script enables the Ctrlpanel Nginx configuration by creating a symbolic link from `sites-available` to `sites-enabled`, tests the Nginx configuration for errors, and restarts the Nginx service.  The symlink command is skipped on CentOS systems.  Root privileges are required.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to symlink this file if you are using CentOS.\nsudo ln -s /etc/nginx/sites-available/ctrlpanel.conf /etc/nginx/sites-enabled/ctrlpanel.conf\n\n# Check for nginx errors\nsudo nginx -t\n\n# You need to restart nginx regardless of OS. only do this you haven't received any errors\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Remove Webconfig and SSL Certificates (Bash)\nDESCRIPTION: This snippet removes the web server configuration files (NGINX and Apache2) for Ctrlpanel and restarts the web server. It also deletes the SSL certificates associated with the domain using Certbot. It assumes either Nginx or Apache2 is used.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/uninstallation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# NGINX\nsudo unlink /etc/nginx/sites-enabled/ctrlpanel.conf\nsudo rm /etc/nginx/sites-available/ctrlpanel.conf\nsudo systemctl reload nginx\n# Apache2\nsudo a2dissite ctrlpanel.conf\nsudo rm /etc/apache2/sites-available/ctrlpanel.conf\nsudo systemctl reload apache2\n\nsudo certbot delete --cert-name <Your Domain>\n```\n\n----------------------------------------\n\nTITLE: Removing Database and User (Bash)\nDESCRIPTION: This snippet removes the Ctrlpanel database and associated user from the MySQL server. It executes SQL commands to drop the database and user, and then flushes the privileges to apply the changes.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstallation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p -e \"DROP DATABASE controlpanel;\"\nsudo mysql -u root -p -e \"DROP USER 'controlpaneluser'@'127.0.0.1';\"\nsudo mysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n----------------------------------------\n\nTITLE: Panel Installation Commands\nDESCRIPTION: This bash script executes several PHP Artisan commands and a Composer command to set up the Ctrlpanel application.  It generates the application key, migrates the database, creates a storage link, and installs Composer dependencies with optimization. The script assumes the user is in the Ctrlpanel root directory (`/var/www/controlpanel`).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan key:generate\nphp artisan migrate --seed --force\nphp artisan storage:link\ncomposer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Queue Worker Service File Example - Systemd\nDESCRIPTION: An example of a systemd service file for the CtrlPanel queue worker. The `ExecStart` line contains the path to the `artisan queue:work` command, which needs to be updated.  This service file ensures the queue worker restarts automatically.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_8\n\nLANGUAGE: Systemd\nCODE:\n```\n# Ctrlpanel Queue Worker File\n# ----------------------------------\n\n[Unit]\nDescription=Ctrlpanel Queue Worker\n\n[Service]\n# On some systems the user and group might be different.\n# Some systems use `apache` or `nginx` as the user and group.\nUser=www-data\nGroup=www-data\nRestart=always\nExecStart=/usr/bin/php /var/www/ctrlpanel/artisan queue:work --sleep=3 --tries=3\nStartLimitBurst=0\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Enable NGINX Configuration\nDESCRIPTION: Enables the Ctrlpanel NGINX configuration, enables the rewrite module, and restarts the Apache service. This command assumes a Debian/Ubuntu-based system. Note that these commands should NOT be run on RHEL, Rocky Linux, or AlmaLinux based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to run any of these commands on RHEL, Rocky Linux, or AlmaLinux\nsudo ln -s /etc/apache2/sites-available/ctrlpanel.conf /etc/apache2/sites-enabled/ctrlpanel.conf\nsudo a2enmod rewrite\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Remove Cronjob Configuration (Bash)\nDESCRIPTION: This snippet shows the line to remove from the crontab file. It specifies the execution of the `artisan schedule:run` command every minute. This configuration ensures that scheduled tasks are run for the Control Panel. This snippet is not a standalone command, but an example of what to remove.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/uninstallation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Set File Permissions\nDESCRIPTION: Sets the correct file permissions for the Control Panel files, ensuring the web server (NGINX or Apache) can access and use them correctly. Different commands are needed depending on the OS and webserver.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nchown -R www-data:www-data /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using NGINX on CentOS:\nchown -R nginx:nginx /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n\n# If using Apache on CentOS\nchown -R apache:apache /var/www/controlpanel/\nchmod -R 755 storage/* bootstrap/cache/\n```\n\n----------------------------------------\n\nTITLE: Remove website configuration and SSL certificates\nDESCRIPTION: This set of commands removes the website configuration for Ctrlpanel from both Nginx and Apache2, and also removes any associated SSL certificates. It unlinks/removes configuration files and reloads the web server. It also uses certbot to delete the certificates.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstalling.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# NGINX\nsudo unlink /etc/nginx/sites-enabled/controlpanel.conf\nsudo rm /etc/nginx/sites-available/controlpanel.conf\nsudo systemctl reload nginx\n# Apache2\nsudo a2dissite controlpanel.conf\nsudo rm /etc/apache2/sites-available/controlpanel.conf\nsudo systemctl reload apache2\n\nsudo certbot delete --cert-name <Your Domain>\n```\n\n----------------------------------------\n\nTITLE: Installing Composer (Bash)\nDESCRIPTION: This snippet shows how to install Composer, a dependency manager for PHP.  It downloads the Composer installer and executes it using PHP, placing the composer executable in /usr/local/bin. Requires `curl` to download the installer and PHP to execute it. Root privileges are required.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n```\n\n----------------------------------------\n\nTITLE: Removing the Vendor Folder (rm)\nDESCRIPTION: This command removes the vendor folder to ensure that old dependencies are removed before installing new ones. This avoids conflicts during the update process. Requires sudo privileges and assumes the correct path to the vendor folder.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/controlpanel/vendor\n```\n\n----------------------------------------\n\nTITLE: Remove ControlPanel Service and Cronjob (Bash)\nDESCRIPTION: This snippet removes the ControlPanel service and its associated cronjob. It stops and disables the 'controlpanel' service, removes the service file, reloads the systemd daemon, and resets failed services. Additionally, it instructs the user to manually remove a cronjob entry using `crontab -e`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/uninstallation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop controlpanel\nsudo systemctl disable controlpanel\nsudo rm /etc/systemd/system/controlpanel.service\nsudo systemctl daemon-reload\nsudo systemctl reset-failed\n```\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: .env File Example - Env\nDESCRIPTION: An example section of the `.env` file showing the database connection settings. The `DB_DATABASE`, `DB_USERNAME`, and `DB_PASSWORD` variables need to be updated to reflect the new database and user names. This example assumes a MySQL database on localhost.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_15\n\nLANGUAGE: Env\nCODE:\n```\n### --- DB Settings (required) --- ###\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=controlpanel\nDB_USERNAME=controlpaneluser\nDB_PASSWORD=YOUR_OWN_PASSWORD\n### --- DB Settings End --- ###\n```\n\nLANGUAGE: Env\nCODE:\n```\n### --- DB Settings (required) --- ###\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=ctrlpanel\nDB_USERNAME=ctrlpaneluser\nDB_PASSWORD=YOUR_OWN_PASSWORD\n### --- DB Settings End --- ###\n```\n\n----------------------------------------\n\nTITLE: Tail Laravel Logs for Direct Text Output (Bash)\nDESCRIPTION: This command extracts the last 100 lines from Ctrlpanel's Laravel log file and outputs them directly to the console. This is intended for advanced users who are comfortable with large text outputs and debugging in the terminal.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/ctrlpanel/storage/logs/laravel.log\n```\n\n----------------------------------------\n\nTITLE: Creating MariaDB Database and User\nDESCRIPTION: These commands create a database named `controlpanel` and a user named `controlpaneluser` with appropriate permissions for the database. Replace `USE_YOUR_OWN_PASSWORD` with a strong password. These steps are essential for setting up the database for Ctrlpanel.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE controlpanel;\nCREATE USER 'controlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON controlpanel.* TO 'controlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions (chown)\nDESCRIPTION: This command sets the ownership of the ControlPanel.gg directory to the web server user (www-data, nginx, or apache). This ensures that the web server can access and modify the files. The appropriate user depends on the web server configuration.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nsudo chown -R www-data:www-data /var/www/controlpanel/\n\n# If using NGINX on CentOS:\nsudo chown -R nginx:nginx /var/www/controlpanel/\n\n# If using Apache on CentOS\nsudo chown -R apache:apache /var/www/controlpanel/\n```\n\n----------------------------------------\n\nTITLE: Installing Composer\nDESCRIPTION: This bash script downloads and installs Composer, a dependency manager for PHP. It uses `curl` to download the Composer installer and then executes it with PHP, installing Composer globally in `/usr/local/bin` with the filename `composer`.  This script requires `curl` and `php` to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer\n```\n\n----------------------------------------\n\nTITLE: Removing Webconfig and SSL Certificates (Bash)\nDESCRIPTION: This snippet removes the web server configuration files for both Nginx and Apache2 and reloads the respective services. It also removes the SSL certificates associated with the Ctrlpanel domain using Certbot.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstallation.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# NGINX\nsudo unlink /etc/nginx/sites-enabled/controlpanel.conf\nsudo rm /etc/nginx/sites-available/controlpanel.conf\nsudo systemctl reload nginx\n# Apache2\nsudo a2dissite controlpanel.conf\nsudo rm /etc/apache2/sites-available/controlpanel.conf\nsudo systemctl reload apache2\n\nsudo certbot delete --cert-name <Your Domain>\n```\n\n----------------------------------------\n\nTITLE: Backup CtrlPanel Database with mysqldump (Bash)\nDESCRIPTION: This command creates a backup of the CtrlPanel database using mysqldump. It requires MySQL to be installed and accessible via the command line.  The database backup is stored in the /var/www/ctrlpanel/ folder as backup.sql.  Ensure that the user 'root' has the necessary privileges to access the database.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/backups.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u root -p ctrlpanel > /var/www/ctrlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Enabling Apache Configuration\nDESCRIPTION: This snippet creates a symbolic link to enable the Ctrlpanel Apache configuration, enables the rewrite and SSL modules, and restarts the Apache service. It requires root privileges. This is intended for Debian/Ubuntu systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to run any of these commands on RHEL, Rocky Linux, or AlmaLinux\nsudo ln -s /etc/apache2/sites-available/ctrlpanel.conf /etc/apache2/sites-enabled/ctrlpanel.conf\nsudo a2enmod rewrite\nsudo a2enmod ssl\nsudo systemctl restart apache2\n```\n\n----------------------------------------\n\nTITLE: Linking Pterodactyl Instance\nDESCRIPTION: This bash script navigates to the Ctrlpanel directory and then executes a PHP Artisan command to link the Ctrlpanel instance to a Pterodactyl instance.  It prompts for the Pterodactyl URL and API key. Make sure the Pterodactyl API key has read and write permissions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nphp artisan s:pterodactyl:link\n```\n\n----------------------------------------\n\nTITLE: Set Permissions (Chown)\nDESCRIPTION: These commands set the correct file ownership for the application files. The appropriate command depends on the web server being used (NGINX or Apache) and the operating system (CentOS or other).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nsudo chown -R www-data:www-data /var/www/controlpanel/\n\n# If using NGINX on CentOS:\nsudo chown -R nginx:nginx /var/www/controlpanel/\n\n# If using Apache on CentOS\nsudo chown -R apache:apache /var/www/controlpanel/\n```\n\n----------------------------------------\n\nTITLE: Backup Database with mysqldump (Bash)\nDESCRIPTION: This command creates a backup of the controlpanel database using mysqldump and saves it to a file named backup.sql in the /var/www/controlpanel/ directory.  It requires MySQL to be installed and the user to have the appropriate privileges. Replace `root` with the appropriate MySQL username and password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/backups.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u root -p controlpanel > /var/www/controlpanel/backup.sql\n```\n\n----------------------------------------\n\nTITLE: Removing default CSS import in Blade template\nDESCRIPTION: This code snippet shows how to remove the default CSS import statement. This is necessary when using a custom CSS file to prevent conflicts. The `@vite` directive is used to load assets bundled by Vite.js, which is not needed when manually including a CSS file.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/themes.md#_snippet_2\n\nLANGUAGE: Blade\nCODE:\n```\n@vite('themes/default/sass/app.scss')\n```\n\n----------------------------------------\n\nTITLE: Removing ControlPanel Service and Cronjob (Bash)\nDESCRIPTION: This snippet removes the ControlPanel service and cronjob. It stops and disables the systemd service, removes the service file, reloads the systemd daemon, and resets failed services. It also provides the command to open the crontab for manual removal of the cronjob entry.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Guides/uninstallation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop controlpanel\nsudo systemctl disable controlpanel\nsudo rm /etc/systemd/system/controlpanel.service\nsudo systemctl daemon-reload\nsudo systemctl reset-failed\n```\n\n----------------------------------------\n\nTITLE: Rename Nginx Configuration - Bash\nDESCRIPTION: Deletes the old symlink, renames the Nginx configuration file, and creates a new symlink. This is necessary to maintain consistency after renaming the CtrlPanel directory.  Requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Delete old symlink\nrm -rf /etc/nginx/sites-enabled/controlpanel.conf\n\n# Rename existing configuration file\nmv /etc/nginx/sites-available/controlpanel.conf /etc/nginx/sites-available/ctrlpanel.conf\n\n# Create symlink with new name\nln -s /etc/nginx/sites-available/ctrlpanel.conf /etc/nginx/sites-enabled/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Find Nginx Configuration - Bash\nDESCRIPTION: Finds the name of the Nginx configuration file for CtrlPanel.  This script uses conditional checks to determine the correct file name. It uses `eval` to execute the dynamically constructed command.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nNGINX_FIND='[ -f /etc/nginx/sites-enabled/ctrlpanel.conf ] && echo -e \"\\nFile name: ctrlpanel.conf\" || ([ -f /etc/nginx/sites-enabled/controlpanel.conf ] && echo -e \"\\nFile name: controlpanel.conf\" || echo -e \"\\nNginx configuration not found!\")'\neval $NGINX_FIND\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests via CLI\nDESCRIPTION: Executes Playwright tests from the command line. This command triggers the execution of all tests within the project, providing detailed results and reports.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Contributing/CTRLPanel Test.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpx playwright test\n```\n\n----------------------------------------\n\nTITLE: Clearing Config Cache and Restarting Queue Workers - PHP\nDESCRIPTION: This snippet shows the commands needed to clear the config cache and restart queue workers in a Laravel application.  This is required after making changes to the email configuration to ensure the changes are applied. It depends on having access to the server's command line interface.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/additional-configuration.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan config:clear\n```\n\nLANGUAGE: php\nCODE:\n```\nphp artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Migrate CtrlPanel Database\nDESCRIPTION: This command migrates the CtrlPanel database to the latest version. It changes the current directory to /var/www/ctrlpanel and then runs the `php artisan migrate` command with the `--seed` and `--force` options. Requires the PHP CLI and Laravel framework to be set up and functional.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/backups.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/ctrlpanel\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Open Apache Configuration (RHEL/CentOS/Rocky/AlmaLinux)\nDESCRIPTION: Opens the Apache configuration file for Ctrlpanel on RHEL, CentOS, Rocky Linux, or AlmaLinux-based systems using nano editor.  This step is necessary to configure the web server to correctly serve the Ctrlpanel application. The command assumes nano is installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/httpd/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Remove Database and User (Bash)\nDESCRIPTION: This snippet removes the ControlPanel database and user from the MySQL server. It executes SQL commands to drop the 'controlpanel' database, drop the 'controlpaneluser' user, and flush privileges, requiring root access to the MySQL server.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/uninstallation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p -e \"DROP DATABASE controlpanel;\"\nsudo mysql -u root -p -e \"DROP USER 'controlpaneluser'@'127.0.0.1';\"\nsudo mysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration\nDESCRIPTION: This snippet configures a cron job to run the Ctrlpanel scheduler every minute. It executes the 'artisan schedule:run' command to handle tasks such as billing users and suspending unpaid servers.  This ensures background tasks are processed regularly.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Set File Permissions (Bash)\nDESCRIPTION: These commands set the file permissions for the CtrlPanel directory, depending on the web server used. They ensure that the web server user has the correct permissions to access the files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nsudo chown -R www-data:www-data /var/www/ctrlpanel/\n\n# If using NGINX on CentOS:\nsudo chown -R nginx:nginx /var/www/ctrlpanel/\n\n# If using Apache on CentOS\nsudo chown -R apache:apache /var/www/ctrlpanel/\n```\n\n----------------------------------------\n\nTITLE: Drop Existing CtrlPanel Database\nDESCRIPTION: This command drops the existing CtrlPanel database. It connects to the MySQL server as the root user and executes the DROP DATABASE command. This command will delete all CtrlPanel related data, so ensure a backup is created before running. The -p flag prompts for the root password.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/backups.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p ctrlpanel -e \"DROP DATABASE ctrlpanel\"\n```\n\n----------------------------------------\n\nTITLE: Setting File Permissions\nDESCRIPTION: Sets the appropriate file permissions for the application.  The commands use `chown` to change the ownership of the files to the web server user.  The specific user depends on the web server and operating system.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# If using NGINX or Apache (not on CentOS):\nsudo chown -R www-data:www-data /var/www/controlpanel/\n\n# If using NGINX on CentOS:\nsudo chown -R nginx:nginx /var/www/controlpanel/\n\n# If using Apache on CentOS\nsudo chown -R apache:apache /var/www/controlpanel/\n```\n\n----------------------------------------\n\nTITLE: Tail Log to Console - Bash\nDESCRIPTION: This command retrieves the last 100 lines from the Laravel application log file and prints them to the console. It is useful for quickly inspecting recent errors or activity. Requires access to the server's command line.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/controlpanel/storage/logs/laravel.log\n```\n\n----------------------------------------\n\nTITLE: Transfer Database - Bash\nDESCRIPTION: Transfers data from the old database to the new one. First dumps the old database into a SQL file, then imports that file into the new database. Requires `mysqldump` and `mysql` clients.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmysqldump -u root -p controlpanel > /var/www/ctrlpanel/transfer.sql\nmysql -u root -p ctrlpanel < /var/www/ctrlpanel/transfer.sql\n```\n\n----------------------------------------\n\nTITLE: Playwright Code Generation Tool\nDESCRIPTION: Invokes the Playwright codegen tool to generate test code. This feature allows for quick creation of element selectors and test scripts by recording user interactions in the browser. It simplifies the process of setting up tests and reduces manual coding effort.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Contributing/CTRLPanel Test.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx playwright codegen\n```\n\n----------------------------------------\n\nTITLE: Drop CtrlPanel Database (Bash)\nDESCRIPTION: This command drops the existing CtrlPanel database. It's a destructive operation and will delete all CtrlPanel related data.  Requires MySQL command-line access with root privileges. This is a prerequisite for restoring a database backup.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/backups.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p ctrlpanel -e \"DROP DATABASE ctrlpanel\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Configuration\nDESCRIPTION: This snippet creates a symbolic link to enable the Ctrlpanel Nginx configuration, checks for Nginx errors, and restarts the Nginx service. It requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to symlink this file if you are using CentOS.\nsudo ln -s /etc/nginx/sites-available/ctrlpanel.conf /etc/nginx/sites-enabled/ctrlpanel.conf\n\n# Check for nginx errors\nsudo nginx -t\n\n# You need to restart nginx regardless of OS. only do this you haven't received any errors\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Outputting logs via Pteropaste\nDESCRIPTION: This command retrieves the last 100 lines of the Laravel error log for Ctrlpanel and sends them to pteropaste.com for easy sharing. Ensure that ports 80 and 443 are unblocked to avoid issues.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntail -n 100 /var/www/ctrlpanel/storage/logs/laravel.log | nc pteropaste.com 99\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Example - Nginx\nDESCRIPTION: An example of a line within the Nginx configuration file that defines the root directory for the web application. The `root` directive needs to be updated from `/var/www/controlpanel/public` to `/var/www/ctrlpanel/public`. This example is for a basic PHP application setup.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_19\n\nLANGUAGE: Nginx\nCODE:\n```\nroot /var/www/controlpanel/public;\n```\n\nLANGUAGE: Nginx\nCODE:\n```\nroot /var/www/ctrlpanel/public;\n```\n\n----------------------------------------\n\nTITLE: Stop ControlPanel Services (Bash)\nDESCRIPTION: This snippet stops the ControlPanel application and its associated services. It first navigates to the ControlPanel directory, puts the application into maintenance mode using `php artisan down`, and then stops the systemd service named 'controlpanel'.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/uninstallation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n\nsudo systemctl stop controlpanel\n```\n\n----------------------------------------\n\nTITLE: Removing Service and Cronjob (Bash)\nDESCRIPTION: This snippet removes the Ctrlpanel service and disables it to prevent automatic startup. It also removes the service file and cronjob. The `crontab -e` command is provided as instruction, the cronjob configuration must be removed manually.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstallation.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop controlpanel\nsudo systemctl disable controlpanel\nsudo rm /etc/systemd/system/controlpanel.service\nsudo systemctl daemon-reload\nsudo systemctl reset-failed\n```\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Stop Ctrlpanel Services (Bash)\nDESCRIPTION: This snippet stops the Ctrlpanel application and its associated service using Artisan and systemctl.  It ensures that the application is offline before any further uninstallation steps are taken. It assumes Ctrlpanel is located in /var/www/ctrlpanel.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/uninstallation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/ctrlpanel\nsudo php artisan down\n\nsudo systemctl stop ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Open .env File in Nano Editor\nDESCRIPTION: This command opens the .env file in the nano text editor. The .env file contains environment variables, including the application key which is used to encrypt sensitive data in the database. This command requires the nano editor to be installed on the system.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/backups.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnano /var/www/ctrlpanel/.env\n```\n\n----------------------------------------\n\nTITLE: Syncing Pterodactyl Resources\nDESCRIPTION: This bash script executes a PHP Artisan command to sync the nodes, eggs, and nests from the linked Pterodactyl instance to the Ctrlpanel instance.  This command helps to keep the resources synchronized between the two platforms.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan s:pterodactyl:sync\n```\n\n----------------------------------------\n\nTITLE: MariaDB Database Setup\nDESCRIPTION: Creates a database named `controlpanel`, a user `controlpaneluser` with a specified password, and grants all privileges on the database to the user from localhost (127.0.0.1).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\nCREATE DATABASE controlpanel;\nCREATE USER 'controlpaneluser'@'127.0.0.1' IDENTIFIED BY 'USE_YOUR_OWN_PASSWORD';\nGRANT ALL PRIVILEGES ON controlpanel.* TO 'controlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration\nDESCRIPTION: Adds a cron job to the system's crontab to run the `schedule:run` Artisan command every minute. This command is responsible for running scheduled tasks such as billing and server suspension.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Example Test Filename Convention\nDESCRIPTION: This example demonstrates the naming convention for Playwright test files. The filename indicates what the test is testing, the permissions required (user or admin), and the file type. This convention is used to setup a admin and user test env.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Contributing/CTRLPanel Test.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[What is the test testing].[Permissions].[What is this file].js\n\n```\n\nLANGUAGE: shell\nCODE:\n```\nserver.user.test.js\n```\n\n----------------------------------------\n\nTITLE: Open Apache Configuration (Debian/Ubuntu)\nDESCRIPTION: Opens the Apache configuration file for Ctrlpanel on Debian/Ubuntu-based systems using nano editor.  This step is necessary to configure the web server to correctly serve the Ctrlpanel application.  The command assumes nano is installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/apache2/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Restarting Queue Workers (Artisan)\nDESCRIPTION: This command restarts the queue workers using the Artisan command-line tool. This ensures that the updated code is loaded and used for processing queued jobs. Requires being in the controlpanel directory and queue workers to be configured.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Dropping a MySQL Database\nDESCRIPTION: This command drops the 'controlpanel' database. This action is destructive and will delete all data within the specified database. It requires MySQL to be installed and the user to have appropriate permissions.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/backups.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p controlpanel -e \"DROP DATABASE controlpanel\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Queue Workers\nDESCRIPTION: Restarts the queue workers using the `queue:restart` artisan command. This ensures that the new code is loaded in and used by the queue workers. It also runs `systemd` (likely a typo and should be `systemctl daemon-reload`).\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan queue:restart\nsudo systemd\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests in UI Mode\nDESCRIPTION: Launches Playwright's UI mode for interactive test exploration and debugging. This command opens a graphical interface allowing users to step through tests, inspect elements, and analyze results in real-time.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Contributing/CTRLPanel Test.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n npx playwright test --ui \n```\n\n----------------------------------------\n\nTITLE: Enable Nginx Configuration\nDESCRIPTION: Creates a symbolic link to enable the Nginx configuration, checks for errors in the configuration, and restarts the Nginx service.  The symlink is not required on CentOS.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# You do not need to symlink this file if you are using CentOS.\nsudo ln -s /etc/nginx/sites-available/controlpanel.conf /etc/nginx/sites-enabled/controlpanel.conf\n\n# Check for nginx errors\nsudo nginx -t\n\n# You need to restart nginx regardless of OS. only do this you haven't received any errors\nsystemctl restart nginx\n```\n\n----------------------------------------\n\nTITLE: Migrate CtrlPanel Database (Bash)\nDESCRIPTION: This command migrates the CtrlPanel database to the latest version using the Artisan command-line tool. Requires PHP and Laravel to be installed and configured correctly.  This command should be executed from the CtrlPanel application directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/backups.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/ctrlpanel\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Install Certbot (SSL)\nDESCRIPTION: Installs Certbot and the Certbot Nginx plugin to automate the process of obtaining and installing SSL certificates from Let's Encrypt. It configures Nginx to use SSL.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n#install certbot for nginx\nsudo apt install -y certbot\nsudo apt install -y python3-certbot-nginx\n#install certificates\nsudo certbot --nginx -d yourdomain.com\n```\n\n----------------------------------------\n\nTITLE: Stop and Disable Queue Worker - Bash\nDESCRIPTION: Stops and disables the queue worker systemd service. This is necessary before renaming or modifying the service file. The exact service name (`ctrlpanel.service` or `controlpanel.service`) must be known.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl stop ctrlpanel.service\nsystemctl disable ctrlpanel.service\n```\n\nLANGUAGE: bash\nCODE:\n```\nsystemctl stop controlpanel.service\nsystemctl disable controlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependencies\nDESCRIPTION: This command installs the project dependencies using Composer, excluding development dependencies and optimizing the autoloader. This step ensures the application has the necessary libraries and components. Composer must be installed and configured correctly.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/updating.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Install Composer Packages\nDESCRIPTION: Navigates to the ControlPanel directory and installs the project's PHP dependencies using Composer.  The `--no-dev` flag excludes development dependencies, and `--optimize-autoloader` optimizes the autoloader for production.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Clearing Config Cache and Restarting Queue Workers - PHP Artisan\nDESCRIPTION: This snippet provides the necessary commands to clear the configuration cache and restart the queue workers in a Laravel application. This is essential after making changes to the email configuration to ensure the changes are applied correctly.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/additional-configuration.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nphp artisan config:clear\n```\n\nLANGUAGE: php\nCODE:\n```\nphp artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies with Yarn\nDESCRIPTION: This command installs the necessary dependencies for the Ctrlpanel.gg documentation website.  It uses Yarn, a package manager, to retrieve and install all the packages defined in the project's package.json file.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/readme.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Run Database Migrations (Bash)\nDESCRIPTION: This command runs the database migrations and seeders to update the database schema and seed initial data. The `--force` option is used to bypass the confirmation prompt in production environments.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Edit Nginx Configuration - Bash\nDESCRIPTION: Opens the Nginx configuration file for editing.  The `root` directive needs to be updated to reflect the new directory name. Requires `nano` or another text editor to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Enable and Start Systemd Service\nDESCRIPTION: Enables and starts the Ctrlpanel queue worker service.  The `enable` command ensures that the service starts on boot, and the `--now` option starts the service immediately.  This ensures that the queue worker is running in the background.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Edit Queue Worker Service File - Bash\nDESCRIPTION: Opens the queue worker service file for editing. The path to the `artisan queue:work` command needs to be updated. Requires `nano` or another text editor to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/systemd/system/ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Removing Nginx Default Configuration\nDESCRIPTION: This command removes the default Nginx site configuration file. This is often done to avoid conflicts and ensure a clean setup for Ctrlpanel. It requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nrm /etc/nginx/sites-enabled/default\n```\n\n----------------------------------------\n\nTITLE: Edit .env File with nano (Bash)\nDESCRIPTION: This command opens the .env file in the nano text editor, allowing you to view and modify the application key. It assumes that nano is installed on the system.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/backups.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnano /var/www/controlpanel/.env\n```\n\n----------------------------------------\n\nTITLE: Pulling New Files (Git)\nDESCRIPTION: This set of commands pulls the latest files from the Git repository, stashing any local changes first, and then setting the correct permissions for the files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo git stash\nsudo git pull\nsudo chmod -R 755 /var/www/ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Opening Apache Configuration File (RHEL/CentOS)\nDESCRIPTION: Opens the Apache configuration file for Ctrlpanel using the nano text editor. This command is intended for RHEL, CentOS, Rocky Linux, or AlmaLinux based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/httpd/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Clearing Template Cache\nDESCRIPTION: Clears the compiled template cache and configuration cache.  These commands ensure that the application uses the latest versions of the templates and configuration files. Uses `artisan view:clear` and `artisan config:clear` commands.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan view:clear\nsudo php artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Stopping Ctrlpanel Services (Bash)\nDESCRIPTION: This snippet stops the Ctrlpanel application using Artisan and the systemd service. It navigates to the application directory, brings the application down, and stops the associated systemd service to prepare for uninstallation.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstallation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n\nsudo systemctl stop controlpanel\n```\n\n----------------------------------------\n\nTITLE: Removing default CSS import in Blade template\nDESCRIPTION: This Blade directive removes the default CSS import, typically compiled with Vite. It ensures that only the custom CSS is loaded when the theme is active.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/themes.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@vite('themes/default/sass/app.scss')\n```\n\n----------------------------------------\n\nTITLE: Stop and disable Ctrlpanel dashboard\nDESCRIPTION: These commands stop the Ctrlpanel dashboard from running and disable it from starting automatically on boot. It navigates to the controlpanel directory, puts the application in maintenance mode, and then stops the systemd service.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstalling.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\nsudo php artisan down\n\nsudo systemctl stop controlpanel\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel database\nDESCRIPTION: These commands remove the Ctrlpanel database and user from the MySQL server. They drop the database, drop the user, and flush privileges to apply the changes.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstalling.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p -e \"DROP DATABASE controlpanel;\"\nsudo mysql -u root -p -e \"DROP USER 'controlpaneluser'@'127.0.0.1';\"\nsudo mysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n----------------------------------------\n\nTITLE: Update Dependencies (Composer)\nDESCRIPTION: This command updates the application's PHP dependencies using Composer. The `--no-dev` flag excludes development dependencies, and `--optimize-autoloader` optimizes the autoloader for performance.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/updating.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Update User Privileges - SQL\nDESCRIPTION: Updates user privileges in MySQL.  This ensures the new user has the necessary permissions on the new database. Requires the MySQL client to be installed.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nGRANT ALL PRIVILEGES ON ctrlpanel.* TO 'ctrlpaneluser'@'127.0.0.1';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n----------------------------------------\n\nTITLE: Playwright Codegen Command\nDESCRIPTION: Invokes Playwright's code generation tool. This tool automatically generates Playwright test code by recording user interactions in a browser, simplifying the process of creating new tests.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Contributing/CTRLPanel Test.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx playwright codegen\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependencies\nDESCRIPTION: Installs the application's dependencies using Composer.  The command includes flags to skip development dependencies and optimize the autoloader.  It assumes composer is configured to use the correct PHP version.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo composer install --no-dev --optimize-autoloader\n```\n\n----------------------------------------\n\nTITLE: Removing Extra Dependency (Bash)\nDESCRIPTION: This snippet removes the `php8.1-intl` dependency, which might be an extra dependency installed for Ctrlpanel. It uses the `apt remove` command to uninstall the specified package.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstallation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove php8.1-intl\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis on Boot (Bash)\nDESCRIPTION: This snippet demonstrates enabling and starting the Redis server on boot using systemctl. This ensures that Redis is automatically started whenever the system restarts. Requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now redis-server\n```\n\n----------------------------------------\n\nTITLE: Disable Maintenance Mode using Artisan\nDESCRIPTION: This command takes the application out of maintenance mode, allowing users to access it again. It uses the `artisan up` command within the Control Panel's directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan up\n```\n\n----------------------------------------\n\nTITLE: Open Nginx Configuration File (Bash)\nDESCRIPTION: This command opens the Nginx configuration file for the CtrlPanel in the nano text editor. It's used to modify the PHP-FPM socket version.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Installing Extra PHP Dependencies (Bash)\nDESCRIPTION: This snippet demonstrates installing extra PHP dependencies required by the dashboard. This is used for handling currency. Requires specifying the appropriate PHP version and root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/getting-started.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\napt -y install php8.3-{intl,redis}\n```\n\n----------------------------------------\n\nTITLE: Install Certbot for SSL (Nginx)\nDESCRIPTION: These commands update the package list and install Certbot and its Nginx plugin, enabling automatic SSL certificate generation and configuration for Nginx.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install certbot\nsudo apt install python3-certbot-nginx\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Extra Dependency (Bash)\nDESCRIPTION: This snippet removes the `php8.0-intl` dependency using apt. It requires the correct PHP version to be specified. Use `php -v` to determine the correct version if necessary.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Guides/uninstallation.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove php8.0-intl\n```\n\n----------------------------------------\n\nTITLE: Update Database using Artisan\nDESCRIPTION: This command runs database migrations and seeds the database with initial data. The `--force` flag bypasses confirmation prompts, allowing the command to run non-interactively.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/updating.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Import Custom CSS in Blade\nDESCRIPTION: This snippet shows how to include your custom CSS file into your blade files.  It assumes you have created an `app.css` file in your theme's directory and allows you to override the default styles.  Remember to replace `<YourThemeName>` with the actual name of your theme.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Guides/themes.md#_snippet_1\n\nLANGUAGE: blade\nCODE:\n```\n<link rel=\"stylesheet\" href=\"{{ asset('themes/<YourThemeName>/app.css') }}\">\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel files\nDESCRIPTION: This command removes all files and directories associated with Ctrlpanel from the file system using the `rm -rf` command. It recursively deletes the `/var/www/controlpanel` directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstalling.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Remove Extra Dependency (Bash)\nDESCRIPTION: This snippet removes an extra PHP dependency. It uses `apt remove` to uninstall the `php8.0-intl` package. The user should use the correct PHP version.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Guides/uninstallation.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove php8.0-intl\n```\n\n----------------------------------------\n\nTITLE: Enter MySQL Shell - Bash\nDESCRIPTION: Enters the MySQL shell as the root user. This is required to perform database operations.  Requires the MySQL client to be installed and the root password to be known.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmysql -u root -p\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration\nDESCRIPTION: Adds a cron job that runs the `schedule:run` Artisan command every minute. This command processes scheduled tasks for the dashboard.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Creating First Admin User\nDESCRIPTION: This bash script creates the first administrator user using an artisan command. The script prompts for the Pterodactyl user ID and password for the new administrator.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ns:user:create\n```\n\n----------------------------------------\n\nTITLE: Install Extra PHP Dependency\nDESCRIPTION: Installs the php-intl extension, which is used for handling currency-related tasks within the dashboard. The correct PHP version must be selected.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.8/Installation/getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt -y install php8.0-intl\n```\n\n----------------------------------------\n\nTITLE: Disabling Maintenance Mode\nDESCRIPTION: Disables maintenance mode for the Control Panel application.  This allows users to access the application again after the update process is complete. Uses the `artisan up` command.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan up\n```\n\n----------------------------------------\n\nTITLE: Update PHP Alternatives (Bash)\nDESCRIPTION: This command updates the default PHP version used by the `php` command. It sets the system to use PHP 8.3.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nupdate-alternatives --set php /usr/bin/php8.3\n```\n\n----------------------------------------\n\nTITLE: Open Nginx Configuration (RHEL/CentOS/Rocky/Alma)\nDESCRIPTION: This command opens the Nginx configuration file for Ctrlpanel on RHEL, CentOS, Rocky Linux, or AlmaLinux based systems using the nano editor.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/conf.d/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Opening Nginx Configuration File (Debian/Ubuntu)\nDESCRIPTION: Opens the Nginx configuration file for Ctrlpanel using the nano text editor. This command is intended for Debian/Ubuntu based systems.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/getting-started.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Download Files\nDESCRIPTION: Creates the directory `/var/www/controlpanel` and navigates into it. Then it clones the ControlPanel dashboard repository from GitHub into the created directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/getting-started.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/www/controlpanel && cd /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Removing Vendor Directory\nDESCRIPTION: Removes the old vendor directory before updating dependencies.  This ensures a clean installation of the new dependencies.  The `rm -rf` command removes the directory recursively and forcefully.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Installation/updating.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/controlpanel/vendor\n```\n\n----------------------------------------\n\nTITLE: Install PHP Redis Extension (Bash)\nDESCRIPTION: This command installs the php-redis extension for PHP 8.3, which is required for Redis functionality within the CtrlPanel.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\napt install php8.3-redis\n```\n\n----------------------------------------\n\nTITLE: Clearing Compiled Template Cache (Artisan)\nDESCRIPTION: These commands clear the compiled view and configuration caches. This ensures that the application uses the latest templates and configuration files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan view:clear\nsudo php artisan config:clear\n```\n\n----------------------------------------\n\nTITLE: Remove extra dependency (php-intl)\nDESCRIPTION: This command removes the php-intl extension. The user should replace '8.3' with the correct PHP version installed on the system.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstalling.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt remove php8.3-intl\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests via CLI\nDESCRIPTION: Executes Playwright tests from the command line. This command runs all tests defined in the project, providing a summary of the results in the console.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Contributing/CTRLPanel Test.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n npx playwright test \n```\n\n----------------------------------------\n\nTITLE: Adding Discord Bot URL\nDESCRIPTION: Shows the format of the URL used to add a Discord bot to a server, requiring replacement of `<CLIENT_ID_HERE>` with the bot's actual client ID.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/additional-configuration.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://discord.com/api/oauth2/authorize?client_id=<CLIENT_ID_HERE>&permissions=8&scope=bot\n```\n\n----------------------------------------\n\nTITLE: Updating the Database (Artisan)\nDESCRIPTION: This command runs the database migrations and seeders, updating the database schema and populating it with initial data. The `--force` flag allows the migrations to run in production.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0.1/Installation/updating.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan migrate --seed --force\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Endpoint URL\nDESCRIPTION: The URL format to which Stripe will send webhook events. `<your.ctrlpanel.gg>` needs to be replaced with the actual domain of the Ctrlpanel instance.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/additional-configuration.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttps://<your.ctrlpanel.gg>/payment/StripeWebhooks\n```\n\n----------------------------------------\n\nTITLE: Remove default CSS import\nDESCRIPTION: This code snippet shows the removal of the default CSS import from a Blade template. This is done to replace the default styling with custom CSS for the theme.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/themes.md#_snippet_2\n\nLANGUAGE: blade\nCODE:\n```\n@vite('themes/default/sass/app.scss')\n```\n\n----------------------------------------\n\nTITLE: Disable Maintenance Mode (Bash)\nDESCRIPTION: This command disables maintenance mode, making the application available to users again after the update.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Installation/updating.md#_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nsudo php artisan up\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel Database & User - Bash\nDESCRIPTION: This snippet removes the Ctrlpanel database and user from the MySQL server.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/uninstallation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo mysql -u root -p -e \"DROP DATABASE ctrlpanel;\"\nsudo mysql -u root -p -e \"DROP USER 'ctrlpaneluser'@'127.0.0.1';\"\nsudo mysql -u root -p -e \"FLUSH PRIVILEGES;\"\n```\n\n----------------------------------------\n\nTITLE: Start Local Development Server\nDESCRIPTION: This command starts a local development server for the Ctrlpanel.gg documentation website. It utilizes the Docusaurus framework to automatically refresh the browser window whenever changes are made to the code, facilitating rapid development and testing.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/readme.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Open Nginx Configuration (Debian/Ubuntu)\nDESCRIPTION: This command opens the Nginx configuration file for Ctrlpanel on Debian/Ubuntu based systems using the nano editor.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnano /etc/nginx/sites-available/ctrlpanel.conf\n```\n\n----------------------------------------\n\nTITLE: Navigate to CP.GG Installation with cd command\nDESCRIPTION: This command navigates to the Controlpanel.GG installation directory in the terminal. Replace `/var/www/controlpanel` with the actual installation path.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Packages/general-info.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /var/www/controlpanel\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel Cronjob Entry\nDESCRIPTION: This command shows how to remove the cronjob entry from the crontab file using `crontab -e`.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/uninstalling.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /var/www/controlpanel/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Creating a Theme using Artisan command (PHP)\nDESCRIPTION: This command uses Laravel's Artisan CLI to create a new theme. The command will prompt the user for necessary information and set up a basic theme structure in the /themes directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Guides/themes.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nphp artisan make:theme\n```\n\n----------------------------------------\n\nTITLE: Remove Default Nginx Configuration\nDESCRIPTION: This command removes the default Nginx configuration file, preventing conflicts with the Ctrlpanel configuration.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9.1/Installation/getting-started.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm /etc/nginx/sites-enabled/default\n```\n\n----------------------------------------\n\nTITLE: Create a new theme\nDESCRIPTION: This command uses Laravel Artisan to create a basic theme structure. It prompts the user for basic theme information and sets up a starting point for theme development using laravel-themer.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-0.9/Guides/themes.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp artisan make:theme\n```\n\n----------------------------------------\n\nTITLE: Remove Ctrlpanel Files - Bash\nDESCRIPTION: This snippet removes the Ctrlpanel files from the specified directory.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/versioned_docs/version-1.0/Guides/uninstallation.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo rm -rf /var/www/ctrlpanel\n```\n\n----------------------------------------\n\nTITLE: Enabling Systemd Service\nDESCRIPTION: This bash script enables and starts the Ctrlpanel queue worker systemd service.  Enabling the service ensures that it starts automatically on boot, while starting it immediately activates the queue worker. This requires root privileges.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Installation/getting-started.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl enable --now ctrlpanel.service\n```\n\n----------------------------------------\n\nTITLE: Removing Webconfig and SSL Certificates (Bash)\nDESCRIPTION: This snippet removes the webserver configuration files (both Nginx and Apache2) and reloads the respective webservers. It also removes the SSL certificates associated with the domain. It requires root privileges to modify system configuration files.\nSOURCE: https://github.com/ctrlpanel-gg/docs/blob/main/docs/Guides/uninstallation.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# NGINX\nsudo unlink /etc/nginx/sites-enabled/controlpanel.conf\nsudo rm /etc/nginx/sites-available/controlpanel.conf\nsudo systemctl reload nginx\n# Apache2\nsudo a2dissite controlpanel.conf\nsudo rm /etc/apache2/sites-available/controlpanel.conf\nsudo systemctl reload apache2\n\nsudo certbot delete --cert-name <Your Domain>\n```"
  }
]