[
  {
    "owner": "raxjs",
    "repo": "rax-components",
    "content": "TITLE: TextInput Event Handling and Value Update Rax JSX\nDESCRIPTION: This snippet demonstrates TextInput event handling (onFocus, onBlur, onChange, onInput) and dynamic value updates. It updates the state based on different events and displays the current and previous event texts.  It showcases how to capture and respond to user interactions with the TextInput component.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-textinput/demo/index.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass App extends Component {\n  state = {\n    value: 'I am value',\n    curText: '<No Event>',\n    prevText: '<No Event>',\n    prev2Text: '<No Event>',\n    prev3Text: '<No Event>'\n  };\n\n  inputRef = createRef();\n\n  updateText = text => {\n    this.setState(state => {\n      return {\n        curText: text,\n        prevText: state.curText,\n        prev2Text: state.prevText,\n        prev3Text: state.prev2Text\n      };\n    });\n  };\n\n  render() {\n    // define delimiter\n    return (\n      <View style={styles.root}>\n        <View style={styles.container}>\n          <TextInput\n            autoCapitalize=\"none\"\n            placeholder=\"Enter text to see events\"\n            placeholderColor=\"#6FA331\"\n            autoCorrect={false}\n            onFocus={() => this.updateText('onFocus')}\n            onBlur={() => this.updateText('onBlur')}\n            onChange={event => {\n              this.updateText('onChange text: ' + event.nativeEvent.text);\n            }}\n            onInput={event =>\n              this.updateText('onInput text: ' + event.nativeEvent.text)\n            }\n            style={styles.default}\n          />\n\n          <Text style={styles.eventLabel}>\n            {this.state.curText}\n            {'\\n'}\n            (prev: {this.state.prevText}){'\\n'}\n            (prev2: {this.state.prev2Text}){'\\n'}\n            (prev3: {this.state.prev3Text})\n          </Text>\n        </View>\n\n        <View style={styles.container}>\n          <TextInput\n            placeholder=\"Disabled input\"\n            style={styles.default}\n            editable={false}\n          />\n        </View>\n\n        <View style={styles.container}>\n          <TextInput\n            placeholder=\"Enter text to see events\"\n            placeholderColor=\"#00E8C6\"\n            value={this.state.value}\n            ref={this.inputRef}\n            style={{\n              width: 600,\n              marginTop: 20,\n              borderWidth: '2px',\n              borderColor: '#dddddd',\n              borderStyle: 'solid'\n            }}\n            onChangeText={text => {\n              this.setState({\n                value: text\n              });\n            }}\n          />\n          <View style={{ flexDirection: 'row', justifyContent: 'center', marginTop: 20, }}>\n            <View\n              style={styles.button}\n              onFocus={e => {\n                this.setState({\n                  value: e.nativeEvent.text\n                });\n              }}\n              onClick={() => {\n                this.setState({\n                  value: 'I am value'\n                });\n              }}\n            >\n              <Text style={styles.buttonText}>Reset</Text>\n            </View>\n            <View\n              style={styles.button}\n              onFocus={e => {\n                this.setState({\n                  value: e.nativeEvent.text\n                });\n              }}\n              onClick={() => {\n                this.inputRef.current.clear();\n              }}\n            >\n              <Text style={styles.buttonText}>Clear</Text>\n            </View>\n          </View>\n\n        </View>\n        <TextAreaDemo />\n      </View>\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring swiper.js Plugins\nDESCRIPTION: This example shows how to configure plugins such as Pagination for the swiper.js instance used by rax-swiper on the web.  It involves importing SwiperCore and desired plugins, then using the SwiperCore.use() method to register the plugins. This allows for extending the capabilities of the Swiper component with features like zoom and lazy loading.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-swiper/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Swiper as SwiperCore, Pagination } from 'swiper';\nimport { Swiper, SwiperSlide } from 'rax-swiper';\n\nSwiperCore.use(Pagination);\n\n// 如果需要配置多个插件\n// 可以传入一个数组\nSwiperCore.use([...]);\n```\n\n----------------------------------------\n\nTITLE: Rax Parallax Basic Usage\nDESCRIPTION: This code snippet demonstrates a basic implementation of the `Parallax` component in a Rax application. It includes importing necessary Rax components, defining data for a RecyclerView, and using `Parallax` to create a parallax effect on an image as the user scrolls through the `RecyclerView`. The `transform` prop of the `Parallax` component is used to define the translation and scale transformations.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-parallax/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, Component, render, createRef } from 'rax';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport RecyclerView from 'rax-recyclerview';\nimport Image from 'rax-image';\nimport DU from 'driver-universal';\nimport Parallax from '../src/index';\n\nlet listData = [\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n];\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      data: listData\n    };\n    this.bindingScroller = createRef();\n  }\n\n  listLoading = () => {\n    if (this.state.index < 4) {\n      return (\n        <View style={styles.loading}>\n          <Text style={styles.text}>loading...</Text>\n        </View>\n      );\n    } else {\n      return null;\n    }\n  }\n  listItem = (item, index) => {\n    if (index % 2 == 0) {\n      return (\n        <RecyclerView.Cell>\n          <View style={styles.item1}>\n            <Text style={styles.text}>{item.name1}</Text>\n          </View>\n        </RecyclerView.Cell>\n\n      );\n    } else {\n      return (\n        <RecyclerView.Cell>\n          <View style={styles.item2}>\n            <Text style={styles.text}>{item.name1}</Text>\n          </View>\n        </RecyclerView.Cell>\n\n      );\n    }\n  }\n  handleLoadMore = () => {\n    setTimeout(() => {\n      this.state.index++;\n      if (this.state.index < 5) {\n        this.state.data.push(\n          { name1: 'loadmore 2' },\n          { name1: 'loadmore 3' },\n          { name1: 'loadmore 4' },\n          { name1: 'loadmore 5' },\n          { name1: 'loadmore 2' },\n          { name1: 'loadmore 3' },\n          { name1: 'loadmore 4' },\n          { name1: 'loadmore 5' }\n        );\n      }\n      this.setState(this.state);\n    }, 1000);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        bindingScroller: this.bindingScroller\n      });\n    }, 100);\n  }\n\n  render() {\n    let dataSource = this.state.data;\n    return (\n      <View style={styles.container}>\n        <Parallax\n          bindingScroller={this.bindingScroller}\n          transform={[\n            {\n              type: 'translate',\n              in: [0, 660],\n              out: [0, 0, 0, -660] // [x1,y1,x2,y2]\n            },\n            {\n              type: 'scale',\n              in: [-150, 0],\n              out: [1.3, 1.3, 1, 1] // [x1,y1,x2,y2]\n            }\n          ]}>\n          <Image style={{ width: 750, height: 576 }}\n            source={{ uri: '//gw.alicdn.com/tfs/TB12DNfXMmTBuNjy1XbXXaMrVXa-750-576.png' }} />\n        </Parallax>\n        <RecyclerView\n          ref={this.bindingScroller}\n          style={styles.list}\n          onEndReached={this.handleLoadMore}\n        >\n          <RecyclerView.Cell>\n            <View style={styles.title}>\n              <Text style={styles.text}>header</Text>\n            </View>\n          </RecyclerView.Cell>\n          {dataSource.map(this.listItem)}\n          <RecyclerView.Cell>\n            {this.listLoading()}\n          </RecyclerView.Cell>\n        </RecyclerView>\n      </View>\n    );\n  }\n};\n\nconst styles = {\n  container: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  },\n  title: {\n    margin: 50,\n    height: 300\n  },\n  text: {\n    fontSize: 28,\n    color: '#fff',\n    padding: 40\n  },\n  list: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  item1: {\n    height: 110,\n    backgroundColor: '#909090',\n    marginBottom: 3\n  },\n  item2: {\n    height: 110,\n    backgroundColor: '#e0e0e0',\n    marginBottom: 3\n  },\n  loading: {\n    padding: 50,\n    textAlign: 'center',\n  }\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Basic Waterfall Implementation in Rax\nDESCRIPTION: This code snippet demonstrates the basic implementation of the Waterfall component in a Rax application. It includes features such as pull-to-refresh, header/footer rendering, dynamic item heights, and loading more data on reaching the end of the list. The code defines a sample data source and a component that renders the Waterfall with specified column width, count, and gaps.  The `renderItem` function defines how individual items are rendered within the Waterfall layout.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-waterfall/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component, render, createRef} from 'rax';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport DU from 'driver-universal';\nimport RefreshControl from 'rax-refreshcontrol';\nimport Waterfall from '../src/index';\n\nlet dataSource = [\n  { height: 550, item: {} },\n  { height: 624, item: {} },\n  { height: 708, item: {} },\n  { height: 600, item: {} },\n  { height: 300, item: {} },\n  { height: 100, item: {} },\n  { height: 400, item: {} },\n  { height: 550, item: {} },\n  { height: 624, item: {} },\n  { height: 708, item: {} },\n  { height: 600, item: {} },\n  { height: 300, item: {} },\n  { height: 100, item: {} },\n  { height: 400, item: {} }\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.waterfallRef = createRef();\n  }\n \n  state = {\n    refreshing: false,\n    dataSource: dataSource\n  }\n\n  handleRefresh = () => {\n    if (this.state.refreshing) {\n      return;\n    }\n\n    this.setState({\n      refreshing: true,\n      dataSource: []\n    });\n\n    setTimeout(() => {\n      this.setState({\n        refreshing: false,\n        dataSource: dataSource\n      });\n    }, 500);\n  }\n\n  loadMore = () => {\n    setTimeout(() => {\n      this.setState({\n        dataSource: this.state.dataSource.concat(dataSource)\n      });\n    }, 500);\n  }\n\n  scrollToTop = () => {\n    this.waterfallRef.current.scrollTo({\n      x: 0,\n      y: 0\n    });\n  }\n\n  render() {\n    return (<View style={{position: 'absolute', top: 0, bottom: 0, left: 0, right: 0}}>\n      <View>first module</View>\n      <Waterfall\n        columnWidth={150}\n        columnCount={4}\n        columnGap={50}\n        leftGap={20}\n        rightGap={20}\n        ref={this.waterfallRef}\n        dataSource={this.state.dataSource}\n        renderHeader={() => {\n          return [\n            <RefreshControl\n              key=\"0\"\n              refreshing={this.state.refreshing}\n              onRefresh={this.handleRefresh}>\n              <Text>下拉刷新</Text>\n            </RefreshControl>,\n            <View key=\"1\" style={{width: 750, height: 100, backgroundColor: 'yellow', marginBottom: 20}}><Text>header1</Text></View>,\n            <View key=\"2\" style={{width: 750, height: 100, backgroundColor: 'green', marginBottom: 20}}><Text>header2</Text></View>,\n          ];\n        }}\n        renderFooter={() => {\n          return <View key=\"3\" style={{width: 750, height: 300, backgroundColor: 'blue', marginTop: 20}}>footer1</View>;\n        }}\n        renderItem={(item, index) => {\n          return (<View style={{height: item.height, backgroundColor: 'red', marginBottom: 20}} key={index}>\n            <Text>{index}</Text>\n            {/* {index} */}\n          </View>);\n        }}\n        onEndReached={this.loadMore} />\n        <View onClick={this.scrollToTop} style={{position: 'absolute', zIndex: 100, bottom: 100, right: 10, backgroundColor: 'yellow'}}><Text>scroll to top</Text></View>\n    </View>);\n  }\n}\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: RefreshControl Component Example in JSX\nDESCRIPTION: This example demonstrates how to use the RefreshControl component with a RecyclerView to implement pull-to-refresh functionality.  It shows how to manage the refreshing state, handle the refresh event, and update the list data.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-refreshcontrol/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component, render} from 'rax';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport DU from 'driver-universal';\nimport RecyclerView from 'rax-recyclerview';\nimport RefreshControl from 'rax-refreshcontrol';\n\nlet arrayFrom = function(arrayLike /*, mapFn, thisArg */) {\n  if (arrayLike == null) {\n    throw new TypeError('Object is null or undefined');\n  }\n\n  // Optional args.\n  var mapFn = arguments[1];\n  var thisArg = arguments[2];\n\n  var C = this;\n  var items = Object(arrayLike);\n  var symbolIterator = typeof Symbol === 'function'\n    ? Symbol.iterator\n    : '@@iterator';\n  var mapping = typeof mapFn === 'function';\n  var usingIterator = typeof items[symbolIterator] === 'function';\n  var key = 0;\n  var ret;\n  var value;\n\n  if (usingIterator) {\n    ret = typeof C === 'function'\n      ? new C()\n      : [];\n    var it = items[symbolIterator]();\n    var next;\n\n    while (!(next = it.next()).done) {\n      value = next.value;\n\n      if (mapping) {\n        value = mapFn.call(thisArg, value, key);\n      }\n\n      ret[key] = value;\n      key += 1;\n    }\n\n    ret.length = key;\n    return ret;\n  }\n\n  var len = items.length;\n  if (isNaN(len) || len < 0) {\n    len = 0;\n  }\n\n  ret = typeof C === 'function'\n    ? new C(len)\n    : new Array(len);\n\n  while (key < len) {\n    value = items[key];\n\n    if (mapping) {\n      value = mapFn.call(thisArg, value, key);\n    }\n\n    ret[key] = value;\n\n    key += 1;\n  }\n\n  ret.length = key;\n  return ret;\n};\n\n\nclass Row extends Component {\n  handleClick = (e) => {\n    this.props.onClick(this.props.data);\n  };\n\n  render() {\n    return (\n     <View onPress={this.handleClick} >\n        <View style={styles.row}>\n          <Text style={styles.text}>\n            {this.props.data.text + ' (' + this.props.data.clicks + ' clicks)'}\n          </Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nclass RefreshControlDemo extends Component {\n  state = {\n    isRefreshing: false,\n    loaded: 0,\n    refreshText: '↓ Pull To Refresh',\n    rowData: arrayFrom(new Array(20)).map(\n      (val, i) => ({text: 'Initial row ' + i, clicks: 0})),\n  };\n\n  handleClick = (row) => {\n    row.clicks++;\n    this.setState({\n      rowData: this.state.rowData,\n    });\n  };\n\n  handleRefresh = (e) => {\n    this.setState({\n      isRefreshing: true,\n      refreshText: 'Refreshing',\n    });\n    setTimeout(() => {\n      // prepend 10 items\n      const rowData = arrayFrom(new Array(10))\n      .map((val, i) => ({\n        text: 'Loaded row ' + (+this.state.loaded + i),\n        clicks: 0,\n      }))\n      .concat(this.state.rowData);\n\n      this.setState({\n        loaded: this.state.loaded + 10,\n        isRefreshing: false,\n        rowData: rowData,\n        refreshText: '↓ Pull To Refresh',\n      });\n\n    }, 1000);\n  };\n\n  render() {\n    const rows = this.state.rowData.map((row, ii) => {\n      return (<RecyclerView.Cell>\n        <Row key={ii} data={row} onClick={this.handleClick}/>\n      </RecyclerView.Cell>);\n    });\n    return (\n      <View style={styles.container}>\n        <RecyclerView\n          refreshControl={null}>\n          <RefreshControl\n            style={styles.refreshView}\n            refreshing={this.state.isRefreshing}\n            onRefresh={this.handleRefresh}\n          >\n            <Text>{this.state.refreshText}</Text>\n          </RefreshControl>\n          {rows}\n        </RecyclerView>\n      </View>\n   );\n  }\n}\n\nconst styles = {\n  container: {\n    padding: 20,\n    borderStyle: 'solid',\n    borderColor: '#dddddd',\n    borderWidth: 1,\n    marginLeft: 20,\n    marginRight: 20,\n    marginBottom: 10,\n    flex: 1\n  },\n  button: {\n    margin: 7,\n    padding: 5,\n    alignItems: 'center',\n    backgroundColor: '#eaeaea',\n    borderRadius: 3,\n  },\n  box: {\n    width: 64,\n    height: 64,\n  },\n  eventLogBox: {\n    padding: 10,\n    margin: 10,\n    height: 80,\n    borderWidth: 1,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n  },\n  row: {\n    borderColor: 'grey',\n    borderWidth: 1,\n    padding: 20,\n    margin: 5,\n  },\n  text: {\n    alignSelf: 'center',\n    color: 'black',\n  },\n  refreshView: {\n    height: 80,\n    width: 750,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  refreshArrow: {\n    fontSize: 30,\n    color: '#45b5f0'\n  },\n};\n\nrender(<RefreshControlDemo/>, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Basic Rax Slider Implementation\nDESCRIPTION: This code snippet demonstrates how to use the `Slider` component in a Rax application. It initializes a state with image URLs, renders the `Slider` with various props like `width`, `height`, `autoPlay`, `index`, `loop`, `speed`, `showsPagination`, and `autoplayInterval`.  It also implements `onChange` and navigation functions using the slider ref.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-slider/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, Component, render, createRef } from 'rax';\nimport View from 'rax-view';\nimport Image from 'rax-image';\nimport Slider from '../src/index';\nimport DU from 'driver-universal';\nimport './index.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = createRef();\n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: [\n        // 红蓝灰\n        '//gw.alicdn.com/tfs/TB19NbqKFXXXXXLXVXXXXXXXXXX-750-500.png',\n        '//gw.alicdn.com/tfs/TB1tWYBKFXXXXatXpXXXXXXXXXX-750-500.png',\n        '//gw.alicdn.com/tfs/TB1SX_vKFXXXXbyXFXXXXXXXXXX-750-500.png'\n      ]\n    });\n  }\n\n  onchange = (e) => {\n    console.log('change', e);\n  }\n\n  onClick = (direction) => {\n    if (direction === 'go(0)') {\n      this.inputRef.current.slideTo(0);\n    } else {\n      this.inputRef.current.slideTo(this.inputRef.current.index + (direction === 'prev' ? -1 : 1));\n    }\n  }\n\n  render() {\n    return (\n      <View>\n        <Slider\n          className=\"slider\"\n          width={750}\n          height={500}\n          autoPlay={true}\n          index={2}\n          loop={true}\n          speed={300}\n          cssEase=\"linear\"\n          showsPagination={true}\n          paginationStyle={{\n            position: 'absolute',\n            width: '750rpx',\n            height: '40rpx',\n            bottom: '20rpx',\n            left: 0,\n            itemColor: 'rgba(255, 255, 255, 0.5)',\n            itemSelectedColor: 'rgb(255, 80, 0)',\n            itemSize: '16rpx'\n          }}\n          autoplayInterval={2000}\n          onChange={this.onchange}\n          ref={this.inputRef}\n        >\n          {this.state.data.map((item, index) => (\n            <View key={item} className=\"itemWrap\">\n              <p className=\"text\">index: {index}</p>\n              <Image className=\"image\" source={{ uri: item }} />\n            </View>))}\n        </Slider>\n        <View style={{\n          flexDirection: 'row',\n          justifyContent: 'space-around',\n        }}>\n          <View onClick={this.onClick.bind(this, 'prev')}>prev</View>\n          <View onClick={this.onClick.bind(this, 'next')}>next</View>\n          <View onClick={this.onClick.bind(this, 'go(0)')}>go(0)</View>\n        </View>\n      </View>\n    );\n  }\n}\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Multiline TextInput with Dynamic Hashtags in Rax\nDESCRIPTION: This component demonstrates a multiline TextInput that dynamically renders hashtags extracted from the input text. It utilizes regular expressions to split the input string into words and identify hashtags, which are then rendered as Text components with specific styles. The onChangeText event updates the component's state, causing the hashtags to re-render.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-textinput/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nclass TextAreaDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello #World , Hello #Rax , Hello #天天好心情\"\n    };\n  }\n\n  render() {\n    let delimiter = /\\s+/;\n    // split string\n    let _text = this.state.text;\n    let token,\n      index,\n      parts = [];\n    while (_text) {\n      delimiter.lastIndex = 0;\n      token = delimiter.exec(_text);\n      if (token === null) {\n        break;\n      }\n      index = token.index;\n      if (token[0].length === 0) {\n        index = 1;\n      }\n      parts.push(_text.substr(0, index));\n      parts.push(token[0]);\n      index = index + token[0].length;\n      _text = _text.slice(index);\n    }\n    parts.push(_text);\n\n    let hashtags = [];\n    parts.forEach(text => {\n      if (/^#/.test(text)) {\n        hashtags.push(\n          <Text key={text} style={styles.hashtag}>\n            {text}\n          </Text>\n        );\n      }\n    });\n\n    return (\n      <View style={styles.container}>\n        <TextInput\n          multiline={true}\n          numberOfLines={3}\n          style={styles.multiline}\n          value={this.state.text}\n          onChangeText={text => {\n            this.setState({ text });\n          }}\n        />\n        <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>\n          {hashtags}\n        </View>\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rax Video Component Usage\nDESCRIPTION: This code snippet demonstrates how to use the Rax Video component in a Rax application. It includes setting the video source, width, height, enabling autoplay, and controlling playback status using the `playControl` prop. It also shows how to switch play status using the useState hook and a clickable view.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-video/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, render, useState } from 'rax';\nimport Video from '../src/index';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport DU from 'driver-universal';\n\nconst App = () => {\n  const [ playStatus, setPlayStatus ] = useState('play');\n  return <View style={{ alignItems: 'center' }}>\n    <Video style={{ width: 750, height: 400 }} playControl={playStatus} autoPlay controls={false} src=\"https://cloud.video.taobao.com/play/u/2780279213/p/1/e/6/t/1/d/ld/36255062.mp4\" />\n    <View\n      onClick={() => {\n        if (playStatus === 'play') {\n          setPlayStatus('pause');\n        } else {\n          setPlayStatus('play');\n        }\n      }}\n      style={{\n        width: 300,\n        height: 100,\n        borderRadius: 50,\n        borderWidth: 1,\n        borderStyle: 'solid',\n        borderColor: 'red',\n        alignItems: 'center',\n        justifyContent: 'center',\n        marginTop: 20,\n      }}\n    >\n      <Text>Switch PlayStatus</Text>\n    </View>\n  </View>;\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Rax TextInput Controlled Component Example\nDESCRIPTION: This snippet demonstrates the usage of a controlled TextInput component in Rax.  The component's value is bound to the state. The `onChangeText` event handler updates the state, which in turn updates the TextInput's value. The `onFocus` event handler updates the value as well, and an `onClick` event on a wrapping View is used to reset the value.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-textinput/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<View style={styles.container}>\n  <TextInput\n    placeholder=\"Enter text to see events\"\n    value={this.state.value}\n    ref={this.inputRef}\n    style={{\n      width: '600rpx',\n      marginTop: '20rpx',\n      borderWidth: \"2rpx\",\n      borderColor: \"#dddddd\",\n      borderStyle: \"solid\"\n    }}\n    onChangeText={text => {\n      this.setState({\n        value: text\n      });\n    }}\n  />\n\n  <View\n    style={{\n      marginTop: '20rpx'\n    }}\n    onFocus={e => {\n      this.setState({\n        value: e.nativeEvent.text\n      });\n    }}\n    onClick={() => {\n      this.setState({\n        value: \"I am value\"\n      });\n    }}\n  >\n    <Text>Reset</Text>\n  </View>\n</View>\n```\n\n----------------------------------------\n\nTITLE: Rax GestureView Component Example\nDESCRIPTION: This example demonstrates how to use the rax-gesture-view component in a Rax application. It imports necessary modules from 'rax' and 'rax-gesture-view', defines a component with handler functions for horizontal and vertical pan gestures and renders the GestureView with specified styles and event handlers. The component is then rendered to the document body.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-gesture-view/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n/** @jsx createElement */\nimport {createElement, Component, render} from 'rax';\nimport GestureView from '../src/index';\nimport View from 'rax-view';\nimport { isWeex } from 'universal-env';\nimport * as DriverDOM from 'driver-dom';\nimport * as DriverWeex from 'driver-weex';\n\nclass App extends Component {\n  onHorizontalPan = (e) => {\n    console.error('onHorizontalPan:' + e.state);\n  }\n\n  onVerticalPan = (e) => {\n    console.error('onVerticalPan:' + e.state);\n  }\n\n  render() {\n    return (<View style={{flex: 1}}>\n      <GestureView style={{width: 300, height: 300, backgroundColor: 'red'}}\n        onVerticalPan={this.onVerticalPan}\n        onHorizontalPan={this.onHorizontalPan}\n      >pan me</GestureView>\n    </View>);\n  }\n}\n\nrender(<App />, document.body, { driver: isWeex ? DriverWeex : DriverDOM });\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Rax Swiper\nDESCRIPTION: This code snippet demonstrates the basic usage of the Rax Swiper component. It imports necessary modules from 'rax' and 'rax-view', and the Swiper and SwiperSlide components from the specified path. The App component configures the Swiper with properties such as autoplay, interval, loop, and custom styles.  It includes event handlers for slide change and swiper initialization. The Swiper component renders multiple SwiperSlide components within it.  A button is included to manually advance slides.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-swiper/demo/basic.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component } from 'rax';\nimport View from 'rax-view';\nimport { Swiper, SwiperSlide } from '../src/index';\n\nlet swiperEle;\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n  }\n\n  onClick = () => {\n    swiperEle.slideNext();\n  }\n\n  render() {\n    return (\n      <View style={{\n        width: '750rpx'\n      }}>\n        <Swiper\n          autoplay={false}\n          interval={2000}\n          loop={true}\n          style={{\n            height: '300rpx',\n            width: '750rpx'\n          }}\n          onSlideChange={() => console.log('slide change')}\n          onSwiper={(swiper) => swiperEle = swiper}\n          pagination={{ clickable: true }}\n          initialSlide={2}\n        >\n          <SwiperSlide key=\"1\">\n            <View style={{height: '300rpx'}}>Slide 1</View>\n          </SwiperSlide>\n          <SwiperSlide key=\"2\">\n            <View style={{height: '300rpx'}}>Slide 2</View>\n          </SwiperSlide>\n          <SwiperSlide key=\"3\">\n            <View style={{height: '300rpx'}}>Slide 3</View>\n          </SwiperSlide>\n          <SwiperSlide key=\"4\">\n            <View style={{height: '300rpx'}}>Slide 4</View>\n          </SwiperSlide>\n        </Swiper>\n        <View onClick={this.onClick}>Click</View>\n      </View>\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GestureView Basic Usage Rax JSX\nDESCRIPTION: Demonstrates the basic implementation of GestureView within a Rax component. It showcases how to import the necessary Rax modules and the GestureView component, implement gesture handler functions (onHorizontalPan, onVerticalPan), and render the GestureView within a Rax view with inline styles and bound gesture handlers. The example renders a simple 'Pan Me' text inside the GestureView.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-gesture-view/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\n/** @jsx createElement */\nimport { createElement, Component, render } from 'rax';\nimport GestureView from '../src/index';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport DriverUniversal from 'driver-universal';\n\nclass App extends Component {\n  onHorizontalPan = (e) => {\n    console.error('onHorizontalPan:' + e.state);\n  }\n\n  onVerticalPan = (e) => {\n    console.error('onVerticalPan:' + e.state);\n  }\n\n  render() {\n    return (<View style={{ flex: 1 }}>\n      <GestureView style={{ width: 300, height: 300, backgroundColor: 'red' }}\n        onVerticalPan={this.onVerticalPan}\n        onHorizontalPan={this.onHorizontalPan}\n      >\n        <Text>Pan Me</Text>\n      </GestureView>\n    </View>);\n  }\n}\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Rax Modal Basic Usage\nDESCRIPTION: This JSX code snippet demonstrates the basic usage of the Rax Modal component. It includes importing necessary modules from 'rax', 'driver-universal', and the Modal component itself. The component manages the visibility of the modal using the useState hook and a useEffect hook to initially set the modal to visible after 2 seconds. It defines event handlers for showing and hiding the modal and uses inline styles for positioning.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-modal/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, render, useState, useEffect } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Modal from '../src/index';\nimport Text from 'rax-text';\nimport View from 'rax-view';\n\nconst Demo = props => {\n  const [visible, setVisible] = useState(false);\n  useEffect(() => {\n    setTimeout(() => {\n      setVisible(true);\n    }, 2000)\n  }, [])\n  return (\n    [\n      <View style={{\n        width: '750rpx',\n        height: '3000rpx'\n      }} onClick={() => setVisible(true)}>\n        <Text>open</Text>\n      </View>,\n      <Modal\n        visible={visible}\n        animation={true}\n        duration={[100, 10000]}\n        onHide={() => {\n          setVisible(false);\n        }}\n        onShow={() => {\n          setVisible(true);\n        }}\n        maskCanBeClick={true}\n        contentStyle={{\n          position: 'absolute',\n          top: '150rpx',\n          width: '400rpx',\n          left: '175rpx'\n        }}\n      >\n        <Text>Modal Content Here</Text>\n      </Modal>\n    ]\n  );\n};\n\nrender(<Demo />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Basic Portal Usage in Rax/React\nDESCRIPTION: This code snippet demonstrates the basic usage of the Portal component within a Rax/React application. It imports necessary modules like `DriverUniversal`, `createElement`, `render`, `Fragment`, `useEffect`, `useState`, `View`, `Text`, and the `Portal` component itself. It sets up two containers (`container1`, `container2`) and a state variable `container` to dynamically switch the target container for the portal. The `Demo` component renders content within the `Portal` and allows switching between the two containers using the `handleChange` function.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-portal/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DriverUniversal from \"driver-universal\";\nimport { createElement, render, Fragment, useEffect, useState } from \"rax\";\nimport View from \"rax-view\";\nimport Text from \"rax-text\";\nimport Portal from \"../src/index\";\n\nconst basicStyle = {\n  display: \"block\",\n  height: \"200rpx\",\n  margin: \"10rpx\",\n};\n\nlet container1 = null;\nlet container2 = null;\n\nconst Demo = (props) => {\n  const [container, setContainer] = useState(null);\n\n  useEffect(() => {\n    container1 = document.getElementById(\"container-1\");\n    container2 = document.getElementById(\"container-2\");\n    setContainer(container1);\n  }, []);\n\n  const handleChange = () => {\n    if (container === container1) {\n      setContainer(container2);\n    } else {\n      setContainer(container1);\n    }\n  };\n\n  return (\n    <Fragment>\n      <View style={{ ...basicStyle, backgroundColor: \"#eee\" }}>\n        <Text>Demo content</Text>\n        <Portal>\n          <View>\n            <Text>Body portal content</Text>\n          </View>\n        </Portal>\n      </View>\n      <View\n        id=\"container-1\"\n        style={{ ...basicStyle, backgroundColor: \"#FFF7F0\" }\n      ></View>\n      <View\n        id=\"container-2\"\n        style={{ ...basicStyle, backgroundColor: \"#F0F7FF\" }\n      ></View>\n      <Portal container={container}>\n        <View>\n          <Text>Portal content</Text>\n          <Text onClick={handleChange}>Click me to change container</Text>\n        </View>\n      </Portal>\n    </Fragment>\n  );\n};\n\nrender(<Demo />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Using rax-barcode component in a Rax application\nDESCRIPTION: This code demonstrates how to use the rax-barcode component within a Rax application. It imports necessary modules from 'rax', 'driver-universal', 'rax-view', and 'rax-barcode'. It then defines a component that renders a View containing a BarCode component. The BarCode component is configured with data and options for customization.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-barcode/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createElement, render, Component } from \"rax\";\nimport DriverUniversal from \"driver-universal\";\nimport View from \"rax-view\";\nimport BarCode from \"rax-barcode\";\n\nclass App extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <View style={{ flex: 1 }}>\n        <BarCode\n          data={\"123456789\"}\n          options={{\n            fillColor: \"red\"\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Rax Waterfall Component with RefreshControl Example\nDESCRIPTION: This code demonstrates a Rax application using the Waterfall component to display a list of items in a dynamic, column-based layout.  It includes features like pull-to-refresh using the RefreshControl component and infinite scrolling. The example shows how to customize the header, footer, and individual item rendering of the Waterfall.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-waterfall/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component, render} from 'rax';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport DU from \"driver-universal\"\nimport RefreshControl from 'rax-refreshcontrol';\nimport Waterfall from 'rax-waterfall';\n\nlet dataSource = [\n  { height: 550, item: {} },\n  { height: 624, item: {} },\n  { height: 708, item: {} },\n  { height: 600, item: {} },\n  { height: 300, item: {} },\n  { height: 100, item: {} },\n  { height: 400, item: {} },\n  { height: 550, item: {} },\n  { height: 624, item: {} },\n  { height: 708, item: {} },\n  { height: 600, item: {} },\n  { height: 300, item: {} },\n  { height: 100, item: {} },\n  { height: 400, item: {} }\n];\n\nclass App extends Component {\n\n  state = {\n    refreshing: false,\n    dataSource: dataSource\n  }\n\n  handleRefresh = () => {\n    if (this.state.refreshing) {\n      return;\n    }\n\n    this.setState({\n      refreshing: true,\n      dataSource: []\n    });\n\n    setTimeout(() => {\n      this.setState({\n        refreshing: false,\n        dataSource: dataSource\n      });\n    }, 500);\n\n  }\n\n  loadMore = () => {\n    setTimeout(() => {\n      this.setState({\n        dataSource: this.state.dataSource.concat(dataSource)\n      });\n    }, 1000);\n  }\n\n\n  render() {\n    return (<View style={{position: 'absolute', top: 0, bottom: 0, left: 0, right: 0}}>\n      <View>first module</View>\n      <Waterfall\n        columnWidth={150}\n        columnCount={4}\n        columnGap={50}\n        dataSource={this.state.dataSource}\n        renderHeader={() => {\n          return [\n            <RefreshControl\n              key=\"0\"\n              refreshing={this.state.refreshing}\n              onRefresh={this.handleRefresh}>\n              <Text>下拉刷新</Text>\n            </RefreshControl>,\n            <View key=\"1\" style={{width: 750, height: 100, backgroundColor: 'yellow', marginBottom: 20}}>header1</View>,\n            <View key=\"2\" style={{width: 750, height: 100, backgroundColor: 'green', marginBottom: 20}}>header2</View>\n          ];\n        }}\n        renderFooter={() => {\n          return <View key=\"3\" style={{width: 750, height: 300, backgroundColor: 'blue', marginTop: 20}}>footer1</View>;\n        }}\n        renderItem={(item, index) => {\n          return (<View style={{height: item.height, backgroundColor: 'red', marginBottom: 20}}>\n          <Text>{index}</Text>\n            {/* {index} */}\n          </View>);\n        }}\n        onEndReached={this.loadMore} />\n    </View>);\n  }\n}\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Rax Countdown Basic Implementation\nDESCRIPTION: This snippet implements a basic countdown timer using the Rax Countdown component.  It defines a parent App component that renders multiple Countdown instances with different timeRemaining values, template strings (tpl), styling (timeStyle, secondStyle, textStyle, timeWrapStyle, timeBackground, timeBackgroundStyle), and an onComplete callback.  The root and container styles are defined for layout. The component is rendered to the document body using the render function with the DU driver.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-countdown/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render, Component } from 'rax';\nimport View from 'rax-view';\nimport Countdown from '../src/index';\nimport DU from 'driver-universal';\n\nclass App extends Component {\n  onComplete() {\n    console.log('countdown complete');\n  }\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={100000000000}\n            tpl={'{d}天{h}时{m}分{s}秒'}\n            onComplete={this.onComplete}\n          />\n        </View>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={100000000}\n            timeStyle={{\n              'color': '#007457',\n              'backgroundColor': 'red',\n              'marginLeft': '2rpx',\n              'marginRight': '2rpx'\n            }}\n            secondStyle={{'backgroundColor': 'yellow'}}\n            textStyle={{'backgroundColor': 'blue'}}\n            tpl={'{d}-{h}-{m}-{s}'}\n            onComplete={this.onComplete}\n          />\n        </View>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={500000}\n            tpl=\"{h}:{m}:{s}\"\n            timeStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            secondStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            timeWrapStyle={{\n              borderRadius: 6,\n              width: 50,\n              height: 60,\n              backgroundColor: '#333333',\n            }}\n          />\n        </View>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={500000}\n            tpl=\"{h}:{m}:{s}\"\n            timeStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            secondStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            timeBackground={{\n              uri: 'https://gw.alicdn.com/tfs/TB1g6AvPVXXXXa7XpXXXXXXXXXX-215-215.png'\n            }}\n            timeBackgroundStyle={{\n              width: 50,\n              height: 80\n            }}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nlet styles = {\n  root: {\n    width: 750,\n    paddingTop: 20\n  },\n  container: {\n    padding: 20,\n    borderStyle: 'solid',\n    borderColor: '#dddddd',\n    borderWidth: 1,\n    marginLeft: 20,\n    marginRight: 20,\n    marginBottom: 10,\n  },\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Icon Component Usage Example\nDESCRIPTION: This example demonstrates how to use the Icon component in a Rax application. It imports necessary modules, creates icon sets using `createIconSet`, and renders different types of icons including image-based icons and font-based icons with code points and named characters.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-icon/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createElement, render, Component } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Icon, { createIconSet } from '../src/index';\n\nconst IconFont1 = createIconSet({}, 'iconfont', 'https://at.alicdn.com/t/font_pkm0oq8is8fo5hfr.ttf');\nconst IconFont2 = createIconSet({\n  hello: '\\uE60f'\n}, 'iconfont', 'https://at.alicdn.com/t/font_pkm0oq8is8fo5hfr.ttf');\nconst icon = 'https://gw.alicdn.com/tfs/TB1KRRuQXXXXXbwapXXXXXXXXXX-200-200.png';\n\nclass Demo extends Component {\n  render() {\n    return (\n      <View>\n        <Icon source={{uri: icon}}/>\n        <Icon fontFamily=\"iconfont\" source={{uri: 'https://at.alicdn.com/t/font_pkm0oq8is8fo5hfr.ttf', codePoint: '\\uE60f'}}/>\n        <IconFont1 codePoint={'\\uE60f'}/>\n        <IconFont2 name={'hello'}/>\n      </View>\n    );\n  }\n}\n\nrender(<Demo />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Rax Text Component Usage Example\nDESCRIPTION: This code snippet demonstrates how to use the rax-text component in a Rax application. It showcases different properties like numberOfLines, textDecoration, and lineHeight to style the text component. It also uses other Rax components such as View.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-text/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {createElement, render, Component} from 'rax';\nimport DU from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\n\nconst styles = {\n  root: {\n    width: 750,\n    paddingTop: 20,\n  },\n  container: {\n    padding: 20,\n    borderStyle: 'solid',\n    borderColor: '#dddddd',\n    borderWidth: 1,\n    marginLeft: 20,\n    marginRight: 20,\n    marginBottom: 10,\n  },\n  textBlock: {\n    fontWeight: '500',\n    color: 'blue',\n  },\n  logBox: {\n    padding: 20,\n    margin: 10,\n    borderWidth: 1,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n  },\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={{\n          ...styles.container, ...{\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n          }\n        }}>\n          <Text>text</Text>\n          <Text style={{\n            color: '#ff4200'\n          }}>Mixing</Text>\n        </View>\n\n        <View style={styles.container}>\n          <Text numberOfLines={1} style={{\n            width: 300,\n            textOverflow: 'ellipsis',\n          }}>Single line of text exceeds truncated text</Text>\n\n          <Text numberOfLines={2} style={{\n            width: 300,\n            textOverflow: 'ellipsis',\n          }}>\n          Multi-line text exceeds truncated text, exceeds truncated text, exceeds truncated text, exceeds truncated text</Text>\n        </View>\n\n        <View style={styles.container}>\n          <Text style={{textDecoration: 'underline'}}\n          >\n          Text underline\n          </Text>\n          <Text style={{textDecorationLine: 'none'}}\n          >\n           no Underlined\n          </Text>\n          <Text style={{textDecoration: 'line-through'}}\n          >\n          Text strikethrough\n          </Text>\n        </View>\n\n        <View style={styles.container}>\n          <Text style={{lineHeight: '120rpx'}}\n          >\n          Line height 120rpx, multi-line text text folding effect Multi-line text text folding effect\n          </Text>\n        </View>\n\n      </View>\n    );\n  }\n}\n\nrender(<App/>, document.body, {driver: DU});\n```\n\n----------------------------------------\n\nTITLE: Using rax-link Component in JSX\nDESCRIPTION: Example usage of the rax-link component in a JSX file. This demonstrates how to import the component, set the 'href' and 'miniappHref' properties, attach an 'onClick' handler, and render it with a nested Text component.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-link/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Link from 'rax-link';\nimport Text from 'rax-text';\n\nrender(\n  <Link\n    href={'//www.taobao.com'}\n    miniappHref={'/pages/Home/index'}\n    onClick={e => {\n      console.log(e);\n    }}\n  >\n    <Text\n      style={{\n        fontSize: 14,\n        color: '#333333',\n      }}\n    >\n      点击跳转\n    </Text>\n  </Link>,\n  document.body,\n  { driver: DriverUniversal },\n);\n```\n\n----------------------------------------\n\nTITLE: Rax TabPanel Component Implementation\nDESCRIPTION: This code snippet shows the implementation of a Rax component that utilizes the TabPanel component. It imports necessary modules from 'rax' and 'rax-tab-panel', defines styles, and sets up data for the tabs and content panels. It showcases how to use TabController, TabPanel, TabPanelView, and TabPanelLink to create a functional tabbed interface.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-tab-panel/README_CN.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement, Component, render, createRef } from 'rax';\nimport findDOMNode from 'rax-find-dom-node';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport DU from 'driver-universal';\n\nimport {\n  TabController,\n  TabPanel,\n  TabPanelView,\n  TabPanelLink\n} from 'rax-tab-panel';\nimport transition from 'universal-transition';\nimport ScrollView from 'rax-scrollview';\nimport { isWeex } from 'universal-env';\n\nfunction combineStyle(style1, style2) {\n  return Object.assign({}, style1, style2);\n}\n\nconst FULL_WIDTH = 750;\n\nconst DURATION = 250;\n\nconst styles = {\n  tabBar: {\n    top: '100rpx'\n  },\n  page: {},\n  pageTxt: {\n    fontSize: '60rpx',\n    lineHeight: '200rpx',\n    textAlign: 'center'\n  }\n};\nlet listData = [\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' },\n  { name1: 'tom' }\n];\n\nconst tabStyles = {\n  container: {\n    height: '100rpx'\n  },\n  scrollContent: {\n    flexDirection: 'row',\n    position: 'relative'\n  },\n  item: {\n    width: '187.5rpx',\n    height: '100rpx',\n    position: 'relative'\n  },\n  itemTxt: {\n    fontSize: '50rpx',\n    lineHeight: '100rpx',\n    textAlign: 'center'\n  },\n  block: {\n    height: '100rpx',\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    backgroundColor: 'red'\n  }\n};\n\nconst tabItemWidth = [200, 250, 400, 250, 250];\n\nconst itemData = [\n  {\n    name: 'tab1',\n    href: '//rax.alibaba-inc.com'\n  },\n  {\n    name: 'tab2',\n    href: '//rax.alibaba-inc.com'\n  },\n  {\n    name: 'tab3',\n    href: '//rax.alibaba-inc.com'\n  },\n  {\n    name: 'tab4',\n    href: '//rax.alibaba-inc.com'\n  },\n  {\n    name: 'tab5',\n    href: '//rax.alibaba-inc.com'\n  }\n];\n\nfunction getLeft(widths, index) {\n  let left = 0;\n  for (let i = 0; i < index; i++) {\n    left += widths[i];\n  }\n  return left;\n}\n\nclass Tab extends Component {\n  constructor(props) {\n    super(props);\n    this.scroller = createRef();\n    this.block = createRef();\n  }\n\n  componentDidMount() {}\n\n  switchTo(index, options = { duration: DURATION }) {\n    let { type, duration } = options;\n    let { beforeSwitch = () => {}, afterSwitch = () => {} } = this.props;\n    let block = findDOMNode(this.block.current);\n    let left = getLeft(tabItemWidth, index);\n    let itemWidth = tabItemWidth[index];\n\n    beforeSwitch({\n      index,\n      type\n    });\n\n    // move block\n    transition(\n      block,\n      {\n        transform: `translateX(${left}rpx)`, // Corrected template literal\n        webkitTransform: `translateX(${left}rpx)`, // Corrected template literal\n        width: `${itemWidth}rpx` // Corrected template literal\n      },\n      {\n        timingFunction: 'ease-out',\n        delay: 0,\n        duration: 200\n      },\n      () => {\n        afterSwitch({\n          index,\n          type\n        });\n      }\n    );\n    let offset =\n      left - FULL_WIDTH / 2 + itemWidth / 2 < 0\n        ? 0\n        : left - FULL_WIDTH / 2 + itemWidth / 2;\n\n    this.scroller.current.scrollTo({ x: offset });\n  }\n\n  render() {\n    let { itemWidths, itemData } = this.props;\n\n    let containerWidth = 0;\n    for (let i = 0; i < itemWidths.length; i++) {\n      containerWidth += itemWidths[i];\n    }\n\n    return (\n      <ScrollView\n        {...this.props}\n        contentContainerStyle={{ width: containerWidth }}\n        style={combineStyle({ ...this.props.style }, { display: 'block' })}\n        horizontal={true}\n        ref={this.scroller}\n      >\n        <View style={tabStyles.scrollContent}>\n          <View\n            style={combineStyle(tabStyles.block, { width: itemWidths[0] })}\n            ref={this.block}\n          />\n          {itemData.map((item, i) => {\n            return (\n              <View\n                style={combineStyle(tabStyles.item, { width: itemWidths[i] })}\n                onClick={() => this.switchTo(i, { type: 'click' })}\n              >\n                <Text style={tabStyles.itemTxt}>{item.name}</Text>\n              </View>\n            );\n          })}\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.tab = createRef();\n    this.tabBar = createRef();\n  }\n\n  state = {};\n\n  componentWillMount() {}\n\n  componentDidMount() {}\n\n  getTabBlockRef = () => {\n    return this.tab.current.refs.block;\n  };\n\n  beforeTabBarSwitch = e => {\n    this.tab.current.switchTo(e.index);\n  };\n\n  afterTabBarSwitch = e => {};\n\n  beforeTabSwitch = e => {\n    if (e.type === 'click') {\n      this.tabBar.current.switchTo(e.index);\n    }\n  };\n\n  render() {\n    return (\n      <View style={{ width: 750, position: 'absolute', top: 0, bottom: 0 }}>\n        <Tab\n          itemWidths={tabItemWidth}\n          itemData={itemData}\n          style={tabStyles.container}\n          ref={this.tab}\n          beforeSwitch={this.beforeTabSwitch}\n        />\n        <TabController\n          isPanEnabled={true}\n          isSlideEnabled={true}\n          style={styles.tabBar}\n          ref={this.tabBar}\n          beforeSwitch={this.beforeTabBarSwitch}\n          afterSwitch={this.afterTabBarSwitch}\n        >\n          <TabPanel style={styles.page}>\n            <TabPanelView style={{ flex: 1 }}>{1}</TabPanelView>\n          </TabPanel>\n          <TabPanel style={styles.page}>\n            <Text>2</Text>\n          </TabPanel>\n          <TabPanel style={styles.page}>\n            <Text>3</Text>\n          </TabPanel>\n          <TabPanel style={styles.page}>\n            <Text>4</Text>\n          </TabPanel>\n          <TabPanel style={styles.page}>\n            <Text>5</Text>\n          </TabPanel>\n        </TabController>\n      </View>\n    );\n  }\n}\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Basic Canvas Drawing with Rax and JSX\nDESCRIPTION: This code snippet demonstrates how to use the Rax Canvas component to draw a simple red rectangle. It imports necessary Rax modules, creates a component that renders a Canvas, and then uses the Canvas's 2D context to fill a rectangle with red color. The `driver-universal` is needed for rendering.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-canvas/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component, render, createRef } from 'rax';\nimport Canvas from 'rax-canvas';\nimport DriverUniversal from 'driver-universal';\n\nclass CanvasSample extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = createRef();\n  }\n  componentDidMount() {\n    const context = this.canvas.current.getContext();\n    context.fillStyle = 'red';\n    context.fillRect(0, 0, 300, 300);\n  }\n  render() {\n    return <Canvas style={{\n      width: '300rpx',\n      height: '300rpx'\n    }} ref={this.canvas} />;\n  }\n}\n\nrender(<CanvasSample />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Using rax-parallax with RecyclerView in Rax\nDESCRIPTION: This example demonstrates how to use the rax-parallax component to create a parallax effect with a RecyclerView. It includes importing necessary components, setting up the data source, configuring the parallax transform properties, and rendering the parallax effect along with the RecyclerView.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-parallax/README.md#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { createElement, Component, render, createRef } from 'rax';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport RecyclerView from 'rax-recyclerview';\nimport Picture from 'rax-picture';\nimport DU from \"driver-universal\"\nimport Parallax from 'rax-parallax';\n\nlet listData = [\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n  { name1: 'tom' }, { name1: 'tom' }, { name1: 'tom' },\n];\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      data: listData\n    };\n    this.bindingScroller = createRef()\n  }\n\n  listLoading = () => {\n    if (this.state.index < 4) {\n      return (\n        <View style={styles.loading}>\n          <Text style={styles.text}>加载中...</Text>\n        </View>\n      );\n    } else {\n      return null;\n    }\n  }\n  listItem = (item, index) => {\n    if (index % 2 == 0) {\n      return (\n        <RecyclerView.Cell>\n          <View style={styles.item1}>\n            <Text style={styles.text}>{item.name1}</Text>\n          </View>\n        </RecyclerView.Cell>\n\n      );\n    } else {\n      return (\n        <RecyclerView.Cell>\n          <View style={styles.item2}>\n            <Text style={styles.text}>{item.name1}</Text>\n          </View>\n        </RecyclerView.Cell>\n\n      );\n    }\n  }\n  handleLoadMore = () => {\n    setTimeout(() => {\n      this.state.index++;\n      if (this.state.index < 5) {\n        this.state.data.push(\n          { name1: 'loadmore 2' },\n          { name1: 'loadmore 3' },\n          { name1: 'loadmore 4' },\n          { name1: 'loadmore 5' },\n          { name1: 'loadmore 2' },\n          { name1: 'loadmore 3' },\n          { name1: 'loadmore 4' },\n          { name1: 'loadmore 5' }\n        );\n      }\n      this.setState(this.state);\n    }, 1000);\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        bindingScroller: this.bindingScroller\n      });\n    }, 100);\n  }\n\n  render() {\n    let dataSource = this.state.data;\n    return (\n      <View style={styles.container}>\n        <Parallax\n          bindingScroller={this.state.bindingScroller}\n          transform= {[\n            {\n              type: 'translate',\n              in: [0, 660],\n              out: [0, 0, 0, -660] // [x1,y1,x2,y2]\n            },\n            {\n              type: 'scale',\n              in: [-150, 0],\n              out: [1.3, 1.3, 1, 1]  // [x1,y1,x2,y2]\n            }\n          ]}>\n          <Picture style={{ width: 750, height: 576 }}\n            source={{ uri: '//gw.alicdn.com/tfs/TB12DNfXMmTBuNjy1XbXXaMrVXa-750-576.png' }} />\n        </Parallax>\n        <RecyclerView\n          ref={this.bindingScroller}\n          style={styles.list}\n          onEndReached={this.handleLoadMore}\n        >\n          <RecyclerView.Cell>\n            <View style={styles.title}>\n              <Text style={styles.text}>列表头部</Text>\n            </View>\n          </RecyclerView.Cell>\n          {dataSource.map(this.listItem)}\n          {this.listLoading()}\n        </RecyclerView>\n      </View>\n    );\n  }\n\n};\n\nconst styles = {\n  container: {\n    flex: 1\n  },\n  title: {\n    margin: 50,\n    height: 300\n  },\n  text: {\n    fontSize: 28,\n    color: '#fff',\n    padding: 40\n  },\n  list: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  },\n  item1: {\n    height: 110,\n    backgroundColor: '#909090',\n    marginBottom: 3\n  },\n  item2: {\n    height: 110,\n    backgroundColor: '#e0e0e0',\n    marginBottom: 3\n  },\n  loading: {\n    padding: 50,\n    textAlign: 'center',\n  }\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Basic rax-swiper example\nDESCRIPTION: This example demonstrates a basic implementation of the rax-swiper component in a Rax application. It includes navigation buttons to move between slides and sets up autoplay functionality. The component utilizes useRef to manage the Swiper instance and its methods.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-swiper/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, render, useRef } from 'rax';\nimport View from 'rax-view';\nimport { Swiper, SwiperSlide } from 'rax-swiper';\nimport DU from 'driver-universal';\nimport './index.css';\n\nconst App = () => {\n  const ref = useRef(null);\n\n  function prev() {\n    ref.current.slidePrev();\n  }\n\n  function next() {\n    ref.current.slideNext();\n  }\n\n  return (\n    <View>\n      <View onClick={prev}>Prev</View>\n      <View onClick={next}>Next</View>\n      <Swiper\n        onSlideChange={e => console.log(e)}\n        ref={ref}\n        autoplay={true}\n      >\n        <SwiperSlide key=\"1\"><View style={{ height: 300 }}>1</View></SwiperSlide>\n        <SwiperSlide key=\"2\"><View style={{ height: 300 }}>2</View></SwiperSlide>\n        <SwiperSlide key=\"3\"><View style={{ height: 300 }}>3</View></SwiperSlide>\n        <SwiperSlide key=\"4\"><View style={{ height: 300 }}>4</View></SwiperSlide>\n      </Swiper>\n    </View>\n  );\n}\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: TextInput Event Handling in Rax\nDESCRIPTION: This component demonstrates how to handle the `onChange` event of a TextInput component in Rax.  The `updateText` function updates the component's state with the current, previous, and second-previous text values, which are then displayed in a Text component. The `autoCapitalize` and `autoCorrect` properties are set to control the input behavior.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-textinput/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nclass App extends Component {\n  state = {\n    value: \"I am value\",\n    curText: \"<No Event>\",\n    prevText: \"<No Event>\",\n    prev2Text: \"<No Event>\",\n    prev3Text: \"<No Event>\"\n  };\n\n  inputRef = createRef();\n\n  updateText = text => {\n    this.setState(state => {\n      return {\n        curText: text,\n        prevText: state.curText,\n        prev2Text: state.prevText,\n        prev3Text: state.prev2Text\n      };\n    });\n  };\n\n  render() {\n    // define delimiter\n    return (\n      <View style={styles.root}>\n        <View style={styles.container}>\n          <TextInput\n            autoCapitalize=\"none\"\n            placeholder=\"Enter text to see events\"\n            autoCorrect={false}\n            onChange={event => {\n              this.updateText(\"onChange text: \" + event.nativeEvent.text);\n            }}\n            style={styles.default}\n          />\n\n          <Text style={styles.eventLabel}>\n            {this.state.curText}\n            {\"\\n\"}\n            (prev: {this.state.prevText}){\"\\n\"}\n            (prev2: {this.state.prev2Text}){\"\\n\"}\n            (prev3: {this.state.prev3Text})\n          </Text>\n        </View>\n\n        <View style={styles.container}>\n          <TextInput\n            placeholder=\"Enter text to see events\"\n            value={this.state.value}\n            ref={this.inputRef}\n            style={{\n              width: '600rpx',\n              marginTop: '20rpx',\n              borderWidth: \"2rpx\",\n              borderColor: \"#dddddd\",\n              borderStyle: \"solid\"\n            }}\n            onChangeText={text => {\n              this.setState({\n                value: text\n              });\n            }}\n          />\n\n          <View\n            style={{\n              marginTop: '20rpx'\n            }}\n            onFocus={e => {\n              this.setState({\n                value: e.nativeEvent.text\n              });\n            }}\n            onClick={() => {\n              this.setState({\n                value: \"I am value\"\n              });\n            }}\n          >\n            <Text>Reset</Text>\n          </View>\n        </View>\n        <TextAreaDemo />\n      </View>\n    );\n  }\n}\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Rendering Image with Fallback - Rax/JSX\nDESCRIPTION: This code snippet shows how to use the `fallbackSource` and `resizeMode` props of the Rax Image component.  If the primary image fails to load, the fallback image will be displayed. The `resizeMode` is set to `cover` to ensure the image fills the specified dimensions.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-image/README.md#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Image from '../src/index';\n\nconst App = () => {\n  return (\n    <Image\n      source={{\n        uri:\n          'https://gw.alicdn.com/tfs/TB1g6AvPVXXXXa7XpXXXXXXXXXX-215-215.png',\n      }}\n      fallbackSource={{\n        uri:\n          'https://gw.alicdn.com/tps/i3/TB1yeWeIFXXXXX5XFXXuAZJYXXX-210-210.png_70x70.jpg',\n      }}\n      style={{\n        width: '100rpx',\n        height: '100rpx',\n      }}\n      resizeMode=\"cover\"\n    />\n  );\n};\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Using rax-qrcode Component in Rax\nDESCRIPTION: This JSX code demonstrates how to use the rax-qrcode component in a Rax application to generate QR codes. It shows how to import the necessary modules, create a component with the QRCode, and render it with different data, styles, and options.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-qrcode/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from \"rax\";\nimport DriverUniversal from \"driver-universal\";\nimport View from \"rax-view\";\nimport QRCode from \"rax-qrcode\";\n\nfunction App() {\n  return (\n    <View style={{ flex: 1 }}>\n      <QRCode\n        data=\"http://market.m.taobao.com/apps/market/m-vip/88-festival.html?wh_weex=true&wx_navbar_transparent=true\"\n        style={{ width: 400, height: 400 }}\n      />\n      <QRCode\n        data=\"http://market.m.taobao.com/apps/market/m-vip/88-festival.html?wh_weex=true&wx_navbar_transparent=true\"\n        options={{ fillColor: \"red\", blankColor: \"#000\", errorCorrectLevel: 'L' }}\n      />\n    </View>\n  );\n}\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Basic Rax View Component Example\nDESCRIPTION: This code snippet demonstrates the basic usage of the Rax View component. It imports necessary modules from 'rax' and a custom 'View' component. It defines a functional component 'App' that renders a nested structure of View components with different styles and event listeners. Click handlers are added to the views, and event propagation is controlled using `stopPropagation`. Finally, the App component is rendered to the document body using the `render` function from Rax, utilizing the driver-universal.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-view/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, useRef, useEffect, render } from 'rax';\nimport DU from 'driver-universal';\nimport View from '../src';\nimport './index.css';\n\nconst App = () => {\n  const viewRef = useRef(null);\n  useEffect(() => {\n    console.log(viewRef.current);\n  });\n  return (\n    <View\n      ref={viewRef}\n      className=\"box-1\"\n      onClick={() => {\n        alert('container was clicked!');\n      }}\n    >\n      <View\n        className=\"box-2\"\n        onClick={e => {\n          e.stopPropagation();\n          alert('red was clicked');\n        }}\n      />\n      <View\n        style={{\n          width: 300,\n          height: 300,\n          backgroundColor: 'green',\n          position: 'absolute',\n          top: 20,\n          left: 20\n        }}\n        onClick={() => {\n          alert('green was clicked');\n        }}\n      />\n      <View\n        style={{\n          width: 300,\n          height: 300,\n          backgroundColor: 'yellow',\n          position: 'absolute',\n          top: 80,\n          left: 210\n        }}\n      />\n    </View>\n  );\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Basic XSlider Example in Rax\nDESCRIPTION: This code demonstrates a basic implementation of the Rax XSlider component.  It imports necessary modules, defines styles, creates a slider with panels, and renders the slider component with autoplay, loop, and card styling.  It also shows how to switch slides programmatically using `useRef` and `useEffect`.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-xslider/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// demo\n/** @jsx createElement */\nimport {createElement, Component, render, createRef, useEffect} from 'rax';\nimport Text from 'rax-text';\nimport Slider from 'rax-xslider';\n\nconst styles = {\n  item: {\n    height: 400,\n    backgroundColor: 'red',\n    justifyContent: 'center',\n    borderRadius: 24,\n    borderWidth: 5,\n    borderColor: '#000',\n    borderStyle: 'solid'\n  },\n  txt: {\n    color: '#fff',\n    fontSize: 50,\n    textAlign: 'center'\n  },\n  title: {\n    backgroundColor: '#f7f7f7',\n    color: '#444',\n    textAlign: 'center',\n    fontSize: 200,\n    fontSize: 28,\n    lineHeight: 80\n  }\n};\n\nconst colors = [\n  'red',\n  'green',\n  'blue',\n  'orange',\n  'yellow'\n];\n\nexport default function App() {\n  const slider = createRef();\n  const getCardTransitionSpec = () => {\n    return {\n      props: [\n        {\n          property: 'transform.scale',\n          inputRange: [0, 1],\n          outputRange: [0.8, 1]\n        },\n        {\n          property: 'opacity',\n          inputRange: [0, 1],\n          outputRange: [.2, 1]\n        }\n      ]\n    };\n  }\n  useEffect(() => {\n    // use slider.current to get the instance\n    slider.current.switchTo(3);\n  }, []);\n  return (\n    <Slider\n      ref={slider}\n      loop={true}\n      autoPlay={true}\n      startGap={75}\n      endGap={75}\n      cardSize={600}\n      cardTransitionSpec={getCardTransitionSpec}\n    >\n      {colors.map((color, i) => {\n        return (<Slider.Panel style={{...styles.item, backgroundColor: color}} key={'panel' + i}>\n          <Slider.PanView style={styles.panView}><Text style={styles.txt}>{i}</Text></Slider.PanView>\n        </Slider.Panel>);\n      })}\n    </Slider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using rax-view Component in Rax\nDESCRIPTION: This example demonstrates how to import and use the rax-view component in a Rax application.  It showcases nested views with inline styles and onClick handlers.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-view/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, useRef, useEffect, render } from \"rax\";\nimport DU from \"driver-universal\";\nimport View from \"rax-view\";\n\nconst App = () => {\n  const viewRef = useRef(null);\n  useEffect(() => {});\n  return (\n    <View\n      ref={viewRef}\n      style={{\n        padding: '30rpx'\n      }}\n      onClick={() => {\n        alert(\"container was clicked!\");\n      }}\n    >\n      <View\n        style={{\n          width: '300rpx',\n          height: '300rpx',\n          backgroundColor: \"red\"\n        }}\n        onClick={e => {\n          e.stopPropagation();\n          alert(\"red was clicked\");\n        }}\n      />\n      <View\n        style={{\n          width: '300rpx',\n          height: '300rpx',\n          backgroundColor: \"green\",\n          position: \"absolute\",\n          top: '20rpx',\n          left: '20rpx'\n        }}\n        onClick={() => {\n          alert(\"green was clicked\");\n        }}\n      />\n      <View\n        style={{\n          width: '300rpx',\n          height: '300rpx',\n          backgroundColor: \"yellow\",\n          position: \"absolute\",\n          top: '80rpx',\n          left: '210rpx'\n        }}\n        onClick={e => {}}\n      />\n    </View>\n  );\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Multiline TextInput with Hashtag Parsing Rax JSX\nDESCRIPTION: This snippet demonstrates a multiline TextInput component with hashtag parsing and rendering. It splits the input text based on whitespace, identifies hashtags, and renders them as Text components with specific styling. It uses the `onChangeText` prop to update the state and re-render the hashtags dynamically.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-textinput/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component, render, createRef } from 'rax';\nimport DU from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport TextInput from '../src/index';\nimport styles from './style';\n\nclass TextAreaDemo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: 'Hello #World , Hello #Rax , Hello #天天好心情'\n    };\n  }\n\n  render() {\n    let delimiter = /\\s+/;\n\n    // split string\n    let _text = this.state.text;\n    let token,\n      index,\n      parts = [];\n    while (_text) {\n      delimiter.lastIndex = 0;\n      token = delimiter.exec(_text);\n      if (token === null) {\n        break;\n      }\n      index = token.index;\n      if (token[0].length === 0) {\n        index = 1;\n      }\n      parts.push(_text.substr(0, index));\n      parts.push(token[0]);\n      index = index + token[0].length;\n      _text = _text.slice(index);\n    }\n    parts.push(_text);\n\n    let hashtags = [];\n    parts.forEach(text => {\n      if (/^#/.test(text)) {\n        hashtags.push(\n          <Text key={text} style={styles.hashtag}>\n            {text}\n          </Text>\n        );\n      }\n    });\n\n    return (\n      <View style={styles.container}>\n        <TextInput\n          multiline={true}\n          numberOfLines={3}\n          style={styles.multiline}\n          value={this.state.text}\n          onChangeText={text => {\n            this.setState({ text });\n          }}\n        />\n        <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>\n          {hashtags}\n        </View>\n      </View>\n    );\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Rax Slider Component Implementation\nDESCRIPTION: A complete example showcasing how to implement and customize a Rax Slider component. It includes importing necessary Rax modules, defining a stateful component, configuring slider properties (autoplay, loop, pagination), handling change events, and using the `slideTo` method.  The example renders the slider with image slides and a clickable element to trigger a slide transition.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-slider/README.md#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component, render, createRef } from 'rax';\nimport View from 'rax-view';\nimport Image from 'rax-image';\nimport Slider from 'rax-slider';\nimport DriverUniversal from 'driver-universal';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.inputRef = createRef();\n  }\n\n  onchange = (index) => {\n    console.log('change', index);\n  };\n\n  onClick = () => {\n    this.inputRef.current.slideTo(0);\n  };\n\n  render() {\n    return (\n      <View>\n        <Slider\n          className=\"slider\"\n          width=\"750\"\n          height=\"500\"\n          style={styles.slider}\n          autoPlay={true}\n          loop={true}\n          showsPagination={true}\n          paginationStyle={styles.paginationStyle}\n          autoplayTimeout={3000}\n          onChange={this.onchange}\n          ref={this.inputRef}\n        >\n          <Slider.Item>\n            <View style={styles.itemWrap}>\n              <Image\n                style={styles.image}\n                source={{\n                  height: 500,\n                  width: 375,\n                  uri: '//gw.alicdn.com/tfs/TB19NbqKFXXXXXLXVXXXXXXXXXX-750-500.png',\n                }}\n              />\n            </View>\n          </Slider.Item>\n          <Slider.Item>\n            <View style={styles.itemWrap}>\n              <Image\n                style={styles.image}\n                source={{\n                  height: 500,\n                  width: 375,\n                  uri: '//gw.alicdn.com/tfs/TB1tWYBKFXXXXatXpXXXXXXXXXX-750-500.png',\n                }}\n              />\n            </View>\n          </Slider.Item>\n          <Slider.Item>\n            <View style={styles.itemWrap}>\n              <Image\n                style={styles.image}\n                source={{\n                  height: 500,\n                  width: 375,\n                  uri: '//gw.alicdn.com/tfs/TB1SX_vKFXXXXbyXFXXXXXXXXXX-750-500.png',\n                }}\n              />\n            </View>\n          </Slider.Item>\n        </Slider>\n\n        <View onClick={this.onClick}>Click</View>\n      </View>\n    );\n  }\n}\n\nconst styles = {\n  slider: {\n    width: 750,\n    position: 'relative',\n    overflow: 'hidden',\n    height: 500,\n    backgroundColor: '#cccccc',\n  },\n  itemWrap: {\n    width: 750,\n    height: 500,\n  },\n  image: {\n    width: 750,\n    height: 500,\n  },\n  button: {\n    marginTop: 20,\n    width: 340,\n    height: 80,\n  },\n  paginationStyle: {\n    position: 'absolute',\n    width: 750,\n    height: 40,\n    bottom: 20,\n    left: 0,\n    itemColor: 'rgba(255, 255, 255, 0.5)',\n    itemSelectedColor: 'rgb(255, 80, 0)',\n    itemSize: 16,\n  },\n};\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Rendering BarCode Component with Rax\nDESCRIPTION: This code snippet demonstrates how to import and use the Rax BarCode component to render a barcode. It sets the barcode data to '123123123123', the type to 'CODE39', and customizes the fill color to green. The component is rendered within a Rax application using driver-universal.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-barcode/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render, Component } from 'rax';\nimport DU from 'driver-universal';\nimport View from 'rax-view';\nimport BarCode from '../src/index';\n\nclass App extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <BarCode\n        data={'123123123123'}\n        type='CODE39'\n        options={{\n          fillColor: 'green'\n        }}\n      />\n    );\n  }\n}\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Rax ScrollView Example\nDESCRIPTION: This code demonstrates how to use the ScrollView component in a Rax application. It includes examples of both horizontal and vertical scrolling, along with event handling using the onEndReached prop. The example also demonstrates how to use createRef to control scroll position.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-scrollview/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component, render, createRef } from 'rax';\n\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport ScrollView from 'rax-scrollview';\n\nfunction Thumb() {\n  return (\n    <View style={styles.button}>\n      <View style={styles.box} />\n    </View>\n  );\n}\n\nconst THUMBS = new Array(20).fill(1);\nconst createThumbRow = (val, index) => <Thumb key={index} />;\n\nclass App extends Component {\n  state = {\n    horizontalScrollViewEventLog: false,\n    scrollViewEventLog: false,\n  };\n  constructor(props) {\n    super(props);\n    this.horizontalScrollView = createRef();\n  }\n\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.container}>\n          <ScrollView\n            ref={this.horizontalScrollView}\n            style={{\n              height: '100rpx',\n            }}\n            horizontal={true}\n            onEndReached={() =>\n              this.setState({ horizontalScrollViewEventLog: true })\n            }\n          >\n            {THUMBS.map(createThumbRow)}\n          </ScrollView>\n\n          <View\n            style={styles.button}\n            onClick={() => {\n              this.horizontalScrollView.current.scrollTo({ x: 0 });\n            }}\n          >\n            <Text>Scroll to start</Text>\n          </View>\n\n          <View style={styles.eventLogBox}>\n            <Text>\n              {this.state.horizontalScrollViewEventLog ? 'onEndReached' : ''}\n            </Text>\n          </View>\n        </View>\n\n        <View style={{ ...styles.container, height: '500rpx' }}>\n          <ScrollView\n            ref={scrollView => {\n              this.scrollView = scrollView;\n            }}\n            onEndReached={() => this.setState({ scrollViewEventLog: true })}\n          >\n            <View>\n              <View style={styles.sticky}>\n                <Text>Cannot sticky</Text>\n              </View>\n            </View>\n\n            <View style={styles.sticky}>\n              <Text>Sticky view must in ScrollView root</Text>\n            </View>\n\n            {THUMBS.map(createThumbRow)}\n          </ScrollView>\n\n          <View\n            style={styles.button}\n            onClick={() => {\n              this.scrollView.scrollTo({ y: 0 });\n            }}\n          >\n            <Text>Scroll to top</Text>\n          </View>\n\n          <View style={styles.eventLogBox}>\n            <Text>{this.state.scrollViewEventLog ? 'onEndReached' : ''}</Text>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = {\n  root: {\n    width: '750rpx',\n    paddingTop: '20rpx',\n  },\n  sticky: {\n    position: 'sticky',\n    width: '750',\n    backgroundColor: '#cccccc',\n  },\n  container: {\n    padding: '20rpx',\n    borderStyle: 'solid',\n    borderColor: '#dddddd',\n    borderWidth: '1rpx',\n    marginLeft: '20rpx',\n    marginRight: '20rpx',\n    marginBottom: '10rpx',\n  },\n  button: {\n    margin: '7rpx',\n    padding: '5rpx',\n    alignItems: 'center',\n    backgroundColor: '#eaeaea',\n    borderRadius: '3rpx',\n  },\n  box: {\n    width: '64rpx',\n    height: '64rpx',\n  },\n  eventLogBox: {\n    padding: '10rpx',\n    margin: '10rpx;,\n    height: '80rpx',\n    borderWidth: '1rpx',\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n  },\n};\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Basic RecyclerView Implementation in Rax\nDESCRIPTION: This code snippet demonstrates a basic implementation of the RecyclerView component. It defines a Thumb component to render individual list items with an index. The App component renders a RecyclerView with a header and maps an array of indices to Thumb components.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-recyclerview/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, Component, render} from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport View from 'rax-view';\nimport Text from 'rax-text';\nimport {isWeex} from 'universal-env';\nimport RecyclerView from '../src/index';\n\nconst vwh = isWeex ? 667 * 2 : document.documentElement.clientHeight * 750 / document.documentElement.clientWidth;\n\nclass Thumb extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <RecyclerView.Cell style={this.props.style}>\n        <View style={styles.button}>\n          <View style={styles.box}>\n            <Text>{this.props.index}</Text>\n          </View>\n        </View>\n      </RecyclerView.Cell>\n    );\n  }\n}\n\nlet THUMBS = [];\nfor (let i = 0; i < 30; i++) THUMBS.push(i);\nlet createThumbRow = (val, i) => <Thumb key={i} index={i} />;\n\nexport default class App extends Component {\n  state = {\n    horizontalScrollViewEventLog: false,\n    scrollViewEventLog: false,\n  };\n\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.container}>\n          <RecyclerView\n            ref={(scrollView) => {\n              this.scrollView = scrollView;\n            }}\n            style={{\n              height: vwh\n            }}\n            onEndReached={() => console.log('reach end')}>\n            <RecyclerView.Header style={styles.header}>\n              <Text style={styles.headerText}>Simple Header</Text>\n            </RecyclerView.Header>\n\n            {THUMBS.map(createThumbRow)}\n\n          </RecyclerView>\n\n          <View\n            style={styles.topIcon}\n            onClick={() => this.scrollView.scrollTo({y: 0})}>\n            <Text>Top</Text>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nlet styles = {\n  root: {\n    width: 750\n  },\n  header: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 750,\n    height: 350,\n    backgroundColor: 'tomato',\n  },\n  headerText: {\n    color: 'white',\n    fontSize: 40,\n  },\n  sticky: {\n    position: 'sticky',\n    width: 750,\n    backgroundColor: '#cccccc'\n  },\n  container: {\n    borderStyle: 'solid',\n    borderColor: '#dddddd',\n    // borderWidth: 1,\n    height: vwh,\n    backgroundColor: '#eeeeee',\n  },\n  button: {\n    backgroundColor: '#ffffff',\n    width: 710,\n    height: 250,\n    marginTop: 20,\n    marginLeft: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 10,\n  },\n  box: {\n    width: 64,\n    height: 64,\n  },\n  eventLogBox: {\n    padding: 10,\n    margin: 10,\n    height: 80,\n    borderWidth: 1,\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n  },\n  row: {\n    borderColor: 'grey',\n    borderWidth: 1,\n    padding: 20,\n    margin: 5,\n  },\n  text: {\n    alignSelf: 'center',\n    color: 'black',\n  },\n  refreshView: {\n    height: 80,\n    width: 750,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  refreshArrow: {\n    fontSize: 30,\n    color: '#45b5f0'\n  },\n  topIcon: {\n    position: 'fixed',\n    right: 40,\n    bottom: 40,\n    width: 100,\n    height: 100,\n    borderWidth: '1px',\n    borderStyle: 'solid',\n    borderColor: '#cccccc',\n    borderRadius: 100,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'white',\n    cursor: 'pointer',\n  }\n};\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Basic ScrollView Usage in Rax\nDESCRIPTION: This snippet demonstrates the basic usage of the Rax ScrollView component for both horizontal and vertical scrolling. It includes features such as disabling scroll indicators, handling scroll events, and programmatically scrolling to specific positions using `scrollTo` and `scrollIntoView`. It imports necessary Rax components like `createElement`, `render`, `useRef`, `View`, `Text`, and `ScrollView`.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-scrollview/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\n/**\n * @jsx createElement\n */\nimport { createElement, render, useRef } from 'rax';\nimport View from 'rax-view';\nimport DriverUniversal from 'driver-universal';\nimport Text from 'rax-text';\nimport ScrollView from '../src/index';\nimport './index.css';\n\nfunction Thumb({ index }) {\n  return (\n    <View id={'id_' + index} className=\"button\">\n      <View className=\"box\">{index}</View>\n    </View>\n  );\n}\n\nconst list = [];\nfor (let i = 0; i < 20; i++) list.push(i);\nconst createThumbRow = (val, i) => <Thumb index={i} key={i} />;\n\nfunction App() {\n  const horizontalScrollViewRef = useRef(null);\n  const scrollViewRef = useRef(null);\n  return (\n    <View className='root'>\n      <View className='container'>\n        <ScrollView\n          ref={horizontalScrollViewRef}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          onScroll={e => {\n            console.log(e);\n          }}\n        >\n          {list.map(createThumbRow)}\n        </ScrollView>\n        <View\n          className='button'\n          onClick={() => horizontalScrollViewRef.current.scrollTo({ x: 0 })}\n        >\n          <Text>Scroll to start</Text>\n        </View>\n        <View\n          className='button'\n          onClick={() =>\n            horizontalScrollViewRef.current.scrollIntoView({ id: 'id_2' })\n          }\n        >\n          <Text>Scroll to the third item</Text>\n        </View>\n      </View>\n      <View className='container' style={{ flex: 1 }}>\n        <ScrollView\n          ref={scrollViewRef}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          onScroll={e => {\n            console.log(e);\n          }}\n        >\n          <View>\n            <View className='sticky'>\n              <Text>Cannot sticky</Text>\n            </View>\n          </View>\n          <View className='sticky'>\n            <Text>Sticky view must in ScrollView root</Text>\n          </View>\n          {list.map(createThumbRow)}\n        </ScrollView>\n        <View\n          className='button'\n          onClick={() => scrollViewRef.current.scrollTo({ y: 0 })}\n        >\n          <Text>Scroll to top</Text>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Importing Rax Image Component\nDESCRIPTION: This code imports the Image component from the rax-image package. It allows you to use the Image component in your JSX code to display images.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-image/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from 'rax-image';\n```\n\n----------------------------------------\n\nTITLE: Rax Image Component Basic Rendering\nDESCRIPTION: This snippet demonstrates the rendering of the Rax Image component within a functional component. It imports necessary modules like `createElement`, `render`, `useRef`, and `Fragment` from 'rax' and the Image component from its source. The `App` component uses the Image component with a specified URI and lazy loading.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-image/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, render, useRef, Fragment } from 'rax';\nimport DU from 'driver-universal';\nimport Image from '../src/index';\nimport './index.css';\n\nconst App = () => {\n  const imageRef = useRef(null);\n  return (\n    <Fragment>\n      <Image\n        ref={imageRef}\n        className=\"demo-image\"\n        source={{\n          uri: 'https://gw.alicdn.com/tfs/TB1bBD0zCzqK1RjSZFpXXakSXXa-68-67.png',\n        }}\n      />\n      <Image\n        loading=\"lazy\"\n        ref={imageRef}\n        className=\"demo-image\"\n        source={{\n          uri: 'https://gw.alicdn.com/tfs/TB1bBD0zCzqK1RjSZFpXXakSXXa-68-67.png',\n        }}\n      />\n    </Fragment>\n  );\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Rax Text Basic Usage\nDESCRIPTION: This code demonstrates basic usage of the Rax Text component, importing necessary modules from 'rax' and 'rax-view', and '../../src/index' (assumed to be the location of the Text component). It showcases various styling options like color, text overflow (ellipsis), text decoration (underline, line-through), and line height applied to the Text component within a Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-text/demo/basic.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component } from 'rax';\nimport View from 'rax-view';\nimport Text from '../../src/index';\n\nconst styles = {\n  root: {\n    width: '750rpx',\n    paddingTop: '20rpx',\n  },\n  container: {\n    padding: '20rpx',\n    borderStyle: 'solid',\n    borderColor: '#dddddd',\n    borderWidth: '1rpx',\n    marginLeft: '20rpx',\n    marginRight: '20rpx',\n    marginBottom: '10rpx',\n  },\n  textBlock: {\n    fontWeight: '500',\n    color: 'blue',\n  },\n  logBox: {\n    padding: '20rpx',\n    margin: '10rpx',\n    borderWidth: '1rpx',\n    borderColor: '#f0f0f0',\n    backgroundColor: '#f9f9f9',\n  },\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={{\n          ...styles.container, ...{\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n          }\n        }}>\n          <Text>text</Text>\n          <Text style={{\n            color: '#ff4200'\n          }}>Mixing</Text>\n        </View>\n\n        <View style={styles.container}>\n          <Text numberOfLines={1} style={{\n            width: '300rpx',\n            textOverflow: 'ellipsis',\n          }}>Single line of text exceeds truncated text</Text>\n\n          <Text numberOfLines={2} style={{\n            width: '300rpx',\n            textOverflow: 'ellipsis',\n          }}>\n          Multi-line text exceeds truncated text, exceeds truncated text, exceeds truncated text, exceeds truncated text</Text>\n        </View>\n\n        <View style={styles.container}>\n          <Text style={{textDecoration: 'underline'}}>\n          Text underline\n          </Text>\n          <Text style={{textDecorationLine: 'none'}}>\n           no Underlined\n          </Text>\n          <Text style={{textDecoration: 'line-through'}}>\n          Text strikethrough\n          </Text>\n        </View>\n\n        <View style={styles.container}>\n          <Text style={{lineHeight: '120rpx'}}>\n          Line height 120rpx, multi-line text text folding effect Multi-line text text folding effect\n          </Text>\n        </View>\n\n      </View>\n    );\n  }\n}\n\nexport default App;\n\n```\n\n----------------------------------------\n\nTITLE: Using rax-modal Component\nDESCRIPTION: This example shows how to integrate and use the rax-modal component in a Rax application. It demonstrates toggling the modal visibility using a state variable and handling events like onShow, onHide and onMaskClick.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-modal/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component, render } from 'rax';\nimport Modal from 'rax-modal';\n\nconst Demo = props => {\n  const [visible, setVisible] = useState(false);\n  return [\n    <View onClick={() => setVisible(true)}>\n      <Text>open</Text>\n    </View>,\n    <Modal\n      visible={visible}\n      onHide={() => {\n        console.log('hide');\n      }}\n      onShow={() => {\n        console.log('show');\n      }}\n      onMaskClick={() => {\n        setVisible(false);\n      }}\n      contentStyle={{\n        position: 'absolute',\n        top: '150rpx',\n        width: '400rpx',\n        left: '175rpx',\n      }}\n    >\n      <Text>这里是弹窗内容</Text>\n    </Modal>,\n  ];\n};\n\nrender(<Demo />);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Video Component with Rax\nDESCRIPTION: This JSX code demonstrates how to render a video component using Rax. It imports necessary modules from 'rax', 'rax-video', and 'driver-universal'. It defines a VideoDemo component that renders a Video component with a specified source URL, style, and autoPlay attribute. Finally, it renders the VideoDemo component to the document body using DriverUniversal.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-video/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'rax';\nimport Video from 'rax-video';\nimport DriverUniversal from 'driver-universal';\n\nfunction VideoDemo() {\n  return (\n    <Video\n      src=\"https://cloud.video.taobao.com/play/u/2780279213/p/1/e/6/t/1/d/ld/36255062.mp4\"\n      style={{ width: 750, height: 400 }}\n      autoPlay\n    />\n  );\n}\n\nrender(<VideoDemo />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Using Rax Embed Component\nDESCRIPTION: This code demonstrates how to use the Embed component within a Rax application to embed a webpage. It sets the 'src' property to the URL of the webpage to be embedded, and 'urlParam' to pass parameters. The 'style' property is used to specify the dimensions of the embedded content. Rax and driver-universal are required for rendering this example.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-embed/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Embed from '../src/index';\n\nconst urlParam = {\n  paramOne: 123,\n  paramTwo: 456\n};\nrender(<Embed urlParam={urlParam} src={'http://taobao.com'} useIframeInWeb={true} style={{\n  height: '750rpx',\n  width: '750rpx'\n}} />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Using the rax-countdown component in Rax\nDESCRIPTION: This example demonstrates how to import and use the rax-countdown component within a Rax application.  It showcases the basic implementation, including setting the timeRemaining property and customizing the display template using the tpl property. It also shows how to use the onComplete callback.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-countdown/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { createElement, render, Component } from 'rax';\nimport View from 'rax-view';\nimport Countdown from 'rax-countdown';\nimport DU from 'driver-universal';\n\nclass App extends Component {\n  onComplete() {\n    console.log('countdown complete');\n  }\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={100000}\n            tpl={'{d}天{h}时{m}分{s}秒'}\n            onComplete={this.onComplete}\n          />\n        </View>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={100000000}\n            timeStyle={{\n              'color': '#007457',\n              'backgroundColor': 'red',\n              'marginLeft': '2rpx',\n              'marginRight': '2rpx'\n            }}\n            secondStyle={{'backgroundColor': 'yellow'}}\n            textStyle={{'backgroundColor': 'blue'}}\n            tpl={'{d}-{h}-{m}-{s}'}\n            onComplete={this.onComplete}\n          />\n        </View>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={500000}\n            tpl=\"{h}:{m}:{s}\"\n            timeStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            secondStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            timeWrapStyle={{\n              borderRadius: 6,\n              width: 50,\n              height: 60,\n              backgroundColor: '#333333',\n            }}\n          />\n        </View>\n        <View style={styles.container}>\n          <Countdown\n            timeRemaining={500000}\n            tpl=\"{h}:{m}:{s}\"\n            timeStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            secondStyle={{\n              color: '#ffffff',\n              fontSize: 40,\n              position: 'relative'\n            }}\n            timeBackground={{\n              uri: 'https://gw.alicdn.com/tfs/TB1g6AvPVXXXXa7XpXXXXXXXXXX-215-215.png'\n            }}\n            timeBackgroundStyle={{\n              width: 50,\n              height: 80\n            }}\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nlet styles = {\n  root: {\n    width: 750,\n    paddingTop: 20\n  },\n  container: {\n    padding: 20,\n    borderStyle: 'solid',\n    borderColor: '#dddddd',\n    borderWidth: 1,\n    marginLeft: 20,\n    marginRight: 20,\n    marginBottom: 10,\n  },\n};\n\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Basic Rax Link Component Usage\nDESCRIPTION: This code snippet demonstrates the basic usage of the Rax Link component. It imports necessary modules such as `createElement`, `render` from 'rax', `DU` from 'driver-universal', `Link` from '../src/index', and `Text` from 'rax-text'. It then renders a Link component with an href and an onPress event handler.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-link/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {createElement, render} from 'rax';\nimport DU from 'driver-universal';\nimport Link from '../src/index';\nimport Text from 'rax-text';\n\nrender(<Link href={\"//www.taobao.com\"} onPress={(e)=>{console.log(e)}}><Text style={{\n  fontSize: 14,\n  color: '#333333'\n}}>click to jump</Text></Link>, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Using rax-canvas in a Rax component\nDESCRIPTION: This example shows how to import the rax-canvas component and use it within a Rax component.  It creates a canvas, sets its width and height, and draws a red rectangle using the canvas context.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-canvas/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component, render, createRef } from 'rax';\nimport Canvas from 'rax-canvas';\nimport DriverUniversal from \"driver-universal\"\n\nclass CanvasSample extends Component {\n  constructor(props) {\n    super(props);\n    this.raxCanvasDemo = createRef()\n  }\n  componentDidMount() {\n    const context = this.raxCanvasDemo.current.getContext();\n    context.fillStyle = 'red';\n    context.fillRect(0, 0, 100, 100);\n  }\n\n  render() {\n    return <Canvas style={{\n      width: 750,\n      height: 750\n    }} ref={this.raxCanvasDemo} />;\n  }\n}\n\nrender(<CanvasSample />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Rax RecyclerView Example\nDESCRIPTION: This JSX code demonstrates a basic implementation of the rax-recyclerview component within a Rax application.  It showcases how to import the necessary modules, create a RecyclerView with header and cell components, and use the `scrollTo` method to navigate to the top of the list. The example includes styling and event handling for interactive elements.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-recyclerview/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, Component, render } from \"rax\";\n\nimport View from \"rax-view\";\n\nimport Text from \"rax-text\";\n\nimport DriverUniversal from \"driver-universal\";\n\nimport RecyclerView from \"rax-recyclerview\";\n\nclass Thumb extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <RecyclerView.Cell>\n        <View style={styles.button}>\n          <View style={styles.box} />\n        </View>\n      </RecyclerView.Cell>\n    );\n  }\n}\n\nclass Row extends Component {\n  handleClick = e => {\n    this.props.onClick(this.props.data);\n  };\n\n  render() {\n    return (\n      <View onClick={this.handleClick}>\n        <View style={styles.row}>\n          <Text style={styles.text}>\n            {this.props.data.text + \" (\" + this.props.data.clicks + \" clicks)\"}\n          </Text>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst THUMBS = [];\n\nfor (let i = 0; i < 20; i++) THUMBS.push(i);\n\nconst createThumbRow = (val, i) => <Thumb key={i} />;\n\nclass App extends Component {\n  state = {\n    horizontalScrollViewEventLog: false,\n    scrollViewEventLog: false\n  };\n\n  render() {\n    return (\n      <View style={styles.root}>\n        <View style={styles.container}>\n          <RecyclerView\n            ref={scrollView => {\n              this.scrollView = scrollView;\n            }}\n            style={{\n              height: 500\n            }}\n            onEndReached={() => alert(\"reach end\")}\n          >\n            <RecyclerView.Header style={styles.sticky}>\n              <Text>Sticky view is not header</Text>​{\" \"}\n            </RecyclerView.Header>\n            <RecyclerView.Header>\n              <View style={styles.sticky}>\n                <Text>Sticky view must in header root</Text>\n              </View>\n            </RecyclerView.Header>\n            {THUMBS.map(createThumbRow)}\n          </RecyclerView>\n          <View\n            style={styles.button}\n            onClick={() => this.scrollView.scrollTo({ y: 0 })}\n          >\n            <Text>Scroll to top</Text>\n          </View>\n          <View style={styles.eventLogBox}>\n            <Text>{this.state.scrollViewEventLog ? \"onEndReached\" : \"\"}</Text>\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = {\n  root: {\n    width: 750,\n    paddingTop: 20\n  },\n\n  sticky: {\n    position: \"sticky\",\n    width: 750,\n    backgroundColor: \"#cccccc\"\n  },\n\n  container: {\n    padding: 20,\n    borderStyle: \"solid\",\n    borderColor: \"#dddddd\",\n    borderWidth: 1,\n    marginLeft: 20,\n    height: 1000,\n    marginRight: 20,\n    marginBottom: 10\n  },\n\n  button: {\n    margin: 7,\n    padding: 5,\n    alignItems: \"center\",\n    backgroundColor: \"#eaeaea\",\n    borderRadius: 3\n  },\n\n  box: {\n    width: 64,\n    height: 64\n  },\n\n  eventLogBox: {\n    padding: 10,\n    margin: 10,\n    height: 80,\n    borderWidth: 1,\n    borderColor: \"#f0f0f0\",\n    backgroundColor: \"#f9f9f9\"\n  },\n\n  row: {\n    borderColor: \"grey\",\n    borderWidth: 1,\n    padding: 20,\n    margin: 5\n  },\n\n  text: {\n    alignSelf: \"center\",\n    color: \"black\"\n  },\n\n  refreshView: {\n    height: 80,\n    width: 750,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n\n  refreshArrow: {\n    fontSize: 30,\n    color: \"#45b5f0\"\n  }\n};\n\nrender(<App />, document.body, { driver: DriverUniversal });\n\n```\n\n----------------------------------------\n\nTITLE: Using rax-portal in Rax\nDESCRIPTION: This JSX example demonstrates how to use the Portal component to render content to the default root node (body) and to a custom container. It imports the necessary Rax components and the Portal component itself.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-portal/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render, Fragment } from \"rax\";\nimport View from \"rax-view\";\nimport Text from \"rax-text\";\nimport Portal from \"rax-portal\";\n\nconst Demo = (props) => {\n  return (\n    <Fragment>\n      <View>\n        <Text>Demo content</Text>\n      </View>\n      <Portal>\n        <View>\n          <Text>Portal content</Text>\n        </View>\n      </Portal>\n      <Portal container={document.body}>\n        <View>\n          <Text>Portal with custom container content</Text>\n        </View>\n      </Portal>\n    </Fragment>\n  );\n};\n\nrender(<Demo />);\n```\n\n----------------------------------------\n\nTITLE: Slider.Item Component Usage\nDESCRIPTION: Explains the use of the `Slider.Item` component as a wrapper for each slide within the Slider.  It highlights the component's behavior across different Rax environments (Weex, Web, and mini-programs) and advises against setting styles or binding events directly to it, except when targeting only Web and Weex.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-slider/README.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Rax TextInput Rendering with Universal Driver\nDESCRIPTION: This snippet renders the main App component using the Rax render function with the driver-universal.  It bootstraps the Rax application and renders it to the document body. The `driver-universal` ensures compatibility across different platforms.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-textinput/demo/index.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nrender(<App />, document.body, { driver: DU });\n```\n\n----------------------------------------\n\nTITLE: Slider.slideTo Method Definition\nDESCRIPTION: Defines the `Slider.slideTo` method, which allows programmatically scrolling to a specific view by its index. This method requires the index of the target view as a number.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-slider/README.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Styling Pagination Dots in Rax Slider (JS)\nDESCRIPTION: This code snippet demonstrates how to style the pagination dots within the Rax Slider component using the `paginationStyle` property. It defines the position, size, and colors of the pagination dots for both the normal and selected states. The styling can be customized to match the application's design. Note that miniApp and quickApp only support a subset of these styles.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-slider/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  position: 'absolute',\n  width: '40rpx',\n  height: '40rpx',\n  bottom: '20rem',\n  left: 0,\n  itemColor: 'rgba(255, 255, 255, 0.5)',\n  itemSelectedColor: 'rgb(255, 80, 0)',\n  itemSize: '8rpx'\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Rax Embed Component\nDESCRIPTION: This line imports the Embed component from the 'rax-embed' package, making it available for use in your Rax application. The Embed component provides a cross-platform way to embed web content, using native implementations for web, Weex, and mini-app environments.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-embed/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Embed from 'rax-embed';\n```\n\n----------------------------------------\n\nTITLE: Running Rax Tests\nDESCRIPTION: This snippet shows how to run tests for the entire project or for a specific package, in this case `rax-countdown`. The tests are executed using the `npm run test` command.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test\n$ npm run test -- packages/rax-countdown\n```\n\n----------------------------------------\n\nTITLE: Rendering Image - Rax/JSX\nDESCRIPTION: This code snippet demonstrates a basic usage of the Rax Image component to display an image from a remote URI. It sets the source URI and applies styling for height and width.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-image/README.md#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport Image from '../src/index';\n\nconst App = () => {\n  const imageRef = useRef(null);\n  return (\n    <Image\n      ref={imageRef}\n      source={{\n        uri: 'https://gw.alicdn.com/tfs/TB1bBD0zCzqK1RjSZFpXXakSXXa-68-67.png',\n      }}\n      style={{\n        height: '68rpx',\n        width: '67rpx',\n      }}\n    />\n  );\n};\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Importing RefreshControl in JSX\nDESCRIPTION: This imports the RefreshControl component from the rax-refreshcontrol package, making it available for use within your JSX code.  It's a necessary step to use the RefreshControl component in a Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-refreshcontrol/README.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport RefreshControl from 'rax-refreshcontrol';\n```\n\n----------------------------------------\n\nTITLE: Install rax-text component\nDESCRIPTION: This command installs the rax-text component from npm and saves it as a project dependency. It is a prerequisite for using the component in a Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-text/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-text --save\n```\n\n----------------------------------------\n\nTITLE: Installation using npm\nDESCRIPTION: Installs the rax-icon package using npm. This command adds the rax-icon component to your project's dependencies, allowing you to use it in your Rax application. The `--save` flag ensures that the package is added to your `package.json` file.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-icon/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-icon --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-view with npm\nDESCRIPTION: This command installs the rax-view component as a dependency in your project using npm.  It adds the component to your project's package.json file.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-view/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-view --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-countdown using npm\nDESCRIPTION: This command installs the rax-countdown component as a dependency in your project. This allows you to use the Countdown component in your Rax application for displaying countdown timers.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-countdown/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install rax-countdown --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-gesture-view using npm\nDESCRIPTION: This command installs the rax-gesture-view component as a dependency in your Rax project. This will allow you to use the GestureView component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-gesture-view/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-gesture-view --save\n```\n\n----------------------------------------\n\nTITLE: Installing Rax XSlider\nDESCRIPTION: This command installs the rax-xslider package from npm and saves it as a project dependency.  This allows you to use the XSlider component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-xslider/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-xslider --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-link\nDESCRIPTION: Command to install the rax-link component using npm. This command adds rax-link as a dependency to the project.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-link/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-link --save\n```\n\n----------------------------------------\n\nTITLE: Installing Rax Image component\nDESCRIPTION: This command installs the rax-image package from npm and saves it as a dependency in your project. It allows you to use the Image component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-image/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-image --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-tab-panel with npm\nDESCRIPTION: This command installs the rax-tab-panel component as a dependency in your project using npm (Node Package Manager). The --save flag ensures that the package is added to your project's package.json file.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-tab-panel/README_CN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-tab-panel --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-parallax via npm\nDESCRIPTION: This command installs the rax-parallax component from npm and saves it as a project dependency. This is a prerequisite for using the component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-parallax/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save rax-parallax\n```\n\n----------------------------------------\n\nTITLE: Installing rax-recyclerview\nDESCRIPTION: This command installs the rax-recyclerview package as a project dependency using npm.  It adds the component to your project, allowing you to import and use it in your Rax application. Make sure you have Node.js and npm installed.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-recyclerview/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install rax-recyclerview --save\n```\n\n----------------------------------------\n\nTITLE: Installing Rax Slider with npm\nDESCRIPTION: This command installs the rax-slider package from npm and saves it as a dependency in your project's package.json file. It allows you to use the slider component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-slider/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-slider --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-swiper\nDESCRIPTION: This command installs the rax-swiper package from npm and saves it as a dependency in your project.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-swiper/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-swiper --save\n```\n\n----------------------------------------\n\nTITLE: Installing Rax ScrollView using npm\nDESCRIPTION: This command installs the rax-scrollview component using npm. It adds rax-scrollview to the project's dependencies. This allows the component to be used in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-scrollview/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-scrollview --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-refreshcontrol\nDESCRIPTION: This command installs the rax-refreshcontrol component from npm and saves it as a project dependency. This allows you to use the component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-refreshcontrol/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-refreshcontrol --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-qrcode with npm\nDESCRIPTION: This command installs the rax-qrcode package as a project dependency using npm. This allows you to use the QRCode component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-qrcode/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-qrcode --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-textinput via npm\nDESCRIPTION: This command installs the rax-textinput component from npm and saves it as a dependency in your project's package.json file.  This allows you to use the TextInput component in your Rax application.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-textinput/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-textinput --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-barcode using npm\nDESCRIPTION: This command installs the rax-barcode package as a dependency in your Rax project.  It uses npm to download and add the package to your node_modules directory and package.json file.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-barcode/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install rax-barcode --save\n```\n\n----------------------------------------\n\nTITLE: Installing Rax Embed Package\nDESCRIPTION: This command installs the rax-embed package as a project dependency using npm. This package provides the Embed component for embedding web content within Rax applications. Ensure you have npm installed and configured to use this command.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-embed/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-embed --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-portal\nDESCRIPTION: This command installs the rax-portal package as a dependency in your project.  It uses npm to download and add the package to your node_modules directory and package.json file.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-portal/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-portal --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-canvas with npm\nDESCRIPTION: This command installs the rax-canvas component as a dependency to your project. It uses the npm package manager.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-canvas/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-canvas --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-video via npm\nDESCRIPTION: This command installs the rax-video component from npm and saves it as a project dependency. It allows developers to use the video playback component in their Rax applications.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-video/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install rax-video --save\n```\n\n----------------------------------------\n\nTITLE: QRCode Basic Usage in Rax\nDESCRIPTION: This snippet demonstrates the basic usage of the QRCode component within a Rax application. It imports necessary modules like `createElement`, `render`, `DriverUniversal`, and the `QRCode` component itself. The `QRCode` component is then used with a sample URL as data and specific width and height styles.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-qrcode/demo/index.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n/* eslint-disable import/no-extraneous-dependencies */\nimport { createElement, render } from 'rax';\nimport DriverUniversal from 'driver-universal';\nimport QRCode from '../src/index';\n\nfunction App() {\n  return (\n    <QRCode\n      data=\"http://market.m.taobao.com/apps/market/m-vip/88-festival.html?wh_weex=true&wx_navbar_transparent=true\"\n      style={{ width: 400, height: 400 }}\n    />\n  );\n}\n\nrender(<App />, document.body, { driver: DriverUniversal });\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: This snippet shows how to install the necessary dependencies for the rax-components project. It navigates to the project directory and runs the `npm install` command.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd rax-components/\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Building Rax Packages\nDESCRIPTION: This snippet illustrates how to build all Rax packages or a specific subset of packages using the `npm run build` command.  The `--packages` flag allows specifying which packages to build.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run build # build all packages\n$ npm run build -- --packages=rax-text,rax-view\n```\n\n----------------------------------------\n\nTITLE: Installing rax-modal\nDESCRIPTION: This command installs the rax-modal component as a dependency to your rax project.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-modal/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-modal --save\n```\n\n----------------------------------------\n\nTITLE: Installing rax-waterfall with npm\nDESCRIPTION: This command installs the rax-waterfall package as a dependency for your Rax project. It adds the package to your project's node_modules directory and updates your package.json file.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-waterfall/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install rax-waterfall --save\n```\n\n----------------------------------------\n\nTITLE: Developing a Rax Package\nDESCRIPTION: This snippet demonstrates how to develop a specific Rax package, in this case `rax-text`. It navigates to the package directory, installs dependencies, starts the development server, and builds the package.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd packages/rax-text\n$ npm install\n$ npm start\n\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Default CSS Styles for rax-view\nDESCRIPTION: These are the default CSS styles applied to the rax-view component. They provide basic styling for layout and appearance.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/packages/rax-view/README.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.rax-view-v2 {\n   box-sizing: border-box;\n   display: flex;\n   flex-direction: column;\n   flex-shrink: 0;\n   align-content: flex-start;\n   border: 0 solid black;\n   margin: 0;\n   padding: 0;\n   min-width: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Rax Lint\nDESCRIPTION: This snippet demonstrates how to run the linter for the project using the command `npm run lint`.\nSOURCE: https://github.com/raxjs/rax-components/blob/master/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```"
  }
]