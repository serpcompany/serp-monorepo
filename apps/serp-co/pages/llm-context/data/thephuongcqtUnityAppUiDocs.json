[
  {
    "owner": "thephuongcqt",
    "repo": "unity-app-ui-docs",
    "content": "TITLE: Implementing App Lifecycle Events with UIToolkitAppBuilder in C#\nDESCRIPTION: This code snippet demonstrates how to create a custom app builder class by inheriting from `UIToolkitAppBuilder<MyApp>`. It overrides the `OnAppInitialized`, `OnConfiguringApp`, and `OnAppShuttingDown` methods to hook into the app lifecycle events. This allows for custom initialization, configuration, and shutdown logic within the Unity application.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-sample.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyAppBuilder : UIToolkitAppBuilder<MyApp>\n{\n    protected override void OnAppInitialized(MyApp app)\n    {\n        base.OnAppInitialized(app);\n        // Called after the app is initialized\n    }\n\n    protected override void OnConfiguringApp(AppBuilder builder)\n    {\n        base.OnConfiguringApp(builder);\n        // Called during app configuration\n    }\n\n    protected override void OnAppShuttingDown(MyApp app)\n    {\n        base.OnAppShuttingDown(app);\n        // Called before the app is shut down\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Observable ViewModel in C#\nDESCRIPTION: This code snippet illustrates how to define a `ViewModel` named `MainViewModel` that inherits from `ObservableObject`. The `[ObservableObject]` attribute (likely from a source generator) is used to automatically generate observable properties and commands.  The constructor is used for initializing the ViewModel's state.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-sample.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[ObservableObject]\npublic partial class MainViewModel\n{\n    public MainViewModel()\n    {\n        // Construct the view model\n    }\n\n    // Define properties and commands\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a VisualElement with ViewModel Injection in C#\nDESCRIPTION: This snippet demonstrates how to create a `VisualElement` named `MainPage` and inject the `MainViewModel` through its constructor. The dependency injection system automatically provides the `MainViewModel` instance. This follows the MVVM pattern, where the View receives its ViewModel via constructor injection.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-sample.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MainPage : VisualElement\n{\n    public MainPage(MainViewModel viewModel) // <- Constructor injection, viewModel will be provided as a service\n    {\n        // Construct the UI and store the view model\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Property Implementation in MVVM using ObservableObject (C#)\nDESCRIPTION: This example demonstrates a simple property implementation using the ObservableObject class. It shows how to define a property with a backing field and use the SetProperty method to update the value and raise property change notifications when using the CreateProperty attribute.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-observable.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\nusing Unity.Properties;\n\npublic class MyViewModel : ObservableObject\n{\n    private string _name;\n\n    [CreateProperty]\n    public string Name\n    {\n        get => _name;\n        set => SetProperty(ref _name, value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RelayCommand Usage Example in C#\nDESCRIPTION: This example demonstrates how to create and use a `RelayCommand` within a ViewModel in C#.  It shows how to define the command, execute a delegate, and determine if the command can be executed, supporting basic command implementation in MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-command.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyViewModel : ObservableObject\n{\n    public RelayCommand MyCommand { get; }\n\n    public MyViewModel()\n    {\n        MyCommand = new RelayCommand(ExecuteMyCommand, CanExecuteMyCommand);\n    }\n\n    private void ExecuteMyCommand()\n    {\n        // Do something\n    }\n\n    private bool CanExecuteMyCommand()\n    {\n        // Return true or false depending on whether the command can be executed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic RelayCommand Usage Example in C#\nDESCRIPTION: This example shows how to use the generic version of `RelayCommand` to pass a parameter to the command delegate in C#. It defines a command that accepts a string parameter, enhancing command functionality with input data.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-command.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyViewModel : ObservableObject\n{\n    public RelayCommand<string> MyCommand { get; }\n\n    public MyViewModel()\n    {\n        MyCommand = new RelayCommand<string>(ExecuteMyCommand, CanExecuteMyCommand);\n    }\n\n    private void ExecuteMyCommand(string parameter)\n    {\n        // Do something\n    }\n\n    private bool CanExecuteMyCommand(string parameter)\n    {\n        // Return true or false depending on whether the command can be executed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Reducer - C#\nDESCRIPTION: Defines a reducer function `IncrementReducer` that takes the current `CounterState` and an `Increment` action as input. It returns a new `CounterState` with the `Count` property incremented by 1. This reducer is a pure function, ensuring predictable state updates.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\npublic static CounterState IncrementReducer(CounterState state, Increment action)\n{\n    return state with { Count = state.Count + 1 };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Counter State Record - C#\nDESCRIPTION: Defines a `CounterState` record with an immutable `Count` property, initialized to 0. Records are a C# 9.0 feature suitable for representing immutable state objects in Redux.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_6\n\nLANGUAGE: cs\nCODE:\n```\npublic record CounterState\n{\n    public int Count { get; init; } = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Increment Action Creator - C#\nDESCRIPTION: Defines an action creator for the `Increment` action. It includes a constant string for the action type and an `ActionCreator` instance. The `ActionCreator` is used to create instances of the `Increment` action to be dispatched to the store.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_8\n\nLANGUAGE: cs\nCODE:\n```\npublic static Actions\n{\n    public const string Increment = \"counter/Increment\";\n}\n\npublic static readonly ActionCreator Increment = Actions.Increment; // implicit construction using string value.\n```\n\n----------------------------------------\n\nTITLE: ICommand Attribute Usage Example in C#\nDESCRIPTION: This example illustrates how to use the `ICommand` attribute to mark methods as commands in a ViewModel, which are then automatically wrapped in `RelayCommand` or `AsyncRelayCommand` instances.  It shows both synchronous and asynchronous command definitions using the attribute.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-command.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ObservableObject]\npublic partial class MyViewModel\n{\n    [ICommand]\n    void DoSomething() { /* Your logic here */ }\n\n    [ICommand]\n    Task DoSomethingAsync(string textParameter, CancellationToken token) { /* Your logic here */ }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic partial class MyViewModel\n{\n    RelayCommand m_DoSomethingCommand;\n    public RelayCommand DoSomethingCommand => m_DoSomethingCommand ??= new RelayCommand(DoSomething);\n\n    AsyncRelayCommand<string> m_DoSomethingAsyncCommand;\n    public AsyncRelayCommand<string> DoSomethingAsyncCommand => m_DoSomethingAsyncCommand ??= new AsyncRelayCommand<string>(DoSomethingAsync);\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Increment Action - C#\nDESCRIPTION: Dispatches the `Increment` action to the Redux store, triggering the associated reducer to update the state.  Relies on the `Increment` action creator defined earlier.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_10\n\nLANGUAGE: cs\nCODE:\n```\nstore.Dispatch(Increment.Invoke());\n```\n\n----------------------------------------\n\nTITLE: Creating an App Entry Point with Dependency Injection in C#\nDESCRIPTION: This code snippet showcases the creation of a custom `App` class, `MyApp`, inheriting from the base `App` class.  It overrides `InitializeComponent` to add the `MainPage` (a VisualElement) to the root visual element using dependency injection via `services.GetRequiredService<MainPage>()`. The `Shutdown` method is also overridden for app shutdown logic.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-sample.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyApp : App\n{\n    public new static MyApp current => (MyApp)App.current;\n\n    public override void InitializeComponent()\n    {\n        base.InitializeComponent();\n        rootVisualElement.Add(services.GetRequiredService<MainPage>());\n    }\n\n    public override void Shutdown()\n    {\n        // Called when the app is shutting down\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Store Service into ViewModel - C#\nDESCRIPTION: Demonstrates constructor injection of the `IStoreService` into a ViewModel. This allows the ViewModel to interact with the Redux store to dispatch actions and subscribe to state changes. Uses the ObservableObject base class from Unity.AppUI.MVVM to enable property binding.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_14\n\nLANGUAGE: cs\nCODE:\n```\npublic class MyViewModel : ObservableObject\n{\n    readonly IStoreService m_StoreService;\n\n    public MyViewModel(IStoreService storeService)\n    {\n        m_StoreService = storeService;\n\n        // Subscribe to the state changes etc...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Change Listener - C#\nDESCRIPTION: This C# code demonstrates listening to dependency changes when using property injection in an MVVM ViewModel. Implementing IDependencyInjectionListener allows reacting to injected dependencies. It uses Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\n\npublic class MyViewModel : ObservableObject, IDependencyInjectionListener\n{\n    [Service]\n    public MyModel Model { get; private set; }\n\n    public void OnDependenciesInjected()\n    {\n        // Do something related to the injected dependencies...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using AsyncThunkCreator for Asynchronous Operations - C#\nDESCRIPTION: Demonstrates using `AsyncThunkCreator` to perform asynchronous operations. The code defines actions, a service, a viewmodel and a view to integrate `AsyncThunkCreator` and `Store` together. Requires Unity.AppUI.MVVM and Unity.AppUI.Core namespaces.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_16\n\nLANGUAGE: cs\nCODE:\n```\nusing Unity.AppUI.Core;\nusing Unity.AppUI.UI;\nusing Unity.AppUI.MVVM;\n\n// Actions\npublic static class MyActions\n{\n    static readonly ActionCreator IncrementAction = \"mySlice/increment\";\n\n    static readonly AsyncThunkCreator<int> IncrementAsyncThunk = new AsyncThunkCreator<int>(\"incrementAsyncThunk\", async api =>\n    {\n        await Task.Delay(1000);\n        api.Dispatch(IncrementAction.Invoke()); // you can dispatch other actions inside the thunk.\n        return 0; // thunk always returns a value.\n    });\n}\n\n// Service\npublic class StoreService : IStoreService\n{\n    public Store Store { get; }\n\n    public StoreService()\n    {\n        Store = StoreFactory.CreateStore(new []\n        {\n            StoreFactory.CreateSlice(\n                \"mySlice\",\n                new MyState(),\n                reducer =>\n                {\n                    reducer.AddCase(MyActions.IncrementAction, (state, action) => state with { Count = state.Count + 1 });\n                }),\n                extraReducer =>\n                {\n                    extraReducer.AddCase(MyActions.IncrementAsyncThunk.pending, (state, action) => state with { CanIncrement = false });\n                    extraReducer.AddCase(MyActions.IncrementAsyncThunk.fulfilled, (state, action) => state with { CanIncrement = true });\n                }),\n        });\n    }\n}\n\n// ViewModel\npublic class MyViewModel : ObservableObject\n{\n    readonly IStoreService m_StoreService;\n\n    public MyViewModel(IStoreService storeService)\n    {\n        m_StoreService = storeService;\n\n        // Subscribe to the state changes etc...\n        m_StoreService.Store.Subscribe<MyState>(\"mySlice\", state => {\n            CanIncrement = state.CanIncrement;\n        });\n    }\n\n    private bool m_CanIncrement;\n\n    public bool CanIncrement\n    {\n        get => m_CanIncrement;\n        set => SetProperty(ref m_CanIncrement, value);\n    }\n\n    public Increment()\n    {\n        var action = IncrementAsyncThunk.Invoke();\n        m_StoreService.Store.Dispatch(action);\n    }\n}\n\n// View\npublic class MyView : VisualElement\n{\n    readonly Button m_Button;\n\n    public MyView(MyViewModel viewModel)\n    {\n        m_Button = new Button();\n        m_Button.clicked += () => viewModel.Increment();\n        Add(m_Button);\n\n        viewModel.PropertyChanged += OnViewModelPropertyChanged;\n    }\n\n    private void OnViewModelPropertyChanged(object sender, PropertyChangedEventArgs e)\n    {\n        var viewModel = (MyViewModel)sender;\n        if (e.PropertyName == nameof(MyViewModel.CanIncrement))\n            button.SetEnabled(viewModel.CanIncrement);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Store Service Interface and Implementation - C#\nDESCRIPTION: Defines an interface `IStoreService` and its implementation `StoreService`.  `StoreService` holds a reference to the Redux `Store` instance. The constructor creates the store using `StoreFactory`. This service is intended to be used within the MVVM pattern for accessing the store.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_12\n\nLANGUAGE: cs\nCODE:\n```\npublic interface IStoreService\n{\n    Store Store { get; }\n}\n\npublic class StoreService\n{\n    public Store Store { get; }\n\n    public StoreService()\n    {\n        Store = StoreFactory.CreateStore( /* ... */ );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Singleton Dependency Usage in MVVM - C#\nDESCRIPTION: This C# code showcases how to use singleton dependencies within an MVVM ViewModel. Singleton dependencies are created once and reused.  The code verifies that requesting a singleton service from scoped service providers returns the same instance. It depends on Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\n\npublic class MyViewModel : ObservableObject\n{\n    public MyViewModel(IServiceProvider serviceProvider)\n    {\n        var singletonService = serviceProvider.GetRequiredService<ISingletonService>();\n\n        using (var scope = serviceProvider.CreateScope())\n        {\n            var scopedService = scope.ServiceProvider.GetRequiredService<ISingletonService>();\n            Debug.Assert(singletonService == scopedService);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Button Component with USS\nDESCRIPTION: This CSS snippet demonstrates how to style a button component using USS classes. It sets the padding property using a predefined USS variable from the themes folder. This ensures consistency with the App UI Design System guidelines.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/styling.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Button.uss */\n.appui-button {\n    padding: 0 var(--appui-spacing-100);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dependencies in AppBuilder - C#\nDESCRIPTION: This C# code shows how to register dependencies within the OnConfiguringApp event of a custom AppBuilder in Unity App UI.  Dependencies are registered to the service collection for dependency injection. It inherits from UIToolkitAppBuilder and depends on Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyAppBuilder : UIToolkitAppBuilder<MyApp>\n{\n    protected override void OnConfiguringApp(AppBuilder appBuilder)\n    {\n        base.OnConfiguringApp(appBuilder);\n        // Register dependencies here\n        // ex: appBuilder.services.AddSingleton<IMyService, MyService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deriving from BaseVisualElement/BaseTextElement in C#\nDESCRIPTION: This snippet illustrates how to derive custom controls from the `BaseVisualElement` and `BaseTextElement` classes in App UI. This is recommended to benefit from common properties and handle context provisioning, such as overriding the visual tree's theme, style, and layout direction. `BaseVisualElement` is for non-text controls, while `BaseTextElement` is for text-based controls.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-ui-components.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// for non text-based controls\npublic class MyCustomControl : BaseVisualElement\n{\n   // ...\n}\n\n// for text-based controls\npublic class MyCustomTextControl : BaseTextElement\n{\n   // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Class as Dependency - C#\nDESCRIPTION: This C# code demonstrates how to register a class directly as a dependency using AddSingleton within the AppBuilder.  This approach is suitable when a single implementation is sufficient. It requires Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyService\n{\n    public void DoSomething()\n    {\n        // Do something\n    }\n}\n// Register the service inside the app builder\npublic class MyAppBuilder : UIToolkitAppBuilder<MyApp>\n{\n    protected override void OnConfiguringApp(AppBuilder appBuilder)\n    {\n        base.OnConfiguringApp(appBuilder);\n        appBuilder.services.AddSingleton<MyService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Stylesheet Variables in CSS\nDESCRIPTION: This code snippet demonstrates how to define USS variables within a stylesheet file for a custom App UI theme. It shows the use of the `appui--` prefix for the theme name, which is required for identification by the App UI context provider. The snippet defines a primary color variable as an example.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/theming.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.appui--darkBlue {\n    --appui-primary-100: #E3F2FD;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Visual Controller to NavHost - C#\nDESCRIPTION: This C# code shows how to assign a custom visual controller (e.g., `MyVisualController`) to a `NavHost` instance.  This step is necessary to activate the custom navigation logic and control the appearance of navigation components. The NavHost's `visualController` property is assigned to a new instance of the custom controller.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/navigation.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar navHost = new NavHost();\nnavHost.visualController = new MyVisualController();\n```\n\n----------------------------------------\n\nTITLE: Simplified Property Implementation using ObservableObject and ObservableProperty attributes (C#)\nDESCRIPTION: This example demonstrates a simplified property implementation using the ObservableObject and ObservableProperty attributes. It shows how to automatically generate the property and notification logic using these attributes.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-observable.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\n\n[ObservableObject]\npublic partial class MyViewModel\n{\n    [ObservableProperty]\n    private string _name;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Localized String Using LangContext in Unity C#\nDESCRIPTION: This snippet demonstrates how to get a localized string of a given entry using the locale defined inside the LangContext. It uses the RegisterContextChangedCallback to listen for changes to the LangContext and then retrieves the translated string asynchronously.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/localization.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.UI;\n\npublic class MyComponent : BaseVisualElement\n{\n    public MyComponent()\n    {\n        this.RegisterContextChangedCallback<LangContext>(OnLangContextChanged);\n    }\n\n    // This method will be called when the LangContext changes\n    async void OnLangContextChanged(ContextChangedEvent<LangContext> evt)\n    {\n        var ctx = evt.context;\n        if (ctx != null)\n        {\n            var translatedString = await ctx.GetLocalizedStringAsync(\"@myTable:myEntry\");\n        }\n    }\n\n    // This method will check for the currently provided locale\n    // without using any listener\n    public void TranslateNow()\n    {\n        var ctx = this.GetContext<LangContext>();\n        if (ctx != null)\n        {\n            var translatedString = ctx.GetLocalizedStringAsync(\"@myTable:myEntry\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Injection in MVVM - C#\nDESCRIPTION: This C# code demonstrates constructor injection in an MVVM ViewModel. The MyModel dependency is passed through the constructor, establishing a required relationship. It shows basic MVVM usage.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyViewModel : ObservableObject\n{\n    public MyViewModel(MyModel model)\n    {\n        Model = model;\n    }\n    public MyModel Model { get; }\n}\n```\n\n----------------------------------------\n\nTITLE: Providing a New Language with Custom Translator in Unity C#\nDESCRIPTION: This snippet shows how to provide a new language to a part of the UI by providing a new LangContext to the root element. It also demonstrates how to provide a custom translation function to customize the localization operation.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/localization.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.UI;\n\npublic class MyComponent : BaseVisualElement\n{\n    public MyComponent()\n    {\n        // instantiate a new LangContext with the desired locale\n        var newLangContext = new LangContext(\"fr-FR\");\n        // optionally provide a function to customize the localization operation\n        newLangContext.GetLocalizedStringAsyncFunc = MyCustomTranslator;\n        this.ProvideContext(newLangContext);\n    }\n\n    // This method will be called when an element request a localized string based on the newLangContext\n    static async Task<string> MyCustomTranslator(string referenceText, string lang, params object[] arguments)\n    {\n        // custom translation logic here...\n        return \"translated string\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Command Binding Example in C#\nDESCRIPTION: This example demonstrates how to bind a command to a UI element in App UI, specifically a button. It shows how to listen to the button's `clicked` event and execute the bound command. It also shows how to enable/disable the button based on the command's `CanExecute` state.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-command.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nmyButton.clicked += () => MyCommand.Execute();\n```\n\nLANGUAGE: csharp\nCODE:\n```\nMyCommand.CanExecuteChanged += (sender, args) => myButton.SetEnabled(MyCommand.CanExecute());\n```\n\n----------------------------------------\n\nTITLE: Creating InputLabel with TextField in Unity C#\nDESCRIPTION: This code snippet demonstrates how to create an InputLabel element with a TextField in Unity using C#. It includes setting properties such as alignment, overflow, indicator type, and required status. It also shows how to validate the text field's value and display a help message based on the validation result.  Dependencies: Unity AppUI framework.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/inputs.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// This code creates a Name field with a label.\n// The field is valid if it contains at least 1 character.\nvar myField = new TextField();\nvar label = new InputLabel(\"Name\");\nlabel.inputAlignment = Align.Stretch;\nlabel.labelOverflow = TextOverflow.Ellipsis;\nlabel.indicatorType = IndicatorType.Asterisk;\nlabel.required = true;\nlabel.helpVariant = HelpTextVariant.Destructive;\nmyField.validateValue = val => !string.IsNullOrEmpty(val);\nmyField.RegisterValueChangedCallback(evt =>\n{\n    label.helpMessage = myField.invalid ? \"Name is required\" : null;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Subscribing to the Store - C#\nDESCRIPTION: Creates a Redux store using `StoreFactory` and a slice named \"counter\", providing an initial state and associating the `IncrementReducer` with the `Actions.Increment` action. It subscribes to state changes of the `CounterState` slice, logging the current count to the debug console on each update. Requires Unity.AppUI.Redux namespace.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_9\n\nLANGUAGE: cs\nCODE:\n```\nvar store = StoreFactory.CreateStore(new []\n{\n    StoreFactory.CreateSlice(\n        \"counter\",\n        new CounterState(),\n        builder => {\n            builder.Add(Actions.Increment, IncrementReducer);\n        }),\n});\n\nvar subscription = store.Subscribe<CounterState>(\"counter\", state => {\n    Debug.Log($\"Counter value: {state.Count}\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using LocalizedTextElement in C#\nDESCRIPTION: This snippet illustrates how to use the `LocalizedTextElement` class to display localized text in a custom UI control when working with the Unity Localization package.  A new `LocalizedTextElement` is created with a localization key (tableName:entryKey) and added to the UI hierarchy. This allows the text displayed to adapt based on the selected language.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-ui-components.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCustomControl : VisualElement\n{\n    public MyCustomControl()\n    {\n        // Create a new LocalizedTextElement\n        var localizedText = new LocalizedTextElement(\"@tableName:entryKey\");\n        // Add it to the hierarchy\n        Add(localizedText);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Async Thunk - C#\nDESCRIPTION: This snippet demonstrates the creation and usage of an `AsyncThunkCreator` for handling asynchronous operations within a Redux store. It defines a state, a long-running operation (`MyLongOperation`), creates an `AsyncThunkCreator`, configures the store with a slice that uses the thunk, and dispatches the thunk. The result of the async operation is demonstrated with asserts.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Example of State for the Redux Store.\nrecord MyState\n{\n    public string value { get; set; } = null;\n    public string status { get; set; } = \"idle\";\n}\n\n// An example of a long operation that will return the same string value as\n// the one passed as argument, but with 250ms of delay.\nasync Task<string> MyLongOperation(string arg, ThunkAPI<string,string> api, CancellationToken token)\n{\n  await Task.Delay(250, token);\n  return arg;\n}\n\n// Create an AsyncThunkCreator that will be used to dispatch the long operation.\nvar asyncThunk = new AsyncThunkCreator(\"myAsyncThunk\", MyLongOperation);\n\n// Configure the Redux Store.\nvar store = Store.CreateStore(new []\n{\n    Store.CreateSlice(\n        \"mySlice\",\n        new MyState(),\n        null,\n        builder =>\n        {\n            // In the extra reducers, you can link a reducer to sub-actions generated by the AsyncThunkCreator.\n            // Available sub-actions are: pending/rejected/fulfilled.\n            builder.AddCase(asyncThunk.pending, (state, action) => state with { value = null, status = \"pending\" });\n            builder.AddCase(asyncThunk.rejected, (state, action) => state with { value = null, status = \"rejected\" });\n            builder.AddCase(asyncThunk.fulfilled, (state, action) => state with { value = action.payload, status = \"done\" });\n        }),\n});\n\n// You can now kick start your long operation by dispatching your AsyncThunkAction.\nvar action = asyncThunk.Invoke(\"My Thunk Argument\");\n\n// OR You can use *await* on the Dispatch method if you want to wait for operation completion too.\nawait store.DispatchAsyncThunk(action);\n\nvar state = store.GetState<MyState>(\"mySlice\");\nAssert.AreEqual(\"My Thunk Argument\", state.value);\nAssert.AreEqual(\"done\", state.status);\n```\n\n----------------------------------------\n\nTITLE: Extending ExVisualElement with Styling in C#\nDESCRIPTION: This snippet demonstrates how to derive a custom control from `ExVisualElement`, which extends `BaseVisualElement` and provides additional styling options like `box-shadow` and `outline`. It shows how to set the `passMask` property to specify which rendering passes to use and how to add a USS class to customize the control's styling. The example restricts rendering to borders, background color, and outset shadows.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-ui-components.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCustomControl : ExVisualElement\n{\n    public MyCustomControl()\n    {\n        // Set the pass mask to only render specific passes\n        passMask = Passes.Clear\n            | Passes.Borders\n            | Passes.BackgroundColor\n            | Passes.OutsetShadows;\n        // Define a USS class to customize the styling\n        AddToClassList(\"my-custom-control\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Component as Context Provider - C#\nDESCRIPTION: This example demonstrates how to create a custom component that is also a context provider and listener by inheriting from BaseVisualElement. It shows how to provide a context and register a context changed callback within the component's constructor.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/contexts.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.Core;\nusing Unity.AppUI.UI;\n\npublic class MyCustomComponent : BaseVisualElement\n{\n    public MyCustomComponent()\n    {\n        // Provide a custom context\n        ProvideContext(new MyContext(42));\n\n        // Or Register the context changed callback\n        // Note that this callback will be also called when the listener element is also a the provider\n        RegisterContextChangedCallback<MyContext>(OnMyContextChanged);\n    }\n\n    public void OnContextChanged<T>(ContextChangedEvent<T> evt) where T : class, IContext\n    {\n        // Do something with the context\n    }\n\n    void OnMyContextChanged(ContextChangedEvent<MyContext> evt)\n    {\n        // Do something with the context\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Action Component Events - C#\nDESCRIPTION: This code snippet demonstrates the correct way to handle events from an App UI Button component using the `clickable` property, which provides a unified way to handle triggers from various sources. It also shows an incorrect way using `RegisterCallback<ClickEvent>`. Additionally, it shows how to use the special constructor for the button.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/actions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.UI;\n\nvar button = new Button();\n\n// ❌ Wrong way to handle the trigger of the button, as it can be triggered from multiple sources\nbutton.RegisterCallback<ClickEvent>(evt => Debug.Log(\"Button clicked\"));\n\n// ✅ Correct way to handle the trigger of the button from any source\nbutton.clickable.clicked += () => Debug.Log(\"Button clicked\");\n\n// You could also use the special constructor if available\nvar otherButton = new Button(() => Debug.Log(\"Button clicked\"));\n```\n\n----------------------------------------\n\nTITLE: Styling ExVisualElement with CSS\nDESCRIPTION: This snippet demonstrates how to style an `ExVisualElement` using USS (Unity Style Sheets). It shows how to define custom properties for `box-shadow` to control offset, spread, blur, and color.  These properties are then applied to a class assigned to the `ExVisualElement` instance.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-ui-components.md#_snippet_5\n\nLANGUAGE: CSS\nCODE:\n```\n.my-custom-control {\n    // ...\n    --box-shadow-offset-x: 0;\n    --box-shadow-offset-y: 8;\n    --box-shadow-spread: 16;\n    --box-shadow-blur: 15;\n    --box-shadow-color: rgba(0,0,0,.65);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Dark Mode Theme in App UI RadioGroup (C#)\nDESCRIPTION: This code snippet demonstrates how to use the `darkMode` property and `darkModeChanged` event in App UI to create a theme switcher using a `RadioGroup`. It dynamically switches between light and dark themes based on the system theme or user preference. The snippet utilizes `ThemeContext` to apply the selected theme and persists the selected theme using `PlayerPrefs`.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/native-integration.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Get the closest provider, assuming you call this method from a UI Toolkit element\n// contained in a hierarchy that has a ThemeContext provider\nvar provider = this.GetContextProvider<ThemeContext>();\n\n// Create the callback that will be called when the system theme changes\nvoid OnDarkModeChanged(bool darkMode) => provider.theme = darkMode ? \"dark\" : \"light\";\n\n// Setup the RadioGroup\nvar themeSwitcher = new RadioGroup();\nthemeSwitcher.Add(new Radio(\"System\") { key = \"system\" });\nthemeSwitcher.Add(new Radio(\"Dark\" { key = \"dark\" }));\nthemeSwitcher.Add(new Radio(\"Light\" { key = \"light\" }));\nvoid SetTheme()\n{\n    Platform.darkModeChanged -= OnDarkModeChanged;\n    if (themeSwitcher.value == \"system\")\n    {\n        Platform.systemThemeChanged += OnDarkModeChanged;\n        provider.theme = Platform.darkMode ? \"dark\" : \"light\";\n    }\n    else\n    {\n        provider.theme = themeSwitcher.value;\n    }\n    PlayerPrefs.SetInt(\"theme\", themeSwitcher.value);\n}\nthemeSwitcher.RegisterValueChangedCallback(_ => SetTheme());\n\n// Load and set the theme value\nthemeSwitcher.SetValueWithoutNotify(PlayerPrefs.GetInt(\"theme\", \"dark\"));\nSetTheme();\n```\n\n----------------------------------------\n\nTITLE: Implementing Pressable in C#\nDESCRIPTION: This snippet shows how to utilize the `Pressable` class to manage the pressing of an actionable element within a custom UI control.  A `Pressable` instance is created and assigned to a member variable. The `OnPressedInternal` method is invoked when the element is pressed, allowing you to handle the press event. Access to the `Pressable` manipulator is encouraged to handle press events externally.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-ui-components.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCustomControl : VisualElement\n{\n    readonly Pressable m_Pressable;\n\n    public MyCustomControl()\n    {\n        m_Pressable = new Pressable(OnPressedInternal);\n    }\n\n    private void OnPressedInternal()\n    {\n        // Handle the press event here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Panel Component in UI Document\nDESCRIPTION: This snippet demonstrates how to use the `Panel` component from the `Unity.AppUI.UI` namespace within a `UI Document`. The `Panel` component provides an initial context for its children, which is crucial for App UI components to display correctly. It also provides a layering system for popups and notifications.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/using-app-ui.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<UXML xmlns=\"UnityEngine.UIElements\" xmlns:appui=\"Unity.AppUI.UI\">\n    <appui:Panel>\n        <!-- Your UI elements -->\n    </appui:Panel>\n</UXML>\n```\n\n----------------------------------------\n\nTITLE: Custom Navigation Visual Controller - C#\nDESCRIPTION: This C# code demonstrates how to create a custom navigation visual controller by implementing the `INavVisualController` interface. This allows you to control the content of navigation components such as the `BottomNavBar`, `AppBar`, `Drawer`, and `NavigationRail` based on the current navigation destination and controller. It takes the visual component (e.g., BottomNavBar), the current NavDestination, and the NavController as parameters.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/navigation.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyVisualController : INavVisualController\n{\n    public void SetupBottomNavBar(BottomNavBar bottomNavBar, NavDestination destination, NavController navController)\n    {\n        if (!destination.showBottomNavBar)\n            return;\n\n        var homeButton = new BottomNavBarItem(\"info\", \"Home\", () => navController.Navigate(Actions.navigateToHome))\n        {\n            isSelected = destination.name == Screens.home\n        };\n        bottomNavBar.Add(homeButton);\n\n        // etc ...\n    }\n    public void SetupAppBar(AppBar appBar, NavDestination destination, NavController navController)\n    {\n        if (!destination.showAppBar)\n            return;\n\n        appBar.title = destination.label;\n    }\n    public void SetupDrawer(Drawer drawer, NavDestination destination, NavController navController)\n    {\n        if (!destination.showDrawer)\n            return;\n\n        drawer.Add(new DrawerHeader());\n        drawer.Add(new Divider { vertical = false });\n        var homeButton = new MenuItem {icon = \"info\", label = \"Home\", selectable = true};\n        homeButton.SetValueWithoutNotify(destination.name == Screens.home);\n        homeButton.clickable.clicked += () => navController.Navigate(Actions.navigateToHome);\n        drawer.Add(homeButton);\n\n        // etc ...\n    }\n    public void SetupNavigationRail(NavigationRail navigationRail, NavDestination destination, NavController navController)\n    {\n        navigationRail.anchor = NavigationRailAnchor.End;\n        navigationRail.labelType = LabelType.Selected;\n        navigationRail.groupAlignment = GroupAlignment.Center;\n\n        var homeButton = new NavigationRailItem { icon = \"info\", label = \"Home\", selected = destination.name == Destinations.home };\n        homeButton.clickable.clicked += () => navController.Navigate(Actions.navigateToHome);\n        navigationRail.mainContainer.Add(homeButton);\n\n        // etc ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Menu using MenuBuilder\nDESCRIPTION: This code snippet demonstrates how to create a Menu using the `MenuBuilder` class in App UI. It showcases the fluent API for adding actions and submenus to the menu.  Each action is associated with an ID, display text, icon and an event handler. The snippet then calls the `Show()` method to display the menu.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/overlays.md#_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nMenuBuilder.Build(anchor)\n    .AddAction(123, \"An Item\", \"info\", evt => Debug.Log(\"Item clicked\"))\n    .PushSubMenu(456, \"My Sub Menu\", \"help\")\n        .AddAction(789, \"Sub Menu Item\", \"info\", evt => Debug.Log(\"Sub Item clicked\"))\n        .PushSubMenu(3455, \"Another Sub Menu\", \"help\")\n            .AddAction(7823129, \"Another Sub Menu Item\", \"info\", evt => Debug.Log(\"Other Item clicked\"))\n        .Pop()\n    .Pop()\n    .Show();\n```\n\n----------------------------------------\n\nTITLE: Using App UI Button in UI Document\nDESCRIPTION: This snippet shows how to use the `Button` component from the `Unity.AppUI.UI` namespace within a `UI Document`. It requires the `Panel` component to provide the necessary context for the App UI components. The `appui` namespace must be defined in the UXML file.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/using-app-ui.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<UXML xmlns=\"UnityEngine.UIElements\" xmlns:appui=\"Unity.AppUI.UI\">\n    <appui:Panel>\n        <appui:Button title=\"Hello World!\" />\n    </appui:Panel>\n</UXML>\n```\n\n----------------------------------------\n\nTITLE: ActionButton XML Example\nDESCRIPTION: This XML snippet shows how to create an ActionButton with both an icon and a label in App UI. The `icon` attribute specifies the icon and the `label` attribute specifies the text.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/actions.md#_snippet_3\n\nLANGUAGE: XML\nCODE:\n```\n<appui:ActionButton icon=\"add\" label=\"Add\" />\n```\n\n----------------------------------------\n\nTITLE: Creating and Showing a Popover or Modal\nDESCRIPTION: This code snippet demonstrates how to create and show a Popover or Modal overlay in App UI. It showcases the fluent API for configuring properties such as placement, offset, modal backdrop, and keyboard dismissal. The snippet then calls the `Show()` method to display the overlay.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/overlays.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar popover = Popover.Build(target, content)\n        .SetPlacement(placement)\n        .SetShouldFlip(shouldFlip)\n        .SetOffset(offset)\n        .SetCrossOffset(crossOffset)\n        .SetArrowVisible(showArrow)\n        .SetContainerPadding(containerPadding)\n        .SetOutsideClickDismiss(outsideClickDismissEnabled)\n        .SetModalBackdrop(modalBackdrop)\n        .SetKeyboardDismiss(keyboardDismissEnabled);\npopover.Show();\n\nvar modal = Modal.Build(content)\n        .SetFullScreenMode(ModalFullScreenMode.None)\n        // ...\n```\n\n----------------------------------------\n\nTITLE: ActionGroup XML Example\nDESCRIPTION: This XML snippet demonstrates how to create an ActionGroup containing two ActionButton components in App UI. Each ActionButton has an icon and a label.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/actions.md#_snippet_4\n\nLANGUAGE: XML\nCODE:\n```\n<appui:ActionGroup>\n    <appui:ActionButton icon=\"add\" label=\"Add\" />\n    <appui:ActionButton icon=\"remove\" label=\"Remove\" />\n</appui:ActionGroup>\n```\n\n----------------------------------------\n\nTITLE: App Initialization (After)\nDESCRIPTION: This code shows the new way of initializing the app after the refactoring.  The `InitializeComponent` method is overridden, and the main page is added to the root visual element using dependency injection.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyApp : App\n{\n    public new static MyApp current => (MyApp)App.current;\n\n    public override void InitializeComponent()\n    {\n        base.InitializeComponent();\n        rootVisualElement.Add(services.GetRequiredService<MainPage>());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tinting an Icon with USS\nDESCRIPTION: This CSS snippet shows how to change the color of an icon using the `--unity-image-tint-color` custom USS property.  This allows for dynamic styling of icons based on different states or themes. The example sets the tint color to blue.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/iconography.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.icon-blue {\n    --unity-image-tint-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing KeyboardFocusController in C#\nDESCRIPTION: This snippet demonstrates how to use the `KeyboardFocusController` class to manage keyboard focus within a custom UI component. It differentiates between focus triggered by mouse clicks and keyboard events by implementing the `OnKeyboardFocus` and `OnPointerFocus` methods. The `KeyboardFocusController` is added as a manipulator to the `VisualElement`.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-ui-components.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCustomControl : VisualElement\n{\n    public MyCustomControl()\n    {\n        this.AddManipulator(new KeyboardFocusController(\n            OnKeyboardFocus,\n            OnPointerFocus,\n        ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Text with App UI Text Component (XML)\nDESCRIPTION: This snippet demonstrates how to use the `<appui:Text>` component to display general-purpose text within the App UI framework in Unity. The `text` attribute defines the content to be displayed. This component leverages the `LocalizedTextElement` which allows for easy localization.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/typography.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<appui:Text text=\"Text\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Component\nDESCRIPTION: This C# code shows how to create a Storybook Component by inheriting from the `StoryBookComponent` class. It defines the `uiElementType` property, specifying the type of UI element being represented. The constructor adds properties to `m_Properties` to make them editable in the Storybook editor using classes such as `StoryBookBooleanProperty` and `StoryBookStringProperty`\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/storybook.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class ButtonComponent : StoryBookComponent\n{\n    public override Type uiElementType => typeof(Button);\n\n    public ButtonComponent()\n    {\n        m_Properties.Add(new StoryBookBooleanProperty(\n            nameof(Button.primary),\n            (btn) => ((Button)btn).primary,\n            (btn, val) => ((Button)btn).primary = val));\n\n        m_Properties.Add(new StoryBookStringProperty(\n            nameof(Button.title),\n            (btn) => ((Button)btn).title,\n            (btn, val) => ((Button)btn).title = val));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Headings with App UI Heading Component (XML)\nDESCRIPTION: This snippet illustrates the use of the `<appui:Heading>` component for displaying headings in the App UI framework within Unity. Similar to the `<appui:Text>` component, the `text` attribute sets the heading content, but it renders with a larger font size. It is also based on `LocalizedTextElement` for localization support.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/typography.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<appui:Heading text=\"Heading\" />\n```\n\n----------------------------------------\n\nTITLE: Using AsyncRelayCommand for Asynchronous Operations - C#\nDESCRIPTION: Demonstrates using `AsyncRelayCommand` to perform asynchronous operations within a ViewModel.  The `IncrementCommand` dispatches pending, actual, and fulfilled actions using the store. Requires Unity.AppUI.MVVM and Unity.AppUI.Core namespaces.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\nusing Unity.AppUI.Core;\nusing Unity.AppUI.UI;\nusing Unity.AppUI.MVVM;\n\n// ViewModel\npublic class MyViewModel : ObservableObject\n{\n    readonly IStoreService m_StoreService;\n\n    public MyViewModel(IStoreService storeService)\n    {\n        m_StoreService = storeService;\n\n        // Subscribe to the state changes etc...\n    }\n\n    public ICommand IncrementCommand => new AsyncRelayCommand(Increment);\n\n    async Task Increment(CancellationToken token)\n    {\n        m_StoreService.Store.Dispatch(~~IncrementPendingAction~~.Invoke());\n        await Task.Delay(1000, token);\n        m_StoreService.Store.Dispatch(IncrementAction.Invoke());\n        m_StoreService.Store.Dispatch(IncrementFulfilledAction.Invoke());\n    }\n}\n\n// View\npublic class MyView : VisualElement\n{\n    public MyView(MyViewModel viewModel)\n    {\n        var button = new Button();\n        button.clicked += viewModel.IncrementCommand.Execute;\n        viewModel.IncrementCommand.CanExecuteChanged +=\n            (sender, e) => button.SetEnabled(((AsyncRelayCommand)sender).CanExecute());\n        Add(button);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Icon UI Component in UXML\nDESCRIPTION: This XML snippet demonstrates how to use the Icon UI component to display a custom icon.  The `name` attribute specifies the icon name, and the `variant` attribute specifies the variant of the icon, matching the corresponding USS class. It relies on the AppUI namespace (`appui`).\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-icons.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<appui:Icon name=\"home\" variant=\"Regular\" />\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Non-Observable Model using ObservableObject (C#)\nDESCRIPTION: This example demonstrates how to wrap a non-observable model (e.g., a database item) with an ObservableObject. It shows how to use the SetProperty method with a custom action to update the underlying model and raise property change notifications when using the CreateProperty attribute.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-observable.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\nusing Unity.Properties;\n\npublic class ObservableUser : ObservableObject\n{\n    private readonly User user;\n\n    public ObservableUser(User user) => this.user = user;\n\n    [CreateProperty]\n    public string Name\n    {\n        get => user.Name;\n        set => SetProperty(user.Name, value, user, (u, n) => u.Name = n);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Keyboard Navigation with KeyboardFocusController (C#)\nDESCRIPTION: This code snippet demonstrates how to use the KeyboardFocusController in App UI to enable keyboard navigation. It adds the controller to a button, allowing the button to be focused using the tab key and providing callbacks for focus in and focus out events. It uses the legacy UITK focusable mode, and the new focusable mode using KeyboardFocusController.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/accessibility.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.UI;\n\nvar myButton = new Button();\n\n// Legacy UITK focusable mode, to be navigated with tab key\nmyButton.focusable = true;\n\n// New focusable mode for more granular control\nmyButton.AddManipulator(new KeyboardFocusController(OnKeyboardFocusIn, OnPointerFocusIn, OnFocusOut));\n```\n\n----------------------------------------\n\nTITLE: Creating a Redux Store with Slices using StoreFactory - C#\nDESCRIPTION: This snippet illustrates how to create a Redux store with slices using the `StoreFactory`.  It creates a slice named \"mySlice\" with an initial state of type `MyState`. The builder lambda can be used to configure the slice's reducer logic. Requires the `Unity.AppUI.Redux` namespace.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.Redux;\n\nrecord MyState {}\n\nvar store = StoreFactory.CreateStore(new []\n{\n    StoreFactory.CreateSlice(\n        \"mySlice\",\n        new MyState(),\n        builder => { /*  ... */ },\n        ),\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Keyboard Focus with CSS\nDESCRIPTION: This CSS snippet shows how to style UI elements based on whether they are focused via keyboard navigation. It uses the standard ':focus' pseudo-class for general focus and the '.keyboard-focus' class (added by KeyboardFocusController) for keyboard-initiated focus, allowing for different visual treatments.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/accessibility.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Default focus pseudo-state provided by UITK */\n.my-element:focus {\n    border: 2px solid #00ff00;\n}\n\n/* Focus triggered by keyboard navigation */\n.my-element.keyboard-focus {\n    border: 2px solid #ff0000;\n}\n```\n\n----------------------------------------\n\nTITLE: Button XML Example\nDESCRIPTION: This XML snippet shows how to create a basic Button component in App UI. The `title` attribute sets the text displayed on the button.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/actions.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<appui:Button title=\"Button\" />\n```\n\n----------------------------------------\n\nTITLE: Reacting to Layout Direction Changes (C#)\nDESCRIPTION: This C# code shows how to register a callback to the ContextChangedEvent to react to changes in the DirContext. This allows developers to update the UI logic based on the current layout direction (LTR or RTL). The callback receives a ContextChangedEvent containing the new DirContext.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/accessibility.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.Core;\nusing Unity.AppUI.UI;\n\nvar myElement = new VisualElement();\nmyElement.RegisterContextChangedCallback<DirContext>(OnDirContextChanged);\n\nvoid OnDirContextChanged(ContextChangedEvent<DirContext> evt)\n{\n   var dir = evt.context?.dir ?? Dir.Ltr;\n   UpdateMyLogic(dir);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Interface as Dependency - C#\nDESCRIPTION: This C# code illustrates registering an interface as a dependency, allowing multiple implementations. AddSingleton is used to register different implementations based on context. It needs Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMyService\n{\n    void DoSomething();\n}\npublic class MyDebugService : IMyService\n{\n    public void DoSomething()\n    {\n        // Do something\n    }\n}\npublic class MyProductionService : IMyService\n{\n    public void DoSomething()\n    {\n        // Do something\n    }\n}\n// Register the services inside the app builder\npublic class MyAppBuilder : UIToolkitAppBuilder<MyApp>\n{\n    protected override void OnConfiguringApp(AppBuilder appBuilder)\n    {\n        base.OnConfiguringApp(appBuilder);\n\n        if (IsDebugMode())\n            appBuilder.services.AddSingleton<IMyService, MyDebugService>();\n        else\n            appBuilder.services.AddSingleton<IMyService, MyProductionService>();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Custom UI Element with Scale Factor in App UI (C#)\nDESCRIPTION: This code snippet demonstrates how to create a custom UI element in App UI using the `scaleFactor` property to adjust the RenderTexture size based on the screen's DPI and user-defined display scaling. It ensures the UI elements are scaled correctly, taking into account both the screen DPI and any user-defined display scaling from the operating system. The code creates a `RenderTexture` that adapts to the current scale factor and draws content onto it, integrating it into the UI.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/native-integration.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.Core;\nusing Unity.AppUI.UI;\nusing UnityEngine;\n\nclass MyCustomElement : VisualElement\n{\n    RenderTexture m_RT;\n\n    static readonly Vertex[] k_Vertices = new Vertex[4];\n    static readonly ushort[] k_Indices = { 0, 1, 2, 2, 3, 0 };\n\n    static MyCustomElement()\n    {\n        k_Vertices[0].tint = Color.white;\n        k_Vertices[1].tint = Color.white;\n        k_Vertices[2].tint = Color.white;\n        k_Vertices[3].tint = Color.white;\n    }\n\n    public MyCustomElement()\n    {\n        generateVisualContent += OnGenerateVisualContent;\n    }\n\n    void OnGenerateVisualContent(MeshGenerationContext ctx)\n    {\n        var rect = contentRect;\n        if (!rect.IsValid())\n            return;\n\n        // check the current scale factor to apply on the RenderTexture\n        var dpi = Mathf.Max(Platform.scaleFactor, 1f);\n        var rectSize = rect.size * dpi;\n\n        // create or re-create the RenderTexture if the size has changed\n        if (m_RT && (Mathf.Abs(m_RT.width - rectSize.x) > 1 || Mathf.Abs(m_RT.height - rectSize.y) > 1))\n        {\n            m_RT.Release();\n            UnityObject.Destroy(m_RT);\n            m_RT = null;\n        }\n\n        if (!m_RT)\n        {\n            m_RT = new RenderTexture((int) rectSize.x, (int) rectSize.y, 24)\n            {\n                hideFlags = HideFlags.HideAndDontSave,\n            };\n            m_RT.Create();\n        }\n\n        // TODO: draw the content on the RenderTexture here...\n\n        // Place the RenderTexture in the MeshGenerationContext\n        var left = paddingRect.xMin;\n        var right = paddingRect.xMax;\n        var top = paddingRect.yMin;\n        var bottom = paddingRect.yMax;\n\n        k_Vertices[0].position = new Vector3(left, bottom, Vertex.nearZ);\n        k_Vertices[1].position = new Vector3(left, top, Vertex.nearZ);\n        k_Vertices[2].position = new Vector3(right, top, Vertex.nearZ);\n        k_Vertices[3].position = new Vector3(right, bottom, Vertex.nearZ);\n\n        var mwd = mgc.Allocate(k_Vertices.Length, k_Indices.Length, m_RT);\n\n#if !UNITY_2023_1_OR_NEWER\n        // Since the texture may be stored in an atlas, the UV coordinates need to be\n        // adjusted. Simply rescale them in the provided uvRegion.\n        var uvRegion = mwd.uvRegion;\n#else\n        var uvRegion = new Rect(0, 0, 1, 1);\n#endif\n        k_Vertices[0].uv = new Vector2(0, 0) * uvRegion.size + uvRegion.min;\n        k_Vertices[1].uv = new Vector2(0, 1) * uvRegion.size + uvRegion.min;\n        k_Vertices[2].uv = new Vector2(1, 1) * uvRegion.size + uvRegion.min;\n        k_Vertices[3].uv = new Vector2(1, 0) * uvRegion.size + uvRegion.min;\n\n        mwd.SetAllVertices(k_Vertices);\n        mwd.SetAllIndices(k_Indices);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transient Dependency Usage in MVVM - C#\nDESCRIPTION: This C# code demonstrates how to retrieve transient dependencies using IServiceProvider within an MVVM ViewModel. Transient dependencies are created each time they are requested, verified by asserting that two requests return different instances. It requires Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\n\npublic class MyViewModel : ObservableObject\n{\n    public MyViewModel(IServiceProvider serviceProvider)\n    {\n        var transientService = serviceProvider.GetRequiredService<ITransientService>();\n        var transientService2 = serviceProvider.GetRequiredService<ITransientService>();\n        Debug.Assert(transientService != transientService2);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Clipboard in App UI (C#)\nDESCRIPTION: This code snippet shows how to interact with the clipboard in App UI, reading and writing both text and image (PNG) data. It uses `GetPasteboardData` to retrieve clipboard content and `SetPasteboardData` to set new content. The code handles UTF-8 encoding for text and demonstrates loading a PNG image from the clipboard into a `Texture2D` object.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/native-integration.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Get the text content from the clipboard\nbyte[] clipboardContent = Platform.GetPasteboardData(PasteboardType.Text);\nif (clipboardContent is { Length: >0 })\n{\n    string text = Encoding.UTF8.GetString(clipboardContent);\n    Debug.Log($\"Clipboard content: {text}\");\n}\n\n// Set the text content to the clipboard\nstring textToCopy = \"Hello, World!\";\nPlatform.SetPasteboardData(PasteboardType.Text, Encoding.UTF8.GetBytes(textToCopy));\n\n// Get the image content from the clipboard\nbyte[] clipboardContent = Platform.GetPasteboardData(PasteboardType.PNG);\nif (clipboardContent is { Length: >0 })\n{\n    Texture2D texture = new Texture2D(2, 2);\n    texture.LoadImage(clipboardContent);\n    Debug.Log($\"Clipboard image size: {texture.width}x{texture.height}\");\n}\n\n// Set the image content to the clipboard\nTexture2D texture = new Texture2D(2, 2);\nbyte[] imageBytes = texture.EncodeToPNG();\nPlatform.SetPasteboardData(PasteboardType.PNG, imageBytes);\n```\n\n----------------------------------------\n\nTITLE: Property with Dependency Notification using OnPropertyChanged (C#)\nDESCRIPTION: This example demonstrates how to notify other properties when a property is updated. It uses the SetProperty method to update the property value and then calls OnPropertyChanged to notify other properties that depend on the updated property. This example uses the CreateProperty attribute.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-observable.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\nusing Unity.Properties;\n\npublic class MyViewModel : ObservableObject\n{\n    private string _name;\n\n    [CreateProperty]\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            if (SetProperty(ref _name, value))\n            {\n                OnPropertyChanged(nameof(HasName));\n            }\n        }\n    }\n\n    [CreateProperty(ReadOnly = true)]\n    public bool HasName => !string.IsNullOrEmpty(Name);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Navigation Code in C# with Unity AppUI\nDESCRIPTION: This code snippet demonstrates the template for generated C# code when using the Navigation Graph Editor to automate navigation actions, destinations, and graphs. It defines partial classes with constants for action names, destination names, and graph names, facilitating navigation within the Unity AppUI framework. The code should be placed in a folder that allows Unity to automatically compile it.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/navigation.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nnamespace namespace Unity.AppUI.Navigation.Generated\n{\n    public partial static class Actions\n    {\n        public const string <actionName> = \"<actionName>\";\n        [...]\n    }\n\n    public partial class Destinations\n    {\n        public const string <destinationName> = \"<destinationName>\";\n        [...]\n    }\n\n    public partial class Graphs\n    {\n        public const string <graphName> = \"<graphName>\";\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading App UI Theme in EditorWindow - C#\nDESCRIPTION: This code snippet demonstrates how to load the App UI theme in a custom EditorWindow in Unity. It loads the theme stylesheet from the App UI package and adds the `unity-editor` class to enable Editor-related styles. This ensures that App UI components are styled correctly within the EditorWindow. It depends on `UnityEditor` and `UnityEngine` namespaces.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/faq.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyWindow : EditorWindow\n{\n    void CreateGUI()\n    {\n        const string defaultTheme = \"Packages/com.unity.dt.app-ui/PackageResources/Styles/Themes/App UI.tss\";\n        rootVisualElement.styleSheets.Add(AssetDatabase.LoadAssetAtPath<ThemeStyleSheet>(defaultTheme));\n        rootVisualElement.AddToClassList(\"unity-editor\"); // Enable Editor related styles\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Store Creation (After)\nDESCRIPTION: This code shows the new way to create a Redux store and add slices. The store is created using a `StoreFactory` and slices are created in a single step. You cannot add slices to the store after it has been created.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar store = StoreFactory.CreateStore(new [] {\n    StoreFactory.CreateSlice(\"sliceName\", new MySliceState(), builder => { /* ... */ }),\n    StoreFactory.CreateSlice(\"slice2Name\", /* ... */ )\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Stories to a Storybook Page\nDESCRIPTION: This C# code demonstrates how to add stories to a Storybook Page using the `m_Stories.Add()` method. Each story is created using the `StoryBookStory` class, providing a display name and a lambda expression that returns an instance of the UI element with specific properties set. These stories will appear in the Storybook window.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/storybook.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic ButtonPage()\n{\n    m_Stories.Add(new StoryBookStory(\"Primary\", () => new Button { primary = true, title = \"Primary Style Button\" }));\n    m_Stories.Add(new StoryBookStory(\"Secondary\", () => new Button { title = \"Secondary Style Button\" }));\n}\n```\n\n----------------------------------------\n\nTITLE: Dropzone Event Handling (After)\nDESCRIPTION: This code shows the new approach for using `Dropzone` after refactoring. The main logic has moved into the `DropzoneController`.  It uses `acceptDrag` delegate to determine if a dragged object should be accepted, and attaches to `dropped` and `dragEnded` events.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar dropzone = new Dropzone();\nvar dropzoneController = dropzone.controller;\ndropzoneController.acceptDrag = ShouldAcceptDrag;\ndropzoneController.dropped += OnDropped;\ndropzoneController.dragEnded += OnDragEndedOrCanceled;\n```\n\n----------------------------------------\n\nTITLE: Defining appui Namespace in UXML\nDESCRIPTION: This snippet demonstrates how to define the `appui` namespace in a UXML file when working directly with UXML files. Defining the `appui` namespace allows you to easily use App UI components within your UXML structure, improving readability and maintainability.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/using-app-ui.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<UXML xmlns=\"UnityEngine.UIElements\" xmlns:appui=\"Unity.AppUI.UI\">\n    [...]\n</UXML>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Store Changes in Unity (After)\nDESCRIPTION: This code snippet showcases the updated method of subscribing to store changes in Unity, using IDisposableSubscription.  The subscription is managed by an IDisposableSubscription object, requiring explicit disposal to unsubscribe.  The IsValid method can check subscription validity.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nIDisposableSubscription subscription;\n// Subscribe to store changes\nsubscription = store.Subscribe(\"sliceName\", state => { /* ... */ });\n// Unsubscribe\nsubscription.Dispose();\n// Check if subscription is valid\nAssert.IsFalse(subscription.IsValid());\n```\n\n----------------------------------------\n\nTITLE: ActionBar XML Example\nDESCRIPTION: This XML snippet demonstrates how to create an ActionBar containing two ActionButton components in App UI. Each ActionButton has an icon and a label.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/actions.md#_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<appui:ActionBar>\n    <appui:ActionButton icon=\"add\" label=\"Add\" />\n    <appui:ActionButton icon=\"remove\" label=\"Remove\" />\n</appui:ActionBar>\n```\n\n----------------------------------------\n\nTITLE: Toast Action Creation (After)\nDESCRIPTION: This example demonstrates the correct way to add an action to a Toast component using `Toast.AddAction`. The Toast reference needs to be passed to the action delegate, because it's now the reference to the toast that is being removed.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar toast = Toast.Build(/* ... */);\ntoast.AddAction(DISMISS_ACTION, \"Dismiss\", toastRef => Debug.Log(\"Dismissed\"));\n```\n\n----------------------------------------\n\nTITLE: Disposing of Subscription - C#\nDESCRIPTION: Unsubscribes from state changes by calling the `Dispose` method on the `subscription` object, preventing further updates to the callback function. Important for memory management.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_11\n\nLANGUAGE: cs\nCODE:\n```\nsubscription.Dispose();\n```\n\n----------------------------------------\n\nTITLE: StoryBookEnumProperty Usage (After)\nDESCRIPTION: This code snippet illustrates the updated use of the generic StoryBookEnumProperty<T> class, eliminating the need for casting.  The generic type parameter allows the property to directly work with the enum type `ButtonVariant`, preventing casting mistakes.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nvar enumProperty = new StoryBookEnumProperty<ButtonVariant>(\n    nameof(Button.variant),\n    (btn) => ((Button)btn).variant,\n    (btn, val) => ((Button)btn).variant = val);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Redux Store with a simple state - C#\nDESCRIPTION: This snippet demonstrates how to create a Redux store with a simple state object using the generic `Store.CreateStore` method.  It defines a record `MyState` as the state type and creates a store with an initial state and a basic reducer that simply returns the current state.  It requires the `Unity.AppUI.Redux` namespace.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.Redux;\n\nrecord MyState {}\n\nvar store = Store.CreateStore<MyState>((state, action) => state, new MyState());\n```\n\n----------------------------------------\n\nTITLE: Scoped Dependency Usage in MVVM - C#\nDESCRIPTION: This C# code demonstrates how to retrieve scoped dependencies using IServiceProvider within an MVVM ViewModel. Scoped dependencies are created once per scope, managed using CreateScope. Requires Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\n\npublic class MyViewModel : ObservableObject\n{\n    public MyViewModel(IServiceProvider serviceProvider)\n    {\n        using (var scope = serviceProvider.CreateScope())\n        {\n            var scopedService = scope.ServiceProvider.GetRequiredService<IScopedService>();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropzone Event Handling (Before)\nDESCRIPTION: This code shows how `Dropzone` was used before refactoring. It shows the old methods for getting droppables from paths or Unity objects, and attaching to events.  It includes using `tryGetDroppableFromPath`, `tryGetDroppablesFromUnityObjects`, `dropped`, `dragStarted`, and `dragEnded` events.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar dropzone = new Dropzone();\ndropzone.tryGetDroppableFromPath = TryGetDroppableFromPath;\ndropzone.tryGetDroppablesFromUnityObjects = TryGetDroppableFromUnityObjects;\ndropzone.dropped += OnDropped;\ndropzone.dragStarted += OnEditorDragStarted;\ndropzone.dragEnded += OnDragEndedOrCanceled;\n```\n\n----------------------------------------\n\nTITLE: AsyncRelayCommand Usage Example in C#\nDESCRIPTION: This example illustrates how to create and use an `AsyncRelayCommand` within a ViewModel. It demonstrates executing an asynchronous delegate, determining if the command can be executed, and handling concurrent executions using `AsyncRelayCommandOptions`. Note: AsyncRelayCommand is not supported in WebGL builds.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-command.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyViewModel : ObservableObject\n{\n    public AsyncRelayCommand MyCommand { get; }\n\n    public MyViewModel()\n    {\n        MyCommand = new AsyncRelayCommand(\n            ExecuteMyCommand,\n            CanExecuteMyCommand,\n            AsyncRelayCommandOptions.AllowConcurrentExecutions);\n    }\n\n    private async Task ExecuteMyCommand()\n    {\n        // Do something\n    }\n\n    private bool CanExecuteMyCommand()\n    {\n        // Return true or false depending on whether the command can be executed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Detection (Before)\nDESCRIPTION: This code shows how to detect the system theme before the refactoring.  It uses `Platform.systemThemeChanged` event and `Platform.systemTheme` property to determine if the system theme is dark.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nPlatform.systemThemeChanged += theme => Debug.Log($\"Theme changed to {theme}\");\nif (Platform.systemTheme == \"dark\")\n{\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Redux Reducer Builder (After)\nDESCRIPTION: This code shows the new way to add a reducer using the `AddCase` method. This method provides a more structured approach to defining reducers within slices.  Builders inherit from the same base class, and both primary and extra reducers can be defined here.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nStoreFactory.CreateSlice(\"sliceName\", new MySliceState(), builder => {\n    builder.AddCase(\"actionType\", (state, action) => { /* ... */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Redux Reducer Builder (Before)\nDESCRIPTION: This code shows the old way to add a reducer in a slice builder. The `Add` method was used to associate an action type with a reducer function.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nstore.AddSlice(\"sliceName\", new MySliceState(), builder => {\n    builder.Add(\"actionType\", (state, action) => { /* ... */ });\n});\n```\n\n----------------------------------------\n\nTITLE: Property with Dependency Notification using AlsoNotifyChangeFor attribute (C#)\nDESCRIPTION: This example shows the simplified way to notify dependency properties via the `[AlsoNotifyChangeFor]` attribute.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-observable.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\nusing Unity.Properties;\n\n[ObservableObject]\npublic partial class MyViewModel\n{\n    [ObservableProperty]\n    [AlsoNotifyChangeFor(nameof(HasName))]\n    private string _name;\n\n    [CreateProperty(ReadOnly = true)]\n    public bool HasName => !string.IsNullOrEmpty(Name);\n}\n```\n\n----------------------------------------\n\nTITLE: INavVisualController Implementation (Before)\nDESCRIPTION: This code snippet shows the initial implementation of the INavVisualController interface.  It includes methods for setting up the bottom navigation bar, app bar, and drawer based on the NavDestination properties. It lacks the setup for navigation rail.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyNavController : INavVisualController\n{\n    public void SetupBottomNavBar(BottomNavBar bottomNavBar, NavDestination destination, NavController navController)\n    {\n        if (destination.showBottombar)\n        {\n            /* ... */\n        }\n    }\n\n    public void SetupAppBar(AppBar appBar, NavDestination destination, NavController navController)\n    {\n        if (destination.showAppBar)\n        {\n            /* ... */\n        }\n    }\n\n    public void SetupDrawer(Drawer drawer, NavDestination destination, NavController navController)\n    {\n        if (destination.showDrawer)\n        {\n            /* ... */\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic AsyncRelayCommand Usage Example in C#\nDESCRIPTION: This example shows the usage of a generic `AsyncRelayCommand` to pass a parameter to an asynchronous command delegate in C#.  It includes defining a command accepting a string parameter and controlling concurrent executions using `AsyncRelayCommandOptions`. Note: AsyncRelayCommand is not supported in WebGL builds.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-command.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyViewModel : ObservableObject\n{\n    public AsyncRelayCommand<string> MyCommand { get; }\n\n    public MyViewModel()\n    {\n        MyCommand = new AsyncRelayCommand<string>(\n            ExecuteMyCommand,\n            CanExecuteMyCommand,\n            AsyncRelayCommandOptions.AllowConcurrentExecutions);\n    }\n\n    private async Task ExecuteMyCommand(string parameter)\n    {\n        // Do something\n    }\n\n    private bool CanExecuteMyCommand(string parameter)\n    {\n        // Return true or false depending on whether the command can be executed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: App Initialization (Before)\nDESCRIPTION: This code shows how to initialize the app before the refactoring.  The main page was directly added to a panel within the constructor.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyApp : App\n{\n    public MyApp(MainPage mainPage)\n    {\n        var panel = new Panel();\n        panel.Add(mainPage);\n        this.mainPage = panel;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationScreen Setup Implementation - C#\nDESCRIPTION: This C# code illustrates how to implement the `SetupAppBar` method directly within a `NavigationScreen` class. This allows for screen-specific customization of navigation components, such as setting the title of the AppBar when the screen is displayed. The method takes an AppBar and NavController as parameters.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/navigation.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nclass MyAppHomeScreen : NavigationScreen\n{\n    public override void SetupAppBar(AppBar appBar, NavController navController)\n    {\n        appBar.title = \"Home\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Value Assignment (Before)\nDESCRIPTION: This code shows how the `RadioGroup.value` property was used before the refactoring.  The `value` was an integer representing the index of the selected radio button. This approach is prone to errors if radio buttons are reordered.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar radioGroup = new RadioGroup();\nradioGroup.Add(new Radio { label = \"Radio 1\" });\nradioGroup.Add(new Radio { label = \"Radio 2\" });\nradioGroup.value = 1; // Select the second radio button\n```\n\n----------------------------------------\n\nTITLE: Defining font weights in Global.uss\nDESCRIPTION: This CSS snippet defines the default font weights for the App UI package. It uses the `url()` function to specify the paths to the font files for Regular and SemiBold weights. To customize the fonts, replace the URLs with the paths to your desired font files.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-typography.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n:root {\n    --appui-font-weights-100: url(\"../../Fonts/Inter-Regular.ttf\");\n    --appui-font-weights-200: url(\"../../Fonts/Inter-SemiBold.ttf\");\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Quarantine Attribute from AppUINativePlugin (Example) - Shell\nDESCRIPTION: This code snippet provides an example shell command to remove the quarantine attribute from the `AppUINativePlugin.bundle` file on macOS, using a specific App UI version (1.0.3) as an example. This command targets the plugin located within the PackageCache directory.  It requires access to the terminal and the `xattr` command.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/faq.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nxattr -d com.apple.quarantine <project-path>/Library/PackageCache/com.unity.dt.app-ui@1.0.3/Runtime/Core/Platform/macOS/Plugins/AppUINativePlugin.bundle\n```\n\n----------------------------------------\n\nTITLE: Property Injection with Service Attribute - C#\nDESCRIPTION: This C# code illustrates property injection using the Service attribute in an MVVM ViewModel. This allows setting dependencies after the object's construction. It requires Unity.AppUI.MVVM.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/mvvm-di.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nusing Unity.AppUI.MVVM;\n\npublic class MyViewModel : ObservableObject\n{\n    [Service]\n    public MyModel Model { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger Middleware and Enhancer - C#\nDESCRIPTION: This snippet shows how to create a logger middleware that logs every dispatched action and then compose it into a store enhancer. It defines `LoggerMiddleware` which logs the action type and then calls the next middleware in the chain. The `EnhanceStoreWithLogger` then uses `Store.ApplyMiddleware` to turn it into a store enhancer. Requires `Unity.AppUI.Redux` and `UnityEngine` namespaces.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.Redux;\nusing UnityEngine;\n\npublic static class Application\n{\n    public static Middleware<TStore,TStoreState> LoggerMiddleware<TStore,TStoreState>()\n        where TStore : Store<TStoreState>\n    {\n        return (store) => (nextMiddleware) => (action) =>\n        {\n            Debug.Log($\"Action: {action.type}\");\n            return nextMiddleware(action);\n        };\n    }\n\n    public static StoreEnhancer<TStore,TStoreState> EnhanceStoreWithLogger<TStore,TStoreState>()\n        where TStore : Store<TStoreState>\n    {\n        return Store.ApplyMiddleware(LoggerMiddleware<TStore,TStoreState>());\n    }\n\n    static void Main()\n    {\n        // At this point you can use your Enhancer to create a new store with the logger middleware.\n        var store = Store.CreateStore(new []\n        {\n            Store.CreateSlice(\n                \"mySlice\",\n                new MyState(),\n                builder => { /*  ... */ }),\n        }, EnhanceStoreWithLogger());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting High DPI Icons with Resource Function in USS\nDESCRIPTION: This CSS snippet shows how to support high DPI icons using the `resource()` function in a USS file. It loads the correct icon (including the high DPI version, if available) based on the device's pixel ratio. The icon files must be located within a folder inside a \"Resources\" folder for the `resource()` function to work correctly.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-icons.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.appui-icon--home--regular {\n    --unity-image: resource(\"MyIcons/home\"); /* This will load the high DPI icon on devices with a pixel ratio of 2.0 */\n    /* Note that \"MyIcons\" is a folder contained inside a Resources folder */\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Context Provider and Consumer - C#\nDESCRIPTION: This example demonstrates how to create a custom context, provide it using ProvideContext, and consume it using RegisterContextChangedCallback. It also shows how to unregister the callback.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/contexts.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.Core;\nusing Unity.AppUI.UI;\n\n// Define a custom context\npublic record MyContext(int value) : IContext\n{\n    public int value { get; } = value;\n}\n\n// Create a custom context provider\npublic void CreateContextProvider()\n{\n    var myElement = new VisualElement();\n    myElement.ProvideContext(new MyContext(42));\n}\n\n// Consume the custom context\npublic void ConsumeContext()\n{\n    var myElement = new VisualElement();\n    myElement.RegisterContextChangedCallback<MyContext>(OnMyContextChanged);\n\n    void OnMyContextChanged(ContextChangedEvent<MyContext> evt)\n    {\n        Debug.Log($\"MyContext changed to {evt.context.value}\");\n    }\n\n    // You can also unregister the callback\n    myElement.UnregisterContextChangedCallback<MyContext>(OnMyContextChanged);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Storybook Page\nDESCRIPTION: This C# code demonstrates how to create a Storybook Page by inheriting from the `StoryBookPage` class. It defines the `displayName` and `componentType` properties, which are used to display the page name and UI component properties in the Storybook window. The constructor is intended to house the creation of individual stories using `m_Stories.Add()`.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/storybook.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class ButtonStoryBookPage : StoryBookPage\n{\n    public override string displayName => \"Button\";\n\n    public override Type componentType => typeof(ButtonComponent);\n\n    public ButtonPage()\n    {\n        // Add stories here using m_Stories.Add()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IPartionableState Interface - C#\nDESCRIPTION: This snippet demonstrates how to implement the `IPartionableState` interface for a custom state class. The `Get` method retrieves a slice state by name, and the `Set` method creates a new state object with the updated slice. Remember that the state object is immutable and `Set` should return a new instance of the state.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.Redux;\n\nclass MyState : IPartionableState<MyState>\n{\n    public TSliceState Get<TSliceState>(string sliceName)\n    {\n        // Implement the method to return the slice state.\n    }\n\n    public MyState Set<TSliceState>(string sliceName, TSliceState sliceState)\n    {\n        // Implement the method to set the slice state.\n        // Remember that the state object is immutable, so the returned object should be a new instance.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IDismissInvocator in C#\nDESCRIPTION: This snippet demonstrates how to implement the `IDismissInvocator` interface on a `VisualElement` to allow it to dismiss a parent `Popup`.  The `dismissRequested` event is declared, and the `OnCancelButtonPressed` method shows an example of invoking the event to dismiss the popup with a specified `DismissType`. This interface must be implemented on the element that is passed as content of a `Popup`.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-ui-components.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCustomControl : VisualElement, IDismissInvocator\n{\n    // Implement the IDismissInvocator interface\n    public event Action<DismissType> dismissRequested;\n\n    // ...\n\n    // Example with the handling of a \"Cancel\" button press\n    public void OnCancelButtonPressed()\n    {\n        // Dismiss the popup and give the reason for the dismissal\n        dismissRequested?.Invoke(DismissType.Manual);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Gesture Handling (Before)\nDESCRIPTION: This code shows how to handle magnification and pan gestures using `MagnificationGestureEvent` and `PanGestureEvent`.  The magnification event has been replaced by `PinchGestureEvent` and PanGestureEvent has been removed.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyComponent : VisualElement\n{\n    public MyComponent()\n    {\n        this.AddManipulator(new MagnificationManipulator());\n        this.RegisterCallback<MagnificationGestureEvent>(OnMagnification);\n        this.RegisterCallback<PanGestureEvent>(OnPan);\n    }\n\n    private void OnMagnification(MagnificationGestureEvent evt)\n    {\n        /* ... */\n    }\n\n    private void OnPan(PanGestureEvent evt)\n    {\n        /* ... */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stylesheet in Theme File using CSS\nDESCRIPTION: This code snippet demonstrates how to import a stylesheet file into a theme file using the `@import` rule in CSS. It also includes a default style for all VisualElements. This theme file can then be used on the PanelSettings of a UIDocument component.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/theming.md#_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"darkBlue.uss\");\n\nVisualElement {}\n```\n\n----------------------------------------\n\nTITLE: Localizing Button Title in C#\nDESCRIPTION: This snippet shows how to use localization with a button in C# by setting its title property with a string starting with `@`. This enables localization for the element, using the string value as the resource key.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/localization.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmyButton.title = \"@table_name:entry_key\";\n```\n\n----------------------------------------\n\nTITLE: Specifying App UI Theme in UXML - XML\nDESCRIPTION: This code snippet shows how to specify the App UI theme stylesheet directly within a UXML file. This approach allows the visual tree to be styled with the App UI theme when the UXML is loaded. The path to the stylesheet is specified using a `project:/` prefix.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/faq.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<Style src=\"project:/Packages/com.unity.dt.app-ui/PackageResources/Styles/Themes/App UI.tss\"/>\n```\n\n----------------------------------------\n\nTITLE: Theme Detection (After)\nDESCRIPTION: This code shows how to detect dark mode after the refactoring. The `Platform.systemThemeChanged` and `Platform.systemTheme` have been replaced by `Platform.darkModeChanged` event and `Platform.darkMode` boolean property.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nPlatform.darkModeChanged += darkMode => Debug.Log($\"Dark mode changed to {darkMode}\");\nif (Platform.darkMode)\n{\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying an Icon using the Icon UI Component\nDESCRIPTION: This code snippet demonstrates how to use the Icon UI component to display an icon. The `name` attribute specifies the icon to be displayed, referencing it by its name.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/iconography.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Icon name=\"icon-name\" />\n```\n\n----------------------------------------\n\nTITLE: IconButton XML Example\nDESCRIPTION: This XML snippet demonstrates how to create an IconButton in App UI.  The `icon` attribute specifies which icon to display.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/actions.md#_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<appui:IconButton icon=\"add\" />\n```\n\n----------------------------------------\n\nTITLE: StoryBookEnumProperty Usage (Before)\nDESCRIPTION: This code snippet demonstrates the initial use of the StoryBookEnumProperty class, which requires casting to and from the enum type.  The example focuses on accessing and modifying the `variant` property of a `Button` object. Casting is required between `object` and `ButtonVariant`.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar enumProperty = new StoryBookEnumProperty(\n    nameof(Button.variant),\n    (btn) => ((Button)btn).variant,\n    (btn, val) => ((Button)btn).variant = (ButtonVariant)val);\n```\n\n----------------------------------------\n\nTITLE: Adjusting Layout Direction with CSS\nDESCRIPTION: This CSS code demonstrates how to adjust the layout direction of UI elements based on the current language using the 'appui--ltr' and 'appui--rtl' classes. It sets the 'flex-direction' property to either 'row' (left-to-right) or 'row-reverse' (right-to-left) depending on the language direction.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/accessibility.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.appui--ltr .my-element {\n    flex-direction: row;\n}\n\n.appui--rtl .my-element {\n    flex-direction: row-reverse;\n}\n```\n\n----------------------------------------\n\nTITLE: Localizing Button Title in UXML\nDESCRIPTION: This snippet shows how to use localization with a button in UXML by defining its title property with a string starting with `@`. This enables localization for the element, using the string value as the resource key.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/localization.md#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<appui:Button title=\"@table_name:entry_key\" />\n```\n\n----------------------------------------\n\nTITLE: Action Creator Declaration (After)\nDESCRIPTION: This code shows the new preferred way to declare action creators, using the string implicit conversion to `ActionCreator` or `ActionCreator<T>`. It's recommended because is more intuitive.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly ActionCreator actionType0 = \"actionType0\"; // no payload\nstatic readonly ActionCreator<int> actionType1 = nameof(actionType1); // with int payload\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Icon Style with USS\nDESCRIPTION: This CSS snippet demonstrates how to define a custom icon style in a USS file for use with App UI.  It defines the `appui-icon--home--regular` class, setting the `--unity-image` property to the path of the PNG file. This allows the Icon UI component to display the specified icon.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/custom-icons.md#_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.appui-icon--home--regular {\n    --unity-image: url(\"path/to/home.png\");\n}\n```\n\n----------------------------------------\n\nTITLE: SplitView Usage Example (XML)\nDESCRIPTION: This example shows the XML structure for using the refactored SplitView component.  It demonstrates how to define panes within the SplitView, configuring their widths and stretch properties. The SplitView can contain any number of Pane elements as children.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<appui:SplitView style=\"flex-grow: 1;\" direction=\"Horizontal\" realtime-resize=\"true\" show-expand-buttons=\"true\">\n    <appui:Pane name=\"hierarchyPane\" style=\"width: 100px;\">\n        <!-- Content -->\n    </appui:Pane>\n    <appui:Pane name=\"viewportPane\" stretch=\"true\">\n        <!-- Content -->\n    </appui:Pane>\n    <appui:Pane name=\"inspectorPane\" style=\"width: 100px;\">\n        <!-- Content -->\n    </appui:Pane>\n</appui:SplitView>\n```\n\n----------------------------------------\n\nTITLE: Reducer Declaration (After)\nDESCRIPTION: This code shows how to declare reducers after the refactoring. Reducers now take the `IAction` interface or `IAction<T>` as the second parameter.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n// with no payload\nstatic MyAppState MyReducer1(MyAppState state, IAction action) { /* ... */ }\n// with int payload\nstatic MyAppState MyReducer2(MyAppState state, IAction<int> action) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Action Creator with Casting\nDESCRIPTION: This code shows how to create action creators and use them in reducers. It uses a string implicit conversion to `ActionCreator` or `ActionCreator<T>`. This example shows action creators both with and without payloads.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly ActionCreator actionType0 = \"actionType0\"; // no payload\nstatic readonly ActionCreator<int> actionType1 = nameof(actionType1); // with int payload\n\nStoreFactory.CreateSlice(\"sliceName\", new MySliceState(), builder => {\n    builder.AddCase((ActionCreator<int>)\"actionType2\", (state, action) => { /* ... */ }); // cast to ActionCreator<int>\n});\n```\n\n----------------------------------------\n\nTITLE: Gesture Handling (After)\nDESCRIPTION: This code shows the new way of handling pinch and pan gestures using `PinchGestureEvent` and `WheelEvent`.  The `MagnificationManipulator` is now `PinchManipulator` and the wheel event is used for pan gestures.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyComponent : VisualElement\n{\n    public MyComponent()\n    {\n        this.AddManipulator(new PinchManipulator());\n        this.RegisterCallback<PinchGestureEvent>(OnPinch);\n        this.RegisterCallback<WheelEvent>(OnPan);\n    }\n\n    private void OnPinch(PinchGestureEvent evt)\n    {\n        /* ... */\n    }\n\n    private void OnPan(WheelEvent evt)\n    {\n        /* ... */\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: INavVisualController Implementation (After)\nDESCRIPTION: This code snippet shows the updated implementation of the INavVisualController interface, which includes a new method `SetupNavigationRail`.  The `SetupNavigationRail` method is responsible for setting up the navigation rail based on the `NavDestination` properties.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\npublic class MyNavController : INavVisualController\n{\n    public void SetupBottomNavBar(BottomNavBar bottomNavBar, NavDestination destination, NavController navController)\n    {\n        if (destination.showBottombar)\n        {\n            /* ... */\n        }\n    }\n\n    public void SetupAppBar(AppBar appBar, NavDestination destination, NavController navController)\n    {\n        if (destination.showAppBar)\n        {\n            /* ... */\n        }\n    }\n\n    public void SetupDrawer(Drawer drawer, NavDestination destination, NavController navController)\n    {\n        if (destination.showDrawer)\n        {\n            /* ... */\n        }\n    }\n\n    public void SetupNavigationRail(NavigationRail navigationRail, NavDestination destination, NavController navController)\n    {\n        if (destination.showNavigationRail)\n        {\n            /* ... */\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: RadioGroup Value Assignment (After)\nDESCRIPTION: This code shows how the `RadioGroup.value` property is used after the refactoring.  The `value` is now a string representing the `key` of the selected radio button. This approach avoids issues when reordering radio buttons.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar radioGroup = new RadioGroup();\nradioGroup.Add(new Radio { label = \"Radio 1\", key = \"key1\" });\nradioGroup.Add(new Radio { label = \"Radio 2\", key = \"key2\" });\nradioGroup.value = \"key2\"; // Select the second radio button\n```\n\n----------------------------------------\n\nTITLE: Registering Store Service in AppBuilder - C#\nDESCRIPTION: Registers the `StoreService` as a singleton service in the `UIToolkitAppBuilder`. This allows the service to be injected into ViewModels and other components, providing access to the Redux store. Requires Unity.AppUI.MVVM namespace.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_13\n\nLANGUAGE: cs\nCODE:\n```\npublic class MyAppBuilder : UIToolkitAppBuilder<MyApp>\n{\n    protected override void OnConfiguringApp(AppBuilder builder)\n    {\n        base.OnConfiguringApp(builder);\n\n        builder.services.AddSingleton<IStoreService, StoreService>();\n\n        // Add others services/viewmodels/views here...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Store Changes in Unity (Before)\nDESCRIPTION: This code snippet illustrates the original method of subscribing to store changes in Unity, using a function to unsubscribe.  It returns a function, unsub, that must be called to unsubscribe from the store.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nUnsubscriber unsub;\n// Subscribe to store changes\nunsub = store.Subscribe(\"sliceName\", state => { /* ... */ });\n// Unsubscribe\nunsub();\n```\n\n----------------------------------------\n\nTITLE: Redux Store Creation (Before)\nDESCRIPTION: This code shows the old way to create a Redux store and add slices.  Slices could be added to the store after its creation.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar store = new Store();\nstore.AddSlice(\"sliceName\", new MySliceState(), builder => { /* ... */ });\nstore.AddSlice(\"slice2Name\", /* ... */ );\n```\n\n----------------------------------------\n\nTITLE: Action Creator Declaration (Before)\nDESCRIPTION: This code shows the old way to declare action creators using the `Store.CreateAction` factory method. It supports both action creators with and without payloads.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nstatic readonly ActionCreator actionType0 = Store.CreateAction(\"actionType0\");\nstatic readonly ActionCreator<int> actionType1 = Store.CreateAction<int>(\"actionType1\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Logger Enhancer - C#\nDESCRIPTION: This snippet demonstrates how to create a store enhancer that logs every dispatched action to the console. The `LoggerEnhancer` function takes a `createStore` function and returns a new function that wraps the original `dispatch` method to log the action type before dispatching it. Requires `Unity.AppUI.Redux` and `UnityEngine` namespaces.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/state-management.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nusing Unity.AppUI.Redux;\nusing UnityEngine;\n\npublic static class Enhancers\n{\n    public static StoreEnhancer<TState> LoggerEnhancer<TState>()\n    {\n        return (createStore) => (reducer, initialState) =>\n        {\n            var store = createStore(reducer, initialState);\n            var originalDispatch = store.dispatch;\n            store.dispatch = action =>\n            {\n                Debug.Log($\"Action: {action.type}\");\n                originalDispatch(action);\n            };\n            return store;\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reducer Declaration (Before)\nDESCRIPTION: This code shows how to declare reducers before the refactoring. Reducers took `Action` or `Action<T>` as the second parameter.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n// with no payload\nstatic MyAppState MyReducer1(MyAppState state, Action action) { /* ... */ }\n// with int payload\nstatic MyAppState MyReducer2(MyAppState state, Action<int> action) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Toast Action Creation (Before)\nDESCRIPTION: This example shows how to add an action to a Toast component using `Toast.SetAction`. This method has been removed and replaced by the `Toast.AddAction` method.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/migrate.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar toast = Toast.Build(/* ... */);\ntoast.SetAction(DISMISS_ACTION, \"Dismiss\", () => Debug.Log(\"Dismissed\"));\n```\n\n----------------------------------------\n\nTITLE: Removing Quarantine Attribute from AppUINativePlugin - Shell\nDESCRIPTION: This code snippet provides a shell command to remove the quarantine attribute from the `AppUINativePlugin.bundle` file on macOS. This is a workaround for an issue where the plugin is not correctly signed, preventing it from being loaded.  It requires access to the terminal and the `xattr` command.\nSOURCE: https://github.com/thephuongcqt/unity-app-ui-docs/blob/main/faq.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nxattr -d com.apple.quarantine <path-to-AppUINativePlugin.bundle>\n```"
  }
]