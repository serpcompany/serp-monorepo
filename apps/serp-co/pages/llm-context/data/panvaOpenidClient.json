[
  {
    "owner": "panva",
    "repo": "openid-client",
    "content": "TITLE: Refresh Token Grant Example (openid-client, TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the refreshTokenGrant function from the openid-client library to request a new access token using a refresh token.  It includes setting up necessary variables and passing them to the function along with optional scope and resource parameters. The returned tokenEndpointResponse contains the new access token and related information.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/refreshTokenGrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet refreshToken!: string\nlet scope!: string\nlet resource!: string\n\nlet tokenEndpointResponse = await client.refreshTokenGrant(\n  config,\n  refreshToken,\n  {\n    scope,\n    resource,\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Configuration with Discovery (openid-client)\nDESCRIPTION: Illustrates how to perform Authorization Server Metadata discovery to configure the client. This allows the client to dynamically retrieve the necessary endpoints and parameters from the authorization server based on its Issuer Identifier. It requires a server URL, client ID, and client secret.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL // Authorization Server's Issuer Identifier\nlet clientId!: string // Client identifier at the Authorization Server\nlet clientSecret!: string // Client Secret\n\nlet config: client.Configuration = await client.discovery(\n  server,\n  clientId,\n  clientSecret,\n)\n```\n\n----------------------------------------\n\nTITLE: Building Authorization URL with PKCE - Typescript\nDESCRIPTION: This code snippet demonstrates how to build an authorization URL using the openid-client library, including Proof Key for Code Exchange (PKCE) parameters. It showcases the usage of randomPKCECodeVerifier and calculatePKCECodeChallenge functions, then uses buildAuthorizationUrl to create the final redirect URL.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/buildAuthorizationUrl.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet redirect_uri!: string\nlet scope!: string\n\n// these must be unique for every single authorization request\nlet code_verifier = client.randomPKCECodeVerifier()\nlet code_challenge =\n  await client.calculatePKCECodeChallenge(code_verifier)\n\nlet redirectTo = client.buildAuthorizationUrl(config, {\n  redirect_uri,\n  scope,\n  code_challenge,\n  code_challenge_method: 'S256',\n})\n// redirect now\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Grant (openid-client)\nDESCRIPTION: Demonstrates how to exchange the authorization code for tokens using the authorizationCodeGrant function. It utilizes the code verifier (from PKCE) and expected state. The function returns a TokenEndpointResponse object containing access and refresh tokens.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet getCurrentUrl!: (...args: any) => URL\n\nlet tokens: client.TokenEndpointResponse = await client.authorizationCodeGrant(\n  config,\n  getCurrentUrl(),\n  {\n    pkceCodeVerifier: code_verifier,\n    expectedState: state,\n  },\n)\n\nconsole.log('Token Endpoint Response', tokens)\n```\n\n----------------------------------------\n\nTITLE: Initiate Backchannel Authentication with OpenID Client in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `initiateBackchannelAuthentication` function from the openid-client library to initiate a CIBA flow. It requires a `Configuration` object and a parameters object containing at least one of the `login_hint`, `id_token_hint`, or `login_hint_token` parameters. The function returns a Promise resolving to a `BackchannelAuthenticationResponse` which contains the `auth_req_id`.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/initiateBackchannelAuthentication.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet scope!: string\nlet login_hint!: string // one of login_hint, id_token_hint, or login_hint_token parameters must be provided in CIBA\n\nlet backchannelAuthenticationResponse =\n  await client.initiateBackchannelAuthentication(config, {\n    scope,\n    login_hint,\n  })\n\nlet { auth_req_id } = backchannelAuthenticationResponse\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Flow (openid-client)\nDESCRIPTION: Shows how to generate the authorization URL with PKCE parameters for the Authorization Code Flow. It highlights the importance of generating and storing a code verifier and state for security. The URL is built using the provided configuration and parameters and then user will be redirected to this URL.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Value used in the authorization request as the redirect_uri parameter, this\n * is typically pre-registered at the Authorization Server.\n */\nlet redirect_uri!: string\nlet scope!: string // Scope of the access request\n/**\n * PKCE: The following MUST be generated for every redirect to the\n * authorization_endpoint. You must store the code_verifier and state in the\n * end-user session such that it can be recovered as the user gets redirected\n * from the authorization server back to your application.\n */\nlet code_verifier: string = client.randomPKCECodeVerifier()\nlet code_challenge: string =\n  await client.calculatePKCECodeChallenge(code_verifier)\nlet state!: string\n\nlet parameters: Record<string, string> = {\n  redirect_uri,\n  scope,\n  code_challenge,\n  code_challenge_method: 'S256',\n}\n\nif (!config.serverMetadata().supportsPKCE()) {\n  /**\n   * We cannot be sure the server supports PKCE so we're going to use state too.\n   * Use of PKCE is backwards compatible even if the AS doesn't support it which\n   * is why we're using it regardless. Like PKCE, random state must be generated\n   * for every redirect to the authorization_endpoint.\n   */\n  state = client.randomState()\n  parameters.state = state\n}\n\nlet redirectTo: URL = client.buildAuthorizationUrl(config, parameters)\n\n// now redirect the user to redirectTo.href\nconsole.log('redirecting to', redirectTo.href)\n```\n\n----------------------------------------\n\nTITLE: Initiate Device Authorization Grant in openid-client (TypeScript)\nDESCRIPTION: Demonstrates how to use the initiateDeviceAuthorization function to initiate a Device Authorization Grant. The function requires a configuration object and a set of parameters, including the scope.  The returned promise resolves to a DeviceAuthorizationResponse object.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/initiateDeviceAuthorization.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet scope!: string\n\nlet deviceAuthorizationResponse =\n  await client.initiateDeviceAuthorization(config, { scope })\n\nlet { user_code, verification_uri, verification_uri_complete } =\n  deviceAuthorizationResponse\n\nconsole.log({ user_code, verification_uri, verification_uri_complete })\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Flow Example (OAuth 2.0) - TypeScript\nDESCRIPTION: This example demonstrates the Authorization Code Flow using OAuth 2.0 with the openid-client library. It outlines the steps to authenticate and authorize a client application to access protected resources on behalf of a user.\nSOURCE: https://github.com/panva/openid-client/blob/main/examples/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nSee oauth.ts for the complete example.\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Grant Example - Typescript\nDESCRIPTION: This code snippet demonstrates how to use the authorizationCodeGrant function in the openid-client library to exchange an authorization code for tokens. It assumes the existence of configuration, a function to retrieve the code verifier from the session, and a function to get the current URL. It showcases usage with PKCE.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/authorizationCodeGrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet getCodeVerifierFromSession!: (...args: any) => string\nlet getCurrentUrl!: (...args: any) => URL\n\nlet tokens = await client.authorizationCodeGrant(\n  config,\n  getCurrentUrl(),\n  {\n    pkceCodeVerifier: getCodeVerifierFromSession(),\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: JWT Secured Authorization Request (JAR) Example - TypeScript\nDESCRIPTION: This example illustrates the implementation of JWT Secured Authorization Request (JAR) with the openid-client library. It shows how to construct and send authorization requests as signed JWTs to enhance security and integrity.\nSOURCE: https://github.com/panva/openid-client/blob/main/examples/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nSee jar.ts for the complete example.\n```\n\n----------------------------------------\n\nTITLE: Authorization Code Flow Example (OpenID Connect) - TypeScript\nDESCRIPTION: This example showcases the Authorization Code Flow utilizing OpenID Connect with the openid-client library. It details how to authenticate a user and obtain an ID Token and Access Token, incorporating OpenID Connect specific functionalities.\nSOURCE: https://github.com/panva/openid-client/blob/main/examples/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nSee oidc.ts for the complete example.\n```\n\n----------------------------------------\n\nTITLE: DPoP Extension Example - TypeScript\nDESCRIPTION: This example demonstrates the usage of the DPoP (Demonstration of Proof-of-Possession at the Application Layer) extension with the openid-client library. It outlines how to secure access tokens using cryptographic proof-of-possession.\nSOURCE: https://github.com/panva/openid-client/blob/main/examples/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nSee dpop.ts for the complete example.\n```\n\n----------------------------------------\n\nTITLE: Building Authorization URL with JAR (TypeScript)\nDESCRIPTION: Demonstrates how to use the `buildAuthorizationUrlWithJAR` function to construct an authorization URL with a JWT Secured Authorization Request (JAR). It includes generating a PKCE code verifier and challenge, and then using those to create the authorization request parameters. This is then signed using the provided key. The returned URL is ready for redirection.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/buildAuthorizationUrlWithJAR.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet redirect_uri!: string\nlet scope!: string\nlet key!: client.CryptoKey\n\n// these must be unique for every single authorization request\nlet code_verifier = client.randomPKCECodeVerifier()\nlet code_challenge =\n  await client.calculatePKCECodeChallenge(code_verifier)\n\nlet redirectTo = await client.buildAuthorizationUrlWithJAR(\n  config,\n  {\n    redirect_uri,\n    scope,\n    code_challenge,\n    code_challenge_method: 'S256',\n  },\n  key,\n)\n// redirect now\n```\n\n----------------------------------------\n\nTITLE: JWT Secured Authorization Response Mode (JARM) Example - TypeScript\nDESCRIPTION: This example demonstrates the usage of JWT Secured Authorization Response Mode (JARM) with the openid-client library. It shows how to receive authorization responses as signed JWTs, improving security and integrity of the responses.\nSOURCE: https://github.com/panva/openid-client/blob/main/examples/README.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nSee jarm.ts for the complete example.\n```\n\n----------------------------------------\n\nTITLE: Build Authorization URL with PAR and PKCE in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `buildAuthorizationUrlWithPAR` function with PKCE (Proof Key for Code Exchange) to construct an authorization URL.  It initializes variables such as redirect_uri and scope, generates a code verifier and challenge using randomPKCECodeVerifier and calculatePKCECodeChallenge respectively, and then utilizes buildAuthorizationUrlWithPAR to create the authorization URL.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/buildAuthorizationUrlWithPAR.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet redirect_uri!: string\nlet scope!: string\n\n// these must be unique for every single authorization request\nlet code_verifier = client.randomPKCECodeVerifier()\nlet code_challenge =\n  await client.calculatePKCECodeChallenge(code_verifier)\n\nlet redirectTo = await client.buildAuthorizationUrlWithPAR(config, {\n  redirect_uri,\n  scope,\n  code_challenge,\n  code_challenge_method: 'S256',\n})\n// redirect now\n```\n\n----------------------------------------\n\nTITLE: Client Secret JWT Usage with Configuration Instance in TypeScript\nDESCRIPTION: Demonstrates how to use `ClientSecretJwt` with a `Configuration` instance. This involves initializing the configuration directly with server metadata, client ID, and client secret. It uses the `openid-client` library to create a new configuration instance using provided parameters and ClientSecretJwt authentication.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/ClientSecretJwt.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet server!: client.ServerMetadata\nlet clientId!: string\nlet clientSecret!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = new client.Configuration(\n  server,\n  clientId,\n  clientMetadata,\n  client.ClientSecretJwt(clientSecret),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Configuration with Server Metadata Discovery (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a Configuration instance using the `discovery` function. It shows the required variables (server URL, client ID, and client secret) and the asynchronous call to `client.discovery`.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/classes/Configuration.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientSecret!: string | undefined\n\nlet config = await client.discovery(server, clientId, clientSecret)\n```\n\n----------------------------------------\n\nTITLE: Client Secret Post with Configuration Instance - Typescript\nDESCRIPTION: This example demonstrates how to use the ClientSecretPost function with a Configuration instance created directly. It configures client authentication using the client_secret_post method by sending client credentials in the request body. It necessitates server, clientId, and clientSecret variables to be defined.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/ClientSecretPost.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: client.ServerMetadata\nlet clientId!: string\nlet clientSecret!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = new client.Configuration(\n  server,\n  clientId,\n  clientMetadata,\n  client.ClientSecretPost(clientSecret),\n)\n```\n\n----------------------------------------\n\nTITLE: Usage with Discovery Configuration (TypeScript)\nDESCRIPTION: Illustrates how to use ClientSecretBasic with a Configuration object obtained through discovery. The example shows setting up variables for server, client ID, client secret, and client metadata, then using the discovery function with ClientSecretBasic to obtain the configuration.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/ClientSecretBasic.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientSecret!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  client.ClientSecretBasic(clientSecret),\n)\n```\n\n----------------------------------------\n\nTITLE: Building End Session URL with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the `buildEndSessionUrl` function from the `openid-client` library to construct a logout URL. It requires a `Configuration` object, a `post_logout_redirect_uri`, and an `id_token`. The function returns a URL that can be used to redirect the user after logout.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/buildEndSessionUrl.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet post_logout_redirect_uri!: string\nlet id_token!: string\n\nlet redirectTo = client.buildEndSessionUrl(config, {\n  post_logout_redirect_uri,\n  id_token_hint: id_token,\n})\n// redirect now\n```\n\n----------------------------------------\n\nTITLE: Client Secret Post with Discovery Configuration - Typescript\nDESCRIPTION: This example shows how to use the ClientSecretPost function when obtaining a Configuration object through discovery. It configures the client authentication to use the client_secret_post method, sending credentials in the request body. It requires server, clientId, and clientSecret variables to be defined.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/ClientSecretPost.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientSecret!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  client.ClientSecretPost(clientSecret),\n)\n```\n\n----------------------------------------\n\nTITLE: Enable Non-Repudiation Checks with Configuration Instance - TypeScript\nDESCRIPTION: This code snippet illustrates how to enable non-repudiation checks by directly calling the `enableNonRepudiationChecks` function with a pre-existing `Configuration` instance. This approach is suitable when the client configuration is already available and doesn't require discovery. It is important that the [URL of the authorization server's JWK Set document](../interfaces/ServerMetadata.md#jwks_uri) must be configured.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/enableNonRepudiationChecks.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\n\nclient.enableNonRepudiationChecks(config)\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Grant Request in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the clientCredentialsGrant function to request an access token using the OAuth 2.0 Client Credentials Grant.  It requires a Configuration object, a scope string, and a resource string to be defined. The function returns a Promise that resolves to a TokenEndpointResponse object containing the access token and related information.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/clientCredentialsGrant.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet config!: client.Configuration\nlet scope!: string\nlet resource!: string\n\nlet tokenEndpointResponse = await client.clientCredentialsGrant(config, {\n  scope,\n  resource,\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch with ky for Retries and Logging (TS)\nDESCRIPTION: This example demonstrates how to use the `ky` library to add retry functionality and logging to the fetch requests made by the openid-client. It sets up hooks to log requests, responses, and retry attempts.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/customFetch.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport ky from 'ky'\n\nlet config!: client.Configuration\nlet logRequest!: (request: Request) => void\nlet logResponse!: (request: Request, response: Response) => void\nlet logRetry!: (\n  request: Request,\n  error: Error,\n  retryCount: number,\n) => void\n\nconfig[client.customFetch] = (...args) =>\n  ky(args[0], {\n    ...args[1],\n    hooks: {\n      beforeRequest: [\n        (request) => {\n          logRequest(request)\n        },\n      ],\n      beforeRetry: [\n        ({ request, error, retryCount }) => {\n          logRetry(request, error, retryCount)\n        },\n      ],\n      afterResponse: [\n        (request, _, response) => {\n          logResponse(request, response)\n        },\n      ],\n    },\n  })\n```\n\n----------------------------------------\n\nTITLE: Pushed Authorization Request (PAR) Example - TypeScript\nDESCRIPTION: This example showcases the implementation of Pushed Authorization Request (PAR) with the openid-client library. It describes how to push authorization request parameters to the authorization server before initiating the authorization flow, improving security.\nSOURCE: https://github.com/panva/openid-client/blob/main/examples/README.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nSee par.ts for the complete example.\n```\n\n----------------------------------------\n\nTITLE: Polling Token Endpoint for CIBA Grant\nDESCRIPTION: This example demonstrates how to use the `pollBackchannelAuthenticationGrant` function to continuously poll the token endpoint after initiating a CIBA flow using `initiateBackchannelAuthentication`. It showcases the configuration, parameters and how to obtain the token endpoint response.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/pollBackchannelAuthenticationGrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet scope!: string\nlet login_hint!: string // one of login_hint, id_token_hint, or login_hint_token parameters must be provided in CIBA\n\nlet backchannelAuthenticationResponse =\n  await client.initiateBackchannelAuthentication(config, {\n    scope,\n    login_hint,\n  })\n\n// OPTIONAL: If your client is configured with Ping Mode you'd invoke the following after getting the CIBA Ping Callback (its implementation is framework specific and therefore out of scope for openid-client)\n\nlet { auth_req_id } = backchannelAuthenticationResponse\n\nlet tokenEndpointResponse =\n  await client.pollBackchannelAuthenticationGrant(\n    config,\n    backchannelAuthenticationResponse,\n  )\n```\n\n----------------------------------------\n\nTITLE: PrivateKeyJwt Usage with Discovery Configuration (TypeScript)\nDESCRIPTION: Demonstrates using PrivateKeyJwt with a Configuration object obtained through discovery.  This involves using the discovery function to retrieve the server's metadata and then initializing the Configuration.  The PrivateKeyJwt function is passed the client's private key.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/PrivateKeyJwt.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet key!: client.CryptoKey | client.PrivateKey\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  client.PrivateKeyJwt(key),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring customFetch with Mutual-TLS in Node.js (undici)\nDESCRIPTION: This code snippet demonstrates how to configure the `customFetch` option in the openid-client library using Node.js and the `undici` library for Mutual-TLS client authentication. It creates an `undici.Agent` with the provided key and certificate and then overrides the `customFetch` function to use `undici.fetch` with the agent.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/interfaces/ClientMetadata.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport * as undici from 'undici'\n\nlet config!: client.Configuration\nlet key!: string // PEM-encoded key\nlet cert!: string // PEM-encoded certificate\n\nlet agent = new undici.Agent({ connect: { key, cert } })\n\nconfig[client.customFetch] = (...args) =>\n  // @ts-expect-error\n  undici.fetch(args[0], { ...args[1], dispatcher: agent })\n```\n\n----------------------------------------\n\nTITLE: Client Secret JWT Usage with Discovery in TypeScript\nDESCRIPTION: Demonstrates how to use `ClientSecretJwt` with a `Configuration` obtained through discovery. This involves retrieving server metadata, client ID, and client secret, then using them to configure the client. It uses the `openid-client` library to perform the discovery and client configuration.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/ClientSecretJwt.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientSecret!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  client.ClientSecretJwt(clientSecret),\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring customFetch with Mutual-TLS in Deno\nDESCRIPTION: This code snippet demonstrates how to configure the `customFetch` option in the openid-client library using Deno's built-in `Deno.createHttpClient` API for Mutual-TLS client authentication. It creates an HTTP client with the provided key and certificate and overrides the `customFetch` function to use the client.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/interfaces/ClientMetadata.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet config!: client.Configuration\nlet key!: string // PEM-encoded key\nlet cert!: string // PEM-encoded certificate\n\n// @ts-expect-error\nlet agent = Deno.createHttpClient({ key, cert })\n\nconfig[client.customFetch] = (...args) =>\n  // @ts-expect-error\n  fetch(args[0], { ...args[1], client: agent })\n```\n\n----------------------------------------\n\nTITLE: Requesting Access Token JWT Bearer Token Grant TypeScript\nDESCRIPTION: This example shows how to request an Access Token using the JWT Bearer Token Grant with the genericGrantRequest function. It requires a Configuration object, a scope, a resource, and an assertion. The function returns a Promise that resolves with a TokenEndpointResponse containing the access token.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/genericGrantRequest.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet scope!: string\nlet resource!: string\nlet assertion!: string\n\nlet tokenEndpointResponse = await client.genericGrantRequest(\n  config,\n  'urn:ietf:params:oauth:grant-type:jwt-bearer',\n  { scope, resource, assertion },\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch with undici for HTTP Proxy (TS)\nDESCRIPTION: This example demonstrates how to use the `undici` library to configure openid-client to use an HTTP proxy. It creates an `EnvHttpProxyAgent` and configures the fetch options to use it as a dispatcher.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/customFetch.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as undici from 'undici'\n\n// see https://undici.nodejs.org/#/docs/api/EnvHttpProxyAgent\nlet envHttpProxyAgent = new undici.EnvHttpProxyAgent()\n\nlet config!: client.Configuration\n\n// @ts-ignore\nconfig[client.customFetch] = (...args) => {\n  // @ts-ignore\n  return undici.fetch(args[0], { ...args[1], dispatcher: envHttpProxyAgent }) // prettier-ignore\n}\n```\n\n----------------------------------------\n\nTITLE: Device Authorization Grant (openid-client)\nDESCRIPTION: Illustrates the initialization of the Device Authorization Grant. This flow is suitable for devices that lack a browser or have limited input capabilities. It involves initiating the device authorization, displaying instructions to the user, and then polling for the access token.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nlet scope!: string // Scope of the access request\n\nlet response = await client.initiateDeviceAuthorization(config, { scope })\n\nconsole.log('User Code:', response.user_code)\nconsole.log('Verification URI:', response.verification_uri)\nconsole.log('Verification URI (complete):', response.verification_uri_complete)\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch with undici for Automatic Retries (TS)\nDESCRIPTION: This example shows how to use `undici` to automatically retry network errors when making fetch requests with openid-client.  A `RetryAgent` is configured with specific error codes to retry on.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/customFetch.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as undici from 'undici'\n\n// see https://undici.nodejs.org/#/docs/api/RetryAgent\nlet retryAgent = new undici.RetryAgent(new undici.Agent(), {\n  statusCodes: [],\n  errorCodes: [\n    'ECONNRESET',\n    'ECONNREFUSED',\n    'ENOTFOUND',\n    'ENETDOWN',\n    'ENETUNREACH',\n    'EHOSTDOWN',\n    'UND_ERR_SOCKET',\n  ],\n})\n\nlet config!: client.Configuration\n\n// @ts-ignore\nconfig[client.customFetch] = (...args) => {\n  // @ts-ignore\n  return undici.fetch(args[0], { ...args[1], dispatcher: retryAgent }) // prettier-ignore\n}\n```\n\n----------------------------------------\n\nTITLE: Polling Device Authorization Grant with openid-client (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the pollDeviceAuthorizationGrant function from the openid-client library to poll the token endpoint after initiating the Device Authorization flow. It showcases the necessary steps, including initiating the device authorization, displaying the user code and verification URI, and then polling for the token.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/pollDeviceAuthorizationGrant.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet scope!: string\n\nlet deviceAuthorizationResponse =\n  await client.initiateDeviceAuthorization(config, { scope })\n\nlet { user_code, verification_uri, verification_uri_complete } =\n  deviceAuthorizationResponse\n\nconsole.log({ user_code, verification_uri, verification_uri_complete })\n\nlet tokenEndpointResponse = await client.pollDeviceAuthorizationGrant(\n  config,\n  deviceAuthorizationResponse,\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Fetch with undici for Mocking Responses (TS)\nDESCRIPTION: This example demonstrates how to use the `undici` library to mock HTTP responses for testing purposes. A `MockAgent` is created, network connections are disabled, and the fetch function is configured to use the mock agent.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/customFetch.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as undici from 'undici'\n\n// see https://undici.nodejs.org/#/docs/api/MockAgent\nlet mockAgent = new undici.MockAgent()\nmockAgent.disableNetConnect()\n\nlet config!: client.Configuration\n\n// @ts-ignore\nconfig[client.customFetch] = (...args) => {\n  // @ts-ignore\n  return undici.fetch(args[0], { ...args[1], dispatcher: mockAgent }) // prettier-ignore\n}\n```\n\n----------------------------------------\n\nTITLE: Client Credentials Grant (openid-client)\nDESCRIPTION: Illustrates how to obtain an access token using the Client Credentials Grant. It requires the configuration, scope, and resource indicator.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nlet scope!: string // Scope of the access request\nlet resource!: string // Resource Indicator of the Resource Server the access token is for\n\nlet tokens: client.TokenEndpointResponse = await lib.clientCredentialsGrant(\n  config,\n  { scope, resource },\n)\n\nconsole.log('Token Endpoint Response', tokens)\n```\n\n----------------------------------------\n\nTITLE: Modifying JWT Header with modifyAssertion in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `modifyAssertion` option to modify the JWT header before it is signed. Specifically, it remaps the `alg` (algorithm) value from `Ed25519` to `EdDSA`. It shows how to apply this modification within different contexts: building an authorization URL with JAR, creating a Private Key JWT, and generating a DPoP handle. The `remapEd25519` object defines the modification logic, which is then passed to the respective functions.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/modifyAssertion.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet key!: client.CryptoKey | client.PrivateKey\nlet config!: client.Configuration\nlet parameters!: URLSearchParams\nlet keyPair!: client.CryptoKeyPair\n\nlet remapEd25519: client.ModifyAssertionOptions = {\n  [client.modifyAssertion]: (header) => {\n    if (header.alg === 'Ed25519') {\n      header.alg = 'EdDSA'\n    }\n  },\n}\n\n// For JAR\nclient.buildAuthorizationUrlWithJAR(\n  config,\n  parameters,\n  key,\n  remapEd25519,\n)\n\n// For Private Key JWT\nclient.PrivateKeyJwt(key, remapEd25519)\n\n// For DPoP\nclient.getDPoPHandle(config, keyPair, remapEd25519)\n```\n\n----------------------------------------\n\nTITLE: Use Code IdToken Response Type with Discovery (TypeScript)\nDESCRIPTION: Example demonstrating how to use the useCodeIdTokenResponseType function with a Configuration object obtained through OpenID Connect discovery. This configures the client to handle the 'code id_token' response type as defined in the OpenID Connect 1.0 Hybrid Flow. Requires a server URL, client ID, client metadata, and client authentication settings.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/useCodeIdTokenResponseType.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\nlet clientAuth!: client.ClientAuth | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  clientAuth,\n  {\n    execute: [client.useCodeIdTokenResponseType],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Poll Device Authorization Grant (openid-client)\nDESCRIPTION: Demonstrates polling for the Device Authorization Grant's token endpoint response. This function polls the authorization server at regular intervals until the end-user authenticates and the access token is granted.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nlet tokens: client.TokenEndpointResponse =\n  await client.pollDeviceAuthorizationGrant(config, response)\n\nconsole.log('Token Endpoint Response', tokens)\n```\n\n----------------------------------------\n\nTITLE: Enable Detached Signature Response Checks with Discovery (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use `enableDetachedSignatureResponseChecks` in conjunction with `useCodeIdTokenResponseType` after obtaining a configuration through OpenID Connect discovery. It showcases the use of the `execute` option during discovery to automatically apply these configuration enhancements.  It requires `server`, `clientId`, `clientMetadata`, and `clientAuth` to be pre-defined.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/enableDetachedSignatureResponseChecks.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\nlet clientAuth!: client.ClientAuth | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  clientAuth,\n  {\n    execute: [\n      client.useCodeIdTokenResponseType,\n      client.enableDetachedSignatureResponseChecks,\n    ],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Disable HTTPS-only restriction (ts)\nDESCRIPTION: This code snippet demonstrates how to disable the HTTPS-only restriction for the discovery call using the `allowInsecureRequests` method.  It also sets the stage for subsequent requests made with the resulting `Configuration` instance to also allow insecure HTTP requests. It requires the `client` object from the `openid-client` library and some variables to be initialized.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/interfaces/DiscoveryRequestOptions.md#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!:\n  | Partial<client.ClientMetadata>\n  | undefined\n  | string\nlet clientAuth!: client.ClientAuth | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  clientAuth,\n  {\n    execute: [client.allowInsecureRequests],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: CIBA Initiation (openid-client)\nDESCRIPTION: Shows the initiation of the Client-Initiated Backchannel Authentication (CIBA) flow. It requires providing scope and one of login_hint, id_token_hint, or login_hint_token parameters.  After initiating the flow, tokens can be obtained through polling.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet scope!: string // Scope of the access request\n/**\n * One of login_hint, id_token_hint, or login_hint_token parameters must be\n * provided in CIBA\n */\nlet login_hint!: string\n\nlet response = await client.initiateBackchannelAuthentication(config, {\n  scope,\n  login_hint,\n})\n```\n\n----------------------------------------\n\nTITLE: Client Discovery with None Authentication in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `None()` method for client authentication during the discovery process. It shows how to obtain a `Configuration` object using the `discovery` function with `None()` as the client authentication method. The `server`, `clientId`, and `clientMetadata` variables are assumed to be defined elsewhere.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/None.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  client.None(),\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Configuration with a Constructor (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a Configuration instance directly using its constructor. It showcases the variables required (server metadata, client ID, and client secret) and the instantiation of the `client.Configuration` class.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/classes/Configuration.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: client.ServerMetadata\nlet clientId!: string\nlet clientSecret!: string | undefined\n\nlet config = new client.Configuration(server, clientId, clientSecret)\n```\n\n----------------------------------------\n\nTITLE: Setting clockTolerance in ClientMetadata (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure the clockTolerance option within the clientMetadata object of the openid-client library. It sets the client.clockTolerance property to 30, allowing for a 30-second clock skew during JWT validation (e.g., when checking exp or nbf claims).\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/clockTolerance.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientMetadata: client.ClientMetadata = {\n  client_id: 'abc4ba37-4ab8-49b5-99d4-9441ba35d428',\n  // ... other metadata\n  [client.clockTolerance]: 30,\n}\n```\n\n----------------------------------------\n\nTITLE: Building Authorization URL with JAR and PAR (TypeScript)\nDESCRIPTION: Shows how to combine `buildAuthorizationUrlWithJAR` with `buildAuthorizationUrlWithPAR` to achieve a Push Authorization Request (PAR) flow using JAR. The JAR is created as in the previous example and its parameters are then passed to `buildAuthorizationUrlWithPAR`. This allows you to send the request object by reference instead of value, improving security and URL size limitations.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/buildAuthorizationUrlWithJAR.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet redirect_uri!: string\nlet scope!: string\nlet key!: client.CryptoKey\n\n// these must be unique for every single authorization request\nlet code_verifier = client.randomPKCECodeVerifier()\nlet code_challenge =\n  await client.calculatePKCECodeChallenge(code_verifier)\n\nlet { searchParams: params } = await client.buildAuthorizationUrlWithJAR(\n  config,\n  {\n    redirect_uri,\n    scope,\n    code_challenge,\n    code_challenge_method: 'S256',\n  },\n  key,\n)\n\nlet redirectTo = await client.buildAuthorizationUrlWithPAR(\n  config,\n  params,\n)\n// redirect now\n```\n\n----------------------------------------\n\nTITLE: Setting Clock Skew (Past)\nDESCRIPTION: This code snippet demonstrates how to set the 'clockSkew' property in the 'clientMetadata' object to compensate for a local clock that is mistakenly 1 hour in the past. It assigns a positive value representing 60 minutes * 60 seconds to the 'clockSkew' property.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/clockSkew.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientMetadata: client.ClientMetadata = {\n  client_id: 'abc4ba37-4ab8-49b5-99d4-9441ba35d428',\n  // ... other metadata\n  [client.clockSkew]: +(60 * 60),\n}\n```\n\n----------------------------------------\n\nTITLE: Using TlsClientAuth with Discovery in Typescript\nDESCRIPTION: This code snippet demonstrates how to use the TlsClientAuth function with a Configuration object obtained through discovery. It sets the use_mtls_endpoint_aliases property in clientMetadata to true, which is required for the TlsClientAuth method. The server and clientId variables are assumed to be previously defined.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/TlsClientAuth.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\n\nlet clientMetadata = { use_mtls_endpoint_aliases: true }\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  client.TlsClientAuth(),\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTPS-only restriction for discovery call (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to disable the HTTPS-only restriction for the discovery call and all subsequent requests using the resulting Configuration instance. It uses the `allowInsecureRequests` function from the openid-client library within the `execute` option of the `DynamicClientRegistrationRequestOptions` interface.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/interfaces/DynamicClientRegistrationRequestOptions.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!:\n  | Partial<client.ClientMetadata>\n  | undefined\n  | string\nlet clientAuth!: client.ClientAuth | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  clientAuth,\n  {\n    execute: [client.allowInsecureRequests],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Enable Non-Repudiation Checks with Discovery Configuration - TypeScript\nDESCRIPTION: This code snippet demonstrates how to enable non-repudiation checks using the `enableNonRepudiationChecks` function in conjunction with the discovery mechanism of the openid-client library. It shows how to pass the function within the execute array of the discovery options. This ensures that the JWT signatures of responses are validated, providing an additional layer of security.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/enableNonRepudiationChecks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\nlet clientAuth!: client.ClientAuth | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  clientAuth,\n  {\n    execute: [client.enableNonRepudiationChecks],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: ESM Import Example (openid-client)\nDESCRIPTION: Demonstrates how to import the openid-client library using ESM syntax. This allows using the library in environments that support ES modules.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as client from 'openid-client'\n```\n\n----------------------------------------\n\nTITLE: Enabling Response Decryption in TypeScript\nDESCRIPTION: This code snippet demonstrates how to enable decryption of JWT responses (ID Tokens, UserInfo, Introspection) using the `enableDecryptingResponses` function. It requires a `Configuration` object, an array of allowed JWE content encryption algorithms, and at least one decryption key. The keys can be either `CryptoKey` or `DecryptionKey` types.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/enableDecryptingResponses.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet key!: client.CryptoKey | client.DecryptionKey\nlet config!: client.Configuration\n\nclient.enableDecryptingResponses(config, ['A128CBC-HS256'], key)\n```\n\n----------------------------------------\n\nTITLE: Define OmitSymbolProperties Type Alias TypeScript\nDESCRIPTION: Defines a TypeScript type alias named `OmitSymbolProperties` that removes all Symbol properties from a given type `T`. It iterates over the keys of `T` and excludes any keys that are symbols, resulting in a new type that only includes non-symbol properties.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/type-aliases/OmitSymbolProperties.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Removes all Symbol properties from a type\n */\n\ntype OmitSymbolProperties<T> = { [K in keyof T as K extends symbol ? never : K]: T[K] };\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTPS Restriction using Discovery - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `allowInsecureRequests` function with a `Configuration` object obtained through discovery. It disables the HTTPS-only restriction, allowing interactions with non-TLS secured environments. It requires the `openid-client` library and a server URL, client ID, and client metadata.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/allowInsecureRequests.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\nlet clientAuth!: client.ClientAuth | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  clientAuth,\n  {\n    execute: [client.allowInsecureRequests],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Using TlsClientAuth with Configuration Instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to use the TlsClientAuth function with a Configuration instance. It sets the use_mtls_endpoint_aliases property in clientMetadata to true, which is required for the TlsClientAuth method.  The server and clientId variables are assumed to be previously defined. The example uses a Configuration class from the client library.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/TlsClientAuth.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: client.ServerMetadata\nlet clientId!: string\n\nlet clientMetadata = { use_mtls_endpoint_aliases: true }\nlet config = new client.Configuration(\n  server,\n  clientId,\n  clientMetadata,\n  client.TlsClientAuth(),\n)\n```\n\n----------------------------------------\n\nTITLE: Using useJwtResponseMode with Discovery in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use `useJwtResponseMode` function with a `Configuration` object obtained through the discovery process. It shows how to configure the client to expect a JWT response from the authorization server following the JARM specification. The server URL, client ID, client metadata, and client authentication details are required for the discovery process.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/useJwtResponseMode.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: URL\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\nlet clientAuth!: client.ClientAuth | undefined\n\nlet config = await client.discovery(\n  server,\n  clientId,\n  clientMetadata,\n  clientAuth,\n  {\n    execute: [client.useJwtResponseMode],\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: PrivateKeyJwt Usage with Configuration Instance (TypeScript)\nDESCRIPTION: Demonstrates using PrivateKeyJwt with a direct Configuration instance. This involves manually creating a Configuration object with server metadata, client ID, and other relevant client metadata. The PrivateKeyJwt function is used to configure the client authentication method.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/PrivateKeyJwt.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: client.ServerMetadata\nlet key!: client.CryptoKey | client.PrivateKey\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = new client.Configuration(\n  server,\n  clientId,\n  clientMetadata,\n  client.PrivateKeyJwt(key),\n)\n```\n\n----------------------------------------\n\nTITLE: Passport Strategy Example - TypeScript\nDESCRIPTION: This example demonstrates how to integrate the openid-client library with Passport.js, a popular authentication middleware for Node.js. It provides a strategy for authenticating users using OpenID Connect.\nSOURCE: https://github.com/panva/openid-client/blob/main/examples/README.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nSee passport.ts for the complete example.\n```\n\n----------------------------------------\n\nTITLE: Usage with Configuration Instance (TypeScript)\nDESCRIPTION: Illustrates how to use ClientSecretBasic with a Configuration instance. The example sets up variables for server metadata, client ID, client secret, and client metadata, then creates a new Configuration object using ClientSecretBasic.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/ClientSecretBasic.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: client.ServerMetadata\nlet clientId!: string\nlet clientSecret!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = new client.Configuration(\n  server,\n  clientId,\n  clientMetadata,\n  client.ClientSecretBasic(clientSecret),\n)\n```\n\n----------------------------------------\n\nTITLE: Use Code IdToken Response Type with Configuration (TypeScript)\nDESCRIPTION: Example showcasing how to use the useCodeIdTokenResponseType function with an existing Configuration instance. This directly modifies the client's configuration to use the 'code id_token' response type, as described in the OpenID Connect 1.0 Hybrid Flow. Requires an initialized client.Configuration object.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/useCodeIdTokenResponseType.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\n\nclient.useCodeIdTokenResponseType(config)\n```\n\n----------------------------------------\n\nTITLE: Build Authorization URL with JAR and PAR in TypeScript\nDESCRIPTION: This code snippet demonstrates combining JAR (JWT Secured Authorization Request) and PAR to construct an authorization URL. It first uses `buildAuthorizationUrlWithJAR` to create signed authorization parameters, and then passes those parameters to `buildAuthorizationUrlWithPAR`. It initializes variables such as redirect_uri, scope, and a CryptoKey, generates a code verifier and challenge using randomPKCECodeVerifier and calculatePKCECodeChallenge respectively, and calls `buildAuthorizationUrlWithJAR` and `buildAuthorizationUrlWithPAR`.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/buildAuthorizationUrlWithPAR.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\nlet redirect_uri!: string\nlet scope!: string\nlet key!: client.CryptoKey\n\n// these must be unique for every single authorization request\nlet code_verifier = client.randomPKCECodeVerifier()\nlet code_challenge =\n  await client.calculatePKCECodeChallenge(code_verifier)\n\nlet { searchParams: params } = await client.buildAuthorizationUrlWithJAR(\n  config,\n  {\n    redirect_uri,\n    scope,\n    code_challenge,\n    code_challenge_method: 'S256',\n  },\n  key,\n)\n\nlet redirectTo = await client.buildAuthorizationUrlWithPAR(\n  config,\n  params,\n)\n// redirect now\n```\n\n----------------------------------------\n\nTITLE: Using useJwtResponseMode with Configuration Instance in TypeScript\nDESCRIPTION: This code snippet illustrates how to use the `useJwtResponseMode` function with an existing `Configuration` instance. This method directly configures the client to use the `jwt` response mode without needing to use the discovery process.  The `config` variable must be an instance of `client.Configuration`.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/useJwtResponseMode.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\n\nclient.useJwtResponseMode(config)\n```\n\n----------------------------------------\n\nTITLE: Disabling HTTPS Restriction with Configuration Instance - TypeScript\nDESCRIPTION: This snippet illustrates how to use `allowInsecureRequests` with a `Configuration` instance directly. This allows for disabling the HTTPS restriction. It requires an initialized `Configuration` instance from the `openid-client` library.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/allowInsecureRequests.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet config!: client.Configuration\n\nclient.allowInsecureRequests(config)\n```\n\n----------------------------------------\n\nTITLE: Poll CIBA Grant (openid-client)\nDESCRIPTION: Demonstrates polling for the Client-Initiated Backchannel Authentication (CIBA) grant's token endpoint response. This function polls the authorization server at regular intervals until the end-user authenticates and the access token is granted.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * OPTIONAL: If your client is configured with Ping Mode you'd invoke the\n * following after getting the CIBA Ping Callback (its implementation is\n * framework specific and therefore out of scope for openid-client)\n */\n\nlet tokens: client.TokenEndpointResponse =\n  await client.pollBackchannelAuthenticationGrant(config, response)\n\nconsole.log('Token Endpoint Response', tokens)\n```\n\n----------------------------------------\n\nTITLE: Enable Detached Signature Response Checks with Configuration Instance (TypeScript)\nDESCRIPTION: This snippet illustrates how to apply `enableDetachedSignatureResponseChecks` directly to a `Configuration` instance, after first applying `useCodeIdTokenResponseType`. This is an alternative to using the `execute` option during discovery. It assumes a `config` variable of type `client.Configuration` is already defined and initialized.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/enableDetachedSignatureResponseChecks.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nlet config!: client.Configuration\n\nclient.useCodeIdTokenResponseType(config)\nclient.enableDetachedSignatureResponseChecks(config)\n```\n\n----------------------------------------\n\nTITLE: Configuration Instance with None Authentication in TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `None()` method when instantiating a `Configuration` object directly. It shows how to create a new `Configuration` instance with `None()` as the client authentication method. The `server`, `clientId`, and `clientMetadata` variables are assumed to be defined elsewhere. This approach allows for more direct control over the configuration process.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/functions/None.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet server!: client.ServerMetadata\nlet clientId!: string\nlet clientMetadata!: Partial<client.ClientMetadata> | string | undefined\n\nlet config = new client.Configuration(\n  server,\n  clientId,\n  clientMetadata,\n  client.None(),\n)\n```\n\n----------------------------------------\n\nTITLE: Example OAuth Error Response\nDESCRIPTION: Illustrates an example HTTP response with an OAuth-style JSON error body. The Content-Type is application/json, and the response includes an error field indicating the type of error (invalid_request).\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/classes/ResponseBodyError.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  \"error\": \"invalid_request\"\n}\n```\n\n----------------------------------------\n\nTITLE: WWW-Authenticate Example HTTP Response\nDESCRIPTION: An example of an HTTP response with a WWW-Authenticate header. This header is parsed and used to construct the WWWAuthenticateChallengeError.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/classes/WWWAuthenticateChallengeError.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 401 Unauthorized\nWWW-Authenticate: Bearer error=\"invalid_token\",\n                         error_description=\"The access token expired\"\n```\n\n----------------------------------------\n\nTITLE: OAuth 2.0 Error Response Example\nDESCRIPTION: Illustrates an example HTTP response representing an OAuth 2.0 Authorization Error Response. The `Location` header contains the error code and state parameters.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/classes/AuthorizationResponseError.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 302 Found\nLocation: https://client.example.com/cb?error=access_denied&state=xyz\n```\n\n----------------------------------------\n\nTITLE: WWWAuthenticateChallengeParameters Interface Definition TypeScript\nDESCRIPTION: Defines the structure for WWW-Authenticate challenge parameters.  It includes properties for 'algs', 'error', 'error_description', 'error_uri', 'realm', 'resource_metadata', and 'scope'.  It also allows for additional parameters via indexable property. This interface is used to represent the dictionary of parameters returned in a WWW-Authenticate header.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/interfaces/WWWAuthenticateChallengeParameters.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  [\"parameter\": Lowercase<string>]: undefined | string;\n\n  algs?: string;\n  error?: string;\n  error_description?: string;\n  error_uri?: string;\n  realm?: string;\n  resource_metadata?: string;\n  scope?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Issuer transformation algorithm example (txt)\nDESCRIPTION: This example demonstrates how the 'oidc' and 'oauth2' algorithms transform the Issuer Identifier during discovery. It shows how the algorithm choice affects the URL used to fetch the OpenID Connect or OAuth 2.0 authorization server metadata.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/interfaces/DiscoveryRequestOptions.md#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nGiven the Issuer Identifier is https://example.com\n  oidc  => https://example.com/.well-known/openid-configuration\n  oauth => https://example.com/.well-known/oauth-authorization-server\n\nGiven the Issuer Identifier is https://example.com/pathname\n  oidc  => https://example.com/pathname/.well-known/openid-configuration\n  oauth => https://example.com/.well-known/oauth-authorization-server/pathname\n```\n\n----------------------------------------\n\nTITLE: Defining skipStateCheck Constant in oauth\nDESCRIPTION: Defines a constant variable named `skipStateCheck` and assigns it the value of `oauth.skipStateCheck`. This variable allows developers to bypass the state parameter check in OAuth flows but is strongly discouraged due to security implications. Using this option requires a deep understanding and acceptance of potential risks, particularly concerning CSRF attacks if not handled carefully.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/skipStateCheck.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• `const` **skipStateCheck**: *typeof* `oauth.skipStateCheck` = `oauth.skipStateCheck`\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration: skipSubjectCheck\nDESCRIPTION: Declares a constant variable `skipSubjectCheck` which is assigned the value of `oauth.skipSubjectCheck`. This variable is related to skipping subject checks during user info fetching, which has security implications.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/skipSubjectCheck.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n• `const` **skipSubjectCheck**: *typeof* `oauth.skipSubjectCheck` = `oauth.skipSubjectCheck`\n```\n\n----------------------------------------\n\nTITLE: Setting Clock Skew (Future)\nDESCRIPTION: This code snippet demonstrates how to set the 'clockSkew' property in the 'clientMetadata' object to compensate for a local clock that is mistakenly 1 hour in the future. It assigns a negative value representing 60 minutes * 60 seconds to the 'clockSkew' property.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/variables/clockSkew.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet clientMetadata: client.ClientMetadata = {\n  client_id: 'abc4ba37-4ab8-49b5-99d4-9441ba35d428',\n  // ... other metadata\n  [client.clockSkew]: -(60 * 60),\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JsonPrimitive Type Alias\nDESCRIPTION: This snippet defines a type alias called JsonPrimitive. It represents a value that can be a string, a number, a boolean, or null. This type is commonly used when working with JSON data.\nSOURCE: https://github.com/panva/openid-client/blob/main/docs/type-aliases/JsonPrimitive.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype JsonPrimitive = string | number | boolean | null\n```\n\n----------------------------------------\n\nTITLE: Fetch Protected Resource (openid-client)\nDESCRIPTION: Shows how to fetch a protected resource using the access token obtained in the Authorization Code Grant. It requires the configuration, access token, resource URL, and HTTP method.\nSOURCE: https://github.com/panva/openid-client/blob/main/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nlet protectedResourceResponse: Response = await client.fetchProtectedResource(\n  config,\n  tokens.access_token,\n  new URL('https://rs.example.com/api'),\n  'GET',\n)\n\nconsole.log(\n  'Protected Resource Response',\n  await protectedResourceResponse.json(),\n)\n```"
  }
]