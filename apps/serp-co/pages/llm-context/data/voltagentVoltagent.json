[
  {
    "owner": "voltagent",
    "repo": "voltagent",
    "content": "TITLE: Creating VoltAgent App (npm)\nDESCRIPTION: This command uses npm to create a new VoltAgent application. It initializes a project named 'my-agent-app' using the latest version of the `create-voltagent-app` package. This provides an automated project setup experience.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest my-agent-app\n```\n\n----------------------------------------\n\nTITLE: Creating a Supervisor Agent with Subagents in TypeScript\nDESCRIPTION: This code snippet illustrates how to create a supervisor agent in VoltaAgent and integrate specialized subagents. The supervisor agent is initialized with a name, description, an LLM provider, a language model, and an array of subagents (`storyAgent` and `translatorAgent`). The supervisor agent coordinates tasks between the subagents, effectively managing a workflow.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/subagents.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Create a supervisor agent with specialized agents as subagents\nconst supervisorAgent = new Agent({\n  name: \"Supervisor Agent\",\n  description: \"You manage a workflow between specialized agents.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  // Specify subagents during initialization\n  subAgents: [storyAgent, translatorAgent],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Provider Options with Agent\nDESCRIPTION: This snippet demonstrates how to configure common LLM parameters such as temperature, maxTokens, and frequencyPenalty when creating an Agent instance. It uses the VercelAIProvider and openai models, allowing you to fine-tune generation behavior with standardized options and register callbacks for streaming events.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst agent = new Agent({\n  name: \"Configurable Assistant\",\n  description: \"An assistant with configurable generation parameters\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n});\n\n// Example: Configure common LLM parameters regardless of provider\nconst response = await agent.generateText(\"Write a creative story about a robot.\", {\n  provider: {\n    // Fine-tune generation behavior with standardized options\n    temperature: 0.8, // Higher creativity (0-1)\n    maxTokens: 500, // Limit response length\n    topP: 0.9, // Nucleus sampling parameter\n    frequencyPenalty: 0.5, // Reduce repetition\n    presencePenalty: 0.3, // Encourage topic diversity\n    seed: 12345, // Reproducible results\n    stopSequences: [\"THE END\"], // Stop generation at specific string\n\n    // Add provider callbacks for streaming\n    onStepFinish: async (step) => {\n      console.log(\"Step complete:\", step.type);\n    },\n    onFinish: async (result) => {\n      console.log(\"Generation complete!\");\n    },\n    onError: async (error) => {\n      console.error(\"Generation error:\", error);\n    },\n\n    // Provider-specific options not covered by standard fields\n    extraOptions: {\n      someProviderSpecificOption: \"value\",\n    },\n  },\n});\n\n// Alternative: Provide parameters for streamed responses\nconst streamedResponse = await agent.streamText(\"Generate a business plan\", {\n  provider: {\n    temperature: 0.3, // More focused, less creative\n    maxTokens: 2000, // Longer response limit\n    // ... other options as needed\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Calculator Tool with VoltAgent and Zod\nDESCRIPTION: This code snippet demonstrates how to create a simple calculator tool using the `createTool` helper function from `@voltagent/core` and Zod for type validation. The tool takes a mathematical expression as input, evaluates it, and returns the result.  It shows how to define the tool's name, description, parameters using a Zod schema, and the execute function that performs the calculation. Note that `eval` is used for demonstration purposes; a secure math parser is recommended in production.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from \"@voltagent/core\";\nimport { z } from \"zod\";\n\nconst calculatorTool = createTool({\n  name: \"calculate\",\n  description: \"Perform a mathematical calculation\",\n  parameters: z.object({\n    expression: z.string().describe(\"The mathematical expression to evaluate, e.g. (2 + 2) * 3\"),\n  }),\n  execute: async (args) => {\n    try {\n      // In production, use a secure math parser instead of eval\n      const result = eval(args.expression);\n      return { result };\n    } catch (error) {\n      throw new Error(`Invalid expression: ${args.expression}`);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App using CLI\nDESCRIPTION: This code snippet demonstrates how to use the `create-voltagent-app` CLI tool to initialize a new VoltAgent project. It includes commands for installing dependencies, setting up the project structure, adding API keys to the `.env` file, and starting the development server. The generated project will include necessary core packages, TypeScript configuration, basic scripts, and an initial file structure.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Installs necessary dependencies and sets up the basic structure\nnpm create voltagent-app@latest my-voltagent-app\n# Follow prompts for package manager selection (npm/yarn/pnpm)\n\ncd my-voltagent-app\n\n# Add API keys to the generated .env file\necho \"OPENAI_API_KEY=sk-...\" > .env # Example for OpenAI\n\n# Start the development server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Retriever in TypeScript\nDESCRIPTION: Demonstrates how to create a custom retriever in VoltAgent by extending the `BaseRetriever` class and implementing the abstract `retrieve` method. This method defines the logic for fetching data from a specific data source and preparing it for the LLM. Includes creating instances of the retriever both with and without tool options.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/retriever.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseRetriever, type BaseMessage } from \"@voltagent/core\";\n\n// Example: Simple retriever fetching from a predefined document list\nclass MySimpleRetriever extends BaseRetriever {\n  // In a real scenario, this could be a connection to a vector DB, API, etc.\n  private documents = [\n    { id: \"doc1\", content: \"VoltAgent is a framework for building AI agents using TypeScript.\" },\n    { id: \"doc2\", content: \"Retrievers enhance LLMs with external, real-time data for RAG.\" },\n    { id: \"doc3\", content: \"VoltAgent supports tools, memory, sub-agents, and retrievers.\" },\n  ];\n\n  // You MUST implement this method\n  async retrieve(input: string | BaseMessage[]): Promise<string> {\n    // Determine the actual query string from the input\n    const query = typeof input === \"string\" ? input : (input[input.length - 1].content as string);\n    console.log(`MySimpleRetriever: Searching for context related to \"${query}\"`);\n\n    // Implement your retrieval logic here (e.g., keyword search, vector similarity)\n    const relevantDocs = this.documents.filter((doc) =>\n      doc.content.toLowerCase().includes(query.toLowerCase())\n    );\n\n    // Format the retrieved information as a string for the LLM\n    if (relevantDocs.length > 0) {\n      const contextString = relevantDocs\n        .map((doc) => `[Document ${doc.id}] ${doc.content}`)\n        .join(\"\\n\\n\");\n      return contextString;\n    } else {\n      // Return an empty string or a specific message if no context is found\n      return \"No relevant information found in the document knowledge base.\";\n    }\n  }\n}\n\n// You can optionally provide toolName and toolDescription if you plan\n// to use this retriever AS A TOOL.\nconst retrieverWithOptions = new MySimpleRetriever({\n  toolName: \"search_docs\",\n  toolDescription: \"Searches the internal document knowledge base.\",\n});\n\n// Or create it without tool options if only using direct attachment\nconst retrieverBasic = new MySimpleRetriever();\n```\n\n----------------------------------------\n\nTITLE: Streaming Text Generation with Tool Usage\nDESCRIPTION: This snippet shows how to use `streamText` for interactive responses, including tool calls. It defines a weather tool, initializes an agent with the tool, and then streams the response, processing text deltas, tool calls, and tool results. This demonstrates the agent's ability to use tools during text generation.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, createTool } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { z } from \"zod\";\n\n// Example Tool (see Tools section for details)\nconst weatherTool = createTool({\n  name: \"get_weather\",\n  description: \"Get the current weather for a specific location\",\n  parameters: z.object({ location: z.string().describe(\"City and state\") }),\n  execute: async ({ location }) => {\n    console.log(`Tool: Getting weather for ${location}`);\n    // Call API... return mock data\n    return { temperature: 72, conditions: \"sunny\" };\n  },\n});\n\nconst agent = new Agent({\n  name: \"Chat Assistant\",\n  description: \"A helpful assistant that can check the weather.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  tools: [weatherTool],\n});\n\n// Example using streamText for a chat-like interaction\nasync function chat(input: string) {\n  console.log(`User: ${input}`);\n  // Use streamText for interactive responses\n  const response = await agent.streamText(input);\n\n  process.stdout.write(\"Assistant: \");\n  // Process the stream containing text deltas, tool calls, etc.\n  for await (const delta of response.stream) {\n    switch (delta.type) {\n      case \"text-delta\":\n        process.stdout.write(delta.textDelta);\n        break;\n      case \"tool-call\":\n        // Log when the agent decides to call a tool\n        console.log(`\\n[Tool Call: ${delta.toolName} Args: ${JSON.stringify(delta.args)}]`);\n        break;\n      case \"tool-result\":\n        // Log the result after the tool executes\n        console.log(`\\n[Tool Result: ${delta.toolName} Result: ${JSON.stringify(delta.result)}]`);\n        // The agent continues generating text after processing the tool result\n        process.stdout.write(\"Assistant (continuing): \");\n        break;\n      // Handle other delta types (error, finish, etc.) as needed\n    }\n  }\n  console.log(\"\\n--- Interaction Finished ---\");\n}\n\n// Example usage that might trigger the weather tool\n// await chat(\"What's the weather like in London?\");\n\n// Example using generateText for a complete response\n// const completeResponse = await agent.generateText(\"Explain machine learning briefly.\");\n// console.log(\"\\nComplete Response:\", completeResponse.text);\n```\n\n----------------------------------------\n\nTITLE: Complete Subagent Workflow Example in TypeScript\nDESCRIPTION: This code snippet provides a complete example of using specialized agents with a supervisor agent in a VoltaAgent workflow. It includes creating story and translator agents, setting up a supervisor agent to manage them, and then using the supervisor to process a user request, streaming the response.  It demonstrates the interaction between the supervisor and its subagents to fulfill a complex task.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/subagents.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Create specialized agents\nconst storyAgent = new Agent({\n  name: \"Story Agent\",\n  description: \"You are a creative story writer. Create original, engaging short stories.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\nconst translatorAgent = new Agent({\n  name: \"Translator Agent\",\n  description: \"You are a skilled translator. Translate text accurately.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Create the supervisor agent\nconst supervisorAgent = new Agent({\n  name: \"Supervisor Agent\",\n  description:\n    \"You manage a workflow between specialized agents. When asked for a story, \" +\n    \"use the Story Agent to create it. Then use the Translator Agent to translate the story. \" +\n    \"Present both versions to the user.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  subAgents: [storyAgent, translatorAgent],\n});\n\n// Use the supervisor agent to handle a user request\nconst result = await supervisorAgent.streamText(\n  \"Write a short story about a robot learning to paint and translate it to German.\"\n);\n\n// Process the streamed response\nfor await (const chunk of result.textStream) {\n  process.stdout.write(chunk);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Agent Hooks in TypeScript\nDESCRIPTION: This code demonstrates how to create and use hooks within a VoltAgent agent using the `createHooks` helper function. It defines hooks for various lifecycle events such as `onStart`, `onEnd`, `onToolStart`, `onToolEnd`, and `onHandoff`. The hooks are then passed to the agent during initialization.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/hooks.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, createHooks, type AgentTool, type AgentOutput } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Define a collection of hooks using the helper\nconst myAgentHooks = createHooks({\n  /**\n   * Called before the agent starts processing a request.\n   * @param agent - The Agent instance that is starting.\n   */\n  onStart: async (agent: Agent<any>) => {\n    console.log(`[Hook] Agent ${agent.name} starting interaction at ${new Date().toISOString()}`);\n    // Example: Initialize request-specific resources\n  },\n\n  /**\n   * Called after the agent successfully finishes processing a request.\n   * @param agent - The Agent instance that finished.\n   * @param output - The final output object from the agent method (structure depends on the method called, e.g., generateText vs generateObject).\n   */\n  onEnd: async (agent: Agent<any>, output: AgentOutput) => {\n    console.log(`[Hook] Agent ${agent.name} finished processing.`);\n    // Example: Log usage or analyze the result\n    if (output.usage) {\n      console.log(`[Hook] Token Usage: ${output.usage.total_tokens}`);\n    }\n    if (output.text) {\n      console.log(`[Hook] Final text length: ${output.text.length}`);\n    }\n  },\n\n  /**\n   * Called just before a tool's execute function is called.\n   * @param agent - The Agent instance using the tool.\n   * @param tool - The AgentTool definition object that is about to be executed.\n   */\n  onToolStart: async (agent: Agent<any>, tool: AgentTool) => {\n    console.log(`[Hook] Agent ${agent.name} starting tool: ${tool.name}`);\n    // Example: Validate tool inputs or log intent\n  },\n\n  /**\n   * Called after a tool's execute function successfully completes.\n   * @param agent - The Agent instance that used the tool.\n   * @param tool - The AgentTool definition object that executed.\n   * @param result - The result returned by the tool's execute function.\n   */\n  onToolEnd: async (agent: Agent<any>, tool: AgentTool, result: any) => {\n    console.log(`[Hook] Tool ${tool.name} completed with result:`, result);\n    // Example: Log tool output or trigger follow-up actions\n  },\n\n  /**\n   * Called when a task is handed off from a source agent to this agent (in sub-agent scenarios).\n   * @param agent - The Agent instance receiving the handoff.\n   * @param sourceAgent - The Agent instance that initiated the handoff.\n   */\n  onHandoff: async (agent: Agent<any>, sourceAgent: Agent<any>) => {\n    console.log(`[Hook] Task handed off from ${sourceAgent.name} to ${agent.name}`);\n    // Example: Track collaboration flow in multi-agent systems\n  },\n});\n\n// Define a placeholder provider for the example\nconst provider = new VercelAIProvider();\n\n// Assign the hooks when creating an agent\nconst agentWithHooks = new Agent({\n  name: \"My Agent with Hooks\",\n  description: \"An assistant demonstrating hooks\",\n  llm: provider,\n  model: openai(\"gpt-4o\"),\n  // Pass the hooks object during initialization\n  hooks: myAgentHooks,\n});\n\n// Alternatively, define hooks inline (less reusable)\nconst agentWithInlineHooks = new Agent({\n  name: \"Inline Hooks Agent\",\n  description: \"Another assistant\",\n  llm: provider,\n  model: openai(\"gpt-4o\"),\n  hooks: {\n    onStart: async (agent) => {\n      /* ... */\n    },\n    // ... other inline hooks ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing LLMProvider Interface in TypeScript\nDESCRIPTION: This code snippet demonstrates the structure for creating a custom LLM provider by implementing the `LLMProvider` interface from `@voltagent/core`. It includes type definitions for model representation, provider message format, and raw API response. The implementation outlines the required methods for handling text and object generation, both streaming and non-streaming.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/providers.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  BaseMessage,\n  GenerateObjectOptions,\n  GenerateTextOptions,\n  LLMProvider,\n  ProviderObjectResponse,\n  ProviderTextResponse,\n  StreamObjectOptions,\n  StreamTextOptions,\n  // Import necessary types for streaming results if applicable\n} from \"@voltagent/core\";\nimport { z } from \"zod\";\n\n// Define the type for your provider's specific model representation\n// (e.g., string, or a custom object if needed)\ntype MyModelType = string;\n// Define the type for your provider's internal message format\ntype MyProviderMessageType = { role: string; text: string /* other fields */ };\n// Define the raw response type from your provider's API\ntype MyProviderResponseType = any; // Replace 'any' with a more specific type\n\nexport class MyCustomProvider implements LLMProvider<MyModelType, MyProviderMessageType> {\n  private apiKey: string;\n\n  constructor(apiKey: string) {\n    this.apiKey = apiKey;\n    // It's often good practice to bind methods if needed, although sometimes optional\n    // this.generateText = this.generateText.bind(this);\n    // ... bind other methods ...\n  }\n\n  /**\n   * Returns a string identifier for the given model, used internally and for logging.\n   */\n  getModelIdentifier(model: MyModelType): string {\n    return model; // Assuming model is already a string identifier\n  }\n\n  /**\n   * Converts VoltAgent's standard BaseMessage format to the format expected by your LLM API.\n   */\n  toMessage(message: BaseMessage): MyProviderMessageType {\n    // Map role and content, handle potential differences\n    return {\n      role: message.role === \"assistant\" ? \"model\" : message.role, // Example mapping\n      text: message.content as string, // Assuming content is always string for this provider\n    };\n  }\n\n  /**\n   * Handles non-streaming text generation calls.\n   */\n  async generateText(\n    options: GenerateTextOptions<MyModelType, MyProviderMessageType>\n  ): Promise<ProviderTextResponse<MyProviderResponseType>> {\n    const providerMessages = options.messages.map(this.toMessage);\n\n    // --- Your API Call Logic Here ---\n    console.log(`Calling custom API for model: ${options.model}`);\n    const response = await fetch(\"https://my-custom-llm-api.com/generate\", {\n      method: \"POST\",\n      headers: { Authorization: `Bearer ${this.apiKey}`, \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        model: options.model,\n        messages: providerMessages /*, other params */,\n      }),\n      signal: options.signal, // Pass the AbortSignal\n    });\n    if (!response.ok) {\n      throw new Error(`API Error: ${response.statusText}`);\n    }\n    const result: MyProviderResponseType = await response.json();\n    // --- End API Call Logic ---\n\n    // Map the raw API response back to VoltAgent's standard ProviderTextResponse format\n    return {\n      provider: result, // Store the original provider response\n      text: result.generated_text || \"\", // Extract the text response\n      usage: result.token_usage\n        ? {\n            // Map usage statistics\n            promptTokens: result.token_usage.input,\n            completionTokens: result.token_usage.output,\n            totalTokens: result.token_usage.total,\n          }\n        : undefined,\n      finishReason: result.stop_reason || \"unknown\", // Map finish reason\n      // Include other fields like logprobs if available and needed\n    };\n  }\n\n  /**\n   * Handles streaming text generation calls.\n   * Must return an object containing a readable stream (`result.stream`).\n   */\n  async streamText(\n    options: StreamTextOptions<MyModelType, MyProviderMessageType>\n  ): Promise<{ stream: ReadableStream<any>; provider: MyProviderResponseType }> {\n    // Implementation involves making a streaming API call (e.g., using EventSource or fetch with ReadableStream)\n    // and transforming the provider's stream chunks into VoltAgent's stream format.\n    console.log(`Streaming from custom API for model: ${options.model}`);\n    // ... Implementation details omitted for brevity ...\n    throw new Error(\"streamText not implemented in this example\");\n  }\n\n  /**\n   * Handles non-streaming structured object generation calls.\n   */\n  async generateObject<TSchema extends z.ZodType>(\n    options: GenerateObjectOptions<MyModelType, TSchema, MyProviderMessageType>\n  ): Promise<ProviderObjectResponse<MyProviderResponseType, z.infer<TSchema>>> {\n    // Implementation involves sending the prompt and schema to an LLM API that supports\n    // structured output or function calling, then parsing the result.\n    console.log(`Generating object with custom API for model: ${options.model}`);\n    // ... Implementation details omitted for brevity ...\n    throw new Error(\"generateObject not implemented in this example\");\n  }\n\n  /**\n   * Handles streaming structured object generation calls.\n   * Must return an object containing a readable stream (`result.objectStream`).\n   */\n  async streamObject<TSchema extends z.ZodType>(\n    options: StreamObjectOptions<MyModelType, TSchema, MyProviderMessageType>\n  ): Promise<{ objectStream: ReadableStream<any>; provider: MyProviderResponseType }> {\n    // Implementation involves making a streaming API call and parsing partial object chunks.\n    console.log(`Streaming object with custom API for model: ${options.model}`);\n    // ... Implementation details omitted for brevity ...\n    throw new Error(\"streamObject not implemented in this example\");\n  }\n}\n\n// --- Usage with your custom provider ---\n// const customProvider = new MyCustomProvider(\"my-secret-api-key\");\n// const agent = new Agent({\n//   name: \"Custom Provider Agent\",\n//   description: \"Using my custom provider\",\n//   llm: customProvider,\n//   model: \"my-custom-model-v1\",\n// });\n\n// const response = await agent.generateText(\"Hello custom world!\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool for Agent Interaction\nDESCRIPTION: This code snippet shows how to create a tool using `createTool` and integrate it with an agent.  The weather tool is defined with a name, description, parameters (using Zod), and an `execute` function.  The agent is then configured to use this tool, allowing it to interact with the outside world.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, createTool } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { z } from \"zod\";\n\n// Create a weather tool using the helper function\nconst weatherTool = createTool({\n  name: \"get_weather\",\n  description: \"Get the current weather for a specific location\",\n  parameters: z.object({\n    location: z.string().describe(\"The city and state, e.g., San Francisco, CA\"),\n  }),\n  // The function the agent executes when using the tool\n  execute: async ({ location }) => {\n    console.log(`Tool: Getting weather for ${location}`);\n    // In a real scenario, call a weather API here\n    // Returning mock data for demonstration\n    if (location.toLowerCase().includes(\"london\")) {\n      return { temperature: 55, conditions: \"cloudy\" };\n    }\n    return { temperature: 72, conditions: \"sunny\" };\n  },\n});\n\nconst agent = new Agent({\n  name: \"Weather Assistant\",\n  description: \"An assistant that can check the weather using available tools.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"), // Models supporting tool use are required\n  tools: [weatherTool], // Provide the list of tools to the agent\n});\n\n// Example: Call streamText and the agent might use the tool\n// await agent.streamText(\"What's the weather in London?\");\n// The agent should call the 'get_weather' tool during the stream.\n```\n\n----------------------------------------\n\nTITLE: Initializing LibSQLStorage with VoltAgent in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize `LibSQLStorage` with various configuration options, including connection URL, authentication token, table prefix, storage limit, and debug mode. It then integrates the configured storage into an `Agent` instance, specifying a name, description, LLM provider, model, and memory.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/libsql.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, LibSQLStorage } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Configure LibSQLStorage\nconst memoryStorage = new LibSQLStorage({\n  // Required: Connection URL\n  url: process.env.DATABASE_URL || \"file:./voltagent-memory.db\", // Example: Env var for Turso, fallback to local file\n\n  // Required for Turso / Remote sqld (if not using TLS or auth is needed)\n  authToken: process.env.DATABASE_AUTH_TOKEN,\n\n  // Optional: Prefix for database table names\n  tablePrefix: \"my_agent_memory\", // Defaults to 'voltagent_memory'\n\n  // Optional: Storage limit (max number of messages per user/conversation)\n  // storageLimit: 100, // Defaults to 100\n\n  // Optional: Enable debug logging for the storage provider\n  // debug: true, // Defaults to false\n});\n\nconst agent = new Agent({\n  name: \"LibSQL Memory Agent\",\n  description: \"An agent using LibSQL for memory.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  memory: memoryStorage,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Multiple Tools with a VoltAgent\nDESCRIPTION: This code demonstrates how to create and use multiple tools with a VoltAgent. It defines both a `calculatorTool` (as in the previous example) and a `weatherTool`. The `weatherTool` takes a location as input and returns a simplified weather forecast.  Both tools are then added to the `tools` array when creating the `multiToolAgent`. The agent can then use both tools in the same conversation to answer questions involving calculations and weather information.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, createTool } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { z } from \"zod\";\n\n// Calculator tool\nconst calculatorTool = createTool({\n  name: \"calculate\",\n  description: \"Perform a mathematical calculation\",\n  parameters: z.object({\n    expression: z.string().describe(\"The mathematical expression to evaluate\"),\n  }),\n  execute: async (args) => {\n    try {\n      // args is automatically typed as { expression: string }\n      const result = eval(args.expression);\n      return { result };\n    } catch (error) {\n      throw new Error(`Invalid expression: ${args.expression}`);\n    }\n  },\n});\n\n// Weather tool\nconst weatherTool = createTool({\n  name: \"get_weather\",\n  description: \"Get the current weather for a location\",\n  parameters: z.object({\n    location: z.string().describe(\"The city name\"),\n  }),\n  execute: async (args) => {\n    // args is automatically typed as { location: string }\n    const { location } = args;\n\n    // In a real implementation, you would call a weather API\n    // This is a simplified example\n    return {\n      location,\n      temperature: 22,\n      conditions: \"sunny\",\n    };\n  },\n});\n\n// Create an agent with multiple tools\nconst multiToolAgent = new Agent({\n  name: \"Multi-Tool Assistant\",\n  description: \"An assistant that can check weather and perform calculations\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  tools: [calculatorTool, weatherTool],\n});\n\n// The agent can now use both tools in the same conversation\nconst response = await multiToolAgent.generateText(\n  \"What's the weather in Paris today? Also, what is 24 * 7?\"\n);\nconsole.log(response.text);\n\n// Example response:\n// \"The current weather in Paris is 22°C and sunny. As for your calculation, 24 * 7 = 168.\"\n```\n\n----------------------------------------\n\nTITLE: Multi-Agent System Setup with VoltAgent (TypeScript)\nDESCRIPTION: This TypeScript code demonstrates how to create a multi-agent system using VoltAgent. It defines two subagents (Story Writer and Translator) and a supervisor agent that orchestrates their interactions.  The `VercelAIProvider` and `openai` libraries are used to integrate with the language model. The `subAgents` property of the supervisor agent links it to the subagents, allowing it to delegate tasks.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-23-multi-agent-llm/index.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Inside your VoltAgent project (e.g., src/index.ts)\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// 1. Create Subagents\nconst storyWriter = new Agent({\n  name: \"Story Writer\",\n  description: \"You are an expert at writing creative and engaging short stories.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\nconst translator = new Agent({\n  name: \"Translator\",\n  description: \"You are a skilled translator, proficient in translating text accurately.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// 2. Create the Supervisor Agent (linking subagents)\nconst supervisorAgent = new Agent({\n  name: \"Supervisor Agent\",\n  description:\n    \"You manage workflows between specialized agents. \" +\n    \"When asked for a story, use the Story Writer. \" +\n    \"Then, use the Translator to translate the story. Present both versions to the user.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  // Connect the subagents here\n  subAgents: [storyWriter, translator],\n});\n\nnew VoltAgent({\n  agents: {\n    supervisorAgent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Good Example: Clear Tool Descriptions and Parameters\nDESCRIPTION: This snippet provides a good example of tool creation with clear and detailed descriptions. The `search_web` tool has a comprehensive description that explains its purpose and usage guidance. The parameters `query` and `results_count` have clear names and descriptions, including validation constraints, making it easier for the agent to understand and use the tool correctly.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst goodTool = createTool({\n  name: \"search_web\",\n  description:\n    \"Searches the web for current information on a topic. Use this when you need to find recent or factual information that may not be in your training data.\", // Clear purpose and usage guidance\n  parameters: z.object({\n    query:\n      z\n        .string()\n        .describe(\"The search query. Should be specific and focused on what information is needed.\"),\n    results_count:\n      z\n        .number()\n        .min(1)\n        .max(10)\n        .optional()\n        .describe(\"Number of results to return. Defaults to 3 if not specified.\"),\n  }),\n  execute: async (args) => {\n    /* ... */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Memory Provider in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement a custom memory provider for VoltaAgent. It defines a class `MyCustomStorage` that implements the `Memory` interface from `@voltagent/core`. It includes example implementations for `addMessage`, `getMessages`, `createConversation`, `getConversation`, `getConversations`, `updateConversation`, `deleteConversation`, `clearMessages`, `addHistoryEntry`, `updateHistoryEntry`, `addHistoryEvent`, `updateHistoryEvent`, `addHistoryStep`, `updateHistoryStep`, `getHistoryEntry`, `getHistoryEvent`, `getHistoryStep`, `getAllHistoryEntriesByAgent`.  Most methods are left unimplemented throwing an error.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/overview.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  Memory,\n  MemoryMessage,\n  Conversation,\n  CreateConversationInput,\n  MessageFilterOptions /*...other types*/,\n} from \"@voltagent/core\";\n\n// Example Structure\nexport class MyCustomStorage implements Memory {\n  private dbClient: any; // Your database client instance\n\n  constructor(/* connection options */) {\n    // Initialize client\n  }\n\n  async addMessage(message: MemoryMessage, userId: string, conversationId: string): Promise<void> {\n    const key = `memory:${userId}:${conversationId}`;\n    // Logic to store message in your DB\n  }\n\n  async getMessages(options: MessageFilterOptions): Promise<MemoryMessage[]> {\n    const key = `memory:${options.userId}:${options.conversationId}`;\n    // Logic to retrieve messages from your DB, applying limit\n    return []; // Return retrieved messages\n  }\n\n  // ... implement all other methods from the Memory interface ...\n\n  async createConversation(conversation: CreateConversationInput): Promise<Conversation> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async getConversation(id: string): Promise<Conversation | null> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async getConversations(resourceId: string): Promise<Conversation[]> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async updateConversation(\n    id: string,\n    updates: Partial<Omit<Conversation, \"id\" | \"createdAt\" | \"updatedAt\">>\n  ): Promise<Conversation> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async deleteConversation(id: string): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async clearMessages(options: {\n    userId: string;\n    conversationId?: string | undefined;\n  }): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async addHistoryEntry(key: string, value: any, agentId: string): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async updateHistoryEntry(key: string, value: any, agentId: string): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async addHistoryEvent(\n    key: string,\n    value: any,\n    historyId: string,\n    agentId: string\n  ): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async updateHistoryEvent(\n    key: string,\n    value: any,\n    historyId: string,\n    agentId: string\n  ): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async addHistoryStep(key: string, value: any, historyId: string, agentId: string): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async updateHistoryStep(\n    key: string,\n    value: any,\n    historyId: string,\n    agentId: string\n  ): Promise<void> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async getHistoryEntry(key: string): Promise<any> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async getHistoryEvent(key: string): Promise<any> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async getHistoryStep(key: string): Promise<any> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n  async getAllHistoryEntriesByAgent(agentId: string): Promise<any[]> {\n    /* ... */ throw new Error(\"Not implemented\");\n  }\n}\n\n// Use your custom memory provider\nconst agent = new Agent({\n  // ... other options\n  memory: new MyCustomStorage(/* ... */),\n});\n```\n\n----------------------------------------\n\nTITLE: Using VercelAIProvider with VoltAgent\nDESCRIPTION: This code snippet demonstrates how to create VoltAgent agents using the VercelAIProvider, leveraging the Vercel AI SDK for compatibility with various LLMs. It imports necessary modules from `@voltagent/core`, `@voltagent/vercel-ai`, and the Vercel AI SDK. It showcases the instantiation of agents with different LLMs (OpenAI and Anthropic) by passing the corresponding model objects from the Vercel AI SDK to the `model` parameter of the `Agent` constructor. No specific options are typically required for instantiating the provider itself.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/providers.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\n// Import model definitions from the Vercel AI SDK\nimport { openai } from \"@ai-sdk/openai\";\nimport { anthropic } from \"@ai-sdk/anthropic\";\n\n// Instantiate the provider (usually requires no options)\nconst vercelProvider = new VercelAIProvider();\n\n// Create an agent using an OpenAI model via Vercel AI SDK\nconst agentOpenAI = new Agent({\n  name: \"Vercel OpenAI Assistant\",\n  description: \"A helpful assistant powered by OpenAI via Vercel SDK\",\n  llm: vercelProvider,\n  // Pass the model object from the Vercel AI SDK\n  model: openai(\"gpt-4o\"),\n});\n\n// Create another agent using an Anthropic model via Vercel AI SDK\nconst agentAnthropic = new Agent({\n  name: \"Vercel Anthropic Assistant\",\n  description: \"A helpful assistant powered by Anthropic via Vercel SDK\",\n  llm: vercelProvider, // Can reuse the same provider instance\n  // Pass a different model object\n  model: anthropic(\"claude-3-5-sonnet-20240620\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Using XsAIProvider with VoltAgent\nDESCRIPTION: This code snippet demonstrates how to create a VoltAgent agent using the XsAIProvider, which provides a lightweight interface specifically for OpenAI and OpenAI-compatible APIs. It imports necessary modules from `@voltagent/core` and `@voltagent/xsai`. It shows how to instantiate the provider, passing necessary options like API keys or baseURL, and how to create an agent by passing the model name as a string to the `model` parameter. The `apiKey` is essential, and for local setups like Ollama, the `baseURL` and a specific `apiKey` (often \"ollama\") are required.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/providers.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { XsAIProvider } from \"@voltagent/xsai\";\n\n// Instantiate the provider, passing necessary options like API keys or baseURL\nconst xsaiProvider = new XsAIProvider({\n  // Example for OpenAI:\n  apiKey: process.env.OPENAI_API_KEY,\n  // Example for a local Ollama server:\n  // baseURL: \"http://localhost:11434/v1\",\n  // apiKey: \"ollama\", // Often required, even if not used by the server\n});\n\nconst agent = new Agent({\n  name: \"xsAI Assistant\",\n  description: \"A helpful assistant using a lightweight provider\",\n  llm: xsaiProvider,\n  // Pass the model name as a string recognized by the target API\n  model: \"gpt-4o-mini\", // Example for OpenAI\n  // model: \"llama3\", // Example for Ollama\n});\n```\n\n----------------------------------------\n\nTITLE: Integrating a Retriever for Knowledge Augmentation in VoltAgent (TS)\nDESCRIPTION: This snippet demonstrates how to integrate a retriever to augment the agent's knowledge. A custom `SimpleRetriever` class extends the `BaseRetriever` and fetches relevant documents based on the input query. The retriever is then added to the agent's configuration, allowing it to access external information before calling the LLM.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseRetriever } from \"@voltagent/core\";\nimport type { BaseMessage } from \"@voltagent/core\";\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Create a simple retriever (replace with actual vector search in production)\nclass SimpleRetriever extends BaseRetriever {\n  // Sample knowledge base\n  private documents = [\n    { id: \"doc1\", content: \"VoltAgent is a TypeScript framework for building AI agents.\" },\n    { id: \"doc2\", content: \"Agents can use tools, memory, and sub-agents.\" },\n    { id: \"doc3\", content: \"Retrievers enhance AI agents with external knowledge using RAG.\" },\n  ];\n\n  // Method to fetch relevant documents\n  async retrieve(input: string | BaseMessage[]): Promise<string> {\n    // Extract the query text\n    const query = typeof input === \"string\" ? input : (input[input.length - 1].content as string);\n    console.log(`Retriever: Searching for \\\"${query}\\\"`);\n\n    // Simple keyword matching (use vector embeddings for real applications)\n    const results = this.documents.filter((doc) =>\n      doc.content.toLowerCase().includes(query.toLowerCase())\n    );\n\n    if (results.length === 0) return \"No relevant information found in documents.\";\n\n    // Format results for the LLM\n    return results.map((doc) => `Document ${doc.id}: ${doc.content}`).join(\"\\n\\n\");\n  }\n}\n\n// Create agent with the retriever\nconst agent = new Agent({\n  name: \"Knowledge Assistant\",\n  description: \"An assistant that uses retrieved documents to answer questions.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  retriever: new SimpleRetriever(), // Add the retriever instance\n});\n\n// Example: Ask a question using streamText\n// const response = await agent.streamText(\"What are Retrievers in VoltAgent?\");\n// The agent will use SimpleRetriever *before* calling the LLM,\n// then generate an answer based on the retrieved context.\n```\n\n----------------------------------------\n\nTITLE: Initializing VoltAgent\nDESCRIPTION: This TypeScript snippet initializes a VoltAgent instance using the Vercel AI SDK.  It imports necessary modules and configures the agent with a specified provider, manager, and potentially functions or tools. Requires the `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai` packages.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent } from \"@voltagent/core\";\nimport { VercelAIManager } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\"; // Or your preferred provider\n\nexport const agent = new VoltAgent({\n  provider: \"vercel-ai\", // Specify the Vercel AI provider\n  manager: new VercelAIManager({\n    model: openai(\"gpt-4o\"), // Configure your desired model\n  }),\n  functions: [\n    // Add any VoltAgent functions/tools here if needed\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Agents with VoltaAgent in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create specialized agents for story writing and translation using the VoltaAgent framework. It initializes each agent with a name, description, an LLM provider (VercelAIProvider), and a language model (openai). These agents are designed to perform specific tasks and can be used as subagents within a supervisor agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/subagents.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Create a specialized agent for writing stories\nconst storyAgent = new Agent({\n  name: \"Story Agent\",\n  description: \"You are a creative story writer. Create original, engaging short stories.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Create a specialized agent for translation\nconst translatorAgent = new Agent({\n  name: \"Translator Agent\",\n  description: \"You are a skilled translator. Translate text accurately.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Agent Prompt Example - TypeScript\nDESCRIPTION: Demonstrates the use of `createPrompt` for structuring complex prompts, such as those used in AI agents. The template includes multiple placeholders, and default values are provided. Custom variables are then passed to the generated function to override the defaults. Requires the `@voltagent/core` dependency.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt } from \"@voltagent/core\";\n\nconst agentPrompt = createPrompt({\n  template: `You are an AI agent with the following capabilities: {{capabilities}}.\\nYour current goal is: {{goal}}\\nAvailable context: {{context}}\\nTask: {{task}}`,\n  variables: {\n    capabilities: \"web search, code execution\",\n    goal: \"Answer user queries\",\n    context: \"No specific context yet\",\n    task: \"\", // Default task is empty\n  },\n});\n\nconst agentTaskPrompt = agentPrompt({\n  goal: \"Help the user solve a programming problem\",\n  context: \"User is working with Node.js and Express\",\n  task: \"Debug an error in a REST API endpoint\",\n});\n\nconsole.log(agentTaskPrompt);\n/*\nOutput:\nYou are an AI agent with the following capabilities: web search, code execution.\nYour current goal is: Help the user solve a programming problem\nAvailable context: User is working with Node.js and Express\nTask: Debug an error in a REST API endpoint\n*/\n```\n\n----------------------------------------\n\nTITLE: Using Retriever as a Tool with Agent in TypeScript\nDESCRIPTION: Illustrates how to treat a retriever as an `AgentTool` by adding the `retriever.tool` property to the agent's `tools` array. This approach allows the LLM to decide whether to call the retriever tool based on the prompt.  It also highlights the importance of the `toolName` and `toolDescription` properties for the LLM's tool selection process. Dependencies include `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/retriever.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n// Assuming MySimpleRetriever is defined as above\n\n// Create a retriever instance, providing toolName and toolDescription\n// These are crucial for the LLM to understand when to use this tool\nconst retrieverAsTool = new MySimpleRetriever({\n  // highlight-start\n  toolName: \"search_internal_docs\",\n  toolDescription:\n    \"Searches the internal knowledge base for specific information about VoltAgent features or concepts. Use this when the user asks about VoltAgent specifics.\",\n  // highlight-end\n});\n\n// Define a placeholder provider for the example\nconst provider = new VercelAIProvider();\n\n// Create an agent and add the retriever as a tool\nconst agent = new Agent({\n  name: \"Tool-using Assistant\",\n  description: \"A helpful assistant that can search internal docs when needed\",\n  llm: provider,\n  model: openai(\"gpt-4o\"), // Ensure model supports tool use\n  // Add the retriever's tool interface to the tools array\n  // highlight-next-line\n  tools: [retrieverAsTool.tool],\n});\n\n// Example Usage:\n// When generateText is called, the LLM decides if tool use is needed.\n// If it calls \"search_internal_docs\", retrieverAsTool.retrieve() runs.\n// The result is sent back to the LLM to formulate the final response.\n// const response = await agent.streamText(\"What is RAG in VoltAgent?\");\n// The stream would show a tool_call for \"search_internal_docs\"\n// followed by a tool_result, and then the final text.\n```\n\n----------------------------------------\n\nTITLE: Initializing VoltAgent with an Agent in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a VoltAgent instance with a single agent. It imports necessary modules from `@voltagent/core` and `@voltagent/vercel-ai`, defines a simple agent with a name, description, and LLM provider, and then initializes VoltAgent with this agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/cli/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Create Database Tables in Supabase with SQL\nDESCRIPTION: SQL commands to create the necessary tables in your Supabase PostgreSQL database for storing VoltAgent memory. These tables include conversations, messages, agent history, and related event/step information.  You must execute these commands in the Supabase SQL Editor before using `SupabaseMemory`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/supabase.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n-- Conversations Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_conversations (\n    id TEXT PRIMARY KEY,\n    resource_id TEXT NOT NULL,\n    title TEXT,\n    metadata JSONB, -- Use JSONB for efficient querying\n    created_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),\n    updated_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now())\n);\n\n-- Index for faster lookup by resource_id\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_conversations_resource\nON voltagent_memory_conversations(resource_id);\n\n-- Messages Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_messages (\n    user_id TEXT NOT NULL,\n    -- Add foreign key reference and cascade delete\n    conversation_id TEXT NOT NULL REFERENCES voltagent_memory_conversations(id) ON DELETE CASCADE,\n    message_id TEXT NOT NULL,\n    role TEXT NOT NULL,\n    content TEXT NOT NULL, -- Consider JSONB if content is often structured\n    type TEXT NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),\n    -- Composite primary key to ensure message uniqueness within a conversation\n    PRIMARY KEY (user_id, conversation_id, message_id)\n);\n\n-- Index for faster message retrieval\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_messages_lookup\nON voltagent_memory_messages(user_id, conversation_id, created_at);\n\n-- Agent History Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_agent_history (\n    key TEXT PRIMARY KEY,\n    value JSONB NOT NULL, -- Store the entry object as JSONB\n    agent_id TEXT NOT NULL\n);\n\n-- Index for faster lookup by agent_id\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_agent_id\nON voltagent_memory_agent_history(agent_id);\n\n-- Agent History Events Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_agent_history_events (\n    key TEXT PRIMARY KEY,\n    value JSONB NOT NULL, -- Store the event object as JSONB\n    -- Foreign key to history entry\n    history_id TEXT NOT NULL REFERENCES voltagent_memory_agent_history(key) ON DELETE CASCADE,\n    agent_id TEXT NOT NULL\n);\n\n-- Indexes for faster lookup\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_events_history_id\nON voltagent_memory_agent_history_events(history_id);\n\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_events_agent_id\nON voltagent_memory_agent_history_events(agent_id);\n\n-- Agent History Steps Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_agent_history_steps (\n    key TEXT PRIMARY KEY,\n    value JSONB NOT NULL, -- Store the step object as JSONB\n    -- Foreign key to history entry\n    history_id TEXT NOT NULL REFERENCES voltagent_memory_agent_history(key) ON DELETE CASCADE,\n    agent_id TEXT NOT NULL\n);\n\n-- Indexes for faster lookup\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_steps_history_id\nON voltagent_memory_agent_history_steps(history_id);\n\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_steps_agent_id\nON voltagent_memory_agent_history_steps(agent_id);\n```\n\n----------------------------------------\n\nTITLE: Adding MCP Tools to Agent at Request Time - Typescript\nDESCRIPTION: This snippet shows how to provide MCP tools to a VoltAgent only for a specific request. The agent is initialized without any tools, and the `allTools` array, fetched from `mcpConfig.getTools()`, is passed to the `tools` option in the `agent.generateText()` call. This allows for dynamic tool provision and overriding of default tools.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/mcp.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\n// Assume agent is initialized without MCP tools, and mcpConfig is configured\n\nconst agent = new Agent({\n  /* ... basic config ... */\n});\nconst allTools = await mcpConfig.getTools();\n\n// Provide MCP tools only for this specific request\n// const response = await agent.generateText(\"What are the top posts on r/programming?\", {\n//   userId: \"user123\",\n//   tools: allTools, // Add MCP tools at request time\n// });\n\n// Remember to disconnect mcpConfig eventually\n// await mcpConfig.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent Lifecycle Hooks in VoltAgent (TS)\nDESCRIPTION: This snippet shows how to implement hooks that are triggered at different stages of an agent's lifecycle (start, end, tool calls, error). The `createHooks` function is used to define the hook functions, and these hooks are then attached to the agent instance during its creation. This allows for logging, debugging, or custom logic execution at specific points in the agent's operation.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, createHooks } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst hooks = createHooks({\n  // Called when any agent interaction starts (generateText, streamText, etc.)\n  onStart: async (agentInstance) => {\n    console.log(`Agent ${agentInstance.name} starting interaction...`);\n  },\n  // Called when the interaction successfully finishes\n  onEnd: async (agentInstance, result) => {\n    // Result format depends on the method called (e.g., { text: ..., usage: ... } for generateText)\n    console.log(\n      `Agent ${agentInstance.name} finished. Final output:`,\n      result.text || result.object\n    );\n  },\n  // Called before a tool is executed\n  onToolStart: async (agentInstance, toolCall) => {\n    console.log(`Agent ${agentInstance.name} starting tool: ${toolCall.toolName}`);\n  },\n  // Called after a tool finishes execution\n  onToolEnd: async (agentInstance, toolResult) => {\n    console.log(\n      `Agent ${agentInstance.name} finished tool: ${toolResult.toolName}, Result:`,\n      toolResult.result\n    );\n  },\n  // Called if an error occurs during the interaction\n  onError: async (agentInstance, error) => {\n    console.error(`Agent ${agentInstance.name} encountered an error:`, error);\n  },\n});\n\nconst agent = new Agent({\n  name: \"Observable Agent\",\n  description: \"An agent with logging hooks.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  hooks, // Attach the defined hooks\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LibSQLStorage with Turso for Production Memory in VoltAgent\nDESCRIPTION: This code snippet demonstrates how to configure `LibSQLStorage` with Turso for production memory management in VoltAgent.  It sets up the connection to Turso using environment variables and configures optional parameters such as `tablePrefix`, `storageLimit`, and `debug` mode. It requires `TURSO_DATABASE_URL` and `TURSO_AUTH_TOKEN` environment variables.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LibSQLStorage } from \"@voltagent/core\";\n\nif (!process.env.TURSO_DATABASE_URL || !process.env.TURSO_AUTH_TOKEN) {\n  throw new Error(\"TURSO_DATABASE_URL and TURSO_AUTH_TOKEN environment variables are required.\");\n}\n\nexport const productionMemory = new LibSQLStorage({\n  url: process.env.TURSO_DATABASE_URL,\n  authToken: process.env.TURSO_AUTH_TOKEN,\n  tablePrefix: \"prod_chats\", // Optional: Namespace tables\n  storageLimit: 500,       // Optional: Keep last 500 messages per conversation\n  debug: process.env.NODE_ENV === 'development', // Enable debug logs in dev\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Text with User and Conversation IDs (TypeScript)\nDESCRIPTION: This snippet illustrates how to use `userId` and `conversationId` when calling `agent.generateText()` to separate conversations for different users or different chat sessions.  Providing consistent IDs across multiple requests ensures the agent remembers the context of a specific thread, while omitting the `conversationId` will start a new conversation each time. The contextLimit parameter, although mentioned in the source document, is no longer managed directly on the `generateText` method and is now part of the `MemoryOptions`\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/overview.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await agent.generateText(\"Hello, how can you help me?\", {\n  userId: \"user-123\", // Identifies the specific user\n  conversationId: \"chat-session-xyz\", // Identifies this specific conversation thread\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Agent in TypeScript\nDESCRIPTION: This TypeScript code snippet defines a simple AI agent using the `@voltagent/core` library. It imports necessary modules, creates an agent instance with a name, description, and LLM provider, and then initializes VoltAgent with this agent. It demonstrates the basic structure for creating and configuring an AI agent within the VoltAgent framework.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Context Management with MemoryManager (TypeScript)\nDESCRIPTION: This code snippet showcases how VoltAgent's MemoryManager automatically retrieves and includes recent messages as context in the prompt sent to the LLM. The `userId` and `conversationId` are used to fetch relevant history from the memory provider.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/overview.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// The agent automatically retrieves history for user-123/chat-session-xyz\n// and includes up to N recent messages (determined by the provider/manager) in the LLM prompt.\nconst response = await agent.generateText(\"What was the first thing I asked you?\", {\n  userId: \"user-123\",\n  conversationId: \"chat-session-xyz\",\n  // contextLimit: 10, // Note: contextLimit is typically managed by MemoryOptions now\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Providers (Vercel AI, XsAI) in VoltAgent (TS)\nDESCRIPTION: This snippet showcases how to configure different LLM providers within VoltAgent, specifically Vercel AI and XsAI.  It demonstrates how to instantiate agents with different providers and models.  The example shows how to use the Vercel AI provider with OpenAI and Anthropic models, and the XsAI provider with a placeholder model name.  The `apiKey` is passed to the XsAI provider.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// 1. Vercel AI Provider (integrates with various models via Vercel AI SDK)\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\"; // Model definition for OpenAI via Vercel\nimport { anthropic } from \"@ai-sdk/anthropic\"; // Model definition for Anthropic via Vercel\n\n// Agent using OpenAI via Vercel\nconst vercelOpenAIAgent = new Agent({\n  name: \"Vercel OpenAI Assistant\",\n  description: \"Assistant using Vercel AI SDK with OpenAI.\",\n  llm: new VercelAIProvider(), // The provider\n  model: openai(\"gpt-4o\"), // The specific model\n});\n\n// Agent using Anthropic via Vercel\nconst vercelAnthropicAgent = new Agent({\n  name: \"Vercel Anthropic Assistant\",\n  description: \"Assistant using Vercel AI SDK with Anthropic.\",\n  llm: new VercelAIProvider(), // Same provider\n  model: anthropic(\"claude-3-5-sonnet-20240620\"), // Different model\n});\n\n// 2. XsAI Provider (Example of a custom/alternative provider)\nimport { XsAIProvider } from \"@voltagent/xsai\";\n\n// Agent using XsAI Provider (might use different model naming)\nconst xsaiAgent = new Agent({\n  name: \"XsAI Assistant\",\n  description: \"Assistant using XsAI Provider.\",\n  llm: new XsAIProvider({ apiKey: process.env.OPENAI_API_KEY }), // Provider instance\n  model: \"xsai-model-name\", // Model identifier specific to this provider\n});\n\n// Use the agents (example)\n// const response = await vercelOpenAIAgent.streamText(\"Hello OpenAI via Vercel!\");\n// const response2 = await xsaiAgent.generateText(\"Hello XsAI!\");\n```\n\n----------------------------------------\n\nTITLE: Integrating a Calculator Tool with a VoltAgent\nDESCRIPTION: This snippet illustrates how to integrate the previously defined `calculatorTool` into a VoltAgent. It imports necessary modules from `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai`.  It then creates a new `Agent` instance, providing a name, description, LLM provider (VercelAIProvider), model (openai(\"gpt-4o\")), and including the `calculatorTool` in the `tools` array. This allows the agent to use the calculator tool when appropriate.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst agent = new Agent({\n  name: \"Calculator Assistant\",\n  description: \"An assistant that can perform calculations\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  tools: [calculatorTool],\n});\n\n// The agent can now use the calculator tool when needed\n// const response = await agent.generateText(\"What is 123 * 456?\");\n// console.log(response.text);\n```\n\n----------------------------------------\n\nTITLE: Fetching MCP Tools Organized by Server - Typescript\nDESCRIPTION: This snippet demonstrates fetching tools grouped by the MCP server they originate from. It uses `mcpConfig.getToolsets()` to retrieve an object with server names as keys and toolsets as values. Each toolset has a `getTools()` method for accessing tools of a specific server. `mcpConfig.disconnect()` is used for cleanup.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/mcp.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Fetch tools organized by server name\nconst toolsets = await mcpConfig.getToolsets();\n\n// Access tools specifically from the filesystem server\nconst filesystemTools = toolsets.filesystem.getTools();\n\n// Use only filesystem tools with an agent\n// const filesystemResponse = await agent.generateText(\n//   \"List all files in my Desktop folder and create a summary.txt file\",\n//   {\n//     userId: \"user123\",\n//     tools: filesystemTools, // Pass only the filesystem tools\n//   }\n// );\n\n// Remember to disconnect later\n// await mcpConfig.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Implementing Tool Hooks in VoltAgent\nDESCRIPTION: This code illustrates how to use tool hooks (`onToolStart` and `onToolEnd`) in VoltAgent to respond to tool execution events.  It defines hooks using `createHooks` that log when a tool starts and ends, including the result.  These hooks are then passed to the `Agent` constructor. The example shows how to log tool usage and the results of tool execution, enabling monitoring and debugging of agent behavior.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, createHooks } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Define the hooks using createHooks\nconst hooks = createHooks({\n  onToolStart(_, tool) {\n    console.log(`Tool starting: ${tool.name}`);\n  },\n  onToolEnd(_, tool, result) {\n    console.log(`Tool completed: ${tool.name}`);\n    console.log(`Result: ${JSON.stringify(result)}`);\n  },\n});\n\n// Create an agent with hooks\nconst agent = new Agent({\n  name: \"Assistant with Tool Hooks\",\n  description: \"An assistant that logs tool execution\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  tools: [calculatorTool],\n  hooks: hooks,\n});\n\n// When the agent uses a tool, the hooks will be triggered\n// const response = await agent.generateText(\"What is 123 * 456?\");\n```\n\n----------------------------------------\n\nTITLE: Initializing SupabaseMemory in TypeScript\nDESCRIPTION: Demonstrates how to import and initialize the `SupabaseMemory` class from the `@voltagent/supabase` package in a TypeScript environment. It also shows how to pass the initialized memory instance to an Agent object.  It requires Supabase URL and Key to be set in environment variables.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/supabase/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SupabaseMemory } from \"@voltagent/supabase\";\nimport { Agent } from \"@voltagent/core\";\n// ... other imports\n\nconst supabaseUrl = process.env.SUPABASE_URL; // Use environment variables\nconst supabaseKey = process.env.SUPABASE_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  throw new Error(\"Supabase URL and Key are required.\");\n}\n\nconst memory = new SupabaseMemory({\n  supabaseUrl,\n  supabaseKey,\n  // Optional: Specify a custom base table name prefix\n  // tableName: 'my_custom_prefix'\n});\n\n// Pass the memory instance to your Agent\nconst agent = new Agent({\n  // ... other agent config\n  memory: memory,\n});\n\n// ... rest of your VoltAgent setup\n```\n\n----------------------------------------\n\nTITLE: Using VercelAIProvider with VoltAgent\nDESCRIPTION: This snippet demonstrates how to integrate the `VercelAIProvider` with VoltAgent to utilize models available through the Vercel AI SDK.  It showcases importing the provider and passing an AI SDK model object during agent initialization. It assumes Vercel AI configuration is handled via environment variables.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\"; // Import specific model functions\n\nconst provider = new VercelAIProvider(); // Config often handled by env vars\nconst agent = new Agent({\n  // ... name, description ...\n  llm: provider,\n  model: openai(\"gpt-4o-mini\"), // Pass the AI SDK model object\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Coordinator Agent with Sub-Agents in VoltAgent (TS)\nDESCRIPTION: This snippet demonstrates how to create a coordinator agent that delegates tasks to specialized sub-agents (researchAgent and writingAgent) using the `delegate_task` tool. The coordinator agent is configured with a list of sub-agents in the `subAgents` property, allowing it to distribute complex tasks to agents with specific expertise.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Assume researchAgent and writingAgent are configured Agents\nconst researchAgent = new Agent({ name: \"Researcher\" /* ... */ });\nconst writingAgent = new Agent({ name: \"Writer\" /* ... */ });\n\n// Create a coordinator agent that uses the others\nconst mainAgent = new Agent({\n  name: \"Coordinator\",\n  description: \"Coordinates research and writing tasks by delegating to specialized sub-agents.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  // List the agents this one can delegate tasks to\n  subAgents: [researchAgent, writingAgent],\n});\n\n// Example: Call streamText on the main agent\n// await mainAgent.streamText(\"Write a blog post about quantum computing.\");\n// The Coordinator might decide to use the delegate_task tool to involve researchAgent and writingAgent.\n```\n\n----------------------------------------\n\nTITLE: Initializing VoltAgent with a simple agent (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to initialize VoltAgent with a single agent. It imports necessary modules from `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai`. It defines an agent with a name, description, an LLM provider, and a specific model.  It then initializes VoltAgent with the defined agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/vercel-ai/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG agent and retriever (src/index.ts)\nDESCRIPTION: This TypeScript code defines a custom `KnowledgeBaseRetriever` that extends `BaseRetriever` and implements the `retrieve` method. It also defines an `Agent` that uses the retriever directly via `agent.retriever`. The agent is configured to use the Vercel AI SDK and the OpenAI gpt-4o-mini model.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent, Agent, BaseRetriever, type BaseMessage } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// --- Simple Knowledge Base Retriever ---\n\nclass KnowledgeBaseRetriever extends BaseRetriever {\n  // Our tiny \"knowledge base\"\n  private documents = [\n    {\n      id: \"doc1\",\n      content: \"What is VoltAgent? VoltAgent is a TypeScript framework for building AI agents.\",\n    },\n    {\n      id: \"doc2\",\n      content:\n        \"What features does VoltAgent support? VoltAgent supports tools, memory, sub-agents, and retrievers for RAG.\",\n    },\n    { id: \"doc3\", content: \"What is RAG? RAG stands for Retrieval-Augmented Generation.\" },\n    {\n      id: \"doc4\",\n      content:\n        \"How can I test my agent? You can test VoltAgent agents using the VoltAgent Console.\",\n    },\n  ];\n\n  // Reverting to simple retrieve logic\n  async retrieve(input: string | BaseMessage[]): Promise<string> {\n    const query = typeof input === \"string\" ? input : (input[input.length - 1].content as string);\n    const queryLower = query.toLowerCase();\n    console.log(`[KnowledgeBaseRetriever] Searching for context related to: \\\"${query}\\\"`);\n\n    // Simple includes check\n    const relevantDocs = this.documents.filter((doc) =>\n      doc.content.toLowerCase().includes(queryLower)\n    );\n\n    if (relevantDocs.length > 0) {\n      const contextString = relevantDocs.map((doc) => `- ${doc.content}`).join(\"\\n\");\n      console.log(`[KnowledgeBaseRetriever] Found context:\\n${contextString}`);\n      return `Relevant Information Found:\\n${contextString}`;\n    }\n\n    console.log(\"[KnowledgeBaseRetriever] No relevant context found.\");\n    return \"No relevant information found in the knowledge base.\";\n  }\n}\n\n// --- Agent Definition ---\n\n// Instantiate the retriever\nconst knowledgeRetriever = new KnowledgeBaseRetriever();\n\n// Define the agent that uses the retriever directly\nconst ragAgent = new Agent({\n  name: \"RAG Chatbot\",\n  description: \"A chatbot that answers questions based on its internal knowledge base.\",\n  llm: new VercelAIProvider(), // Using Vercel AI SDK Provider\n  model: openai(\"gpt-4o-mini\"), // Using OpenAI model via Vercel\n  // Attach the retriever directly\n  retriever: knowledgeRetriever,\n});\n\n// --- VoltAgent Initialization ---\n\nnew VoltAgent({\n  agents: {\n    // Make the agent available under the key 'ragAgent'\n    ragAgent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configure SupabaseMemory with TypeScript\nDESCRIPTION: Initializes `SupabaseMemory` with credentials from environment variables and integrates it into a VoltAgent. It requires `supabaseUrl` and `supabaseKey` which are obtained from the Supabase project. The `tableName` is optional and specifies a custom prefix for the database tables.  This example also shows the integration with `VercelAIProvider` and `openai` for a complete agent setup.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/supabase.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { SupabaseMemory } from \"@voltagent/supabase\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Get credentials from environment variables\nconst supabaseUrl = process.env.SUPABASE_URL;\nconst supabaseKey = process.env.SUPABASE_KEY;\n\nif (!supabaseUrl || !supabaseKey) {\n  throw new Error(\"Supabase URL and Key must be provided via environment variables.\");\n}\n\n// Initialize SupabaseMemory\nconst memory = new SupabaseMemory({\n  supabaseUrl,\n  supabaseKey,\n  // Optional: Specify a custom base table name prefix\n  // This MUST match the prefix used in your SQL setup if customized.\n  // tableName: 'my_agent_memory', // Defaults to 'voltagent_memory'\n});\n\nconst agent = new Agent({\n  name: \"Supabase Memory Agent\",\n  description: \"An agent using Supabase for memory.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  memory: memory, // Assign the memory provider instance\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Agent Definition (TypeScript)\nDESCRIPTION: This TypeScript code defines a basic VoltAgent application. It imports necessary modules, creates an agent with a name, description, and an LLM provider and model (VercelAIProvider and OpenAI's gpt-4o-mini), and initializes the VoltAgent with this agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with Type Safety and Logging in VoltAgent\nDESCRIPTION: This code snippet demonstrates how to create a tool using `createTool` from `@voltagent/core`. It includes defining parameters with descriptions for the LLM using Zod, implementing the execute function with type-safe arguments, and handling potential errors with structured returns and AbortSignal for long-running tasks.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from \"@voltagent/core\";\nimport { z } from \"zod\";\n\n// 1. Define clear parameters with descriptions for the LLM\nconst weatherParams = z.object({\n  city: z.string().describe(\"The name of the city.\"),\n  state: z.string().optional().describe(\"The state or region (e.g., CA, TX). Optional.\"),\n  unit: z.enum([\"celsius\", \"fahrenheit\"]).default(\"celsius\").describe(\"Temperature unit.\"),\n});\n\n// 2. Create the tool instance\nexport const detailedWeatherTool = createTool({\n  name: \"get_detailed_weather\",\n  description: \"Provides the current temperature and weather conditions for a specific city, optionally including the state.\",\n  parameters: weatherParams,\n\n  // 3. Implement the execute function (args are type-safe)\n  execute: async (args, options) => {\n    // Type of args: { city: string; state?: string; unit: \"celsius\" | \"fahrenheit\" }\n    const { city, state, unit } = args;\n    const location = state ? `${city}, ${state}` : city;\n    const signal = options?.signal; // Access AbortSignal if provided\n\n    console.log(`[Tool: Weather] Executing for ${location}, Unit: ${unit}`);\n\n    // Simulate API call with potential cancellation\n    try {\n      // Check if aborted before starting\n      if (signal?.aborted) throw new Error(\"Operation cancelled by signal.\");\n\n      // --- Placeholder for API call ---\n      const apiCallPromise = new Promise<{ temp: number; conditions: string }>(resolve =>\n        setTimeout(() => {\n          // Simulate different weather based on location\n          const temp = location.toLowerCase().includes(\"london\") ? 15 : 28;\n          const conditions = location.toLowerCase().includes(\"london\") ? \"Rainy\" : \"Sunny\";\n          resolve({ temp, conditions });\n        }, 1000) // Simulate 1 second delay\n      );\n\n      // Handle potential abort during the simulated delay\n      const result = await Promise.race([\n        apiCallPromise,\n        new Promise((_, reject) => {\n          if (signal) {\n            signal.addEventListener('abort', () => reject(new Error(\"Weather API call aborted.\")));\n          }\n        })\n      ]);\n      // --- End Placeholder ---\n\n      console.log(`[Tool: Weather] Success for ${location}`);\n      // Return structured result\n      return {\n        location: location,\n        temperature: (result as any).temp,\n        unit: unit,\n        conditions: (result as any).conditions,\n      };\n\n    } catch (error) {\n      console.error(`[Tool: Weather] Failed for ${location}:`, error.message);\n      // Provide a structured error for the LLM\n      return { error: `Failed to get weather for ${location}. Reason: ${error.message}` };\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing InMemoryStorage in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize `InMemoryStorage` with optional configuration for storage limits and debugging, and then assign it to an `Agent` instance. The `storageLimit` parameter sets the maximum number of messages to retain per conversation, while the `debug` parameter enables verbose logging. It requires `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai` as dependencies.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/in-memory.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, InMemoryStorage } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Initialize InMemoryStorage\nconst memory = new InMemoryStorage({\n  // Optional: Limit the number of messages stored per conversation thread\n  storageLimit: 100, // Defaults to no limit if not specified\n\n  // Optional: Enable verbose debug logging from the memory provider\n  debug: true, // Defaults to false\n});\n\nconst agent = new Agent({\n  name: \"Ephemeral Agent\",\n  description: \"An agent using in-memory storage (history resets on restart).\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  memory: memory, // Assign the InMemoryStorage instance\n});\n\n// Interactions with this agent will use the in-memory store.\n// await agent.generateText(\"Remember this info.\", { userId: \"user1\", conversationId: \"conv1\" });\n// // If the app restarts here, the above message is lost.\n// await agent.generateText(\"Do you remember?\", { userId: \"user1\", conversationId: \"conv1\" });\n```\n\n----------------------------------------\n\nTITLE: Using MCP (Model Context Protocol) with Agent\nDESCRIPTION: This snippet demonstrates how to configure and use MCP to connect to external model servers and leverage their capabilities within a VoltAgent. It involves setting up an MCPConfiguration, fetching tools from the server, and then initializing an Agent with those tools. The agent can then utilize these external tools during generation calls.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, MCPConfiguration } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Set up MCP configuration pointing to your external server(s)\nconst mcpConfig = new MCPConfiguration({\n  servers: {\n    // Define one or more MCP-compliant servers\n    myModelServer: {\n      type: \"http\", // Communication type\n      url: \"https://my-mcp-server.example.com\", // URL of the MCP server\n    },\n  },\n});\n\n// Asynchronously fetch tools offered by the configured MCP server(s)\nconst mcpTools = await mcpConfig.getTools();\n\n// Create an agent that can utilize these external MCP tools\nconst agent = new Agent({\n  name: \"MCP Agent\",\n  description: \"Uses external model capabilities via MCP\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  // Add the tools fetched from the MCP server\n  tools: mcpTools,\n});\n\n// Example: Call streamText\n// await agent.streamText(\"Use the external analysis tool on this data...\");\n// The agent can now potentially call tools hosted on 'myModelServer'.\n```\n\n----------------------------------------\n\nTITLE: Initializing MCPConfiguration with HTTP and stdio Servers - Typescript\nDESCRIPTION: This code snippet demonstrates how to create an `MCPConfiguration` instance with both HTTP and stdio-based servers. It showcases configuring URLs, command-line arguments, working directories, and environment variables for the MCP servers. This is the initial step to connect to external tools and services compliant with the Model Context Protocol.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/mcp.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MCPConfiguration } from \"@voltagent/core\";\nimport path from \"node:path\"; // Used for filesystem path example\n\n// Create MCP Configuration with multiple types of servers\nconst mcpConfig = new MCPConfiguration({\n  // Optional unique identifier for this configuration instance\n  id: \"my-mcp-config\",\n\n  servers: {\n    // Example 1: HTTP-based server (e.g., external web service or API gateway)\n    reddit: {\n      type: \"http\",\n      url: \"https://mcp.composio.dev/reddit/your-api-key-here\", // URL of the MCP endpoint\n      // Optional: Custom headers or options for the initial fetch request\n      requestInit: {\n        headers: { \"Custom-Header\": \"value\" },\n      },\n      // Optional: Custom options for the EventSource connection used for streaming\n      eventSourceInit: { withCredentials: true },\n    },\n\n    // Example 2: stdio-based server (e.g., a local script or application)\n    filesystem: {\n      type: \"stdio\", // Connects via standard input/output\n      command: \"npx\", // The command to execute\n      args: [\n        // Arguments for the command\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\", // Example: A filesystem server package\n        // Optional arguments for the server itself, like specifying allowed paths:\n        path.join(process.env.HOME || \"\", \"Desktop\"),\n      ],\n      // Optional: Specify the working directory for the command\n      cwd: process.env.HOME,\n      // Optional: Provide environment variables to the spawned process\n      env: { NODE_ENV: \"production\" },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Agent Class Constructor (TypeScript)\nDESCRIPTION: This code shows the constructor signature of the Agent class in VoltAgent. It defines the options required to create a new Agent instance, including the agent's identity, LLM connection, capabilities, and configurations for memory, tools, sub-agents, retriever, voice, and hooks.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AgentHooks } from './hooks';\nimport { LLMProvider } from './providers';\nimport { Memory, MemoryOptions } from '../memory';\nimport { AgentTool } from '../tool';\nimport { BaseRetriever } from '../retriever';\nimport { Voice } from '../voice';\n\nclass Agent<TProvider extends { llm: LLMProvider<any> }> {\n  constructor(options: {\n    id?: string;\n    name: string;\n    description?: string;\n    llm: ProviderInstance<TProvider>; // e.g., new VercelAIProvider()\n    model: ModelType<TProvider>;     // e.g., openai(\"gpt-4o-mini\")\n    memory?: Memory | false;\n    memoryOptions?: MemoryOptions;\n    tools?: AgentTool[];\n    subAgents?: Agent<any>[];\n    hooks?: AgentHooks;\n    retriever?: BaseRetriever;\n    voice?: Voice;\n    maxHistoryEntries?: number;\n  });\n  // ... methods like generateText, streamText, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Type Safety with Zod Schemas in VoltAgent Tools\nDESCRIPTION: This snippet demonstrates how Zod schemas provide type safety for tool parameters in VoltAgent. It defines a `weatherTool` with a Zod schema that includes a `location` (string) and an optional `unit` (enum of \"celsius\" or \"fahrenheit\").  The `args` parameter in the `execute` function is automatically typed based on this schema, providing IntelliSense, type checking, refactoring support, and documentation benefits.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst weatherTool = createTool({\n  name: \"get_weather\",\n  description: \"Get the current weather for a location\",\n  parameters: z.object({\n    location: z.string().describe(\"The city name\"),\n    unit: z.enum([\"celsius\", \"fahrenheit\"]).optional().describe(\"Temperature unit\"),\n  }),\n  execute: async (args) => {\n    // args is typed as { location: string; unit?: \"celsius\" | \"fahrenheit\" }\n    const { location, unit = \"celsius\" } = args;\n    // ...\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Agent Memory with LibSQLStorage\nDESCRIPTION: This code snippet shows how to configure an agent with memory using `LibSQLStorage`. It demonstrates the setup required to enable the agent to store and retrieve conversation history, allowing for more context-aware interactions.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: Configuring memory (Provider details omitted for brevity)\nimport { Agent, LibSQLStorage } from \"@voltagent/core\";\n// ... other imports\n\nconst memoryStorage = new LibSQLStorage({\n  /* ... provider config ... */\n});\n\nconst agent = new Agent({\n  name: \"Assistant with Memory\",\n  // ... other config ...\n  memory: memoryStorage,\n});\n```\n\n----------------------------------------\n\nTITLE: Minimal Agent Example\nDESCRIPTION: This TypeScript code presents a minimal example of creating an `Agent` instance with a simple assistant. It imports necessary modules from `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai`. It initializes the agent with a name, description, an LLM provider, and a model, then initializes the main VoltAgent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Agent, VoltAgent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst simpleAgent = new Agent({\n  name: \"simple-assistant\",\n  description: \"You answer questions directly.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\nnew VoltAgent({ agents: { main: simpleAgent } });\n```\n\n----------------------------------------\n\nTITLE: Using LibSQLStorage in VoltAgent with Turso\nDESCRIPTION: This code snippet shows how to integrate the configured `LibSQLStorage` (from the previous snippet) into a VoltAgent instance.  The agent is initialized with a `productionMemory` instance, allowing interactions to be persisted in the Turso database. It shows that using `userId` and `conversationId` persist information for a given user or project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { productionMemory } from \"./config/memory\";\n// ... other imports\n\nconst productionAgent = new Agent({\n  name: \"prod-assistant\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  memory: productionMemory, // Use the configured Turso instance\n});\n\n// ... Initialize VoltAgent ...\n\n// Interactions now persist in the Turso database\n// await productionAgent.generateText(\"Remember this code: XYZ\", { userId: \"dev1\", conversationId: \"projectA\" });\n```\n\n----------------------------------------\n\nTITLE: Speech-to-Text Implementation\nDESCRIPTION: Implements the `listen` method for converting speech to text using a custom STT service.  It emits a 'listening' event, handles both streaming and non-streaming transcription based on the `options.stream` flag, performs simulated API calls for both cases, and returns either a string or an AsyncIterable based on the streaming option. Includes error handling similar to the `speak` method. Requires a `Readable` stream as input and `VoiceListenOptions`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n  /**\n   * Convert speech to text.\n   */\n  async listen(\n    audio: Readable, // Expect a Readable stream\n    options?: VoiceListenOptions // Use standardized options type\n  ): Promise<string | AsyncIterable<any>> {\n    // Return string or stream based on options\n    this.emit(\"listening\", { audio }); // Emit standard event\n\n    try {\n      console.log(`Listening with language: ${options?.language}, stream: ${options?.stream}`);\n\n      // --- Your STT API Call Logic ---\n      // Handle both standard and streaming modes\n      if (options?.stream) {\n        // Implement streaming transcription logic\n        // Example: const transcriptStream = yourSTTClient.startStream(audio, { language: options.language });\n        // return transcriptStream; // Return the async iterable from your client\n\n        // --- Placeholder for streaming ---\n        async function* generateChunks() {\n          yield { delta: \"Simulated \" };\n          await new Promise((resolve) => setTimeout(resolve, 200));\n          yield { delta: \"streamed \" };\n          await new Promise((resolve) => setTimeout(resolve, 200));\n          yield { delta: \"transcript.\" };\n        }\n        return generateChunks();\n        // --- End Placeholder ---\n      } else {\n        // Implement non-streaming transcription logic\n        // Example: const result = await yourSTTClient.transcribe(audio, { language: options?.language });\n        // return result.text;\n\n        // --- Placeholder for non-streaming ---\n        // Simulate reading the stream and getting a result\n        let fullAudio = Buffer.alloc(0);\n        for await (const chunk of audio) {\n          fullAudio = Buffer.concat([fullAudio, chunk]);\n        }\n        await new Promise((resolve) => setTimeout(resolve, 500)); // Simulate API call\n        return \"Simulated full transcript of audio.\";\n        // --- End Placeholder ---\n      }\n      // -----------------------------\n    } catch (error: any) {\n      const errorMessage = error.message || \"Unknown STT error\";\n      this.emit(\"error\", {\n        message: errorMessage,\n        code: MyCustomErrorCode.ApiError, // Use your specific error codes\n        details: error,\n      });\n      throw new Error(`Custom STT failed: ${errorMessage}`); // Re-throw a standard error\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Subagents in VoltAgent (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to add a subagent to a supervisor agent in VoltAgent. It initializes a specialized agent (factCheckerAgent) with a name, description, and language model (VercelAIProvider with openai's gpt-4o-mini). The subagent is then added to the supervisorAgent using the addSubAgent method, which also registers the relationship in the AgentRegistry.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/subagents.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Create a new specialized agent\nconst factCheckerAgent = new Agent({\n  name: \"Fact Checker Agent\",\n  description: \"You verify facts and provide accurate information.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Add the agent as a subagent to the supervisor\n// This also registers the relationship in AgentRegistry\nsupervisorAgent.addSubAgent(factCheckerAgent);\n```\n\n----------------------------------------\n\nTITLE: Minimal Agent Example (TypeScript)\nDESCRIPTION: This code snippet provides a minimal example of creating a VoltAgent instance using the Agent class. It sets up a simple assistant with a name, description, LLM provider (VercelAIProvider), and model (openai). It then initializes the VoltAgent with the created agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, VoltAgent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst simpleAgent = new Agent({\n  name: \"simple-assistant\",\n  description: \"You answer questions directly.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\nnew VoltAgent({ agents: { main: simpleAgent } });\n```\n\n----------------------------------------\n\nTITLE: Adding MCP Tools to Agent at Initialization - Typescript\nDESCRIPTION: This code demonstrates adding MCP tools to a VoltAgent during initialization by providing the `allTools` array to the `Agent` constructor's `tools` option.  The MCP tools fetched using `mcpConfig.getTools()` are passed to the Agent. This makes the tools available by default for all agent interactions.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/mcp.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n// Assume mcpConfig is configured and allTools fetched as shown above\n\nconst allTools = await mcpConfig.getTools();\n\nconst agent = new Agent({\n  name: \"MCP-enabled Assistant\",\n  description: \"An assistant that can use MCP tools configured at startup\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  tools: allTools, // Add MCP tools during initialization\n});\n\n// Now the agent can use MCP tools in its interactions\n// await agent.generateText(...);\n\n// Remember to disconnect mcpConfig eventually\n// await mcpConfig.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Using Direct Attachment with Agent in TypeScript\nDESCRIPTION: Shows how to attach an instance of a custom retriever directly to the `retriever` property in the `Agent` configuration.  In this mode, the retriever's `retrieve` method is automatically executed before every LLM call. Dependencies include `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/retriever.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n// Assuming MySimpleRetriever is defined as above\n\n// Create an instance of your retriever (tool options are ignored here)\nconst retrieverInstance = new MySimpleRetriever();\n\n// Define a placeholder provider for the example\nconst provider = new VercelAIProvider();\n\n// Create an agent and attach the retriever directly\nconst agent = new Agent({\n  name: \"RAG Assistant\",\n  description: \"A helpful assistant with access to document knowledge\",\n  llm: provider,\n  model: openai(\"gpt-4o\"),\n  // Attach the retriever instance directly\n  // highlight-next-line\n  retriever: retrieverInstance,\n});\n\n// Example Usage:\n// When generateText is called, MySimpleRetriever.retrieve() runs first automatically.\n// The returned context string is added to the prompt sent to the LLM.\n// const response = await agent.generateText(\"What features does VoltAgent support?\");\n// console.log(response.text); // Response should incorporate info from doc3\n```\n\n----------------------------------------\n\nTITLE: Integrating Voice with an Agent\nDESCRIPTION: Integrates the OpenAI voice provider into an Agent instance. Shows how to create an agent with voice capabilities by passing the voice provider during agent initialization.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, OpenAIAgentProvider } from \"@voltagent/core\";\nimport { OpenAIVoiceProvider } from \"@voltagent/voice\";\n\n// Initialize the voice provider\nconst voice = new OpenAIVoiceProvider({\n  apiKey: process.env.OPENAI_API_KEY,\n  ttsModel: \"tts-1\",\n  voice: \"nova\",\n});\n\n// Initialize the agent provider\nconst provider = new OpenAIAgentProvider({\n  apiKey: process.env.OPENAI_API_KEY,\n});\n\n// Create the agent, passing the voice instance\nconst voiceEnabledAgent = new Agent({\n  name: \"VoiceBot\",\n  description: \"An agent that can speak.\",\n  provider,\n  model: \"gpt-4o\", // Choose an appropriate model\n  voice: voice, // Assign the voice provider here\n});\n\n// Now the agent instance potentially uses the voice capabilities\n// (Specific usage within the agent depends on future VoltAgent features or custom implementations)\n\n// Example: Manually trigger speech from agent's response\n// const response = await voiceEnabledAgent.generateText(\"Tell me a short story.\");\n// if (voiceEnabledAgent.voice) {\n//   const audio = await voiceEnabledAgent.voice.speak(response.text);\n//   // Pipe audio to output\n//   audio.pipe(createWriteStream(\"story.mp3\"));\n// }\n```\n\n----------------------------------------\n\nTITLE: Building a UI Component\nDESCRIPTION: This React component provides a user interface for the AI calculator. It takes an expression as input, calls the `calculateExpression` Server Action, and displays the result.  It uses the `useState` hook for managing the result, loading state, and expression input.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n\"use client\";\n\nimport { useState } from \"react\";\nimport { calculateExpression } from \"../actions\";\n\nexport function Calculator() {\n  const [result, setResult] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [expression, setExpression] = useState(\"\");\n\n  async function handleSubmit(formData: FormData) {\n    const expr = formData.get(\"expression\") as string;\n    if (!expr.trim()) return;\n\n    setLoading(true);\n    try {\n      const calcResult = await calculateExpression(expr);\n      setResult(calcResult);\n      setExpression(expr);\n    } catch (error) {\n      console.error(\"Calculation error:\", error);\n      setResult(\"Error calculating expression\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <div>\n      <h2>AI Calculator</h2>\n      <form action={handleSubmit}>\n        <label htmlFor=\"expression\">Enter calculation:</label>\n        <input\n          id=\"expression\"\n          name=\"expression\"\n          type=\"text\"\n          placeholder=\"E.g. (5 + 3) * 2\"\n          required\n        />\n        <button type=\"submit\" disabled={loading}>\n          {loading ? \"Calculating...\" : \"Calculate\"}\n        </button>\n      </form>\n\n      {result && (\n        <div>\n          <h3>Result:</h3>\n          <p>{expression} = {result}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LibSQLStorage with Turso for Production in VoltAgent (TypeScript)\nDESCRIPTION: This code snippet configures `LibSQLStorage` for production use with Turso. It requires the `TURSO_DATABASE_URL` and `TURSO_AUTH_TOKEN` environment variables. It demonstrates setting the URL, auth token, table prefix, storage limit, and debug mode for the `LibSQLStorage` instance. This memory configuration is then used in the `Agent` constructor.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LibSQLStorage } from \"@voltagent/core\";\n\nif (!process.env.TURSO_DATABASE_URL || !process.env.TURSO_AUTH_TOKEN) {\n  throw new Error(\"TURSO_DATABASE_URL and TURSO_AUTH_TOKEN environment variables are required.\");\n}\n\nexport const productionMemory = new LibSQLStorage({\n  url: process.env.TURSO_DATABASE_URL,\n  authToken: process.env.TURSO_AUTH_TOKEN,\n  tablePrefix: \"prod_chats\", // Optional: Namespace tables\n  storageLimit: 500,       // Optional: Keep last 500 messages per conversation\n  debug: process.env.NODE_ENV === 'development', // Enable debug logs in dev\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { productionMemory } from \"./config/memory\";\n// ... other imports\n\nconst productionAgent = new Agent({\n  name: \"prod-assistant\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  memory: productionMemory, // Use the configured Turso instance\n});\n\n// ... Initialize VoltAgent ...\n\n// Interactions now persist in the Turso database\n// await productionAgent.generateText(\"Remember this code: XYZ\", { userId: \"dev1\", conversationId: \"projectA\" });\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent Application with Base Example (Bash)\nDESCRIPTION: This command uses npm to create a new VoltAgent application from the base example. It leverages the `create voltagent-app` package to scaffold the project with the specified example.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/base/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example base\n```\n\n----------------------------------------\n\nTITLE: STT Streaming Transcription\nDESCRIPTION: Performs streaming transcription of an audio file using the OpenAI voice provider. Processes transcription chunks as they arrive, allowing for real-time transcription.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Streaming transcription (Provider-dependent, e.g., OpenAI)\ntry {\n  const streamingTranscription = await openAIVoice.listen(audioFileStream, {\n    stream: true, // Enable streaming\n  });\n\n  for await (const chunk of streamingTranscription) {\n    // Process transcription chunks as they arrive\n    // The structure of 'chunk' depends on the provider\n    console.log(\"Stream Chunk:\", chunk);\n  }\n} catch (error) {\n  console.error(\"Streaming transcription failed:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Structured Data with Zod Schema\nDESCRIPTION: This code snippet demonstrates how to use `generateObject` with a Zod schema to generate structured data. It defines a schema for a person object and then uses the agent to generate an object conforming to that schema. This highlights the agent's ability to produce structured output.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\nimport { z } from \"zod\";\n\nconst agent = new Agent({\n  name: \"Data Extractor\",\n  description: \"Extracts structured data.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"), // Ensure model supports structured output/function calling\n});\n\n// Define a simple schema with Zod\nconst personSchema = z.object({\n  name: z.string().describe(\"Full name\"), // Descriptions help the LLM\n  age: z.number(),\n  occupation: z.string(),\n  skills: z.array(z.string()),\n});\n\n// Example using generateObject\n// const objectResponse = await agent.generateObject(\n//   \"Create a profile for a talented software developer named Alex.\",\n//   personSchema\n// );\n// console.log(\"Complete object:\", objectResponse.object);\n\n// Example using streamObject\n// console.log(\"\\nStreaming object generation:\");\n// const streamObjectResponse = await agent.streamObject(\n//   \"Generate details for a data scientist named Jamie.\",\n//   personSchema\n// );\n// for await (const partial of streamObjectResponse.objectStream) {\n//   console.log(\"Received update:\", partial); // Shows the object being built incrementally\n// }\n// const finalObject = await streamObjectResponse.object;\n// console.log(\"Final streamed object:\", finalObject);\n```\n\n----------------------------------------\n\nTITLE: Initializing VoltAgent with a simple agent in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a VoltAgent instance with a single agent. It imports necessary modules from `@voltagent/core` and `@voltagent/vercel-ai`, defines an agent with a name, description, LLM provider and model, and then initializes the VoltAgent with this agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/xsai/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: STT Basic Transcription with OpenAI\nDESCRIPTION: Transcribes audio from a file stream into text using the OpenAI voice provider. Reads an audio file and outputs the transcribed text to the console.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createReadStream } from \"node:fs\";\n\n// Ensure you have an audio file (e.g., input.mp3)\nconst audioFileStream = createReadStream(\"input.mp3\");\n\n// Basic transcription with OpenAI\nconst transcribedText = await openAIVoice.listen(audioFileStream);\nconsole.log(\"Transcription:\", transcribedText);\n```\n\n----------------------------------------\n\nTITLE: Basic Prompt Creation with Defaults - TypeScript\nDESCRIPTION: Demonstrates basic usage of `createPrompt` with a template and default variables.  The resulting `basicPrompt` function is then called without custom variables, using only the defaults to generate the prompt. Requires the `@voltagent/core` dependency.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt } from \"@voltagent/core\";\n\n// Define the prompt template and default variables\nconst basicPrompt = createPrompt({\n  template: `You are a helpful assistant that {{role}}.\\nTask: {{task}}`,\n  variables: { role: \"simplifies complex topics\", task: \"summarize text\" },\n});\n\n// Generate prompt using only default variables\nconst prompt1 = basicPrompt();\nconsole.log(prompt1);\n/*\nOutput:\nYou are a helpful assistant that simplifies complex topics.\nTask: summarize text\n*/\n```\n\n----------------------------------------\n\nTITLE: Define Agents in src/index.ts\nDESCRIPTION: Defines the core agents (`starsFetcherAgent`, `contributorsFetcherAgent`, `analyzerAgent`, `supervisorAgent`) using the VoltAgent framework. This involves setting up mock tools for fetching repository data, configuring language models, and orchestrating agent interactions through a supervisor-worker pattern.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Assume these tools are defined elsewhere (e.g., src/tools.ts)\n// import { fetchRepoContributorsTool, fetchRepoStarsTool } from \"./tools\";\n\n// --- Mock Tools for Demonstration ---\n// In a real scenario, you'd use actual tool implementations.\n// We use simple functions here to illustrate agent structure.\nconst mockFetchRepoStarsTool = {\n  name: \"fetchRepoStars\",\n  description: \"Fetches the star count for a given GitHub repository (owner/repo).\",\n  parameters: {\n    type: \"object\",\n    properties: {\n      repo: { type: \"string\", description: 'Repository name (e.g., \"voltagent/core\")' },\n    },\n    required: [\"repo\"],\n  },\n  execute: async ({ repo }: { repo: string }) => ({ stars: Math.floor(Math.random() * 5000) }), // Mock data\n};\n\nconst mockFetchRepoContributorsTool = {\n  name: \"fetchRepoContributors\",\n  description: \"Fetches the contributors for a given GitHub repository (owner/repo).\",\n  parameters: {\n    type: \"object\",\n    properties: {\n      repo: { type: \"string\", description: 'Repository name (e.g., \"voltagent/core\")' },\n    },\n    required: [\"repo\"],\n  },\n  execute: async ({ repo }: { repo: string }) => ({ contributors: [\"UserA\", \"UserB\", \"UserC\"] }), // Mock data\n};\n// --- End Mock Tools ---\n\n// 1. Create the stars fetcher agent\nconst starsFetcherAgent = new Agent({\n  name: \"StarsFetcher\",\n  description: \"Fetches the number of stars for a GitHub repository using a tool.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  tools: [mockFetchRepoStarsTool], // Use the mock tool\n});\n\n// 2. Create the contributors fetcher agent\nconst contributorsFetcherAgent = new Agent({\n  name: \"ContributorsFetcher\",\n  description: \"Fetches the list of contributors for a GitHub repository using a tool.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  tools: [mockFetchRepoContributorsTool], // Use the mock tool\n});\n\n// 3. Create the analyzer agent (no tools needed)\nconst analyzerAgent = new Agent({\n  name: \"RepoAnalyzer\",\n  description: \"Analyzes repository statistics (stars, contributors) and provides insights.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  // This agent doesn't need tools; it processes data provided by the supervisor.\n});\n\n// 4. Create the supervisor agent that coordinates all the sub-agents\nconst supervisorAgent = new Agent({\n  name: \"Supervisor\",\n  description: `You are a GitHub repository analyzer. When given a GitHub repository URL or owner/repo format, you will:\\n1. Extract the owner/repo name.\\n2. Use the StarsFetcher agent to get the repository's star count.\\n3. Use the ContributorsFetcher agent to get the repository's contributors.\\n4. Pass the collected data (stars, contributors) to the RepoAnalyzer agent.\\n5. Return the analysis provided by the RepoAnalyzer.\\n\\nExample input: https://github.com/vercel/ai-sdk or vercel/ai-sdk\\n`,\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  subAgents: [starsFetcherAgent, contributorsFetcherAgent, analyzerAgent], // Assign sub-agents\n});\n\n// 5. Initialize the VoltAgent with the agent hierarchy\nnew VoltAgent({\n  agents: {\n    // We only expose the supervisor externally.\n    // The supervisor will internally call the other agents.\n    supervisor: supervisorAgent,\n  },\n});\n\nconsole.log(\"GitHub Repo Analyzer Agent system started.\");\n```\n\n----------------------------------------\n\nTITLE: Using XsAIProvider with VoltAgent (TypeScript)\nDESCRIPTION: This code snippet shows how to use the `@voltagent/xsai` package to integrate with OpenAI or compatible APIs. It creates an `XsAIProvider` instance with an API key (or optional base URL for local models) and configures an `Agent` to use it, passing the model name as a string.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XsAIProvider } from \"@voltagent/xsai\";\n\nconst provider = new XsAIProvider({\n  apiKey: process.env.OPENAI_API_KEY!, // Or other compatible key\n  // baseURL: \"http://localhost:11434/v1\" // Optional: for local models\n});\n\nconst agent = new Agent({\n  // ... name, description ...\n  llm: provider,\n  model: \"gpt-4o-mini\", // Pass model name as string\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Action\nDESCRIPTION: This Server Action takes an expression as input, passes it to the VoltAgent's `generateText` method, and returns the calculated result. It imports the configured `agent` instance and adjusts the path if needed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n\"use server\";\n\nimport { agent } from \"@/voltagent\"; // Adjust path if needed\n\nexport async function calculateExpression(expression: string) {\n  const result = await agent.generateText(\n    `Calculate ${expression}. Only respond with the numeric result.`\n  );\n\n  return result.text;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (pnpm)\nDESCRIPTION: This command installs both development and production dependencies for the VoltAgent project using pnpm. Development dependencies include TypeScript, tsx, and @types/node, while production dependencies include @voltagent/cli. Production dependencies include @voltagent/core, @voltagent/cli, @voltagent/vercel-ai, @ai-sdk/openai, and zod.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Install development dependencies\npnpm add --save-dev typescript tsx @types/node @voltagent/cli\n\n# Install dependencies\n# Note: @voltagent/cli was already included here in the original docs, kept for consistency.\npnpm add @voltagent/core @voltagent/cli @voltagent/vercel-ai @ai-sdk/openai zod\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App with Example in Bash\nDESCRIPTION: This command uses npm to create a new VoltAgent application using the 'with-subagents' example. It automates the setup process, providing a pre-configured project to start building AI agents.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-subagents/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-subagents\n```\n\n----------------------------------------\n\nTITLE: Handling Voice Provider Events\nDESCRIPTION: Demonstrates how to listen for events emitted by the voice provider instance, such as 'speaking', 'listening', and 'error'. Allows for monitoring and handling events during TTS and STT processes.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the initialized openAIVoice instance\n\n// Listen for the start of speech synthesis\nopenAIVoice.on(\"speaking\", (data) => {\n  console.log(`[Speaking Started] Text: \\\"${data.text}\\\"`);\n});\n\n// Listen for the start of transcription\nopenAIVoice.on(\"listening\", (data) => {\n  // data might contain information about the audio stream\n  console.log(\"[Listening Started]\");\n});\n\n// Handle errors\nopenAIVoice.on(\"error\", (errorData) => {\n  console.error(\n    `[Voice Error] Code: ${errorData.code}, Message: ${errorData.message}`,\n    errorData.details\n  );\n});\n\n// Trigger an action that emits events\ntry {\n  await openAIVoice.speak(\"Testing event listeners.\");\n  // const audioInput = createReadStream(\"input.mp3\");\n  // await openAIVoice.listen(audioInput);\n} catch (error) {\n  // Errors caught here might also be emitted via the 'error' event\n  console.error(\"Direct action failed:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: This snippet shows how to configure the OpenAI API key in the .env file.  The API key is required to authenticate requests to the OpenAI API for the agents to function correctly.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-23-multi-agent-llm/index.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOPENAI_API_KEY=sk-proj-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (yarn)\nDESCRIPTION: This command installs both development and production dependencies for the VoltAgent project using yarn. Development dependencies include TypeScript, tsx, and @types/node, while production dependencies include @voltagent/core, @voltagent/vercel-ai, @ai-sdk/openai, and zod.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Install development dependencies\nyarn add --dev typescript tsx @types/node @voltagent/cli\n\n# Install dependencies\nyarn add @voltagent/core @voltagent/vercel-ai @ai-sdk/openai zod\n```\n\n----------------------------------------\n\nTITLE: Using onHandoff Hook with Subagents in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to use the `onHandoff` hook in VoltaAgent to execute custom logic when a supervisor agent delegates a task to a subagent.  The hook allows for monitoring and modifying context during task delegation, providing use cases such as logging, validation, context modification, and notifications.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/subagents.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\n// Create a supervisor agent with hooks for monitoring subagent interactions\nconst supervisorAgent = new Agent({\n  name: \"Supervisor Agent\",\n  description: \"You manage a workflow between specialized agents.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  subAgents: [storyAgent, translatorAgent],\n  hooks: {\n    onHandoff: async (targetAgent, sourceAgent) => {\n      // 'sourceAgent' is the supervisor, 'targetAgent' is the subagent receiving the task\n      console.log(`Task being handed off from ${sourceAgent.name} to ${targetAgent.name}`);\n      // --- Use Cases ---\n      // 1. Logging: Log detailed information about the handoff for debugging/monitoring.\n      // 2. Validation: Check if the handoff is appropriate based on agent capabilities or context.\n      // 3. Context Modification: Potentially modify the context being passed (though direct modification isn't standard, you could trigger external updates).\n      // 4. Notification: Send notifications about task delegation.\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Template Definition with Placeholders - TypeScript\nDESCRIPTION: Defines a prompt template string with placeholders for dynamic content using double curly braces `{{variableName}}`. This template will be used by the `createPrompt` function to generate the final prompt string.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst template = \"You are a helpful assistant that {{role}}. Task: {{task}}\";\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables\nDESCRIPTION: This defines the environment variable needed for the OpenAI API key, used by VoltAgent to authenticate with OpenAI.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=\"your-openai-api-key-here\"\n# Add other environment variables if needed\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent project with CLI tool\nDESCRIPTION: This command uses the `create-voltagent-app` CLI tool to generate a new VoltAgent project. It guides the user through the setup process, scaffolding the project structure and necessary files.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest\n```\n\n----------------------------------------\n\nTITLE: Custom TTS with ElevenLabs and Save\nDESCRIPTION: Converts text to speech using the initialized ElevenLabs voice provider, with custom options for voice and speed, and saves the audio stream to a file. Demonstrates provider-specific options for TTS.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// --- Example 2: Speak with Options and Save ---\n\nconsole.log(\"Generating custom audio...\");\nconst customAudioStream = await elevenLabsVoice.speak(\"Speaking faster now.\", {\n  // Provider-specific options can be passed here.\n  // For OpenAI, you might use:\n  // voice: \"nova\", // Override the default voice\n  // speed: 1.5,    // Adjust speaking speed (1.0 is default)\n});\n\nconsole.log(\"Saving custom audio to custom_output.mp3...\");\nconst customFileStream = createWriteStream(\"custom_output.mp3\");\n\ntry {\n  // Pipe the custom audio stream to the file stream\n  await pipeline(customAudioStream, customFileStream);\n  console.log(\"Custom audio successfully saved to custom_output.mp3\");\n} catch (error) {\n  console.error(\"Failed to save custom audio:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key\nDESCRIPTION: This bash command creates an environment file (.env) and sets the OpenAI API key. Replace 'your_openai_api_key' with the actual key. This key is crucial for authenticating requests to the OpenAI API.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure to replace 'your_openai_api_key' with your actual key\nOPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent Project with CLI\nDESCRIPTION: This command uses the `create-voltagent-app` CLI tool to scaffold a new VoltAgent project. It automates the setup process, including installing dependencies and creating a basic project structure.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/core/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm create voltagent-app@latest\n```\n\n----------------------------------------\n\nTITLE: Fetching Available Voices\nDESCRIPTION: Implements the `getVoices` method to retrieve a list of available voices from the custom voice service. It performs a simulated API call to fetch the voices and maps the API response to an array of `VoiceMetadata` objects. Includes error handling and returns an empty array if an error occurs. Returns a `Promise` that resolves to `VoiceMetadata[]`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n  /**\n   * Fetch available voices from your service.\n   */\n  async getVoices(): Promise<VoiceMetadata[]> {\n    try {\n      // --- Your API Call Logic to Get Voices ---\n      // const apiVoices = await yourClient.listVoices({ apiKey: this.apiKey });\n      // return apiVoices.map(v => ({ id: v.id, name: v.name, language: v.lang, gender: v.gender }));\n      // ---------------------------------------\n\n      // --- Placeholder ---\n      await new Promise((resolve) => setTimeout(resolve, 100)); // Simulate API call\n      return [\n        { id: \"custom-voice-1\", name: \"Custom Voice One\", language: \"en\", gender: \"female\" },\n        { id: \"custom-voice-2\", name: \"Custom Voice Two\", language: \"es\", gender: \"male\" },\n      ];\n      // --- End Placeholder ---\n    } catch (error: any) {\n      const errorMessage = error.message || \"Failed to fetch custom voices\";\n      this.emit(\"error\", {\n        message: errorMessage,\n        code: MyCustomErrorCode.ApiError,\n        details: error,\n      });\n      // Return empty array or throw, depending on desired behavior\n      return [];\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Handling Asynchronous Errors with onError Callback (TypeScript)\nDESCRIPTION: This example demonstrates how to use the `onError` callback within the `provider` options when calling `streamText` to handle asynchronous errors that occur during the streaming process.  The `onError` callback is triggered when an error is encountered during the stream, allowing for specific error handling logic to be implemented for that particular call.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n// Example with streamText\n// await agent.streamText(\"Another request\", {\n//   provider: {\n//     onError: async (error) => {\n//       console.error(\"onError callback: Stream encountered an error:\", error);\n//       // Implement specific error handling for this call\n//     }\n//   }\n// });\n```\n\n----------------------------------------\n\nTITLE: Installing VoltAgent Dependencies\nDESCRIPTION: This command installs the required VoltAgent core libraries, the Vercel AI SDK integration, the OpenAI AI SDK provider, the VoltAgent CLI, and the Zod validation library using npm.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @voltagent/core @voltagent/vercel-ai @voltagent/cli @ai-sdk/openai zod\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent development server\nDESCRIPTION: This command starts the VoltAgent development server. It compiles the TypeScript code using `tsx` and runs the resulting JavaScript. Upon successful startup, it displays a message in the terminal with the server's URL and a link to the VoltAgent Console for monitoring and debugging.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing VoltAgent Agent with VercelAIProvider in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize a VoltAgent Agent with the VercelAIProvider and OpenAI's gpt-4o-mini model. It creates an agent instance with a name, description, language model, and model configuration. This agent can then be used to interact with the AI model and perform various tasks.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/overview.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\n\nimport { openai } from \"@ai-sdk/openai\";\n\nconst agent = new Agent({\n  name: \"my-voltagent-app\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous Errors with try...catch (TypeScript)\nDESCRIPTION: This code demonstrates how to use a `try...catch` block to handle synchronous errors that may occur during the initial setup of an agent interaction, such as configuration issues or initial API connection failures. The `try` block attempts to initiate a stream using `agent.streamText`, and the `catch` block handles any exceptions that occur during this initial call.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = new Agent({\n  /* ... configuration ... */\n});\n\ntry {\n  // This try/catch handles errors during the initial call setup\n  const response = await agent.streamText(\"Some complex request that might fail initially\");\n\n  // Processing the stream itself might encounter errors handled differently (see below)\n  console.log(\"Stream processing started...\");\n  for await (const delta of response.stream) {\n    // ... handle deltas ...\n    process.stdout.write(delta.type === \"text-delta\" ? delta.textDelta : \"\");\n  }\n  // Note: If an error occurs *during* the stream, the loop might finish,\n  // but the final history entry status will indicate an error.\n  console.log(\"\\nInteraction finished processing stream.\");\n} catch (error) {\n  // Catches errors from the initial await agent.streamText() call\n  console.error(\"Agent interaction failed during setup:\", error);\n  // Implement fallback logic, inform the user, or log the error\n}\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent App in Development (yarn)\nDESCRIPTION: This command uses yarn to run the VoltAgent application in development mode. It executes the 'dev' script defined in the `package.json` file, typically using `tsx` to watch for file changes and automatically restart the server.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running the VoltAgent Development Server\nDESCRIPTION: This command starts the VoltAgent development server using `npm run dev`. It compiles the TypeScript code and runs the application, making it accessible through a local HTTP server. The server's URL and a link to the VoltAgent Console are displayed in the terminal.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/core/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Removing Subagents in VoltAgent (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to remove a subagent from a supervisor agent in VoltAgent. It uses the removeSubAgent method of the supervisorAgent, passing the ID of the subagent to be removed (factCheckerAgent.id).  This method also unregisters the relationship in the AgentRegistry.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/subagents.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Remove a subagent by its ID\n// This also unregisters the relationship in AgentRegistry\nsupervisorAgent.removeSubAgent(factCheckerAgent.id);\n```\n\n----------------------------------------\n\nTITLE: Using XsAIProvider with VoltAgent\nDESCRIPTION: This snippet demonstrates how to integrate the `XsAIProvider` with VoltAgent for accessing OpenAI or compatible APIs. It shows setting the API key and optionally configuring a custom baseURL for local models.  It highlights the lightweight nature of XsAI, suitable for edge environments.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { XsAIProvider } from \"@voltagent/xsai\";\n\nconst provider = new XsAIProvider({\n  apiKey: process.env.OPENAI_API_KEY!, // Or other compatible key\n  // baseURL: \"http://localhost:11434/v1\" // Optional: for local models\n});\n\nconst agent = new Agent({\n  // ... name, description ...\n  llm: provider,\n  model: \"gpt-4o-mini\", // Pass model name as string\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with yarn\nDESCRIPTION: Starts the development server using yarn. This command runs the application in development mode and should be executed in the root directory of the project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent app with CLI\nDESCRIPTION: This command uses the `create-voltagent-app` CLI tool to generate a new VoltAgent project named `with-rag-chatbot`. It sets up a basic project structure with necessary files and dependencies.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest with-rag-chatbot\n```\n\n----------------------------------------\n\nTITLE: STT Transcription with Language Hint\nDESCRIPTION: Transcribes audio from a file stream into text using the OpenAI voice provider, with a language hint specified. Improves transcription accuracy by providing a language code.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Transcription with options (e.g., language hint)\nconst transcribedSpanish = await openAIVoice.listen(audioFileStream, {\n  language: \"es\", // Specify the language code\n});\nconsole.log(\"Spanish Transcription:\", transcribedSpanish);\n```\n\n----------------------------------------\n\nTITLE: Fetching All MCP Tools as a Flat Array - Typescript\nDESCRIPTION: This code retrieves all tools from all configured MCP servers and combines them into a single array.  This flat array is suitable for providing a single agent with the combined functionality of all connected MCP services. The `mcpConfig.disconnect()` call is essential for cleaning up resources.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/mcp.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Fetch all tools from all configured MCP servers into a flat array\nconst allTools = await mcpConfig.getTools();\n\n// Use these tools when interacting with an agent\n// const response = await agent.generateText(\"What are the top posts on r/programming?\", {\n//   userId: \"user123\",\n//   tools: allTools, // Pass the combined list of tools\n// });\n\n// Remember to disconnect later\n// await mcpConfig.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent App in Development (yarn) - Manual Setup\nDESCRIPTION: This command uses yarn to run the VoltAgent application in development mode. It executes the 'dev' script defined in the `package.json` file, which typically uses `tsx` to compile and run the code while watching for file changes. The `.env` file provides environment variables.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Run Agent System with npm\nDESCRIPTION: Executes the development command using npm to start the VoltAgent server. This command compiles and runs the application, making the agents accessible for interaction via the VoltAgent Developer Console.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: TTS with OpenAI and File Save\nDESCRIPTION: Converts text to speech using the initialized OpenAI voice provider and saves the audio stream to a file. Uses Node.js file system and stream APIs to write the audio to an MP3 file.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWriteStream } from \"node:fs\";\nimport { PassThrough } from \"node:stream\";\nimport { pipeline } from \"node:stream/promises\"; // Use pipeline for better error handling\n\n// --- Example 1: Basic Speak and Save to File ---\n\nconsole.log(\"Generating audio...\");\n// Get the audio stream for the text\nconst audioStream = await openAIVoice.speak(\"Hello from VoltAgent!\");\n\nconsole.log(\"Saving audio to output.mp3...\");\n// Create a file stream to write the audio\nconst fileStream = createWriteStream(\"output.mp3\");\n\ntry {\n  // Pipe the audio stream to the file stream and wait for completion\n  await pipeline(audioStream, fileStream);\n  console.log(\"Audio successfully saved to output.mp3\");\n} catch (error) {\n  console.error(\"Failed to save audio:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Voice Providers with Agent\nDESCRIPTION: This snippet demonstrates integrating voice capabilities (STT and TTS) into a VoltAgent using both OpenAI and ElevenLabs voice providers. It shows how to use the providers directly for TTS and STT, as well as how to configure the agent to use a voice provider for generating spoken responses.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n// Import voice providers\nimport { OpenAIVoiceProvider, ElevenLabsVoiceProvider } from \"@voltagent/voice\";\nimport { createReadStream, createWriteStream } from \"fs\";\nimport { pipeline } from \"stream/promises\";\n\n// --- Using a Voice Provider directly ---\n\n// Option 1: OpenAI Voice\nconst openaiVoice = new OpenAIVoiceProvider({\n  apiKey: process.env.OPENAI_API_KEY,\n  ttsModel: \"tts-1\", // Text-to-Speech model\n  voice: \"alloy\", // Choose a voice (alloy, echo, fable, onyx, nova, shimmer)\n});\n\n// Text to Speech (TTS) -> Returns a Readable stream of audio data\n// const audioStream = await openaiVoice.speak(\"Hello from OpenAI voice!\");\n// Example: Pipe the audio stream to a file\n// await pipeline(audioStream, createWriteStream(\"openai_output.mp3\"));\n\n// Speech to Text (STT) -> Takes an audio source (e.g., Readable stream)\n// const audioFileStream = createReadStream(\"input.mp3\");\n// const transcript = await openaiVoice.listen(audioFileStream);\n// console.log(\"OpenAI Transcript:\", transcript);\n\n// Option 2: ElevenLabs Voice\nconst elevenLabsVoice = new ElevenLabsVoiceProvider({\n  apiKey: process.env.ELEVENLABS_API_KEY,\n  voice: \"Rachel\", // Choose an ElevenLabs voice ID or name\n});\n\n// TTS with ElevenLabs\n// const elAudioStream = await elevenLabsVoice.speak(\"Hello from ElevenLabs!\");\n// await pipeline(elAudioStream, createWriteStream(\"elevenlabs_output.mp3\"));\n\n// --- Integrating Voice with an Agent ---\n\nconst agent = new Agent({\n  name: \"Voice Assistant\",\n  description: \"A helpful voice assistant\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  // Assign a voice provider instance to the agent's voice property\n  voice: elevenLabsVoice, // Or use openaiVoice\n});\n\n// To generate voice from an agent response:\n// 1. Generate the text response using a core agent method.\nconst textResponse = await agent.generateText(\"Tell me a short story.\");\n\n// 2. Check if the agent has a voice provider configured.\nif (agent.voice && textResponse.text) {\n  // 3. Call the 'speak' method on the agent's voice provider instance.\n  console.log(\"Generating voice output...\");\n  const agentAudioStream = await agent.voice.speak(textResponse.text);\n  // Example: Save the agent's spoken response to a file\n  // await pipeline(agentAudioStream, createWriteStream(\"agent_story.mp3\"));\n  console.log(\"Generated voice output stream.\");\n} else {\n  console.log(\"Agent response:\", textResponse.text);\n  if (!agent.voice) {\n    console.log(\"(Agent has no voice provider configured)\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App (yarn)\nDESCRIPTION: This command uses yarn to create a new VoltAgent application. It initializes a project named 'my-agent-app' using the `create-voltagent-app` package. This provides an automated project setup experience using yarn.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create voltagent-app my-agent-app\n```\n\n----------------------------------------\n\nTITLE: Store OpenAI API Key in .env File\nDESCRIPTION: Creates a `.env` file in the root directory to store the OpenAI API key securely. The key is essential for accessing OpenAI's services within the VoltAgent application.  Replace `sk-proj-` with your actual OpenAI API key.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=sk-proj-\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in .env\nDESCRIPTION: Sets the OpenAI API key in the .env file. Replace `your_openai_api_key_here` with your actual API key. This is a prerequisite for the agent to interact with the OpenAI LLM.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Custom Voice Provider Class Definition\nDESCRIPTION: Defines a custom voice provider class, `MyCustomVoiceProvider`, that extends `BaseVoiceProvider`.  It includes properties for storing API keys and region information, as well as methods for connecting to and disconnecting from the service.  It also defines a custom error code enum for provider-specific errors. Requires `@voltagent/voice` and `node:stream` dependencies.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  BaseVoiceProvider,\n  VoiceProviderEvents,\n  VoiceMetadata,\n  VoiceSpeakOptions,\n  VoiceListenOptions,\n} from \"@voltagent/voice\";\nimport { PassThrough, Readable } from \"node:stream\"; // Import Readable\n\n// Define your custom provider options\ntype MyCustomProviderOptions = {\n  apiKey: string;\n  region?: string;\n  // Add other necessary options\n};\n\n// Define potential errors specific to your provider\nenum MyCustomErrorCode {\n  AuthError = \"AUTH_ERROR\",\n  ApiError = \"API_ERROR\",\n  InvalidInput = \"INVALID_INPUT\",\n}\n\nexport class MyCustomVoiceProvider extends BaseVoiceProvider<\n  MyCustomProviderOptions,\n  VoiceProviderEvents\n> {\n  private readonly apiKey: string;\n  private readonly region: string;\n  // Add client instances or other state needed\n\n  constructor(options: MyCustomProviderOptions) {\n    super(options); // Pass options to the base class\n    this.apiKey = options.apiKey;\n    this.region = options.region || \"default-region\";\n    // Initialize your API client here\n  }\n\n  /**\n   * Connect to the service if needed (e.g., WebSockets).\n   */\n  async connect(): Promise<void> {\n    console.log(\"Connecting to Custom Voice Service...\");\n    // Add connection logic if required\n    // Simulating async operation\n    await new Promise((resolve) => setTimeout(resolve, 100));\n    console.log(\"Connected.\");\n  }\n\n  /**\n   * Disconnect from the service.\n   */\n  disconnect(): void {\n    console.log(\"Disconnecting from Custom Voice Service...\");\n    // Add disconnection logic\n  }\n\n  /**\n   * Send audio data (e.g., for streaming STT).\n   */\n  async send(audioData: Readable): Promise<void> {\n    console.log(\"Sending audio data chunk...\");\n    // Implementation for sending streaming audio\n    // Read from audioData stream and send to your API\n    // Example: audioData.pipe(yourApiStream);\n    await new Promise((resolve) => setTimeout(resolve, 50)); // Simulate async send\n  }\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with yarn\nDESCRIPTION: This bash command starts the VoltAgent development server using yarn.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App with npm\nDESCRIPTION: This command uses npm to create a new VoltAgent application with the 'with-nextjs' example. It utilizes the `create voltagent-app` package to bootstrap a new project with a pre-configured Next.js setup for building AI agents.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-nextjs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-nextjs\n```\n\n----------------------------------------\n\nTITLE: Package.json Configuration\nDESCRIPTION: This JSON snippet shows the configuration added to the package.json file. It sets the module type to 'module' and defines scripts for building, running in development mode, starting the server, and using the VoltAgent CLI.  The \"dev\" script uses `tsx watch` and reads environment variables from `.env`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"dev\": \"tsx watch --env-file=.env ./src\",\n    \"start\": \"node dist/index.js\",\n    \"volt\": \"volt\" // Requires @voltagent/cli\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the VoltAgent Development Server\nDESCRIPTION: This command starts the VoltAgent development server using `npm run dev`.  It compiles the TypeScript code and runs the application, making it accessible in the browser via the VoltAgent Console.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/cli/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App with RAG Chatbot Example (bash)\nDESCRIPTION: This command creates a new VoltAgent application using the `create voltagent-app` utility.  The `--example with-rag-chatbot` argument specifies that the application should be initialized with the 'with-rag-chatbot' example template. This provides a starting point for building a chatbot with Retrieval-Augmented Generation capabilities.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-rag-chatbot/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-rag-chatbot\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App with Supabase Example\nDESCRIPTION: This command uses npm to create a new VoltAgent application using the `with-supabase` example. It simplifies the process of setting up a project with pre-configured integrations.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-supabase/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-supabase\n```\n\n----------------------------------------\n\nTITLE: Installing VoltAgent Dependencies with pnpm\nDESCRIPTION: This command installs the dependencies for the VoltAgent project using pnpm. It also links workspace packages, essential for monorepo projects. Requires pnpm version 8.10.5 or higher.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring MCP and Agent with TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to configure an MCP server for filesystem access and create an agent that utilizes it. It defines an MCP configuration, specifies the filesystem server connection (stdio), creates an agent with the configured tools, and initializes a VoltAgent server with the created agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { openai } from \"@ai-sdk/openai\";\nimport { VoltAgent, Agent, MCPConfiguration } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\n// Node.js 'path' module helps create safe, cross-platform file paths\nimport path from \"node:path\";\n\nconst mcpConfig = new MCPConfiguration({\n  servers: {\n    filesystem: {\n      // 'stdio' means VoltAgent will run this as a local command-line process\n      // and communicate with it via standard input/output.\n      type: \"stdio\",\n      command: \"npx\",\n      args: [\"-y\", \"@modelcontextprotocol/server-filesystem\", path.resolve(\"./data\")],\n    },\n  },\n});\n\nconst agent = new Agent({\n  name: \"MCP Filesystem Agent\",\n  description:\n    \"I am an agent that can read and write files inside a specific 'data' directory, using tools provided by an MCP server.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  tools: await mcpConfig.getTools(),\n});\n\nnew VoltAgent({\n  agents: {\n    fsAgent: agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App with Example - Bash\nDESCRIPTION: This command uses `npm create` to scaffold a new VoltAgent application using the `with-vercel-ai` example. It simplifies the process of setting up a VoltAgent project with pre-configured functionalities and dependencies. This creates a VoltAgent application with Vercel AI integration.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-vercel-ai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-vercel-ai\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App with Retrieval Example (Bash)\nDESCRIPTION: This command uses npm to create a new VoltAgent application using the `with-retrieval` example template. This sets up a project with pre-configured code for retrieval-augmented generation or similar retrieval-based AI agent functionality. It requires Node.js and npm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-retrieval/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-retrieval\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Installs the project dependencies using npm. This command should be executed in the root directory of the project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating Supabase Tables for VoltAgent Memory\nDESCRIPTION: Creates the necessary tables and indexes in a Supabase database for storing VoltAgent conversation history, messages, and agent history.  It is crucial to execute these SQL commands to properly use the Supabase Memory provider.  The table prefix `voltagent_memory` can be customized via initialization, but must also be updated in these SQL statements if changed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/supabase/README.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Conversations Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_conversations (\n    id TEXT PRIMARY KEY,\n    resource_id TEXT NOT NULL,\n    title TEXT,\n    metadata JSONB, -- Use JSONB for efficient querying\n    created_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),\n    updated_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now())\n);\n\n-- Index for faster lookup by resource_id\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_conversations_resource\nON voltagent_memory_conversations(resource_id);\n\n-- Messages Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_messages (\n    user_id TEXT NOT NULL,\n    -- Add foreign key reference and cascade delete\n    conversation_id TEXT NOT NULL REFERENCES voltagent_memory_conversations(id) ON DELETE CASCADE,\n    message_id TEXT NOT NULL,\n    role TEXT NOT NULL,\n    content TEXT NOT NULL, -- Consider JSONB if content is often structured\n    type TEXT NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT timezone('utc'::text, now()),\n    -- Composite primary key to ensure message uniqueness within a conversation\n    PRIMARY KEY (user_id, conversation_id, message_id)\n);\n\n-- Index for faster message retrieval\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_messages_lookup\nON voltagent_memory_messages(user_id, conversation_id, created_at);\n\n-- Agent History Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_agent_history (\n    key TEXT PRIMARY KEY,\n    value JSONB NOT NULL, -- Store the entry object as JSONB\n    agent_id TEXT NOT NULL\n);\n\n-- Index for faster lookup by agent_id\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_agent_id\nON voltagent_memory_agent_history(agent_id);\n\n-- Agent History Events Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_agent_history_events (\n    key TEXT PRIMARY KEY,\n    value JSONB NOT NULL, -- Store the event object as JSONB\n    -- Foreign key to history entry\n    history_id TEXT NOT NULL REFERENCES voltagent_memory_agent_history(key) ON DELETE CASCADE,\n    agent_id TEXT NOT NULL\n);\n\n-- Indexes for faster lookup\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_events_history_id\nON voltagent_memory_agent_history_events(history_id);\n\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_events_agent_id\nON voltagent_memory_agent_history_events(agent_id);\n\n-- Agent History Steps Table\nCREATE TABLE IF NOT EXISTS voltagent_memory_agent_history_steps (\n    key TEXT PRIMARY KEY,\n    value JSONB NOT NULL, -- Store the step object as JSONB\n    -- Foreign key to history entry\n    history_id TEXT NOT NULL REFERENCES voltagent_memory_agent_history(key) ON DELETE CASCADE,\n    agent_id TEXT NOT NULL\n);\n\n-- Indexes for faster lookup\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_steps_history_id\nON voltagent_memory_agent_history_steps(history_id);\n\nCREATE INDEX IF NOT EXISTS idx_voltagent_memory_agent_history_steps_agent_id\nON voltagent_memory_agent_history_steps(agent_id);\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent App in Development (npm)\nDESCRIPTION: This command uses npm to run the VoltAgent application in development mode. It executes the 'dev' script defined in the `package.json` file, typically using `tsx` to watch for file changes and automatically restart the server.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent Project with the CLI\nDESCRIPTION: This command uses the `create-voltagent-app` CLI tool to create a new VoltAgent project. It guides the user through the setup process, initializing a basic project structure.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/cli/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm create voltagent-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn\nDESCRIPTION: Installs the project dependencies using yarn. This command should be executed in the root directory of the project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (npm)\nDESCRIPTION: This command installs the necessary dependencies for the VoltAgent project. It should be executed in the project directory after the initial project setup.  Running `npm install` ensures that all required libraries, as specified in the `package.json` file, are available for the application.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-23-multi-agent-llm/index.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a Provider instance in Typescript\nDESCRIPTION: This code snippet demonstrates how to create a new instance of the `Provider` class in Typescript. It initializes the provider with a name and description.  The `Provider` class must be imported/defined elsewhere. The created `provider` object can then be used for further operations.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/providers/create.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new Provider({\n  name: \"My Provider\",\n  description: \"My Provider Description\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a VoltAgent with a Simple Agent (TypeScript)\nDESCRIPTION: This TypeScript code snippet demonstrates how to create and initialize a VoltAgent with a single agent. It imports necessary modules, defines an agent with a name, description, LLM provider, and model, and then initializes VoltAgent with the created agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/voice/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project\nDESCRIPTION: This set of commands creates a new Next.js project using the `create-next-app` command and navigates into the project directory.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest my-voltagent-app\ncd my-voltagent-app\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App (pnpm)\nDESCRIPTION: This command uses pnpm to create a new VoltAgent application. It initializes a project named 'my-agent-app' using the `create-voltagent-app` package. This provides an automated project setup experience using pnpm.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm create voltagent-app my-agent-app\n```\n\n----------------------------------------\n\nTITLE: PromptTemplate Type Definition - TypeScript\nDESCRIPTION: Defines the `PromptTemplate` type, which represents the structure of the options object passed to `createPrompt`.  It includes a template string and an optional variables object.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype PromptTemplate = {\n  template: string; // The template string with {{placeholders}}\n  variables?: PromptVariables; // Optional default variables\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent project using CLI\nDESCRIPTION: This command uses the `create-voltagent-app` CLI tool to quickly scaffold a new VoltAgent project. It simplifies the initial setup and provides a basic project structure.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/xsai/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm create voltagent-app@latest\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command navigates the user to the newly created VoltAgent application directory named 'my-voltagent-app'. This step is necessary to execute further commands within the project context.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd my-voltagent-app\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent Application with npm\nDESCRIPTION: This command creates a new VoltAgent application using the `create voltagent-app` package and specifies the `github-repo-analyzer` example. It utilizes npm to initialize the project with the provided example.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/github-repo-analyzer/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example github-repo-analyzer\n```\n\n----------------------------------------\n\nTITLE: Creating a Tool with Type Safety and Logging in VoltAgent (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to create a tool using `@voltagent/core` with type safety through `zod` and includes logging. It defines the tool's name, description, parameters, and the `execute` function, showcasing error handling and structured result returns. The tool simulates a weather API call with potential cancellation using `AbortSignal`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTool } from \"@voltagent/core\";\nimport { z } from \"zod\";\n\n// 1. Define clear parameters with descriptions for the LLM\nconst weatherParams = z.object({\n  city: z.string().describe(\"The name of the city.\"),\n  state: z.string().optional().describe(\"The state or region (e.g., CA, TX). Optional.\"),\n  unit: z.enum([\"celsius\", \"fahrenheit\"]).default(\"celsius\").describe(\"Temperature unit.\"),\n});\n\n// 2. Create the tool instance\nexport const detailedWeatherTool = createTool({\n  name: \"get_detailed_weather\",\n  description: \"Provides the current temperature and weather conditions for a specific city, optionally including the state.\",\n  parameters: weatherParams,\n\n  // 3. Implement the execute function (args are type-safe)\n  execute: async (args, options) => {\n    // Type of args: { city: string; state?: string; unit: \\\"celsius\\\" | \\\"fahrenheit\\\" }\n    const { city, state, unit } = args;\n    const location = state ? `${city}, ${state}` : city;\n    const signal = options?.signal; // Access AbortSignal if provided\n\n    console.log(`[Tool: Weather] Executing for ${location}, Unit: ${unit}`);\n\n    // Simulate API call with potential cancellation\n    try {\n      // Check if aborted before starting\n      if (signal?.aborted) throw new Error(\"Operation cancelled by signal.\");\n\n      // --- Placeholder for API call ---\n      const apiCallPromise = new Promise<{ temp: number; conditions: string }>(resolve =>\n        setTimeout(() => {\n          // Simulate different weather based on location\n          const temp = location.toLowerCase().includes(\"london\") ? 15 : 28;\n          const conditions = location.toLowerCase().includes(\"london\") ? \"Rainy\" : \"Sunny\";\n          resolve({ temp, conditions });\n        }, 1000) // Simulate 1 second delay\n      );\n\n      // Handle potential abort during the simulated delay\n      const result = await Promise.race([\n        apiCallPromise,\n        new Promise((_, reject) => {\n          if (signal) {\n            signal.addEventListener('abort', () => reject(new Error(\"Weather API call aborted.\")));\n          }\n        })\n      ]);\n      // --- End Placeholder ---\n\n      console.log(`[Tool: Weather] Success for ${location}`);\n      // Return structured result\n      return {\n        location: location,\n        temperature: (result as any).temp,\n        unit: unit,\n        conditions: (result as any).conditions,\n      };\n\n    } catch (error) {\n      console.error(`[Tool: Weather] Failed for ${location}:`, error.message);\n      // Provide a structured error for the LLM\n      return { error: `Failed to get weather for ${location}. Reason: ${error.message}` };\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Supervisor and Researcher Agents in VoltAgent\nDESCRIPTION: This snippet demonstrates how to define a supervisor agent that delegates tasks to a researcher sub-agent using the `delegate_task` tool.  It showcases the creation of both agents with specific roles, descriptions, and LLM configurations.  The `subAgents` array links the supervisor to the researcher.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, VoltAgent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n// Assume 'webSearchTool' is defined elsewhere\n\n// 1. Define Researcher Sub-agent\nconst researcher = new Agent({\n  name: \"WebResearcher\",\n  description: \"Efficiently searches the web for information on a given topic and provides a concise summary.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  // tools: [webSearchTool], // This agent needs a web search tool\n});\n\n// 2. Define Supervisor Agent\nconst supervisor = new Agent({\n  name: \"ResearchCoordinator\",\n  description: `You are a coordinator. When asked to research a topic, delegate the task to the WebResearcher agent using the delegate_task tool. Present the summary provided by the researcher. Available agents: WebResearcher.`,\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"), // Needs good reasoning\n  subAgents: [researcher],  // List the sub-agent\n});\n\n// 3. Initialize Framework\nnew VoltAgent({ agents: { coordinator: supervisor } });\n\n// Interaction Flow:\n// User -> coordinator: \"Research the impact of AI on climate change.\"\n// Coordinator LLM -> delegate_task({ task: \"Research AI impact on climate change\", targetAgents: [\"WebResearcher\"] })\n// -> SubAgentManager.handoffTask(target=researcher, task=..., parentId='coordinator', parentHistoryId='...')\n// -> researcher Agent receives task, uses its 'webSearchTool'\n// -> researcher Agent returns summary\n// -> SubAgentManager.handoffTask returns result to delegate_task\n// Coordinator LLM -> Receives summary from tool result, formats final answer\n// Coordinator -> User: \"Here is a summary of AI's impact on climate change: [summary]\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent Project\nDESCRIPTION: This command utilizes the `create-voltagent-app` CLI tool to scaffold a new VoltAgent project. It automates project setup and guides the user through the necessary configuration steps.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/voice/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: Navigates the terminal into the newly created VoltAgent project directory `github-repo-analyzer` to prepare for subsequent steps.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd github-repo-analyzer\n```\n\n----------------------------------------\n\nTITLE: Starting New vs. Maintaining Continuous Conversations (TypeScript)\nDESCRIPTION: This code demonstrates how to start a new conversation each time by omitting `conversationId`, and how to maintain a continuous conversation by providing the same `conversationId` across multiple requests. Providing the same `userId` and `conversationId` ensures context is preserved.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/overview.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// To start a NEW conversation each time (or for single-turn interactions):\n// Omit conversationId; a new one is generated automatically.\nconst response1 = await agent.generateText(\"Help with account setup\", { userId: \"user-123\" });\nconst response2 = await agent.generateText(\"Question about billing issue\", { userId: \"user-123\" }); // Starts another new conversation\n\n// To MAINTAIN a continuous conversation across requests:\n// Always provide the SAME conversationId.\nconst SUPPORT_THREAD_ID = \"case-987-abc\";\nconst responseA = await agent.generateText(\"My router is not working.\", {\n  userId: \"user-456\",\n  conversationId: SUPPORT_THREAD_ID,\n});\n// Agent remembers the router issue for the next call with the same ID\nconst responseB = await agent.generateText(\"I tried restarting it, still no luck.\", {\n  userId: \"user-456\",\n  conversationId: SUPPORT_THREAD_ID,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App with an example using npm\nDESCRIPTION: This command uses npm to create a new VoltAgent application based on the `with-tools` example. It automates the setup of a VoltAgent project, including the necessary dependencies and configurations, pre-configured with tools, allowing users to quickly explore and build upon a functional AI agent example.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-tools/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-tools\n```\n\n----------------------------------------\n\nTITLE: Cloning the VoltAgent Repository\nDESCRIPTION: This command clones the forked VoltAgent repository to your local machine, allowing you to work on the codebase.  It requires Git to be installed and configured.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your-github-username>/VoltAgent.git # Replace with your fork\ncd voltagent\n```\n\n----------------------------------------\n\nTITLE: Installing VoltAgent Supabase Package with npm\nDESCRIPTION: Installs the `@voltagent/supabase` and `@supabase/supabase-js` packages using npm. These packages are required for using the Supabase memory provider with VoltAgent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/supabase/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @voltagent/supabase @supabase/supabase-js\n# or\nyarn add @voltagent/supabase @supabase/supabase-js\n# or\npnpm add @voltagent/supabase @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Agent in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to define a simple AI agent using the VoltAgent framework. It imports necessary modules from `@voltagent/core`, `@voltagent/vercel-ai`, and `@ai-sdk/openai`. The agent is configured with a name, description, an LLM provider (VercelAIProvider), and an AI model (gpt-4o-mini from OpenAI). Finally, it initializes VoltAgent with the defined agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/core/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Sub-agents for Task Delegation in VoltAgent (TypeScript)\nDESCRIPTION: This code demonstrates how to define a sub-agent (WebResearcher) and a supervisor agent (ResearchCoordinator) in VoltAgent. The supervisor uses the `delegate_task` tool to delegate tasks to the sub-agent. The `subAgents` array configures the relationship.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent, VoltAgent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n// Assume 'webSearchTool' is defined elsewhere\n\n// 1. Define Researcher Sub-agent\nconst researcher = new Agent({\n  name: \"WebResearcher\",\n  description: \"Efficiently searches the web for information on a given topic and provides a concise summary.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n  // tools: [webSearchTool], // This agent needs a web search tool\n});\n\n// 2. Define Supervisor Agent\nconst supervisor = new Agent({\n  name: \"ResearchCoordinator\",\n  description: `You are a coordinator. When asked to research a topic, delegate the task to the WebResearcher agent using the delegate_task tool. Present the summary provided by the researcher. Available agents: WebResearcher.`,\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"), // Needs good reasoning\n  subAgents: [researcher],  // List the sub-agent\n});\n\n// 3. Initialize Framework\nnew VoltAgent({ agents: { coordinator: supervisor } });\n\n// Interaction Flow:\n// User -> coordinator: \"Research the impact of AI on climate change.\"\n// Coordinator LLM -> delegate_task({ task: \"Research AI impact on climate change\", targetAgents: [\"WebResearcher\"] })\n// -> SubAgentManager.handoffTask(target=researcher, task=..., parentId='coordinator', parentHistoryId='...')\n// -> researcher Agent receives task, uses its 'webSearchTool'\n// -> researcher Agent returns summary\n// -> SubAgentManager.handoffTask returns result to delegate_task\n// Coordinator LLM -> Receives summary from tool result, formats final answer\n// Coordinator -> User: \"Here is a summary of AI's impact on climate change: [summary]\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent project from example using npm\nDESCRIPTION: This command uses npm to create a new VoltAgent project based on the github-repo-analyzer example. It allows users to quickly start with a pre-configured project and explore more advanced features.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example github-repo-analyzer\n```\n\n----------------------------------------\n\nTITLE: Initializing ElevenLabs Voice Provider\nDESCRIPTION: Initializes the ElevenLabs voice provider with an API key, TTS model, and voice ID. Requires the ElevenLabs API key to be set. Sets up the provider for text-to-speech operations using ElevenLabs services.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Or initialize with ElevenLabs\nimport { ElevenLabsVoiceProvider } from \"@voltagent/voice\";\n\nconst elevenLabsVoice = new ElevenLabsVoiceProvider({\n  apiKey: process.env.ELEVENLABS_API_KEY, // Ensure API key is set\n  ttsModel: \"eleven_multilingual_v2\",\n  voice: \"Rachel\", // Example voice ID\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App using CLI\nDESCRIPTION: This command uses npm to create a new VoltAgent project named 'my-voltagent-app' using the create-voltagent-app package. It downloads the necessary files and sets up a basic project structure.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/supabase/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Implementation\nDESCRIPTION: Implements the `speak` method for converting text to speech using a custom TTS service.  It emits a 'speaking' event, performs a simulated API call, creates a `Readable` stream from the synthesized audio data, and returns the stream. Includes error handling that emits an 'error' event and throws an error if the TTS process fails. Requires a text string and optional `VoiceSpeakOptions` as input, and returns a `Readable` stream.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n  /**\n   * Convert text to speech.\n   */\n  async speak(\n    text: string, // Assuming text is always string for simplicity here\n    options?: VoiceSpeakOptions // Use standardized options type\n  ): Promise<Readable> {\n    // Return standard Readable stream\n    this.emit(\"speaking\", { text }); // Emit standard event\n\n    try {\n      console.log(`Speaking text: \"${text}\" with voice: ${options?.voice}`);\n      // --- Your TTS API Call Logic ---\n      // const apiResponse = await yourTTSClient.synthesize({\n      //   text: text,\n      //   voice: options?.voice || 'default-voice',\n      //   apiKey: this.apiKey,\n      //   // map other options like speed if applicable\n      // });\n      // -----------------------------\n\n      // Simulate receiving audio data from API\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      const audioBuffer = Buffer.from(`Simulated audio for: ${text}`);\n\n      // Return audio data as a Readable stream\n      const passThrough = new PassThrough();\n      passThrough.end(audioBuffer);\n      return passThrough;\n    } catch (error: any) {\n      const errorMessage = error.message || \"Unknown TTS error\";\n      this.emit(\"error\", {\n        message: errorMessage,\n        code: MyCustomErrorCode.ApiError, // Use your specific error codes\n        details: error,\n      });\n      throw new Error(`Custom TTS failed: ${errorMessage}`); // Re-throw a standard error\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent Development Servers with pnpm\nDESCRIPTION: This command runs the development servers for specific packages in the VoltAgent monorepo using the `--scope` flag.  It enables hot reloading and recompilation upon code changes. Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Example: Develop core and cli packages\npnpm dev --scope @voltagent/core --scope @voltagent/cli\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAI Voice Provider\nDESCRIPTION: Initializes the OpenAI voice provider with an API key, TTS model, and voice. Requires the OpenAI API key to be set in environment variables. Sets up the provider for text-to-speech operations.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Initialize with OpenAI\nimport { OpenAIVoiceProvider } from \"@voltagent/voice\";\n\nconst openAIVoice = new OpenAIVoiceProvider({\n  apiKey: process.env.OPENAI_API_KEY, // Ensure API key is set in environment variables\n  ttsModel: \"tts-1\",\n  voice: \"alloy\", // Available voices: alloy, echo, fable, onyx, nova, shimmer\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Voice Package with npm\nDESCRIPTION: Install the @voltagent/voice package using npm. This command adds the package and its dependencies to your project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @voltagent/voice\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Installs the project dependencies using pnpm. This command should be executed in the root directory of the project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific VoltAgent Packages with pnpm\nDESCRIPTION: This command runs tests for specific packages within the VoltAgent monorepo using `pnpm test` with the `--scope` flag. It allows targeted testing of modified packages. Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Example: Run tests for the core package\npnpm test --scope @voltagent/core\n```\n\n----------------------------------------\n\nTITLE: Adding a Dependency to a VoltAgent Package with pnpm\nDESCRIPTION: This command adds a new dependency to a specific package within the VoltAgent monorepo. It utilizes the `pnpm add` command, and requires you to be in the package's directory. Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Example: Add 'lodash' to the core package\ncd packages/core\npnpm add lodash\n```\n\n----------------------------------------\n\nTITLE: Installing Voice Package with yarn\nDESCRIPTION: Install the @voltagent/voice package using yarn. This command adds the package and its dependencies to your project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @voltagent/voice\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent App in Development (pnpm) - Manual Setup\nDESCRIPTION: This command uses pnpm to run the VoltAgent application in development mode. It executes the 'dev' script defined in the `package.json` file, which typically uses `tsx` to compile and run the code while watching for file changes. The `.env` file provides environment variables.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository using Git\nDESCRIPTION: This command clones the VoltAgent repository from GitHub.  It's the first step in setting up the example.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-mcp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/voltagent/voltagent.git\ncd voltagent/examples/with-mcp\n```\n\n----------------------------------------\n\nTITLE: Listing Available OpenAI Voices\nDESCRIPTION: Fetches and logs the list of available voices supported by the OpenAI voice provider. Demonstrates how to retrieve and inspect the voice options.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the initialized openAIVoice instance\nconst availableVoices = await openAIVoice.getVoices();\nconsole.log(\"Available OpenAI Voices:\", availableVoices);\n/* Example Output:\n[\n  { id: 'alloy', name: 'Alloy', language: 'en', gender: 'neutral' },\n  { id: 'echo', name: 'Echo', language: 'en', gender: 'male' },\n  // ... other voices\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: VoltAgent Startup Message\nDESCRIPTION: This bash output shows the VoltAgent server successfully started and the URL of the developer console.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n══════════════════════════════════════════════════\n  VOLTAGENT SERVER STARTED SUCCESSFULLY\n══════════════════════════════════════════════════\n  ✓ HTTP Server: http://localhost:3141\n\n  Developer Console:    https://console.voltagent.dev\n══════════════════════════════════════════════════\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies (npm)\nDESCRIPTION: This command installs both development and production dependencies for the VoltAgent project using npm. Development dependencies include TypeScript, tsx, and @types/node, while production dependencies include @voltagent/core, @voltagent/vercel-ai, @ai-sdk/openai, and zod.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Install development dependencies\nnpm install --save-dev typescript tsx @types/node @voltagent/cli\n\n# Install dependencies\nnpm install @voltagent/core @voltagent/vercel-ai @ai-sdk/openai zod\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using pnpm\nDESCRIPTION: This command installs the necessary dependencies for the project using pnpm. Alternatively, npm or yarn can be used.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-mcp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n# or npm install / yarn install\n```\n\n----------------------------------------\n\nTITLE: Bad Example: Unclear Tool Descriptions and Parameters\nDESCRIPTION: This snippet presents a bad example of tool creation, highlighting the importance of clear descriptions for both the tool itself and its parameters. The `search` tool has a vague description, and the parameters `q` and `n` are unclear and lack descriptions, making it difficult for the agent to understand how to use the tool effectively.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst badTool = createTool({\n  name: \"search\",\n  description: \"Searches things\", // Vague, doesn't explain what it searches or when to use it\n  parameters: z.object({\n    q: z.string(), // Unclear parameter name with no description\n    n: z.number().optional(), // Unclear what this parameter does\n  }),\n  execute: async (args) => {\n    /* ... */\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Building Static Content\nDESCRIPTION: This command builds the static website content using Yarn. It executes a script in `package.json` that compiles the website into static HTML, CSS, and JavaScript files, placing them in the `build` directory for deployment.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Running the VoltAgent Development Server\nDESCRIPTION: This command starts the VoltAgent development server. It uses npm to execute the 'dev' script defined in the project's package.json file, typically compiling the TypeScript code and starting the server.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/supabase/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating the data directory and a test file\nDESCRIPTION: This command creates the `data` directory and a sample `test.txt` file within it. The MCP server is configured to access files within this directory.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-mcp/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir data\necho \"Hello from test file!\" > data/test.txt\n```\n\n----------------------------------------\n\nTITLE: Building a Specific VoltAgent Package with pnpm\nDESCRIPTION: This command builds a specific package within the VoltAgent monorepo, using the `--scope` flag. Useful for iterative development. Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Example: Build the core package\npnpm build --scope @voltagent/core\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Reports for All VoltAgent Packages with pnpm\nDESCRIPTION: This command generates test coverage reports for all packages in the VoltAgent monorepo. It is a comprehensive coverage generation command. Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# For all packages\npnpm test:all:coverage\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent App in Development (pnpm)\nDESCRIPTION: This command uses pnpm to run the VoltAgent application in development mode. It executes the 'dev' script defined in the `package.json` file, typically using `tsx` to watch for file changes and automatically restart the server.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command changes the current directory to the newly created `mcp-filesystem-agent` directory, allowing the user to work within the project's file structure.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mcp-filesystem-agent\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration\nDESCRIPTION: This JSON configuration file (tsconfig.json) defines the settings for the TypeScript compiler. It specifies the target ECMAScript version, module system, output directory, and enables strict type checking.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"NodeNext\",\n    \"moduleResolution\": \"NodeNext\",\n    \"esModuleInterop\": true,\n    \"outDir\": \"dist\",\n    \"strict\": true\n  },\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js to Exclude VoltAgent Packages\nDESCRIPTION: This configuration ensures that VoltAgent packages are not bundled with client-side code, preventing potential compatibility issues. It defines the `serverComponentsExternalPackages` property within the `nextConfig` object.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  experimental: {\n    // Mark VoltAgent packages as external\n    serverComponentsExternalPackages: [\"@voltagent/*\"],\n    // If using other packages that need to run externally (like npm-check-updates in the example)\n    // add them here too.\n    // serverComponentsExternalPackages: [\"@voltagent/*\", \"another-package\"],\n  },\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Deploying Website using SSH\nDESCRIPTION: This command deploys the website to GitHub pages using SSH for authentication. It sets the `USE_SSH` environment variable to `true` and then runs a Yarn script that builds and pushes the website to the `gh-pages` branch.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Navigating to Documentation Directory and Starting Development Server\nDESCRIPTION: This command navigates to the documentation directory (assumed to be 'website') and starts the development server. It relies on a static site generator (e.g., Docusaurus) setup. Requires pnpm to be installed and documentation dependencies installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd website # Or your actual documentation directory\npnpm install\npnpm start # Or the relevant dev script (e.g., dev, develop)\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with npm\nDESCRIPTION: Starts the development server using npm. This command runs the application in development mode and should be executed in the root directory of the project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Create VoltAgent Project with CLI\nDESCRIPTION: Uses the `create-voltagent-app` CLI to quickly set up a new VoltAgent project. This command initializes a project named `github-repo-analyzer` with user-selected package manager.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest github-repo-analyzer\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH\nDESCRIPTION: This command deploys the website to GitHub pages using a GitHub username instead of SSH. It sets the `GIT_USER` environment variable and then runs a Yarn script to build and push the website to the `gh-pages` branch.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Running the agent in development mode using pnpm\nDESCRIPTION: This command starts the VoltAgent server in development mode using pnpm.  It triggers the MCP connection and tool fetching.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-mcp/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n# or npm run dev / yarn dev\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server with pnpm\nDESCRIPTION: Starts the development server using pnpm. This command runs the application in development mode and should be executed in the root directory of the project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Run Agent System with pnpm\nDESCRIPTION: Executes the development command using pnpm to start the VoltAgent server. This command compiles and runs the application, making the agents accessible for interaction via the VoltAgent Developer Console.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App\nDESCRIPTION: This command uses the `create-voltagent-app` tool to create a new VoltAgent project named `mcp-filesystem-agent`. It guides the user through the setup process, allowing them to choose options such as TypeScript support.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest mcp-filesystem-agent\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with pnpm\nDESCRIPTION: This bash command starts the VoltAgent development server using pnpm.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Disabling Memory in Agent Initialization (TypeScript)\nDESCRIPTION: This snippet shows how to disable memory persistence and retrieval in a VoltAgent agent. By setting the `memory` property to `false` in the `Agent` constructor, the agent becomes stateless, and no conversation history is stored or retrieved.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/overview.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst agent = new Agent({\n  name: \"Stateless Assistant\",\n  description: \"This agent has no memory.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  memory: false, // Memory completely disabled\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Voice Package with pnpm\nDESCRIPTION: Install the @voltagent/voice package using pnpm. This command adds the package and its dependencies to your project.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @voltagent/voice\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: This bash command installs project dependencies using npm package manager.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with yarn\nDESCRIPTION: This bash command installs project dependencies using yarn package manager.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Run Agent System with yarn\nDESCRIPTION: Executes the development command using yarn to start the VoltAgent server. This command compiles and runs the application, making the agents accessible for interaction via the VoltAgent Developer Console.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-first-ai-agent-github-repo-analyzer/index.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent Project via CLI (Bash)\nDESCRIPTION: This command uses the npm CLI to create a new VoltAgent project. It will guide the user through setting up the project with the necessary files and dependencies.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/vercel-ai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: This bash command installs project dependencies using pnpm package manager.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing npm Project\nDESCRIPTION: This command initializes a new npm project in the current directory with default settings. The `-y` flag automatically accepts all default values during initialization, creating a `package.json` file.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: This command starts a local development server using Yarn. It typically runs a script defined in `package.json` that utilizes Docusaurus's built-in development server, enabling live reloading for changes.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Error Handling in VoltAgent Tool Execution\nDESCRIPTION: This snippet demonstrates how to implement error handling within the `execute` function of a VoltAgent tool. By wrapping the tool's implementation in a `try...catch` block, the code can catch potential errors and throw a new error with a useful message. This helps ensure that the agent receives informative error messages when a tool fails to execute properly, facilitating debugging and recovery.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/tools.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexecute: async (args) => {\n  try {\n    // Tool implementation\n    return result;\n  } catch (error) {\n    throw new Error(`Failed to process request: ${error.message}`);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Agent Constructor Signature\nDESCRIPTION: This TypeScript code shows the constructor signature of the `Agent` class, the central orchestrator in VoltAgent. It details the options object, including properties for agent identity (name, description), LLM connection (llm, model), capabilities (tools, memory, retriever, subAgents, hooks, voice), and configuration details.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { AgentHooks } from './hooks';\nimport { LLMProvider } from './providers';\nimport { Memory, MemoryOptions } from '../memory';\nimport { AgentTool } from '../tool';\nimport { BaseRetriever } from '../retriever';\nimport { Voice } from '../voice';\n\nclass Agent<TProvider extends { llm: LLMProvider<any> }> {\n  constructor(options: {\n    id?: string;\n    name: string;\n    description?: string;\n    llm: ProviderInstance<TProvider>; // e.g., new VercelAIProvider()\n    model: ModelType<TProvider>;     // e.g., openai(\"gpt-4o-mini\")\n    memory?: Memory | false;\n    memoryOptions?: MemoryOptions;\n    tools?: AgentTool[];\n    subAgents?: Agent<any>[];\n    hooks?: AgentHooks;\n    retriever?: BaseRetriever;\n    voice?: Voice;\n    maxHistoryEntries?: number;\n  });\n  // ... methods like generateText, streamText, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling MCP Connection Events - Typescript\nDESCRIPTION: This code snippet shows how to listen for connection events, errors, and MCP messages from the underlying MCP client instances. It retrieves the clients using `mcpConfig.getClients()` and attaches event listeners for 'connect', 'error', and 'message' events, allowing for monitoring and debugging of MCP connections.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/mcp.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Get the client instances (ensure connection is established first, e.g., after getTools)\nconst clients = await mcpConfig.getClients();\n\n// Example: Listen for connection event on the 'reddit' client\nif (clients.reddit) {\n  clients.reddit.on(\"connect\", () => {\n    console.log(\"Connected to Reddit MCP server\");\n  });\n\n  // Example: Handle errors centrally for the 'reddit' client\n  clients.reddit.on(\"error\", (error) => {\n    console.error(\"Reddit MCP server connection error:\", error.message);\n  });\n\n  // Example: Listen for specific MCP messages (raw interaction)\n  clients.reddit.on(\"message\", (message) => {\n    // console.log(\"Received MCP message from Reddit:\", message);\n    if (message.type === \"tool_call\") {\n      console.log(`MCP Log: Tool ${message.tool_name} called`);\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available ElevenLabs Voices\nDESCRIPTION: Fetches and logs the list of available voices supported by the ElevenLabs voice provider. Shows how to retrieve voice options from ElevenLabs.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/voice.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst elevenLabsVoices = await elevenLabsVoice.getVoices();\nconsole.log(\"Available ElevenLabs Voices:\", elevenLabsVoices); // Structure might differ\n```\n\n----------------------------------------\n\nTITLE: Example agent startup log output\nDESCRIPTION: This is the expected log output when the agent starts successfully, showing the MCP connection and tool fetching, as well as the VoltAgent server startup message.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-mcp/README.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n[MCP Example] Connecting to MCP server and fetching tools...\n[MCP Example] Fetched 3 MCP tool(s) from filesystem server.\n══════════════════════════════════════════════════\n  VOLTAGENT SERVER STARTED SUCCESSFULLY\n══════════════════════════════════════════════════\n  ✓ HTTP Server: http://localhost:3141\n  Developer Console:    https://console.voltagent.dev\n══════════════════════════════════════════════════\n[VoltAgent] All packages are up to date\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: This command creates a new directory named 'my-voltagent-project'. This directory will house all the files related to the VoltAgent project, which is part of the manual setup process.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-voltagent-project\n```\n\n----------------------------------------\n\nTITLE: Install Supabase Memory Package with PNPM\nDESCRIPTION: Installs the `@voltagent/supabase` package along with the `@supabase/supabase-js` client library using pnpm. This command adds the necessary dependencies for using Supabase as a memory provider for VoltAgent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/supabase.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @voltagent/supabase @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Variables - TypeScript\nDESCRIPTION: Illustrates how to override default variables when calling the prompt function. This snippet shows how to pass a custom `task` and both `role` and `task` to the generated function. Relies on the `basicPrompt` defined in the previous snippet.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Generate prompt with a custom 'task'\nconst prompt2 = basicPrompt({ task: \"Explain quantum computing to a 10-year-old\" });\nconsole.log(prompt2);\n/*\nOutput:\nYou are a helpful assistant that simplifies complex topics.\nTask: Explain quantum computing to a 10-year-old\n*/\n\n// Override both 'role' and 'task'\nconst prompt3 = basicPrompt({\n  role: \"translates languages\",\n  task: \"Translate 'hello' to French\",\n});\nconsole.log(prompt3);\n/*\nOutput:\nYou are a helpful assistant that translates languages.\nTask: Translate 'hello' to French\n*/\n```\n\n----------------------------------------\n\nTITLE: Running the VoltAgent Development Server\nDESCRIPTION: This command starts the VoltAgent development server. It compiles the TypeScript code using tsx and executes the compiled JavaScript. The server startup message indicates successful initialization.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/voice/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App with NPM\nDESCRIPTION: This code snippet demonstrates how to quickly scaffold a new VoltAgent project using the `create-voltagent-app` command. It installs necessary dependencies and sets up a basic project structure for building AI agents.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-introducing-developer-console/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest my-first-agent\ncd my-first-agent\nnpm run dev # or yarn dev / pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent App in Development (npm) - Manual Setup\nDESCRIPTION: This command uses npm to run the VoltAgent application in development mode. It executes the 'dev' script defined in the `package.json` file, which typically uses `tsx` to compile and run the code while watching for file changes. The `.env` file provides environment variables.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Prompts with createPrompt\nDESCRIPTION: This snippet demonstrates the usage of the `createPrompt` utility for generating dynamic prompt strings from templates and variables.  It showcases how to define a prompt template with default variables and override them for specific use cases, providing flexibility in prompt construction.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/static/img/llms.txt#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt } from \"@voltagent/core\";\n\nconst myPrompt = createPrompt({\n  template: \"Analyze sentiment for: {{text}}. Focus on {{aspect}}.\",\n  variables: { aspect: \"overall tone\" } // Default variable\n});\n\nconst specificPrompt = myPrompt({ text: \"This product is amazing!\" });\n// -> \"Analyze sentiment for: This product is amazing!. Focus on overall tone.\"\n\nconst specificPrompt2 = myPrompt({ text: \"Service was slow.\", aspect: \"service speed\" });\n// -> \"Analyze sentiment for: Service was slow.. Focus on service speed.\"\n```\n\n----------------------------------------\n\nTITLE: Initializing an Agent with VercelAIProvider and OpenAI\nDESCRIPTION: This code snippet demonstrates how to initialize an `Agent` instance using the `VercelAIProvider` for LLM communication and the `openai` model from `@ai-sdk/openai`. The agent is configured with a name, description, LLM provider, and model, essential for setting up a basic AI agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/overview.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Handles communication\nimport { openai } from \"@ai-sdk/openai\"; // Defines the specific model source\n\nconst agent = new Agent({\n  name: \"My Assistant\",\n  description: \"A helpful and friendly assistant that can answer questions clearly and concisely.\",\n  // The LLM Provider acts as the bridge to the AI service\n  llm: new VercelAIProvider(),\n  // The model specifies which AI model to use (e.g., from OpenAI via Vercel AI SDK)\n  model: openai(\"gpt-4o\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: This command navigates the user to the newly created VoltAgent project directory named 'my-voltagent-project'. This ensures that subsequent commands are executed within the correct project context.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncd my-voltagent-project\n```\n\n----------------------------------------\n\nTITLE: Returned Function Type Definition - TypeScript\nDESCRIPTION: Defines the type of the function returned by `createPrompt`. It takes an optional `PromptVariables` object as input and returns a string.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n(customVariables?: PromptVariables) => string;\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Prompts with `createPrompt` (TypeScript)\nDESCRIPTION: This code demonstrates how to use the `createPrompt` utility from `@voltagent/core` to create dynamic prompts from templates and variables. It shows how to define default variables and override them when creating specific prompts, allowing for flexible prompt generation.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt } from \"@voltagent/core\";\n\nconst myPrompt = createPrompt({\n  template: \"Analyze sentiment for: {{text}}. Focus on {{aspect}}.\",\n  variables: { aspect: \"overall tone\" } // Default variable\n});\n\nconst specificPrompt = myPrompt({ text: \"This product is amazing!\" });\n// -> \"Analyze sentiment for: This product is amazing!. Focus on overall tone.\"\n\nconst specificPrompt2 = myPrompt({ text: \"Service was slow.\", aspect: \"service speed\" });\n// -> \"Analyze sentiment for: Service was slow.. Focus on service speed.\"\n\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App using npm\nDESCRIPTION: This command uses npm to create a new VoltAgent application. It utilizes the `create voltagent-app` package and specifies the `with-voice-openai` example. This will scaffold a new project with pre-configured voice integration using OpenAI.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-voice-openai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-voice-openai\n```\n\n----------------------------------------\n\nTITLE: Disconnecting MCP Clients - Typescript\nDESCRIPTION: This snippet demonstrates how to disconnect all MCP clients managed by an `MCPConfiguration` instance using `mcpConfig.disconnect()`. This is crucial for cleaning up resources, especially for stdio-based servers, and preventing processes from running indefinitely in the background.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/mcp.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Disconnect all clients managed by this configuration\nawait mcpConfig.disconnect();\nconsole.log(\"MCP clients disconnected.\");\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent App with Example using npm\nDESCRIPTION: This command initializes a new VoltAgent application using npm, incorporating the 'with-voice-elevenlabs' example. It leverages the `create voltagent-app` package to set up the project with pre-configured dependencies and configurations for building an AI agent with voice capabilities using ElevenLabs.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-voice-elevenlabs/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-voice-elevenlabs\n```\n\n----------------------------------------\n\nTITLE: Using VercelAIProvider with VoltAgent (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the `@voltagent/vercel-ai` package to integrate with the Vercel AI SDK.  It shows how to create a `VercelAIProvider` instance and configure an `Agent` to use it with a specific AI model. Config is often handled by environment variables.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\"; // Import specific model functions\n\nconst provider = new VercelAIProvider(); // Config often handled by env vars\nconst agent = new Agent({\n  // ... name, description ...\n  llm: provider,\n  model: openai(\"gpt-4o-mini\"), // Pass the AI SDK model object\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Agent with Default Memory (LibSQLStorage) in TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize a VoltAgent agent with the default memory configuration. When no memory provider is explicitly specified, VoltAgent automatically uses LibSQLStorage, creating a .voltagent folder and a SQLite database file to store conversation history.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/overview.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\";\nimport { openai } from \"@ai-sdk/openai\";\n\nconst agent = new Agent({\n  name: \"My Assistant\",\n  description: \"This agent automatically uses local file memory.\",\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o\"),\n  // No memory provider specified - uses default LibSQLStorage to .voltagent/memory.db\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and running a VoltAgent app\nDESCRIPTION: This snippet shows how to create a new VoltAgent application using `npm create voltagent-app`, navigate to the newly created directory, and start the development server.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-21-introducing-voltagent/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest my-first-agent\ncd my-first-agent\nnpm run dev # or yarn dev / pnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building All VoltAgent Packages with pnpm\nDESCRIPTION: This command builds all the packages within the VoltAgent monorepo. It compiles the source code and prepares the packages for distribution.  Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Starting VoltAgent Development Server (npm)\nDESCRIPTION: This command starts the VoltAgent development server. It allows you to test and interact with your agents through the VoltAgent developer console. The command typically uses `npm run dev`, which is configured in the `package.json` file to execute the appropriate development server script.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-23-multi-agent-llm/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing VoltAgent with create-voltagent-app (Bash)\nDESCRIPTION: This command installs the necessary dependencies, sets up the basic project structure using the `create-voltagent-app` CLI tool, adds API keys to the `.env` file, and starts the development server.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/llms.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Installs necessary dependencies and sets up the basic structure\nnpm create voltagent-app@latest my-voltagent-app\n# Follow prompts for package manager selection (npm/yarn/pnpm)\n\ncd my-voltagent-app\n\n# Add API keys to the generated .env file\necho \"OPENAI_API_KEY=sk-...\" > .env # Example for OpenAI\n\n# Start the development server\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent project in development mode\nDESCRIPTION: This command starts the VoltAgent project in development mode. It compiles the TypeScript code and runs the application, enabling hot reloading and other development features.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/xsai/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Example Changeset Content for VoltAgent\nDESCRIPTION: This example shows the content of a changeset file, which includes the affected packages, semantic version bump, and a description of the changes. It should reference relevant GitHub issue numbers. The description follows the Conventional Commits specification.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_12\n\nLANGUAGE: md\nCODE:\n```\n---\n\"@voltagent/core\": minor\n\"@voltagent/cli\": patch\n---\n\nfeat(core): Implement awesome feature X\n\nThis feature allows users to do Y.\n\nfix(cli): Correct flag parsing issue\n\nResolves #456\nFixes #789\n```\n\n----------------------------------------\n\nTITLE: Starting VoltAgent Server with Observability\nDESCRIPTION: This snippet shows the expected output in the terminal when a VoltAgent application is running locally with observability enabled. It confirms that the server has started successfully and provides the HTTP server address and the URL for the Developer Console.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/observability/developer-console.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n══════════════════════════════════════════════════\n  VOLTAGENT SERVER STARTED SUCCESSFULLY\n══════════════════════════════════════════════════\n  ✓ HTTP Server: http://localhost:3141\n\n  Developer Console:    https://console.voltagent.dev\n══════════════════════════════════════════════════\n[VoltAgent] All packages are up to date\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server with npm\nDESCRIPTION: This bash command starts the VoltAgent development server using npm.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Navigating to project directory\nDESCRIPTION: This command navigates the user to the newly created `with-rag-chatbot` project directory using the command line.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd with-rag-chatbot\n```\n\n----------------------------------------\n\nTITLE: Creating data directory and test file using bash\nDESCRIPTION: These bash commands create the `data` directory and a test file named `test.txt` inside it. The MCP server is restricted to this directory, ensuring secure file access for the agent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmkdir data\necho \"Hello from the MCP agent's accessible file!\" > data/test.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Coverage Reports for Specific VoltAgent Packages with pnpm\nDESCRIPTION: This command generates test coverage reports for a specific package in the VoltAgent monorepo. It uses `pnpm test` with the `--scope` and `-- --coverage` flags. Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# For a specific package\npnpm test --scope @voltagent/core -- --coverage\n```\n\n----------------------------------------\n\nTITLE: Install Supabase Memory Package with NPM\nDESCRIPTION: Installs the `@voltagent/supabase` package along with the `@supabase/supabase-js` client library using npm. This command adds the necessary dependencies for using Supabase as a memory provider for VoltAgent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/supabase.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @voltagent/supabase @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: Install Supabase Memory Package with Yarn\nDESCRIPTION: Installs the `@voltagent/supabase` package along with the `@supabase/supabase-js` client library using yarn. This command adds the necessary dependencies for using Supabase as a memory provider for VoltAgent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/agents/memory/supabase.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @voltagent/supabase @supabase/supabase-js\n```\n\n----------------------------------------\n\nTITLE: PromptVariables Type Definition - TypeScript\nDESCRIPTION: Defines the `PromptVariables` type, which represents the key-value pairs used for template variables.  The values can be strings, numbers, booleans, or undefined.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype PromptVariables = Record<string, string | number | boolean | undefined>;\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key in .env file\nDESCRIPTION: This bash code shows how to set the OpenAI API key in a `.env` file. This key is required for the LLM to function properly within the VoltAgent.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-25-what-is-an-mcp-server/index.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Running VoltAgent in Development Mode (Bash)\nDESCRIPTION: This command starts the VoltAgent server in development mode. It compiles the TypeScript code using `tsx` and runs the application, making it accessible through a local HTTP server.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/vercel-ai/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: This command installs the project dependencies using Yarn, a package manager. It fetches all the necessary packages defined in the `package.json` file to set up the development environment.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Environment file content (.env)\nDESCRIPTION: This shows the content of the `.env` file which defines environment variables, in this case, the OpenAI API key.  Replace `your_openai_api_key_here` with your actual API key.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-mcp/README.md#_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n# .env\nOPENAI_API_KEY=your_openai_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Import createPrompt - TypeScript\nDESCRIPTION: Imports the `createPrompt` function from the `@voltagent/core` module. This function is the core utility for creating dynamic prompts.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/utils/create-prompt.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPrompt } from \"@voltagent/core\";\n```\n\n----------------------------------------\n\nTITLE: Initializing VoltAgent with a Simple Agent in TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize VoltAgent with a single agent. It defines a simple agent with a name, description, LLM provider (VercelAIProvider), and model (gpt-4o-mini from @ai-sdk/openai).\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/supabase/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { VoltAgent, Agent } from \"@voltagent/core\";\nimport { VercelAIProvider } from \"@voltagent/vercel-ai\"; // Example provider\nimport { openai } from \"@ai-sdk/openai\"; // Example model\n\n// Define a simple agent\nconst agent = new Agent({\n  name: \"my-agent\",\n  description: \"A helpful assistant that answers questions without using tools\",\n  // Note: You can swap VercelAIProvider and openai with other supported providers/models\n  llm: new VercelAIProvider(),\n  model: openai(\"gpt-4o-mini\"),\n});\n\n// Initialize VoltAgent with your agent(s)\nnew VoltAgent({\n  agents: {\n    agent,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a VoltAgent Next.js App\nDESCRIPTION: This command uses the `create voltagent-app` to scaffold a Next.js project with the VoltAgent integration example.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-nextjs\n```\n\n----------------------------------------\n\nTITLE: Creating Source Directory\nDESCRIPTION: This command creates a new directory named 'src'. This directory will house the source code of the VoltAgent project, including the main agent definition file (index.ts).\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/getting-started/quick-start.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmkdir src\n```\n\n----------------------------------------\n\nTITLE: Creating VoltAgent App with XSai Example\nDESCRIPTION: This command uses npm to create a new VoltAgent application based on the `with-xsai` example.  It simplifies the initial setup and provides a pre-configured project to get started quickly.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/examples/with-xsai/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create voltagent-app@latest -- --example with-xsai\n```\n\n----------------------------------------\n\nTITLE: Fixing Debug Option Access in LibSQLStorage - TypeScript\nDESCRIPTION: This patch changes the access to `this.options.debug` to use optional chaining (`this.options?.debug`). This prevents runtime errors that could occur in specific environments, such as Next.js, if the `debug` method is invoked before the `options` object is fully initialized or if `options` becomes unexpectedly `null` or `undefined`.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/packages/core/CHANGELOG.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthis.options?.debug\n```\n\n----------------------------------------\n\nTITLE: package.json example\nDESCRIPTION: This is an example `package.json` file for a VoltAgent project. It lists the dependencies required for the project, including `@ai-sdk/openai`, `@voltagent/core`, `@voltagent/vercel-ai`, and `zod`. The versions may vary.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/blog/2025-04-24-rag-chatbot/index.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// ... (scripts, name: \"with-rag-chatbot\", etc.)\n  \"dependencies\": {\n    \"@ai-sdk/openai\": \"...\", // Or your chosen LLM SDK\n    \"@voltagent/core\": \"...\",\n    \"@voltagent/vercel-ai\": \"...\", // Or your chosen provider\n    \"zod\": \"...\"\n  },\n// ... (devDependencies)\n```\n\n----------------------------------------\n\nTITLE: Using the Component\nDESCRIPTION: This imports and renders the `Calculator` component within the main page of the Next.js application.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/integrations/nextjs.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Calculator } from \"./components/calculator\";\n\nexport default function HomePage() {\n  return (\n    <main>\n      <h1>VoltAgent Next.js Example</h1>\n      <Calculator />\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for All VoltAgent Packages with pnpm\nDESCRIPTION: This command runs tests for all packages within the VoltAgent monorepo.  It is a comprehensive test execution. Requires pnpm to be installed.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npnpm test:all\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset for VoltAgent Packages with pnpm\nDESCRIPTION: This command initiates the creation of a changeset, crucial for managing versioning and changelogs in the VoltAgent monorepo. Requires the `@changesets/cli` package to be installed and configured. It uses `pnpm changeset` command.\nSOURCE: https://github.com/voltagent/voltagent/blob/main/website/docs/community/contributing.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\npnpm changeset\n```"
  }
]