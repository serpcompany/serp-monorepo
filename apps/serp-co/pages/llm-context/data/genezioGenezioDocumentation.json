[
  {
    "owner": "genez-io",
    "repo": "genezio-documentation",
    "content": "TITLE: Registering a New User with Email, Password, and Name - TypeScript (React)\nDESCRIPTION: This async function handles the signup form submission in a React component using TypeScript. It calls AuthService's 'register' method with email, password, and name fields, catches any errors, and upon success, redirects to the login page. Prerequisites: State variables (email, password, name, setLoading) and React Router's 'navigate'. Outputs a console log on success or an error alert on failure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleSubmit = async (event: React.FormEvent) => {\n  event.preventDefault();\n  setLoading(true);\n  try {\n    const response = await AuthService.getInstance().register(\n      email,\n      password,\n      name\n    );\n    console.log(\"Register Success\", response);\n\n    navigate(\"/login\");\n  } catch (error: any) {\n    console.log(error);\n    alert(\"An error has occurred\");\n  }\n  setLoading(false);\n};\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example for Genezio Application\nDESCRIPTION: Shows the directory structure of a typical Genezio project including backend, frontend, and configuration files\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── backend/\n│   ├── task.ts\n│   ├── helper.ts\n│   ├── package.json\n│   └── models/\n├── frontend/\n│   ├── src/\n│   ├── public/\n│   ├── package.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n├── .gitignore\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Genezio Backend Server\nDESCRIPTION: Executes the `genezio local` command to start a local development server for the backend. This command also triggers the generation and installation of the SDK into linked client repositories or those specified in `genezio.yaml`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/generated-sdk.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Terminal\"\ngenezio local\n```\n```\n\n----------------------------------------\n\nTITLE: Protecting Backend Methods with GenezioAuth Decorator (TypeScript)\nDESCRIPTION: Example of how to use the @GenezioAuth decorator to protect a backend method so only authenticated users can access it. Demonstrates accessing user context information.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenezioDeploy, GenezioAuth, GnzContext } from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class BackendService {\n  readonly message =\n    \"This message contains sensitive information. Only authenticated users can read it.\";\n\n  @GenezioAuth()\n  async getSensitiveInformation(context: GnzContext) {\n    console.log(\"User: \", context.user, \"accessed the sensitive message\");\n    return this.message;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Backend Class in TypeScript\nDESCRIPTION: Defines a simple TypeScript class `HelloWorldClass` within the `server/helloWorld.ts` file. It includes a public method `hello` that takes a name as a string argument and returns a greeting string. This class represents a potential backend microservice.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class HelloWorldClass {\n  hello(name: string): string {\n    console.log(\"DEBUG: Call hello method\");\n    return \"Hello \" + name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Neon Postgres in TypeScript\nDESCRIPTION: This TypeScript code snippet demonstrates how to connect to a Neon Postgres database using the `pg` library. It initializes a connection pool using the `NEON_DATABASE_URL` environment variable obtained from the Genezio integration setup. It then executes a sample query to select all rows from `your_table_name`, logs the results, and closes the connection pool. Requires the `pg` npm package.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/neon-postgres.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"index.ts\"\nimport { Pool } from \"pg\";\n\nconst pool = new Pool({\n  connectionString: process.env.NEON_DATABASE_URL,\n});\n\npool.query(\"SELECT * FROM your_table_name\", (error, results) => {\n  console.log(\"Query Result:\", results.rows);\n  pool.end();\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Authentication with Multiple Providers\nDESCRIPTION: This configuration adds authentication to a genezio project, referencing an existing database and enabling multiple authentication providers including email, web3, and Google OAuth. It uses environment variables for sensitive Google credentials.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nservices:\n  databases:\n    - name: my-database\n      region: us-east-1\n  authentication:\n    database:\n      name: my-database\n    providers:\n      email: true\n      web3: true\n      google:\n        clientId: ${{env.GOOGLE_CLIENT_ID}}\n        clientSecret: ${{env.GOOGLE_SECRET}}\n```\n\n----------------------------------------\n\nTITLE: Exporting Backend Class Methods using Genezio Decorator\nDESCRIPTION: Modifies the `HelloWorldClass` by importing the `GenezioDeploy` decorator from `@genezio/types` and applying it to the class. This decorator marks the class for deployment, making its public methods (like `hello`) accessible as APIs via the generated SDK. Classes without this decorator remain private backend components.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-next-line\nimport { GenezioDeploy } from \"@genezio/types\";\n\n// highlight-next-line\n@GenezioDeploy()\nexport class HelloWorldClass {\n  hello(name: string): string {\n    console.log(\"DEBUG: Call hello method\");\n    return \"Hello \" + name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Databases as Services in Genezio YAML - YAML\nDESCRIPTION: This example demonstrates configuring multiple databases—PostgreSQL via Neon and MongoDB via Atlas—under the 'services.databases' array. Each entry specifies the database name, deployment region, and type. Environment variables are automatically populated for each database service for runtime integration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  databases:\n    - name: my-postgres\n      region: us-east-1\n      type: postgres-neon\n    - name: my-mongodb\n      region: eu-central-1\n      type: mongodb-atlas\n```\n\n----------------------------------------\n\nTITLE: Defining Single Repository Project Structure (Fallback)\nDESCRIPTION: Illustrates a recommended directory layout for a fullstack Genezio project contained within a single repository, separating server and client code. Highlights key files like `genezio.yaml`, `.genezioignore`, and `package.json` in their typical locations.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: fallback\nCODE:\n```\n```fallback title=\"Single repository\"\n.\n├── genezio.yaml\n├── .genezioignore\n├── server/\n│   ├── .env\n│   ├── models/\n│   ├── node_modules/\n│   ├── package.json\n│   └── index.ts\n└── client/\n    ├── node_modules/\n    ├── src/\n    ├── build/\n    └── package.json\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Genezio HTTP Method with Decorators (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to define a method within a Genezio class (`HttpServer`) that handles HTTP requests. It uses the `@GenezioMethod({ type: \"http\" })` decorator to mark `handleSimplePlainRequest` as an HTTP endpoint. The method accepts a `GenezioHttpRequest` object and must return a `GenezioHttpResponse` object. This example logs the request body and returns it in the response with a 200 status code and HTML content type. Requires the `@genezio/types` package.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/http-methods-webhooks.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts title=\"http.ts\" showLineNumbers\nimport { GenezioDeploy, GenezioMethod } from \"@genezio/types\";\nimport { GenezioHttpResponse, GenezioHttpRequest } from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class HttpServer {\n    @GenezioMethod({ type: \"http\" })\n    handleSimplePlainRequest(request: GenezioHttpRequest): GenezioHttpResponse {\n        console.log(`Request received with a simple text ${request.body}!`);\n\n        // insert your code here\n\n        const response: GenezioHttpResponse = {\n            body: request.body,\n            headers: { \"content-type\": \"text/html\" },\n            statusCode: \"200\",\n        };\n\n        return response;\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Genezio-Deployed Service Class in TypeScript\nDESCRIPTION: Demonstrates how to declare a backend service class using Genezio's @GenezioDeploy decorator in TypeScript, making it eligible for typesafe SDK generation and RPC. Dependencies include the '@genezio/types' library for the decorator. The exposed 'hello' method accepts two serializable string parameters and returns a string greeting. This pattern establishes the baseline for Genezio-managed service registration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GenezioDeploy } from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class HelloWorldService {\n  hello(name: string, sender: string): string {\n    console.log(`Hello world request received with name ${name} from ${sender}!`);\n\n    return `Hello, ${name}, from ${sender}!`;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio for Single Repository (YAML)\nDESCRIPTION: Provides an example `genezio.yaml` configuration for a fullstack single repository project. Specifies the project name, region, backend path/language (TypeScript), and frontend path/SDK language (TypeScript)/publish directory. This file is essential for Genezio commands.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"genezio.yaml\"\nname: getting-started\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  path: server\n  language:\n    name: ts\nfrontend:\n  path: client\n  sdk:\n    language: ts\n  publish: dist\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Service Class for MongoDB Interaction using TypeScript and Mongoose\nDESCRIPTION: This TypeScript code defines a `TutorialClass` designed for Genezio deployment. It uses the Mongoose library to connect to a MongoDB database specified by the `MONGO_DB_URI` environment variable within its constructor. The class includes an `addUser` method that demonstrates inserting a document into the 'users' collection.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-mongo-atlas.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenezioDeploy } from \"@genezio/types\";\nimport mongoose from \"mongoose\";\n\n@GenezioDeploy()\nexport class TutorialClass {\n  constructor() {\n    this.#connect();\n  }\n\n  /**\n   * Private method used to connect to the DB.\n   */\n  #connect() {\n    mongoose.connect(process.env.MONGO_DB_URI || \"\").catch((error) => {\n      console.log(\"Error connecting to the DB\", error);\n    });\n  }\n\n  async addUser(name: string) {\n    const dbConnection = mongoose.connection;\n    // Access the collection directly\n    const collection = dbConnection.collection(\"users\");\n\n    // Create the collection if it doesn't exist\n    await collection.createIndex({ name: 1 });\n\n    // Insert an object into the collection\n    const response = await collection.insertOne({ name: name });\n    return response;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Service with Multiple Providers in Genezio YAML - YAML\nDESCRIPTION: This snippet configures the authentication service within Genezio YAML using a named database and multiple authentication providers (email, Web3, Google). Google credentials are dynamically assigned via environment variables, and password reset behavior is customized with a dynamic redirect URL. Providers and settings sections are optional and can be extended or omitted as needed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  authentication:\n    database:\n      name: my-database\n    providers:\n      email: true\n      web3: true\n      google:\n        clientId: ${{env.GOOGLE_CLIENT_ID}}\n        clientSecret: ${{env.GOOGLE_SECRET}}\n    settings:\n      resetPassword:\n        redirectUrl: https://${{frontend.<frontend-name>.subdomain}}.app.genez.io/reset-password\n```\n\n----------------------------------------\n\nTITLE: User Login with Email and Password - TypeScript (React)\nDESCRIPTION: This async function is attached to the login form. When triggered, it logs in a user via AuthService with the entered email and password, shows loading state, handles errors with an alert, and redirects to the secret screen upon success. Requires React state and 'navigate' utility. Outputs a console message on error.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst handleLoginSubmit = async (event: React.FormEvent) => {\n  event.preventDefault();\n  setLoginLoading(true);\n\n  try {\n    await AuthService.getInstance().login(email, password);\n    navigate(\"/\");\n  } catch (error: any) {\n    console.log(\"Login Failed\", error);\n    alert(\"Login Failed\");\n  }\n  setLoginLoading(false);\n};\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure for Shopping Cart Application\nDESCRIPTION: Shows the complete directory structure of the shopping cart project, including both client and server components, configuration files, and typescript definitions.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/shopping-cart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── README.md\n├── genezio.yaml\n├── client\n│   ├── README.md\n│   ├── package-lock.json\n│   ├── package.json\n│   ├── src\n│   │   ├── App.css\n│   │   ├── App.tsx\n│   │   ├── index.css\n│   │   ├── index.tsx\n│   │   ├── models.tsx\n│   │   ├── react-app-env.d.ts\n│   │   └── reportWebVitals.ts\n│   └── tsconfig.json\n└── server\n    ├── package-lock.json\n    ├── package.json\n    ├── shoppingCartService.ts\n    └── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Creating a Genezio Fullstack Project via CLI\nDESCRIPTION: Uses the Genezio CLI to scaffold a new full-stack project named 'genezio-project'. It specifies a React frontend (`onboarding-react`), a TypeScript backend (`onboarding-ts`), and targets the 'us-east-1' deployment region. Alternatively, running `genezio create` without arguments initiates an interactive setup wizard.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio create fullstack --frontend=onboarding-react --backend=onboarding-ts --name=genezio-project --region=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Declaring a Serializable Object Type Alias in TypeScript\nDESCRIPTION: Lays out a TypeScript type alias for a serializable object, following Genezio's preference over interfaces/classes for type compatibility. The example defines a 'Person' type consisting of serializable fields. No external dependencies required. This establishes a pattern for strongly-typed message exchanges between services and clients.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Person = {\n  name: string;\n  age: number;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Google OAuth Login with React and Genezio Auth (TypeScript)\nDESCRIPTION: This React component (`Login`) provides a Google Login button using the `GoogleLogin` component from `@react-oauth/google`. Upon successful authentication with Google (`onSuccess`), it receives a credential response, which is then passed to `AuthService.getInstance().googleRegistration()` for backend registration/login via Genezio. It navigates the user to the main page (`/`) on success using `react-router-dom` and displays alerts for `GenezioError` errors.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport { CredentialResponse, GoogleLogin } from \"@react-oauth/google\";\nimport { AuthService } from \"@genezio/auth\";\nimport { GenezioError } from \"@genezio/types\";\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function Login() {\n  const navigate = useNavigate();\n\n  const handleGoogleLogin = async (credentialResponse: CredentialResponse) => {\n    try {\n      await AuthService.getInstance().googleRegistration(\n        credentialResponse.credential!\n      );\n      console.log(\"Login Success\");\n      navigate(\"/\");\n    } catch (error: any) {\n      alert(\n        \"Error code: \" +\n          (error as GenezioError).code +\n          \": \" +\n          (error as GenezioError).message\n      );\n    }\n  };\n\n  return (\n    <div>\n      <GoogleLogin\n        onSuccess={(credentialResponse) => {\n          handleGoogleLogin(credentialResponse);\n        }}\n      />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Jobs in Genezio YAML\nDESCRIPTION: This YAML configuration defines a Genezio project with a cron job. It specifies the project name, region, backend details, and a cron job that runs every minute, calling a specific function endpoint.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/cron-jobs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: cron-getting-started\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  path: ./\n  language:\n    name: js\n    packageManager: npm\n  functions:\n    - name: my-function\n      path: ./\n      handler: handler\n      entry: app.mjs\nservices:\n  crons:\n    - name: my-cron\n      function: ${{backend.functions.my-function.name}}\n      schedule: \"* * * * *\"\n      endpoint: \"/my-cron\"\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Genezio SDK in Go\nDESCRIPTION: Shows how to import the locally generated Genezio SDK in a Go client application. Replace `<go-module-name>` with your Go module name defined in `go.mod`. It demonstrates instantiating the service (`NewHelloWorldService`) and calling a method (`Hello`) on it.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/generated-sdk.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nimport genezioSdk \"<go-module-name>/sdk\"\n\nfunc main() {\n  service := genezioSdk.NewHelloWorldService()\n  service.Hello(\"John\")\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Express Application Genezio Configuration (YAML) - YAML\nDESCRIPTION: This YAML snippet represents the Genezio deployment configuration for an Express.js app. It specifies project name, deployment region, backend language (JavaScript), entrypoint, and deployment scripts. The file should be named 'genezio.yaml' and placed in the root of the project. Required for successful Genezio deployment. Key parameters include function name, path, entry point, type (httpServer), and region.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: express-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: js\n    # The package manager used by the backend.\n    packageManager: npm\n  scripts:\n    deploy:\n      - npm install\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: express\n      # The path to the function's code.\n      path: ./\n      # The entry point for the function.\n      entry: app.mjs\n      # The compatibility of the function handler.\n      type: httpServer\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Auth and Google OAuth Provider in React (TypeScript)\nDESCRIPTION: This snippet shows how to configure the Genezio `AuthService` with the necessary token and region in the main application entry point (`main.tsx`). It also sets up the `GoogleOAuthProvider` component from `@react-oauth/google`, wrapping the application to enable Google OAuth login functionality, requiring placeholder values for the Genezio token, region, and Google Client ID to be replaced.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GoogleOAuthProvider } from \"@react-oauth/google\";\nimport { AuthService } from \"@genezio/auth\";\n\nAuthService.getInstance().setTokenAndRegion(\n  \"<YOUR_GENEZIO_TOKEN>\",\n  \"<YOUR_PROJECT_REGION>\"\n);\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    {/* TODO: Replace this with your own Google ID */}\n    <GoogleOAuthProvider clientId=\"<YOUR_GOOGLE_ID>\">\n      <RouterProvider router={router} />\n    </GoogleOAuthProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Deployment with genezio.yaml - YAML\nDESCRIPTION: This YAML snippet represents a minimal genezio.yaml configuration file for deploying a backend application with Genezio. It specifies project name, deployment region, YAML version, and backend deployment settings such as project path, language (JavaScript), and a list of functions to expose. Key fields include function name, code path, entry file, and handler. The configuration is required in the project root for automated deployment. The structure must be valid YAML and depends on using the Genezio CLI.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/backend.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  path: .\n  language:\n    name: js\n  functions:\n    - name: hello\n      path: ./server\n      entry: hello.mjs\n      handler: handler\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for a React Project\nDESCRIPTION: Defines the configuration for deploying a React project with Genezio in a `genezio.yaml` file placed at the project root. It specifies the project name (`react-getting-started`), deployment region (`us-east-1`), frontend path (`.`), publish directory (`dist` relative to `path`), and build/deploy/start scripts using npm. This file is essential for the `genezio deploy` command to understand how to build and deploy the frontend.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Learn more about Genezio YAML at https://genezio.com/docs/project-structure/genezio-configuration-file/\n# The name of the project.\nname: react-getting-started\n# The region where the project is deployed.\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\n# Information about the frontend, including the path, language, and publish directory.\n# It is optional. It can also be an array if there are multiple frontends you want to deploy.\nfrontend:\n  # The folder where the frontend scripts will run.\n  path: .\n  # The directory that will be published to the CDN. It is relative to the `path` directory.\n  publish: dist\n  # Scripts are running in the specified `path` directory.\n  scripts:\n    # List of scripts to run before deploying the frontend.\n    deploy: npm install\n    # List of scripts that build your frontend before deployment. It should populate the specified `publish` directory.\n    build: npm run build\n    # List of scripts to run when starting the local development server.\n    start:\n      - npm install --silent\n      - npm run dev --silent\n```\n\n----------------------------------------\n\nTITLE: Implementing a Password Reset Confirmation Form with React and Genezio Auth (TypeScript)\nDESCRIPTION: This React component (`ResetPasswordForm`) handles the final step of the password reset process. It extracts the reset token from the URL query parameters, prompts the user for a new password (and confirmation), validates the input, and uses `AuthService.getInstance().resetPasswordConfirmation()` to update the password via the Genezio backend. On success, it confirms the change and redirects to the sign-in page.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { AuthService } from \"@genezio/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { GenezioError } from \"@genezio/types\";\n\nexport default function ResetPasswordForm() {\n  const [password1, setPassword1] = useState(\"\");\n  const [password2, setPassword2] = useState(\"\");\n  const navigate = useNavigate();\n\n  const queryString = window.location.search;\n  const queryParams = new URLSearchParams(queryString);\n  const token: string = queryParams.get(\"token\") || \"not specified\";\n\n  const reset = async () => {\n    if (password1 != password2) {\n      alert(\"Passwords don't match.\");\n      return;\n    }\n    try {\n      await AuthService.getInstance().resetPasswordConfirmation(\n        token,\n        password1\n      );\n      alert(\"Your password was changed. Let's sign in again.\");\n      navigate(\"/signIn\");\n    } catch (error) {\n      alert(\n        (error as GenezioError).code + \": \" + (error as GenezioError).message\n      );\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"password\"\n        placeholder=\"password\"\n        value={password1}\n        onChange={(e) => setPassword1(e.target.value)}\n      />\n      <br />\n      <input\n        type=\"password\"\n        placeholder=\"re-enter password\"\n        value={password2}\n        onChange={(e) => setPassword2(e.target.value)}\n      />\n      <br />\n      <button onClick={reset}>Reset Password</button>\n      <br />\n      <br />\n      <Link to=\"/forgotPassword\">Forgot Password</Link>\n      &nbsp;|&nbsp;\n      <Link to=\"/signUp\">Sign Up</Link>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database in Genezio Configuration\nDESCRIPTION: YAML configuration for creating a PostgreSQL database through Neon in a Genezio project. The snippet defines a database named 'my-database' in the us-east-1 region with the postgres-neon type.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/databases.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  databases:\n    - name: my-database\n      region: us-east-1\n      type: postgres-neon\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis Service with Upstash - TypeScript\nDESCRIPTION: Defines a ShoppingCartService class as a genezio deployable service, initializing an ioredis client using the Upstash connection URL from environment variables. This snippet ensures the necessary environment variable is present and throws an explicit error if not, enforcing correct deployment configuration. Dependencies include ioredis, genezio, and a valid UPSTASH_REDIS_URL set via the integration; the output is an instantiated service class with a ready-to-use client for Redis operations.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-redis-upstash.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenezioDeploy } from \"@genezio/types\";\nimport Redis from \"ioredis\";\n\n@GenezioDeploy()\nexport class ShoppingCartService {\n  client: Redis;\n  constructor() {\n    if (!process.env.UPSTASH_REDIS_URL) {\n      throw new Error(\"UPSTASH_REDIS_URL is not set in the `.env` file.\");\n    }\n    this.client = new Redis(process.env.UPSTASH_REDIS_URL);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Genezio YAML Configuration File Example - YAML\nDESCRIPTION: Sample genezio.yaml configuration for deploying an Ember frontend using Genezio. Includes project name, region, version, and build scripts for deploying, building, and starting the app. Should be placed at the project root and tailored if publish directory differs. No external dependencies but expects your project matches standard Ember output paths.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Learn more about Genezio YAML at https://genezio.com/docs/project-structure/genezio-configuration-file/\nname: genezio-project\nregion: us-east-1\nyamlVersion: 2\nfrontend:\n    path: .\n    publish: dist\n    scripts:\n        deploy:\n            - npm install\n        build:\n            - npm run build\n        start:\n            - npm install\n            - npm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for Python (YAML)\nDESCRIPTION: Example `genezio.yaml` configuration for deploying a Python function. It specifies project details like name, region, language (`python` with `pip`), and function properties including its name (`hello-world-function`), path, handler function (`handler`), and entry file (`main.py`). Genezio uses this file to manage the deployment and automatically installs dependencies from `requirements.txt`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: functions-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: python\n    # The package manager used by the backend.\n    packageManager: pip\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: hello-world-function\n      # The path to the function's code.\n      path: ./\n      # The name of the function handler\n      handler: handler\n      # The entry point for the function.\n      entry: main.py\n```\n\n----------------------------------------\n\nTITLE: Creating Express.js App (ESM) - JavaScript\nDESCRIPTION: This JavaScript (ESM) snippet defines a minimal Express.js application using ES module syntax. It imports the 'express' module, sets up a root route returning a greeting, a '/users' route returning JSON data, and starts the server on port 8080. Requires Node.js, installed express dependency, executed as 'app.mjs' via 'node app.mjs'. Inputs are HTTP requests; outputs are HTTP responses. Keep entry point and module syntax consistent with 'type: module' in package.json or .mjs extension.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World from Express!\");\n});\n\napp.get(\"/users\", (req, res) => {\n  res.json([\n    { id: 1, name: \"Alice\" },\n    { id: 2, name: \"Bob\" },\n  ]);\n});\n\napp.listen(8080, () => {\n  console.log(\"Server is running on http://0.0.0.0:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for JavaScript (YAML)\nDESCRIPTION: Example `genezio.yaml` configuration for deploying a JavaScript (Node.js) function. It specifies essential project details like name, region, language (`js` with `npm`), and function properties including its name (`hello-world-function`), path, handler function (`handler`), and entry file (`app.mjs`). This file guides the Genezio deployment process.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: functions-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: js\n    # The package manager used by the backend.\n    packageManager: npm\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: hello-world-function\n      # The path to the function's code.\n      path: ./\n      # The name of the function handler\n      handler: handler\n      # The entry point for the function.\n      entry: app.mjs\n```\n\n----------------------------------------\n\nTITLE: Calling Protected Backend Methods in React Component\nDESCRIPTION: A React component that demonstrates how to call a protected backend method using the Genezio authentication system. If the user is not authenticated, the component handles the error by redirecting to the login page.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { BackendService } from \"@genezio-sdk/genezio-auth-tutorial\";\n\nexport default function FetchSensitiveMessage() {\n  const [message, setMessage] = useState(\"\");\n  const navigate = useNavigate();\n\n  // If the user is not authenticated, the backend method will throw an error\n  const fetchSensitiveInformation = async () => {\n    try {\n      const message = await BackendService.getSensitiveInformation();\n      setMessage(message);\n    } catch (error) {\n      console.error(error);\n      navigate(\"/login\");\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={fetchSensitiveInformation}>\">Get message\"</button>\n      {message && <p>{message}</p>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Example Genezio Configuration for Nest.js\nDESCRIPTION: This YAML code block shows an example `genezio.yaml` file structure for a Nest.js project. It defines essential deployment parameters like project name, deployment region, YAML version, Nest.js project path, package manager, and custom deployment scripts (e.g., `npm install`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of your project, which also influences the subdomain of the project.\nname: genezio-project\n# Select a region closest to your user base for optimal performance.\nregion: us-east-1\n# Specifies the version of the YAML configuration syntax being used.\nyamlVersion: 2\n# Configuration specific to the Nest.js project setup.\nnestjs:\n    # The path where the Nest.js project is located.\n    path: .\n    # The package manager to be used for this project (npm, yarn, etc.)\n    packageManager: npm\n    # Custom scripts to be run during deployment, e.g., installing dependencies.\n    scripts:\n        deploy:\n            - npm install\n```\n\n----------------------------------------\n\nTITLE: Fetching Authenticated User Info on Secret Screen - TypeScript (React)\nDESCRIPTION: This useEffect hook is used in the secret route/component to fetch the authenticated user's name and email using AuthService. It updates local state when successful and logs errors otherwise. Required: name, email state and setName/setEmail functions. Outputs nothing directly to the DOM, but logs errors in case of failure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  if (name && email) {\n    return;\n  }\n\n  AuthService.getInstance()\n    .userInfo()\n    .then((user) => {\n      setName(user.name!);\n      setEmail(user.email!);\n    })\n    .catch((error) => {\n      console.error(error);\n    });\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Calling Backend Method from React Frontend\nDESCRIPTION: Modifies the `sayHello` asynchronous function in the React component (`client/src/App.tsx`). It uses the imported `HelloWorldClass` from the SDK to call the `hello` method on the backend, passing the `name` state variable. The function awaits the response and updates the component's state (`setResponse`) with the result.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nasync function sayHello() {\n  const res = await HelloWorldClass.hello(name);\n  setResponse(res);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Retrieving Cart Items in Redis - TypeScript\nDESCRIPTION: Implements two asynchronous methods for managing shopping cart contents in Redis: addItemToCart stores a product quantity under a composite key; getCartContents retrieves product keys associated with a specific cart. Both methods use the Redis client initialized in the ShoppingCartService. Parameters include cartId (string), productId (string), and quantity (number), with expected behavior to set or fetch cart data; proper error handling and full implementation are expected in production.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-redis-upstash.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naddItemToCart(cartId: string, productId: string, quantity: number): Promise<boolean> {\n    const cartKey = `cart:${cartId}`;\n    await this.client.set(`${cartKey}:${productId}`, quantity);\n\n    // the rest of the implementation goes here\n  }\n\n  getCartContents(cartId: string): Promise<Map<string, number> | null> {\n    const cartKey = `cart:${cartId}`;\n    const cartItems = await this.client.keys(`${cartKey}:*`);\n\n    // the rest of the implementation goes here\n  }\n```\n\n----------------------------------------\n\nTITLE: Using GenezioMethod Decorator for Cron and RPC - TypeScript\nDESCRIPTION: Demonstrates configuring individual method deployment using @GenezioMethod and @GenezioDeploy decorators in TypeScript. The class HelloWorld is decorated for deployment; within it, sayHiEveryMinute uses a cron deployment type (with cronString), and sayHello falls back to the class-level configuration. Requires @genezio/types. Inputs include the cron expression for scheduling; output is method registration for cron and RPC. The method-level decorator overrides class-level type.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-decorators.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GenezioDeploy, GenezioMethod } from \"@genezio/types\";\n\n// If not specified, the type of every method in this class will be `jsonrpc`\n@GenezioDeploy()\nexport class HelloWorld {\n  // This method will be deployed as a `cron` method\n  @GenezioMethod({ type: \"cron\", cronString: \"* * * * *\" })\n  sayHiEveryMinute() {\n    console.log(\"Hi!\");\n  }\n\n  // This method will be deployed as a `jsonrpc` method, because it inherits\n  // the type from the GenezioDeploy decorator\n  sayHello() {\n    console.log(\"Hello!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enums for Serializable RPC Parameters in TypeScript\nDESCRIPTION: Demonstrates how TypeScript enums can be used as serializable types within Genezio-exposed service methods. Defines an enum 'Season' and a service method that pattern-matches the enum value to return a season-specific temperature. Relies on '@genezio/types' for decorator. Enum values must be consecutive and start from zero to meet serialization requirements.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport enum Season {\n  WINTER,\n  SPRING,\n  SUMMER,\n  AUTUMN,\n}\n\n@GenezioDeploy()\nexport class UserService {\n  getSeasonTemperature(season: Season): number {\n    switch (season) {\n      case Season.WINTER:\n        return 0;\n      case Season.SPRING:\n        return 15;\n      case Season.SUMMER:\n        return 30;\n      case Season.AUTUMN:\n        return 10;\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Server in Genezio YAML\nDESCRIPTION: Example configuration in genezio.yaml for setting up a persistent server. Defines project settings, backend configuration, and function specifications with type set to persistent.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/persistent.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  path: .\n  language:\n    name: js\n  functions:\n    - name: persistent-server\n      path: .\n      entry: server.mjs\n      handler: handler\n      type: persistent\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in genezio.yaml\nDESCRIPTION: This YAML snippet demonstrates how to define backend environment variables directly within the `genezio.yaml` configuration file. It shows setting a literal value (`NODE_ENV`) and referencing values from other Genezio services like databases (`MY_DATABASE_URI`) or function URLs (`FUNCTION_URL`) using the `${{ }}` syntax.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/backend-environment-variables.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  # ...\n  environment:\n    NODE_ENV: production\n    MY_DATABASE_URI: ${{services.databases.<database-name>.uri}}\n    FUNCTION_URL: ${{backend.functions.<function-name>.url}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Genezio Postgres Service Class (TypeScript)\nDESCRIPTION: Defines a TypeScript class `PostgresService` decorated with `@GenezioDeploy` for Genezio deployment. It initializes a Postgres connection pool using the `DEMO_DATABASE_URL` environment variable and provides an `insertUser` method to create a 'users' table if needed, insert a new user record with a given name, and return all users as a JSON string. Requires 'pg' and '@genezio/types' packages.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-postgres.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenezioDeploy } from \"@genezio/types\";\nimport pg from \"pg\";\nconst { Pool } = pg;\n\n@GenezioDeploy()\nexport class PostgresService {\n  pool = new Pool({\n    connectionString: process.env.DEMO_DATABASE_URL,\n    ssl: true,\n  });\n\n  async insertUser(name: string): Promise<string> {\n    await this.pool.query(\n      \"CREATE TABLE IF NOT EXISTS users (id serial PRIMARY KEY,name VARCHAR(255))\"\n    );\n\n    await this.pool.query(\"INSERT INTO users (name) VALUES ($1)\", [name]);\n    const result = await this.pool.query(\"SELECT * FROM users\");\n\n    return JSON.stringify(result.rows);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Deployable HTTP Class - GenezioDeploy Decorator - TypeScript\nDESCRIPTION: Defines a TypeScript class decorated with @GenezioDeploy to be deployed as HTTP methods. The class imports types from @genezio/types, and the decorator is used with type set to 'http', causing all unannotated methods to be exposed via HTTP. Requires @genezio/types as a dependency. The handleHttpRequest method processes incoming requests, returning a GenezioHttpResponse object. The class will be deployed automatically without specifying in genezio.yaml.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-decorators.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GenezioHttpResponse, GenezioHttpRequest, GenezioDeploy } from \"@genezio/types\";\n\n// Every method in this class will be deployed as a http method, if not specified otherwise\n@GenezioDeploy({ type: \"http\" })\nexport class HttpHandle {\n  handleHttpRequest(request: GenezioHttpRequest): GenezioHttpResponse {\n    const response: GenezioHttpResponse = {\n      body: request.body,\n      headers: { \"content-type\": \"text/html\" },\n      statusCode: \"200\",\n    };\n\n    return response\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fastify App with ES Modules (JavaScript)\nDESCRIPTION: Defines a simple Fastify web server using ES Module syntax (`import`/`export`). It creates two routes ('/' and '/users') and starts the server listening on host 0.0.0.0 and port 8080. This code should be saved in a file named `app.mjs`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fastify from 'fastify';\n\nconst app = Fastify();\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World from Fastify!\");\n});\n\napp.get(\"/users\", (req, res) => {\n  res.json([\n    { id: 1, name: \"Alice\" },\n    { id: 2, name: \"Bob\" },\n  ]);\n});\n\napp.listen({\n  host: \"0.0.0.0\",\n  port: 8080,\n}, (err, address) => {\n  if (err) {\n    console.error(err);\n  }\n  console.log(`Server is running on ${address}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Database in Genezio Configuration\nDESCRIPTION: YAML configuration for creating a MongoDB database through MongoDB Atlas in a Genezio project. The snippet defines a database named 'my-database' in the us-east-1 region with the mongodb-atlas type.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/databases.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  databases:\n    - name: my-database\n      region: us-east-1\n      type: mongodb-atlas\n```\n\n----------------------------------------\n\nTITLE: Declaring Cron Jobs Using Decorators in Genezio (TypeScript)\nDESCRIPTION: This snippet illustrates how to declare a scheduled cron job in a TypeScript backend using Genezio decorators. It uses @GenezioDeploy to mark the class for deployment and @GenezioMethod to specify the method as a cron job, with the cronString parameter defining the execution frequency. Dependencies include the @genezio/types package, and the cron string uses UTC time; the method will log a message every minute as configured.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/cron-methods.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { GenezioDeploy, GenezioMethod } from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class BackendService {\n    @GenezioMethod({ type: \"cron\", cronString: \"* * * * *\" })\n    sayHiEveryMinute() {\n        console.log(\"I will run every minute!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Genezio Service and Viewing HTTP Endpoints\nDESCRIPTION: This shell snippet shows the command `genezio deploy` used to deploy a Genezio backend project. The output demonstrates what to expect after a successful deployment, including the URL assigned to the deployed HTTP method (`HttpServer.handleSimplePlainRequest`). This URL is needed to interact with the deployed webhook/HTTP endpoint.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/http-methods-webhooks.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Terminal\"\n$ genezio deploy\n\nDeploying your backend project to the genezio infrastructure...\n\nYour backend code was deployed and the SDK was successfully generated\n\nHTTP Methods Deployed:\n  - HttpServer.handleSimplePlainRequest: https://<lambdaUrl>/HttpServer/handleSimplePlainRequest\n\nApp Dashboard URL: https://app.genez.io/project/<projectId>/<projectEnvId>\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Locally Generated SDK in TypeScript/JavaScript\nDESCRIPTION: Illustrates importing a service (`HelloWorldService`) from the Genezio SDK in TypeScript/JavaScript after running `genezio local`. The SDK is installed in `node_modules/@genezio-sdk` and can be imported like any other npm package.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/generated-sdk.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { HelloWorldService } from \"@genezio-sdk/<project-name>\"\n```\n```\n\n----------------------------------------\n\nTITLE: Using genezio addClass Command in Bash\nDESCRIPTION: This command creates a new file at the specified classPath and adds it to the genezio.yaml config file. It allows specifying the class type and log level.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-addclass.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio addClass <classPath> <classType> [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Function Handler (Python)\nDESCRIPTION: Defines a Python function named `handler` in `main.py` designed for Genezio deployment. It accepts an `event` dictionary, prints a log message, retrieves an optional 'name' query parameter (defaulting to 'George'), and returns a dictionary structured as an HTTP response. This serves as the entry point for the Python serverless function.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef handler(event):\n    print(\"Function was called\")\n    name = event.get(\"queryStringParameters\", {}).get(\"name\", \"George\")\n    return {\n        \"statusCode\": 200,\n        \"body\": f\"Hello, {name}! Welcome to Genezio Functions!\",\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing Generated SDK in React Frontend\nDESCRIPTION: Imports the `HelloWorldClass` from the automatically generated Genezio SDK package (`@genezio-sdk/genezio-project`) within the React frontend component (`client/src/App.tsx`). This allows the frontend code to call backend methods.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HelloWorldClass } from \"@genezio-sdk/genezio-project\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for Vue Frontend (YAML)\nDESCRIPTION: Example `genezio.yaml` configuration file placed in the project root. It defines project settings like name (`vue-getting-started`), deployment region (`us-east-1`), frontend path (`.`), build output directory (`dist`), and scripts for dependency installation (`npm install`), building (`npm run build`), and local development start (`npm install --silent`, `npm run dev --silent`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/vue.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Learn more about Genezio YAML at https://genezio.com/docs/project-structure/genezio-configuration-file/\n# The name of the project.\nname: vue-getting-started\n# The region where the project is deployed.\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\n# Information about the frontend, including the path, language, and publish directory.\n# It is optional. It can also be an array if there are multiple frontends you want to deploy.\nfrontend:\n  # The folder where the frontend scripts will run.\n  path: .\n  # The directory that will be published to the CDN. It is relative to the `path` directory.\n  publish: dist\n  # Scripts are running in the specified `path` directory.\n  scripts:\n    # List of scripts to run before deploying the frontend.\n    deploy: npm install\n    # List of scripts that build your frontend before deployment. It should populate the specified `publish` directory.\n    build: npm run build\n    # List of scripts to run when starting the local development server.\n    start:\n      - npm install --silent\n      - npm run dev --silent\n```\n\n----------------------------------------\n\nTITLE: Deploying Full Project using Genezio CLI (Bash)\nDESCRIPTION: Deploys the entire Genezio project, including both the frontend and backend components, to the Genezio cloud infrastructure using the Genezio CLI. After successful execution, the command provides URLs to access the deployed frontend application. This makes the application publicly available.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/project-template.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ genezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally with NPM - Shell\nDESCRIPTION: This snippet installs the Genezio CLI tool globally on your system using Node.js NPM. It is a prerequisite for deploying and managing Genezio projects from the command line. You must have Node.js and NPM already installed. An executable genezio command is made available for initiating project commands (such as create or deploy).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/backend.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g genezio\n```\n\n----------------------------------------\n\nTITLE: Using genezio: cron and genezio: deploy for Methods - Go\nDESCRIPTION: Provides a Go example where struct methods are annotated for cron and jsonrpc deployment with genezio special comments. The HelloWorld struct is set for deployment (default jsonrpc), SayHiEveryMinute is scheduled as a cron job, and SayHello inherits the class-level type. No changes to genezio.yaml needed; deployment behavior is configured inline. Requires fmt and Go support for these comments. Cron expression is passed via the annotation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-decorators.md#2025-04-23_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\npackage helloWorld\n\nimport \"fmt\"\n\n// If not specified, the type of every method in this class will be `jsonrpc`\n// genezio: deploy\ntype HelloWorld struct {}\n\nfunc New() HelloWorld {\n    return HelloWorld{}\n}\n\n// This method will be deployed as a `cron` method\n// genezio: cron * * * * *\nfunc (h HelloWorld) SayHiEveryMinute() {\n    fmt.Println(\"Hi!\")\n}\n\n// This method will be deployed as a `jsonrpc` method, because it inherits\n// the type from the GenezioDeploy decorator\nfunc (h HelloWorld) SayHello() {\n    fmt.Println(\"Hello!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Providers with Credentials in Genezio YAML - YAML\nDESCRIPTION: This snippet configures several authentication providers within the 'providers' section: enabling email, Web3, and Google OAuth with credentials sourced via environment variables. This setup supports flexible multi-provider authentication strategies and references dynamic configuration for secure secret management.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nproviders:\n  email: true\n  web3: true\n  google:\n    clientId: ${{env.GOOGLE_CLIENT_ID}}\n    clientSecret: ${{env.GOOGLE_SECRET}}\n```\n\n----------------------------------------\n\nTITLE: Defining Deployable HTTP Class - genezio: deploy - Go\nDESCRIPTION: Shows how to annotate a Go struct to be deployed as HTTP methods using a special genezio comment. The // genezio: deploy http comment marks the HttpHandle struct and all its methods (unless otherwise annotated) for HTTP deployment. The HandleHttpRequest method takes a GenezioHttpRequest and returns a pointer to GenezioHttpResponse. Requires github.com/Genez-io/genezio_types. The struct and its methods will be picked up by genezio, removing the need to declare paths in genezio.yaml.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-decorators.md#2025-04-23_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage httpHandle\n\nimport \"github.com/Genez-io/genezio_types\"\n\n// Every method in this class will be deployed as a http method, if not specified otherwise\n// genezio: deploy http\ntype HttpHandle struct {}\n\nfunc New() HttpHandle {\n  return HttpHandle{}\n}\n\nfunc (h HttpHandle) HandleHttpRequest(request genezio_types.GenezioHttpRequest) *genezio_types.GenezioHttpResponse {\n  response := &genezio_types.GenezioHttpResponse{\n    Body: request.Body,\n    Headers: map[string]string{\"content-type\": \"text/html\"},\n    StatusCode: \"200\",\n  }\n\n  return response\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Genezio Rate Limiter Decorator in TypeScript\nDESCRIPTION: This TypeScript example demonstrates applying the `@GenezioRateLimiter` decorator to an asynchronous method (`hello`) within a `BackendService` class marked for Genezio deployment (`@GenezioDeploy`). It configures the rate limiter to connect to a Redis database using the URL from the `REDIS_URL` environment variable and sets a request limit of 20 per minute per IP. The method must accept `GnzContext` as its first parameter for IP address retrieval, even if not used directly, and must be asynchronous.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/rate-limiter.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenezioDeploy, GnzContext } from \"@genezio/types\";\nimport { GenezioRateLimiter } from \"@genezio/rate-limiter\";\n\n@GenezioDeploy()\nexport class BackendService {\n  @GenezioRateLimiter({ dbUrl: process.env.REDIS_URL, limit: 20 })\n  async hello(context: GnzContext, name: string) {\n    console.log(\"Hello \" + name);\n    return \"Hello \" + name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Backend Methods with Comment Directive (Go)\nDESCRIPTION: Example of using the // genezio: auth comment to protect a Go backend method, restricting access to authenticated users only.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage BackendService\n\nimport (\n    \"context\"\n    \"fmt\"\n    \"github.com/Genez-io/auth\"\n)\n\n// genezio: deploy\ntype BackendService struct {}\n\nfunc New() BackendService {\n    return BackendService{}\n}\n\n// genezio: auth\nfunc (b BackendService) GetSensitiveInformation(ctx context.Context) (string, error) {\n    user := ctx.Value(\"user\").(*auth.User)\n    fmt.Println(\"User: \", user.Name, \"accessed the sensitive message\")\n    return \"This message contains sensitive information. Only authenticated users can read it.\", nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for Fastify (YAML)\nDESCRIPTION: Example `genezio.yaml` configuration file generated by `genezio analyze`. It specifies the project name, deployment region, backend path, language details (JavaScript/npm), deployment scripts, and defines a function named 'fastify' of type 'httpServer', pointing to the application entry point (`app.mjs`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: fastify-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: js\n    # The package manager used by the backend.\n    packageManager: npm\n  scripts:\n    deploy:\n      - npm install\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: fastify\n      # The path to the function's code.\n      path: ./\n      # The entry point for the function.\n      entry: app.mjs\n      # The compatibility of the function handler.\n      type: httpServer\n```\n\n----------------------------------------\n\nTITLE: Defining a Genezio-Deployed Service Class in JavaScript\nDESCRIPTION: Shows use of the @GenezioDeploy decorator for publishing a backend service in plain JavaScript. Relies on '@genezio/types' for decorator support. The method 'hello' takes two runtime string parameters and returns a formatted greeting, with all parameter and return types being serializable, critical for type-safe RPC integration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GenezioDeploy } from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class HelloWorldService {\n  hello(name, sender) {\n    console.log(`Hello world request received with name ${name} from ${sender}!`);\n\n    return `Hello, ${name}, from ${sender}!`;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Environment Variables in Genezio YAML\nDESCRIPTION: Example of setting frontend environment variables in genezio.yaml. This snippet shows how to set static values and use expressions to reference authentication and function resources.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nfrontend:\n  environment:\n    VITE_MY_ENV_VAR: my-value\n    VITE_MY_AUTH_TOKEN: ${{services.authentication.token}}\n    VITE_MY_AUTH_REGION: ${{services.authentication.region}}\n    VITE_MY_FUNCTION_URL: ${{backend.functions.<function-name>.url}}\n```\n\n----------------------------------------\n\nTITLE: Referencing Database in Authentication Configuration (By Name) - YAML\nDESCRIPTION: This short YAML example shows how to reference an existing database (by its name) for use by the authentication service. Both 'services.databases' and 'services.authentication.database.name' must reference the same identifier. This enables tight integration between authentication and the specified backend data store.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  databases:\n    - name: my-database\n      region: us-east-1\n  authentication:\n    database:\n      name: my-database\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Genezio YAML\nDESCRIPTION: Example of setting environment variables in the backend configuration of genezio.yaml. This snippet demonstrates how to set static values and use expressions to reference other resources.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nbackend:\n  environment:\n    MY_ENV_VAR: my-value\n    MY_DATABASE_NAME: ${{services.databases.<database-name>.name}}\n    MY_FUNCTION_URL: ${{backend.functions.<function-name>.url}}\n```\n\n----------------------------------------\n\nTITLE: Example genezio.yaml Configuration for Nuxt Deployment - YAML\nDESCRIPTION: Provides a sample genezio.yaml configuration necessary for deploying a Nuxt app with Genezio. Specifies project name, region, YAML version, Nuxt project path, package manager, deployment scripts, and the subdomain setting. All fields are required for correct deployment, with comments explaining each; users should customize values as needed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of your project, which also influences the subdomain of the project.\nname: genezio-project\n# Select a region closest to your user base for optimal performance.\nregion: us-east-1\n# Specifies the version of the YAML configuration syntax being used.\nyamlVersion: 2\n# Configuration specific to the Nuxt project setup.\nnuxt:\n    # The path where the Nuxt.js project is located.\n    path: .\n    # The package manager to be used for this project (npm, yarn, etc.)\n    packageManager: npm\n    # Custom scripts to be run during deployment, e.g., installing dependencies.\n    scripts:\n        deploy:\n            - npm install\n    # The subdomain that will be associated with this Nuxt.js application.\n    subdomain: my-nuxt-app\n```\n\n----------------------------------------\n\nTITLE: Exporting a Mongoose Model Safely in JavaScript\nDESCRIPTION: This JavaScript code snippet addresses the OverwriteModelError issue in Mongoose by ensuring a model is exported only if it hasn't been already compiled. It uses a conditional export that checks for an existing model in mongoose.models before defining a new one. Dependencies include Mongoose and the presence of a modelSchema variable; this approach prevents runtime errors when using hot reloading or repeated imports.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/troubleshooting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const Model =\n  mongoose.models.Model || mongoose.model(\"Model\", modelSchema);\n```\n\n----------------------------------------\n\nTITLE: Deploying Full-Stack App to Genezio Cloud\nDESCRIPTION: Executes the `genezio deploy` command in the project's root directory. This command builds both the backend and frontend, generates a production SDK, and deploys the entire application to the Genezio cloud infrastructure, making it publicly accessible via a generated URL.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Project Interactively using Shell\nDESCRIPTION: This command demonstrates how to initiate the interactive mode of `genezio create`. If no subcommand is provided, it starts a user-friendly interface to ask for project preferences like name, region, and template choices. Optional arguments allow specifying the project path and log level.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Genezio Deployment Configuration - YAML\nDESCRIPTION: Defines the deployment configuration for Genezio in genezio.yaml. This file includes metadata such as project name, region, YAML version, backend configuration, and HTTP server function details. Required for Genezio deployment: project must have requirements.txt, index.py entry point, and 'app' handler exported. Supported Python runtimes are listed. Output: configures automated deployment of FastAPI app to selected region with correct runtime.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: fastapi-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: python\n    # The package manager used by the backend.\n    packageManager: pip\n    # The runtime to use for your FastAPI app.\n    runtime: python3.13.x\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: hello-world-fastapi-app\n      # The path to the function's code.\n      path: ./\n      # The name of the wsgi application.\n      handler: app\n      # The entry point for the function.\n      entry: index.py\n      # The type of the function.\n      type: httpServer\n\n```\n\n----------------------------------------\n\nTITLE: Configuring External MongoDB Database in Genezio YAML - YAML\nDESCRIPTION: This YAML shows bring-your-own-database integration for MongoDB, where the connection details are supplied via the 'uri' field and an environment variable. The '.env' file must provide the referenced variable, and the type must be 'mongodb'. This enables external MongoDB use without creating managed instances within Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  databases:\n    type: \"mongodb\"\n    uri: ${{env.MONGO_DB_URI}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Service in Genezio YAML Configuration - YAML\nDESCRIPTION: This minimalistic snippet demonstrates how to enable the optional email service by setting 'services.email' to true. When present, this activates Genezio-provided email delivery features for the project. Omit the field if email support is unnecessary.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  email: true\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Memory Token Storage in Genezio\nDESCRIPTION: Implementation of a custom storage manager for authentication tokens that uses in-memory storage rather than localStorage. This example demonstrates how to set up both AuthService and StorageManager with a custom storage implementation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from \"@genezio/auth\";\nimport { StorageManager } from \"@genezio-sdk/my-project\";\n\nAuthService.getInstance().setTokenAndRegion(\n  \"<YOUR_GENEZIO_TOKEN>\",\n  \"<YOUR_PROJECT_REGION>\"\n);\n\n// Define a class that will implement the Storage interface\nclass InMemoryStorageWrapper {\n  db: { [key: string]: string } = {};\n  setItem(key: string, value: string): void {\n    this.db[key] = value;\n  }\n  getItem(key: string): string | null {\n    return this.db[key];\n  }\n  removeItem(key: string): void {\n    delete this.db[key];\n  }\n  clear(): void {\n    this.db = {};\n  }\n}\nconst inMemory = new InMemoryStorageWrapper();\nAuthService.getInstance().setStorage(inMemory);\n\nStorageManager.setStorage(inMemory);\n```\n\n----------------------------------------\n\nTITLE: User Logout Implementation for Secret Screen - TypeScript (React)\nDESCRIPTION: This async function logs out the currently authenticated user via AuthService and, if successful, navigates back to the login screen. It should be hooked to a logout button in the secret screen component. Outputs errors to the console if the API call fails.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst logout = async () => {\n  try {\n    await AuthService.getInstance().logout();\n    navigate(\"/login\");\n  } catch (error) {\n    console.error(error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Protecting Backend Secret with Auth Decorator - TypeScript (Node.js, Genezio)\nDESCRIPTION: This backend code demonstrates how to protect a backend route using the @GenezioAuth() decorator. The secret is only returned if the authenticated context is provided. Requires the packages '@genezio/types', and expects the method to be invoked via a Genezio RPC mechanism. The method logs current user info from the context. If unauthenticated, it results in an error. This code goes in server/backend.ts.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  GenezioDeploy,\n  GenezioMethod,\n  GenezioAuth,\n  GnzContext,\n} from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class BackendService {\n  readonly secret = \"Capybaras are AWESOME! Shhh... don't tell the cats!\";\n\n  @GenezioMethod()\n  @GenezioAuth()\n  async getSecret(context: GnzContext) {\n    console.log(context.user);\n    return this.secret;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Configuration in YAML\nDESCRIPTION: Example configuration in genezio.yaml file for enabling authentication with various providers like email, web3, and Google OAuth.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  authentication:\n    database:\n      name: my-database\n    providers:\n      email: true\n      web3: true\n      google:\n        clientId: ${{env.GOOGLE_CLIENT_ID}}\n        clientSecret: ${{env.GOOGLE_SECRET}}\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Middleware Decorator to a Genezio Service Class in TypeScript\nDESCRIPTION: This snippet shows how to use the custom `LogGnzContext` decorator within a Genezio service class (`BackendService`). The `@GenezioDeploy()` decorator marks the class for deployment. The `@LogGnzContext()` decorator is applied to the `hello` method, ensuring the context object is logged whenever this method is invoked. The `hello` method must accept `GnzContext` as its first parameter for the decorator to work correctly.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-context.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenezioDeploy, GnzContext } from \"@genezio/types\";\nimport { LogGnzContext } from \"./middleware\";\n\n@GenezioDeploy()\nexport class BackendService {\n  constructor() {}\n\n  @LogGnzContext()\n  async hello(ctx: GnzContext, name: string): Promise<string> {\n    console.log(`Hello from backend service ${name}`);\n\n    return `Hello from backend service ${name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protected Routes with GenezioAuth in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a protected method in a genezio class using the @GenezioAuth middleware. The getSecret method requires authentication, and the user information is automatically attached to the context parameter. If the user is not authenticated, the middleware will throw an error.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-google-oauth.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  GenezioDeploy,\n  GenezioMethod,\n  GenezioAuth,\n  GnzContext,\n} from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class BackendService {\n  readonly secret = \"Capybaras are AWESOME! Shhh... don't tell the cats!\";\n\n  @GenezioMethod()\n  @GenezioAuth()\n  async getSecret(context: GnzContext): Promise<string> {\n    console.log(context.user);\n    return this.secret;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Your Project with Genezio CLI - Shell\nDESCRIPTION: This code demonstrates invoking the CLI command to deploy the current project using Genezio. The command reads from the genezio.yaml configuration file in the project root and handles backend/frontend/fullstack deployment depending on the present configuration. The deploy command will use project settings and can be further tuned with --frontend or --backend flags.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/backend.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Implementing a Forgot Password Form with React and Genezio Auth (TypeScript)\nDESCRIPTION: This React component (`ForgotPasswordForm`) provides a form for users who have forgotten their password. It captures the user's email and uses `AuthService.getInstance().resetPassword()` to trigger a password reset email via the Genezio backend. On success, it notifies the user to check their email and redirects to the sign-in page; otherwise, it displays an error derived from `GenezioError`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { AuthService } from \"@genezio/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { GenezioError } from \"@genezio/types\";\n\nexport default function ForgotPasswordForm() {\n  const [email, setEmail] = useState(\"\");\n  const navigate = useNavigate();\n\n  const recoverPassword = async () => {\n    try {\n      await AuthService.getInstance().resetPassword(email);\n      alert(\"Please check your email\");\n      // Redirect your users to the sign in form\n      navigate(\"/signIn\");\n    } catch (error) {\n      alert(\n        \"Error code: \" +\n          (error as GenezioError).code +\n          \": \" +\n          (error as GenezioError).message\n      );\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"email\"\n        placeholder=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <br />\n      <button onClick={recoverPassword}>Recover Password</button>\n      <br />\n      <br />\n      <Link to=\"/signUp\">Sign Up</Link>\n      &nbsp;|&nbsp;\n      <Link to=\"/signIn\">Sign In</Link>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Environment Variables in Genezio YAML\nDESCRIPTION: Example of setting backend environment variables in genezio.yaml. This snippet demonstrates how to set the Node.js environment and use expressions to reference database and function resources.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  environment:\n    NODE_ENV: production\n    MY_DATABASE_URI: ${{services.databases.<database-name>.uri}}\n    FUNCTION_URL: ${{backend.functions.<function-name>.url}}\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Serverless Function Project via Shell Command\nDESCRIPTION: This command is used to create a new Genezio project specifically for deploying serverless functions. It uses the `serverless` subcommand and takes arguments for the function/project name, deployment region, project path, and logging verbosity.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create serverless [--name <project-name>] [--region <project-region>] [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Sample genezio.yaml Configuration for Streamlit - YAML\nDESCRIPTION: YAML configuration file defining deployment settings for a Genezio Streamlit app. Sets project name, target region, YAML schema version, and detailed Streamlit setup (including app path, package manager, entry file, and runtime). This file is key for deploying via Genezio, should be located in the project root, and relies on previously set up files like requirements.txt and app.py. All parameters are required for successful deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of your project, which also influences the subdomain of the project.\nname: genezio-project\n# Select a region closest to your user base for optimal performance.\nregion: us-east-1\n# Specifies the version of the YAML configuration syntax being used.\nyamlVersion: 2\n# Configuration specific to the Streamlit project setup.\nstreamlit:\n    # The path to the directory containing your Streamlit app.\n    path: .\n    # The package manager used to install dependencies.\n    packageManager: pip\n    # The entry file of your Streamlit app.\n    entryFile: app.py\n    # The runtime to use for your Streamlit app.\n    runtime: python3.13.x\n```\n\n----------------------------------------\n\nTITLE: Genezio Configuration File\nDESCRIPTION: YAML configuration file (genezio.yaml) that defines project settings including name, region, and container path.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/serverless-containers.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\ncontainer:\n  path: ./Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Authentication Service in Frontend (TypeScript)\nDESCRIPTION: Initializes the Genezio Authentication Service singleton in the frontend application's entry point (`main.tsx`). The `setTokenAndRegion` method configures the service with the project-specific token and region obtained from the Genezio Dashboard after enabling authentication. These placeholders must be replaced with actual values for authentication to function correctly.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/project-template.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"main.tsx\" showLineNumbers\n// TODO: Add your token and region from the Genezio dashboard https://app.genez.io/dashboard\nAuthService.getInstance().setTokenAndRegion(\"<token>\", \"<region>\");\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a PostgreSQL Database to Your Project\nDESCRIPTION: This example demonstrates how to add a PostgreSQL database to a genezio project by configuring the services.databases field in the genezio.yaml file. The configuration specifies a database name and region.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nservices:\n  databases:\n    - name: my-database\n      region: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Defining the GnzContext Type Structure in TypeScript\nDESCRIPTION: This snippet defines the TypeScript type `GnzContext` from the `@genezio/types` package. It outlines the structure including properties like `token` (string | undefined), `user` (detailed user object or undefined), `requestContext` (any | undefined), `headers` (any | undefined), and `isGnzContext` (boolean | undefined). This object is central to interacting with Genezio middlewares.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-context.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GnzContext = {\n  token: string | undefined;\n  user:\n    | {\n        email: string;\n        userId: string;\n        authProvider: string;\n        createdAt: Date;\n        verified: boolean;\n        name?: string;\n        address?: string;\n        profilePictureUrl?: string;\n        customInfo?: {\n          [key: string]: string;\n        };\n      }\n    | undefined;\n  requestContext: any | undefined;\n  headers: any | undefined;\n  isGnzContext: boolean | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Cron Jobs Using Comment Decorators in Genezio (Go)\nDESCRIPTION: This Go code demonstrates the use of genezio comment decorators to register scheduled methods as cron jobs. The // genezio: deploy and // genezio: cron comment syntax is used to mark the struct and method, while the cron string defines the run interval. The sample method prints a message every minute. Requires Go, proper Genezio Go integration, and a supported project setup.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/cron-methods.md#2025-04-23_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage cron\n\nimport \"fmt\"\n\n// genezio: deploy\ntype CronService struct {}\n\nfunc New() CronService {\n    return CronService{}\n}\n\n// genezio: cron * * * * *\nfunc (s CronService) SayHiEveryMinute() error {\n    fmt.Println(\"I will run every minute!\")\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Example Genezio Deployment Output\nDESCRIPTION: Shows a typical output snippet from the `genezio deploy` command. It indicates successful backend deployment, SDK generation with installation instructions, frontend deployment initiation, and provides URLs for the project dashboard and the live frontend application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nDeploying your backend project to genezio infrastructure...\n\nYour backend code was deployed and the SDK was successfully generated\n\n   ╭────────────────────────────────────────────────────────────────────────────────╮\n   │                                                                                │\n   │   To install the SDK in your client, run this command in your client's root:   │\n   │   npm add @genezio-sdk/genezio-project@1.0.0-prod                              │\n   │                                                                                │\n   │   Then import your classes like this:                                          │\n   │   import { HelloWorldClass } from \"@genezio-sdk/genezio-project\"               │\n   │                                                                                │\n   ╰────────────────────────────────────────────────────────────────────────────────╯\n\nDeploying your frontend to genezio infrastructure...\n\nNo subdomain is specified in the genezio.yaml configuration file. We will provide a random one for you.\n\nApp Dashboard URL: https://app.genez.io/project/<projectId>/<projectEnvId>\nFrontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Installing FastAPI and Uvicorn - Bash\nDESCRIPTION: Installs the FastAPI framework and Uvicorn ASGI server using pip3. Then freezes the installed dependencies to a requirements.txt file, required for deployment and reproducibility. Requires an active virtual environment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip3 install fastapi uvicorn\npip3 freeze > requirements.txt\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Backend for Multi-Repo (YAML)\nDESCRIPTION: Presents a minimal `genezio.yaml` configuration for deploying the backend in a multi-repository approach. Defines the project name, backend path (current directory '.'), language (TypeScript), and a deployment script (`npm install`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"genezio.yaml\"\nname: my-project\nbackend:\n  path: .\n  language:\n    name: ts\n  scripts:\n    deploy: npm install\n```\n```\n\n----------------------------------------\n\nTITLE: Running Genezio Commands for JavaScript Todo List App\nDESCRIPTION: This table outlines the key Genezio commands used for managing the todo list application, including installation, login, local testing, deployment, and getting help.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                  | Action                       |\n| ------------------------ | ---------------------------- |\n| `npm install -g genezio` | Installs genezio globally    |\n| `genezio login`          | Logs in to genezio           |\n| `genezio local`          | Starts a local server        |\n| `genezio deploy`         | Deploys a production project |\n| `genezio --help`         | Get help using genezio       |\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment Settings (YAML)\nDESCRIPTION: This YAML snippet shows an example `genezio.yaml` configuration file. It defines project metadata like name and region, and specifies frontend deployment details, including the source path, the build output directory (`publish`), and the scripts required for building (`build`) and deploying (`deploy`) the Angular frontend.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/angular.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Learn more about Genezio YAML at https://genezio.com/docs/project-structure/genezio-configuration-file/\n# The name of the project.\nname: angular-getting-started\n# The region where the project is deployed.\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\n# Information about the frontend, including the path, language, and publish directory.\n# It is optional. It can also be an array if there are multiple frontends you want to deploy.\nfrontend:\n  # The folder where the frontend scripts will run.\n  path: .\n  # The directory that will be published to the CDN. It is relative to the `path` directory.\n  publish: dist/browser\n  # Scripts are running in the specified `path` directory.\n  scripts:\n    # List of scripts to run before deploying the frontend.\n    deploy: npm install\n    # List of scripts that build your frontend before deployment. It should populate the specified `publish` directory.\n    build: npm run build\n    # List of scripts to run when starting the local development server.\n    start:\n      - npm install --silent\n      - npm run start\n```\n\n----------------------------------------\n\nTITLE: Illustrating a Populated GnzContext Object Structure in JSON\nDESCRIPTION: This JSON snippet provides an example of what a `GnzContext` object might look like when populated during a request. It shows sample data within the `requestContext` (containing HTTP method, path, user agent, source IP, etc.) and `headers` properties. The `isGnzContext` property is set to true. The `user` and `token` properties are absent in this example, implying an unauthenticated request.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-context.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"requestContext\": {\n    \"http\": {\n      \"method\": \"POST\",\n      \"path\": \"/\",\n      \"protocol\": \"HTTP/1.1\",\n      \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36\",\n      \"sourceIp\": \"78.96.207.59\"\n    },\n    \"url\": {\n      \"password\": \"\",\n      \"host\": \"localhost\",\n      \"hostname\": \"localhost\",\n      \"port\": \"\",\n      \"pathname\": \"/\",\n      \"search\": \"\",\n      \"searchParams\": {\n        \"URLSearchParams\": {}\n      },\n      \"hash\": \"\"\n    }\n  },\n  \"headers\": {\n    \"Host\": \"a752d3e0-937e-4939-9734-fda0670168db.dev-fkt.cloud.genez.io\",\n    \"Accept\": \"*/ *\",\n    \"Accept-Encoding\": \"gzip, deflate, br, zstd\",\n    \"Accept-Language\": \"en-US,en;q=0.9\",\n    \"Content-Length\": \"336\",\n    \"Content-Type\": \"application/json\",\n    \"Origin\": \"https://app.genez.io\",\n    \"Priority\": \"u=1, i\",\n    \"Referer\": \"https://app.genez.io/\",\n    \"Sec-Ch-Ua\": \"\\\"Google Chrome\\\";v=\\\"125\\\", \\\"Chromium\\\";v=\\\"125\\\", \\\"Not.A/Brand\\\";v=\\\"24\\\"\",\n    \"Sec-Ch-Ua-Mobile\": \"?0\",\n    \"Sec-Ch-Ua-Platform\": \"\\\"Windows\\\"\",\n    \"Sec-Fetch-Dest\": \"empty\",\n    \"Sec-Fetch-Mode\": \"cors\",\n    \"Sec-Fetch-Site\": \"same-site\",\n    \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36\",\n    \"X-Forwarded-For\": \"78.96.207.59\"\n  },\n  \"isGnzContext\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Next.js Project with genezio.yaml (YAML)\nDESCRIPTION: Example `genezio.yaml` configuration file used by Genezio to manage project settings. It defines the project name, deployment region, YAML syntax version, Next.js specific configurations like project path, package manager, custom deployment scripts, and the desired subdomain for the application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of your project, which also influences the subdomain of the project.\nname: genezio-project\n# Select a region closest to your user base for optimal performance.\nregion: us-east-1\n# Specifies the version of the YAML configuration syntax being used.\nyamlVersion: 2\n# Configuration specific to the Next.js project setup.\nnextjs:\n    # The path where the Next.js project is located.\n    path: .\n    # The package manager to be used for this project (npm, yarn, etc.)\n    packageManager: npm\n    # Custom scripts to be run during deployment, e.g., installing dependencies.\n    scripts:\n        deploy:\n            - npm install\n    # The subdomain that will be associated with this Next.js application.\n    subdomain: my-nextjs-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Auth for Web3 Authentication (TypeScript)\nDESCRIPTION: This snippet demonstrates the configuration step required before implementing Web3 authentication. It initializes the Genezio `AuthService` singleton by setting the authentication token and project region using `setTokenAndRegion`, which are necessary for subsequent Web3 authentication calls. Replace the placeholder strings with your actual Genezio token and project region.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from \"@genezio/auth\";\n\nAuthService.getInstance().setTokenAndRegion(\n  \"<YOUR_GENEZIO_TOKEN>\",\n  \"<YOUR_PROJECT_REGION>\"\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a User Sign-In Form with React and Genezio Auth (TypeScript)\nDESCRIPTION: This React component (`SignInForm`) implements a login form using email and password authentication. It leverages the `AuthService` from `@genezio/auth` for user authentication via the `login` method. Upon successful login, it alerts the user and redirects them to the application's main page using `react-router-dom`; otherwise, it shows an error derived from `GenezioError`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { AuthService } from \"@genezio/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { GenezioError } from \"@genezio/types\";\n\nexport default function SignInForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const login = async () => {\n    try {\n      await AuthService.getInstance().login(email, password);\n      alert(\"You have successfully logged in\");\n      // Redirect the user to the main page\n      navigate(\"/\");\n    } catch (error) {\n      alert(\n        \"Error code: \" +\n          (error as GenezioError).code +\n          \": \" +\n          (error as GenezioError).message\n      );\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <br />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <br />\n      <button onClick={login}>Sign In</button>\n      <br />\n      <Link to=\"/signUp\">Create an account</Link>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mongoose Dependency using npm\nDESCRIPTION: This command uses npm (Node Package Manager) to install the `mongoose` library. Mongoose provides a straightforward, schema-based solution to model application data and is used in the example class to interact with the MongoDB database.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-mongo-atlas.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mongoose\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Frontend for Multi-Repo (YAML)\nDESCRIPTION: Displays a minimal `genezio.yaml` configuration required for the frontend in a multi-repository setup. Specifies the project name and details for the frontend, including its path (current directory '.') and the SDK language (TypeScript). The project `name` must match the backend's configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"genezio.yaml\"\nname: my-project\nfrontend:\n  path: .\n  sdk:\n    language: ts\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing React App with Routing, Google OAuth, and Genezio Auth\nDESCRIPTION: This TypeScript code snippet (`client/src/main.tsx`) sets up the main entry point for the React application. It initializes the Genezio `AuthService` singleton with a specific authentication token and region, configures client-side routing using `react-router-dom`, and wraps the entire application with `GoogleOAuthProvider` from the `@react-oauth/google` library, providing the necessary Google Client ID. Placeholders `<token>`, `<region>`, and `<google_id>` must be replaced with actual values obtained from Genezio dashboard and Google Cloud Console.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-google-oauth.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport \"./index.css\";\nimport SecretView from \"./routes/secret\";\nimport Login from \"./routes/login\";\nimport { GoogleOAuthProvider } from \"@react-oauth/google\";\nimport { AuthService } from \"@genezio/auth\";\n\n// Change <token> and <region> with your own values!\nAuthService.getInstance().setTokenAndRegion(\"<token>\", \"<region>\");\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <SecretView />,\n  },\n  {\n    path: \"/login\",\n    element: <Login />,\n  },\n]);\n\n// Change <google_id> with your own value!\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <GoogleOAuthProvider clientId=\"<google_id>\">\n      <RouterProvider router={router} />\n    </GoogleOAuthProvider>\n  </React.StrictMode>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Environment Variables for Upstash Redis\nDESCRIPTION: This snippet shows the structure of a `.env` file used for local development. It defines the necessary environment variables (`UPSTASH_REDIS_URL`, `UPSTASH_REDIS_REST_URL`, `UPSTASH_REDIS_REST_TOKEN`) with placeholder credentials, allowing the application to connect to the Upstash Redis database when run locally using `genezio local`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/upstash-redis.md#2025-04-23_snippet_2\n\nLANGUAGE: fallback\nCODE:\n```\n```fallback title=\".env\"\nUPSTASH_REDIS_URL=redis://<username>:<password>@<hostname>:<port>\nUPSTASH_REDIS_REST_URL=<url>\nUPSTASH_REDIS_REST_TOKEN=<password>\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Project with Genezio - Bash\nDESCRIPTION: This command deploys the current project to Genezio's cloud platform, opening a browser for authentication if necessary. It requires prior generation of the 'genezio.yaml' configuration and a valid Genezio account. Output is a deployed app with URLs indicated in CLI output.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Container Configuration in Genezio YAML\nDESCRIPTION: Example of a basic container configuration in the genezio.yaml file. This shows how to specify the Dockerfile path and set environment variables for a containerized project deployed to the EU Central region.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-container-project\nregion: eu-central-1\nyamlVersion: 2\ncontainer:\n  path: ./Dockerfile\n  environment:\n    MY_ENV_VAR: my-value\n```\n\n----------------------------------------\n\nTITLE: Implementing Qstash Producer and Consumer - Genezio TypeScript Service\nDESCRIPTION: Defines a TypeScript service to interact with Upstash Qstash via HTTP. `sendPing()` is the producer method posting a JSON payload to a Qstash queue configured through environment variables; it uses axios for HTTP requests, requiring `@genezio/types` and `axios` (installed via npm). The `ping()` method is an HTTP endpoint, acting as a webhook consumer invoked by Qstash when a new message arrives, demonstrating how incoming queue data is processed. Inputs: Qstash webhook URL and credentials via environment variables. Outputs: Console logs and HTTP responses for message handling. This snippet expects proper environment setup and network visibility for webhooks.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/upstash-qstash.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  GenezioDeploy,\n  GenezioMethod,\n  GenezioHttpRequest,\n  GenezioHttpResponse,\n} from \"@genezio/types\";\nimport axios from \"axios\";\n\n@GenezioDeploy()\nexport class QstashService {\n  async sendPing(): Promise<boolean> {\n    const url = `https://qstash.upstash.io/v2/publish/${process.env.QUEUE_WEBHOOK_URL}`;\n    const payload = {\n      ping: \"ping\",\n    };\n\n    const headers = {\n      Authorization: \"Bearer \" + process.env.QSTASH_TOKEN,\n      \"Content-Type\": \"application/json\",\n    };\n\n    axios\n      .post(url, payload, { headers: headers })\n      .then((response) => {\n        console.log(response.data);\n        return true;\n      })\n      .catch((error) => {\n        console.error(error);\n        return false;\n      });\n    return true;\n  }\n\n  @GenezioMethod({ type: \"http\" })\n  async ping(request: GenezioHttpRequest): Promise<GenezioHttpResponse> {\n    const ping: string = request.body.ping;\n    console.log(ping);\n\n    const response: GenezioHttpResponse = {\n      body: {},\n      headers: { \"content-type\": \"application/json\" },\n      statusCode: \"200\",\n    };\n    return response;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for Nitro (genezio.yaml)\nDESCRIPTION: Example `genezio.yaml` configuration file for deploying a Nitro project with Genezio. It defines the project name (`name`), deployment region (`region`), configuration syntax version (`yamlVersion`), and Nitro-specific settings like project path (`nitro.path`), package manager (`nitro.packageManager`), and custom deployment scripts (`nitro.scripts.deploy`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of your project, which also influences the subdomain of the project.\nname: genezio-project\n# Select a region closest to your user base for optimal performance.\nregion: us-east-1\n# Specifies the version of the YAML configuration syntax being used.\nyamlVersion: 2\n# Configuration specific to the Nitro project setup.\nnitro:\n    # The path where the Nitro.js project is located.\n    path: .\n    # The package manager to be used for this project (npm, yarn, etc.)\n    packageManager: npm\n    # Custom scripts to be run during deployment, e.g., installing dependencies.\n    scripts:\n        deploy:\n            - npm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Email Service in TypeScript\nDESCRIPTION: Creates an EmailService class with a sendEmail method that uses the Genezio MailService to send emails. This example sends a basic email with text content.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/email-service.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GenezioDeploy } from \"@genezio/types\";\nimport { MailService } from \"@genezio/email-service\";\n\n@GenezioDeploy()\nexport class EmailService {\n  async sendEmail(email: string, subject: string, message: string) {\n    const response = await MailService.sendMail({\n      emailServiceToken: process.env.EMAIL_SERVICE_TOKEN,\n      from: email,\n      to: email,\n      subject: subject,\n      text: message,\n    });\n\n    if (!response.success) {\n      return response.errorMessage;\n    }\n\n    return \"success\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview for TypeScript CRUD Application\nDESCRIPTION: Directory structure showing the organization of server and client components in a Genezio CRUD application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/crud-application.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── models/\n│   ├── user.ts\n│   ├── package.json\n│   └── tsconfig.json\n├── client/\n│   ├── src/\n│   ├── package.json\n|   └── tsconfig.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Imports in React Frontend - TypeScript (TSX) - tsx\nDESCRIPTION: This TSX/JavaScript snippet shows how to update import statements in a React frontend file after SDK migration. By switching from the region-suffixed package to the new package, the import path is simplified. The example uses diff comments to clarify the required change. Existing dependencies include the React library and Genezio SDK; the output is a code section ready for integration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/upgrading-to-v1.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState, useEffect } from \"react\";\\nimport {\\n  TaskService,\\n  Task,\\n  GetTasksResponse,\\n// diff-remove\\n} from \"@genezio-sdk/todo-list-ts_us-east-1\";\\n// diff-add\\n} from \"@genezio-sdk/todo-list-ts\";\\nimport { useNavigate } from \"react-router-dom\";\\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Backend Path for Local Environment File Discovery in genezio.yaml\nDESCRIPTION: This YAML snippet shows the `backend.path` configuration within `genezio.yaml`. When running `genezio local`, Genezio automatically searches for a `.env` file in the directory specified by `backend.path` (e.g., `./server/.env` in this example) to load environment variables for local testing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/backend-environment-variables.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  path: ./server # genezio will search for the .env file in the ./server directory\n```\n\n----------------------------------------\n\nTITLE: Creating Express.js App (CommonJS) - JavaScript\nDESCRIPTION: This JavaScript (CommonJS) snippet shows a minimal Express.js app using require syntax. It creates a root route that returns a greeting message and starts the server on port 8080. Requires Node.js, express installed, and standard CommonJS environment (default for 'app.js'). Inputs are HTTP requests; output is HTTP responses and server logs. Start the server using 'node app.js'.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\n\nconst app = express();\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World from Express!\");\n});\n\napp.listen(8080, () => {\n  console.log(\"Server is running on http://0.0.0.0:8080\");\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying the Next.js Project with Genezio CLI (Bash)\nDESCRIPTION: Initiates the deployment process for the Next.js application using the Genezio CLI. This command builds the application and deploys it to the Genezio cloud infrastructure. It relies on a `genezio.yaml` file for configuration, creating one interactively if it doesn't exist.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Customizing Authentication Settings for Redirects in Genezio YAML - YAML\nDESCRIPTION: This excerpt customizes redirect URLs for password reset and email verification actions within the authentication settings. Each setting uses a dynamic reference to the frontend's subdomain, ensuring that user flows are correctly routed after authentication events. Adapt the '<frontend-name>' placeholder to your frontend reference.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsettings:\n  resetPassword:\n    redirectUrl: https://${{frontend.<frontend-name>.subdomain}}.app.genez.io/reset-password\n  emailVerification:\n    redirectUrl: https://${{frontend.<frontend-name>.subdomain}}.app.genez.io/verify\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in JavaScript\nDESCRIPTION: This JavaScript code shows how to access an environment variable named `MY_VARIABLE` in a Genezio backend function. Similar to TypeScript, it utilizes the standard Node.js `process.env` object. Environment variables configured for the Genezio project are accessible this way.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/backend-environment-variables.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst myVariable = process.env.MY_VARIABLE;\nconsole.log(\"Print environment variable\", myVariable);\n```\n\n----------------------------------------\n\nTITLE: Deploying Genezio Backend with Environment File using CLI\nDESCRIPTION: This command deploys the Genezio backend functions/classes or persistent servers, specifying a custom `.env` file path using the `--env` flag. Environment variables defined in this file will be made available to the deployed backend environment. This flag only applies to backend deployments.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/backend-environment-variables.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# E.G. genezio deploy --env backend/.env\ngenezio deploy --env <your-env-file-path>\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Development Environment\nDESCRIPTION: Runs the `genezio local` command in the project's root directory. This command starts the local development server, which hosts the backend (typically on port 8083) and the frontend (typically on port 5173). It also generates the necessary SDK in the `client/node_modules/@genezio-sdk/genezio-project` directory for frontend-backend communication.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Login Component in React\nDESCRIPTION: This TypeScript code defines the `Login` React component (`client/src/routes/login.tsx`), responsible for handling user authentication via Google. It utilizes the `GoogleLogin` component from `@react-oauth/google` to render the Google Sign-In button. Upon successful authentication (`onSuccess` callback), it triggers the `handleGoogleLogin` function, which sends the obtained Google credential to the Genezio backend using `AuthService.getInstance().googleRegistration`. This backend method handles user registration or login. The component manages a loading state and navigates the user to the root path ('/') upon successful login.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-google-oauth.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { CredentialResponse, GoogleLogin } from \"@react-oauth/google\";\nimport { AuthService } from \"@genezio/auth\";\nimport \"./styles.css\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Login: React.FC = () => {\n  const navigate = useNavigate();\n  const [googleLoginLoading, setGoogleLoginLoading] = useState(false);\n\n  const handleGoogleLogin = async (credentialResponse: CredentialResponse) => {\n    setGoogleLoginLoading(true);\n    try {\n      await AuthService.getInstance().googleRegistration(\n        credentialResponse.credential!\n      );\n\n      console.log(\"Login Success\");\n      navigate(\"/\");\n    } catch (error: any) {\n      console.log(\"Login Failed\", error);\n      alert(\"Login Failed\");\n    }\n\n    setGoogleLoginLoading(false);\n  };\n\n  return (\n    <div className=\"form-container\">\n      {googleLoginLoading ? (\n        <>Loading...</>\n      ) : (\n        <GoogleLogin\n          onSuccess={(credentialResponse) => {\n            handleGoogleLogin(credentialResponse);\n          }}\n          onError={() => {\n            console.log(\"Login Failed\");\n            alert(\"Login Failed\");\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Login;\n```\n\n----------------------------------------\n\nTITLE: Installing Local SDK and Starting React Client - Bash\nDESCRIPTION: These commands change to the React client directory, install the local SDK, and start the React application. They assume a Node.js and npm environment as well as genezio being properly set up. Running 'npm run install-local-sdk' makes sure the client can communicate locally with the backend, while 'npm start' launches the development server for the frontend.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for Remix (YAML)\nDESCRIPTION: Example content of the `genezio.yaml` file generated by `genezio analyze`. It defines essential deployment settings such as project name, deployment region, YAML syntax version, and Remix-specific configurations like the project path, package manager, and custom deployment scripts.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of your project, which also influences the subdomain of the project.\nname: genezio-project\n# Select a region closest to your user base for optimal performance.\nregion: us-east-1\n# Specifies the version of the YAML configuration syntax being used.\nyamlVersion: 2\n# Configuration specific to the Remix project setup.\nremix:\n    # The path where the Remix project is located.\n    path: .\n    # The package manager to be used for this project (npm, yarn, etc.)\n    packageManager: npm\n    # Custom scripts to be run during deployment, e.g., installing dependencies.\n    scripts:\n        deploy:\n            - npm install\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nest.js Project\nDESCRIPTION: These commands first install the NestJS CLI globally using npm, and then use the Nest CLI to scaffold a new Nest.js project named 'project-name'. This is useful if you don't have an existing Nest.js application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g @nestjs/cli\nnest new project-name\n```\n\n----------------------------------------\n\nTITLE: Multiple Frontend Configuration\nDESCRIPTION: YAML configuration example for projects with multiple frontends\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/frontend.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nfrontend:\n    - name: frontend1\n      path: ./frontend1\n      publish: dist\n    - name: frontend2\n      path: ./frontend2\n      publish: dist\n```\n\n----------------------------------------\n\nTITLE: Illustrating Generated Project Folder Structure\nDESCRIPTION: Shows the directory structure created by the `genezio create` command. It includes separate folders for the client (frontend) and server (backend), along with configuration files like `genezio.yaml`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\ngenezio-project/\n├── client/\n│ └── (basic-react-app)\n├── server/\n│ ├── package.json\n│ ├── package-lock.json\n│ ├── tsconfig.json\n│ └── .eslintrc.js\n└── genezio.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Genezio HTTP Method with Decorators (Go)\nDESCRIPTION: This Go snippet shows how to define a method (`HandleSimplePlainRequest`) on a struct (`HttpServer`) to handle HTTP requests within Genezio. It uses the `// genezio: http` comment decorator above the method definition. The struct itself is marked for deployment with `// genezio: deploy`. The method takes a `genezio_types.GenezioHttpRequest` and returns a pointer to `genezio_types.GenezioHttpResponse` and an error. This example prints the request body and returns it in the response. Requires the `github.com/Genez-io/genezio_types` package.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/http-methods-webhooks.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go title=\"http.go\" showLineNumbers\npackage httpHandler\n\nimport (\n    \"fmt\"\n    genezio_types \"github.com/Genez-io/genezio_types\"\n)\n\n// genezio: deploy\ntype HttpServer struct {}\n\nfunc New() HttpServer {\n    return HttpServer{}\n}\n\n// genezio: http\nfunc (s HttpServer) HandleSimplePlainRequest(request genezio_types.GenezioHttpRequest) (*genezio_types.GenezioHttpResponse, error) {\n    fmt.Println(\"Request received with a simple text\", request.Body, \"!\")\n\n    // insert your code here\n\n    response := &genezio_types.GenezioHttpResponse{\n        Body:       request.Body,\n        Headers:    &map[string]string{\"content-type\": \"text/html\"},\n        StatusCode: \"200\",\n    }\n\n    return response, nil\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for Flask (YAML)\nDESCRIPTION: Example `genezio.yaml` configuration file for deploying a Flask application. It specifies the project name, deployment region, YAML version, backend path, language settings (Python, pip, runtime), and function details including name, path, WSGI handler (`app`), entry file (`index.py`), and type (`httpServer`). Requires a `requirements.txt` file and correct paths/handler names.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: flask-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: python\n    # The package manager used by the backend.\n    packageManager: pip\n    # The runtime to use for your Flask app.\n    runtime: python3.13.x\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: hello-world-flask-app-function\n      # The path to the function's code.\n      path: ./\n      # The name of the wsgi application.\n      handler: app\n      # The entry point for the function.\n      entry: index.py\n      # The type of the function.\n      type: httpServer\n```\n\n----------------------------------------\n\nTITLE: Using Arrays of Serializable Objects in TypeScript with a Genezio Service\nDESCRIPTION: Demonstrates how to define a Genezio service method in TypeScript that accepts and returns arrays of serializable object types. 'UserService' exposes 'getNames', which maps an input array of User objects to an array of names. Dependencies: '@genezio/types' for the decorator. Input must be an array of serializable objects; all elements must be serializable.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype User = {\n  name: string;\n  age: number;\n};\n\n@GenezioDeploy()\nexport class UserService {\n  getNames(users: User[]): string[] {\n    return users.map((p) => p.name);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Connection Environment Variables - .env\nDESCRIPTION: Lists sample environment variables required for connecting to Upstash Redis, including the connection URL, REST URL, and REST token. These should be copied into a .env file in the project root to configure the runtime environment for local development and deployment. Actual sensitive values are placeholders and must be securely managed; the setup is required for successful Redis initialization in dependent code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-redis-upstash.md#2025-04-23_snippet_2\n\nLANGUAGE: fallback\nCODE:\n```\nUPSTASH_REDIS_URL=\"redis://default:sensitivepassword@cute-capybara-33897.upstash.io:33897\"\nUPSTASH_REDIS_REST_URL=\"https://cute-capybara-33897.upstash.io\"\nUPSTASH_REDIS_REST_TOKEN=\"sensitivetoken\"\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Next.js Starter Project via Shell Command\nDESCRIPTION: This command bootstraps a new Genezio project using the Next.js starter template. It requires the `nextjs` subcommand. Options include specifying the project name, region, path, log level, and a `--default` flag to auto-select default Next.js configuration options.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create nextjs [--name <project-name>] [--region <project-region>] [--default] [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: File Operations with FastAPI\nDESCRIPTION: Python implementation of file operations using FastAPI framework. Includes Pydantic models for request validation and endpoints for reading and writing files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport fastapi\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom pathlib import Path\n\napp = FastAPI()\nBASE_DIR = Path(\"/tmp\")\n\nclass FileData(BaseModel):\n    filename: str\n    content: str\n\n# Write data to a file\n@app.post(\"/write\")\nasync def write_file(file_data: FileData):\n    file_path = BASE_DIR / file_data.filename\n    try:\n        file_path.write_text(file_data.content, encoding=\"utf-8\")\n        return {\"message\": f\"File {file_data.filename} written successfully!\"}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error writing file: {str(e)}\")\n\n# Read data from a file\n@app.get(\"/read/{filename}\")\nasync def read_file(filename: str):\n    file_path = BASE_DIR / filename\n    try:\n        if not file_path.exists():\n            raise HTTPException(status_code=404, detail=\"File not found\")\n        content = file_path.read_text(encoding=\"utf-8\")\n        return {\"filename\": filename, \"content\": content}\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=f\"Error reading file: {str(e)}\")\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=3000)\n```\n\n----------------------------------------\n\nTITLE: Using Union Types for Serializable Parameters in TypeScript\nDESCRIPTION: Depicts a Genezio method in TypeScript that takes as parameter a union type. Both 'City' and 'Country' must be serializable; the method extracts the 'name' field from either. This leverages TypeScript's union support and Genezio's type inference for SDK generation. Requires '@genezio/types' for deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype City = {\n  name: string;\n  population: number;\n};\n\ntype Country = {\n  name: string;\n  language: string;\n};\n\n@GenezioDeploy()\nexport class UserService {\n  getName(a: City | Country): string {\n    return a.name;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Backend Configuration with HTTP Server in YAML\nDESCRIPTION: Full genezio.yaml configuration example for deploying an Express application as an HTTP server, including project name, region, language settings, and function configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: express-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: js\n    # The package manager used by the backend.\n    packageManager: npm\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: hello-world-express-app-function\n      # The path to the function's code.\n      path: ./\n      # The name of the function handler\n      handler: handler\n      # The entry point for the function.\n      entry: app.mjs\n      # The compatibility of the function handler.\n      type: httpServer\n```\n\n----------------------------------------\n\nTITLE: File Operations with Express.js\nDESCRIPTION: Implementation of file read and write operations using Express.js framework with the temporary storage system. Includes endpoints for writing content to files and reading from files in the /tmp directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport express from 'express';\nimport fs from 'fs';\nimport path from 'path';\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\n\n// Write data to a file\napp.post('/write', (req, res) => {\n  const { filename, content } = req.body;\n  const filePath = path.join('/tmp', filename);\n\n  fs.writeFile(filePath, content, (err) => {\n    if (err) {\n      console.error('Error writing file:', err);\n      return res.status(500).send('Error writing file');\n    }\n    res.send(`File ${filename} written successfully!`);\n  });\n});\n\n// Read data from a file\napp.get('/read/:filename', (req, res) => {\n  const { filename } = req.params;\n  const filePath = path.join('/tmp', filename);\n\n  fs.readFile(filePath, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Error reading file:', err);\n      return res.status(500).send('Error reading file');\n    }\n    res.send(data);\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Genezio HTTP Method via genezio.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure a specific method as an HTTP endpoint using the `genezio.yaml` file. This approach is applicable to all supported languages and overrides any decorator settings in the code. It specifies the backend path, language (Go in this example), the class file (`http.go`), the method name (`HandleSimplePlainRequest`), and explicitly sets its `type` to `http`. This ensures the Genezio deployment treats the method as an HTTP handler.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/http-methods-webhooks.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"genezio.yaml\" showLineNumbers\nname: http-example\nyamlVersion: 2\nbackend:\n  path: .\n  language:\n    name: go\n  classes:\n    # You need to identify the class by the source file\n    - path: http.go\n      methods:\n        # You need to identify the method by the name\n        - name: HandleSimplePlainRequest\n          # Specify the `http` method type\n          type: http\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to access an environment variable named `MY_VARIABLE` within a Genezio backend function. It uses the standard Node.js `process.env` object to retrieve the variable's value. Genezio ensures that variables set via the dashboard, CLI, or `genezio.yaml` are available through this mechanism.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/backend-environment-variables.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst myVariable = process.env.MY_VARIABLE;\nconsole.log(\"Print environment variable\", myVariable);\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: File and folder organization for the trivia application, showing the server-side Prisma implementation and client-side React components.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/trivia-application.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── prisma/\n│   ├── models/\n│   ├── leaderboard.ts\n│   ├── package.json\n│   └── tsconfig.json\n├── client/\n│   ├── src/\n│   ├── package.json\n|   └── tsconfig.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Basic Frontend Configuration\nDESCRIPTION: Basic YAML configuration for deploying a frontend project with Genezio\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/frontend.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nfrontend:\n  path: .\n  publish: build\n  subdomain: cool-capybara\n  scripts:\n    build: npm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Node Runtime Version for TypeScript/JavaScript Projects\nDESCRIPTION: This configuration demonstrates how to set the Node.js runtime version for TypeScript projects using the backend.language.runtime field. The example sets the runtime to Node 20 (nodejs20.x).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\nbackend:\n  path: .\n  language:\n    name: ts\n    # Set the node runtime version to Node 20\n    runtime: nodejs20.x\n```\n\n----------------------------------------\n\nTITLE: Using Arrays of Serializable Structs in Go with a Genezio Service\nDESCRIPTION: Illustrates a Go service struct and method that accepts and returns slices of serializable structs, consistent with Genezio's serialization requirements. 'UserService' provides 'GetNames' to extract names from a []User slice. All types must be fully serializable. No third-party dependencies required, but method expects proper usage within a Genezio-managed backend.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n    Name string\n    Age number\n}\n\ntype UserService struct {}\n\nfunc New() UserService {\n    return UserService{}\n}\n\nfunc (s *UserService) GetNames(users []User) ([]string, error) {\n\tvar names []string\n\tfor _, user := range users {\n\t\tnames = append(names, user.Name)\n\t}\n\treturn names, nil\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running a Nest.js Application Locally for Testing\nDESCRIPTION: These commands navigate into the newly created 'project-name' directory and start the Nest.js application in development mode using the Nest CLI. This allows testing the application, typically accessible at http://localhost:3000.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd project-name\nnest start\n```\n\n----------------------------------------\n\nTITLE: File Operations with Fastify\nDESCRIPTION: Implementation of file read and write operations using Fastify framework with async/await pattern. Provides endpoints for file operations in the temporary storage system.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Fastify from 'fastify';\nimport fs from 'fs';\nimport path from 'path';\n\nconst fastify = Fastify();\nconst PORT = 3000;\n\nfastify.post('/write', async (request, reply) => {\n  const { filename, content } = request.body as { filename: string; content: string };\n  const filePath = path.join('/tmp', filename);\n\n  try {\n    await fs.promises.writeFile(filePath, content);\n    reply.send({ message: `File ${filename} written successfully!` });\n  } catch (err) {\n    fastify.log.error('Error writing file:', err);\n    reply.status(500).send({ error: 'Error writing file' });\n  }\n});\n\nfastify.get('/read/:filename', async (request, reply) => {\n  const { filename } = request.params as { filename: string };\n  const filePath = path.join('/tmp', filename);\n\n  try {\n    const data = await fs.promises.readFile(filePath, 'utf8');\n    reply.send(data);\n  } catch (err) {\n    fastify.log.error('Error reading file:', err);\n    reply.status(500).send({ error: 'Error reading file' });\n  }\n});\n\nfastify.listen({ port: PORT, host: '0.0.0.0' }, (err) => {\n  if (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n  console.log(`Server running on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio AuthService Token and Region - TypeScript (React)\nDESCRIPTION: This code initializes the Genezio AuthService singleton by setting the authentication token and deployment region, both obtained from the Genezio Dashboard. It must be placed in the React frontend's entrypoint (e.g., src/main.tsx) after imports and before router creation. Required dependency: '@genezio/auth'. Replace '<token>' and '<region>' with actual credentials. No outputs, but initializes global auth context for the app.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from \"@genezio/auth\";\n\n// Replace <token> and <region> with your own values\nAuthService.getInstance().setTokenAndRegion(\"<token>\", \"<region>\");\n```\n\n----------------------------------------\n\nTITLE: Deploying a Genezio Project with Environment Variables (Bash)\nDESCRIPTION: Deploys the Genezio project and simultaneously uploads environment variables specified in a file. The `--env` flag followed by the path to the environment file (`<path-to-your-env-file>`) ensures these variables are available to the deployed functions. This is typically needed only for the initial deployment of variables.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --env <path-to-your-env-file>\n```\n\n----------------------------------------\n\nTITLE: Setting Architecture Type for Deployed Projects\nDESCRIPTION: This configuration shows how to specify the CPU architecture type for a deployed project using the backend.language.architecture field. The example sets the architecture to x86_64.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\nbackend:\n  path: .\n  language:\n    name: ts\n    # Set the node runtime version to Node 20\n    architecture: x86_64\n```\n\n----------------------------------------\n\nTITLE: Installing Express.js - Bash\nDESCRIPTION: This Bash snippet installs the Express.js dependency into your Node.js project. It's executed after project initialization to allow development of Express-based applications. Input is execution from project's root directory, output is updated node_modules and package.json files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Running Project Locally using Genezio CLI (Bash)\nDESCRIPTION: Starts the Genezio project in local development mode using the Genezio CLI. This command typically spins up the backend services and the frontend development server simultaneously, allowing developers to test the full application locally. Output usually includes URLs for accessing the frontend (e.g., `http://localhost:5173`) and the backend testing interface (e.g., `http://localhost:8083/explore`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/project-template.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ genezio local\n```\n\n----------------------------------------\n\nTITLE: Configuring External PostgreSQL Database in Genezio YAML - YAML\nDESCRIPTION: This snippet demonstrates how to specify an external PostgreSQL database for use as a service by directly setting its type and connection URI. The URI uses an environment variable for security, requiring a properly configured .env file with the POSTGRES_DB_URI. This supports bring-your-own-database scenarios when deploying with Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  databases:\n    type: \"postgresql\"\n    uri: ${{env.POSTGRES_DB_URI}}\n```\n\n----------------------------------------\n\nTITLE: Setting Frontend Environment Variables in Genezio YAML\nDESCRIPTION: Configuration for environment variables in a genezio.yaml file. This example demonstrates how to set static values and use expressions to reference values from services and functions.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nfrontend:\n  environment:\n    VITE_MY_ENV_VAR: my-value\n    VITE_MY_AUTH_TOKEN: ${{services.authentication.token}}\n    VITE_MY_AUTH_REGION: ${{services.authentication.region}}\n    VITE_MY_FUNCTION_URL: ${{backend.functions.<function-name>.url}}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Function in YAML\nDESCRIPTION: Example configuration for deploying an AWS Lambda function with Genezio, specifying the function name, path, handler name, entry file, and type.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\n  functions:\n    - name: my-function\n      path: ./\n      handler: myHandler\n      entry: app.mjs\n      type: aws\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting CI Build Errors in Genezio GitHub Action Step (YAML)\nDESCRIPTION: This YAML configuration snippet demonstrates how to resolve potential build failures during `genezio deploy` within a GitHub Actions environment. By setting the environment variable `CI` to `false` specifically for the deployment step, it prevents the build process (like `npm run build`) from treating warnings as errors, which is a common behavior in CI environments.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/github-action.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Deploy backend\n  working-directory: ./server\n  run: genezio deploy\n  env:\n    CI: false\n```\n\n----------------------------------------\n\nTITLE: Installing the Node.js Postgres Client\nDESCRIPTION: This command uses npm (Node Package Manager) to install the `pg` package. This package is the Node.js client library required for interacting with PostgreSQL databases, such as the Neon Postgres instance integrated with the Genezio project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/neon-postgres.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install pg\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Django Settings for Genezio Deployment (Python)\nDESCRIPTION: Modifies the `settings.py` file in the Django project directory to include the Genezio domain (`.genez.io`) in the `ALLOWED_HOSTS` list. This step is necessary to allow requests from the Genezio deployment environment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nALLOWED_HOSTS = [\n    '.genez.io',\n    'localhost',\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Reset and Email Verification URLs\nDESCRIPTION: This example shows how to configure the redirect URLs for password reset and email verification functionality in the authentication service. It uses dynamic frontend subdomain references for the redirect targets.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nservices:\n  databases:\n    - name: my-database\n      region: us-east-1\n  authentication:\n    database:\n      name: my-database\n    providers:\n      email: true\n      web3: true\n      google:\n        clientId: ${{env.GOOGLE_CLIENT_ID}}\n        clientSecret: ${{env.GOOGLE_SECRET}}\n    settings:\n      resetPassword:\n        redirectUrl: https://${{frontend.<frontend-name>.subdomain}}.app.genez.io/reset-password\n      emailVerification:\n        redirectUrl: https://${{frontend.<frontend-name>.subdomain}}.app.genez.io/verify\n```\n\n----------------------------------------\n\nTITLE: Deploying a Nitro Application with Genezio\nDESCRIPTION: Deploys the current Nitro project located in the current directory to the Genezio cloud platform. This command automatically builds the Nitro application and handles the serverless deployment. If a `genezio.yaml` file doesn't exist, it will prompt the user for configuration details like project name and region.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying the Genezio Project - Command Line (bash)\nDESCRIPTION: This command deploys the Genezio project using the previously installed CLI. It should be run in the root directory of the cloned repository, and requires prior configuration. Outputs deployment logs and the URL of the deployed application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Running Genezio CLI Migration Tool - Shell - sh\nDESCRIPTION: This shell snippet shows a typical interaction with the Genezio CLI when a project uses an outdated `genezio.yaml` configuration. When running any `genezio` command, the tool detects an old version and prompts the user to migrate to the latest version. This ensures users update their config file for compatibility with new CLI features. No extra dependencies are required except having Genezio CLI installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/upgrading-to-v1.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n❯ genezio local\\n? Your project configuration is using an old version of the YAML configuration file. Would you like to migrate it to the latest version? Yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment (YAML)\nDESCRIPTION: Creates a `genezio.yaml` file in the project root to configure the Genezio deployment. It specifies the project name, deployment region, backend path, language details (Python, pip, runtime), and function details (name, path, handler, entry point, type). This configuration tells Genezio how to build and deploy the Django application as a serverless function.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: django-app\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\nbackend:\n  # The root directory of the backend.\n  path: ./\n  # Information about the backend's programming language.\n  language:\n    # The name of the programming language.\n    name: python\n    # The package manager used by the backend.\n    packageManager: pip\n    # The runtime to use for your Django app.\n    runtime: python3.13.x\n  # Information about the backend's functions.\n  functions:\n    # The name (label) of the function.\n    - name: hello-world-django\n      # The path to the function's code.\n      path: project_name\n      # The name of the wsgi application.\n      handler: application\n      # The entry point for the function.\n      entry: wsgi.py\n      # The type of the function.\n      type: httpServer\n```\n\n----------------------------------------\n\nTITLE: Sending HTML-Formatted Emails with TypeScript\nDESCRIPTION: Enhances the sendEmail method to send HTML-formatted emails with styled content. This example shows how to send emails with HTML structure and CSS styling.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/email-service.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync sendEmail(email: string, subject: string, message: string) {\n    const response = await MailService.sendMail({\n      emailServiceToken: process.env.EMAIL_SERVICE_TOKEN!,\n      to: email,\n      subject: subject,\n      html: `<html lang=\"en\">\n        <head><style>h1{background-color:#6f42c1;color:#fff;margin:0;padding:10px;text-align:center}</style></head>\n        <body>\n          <div class=\"e\"><h1>${message}</h1>\n        </body>\n      </html>`,\n    });\n\n    if (!response.success) {\n      return response.errorMessage;\n    }\n\n    return \"success\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Basic Backend Deployment Configuration in Genezio YAML - YAML\nDESCRIPTION: This snippet gives a basic structure for defining backend deployment configuration in genezio.yaml, specifying project-level fields like name, region, and yamlVersion, and setting up the 'backend' node with path, language, and associated pre-deployment and pre-local scripts. It expects users to place this code in the genezio.yaml file in the root project folder, with npm as the package management for TypeScript backends. Inputs are project and backend settings; outputs are the configured deployment environment for Genezio operations. Dependencies include genezio CLI and npm for managing dependencies.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nname: project-name\\n# The region where the project is deployed.\\nregion: us-east-1\\n# The version of the Genezio YAML configuration to parse.\\nyamlVersion: 2\\nbackend:\\n  # The root directory of the backend.\\n  path: .\\n  # Information about the backend's programming language.\\n  language:\\n    # The name of the programming language.\\n    name: ts\\n    # The package manager used by the backend.\\n    packageManager: npm\\n  # Scripts are running in the specified `path` directory.\\n  scripts:\\n    # List of scripts to run before deploying the backend.\\n    deploy: npm install\\n    # List of scripts to run before starting `genezio local`.\\n    local: npm install\n```\n\n----------------------------------------\n\nTITLE: Connecting to Upstash Redis in a Genezio Class (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to connect to an Upstash Redis instance within a Genezio deployable class. It initializes the Redis client using environment variables (`UPSTASH_REDIS_REST_URL` and `UPSTASH_REDIS_REST_TOKEN`) fetched via `process.env` and then performs a simple set operation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/upstash-redis.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript title=\"index.ts\"\nimport { Redis } from '@upstash/redis'\nimport { GenezioDeploy } from \"@genezio/types\";\n\n@GenezioDeploy()\nexport class UpstashRedisExample {\n  connect() {\n    // Connect to Redis\n    const redis = new Redis({\n      url: process.env.UPSTASH_REDIS_REST_URL\n      token: process.env.UPSTASH_REDIS_REST_TOKEN\n    })\n\n    // Save a data in Redis\n    const data = await redis.set('foo', 'bar');\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Local Development Server with Genezio - Bash\nDESCRIPTION: Starts a local development environment using the Genezio CLI, defaulting to port 8501. Useful for testing changes before deploying. A different port can be provided by modifying the GENEZIO_PORT_STREAMLIT environment variable. Requires local genezio CLI and project configuration files. Outputs a development server URL for local testing and debugging.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Using npm – Shell\nDESCRIPTION: Installs the Genezio CLI globally via npm, allowing command-line access in your terminal. Requires Node.js and npm to be installed on your system. Input is the shell command; output is the global installation of the genezio CLI. No further parameters needed. Must be run with appropriate permissions for global packages.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Fullstack Project via Shell Command\nDESCRIPTION: This command creates a new Genezio fullstack project non-interactively. It requires the `fullstack` subcommand and allows specifying parameters like project name, region, backend template (ts/js), frontend template (react, vue, etc.), and whether to structure it as a multirepo. If required arguments are missing, it falls back to interactive mode for those specific options.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create fullstack [--name <project-name>] [--region <project-region>] [--backend <backend-template>] [--frontend <frontend-template>] [--multirepo] [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Deploying the Angular App with Genezio (Bash)\nDESCRIPTION: This command uses the Genezio CLI to deploy the configured Angular application (both frontend and any potential backend components defined in the project) to the Genezio serverless cloud infrastructure based on the `genezio.yaml` configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/angular.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Specifying Deployment Region in Genezio YAML Configuration - YAML\nDESCRIPTION: This snippet shows how to set the optional 'region' key in genezio.yaml to determine where your project is hosted. Supported values are us-east-1, eu-central-1, and eu-west-1, with us-east-1 as the default if omitted. Correct region selection can improve application performance by reducing latency.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# The region where the project is deployed. Available regions: us-east-1, eu-central-1, eu-west-1, eu-west-1\nregion: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Using Maps with Serializable Values in TypeScript Service Methods\nDESCRIPTION: Presents a Genezio-compliant method in TypeScript that receives a map (object) with string keys and serializable User-type values. The 'getUserForKey' method extracts a User from the map by key. Requires '@genezio/types' for deployment. Both the map's values and the returned object must be serializable for proper SDK generation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype User = {\n  name: string;\n  age: number;\n};\n\n@GenezioDeploy()\nexport class UserService {\n  getUserForKey(users: { [key: string]: User }, key: string): User {\n    return users[key];\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Backend Environment Variables - YAML\nDESCRIPTION: This snippet demonstrates how to define environment variables for the backend in genezio.yaml using the 'environment' field under the 'backend' key. Strings and expression-based variables (interpolations with ${{...}}) can be set, referencing deployed services and functions. Dependencies include Genezio YAML version 2 and the corresponding environment variable access within backend code through process.env. Inputs are variable/key-value mappings, and outputs are the sourced environment variables within the backend runtime.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\\nyamlVersion: 2\\n\\nbackend:\\n  environment:\\n    MY_ENV_VAR: my-value\\n    MY_DATABASE_NAME: ${{services.databases.<database-name>.name}}\\n    MY_FUNCTION_URL: ${{backend.functions.<function-name>.url}}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flask 'Hello World' Application (Python)\nDESCRIPTION: A simple Python script (`index.py`) demonstrating a minimal Flask application. It imports Flask, creates an app instance, defines a route for the root URL ('/') that returns 'Hello, World!', and includes the standard boilerplate to run the development server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in genezio.yaml\nDESCRIPTION: This example shows how to use project variables like project name and stage in scripts configuration. Variables are referenced using the ${{variableName}} syntax and can be used in backend and frontend script definitions.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nbackend:\n  # ...\n  scripts:\n    deploy: echo \"Deploying ${{projectName}} to stage ${{stage}}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Auth Client Package - Command Line (bash)\nDESCRIPTION: This command adds the '@genezio/auth' package to the project's client-side dependencies, necessary for calling Genezio authentication APIs from the React app. To be run in the client/ folder. Prerequisite: NPM initialized in the project folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio/auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Deployment for Svelte (YAML)\nDESCRIPTION: Example `genezio.yaml` configuration file tailored for deploying a Svelte frontend project with Genezio. It defines essential project details like name and region, and specifies frontend parameters including the source path (`.`), the build output directory (`dist`), and scripts for deployment (`deploy`), building (`build`), and local development (`start`). This file guides the Genezio deployment process.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Learn more about Genezio YAML at https://genezio.com/docs/project-structure/genezio-configuration-file/\n# The name of the project.\nname: svelte-getting-started\n# The region where the project is deployed.\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\n# Information about the frontend, including the path, language, and publish directory.\n# It is optional. It can also be an array if there are multiple frontends you want to deploy.\nfrontend:\n  # The folder where the frontend scripts will run.\n  path: .\n  # The directory that will be published to the CDN. It is relative to the `path` directory.\n  publish: dist\n  # Scripts are running in the specified `path` directory.\n  scripts:\n    # List of scripts to run before deploying the frontend.\n    deploy: npm install\n    # List of scripts that build your frontend before deployment. It should populate the specified `publish` directory.\n    build: npm run build\n    # List of scripts to run when starting the local development server.\n    start:\n      - npm install --silent\n      - npm run dev --silent\n```\n\n----------------------------------------\n\nTITLE: Creating a Logging Middleware Decorator (LogGnzContext) in TypeScript\nDESCRIPTION: This snippet demonstrates creating a TypeScript decorator function `LogGnzContext`. This decorator is designed to be applied to Genezio methods. It checks if the first argument passed to the decorated function is a `GnzContext` object (by checking `isGnzContext` property) and logs the context object to the console before executing the original function. It throws an error if the context object is missing or invalid.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-context.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport function LogGnzContext() {\n  return function (value: Function, context: any) {\n    return function (...args: any[]) {\n      // Check if the first parameter is a GnzContext object\n      if (args.length === 0 || !args[0].isGnzContext) {\n        console.log(\n          \"Error: the LogGnzContext decorator must be used with the first parameter being a GnzContext object\"\n        );\n        throw new Error(\"Invalid context\");\n      }\n      // If the first parameter is a GnzContext object, log it\n      console.log(args[0]);\n      // @ts-expect-error\n      const func = value.bind(this);\n      const result = func(...args);\n      return result;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Function Handler (JavaScript)\nDESCRIPTION: Defines an asynchronous function named `handler` suitable for Genezio deployment, shown in both ES Module (`app.mjs`) and CommonJS (`app.js`) formats. The function processes an incoming event object, extracts an optional 'name' query parameter (defaulting to 'George'), logs a message, and returns a standard HTTP response object. This handler acts as the entry point for the serverless function.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handler = async (event) => {\n  console.log('Function was called');\n  const name = event.queryStringParameters?.name || 'George';\n  return {\n    statusCode: 200,\n    body: `Hello, ${name}! Welcome to Genezio Functions!`,\n  };\n};\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexports.handler = async (event) => {\n  console.log(\"Function was called\");\n  const name = event.queryStringParameters?.name || \"George\";\n  return {\n    statusCode: 200,\n    body: `Hello, ${name}! Welcome to Genezio Functions!`,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: GnzContext Type Definition (TypeScript)\nDESCRIPTION: TypeScript interface definition for the GnzContext object which provides access to authentication data including user information and token.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type GnzContext = {\n  token: string | undefined;\n  user:\n    | {\n        email: string;\n        userId: string;\n        authProvider: string;\n        createdAt: Date;\n        verified: boolean;\n        name?: string;\n        address?: string;\n        profilePictureUrl?: string;\n        customInfo?: {\n          [key: string]: string;\n        };\n      }\n    | undefined;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI with Yarn - Bash\nDESCRIPTION: Installs the Genezio CLI globally using Yarn, suitable for users who prefer this package manager. Prerequisite: Yarn must be installed. This allows usage of all genezio CLI commands for deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n\n```\n\n----------------------------------------\n\nTITLE: Creating Django App (Bash)\nDESCRIPTION: Creates a new Django application named 'app_name' within the project. Django projects are typically composed of multiple reusable apps. Commands are provided for Windows, Linux, and macOS.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\npython manage.py startapp app_name\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Linux / macOS\npython3 manage.py startapp app_name\n```\n\n----------------------------------------\n\nTITLE: Setting Package Manager for TypeScript/JavaScript Projects\nDESCRIPTION: This example shows how to configure the package manager for TypeScript projects using the backend.language.packageManager field. The configuration specifies pnpm as the package manager to use.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\nbackend:\n  path: .\n  language:\n    name: ts\n    # Set the package manager to pnpm\n    packageManager: pnpm\n```\n\n----------------------------------------\n\nTITLE: Deploying Genezio Backend via GitHub Actions Workflow in YAML\nDESCRIPTION: This YAML snippet defines a GitHub Actions workflow named 'genezio workflow' that triggers on pushes to the 'main' branch. It outlines the steps to deploy a Genezio backend: checking out the repository, setting up Node.js, configuring the Genezio GitHub Action using a stored `GENEZIO_TOKEN` secret, and finally executing `genezio deploy` within the `./server` directory. This automates the deployment process.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/github-action.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: genezio workflow\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-backend:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-node@v4\n      - uses: Genez-io/genezio-github-action@v2\n        with:\n          token: ${{ secrets.GENEZIO_TOKEN }}\n      - name: Deploy backend\n        working-directory: ./server\n        run: genezio deploy\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Genezio SDK in TypeScript/JavaScript\nDESCRIPTION: Demonstrates how to import a specific service class (e.g., `HelloWorldService`) from the installed Genezio SDK package in a TypeScript/JavaScript client. It then shows how to call a method (`Hello`) on that service class.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/generated-sdk.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { HelloWorldService } from \"@genezio-sdk/<project-name>\"\n\nHelloWorldService.Hello(\"John\")\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Email Template for Authentication\nDESCRIPTION: Example template for customizing authentication emails in Genezio. Using placeholders like {{name}} and {{redirectUrl}}, the system can personalize emails for user verification and password reset flows.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nMessage: Hi {{name}}, please verify your email by clicking on the following link: {{redirectUrl}}.\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Connection String in .env File\nDESCRIPTION: This snippet shows how to define the `MONGO_DB_URI` environment variable in a `.env` file within the Genezio project. This variable holds the connection string required to connect to the MongoDB Atlas database and is accessed in the application code using `process.env.MONGO_DB_URI`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-mongo-atlas.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMONGO_DB_URI=<your_connection_string>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Port for Local Development (macOS/Linux)\nDESCRIPTION: This macOS/Linux command sets the `GENEZIO_PORT_NESTJS` environment variable to a specified port for the duration of the `genezio local` command execution. This allows running the local Nest.js server on a custom port.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGENEZIO_PORT_NESTJS=<port> genezio local\n```\n\n----------------------------------------\n\nTITLE: Enabling Email Service in a Genezio Project\nDESCRIPTION: This configuration demonstrates how to enable the email service for a genezio project by adding the email field to the services section and setting it to true.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nservices:\n  email: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Fastify App with CommonJS (JavaScript)\nDESCRIPTION: Defines a simple Fastify web server using CommonJS syntax (`require`). It creates one route ('/') and starts the server listening on host 0.0.0.0 and port 8080. This code should be saved in a file named `app.js`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Fastify = require(\"fastify\")\n\nconst app = Fastify();\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World from Fastify!\");\n});\n\napp.listen({\n  host: \"0.0.0.0\",\n  port: 8080,\n}, (err, address) => {\n  if (err) {\n    console.error(err);\n  }\n  console.log(`Server is running on ${address}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Project with Environment Variables using Genezio CLI (Bash)\nDESCRIPTION: Command to deploy the project using the Genezio CLI while also uploading environment variables from a specified file. The `--env` flag points to the file containing the variables (e.g., `.env`). These variables are securely stored and made available to the deployed application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --env <path-to-your-env-file>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Python Project (Bash)\nDESCRIPTION: Sets up a basic Python project structure suitable for Genezio deployment. It creates a virtual environment named `venv`, an empty main Python file `main.py`, and an empty `requirements.txt` file for listing dependencies.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\ntouch main.py\ntouch requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Redirects in Genezio YAML\nDESCRIPTION: Example of configuring path redirects in a genezio.yaml file. This snippet demonstrates how to set up a redirect from an old path to a new path with a 302 status code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nfrontend:\n  redirects:\n    - from: /old-path\n      to: /new-path\n      status: 302\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Qstash - Plain Text (.env)\nDESCRIPTION: Provides a structured .env file for storing Qstash credentials, necessary for local development and deployment. Includes the Qstash publish URL, API token, and key pairs required for signature validation. The key-value pairs are used by the TypeScript service at runtime to authorize and identify Qstash endpoints. Developers must copy their unique credentials from the Genezio dashboard into this file. Limitations: Do not commit this file with sensitive information to version control.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/upstash-qstash.md#2025-04-23_snippet_1\n\nLANGUAGE: fallback\nCODE:\n```\nQSTASH_URL=\"https://qstash.upstash.io/v2/publish/\nQSTASH_TOKEN=<token>\nQSTASH_CURRENT_SIGNING_KEY=<current-signing-key>\nQSTASH_NEXT_SIGNING_KEY=<next-siging-key>\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Genezio CLI Telemetry on Windows – Batch\nDESCRIPTION: Disables telemetry in the Genezio CLI by setting the GENEZIO_NO_TELEMETRY environment variable to 1, specifically for Windows command prompt environments. Run this command before executing genezio CLI commands in the same session. The setting persists only for the current prompt unless set globally.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/README.md#2025-04-23_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\nset GENEZIO_NO_TELEMETRY=1\n```\n\n----------------------------------------\n\nTITLE: Defining Server Repository Structure for Multi-Repo (Fallback)\nDESCRIPTION: Shows a typical directory structure for the server-side component in a multi-repository Genezio setup. Includes backend source code (`index.ts`, `models/`), configuration (`genezio.yaml`, `.env`), and dependencies (`package.json`, `node_modules`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_2\n\nLANGUAGE: fallback\nCODE:\n```\n```fallback title=\"Server repository\"\nserver/\n├── genezio.yaml\n├── .genezioignore\n├── .env\n├── models/\n├── node_modules/\n├── package.json\n└── index.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Hello World Streamlit Application - Python\nDESCRIPTION: A minimal Python application demonstrating a 'Hello World' Streamlit app. Uses Streamlit's API to set the app's title and write introductory text to the web UI. Requires 'streamlit' Python package to be installed. File should be saved (e.g., as app.py), and is run with 'streamlit run app.py'. Inputs are provided via user interaction on the web interface; outputs are rendered in the browser. No advanced parameters or error handling included.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport streamlit as st\n\nst.title('Hello World!')\nst.write('Welcome to my Streamlit app!')\n```\n\n----------------------------------------\n\nTITLE: Completing Web3 Login with Genezio Auth (TypeScript)\nDESCRIPTION: This snippet completes the Web3 authentication flow by sending the user's wallet address and the signature (obtained from signing the nonce) to the Genezio backend using `AuthService.getInstance().web3Login()`. The service verifies the signature against the address and nonce, logging the user in and returning user information (`user`) if successful.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst { user } = await AuthService.getInstance().web3Login(address, signature);\n```\n\n----------------------------------------\n\nTITLE: Minimal requirements.txt for Streamlit - Text\nDESCRIPTION: A minimal dependency list file specifying only the Streamlit package for deployment. Must be named 'requirements.txt' and placed in the project root. Used by deployment tools to install Python dependencies using pip. This approach is manual and avoids potential conflicts from broadly listing all packages.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nstreamlit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Web3 and Genezio Auth (Bash)\nDESCRIPTION: This command uses npm to install the `@genezio/auth` library, which is required for implementing Web3 authentication flows within the client-side application using Genezio services.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio/auth\n```\n\n----------------------------------------\n\nTITLE: Fetching Web3 Authentication Nonce from Genezio Auth (TypeScript)\nDESCRIPTION: This snippet demonstrates obtaining a unique nonce (a number used once) from the Genezio backend via `AuthService.getInstance().web3GetNonce()`. This nonce is specific to the provided wallet address (selected from the previously requested addresses) and is required for the user to sign as part of the Web3 login verification process.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = addresses[0];\nconst nonce = await AuthService.getInstance().web3GetNonce(address);\n```\n\n----------------------------------------\n\nTITLE: Requesting User Signature for Nonce via Web3 Provider (TypeScript)\nDESCRIPTION: This code snippet requests the user to sign the nonce obtained in the previous step using their connected Web3 wallet. It uses the `personal_sign` method through the `window.ethereum.request` API, passing the nonce and the user's address as parameters. The resulting signature proves ownership of the address.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await window.ethereum.request({\n  method: \"personal_sign\",\n  params: [nonce, address],\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js Project with Genezio YAML\nDESCRIPTION: Configuration example for deploying a Next.js project using Genezio. This snippet shows how to specify the project path, package manager, deployment scripts, and custom subdomain.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nname: genezio-project\nregion: us-east-1\nyamlVersion: 2\nnextjs:\n  path: .\n  packageManager: npm\n  scripts:\n    deploy:\n      - npm install\n  subdomain: my-nextjs-app\n```\n\n----------------------------------------\n\nTITLE: Running Express App (CommonJS) - Bash\nDESCRIPTION: This Bash command starts the Express.js server defined in 'app.js' using Node.js with CommonJS modules. Requires correct file and installed dependencies. Output is a running HTTP server on port 8080.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Using genezio delete Command in Bash\nDESCRIPTION: This command deletes a Genezio project from the cloud infrastructure. It requires authentication and can be used with or without specifying a project ID. Options include force deletion and setting log level.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/delete.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio delete <project> [-f | --force] [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment (Cross-Platform)\nDESCRIPTION: Commands to create a Python virtual environment named `venv` within the project directory. Separate commands are provided for Windows (`python`) and Linux/Mac (`python3`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Deploying a Nuxt Project to Genezio Serverless Platform - Bash\nDESCRIPTION: Deploys the current Nuxt application to the Genezio cloud serverless platform. This command builds the app and uploads it according to settings specified in genezio.yaml. It automatically generates a configuration file if one does not exist and may prompt for input. Requires a properly structured Nuxt app and Genezio CLI.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Logging into the Genezio Platform via CLI\nDESCRIPTION: Demonstrates the `genezio login` command used to authenticate the user with their Genezio account via the command-line interface. Authentication is required before deploying projects to the Genezio cloud infrastructure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\n```\n\n----------------------------------------\n\nTITLE: Configuring Genezio Client for Automatic Linking (YAML)\nDESCRIPTION: Example `genezio.yaml` for a client repository that allows the `genezio link` command to infer the project name and region automatically without command-line flags. Includes project `name`, `region`, and `frontend` configuration details.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml title=\"genezio.yaml\"\nname: my-project\nregion: us-east-1\nfrontend:\n  path: .\n  sdk:\n    language: ts\n  publish: dist\n```\n```\n\n----------------------------------------\n\nTITLE: Installing ioredis via npm - Bash\nDESCRIPTION: Installs the ioredis package using npm to enable Node.js applications to communicate with Redis databases. This dependency is necessary for running any Redis operations in the provided TypeScript samples. This command should be executed at the root of the genezio project prior to running or building Redis-dependent code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-redis-upstash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n npm install ioredis\n```\n\n----------------------------------------\n\nTITLE: Deploying with Genezio CLI - Bash\nDESCRIPTION: Deploys the project to Genezio cloud infrastructure using the genezio CLI. The command opens a browser prompt for login/authorization. Prerequisites: genezio CLI installed, genezio.yaml, requirements.txt, and app source ready. No input parameters for the basic deploy command.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n\n```\n\n----------------------------------------\n\nTITLE: Requesting Wallet Addresses via Web3 Provider (TypeScript)\nDESCRIPTION: This code snippet shows how to interact with a browser-based Web3 wallet extension (like Metamask) to request the user's Ethereum addresses. It calls the `eth_requestAccounts` method using the `window.ethereum.request` API, which typically triggers a prompt in the wallet extension for user approval to connect their wallet.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst addresses = await window.ethereum.request({\n  method: \"eth_requestAccounts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a New Remix Project (Bash)\nDESCRIPTION: Uses npx to run the latest version of the Remix initializer (`create-remix`), scaffolding a new Remix application in the current directory. This command is used if you don't have an existing Remix project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Starting the Vue Client Application Locally\nDESCRIPTION: Details the sequence of commands (`cd ./client`, `npm run install-local-sdk`, `npm start`) needed to navigate into the client directory, install the locally generated SDK for backend communication, and start the Vue frontend application. This allows testing the frontend against the locally running backend.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Deploying the Vue & Mongo Project using Genezio CLI\nDESCRIPTION: Shows the `genezio deploy` command, executed from the project root directory (`./genezio-examples/javascript/todo-list-vue`). This command packages and deploys both the backend and frontend components of the application to the Genezio cloud infrastructure based on the `genezio.yaml` configuration file.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Declaring Cron Jobs Using genezio.yaml Configuration (YAML)\nDESCRIPTION: This YAML configuration defines a scheduled cron job for a Genezio project. The method sayHiEveryMinute in the Go-based class is designated as a cron job using the type: cron property and a cronString to specify timing. This approach is language-agnostic and works for all supported Genezio languages. The file requires the Genezio CLI and correct backend code references for deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/cron-methods.md#2025-04-23_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nname: cron-example\nyamlVersion: 2\nbackend:\n  path: .\n  language:\n    name: go\n  classes:\n    # You need to identify the class by the source file\n    - path: cron.go\n      methods:\n        # You need to identify the method by the name\n        - name: sayHiEveryMinute\n          # Specify the `cron` method type\n          type: cron\n          # Specify the cron string that defines the frequency and timing\n          cronString: * * * * *\n```\n\n----------------------------------------\n\nTITLE: Starting Local Genezio Server\nDESCRIPTION: Command to start a local Genezio server for testing. This spawns a server on a random port and generates an SDK for frontend integration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Creating FastAPI App - Python\nDESCRIPTION: Defines a minimal FastAPI application serving a single route at '/'. The 'app' instance is created, with a GET endpoint returning a JSON response. Uvicorn is used as the ASGI server. Requires FastAPI and Uvicorn installed. Input: HTTP GET at root ('/'). Output: JSON {\"Hello\": \"World\"}. Entry point is index.py with the app handler.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef home():\n    return {\"Hello\": \"World\"}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app)\n\n```\n\n----------------------------------------\n\nTITLE: Installing the Genezio Rate Limiter Package using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the `@genezio/rate-limiter` library. This installation is a prerequisite for using the `@GenezioRateLimiter` decorator within a Genezio project. Requires Node.js and npm to be installed in the development environment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/rate-limiter.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio/rate-limiter\n```\n\n----------------------------------------\n\nTITLE: Deploying the Fastify App with Environment Variables (Bash)\nDESCRIPTION: Deploys the Fastify application using `genezio deploy` while also uploading environment variables from a specified file. The `--env` flag takes the path to a file (e.g., `.env`) containing key-value pairs that will be set as environment variables for the deployed application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --env <path-to-your-env-file>\n```\n\n----------------------------------------\n\nTITLE: Starting the Local Genezio Development Server\nDESCRIPTION: Executes the `genezio local` command to start a local development server. This server runs the backend code defined in the `server` directory, allowing for local testing and development of the application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Commands for starting the local development server and launching the React application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/chatgpt-project.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Express.js Starter Project via Shell Command\nDESCRIPTION: This command demonstrates creating a Genezio project integrated with the Express.js framework using a starter template. It uses the `expressjs` subcommand and allows setting the project name, region, path, and log level via command-line arguments.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create expressjs [--name <project-name>] [--region <project-region>] [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Running Express App (ESM) - Bash\nDESCRIPTION: This command launches the Express.js server defined in 'app.mjs' using Node.js in ESM mode. Requires that the file and all dependencies exist. Output is a running server on port 8080.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode app.mjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastify Server Host for Deployment (JavaScript)\nDESCRIPTION: Shows the correct configuration for the `app.listen` method in a Fastify application to ensure it works correctly when deployed. Setting `host: \"0.0.0.0\"` makes the server listen on all available network interfaces, which is necessary in containerized or serverless environments like Genezio. Using `localhost` or `127.0.0.1` would prevent external access.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\napp.listen({\n  host: \"0.0.0.0\",  // Required for proper deployment\n  port: 8080,\n}, (err, address) => {\n  if (err) {\n    console.error(err);\n  }\n  console.log(`Server is running on ${address}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Layout\nDESCRIPTION: Shows the hierarchical organization of project files and folders including server, client, and configuration files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/chatgpt-project.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── gptCaller.js\n│   └── package.json\n├── client/\n│   ├── build/\n│   ├── public/\n│   ├── src/\n│   └── package.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Deployment Success Output\nDESCRIPTION: Example of successful deployment output showing the deployed container's URL endpoint.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/serverless-containers.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nFunctions Deployed:\n  - docker-container: https://<id>.us-east-1.cloud.genez.io\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio SDK via NPM for TypeScript/JavaScript\nDESCRIPTION: This command installs the Genezio SDK package for a specific project and environment using npm. Replace `<project-name>` with your project's name and `<environment>` with the target deployment environment (e.g., 'dev', 'stage', 'prod'). This makes the SDK available as a dependency in your Node.js project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/generated-sdk.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Terminal\"\nnpm add @genezio-sdk/<project-name>@1.0.0-<environment>\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Bundled Files in Genezio\nDESCRIPTION: Example showing how to access bundled local files in the Genezio execution environment using Node.js file system operations.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst configPath = '/tmp/package/config.json';\n// or const configPath = path.join(process.cwd(), 'config.json');\nfs.readFile(configPath, 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error reading config file:', err);\n  } else {\n    console.log('Config file contents:', data);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Django View (Python)\nDESCRIPTION: Creates a `views.py` file within the 'app_name' directory and defines a simple view function named 'index'. This view handles incoming requests and returns a basic 'Hello, World!' HTTP response.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for MongoDB Connection\nDESCRIPTION: Environment variable configuration for connecting to MongoDB database. The .env file should be created in the server directory with the MongoDB connection URI.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list-flutter.md#2025-04-23_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nMONGO_DB_URI=<your-mongo-uri>\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Port for Local Nuxt Development (Windows) - Bash\nDESCRIPTION: Runs the local development server of the Nuxt app on a custom port in Windows environments by setting the GENEZIO_PORT_NUXT environment variable before starting genezio local. Useful for avoiding port conflicts and matching infrastructure setups.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nset GENEZIO_PORT_NUXT=<port> && genezio local\n```\n\n----------------------------------------\n\nTITLE: Local Testing Commands\nDESCRIPTION: Commands for testing the project locally, including starting the Genezio local server and running the client application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/multiversx-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview\nDESCRIPTION: Directory structure showing the organization of the Stripe integration project, including server-side code, client application, and configuration files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/stripe-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── server/\n│   ├── StripeHandler.js\n│   └── package.json\n├── client/\n│   └── src\n│   └── package.json\n│   └── public\n│   └── build\n│   └── README.md\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally via npm (Bash)\nDESCRIPTION: Installs the Genezio command-line interface (CLI) globally using the Node Package Manager (npm). Executing this command makes the `genezio` command accessible from any directory in the terminal.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Deploying the Initial Project with Genezio CLI\nDESCRIPTION: This command utilizes the Genezio CLI to build and deploy the project located in the current directory (expected to be the root of the cloned repository). It handles the deployment of both backend services and the frontend React application, making the app accessible via a URL provided after successful deployment. Requires the Genezio CLI to be installed and the user to be logged in.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-google-oauth.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment (Windows) - Bash\nDESCRIPTION: Uses Python to create a new virtual environment called 'venv' in the current directory, limited to Windows systems. Guarantees project dependency isolation and ease of package management. Requires Python installed on Windows.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv venv\n\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands\nDESCRIPTION: Commands for logging into Genezio and deploying the application to production.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/trivia-application.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Cloning and Entering the Vue Template Repository (Bash)\nDESCRIPTION: Commands to clone a forked Vue getting started template repository from GitHub and navigate into the newly created project directory. Replace `YOUR_REPO_URL` with the actual URL of the forked repository.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/vue.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone YOUR_REPO_URL\ncd vue-getting-started\n```\n\n----------------------------------------\n\nTITLE: Generating Genezio SDK Manually (Shell)\nDESCRIPTION: Shows the `genezio sdk` command used to manually generate the SDK for languages other than TypeScript/JavaScript or when explicit generation is needed. Requires specifying the target language (`<language>`) and output directory (`-o ./sdk`). A backend must be deployed first.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Terminal\"\ngenezio sdk --language <language> -o ./sdk\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Service in Genezio YAML Configuration\nDESCRIPTION: Configures the email service by adding the required settings to the genezio.yaml configuration file. This enables the Genezio email service for your project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/email-service.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices\n  email: true\n```\n\n----------------------------------------\n\nTITLE: Running Nitro Application Locally with Genezio\nDESCRIPTION: Starts the Nitro application locally using the Genezio development server. This allows developers to test their application in an environment that mimics the Genezio cloud deployment before actually deploying.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Example Output after Genezio Deployment\nDESCRIPTION: Shows the typical output format displayed in the terminal after successfully running the `genezio deploy` command. It provides two important URLs: one for the Genezio App Dashboard to manage the project and another for the live Frontend URL where the deployed React application can be accessed. The specific `<project-id>`, `<stage-id>`, and `<subdomain>` values will vary for each deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ App Dashboard URL: https://app.genez.io/project/<project-id>/<stage-id>\n$ Frontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Linking Client Repository to Backend (Shell)\nDESCRIPTION: Provides the `genezio link` command to connect a local client repository to a deployed Genezio backend server in a multi-repo setup. Requires specifying the project name (`<name>`) and region (`<region>`). This facilitates local development with SDK hot-reloading.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Terminal\"\ngenezio link --projectName <name> --region <region>\n```\n```\n\n----------------------------------------\n\nTITLE: Using genezio analyze command with options\nDESCRIPTION: Command syntax for analyzing project infrastructure using genezio CLI. Shows the basic command structure with optional configuration file and format specifications.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/analyze.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio analyze [--config <config>] [--format <format>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Testing App Locally with Genezio - Bash\nDESCRIPTION: This Bash snippet uses Genezio CLI to run the app in a local environment that simulates cloud deployment. Ensures correct behavior before deploying to production. Input is project directory; output is local server instance.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Cloning the React Starter Repository using Git\nDESCRIPTION: Clones a forked version of the Genezio React starter template repository from GitHub using the `git clone` command and then changes the current directory into the newly cloned project folder (`react-getting-started`). Replace `YOUR_REPO_URL` with the actual URL of the forked repository. This is part of setting up the initial project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone YOUR_REPO_URL\ncd react-getting-started\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using npm\nDESCRIPTION: Installs the Genezio Command Line Interface (CLI) globally using the Node Package Manager (npm). This allows the user to execute `genezio` commands from any directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Neon Postgres Connection String\nDESCRIPTION: This snippet shows the format for storing the Neon Postgres connection string in a `.env` file located in the backend's root directory for local development. The `NEON_POSTGRES_URL` environment variable should contain the full connection URL, including the specific username, password, hostname, and database name provided by Neon. This file allows `genezio local` to load the database credentials when running the project locally.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/neon-postgres.md#2025-04-23_snippet_2\n\nLANGUAGE: fallback\nCODE:\n```\n```fallback title=\".env\"\nNEON_POSTGRES_URL=postgres://<username>:<password>@<hostname>/<database>\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application to Genezio Cloud (Bash)\nDESCRIPTION: Command executed in the terminal using the Genezio CLI to deploy the Vue application based on the `genezio.yaml` configuration. This uploads the built frontend assets to the Genezio infrastructure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/vue.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Project with Genezio\nDESCRIPTION: Deploys the entire project (both backend and frontend) to the Genezio cloud infrastructure using the `genezio deploy` command. This command should be run from the root directory of the project (`./genezio-examples/javascript/html-example`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Auth Package (Client)\nDESCRIPTION: Command to install the @genezio/auth package in the client application for integrating with Genezio authentication services.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio/auth\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands\nDESCRIPTION: Commands for installing dependencies and starting the client application locally.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/crud-application.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Django and Freezing Dependencies (Bash)\nDESCRIPTION: Installs the Django framework using pip within the activated virtual environment and then creates a `requirements.txt` file listing all installed packages and their versions. This file is used by Genezio during deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip3 install Django\npip3 freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Project Structure for TypeScript Hello World with Genezio\nDESCRIPTION: This snippet shows the file and folder structure of the Genezio TypeScript Hello World project. It includes server and client directories, configuration files, and essential project files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   └── hello.ts\n├── client/\n│   ├── test-hello.ts\n│   ├── package.json\n|   └── tsconfig.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Deploying a Genezio Project (Bash)\nDESCRIPTION: Initiates the deployment process for the Genezio project configured in `genezio.yaml` using the `genezio deploy` command. This uploads the code, sets up the necessary cloud infrastructure, and makes the functions publicly accessible. It may require authentication with the Genezio platform.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Using Genezio Clone Command\nDESCRIPTION: Command syntax for cloning a genezio project with optional parameters for project name, region, stage, and log level configuration. The command downloads project files to a specified path.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-clone.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio clone [--name <project-name>] [--region <project-region>] [--stage <project-stage>] [--logLevel <log-level>] [-h | --help] path\n```\n\n----------------------------------------\n\nTITLE: Cloning Example Repository with Git - Bash\nDESCRIPTION: This snippet demonstrates how to clone the genezio-examples repository from GitHub using git command-line tools. It requires git to be installed on the user's system. The command pulls all example code locally, enabling users to navigate to and work with specific TypeScript Genezio projects.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Navigating to TypeScript Hello World Project Directory\nDESCRIPTION: This bash command changes the current directory to the TypeScript Hello World project folder within the cloned Genezio examples repository.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/hello-world.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/typescript/hello-world\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using npm\nDESCRIPTION: This command installs the `genezio` command-line interface globally using the Node Package Manager (npm). The `-g` flag ensures it's available system-wide, allowing execution from any directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Deploying Genezio Project\nDESCRIPTION: Basic command to deploy a Genezio project\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/frontend.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio via NPM - Bash\nDESCRIPTION: Installs the Genezio CLI globally using the NPM package manager. Requires prior installation of Node.js and NPM. After installation, the 'genezio' command will be available globally for deployment and management of Refine applications. No additional configuration or parameters are needed for this step.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/refine.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Analyzing Project for Genezio Configuration (Bash)\nDESCRIPTION: Runs the Genezio CLI command `analyze` within the Fastify project directory. This command inspects the project structure and automatically generates a `genezio.yaml` configuration file tailored for deploying the detected Fastify application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio analyze\n```\n\n----------------------------------------\n\nTITLE: Example Deployment Output URLs (Bash)\nDESCRIPTION: This snippet shows the typical output format after a successful `genezio deploy` command. It provides URLs to the Genezio project dashboard and the publicly accessible frontend application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/angular.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ App Dashboard URL: https://app.genez.io/project/<project-id>/<stage-id>\n$ Frontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using npm (Bash)\nDESCRIPTION: Installs the Genezio command-line interface globally using the Node Package Manager (npm). This command makes the `genezio` executable available in the system path, allowing users to manage Genezio projects. Requires NodeJS and npm to be installed as prerequisites.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/project-template.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g genezio\n```\n\n----------------------------------------\n\nTITLE: Updating Genezio CLI with pnpm\nDESCRIPTION: This command updates the globally installed Genezio CLI to the latest version using pnpm package manager.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/update.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm update genezio -g\n```\n\n----------------------------------------\n\nTITLE: Running the React-Admin App Locally with Genezio\nDESCRIPTION: This command starts the local development server provided by Genezio. It runs both the frontend (React-Admin) and backend components of the application locally for testing and development purposes.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Python\nDESCRIPTION: This Python code illustrates accessing an environment variable named `MY_VARIABLE` within a Genezio backend function. It uses the standard Python `os` module and accesses the variable via `os.environ['MY_VARIABLE']`. The `os` module must be imported. Genezio makes configured environment variables available to the Python runtime environment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/backend-environment-variables.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport os\nmy_variable = os.environ['MY_VARIABLE']\nprint(\"Print environment variable\", my_variable)\n```\n\n----------------------------------------\n\nTITLE: Running the Angular Development Server Locally (Bash)\nDESCRIPTION: This command uses the Angular CLI (`ng`) to compile and serve the Angular application locally for development and testing purposes. The app typically becomes accessible at `http://localhost:4200/` or a similar address.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/angular.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Django App URLs (Python)\nDESCRIPTION: Creates a `urls.py` file within the 'app_name' directory. This file defines the URL patterns specific to this app, mapping the root path ('') to the 'index' view defined in `views.py`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom django.urls import path\nfrom .views import index\n\nurlpatterns = [\n    path('', index, name='index'),\n]\n```\n\n----------------------------------------\n\nTITLE: Using genezio link CLI Command\nDESCRIPTION: The command syntax for using genezio link, including optional project name and log level arguments. This command links the genezio generated SDK to the current working directory, facilitating easier integration between backend and frontend components.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-link.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio link [projectName] [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Run Genezio Local Development Server\nDESCRIPTION: Command to start a local development server for testing the Genezio project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/hello-world.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Using pnpm - Bash\nDESCRIPTION: Installs the Genezio CLI globally via pnpm, an alternative package manager for Node.js. This command makes 'genezio' available globally, similar to npm, and requires pnpm to be previously installed. No other arguments are required, and it is functionally equivalent to the npm method.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using pnpm\nDESCRIPTION: Installs the Genezio Command Line Interface (CLI) globally using the pnpm package manager. This allows the user to execute `genezio` commands from any directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Running the TypeScript & Angular Todo List Locally\nDESCRIPTION: This snippet shows the commands to test the project locally using Genezio and npm. It includes starting the local Genezio server and launching the Angular application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list-angular.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n\n# In a new terminal\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Deploying the React Application using Genezio CLI\nDESCRIPTION: Executes the Genezio deployment command from the project's root directory. This command reads the `genezio.yaml` configuration, runs the specified build scripts (e.g., `npm run build`), and uploads the resulting artifacts (from the `publish` directory) to the Genezio cloud infrastructure, making the React app publicly accessible.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Redeploying the Application after Configuration Changes\nDESCRIPTION: This command is used to redeploy the application to the Genezio cloud after making configuration changes, such as updating authentication settings in `authProvider.ts` or modifying environment variables. It ensures the latest changes are reflected in the live deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Example Genezio Deployment Output (Bash)\nDESCRIPTION: Illustrates the typical output displayed in the terminal after a successful `genezio deploy` command. It provides two key URLs: one for the Genezio application dashboard to manage the project, and another for the live, publicly accessible frontend application. The specific project ID, stage ID, and subdomain will vary for each deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ App Dashboard URL: https://app.genez.io/project/<project-id>/<stage-id>\n$ Frontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally via Package Managers (npm, pnpm, yarn)\nDESCRIPTION: These commands demonstrate how to install the Genezio CLI tool globally using different JavaScript package managers (npm, pnpm, yarn). This installation is a prerequisite for using Genezio to deploy applications.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/angular.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SSR Ports on macOS/Linux\nDESCRIPTION: Example command for setting custom ports for Server-Side Rendered frameworks on macOS or Linux before running the local server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/local.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGENEZIO_PORT_<FRAMEWORK>=<port> genezio local\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection URL in .env File (Fallback)\nDESCRIPTION: Shows an example structure for a `.env` file, defining the `DEMO_DATABASE_URL` environment variable. This variable holds the connection string required by the `PostgresService` to connect to the Postgres database during local testing. The actual URL should be replaced with the one provided by the Genezio dashboard.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-postgres.md#2025-04-23_snippet_2\n\nLANGUAGE: fallback\nCODE:\n```\nDEMO_DATABASE_URL=\"postgres://admin:password@subdomain.region.aws.neon.tech/demo?sslmode=require\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Rewrites in Genezio YAML\nDESCRIPTION: Example of configuring path rewrites in a genezio.yaml file. This snippet shows how to set up a rewrite from one path to another without a redirect status code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nfrontend:\n  rewrites:\n    - from: /old-path\n      to: /new-path\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio SDK via NPM (Shell)\nDESCRIPTION: Demonstrates the command to install the automatically generated Genezio SDK for a TypeScript/JavaScript frontend project using npm. The SDK is fetched from a private Genezio registry, requiring the project name (`<project-name>`) and environment (e.g., 'dev', 'prod').\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Terminal\"\nnpm install @genezio-sdk/<project-name>@1.0.0-<environment>\n```\n```\n\n----------------------------------------\n\nTITLE: Starting the Vue Development Server Locally (Bash)\nDESCRIPTION: Command to run the local development server for the Vue application using npm. This allows testing the application locally before deployment, typically making it available at `http://localhost:5173`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/vue.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: File Operations with Django\nDESCRIPTION: Python implementation of file operations using Django framework. Includes view functions for handling file operations with JSON responses.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django.http import JsonResponse, HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\nfrom pathlib import Path\n\nBASE_DIR = Path(\"/tmp\")\n\n@csrf_exempt\ndef write_file(request):\n    if request.method == \"POST\":\n        try:\n            data = json.loads(request.body)\n            filename = data.get(\"filename\")\n            content = data.get(\"content\")\n\n            if not filename or not content:\n                return JsonResponse({\"error\": \"Invalid request payload\"}, status=400)\n\n            file_path = BASE_DIR / filename\n            file_path.write_text(content, encoding=\"utf-8\")\n\n            return JsonResponse({\"message\": f\"File {filename} written successfully!\"})\n        except Exception as e:\n            return JsonResponse({\"error\": f\"Error writing file: {str(e)}\"}, status=500)\n    return JsonResponse({\"error\": \"Method not allowed\"}, status=405)\n\ndef read_file(request, filename):\n    if request.method == \"GET\":\n        try:\n            file_path = BASE_DIR / filename\n            if not file_path.exists():\n                return JsonResponse({\"error\": \"File not found\"}, status=404)\n\n            content = file_path.read_text(encoding=\"utf-8\")\n            return JsonResponse({\"filename\": filename, \"content\": content})\n        except Exception as e:\n            return JsonResponse({\"error\": f\"Error reading file: {str(e)}\"}, status=500)\n    return JsonResponse({\"error\": \"Method not allowed\"}, status=405)\n```\n\n----------------------------------------\n\nTITLE: Logging in to Genezio\nDESCRIPTION: This command logs in to the Genezio platform, which is required before deploying the project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/hello-world.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI with npm\nDESCRIPTION: Command to install the latest version of Genezio CLI globally using npm package manager.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/install.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI with pnpm\nDESCRIPTION: Command to install the latest version of Genezio CLI globally using pnpm package manager.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/install.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Deploying Project with Genezio CLI (Bash)\nDESCRIPTION: The primary command to deploy the configured project using the Genezio CLI. This command reads the `genezio.yaml` file, packages the application, installs dependencies from `requirements.txt`, and deploys it to the Genezio serverless infrastructure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying the Blockchain Indexer Project with Genezio\nDESCRIPTION: Steps for logging into Genezio and deploying the project to the Genezio infrastructure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/blockchain-app.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying the Remix Project with Genezio (Bash)\nDESCRIPTION: Executes the Genezio CLI command `deploy`. This command reads the `genezio.yaml` configuration, packages the Remix application, and deploys it to the Genezio serverless platform. It may prompt for login/authorization via a web browser.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Testing the Fastify App Locally with Genezio (Bash)\nDESCRIPTION: Executes the `genezio local` command in the terminal within the project directory. This command simulates the Genezio cloud environment locally, allowing developers to test their Fastify application's behavior before deploying it.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI with yarn\nDESCRIPTION: Command to install the latest version of Genezio CLI globally using yarn package manager.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/install.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add genezio\n```\n\n----------------------------------------\n\nTITLE: Logging into Genezio\nDESCRIPTION: Initiates the authentication process for the Genezio platform via the command line using `genezio login`. This step is necessary before deploying the project to the Genezio cloud infrastructure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngenezio login\n```\n\n----------------------------------------\n\nTITLE: Running Django Development Server (Bash)\nDESCRIPTION: Starts the built-in Django development server for local testing. This allows developers to view the application in a web browser at http://localhost:8000 before deployment. Commands are provided for Windows, Linux, and macOS.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\npython manage.py runserver\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Linux / macOS\npython3 manage.py runserver\n```\n\n----------------------------------------\n\nTITLE: Running Streamlit Application Locally - Bash\nDESCRIPTION: Starts the Streamlit development server to run a specific app file. Requires the streamlit package to be installed and an app file (typically app.py) present in the directory. The web app will be available at a local web address (default: http://localhost:8501). The main parameter is the filename of the Python Streamlit app to launch.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nstreamlit run app.py\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachments to Emails in TypeScript\nDESCRIPTION: Extends the sendEmail method to include file attachments in the email. This example demonstrates how to add a text file attachment to the email.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/email-service.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync sendEmail(email: string, subject: string, message: string) {\n    const response = await MailService.sendMail({\n      emailServiceToken: process.env.EMAIL_SERVICE_TOKEN!,\n      to: email,\n      subject: subject,\n      text: message,\n      attachments: [\n        {\n          filename: \"attachment.txt\",\n          content: \"Hello world attachment!\",\n        },\n      ],\n    });\n\n    if (!response.success) {\n      return response.errorMessage;\n    }\n\n    return \"success\";\n  }\n```\n\n----------------------------------------\n\nTITLE: Using the genezio local Command\nDESCRIPTION: The base command syntax for running a Genezio project locally, including all available options for customizing port, environment files, dependency installation, and logging levels.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/local.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local [-p, --port <port>] [--env <envFile>] [--install-deps] [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Deploying to Genezio\nDESCRIPTION: Commands for logging into Genezio and deploying the project to production.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/webhook.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Updating Genezio CLI with yarn\nDESCRIPTION: This command updates the globally installed Genezio CLI to the latest version using yarn package manager.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/update.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn global upgrade genezio\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally\nDESCRIPTION: Commands to install the Genezio command-line interface globally using different package managers (npm, pnpm, yarn). This CLI is required to interact with the Genezio platform for deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/vue.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name in Genezio YAML Configuration - YAML\nDESCRIPTION: This snippet demonstrates how to specify the unique and required project name using the 'name' property in genezio.yaml. The project name must start with a letter and contain only letters, numbers, and hyphens, ensuring account-level uniqueness. This field is essential for project identification and deployment referencing in Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: project-name\n```\n\n----------------------------------------\n\nTITLE: Exporting an AWS Lambda Handler in TypeScript\nDESCRIPTION: Example of how to export a handler function for AWS Lambda deployment in TypeScript, which is referenced by the 'handler' field in the genezio.yaml configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myHandler = async (event, context) => {\n  // Your code here\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Nuxt.js Starter Project via Shell Command\nDESCRIPTION: This command sets up a Genezio project utilizing the Nuxt.js starter template. It uses the `nuxt` subcommand and allows specification of the project name, region, file system path for the project, and the desired log level for command output.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create nuxt [--name <project-name>] [--region <project-region>] [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Using Genezio Deploy Command in CLI\nDESCRIPTION: The main command for deploying applications to Genezio infrastructure. Supports deploying both backend and frontend components with various configuration options including environment selection, subdomain specification, and dependency management.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/deploy.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy [--backend] [--frontend] [--stage <stage_name>] [--env <envFile>] [--subdomain <subdomain>] [--installDeps] [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Cloning Genezio Examples Repository\nDESCRIPTION: Git command to clone the repository containing Genezio example projects.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/cron.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Running Genezio Local Server on a Custom Port (macOS/Linux Bash)\nDESCRIPTION: Sets the `GENEZIO_PORT_REMIX` environment variable inline for the duration of the command and then starts the Genezio local development server using `genezio local`. This is the syntax for Unix-like shells (bash, zsh) commonly found on macOS and Linux.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nGENEZIO_PORT_REMIX=<port> genezio local\n```\n\n----------------------------------------\n\nTITLE: Starting the Client Application Locally\nDESCRIPTION: Navigates into the `client` directory, installs the locally generated SDK using `npm run install-local-sdk`, and then starts the client-side web application using `npm start`. This typically opens the application in a web browser, connecting to the locally running Genezio backend.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd ./client\\nnpm run install-local-sdk\\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally using pnpm\nDESCRIPTION: Installs the Genezio CLI globally using the pnpm package manager. This provides an alternative to npm for installing Genezio system-wide, making the `genezio` command accessible from any directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Deploying the TypeScript & Angular Todo List with Genezio\nDESCRIPTION: This snippet provides the commands to log in to Genezio and deploy the project to the Genezio infrastructure using the Genezio CLI.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list-angular.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Navigating to Webhook Directory\nDESCRIPTION: Command to change directory to the webhook example folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/webhook.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/javascript/webhook\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI\nDESCRIPTION: Command to install the Genezio CLI tool globally using npm\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/frontend.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g genezio\n```\n\n----------------------------------------\n\nTITLE: Deploying Refine App to Genezio Cloud - Bash\nDESCRIPTION: Deploys the current Refine application to the Genezio cloud environment. Before running, stop any local genezio sessions. Dependencies include a configured Genezio project and internet access. Upon completion, URLs for the deployed app and dashboard are output to the terminal for immediate access and testing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/refine.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Exposing Local Server with Ngrok - Bash Command\nDESCRIPTION: Provides the bash command to create a public URL for a local Genezio server using ngrok. This is used to make the webhook endpoint accessible to external systems, such as Qstash, during local development or testing. No dependencies other than ngrok are required. Modify the port if your local server runs on a different port.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/upstash-qstash.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nngrok http http://localhost:8083\n\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally using npm\nDESCRIPTION: Installs the Genezio CLI globally using the Node Package Manager (npm). This makes the `genezio` command available system-wide and is a prerequisite for deploying applications with Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: Command to change directory to the webhook example folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/webhook-example.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/typescript/webhook\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Types Library - npm - shell\nDESCRIPTION: Demonstrates how to add the @genezio/types package to a JavaScript or TypeScript project using npm. This library is necessary to access and use Genezio decorators in your code base. Run this command in your project root; a successful install allows you to import decorators like GenezioDeploy and GenezioMethod.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-decorators.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm add @genezio/types\n```\n\n----------------------------------------\n\nTITLE: Storage Size Configuration in Genezio\nDESCRIPTION: YAML configuration example for customizing the storage size in Genezio functions. Shows how to set a custom storage size of 256MB.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\n  functions:\n    - name: my-function\n      path: ./\n      handler: handler\n      entry: app.mjs\n      storageSize: 256 # in MB\n```\n\n----------------------------------------\n\nTITLE: Testing the Blockchain Indexer Project Locally\nDESCRIPTION: Commands for running the Genezio local server and starting the React frontend application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/blockchain-app.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n\n# In a new terminal\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally using Yarn\nDESCRIPTION: Installs the Genezio CLI globally using the Yarn package manager. This offers another alternative package manager for installing Genezio system-wide, ensuring the `genezio` command is globally available.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI via Package Managers\nDESCRIPTION: Commands to install the Genezio command-line interface globally using npm, pnpm, or yarn. This is a prerequisite for deploying applications with Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI with NPM - Bash\nDESCRIPTION: Installs the Genezio CLI globally using npm, which is required to interact with the Genezio deployment platform. Prerequisite: Node.js and npm must be installed on your machine. This command enables all subsequent genezio commands for project management and deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands for Genezio\nDESCRIPTION: Commands to log in to Genezio and deploy the project to production\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Using Genezio Logout Command in CLI\nDESCRIPTION: Command syntax for logging out of Genezio account using the CLI. The command removes access tokens from ~/.geneziorc and supports optional log level configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/logout.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio logout [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Listing Common Genezio CLI Commands\nDESCRIPTION: Displays a summary table of frequently used Genezio CLI commands, including installing Genezio globally (`npm install -g genezio`), logging in (`genezio login`), running locally (`genezio local`), deploying (`genezio deploy`), and accessing help (`genezio --help`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n| Command                  | Action                       |\\n| ------------------------ | ---------------------------- |\\n| `npm install -g genezio` | Installs genezio globally    |\\n| `genezio login`          | Logs in to genezio           |\\n| `genezio local`          | Starts a local server        |\\n| `genezio deploy`         | Deploys a production project |\\n| `genezio --help`         | Get help using genezio       |\n```\n\n----------------------------------------\n\nTITLE: Deploying the Genezio Project - Bash\nDESCRIPTION: Deploys the configured genezio project to the cloud using the genezio CLI. Precondition is that all code, configuration, and environment variables are properly set up. This command will make the backend services accessible via their cloud endpoints and integrates all previously configured integrations like Redis.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-redis-upstash.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Types Library - yarn - shell\nDESCRIPTION: Explains how to install the @genezio/types library using yarn package manager. This command is required for using Genezio decorators in supported projects. After installation, you can import the decorators into your code to configure deployment behaviors.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-decorators.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @genezio/types\n```\n\n----------------------------------------\n\nTITLE: Starting Genezio Local Development Server - Bash\nDESCRIPTION: This command starts the local genezio development server for backend code. Requires genezio to be installed via npm and for the user to be in the project directory containing genezio.yaml. It launches the backend locally to enable testing and integration with the frontend.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: File Operations with Flask\nDESCRIPTION: Python implementation of file operations using Flask framework. Provides REST endpoints for reading and writing files with error handling.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request, jsonify, abort\nfrom pathlib import Path\n\napp = Flask(__name__)\nBASE_DIR = Path(\"/tmp\")\n\n# Write data to a file\n@app.route(\"/write\", methods=[\"POST\"])\ndef write_file():\n    data = request.get_json()\n    if not data or \"filename\" not in data or \"content\" not in data:\n        abort(400, description=\"Invalid request payload\")\n\n    filename = data[\"filename\"]\n    content = data[\"content\"]\n    file_path = BASE_DIR / filename\n\n    try:\n        file_path.write_text(content, encoding=\"utf-8\")\n        return jsonify({\"message\": f\"File {filename} written successfully!\"})\n    except Exception as e:\n        abort(500, description=f\"Error writing file: {str(e)}\")\n\n# Read data from a file\n@app.route(\"/read/<filename>\", methods=[\"GET\"])\ndef read_file(filename):\n    file_path = BASE_DIR / filename\n\n    try:\n        if not file_path.exists():\n            abort(404, description=\"File not found\")\n        content = file_path.read_text(encoding=\"utf-8\")\n        return jsonify({\"filename\": filename, \"content\": content})\n    except Exception as e:\n        abort(500, description=f\"Error reading file: {str(e)}\")\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=3000, debug=True)\n```\n\n----------------------------------------\n\nTITLE: Cloning the Svelte Starter Template Repository (Bash)\nDESCRIPTION: Clones a forked Svelte starter template repository from GitHub using Git and changes the current directory into the newly cloned project folder. `YOUR_REPO_URL` must be replaced with the actual URL of the user's forked repository. Requires Git to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone YOUR_REPO_URL\ncd svelte-getting-started\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally - npm - Bash\nDESCRIPTION: Installs the Genezio CLI globally using npm, allowing command-line access to Genezio for project analysis and deployment. Requires npm to be installed and available in your environment. There are no arguments needed other than the -g global flag; expected output is the CLI executable accessible system-wide. Only works in environments with Node.js and npm configured.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Using the genezio account command in CLI\nDESCRIPTION: The command shows information about the authenticated user using the genezio token stored in the keychain. It indicates if no account is connected and supports various log level options.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/account.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio account [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Initializing Genezio Configuration for Nest.js\nDESCRIPTION: This command analyzes the Nest.js project in the current directory and automatically generates a `genezio.yaml` configuration file required for deployment with Genezio. It should be run in the root directory of the Nest.js application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio analyze\n```\n\n----------------------------------------\n\nTITLE: React Component Import for Documentation\nDESCRIPTION: Imports the DocCardList component from the theme to display a list of documentation cards for feature navigation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Nitro.js Starter Project via Shell Command\nDESCRIPTION: This command bootstraps a Genezio project using the Nitro.js starter template. It requires the `nitrojs` subcommand and accepts parameters for the project name, deployment region, creation path, and output verbosity (log level).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create nitrojs [--name <project-name>] [--region <project-region>] [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Running Genezio Locally with Custom Environment File using CLI\nDESCRIPTION: This command starts the Genezio local development environment using `genezio local`. It specifies a custom path for the `.env` file using the `--env` flag, overriding the default behavior of searching for `.env` in the `backend.path` directory. This allows loading specific environment variables for local testing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/backend-environment-variables.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# E.G. genezio local --env backend/.env\ngenezio local --env <your-env-file-path>\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio via Yarn - Bash\nDESCRIPTION: Installs Genezio CLI globally using Yarn. Ensure Yarn is installed before running the command. The global installation provides access to the 'genezio' command-line interface across your environment. No options or configuration required beyond a working Yarn setup.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/refine.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio via NPM - Command Line (bash)\nDESCRIPTION: This command installs the Genezio CLI tool globally using NPM, enabling access to genezio commands such as 'genezio deploy'. Prerequisite: Node.js and NPM must be installed. Run in a terminal. No input or output beyond standard NPM process messages.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: HTML Head Configuration\nDESCRIPTION: Sets the HTML page title for the features documentation section.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<head>\n  <title>Features | Genezio Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Cloning and Entering Ember Template Repo - Bash\nDESCRIPTION: Clones the Ember template repository from GitHub to local disk and navigates into the project directory. Requires git to be installed and authentication for GitHub if accessing a private repo. Replace 'YOUR_REPO_URL' with your own forked repository. It prepares a local environment for further development and deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone YOUR_REPO_URL\ncd ember-getting-started\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using pnpm\nDESCRIPTION: Installs the Genezio command-line interface globally using the pnpm package manager. This is an alternative installation method, requiring pnpm to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Testing Project Locally with Genezio\nDESCRIPTION: Runs the Genezio project locally using the `genezio local` command. This starts a local development server, allowing developers to test the backend and frontend interaction before deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Subdomain in genezio.yaml (YAML)\nDESCRIPTION: Illustrates how to specify a custom subdomain for the deployed Next.js application within the `genezio.yaml` configuration file. The `subdomain` field under the `nextjs` section allows overriding the default auto-generated subdomain.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nnextjs:\n  path: .\n  subdomain: my-custom-subdomain\n```\n\n----------------------------------------\n\nTITLE: Logging into Genezio Cloud via CLI\nDESCRIPTION: Authenticates the user with the Genezio cloud services using the installed Genezio CLI. This step is required for deploying applications but can be skipped for local testing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\n```\n\n----------------------------------------\n\nTITLE: Creating a Nitro Project with Genezio\nDESCRIPTION: Uses the Genezio CLI to create a new Nitro project named 'nitro-project' in the 'us-east-1' region, setting it as the default project. This command scaffolds a basic Nitro application structure integrated with Genezio configuration, suitable for users starting fresh.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio create nitrojs --name nitro-project --region us-east-1 --default\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Overview - Plaintext\nDESCRIPTION: This snippet displays the structure of the genezio todo list project, illustrating the separation between server and client, configuration, and documentation files. No dependencies are required. The structure helps new users quickly understand where to find and place backend, frontend, and infrastructure files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/getting-started.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── task.ts\n│   ├── package.json\n│   └── tsconfig.json\n├── client/\n│   ├── src\n│   ├── package.json\n|   └── tsconfig.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI App (Linux/Mac) - Bash\nDESCRIPTION: Runs the FastAPI application using python3 on Linux or MacOS. Assumes virtual environment is activated and index.py is present.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython3 index.py\n\n```\n\n----------------------------------------\n\nTITLE: Linking a Client Repository to a Genezio Project\nDESCRIPTION: This command links the current client repository directory to a specified Genezio project (`<project-name>`). This is necessary for external frontend clients not defined in `genezio.yaml` so that `genezio local` can automatically install the SDK. The link information is stored in `~/.genezio/geneziolinks`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/generated-sdk.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n```sh title=\"Terminal\"\ngenezio link <project-name>\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Command to install npm dependencies for both client and server components of the webhook project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/webhook.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(cd server && npm install) && (cd client && npm install)\n```\n\n----------------------------------------\n\nTITLE: Deploying with Environment Variables - Bash\nDESCRIPTION: This Genezio CLI command deploys the project and uploads an environment variables file by specifying its path. Used for securely configuring environment variables required by the app. You only need to deploy environment variables once unless changes are made.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --env <path-to-your-env-file>\n```\n\n----------------------------------------\n\nTITLE: Navigate to Hello World Project Directory\nDESCRIPTION: Command to change directory to the Hello World example project folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/hello-world.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/javascript/hello-world\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using pnpm\nDESCRIPTION: This command installs the `genezio` command-line interface globally using the pnpm package manager. The `-g` flag ensures it's available system-wide.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Testing Project Locally\nDESCRIPTION: Command to start the local development server using genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/webhook.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Disabling Genezio CLI Telemetry on Linux/MacOS – Bash\nDESCRIPTION: Disables telemetry for the Genezio CLI by setting the GENEZIO_NO_TELEMETRY environment variable to 1. Should be run in a Linux or MacOS shell prior to using genezio commands. This setting applies only to the current shell session unless added to a shell profile. Input is exported variable; there is no output unless you run genezio CLI afterwards.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport GENEZIO_NO_TELEMETRY=1\n```\n\n----------------------------------------\n\nTITLE: Cloning the Starter React Project with Git\nDESCRIPTION: This command uses Git to download (clone) the source code for the `genezio-react-google-oauth` example project from its GitHub repository. This repository provides the initial React application structure that will be subsequently modified in the tutorial to add Google authentication. Requires Git to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-google-oauth.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-react-google-oauth.git\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using npm\nDESCRIPTION: Installs the Genezio command-line interface globally using the Node Package Manager (npm). This command is required to interact with the Genezio platform for deployment and other tasks. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Project Structure for TypeScript Todo List\nDESCRIPTION: This code snippet shows the directory structure of the TypeScript todo list project. It includes server-side files, client-side files, and configuration files for Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── models/\n│   ├── helper.ts\n│   ├── task.ts\n│   ├── user.ts\n│   ├── package.json\n│   └── tsconfig.json\n├── client/\n│   ├── src/\n│   ├── package.json\n|   └── tsconfig.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Cloning the React-Admin Template Repository\nDESCRIPTION: These commands first clone the specified Git repository (users should replace `YOUR_REPO_URL` with their forked repository URL) and then change the current working directory into the newly cloned `react-admin-getting-started` folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone YOUR_REPO_URL\ncd react-admin-getting-started\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Port for Local Nuxt Development (macOS/Linux) - Bash\nDESCRIPTION: Runs the Nuxt app locally on a specified port for macOS/Linux users by setting the GENEZIO_PORT_NUXT environment variable inline with the command. This method lets you quickly test using different ports without editing configuration files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGENEZIO_PORT_NUXT=<port> genezio local\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally via yarn (Bash)\nDESCRIPTION: Installs the Genezio command-line interface (CLI) globally using the yarn package manager. This command ensures the `genezio` tool is available system-wide in the terminal.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Example Output After Successful Genezio Deployment (Bash)\nDESCRIPTION: Illustrates the expected output in the terminal after a successful `genezio deploy` command. It provides the URL for the Genezio project dashboard and the public URL where the deployed frontend can be accessed. Placeholders like `<project-id>`, `<stage-id>`, and `<subdomain>` represent dynamic values.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/vue.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ App Dashboard URL: https://app.genez.io/project/<project-id>/<stage-id>\n$ Frontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Using npm - Bash\nDESCRIPTION: This code installs the Genezio CLI globally via npm, enabling deployment and management of projects using Genezio. Requires npm to be previously installed (Node.js environment). Once installed, the 'genezio' command becomes available system-wide. No additional parameters are required; simply runs a global install command.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands for Genezio\nDESCRIPTION: Commands to test the project locally, including starting the Genezio local server and React application\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Deploying Project with Genezio - Bash\nDESCRIPTION: This command deploys the current project to the Genezio cloud infrastructure using the genezio CLI. The user should be logged in, and the project must contain a valid genezio.yaml configuration file. On execution, the project backend is published and available remotely to clients.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Container with Genezio CLI\nDESCRIPTION: Command to deploy a Docker container using the Genezio CLI. This initiates a wizard that guides through project setup and deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/serverless-containers.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Google OAuth Library for React\nDESCRIPTION: This command uses npm to install the `@react-oauth/google` library and add it as a dependency to the React client application, specifically within the `client/` folder of the project. This library is essential for implementing the Google Sign-In button and handling the OAuth flow on the frontend. Requires Node.js and npm, and should be run inside the `client` directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-google-oauth.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @react-oauth/google\n```\n\n----------------------------------------\n\nTITLE: Cloning Subdirectory with Genezio Deploy URL\nDESCRIPTION: This snippet shows the URL format for cloning a specific subdirectory of a GitHub repository using the Genezio Deploy button. It uses the base_path parameter to specify the subdirectory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/genezio-deploy-button.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://app.genez.io/start/deploy?repository=<your_url>&base_path=examples/hello\n```\n\n----------------------------------------\n\nTITLE: Starting Frontend Development Server\nDESCRIPTION: Command to start the frontend development server for local testing, run from the client directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Using genezio login Command in Bash\nDESCRIPTION: This command is used to log into the Genezio platform. It can be run with or without an access token, and supports additional options for log level and help.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/login.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login <accessToken> [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally using Yarn (Bash)\nDESCRIPTION: Installs the Genezio command-line interface globally on the system using the Yarn package manager. This is another alternative prerequisite step for using Genezio commands.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Deploying to a Specific Environment in Genezio\nDESCRIPTION: Command to deploy a Genezio project to a specified environment. The --stage flag determines which environment to use, and if it doesn't exist, it will be created during deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/deployment-environments.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --stage <stage-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using yarn\nDESCRIPTION: Installs the Genezio command-line interface globally using the yarn package manager (Classic or Berry). This is another alternative installation method, requiring yarn to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Deploying Your Project to Genezio - Bash\nDESCRIPTION: Executes deployment of a prepared project with the Genezio CLI. Requires a complete genezio.yaml and requirements.txt in the project root. The process will prompt for authentication if required, uploading app code and configuration to the Genezio platform. No arguments beyond 'deploy' are needed; output includes deployed app URLs and dashboard links. Fails if dependencies or configuration are missing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Using pnpm – Shell\nDESCRIPTION: Installs the Genezio CLI globally using pnpm. Prerequisites include Node.js and pnpm being installed. Running this command will make the genezio CLI available system-wide. No additional options are needed. If pnpm is not set up for global install, you may need admin rights.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Local Testing Commands\nDESCRIPTION: Commands for testing the project locally, including starting the Genezio server and running the client application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/webhook-example.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run build && npm start\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using Yarn\nDESCRIPTION: This command installs the `genezio` command-line interface globally using the Yarn package manager. The `global` keyword ensures it's available system-wide.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands\nDESCRIPTION: Commands for logging into Genezio and deploying the application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/crud-application.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using npm\nDESCRIPTION: Installs the Genezio command-line interface globally using the Node Package Manager (npm). This command requires Node.js and npm to be installed and makes the `genezio` command available system-wide.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Email Service Package\nDESCRIPTION: NPM command to install the @genezio/email-service package, which is required for using the Genezio email service in your project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/email-service.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio/email-service\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Functions on macOS/Linux\nDESCRIPTION: Example command for setting custom ports for specific functions on macOS or Linux before running the local server. Function names with hyphens are converted to underscores.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/local.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nGENEZIO_PORT_FUNCTION_<FUNCTION>=<port> genezio local\n```\n\n----------------------------------------\n\nTITLE: Using genezio sdk Command in Bash\nDESCRIPTION: Command usage for generating an SDK with genezio. It allows specifying project name, stage, source, language, region, output, and type. Additional options for log level and help are available.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/generatesdk.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio sdk <projectName> --stage <stage> --source <source> --language <js/ts/dart> --region <region> --output <output> --type <type> [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI via pnpm - Bash\nDESCRIPTION: Adds the genezio CLI tool globally via pnpm, an alternative JavaScript package manager. Be sure pnpm is available on your system. The command affects global pnpm environment and the CLI is accessible after the command completes.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Deploying with Genezio CLI and Environment Variables - Bash\nDESCRIPTION: Deploys the project to Genezio while also uploading custom environment variables from a specified file. Use this when your FastAPI app relies on environment variables. Only needs to be run once if env vars are stable.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --env <path-to-your-env-file>\n\n```\n\n----------------------------------------\n\nTITLE: Running Ember App Locally - Bash\nDESCRIPTION: Starts the local Ember.js development server using the Ember CLI. Requires installation of Ember CLI and all project dependencies. Runs the app for real-time development at http://localhost:4200/. Command outputs live updating web server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nember serve\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio via PNPM - Bash\nDESCRIPTION: Installs the Genezio CLI globally via the PNPM package manager. Make sure PNPM is installed beforehand. This command allows you to use 'genezio' CLI commands globally for your projects. No arguments are required; the step is prerequisite for following deployment commands.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/refine.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Login and Deploy to Genezio\nDESCRIPTION: Commands to log in to Genezio and deploy the project to production.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/hello-world.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Genezio Project\nDESCRIPTION: This command deploys the TypeScript Hello World project to the Genezio infrastructure from the project's root directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/hello-world.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI via npm - Bash\nDESCRIPTION: Installs the genezio CLI tool globally using npm for managing deployment and project setup. Requires Node.js and npm to be installed on your system. Use in terminal prior to project initialization or deployment. The only parameter is the package name. Output is a global CLI tool accessible via the command line.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands\nDESCRIPTION: Commands for deploying the Stripe integration project to Genezio infrastructure, including login and deployment steps.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/stripe-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project - Bash\nDESCRIPTION: This Bash command initializes a new Node.js project in the current directory by creating a default package.json. Required for setting up an Express.js app before further dependency installation. No input or parameters required; output is a package.json file.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Handling Authentication Errors in Genezio\nDESCRIPTION: Example of how to handle authentication errors in Genezio applications using error codes. This snippet shows how to check for specific error codes and display appropriate messages to users.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ErrorCode } from \"@genezio/auth\";\n\nswitch (error.code) {\n  case ErrorCode.EMAIL_ALREADY_EXISTS:\n    alert(\"This email is already in use\");\n    break;\n  case ErrorCode.PASSWORD_TOO_SHORT:\n    alert(\"The password is too short\");\n    break;\n  default:\n    alert(\"An error occurred\");\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Using genezio pull Command in Bash\nDESCRIPTION: This command is used to pull an existing project from the genezio platform. It downloads the project's files and adds them to the specified path. The command requires a genezio.yaml file in the execution path and will overwrite existing files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-pull.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio pull [--stage <project-stage>] [--logLevel <log-level>] [-h | --help] path\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally using npm (Bash)\nDESCRIPTION: Installs the Genezio command-line interface globally on the system using the Node Package Manager (npm). This is a prerequisite for using Genezio commands.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally via pnpm (Bash)\nDESCRIPTION: Installs the Genezio command-line interface (CLI) globally using the pnpm package manager. This allows the `genezio` command to be run from any location in the system.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js Project (Bash)\nDESCRIPTION: Initializes a new Node.js project using npm with default settings by creating a `package.json` file. This command sets up the basic structure needed before adding JavaScript code for a Genezio function.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment (Bash)\nDESCRIPTION: Activates the previously created Python virtual environment. This ensures that subsequent Python and pip commands operate within the isolated environment. Commands are provided for Windows, Linux, and macOS.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\n.\\venv\\Scripts\\activate\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Linux / macOS\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running a Remix Development Server (Bash)\nDESCRIPTION: Navigates into the newly created Remix project directory (`my-remix-app`) and starts the local development server using the `dev` script defined in `package.json`. This is used to test the basic Remix app locally.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd my-remix-app\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application with Genezio CLI (Bash)\nDESCRIPTION: Executes the deployment process using the Genezio CLI. This command reads the `genezio.yaml` configuration file in the current directory, builds the frontend (if configured), and deploys the application (frontend and any potential backend) to the Genezio cloud infrastructure. Requires prior installation and login via the Genezio CLI.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Google OAuth and Genezio Auth (Bash)\nDESCRIPTION: This command uses npm (Node Package Manager) to install the required libraries for implementing Google OAuth 2.0 authentication alongside Genezio Auth in a client-side React application. It installs both `@genezio/auth` for Genezio services and `@react-oauth/google` for Google OAuth integration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio/auth @react-oauth/google\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands\nDESCRIPTION: Commands for deploying the project to Genezio infrastructure, including login and deployment steps.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/multiversx-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Basic Genezio CLI Command Usage\nDESCRIPTION: Shows the basic command syntax for checking genezio version and accessing help options. The command can be run with either -v/--version to check the installed version or -h/--help to view available commands and options.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio [-v | --version] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: User Struct Definition (Go)\nDESCRIPTION: Go struct definition for the User type provided by the Genezio auth package, containing authentication and profile information.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n\tEmail             *string                 `json:\"email\"`\n\tUserId            string                  `json:\"userId\"`\n\tAuthProvider      string                  `json:\"authProvider\"`\n\tCreatedAt         time.Time               `json:\"createdAt\"`\n\tVerified          *bool                   `json:\"verified\"`\n\tName              *string                 `json:\"name\"`\n\tAddress           *string                 `json:\"address\"`\n\tProfilePictureUrl *string                 `json:\"profilePictureUrl\"`\n\tCustomInfo        *map[string]interface{} `json:\"customInfo\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Frontend\nDESCRIPTION: Command to deploy a specific frontend using the --name flag\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/frontend.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --frontend --name frontend1\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Using yarn – Shell\nDESCRIPTION: Installs the Genezio CLI globally using yarn. Requires Node.js and yarn installed on your machine. After execution, genezio CLI becomes globally accessible in your environment. Yarn's global installation may require additional setup depending on your system.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn global add genezio\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using yarn\nDESCRIPTION: Installs the Genezio command-line interface globally using the Yarn package manager. This is another alternative installation method for users preferring Yarn. Requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment (Bash)\nDESCRIPTION: Creates a Python virtual environment named 'venv' within the project directory. This isolates project dependencies. Commands are provided for Windows, Linux, and macOS.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Windows\npython -m venv venv\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Linux / macOS\npython3 -m venv venv\n```\n\n----------------------------------------\n\nTITLE: Running Flask Development Server (Cross-Platform)\nDESCRIPTION: Commands to start the Flask development server locally for testing. It uses `python` on Windows and `python3` on Linux/Mac to execute the `index.py` script.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython index.py\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 index.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Genezio Deploy Button in Markdown\nDESCRIPTION: This snippet shows how to add a Genezio Deploy button in Markdown format. It includes the button image and a link to the Genezio deployment page with a specific GitHub repository.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/genezio-deploy-button.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Genezio Deploy](https://raw.githubusercontent.com/Genez-io/graphics/main/svg/deploy-button.svg)](https://app.genez.io/start/deploy?repository=https://github.com/Genez-io/express-getting-started)\n```\n\n----------------------------------------\n\nTITLE: Running Nest.js Locally with Genezio\nDESCRIPTION: This command starts the Nest.js application locally using Genezio's local development environment. It simulates the Genezio cloud environment for testing purposes before deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally using pnpm (Bash)\nDESCRIPTION: Installs the Genezio command-line interface globally on the system using the pnpm package manager. This is an alternative prerequisite step for using Genezio commands.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Running the TypeScript Todo List Project Locally\nDESCRIPTION: These commands demonstrate how to test the project locally using Genezio and start the React client application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n\n# In a new terminal\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands\nDESCRIPTION: Commands for deploying the webhook project to Genezio infrastructure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/webhook-example.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\n```\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example App Repository - Command Line (bash)\nDESCRIPTION: This command clones the provided GitHub repository containing the Genezio React Auth template. It requires Git to be installed. Outputs a new directory 'genezio-react-auth'.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-react-auth.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Genezio Examples Repository\nDESCRIPTION: This bash command clones the Genezio examples repository, which contains the TypeScript Hello World project along with other examples.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/hello-world.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Types Library - pnpm - shell\nDESCRIPTION: Shows the pnpm command to add @genezio/types, enabling decorator support for Genezio features in TypeScript or JavaScript. Ensure pnpm is installed; run this in your project directory to enable importing decorators.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/genezio-decorators.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add @genezio/types\n```\n\n----------------------------------------\n\nTITLE: Installing Flask and Generating requirements.txt (Bash)\nDESCRIPTION: Bash commands using pip3 to install the Flask framework and then freeze the current environment's package list into a `requirements.txt` file. This file is used by Genezio during deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip3 install Flask\npip3 freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Upstash Redis Dependency (Bash)\nDESCRIPTION: This Bash command installs the `@upstash/redis` npm package, which is required to interact with Upstash Redis databases from a Node.js or TypeScript project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/upstash-redis.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm install @upstash/redis\n```\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment (Linux/Mac) - Bash\nDESCRIPTION: Activates the Python virtual environment on Linux or MacOS. Use this before installing Python packages to ensure isolation. Run from the project root.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Genezio Deploy Button in HTML\nDESCRIPTION: This snippet demonstrates how to add a Genezio Deploy button using HTML. It creates a clickable image that links to the Genezio deployment page with a specific GitHub repository.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/genezio-deploy-button.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://app.genez.io/start/deploy?repository=https://github.com/Genez-io/express-getting-started\">\n  <img src=\"https://raw.githubusercontent.com/Genez-io/graphics/main/svg/deploy-button.svg\" alt=\"Genezio Deploy\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment (Cross-Platform)\nDESCRIPTION: Commands to activate the previously created Python virtual environment. Different commands are required for Windows (`.\\venv\\Scripts\\activate`) and Linux/Mac (`source venv/bin/activate`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.\\venv\\Scripts\\activate\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running the Next.js Project Locally with Genezio CLI (Bash)\nDESCRIPTION: Executes the Next.js application locally using the Genezio CLI, facilitating development and testing. The port used can be customized by setting the `GENEZIO_PORT_NEXTJS` environment variable.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Basic Genezio CLI Usage Pattern\nDESCRIPTION: Shows the basic command structure for using the Genezio CLI. Includes options for version checking, help documentation, and executing specific commands with arguments.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio [-v | --version] [-h | --help] <command> [<args>]\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands\nDESCRIPTION: Commands for logging into Genezio and deploying the project to production.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/chatgpt-project.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Running Genezio Local Server\nDESCRIPTION: This command starts a local Genezio server for testing the TypeScript Hello World project before deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/hello-world.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI via yarn - Bash\nDESCRIPTION: Installs the genezio CLI globally using yarn, which should be installed in advance. This provides access to the genezio CLI commands globally through your system shell. Command parameters are the 'global' installation directive and the package name.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Updating Github Actions to Use Stable Tag - YAML - yaml\nDESCRIPTION: This Github Actions YAML shows the corrected way to reference the Genezio Github Action for CI/CD deployment post-CLI v1 release. It replaces the `@main` branch with the stable `@v1` tag for better reliability and forwards compatibility. The `token` parameter must be set from Github secrets; this ensures secure workflow execution.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/upgrading-to-v1.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# diff-remove\\n- uses: Genez-io/genezio-github-action@main\\n  # diff-add\\n- uses: Genez-io/genezio-github-action@v1\\n  with:\\n    token: ${{ secrets.GENEZIO_TOKEN }}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application to Genezio Cloud\nDESCRIPTION: This command initiates the deployment process of the entire application (frontend and backend) to the Genezio serverless cloud infrastructure. It handles packaging, uploading, and provisioning the necessary resources.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Django App with Genezio CLI (Bash)\nDESCRIPTION: Uses the Genezio CLI to deploy the configured Django application to the Genezio serverless platform. The first command performs a standard deployment. The second command shows how to deploy with environment variables specified in a separate file. Requires prior login and authorization.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy --env <path-to-your-env-file>\n```\n\n----------------------------------------\n\nTITLE: Creating Django Project Structure (Bash)\nDESCRIPTION: Initializes a new Django project named 'project_name' within the current directory. This command sets up the basic file structure and configuration files for a Django project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndjango-admin startproject project_name .\n```\n\n----------------------------------------\n\nTITLE: Running Genezio Local Server on a Custom Port (Windows Batch)\nDESCRIPTION: Sets the `GENEZIO_PORT_REMIX` environment variable to a specified port and then starts the Genezio local development server using the `genezio local` command. This is the syntax for Windows Command Prompt (cmd.exe).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_9\n\nLANGUAGE: batch\nCODE:\n```\nset GENEZIO_PORT_REMIX=<port> && genezio local\n```\n\n----------------------------------------\n\nTITLE: Running the Remix App Locally with Genezio (Bash)\nDESCRIPTION: Starts a local development server using the Genezio CLI command `local`. This command runs the Remix application in an environment that simulates the Genezio deployment, typically on a random available port.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Repository Cloning Commands\nDESCRIPTION: Commands for cloning the example repository and navigating to the project directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/chatgpt-project.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\ncd ./genezio-examples/javascript/chatgpt-project\n```\n\n----------------------------------------\n\nTITLE: Deploying the TypeScript Todo List Project with Genezio\nDESCRIPTION: These commands show how to log in to Genezio and deploy the project to the Genezio infrastructure.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using yarn\nDESCRIPTION: Installs the Genezio Command Line Interface (CLI) globally using the Yarn package manager. This allows the user to execute `genezio` commands from any directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Deploying the Ember Application to Genezio - Bash\nDESCRIPTION: Deploys the current app to the Genezio cloud using the genezio CLI. Requires properly configured genezio.yaml and all project files. On success, outputs dashboard and frontend URLs. Run this in your project root directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Deployment Commands for Shopping Cart Project\nDESCRIPTION: Commands for logging into Genezio and deploying the shopping cart application to production.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/shopping-cart.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Fastify Dependency (Bash)\nDESCRIPTION: Installs the Fastify framework package using npm and adds it as a dependency to the Node.js project defined in `package.json`. This command downloads and saves the necessary Fastify library files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i fastify\n```\n\n----------------------------------------\n\nTITLE: Running Refine App Locally via Genezio - Bash\nDESCRIPTION: Starts the local development server for the Refine app using the Genezio CLI. Requires Genezio to be installed globally and current working directory set to the Refine project's root. This command runs the frontend and backend locally, enabling browser-based testing at http://localhost:5173/.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/refine.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js Project (Bash)\nDESCRIPTION: Initializes a new Node.js project using npm. The `-y` flag automatically accepts the default settings, creating a `package.json` file in the current directory. This is the first step in setting up a new Fastify application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server using npm\nDESCRIPTION: Executes the `dev` script defined in the project's `package.json` file using npm. This command typically compiles the React application and starts a local development server, often accessible at `http://localhost:5173`, allowing for local testing before deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Genezio Deployment Output Example - Bash\nDESCRIPTION: Provides an example of typical CLI output after a successful genezio deployment. Shows the dashboard and frontend URLs for quick project access. No input or dependencies; serves to illustrate what users will see.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/ember.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ App Dashboard URL: https://app.genez.io/project/<project-id>/<stage-id>\n$ Frontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Installing Local Genezio SDK\nDESCRIPTION: Command to install the locally generated Genezio SDK package for frontend integration during testing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio-sdk/{your-project-name}_{your-project-region}\n```\n\n----------------------------------------\n\nTITLE: Deploying Genezio Application (Bash)\nDESCRIPTION: Executes the Genezio CLI command to deploy the entire project, including the `PostgresService` backend, to the Genezio cloud platform. Requires the Genezio CLI to be installed and configured.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-postgres.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Using yarn - Bash\nDESCRIPTION: Globally installs Genezio CLI via yarn as the package manager. Requires yarn to be set up in your environment. The command adds genezio to your global packages, allowing access to genezio commands from anywhere.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Configuring Django Project URLs (Python)\nDESCRIPTION: Updates the main `urls.py` file in the project directory (`project_name`) to include the URL patterns defined within the newly created 'app_name'. This routes requests starting with the root path ('') to the app's URL configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app_name.urls')),\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying Persistent Server with Genezio CLI\nDESCRIPTION: Command to deploy the persistent server using the Genezio CLI after configuring the genezio.yaml file.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/persistent.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Analyzing Project and Generating Genezio Configuration (Bash)\nDESCRIPTION: Executes the Genezio CLI command `analyze` in the root directory of the Remix project. This command inspects the project structure and automatically generates the `genezio.yaml` configuration file required for deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/remix.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngenezio analyze\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Command\nDESCRIPTION: Git command to clone the example repository containing the MultiversX integration code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/multiversx-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Deploying Backend with Environment Variables using Genezio CLI (Bash)\nDESCRIPTION: Deploys only the backend portion of the Genezio project using the Genezio CLI. The `--backend` flag specifies that only the server-side code should be deployed. The `--env` flag points to the location of the environment variable file (`./server/.env`), ensuring the backend is configured correctly during deployment. Requires Genezio CLI installed and a properly populated `.env` file at the specified path.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/project-template.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ genezio deploy --backend --env ./server/.env\n```\n\n----------------------------------------\n\nTITLE: Migrated Genezio YAML Configuration v2 - YAML - yaml\nDESCRIPTION: This example shows the updated `genezio.yaml` version 2 format. The file groups backend and frontend settings under dedicated keys, introduces a `yamlVersion` field, and clarifies deploy/build scripts and paths. This structure facilitates multi-frontend projects and better supports CLI features. Dependencies include familiarity with project structure; all key parameters like `backend`, `frontend`, and their nested fields are explicitly defined.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/upgrading-to-v1.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: todo-list-ts\\nregion: us-east-1\\nyamlVersion: 2\\nbackend:\\n  path: server\\n  language:\\n    name: ts\\n    packageManager: npm\\n  scripts:\\n    deploy: npm install\\n    local: npm install\\n  cloudProvider: genezio\\nfrontend:\\n  path: client\\n  publish: dist\\n  scripts:\\n    deploy:\\n      - npm run install-prod-sdk\\n      - npm install\\n    build: npm run build\n```\n\n----------------------------------------\n\nTITLE: Project Structure for TypeScript & Angular Todo List\nDESCRIPTION: This snippet shows the folder structure of the todo list project, including the server and client directories, configuration files, and other important project files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list-angular.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── models/\n│   ├── helper.ts\n│   ├── task.ts\n│   ├── user.ts\n│   ├── package.json\n│   └── tsconfig.json\n├── client/\n│   ├── src/\n│   ├── package.json\n|   └── tsconfig.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally - yarn - Bash\nDESCRIPTION: Installs the Genezio CLI globally using yarn. Requires yarn to be installed and configured. Uses the 'add global' syntax. After running, 'genezio' should be on your PATH. This is specific to environments that use yarn as their package manager.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Local Testing Commands\nDESCRIPTION: Commands for testing the Genezio project locally and deploying to production.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/cron.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\ngenezio login\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Local Port for Nitro (macOS/Linux)\nDESCRIPTION: Shows how to set the `GENEZIO_PORT_NITRO` environment variable inline to specify a custom port (`<port>`) for the `genezio local` command on macOS and Linux systems. This method sets the variable only for the duration of the command execution.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nGENEZIO_PORT_NITRO=<port> genezio local\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally - pnpm - Bash\nDESCRIPTION: Installs the Genezio CLI globally using pnpm, a fast node package manager. Requires pnpm to be installed. Uses the 'add -g' arguments; makes the genezio CLI available system-wide. Only valid in environments with pnpm and Node.js.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Cloning the TypeScript & Angular Todo List Example\nDESCRIPTION: This snippet demonstrates how to clone the Genezio examples repository and navigate to the todo list project directory using Git and command-line instructions.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list-angular.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\ncd ./genezio-examples/typescript/todo-list-angular\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Local Port for Nitro (Windows)\nDESCRIPTION: Demonstrates how to set the `GENEZIO_PORT_NITRO` environment variable to specify a custom port (`<port>`) for the `genezio local` command on Windows systems using the `set` command and command chaining (`&&`). The application will listen on the specified port instead of the default.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nitro.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nset GENEZIO_PORT_NITRO=<port> && genezio local\n```\n\n----------------------------------------\n\nTITLE: Clone Repository Command\nDESCRIPTION: Git command to clone the Genezio examples repository containing the webhook implementation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/webhook-example.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using yarn\nDESCRIPTION: This command installs the Genezio command-line interface (CLI) globally on your system using the Yarn package manager. This is another alternative prerequisite step for deploying with Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Declaring a Serializable Struct in Go\nDESCRIPTION: Defines a Go struct representing a serializable object for Genezio's backend type mapping. The 'Person' type has string and number fields, both serializable. This demonstrates how Genezio supports object types in Go for RPC parameter and response marshalling. No special dependencies.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype Person struct {\n    Name string\n    Age  number\n}\n\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands\nDESCRIPTION: Commands for running the Stripe integration project locally, including starting the local server and launching the React application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/stripe-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Redirects and Rewrites Configuration\nDESCRIPTION: YAML configuration example for setting up redirects and rewrites in a frontend application\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/frontend.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nregion: us-east-1\nyamlVersion: 2\nfrontend:\n  path: .\n  publish: dist\n  rewrites:\n    - from: /old-path\n      to: /new-path\n    - from: /old-path/:slugs*/:id\n      to: /new-path\n  redirects:\n    - from: /blog/posts/:id\n      to: /home\n      status: 302\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for JavaScript Todo List App\nDESCRIPTION: This code snippet shows the directory structure of the todo list application project, including server-side files, client-side files, and configuration files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── helper.js\n│   ├── package.json\n│   ├── task.js\n│   ├── user.js\n│   └── models/\n├── client/\n│   ├── src/\n│   ├── public\n│   ├── package.json\n├── genezio.yaml\n├── README.md\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Project Navigation Command\nDESCRIPTION: Terminal command to navigate to the trivia application project directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/trivia-application.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/typescript/quiz-app-prisma\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy on Windows\nDESCRIPTION: Changes the PowerShell execution policy for the current user to 'RemoteSigned'. This command is suggested to resolve potential permission-denied errors when running Genezio commands on Windows.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/typesafe-project.md#2025-04-23_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Genezio Project Setup Wizard Output\nDESCRIPTION: Example output showing the interactive project setup process where users select project name and deployment region.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/serverless-containers.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n✔ Enter the Genezio project name: my-project\n✔ Select the Genezio project region: US East (N. Virginia)\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using pnpm\nDESCRIPTION: This command installs the Genezio command-line interface (CLI) globally on your system using the pnpm package manager. This is an alternative prerequisite step for using Genezio.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Deploying to Development Environment in Genezio\nDESCRIPTION: Example of deploying a Genezio project specifically to a development environment. This creates or updates the development environment with the current code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/deployment-environments.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Deploying the project to the development environment\ngenezio deploy --stage development\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Functions on Windows\nDESCRIPTION: Example command for setting custom ports for specific functions on Windows before running the local server. Function names with hyphens are converted to underscores.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/local.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nset GENEZIO_PORT_FUNCTION_<FUNCTION>=<port> && genezio local\n```\n\n----------------------------------------\n\nTITLE: Cloning the Example Repository\nDESCRIPTION: Clones the `genezio-examples` repository from GitHub using the `git clone` command. This repository contains the source code for various Genezio examples, including the Vanilla HTML project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in React JSX\nDESCRIPTION: This snippet imports the DocCardList component from the Docusaurus theme package for use within the documentation UI. Including this import allows dynamic rendering of documentation article cards. The @theme alias suggests Docusaurus v2, and the import must be present before using <DocCardList /> in JSX.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Local Development Commands for Shopping Cart Project\nDESCRIPTION: Commands for starting the local development server and launching the React frontend application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/shopping-cart.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n\n# In a new terminal\ncd ./client\nnpm install && npm run install-sdk-local && npm start\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment (Linux/Mac) - Bash\nDESCRIPTION: Creates a Python virtual environment named 'venv' for Linux or MacOS environments. This isolates Python dependencies for the FastAPI project. Requires Python 3 installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\n\n```\n\n----------------------------------------\n\nTITLE: Starting React Client\nDESCRIPTION: Commands to install local SDK and start the React client application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/webhook.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using npm\nDESCRIPTION: This command installs the Genezio command-line interface (CLI) globally on your system using the Node Package Manager (npm). This is a prerequisite for using Genezio to deploy applications.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Frontend and Dashboard URLs Output Format - Bash\nDESCRIPTION: Displays the URL format outputted by Genezio after a successful deployment. The output contains links to the project's App Dashboard and the live Frontend. Actual project IDs and subdomains are substituted based on the specific deployment context.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/refine.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ App Dashboard URL: https://app.genez.io/project/<project-id>/<stage-id>\n$ Frontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Cloning the Genezio Examples Repository using Git\nDESCRIPTION: Provides the Git command to clone the `genezio-examples` repository from GitHub. This repository contains the source code for various Genezio examples, including the Vue & Mongo To-Do list application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in React (JavaScript)\nDESCRIPTION: This snippet imports the DocCardList component from the Docusaurus theme package. It is required for rendering a list of documentation cards related to integrations, enabling dynamic display of available integrations on the documentation page. The import depends on the Docusaurus theme being present in the project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example for Genezio Hello World\nDESCRIPTION: Shows the directory structure and file organization for a basic Genezio Hello World project, including server and client components.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/hello-world.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── hello.js\n│   └── models/\n├── client/\n│   └── test-hello-sdk.js\n│   └── package.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Install and Run Client Application\nDESCRIPTION: Commands to install dependencies and start the client application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/hello-world.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI App (Windows) - Bash\nDESCRIPTION: Runs the FastAPI application using the Python interpreter on Windows. Assumes the working directory contains index.py and all dependencies are installed/activated.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython index.py\n\n```\n\n----------------------------------------\n\nTITLE: Ignoring Files by Extension in .genezioignore\nDESCRIPTION: This `.genezioignore` pattern demonstrates how to exclude all files with the `.txt` extension from Genezio builds using the `*` wildcard. This entry should be placed in the `.genezioignore` file located in the project's root directory (same folder as the `genezio.yaml` configuration).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/.genezioignore.md#2025-04-23_snippet_0\n\nLANGUAGE: ignore\nCODE:\n```\n*.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI with PNPM - Bash\nDESCRIPTION: Installs the Genezio CLI globally using pnpm, an alternative JavaScript package manager. Requires pnpm to be installed on your system. This lets you manage and deploy projects with the genezio command line tool.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n\n```\n\n----------------------------------------\n\nTITLE: Documentation Page Structure in Markdown\nDESCRIPTION: The main documentation page structure written in Markdown format, including sidebar configuration, React component imports, and documentation sections.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 1\ndescription: Access Genezio documentation to optimize your development. Find tutorials, guides, and examples to effectively use Genezio's capabilities\n---\n\nimport GenezioUserDocCard from \"../src/theme/GenezioUserDocCard\";\n\n# Overview\n\n<head>\n  <title>Overview | Genezio Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Cloning the Blockchain Indexer Example Repository\nDESCRIPTION: Commands for cloning the example repository and navigating to the blockchain project directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/blockchain-app.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\ncd ./genezio-examples/javascript/blockchain\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure\nDESCRIPTION: Shows the file and folder layout of the Vanilla HTML/JS Genezio example project, highlighting key components like the `server` and `client` directories, configuration files (`genezio.yaml`, `package.json`), and source files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── server/\\n│   ├── helper.js\\n│   └── models/\\n│   └── package.json\\n│   └── task.js\\n├── client/\\n│   └── app.js\\n│   └── package.json\\n│   └── style.css\\n│   └── index.html\\n│   └── webpack.config.js\\n│   └── dist/\\n│   └── public/\\n├── genezio.yaml\\n├── README.md\\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: Command to change directory to the CRUD application example folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/crud-application.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/typescript/crud-app\n```\n\n----------------------------------------\n\nTITLE: Generating requirements.txt with pip - Bash\nDESCRIPTION: Captures a complete list of installed Python packages and their pinned versions in a requirements.txt file by running pip freeze. This is crucial for reproducible deployments with Genezio. Assumes pip and relevant packages are installed in the current virtual environment. The command overwrites or creates requirements.txt in the working directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip freeze > requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Running the Fastify App Locally (Bash)\nDESCRIPTION: Executes the Fastify application file using Node.js. Separate commands are shown for running an ES Module file (`app.mjs`) and a CommonJS file (`app.js`). This starts the local web server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnode app.mjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Navigating to Cron Project Directory\nDESCRIPTION: Command to change directory to the cron example project folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/cron.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/javascript/cron\n```\n\n----------------------------------------\n\nTITLE: Testing Genezio Functions Locally (Bash)\nDESCRIPTION: Executes the Genezio project in a local development environment using the `genezio local` command. This command starts a local server, making the defined functions accessible via local URLs for testing and debugging before deployment.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Page Title for Frameworks Documentation\nDESCRIPTION: Sets the HTML page title for the Frameworks section of the Genezio documentation using a head tag.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <title>Frameworks | Genezio Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Repository Clone Command\nDESCRIPTION: Git command to clone the example repository containing the CRUD application code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/crud-application.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure in TypeScript\nDESCRIPTION: Shows the organization of files and folders in a Genezio webhook project, including server and client components.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/webhook-example.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── index.ts\n│   ├── genezio.yaml\n│   ├── package.json\n│   └── tsconfig.json\n├── client/\n│   ├── test-webhook.ts\n│   ├── package.json\n|   └── tsconfig.json\n├── README.md\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the basic file structure of a Genezio cron application project, including configuration files and source code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/cron.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── genezio.yaml\n├── README.md\n├── index.js\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview for Vue & Mongo To-Do List\nDESCRIPTION: Illustrates the directory layout for the Genezio Vue and MongoDB To-Do list example. It shows the separation between the backend (`server`), frontend (`client`), configuration (`genezio.yaml`), and other project files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── server/\n│   ├── helper.js\n│   ├── package.json\n│   ├── task.js\n│   ├── user.js\n│   └── models/\n├── client/\n│   ├── src/\n│   ├── public\n│   ├── package.json\n├── genezio.yaml\n├── README.md\n└── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Importing AuthService for Signup Functionality - TypeScript (React)\nDESCRIPTION: This import statement brings in AuthService from '@genezio/auth', enabling registration and authentication calls within the signup route component. Place at the top of client/src/routes/signup.tsx. Required for invoking register methods.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from \"@genezio/auth\";\n```\n\n----------------------------------------\n\nTITLE: Example EROFS Read-Only File System Error Output\nDESCRIPTION: Displays the typical error message encountered when attempting to write to a file system path outside the allowed `/tmp` directory in the Genezio environment. The `EROFS` code indicates a 'read-only file system' error, triggered by the `open` syscall on the specified `path`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/temporary-storage.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nError writing file: [Error: EROFS: read-only file system, open 'file.txt'] { errno: -30, code: 'EROFS', syscall: 'open', path: 'file.txt' }\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Types Package (TypeScript)\nDESCRIPTION: Command to install the @genezio/types package which provides type definitions for Genezio authentication features.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio/types\n```\n\n----------------------------------------\n\nTITLE: Updating Genezio CLI with npm\nDESCRIPTION: This command updates the globally installed Genezio CLI to the latest version using npm package manager.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/update.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm update genezio -g\n```\n\n----------------------------------------\n\nTITLE: Clone and Setup Commands for Shopping Cart Project\nDESCRIPTION: Command sequence for cloning the example repository and navigating to the shopping cart project directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/shopping-cart.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\ncd ./genezio-examples/typescript/shopping-cart\n```\n\n----------------------------------------\n\nTITLE: Using Maps with Serializable Values in Go Service Methods\nDESCRIPTION: Shows implementation of a Go method that operates with a map from string keys to serializable User struct values as required by Genezio. The 'GetUserForKey' retrieves a user from the given map by key. Inputs and outputs must satisfy serialization rules. Intended to be embedded in a Genezio-recognized service struct.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/typesafety.md#2025-04-23_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\ntype User struct {\n    Name string\n    Age int\n}\n\ntype UserService struct {}\n\nfunc New() UserService {\n    return UserService{}\n}\n\nfunc (s *UserService) GetUserForKey(users map[string]User, key string) (User, error) {\n    return users[key]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory (Bash)\nDESCRIPTION: Bash commands to create a new directory named `flask-app` and navigate into it. This sets up the project folder for the Flask application.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/flask.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir flask-app\ncd flask-app\n```\n\n----------------------------------------\n\nTITLE: Setting Qstash Webhook URL for Local Testing - Plain Text (.env)\nDESCRIPTION: Demonstrates how to set the QUEUE_WEBHOOK_URL environment variable required by the Qstash producer to publish messages to an externally exposed webhook, suitable for local testing with tools like ngrok. This is essential for allowing Qstash to deliver events back to the developer’s local handler. Replace the example URL with your instance provided by ngrok. Limitation: The ngrok tunnel must remain active for webhook delivery.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/upstash-qstash.md#2025-04-23_snippet_2\n\nLANGUAGE: fallback\nCODE:\n```\nQUEUE_WEBHOOK_URL = https://e43d-2a02-2f0c-5801-ce00-edfd-f543-22cc-9395.ngrok.io/QstashService/ping\n\n```\n\n----------------------------------------\n\nTITLE: Creating Django Project Directory (Bash)\nDESCRIPTION: Creates a new directory named 'django-app' and navigates into it. This directory will serve as the root for the new Django project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir django-app\ncd django-app\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating into the Angular Template Repository (Bash)\nDESCRIPTION: This command clones a forked GitHub repository containing the Angular starter template to the local machine and then changes the current directory to the newly cloned project folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/angular.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone YOUR_REPO_URL\ncd angular-getting-started\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList Component in Markdown\nDESCRIPTION: Imports the DocCardList component from the theme to display a list of articles in the Frameworks section.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Using SDK Package Aliasing in package.json - JSON - json\nDESCRIPTION: This code demonstrates NPM aliasing in the `dependencies` field to map the region-suffixed SDK to the new regionless SDK package. Useful for cases where migration is phased or backward compatibility is needed, this setup allows the old import path to resolve to the new package. Limitations include potential issues with certain CLI commands if the proper migration is not completed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/upgrading-to-v1.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"dependencies\": {\\n    \"@genezio-sdk/<project_name>_<project_region>\": \"npm:@genezio-sdk/<project_name>\",\\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Changes the current directory to the specific `html-example` folder located within the cloned `genezio-examples` repository using the `cd` command.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/html-example.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd ./genezio-examples/javascript/html-example\n```\n\n----------------------------------------\n\nTITLE: Importing Locally Generated SDK in Go\nDESCRIPTION: Shows how to import the locally generated Genezio SDK in a Go client after running `genezio local`. The SDK is generated in a `sdk` subdirectory within the frontend path. Replace `<go-module-name>` with your project's Go module name.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/generated-sdk.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n```go\n import genezioSdk \"<go-module-name>/sdk\"\n ```\n```\n\n----------------------------------------\n\nTITLE: Generating Genezio Configuration - Bash\nDESCRIPTION: This command uses Genezio CLI to analyze the existing project and generate a 'genezio.yaml' configuration file in the root directory. This file is required for deployment via Genezio. Requires Genezio CLI to be installed and run from the project directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngenezio analyze\n```\n\n----------------------------------------\n\nTITLE: Project Structure Tree\nDESCRIPTION: Directory structure showing the organization of the MultiversX integration project, including server and client folders with their respective configuration files.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/multiversx-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── server/\n│   ├── index.ts\n│   ├── package.json\n│   └── tsconfig.json\n├── client/\n│   ├── src\n│   ├── package.json\n|   └── tsconfig.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Service in Client Application\nDESCRIPTION: Client-side configuration for the AuthService to set up the authentication token and region for connecting to Genezio services.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from \"@genezio/auth\";\n\nAuthService.getInstance().setTokenAndRegion(\n  \"<YOUR_GENEZIO_TOKEN>\",\n  \"<YOUR_PROJECT_REGION>\"\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using Package Managers (Bash)\nDESCRIPTION: Installs the Genezio command-line interface globally using npm, pnpm, or yarn. This tool is required for deploying applications to the Genezio platform.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/django.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Information Block in Markdown\nDESCRIPTION: Displays an informational message about the collaboration feature using Markdown syntax with info block.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/project-collaboration.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::info\nThe collaboration feature allows project owners to invite collaborators to\nwork on their projects.\n:::\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI - Bash\nDESCRIPTION: This snippet demonstrates how to install the Genezio CLI globally using different package managers (npm, pnpm, yarn). Genezio CLI is required for project analysis, local testing, and deployment. Inputs are the user's terminal and the commands; output is an installed genezio CLI in the environment. Ensure your terminal has appropriate permissions and the respective package manager installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/expressjs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Setting Up Email Service Token in Environment Variables\nDESCRIPTION: Configures the environment variable for the email service token in a .env file. This token is required for authenticating with the Genezio email service.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/email-service.md#2025-04-23_snippet_1\n\nLANGUAGE: fallback\nCODE:\n```\nEMAIL_SERVICE_TOKEN=\"***********************\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Entering Refine Template Project - Bash\nDESCRIPTION: Clones a forked Refine-Genezio template repository to your local system and navigates into the example project's directory. Prerequisites include having Git installed and a repository fork available. Replace 'YOUR_REPO_URL' with the actual URL of your fork. The snippet ensures you are in the correct working directory before starting the app locally.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/refine.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone YOUR_REPO_URL\ncd refine-genezio/example-postgres\n```\n\n----------------------------------------\n\nTITLE: Using the genezio unlink Command in CLI\nDESCRIPTION: Command syntax for the genezio unlink command which clears previously set paths for frontend apps. This prevents the automatic SDK generation in those locations, which is useful when managing multi-repository projects.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-unlink.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio unlink [--all] [projectName] [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Head Metadata for Documentation Page\nDESCRIPTION: This HTML snippet sets the page title for the documentation section, which assists in SEO and contextual navigation. The <head> content must be rendered in a component or plugin that supports injecting raw HTML into React applications such as Docusaurus.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\\n  <title>Learn more | Genezio Documentation</title>\\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating a User Sign-Up Form with React and Genezio Auth (TypeScript)\nDESCRIPTION: This React component (`SignUpForm`) provides a user interface for signing up with an email and password. It utilizes the `AuthService` from `@genezio/auth` to handle the registration process via the `register` method. On successful signup, it alerts the user and redirects them to the sign-in page using `react-router-dom`; otherwise, it displays an error message derived from `GenezioError`.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from \"react\";\nimport { AuthService } from \"@genezio/auth\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { GenezioError } from \"@genezio/types\";\n\nexport default function SignUpForm() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  const signUp = async () => {\n    try {\n      await AuthService.getInstance().register(email, password);\n      alert(\"You have successfully signed up. Now let's sign in!\");\n      // Redirect the user to the sign in page\n      navigate(\"/signIn\");\n    } catch (error) {\n      alert(\n        \"Error code: \" +\n          (error as GenezioError).code +\n          \": \" +\n          (error as GenezioError).message\n      );\n    }\n  };\n\n  return (\n    <div>\n      <input\n        type=\"email\"\n        placeholder=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <br />\n      <input\n        type=\"password\"\n        placeholder=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <br />\n      <button onClick={signUp}>Sign Up</button>\n      <br />\n      <Link to=\"/signIn\">I already have an account</Link>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Webhook Example Repository\nDESCRIPTION: Command to clone the genezio-examples repository containing the webhook example code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/webhook.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Setting Up Streamlit Project Directory - Bash\nDESCRIPTION: Creates a directory for a new project, navigates into it, and installs the Streamlit Python library. Assumes that Python and pip are already installed. 'mkdir' and 'cd' manage filesystem paths while 'pip install streamlit' installs dependencies into the current environment. Results in a ready-to-code directory with Streamlit installed; paths and commands may vary by OS.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-streamlit-app\ncd my-streamlit-app\npip install streamlit\n```\n\n----------------------------------------\n\nTITLE: Setting the HTML Title in Docusaurus Markdown\nDESCRIPTION: This HTML snippet sets the page's browser title specifically to 'Genezio Typesafe | Genezio Documentation'. It is used within Markdown files that allow direct HTML injection. No dependencies apart from Markdown/HTML compatibility; it affects only the page metadata and is not visible to end users.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\\n  <title>Genezio Typesafe | Genezio Documentation</title>\\n</head>\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting AuthService Initialization Error\nDESCRIPTION: Example error message that occurs when the AuthService class is not properly initialized and steps to troubleshoot the issue.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/authentication.md#2025-04-23_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nThe AuthService class was not initialized. Call AuthService.getInstance().setTokenAndRegion(token, region) with the values provided in genezio dashboard.\n```\n\n----------------------------------------\n\nTITLE: End-to-End Local Testing Commands\nDESCRIPTION: Set of commands for testing both frontend and backend locally. Includes starting the local Genezio server and frontend development server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @genezio-sdk/{your-project-name}_{your-project-region}\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Document Head (HTML)\nDESCRIPTION: This HTML snippet manually sets the title for the documentation page to include 'Integrations | Genezio Documentation'. It is used to provide better browser tab titles and SEO optimization for the page. It does not take parameters and has no runtime dependencies outside of proper placement within the document.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/README.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <title>Integrations | Genezio Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Deploying a Nest.js Project with Genezio\nDESCRIPTION: This command initiates the deployment process for the Nest.js application configured in the `genezio.yaml` file. It bundles the application, uploads it to the Genezio cloud, and provides a public URL. User authentication may be required.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Compiler for Synthetic Default Imports in JSON\nDESCRIPTION: This JSON snippet is intended for inclusion in the tsconfig.json file, configuring the TypeScript compiler to allow synthetic default imports and enable esModuleInterop. These settings resolve issues like TS1192 and TS7006 by relaxing import constraints and providing better compatibility with CommonJS/ESM modules. Key properties: allowSyntheticDefaultImports and esModuleInterop (both set to true). Input is the compilerOptions object; output is enhanced TypeScript compatibility with certain packages.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/troubleshooting.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"compilerOptions\": {\n    \"allowSyntheticDefaultImports\": true,\n    \"esModuleInterop\": true,\n  },\n```\n\n----------------------------------------\n\nTITLE: Cloning the TypeScript Todo List Example\nDESCRIPTION: These commands show how to clone the Genezio examples repository and navigate to the TypeScript todo list project directory.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/todo-list.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\ncd ./genezio-examples/typescript/todo-list\n```\n\n----------------------------------------\n\nTITLE: Importing AuthService for Login Functionality - TypeScript (React)\nDESCRIPTION: This import statement allows use of AuthService in the login component file for user authentication. It must be included in client/src/routes/login.tsx. No additional output.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AuthService } from \"@genezio/auth\";\n```\n\n----------------------------------------\n\nTITLE: Installing Postgres Dependencies using npm (Bash)\nDESCRIPTION: Installs the 'pg' package for Node.js Postgres interaction and '@types/pg' for TypeScript type definitions using npm. This is a prerequisite for connecting the Genezio backend to the Postgres database.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-postgres.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pg @types/pg\n```\n\n----------------------------------------\n\nTITLE: Example Output after Genezio Deployment\nDESCRIPTION: This snippet shows sample output displayed in the terminal after a successful `genezio deploy` command. It includes the URL for accessing the project's dashboard on the Genezio platform and the public URL where the deployed frontend application can be accessed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/react-admin.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ App Dashboard URL: https://app.genez.io/project/<project-id>/<stage-id>\n$ Frontend URL: https://<subdomain>.app.genez.io\n```\n\n----------------------------------------\n\nTITLE: Cloning Project Template Repository (Bash)\nDESCRIPTION: Clones the Genezio ultimate project template repository from GitHub using the `git clone` command and then changes the current directory to the newly cloned project folder (`ultimate-project-template`). This is the initial step to get the project code onto the local machine. Requires Git to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/project-template.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/Genez-io/ultimate-project-template.git\n$ cd ultimate-project-template\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally using Package Managers (Bash)\nDESCRIPTION: Installs the Genezio command-line interface (CLI) globally using different Node.js package managers (npm, pnpm, yarn). This tool is required to interact with the Genezio platform for deploying and managing applications.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment (Windows) - Bash\nDESCRIPTION: Activates the Python virtual environment on Windows systems. Must be run from the project directory after environment creation to manage isolated Python dependencies.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n.\\venv\\Scripts\\activate\n\n```\n\n----------------------------------------\n\nTITLE: Migrating SDK References in package.json - JSON - json\nDESCRIPTION: This snippet demonstrates updating the `package.json` file to reflect the new SDK package naming convention (removing the region). It highlights lines to remove and add using diff style comments, focusing on both the `scripts` and `dependencies` sections. Required prerequisites are a working knowledge of JSON and NPM package naming. After migration, all references to region-specific SDK modules should be eliminated.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/upgrading-to-v1.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"name\": \"todo-list-ts\",\\n  \"scripts\": {\\n    // diff-remove\\n    \"install-prod-sdk\": \"npm install @genezio-sdk/todo-list-ts_us-east-1@1.0.0-prod\"\\n    // diff-add\\n    \"install-prod-sdk\": \"npm install @genezio-sdk/todo-list-ts@1.0.0-prod\"\\n  },\\n  \"dependencies\": {\\n    // diff-remove\\n    \"@genezio-sdk/todo-list-ts_us-east-1\": \"^1.0.0-prod\",\\n    ...\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Fastify App with Genezio (Bash)\nDESCRIPTION: Runs the `genezio deploy` command to deploy the Fastify application to the Genezio serverless platform. This command packages the application, uploads it, and provisions the necessary cloud infrastructure based on the `genezio.yaml` configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastify.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngenezio deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Card List Component with React (JavaScript)\nDESCRIPTION: This snippet imports the DocCardList component from the Docusaurus theme package, establishing a reusable documentation card UI in the Genezio documentation section. Dependency required: '@theme/DocCardList' installed in the project. The code is meant to be used within a Docusaurus Markdown file that supports embedded React imports. No dynamic parameters are used; the import gives access to the card list rendering component used later in the file.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Genezio YAML Configuration\nDESCRIPTION: Example of defining environment variables in the genezio.yaml file for a containerized project. This demonstrates how to set static values and use expressions to reference values from other parts of the configuration.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: my-project\nyamlVersion: 2\n\nbackend:\n  environment:\n    MY_ENV_VAR: my-value\n    MY_DATABASE_NAME: ${{services.databases.<database-name>.name}}\n    MY_FUNCTION_URL: ${{backend.functions.<function-name>.url}}\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Blockchain Indexer Application\nDESCRIPTION: Displays the directory structure of the blockchain indexer project, showing the organization of backend and frontend components, configuration files, and documentation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/blockchain-app.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── backend/\n│   ├── abi.js\n│   ├── blockchainServer.js\n│   ├── config.js\n│   ├── package.json\n│   └── models/\n├── frontend/\n│   ├── src/\n│   ├── public/\n│   ├── package.json\n├── genezio.yaml\n├── README.md\n├── .genezioignore\n└── tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Embedding DocCardList Component in Docusaurus Markdown (Markdown/JSX)\nDESCRIPTION: This JSX/Markdown snippet inserts the DocCardList component into the content, enabling rendering of a dynamic list of integration documentation cards within the documentation page. It relies on Docusaurus to interpret and render the component, and it assumes that integration documentation exists and is correctly referenced by DocCardList.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/integrations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Complete Frontend Deployment Configuration in Genezio YAML\nDESCRIPTION: Comprehensive example of a frontend configuration in genezio.yaml, including project settings, SDK generation, publish directory, and scripts for deployment, build, and development.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# The name of the project.\nname: project-name\n# The region where the project is deployed.\nregion: us-east-1\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\n# Information about the frontend, including the path, language, and publish directory.\n# It is optional. It can also be an array if there are multiple frontends you want to deploy.\nfrontend:\n  # The folder where the frontend scripts will run.\n  path: .\n  # Specifies information about the SDK generation. If not specified, the SDK will not be generated for this frontend.\n  sdk:\n    # The language the SDK will be written in. Usually the same as the frontend language.\n    language: ts\n  # The directory that will be published to the CDN. It is relative to the `path` directory.\n  publish: dist\n  # Scripts are running in the specified `path` directory.\n  scripts:\n    # List of scripts to run before deploying the frontend.\n    deploy:\n      - npm install @genezio-sdk/${{projectName}}@1.0.0-${{stage}}\n      - npm install\n    # List of scripts that build your frontend before deployment. It should populate the specified `publish` directory.\n    build: npm run build\n    # List of scripts to run when starting the local development server.\n    start:\n      - npm install\n      - npm run dev\n```\n\n----------------------------------------\n\nTITLE: Listing Project Structure and Deploying Backend - Command Line (bash)\nDESCRIPTION: This shell snippet lists the project directory structure and redeploys the Genezio application using the CLI. It is used after backend changes. Outputs directory listing and deployment logs. Should be run from the root directory that contains both client/ and server/ folders.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-auth.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ ls\nclient/ server/ genezio.yaml\n\n$ genezio deploy\n```\n\n----------------------------------------\n\nTITLE: Creating genezio.yaml Configuration - Bash\nDESCRIPTION: Analyzes the current project structure and automatically generates a genezio.yaml configuration file for deployment. Requires the Genezio CLI to be installed and available. The output file, genezio.yaml, contains structured deployment settings. Typically run from the project root.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/streamlit.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngenezio analyze\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI Globally\nDESCRIPTION: This command uses npm (Node Package Manager) to install the Genezio command-line interface (CLI) globally on the system. This makes the `genezio` command available system-wide, which is required for initializing, deploying, and managing Genezio projects. Requires Node.js and npm to be pre-installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/create-react-app-genezio-google-oauth.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install genezio -g\n```\n\n----------------------------------------\n\nTITLE: Creating a New Next.js Project with Genezio CLI (Bash)\nDESCRIPTION: Uses the Genezio CLI to generate a new Next.js starter project. This command creates a project named `nextjs-project` in the `us-east-1` region with default configurations, providing a quick way to start if you don't have an existing app.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio create nextjs --name nextjs-project --region us-east-1 --default\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio Globally (Bash)\nDESCRIPTION: Installs the Genezio CLI globally using various package managers (npm, pnpm, yarn). This command-line tool is required to interact with the Genezio platform for deployment and local testing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/how-to-deploy-a-serverless-function.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install genezio -g\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add global genezio\n```\n\n----------------------------------------\n\nTITLE: Creating a New Nuxt Project with Genezio - Bash\nDESCRIPTION: Initializes a new Nuxt application using the Genezio CLI. The command specifies the project name and the desired deployment region. This command is interactive and sets up the project structure needed for further deployment. Requires genezio CLI to be installed and accessible.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio create nuxt --name nuxt-project --region us-east-1\n```\n\n----------------------------------------\n\nTITLE: Documentation Metadata Configuration\nDESCRIPTION: Frontmatter configuration for the documentation page, setting the sidebar position and page description.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: 4\ndescription: Explore Genezio's features including type safety, backend and frontend deployment, databases, authentication, rate limiter, and more\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Local SDK and Running Client\nDESCRIPTION: These commands navigate to the client directory, install the local SDK, build the project, and start the client application for testing against the local Genezio server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/hello-world.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run install-local-sdk\nnpm run build && npm start\n```\n\n----------------------------------------\n\nTITLE: Embedding Dynamic Documentation Card List (JSX in Markdown)\nDESCRIPTION: This JSX snippet inserts the DocCardList component directly into the rendered Markdown page, displaying a dynamically generated list of documentation cards for the Genezio typesafe features section. Utilization requires Docusaurus or a compatible Markdown processor capable of rendering embedded JSX/React components. No parameters are passed; it automatically displays the card list based on the page's context.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/genezio-typesafe/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Logging in to Genezio CLI - Bash\nDESCRIPTION: This snippet demonstrates logging into the Genezio CLI. The command authenticates the user with the Genezio platform and is required before deploying or managing remote infrastructure. Requires the genezio CLI to be installed globally.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngenezio login\n```\n\n----------------------------------------\n\nTITLE: Running the Svelte Development Server (Bash)\nDESCRIPTION: Executes the `dev` script defined in the project's `package.json` file using npm. This typically starts a local development server for the Svelte application, allowing for local testing and development. Requires Node.js and project dependencies (`npm install`) to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Summary of Common Genezio CLI Commands\nDESCRIPTION: Presents a Markdown table summarizing essential Genezio CLI commands and their respective actions. It includes commands for global installation, login, running a local development server, deploying a project, and accessing help documentation.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Command                  | Action                       |\n| ------------------------ | ---------------------------- |\n| `npm install -g genezio` | Installs genezio globally    |\n| `genezio login`          | Logs in to genezio           |\n| `genezio local`          | Starts a local server        |\n| `genezio deploy`         | Deploys a production project |\n| `genezio --help`         | Get help using genezio       |\n```\n\n----------------------------------------\n\nTITLE: Running Nuxt Locally with Genezio CLI - Bash\nDESCRIPTION: Launches the Nuxt app in a local development environment using the Genezio CLI. Useful for testing and validating changes before production deployment. Supports custom port configuration through the GENEZIO_PORT_NUXT environment variable. Requires a configured Nuxt project and genezio.yaml.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nuxt.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Clone Genezio Examples Repository\nDESCRIPTION: Command to clone the Genezio examples repository containing the Hello World project.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/hello-world.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in React JSX\nDESCRIPTION: This code renders the DocCardList component, dynamically displaying a list of documentation articles available within this section. It expects the component to exist in the Docusaurus theme and requires it to be imported above in the file. No props are provided here, so the list is populated based on default context.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Repository Clone Command\nDESCRIPTION: Git command to clone the example repository containing the trivia application source code.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/trivia-application.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Getting Started Directory - Bash\nDESCRIPTION: This snippet shows how to change the current directory to the 'typescript/getting-started' subfolder within the cloned example repository. No special dependencies are required. This step positions the terminal in the root of the starter project for further commands.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/typescript/getting-started\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Vue To-Do List Example Directory\nDESCRIPTION: Shows the `cd` command used to change the current directory to the specific `javascript/todo-list` folder within the cloned `genezio-examples` repository, where the Vue and Mongo example resides.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/todo-list-vue.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/javascript/todo-list\n```\n\n----------------------------------------\n\nTITLE: Starting Genezio Local Development Server (Bash)\nDESCRIPTION: Executes the Genezio CLI command to start the local development server. This allows testing the `PostgresService` and other backend components locally before deployment. Requires the Genezio CLI to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/tutorials/connect-to-postgres.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngenezio local\n```\n\n----------------------------------------\n\nTITLE: Navigate to Project Directory\nDESCRIPTION: Command to change directory to the MultiversX example project folder.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/multiversx-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ./genezio-examples/typescript/multiversx\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Locally with npm dev Script (Bash)\nDESCRIPTION: Recommended command to run the Next.js application locally for development using the standard script defined in `package.json`. This uses Next.js's built-in development server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nextjs.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Local Testing Commands\nDESCRIPTION: Commands for installing dependencies and starting the application locally for testing.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/typescript/trivia-application.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ./client\nnpm run install-local-sdk\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet renders a DocCardList component, which is likely used to display a list of documentation articles related to Genezio's deployment features.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/deploy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory - Bash\nDESCRIPTION: Creates a new directory named 'fastapi-app' and navigates into it. These commands initialize the project workspace for subsequent FastAPI application setup.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/fastapi.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir fastapi-app\ncd fastapi-app\n\n```\n\n----------------------------------------\n\nTITLE: Installing Genezio CLI using pnpm\nDESCRIPTION: Installs the Genezio command-line interface globally using the pnpm package manager. This is an alternative installation method for users preferring pnpm. Requires Node.js and pnpm to be installed.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/svelte.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add -g genezio\n```\n\n----------------------------------------\n\nTITLE: Cloning Genezio Examples Repository\nDESCRIPTION: Commands to clone the Genezio examples repository and navigate to the getting-started project\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/examples/javascript/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Genez-io/genezio-examples\ncd ./genezio-examples/javascript/getting-started\n```\n\n----------------------------------------\n\nTITLE: Docusaurus Header Configuration in HTML\nDESCRIPTION: Configures the page title for the project collaboration documentation using Docusaurus head component.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/features/project-collaboration.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <title>Project Collaboration | Genezio Documentation</title>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Genezio Backend Project via Shell Command\nDESCRIPTION: This command is used to bootstrap a backend-only Genezio project directly from the command line. It uses the `backend` subcommand and accepts options for the project name, region, backend template (ts/js), project path, and log level. Missing required parameters will trigger the interactive mode.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/genezio-create.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngenezio create backend [--name <project-name>] [--region <project-region>] [--backend <backend-template>] [--path <project-path>] [--logLevel <log-level>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Inserting DocCardList Component in Markdown\nDESCRIPTION: Inserts the DocCardList component to automatically generate a list of articles in the Frameworks section.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<DocCardList />\n```\n\n----------------------------------------\n\nTITLE: Defining Client Repository Structure for Multi-Repo (Fallback)\nDESCRIPTION: Outlines a possible directory structure for the frontend component in a multi-repository Genezio project. Contains frontend source code (`src/`), build output (`build/`), dependencies (`package.json`, `node_modules`), and the Genezio configuration file (`genezio.yaml`).\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/README.md#2025-04-23_snippet_4\n\nLANGUAGE: fallback\nCODE:\n```\n```fallback title=\"Client repository\"\nclient/\n├── genezio.yaml\n├── .genezioignore\n├── node_modules/\n├── src/\n├── build/\n└── package.json\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Port for Local Development (Windows)\nDESCRIPTION: This Windows command sets the `GENEZIO_PORT_NESTJS` environment variable to a specified port and then runs the `genezio local` command. This allows running the local Nest.js server on a port other than the default.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/frameworks/nestjs.md#2025-04-23_snippet_9\n\nLANGUAGE: batch\nCODE:\n```\nset GENEZIO_PORT_NESTJS=<port> && genezio local\n```\n\n----------------------------------------\n\nTITLE: Setting YAML Version in Genezio Configuration - YAML\nDESCRIPTION: This snippet shows how to define the mandatory yamlVersion property, which identifies which YAML configuration version to parse for Genezio. The latest supported value is 2. Using unsupported or outdated versions may result in CLI incompatibility.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/genezio-configuration-file.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# The version of the Genezio YAML configuration to parse.\nyamlVersion: 2\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for SSR Ports on Windows\nDESCRIPTION: Example command for setting custom ports for Server-Side Rendered frameworks on Windows before running the local server.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/local.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nset GENEZIO_PORT_<FRAMEWORK>=<port> && genezio local\n```\n\n----------------------------------------\n\nTITLE: Basic Genezio List Command Usage\nDESCRIPTION: Shows the basic command syntax for using genezio list to display project information. The command supports viewing all projects or filtering by a specific identifier.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/cli-tool/cli-commands/ls.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngenezio list <identifier> [-l | --long-listed] [--logLevel <logLevel>] [-h | --help]\n```\n\n----------------------------------------\n\nTITLE: Original Genezio YAML Configuration v1 - YAML - yaml\nDESCRIPTION: This snippet presents the version 1 format of the `genezio.yaml` file. It describes the configuration for deploying a Genezio project, specifying project name, region, language, cloud provider, scripts for build/deploy, and workspace paths. The structure is flat, with separate sections for frontend/backend scripts and workspace paths. Migrating away from this structure is necessary for compatibility with v2 CLI.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/learn-more/upgrading-to-v1.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nname: todo-list-ts\\nregion: us-east-1\\nlanguage: ts\\ncloudProvider: genezio\\nscripts:\\n  preBackendDeploy: npm install\\n  preFrontendDeploy: npm run install-prod-sdk && npm install && npm run build\\n  preStartLocal: cd client && npm install && cd ../server && npm install\\nfrontend:\\n  path: ./client/dist\\npackageManager: npm\\nworkspace:\\n  backend: server\\n  frontend: client\n```\n\n----------------------------------------\n\nTITLE: Ignoring a Directory in .genezioignore\nDESCRIPTION: This `.genezioignore` entry shows how to exclude the entire `node_modules` directory and all its contents from Genezio builds. The trailing slash `/` is significant, indicating that it targets a directory, not just a file named `node_modules`. This entry should be placed in the `.genezioignore` file.\nSOURCE: https://github.com/genez-io/genezio-documentation/blob/main/docs/project-structure/.genezioignore.md#2025-04-23_snippet_1\n\nLANGUAGE: ignore\nCODE:\n```\nnode_modules/\n```"
  }
]