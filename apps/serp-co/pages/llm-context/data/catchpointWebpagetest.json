[
  {
    "owner": "catchpoint",
    "repo": "webpagetest",
    "content": "TITLE: Implementing a Custom Taint Plugin for Psalm in PHP\nDESCRIPTION: This code implements a custom taint plugin for Psalm that marks all variables named $bad_data as taint sources. The plugin implements the AfterExpressionAnalysisInterface to hook into Psalm's code analysis process and adds taint information to the codebase.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/custom_taint_sources.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace Some\\Ns;\n\nuse PhpParser;\nuse Psalm\\CodeLocation;\nuse Psalm\\Context;\nuse Psalm\\FileManipulation;\nuse Psalm\\Plugin\\EventHandler\\AfterExpressionAnalysisInterface;\nuse Psalm\\Plugin\\EventHandler\\Event\\AfterExpressionAnalysisEvent;\nuse Psalm\\Type\\TaintKindGroup;\n\nclass BadSqlTainter implements AfterExpressionAnalysisInterface\n{\n    /**\n     * Called after an expression has been checked\n     *\n     * @param  PhpParser\\Node\\Expr  $expr\n     * @param  Context              $context\n     * @param  FileManipulation[]   $file_replacements\n     *\n     * @return void\n     */\n    public static function afterExpressionAnalysis(AfterExpressionAnalysisEvent $event): ?bool {\n        $expr = $event->getExpr();\n        $statements_source = $event->getStatementsSource();\n        $codebase = $event->getCodebase();\n        if ($expr instanceof PhpParser\\Node\\Expr\\Variable\n            && $expr->name === 'bad_data'\n        ) {\n            $expr_type = $statements_source->getNodeTypeProvider()->getType($expr);\n\n            // should be a globally unique id\n            // you can use its line number/start offset\n            $expr_identifier = '$bad_data'\n                . '-' . $statements_source->getFileName()\n                . ':' . $expr->getAttribute('startFilePos');\n\n            if ($expr_type) {\n                $codebase->addTaintSource(\n                    $expr_type,\n                    $expr_identifier,\n                    TaintKindGroup::ALL_INPUT,\n                    new CodeLocation($statements_source, $expr)\n                );\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-taint-source Annotation in PHP for Psalm\nDESCRIPTION: Example of using the @psalm-taint-source annotation to mark a function as a source of input taint. This annotation tells Psalm to track values returned by this function as potentially tainted user input.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/custom_taint_sources.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @psalm-taint-source input\n */\nfunction getQueryParam(string $name) : string {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Issue Handlers in Psalm XML Config\nDESCRIPTION: This XML snippet demonstrates how to configure issue handlers in Psalm's configuration file. It shows various ways to suppress different types of issues, including directory-specific, file-specific, and method-specific suppressions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/dealing_with_code_issues.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<issueHandlers>\n  <MissingPropertyType errorLevel=\"suppress\" />\n\n  <InvalidReturnType>\n    <errorLevel type=\"suppress\">\n      <directory name=\"some_bad_directory\" /> <!-- all InvalidReturnType issues in this directory are suppressed -->\n      <file name=\"some_bad_file.php\" />  <!-- all InvalidReturnType issues in this file are suppressed -->\n    </errorLevel>\n  </InvalidReturnType>\n  <UndefinedMethod>\n    <errorLevel type=\"suppress\">\n      <referencedMethod name=\"Bar\\Bat::bar\" /> <!-- not supported for all types of errors -->\n      <file name=\"some_bad_file.php\" />\n    </errorLevel>\n  </UndefinedMethod>\n  <UndefinedClass>\n    <errorLevel type=\"suppress\">\n      <referencedClass name=\"Bar\\Bat\\Baz\" />\n    </errorLevel>\n  </UndefinedClass>\n  <PropertyNotSetInConstructor>\n    <errorLevel type=\"suppress\">\n        <referencedProperty name=\"Symfony\\Component\\Validator\\ConstraintValidator::$context\" />\n    </errorLevel>\n  </PropertyNotSetInConstructor>\n  <UndefinedGlobalVariable>\n    <errorLevel type=\"suppress\">\n      <referencedVariable name=\"$fooBar\" /> <!-- if your variable is \"$fooBar\" -->\n    </errorLevel>\n  </UndefinedGlobalVariable>\n  <PluginIssue name=\"IssueNameEmittedByPlugin\" errorLevel=\"info\" /> <!-- this is a special case to handle issues emitted by plugins -->\n</issueHandlers>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Pokemon Query Using QueryBuilder\nDESCRIPTION: Shows how to construct the Pokemon query using the QueryBuilder class and execute it with the Client. It includes the use of variables and demonstrates handling errors using PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$client = new Client(\n    'https://graphql-pokemon.now.sh/'\n);\n$builder = (new QueryBuilder('pokemon'))\n    ->setVariable('name', 'String', true)\n    ->setArgument('name', '$name')\n    ->selectField('id')\n    ->selectField('number')\n    ->selectField('name')\n    ->selectField(\n        (new QueryBuilder('evolutions'))\n            ->selectField('id')\n            ->selectField('name')\n            ->selectField('number')\n            ->selectField(\n                (new QueryBuilder('attacks'))\n                    ->selectField(\n                        (new QueryBuilder('fast'))\n                            ->selectField('name')\n                            ->selectField('type')\n                            ->selectField('damage')\n                    )\n            )\n    );\ntry {\n    $name = readline('Enter pokemon name: ');\n    $results = $client->runQuery($builder, true, ['name' => $name]);\n}\ncatch (QueryError $exception) {\n    print_r($exception->getErrorDetails());\n    exit;\n}\nprint_r($results->getData()['pokemon']);\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-7 Uri Interface Methods\nDESCRIPTION: This section details methods in the UriInterface for managing URIs, including components such as scheme, authority, path, and query, which are vital for constructing valid URI references in HTTP communications.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Interfaces.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getScheme()` | Retrieve the scheme component of the URI. | |\n| `getAuthority()` | Retrieve the authority component of the URI. | |\n| `getUserInfo()` | Retrieve the user information component of the URI. | |\n| `getHost()` | Retrieve the host component of the URI. | |\n| `getPort()` | Retrieve the port component of the URI. | |\n| `getPath()` | Retrieve the path component of the URI. | |\n| `getQuery()` | Retrieve the query string of the URI. | |\n| `getFragment()` | Retrieve the fragment component of the URI. | |\n| `withScheme($scheme)` | Return an instance with the specified scheme. | |\n| `withUserInfo($user, $password = null)` | Return an instance with the specified user information. | |\n| `withHost($host)` | Return an instance with the specified host. | |\n| `withPort($port)` | Return an instance with the specified port. | |\n| `withPath($path)` | Return an instance with the specified path. | |\n| `withQuery($query)` | Return an instance with the specified query string. | |\n| `withFragment($fragment)` | Return an instance with the specified URI fragment. | |\n| `__toString()` | Return the string representation as a URI reference. | |\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Psalm Plugin for Dynamic Issue Suppression\nDESCRIPTION: This PHP class implements a custom Psalm plugin that dynamically suppresses the PropertyNotSetInConstructor issue for classes implementing a specific interface. It demonstrates how to use the AfterClassLikeVisitInterface for advanced suppression logic.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/dealing_with_code_issues.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Foo\\Bar;\n\nuse Psalm\\Plugin\\EventHandler\\AfterClassLikeVisitInterface;\nuse Psalm\\Plugin\\EventHandler\\Event\\AfterClassLikeVisitEvent;\nuse ReflectionClass;\n\n/**\n * Suppress issues dynamically based on interface implementation\n */\nclass DynamicallySuppressClassIssueBasedOnInterface implements AfterClassLikeVisitInterface\n{\n    public static function afterClassLikeVisit(AfterClassLikeVisitEvent $event)\n    {\n        $storage = $event->getStorage();\n        if ($storage->user_defined\n            && !$storage->is_interface\n            && \\class_exists($storage->name)\n            && (new ReflectionClass($storage->name))->implementsInterface(\\Your\\Interface::class)\n        ) {\n            $storage->suppressed_issues[-1] = 'PropertyNotSetInConstructor';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SQL and HTML Escaping Vulnerability Example in PHP\nDESCRIPTION: Demonstrates common security vulnerabilities in SQL queries and HTML output when relying on escaping functions instead of parameterized queries and templating engines.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/index.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$sql = 'SELECT * FROM users WHERE id = ' . $mysqli->real_escape_string((string) $_GET['id']);\n\n$html = \"\n  <img src=\" . htmlentities((string) $_GET['img']) . \" alt='' />\n  <a href='\" . htmlentities((string) $_GET['a1']) . \"'>Link 1</a>\n  <a href='\" . htmlentities((string) $_GET['a2']) . \"'>Line 2</a>\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe PHP Include with User Input\nDESCRIPTION: Example showing vulnerable code that accepts user input via GET parameter and passes it to an include statement without proper validation. This creates a security risk by allowing potential attackers to include arbitrary PHP files through path manipulation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedInclude.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$name = $_GET[\"name\"];\n\nincludeCode($name);\n\nfunction includeCode(string $name) : void {\n    include($name . '.php');\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Psalm Issues with Docblock Annotations\nDESCRIPTION: This PHP snippet shows how to use docblock annotations to suppress Psalm issues. It demonstrates suppressing an InvalidReturnType issue for an entire function and an InvalidReturnStatement issue for a specific line.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/dealing_with_code_issues.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @psalm-suppress InvalidReturnType\n */\nfunction (int $a) : string {\n  /**\n   * @psalm-suppress InvalidReturnStatement\n   */\n  return $a;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying String/Int Options (Enums) in PHP with Psalm\nDESCRIPTION: Shows how to use Psalm's ability to specify a set of allowed string/int values for function parameters, improving type checking and control flow analysis.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/typing_in_psalm.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param 'a'|'b' $s\n */\nfunction foo(string $s) : string {\n  switch ($s) {\n    case 'a':\n      return 'hello';\n\n    case 'b':\n      return 'goodbye';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Function with Undefined Global Variable\nDESCRIPTION: Illustrates a type checking scenario where a global variable is passed to a function expecting a specific type, potentially causing a Psalm mixed argument warning\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction takesInt(int $i) : void {}\ntakesInt($GLOBALS['foo']);\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with Guzzle in PHP\nDESCRIPTION: Example of how to use Guzzle to make both synchronous and asynchronous HTTP requests. The code demonstrates creating a client, sending a GET request, accessing response properties, and handling asynchronous requests with promises.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$client = new \\GuzzleHttp\\Client();\n$response = $client->request('GET', 'https://api.github.com/repos/guzzle/guzzle');\n\necho $response->getStatusCode(); // 200\necho $response->getHeaderLine('content-type'); // 'application/json; charset=utf8'\necho $response->getBody(); // '{\"id\": 1420053, \"name\": \"guzzle\", ...}'\n\n// Send an asynchronous request.\n$request = new \\GuzzleHttp\\Psr7\\Request('GET', 'http://httpbin.org');\n$promise = $client->sendAsync($request)->then(function ($response) {\n    echo 'I completed! ' . $response->getBody();\n});\n\n$promise->wait();\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutations with PHP Client\nDESCRIPTION: Provides an example of constructing and executing GraphQL mutations using the Client class in PHP. It showcases setting arguments and selecting fields on the returned objects, utilizing similar methods as in querying.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$mutation = (new Mutation('createCompany'))\n    ->setArguments(['companyObject' => new RawObject('{name: \"Trial Company\", employees: 200}')])\n    ->setSelectionSet(\n        [\n            '_id',\n            'name',\n            'serialNumber',\n        ]\n    );\n$results = $client->runQuery($mutation);\n```\n\n----------------------------------------\n\nTITLE: Fixing MixedMethodCall with PHP Runtime Type Checking\nDESCRIPTION: This solution addresses the MixedMethodCall error by implementing a runtime type check using assert(). By verifying that the value returned by array_pop() is an instance of class A before calling methods on it, the code becomes type-safe.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedMethodCall.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo() : void {}\n}\n\nfunction callFoo(array $arr) : void {\n    $a = array_pop($arr);\n    assert($a instanceof A);\n    $a->foo(); // MixedMethodCall emitted here\n}\n\ncallFoo(\n    [new A()]\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Google Books API in PHP\nDESCRIPTION: This example demonstrates how to set up the Google Client, initialize the Books service, and perform a simple search query.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// include your composer dependencies\nrequire_once 'vendor/autoload.php';\n\n$client = new Google\\Client();\n$client->setApplicationName(\"Client_Library_Examples\");\n$client->setDeveloperKey(\"YOUR_APP_KEY\");\n\n$service = new Google\\Service\\Books($client);\n$query = 'Henry David Thoreau';\n$optParams = [\n  'filter' => 'free-ebooks',\n];\n$results = $service->volumes->listVolumes($query, $optParams);\n\nforeach ($results->getItems() as $item) {\n  echo $item['volumeInfo']['title'], \"<br /> \\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-taint-unescape for HTML decoding in PHP\nDESCRIPTION: This example demonstrates how to properly annotate a function that decodes HTML entities back to their original form using the @psalm-taint-unescape annotation. The function converts encoded characters like &lt; back to <, which makes previously safe content potentially dangerous again.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_negatives.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-taint-unescape html\n */\nfunction decode(string $str): string\n{\n    return str_replace(\n        ['&lt;', '&gt;', '&quot;', '&apos;'],\n        ['<', '>', '\"', '\"'],\n        $str\n    );\n}\n\n$safe = htmlspecialchars($_GET['text']);\necho decode($safe);\n```\n\n----------------------------------------\n\nTITLE: Creating URI Instances with GuzzleHttp\\Psr7\\Utils::uriFor\nDESCRIPTION: This method returns a UriInterface object for a given value, accepting either a string or an existing UriInterface. If the value is already a UriInterface, it is returned as-is.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n`public static function uriFor(string|UriInterface $uri): UriInterface`\n```\n\n----------------------------------------\n\nTITLE: PHP SQL Injection Vulnerability Example - PDO Query\nDESCRIPTION: Demonstrates an unsafe database operation where unescaped user input from $_GET parameter is directly concatenated into a SQL query. This is a security vulnerability that could allow SQL injection attacks through the user_id parameter.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedSql.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function deleteUser(PDO $pdo) : void {\n        $userId = self::getUserId();\n        $pdo->exec(\"delete from users where user_id = \" . $userId);\n    }\n\n    public static function getUserId() : string {\n        return (string) $_GET[\"user_id\"];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making HTTP GET Request with Guzzle in PHP\nDESCRIPTION: Demonstrates how to make a GET request using Guzzle 7.x. This new syntax was introduced in version 7.0.0-beta2.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$response = $client->get('http://example.com');\n```\n\n----------------------------------------\n\nTITLE: Live API Example - GraphQL Pokemon Query\nDESCRIPTION: Demonstrates querying a live public GraphQL API to retrieve Pokemon data using PHP. This snippet creates a query to fetch a Pokemon's evolutions and attacks using the Client and Query classes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$client = new Client(\n    'https://graphql-pokemon.now.sh/'\n);\n$gql = (new Query('pokemon'))\n    ->setVariables([new Variable('name', 'String', true)])\n    ->setArguments(['name' => '$name'])\n    ->setSelectionSet(\n        [\n            'id',\n            'number',\n            'name',\n            (new Query('evolutions'))\n                ->setSelectionSet(\n                    [\n                        'id',\n                        'number',\n                        'name',\n                        (new Query('attacks'))\n                            ->setSelectionSet(\n                                [\n                                    (new Query('fast'))\n                                        ->setSelectionSet(\n                                            [\n                                                'name',\n                                                'type',\n                                                'damage',\n                                            ]\n                                        )\n                                ]\n                            )\n                    ]\n                )\n        ]\n    );\ntry {\n    $name = readline('Enter pokemon name: ');\n    $results = $client->runQuery($gql, true, ['name' => $name]);\n}\ncatch (QueryError $exception) {\n    print_r($exception->getErrorDetails());\n    exit;\n}\nprint_r($results->getData()['pokemon']);\n```\n\n----------------------------------------\n\nTITLE: Null Value Assertions\nDESCRIPTION: Shows how to use assertions to handle null checks and validate non-null values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/adding_assertions.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @psalm-assert !null $value\n */\nfunction assertNotNull($value): void {\n  // Some check that will mean the method will only complete if $value is not null.\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Input with Regex Pattern Matching in PHP\nDESCRIPTION: This snippet shows how to use the Expect library's pattern() method to validate that a string consists of exactly 9 digits. The pattern is defined as a regular expression, where the input must fully match this criterion, ensuring data integrity.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// just 9 digits\nExpect::string()->pattern('\\d{9}');\n```\n\n----------------------------------------\n\nTITLE: Comparing Equality and Type Assertions in Psalm for PHP\nDESCRIPTION: This code demonstrates the difference between equality assertions and regular type assertions in Psalm, showing how they affect type inference in different scenarios.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/assertion_syntax.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert-if-true =int $x */\nfunction equalsFive($x) {\n  return is_int($x) && $x === 5;\n}\n\nfunction foo($y) : void {\n  if (equalsFive($y)) {\n    // $y is definitely an int\n  } else {\n    // $y might be an int, but it might not\n  }\n}\n\nfunction bar($y) : void {\n  if (is_int($y)) {\n    // $y is definitely an int\n  } else {\n    // $y is definitely not an int\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullFunctionCall Error in PHP\nDESCRIPTION: This code snippet demonstrates how a NullFunctionCall error is triggered in PHP by assigning null to a variable and then attempting to call it as a function. The error occurs during the function call attempt.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = null;\necho $arr();\n```\n\n----------------------------------------\n\nTITLE: Escaping Tainted Input Using @psalm-taint-escape Annotation in PHP\nDESCRIPTION: Demonstrates how to use the @psalm-taint-escape annotation to remove HTML taints from data by replacing angle brackets, preventing cross-site-scripting attacks in user input.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction echoVar(string $str) : void {\n    /**\n     * @psalm-taint-escape html\n     */\n    $str = str_replace(['<', '>'], '', $str);\n    echo $str;\n}\n\nechoVar($_GET[\"text\"]);\n```\n\n----------------------------------------\n\nTITLE: Running Psalm on Specific Files\nDESCRIPTION: Command to run Psalm analysis on specific PHP files rather than the entire project.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/command_line_usage.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/psalm file1.php [file2.php...]\n```\n\n----------------------------------------\n\nTITLE: Unescaping Tainted Data in PHP with Psalm\nDESCRIPTION: Annotation that marks a function or method as removing escape mechanisms, potentially reintroducing taint to previously escaped data.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n@psalm-taint-unescape <taint-type>\n```\n\n----------------------------------------\n\nTITLE: Vulnerable Header Injection Example in PHP\nDESCRIPTION: This code demonstrates an unsafe way to handle HTTP headers by directly using user input from GET parameters, which could lead to header injection attacks. This is considered a security vulnerability that could enable various attacks like file access, cookie injection, or cache poisoning.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedHeader.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nheader($_GET['header']);\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Query with Arguments in PHP\nDESCRIPTION: Demonstrates how to add arguments to a GraphQL query, filtering companies by name and limiting the result count.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setArguments(['name' => 'Tech Co.', 'first' => 3])\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Promise Rejection Handling in PHP\nDESCRIPTION: Shows how to reject a promise with an error message which triggers the onRejected callback. This example demonstrates the basic error handling mechanism in promises.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise->then(null, function ($reason) {\n    echo $reason;\n});\n\n$promise->reject('Error!');\n// Outputs \"Error!\"\n```\n\n----------------------------------------\n\nTITLE: Adding Return Type Hint to PHP Function\nDESCRIPTION: This code demonstrates the corrected version of the function `foo` with a return type hint `string`. By specifying the return type, developers can explicitly define what kind of data the function returns, enhancing code clarity and enabling static analysis tools to catch potential type mismatches.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingReturnType.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : string {\n    return \"foo\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hero Elements in WebPageTest JSON\nDESCRIPTION: JSON configuration example for specifying custom hero elements in WebPageTest UI. The configuration maps hero element names to their corresponding CSS selectors.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Metrics/HeroElements.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"intro\": \"p.introduction\", \"buyButton\": \".item .buy\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Request Options in Guzzle\nDESCRIPTION: This snippet demonstrates how to set default request options (like headers) for all requests created by a Guzzle client using the 'request.options' configuration setting. This allows for consistent configuration across multiple requests, improving code maintainability and reducing redundancy. The provided examples show setting options for headers.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\"$client->getConfig()->setPath('request.options/headers/{header_name}', 'value')\". or\n  $client->getConfig()->setPath('request.options/headers', array('header_name' => 'value'))`.\n```\n\n----------------------------------------\n\nTITLE: Fatal Error Example with MixedOperand\nDESCRIPTION: This example demonstrates how a mixed operand can lead to a fatal error at runtime when an object is concatenated with a string. The function accepts a mixed type parameter which allows passing an object that cannot be converted to a string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedOperand.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(mixed $m) {\n    echo $m . 'bar';\n}\n\nclass A {}\n\nfoo(new A()); // triggers fatal error\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Call with Excess Arguments in PHP\nDESCRIPTION: This PHP code snippet demonstrates what happens when a function is invoked with more arguments than it has parameters defined. The function `foo` expects a single string parameter, but it is called with two arguments, which showcases a common mistake developers might encounter. Understanding this helps in ensuring functions are called with the correct number of arguments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TooManyArguments.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\n\\nfunction foo(string $a) : void {}\\nfoo(\\\"hello\\\", 4);\n```\n\n----------------------------------------\n\nTITLE: Generic MyContainer Class with Template Annotations in PHP\nDESCRIPTION: Implementation of MyContainer with @template annotations to create a generic container that preserves type information for contained values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T\n */\nclass MyContainer {\n  /** @var T */\n  private $value;\n\n  /** @param T $value */\n  public function __construct($value) {\n    $this->value = $value;\n  }\n\n  /** @return T */\n  public function getValue() {\n    return $this->value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Immutable Collection Class in PHP with Psalm\nDESCRIPTION: This code defines an immutable `Collection` class in PHP that uses Psalm annotations to enforce immutability and covariance. The `add` method returns a new `Collection` instance instead of modifying the existing one, ensuring immutability. The class uses generics to provide type safety for the collection elements.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * @template-covariant T\n * @psalm-immutable\n */\nclass Collection {\n    /**\n     * @var array<int, T>\n     */\n    public array $list = [];\n\n    /**\n     * @param array<int, T> $list\n     */\n    public function __construct(array $list) {\n        $this->list = $list;\n    }\n\n    /**\n     * @param T $t\n     * @return Collection<T>\n     */\n    public function add($t) : Collection {\n        return new Collection(array_merge($this->list, [$t]));\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: OAuth Authentication Setup for Google API in PHP\nDESCRIPTION: This snippet demonstrates how to set up OAuth authentication for Google API calls, including setting credentials, scopes, and redirect URI.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$client = new Google\\Client();\n$client->setAuthConfig('/path/to/client_credentials.json');\n$client->addScope(Google\\Service\\Drive::DRIVE);\n$redirect_uri = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['PHP_SELF'];\n$client->setRedirectUri($redirect_uri);\n```\n\n----------------------------------------\n\nTITLE: Using @param-out to Modify By-Reference Parameter Types in PHP\nDESCRIPTION: Demonstrates how to use the @param-out annotation to indicate that a by-reference parameter's type changes during function execution. This allows specifying that a nullable parameter becomes non-null.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param-out string $s\n */\nfunction addFoo(?string &$s) : void {\n    if ($s === null) {\n        $s = \"hello\";\n    }\n    $s .= \"foo\";\n}\n```\n\n----------------------------------------\n\nTITLE: Vulnerable LDAP Search Implementation in PHP\nDESCRIPTION: Example of an insecure LDAP search implementation that accepts unvalidated user input from GET parameters, making it vulnerable to LDAP injection attacks. The code demonstrates how untrusted input can be directly passed to ldap_search() function.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedLdap.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$ds = ldap_connect('example.com');\n$dn = 'o=Psalm, c=US';\n$filter = $_GET['filter'];\nldap_search($ds, $dn, $filter, []);\n```\n\n----------------------------------------\n\nTITLE: Using Symfony ErrorHandler in PHP Applications\nDESCRIPTION: Example demonstrating how to use the Symfony ErrorHandler component in PHP. Shows how to enable debug mode, register specific error handlers, and use the error handler to execute code that might throw exceptions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/error-handler/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\ErrorHandler\\Debug;\nuse Symfony\\Component\\ErrorHandler\\ErrorHandler;\nuse Symfony\\Component\\ErrorHandler\\DebugClassLoader;\n\nDebug::enable();\n\n// or enable only one feature\n//ErrorHandler::register();\n//DebugClassLoader::enable();\n\n// If you want a custom generic template when debug is not enabled\n// HtmlErrorRenderer::setTemplate('/path/to/custom/error.html.php');\n\n$data = ErrorHandler::call(static function () use ($filename, $datetimeFormat) {\n    // if any code executed inside this anonymous function fails, a PHP exception\n    // will be thrown, even if the code uses the '@' PHP silence operator\n    $data = json_decode(file_get_contents($filename), true);\n    $data['read_at'] = date($datetimeFormat);\n    file_put_contents($filename, json_encode($data));\n\n    return $data;\n});\n```\n\n----------------------------------------\n\nTITLE: Unsafe PHP Object Deserialization from User Input\nDESCRIPTION: Example showing dangerous implementation of unserialize() with user input from $_GET parameter. This code is vulnerable to object injection attacks since it directly passes untrusted data to unserialize(). The proper approach would be using JSON encoding/decoding instead.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedUnserialize.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$command = $_GET[\"data\"];\n\ngetObject($command);\n\nfunction getObject(string $data) : object {\n    return unserialize($data);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Taint Sinks in PHP with Psalm\nDESCRIPTION: Annotation used to mark methods or functions as sinks where tainted data could cause security issues. The annotation specifies which parameter might receive tainted data.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/annotations.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n@psalm-taint-sink <taint-type> <param-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Files to Ignore in Taint Analysis with XML\nDESCRIPTION: Shows how to configure Psalm to ignore certain files or directories in taint path analysis by adding an ignoreFiles section to the taintAnalysis configuration in psalm.xml.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n    <taintAnalysis>\n        <ignoreFiles>\n            <directory name=\"tests\"/>\n        </ignoreFiles>\n    </taintAnalysis>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Stream Decorators\nDESCRIPTION: Demonstrates how to implement custom stream decorators using StreamDecoratorTrait, with an example that calls a function when the end of a stream is reached.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Psr\\Http\\Message\\StreamInterface;\nuse GuzzleHttp\\Psr7\\StreamDecoratorTrait;\n\nclass EofCallbackStream implements StreamInterface\n{\n    use StreamDecoratorTrait;\n\n    private $callback;\n\n    private $stream;\n\n    public function __construct(StreamInterface $stream, callable $cb)\n    {\n        $this->stream = $stream;\n        $this->callback = $cb;\n    }\n\n    public function read($length)\n    {\n        $result = $this->stream->read($length);\n\n        // Invoke the callback when EOF is hit.\n        if ($this->eof()) {\n            call_user_func($this->callback);\n        }\n\n        return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Monolog in PHP\nDESCRIPTION: Demonstrates how to create a log channel, add a stream handler, and log warning and error messages using Monolog.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/monolog/monolog/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\n\n// create a log channel\n$log = new Logger('name');\n$log->pushHandler(new StreamHandler('path/to/your.log', Logger::WARNING));\n\n// add records to the log\n$log->warning('Foo');\n$log->error('Bar');\n```\n\n----------------------------------------\n\nTITLE: Defining a Public Method Returning a String in PHP\nDESCRIPTION: This snippet defines a class with a public method that returns a string. It demonstrates how Psalm emits warnings for unused return values when the `--find-dead-code` option is enabled. The method 'foo' is called but its return value is not captured, potentially triggering a 'PossiblyUnusedReturnValue' warning.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUnusedReturnValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo() : string {\n        return \"hello\";\n    }\n}\n(new A)->foo();\n```\n\n----------------------------------------\n\nTITLE: Downloading and Executing Psalm Phar\nDESCRIPTION: Downloads the latest Psalm Phar file from GitHub, makes it executable, and checks its version. Useful when project dependencies conflict with Psalm's dependencies.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget https://github.com/vimeo/psalm/releases/latest/download/psalm.phar\nchmod +x psalm.phar\n./psalm.phar --version\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullArgument Error in PHP\nDESCRIPTION: This example shows a PHP function with a string type hint that receives a null argument, which will trigger a TypeError. The function foo() expects a string parameter but receives null, violating type safety.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string $s) : void {}\nfoo(null);\n```\n\n----------------------------------------\n\nTITLE: Emitting Warnings for Unused Parameters in PHP\nDESCRIPTION: This snippet demonstrates a PHP class method which has an unused parameter. When using the Psalm tool with the '--find-dead-code' option, a warning will be emitted for the unused parameter 'b'. The method calculates and returns a result based on another parameter, 'a'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUnusedParam.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo(int $a, int $b) : int {\n        return $a + 4;\n    }\n}\n\na = new A();\necho $a->foo(1, 2);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Match Expressions in PHP\nDESCRIPTION: This PHP function demonstrates a match expression that can cause an UnhandledMatchError when not all potential values are handled. The function relies on the `rand()` function to switch between 'foo' and 'bar', but only defines a match case for 'foo'. When the value is 'bar', the function will fail with an UnhandledMatchError. Developers must ensure all possible match cases are covered.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnhandledMatchCondition.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction matchOne(): string {\n    $foo = rand(0, 1) ? \"foo\" : \"bar\";\n\n    return match ($foo) {\n        'foo' => 'foo',\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHP_CodeSniffer on a directory\nDESCRIPTION: This snippet demonstrates how to run PHP_CodeSniffer on an entire directory of PHP files, checking them against the default PEAR coding standard. It assumes PHP_CodeSniffer is installed and accessible in the system's PATH.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n\"phpcs /path/to/code-directory\"\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP File Content Retrieval\nDESCRIPTION: Demonstrates a security risk where user-controlled input is directly used in file retrieval without proper validation, potentially exposing sensitive system files\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedFile.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$content = file_get_contents($_GET['header']);\necho $content;\n```\n\n----------------------------------------\n\nTITLE: Converting AST Back to PHP Code\nDESCRIPTION: Demonstrates how to convert a modified AST back to PHP code using the PrettyPrinter component. This example shows the final step in AST manipulation where the transformed tree is converted back to valid PHP syntax.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nikic/php-parser/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\PrettyPrinter;\n\n$prettyPrinter = new PrettyPrinter\\Standard;\necho $prettyPrinter->prettyPrintFile($ast);\n```\n\n----------------------------------------\n\nTITLE: Using ID Token Middleware for Cloud Run or IAP\nDESCRIPTION: PHP code showing how to use ID token middleware for authenticating with Cloud Run or Identity-Aware Proxy protected resources.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/auth/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\ApplicationDefaultCredentials;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// specify the path to your application credentials\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n\n$targetAudience = 'YOUR_ID_TOKEN_AUDIENCE';\n\n// create middleware\n$middleware = ApplicationDefaultCredentials::getIdTokenMiddleware($targetAudience);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'auth' => 'google_auth',\n  // Cloud Run, IAP, or custom resource URL\n  'base_uri' => 'https://YOUR_PROTECTED_RESOURCE',\n]);\n\n// make the request\n$response = $client->get('/');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Copying Stream Contents with GuzzleHttp\\Psr7\\Utils::copyToStream\nDESCRIPTION: This method copies the contents of a source stream into a destination stream until a specified number of bytes have been read. It takes two StreamInterface objects as arguments, along with an optional maximum length.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n`public static function copyToStream(StreamInterface $source, StreamInterface $dest, int $maxLen = -1): void`\n```\n\n----------------------------------------\n\nTITLE: Emitting Undefined Variable Error in PHP Function\nDESCRIPTION: This code snippet demonstrates an instance where an undefined variable error occurs in a PHP function. The function 'foo' tries to echo a variable '$a' that has not been defined in its scope. This illustrates a common issue in PHP where variables need to be properly defined before use to avoid runtime errors. No external dependencies are needed.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedVariable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() {\n    echo $a;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Safely Opening Streams with GuzzleHttp\\Psr7\\Utils::tryFopen\nDESCRIPTION: This method safely opens a PHP stream resource using a filename.  It adds an error handler to check for errors and throws an exception instead of PHP's default warning.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n`public static function tryFopen(string $filename, string $mode): resource`\n```\n\n----------------------------------------\n\nTITLE: Parsing PHP Code into AST\nDESCRIPTION: Demonstrates how to parse PHP code into an abstract syntax tree (AST) and dump it in human-readable form using the PHP Parser library. The code creates a parser instance, handles parsing errors, and uses NodeDumper to display the AST structure.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nikic/php-parser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse PhpParser\\Error;\nuse PhpParser\\NodeDumper;\nuse PhpParser\\ParserFactory;\n\n$code = <<<'CODE'\n<?php\n\nfunction test($foo)\n{\n    var_dump($foo);\n}\nCODE;\n\n$parser = (new ParserFactory)->create(ParserFactory::PREFER_PHP7);\ntry {\n    $ast = $parser->parse($code);\n} catch (Error $error) {\n    echo \"Parse error: {$error->getMessage()}\\n\";\n    return;\n}\n\n$dumper = new NodeDumper;\necho $dumper->dump($ast) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-7 Message Interface Methods\nDESCRIPTION: This section details the methods available in the MessageInterface of PSR-7, including HTTP protocol version retrieval, header manipulation, and body handling. The methods allow for managing HTTP messages effectively with various options for header and body management.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Interfaces.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getProtocolVersion()`             | Retrieve HTTP protocol version          |  1.0 or 1.1 |\n| `withProtocolVersion($version)`    | Returns new message instance with given HTTP protocol version          |      |\n| `getHeaders()`                     | Retrieve all HTTP Headers               | [Request Header List](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields), [Response Header List](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Response_fields)      |\n| `hasHeader($name)`                 | Checks if HTTP Header with given name exists  | |\n| `getHeader($name)`                 | Retrieves a array with the values for a single header | |\n| `getHeaderLine($name)`             | Retrieves a comma-separated string of the values for a single header |  |\n| `withHeader($name, $value)`        | Returns new message instance with given HTTP Header | if the header existed in the original instance, replaces the header value from the original message with the value provided when creating the new instance. |\n| `withAddedHeader($name, $value)`   | Returns new message instance with appended value to given header | If header already exists value will be appended, if not a new header will be created |\n| `withoutHeader($name)`             | Removes HTTP Header with given name| |\n| `getBody()`                        | Retrieves the HTTP Message Body | Returns object implementing `StreamInterface`|\n| `withBody(StreamInterface $body)`  | Returns new message instance with given HTTP Message Body | \n```\n\n----------------------------------------\n\nTITLE: Detecting Tainted System Secrets in PHP using Psalm Annotations\nDESCRIPTION: Example showing how to mark sensitive configuration data as a system secret using Psalm's taint tracking annotations. The function retrieves a config value that contains sensitive data, marked with @psalm-taint-source to indicate it should be handled securely.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedSystemSecret.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-taint-source system_secret\n */\nfunction getConfigValue(string $data) {\n    return \"$omePa$$word\";\n}\n\necho getConfigValue(\"secret\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating an Unused Psalm Suppress Annotation in PHP\nDESCRIPTION: This example shows a situation where a @psalm-suppress annotation for InvalidArgument is considered unused because the suppression is not needed for the strlen function call with a valid string argument.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedPsalmSuppress.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @psalm-suppress InvalidArgument */\necho strlen(\"hello\");\n```\n\n----------------------------------------\n\nTITLE: Using @readonly to Create Read-Only Properties in PHP\nDESCRIPTION: Demonstrates how to use @readonly to create properties that can only be written to in a class's constructor. This enforces immutability after object initialization.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass B {\n  /** @readonly */\n  public string $s;\n\n  public function __construct(string $s) {\n    $this->s = $s;\n  }\n}\n\n$b = new B(\"hello\");\necho $b->s;\n$b->s = \"boo\"; // disallowed\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-7 Uploaded File Interface Methods\nDESCRIPTION: This section outlines the methods provided by the UploadedFileInterface for handling file uploads through HTTP requests, including moving uploaded files and retrieving related metadata, which are fundamental for managing file uploads securely and effectively.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Interfaces.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getStream()` | Retrieve a stream representing the uploaded file. | |\n| `moveTo($targetPath)` | Move the uploaded file to a new location. | |\n| `getSize()` | Retrieve the file size. | |\n| `getError()` | Retrieve the error associated with the uploaded file. | |\n| `getClientFilename()` | Retrieve the filename sent by the client. | |\n| `getClientMediaType()` | Retrieve the media type sent by the client. | |\n```\n\n----------------------------------------\n\nTITLE: JWT Encoding and Decoding with RS256 in PHP\nDESCRIPTION: Shows how to use RSA keys for JWT encoding and decoding with the RS256 algorithm, including the generation of public and private keys.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$privateKey = <<<EOD\n-----BEGIN RSA PRIVATE KEY-----\nMIICXAIBAAKBgQC8kGa1pSjbSYZVebtTRBLxBz5H4i2p/llLCrEeQhta5kaQu/Rn\nvuER4W8oDH3+3iuIYW4VQAzyqFpwuzjkDI+17t5t0tyazyZ8JXw+KgXTxldMPEL9\n5+qVhgXvwtihXC1c5oGbRlEDvDF6Sa53rcFVsYJ4ehde/zUxo6UvS7UrBQIDAQAB\nAoGAb/MXV46XxCFRxNuB8LyAtmLDgi/xRnTAlMHjSACddwkyKem8//8eZtw9fzxz\nbWZ/1/doQOuHBGYZU8aDzzj59FZ78dyzNFoF91hbvZKkg+6wGyd/LrGVEB+Xre0J\nNil0GReM2AHDNZUYRv+HYJPIOrB0CRczLQsgFJ8K6aAD6F0CQQDzbpjYdx10qgK1\ncP59UHiHjPZYC0loEsk7s+hUmT3QHerAQJMZWC11Qrn2N+ybwwNblDKv+s5qgMQ5\n5tNoQ9IfAkEAxkyffU6ythpg/H0Ixe1I2rd0GbF05biIzO/i77Det3n4YsJVlDck\nZkcvY3SK2iRIL4c9yY6hlIhs+K9wXTtGWwJBAO9Dskl48mO7woPR9uD22jDpNSwe\nk90OMepTjzSvlhjbfuPN1IdhqvSJTDychRwn1kIJ7LQZgQ8fVz9OCFZ/6qMCQGOb\nqaGwHmUK6xzpUbbacnYrIM6nLSkXgOAwv7XXCojvY614ILTK3iXiLBOxPu5Eu13k\neUz9sHyD6vkgZzjtxXECQAkp4Xerf5TGfQXGXhxIX52yH+N2LtujCdkQZjXAsGdm\nB2zNzvrlgRmgBrklMTrMYgm1NPcW+bRLGcwgW2PTvNM=\n-----END RSA PRIVATE KEY-----\nEOD;\n\n$publicKey = <<<EOD\n-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8kGa1pSjbSYZVebtTRBLxBz5H\n4i2p/llLCrEeQhta5kaQu/RnvuER4W8oDH3+3iuIYW4VQAzyqFpwuzjkDI+17t5t\n0tyazyZ8JXw+KgXTxldMPEL95+qVhgXvwtihXC1c5oGbRlEDvDF6Sa53rcFVsYJ4\nehde/zUxo6UvS7UrBQIDAQAB\n-----END PUBLIC KEY-----\nEOD;\n\n$payload = [\n    'iss' => 'example.org',\n    'aud' => 'example.com',\n    'iat' => 1356999524,\n    'nbf' => 1357000000\n];\n\n$jwt = JWT::encode($payload, $privateKey, 'RS256');\necho \"Encode:\\n\" . print_r($jwt, true) . \"\\n\";\n\n$decoded = JWT::decode($jwt, new Key($publicKey, 'RS256'));\n\n$decoded_array = (array) $decoded;\necho \"Decode:\\n\" . print_r($decoded_array, true) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Specializing Taints in PHP with Psalm\nDESCRIPTION: Annotation used to indicate that a function or class performs custom taint handling that should be analyzed differently. This helps prevent false positives in taint analysis.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/annotations.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n@psalm-taint-specialize\n```\n\n----------------------------------------\n\nTITLE: Uploading File to Amazon S3 using putObject\nDESCRIPTION: Example showing how to upload a file to Amazon S3 using the putObject method. The code demonstrates error handling with try-catch and configures the uploaded file to be publicly accessible.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse Aws\\S3\\S3Client;\nuse Aws\\S3\\Exception\\S3Exception;\n\n// Instantiate an S3 client\n$s3 = S3Client::factory();\n\n// Upload a publicly accessible file. The file size, file type, and MD5 hash\n// are automatically calculated by the SDK.\ntry {\n    $s3->putObject(array(\n        'Bucket' => 'my-bucket',\n        'Key'    => 'my-object',\n        'Body'   => fopen('/path/to/file', 'r'),\n        'ACL'    => 'public-read',\n    ));\n} catch (S3Exception $e) {\n    echo \"There was an error uploading the file.\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Getting Stream Contents with GuzzleHttp\\Psr7\\Utils::tryGetContents\nDESCRIPTION: This method safely retrieves the contents of a given stream. It adds an error handler to check for errors and throws an exception instead of PHP's default warning when `stream_get_contents` fails.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n`public static function tryGetContents(resource $stream): string`\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Assertions in Data Validation with PHP\nDESCRIPTION: This code snippet demonstrates how to incorporate custom assertions using the Expect library, specifically enforcing that an array contains an even number of items. The assert() method allows the definition of custom validation logic, which is crucial for tailoring validation to specific application needs.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$countIsEven = function ($v) { return count($v) % 2 === 0; };\n\n$schema = Expect::arrayOf('string')\n\t->assert($countIsEven); // the count must be even\n\n$processor->process($schema, ['a', 'b']); // OK\n$processor->process($schema, ['a', 'b', 'c']); // ERROR: 3 is not even\n```\n\nLANGUAGE: php\nCODE:\n```\nExpect::string()->assert('is_file'); // the file must exist\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema = Expect::arrayOf('string')\n\t->assert($countIsEven, 'Even items in array');\n\n$processor->process($schema, ['a', 'b', 'c']);\n// Failed assertion \"Even items in array\" for item with value array.\n```\n\n----------------------------------------\n\nTITLE: Constructing GraphQL Client in PHP\nDESCRIPTION: Illustrates how to construct a Client object by providing a GraphQL endpoint URL in PHP. This snippet showcases configuring the client with optional authorization headers and HTTP options, using the Guzzle HTTP Client for custom settings.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$client = new Client(\n    'http://api.graphql.com',\n    ['Authorization' => 'Basic xyz']\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$client = new Client(\n    'http://api.graphql.com',\n    [],\n    [ \n        'connect_timeout' => 5,\n        'timeout' => 5,\n        'headers' => [\n            'Authorization' => 'Basic xyz'\n            'User-Agent' => 'testing/1.0',\n        ],\n        'proxy' => [\n                'http'  => 'tcp://localhost:8125', // Use this proxy with \"http\"\n                'https' => 'tcp://localhost:9124', // Use this proxy with \"https\",\n                'no' => ['.mit.edu', 'foo.com']    // Don't use a proxy with these\n        ],\n        'cert' => ['/path/server.pem', 'password']\n        ...\n    ]\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$client = new Client(\n    'http://api.graphql.com',\n    [],\n    [],\n    $myHttpClient\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Variable Detection in PHP\nDESCRIPTION: Example showing how Psalm detects unused variables when dead code detection is enabled. The variable $a is declared but never used, while $b is used in an echo statement.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedVariable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : void {\n    $a = 5;\n    $b = 4;\n    echo $b;\n}\n```\n\n----------------------------------------\n\nTITLE: Method Return Value Assertions\nDESCRIPTION: Shows how to use assertions to specify return value types for class methods, including multiple assertions in a single DocBlock.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/adding_assertions.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Result {\n    /**\n     * @var ?Exception\n     */\n    private $exception;\n\n    /**\n     * @psalm-assert-if-true Exception $this->exception\n     * @psalm-assert-if-true Exception $this->getException()\n     */\n    public function hasException(): bool {\n        return $this->exception !== null;\n    }\n\n    public function getException(): ?Exception {\n        return $this->exception;\n    }\n\n    public function foo(): void {\n        if( $this->hasException() ) {\n            echo $this->exception->getMessage();\n        }\n    }\n}\n\n$result = new Result;\n\nif( $result->hasException() ) {\n    echo $result->getException()->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyInvalidOperand Error in PHP\nDESCRIPTION: This PHP function demonstrates a scenario that could trigger a PossiblyInvalidOperand error. It assigns a random value (either an array or an integer) to a variable and then attempts to add 5 to it, which may cause an error if the variable is an array.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidOperand.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : void {\n    $b = rand(0, 1) ? [] : 4;\n    echo $b + 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Correct Parameter Type Override in PHP\nDESCRIPTION: Shows the correct implementation where the child class E accepts both string and int types, maintaining compatibility with the parent class D while following the Liskov substitution principle.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImplementedParamTypeMismatch.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass D {\n    /** @param string $a */\n    public function foo($a): void {}\n}\n\nclass E extends D {\n    /** @param string|int $a */\n    public function foo($a): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using ASCII::to_transliterate for character conversion in PHP\nDESCRIPTION: Example showing how to use the to_transliterate method from the ASCII class to convert non-ASCII characters to their ASCII equivalents. This is compared with the alternative object-oriented approach using Stringy.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/build/docs/base.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Portable ASCII\nuse voku\\helper\\ASCII;\nASCII::to_transliterate('déjà σσς iıii'); // 'deja sss iiii'\n\n// voku/Stringy\nuse Stringy\\Stringy as S;\n$stringy = S::create('déjà σσς iıii');\n$stringy->toTransliterate();              // 'deja sss iiii'\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Closure with Type Annotations in PHP\nDESCRIPTION: Demonstrates how to create a function that returns a typed Closure. The example shows a function that returns a Closure which takes a boolean parameter and returns an integer, with the actual implementation adding two numbers.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/callable_types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @return Closure(bool):int\n */\nfunction delayedAdd(int $x, int $y) : Closure {\n  return function(bool $debug) use ($x, $y) {\n    if ($debug) echo \"got here\" . PHP_EOL;\n    return $x + $y;\n  };\n}\n\n$adder = delayedAdd(3, 4);\necho $adder(true);\n```\n\n----------------------------------------\n\nTITLE: Implementing and Using PSR-3 Logger Interface in PHP Class\nDESCRIPTION: This PHP snippet demonstrates the usage of a PSR-3 logger within a class. It shows how to inject a logger via the constructor, and log messages at different levels like 'info' and 'error'. The class depends on Psr\\Log\\LoggerInterface, which needs to be implemented by a concrete logger. Inputs include messages and an optional logger instance, while the output is log messages sent to the logger.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/log/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Psr\\Log\\LoggerInterface;\n\nclass Foo\n{\n    private $logger;\n\n    public function __construct(LoggerInterface $logger = null)\n    {\n        $this->logger = $logger;\n    }\n\n    public function doSomething()\n    {\n        if ($this->logger) {\n            $this->logger->info('Doing work');\n        }\n           \n        try {\n            $this->doSomethingElse();\n        } catch (Exception $exception) {\n            $this->logger->error('Oh no!', array('exception' => $exception));\n        }\n\n        // do something useful\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Encoding and Decoding with Passphrase in PHP\nDESCRIPTION: Demonstrates how to use a private key with a passphrase for JWT encoding and decoding.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$passphrase = '[YOUR_PASSPHRASE]';\n$privateKeyFile = '/path/to/key-with-passphrase.pem';\n\n$privateKey = openssl_pkey_get_private(\n    file_get_contents($privateKeyFile),\n    $passphrase\n);\n\n$payload = [\n    'iss' => 'example.org',\n    'aud' => 'example.com',\n    'iat' => 1356999524,\n    'nbf' => 1357000000\n];\n\n$jwt = JWT::encode($payload, $privateKey, 'RS256');\necho \"Encode:\\n\" . print_r($jwt, true) . \"\\n\";\n\n$publicKey = openssl_pkey_get_details($privateKey)['key'];\n\n$decoded = JWT::decode($jwt, new Key($publicKey, 'RS256'));\necho \"Decode:\\n\" . print_r((array) $decoded, true) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Getting the body contents - PHP\nDESCRIPTION: This snippet retrieves the contents of a stream, ensuring it has been rewound to read correctly.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$body = $response->getBody();\n$body->rewind(); // or $body->seek(0);\n$bodyText = $body->getContents();\n```\n\n----------------------------------------\n\nTITLE: Impure Method Call in Pure Function Example - PHP\nDESCRIPTION: Example showing how calling an impure method (foo) that modifies object state from within a pure function (filterOdd) creates a violation. The class A contains a mutable state and an impure method foo(), while filterOdd is marked as pure but incorrectly calls the impure method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureMethodCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public int $a = 5;\n\n    public function foo() : void {\n        $this->a++;\n    }\n}\n\n/** @psalm-pure */\nfunction filterOdd(int $i, A $a) : ?int {\n    $a->foo();\n\n    if ($i % 2 === 0 || $a->a === 2) {\n        return $i;\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Specializing Taints in Functions with @psalm-taint-specialize in PHP\nDESCRIPTION: Shows how to use the @psalm-taint-specialize annotation to tell Psalm that each invocation of the function should be treated separately, preventing false-positives with hardcoded values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-taint-specialize\n */\nfunction takesInput(string $s) : string {\n    return $s;\n}\n\necho htmlentities(takesInput($_GET[\"name\"]));\necho takesInput(\"hello\"); // No error\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy File Streams with LazyOpenStream\nDESCRIPTION: Shows how to create streams that only open their underlying file when an I/O operation is performed, saving resources.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$stream = new Psr7\\LazyOpenStream('/path/to/file', 'r');\n// The file has not yet been opened...\n\necho $stream->read(10);\n// The file is opened and read from only when needed.\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Invalid Iterator in PHP\nDESCRIPTION: This snippet demonstrates an error scenario where PHP attempts to iterate over a non-iterable value. The code initializes an integer and mistakenly uses a foreach loop to iterate over it, which is invalid. Understanding this can help in debugging similar issues in PHP applications.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidIterator.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$a = 5;\nforeach ($a as $b) {}\n\n```\n\n----------------------------------------\n\nTITLE: Defining and Overriding Final Constants in PHP\nDESCRIPTION: This PHP snippet demonstrates a parent class 'Foo' that defines a final constant 'BAR', and a child class 'Bar' that attempts to override it. It emits an event when a constant declared as final is overridden. No additional dependencies are required. The primary input and output involve defining constants that cannot be overridden without triggering a specific handling mechanism.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/OverriddenFinalConstant.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass Foo\n{\n    /** @var string */\n    final public const BAR='baz';\n}\n\nclass Bar extends Foo\n{\n    /** @var string */\n    public const BAR='foobar';\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fixing DocblockTypeContradiction with Strict Type-Hinting in PHP\nDESCRIPTION: This code snippet demonstrates how to fix the DocblockTypeContradiction issue by using stricter type-hints available in newer PHP versions. It removes the unnecessary null check and uses a string type-hint for the parameter.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DocblockTypeContradiction.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string $s) : void {\n    echo $s;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-7 Stream Interface Methods\nDESCRIPTION: This section provides an overview of methods in the StreamInterface necessary for handling data streams, including reading, writing, and managing stream properties essential for transferring content over HTTP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Interfaces.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `__toString()` | Reads all data from the stream into a string, from the beginning to end. | |\n| `close()` | Closes the stream and any underlying resources. | |\n| `detach()` | Separates any underlying resources from the stream. | |\n| `getSize()` | Get the size of the stream if known. | |\n| `eof()` | Returns true if the stream is at the end of the stream.| |\n| `isSeekable()` |  Returns whether or not the stream is seekable. | |\n| `seek($offset, $whence = SEEK_SET)` | Seek to a position in the stream. | |\n| `rewind()` | Seek to the beginning of the stream. | |\n| `isWritable()` | Returns whether or not the stream is writable. | |\n| `write($string)` | Write data to the stream. | |\n| `isReadable()` | Returns whether or not the stream is readable. | |\n| `read($length)` | Read data from the stream. | |\n| `getContents()` | Returns the remaining contents in a string | |\n| `getMetadata($key = null)()` | Get stream metadata as an associative array or retrieve a specific key. | |\n```\n\n----------------------------------------\n\nTITLE: Creating Pure Functions with @psalm-pure Annotation in PHP\nDESCRIPTION: Shows how to use @psalm-pure annotation to mark functions whose output depends solely on their input parameters, with an example of correct and incorrect usage.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Arithmetic {\n  /** @psalm-pure */\n  public static function add(int $left, int $right) : int {\n    return $left + $right;\n  }\n\n  /** @psalm-pure - this is wrong */\n  public static function addCumulative(int $left) : int {\n    /** @var int */\n    static $i = 0; // this is a side effect, and thus a bug\n    $i += $left;\n    return $i;\n  }\n}\n\necho Arithmetic::add(40, 2);\necho Arithmetic::add(40, 2); // same value is emitted\n\necho Arithmetic::addCumulative(3); // outputs 3\necho Arithmetic::addCumulative(3); // outputs 6\n```\n\n----------------------------------------\n\nTITLE: Specializing Taints in Classes with @psalm-taint-specialize in PHP\nDESCRIPTION: Demonstrates how to use the @psalm-taint-specialize annotation on both a class and function to prevent false-positives in taint analysis when using class properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-taint-specialize\n */\nclass User {\n    public string $name;\n\n    public function __construct(string $name) {\n        $this->name = $name;\n    }\n}\n\n/**\n * @psalm-taint-specialize\n */\nfunction echoUserName(User $user) {\n    echo $user->name; // No error\n}\n\n$user1 = new User(\"Keith\");\n$user2 = new User($_GET[\"name\"]);\n\nechoUserName($user1);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of DeepCopy in PHP\nDESCRIPTION: Demonstrates how to use DeepCopy to create a deep copy of an object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\n\n$copier = new DeepCopy();\n$myCopy = $copier->copy($myObject);\n```\n\n----------------------------------------\n\nTITLE: Fixed Array Implementation Without Duplicates\nDESCRIPTION: Corrected version of the array implementation that removes duplicate keys to prevent overwrites and maintain consistent behavior.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateArrayKey.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = [\n    'a' => 'one',\n    'b' => 'two',\n    'c' => 'three',\n];\n```\n\n----------------------------------------\n\nTITLE: Promise Resolution Chain Example\nDESCRIPTION: Demonstrates iterative promise resolution and chaining while maintaining constant stack size.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse GuzzleHttp\\Promise\\Promise;\n\n$parent = new Promise();\n$p = $parent;\n\nfor ($i = 0; $i < 1000; $i++) {\n    $p = $p->then(function ($v) {\n        // The stack size remains constant (a good thing)\n        echo xdebug_get_stack_depth() . ', ';\n        return $v + 1;\n    });\n}\n\n$parent->resolve(0);\nvar_dump($p->wait()); // int(1000)\n```\n\n----------------------------------------\n\nTITLE: Registering Callbacks with a Promise in PHP\nDESCRIPTION: Demonstrates how to create a new Promise and register onFulfilled and onRejected callbacks using the then() method. The callbacks will be triggered when the promise is resolved or rejected.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise->then(\n    // $onFulfilled\n    function ($value) {\n        echo 'The promise was fulfilled.';\n    },\n    // $onRejected\n    function ($reason) {\n        echo 'The promise was rejected.';\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MixedMethodCall Error in PHP with Psalm\nDESCRIPTION: This example shows code that generates a MixedMethodCall error in Psalm. The error occurs because Psalm cannot determine the type of the value returned by array_pop() and therefore cannot verify if calling the foo() method on it is valid.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedMethodCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo() : void {}\n}\n\nfunction callFoo(array $arr) : void {\n    array_pop($arr)->foo(); // MixedMethodCall emitted here\n}\n\ncallFoo(\n    [new A()]\n);\n```\n\n----------------------------------------\n\nTITLE: Checking if URI is Same-Document Reference with GuzzleHttp\\Psr7\\Uri::isSameDocumentReference\nDESCRIPTION: This method checks whether the URI is a same-document reference. A same-document reference refers to a URI that is, aside from its fragment component, identical to the base URI. The method takes a UriInterface and an optional base URI and returns a boolean value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n`public static function isSameDocumentReference(UriInterface $uri, UriInterface $base = null): bool`\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle with Composer\nDESCRIPTION: Command for installing Guzzle via Composer, which is the recommended installation method. This requires Composer to be installed on the system.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require guzzlehttp/guzzle\n```\n\n----------------------------------------\n\nTITLE: Defining Taint Sources in PHP with Psalm\nDESCRIPTION: Annotation used to mark methods or functions as sources of tainted data. This helps Psalm identify where potentially unsafe data enters the application.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n@psalm-taint-source <taint-type>\n```\n\n----------------------------------------\n\nTITLE: Creating Union Types in PHP\nDESCRIPTION: Examples showing how to construct Union type objects representing single and multiple types in Psalm's type system.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/plugins_type_system.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnew Union([new TNamedObject('Foo\\\\Bar\\\\SomeClass')]); // equivalent to Foo\\Bar\\SomeClass in docblock\nnew Union([new TString(), new TInt()]); // equivalent to string|int in docblock\n```\n\n----------------------------------------\n\nTITLE: Defining Redundant Function Call Given Docblock Type in PHP\nDESCRIPTION: The function 'foo' accepts an array where the first element is a lowercase string and the second is a list of lowercase strings. It processes this input to return the lowercase version of the first string from the supplied list, which is determined to be redundant according to the docblock specifications. The function ensures that the first element of the list is always in lowercase before returning it.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantFunctionCallGivenDocblockType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @param array{0: lowercase-string, 1: non-empty-list<lowercase-string>} $s\n *\n * @return lowercase-string\n */\nfunction foo($s): string {\n    $redundantList = array_values($s);\n    $redundantSubList = array_values($s[1]);\n    $redundantLowercase = strtolower($redundantSubList[0]);\n    return $redundantLowercase;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying JWTs with Google\\Auth\\AccessToken\nDESCRIPTION: PHP code demonstrating how to verify Google ID tokens and IAP ID tokens using the Google\\Auth\\AccessToken class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/auth/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\AccessToken;\n\n$auth = new AccessToken();\n$auth->verify($idToken);\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\AccessToken;\n\n$auth = new AccessToken();\n$auth->verify($idToken, [\n  'certsLocation' => AccessToken::IAP_CERT_URL\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Account Authentication for Google API in PHP\nDESCRIPTION: This example demonstrates how to set up authentication using a service account, including setting the credentials path and configuring the Google client.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json');\n\n$client = new Google\\Client();\n$client->useApplicationDefaultCredentials();\n$client->addScope(Google\\Service\\Drive::DRIVE);\n\n// Optional: Impersonate a user account\n$client->setSubject($user_to_impersonate);\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-external-mutation-free to Mark Methods That Don't Mutate External State in PHP\nDESCRIPTION: Demonstrates how to use @psalm-external-mutation-free to mark methods that don't mutate state externally to the class's scope, but may change internal state.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass E {\n  private string $s;\n\n  public function __construct(string $s) {\n    $this->s = $s;\n  }\n\n  /**\n   * @psalm-external-mutation-free\n   */\n  public function getShortMutating() : string {\n    $this->s .= \"hello\"; // this is fine\n    return substr($this->s, 0, 5);\n  }\n\n  /**\n   * @psalm-external-mutation-free\n   */\n  public function save() : void {\n    file_put_contents(\"foo.txt\", $this->s); // this is a bug\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Private Mutation Control with @psalm-allow-private-mutation in PHP\nDESCRIPTION: Shows how to use @psalm-allow-private-mutation to create properties that can only be mutated within their own class methods.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Counter {\n  /**\n   * @readonly\n   * @psalm-allow-private-mutation\n   */\n  public int $count = 0;\n\n  public function increment() : void {\n    $this->count++;\n  }\n}\n\n$counter = new Counter();\necho $counter->count; // outputs 0\n$counter->increment(); // Method can mutate property\necho $counter->count; // outputs 1\n$counter->count = 5; // This will fail, as it's mutating a property directly\n```\n\n----------------------------------------\n\nTITLE: Using Intervals Class for Version Constraints\nDESCRIPTION: Examples of using the Composer\\Semver\\Intervals class for working with complex version constraints and intervals, including subset checking, intersection testing, and constraint optimization.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/semver/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Semver\\Intervals;\n\n// Checks whether $candidate is a subset of $constraint\nIntervals::isSubsetOf(ConstraintInterface $candidate, ConstraintInterface $constraint);\n\n// Checks whether $a and $b have any intersection, equivalent to $a->matches($b)\nIntervals::haveIntersections(ConstraintInterface $a, ConstraintInterface $b);\n\n// Optimizes a complex multi constraint by merging all intervals down to the smallest\n// possible multi constraint. The drawbacks are this is not very fast, and the resulting\n// multi constraint will have no human readable prettyConstraint configured on it\nIntervals::compactConstraint(ConstraintInterface $constraint);\n\n// Creates an array of numeric intervals and branch constraints representing a given constraint\nIntervals::get(ConstraintInterface $constraint);\n\n// Clears the memoization cache when you are done processing constraints\nIntervals::clear()\n```\n\n----------------------------------------\n\nTITLE: Installing PHP_CodeSniffer using Composer\nDESCRIPTION: This snippet shows how to install PHP_CodeSniffer globally using Composer. It also describes how to include it as a project dependency in the composer.json file and how to run it from the vendor bin directory.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"composer global require \\\"squizlabs/php_codesniffer=*\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Waiting on Pre-Resolved Promises\nDESCRIPTION: Shows how calling wait() on an already resolved promise skips the wait function and simply returns the resolved value. This demonstrates promise caching behavior.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$promise = new Promise(function () { die('this is not called!'); });\n$promise->resolve('foo');\necho $promise->wait(); // outputs \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Basic JWT Encoding and Decoding in PHP\nDESCRIPTION: Demonstrates how to encode a payload into a JWT and then decode it back, using a symmetric key and the HS256 algorithm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$key = 'example_key';\n$payload = [\n    'iss' => 'http://example.org',\n    'aud' => 'http://example.com',\n    'iat' => 1356999524,\n    'nbf' => 1357000000\n];\n\n$jwt = JWT::encode($payload, $key, 'HS256');\n$decoded = JWT::decode($jwt, new Key($key, 'HS256'));\n\nprint_r($decoded);\n\n$decoded_array = (array) $decoded;\n\nJWT::$leeway = 60; // $leeway in seconds\n$decoded = JWT::decode($jwt, new Key($key, 'HS256'));\n```\n\n----------------------------------------\n\nTITLE: Possibly Null Property Assignment in PHP\nDESCRIPTION: This PHP code demonstrates assigning a property to a possibly null object. Class `A` has a nullable string property `$foo`, and the function `foo` attempts to assign the string \"bar\" to `$a->foo` without checking if `$a` is null. This can lead to a runtime error if `$a` is indeed null.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var ?string */\n    public $foo;\n}\nfunction foo(?A $a) : void {\n    $a->foo = \"bar\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown using CommonMarkConverter\nDESCRIPTION: Example of using CommonMarkConverter class to convert Markdown to HTML with security options enabled. Demonstrates basic usage with configuration for stripping HTML input and disabling unsafe links.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse League\\CommonMark\\CommonMarkConverter;\n\n$converter = new CommonMarkConverter([\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\necho $converter->convert('# Hello World!');\n\n// <h1>Hello World!</h1>\n```\n\n----------------------------------------\n\nTITLE: Rejection Forwarding with Exceptions in Promises\nDESCRIPTION: Demonstrates how throwing an exception in an onRejected callback propagates to subsequent onRejected callbacks in the chain. This shows how error handling flows through promise chains.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise->then(null, function ($reason) {\n    throw new Exception($reason);\n})->then(null, function ($reason) {\n    assert($reason->getMessage() === 'Error!');\n});\n\n$promise->reject('Error!');\n```\n\n----------------------------------------\n\nTITLE: Using a Specific JSON Key for Authentication\nDESCRIPTION: PHP code demonstrating how to use a specific JSON key for authentication instead of the GOOGLE_APPLICATION_CREDENTIALS environment variable.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/auth/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\CredentialsLoader;\nuse Google\\Auth\\Middleware\\AuthTokenMiddleware;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// Define the Google Application Credentials array\n$jsonKey = ['key' => 'value'];\n\n// define the scopes for your API call\n$scopes = ['https://www.googleapis.com/auth/drive.readonly'];\n\n// Load credentials\n$creds = CredentialsLoader::makeCredentials($scopes, $jsonKey);\n\n// create middleware\n$middleware = new AuthTokenMiddleware($creds);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'base_uri' => 'https://www.googleapis.com',\n  'auth' => 'google_auth'  // authorize all requests\n]);\n\n// make the request\n$response = $client->get('drive/v2/files');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/code-unit as a project dependency\nDESCRIPTION: This code snippet shows how to install the `sebastian/code-unit` library as a local, per-project dependency using Composer.  This makes the library available for the project's runtime environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/code-unit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sebastian/code-unit\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-mutation-free to Mark Methods That Don't Mutate State in PHP\nDESCRIPTION: Shows how to use @psalm-mutation-free to annotate methods that don't mutate any state, either internally or externally to the class's scope. This helps enforce pure functions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass D {\n  private string $s;\n\n  public function __construct(string $s) {\n    $this->s = $s;\n  }\n\n  /**\n   * @psalm-mutation-free\n   */\n  public function getShort() : string {\n    return substr($this->s, 0, 5);\n  }\n\n  /**\n   * @psalm-mutation-free\n   */\n  public function getShortMutating() : string {\n    $this->s .= \"hello\"; // this is a bug\n    return substr($this->s, 0, 5);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Trait Method Signature Mismatch in PHP\nDESCRIPTION: This PHP code demonstrates a trait `T` with an abstract method `foo` that expects an integer. The class `A` uses the trait `T` and implements the `foo` method, but with a string parameter and a void return type, causing a signature mismatch.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TraitMethodSignatureMismatch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntrait T {\n    abstract public function foo(int $i);\n}\n\nclass A {\n    use T;\n\n    public function foo(string $s) : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using QueryBuilder for Complex Queries in PHP\nDESCRIPTION: Demonstrates how to use the QueryBuilder class to construct complex GraphQL queries in PHP. This snippet illustrates setting variables, arguments, and selecting multiple fields within the same query. It requires a pre-configured GraphQL client and the use of the QueryBuilder class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$builder = (new QueryBuilder())\n    ->setVariable('namePrefix', 'String', true)\n    ->selectField(\n        (new QueryBuilder('companies'))\n            ->setArgument('filter', new RawObject('{name_starts_with: $namePrefix}'))\n            ->selectField('name')\n            ->selectField('serialNumber')\n    )\n    ->selectField(\n        (new QueryBuilder('company'))\n            ->setArgument('serialNumber', 123)\n            ->selectField('name')\n    );\n$gql = $builder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Getting Amazon S3 Object URL (PHP)\nDESCRIPTION: This snippet showcases the `Aws\\S3\\S3Client::getObjectUrl` method for retrieving the URL of an Amazon S3 object. It handles both public and pre-signed URLs, providing a convenient way to access object URLs.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\"Aws\\S3\\S3Client::getObjectUrl\"\n```\n\n----------------------------------------\n\nTITLE: Extending Xdebug Handler in PHP\nDESCRIPTION: Example class extending XdebugHandler to customize restart behavior and modify ini settings. Implements custom logic for help commands and phar.readonly configuration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\nuse MyApp\\Command;\n\nclass MyRestarter extends XdebugHandler\n{\n    private $required;\n\n    protected function requiresRestart(bool $default): bool\n    {\n        if (Command::isHelp()) {\n            # No need to disable Xdebug for this\n            return false;\n        }\n\n        $this->required = (bool) ini_get('phar.readonly');\n        return $this->required || $default;\n    }\n\n    protected function restart(array $command): void\n    {\n        if ($this->required) {\n            # Add required ini setting to tmpIni\n            $content = file_get_contents($this->tmpIni);\n            $content .= 'phar.readonly=0'.PHP_EOL;\n            file_put_contents($this->tmpIni, $content);\n        }\n\n        parent::restart($command);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Basic Promise in PHP\nDESCRIPTION: Demonstrates creating a Promise object with wait and cancel functions, showing basic promise resolution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise(\n    function () use (&$promise) {\n        $promise->resolve('waited');\n    },\n    function () {\n        // do something that will cancel the promise computation (e.g., close\n        // a socket, cancel a database query, etc...)\n    }\n);\n\nassert('waited' === $promise->wait());\n```\n\n----------------------------------------\n\nTITLE: Using Cached Key Sets for JWT Decoding in PHP\nDESCRIPTION: Shows how to use the CachedKeySet class to fetch and cache JWKS from a public URI for JWT decoding.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\CachedKeySet;\nuse Firebase\\JWT\\JWT;\n\n$jwksUri = 'https://www.gstatic.com/iap/verify/public_key-jwk';\n\n$httpClient = new GuzzleHttp\\Client();\n\n$httpFactory = new GuzzleHttp\\Psr\\HttpFactory();\n\n$cacheItemPool = Phpfastcache\\CacheManager::getInstance('files');\n\n$keySet = new CachedKeySet(\n    $jwksUri,\n    $httpClient,\n    $httpFactory,\n    $cacheItemPool,\n    null,\n    true\n);\n\n$jwt = 'eyJhbGci...';\n$decoded = JWT::decode($jwt, $keySet);\n```\n\n----------------------------------------\n\nTITLE: Running PHP_CodeSniffer with PSR-12 Standard\nDESCRIPTION: This snippet illustrates how to check code against the PSR-12 coding standard using the `--standard` command line argument with PHP_CodeSniffer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n\"phpcs --standard=PSR12 /path/to/code-directory\"\n```\n\n----------------------------------------\n\nTITLE: Promise Forwarding with Multiple Promises in PHP\nDESCRIPTION: Demonstrates how to chain multiple promises together where a promise in the chain depends on the resolution of another promise. This creates a dependency chain between promises where subsequent callbacks wait for previous promises to be fulfilled.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$nextPromise = new Promise();\n\n$promise\n    ->then(function ($value) use ($nextPromise) {\n        echo $value;\n        return $nextPromise;\n    })\n    ->then(function ($value) {\n        echo $value;\n    });\n\n// Triggers the first callback and outputs \"A\"\n$promise->resolve('A');\n// Triggers the second callback and outputs \"B\"\n$nextPromise->resolve('B');\n```\n\n----------------------------------------\n\nTITLE: Exchanging Authorization Code for Access Token in PHP\nDESCRIPTION: This code snippet shows how to exchange the authorization code for an access token in the OAuth flow.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nif (isset($_GET['code'])) {\n    $token = $client->fetchAccessTokenWithAuthCode($_GET['code']);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Translation Component with Composer\nDESCRIPTION: This snippet shows how to install the Symfony Translation component using Composer, a dependency management tool for PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/translation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfony/translation\n```\n\n----------------------------------------\n\nTITLE: Using AppendStream to Combine Multiple Streams\nDESCRIPTION: Demonstrates how to combine multiple streams using the AppendStream class, which reads from multiple streams in sequence.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$a = Psr7\\Utils::streamFor('abc, ');\n$b = Psr7\\Utils::streamFor('123.');\n$composed = new Psr7\\AppendStream([$a, $b]);\n\n$composed->addStream(Psr7\\Utils::streamFor(' Above all listen to me'));\n\necho $composed; // abc, 123. Above all listen to me.\n```\n\n----------------------------------------\n\nTITLE: Advanced Type Validation Schema\nDESCRIPTION: Example showing how to define a schema with multiple allowed values and type casting.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$schema = Expect::structure([\n    'processRefund' => Expect::anyOf(true, false, 1, 0)->castTo('bool'),\n    'refundAmount' => Expect::int(),\n]);\n\n$normalized = $processor->process($schema, $data);\nis_bool($normalized->processRefund); // true\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Throw in PHP\nDESCRIPTION: This snippet shows an invalid throw operation in PHP, where a class that does not extend Exception or implement Throwable is being thrown. This results in an error as PHP requires thrown objects to be instances of Exception or implement the Throwable interface. This code includes a simple class `A` that does not fulfill this requirement, leading to runtime issues.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidThrow.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\n\\nclass A {}\\nthrow new A();\n```\n\n----------------------------------------\n\nTITLE: Using Encoding Class with Multiple Encoding Methods\nDESCRIPTION: Example demonstrating the usage of various encoding methods including Base64, Base32, and Hex encoding using the main Encoding class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/constant_time_encoding/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse ParagonIE\\ConstantTime\\Encoding;\n\n// possibly (if applicable): \n// require 'vendor/autoload.php';\n\n$data = random_bytes(32);\necho Encoding::base64Encode($data), \"\\n\";\necho Encoding::base32EncodeUpper($data), \"\\n\";\necho Encoding::base32Encode($data), \"\\n\";\necho Encoding::hexEncode($data), \"\\n\";\necho Encoding::hexEncodeUpper($data), \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Running Psalm Basic Command\nDESCRIPTION: Basic command to run Psalm from project root directory to scan all files referenced in projectFiles configuration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/command_line_usage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/psalm\n```\n\n----------------------------------------\n\nTITLE: Adding Plugins to Psalm Configuration\nDESCRIPTION: This XML snippet shows how to add a plugin to the Psalm configuration. Plugins can be referenced by filename or absolute path. Make sure the path is correct.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/authoring_plugins.md#2025-04-21_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<plugins>\n    <plugin filename=\"src/plugins/SomePlugin.php\" />\n    <plugin filename=\"/path/to/SomePlugin.php\" />\n</plugins>\n```\n\n----------------------------------------\n\nTITLE: Accessing Array with Undefined Global Variable\nDESCRIPTION: Illustrates a scenario where an array is indexed using a global variable with an indeterminate type, which can cause potential runtime errors or type safety issues\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\necho [1, 2, 3][$GLOBALS['foo']];\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Null in PHP\nDESCRIPTION: This code demonstrates the problematic pattern that triggers a NullIterator error in PHP. The foreach loop attempts to iterate over a null value, which is not a valid iterable object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullIterator.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nforeach (null as $a) {}\n```\n\n----------------------------------------\n\nTITLE: Uploading File to Amazon S3 using upload method\nDESCRIPTION: Simplified example showing how to upload a file to Amazon S3 using the upload method, which automatically handles single or multipart uploads as needed.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $resource = fopen('/path/to/file', 'r');\n    $s3->upload('my-bucket', 'my-object', $resource, 'public-read');\n} catch (S3Exception $e) {\n    echo \"There was an error uploading the file.\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Values\nDESCRIPTION: Examples of generating random bytes, integers, and strings using the generator instance\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/random-lib/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Generate a random string that is 32 bytes in length.\n$bytes = $generator->generate(32);\n\n// Generate a whole number between 5 and 15.\n$randomInt = $generator->generateInt(5, 15);\n\n// Generate a 32 character string that only contains the letters\n// 'a', 'b', 'c', 'd', 'e', and 'f'.\n$randomString = $generator->generateString(32, 'abcdef');\n```\n\n----------------------------------------\n\nTITLE: Running Psalm for Static Analysis\nDESCRIPTION: Executes Psalm to perform static analysis on the project. This command will identify and report potential issues in the codebase.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/psalm\n```\n\n----------------------------------------\n\nTITLE: Using Proxy-Authorization Header for IAP\nDESCRIPTION: PHP code showing how to use the Proxy-Authorization header for authentication with Google Cloud Identity-Aware Proxy (IAP).\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/auth/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\ApplicationDefaultCredentials;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// specify the path to your application credentials\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n\n$targetAudience = 'YOUR_ID_TOKEN_AUDIENCE';\n\n// create middleware\n$middleware = ApplicationDefaultCredentials::getProxyIdTokenMiddleware($targetAudience);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'auth' => ['username', 'pass'], // auth option handled by your application\n  'proxy_auth' => 'google_auth',\n]);\n\n// make the request\n$response = $client->get('/');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Using a Specific JSON Key for Service Account Authentication in PHP\nDESCRIPTION: This snippet shows how to use a specific JSON key for service account authentication instead of using the GOOGLE_APPLICATION_CREDENTIALS environment variable.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$jsonKey = [\n   'type' => 'service_account',\n   // ...\n];\n$client = new Google\\Client();\n$client->setAuthConfig($jsonKey);\n```\n\n----------------------------------------\n\nTITLE: Resource Consumption Timing in PHP with ResourceUsageFormatter\nDESCRIPTION: This snippet shows how to measure the resource consumption (time and memory) using the ResourceUsageFormatter class while executing a loop. It starts the timer, runs a sample operation, and prints the resource usage when stopping the timer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-timer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse SebastianBergmann\\Timer\\ResourceUsageFormatter;\nuse SebastianBergmann\\Timer\\Timer;\n\n$timer = new Timer;\n$timer->start();\n\nforeach (\\range(0, 100000) as $i) {\n    // ...\n}\n\nprint (new ResourceUsageFormatter)->resourceUsage($timer->stop());\n?>\n```\n\n----------------------------------------\n\nTITLE: Converting String to ASCII in PHP\nDESCRIPTION: Converts a string to ASCII, replacing non-ASCII characters with their closest counterparts. Supports language-specific transliteration and various options for handling unsupported characters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nASCII::to_ascii('�Düsseldorf�', 'en'); // Dusseldorf\n```\n\n----------------------------------------\n\nTITLE: Complex Templated Class with IteratorAggregate in PHP\nDESCRIPTION: Advanced example showing template usage with the IteratorAggregate interface and how template parameters can be reused across multiple arguments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T0 of array-key\n *\n * @template-implements IteratorAggregate<T0, int>\n */\nabstract class Foo implements IteratorAggregate {\n  /**\n   * @var int\n   */\n  protected $rand_min;\n\n  /**\n   * @var int\n   */\n  protected $rand_max;\n\n  public function __construct(int $rand_min, int $rand_max) {\n    $this->rand_min = $rand_min;\n    $this->rand_max = $rand_max;\n  }\n\n  /**\n   * @return Generator<T0, int, mixed, T0>\n   */\n  public function getIterator() : Generator {\n    $j = random_int($this->rand_min, $this->rand_max);\n    for($i = $this->rand_min; $i <= $j; $i += 1) {\n      yield $this->getFuzzyType($i) => $i ** $i;\n    }\n\n    return $this->getFuzzyType($j);\n  }\n\n  /**\n   * @return T0\n   */\n  abstract protected function getFuzzyType(int $i);\n}\n\n/**\n * @template-extends Foo<int>\n */\nclass Bar extends Foo {\n  protected function getFuzzyType(int $i) : int {\n    return $i;\n  }\n}\n\n/**\n * @template-extends Foo<string>\n */\nclass Baz extends Foo {\n  protected function getFuzzyType(int $i) : string {\n    return static::class . '[' . $i . ']';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Monolog via Composer\nDESCRIPTION: Command to install the latest version of Monolog using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/monolog/monolog/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require monolog/monolog\n```\n\n----------------------------------------\n\nTITLE: Exception Handling during Synchronous Wait\nDESCRIPTION: Demonstrates how exceptions thrown in a promise's wait function are propagated. When the wait function throws an exception, the promise is rejected and the exception is thrown.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$promise = new Promise(function () use (&$promise) {\n    throw new Exception('foo');\n});\n\n$promise->wait(); // throws the exception.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Possibly Null Reference Handling in PHP\nDESCRIPTION: This PHP snippet illustrates a scenario where a method is called on an object that might be null, potentially leading to a runtime error. It shows a function `foo` taking an instance of class `A` or null as an argument and invoking the `bar` method without null checks. There are no explicit dependencies, but it assumes the presence of PHP environment for execution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullReference.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    public function bar() : void {}\n}\nfunction foo(?A $a) : void {\n    $a->bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Reading File Slices with LimitStream\nDESCRIPTION: Demonstrates using LimitStream to read specific portions of a stream, useful for breaking large files into smaller pieces.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor(fopen('/tmp/test.txt', 'r+'));\necho $original->getSize();\n// >>> 1048576\n\n// Limit the size of the body to 1024 bytes and start reading from byte 2048\n$stream = new Psr7\\LimitStream($original, 1024, 2048);\necho $stream->getSize();\n// >>> 1024\necho $stream->tell();\n// >>> 0\n```\n\n----------------------------------------\n\nTITLE: Using Composer to Install PHPUnit - PHP\nDESCRIPTION: This snippet mentions using Composer to install PHPUnit and its dependencies, directing the user to specific documentation for detailed steps. It emphasizes the importance of installation guidance for successful software setup.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/phpunit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Please refer to the \"Getting Started\" guide for details on how to install PHPUnit.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ImplementationRequirementViolation with PHP Traits and Interfaces\nDESCRIPTION: Shows how the @psalm-require-implements annotation enforces interface implementation requirements on classes using traits. The example demonstrates a violation where class C uses trait T but fails to implement the required interfaces A and B.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImplementationRequirementViolation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ninterface A { }\ninterface B { }\n\n/**\n * @psalm-require-implements A\n * @psalm-require-implements B\n */\ntrait T { }\n\nclass C {\n  // ImplementationRequirementViolation is emitted, as T requires\n  // the using class C to implement A and B, which is not the case\n  use T; \n}\n```\n\n----------------------------------------\n\nTITLE: Using Variables in GraphQL Queries with PHP\nDESCRIPTION: Demonstrates how to utilize variables in GraphQL queries by providing an associative array mapping variable names to values. This snippet involves running a query using the Client class with input variables specified.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setVariables(\n        [\n            new Variable('name', 'String', true),\n            new Variable('limit', 'Int', false, 5)\n        ]\n    )\n    ->setArguments(['name' => '$name', 'first' => '$limit'])\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n$variablesArray = ['name' => 'Tech Co.', 'first' => 5];\n$results = $client->runQuery($gql, true, $variablesArray);\n```\n\n----------------------------------------\n\nTITLE: Reading Lines from Stream with GuzzleHttp\\Psr7\\Utils::readLine\nDESCRIPTION: This method reads a line from a stream up to the maximum allowed buffer length. It takes a StreamInterface object and an optional maximum length, returning the read line as a string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n`public static function readLine(StreamInterface $stream, int $maxLength = null): string`\n```\n\n----------------------------------------\n\nTITLE: Basic Psalm Configuration Structure in XML\nDESCRIPTION: A minimal example of a Psalm configuration file that specifies the project files to analyze.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<psalm>\n    <projectFiles>\n        <directory name=\"src\" />\n    </projectFiles>\n</psalm>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Deep Copy Function in PHP\nDESCRIPTION: Shows how to create a custom deep copy function using DeepCopy.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme;\n\nuse DeepCopy\\DeepCopy;\n\nfunction deep_copy($var)\n{\n    static $copier = null;\n    \n    if (null === $copier) {\n        $copier = new DeepCopy(true);\n    }\n    \n    return $copier->copy($var);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-pure for Taint Specialization in PHP\nDESCRIPTION: Demonstrates how the @psalm-pure annotation can be used to achieve the same taint specialization effect, since pure functions specialize the taintedness of their output based on input.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-pure\n */\nfunction takesInput(string $s) : string {\n    return $s;\n}\n\necho htmlentities(takesInput($_GET[\"name\"]));\necho takesInput(\"hello\"); // No error\n```\n\n----------------------------------------\n\nTITLE: Calling an Impure Function from a Pure Function in PHP\nDESCRIPTION: This snippet shows a function 'filterOdd' that is marked as pure but calls the impure function 'impure'. The purpose is to highlight the incorrect usage of impure functions within a context that is expected to be pure, demonstrating potential bugs and side effects in functional programming.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureFunctionCall.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @psalm-pure */\nfunction filterOdd(array $a) : void {\n    impure($a);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running GraphQL Queries with PHP Client\nDESCRIPTION: Shows how to execute GraphQL queries using the Client class in PHP and retrieve results in both object and array structures. It involves using the runQuery method of the Client class with optional variable inputs.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$results = $client->runQuery($gql);\n$results->getData()->companies[0]->branches;\n```\n\nLANGUAGE: php\nCODE:\n```\n$results = $client->runQuery($gql, true);\n$results->getData()['companies'][1]['branches']['address'];\n```\n\n----------------------------------------\n\nTITLE: Uploading a Directory to Amazon S3 (PHP)\nDESCRIPTION: This snippet highlights the usage of the `$s3->uploadDirectory()` method for uploading a local directory to an Amazon S3 bucket. This abstracts the complexities of iterating through files and uploading them individually.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"$s3->uploadDirectory();\"\n```\n\n----------------------------------------\n\nTITLE: Initializing ArrayToXml with Sample Data in PHP\nDESCRIPTION: This snippet demonstrates how to create an ArrayToXml object with a sample array containing nested data structures.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/spatie/array-to-xml/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$array = [\n    'Good guy' => [\n        'name' => 'Luke Skywalker',\n        'weapon' => 'Lightsaber'\n    ],\n    'Bad guy' => [\n        'name' => 'Sauron',\n        'weapon' => 'Evil Eye'\n    ]\n];\n$arrayToXml = new ArrayToXml($array);\n```\n\n----------------------------------------\n\nTITLE: Using Validated String Array in Functions\nDESCRIPTION: Shows how Psalm understands type information after array validation, preventing type mismatches in subsequent operations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/adding_assertions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction takesString(string $s) : void {}\nfunction takesInt(int $s) : void {}\n\nfunction takesArray(array $arr) : void {\n    takesInt($arr[0]); // this is fine\n\n    validateStringArray($arr);\n\n    takesInt($arr[0]); // this is an error\n\n    foreach ($arr as $a) {\n        takesString($a); // this is fine\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Validated Data Types in PHP\nDESCRIPTION: This snippet showcases the ability to cast validated scalar data types into specific classes or native types using the Expect library. The castTo() method is particularly useful for transforming data into a desired format after successful validation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nExpect::scalar()->castTo('string');\n```\n\nLANGUAGE: php\nCODE:\n```\nExpect::scalar()->castTo('AddressEntity');\n```\n\n----------------------------------------\n\nTITLE: Recovery from Rejection in Promise Chains\nDESCRIPTION: Demonstrates how a rejection can be converted to a successful resolution by returning a normal value from an onRejected callback. This allows promise chains to recover from errors.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise\n    ->then(null, function ($reason) {\n        return \"It's ok\";\n    })\n    ->then(function ($value) {\n        assert($value === \"It's ok\");\n    });\n\n$promise->reject('Error!');\n```\n\n----------------------------------------\n\nTITLE: Making JSON Request to Google Datastore API\nDESCRIPTION: Example of a JSON POST request to the Google Datastore API showing query structure for retrieving Book entities with sorting and limiting\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"query\": {\n        \"kind\": [{\n            \"name\": \"Book\"\n        }],\n        \"order\": [{\n            \"property\": {\n                \"name\": \"title\"\n            },\n            \"direction\": \"descending\"\n        }],\n        \"limit\": 10\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ShallowCopyFilter in DeepCopy PHP\nDESCRIPTION: Demonstrates how to use ShallowCopyFilter to perform shallow copying for specific types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\TypeFilter\\ShallowCopyFilter;\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\nuse Mockery as m;\n\n$this->deepCopy = new DeepCopy();\n$this->deepCopy->addTypeFilter(\n\tnew ShallowCopyFilter,\n\tnew TypeMatcher(m\\MockInterface::class)\n);\n\n$myServiceWithMocks = new MyService(m::mock(MyDependency1::class), m::mock(MyDependency2::class));\n// All mocks will be just cloned, not deep copied\n```\n\n----------------------------------------\n\nTITLE: Making Direct HTTP Requests with Authentication\nDESCRIPTION: Example of making authenticated HTTP requests directly using the Google client\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// create the Google client\n$client = new Google\\Client();\n\n/**\n * Set your method for authentication. Depending on the API, This could be\n * directly with an access token, API key, or (recommended) using\n * Application Default Credentials.\n */\n$client->useApplicationDefaultCredentials();\n$client->addScope(Google\\Service\\Plus::PLUS_ME);\n\n// returns a Guzzle HTTP Client\n$httpClient = $client->authorize();\n\n// make an HTTP request\n$response = $httpClient->get('https://www.googleapis.com/plus/v1/people/me');\n```\n\n----------------------------------------\n\nTITLE: Getting comma-separated values from a header - PHP\nDESCRIPTION: This snippet retrieves the value of a specified header from both the request and response as a comma-separated string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// getting value from request headers\n$request->getHeaderLine('Content-Type'); // will return: \"text/html; charset=UTF-8\"\n// getting value from response headers\n$response->getHeaderLine('My-Custom-Header'); // will return:  \"My Custom Message; The second message\"\n```\n\n----------------------------------------\n\nTITLE: Emitting UndefinedThisPropertyFetch in PHP\nDESCRIPTION: This snippet demonstrates accessing a property that does not exist in an object context, resulting in an UndefinedThisPropertyFetch error. The code defines a class 'A' with a method 'foo' that attempts to echo an undefined property 'foo'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedThisPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    function foo() {\n        echo $this->foo;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Query Strings with GuzzleHttp\\Psr7\\Query::build\nDESCRIPTION: This method builds a query string from an array of key-value pairs. It can utilize the return value of the `parse()` method to construct a query string.  It does not modify the keys when encountering arrays, unlike `http_build_query()`.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n`public static function build(array $params, int|false $encoding = PHP_QUERY_RFC3986): string`\n```\n\n----------------------------------------\n\nTITLE: Parsing PHP DocBlock Comments\nDESCRIPTION: Shows how to create and parse a DocBlock comment string using the factory's create method, including an example of proper DocBlock formatting with summary and description.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/reflection-docblock/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$docComment = <<<DOCCOMMENT\n/**\n * This is an example of a summary.\n *\n * This is a Description. A Summary and Description are separated by either\n * two subsequent newlines (thus a whiteline in between as can be seen in this\n * example), or when the Summary ends with a dot (`.`) and some form of\n * whitespace.\n */\nDOCCOMMENT;\n\n$docblock = $factory->create($docComment);\n```\n\n----------------------------------------\n\nTITLE: Fixing Undefined Array Offset by Ensuring Key Existence\nDESCRIPTION: Alternative solution that ensures the array key always exists by including it in all initialization paths with a default value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedArrayOffset.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (rand(0, 1)) {\n    $arr = [\"a\" => 1, \"b\" => 2];\n} else {\n    $arr = [\"a\" => 3, \"b\" => 0];\n}\n\necho $arr[\"b\"];\n```\n\n----------------------------------------\n\nTITLE: Attempting to Instantiate an Abstract Class in PHP\nDESCRIPTION: This code snippet demonstrates the incorrect usage of an abstract class by trying to create a new instance of it directly. In PHP, abstract classes are not meant to be instantiated and doing so will result in a fatal error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/AbstractInstantiation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nabstract class A {}\nnew A();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parse Error in PHP\nDESCRIPTION: This code snippet exemplifies a parse error in PHP caused by a missing semicolon. It defines a class 'A' with a method 'foo' that attempts to echo a string without proper termination, thereby causing a parse error when executed.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParseError.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n  public function foo() : void {\n    echo \"foo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Promise Task Queue\nDESCRIPTION: Demonstrates how to run the task queue for resolving promises asynchronously.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Get the global task queue\n$queue = GuzzleHttp\\Promise\\Utils::queue();\n$queue->run();\n```\n\n----------------------------------------\n\nTITLE: Carbon Installation Usage with Composer\nDESCRIPTION: Example of using Carbon after installing via Composer, showing autoloading and basic usage.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nesbot/carbon/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php';\n\nuse Carbon\\Carbon;\n\nprintf(\"Now: %s\", Carbon::now());\n```\n\n----------------------------------------\n\nTITLE: Converting Characters to ASCII with Language-Specific Rules in PHP\nDESCRIPTION: Example demonstrating the to_ascii() method with language-specific character conversion rules. Shows how German uses 'ue' for 'ü' while English uses 'u'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho ASCII::to_ascii('�Düsseldorf�', 'de');\n  \n// will output\n// Duesseldorf\n\necho ASCII::to_ascii('�Düsseldorf�', 'en');\n  \n// will output\n// Dusseldorf\n```\n\n----------------------------------------\n\nTITLE: Making API Calls with Application Default Credentials\nDESCRIPTION: PHP code demonstrating how to use Application Default Credentials to authenticate and make API calls to Google Drive.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/auth/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Google\\Auth\\ApplicationDefaultCredentials;\nuse GuzzleHttp\\Client;\nuse GuzzleHttp\\HandlerStack;\n\n// specify the path to your application credentials\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n\n// define the scopes for your API call\n$scopes = ['https://www.googleapis.com/auth/drive.readonly'];\n\n// create middleware\n$middleware = ApplicationDefaultCredentials::getMiddleware($scopes);\n$stack = HandlerStack::create();\n$stack->push($middleware);\n\n// create the HTTP client\n$client = new Client([\n  'handler' => $stack,\n  'base_uri' => 'https://www.googleapis.com',\n  'auth' => 'google_auth'  // authorize all requests\n]);\n\n// make the request\n$response = $client->get('drive/v2/files');\n\n// show the result!\nprint_r((string) $response->getBody());\n```\n\n----------------------------------------\n\nTITLE: Generating Structure Schema from Class in PHP\nDESCRIPTION: This snippet illustrates how to create a data structure schema from a PHP class definition using the Expect library. This feature aids in the consistent processing and validation of objects, specifically enhancing data integrity when dealing with complex data structures.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass Config\n{\n\t/** @var string */\n\tpublic $name;\n\t/** @var string|null */\n\tpublic $password;\n\t/** @var bool */\n\tpublic $admin = false;\n}\n\n$schema = Expect::from(new Config);\n\n$data = [\n\t'name' => 'jeff',\n];\n\n$normalized = $processor->process($schema, $data);\n// $normalized instanceof Config\n// $normalized = {'name' => 'jeff', 'password' => null, 'admin' => false}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass Config\n{\n\tpublic string $name;\n\tpublic ?string $password;\n\tpublic bool $admin = false;\n}\n\n$schema = Expect::from(new Config);\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema = Expect::from(new class {\n\tpublic string $name;\n\tpublic ?string $password;\n\tpublic bool $admin = false;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$schema = Expect::from(new Config, [\n\t'name' => Expect::string()->pattern('\\w:.*'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Compact Exports - PHP\nDESCRIPTION: This code illustrates how to produce compact exports of arrays, objects, and long strings using the shortenedExport method of the Sebastian Exporter. This is useful for limiting the output size when visualizing large structures.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/exporter/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SebastianBergmann\\Exporter\\Exporter;\n\n$exporter = new Exporter;\n\n// Array ()\nprint $exporter->shortenedExport(array());\n\n// Array (...)\nprint $exporter->shortenedExport(array(1,2,3,4,5));\n\n// stdClass Object ()\nprint $exporter->shortenedExport(new stdClass);\n\n// Exception Object (...)\nprint $exporter->shortenedExport(new Exception);\n\n// this\\nis\\na\\nsuper\\nlong\\nstring\\nt...\\nspace\nprint $exporter->shortenedExport(\n<<<LONG_STRING\nthis\nis\na\nsuper\nlong\nstring\nthat\nwraps\na\nlot\nand\neats\nup\na\nlot\nof\nspace\nLONG_STRING\n);\n\n```\n\n----------------------------------------\n\nTITLE: Using Instantiator to Create Class Instances in PHP\nDESCRIPTION: This snippet demonstrates how to use the Instantiator class to create a new instance of a class without calling its constructor or using any of its APIs.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$instantiator = new \\Doctrine\\Instantiator\\Instantiator();\n\n$instance = $instantiator->instantiate(\\My\\ClassName\\Here::class);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Symfony Translation Component in PHP\nDESCRIPTION: This code demonstrates how to use the Symfony Translation component to create a translator, add a resource, and translate a string from English to French.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/translation/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Translation\\Translator;\nuse Symfony\\Component\\Translation\\Loader\\ArrayLoader;\n\n$translator = new Translator('fr_FR');\n$translator->addLoader('array', new ArrayLoader());\n$translator->addResource('array', [\n    'Hello World!' => 'Bonjour !',\n], 'fr_FR');\n\necho $translator->trans('Hello World!'); // outputs « Bonjour ! »\n```\n\n----------------------------------------\n\nTITLE: Implementing Traversable Incorrectly in PHP\nDESCRIPTION: Demonstrates a fatal error scenario where a class directly implements Traversable without using Iterator or IteratorAggregate interfaces. This implementation will cause a runtime error in PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidTraversableImplementation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @implements Traversable<mixed, mixed>\n */\nfinal class C implements Traversable {} // will cause fatal error\n```\n\n----------------------------------------\n\nTITLE: Alternative PHP Implementation using Individual Property Settings\nDESCRIPTION: Alternative approach using individual property setters for building the Datastore query\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// create the datastore service class\n$datastore = new Google\\Service\\Datastore($client);\n\n// build the query\n$request = new Google\\Service\\Datastore_RunQueryRequest();\n$query = new Google\\Service\\Datastore\\Query();\n//   - set the order\n$order = new Google\\Service\\Datastore_PropertyOrder();\n$order->setDirection('descending');\n$property = new Google\\Service\\Datastore\\PropertyReference();\n$property->setName('title');\n$order->setProperty($property);\n$query->setOrder([$order]);\n//   - set the kinds\n$kind = new Google\\Service\\Datastore\\KindExpression();\n$kind->setName('Book');\n$query->setKinds([$kind]);\n//   - set the limit\n$query->setLimit(10);\n\n// add the query to the request and make the request\n$request->setQuery($query);\n$response = $datastore->projects->runQuery('YOUR_DATASET_ID', $request);\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Query with Inline Fragments in PHP\nDESCRIPTION: Demonstrates how to use inline fragments in a GraphQL query to access data on underlying concrete types when querying interface types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = new Query('companies');\n$gql->setSelectionSet(\n    [\n        'serialNumber',\n        'name',\n        (new InlineFragment('PrivateCompany'))\n            ->setSelectionSet(\n                [\n                    'boardMembers',\n                    'shareholders',\n                ]\n            ),\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Methods in PHP Namespaces\nDESCRIPTION: This snippet demonstrates accessing a method marked as internal from a different namespace. It showcases two classes within separate namespaces, where one class attempts to invoke an internal method from another class. The method 'barBar' in namespace 'A' is marked as internal, which restricts its access in other namespaces. The 'batBat' method in class 'Bat' calls 'barBar' method, demonstrating an attempt to access internal methods across namespaces, which could generate access control issues.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InternalMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace A {\n    class Foo {\n        /**\n         * @internal\n         */\n        public static function barBar(): void {\n        }\n    }\n}\nnamespace B {\n    class Bat {\n        public function batBat(): void {\n            \\A\\Foo::barBar();\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Customizing CpuCoreCounter Finders in PHP\nDESCRIPTION: This snippet shows how to customize the finders used by CpuCoreCounter. It demonstrates removing a specific finder and changing the order of finders.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/fidry/cpu-core-counter/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Remove WindowsWmicFinder \n$finders = array_filter(\n    CpuCoreCounter::getDefaultFinders(),\n    static fn (CpuCoreFinder $finder) => !($finder instanceof WindowsWmicFinder)\n);\n\n$cores = (new CpuCoreCounter($finders))->getCount();\n```\n\nLANGUAGE: php\nCODE:\n```\n// Use CPUInfo first & don't use Nproc\n$finders = [\n    new CpuInfoFinder(),\n    new WindowsWmicFinder(),\n    new HwLogicalFinder(),\n];\n\n$cores = (new CpuCoreCounter($finders))->getCount();\n```\n\n----------------------------------------\n\nTITLE: Transliterating Non-ASCII Characters in PHP\nDESCRIPTION: Converts non-ASCII characters to their closest ASCII equivalents. Provides options for handling unknown characters and using strict transliteration with PHP-Intl.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nASCII::to_transliterate('déjà σσς iıii'); // 'deja sss iiii'\n```\n\n----------------------------------------\n\nTITLE: Using QueryBuilder for Dynamic GraphQL Query Construction in PHP\nDESCRIPTION: Shows how to use the QueryBuilder class to construct a GraphQL query dynamically, including setting variables and arguments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$builder = (new QueryBuilder('companies'))\n    ->setVariable('namePrefix', 'String', true)\n    ->setArgument('filter', new RawObject('{name_starts_with: $namePrefix}'))\n    ->selectField('name')\n    ->selectField('serialNumber');\n$gql = $builder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Implementing JsonSerializable Without Return Type in PHP\nDESCRIPTION: Example of a class implementing the JsonSerializable interface without a return type declaration, which would trigger a deprecated notice in PHP 8.1+. This demonstrates the issue that needs correction by either adding a return type or using the #[ReturnTypeWillChange] attribute.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MethodSignatureMustProvideReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A implements JsonSerializable {\n    public function jsonSerialize() {\n        return ['type' => 'A'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Scope with `$this` in PHP\nDESCRIPTION: This snippet attempts to echo '$this' outside of a class context, demonstrating an invalid scope usage in PHP. '$this' is only valid within class methods, and attempting to use it outside leads to a scope error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidScope.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\necho $this;\n\n```\n\n----------------------------------------\n\nTITLE: Incrementing String Variable in PHP\nDESCRIPTION: This code snippet demonstrates the increment operation on a string variable in PHP, where the string is converted to a number. The expected behavior may be surprising as PHP increments the ASCII value of the string's last character.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/StringIncrement.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = \"hello\";\n$a++;\n\n```\n\n----------------------------------------\n\nTITLE: Promise Interoperability with React Promises\nDESCRIPTION: Shows how to use Guzzle promises with React promises through promise interoperability.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Create a React promise\n$deferred = new React\\Promise\\Deferred();\n$reactPromise = $deferred->promise();\n\n// Create a Guzzle promise that is fulfilled with a React promise.\n$guzzlePromise = new GuzzleHttp\\Promise\\Promise();\n$guzzlePromise->then(function ($value) use ($reactPromise) {\n    // Do something something with the value...\n    // Return the React promise\n    return $reactPromise;\n});\n```\n\n----------------------------------------\n\nTITLE: Class Instantiation with Template Parameters in PHP\nDESCRIPTION: Example showing how to use templated class-string to create typed object instances with specific class constraints.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T of Foo\n * @psalm-param class-string<T> $class\n * @return T\n */\nfunction instantiator(string $class) {\n    return new $class();\n}\n\nclass Foo {\n    public final function __construct() {}\n}\n\nclass FooChild extends Foo {}\n\n$r = instantiator(FooChild::class);\n// Psalm knows $r is an object of type FooChild\n```\n\n----------------------------------------\n\nTITLE: Basic Prophecy Initialization\nDESCRIPTION: Shows how to create a new Prophet instance and create a basic prophecy.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpspec/prophecy/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$prophet = new Prophecy\\Prophet;\n$prophecy = $prophet->prophesize();\n```\n\n----------------------------------------\n\nTITLE: Setting POST Body Fields and Files in Guzzle 4.0\nDESCRIPTION: Example showing how to set POST fields and add files to a request body using the new PostBody interface in Guzzle 4.0.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$request = $client->createRequest('POST', '/');\n$request->getBody()->setField('foo', 'bar');\n$request->getBody()->addFile(new PostFile('file_key', fopen('/path/to/content', 'r')));\n```\n\n----------------------------------------\n\nTITLE: Non-Unwrapping Wait on a Promise\nDESCRIPTION: Demonstrates how to force a promise to resolve without unwrapping its state by passing false to the wait method. This allows the promise to resolve without throwing exceptions for rejected promises.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$promise = new Promise();\n$promise->reject('foo');\n// This will not throw an exception. It simply ensures the promise has\n// been resolved.\n$promise->wait(false);\n```\n\n----------------------------------------\n\nTITLE: Using Pure Callables with Immutable Classes in PHP\nDESCRIPTION: Illustrates the usage of pure-callable types with immutable classes in PHP. The example demonstrates a mutation-free walk method that requires a pure callable, showing both valid and invalid usage patterns.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/callable_types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-immutable */\nclass intList {\n    /** @param list<int> $items */\n    public function __construct(private array $items) {}\n    \n    /**\n     * @param pure-callable(int, int): int $callback\n     * @psalm-mutation-free\n     */\n    public function walk(callable $callback): int {\n        return array_reduce($this->items, $callback, 0);\n    }\n}\n\n$list = new intList([1,2,3]);\n\n// This is ok, as the callable is pure\necho $list->walk(fn (int $c, int $v): int => $c + $v);\n\n// This will cause an InvalidArgument error, as the closure calls an impure function\necho $list->walk(fn (int $c, int $v): int => $c + random_int(1, $v));\n```\n\n----------------------------------------\n\nTITLE: Enabling Xdebug for Psalm\nDESCRIPTION: This command runs Psalm with Xdebug enabled by setting an environment variable. This allows for debugging during plugin development. Ensure Xdebug and Psalm are properly configured.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/authoring_plugins.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPSALM_ALLOW_XDEBUG=1 path/to/psalm\n```\n\n----------------------------------------\n\nTITLE: Merging Object-like Arrays with Intersection Types in PHP\nDESCRIPTION: This function demonstrates the use of intersection types to merge two object-like arrays. The return type is an intersection of the input types, containing properties from both.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/intersection_types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @psalm-type A=array{a: int}\n * @psalm-type B=array{b: int}\n *\n * @param A $a\n * @param B $b\n *\n * @return A&B\n */\nfunction foo($a, $b) {\n    return $a + $b;\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Array Type Examples\nDESCRIPTION: Demonstration of how Psalm handles different array types including keyed arrays and optional values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/plugins_type_system.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$x = [\"a\" => 1, \"b\" => 2]; // is TKeyedArray, array{a: int, b: int}\n$y = rand(0, 1) ? [\"a\" => null] : [\"a\" => 1, \"b\" => \"b\"]; // is TKeyedArray with optional keys/values, array{a: ?int, b?: string}\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown using GithubFlavoredMarkdownConverter\nDESCRIPTION: Example showing how to use GithubFlavoredMarkdownConverter class for GitHub-Flavored Markdown support. Includes same security configuration as CommonMarkConverter example.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse League\\CommonMark\\GithubFlavoredMarkdownConverter;\n\n$converter = new GithubFlavoredMarkdownConverter([\n    'html_input' => 'strip',\n    'allow_unsafe_links' => false,\n]);\n\necho $converter->convert('# Hello World!');\n\n// <h1>Hello World!</h1>\n```\n\n----------------------------------------\n\nTITLE: Normalizing Data Before Validation in PHP\nDESCRIPTION: This code snippet demonstrates the use of the before() method in the Expect library to preprocess input data before validation. In this instance, it transforms a space-separated string into an array of strings, illustrating how normalization can be essential for ensuring data meets validation requirements.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$explode = function ($v) { return explode(' ', $v); };\n\n$schema = Expect::arrayOf('string')\n\t->before($explode);\n\n$normalized = $processor->process($schema, 'a b c');\n// OK, returns ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MissingDocblockType Error in PHP\nDESCRIPTION: This code snippet shows an example of a PHP variable declaration with an incomplete docblock. The @var tag is present, but it's missing the type specification, which would trigger the MissingDocblockType error in code analysis tools.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingDocblockType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @var $a */\n$a = [];\n```\n\n----------------------------------------\n\nTITLE: Modifying Requests with GuzzleHttp\\Psr7\\Utils::modifyRequest\nDESCRIPTION: This method clones and modifies a request with the given changes. It's useful for reducing the number of clones needed to mutate a message.  It accepts a RequestInterface object and an array of changes, returning the modified RequestInterface object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n`public static function modifyRequest(RequestInterface $request, array $changes): RequestInterface`\n```\n\n----------------------------------------\n\nTITLE: Handling Guzzle Exceptions in PHP\nDESCRIPTION: Shows how to catch and handle exceptions thrown by Guzzle, including the ConnectException which now extends TransferException as of version 7.0.0-beta2.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ntry {\n    $response = $client->request('GET', 'http://example.com');\n} catch (GuzzleHttp\\Exception\\ConnectException $e) {\n    // Handle connection errors\n} catch (GuzzleHttp\\Exception\\ClientException $e) {\n    // Handle 4xx errors\n} catch (GuzzleHttp\\Exception\\ServerException $e) {\n    // Handle 5xx errors\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Property in PHP Class Method\nDESCRIPTION: This snippet demonstrates how to assign a property within a class method in PHP. It illustrates the behavior when a property does not exist before assignment. The method 'foo' is defined in class 'A', which assigns the value 'bar' to the property 'foo' by using the $this keyword.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedThisPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    function foo() {\n        $this->foo = \"bar\";\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Plugin for File Extension Handling\nDESCRIPTION: PHP implementation of a custom Psalm plugin that registers custom scanners and analyzers for specific file extensions. Demonstrates implementation of PluginEntryPointInterface and PluginFileExtensionsInterface.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/checking_non_php_files.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Psalm\\Example;\n\nuse Psalm\\Plugin\\PluginEntryPointInterface;\nuse Psalm\\Plugin\\PluginFileExtensionsInterface;\nuse Psalm\\Plugin\\FileExtensionsInterface;\nuse Psalm\\Plugin\\RegistrationInterface;\n\nclass CustomPlugin implements PluginEntryPointInterface, PluginFileExtensionsInterface\n{\n    public function __invoke(RegistrationInterface $registration, ?\\SimpleXMLElement $config = null): void\n    {\n        // ... regular plugin processes, stub registration, hook registration\n    }\n\n    public function processFileExtensions(FileExtensionsInterface $fileExtensions, ?SimpleXMLElement $config = null): void\n    {\n        $fileExtensions->addFileTypeScanner('phpt', TemplateScanner::class);\n        $fileExtensions->addFileTypeAnalyzer('phpt', TemplateAnalyzer::class);\n    }    \n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Object-Oriented vs Procedural ASCII Conversion in PHP\nDESCRIPTION: Example comparing the Portable ASCII library's procedural approach with the object-oriented approach from voku/Stringy for transliterating non-ASCII characters to ASCII equivalents.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Portable ASCII\nuse voku\\helper\\ASCII;\nASCII::to_transliterate('déjà σσς iıii'); // 'deja sss iiii'\n\n// voku/Stringy\nuse Stringy\\Stringy as S;\n$stringy = S::create('déjà σσς iıii');\n$stringy->toTransliterate();              // 'deja sss iiii'\n```\n\n----------------------------------------\n\nTITLE: Synchronous Wait with Promise Resolution\nDESCRIPTION: Shows how to use the wait() method to synchronously force a promise to complete. This example demonstrates providing a wait function that resolves the promise with a value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$promise = new Promise(function () use (&$promise) {\n    $promise->resolve('foo');\n});\n\n// Calling wait will return the value of the promise.\necho $promise->wait(); // outputs \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in Guzzle 3.x vs 4.x\nDESCRIPTION: Shows the difference in adding individual event listeners between Guzzle 3.x and 4.x. The 4.x version uses the 'on' method instead of 'addListener' and includes the event name in the callback.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// 3.x\n$request->getEventDispatcher()->addListener('foo', function (Event $event) { /* ... */ } );\n// 4.x\n$request->getEmitter()->on('foo', function (Event $event, $name) { /* ... */ } );\n```\n\n----------------------------------------\n\nTITLE: Value-Specific Type Checking with @psalm-check-type\nDESCRIPTION: Demonstrates how to check if a variable matches a specific value using Psalm annotations. This example shows checking if a variable equals 1, with an error shown when it doesn't match.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/CheckType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @psalm-check-type $x = 1 */\n$x = 2; // Checked variable $x = 1 does not match $x = 2\n```\n\n----------------------------------------\n\nTITLE: Detecting Invalid Literal Argument in PHP with strpos\nDESCRIPTION: This code defines a PHP function `foo` that takes a string `$s` as input and uses `strpos` to find the position of a literal \".\" within the input string. The `strpos` function is used with a literal as the `$haystack`, which triggers an `InvalidLiteralArgument` warning because the first argument of `strpos` is expected to be a variable, not a literal.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidLiteralArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string $s) : void {\n    echo strpos(\".\", $s);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Event Loop Integration with React\nDESCRIPTION: Shows how to integrate Guzzle promises with React event loop using a periodic timer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$loop = React\\EventLoop\\Factory::create();\n$loop->addPeriodicTimer(0, [$queue, 'run']);\n```\n\n----------------------------------------\n\nTITLE: Using class-string Type Annotation in PHP\nDESCRIPTION: Demonstrates proper usage of the class-string type annotation to ensure a function receives a valid class name. The example shows a function that requires a class name parameter, and how Psalm enforces that constraint.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/scalar_types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A {}\n\n/**\n * @param class-string $s\n */\nfunction takesClassName(string $s) : void {}\n```\n\n----------------------------------------\n\nTITLE: FQSEN Resolution in PHP\nDESCRIPTION: Example demonstrating how to resolve a fully qualified structural element name.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$fqsenResolver = new \\phpDocumentor\\Reflection\\FqsenResolver();\n$fqsen = $fqsenResolver->resolve('\\phpDocumentor\\Reflection\\FqsenResolver::resolve()');\n```\n\n----------------------------------------\n\nTITLE: Generating Prettified XML Output in PHP\nDESCRIPTION: This code shows how to use the prettify() method to generate well-formatted XML output from an ArrayToXml object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/spatie/array-to-xml/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$arrayToXml->prettify()->toXml();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TaintedUserSecret Warning in PHP\nDESCRIPTION: Example showing how the @psalm-taint-source user_secret annotation marks sensitive data and how improper exposure triggers security warnings. The code shows a User class with a password getter marked as a secret, and a function that incorrectly exposes that secret.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedUserSecret.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass User {\n    /**\n     * @psalm-taint-source user_secret\n     */\n    public function getPassword() : string {\n        return \"$omePa$$word\";\n    }\n}\n\nfunction showUserPassword(User $user) {\n    echo $user->getPassword();\n}\n```\n\n----------------------------------------\n\nTITLE: Version Constraint Checking in PHP\nDESCRIPTION: Demonstrates how to use the library to parse version constraints and check if specific versions comply with those constraints. Shows usage of both caret (^) and tilde (~) operators.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phar-io/version/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PharIo\\Version\\Version;\nuse PharIo\\Version\\VersionConstraintParser;\n\n$parser = new VersionConstraintParser();\n$caret_constraint = $parser->parse( '^7.0' );\n\n$caret_constraint->complies( new Version( '7.0.17' ) ); // true\n$caret_constraint->complies( new Version( '7.1.0' ) ); // true\n$caret_constraint->complies( new Version( '6.4.34' ) ); // false\n\n$tilde_constraint = $parser->parse( '~1.1.0' );\n\n$tilde_constraint->complies( new Version( '1.1.4' ) ); // true\n$tilde_constraint->complies( new Version( '1.2.0' ) ); // false\n```\n\n----------------------------------------\n\nTITLE: Basic PHPUnit Test Example with Prophecy\nDESCRIPTION: Demonstrates a basic PHPUnit test case using Prophecy to mock a password hasher. Shows setup, teardown, and basic prophecy usage.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpspec/prophecy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass UserTest extends PHPUnit\\Framework\\TestCase\n{\n    private $prophet;\n\n    public function testPasswordHashing()\n    {\n        $hasher = $this->prophet->prophesize('App\\Security\\Hasher');\n        $user   = new App\\Entity\\User($hasher->reveal());\n\n        $hasher->generateHash($user, 'qwerty')->willReturn('hashed_pass');\n\n        $user->setPassword('qwerty');\n\n        $this->assertEquals('hashed_pass', $user->getPassword());\n    }\n\n    protected function setUp()\n    {\n        $this->prophet = new \\Prophecy\\Prophet;\n    }\n\n    protected function tearDown()\n    {\n        $this->prophet->checkPredictions();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DeepCopy Instance in PHP\nDESCRIPTION: Demonstrates how to create a custom DeepCopy instance with specific configuration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\n\n$copier = new DeepCopy(true);\n\n$copy = $copier->copy($var);\n```\n\n----------------------------------------\n\nTITLE: Practical Dot Access Data Example with Host Configuration\nDESCRIPTION: Shows a practical example using nested host configuration data, demonstrating get/set operations, default values, working with sub-data objects, and array manipulation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/dflydev/dot-access-data/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Dflydev\\DotAccessData\\Data;\n\n$data = new Data([\n    'hosts' => [\n        'hewey' => [\n            'username' => 'hman',\n            'password' => 'HPASS',\n            'roles'    => ['web'],\n        ],\n        'dewey' => [\n            'username' => 'dman',\n            'password' => 'D---S',\n            'roles'    => ['web', 'db'],\n            'nick'     => 'dewey dman',\n        ],\n        'lewey' => [\n            'username' => 'lman',\n            'password' => 'LP@$$',\n            'roles'    => ['db'],\n        ],\n    ],\n]);\n\n// hman\n$username = $data->get('hosts.hewey.username');\n// HPASS\n$password = $data->get('hosts.hewey.password');\n// ['web']\n$roles = $data->get('hosts.hewey.roles');\n// dewey dman\n$nick = $data->get('hosts.dewey.nick');\n// Unknown\n$nick = $data->get('hosts.lewey.nick', 'Unknown');\n\n// DataInterface instance\n$dewey = $data->getData('hosts.dewey');\n// dman\n$username = $dewey->get('username');\n// D---S\n$password = $dewey->get('password');\n// ['web', 'db']\n$roles = $dewey->get('roles');\n\n// No more lewey\n$data->remove('hosts.lewey');\n\n// Add DB to hewey's roles\n$data->append('hosts.hewey.roles', 'db');\n\n$data->set('hosts.april', [\n    'username' => 'aman',\n    'password' => '@---S',\n    'roles'    => ['web'],\n]);\n\n// Check if a key exists (true to this case)\n$hasKey = $data->has('hosts.dewey.username');\n```\n\n----------------------------------------\n\nTITLE: Installing PHP_CodeSniffer using Phive\nDESCRIPTION: This snippet shows how to install PHP_CodeSniffer as a project tool using Phive, a PHP package installation and management system. It includes commands to install both phpcs and phpcbf.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n\"phive install phpcs\nphive install phpcbf\"\n```\n\n----------------------------------------\n\nTITLE: Using FulfilledPromise in PHP\nDESCRIPTION: Shows how to create and use a FulfilledPromise, which represents a promise that has already been fulfilled.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\FulfilledPromise;\n\n$promise = new FulfilledPromise('value');\n\n// Fulfilled callbacks are immediately invoked.\n$promise->then(function ($value) {\n    echo $value;\n});\n```\n\n----------------------------------------\n\nTITLE: Using ReplaceFilter for Property Replacement in DeepCopy PHP\nDESCRIPTION: Demonstrates how to use ReplaceFilter to replace property values during copying.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\ReplaceFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$callback = function ($currentValue) {\n  return $currentValue . ' (copy)'\n};\n$copier->addFilter(new ReplaceFilter($callback), new PropertyMatcher('MyClass', 'title'));\n\n$copy = $copier->copy($object);\n\n// $copy->title will contain the data returned by the callback, e.g. 'The title (copy)'\n```\n\n----------------------------------------\n\nTITLE: Emitting PropertyTypeCoercion PHP\nDESCRIPTION: This snippet establishes a class relationship where class B extends class A and demonstrates type coercion handling in PHP. It sets an instance of a base type into a subclass-typed property, showcasing PHP’s type hinting mechanism. The function `takesA` accepts a parameter of type `C` and sets the base class instance to a property that may accept its subclass, utilizing nullable type hinting.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PropertyTypeCoercion.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {}\nclass B extends A {}\n\nfunction takesA(C $c, A $a) : void {\n    $c->b = $a;\n}\n\nclass C {\n    /** @var ?B */\n    public $b;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Random Strings\nDESCRIPTION: Example showing generation of random strings using a custom character set\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/random-lib/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Give the character list 'abcdef':\nprint $generator->generateString(32, 'abcdef').\"\\n\";\n\n// One would expect to receive output that only contained those\n// characters:\n//\n// adaeabecfbddcdaeedaedfbbcdccccfe\n// adfbfdbfddadbfcbbefebcacbefafffa\n// ceeadbcabecbccacdcaabbdccfadbafe\n// abadcffabdcacdbcbafcaecabafcdbbf\n// dbdbddacdeaceabfaefcbfafebcacdca\n```\n\n----------------------------------------\n\nTITLE: Generating Psalm Configuration File\nDESCRIPTION: Creates an initial configuration file for Psalm. This command scans the project and determines an appropriate error level for the codebase.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/psalm --init\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of XdebugHandler in PHP\nDESCRIPTION: A minimal example showing how to implement XdebugHandler in a PHP application. It creates an instance with an environment prefix and checks for Xdebug.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$xdebug = new XdebugHandler('myapp');\n$xdebug->check();\nunset($xdebug);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyInvalidPropertyFetch Error in PHP\nDESCRIPTION: This code snippet illustrates a scenario where a PossiblyInvalidPropertyFetch error might occur. It defines a class A with a nullable string property 'bar', a function foo() that returns either an instance of A or an integer, and then attempts to access the 'bar' property on the result of foo(), which may not always be valid.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var ?string */\n    public $bar;\n}\n\n/** @return A|int */\nfunction foo() {\n    return rand(0, 1) ? new A : 5;\n}\n\n$a = foo();\necho $a->bar;\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Assignment to PHP Class Constant\nDESCRIPTION: Shows a type mismatch error case where a string value \"bar\" is assigned to a class constant BAR that is declared to be of type integer via PHPDoc annotation. This represents an invalid type assignment that would trigger the InvalidConstantAssignmentValue error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidConstantAssignmentValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Foo {\n    /** @var int */\n    public const BAR = \"bar\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Exception Throwing Function in PHP\nDESCRIPTION: This snippet defines a PHP function 'foo' which has the potential to throw an Exception. The function returns a random integer, either 0 or 1. It's intended to demonstrate error handling when exceptions are not caught at the global scope.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UncaughtThrowInGlobalScope.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @throws \\Exception\n */\nfunction foo() : int {\n    return random_int(0, 1);\n}\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Employee Class Implementation with Assertions\nDESCRIPTION: Example class showing how to validate constructor parameters using integer and range assertions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/webmozart/assert/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Webmozart\\Assert\\Assert;\n\nclass Employee\n{\n    public function __construct($id)\n    {\n        Assert::integer($id, 'The employee ID must be an integer. Got: %s');\n        Assert::greaterThan($id, 0, 'The employee ID must be a positive integer. Got: %s');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Assertion Example in PHP\nDESCRIPTION: Demonstrates basic string assertion usage with custom error message formatting using %s placeholder.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/webmozart/assert/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nAssert::string($path, 'The path is expected to be a string. Got: %s');\n```\n\n----------------------------------------\n\nTITLE: Running Raw GraphQL Queries with PHP\nDESCRIPTION: Illustrates executing raw string queries using the Client class in PHP. This demonstrates how to bypass the query abstraction classes when necessary and run direct GraphQL queries.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$gql = <<<QUERY\nquery {\n    pokemon(name: \"Pikachu\") {\n        id\n        number\n        name\n        attacks {\n            special {\n                name\n                type\n                damage\n            }\n        }\n    }\n}\nQUERY;\n\n$results = $client->runRawQuery($gql);\n```\n\n----------------------------------------\n\nTITLE: Managing Xdebug in PHP Sub-Processes\nDESCRIPTION: Example of using the PhpConfig helper class to temporarily enable Xdebug for a sub-process and then restore an Xdebug-free environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction SubProcessWithXdebug()\n{\n    $phpConfig = new Composer\\XdebugHandler\\PhpConfig();\n\n    # Set the environment to the original configuration\n    $phpConfig->useOriginal();\n\n    # run the process with Xdebug loaded\n    ...\n\n    # Restore Xdebug-free environment\n    $phpConfig->usePersistent();\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Path Delimiter Usage\nDESCRIPTION: Shows how to use forward slash as an alternative path delimiter for accessing nested data.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/dflydev/dot-access-data/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data->set('a/b/c', 'd');\necho $data->get('a/b/c'); // \"d\"\n\n$data->get('a/b/c') === $data->get('a.b.c'); // true\n```\n\n----------------------------------------\n\nTITLE: Getting the body separately - PHP\nDESCRIPTION: This snippet illustrates how to obtain the body from the response object and perform operations on it.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$body = $response->getBody();\n// operations on body, eg. read, write, seek\n// ...\n// replacing the old body\n$response->withBody($body); \n// this last statement is optional as we working with objects\n// in this case the \"new\" body is same with the \"old\" one\n// the $body variable has the same value as the one in $request, only the reference is passed\n```\n\n----------------------------------------\n\nTITLE: Executing PHP_CodeSniffer from vendor bin directory\nDESCRIPTION: This snippet illustrates how to execute the phpcs and phpcbf commands from the vendor bin directory after installing PHP_CodeSniffer using composer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"./vendor/bin/phpcs -h\n./vendor/bin/phpcbf -h\"\n```\n\n----------------------------------------\n\nTITLE: Array Function Template Example in PHP\nDESCRIPTION: Example of how Psalm uses templates to provide accurate type information for PHP's built-in array functions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Takes one array with keys and another with values and combines them\n *\n * @template TKey\n * @template TValue\n *\n * @param array<mixed, TKey> $arr\n * @param array<mixed, TValue> $arr2\n * @return array<TKey, TValue>\n */\nfunction array_combine(array $arr, array $arr2) {}\n```\n\n----------------------------------------\n\nTITLE: Loading and Serializing PHAR Manifest in PHP\nDESCRIPTION: Demonstrates how to load a manifest from an XML file and serialize it back to string format using the ManifestLoader and ManifestSerializer classes. The code shows basic usage of the library's core functionality.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phar-io/manifest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PharIo\\Manifest\\ManifestLoader;\nuse PharIo\\Manifest\\ManifestSerializer;\n\n$manifest = ManifestLoader::fromFile('manifest.xml');\n\nvar_dump($manifest);\n\necho (new ManifestSerializer)->serializeToString($manifest);\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Diff in PHP\nDESCRIPTION: Shows how to create a basic diff between two strings using the Differ class, generating a textual representation of differences\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/diff/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SebastianBergmann\\Diff\\Differ;\n\n$differ = new Differ;\nprint $differ->diff('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation of Datastore Query using Object Mapping\nDESCRIPTION: Direct mapping of JSON request structure to PHP objects using Google Service classes for querying Datastore\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// create the datastore service class\n$datastore = new Google\\Service\\Datastore($client);\n\n// build the query - this maps directly to the JSON\n$query = new Google\\Service\\Datastore\\Query([\n    'kind' => [\n        [\n            'name' => 'Book',\n        ],\n    ],\n    'order' => [\n        'property' => [\n            'name' => 'title',\n        ],\n        'direction' => 'descending',\n    ],\n    'limit' => 10,\n]);\n\n// build the request and response\n$request = new Google\\Service\\Datastore\\RunQueryRequest(['query' => $query]);\n$response = $datastore->projects->runQuery('YOUR_DATASET_ID', $request);\n```\n\n----------------------------------------\n\nTITLE: Detecting Unused Foreach Value in PHP with Psalm\nDESCRIPTION: This example demonstrates a function that triggers the UnusedForeachValue warning in Psalm. The foreach loop iterates over an array but only uses the key while the value remains unused.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedForeachValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @param array<string, int> $a */\nfunction foo(array $a) : void {\n    foreach ($a as $key => $value) { // $value is unused\n        echo $key;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Timing in PHP using PHPUnit Timer\nDESCRIPTION: This snippet demonstrates how to use the Timer class from the PHPUnit Timer package to measure the duration of a loop execution. It initializes the timer, starts it, runs a sample operation, and then stops the timer while retrieving various formatted outputs of the duration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-timer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse SebastianBergmann\\Timer\\Timer;\n\n$timer = new Timer;\n\n$timer->start();\n\nforeach (\\range(0, 100000) as $i) {\n    // ...\n}\n\n$duration = $timer->stop();\n\nvar_dump(get_class($duration));\nvar_dump($duration->asString());\nvar_dump($duration->asSeconds());\nvar_dump($duration->asMilliseconds());\nvar_dump($duration->asMicroseconds());\nvar_dump($duration->asNanoseconds());\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Structure Schema\nDESCRIPTION: Example showing how to define a schema for validating a structure with boolean and integer fields.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Nette\\Schema\\Expect;\n\n$schema = Expect::structure([\n    'processRefund' => Expect::bool(),\n    'refundAmount' => Expect::int(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Abstract Static Method Call in PHP\nDESCRIPTION: This code snippet illustrates an attempt to call an abstract static method directly, which is not allowed in PHP. It defines an abstract class 'Base' with an abstract static method 'bar', and then tries to call this method directly on the class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/AbstractMethodCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nabstract class Base {\n    abstract static function bar() : void;\n}\n\nBase::bar();\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Generator Factory\nDESCRIPTION: Creates a random number generator factory and configures a generator with medium strength security level\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/random-lib/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$factory = new RandomLib\\Factory;\n$generator = $factory->getGenerator(new SecurityLib\\Strength(SecurityLib\\Strength::MEDIUM));\n```\n\n----------------------------------------\n\nTITLE: Conditional Type Assertions with Class Inheritance\nDESCRIPTION: Demonstrates using @psalm-assert-if-true and @psalm-assert-if-false for type refinement in class inheritance scenarios.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/adding_assertions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A {\n    public function isValid() : bool {\n        return (bool) rand(0, 1);\n    }\n}\nclass B extends A {\n    public function bar() : void {}\n}\n\n/**\n * @psalm-assert-if-true B $a\n */\nfunction isValidB(A $a) : bool {\n    return $a instanceof B && $a->isValid();\n}\n\n/**\n * @psalm-assert-if-false B $a\n */\nfunction isInvalidB(A $a) : bool {\n    return !$a instanceof B || !$a->isValid();\n}\n\nfunction takesA(A $a) : void {\n    if (isValidB($a)) {\n        $a->bar();\n    }\n\n    if (isInvalidB($a)) {\n        // do something\n    } else {\n        $a->bar();\n    }\n\n    $a->bar(); //error\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Nullable Function in PHP\nDESCRIPTION: Demonstrates a function that accepts a nullable callable parameter and attempts to invoke it. This pattern can lead to runtime errors if the callable parameter is null. The ?callable type hint indicates that the parameter can be either a callable or null.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(?callable $a) : void {\n    $a();\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MutableDependency Error in PHP with Psalm Annotations\nDESCRIPTION: This example shows how a MutableDependency error occurs when a class marked as @psalm-immutable extends a mutable parent class. The child class NotReallyImmutableClass claims to be immutable but inherits mutable state and behavior from MutableParent, breaking immutability guarantees.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MutableDependency.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass MutableParent {\n    public int $i = 0;\n\n    public function increment() : void {\n        $this->i++;\n    }\n}\n\n/**\n * @psalm-immutable\n */\nfinal class NotReallyImmutableClass extends MutableParent {}\n```\n\n----------------------------------------\n\nTITLE: Constant Declaration in PHP Trait Example\nDESCRIPTION: Demonstrates an invalid constant declaration within a PHP trait that will cause a fatal error in PHP versions before 8.2.0. The code shows a trait 'A' attempting to declare a constant 'B' with value 0.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ConstantDeclarationInTrait.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ntrait A {\n    const B = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Return in PHP\nDESCRIPTION: This PHP code defines a function `foo` that is declared to return a string. However, under certain conditions (when `rand(0, 1)` evaluates to false), the function attempts to return `null`. This is problematic because the return type is not nullable and will trigger an error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullableReturnStatement.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : string {\n    if (rand(0, 1)) {\n        return \"foo\";\n    }\n\n    return null; // emitted here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Preg Class Usage Examples\nDESCRIPTION: Examples of using the Preg class for type-safe PCRE operations with proper error handling\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/pcre/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Preg;\n\nif (Preg::match('{fo+}', $string, $matches)) { ... }\nif (Preg::matchWithOffsets('{fo+}', $string, $matches)) { ... }\nif (Preg::matchAll('{fo+}', $string, $matches)) { ... }\n$newString = Preg::replace('{fo+}', 'bar', $string);\n$newString = Preg::replaceCallback('{fo+}', function ($match) { return strtoupper($match[0]); }, $string);\n$newString = Preg::replaceCallbackArray(['{fo+}' => fn ($match) => strtoupper($match[0])], $string);\n$filtered = Preg::grep('{[a-z]}', $elements);\n$array = Preg::split('{[a-z]+}', $string);\n```\n\n----------------------------------------\n\nTITLE: Installing Nette Schema via Composer\nDESCRIPTION: Command to install Nette Schema library using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require nette/schema\n```\n\n----------------------------------------\n\nTITLE: Creating Presigned URL with Amazon S3 Client (PHP)\nDESCRIPTION: This snippet illustrates the use of the `createPresignedUrl()` method on a command object created by the Amazon S3 client. This simplifies the creation of presigned URLs for S3 objects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n\"createPresignedUrl()\"\n```\n\n----------------------------------------\n\nTITLE: Fixing PossiblyFalseOperand with Explicit Check in PHP\nDESCRIPTION: This snippet demonstrates how to fix the PossiblyFalseOperand error by explicitly checking if strpos() returns false before using its result. It provides a more robust handling of cases where the comma is not found in the string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyFalseOperand.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction echoCommaPosition(string $str) : void {\n    $pos = strpos($str, ',');\n\n    if ($pos === false) {\n        echo 'There is no comma in the string';\n    }\n\n    echo 'The comma is located at ' . $pos; \n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Complex Data Types - PHP\nDESCRIPTION: This snippet exports complex data structures such as multidimensional arrays and objects that reference themselves using the Sebastian Exporter, highlighting how the exporter visualizes recursive data.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/exporter/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SebastianBergmann\\Exporter\\Exporter;\n\n$exporter = new Exporter;\n\n/*\nArray &0 (\n    0 => Array &1 (\n        0 => 1\n        1 => 2\n        2 => 3\n    )\n    1 => Array &2 (\n        0 => ''\n        1 => 0\n        2 => false\n    )\n)\n*/\n\nprint $exporter->export(array(array(1,2,3), array(\"\",0,FALSE)));\n\n/*\nArray &0 (\n    'self' => Array &1 (\n        'self' => Array &1\n    )\n)\n*/\n\n$array = array();\n$array['self'] = &$array;\nprint $exporter->export($array);\n\n/*\nstdClass Object &0000000003a66dcc0000000025e723e2 (\n    'self' => stdClass Object &0000000003a66dcc0000000025e723e2\n)\n*/\n\n$obj = new stdClass();\n$obj->self = $obj;\nprint $exporter->export($obj);\n\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Query with Input Object Argument in PHP\nDESCRIPTION: Demonstrates the use of a RawObject to create an input object argument for filtering companies by name prefix.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setArguments(['filter' => new RawObject('{name_starts_with: \"Face\"}')])\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Potentially Invalid Array Access in PHP\nDESCRIPTION: This code snippet shows a situation where an array access is attempted on a variable that may or may not be an array, depending on a random condition. This could lead to runtime errors if the variable is not an array when accessed.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidArrayAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = rand(0, 1) ? 5 : [4, 3, 2, 1];\necho $arr[0];\n```\n\n----------------------------------------\n\nTITLE: Creating Medium Strength Generator\nDESCRIPTION: Demonstrates the convenience method for creating a medium strength random number generator\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/random-lib/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$generator = $factory->getMediumStrengthGenerator();\n```\n\n----------------------------------------\n\nTITLE: Exporting Exception Object - PHP\nDESCRIPTION: This code snippet demonstrates how to export an Exception object using the Sebastian Exporter. The exporter provides a detailed visualization of the exception's properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/exporter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SebastianBergmann\\Exporter\\Exporter;\n\n$exporter = new Exporter;\n\n/*\nException Object &0000000078de0f0d000000002003a261 (\n    'message' => ''\n    'string' => ''\n    'code' => 0\n    'file' => '/home/sebastianbergmann/test.php'\n    'line' => 34\n    'previous' => null\n)\n*/\n\nprint $exporter->export(new Exception);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Streams with GuzzleHttp\\Psr7\\Utils::streamFor\nDESCRIPTION: This method creates a new stream based on the input type. It supports various resource types like strings, resources, StreamInterface objects, iterators, and callables, and returns a StreamInterface object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n`public static function streamFor(resource|string|null|int|float|bool|StreamInterface|callable|\\Iterator $resource = '', array $options = []): StreamInterface`\n```\n\nLANGUAGE: php\nCODE:\n```\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor('foo');\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor(fopen('/path/to/file', 'r'));\n\n$generator = function ($bytes) {\n    for ($i = 0; $i < $bytes; $i++) {\n        yield ' ';\n    }\n}\n\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor($generator(100));\n```\n\n----------------------------------------\n\nTITLE: Accessing String Array Offsets in PHP\nDESCRIPTION: This PHP function 'foo' demonstrates accessing a string-keyed array without checking if the key exists, which can emit a PossiblyUndefinedStringArrayOffset warning when the 'ensureArrayStringOffsetsExist' flag is set to true. The function takes an associative array with string keys and attempts to echo the value at the key 'hello'. The main limitation is the lack of existence check for the specified array key, which could lead to unexpected behavior if the key is not present.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedStringArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @param array<string, string> $arr\n */\nfunction foo(array $arr) : void {\n    echo $arr[\"hello\"];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Camelize Method in PHP\nDESCRIPTION: Shows how to use the camelize method to convert 'model_name' to 'modelName'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->camelize('model_name'); // modelName\n```\n\n----------------------------------------\n\nTITLE: Using deep_copy Function in PHP\nDESCRIPTION: Shows how to use the deep_copy function provided by the DeepCopy library.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse function DeepCopy\\deep_copy;\n\n$copy = deep_copy($var);\n```\n\n----------------------------------------\n\nTITLE: Defining a Class with a Property and a Pure Function in PHP\nDESCRIPTION: This snippet demonstrates a class definition in PHP with an integer property and a pure function that updates the property value. The function is marked as pure, which indicates that it should not produce side effects, yet it modifies a property of the class instance provided as an argument, hence emitting an impure assignment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpurePropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public int $a = 5;\n}\n\n/** @psalm-pure */\nfunction foo(int $i, A $a) : int {\n    $a->a = $i;\n\n    return $i;\n}\n```\n\n----------------------------------------\n\nTITLE: AST Traversal and Modification\nDESCRIPTION: Shows how to traverse and modify an AST by implementing a NodeVisitor that removes all function bodies. The example demonstrates using NodeTraverser and extending NodeVisitorAbstract to process AST nodes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nikic/php-parser/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\Node;\nuse PhpParser\\Node\\Stmt\\Function_;\nuse PhpParser\\NodeTraverser;\nuse PhpParser\\NodeVisitorAbstract;\n\n$traverser = new NodeTraverser();\n$traverser->addVisitor(new class extends NodeVisitorAbstract {\n    public function enterNode(Node $node) {\n        if ($node instanceof Function_) {\n            // Clean out the function body\n            $node->stmts = [];\n        }\n    }\n});\n\n$ast = $traverser->traverse($ast);\necho $dumper->dump($ast) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Using Doctrine Instantiator in PHP\nDESCRIPTION: Example demonstrating how to use the Instantiator class to create a new instance of a User class without invoking its constructor.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/docs/en/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Doctrine\\Instantiator\\Instantiator;\nuse App\\Entities\\User;\n\n$instantiator = new Instantiator();\n\n$user = $instantiator->instantiate(User::class);\n```\n\n----------------------------------------\n\nTITLE: Validating Input Types in PHP\nDESCRIPTION: This snippet defines two functions, 'foo' which expects an integer and 'bar' which accepts a string. The 'bar' function checks if the string can be interpreted as a numeric value before passing it to 'foo', ensuring type safety.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidScalarArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(int $i) : void {}\nfunction bar(string $s) : void {\n    if (is_numeric($s)) {\n        foo($s);\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-ignore-var to Override Type Annotations in PHP\nDESCRIPTION: Shows how to use @psalm-ignore-var to make Psalm ignore explicit @var annotations, allowing IDE autocompletion while maintaining Psalm's more precise inferred types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @return iterable<array-key,\\DateTime> $f */\nfunction getTimes(int $n): iterable {\n    while ($n--) {\n        yield new \\DateTime();\n    }\n};\n/**\n * @var \\Datetime[] $times\n * @psalm-ignore-var\n */\n$times = getTimes(3);\n// this trace shows \"iterable<array-key, DateTime>\" instead of \"array<array-key, Datetime>\"\n/** @psalm-trace $times */\nforeach ($times as $time) {\n    echo $time->format('Y-m-d H:i:s.u') . PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing MixedMethodCall with PHP Docblock Type Annotations\nDESCRIPTION: This solution demonstrates how to fix a MixedMethodCall error by adding a docblock with type information for the array parameter. By specifying that the array contains elements of type A, Psalm can properly infer the type of array_pop() result.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedMethodCall.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo() : void {}\n}\n\n/**\n * @param  array<A> $arr\n */\nfunction callFoo(array $arr) : void {\n    array_pop($arr)->foo(); // MixedMethodCall emitted here\n}\n\ncallFoo(\n    [new A()]\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Class Extension in PHP\nDESCRIPTION: Shows two invalid inheritance scenarios: attempting to extend a final class and attempting to extend a class marked with @final doctrine annotation. Both cases will result in an InvalidExtendClass error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidExtendClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfinal class A {}\n\nclass B extends A {}\n\n/**\n * @final\n */\nclass DoctrineA {}\n\nclass DoctrineB extends DoctrineA {}\n```\n\n----------------------------------------\n\nTITLE: Configuring StrictUnifiedDiffOutputBuilder in PHP\nDESCRIPTION: Shows how to configure StrictUnifiedDiffOutputBuilder with advanced options for generating precise, patch-compatible diffs\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/diff/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\StrictUnifiedDiffOutputBuilder;\n\n$builder = new StrictUnifiedDiffOutputBuilder([\n    'collapseRanges'      => true,\n    'commonLineThreshold' => 6,\n    'contextLines'        => 3,\n    'fromFile'            => null,\n    'fromFileDate'        => null,\n    'toFile'              => null,\n    'toFileDate'          => null,\n]);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Union Types with Ternary Expression in PHP\nDESCRIPTION: This snippet shows how a Union Type can be generated using a ternary expression. The variable $rabbit is assigned either a string or an array based on a random condition, resulting in a string|array Union Type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/union_types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$rabbit = rand(0, 10) === 4 ? 'rabbit' : ['rabbit'];\n```\n\n----------------------------------------\n\nTITLE: Invalid Property Assignment Example in PHP\nDESCRIPTION: Demonstrates a potentially unsafe property assignment where a function returns either class A or an integer, making the property assignment to $bar potentially invalid. The code shows how type uncertainty can lead to runtime errors when accessing object properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var ?string */\n    public $bar;\n}\n\n/** @return A|int */\nfunction foo() {\n    return rand(0, 1) ? new A : 5;\n}\n\n$a = foo();\n$a->bar = \"5\";\n```\n\n----------------------------------------\n\nTITLE: Using @var Tags with Variables in PHP\nDESCRIPTION: Demonstrates the off-label usage of @var tags to specify types for variables, including inline applications and return statements. This approach allows overriding types for variables from external sources.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var string */\n$a = $_GET['foo'];\n\n/** @var string $b */\n$b = $_GET['bar'];\n\nfunction bat(): string {\n    /** @var string */\n    return $_GET['bat'];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Equality Assertions in Psalm for PHP\nDESCRIPTION: This snippet shows how to use equality assertions in Psalm to indicate that a variable is equal to a specific type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/assertion_syntax.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert =int $some_int */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyInvalidArgument Exception in PHP\nDESCRIPTION: This code snippet shows a scenario where a PossiblyInvalidArgument exception might be thrown. It defines a function 'foo' that randomly returns either an integer or an stdClass object, and a function 'bar' that expects an integer parameter. The potential for error occurs when calling 'bar' with the result of 'foo', which may not always be an integer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @return int|stdClass */\nfunction foo() {\n    return rand(0, 1) ? 5 : new stdClass;\n}\nfunction bar(int $i) : void {}\nbar(foo());\n```\n\n----------------------------------------\n\nTITLE: Defining PHP_CodeSniffer as a composer dependency\nDESCRIPTION: This JSON snippet shows how to define PHP_CodeSniffer as a development dependency within a `composer.json` file, specifying the version constraint.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"{\n    \\\"require-dev\\\": {\n        \\\"squizlabs/php_codesniffer\\\": \\\"3.*\\\"\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using CachingStream for Non-Seekable Streams\nDESCRIPTION: Demonstrates the CachingStream decorator which adds seeking capability to non-seekable streams by caching read data.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor(fopen('http://www.google.com', 'r'));\n$stream = new Psr7\\CachingStream($original);\n\n$stream->read(1024);\necho $stream->tell();\n// 1024\n\n$stream->seek(0);\necho $stream->tell();\n// 0\n```\n\n----------------------------------------\n\nTITLE: Determining Mimetype from Filename with GuzzleHttp\\Psr7\\MimeType::fromFilename\nDESCRIPTION: This method determines the mimetype of a file by looking at its extension. It takes a filename as input and returns the corresponding mimetype string or null if no matching mimetype is found.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n`public static function fromFilename(string $filename): string|null`\n```\n\n----------------------------------------\n\nTITLE: Handling Redundant Conditions with Docblocks in PHP\nDESCRIPTION: This PHP snippet demonstrates a function where a conditional statement is deemed redundant based on the information provided by docblocks. The function 'foo' accepts a parameter annotated as a string, and internally checks if the parameter is a string, which is unnecessary. There are no external dependencies; it focuses on internal parameter validation. The input is a string parameter and the function is expected to perform no operation. The snippet highlights how docblocks can reduce the need for certain runtime checks.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantConditionGivenDocblockType.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * @param string $s\n *\n * @return void\n */\nfunction foo($s) {\n    if (is_string($s)) {};\n}\n```\n\n----------------------------------------\n\nTITLE: Using Urlize Method in PHP\nDESCRIPTION: Shows how to use the urlize method to generate a URL-friendly string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->urlize('My first blog post'); // my-first-blog-post\n```\n\n----------------------------------------\n\nTITLE: Version Comparison using Comparator Class\nDESCRIPTION: Example of using the Composer\\Semver\\Comparator class to compare version numbers using the greaterThan method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/semver/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Semver\\Comparator;\n\nComparator::greaterThan('1.25.0', '1.24.0'); // 1.25.0 > 1.24.0\n```\n\n----------------------------------------\n\nTITLE: Correct Void Function Usage in PHP\nDESCRIPTION: Proper way to call a void function without attempting to assign its return value. This follows best practices for handling void return types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/AssignmentToVoid.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : void {}\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Basic Schema Validation Example\nDESCRIPTION: Shows how to use Nette\\Schema\\Processor to validate and normalize data against a schema, with error handling.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$processor = new Nette\\Schema\\Processor;\n\ntry {\n\t$normalized = $processor->process($schema, $data);\n} catch (Nette\\Schema\\ValidationException $e) {\n\techo 'Data is invalid: ' . $e->getMessage();\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming and Moving Methods with Psalm\nDESCRIPTION: This command illustrates how to rename a method and move it to a different class in one operation using Psalm's refactoring tool.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/refactoring.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-refactor --rename \"Ns1\\Foo::bar\" --to \"Ns2\\Baz::bat\"\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Nullable Array in PHP\nDESCRIPTION: Example of problematic code that attempts to iterate over an array parameter marked as nullable (?array). This pattern can cause runtime errors if null is passed as the argument since foreach cannot iterate over null values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullIterator.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(?array $arr) : void {\n    foreach ($arr as $a) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Array Pass By Reference Example in PHP\nDESCRIPTION: Shows incorrect usage of passing an array literal to a function that expects a reference parameter. This will result in a compile-time error because only variables can be passed by reference, not literal values or expressions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidPassByReference.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(array &$arr) : void {}\nfoo([0, 1, 2]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Deprecated Interface in PHP\nDESCRIPTION: This snippet demonstrates the use of a deprecated interface in PHP. It shows how to mark an interface as deprecated using the @deprecated annotation and how a class implements this interface. This practice is discouraged as it may lead to future compatibility issues.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DeprecatedInterface.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @deprecated */\ninterface I {}\n\nclass A implements I {}\n```\n\n----------------------------------------\n\nTITLE: Detecting Invalid Falsable Return Types in PHP\nDESCRIPTION: This PHP code snippet defines a function named `foo` that's intended to return a string. However, under certain conditions (determined by `rand(0, 1)`), it returns the boolean value `false`. This is problematic because the declared return type `string` does not permit `false`. Static analysis tools can detect such inconsistencies, raising an `InvalidFalsableReturnType` error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidFalsableReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : string {\n    if (rand(0, 1)) {\n        return \"foo\";\n    }\n\n    return false;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using HeaderUtils::parseQuery() for query string parsing (PHP)\nDESCRIPTION: Introduces HeaderUtils::parseQuery() which parses query strings like parse_str() but preserves dots in variable names.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-foundation/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$queryString = 'foo.bar=value&baz=123';\n$parsedQuery = HeaderUtils::parseQuery($queryString);\n```\n\n----------------------------------------\n\nTITLE: Validating String Array Using Psalm Assertions\nDESCRIPTION: Demonstrates how to use @psalm-assert to validate that an array contains only string values. The function throws an exception if a non-string value is encountered.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/adding_assertions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert string[] $arr */\nfunction validateStringArray(array $arr) : void {\n    foreach ($arr as $s) {\n        if (!is_string($s)) {\n          throw new UnexpectedValueException('Invalid value ' . gettype($s));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prepend to body - PHP\nDESCRIPTION: This snippet demonstrates how to prepend content to the body stream by seeking to the start of the stream.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// assuming our response is initially empty\n$body = $repsonse->getBody();\n// writing the string \"abcd\"\n$body->write('abcd');\n\n// seeking to start of stream\n$body->seek(0);\n// writing 'ef'\n$body->write('ef'); // at this point the stream contains \"efcd\"\n```\n\n----------------------------------------\n\nTITLE: Function Missing @throws Docblock in PHP\nDESCRIPTION: This example demonstrates a function that throws an exception but lacks the required @throws docblock annotation. When the 'checkForThrowsDocblock' configuration option is enabled, this would trigger the MissingThrowsDocblock rule.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingThrowsDocblock.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(int $x, int $y) : int {\n    if ($y === 0) {\n        throw new \\InvalidArgumentException('Cannot divide by zero');\n    }\n\n    return intdiv($x, $y);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Class Constants for String/Int Options in PHP with Psalm\nDESCRIPTION: Demonstrates how to use class constants to define allowed values for function parameters in Psalm annotations, enhancing type safety and readability.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/typing_in_psalm.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A {\n  const FOO = 'foo';\n  const BAR = 'bar';\n}\n\n/**\n * @param A::FOO | A::BAR $s\n */\nfunction foo(string $s) : string {\n  switch ($s) {\n    case A::FOO:\n      return 'hello';\n\n    case A::BAR:\n      return 'goodbye';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Query with Aliases in PHP\nDESCRIPTION: Demonstrates how to use aliases in GraphQL queries to retrieve the same object multiple times with different arguments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query())\n    ->setSelectionSet(\n        [\n            (new Query('companies', 'TechCo'))\n                ->setArguments(['name' => 'Tech Co.'])\n                ->setSelectionSet(\n                    [\n                        'name',\n                        'serialNumber'\n                    ]\n                ),\n            (new Query('companies', 'AnotherTechCo'))\n                ->setArguments(['name' => 'A.N. Other Tech Co.'])\n                ->setSelectionSet(\n                    [\n                        'name',\n                        'serialNumber'\n                    ]\n                )\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Possibly Invalid Method Call in PHP\nDESCRIPTION: This code defines a class A with a method 'bar', and a function 'foo' that returns either an instance of A or an integer. The potential error occurs when trying to call the 'bar' method on the result of 'foo', which may not always be an object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidMethodCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function bar() : void {}\n}\n\n/** @return A|int */\nfunction foo() {\n    return rand(0, 1) ? new A : 5;\n}\n\nfoo()->bar();\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-7 Request Interface Methods\nDESCRIPTION: This section expands on MessageInterface methods to detail those specific to the RequestInterface in PSR-7, which include handling request targets, HTTP methods, and URIs. These methods are crucial for constructing and managing HTTP requests in a compliant manner.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Interfaces.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getRequestTarget()`                | Retrieves the message's request target              | origin-form, absolute-form, authority-form, asterisk-form ([RFC7230](https://www.rfc-editor.org/rfc/rfc7230.txt)) |\n| `withRequestTarget($requestTarget)` | Return a new message instance with the specific request-target |      |\n| `getMethod()`                       | Retrieves the HTTP method of the request.  |  GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE (defined in [RFC7231](https://tools.ietf.org/html/rfc7231)), PATCH (defined in [RFC5789](https://tools.ietf.org/html/rfc5789)) |\n| `withMethod($method)`               | Returns a new message instance with the provided HTTP method  | |\n| `getUri()`                            | Retrieves the URI instance | |\n| `withUri(UriInterface $uri, $preserveHost = false)` | Returns a new message instance with the provided URI |  |\n```\n\n----------------------------------------\n\nTITLE: Traditional PHP PCRE Function Usage\nDESCRIPTION: Examples of traditional PHP preg_* function usage patterns showing various regex operations\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/pcre/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (preg_match('{fo+}', $string, $matches)) { ... }\nif (preg_match('{fo+}', $string, $matches, PREG_OFFSET_CAPTURE)) { ... }\nif (preg_match_all('{fo+}', $string, $matches)) { ... }\n$newString = preg_replace('{fo+}', 'bar', $string);\n$newString = preg_replace_callback('{fo+}', function ($match) { return strtoupper($match[0]); }, $string);\n$newString = preg_replace_callback_array(['{fo+}' => fn ($match) => strtoupper($match[0])], $string);\n$filtered = preg_grep('{[a-z]}', $elements);\n$array = preg_split('{[a-z]+}', $string);\n```\n\n----------------------------------------\n\nTITLE: Fixing Undefined Array Offset Using Null Coalesce Operator\nDESCRIPTION: Solution using PHP's null coalesce operator (??) to provide a default value when accessing potentially undefined array keys.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedArrayOffset.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n...\n\necho $arr[\"b\"] ?? 0;\n```\n\n----------------------------------------\n\nTITLE: Removing headers from HTTP Messages - PHP\nDESCRIPTION: This snippet demonstrates how to remove headers from both request and response objects using PSR-7.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// removing a header from Request, removing deprecated \"Content-MD5\" header\n$request->withoutHeader('Content-MD5');\n\n// removing a header from Response\n// effect: the browser won't know the size of the stream\n// the browser will download the stream till it ends\n$response->withoutHeader('Content-Length');\n```\n\n----------------------------------------\n\nTITLE: Working directly on response body - PHP\nDESCRIPTION: This snippet shows how to write directly to the response body when performing a limited number of operations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response->getBody()->write('hello');\n```\n\n----------------------------------------\n\nTITLE: Using Sebastian Comparator to Compare Dates in PHP\nDESCRIPTION: This snippet illustrates how to compare two DateTime objects for equality using the Sebastian Comparator library. The example creates two DateTime instances with different time zones and uses a factory to get the appropriate comparator. It then asserts their equality and handles possible comparison failures.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/comparator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SebastianBergmann\\Comparator\\Factory;\nuse SebastianBergmann\\Comparator\\ComparisonFailure;\n\ndate1 = new DateTime('2013-03-29 04:13:35', new DateTimeZone('America/New_York'));\ndate2 = new DateTime('2013-03-29 03:13:35', new DateTimeZone('America/Chicago'));\n\n$factory = new Factory;\n$comparator = $factory->getComparatorFor($date1, $date2);\n\ntry {\n    $comparator->assertEquals($date1, $date2);\n    print \"Dates match\";\n} catch (ComparisonFailure $failure) {\n    print \"Dates don't match\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SSRF Vulnerability in PHP cURL Implementation\nDESCRIPTION: Example showing an unsafe implementation that allows user input to control the URL in a cURL request. This code is vulnerable to SSRF attacks as it directly uses unvalidated user input from $_GET['url'] in a network request.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedSSRF.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$ch = curl_init();\n\ncurl_setopt($ch, CURLOPT_URL, $_GET['url']);\n\ncurl_exec($ch);\n\ncurl_close($ch);\n```\n\n----------------------------------------\n\nTITLE: Example PHP Class with DocBlocks\nDESCRIPTION: Sample PHP class showing usage of type hints and structural references in DocBlocks.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace My\\Example;\n\nuse phpDocumentor\\Reflection\\Types;\n\nclass Classy\n{\n    /**\n     * @var Types\\Context\n     * @see Classy::otherFunction()\n     */\n    public function __construct($context) {}\n    \n    public function otherFunction(){}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Query with Array Argument in PHP\nDESCRIPTION: Shows how to use an array argument in a GraphQL query to filter companies by multiple serial numbers.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setArguments(['serialNumbers' => [159, 260, 371]])\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Missing Type Declaration in PHP Class Property\nDESCRIPTION: This example demonstrates code that would trigger a MissingPropertyType error in PHP. The class property 'foo' is declared without a type declaration, which is not recommended since PHP 7.4 introduced typed properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingPropertyType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public $foo = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Templates in PHP with Psalm\nDESCRIPTION: This snippet demonstrates how to use variable templates instead of traditional template types for more concise and readable code in function definitions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @return ($choose is true ? $a : $b)\n */\nfunction pick(string $a, string $b, bool $choose): string {\n  return $choose ? $a : $b;\n}\n\n$a = pick('a', 'b', true);\n/** @psalm-trace $a */; // 'a'\n\n$a = pick('a', 'b', false);\n/** @psalm-trace $a */; // 'b'\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Offset on Possibly Null Value in PHP\nDESCRIPTION: This code snippet demonstrates a situation where a PossiblyNullArrayAccess error can occur. The function 'foo' takes a nullable array parameter and attempts to access its first element, which may result in an error if the array is null.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullArrayAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(?array $a) : void {\n    echo $a[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed PHP Function with Default Value\nDESCRIPTION: Solution that handles false return by converting it to a default integer value (-1) when no comma is found.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/FalsableReturnStatement.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction getCommaPosition(string $a) : int {\n    $pos = strpos($a, ',');\n\n    if ($pos === false) {\n        return -1;\n    }\n\n    return $pos;\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming HTTP Responses in Guzzle 4.0\nDESCRIPTION: Comparison between Guzzle 3.0 and 4.0 approaches for creating streaming HTTP requests and reading response data.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// 3.0\nuse Guzzle\\Stream\\PhpStreamRequestFactory;\n$request = $client->get('/');\n$factory = new PhpStreamRequestFactory();\n$stream = $factory->fromRequest($request);\n$data = $stream->read(1024);\n\n// 4.0\n$response = $client->get('/', ['stream' => true]);\n// Read some data off of the stream in the response body\n$data = $response->getBody()->read(1024);\n```\n\n----------------------------------------\n\nTITLE: Attaching Event Listeners in Guzzle 3.x vs 4.x\nDESCRIPTION: Demonstrates how to attach and detach event listeners in Guzzle 3.x compared to 4.x. In 4.x, the EventDispatcher is replaced with an Emitter, and methods are renamed accordingly.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$mock = new Mock();\n// 3.x\n$request->getEventDispatcher()->addSubscriber($mock);\n$request->getEventDispatcher()->removeSubscriber($mock);\n// 4.x\n$request->getEmitter()->attach($mock);\n$request->getEmitter()->detach($mock);\n```\n\n----------------------------------------\n\nTITLE: Setting up Psalm Language Server in Vim with ALE\nDESCRIPTION: This Vim script configures the ALE plugin to use Psalm for linting PHP files. It modifies ALE's linter settings to include Psalm alongside PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/language_server.md#2025-04-21_snippet_2\n\nLANGUAGE: Vim Script\nCODE:\n```\nlet g:ale_linters = { 'php': ['php', 'psalm'] }\n```\n\n----------------------------------------\n\nTITLE: Using DoctrineEmptyCollectionFilter in DeepCopy PHP\nDESCRIPTION: Demonstrates how to use DoctrineEmptyCollectionFilter to reset Doctrine collections during copying.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineEmptyCollectionFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineEmptyCollectionFilter(), new PropertyMatcher('MyClass', 'myProperty'));\n\n$copy = $copier->copy($object);\n\n// $copy->myProperty will return an empty collection\n```\n\n----------------------------------------\n\nTITLE: Rejection Forwarding with RejectedPromise in PHP\nDESCRIPTION: Shows how to manually forward a rejection in a promise chain by returning a RejectedPromise object. This technique allows for explicit control over rejection propagation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\nuse GuzzleHttp\\Promise\\RejectedPromise;\n\n$promise = new Promise();\n$promise->then(null, function ($reason) {\n    return new RejectedPromise($reason);\n})->then(null, function ($reason) {\n    assert($reason === 'Error!');\n});\n\n$promise->reject('Error!');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ArgumentTypeCoercion in PHP Class Inheritance\nDESCRIPTION: This snippet shows how ArgumentTypeCoercion can occur when passing an object of a parent class to a function expecting an object of a child class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ArgumentTypeCoercion.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B extends A {}\n\nfunction takesA(A $a) : void {\n    takesB($a);\n}\nfunction takesB(B $b) : void {}\n```\n\n----------------------------------------\n\nTITLE: Checking if URI is Network-Path Reference with GuzzleHttp\\Psr7\\Uri::isNetworkPathReference\nDESCRIPTION: This method checks if a URI is a network-path reference. A relative reference that begins with two slash characters is considered a network-path reference. It takes a UriInterface object and returns a boolean.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n`public static function isNetworkPathReference(UriInterface $uri): bool`\n```\n\n----------------------------------------\n\nTITLE: Fixing Implicit toString with Explicit Cast in PHP\nDESCRIPTION: Demonstrates the correct way to convert an object to string using explicit type casting with (string). This approach makes the intention clear and follows best practices.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImplicitToStringCast.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n...\n\ntakesString((string) new A);\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Tests for a Rule in PHP\nDESCRIPTION: This snippet demonstrates how to create unit tests for a Respect\\Validation rule using `RuleTestCase`. It provides two methods, `providerForValidInput` and `providerForInvalidInput`, which return data providers for testing valid and invalid inputs respectively. The tests verify that the `validate` method returns the correct boolean value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/validation/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Respect/Validation.\n * (c) Alexandre Gomes Gaigalas <alexandre@gaigalas.net>\n *\n * For the full copyright and license information, please view the LICENSE file\n * that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace Respect\\Validation\\Rules;\n\nuse Respect\\Validation\\Test\\RuleTestCase;\n\n/**\n * @group rule\n *\n * @covers \\Respect\\Validation\\Rules\\HelloWorld\n *\n * @author Your Name <youremail@yourdomain.tld>\n */\nfinal class HelloWorldTest extends RuleTestCase\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function providerForValidInput(): array\n    {\n        $rule = new HelloWorld();\n\n        return [\n            [$rule, 'Hello World'],\n        ];\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function providerForInvalidInput(): array\n    {\n        $rule = new HelloWorld();\n\n        return [\n            [$rule, 'Not a hello'],\n            [$rule, 'Hello darkness, my old friend'],\n            [$rule, 'Hello is it me you\\'re looking for?'],\n        ];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Appending values to headers - PHP\nDESCRIPTION: This snippet shows how to append additional values to an existing header in an HTTP response.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$response->withAddedHeader('My-Custom-Header', 'The second message');\n```\n\n----------------------------------------\n\nTITLE: General-Use Polyfill Example\nDESCRIPTION: Example showing how to use Sodium Compat for PHP < 5.3 or when PECL extension availability is unknown.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"/path/to/sodium_compat/autoload.php\";\n\n$alice_kp = ParagonIE_Sodium_Compat::crypto_sign_keypair();\n$alice_sk = ParagonIE_Sodium_Compat::crypto_sign_secretkey($alice_kp);\n$alice_pk = ParagonIE_Sodium_Compat::crypto_sign_publickey($alice_kp);\n\n$message = 'This is a test message.';\n$signature = ParagonIE_Sodium_Compat::crypto_sign_detached($message, $alice_sk);\nif (ParagonIE_Sodium_Compat::crypto_sign_verify_detached($signature, $message, $alice_pk)) {\n    echo 'OK', PHP_EOL;\n} else {\n    throw new Exception('Invalid signature');\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Escaping of Tainted Input in PHP\nDESCRIPTION: Shows how to conditionally apply taint escaping using a boolean parameter. The @psalm-taint-escape annotation uses a conditional expression to determine whether to escape HTML taint based on the function argument.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param string $str\n * @param bool $escape\n * @psalm-taint-escape ($escape is true ? 'html' : null)\n */\nfunction processVar(string $str, bool $escape = true) : string {\n    if ($escape) {\n      $str = str_replace(['<', '>'], '', $str);\n    }\n    return $str;\n}\n\necho processVar($_GET['text'], false); // detects tainted HTML\necho processVar($_GET['text'], true); // considered secure\n```\n\n----------------------------------------\n\nTITLE: Strict Groups Matching Examples\nDESCRIPTION: Usage of strict group matching methods that ensure non-nullable match groups\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/pcre/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Preg;\n\n// $matches is guaranteed to be an array of strings, if a subpattern does not match and produces a null it will throw\nif (Preg::matchStrictGroups('{fo+}', $string, $matches))\nif (Preg::matchAllStrictGroups('{fo+}', $string, $matches))\n```\n\n----------------------------------------\n\nTITLE: Configuring Psalm Language Server in Vim with vim-lsp\nDESCRIPTION: This Vim script registers Psalm Language Server with vim-lsp. It specifies the command to execute the server and restricts it to PHP files. The server information is dynamically expanded to the executable path.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/language_server.md#2025-04-21_snippet_3\n\nLANGUAGE: Vim Script\nCODE:\n```\nau User lsp_setup call lsp#register_server({\n     \\ 'name': 'psalm-language-server',\n     \\ 'cmd': {server_info->[expand('vendor/bin/psalm-language-server')]},\n     \\ 'allowlist': ['php'],\n     \\ })\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MissingParamType Error in PHP Function Declaration\nDESCRIPTION: This code snippet shows a PHP function declaration that would trigger the MissingParamType error. The function 'foo' has a parameter '$a' without any type information, while the return type is specified as 'void'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingParamType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo($a) : void {}\n```\n\n----------------------------------------\n\nTITLE: Template Interface Implementation in PHP\nDESCRIPTION: Shows how to implement a templated interface with a concrete type using @implements annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T\n */\ninterface IFoo {}\n\n/**\n * @implements IFoo<int>\n */\nclass Foo implements IFoo {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Elements with Mixed Types PHP\nDESCRIPTION: The function 'foo' takes two arrays as parameters and echoes elements from the second array based on the keys from the first array. It illustrates the potential pitfalls of type coercion in PHP when mixed array types are used.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedArrayTypeCoercion.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * @param array<array-key, int> $a\n * @param array<int, string> $b\n */\nfunction foo(array $a, array $b) : void {\n    foreach ($a as $j => $k) {\n        echo $b[$j];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating MixedArgumentTypeCoercion with Variadic Arguments in PHP\nDESCRIPTION: This example demonstrates how MixedArgumentTypeCoercion can occur with variadic arguments when '@no-named-arguments' is not specified. The function 'foo' returns its variadic argument, but Psalm considers it as 'array<array-key, int>' due to potential named arguments, which may not match the expected 'list<int>' return type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedArgumentTypeCoercion.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @param list<int> $args */\nfunction foo(int ...$args): array {\n    return $args; // $args is array<array-key, int> since it can have named arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Template Inheritance with @extends Annotation in PHP\nDESCRIPTION: Demonstrates how to extend a templated class with a concrete type using @extends annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T\n */\nclass ParentClass {}\n\n/**\n * @extends ParentClass<int>\n */\nclass ChildClass extends ParentClass {}\n```\n\n----------------------------------------\n\nTITLE: Prepending by rewriting separately - PHP\nDESCRIPTION: This snippet demonstrates how to prepend content by reading the existing contents and rewriting the stream.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// assuming our response body stream only contains: \"abcd\"\n$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // abcd\n// seeking the stream to beginning\n$body->rewind();\n$body->write('ef'); // stream contains \"efcd\"\n$body->write($contents); // stream contains \"efabcd\"\n```\n\n----------------------------------------\n\nTITLE: Pre-release Version Comparison in PHP\nDESCRIPTION: Shows how to compare pre-release versions using the Version class. Demonstrates the handling of alpha versions and their comparison logic.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phar-io/version/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$leftVersion = new PharIo\\Version\\Version('3.0.0-alpha.1');\n$rightVersion = new PharIo\\Version\\Version('3.0.0-alpha.2');\n\n$leftVersion->isGreaterThan($rightVersion); // false\n$rightVersion->isGreaterThan($leftVersion); // true\n```\n\n----------------------------------------\n\nTITLE: Installing Google API Client Library via Composer in PHP\nDESCRIPTION: This snippet shows how to install the Google API Client Library using Composer and include the autoloader in your PHP project.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require google/apiclient:^2.12.1\n```\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once '/path/to/your-project/vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Using properties-of Utility Type in PHP Class with Psalm\nDESCRIPTION: This example shows how to use the properties-of utility type to create an array representation of a class's properties and retrieve property names.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass A {\n  public string $foo = 'foo!';\n  public int $bar = 42;\n\n  /**\n   * @return properties-of<self>\n   */\n  public function asArray(): array {\n    return [\n      'foo' => $this->foo,\n      'bar' => $this->bar,\n    ];\n  }\n\n  /**\n   * @return list<key-of<properties-of<self>>>\n   */\n  public function attributeNames(): array {\n    return ['foo', 'bar']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Methods Between Classes with Psalm\nDESCRIPTION: This command shows how to move a method from one class to another using Psalm's refactoring tool. It can be used for both static and instance methods, with some limitations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/refactoring.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-refactor --move \"Ns1\\Foo::bar\" --into \"Ns2\\Baz\"\n```\n\n----------------------------------------\n\nTITLE: Template Type Constraints in PHP\nDESCRIPTION: Example of how to constrain template parameters to specific types or classes using 'of' keyword.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {}\nclass FooChild extends Foo {}\n\n/**\n * @template T of Foo\n * @psalm-param T $t\n * @return array<int, T>\n */\nfunction makeArray($t) {\n    return [$t];\n}\n$a = makeArray(new Foo()); // typed as array<int, Foo>\n$b = makeArray(new FooChild()); // typed as array<int, FooChild>\n$c = makeArray(new stdClass()); // type error\n```\n\n----------------------------------------\n\nTITLE: Array Access Implementation Example\nDESCRIPTION: Demonstrates the ArrayAccess interface implementation allowing array-style access to data using the Data class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/dflydev/dot-access-data/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Get\n$data->get('name') === $data['name']; // true\n\n$data['name'] = 'Dewey';\n// is equivalent to\n$data->set($name, 'Dewey');\n\nisset($data['name']) === $data->has('name');\n\n// Remove key\nunset($data['name']);\n```\n\n----------------------------------------\n\nTITLE: Implementing PSR-6 Compatible Caching\nDESCRIPTION: Example of implementing caching using PHP Cache library with filesystem adapter\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse League\\Flysystem\\Adapter\\Local;\nuse League\\Flysystem\\Filesystem;\nuse Cache\\Adapter\\Filesystem\\FilesystemCachePool;\n\n$filesystemAdapter = new Local(__DIR__.'/');\n$filesystem        = new Filesystem($filesystemAdapter);\n\n$cache = new FilesystemCachePool($filesystem);\n$client->setCache($cache);\n```\n\n----------------------------------------\n\nTITLE: Defining an Abstract Class and Its Subclass in PHP\nDESCRIPTION: This snippet defines an abstract class 'A' with an abstract method 'foo'. A class 'B' extends 'A' but does not implement the abstract method, which will lead to an error when instantiation occurs. The primary focus is to showcase the requirement of implementing abstract methods in subclasses.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnimplementedAbstractMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nabstract class A {\n    abstract public function foo() : void;\n}\nclass B extends A {}\n\n```\n\n----------------------------------------\n\nTITLE: Checking if URI is Absolute-Path Reference with GuzzleHttp\\Psr7\\Uri::isAbsolutePathReference\nDESCRIPTION: This method determines if a URI is an absolute-path reference. An absolute-path reference is a relative reference that begins with a single slash character. The method takes a UriInterface object and returns a boolean value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n`public static function isAbsolutePathReference(UriInterface $uri): bool`\n```\n\n----------------------------------------\n\nTITLE: VSCode Settings Configuration for WebPageTest Development\nDESCRIPTION: Recommended VSCode settings for WebPageTest development that configure PHP tabbing, code standards, file associations, and formatting options. These settings help maintain consistent code style across the project.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"[php]\": {\n    \"editor.tabSize\": 4\n  },\n\n  // uncomment to reformat on every file save\n  //\"editor.formatOnSave\": true,\n\n  \"phpcs.standard\": \"PSR12\",\n\n  \"files.trimTrailingWhitespace\": true,\n\n  \"files.eol\": \"\\n\",\n\n  \"files.associations\": {\n    \"*.inc\": \"php\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Function with Template Parameter in PHP\nDESCRIPTION: A basic example showing how to use @template in functions to preserve the type of input arguments to output values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T\n * @psalm-param T $t\n * @return T\n */\nfunction mirror($t) {\n    return $t;\n}\n\n$a = 5;\n$b = mirror($a); // Psalm knows the result is an int\n\n$c = \"foo\";\n$d = mirror($c); // Psalm knows the result is string\n```\n\n----------------------------------------\n\nTITLE: Hashing Stream Contents with GuzzleHttp\\Psr7\\Utils::hash\nDESCRIPTION: This method calculates a hash of a stream. It reads the entire stream to compute a rolling hash using PHP's `hash_init` functions.  It takes a StreamInterface object, a hashing algorithm, and an optional raw output flag as input.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n`public static function hash(StreamInterface $stream, string $algo, bool $rawOutput = false): string`\n```\n\n----------------------------------------\n\nTITLE: Exporting Simple Data Types - PHP\nDESCRIPTION: This snippet shows how to export various simple data types, such as integers, floats, strings, booleans, and special values (NaN, -INF, null) using Sebastian Exporter.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/exporter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse SebastianBergmann\\Exporter\\Exporter;\n\n$exporter = new Exporter;\n\n// 46\nprint $exporter->export(46);\n\n// 4.0\nprint $exporter->export(4.0);\n\n// 'hello, world!'\nprint $exporter->export('hello, world!');\n\n// false\nprint $exporter->export(false);\n\n// NAN\nprint $exporter->export(acos(8));\n\n// -INF\nprint $exporter->export(log(0));\n\n// null\nprint $exporter->export(null);\n\n// resource(13) of type (stream)\nprint $exporter->export(fopen('php://stderr', 'w'));\n\n// Binary String: 0x000102030405\nprint $exporter->export(chr(0) . chr(1) . chr(2) . chr(3) . chr(4) . chr(5));\n\n```\n\n----------------------------------------\n\nTITLE: Using ASCII::to_ascii with language-specific transliteration in PHP\nDESCRIPTION: Example demonstrating how to use the to_ascii method with a language parameter to handle language-specific character transliteration. Shows the difference between German and English transliteration of umlauts.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/build/docs/base.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\necho ASCII::to_ascii('�Düsseldorf�', 'de');\n  \n// will output\n// Duesseldorf\n\necho ASCII::to_ascii('�Düsseldorf�', 'en');\n  \n// will output\n// Dusseldorf\n```\n\n----------------------------------------\n\nTITLE: Resolving ArgumentTypeCoercion by Modifying Function Signature in PHP\nDESCRIPTION: This solution changes the function signature to expect an object of the more specific type, eliminating the need for type coercion.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ArgumentTypeCoercion.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction takesA(B $a) : void {\n    takesB($a);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Dot Access Data Usage in PHP\nDESCRIPTION: Demonstrates basic usage of the Data class including setting, getting, appending values, and checking existence using dot notation. Shows handling of default values and missing paths.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/dflydev/dot-access-data/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Dflydev\\DotAccessData\\Data;\n\n$data = new Data;\n\n$data->set('a.b.c', 'C');\n$data->set('a.b.d', 'D1');\n$data->append('a.b.d', 'D2');\n$data->set('a.b.e', ['E0', 'E1', 'E2']);\n\n// C\n$data->get('a.b.c');\n\n// ['D1', 'D2']\n$data->get('a.b.d');\n\n// ['E0', 'E1', 'E2']\n$data->get('a.b.e');\n\n// true\n$data->has('a.b.c');\n\n// false\n$data->has('a.b.d.j');\n\n\n// 'some-default-value'\n$data->get('some.path.that.does.not.exist', 'some-default-value');\n\n// throws a MissingPathException because no default was given\n$data->get('some.path.that.does.not.exist');\n```\n\n----------------------------------------\n\nTITLE: Defining Classes with Overridden Property Access in PHP\nDESCRIPTION: This code snippet defines two classes, A and B, where B extends A. Class A has a public property 'foo', while class B overrides this property and makes it protected. Both properties are typed as string|null.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/OverriddenPropertyAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string|null */\n    public $foo;\n}\nclass B extends A {\n    /** @var string|null */\n    protected $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Template Parameter Implementation with Yield\nDESCRIPTION: Demonstrates a class implementing IteratorAggregate with multiple template parameters, which may trigger a type-related error in static analysis or template type checking\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TooManyTemplateParams.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template-implements IteratorAggregate<int, string, int>\n */\nclass SomeIterator implements IteratorAggregate\n{\n    public function getIterator() {\n        yield 5;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Psalm via Composer\nDESCRIPTION: Installs the latest version of Psalm as a development dependency using Composer. Requires PHP >= 7.4.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev vimeo/psalm\n```\n\n----------------------------------------\n\nTITLE: Creating Function-Based Streams with FnStream\nDESCRIPTION: Demonstrates how to extend stream functionality using FnStream, which allows customizing stream behavior without creating new classes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$stream = Psr7\\Utils::streamFor('hi');\n$fnStream = Psr7\\FnStream::decorate($stream, [\n    'rewind' => function () use ($stream) {\n        echo 'About to rewind - ';\n        $stream->rewind();\n        echo 'rewound!';\n    }\n]);\n\n$fnStream->rewind();\n// Outputs: About to rewind - rewound!\n```\n\n----------------------------------------\n\nTITLE: Using Pluralize Method in PHP\nDESCRIPTION: Shows how to use the pluralize method to convert a word to its plural form.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->pluralize('browser'); // browsers\n```\n\n----------------------------------------\n\nTITLE: Accessing Protected Class Constant Example - PHP\nDESCRIPTION: This example demonstrates incorrect access of a protected class constant that will trigger an InaccessibleClassConstant error. The code attempts to access a protected constant 'FOO' directly from outside the class scope, which is not allowed by PHP's visibility rules.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InaccessibleClassConstant.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    protected const FOO = 'FOO';\n}\necho A::FOO;\n```\n\n----------------------------------------\n\nTITLE: Installing getallheaders for PHP >= 5.6\nDESCRIPTION: Composer command to install the getallheaders library for PHP versions 5.6 and newer\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/ralouphie/getallheaders/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require ralouphie/getallheaders\n```\n\n----------------------------------------\n\nTITLE: Using SetNullFilter in DeepCopy PHP\nDESCRIPTION: Shows how to use SetNullFilter to set specific properties to null during copying.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\SetNullFilter;\nuse DeepCopy\\Matcher\\PropertyNameMatcher;\n\n$object = MyClass::load(123);\necho $object->id; // 123\n\n$copier = new DeepCopy();\n$copier->addFilter(new SetNullFilter(), new PropertyNameMatcher('id'));\n\n$copy = $copier->copy($object);\n\necho $copy->id; // null\n```\n\n----------------------------------------\n\nTITLE: Using Custom Stream Decorator with EOF Callback\nDESCRIPTION: Shows how to use the custom EofCallbackStream implementation to execute a callback when the end of a stream is reached.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor('foo');\n\n$eofStream = new EofCallbackStream($original, function () {\n    echo 'EOF!';\n});\n\n$eofStream->read(2);\n$eofStream->read(1);\n// echoes \"EOF!\"\n$eofStream->seek(0);\n$eofStream->read(3);\n// echoes \"EOF!\"\n```\n\n----------------------------------------\n\nTITLE: Fixing MixedAssignment with Assert in PHP\nDESCRIPTION: This snippet demonstrates how to fix the MixedAssignment issue by adding an assert call to specify the expected type of the variable.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedAssignment.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = $GLOBALS['foo'];\nassert(is_string($a));\n```\n\n----------------------------------------\n\nTITLE: Manually Constructing an English Inflector in PHP\nDESCRIPTION: Demonstrates how to manually construct an English Inflector without using the factory.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\CachedWordInflector;\nuse Doctrine\\Inflector\\RulesetInflector;\nuse Doctrine\\Inflector\\Rules\\English;\n\n$inflector = new Inflector(\n    new CachedWordInflector(new RulesetInflector(\n        English\\Rules::getSingularRuleset()\n    )),\n    new CachedWordInflector(new RulesetInflector(\n        English\\Rules::getPluralRuleset()\n    ))\n);\n```\n\n----------------------------------------\n\nTITLE: Missing Return Type in PHP Function\nDESCRIPTION: This code snippet illustrates a PHP function `foo` that lacks a return type definition. When a function doesn't declare the type of data it returns, it can lead to uncertainty about the function's behavior and potential type-related errors during runtime.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() {\n    return \"foo\";\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating Safe Filenames in PHP\nDESCRIPTION: Converts a given string to a safe filename while preserving case. Uses transliteration by default, with an option to simply replace unsafe characters with a hyphen.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nASCII::to_filename('שדגשדג.png', true)); // 'shdgshdg.png'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnusedParam Error in PHP Function\nDESCRIPTION: This example shows a PHP function with an unused parameter ($b) that would trigger the UnusedParam error when --find-dead-code is enabled in Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedParam.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(int $a, int $b) : int {\n    return $a + 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests in Guzzle 3.0 vs 4.0\nDESCRIPTION: Illustrates the change in how HTTP requests are sent between Guzzle 3.0 and 4.0. In 4.0, methods like get() directly return the response, while in 3.0 they returned a request object that needed to be sent separately.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n// 3.0\n$request = $client->get('/');\n$response = $request->send();\n\n// 4.0\n$response = $client->get('/');\n\n// or, to mirror the previous behavior\n$request = $client->createRequest('GET', '/');\n$response = $client->send($request);\n```\n\n----------------------------------------\n\nTITLE: Using pure-callable Annotation for Callable Parameters in PHP\nDESCRIPTION: Demonstrates how to use pure-callable annotation to enforce pure function requirements for callable parameters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param pure-callable(mixed): int $callback\n */\nfunction foo(callable $callback) {...}\n\n// this fails since random_int is not pure\nfoo(\n    /** @param mixed $p */\n    fn($p) => random_int(1, 2)\n);\n```\n\n----------------------------------------\n\nTITLE: Collection Assertion Example in PHP\nDESCRIPTION: Demonstrates how to use the `allIsInstanceOf()` method to verify that all elements in an array are instances of a specific class\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/webmozart/assert/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nAssert::allIsInstanceOf($employees, 'Acme\\\\Employee');\n```\n\n----------------------------------------\n\nTITLE: Creating a Spanish Inflector Instance in PHP\nDESCRIPTION: Shows how to create an Inflector instance for Spanish using the InflectorFactory.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\InflectorFactory;\nuse Doctrine\\Inflector\\Language;\n\n$inflector = InflectorFactory::createForLanguage(Language::SPANISH)->build();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of CpuCoreCounter in PHP\nDESCRIPTION: This snippet demonstrates the basic usage of the CpuCoreCounter class. It shows how to create an instance, get the CPU core count, and handle the case where the count cannot be determined.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/fidry/cpu-core-counter/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Fidry\\CpuCoreCounter\\CpuCoreCounter;\nuse Fidry\\CpuCoreCounter\\NumberOfCpuCoreNotFound;\nuse Fidry\\CpuCoreCounter\\Finder\\DummyCpuCoreFinder;\n\n$counter = new CpuCoreCounter();\n\ntry {\n    $counter->getCount();   // e.g. 8\n} catch (NumberOfCpuCoreNotFound) {\n    return 1;   // Fallback value\n}\n\n// An alternative form where we not want to catch the exception:\n\n$counter = new CpuCoreCounter([\n    ...CpuCoreCounter::getDefaultFinders(),\n    new DummyCpuCoreFinder(1),  // Fallback value\n]);\n\n$counter->getCount();   // e.g. 8\n```\n\n----------------------------------------\n\nTITLE: Possibly Null Array Assignment\nDESCRIPTION: This PHP code snippet shows an example of assigning a value to an element of an array that is initially null. In PHP, attempting to directly assign to an element of a null variable treats the variable as an array, so this is valid PHP. However, it's generally better to explicitly initialize the array before working with it for clarity and to avoid potential issues.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullArrayAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = null;\n$a[0][] = 1;\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-seal-properties to Restrict Magic Properties in PHP\nDESCRIPTION: Demonstrates how to use @psalm-seal-properties to restrict which properties can be accessed through magic getters/setters. This ensures only explicitly documented properties can be used.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @property string $foo\n * @psalm-seal-properties\n */\nclass A {\n     public function __get(string $name): ?string {\n          if ($name === \"foo\") {\n               return \"hello\";\n          }\n     }\n\n     public function __set(string $name, $value): void {}\n}\n\n$a = new A();\n$a->bar = 5; // this call fails\n```\n\n----------------------------------------\n\nTITLE: Catching Non-Exception Class in PHP\nDESCRIPTION: This PHP code snippet demonstrates an invalid `catch` block. The `catch` block attempts to catch an instance of class `A`, which is not a subclass of `Exception` or implementation of `Throwable`. This will trigger an `InvalidCatch` error during static analysis or runtime, indicating that only exceptions or throwables can be caught.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidCatch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\ntry {\n    $worked = true;\n}\ncatch (A $e) {}\n?>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Void Function Assignment in PHP\nDESCRIPTION: Example showing problematic code where a void function return is assigned to a variable. While PHP treats void returns as null, this pattern should be avoided as it goes against the purpose of void return types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/AssignmentToVoid.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : void {}\n$a = foo();\n```\n\n----------------------------------------\n\nTITLE: Implementing Immutable Classes with @psalm-immutable Annotation in PHP\nDESCRIPTION: Demonstrates how to use @psalm-immutable annotation to create classes where properties are treated as readonly and instance methods as mutation-free.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @psalm-immutable\n */\nabstract class Foo\n{\n    public string $baz;\n\n    abstract public function bar(): int;\n}\n\n/**\n * @psalm-immutable\n */\nfinal class ChildClass extends Foo\n{\n    public function __construct(string $baz)\n    {\n        $this->baz = $baz;\n    }\n\n    public function bar(): int\n    {\n        return 0;\n    }\n}\n\n$anonymous = new /** @psalm-immutable */ class extends Foo\n{\n    public string $baz = \"B\";\n\n    public function bar(): int\n    {\n        return 1;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Safe Use of Collection with Template Covariance in PHP\nDESCRIPTION: Example showing a scenario where it's safe to use a Collection<Dog> in a function expecting Collection<Animal>, with appropriate template covariance annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\nabstract class Animal {\n    abstract public function getNoise() : string;\n}\nclass Dog extends Animal {\n    public function getNoise() : string { return \"woof\"; }\n}\nclass Cat extends Animal {\n    public function getNoise() : string { return \"miaow\"; }\n}\n\n/**\n * @template T\n */\nclass Collection {\n    /** @var array<int, T> */\n    public array $list = [];\n}\n\n/**\n * @param Collection<Animal> $collection\n */\nfunction getNoises(Collection $collection) : void {\n    foreach ($collection->list as $animal) {\n        echo $animal->getNoise();\n    }\n}\n\n/**\n * @param Collection<Dog> $dog_collection\n */\nfunction takesDogList(Collection $dog_collection) : void {\n    getNoises($dog_collection);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting PSR-7 Streams to PHP Stream Resources\nDESCRIPTION: Demonstrates how to convert a PSR-7 stream to a native PHP stream resource using StreamWrapper.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7\\StreamWrapper;\n\n$stream = GuzzleHttp\\Psr7\\Utils::streamFor('hello!');\n$resource = StreamWrapper::getResource($stream);\necho fread($resource, 6); // outputs hello!\n```\n\n----------------------------------------\n\nTITLE: InvalidNullableReturnType Fix Example\nDESCRIPTION: Shows how Psalter handles nullable return types for different PHP versions\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/fixing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo() : string {\n  return rand(0, 1) ? \"hello\" : null;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo() : ?string {\n  return rand(0, 1) ? \"hello\" : null;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @return string|null\n */\nfunction foo() {\n  return rand(0, 1) ? \"hello\" : null;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Validator Rule in PHP\nDESCRIPTION: This snippet demonstrates the structure of a new validator rule in Respect\\Validation. It extends the `AbstractRule` class and implements the `validate` method, which defines the validation logic. The example checks if an input string is equal to 'Hello World'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/validation/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Respect/Validation.\n * (c) Alexandre Gomes Gaigalas <alexandre@gaigalas.net>\n *\n * For the full copyright and license information, please view the LICENSE file\n * that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace Respect\\Validation\\Rules;\n\n/**\n * Explain in one sentence what this rule does.\n *\n * @author Your Name <youremail@yourdomain.tld>\n */\nfinal class HelloWorld extends AbstractRule\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function validate($input): bool\n    {\n        return $input === 'Hello World';\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using a Function Call inside 'if' Statement in PHP\nDESCRIPTION: This example demonstrates a common problem case where a function call is used inside an 'if' statement. This can fail because subsequent calls to the same method are not guaranteed to return the same result.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullArgument.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (is_string($cat->getName()) {\n    foo($cat->getName());\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Property Value Inside Pure Function - PHP\nDESCRIPTION: This code snippet defines a class with a public integer property and a pure function that takes an integer and an object of that class as parameters. It returns the sum of the integer parameter and the class property. The function is annotated with @psalm-pure to indicate its purity, meaning it does not cause side effects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpurePropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public int $a = 5;\n}\n\n/** @psalm-pure */\nfunction foo(int $i, A $a) : int {\n    return $i + $a->a;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resolving MixedAssignment with Explicit Cast in PHP\nDESCRIPTION: This code shows how to address the MixedAssignment issue by using an explicit cast to define the variable type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedAssignment.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = (string) $GLOBALS['foo'];\n```\n\n----------------------------------------\n\nTITLE: Guzzle Exponential Backoff Plugin (After)\nDESCRIPTION: This PHP snippet demonstrates how to use the `BackoffPlugin` with exponential backoff in newer Guzzle versions using a factory method. It creates the plugin with a maximum number of retries and an array of failure codes. `Guzzle\\Plugin\\Backoff\\BackoffPlugin` and `Guzzle\\Plugin\\Backoff\\HttpBackoffStrategy` are used. The `HttpBackoffStrategy` is used with a custom 429 code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Plugin\\Backoff\\BackoffPlugin;\nuse Guzzle\\Plugin\\Backoff\\HttpBackoffStrategy;\n\n// Use convenient factory method instead -- see implementation for ideas of what\n// you can do with chaining backoff strategies\n$backoffPlugin = BackoffPlugin::getExponentialBackoff($maxRetries, array_merge(\n        HttpBackoffStrategy::getDefaultFailureCodes(), array(429)\n    ));\n$client->addSubscriber($backoffPlugin);\n\n```\n\n----------------------------------------\n\nTITLE: Basic MixedReturnTypeCoercion Example in PHP\nDESCRIPTION: This example demonstrates the basic error case where a function declares it returns string[] but actually returns an unverified array parameter. Psalm cannot guarantee the array contains only strings.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedReturnTypeCoercion.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @return string[]\n */\nfunction foo(array $a) : array {\n    return $a;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing DocBlock Components\nDESCRIPTION: Demonstrates how to access various components of a parsed DocBlock including summary and description, with options for string conversion.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/reflection-docblock/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Contains the summary for this DocBlock\n$summary = $docblock->getSummary();\n\n// Contains \\phpDocumentor\\Reflection\\DocBlock\\Description object\n$description = $docblock->getDescription();\n\n// You can either cast it to string\n$description = (string) $docblock->getDescription();\n\n// Or use the render method to get a string representation of the Description.\n$description = $docblock->getDescription()->render();\n```\n\n----------------------------------------\n\nTITLE: Using PhpConfig for PHP Sub-Processes\nDESCRIPTION: Example showing how to use the PhpConfig helper class to configure PHP sub-processes with different Xdebug settings.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\PhpConfig;\n\n$config = new PhpConfig;\n\n$options = $config->useOriginal();\n# $options:     empty array\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Options in Guzzle\nDESCRIPTION: This snippet shows how to access default request options that have been set on a Guzzle client.  This is done using getConfig()->getPath('request.options/headers')`.  This allows inspecting or modifying the default request headers.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\"$client->getConfig()->getPath('request.options/headers')`.\n```\n\n----------------------------------------\n\nTITLE: Resolving Types with Context\nDESCRIPTION: Example showing type resolution using a context object to resolve partial names.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$typeResolver = new \\phpDocumentor\\Reflection\\TypeResolver();\n$type = $typeResolver->resolve('Types\\Context', $context);\n```\n\n----------------------------------------\n\nTITLE: Nullable Assertion Example in PHP\nDESCRIPTION: Shows how to use the `nullOrString()` method to validate a value as either a string or null\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/webmozart/assert/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nAssert::nullOrString($middleName, 'The middle name must be a string or null. Got: %s');\n```\n\n----------------------------------------\n\nTITLE: Migration from Native Function Calls in Guzzle 7.0\nDESCRIPTION: Example showing how native function calls in Guzzle 7.0 are now prefixed with a slash to prevent method overloading by other libraries.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Before:\ncurl_version();\n\n// After:\n\\curl_version();\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with PHPUnit\nDESCRIPTION: This snippet describes the command to run PHPUnit tests to verify that all unit tests pass before contributing code. It helps ensure the stability and reliability of the project. Requires PHPUnit to be set up in the project environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n    phpunit\n```\n\n----------------------------------------\n\nTITLE: Normalizing Whitespace in PHP\nDESCRIPTION: Normalizes whitespace in a string, with options to keep non-breaking spaces and bidirectional Unicode controls. Can also normalize control characters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nASCII::normalize_whitespace(\"abc-\\xc2\\xa0-öäü-\\xe2\\x80\\xaf-\\xE2\\x80\\xAC\", true); // \"abc-\\xc2\\xa0-öäü- -\"\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 5.4 Changes in Markdown\nDESCRIPTION: Lists new features added in version 5.4 of Symfony's VarDumper component, including styling improvements and support for new data types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n5.4\n---\n\n * Add ability to style integer and double values independently\n * Add casters for Symfony's UUIDs and ULIDs\n * Add support for `Fiber`\n```\n\n----------------------------------------\n\nTITLE: Creating Mock Object with Intersection Type in PHP\nDESCRIPTION: This snippet demonstrates how to create a mock object in a PHPUnit test, resulting in an instance that satisfies multiple types simultaneously.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/intersection_types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$hare = $this->createMock(Hare::class);\n```\n\n----------------------------------------\n\nTITLE: Example of Runtime Error from NonInvariantDocblockPropertyType\nDESCRIPTION: Demonstrates how the type mismatch between parent and child class properties can lead to runtime errors when code written against the parent class manipulates an object of the child class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NonInvariantDocblockPropertyType.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction takesA(A $a) {\n    $a->foo = null; // this is valid for A\n}\n\n$child = new AChild();\ntakesA($child);\necho strlen($child->foo); // this is valid for AChild\n```\n\n----------------------------------------\n\nTITLE: Nested Conditional Types in PHP Class Methods\nDESCRIPTION: A more complex example showing nested conditional types in a class method's return type. The method uses class constants to determine which type to return, with conditional logic that evaluates multiple conditions in sequence.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/conditional_types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    const TYPE_STRING = 0;\n    const TYPE_INT = 1;\n\n    /**\n     * @template T of int\n     * @param T $i\n     * @psalm-return (\n     *     T is self::TYPE_STRING\n     *     ? string\n     *     : (T is self::TYPE_INT ? int : bool)\n     * )\n     */\n    public static function getDifferentType(int $i) {\n        if ($i === self::TYPE_STRING) {\n            return \"hello\";\n        }\n\n        if ($i === self::TYPE_INT) {\n            return 5;\n        }\n\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirects in Guzzle 4.0\nDESCRIPTION: Examples showing how to configure standard and strict redirects using the new allow_redirects request option in Guzzle 4.0.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Standard redirects with a default of a max of 5 redirects\n$request = $client->createRequest('GET', '/', ['allow_redirects' => true]);\n\n// Strict redirects with a custom number of redirects\n$request = $client->createRequest('GET', '/', [\n    'allow_redirects' => ['max' => 5, 'strict' => true]\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Processing Instructions to XML Output in PHP\nDESCRIPTION: This snippet demonstrates how to add a processing instruction to the XML output generated by ArrayToXml.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/spatie/array-to-xml/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$arrayToXml = new ArrayToXml($array);\n$arrayToXml->addProcessingInstruction('xml-stylesheet', 'type=\"text/xsl\" href=\"base.xsl\"');\n$result = $arrayToXml->toXml();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Complex Type Annotation in PHP\nDESCRIPTION: An example of an informal PHPDoc annotation that denotes an ArrayIterator over strings, showcasing the complexity of supporting various type annotations in Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/contributing/what_makes_psalm_complicated.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nArrayIterator|string[]\n```\n\n----------------------------------------\n\nTITLE: Suppressing UnusedClosureParam Error in PHP with Underscore Prefix\nDESCRIPTION: This example demonstrates how to suppress the UnusedClosureParam error by prefixing the unused parameter name with an underscore. Here, $_a is marked as intentionally unused while $b is used in the function body.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedClosureParam.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$f = function (int $_a, int $b) : int {\n    return $b + 4;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking if header exists - PHP\nDESCRIPTION: This snippet illustrates how to check the presence of a specific header in both the request and response objects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$request->hasHeader('My-Custom-Header'); // will return false\n$response->hasHeader('My-Custom-Header'); // will return true\n```\n\n----------------------------------------\n\nTITLE: Tracking Duration since PHP Startup in PHP\nDESCRIPTION: This snippet utilizes the ResourceUsageFormatter to print the resource usage since the start of the PHP request. It executes a loop and retrieves memory and time consumption details since the request began.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-timer/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse SebastianBergmann\\Timer\\ResourceUsageFormatter;\n\nforeach (\\range(0, 100000) as $i) {\n    // ...\n}\n\nprint (new ResourceUsageFormatter)->resourceUsageSinceStartOfRequest();\n?>\n```\n\n----------------------------------------\n\nTITLE: PHP Enum with Unique Case Values - Fixed Example\nDESCRIPTION: Corrected implementation of the enum where each case has a unique string value, following proper PHP enum implementation practices.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateEnumCaseValue.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: string \n{\n    case Open = \"open\";\n    case Closed = \"closed\";\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AfterStatementAnalysisInterface in Psalm\nDESCRIPTION: This PHP class snippet demonstrates the implementation of the AfterStatementAnalysisInterface, which is part of Psalm's plugin API. Implement this interface to perform operations after Psalm evaluates a statement.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/authoring_plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass SomePlugin implements \\Psalm\\Plugin\\EventHandler\\AfterStatementAnalysisInterface\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Array Offset in PHP\nDESCRIPTION: This PHP snippet demonstrates accessing an array with an invalid offset. It highlights an error where a non-integer key is used to access an element in a PHP array, which expects only integer offsets. This type of error is important to identify as it can result in warnings or incorrect data handling in PHP applications.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = [5, 20, 18];\necho $a[\"hello\"];\n```\n\n----------------------------------------\n\nTITLE: Suppressing UnusedParam Error with Underscore Prefix in PHP\nDESCRIPTION: This example demonstrates how to suppress the UnusedParam error by prefixing the unused parameter with an underscore. Here, $_a is marked as intentionally unused.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedParam.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(int $_a, int $b) : int {\n    return $b + 4;\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating null Request IP in IpUtils methods (PHP)\nDESCRIPTION: Deprecates passing null as $requestIp to IpUtils::__checkIp(), IpUtils::__checkIp4() or IpUtils::__checkIp6(). An empty string should be passed instead.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-foundation/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nIpUtils::__checkIp(null, $ip); // Deprecated\nIpUtils::__checkIp('', $ip); // Recommended\n```\n\n----------------------------------------\n\nTITLE: Checking if URI is Absolute with GuzzleHttp\\Psr7\\Uri::isAbsolute\nDESCRIPTION: This method checks whether a URI is absolute, meaning it has a scheme. It accepts a UriInterface object and returns a boolean indicating whether the URI is absolute.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n`public static function isAbsolute(UriInterface $uri): bool`\n```\n\n----------------------------------------\n\nTITLE: Tokenizing and Serializing PHP Code to XML\nDESCRIPTION: This snippet demonstrates how to use the Tokenizer and XMLSerializer classes to parse PHP code and convert it to XML format. It reads a PHP file, tokenizes its content, and then serializes the tokens into XML.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/theseer/tokenizer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$tokenizer = new TheSeer\\Tokenizer\\Tokenizer();\n$tokens = $tokenizer->parse(file_get_contents(__DIR__ . '/src/XMLSerializer.php'));\n\n$serializer = new TheSeer\\Tokenizer\\XMLSerializer();\n$xml = $serializer->toXML($tokens);\n\necho $xml;\n```\n\n----------------------------------------\n\nTITLE: Append to body - PHP\nDESCRIPTION: This snippet demonstrates how to append content to the body of the response stream.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response->getBody()->write('Hello'); // writing directly\n$body = $request->getBody(); // which is a `StreamInterface`\n$body->write('xxxxx');\n```\n\n----------------------------------------\n\nTITLE: Project Files Configuration in Psalm\nDESCRIPTION: Configuration for specifying project files and directories to analyze or ignore in Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<projectFiles>\n  <directory name=\"src\" />\n  <ignoreFiles>\n    <directory name=\"src/Stubs\" />\n  </ignoreFiles>\n  <ignoreFiles allowMissingFiles=\"true\">\n    <directory name=\"path-that-may-not-exist\" />\n  </ignoreFiles>\n</projectFiles>\n```\n\n----------------------------------------\n\nTITLE: PHP Type Return Example with False\nDESCRIPTION: Example function demonstrating the use of string|false return type annotation and its practical implications for type checking.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/plugins_type_system.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @return string|false    false when string is empty, first char of the parameter otherwise */\nfunction firstChar(string $s) { return empty($s) ? false : $s[0]; }\n```\n\n----------------------------------------\n\nTITLE: Analyzing Redundant Condition in PHP Object Validation\nDESCRIPTION: Demonstrates a function that checks an object parameter and returns either the object or null. The condition may be considered redundant since the type-hinted parameter implies non-null validation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantCondition.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nfunction foo(A $a) : ?A {\n    if ($a) return $a;\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Using final Constructor to Fix UnsafeInstantiation\nDESCRIPTION: One solution is to make the parent constructor final, which prevents child classes from modifying the constructor signature.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeInstantiation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    final public function __construct() {}\n\n    public function getInstance() : self\n    {\n        return new static();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Property Access in Pure PHP Method\nDESCRIPTION: This snippet showcases the use of a static property within a method declared as `@psalm-pure`.  Accessing `self::$value` inside `ValueHolder::get()` violates the pure function contract, as static properties introduce mutable global state. Psalm will emit an `ImpureStaticProperty` error as a result.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureStaticProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass ValueHolder {\n    public static ?string $value = null;\n\n    /**\n     * @psalm-pure\n     */\n    public static function get(): ?string {\n        return self::$value;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Assertions in Psalm for PHP\nDESCRIPTION: These snippets demonstrate how to use boolean assertions in Psalm to specify that a variable is true or not false.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/assertion_syntax.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert true $bar  */\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert !false $bar  */\n```\n\n----------------------------------------\n\nTITLE: Generating Non-Prettified XML Output in PHP\nDESCRIPTION: This snippet demonstrates how to generate XML output without prettification, resulting in a single-line XML string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/spatie/array-to-xml/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$arrayToXml->toXml();\n```\n\n----------------------------------------\n\nTITLE: Controlling HTTP Client Configuration with Guzzle\nDESCRIPTION: Example of customizing HTTP requests using Guzzle client configuration\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Client;\n\n$httpClient = new Client([\n    'headers' => [\n        'referer' => 'mysite.com'\n    ]\n]);\n\n$client = new Google\\Client();\n$client->setHttpClient($httpClient);\n```\n\n----------------------------------------\n\nTITLE: Running PHP_CodeSniffer from tools directory\nDESCRIPTION: This snippet demonstrates how to execute the phpcs and phpcbf commands from the tools directory after installing PHP_CodeSniffer using Phive.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n\"./tools/phpcs -h\n./tools/phpcbf -h\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variables in XML\nDESCRIPTION: This XML snippet demonstrates how to declare global variables and their types in Psalm. It allows Psalm to correctly analyze code that uses the `global` keyword to access these variables, specifying the name and type of each global variable, such as `$GLOBALS` and `$_GET`.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<globals>\n  <var name=\"globalVariableName\" type=\"type\" />\n</globals>\n```\n\n----------------------------------------\n\nTITLE: Creating an English Inflector Instance in PHP\nDESCRIPTION: Demonstrates how to create a new Inflector instance for English using the InflectorFactory.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\InflectorFactory;\n\n$inflector = InflectorFactory::create()->build();\n```\n\n----------------------------------------\n\nTITLE: PHP Type Mismatch Return Error Example\nDESCRIPTION: Demonstrates an invalid return statement where a numeric value (5) is returned from a function that declares a string return type. This causes a type mismatch error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidReturnStatement.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : string {\n    return 5; // emitted here\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reference Reusage Issue in PHP\nDESCRIPTION: This code demonstrates the problem of reusing a reference variable ($i) declared within a 'foreach' loop, leading to an unexpected modification of the array ($arr) when $i is later used in a 'for' loop.  The 'foreach' loop iterates over $arr by reference, incrementing each element. The subsequent 'for' loop, reusing $i, unintentionally modifies the last element of $arr due to $i still being a reference to that element.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ReferenceReusedFromConfusingScope.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = [1, 2, 3];\nforeach ($arr as &$i) {\n    ++$i;\n}\n\n// ...more code, after which the usage of $i as a reference has been forgotten by the programmer\n\nfor ($i = 0; $i < 10; ++$i) {\n    echo $i;\n}\n// $arr is now [2, 3, 10] instead of the expected [2, 3, 4]\n?>\n```\n\n----------------------------------------\n\nTITLE: Declaring Property Types in PHP with Psalm Annotations\nDESCRIPTION: Demonstrates how to use the @var annotation to specify types for class property declarations in Psalm. This helps Psalm validate assignments to the property.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/typing_in_psalm.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var string|null */\npublic $foo;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MissingConstructor Issue in PHP Class Definition\nDESCRIPTION: This code snippet shows a PHP class that triggers the MissingConstructor issue. The class A has a public property $foo of type string, but lacks a __construct method to initialize it.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingConstructor.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string */\n    public $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Taint Tracking with Specialized Functions in PHP\nDESCRIPTION: Illustrates that specialized functions still track tainted input appropriately, while preventing false-positives. Tainted inputs are properly identified while hardcoded values don't trigger errors.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-taint-specialize\n */\nfunction takesInput(string $s) : string {\n    return $s;\n}\n\necho takesInput($_GET[\"name\"]); // Psalm detects tainted input\necho takesInput(\"hello\"); // No error\n```\n\n----------------------------------------\n\nTITLE: Suppressing UnusedForeachValue Warnings in PHP\nDESCRIPTION: This example shows how to suppress the UnusedForeachValue warning by prefixing the variable name with an underscore or naming it $_. Both approaches signal to Psalm that the unused variable is intentional.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedForeachValue.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nforeach ([1, 2, 3] as $key => $_val) {}\n\nforeach ([1, 2, 3] as $key => $_) {}\n```\n\n----------------------------------------\n\nTITLE: Creating Context Manually in PHP\nDESCRIPTION: Example showing how to manually create a Context object for type resolution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$context = new \\phpDocumentor\\Reflection\\Types\\Context(\n    '\\My\\Example', \n    [ 'Types' => '\\phpDocumentor\\Reflection\\Types']\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing SebastianBergmann\\Version\nDESCRIPTION: This snippet demonstrates how to create an instance of the SebastianBergmann\\Version class by passing the release version and the path to the source code directory. The constructor requires the version number and the path as parameters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/version/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$version = new SebastianBergmann\\Version(\n  '3.7.10', '/usr/local/src/phpunit'\n);\n\nvar_dump($version->getVersion());\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-7 Server Request Interface Methods\nDESCRIPTION: This section lists methods specific to the ServerRequestInterface, which extends RequestInterface. It provides server-related functionalities such as fetching server parameters, cookies, and uploaded files essential for handling server-side requests.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Interfaces.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getServerParams() `               | Retrieve server parameters  | Typically derived from `$_SERVER`  |\n| `getCookieParams()`                | Retrieves cookies sent by the client to the server. | Typically derived from `$_COOKIES` |\n| `withCookieParams(array $cookies)` |  Returns a new request instance with the specified cookies      |   |\n| `withQueryParams(array $query)` | Returns a new request instance with the specified query string arguments  |  |\n| `getUploadedFiles()` | Retrieve normalized file upload data  |  |\n| `withUploadedFiles(array $uploadedFiles)` | Returns a new request instance with the specified uploaded files  |  |\n| `getParsedBody()` | Retrieve any parameters provided in the request body  |  |\n| `withParsedBody($data)` | Returns a new request instance with the specified body parameters  |  |\n| `getAttributes()` | Retrieve attributes derived from the request  |  |\n| `getAttribute($name, $default = null)` | Retrieve a single derived request attribute  |  |\n| `withAttribute($name, $value)` | Returns a new request instance with the specified derived request attribute  |  |\n| `withoutAttribute($name)` | Returns a new request instance that without the specified derived request attribute  |  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Super-Globals with Custom Types in XML\nDESCRIPTION: This XML snippet demonstrates how to define custom types for super-global variables like `$GLOBALS` and `$_GET` in Psalm. This allows Psalm to perform more accurate static analysis by knowing the structure and types of data within these super-globals.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<globals>\n  <var name=\"GLOBALS\" type=\"array{DB: MyVendor\\DatabaseConnection, VIEW: MyVendor\\TemplateView}\" />\n  <var name=\"_GET\" type=\"array{data: array<string, string>}\" />\n</globals>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Property Initialization in PHP Class\nDESCRIPTION: This PHP snippet demonstrates a property declared without initialization in the constructor, which Psalm static analysis flags as an issue. The constructor exists but does not initialize the 'foo' property. Ensure that all class properties are initialized in the constructor to adhere to Psalm's rules. This requires no external dependencies.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PropertyNotSetInConstructor.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string */\n    public $foo;\n\n    public function __construct() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Reference Reusage Issue Using unset() in PHP\nDESCRIPTION: This code demonstrates the solution to the reference reusage problem by using 'unset($i)' after the 'foreach' loop.  Unsetting the variable $i breaks the reference, ensuring that the subsequent 'for' loop does not modify the array ($arr) and produces the expected result. This prevents unintended side effects caused by the lingering reference.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ReferenceReusedFromConfusingScope.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = [1, 2, 3];\nforeach ($arr as &$i) {\n    ++$i;\n}\nunset($i);\n\nfor ($i = 0; $i < 10; ++$i) {\n    echo $i;\n}\n// $arr is correctly [2, 3, 4]\n?>\n```\n\n----------------------------------------\n\nTITLE: Invalid Array Type Declaration in PHP Docblock\nDESCRIPTION: Example showing an invalid docblock type annotation where array() is used instead of the correct array type syntax. This would typically trigger a docblock validation error since array() is not a valid type declaration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidDocblock.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @var array() */\n$a = [];\n```\n\n----------------------------------------\n\nTITLE: JWT Encoding and Decoding with EdDSA in PHP\nDESCRIPTION: Shows how to use EdDSA (Ed25519) signatures for JWT encoding and decoding using libsodium.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWT;\nuse Firebase\\JWT\\Key;\n\n$keyPair = sodium_crypto_sign_keypair();\n\n$privateKey = base64_encode(sodium_crypto_sign_secretkey($keyPair));\n\n$publicKey = base64_encode(sodium_crypto_sign_publickey($keyPair));\n\n$payload = [\n    'iss' => 'example.org',\n    'aud' => 'example.com',\n    'iat' => 1356999524,\n    'nbf' => 1357000000\n];\n\n$jwt = JWT::encode($payload, $privateKey, 'EdDSA');\necho \"Encode:\\n\" . print_r($jwt, true) . \"\\n\";\n\n$decoded = JWT::decode($jwt, new Key($publicKey, 'EdDSA'));\necho \"Decode:\\n\" . print_r((array) $decoded, true) . \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Basic MyContainer Class Implementation in PHP\nDESCRIPTION: A simple class implementation showing a container without proper type annotations, making it difficult for Psalm to track the contained value type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass MyContainer {\n  private $value;\n\n  public function __construct($value) {\n    $this->value = $value;\n  }\n\n  public function getValue() {\n    return $this->value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping XML Declaration in ArrayToXml Output\nDESCRIPTION: This example shows how to omit the XML declaration when generating XML output using ArrayToXml.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/spatie/array-to-xml/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$root = [\n    'rootElementName' => 'soap:Envelope',\n    '_attributes' => [\n        'xmlns:soap' => 'http://www.w3.org/2003/05/soap-envelope/',\n    ],\n];\n$array = [\n    'soap:Header' => [],\n    'soap:Body' => [\n        'soap:key' => 'soap:value',\n    ],\n];\n$arrayToXml = new ArrayToXml($array, $root);\n\n$result = $arrayToXml->dropXmlDeclaration()->toXml();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnusedMethodCall Error in PHP\nDESCRIPTION: This example shows how Psalm detects unused method return values when using the --find-dead-code option. The class A has a getFoo() method that returns a string, but in the example, the call to getFoo() doesn't capture or use the returned value, triggering the UnusedMethodCall error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedMethodCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfinal class A {\n    private string $foo;\n\n    public function __construct(string $foo) {\n        $this->foo = $foo;\n    }\n\n    public function getFoo() : string {\n        return $this->foo;\n    }\n}\n\n$a = new A(\"hello\");\n$a->getFoo();\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties on Interface Types in PHP\nDESCRIPTION: This example demonstrates the error of trying to access properties on an interface. It defines an interface 'I', a class 'A' that implements 'I' and has a property 'foo', and a function 'bar' that incorrectly tries to access the 'foo' property on an interface parameter.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NoInterfaceProperties.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ninterface I {}\nclass A implements I {\n    /** @var ?string */\n    public $foo;\n}\nfunction bar(I $i) : void {\n    if ($i->foo) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Type Safety Issue When Extending Generic Classes\nDESCRIPTION: Demonstrates how extending the Container class can lead to type safety issues when the child class calls getInstance() with an incompatible type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeGenericInstantiation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T\n * @psalm-consistent-constructor\n */\nclass Container {\n    /**\n     * @var T\n     */\n    public $t;\n\n    /**\n     * @param T $t\n     */\n    public function __construct($t) {\n        $this->t = $t;\n    }\n\n    /**\n     * @template U\n     * @param U $u\n     * @return static<U>\n     */\n    public function getInstance($u) : static\n    {\n        return new static($u);\n    }\n}\n\n/**\n * @extends Container<string>\n */\nclass StringContainer extends Container {}\n\n$c = StringContainer::getInstance(new stdClass());\n// creates StringContainer<stdClass>, clearly invalid\n```\n\n----------------------------------------\n\nTITLE: Defining PSR-7 Response Interface Methods\nDESCRIPTION: This section elucidates methods specific to ResponseInterface, adding functionalities for managing HTTP response status codes and reason phrases, essential for server responses in HTTP protocol.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Interfaces.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getStatusCode()` | Gets the response status code. | |\n| `withStatus($code, $reasonPhrase = '')` | Returns a new response instance with the specified status code and, optionally, reason phrase. | |\n| `getReasonPhrase()` | Gets the response reason phrase associated with the status code. | |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullOperand Error in PHP\nDESCRIPTION: This code snippet demonstrates how a NullOperand error can be triggered in PHP by attempting to concatenate null with a string. The example shows the incorrect usage that leads to this error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullOperand.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\necho null . 'hello';\n```\n\n----------------------------------------\n\nTITLE: Installing PSR-7 Package with Composer\nDESCRIPTION: Installation command for adding the Guzzle PSR-7 package to a PHP project using Composer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require guzzlehttp/psr7\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Private Property Detection in PHP with Psalm\nDESCRIPTION: This example shows a PHP class with two private properties: $foo (which is used in the getFoo method) and $bar (which is never used). When analyzed with Psalm's --find-dead-code flag, it would detect $bar as an unused property while recognizing that $foo is utilized.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string|null */\n    private $foo;\n\n    /** @var int|null */\n    private $bar;\n\n    public function getFoo(): ?string {\n        return $this->foo;\n    }\n}\n\n$a = new A();\necho $a->getFoo();\n```\n\n----------------------------------------\n\nTITLE: Fixing DuplicateEnumCase Error in PHP Enum\nDESCRIPTION: This code snippet demonstrates how to fix the DuplicateEnumCase error by removing or renaming the duplicate cases. In this example, the second 'Open' case is renamed to 'Closed'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateEnumCase.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status \n{\n    case Open;\n    case Closed;\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Pure Enum with Backing Type\nDESCRIPTION: Shows the correct way to implement an enum with a string value by declaring it as a backed enum with string type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: string \n{\n    case Open = \"open\";\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving FQSEN with Context\nDESCRIPTION: Example showing FQSEN resolution using a context object to resolve partial names.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$fqsenResolver = new \\phpDocumentor\\Reflection\\FqsenResolver();\n$type = $fqsenResolver->resolve('Classy::otherFunction()', $context);\n```\n\n----------------------------------------\n\nTITLE: Employee Invalid Usage Example\nDESCRIPTION: Demonstrates the exceptions thrown when invalid values are provided to the Employee constructor.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/webmozart/assert/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnew Employee('foobar');\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be an integer. Got: string\n\nnew Employee(-10);\n// => Webmozart\\Assert\\InvalidArgumentException:\n//    The employee ID must be a positive integer. Got: -10\n```\n\n----------------------------------------\n\nTITLE: Resolving a Promise and Chaining in PHP\nDESCRIPTION: Shows how to resolve a promise with a value which triggers onFulfilled callbacks. This example demonstrates promise chaining where the return value from the first then() callback is passed to the next callback in the chain.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\Promise;\n\n$promise = new Promise();\n$promise\n    ->then(function ($value) {\n        // Return a value and don't break the chain\n        return \"Hello, \" . $value;\n    })\n    // This then is executed after the first then and receives the value\n    // returned from the first then.\n    ->then(function ($value) {\n        echo $value;\n    });\n\n// Resolving the promise triggers the $onFulfilled callbacks and outputs\n// \"Hello, reader.\"\n$promise->resolve('reader.');\n```\n\n----------------------------------------\n\nTITLE: Carbon Installation Usage without Composer\nDESCRIPTION: Example of using Carbon without Composer, showing manual autoloading and basic usage.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nesbot/carbon/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'path-to-Carbon-directory/autoload.php';\n\nuse Carbon\\Carbon;\n\nprintf(\"Now: %s\", Carbon::now());\n```\n\n----------------------------------------\n\nTITLE: Identifying Possibly Unused Properties in PHP with Psalm\nDESCRIPTION: The provided PHP code snippet illustrates a class with two properties. It demonstrates the usage of Psalm's `--find-dead-code` option to detect potentially unused properties. To prevent unnecessary warnings for properties that are part of a public API, one should annotate the class with `@psalm-api`. No additional dependencies are required, but Psalm must be properly configured in the environment. The key parameters involved are the properties declared within the class and their usages. The snippet prints the `foo` property to ensure at least partial use.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUnusedProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string|null */\n    public $foo;\n\n    /** @var int|null */\n    public $bar;\n}\n\n$a = new A();\necho $a->foo;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyFalseReference Error in PHP\nDESCRIPTION: This code snippet illustrates a situation where a PossiblyFalseReference error can occur. It defines a class A with a method bar(), and a function foo() that returns either an instance of A or false. The error is triggered when trying to call the bar() method on the result of foo(), which might be false.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyFalseReference.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    public function bar() : void {}\n}\n\n/** @return A|false */\nfunction foo() {\n    return rand(0, 1) ? new A : false;\n}\n\nfoo()->bar();\n```\n\n----------------------------------------\n\nTITLE: Using RejectedPromise in PHP\nDESCRIPTION: Demonstrates creating and using a RejectedPromise for representing promises that have been rejected.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/promises/README.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Promise\\RejectedPromise;\n\n$promise = new RejectedPromise('Error');\n\n// Rejected callbacks are immediately invoked.\n$promise->then(null, function ($reason) {\n    echo $reason;\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Forbidden Functions in XML\nDESCRIPTION: This XML snippet shows how to specify a list of functions that should be flagged as forbidden during Psalm analysis. This is useful for preventing the use of debugging functions or other functions that should not be present in production code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<forbiddenFunctions>\n  <function name=\"var_dump\" />\n  <function name=\"dd\" />\n</forbiddenFunctions>\n```\n\n----------------------------------------\n\nTITLE: Split Psalm Configuration Using XInclude in XML\nDESCRIPTION: An example of how to split Psalm configuration into multiple files using XInclude tags.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<psalm\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns=\"https://getpsalm.org/schema/config\"\n    xsi:schemaLocation=\"https://getpsalm.org/schema/config vendor/vimeo/psalm/config.xsd\"\n    xmlns:xi=\"http://www.w3.org/2001/XInclude\"\n>\n    <xi:include href=\"files.xml\"/>\n</psalm>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<projectFiles xmlns=\"https://getpsalm.org/schema/config\">\n    <file name=\"Bar.php\" />\n    <file name=\"Bat.php\" />\n</projectFiles>\n```\n\n----------------------------------------\n\nTITLE: PHP 7.2 Polyfill Example\nDESCRIPTION: Example showing the PHP 7.2 sodium_* function usage pattern.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"/path/to/sodium_compat/autoload.php\";\n\n$alice_kp = sodium_crypto_sign_keypair();\n$alice_sk = sodium_crypto_sign_secretkey($alice_kp);\n$alice_pk = sodium_crypto_sign_publickey($alice_kp);\n\n$message = 'This is a test message.';\n$signature = sodium_crypto_sign_detached($message, $alice_sk);\nif (sodium_crypto_sign_verify_detached($signature, $message, $alice_pk)) {\n    echo 'OK', PHP_EOL;\n} else {\n    throw new Exception('Invalid signature');\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Possibly Undefined Variable in PHP\nDESCRIPTION: This PHP code defines a function `foo()` that attempts to echo the value of the variable `$a`. The variable `$a` is only defined within an `if` block, meaning that if the condition `rand(0, 1)` evaluates to false, `$a` will not be defined before the `echo` statement. This can lead to a PHP warning or error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedVariable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : void {\n    if (rand(0, 1)) {\n        $a = 5;\n    }\n    echo $a;\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Guzzle Client in PHP\nDESCRIPTION: Example of creating a new Guzzle HTTP client instance. This snippet shows the basic usage of Guzzle 7.x.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$client = new GuzzleHttp\\Client();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reference Constraint Violation in PHP\nDESCRIPTION: This PHP code defines a function `foo` that takes a string by reference (`&$a`).  The function then attempts to assign an integer (5) to this variable. This violates the type constraint of the function parameter, which expects a string. While PHP may not throw an error immediately, this can lead to unexpected behavior or errors later in the program's execution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ReferenceConstraintViolation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string &$a) {\n    $a = 5;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Using '@psalm-consistent-templates' Annotation\nDESCRIPTION: Second solution using the '@psalm-consistent-templates' annotation to ensure child classes maintain the same generic parameters as the parent class, preserving type safety.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeGenericInstantiation.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T\n * @psalm-consistent-constructor\n * @psalm-consistent-templates\n */\nclass Container {\n    /**\n     * @var T\n     */\n    public $t;\n\n    /**\n     * @param T $t\n     */\n    public function __construct($t) {\n        $this->t = $t;\n    }\n\n    /**\n     * @template U\n     * @param U $u\n     * @return static<U>\n     */\n    public function getInstance($u) : static\n    {\n        return new static($u);\n    }\n}\n\n/**\n * @template T\n * @psalm-extends Container<T>\n */\nclass LazyLoadingContainer extends Container {}\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Using @psalm-consistent-constructor Annotation\nDESCRIPTION: Another solution is to use the @psalm-consistent-constructor annotation, which ensures that any child class constructor must have the same signature as the parent constructor.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeInstantiation.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-consistent-constructor\n */\nclass A {\n    public function getInstance() : self\n    {\n        return new static();\n    }\n}\n\nclass AChild extends A {\n    public function __construct() {\n        // this is fine\n    }\n}\n\nclass BadAChild extends A {\n    public function __construct(string $s) {\n        // this is reported as a violation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Access Level Warnings in PHP Method Overriding\nDESCRIPTION: Demonstrates how to define a method in a child class with more restrictive access levels compared to the parent class, triggering visibility warnings. Requires PHP and two classes to illustrate method accessibility changes. No additional dependencies. The input includes class definitions, and the output is intended to highlight access level warnings. Limitations include language support restricted to PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/OverriddenMethodAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    public function foo() : void {}\n}\nclass B extends A {\n    protected function foo() : void {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Escaping Tainted Data in PHP with Psalm\nDESCRIPTION: Annotation to indicate that a function or method cleanses (escapes) tainted data, making it safe for a specific context. The optional #conditional flag can be used for conditional escaping.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n@psalm-taint-escape <taint-type #conditional>\n```\n\n----------------------------------------\n\nTITLE: Using Tableize Method in PHP\nDESCRIPTION: Shows how to use the tableize method to convert 'ModelName' to 'model_name'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->tableize('ModelName'); // model_name\n```\n\n----------------------------------------\n\nTITLE: Problematic PHP Function with Falsable Return\nDESCRIPTION: Example of a function that could return false from strpos() but declares an int return type, which would cause a type error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/FalsableReturnStatement.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction getCommaPosition(string $a) : int {\n    return strpos($a, ',');\n}\n```\n\n----------------------------------------\n\nTITLE: True Polyfill Usage Example\nDESCRIPTION: Example demonstrating the use of Sodium Compat as a true polyfill for PHP 5.3.0+ without PECL extension.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"/path/to/sodium_compat/autoload.php\";\n\n$alice_kp = \\Sodium\\crypto_sign_keypair();\n$alice_sk = \\Sodium\\crypto_sign_secretkey($alice_kp);\n$alice_pk = \\Sodium\\crypto_sign_publickey($alice_kp);\n\n$message = 'This is a test message.';\n$signature = \\Sodium\\crypto_sign_detached($message, $alice_sk);\nif (\\Sodium\\crypto_sign_verify_detached($signature, $message, $alice_pk)) {\n    echo 'OK', PHP_EOL;\n} else {\n    throw new Exception('Invalid signature');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS SDK Version Configuration in PHP\nDESCRIPTION: Example showing how to configure the AWS SDK to use a specific API version when instantiating a client. This applies to clients with multiple supported API versions, such as CloudFront and DynamoDB.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n`version` option to `2012-05-05` when you instantiate the client\n```\n\n----------------------------------------\n\nTITLE: Running Composer to Create a Plugin Project\nDESCRIPTION: This command initializes a new Psalm plugin project using the provided template. It requires Composer to be installed. Ensure namespaces are updated in relevant files.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/authoring_plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project weirdan/psalm-plugin-skeleton:dev-master your-plugin-name\n```\n\n----------------------------------------\n\nTITLE: Removing Items Caselessly with GuzzleHttp\\Psr7\\Utils::caselessRemove\nDESCRIPTION: This method removes items from an array based on the provided keys, performing the removal in a case-insensitive manner. It takes an iterable of keys and an array of data as input, returning the modified array.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n`public static function caselessRemove(iterable<string> $keys, $keys, array $data): array`\n```\n\n----------------------------------------\n\nTITLE: Using Variable-Specific Typehints in PHP with Psalm\nDESCRIPTION: Demonstrates how to use typehints for specific variables in Psalm, allowing the tool to assume a type for a variable in a particular context.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/typing_in_psalm.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var string $a */\necho strpos($a, 'hello');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Undefined Array Offset Issue in PHP\nDESCRIPTION: Example showing how undefined array offset errors can occur when accessing array keys that may not exist due to conditional initialization.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (rand(0, 1)) {\n    $arr = [\"a\" => 1, \"b\" => 2];\n} else {\n    $arr = [\"a\" => 3];\n}\n\necho $arr[\"b\"];\n```\n\n----------------------------------------\n\nTITLE: Fixed PHP Reference Usage with Temporary Variable\nDESCRIPTION: This code shows how to fix the UnsupportedReferenceUsage issue by introducing a temporary variable to store the array offset, making the reference usage more straightforward for Psalm to analyze.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsupportedReferenceUsage.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @var non-empty-list<int> */\n$bar = [1, 2, 3];\n/** @var non-empty-list<int> */\n$baz = [1, 2, 3];\n\n$offset = $baz[0];\n$foo = &$bar[$offset];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating InvalidDocblockParamName in PHP\nDESCRIPTION: This code snippet shows an example of an InvalidDocblockParamName error. It occurs because the docblock specifies a parameter named `$bar`, but the function definition uses `$barb`.  The error is triggered because the parameter type is `array`. \nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidDocblockParamName.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @param string[] $bar\n */\nfunction foo(array $barb): void {\n    //\n}\n\n```\n\n----------------------------------------\n\nTITLE: Normalizing MS Word Characters in PHP\nDESCRIPTION: Converts smart quotes, ellipsis, and dashes from Windows-1252 to ASCII equivalents. Useful for processing text from Word documents.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nASCII::normalize_msword('„Abcdef…\"'); // '\"Abcdef...\"'\n```\n\n----------------------------------------\n\nTITLE: Enabling Psalm Plugin\nDESCRIPTION: Command to enable an installed Psalm plugin using the psalm-plugin tool. This makes the plugin active for use with Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/using_plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-plugin enable plugin-vendor/plugin-package\n```\n\n----------------------------------------\n\nTITLE: Prepending by using contents as a string - PHP\nDESCRIPTION: This snippet demonstrates how to prepend content using the current contents of the stream and manipulating it as a string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // efabcd\n$contents = 'ef'.$contents;\n$body->rewind();\n$body->write($contents);\n```\n\n----------------------------------------\n\nTITLE: Checking if URI is Relative-Path Reference with GuzzleHttp\\Psr7\\Uri::isRelativePathReference\nDESCRIPTION: This method checks whether the URI is a relative-path reference.  A relative-path reference is a relative reference that does not begin with a slash character. It takes a UriInterface object and returns a boolean.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n`public static function isRelativePathReference(UriInterface $uri): bool`\n```\n\n----------------------------------------\n\nTITLE: Invalid Nullable Return Type Example in PHP\nDESCRIPTION: Example showing a function that declares a string return type but can potentially return null, which violates type safety. The function uses a random condition to either return a string or null, creating a type mismatch with the declared return type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidNullableReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : string {\n    if (rand(0, 1)) {\n        return \"foo\";\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookie with User-Controlled Input in PHP\nDESCRIPTION: Demonstrates a vulnerable method of setting a cookie using unvalidated user input from $_GET superglobal, which can potentially lead to security risks like session fixation\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedCookie.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nsetcookie('authtoken', $_GET['value'], time() + (86400 * 30), '/');\n```\n\n----------------------------------------\n\nTITLE: Using a Variable to Solve PossiblyNullArgument in PHP\nDESCRIPTION: This snippet shows a solution to the previous problem by using a variable to store the result of the method call. This ensures that the same value is used in both the condition and the function call.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullArgument.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$catName = $cat->getName();\nif (is_string($catName) {\n    foo($catName);\n}\nunset($catName);\n```\n\n----------------------------------------\n\nTITLE: PHP Function Call with Missing Required Argument\nDESCRIPTION: Example showing a function call that will generate a TooFewArguments error. The function foo requires one string parameter but is called with no arguments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TooFewArguments.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string $a) : void {}\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Emitting Undefined Variable Error in PHP\nDESCRIPTION: This snippet demonstrates a scenario in PHP where a global variable is accessed without prior definition, resulting in an undefined variable error. No external dependencies are required, as this illustrates native PHP behavior. The key issue is that the variable $a is used without being declared or initialized, leading to an error. The expected output is a notice that indicates the variable is undefined.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedGlobalVariable.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\necho $a;\n\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/recursion-context as a development dependency\nDESCRIPTION: This snippet shows how to install the `sebastian/recursion-context` library as a development-time dependency using Composer. This is useful when the library is only needed during development, such as for running the project's test suite.  Using `--dev` ensures it is only installed in development environments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/recursion-context/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require --dev sebastian/recursion-context\n```\n\n----------------------------------------\n\nTITLE: Redundant String Casting Example in PHP\nDESCRIPTION: This code snippet shows a PHP function that performs a redundant string cast operation. The parameter $s is already declared as string type in the function signature, making the explicit (string) cast unnecessary and redundant.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantCast.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo(string $s) : string {\n    return (string) $s;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Callable Type Syntax in Psalm\nDESCRIPTION: Shows the syntax format for annotating callable types in Psalm. The format supports specifying parameter types (including optional parameters with '=' suffix and spread operators with '...' suffix) and return types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/callable_types.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncallable(Type1, OptionalType2=, SpreadType3...):ReturnType\n```\n\n----------------------------------------\n\nTITLE: Emitting Warnings for Redundant Boolean Comparisons in PHP\nDESCRIPTION: This PHP snippet involves a function that returns a boolean value. It demonstrates two redundant comparisons: one with true and another with false, while the strictBinaryOperands flag is set to true. It checks how unnecessary comparisons are handled when aiming for cleaner code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantIdentityWithTrue.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfunction returnsABool(): bool {\n    return rand(1, 2) === 1;\n}\n\nif (returnsABool() === true) {\n    echo \"hi!\";\n}\n\nif (returnsABool() !== false) {\n    echo \"hi!\";\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MixedAssignment Issue in PHP\nDESCRIPTION: This snippet shows an example of assigning a value from $GLOBALS to an unannotated variable, which can lead to a MixedAssignment issue.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = $GLOBALS['foo'];\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Taint Sink in PHP using Psalm Annotations\nDESCRIPTION: This example demonstrates how to define a taint sink in a PDOWrapper class's exec method using the @psalm-taint-sink annotation. This prevents tainted SQL from being executed, helping to prevent SQL injection attacks.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/custom_taint_sinks.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass PDOWrapper {\n    /**\n     * @psalm-taint-sink sql $sql\n     */\n    public function exec(string $sql) : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP Code Coverage\nDESCRIPTION: Example implementation showing how to set up and use code coverage analysis in PHP. Demonstrates creating a filter, initializing coverage tracking, and generating an HTML report.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-code-coverage/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\nuse SebastianBergmann\\CodeCoverage\\Filter;\nuse SebastianBergmann\\CodeCoverage\\Driver\\Selector;\nuse SebastianBergmann\\CodeCoverage\\CodeCoverage;\nuse SebastianBergmann\\CodeCoverage\\Report\\Html\\Facade as HtmlReport;\n\n$filter = new Filter;\n$filter->includeDirectory('/path/to/directory');\n\n$coverage = new CodeCoverage(\n    (new Selector)->forLineCoverage($filter),\n    $filter\n);\n\n$coverage->start('<name of test>');\n\n// ...\n\n$coverage->stop();\n\n\n(new HtmlReport)->process($coverage, '/tmp/code-coverage-report');\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Class Constant Options in PHP with Psalm\nDESCRIPTION: Shows how to use wildcards in Psalm annotations to specify multiple class constants with a common prefix as allowed values for function parameters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/typing_in_psalm.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A {\n  const STATUS_FOO = 'foo';\n  const STATUS_BAR = 'bar';\n}\n\n/**\n * @param A::STATUS_* $s\n */\nfunction foo(string $s) : string {\n  switch ($s) {\n    case A::STATUS_FOO:\n      return 'hello';\n\n    default:\n      // any other status\n      return 'goodbye';\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Another Function After 'if' Statement in PHP\nDESCRIPTION: This example shows another common problem case where another function is called after the 'if' statement. This can fail because Psalm cannot determine if the other function modifies the object being checked.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullArgument.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (is_string($cat->getName()) {\n    changeCat();\n    foo($cat->getName());\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a Non-Static Method Statically in PHP\nDESCRIPTION: This code demonstrates an error pattern where a non-static method (foo) is incorrectly called statically from within a static method (bar) using the self:: keyword. This will generate a runtime warning in PHP as non-static methods require an instance context.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NonStaticSelfCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo(): void {}\n\n    public static function bar(): void {\n        self::foo();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DocblockTypeContradiction in PHP\nDESCRIPTION: This code snippet shows a function with a docblock that specifies a string parameter, but includes a conditional check for null. This contradiction between the docblock and the runtime check is what triggers the DocblockTypeContradiction issue.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DocblockTypeContradiction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @param string $s\n *\n * @return void\n */\nfunction foo($s) {\n    if ($s === null) {\n        throw new \\Exception('Bad input');\n    }\n\n    echo $s;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnusedFunctionCall in PHP\nDESCRIPTION: This code snippet shows an example of an unused function call that would trigger the UnusedFunctionCall issue in Psalm. The strlen(\"goodbye\") call's return value is not used, which is detected when the --find-dead-code option is enabled.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = strlen(\"hello\");\nstrlen(\"goodbye\"); // unused\necho $a;\n```\n\n----------------------------------------\n\nTITLE: Installing Psalm Plugin via Composer\nDESCRIPTION: Command to install a Psalm plugin using Composer. This adds the plugin as a development dependency to your project.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/using_plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev <plugin-vendor/plugin-package>\n```\n\n----------------------------------------\n\nTITLE: Setting Alias via Setter Method in PHP GraphQL Query\nDESCRIPTION: Shows an alternative way to set an alias for a GraphQL query using the setter method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setAlias('CompanyAlias')\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Configuring Xdebug Handler Options in PHP\nDESCRIPTION: Shows two different configuration approaches using standard and persistent options. The standard approach sets specific options while persistent modifies environment variables.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$options = $config->useStandard();\n$options = $config->usePersistent();\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable Properties in PHP\nDESCRIPTION: This code snippet defines a PHP class with a nullable string property and a function that attempts to access it. The class shows how to declare properties that might be null, and the function demonstrates how to handle such cases when they are accessed. Any dependencies are only the basic PHP language features. The expected behavior during execution will depend on the state of the object, potentially producing a null output if the object is null.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var ?string */\n    public $foo;\n}\nfunction foo(?A $a) : void {\n    echo $a->foo;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Region Name from AWS Client in PHP\nDESCRIPTION: This snippet describes how to retrieve the region name a client is configured to use by calling `$client->getRegion()`. This can be useful for debugging and ensuring the client is operating in the expected region.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n\"`$client->getRegion()`\"\n```\n\n----------------------------------------\n\nTITLE: Mismatching Docblock Return Type\nDESCRIPTION: This PHP snippet demonstrates a scenario where the `@return` annotation in the function's docblock specifies type `B`, but the function `foo`'s return type hint is `A`.  This mismatch triggers the `MismatchingDocblockReturnType` emission. It showcases a class `A` and `B` and a function `foo` with return type `A` but returns a new instance of `A`.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MismatchingDocblockReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B {}\n/**\n * @return B // emitted here\n */\nfunction foo() : A {\n    return new A();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating value-of Utility Type in PHP with Psalm\nDESCRIPTION: This snippet demonstrates the usage of the value-of utility type with a template parameter to return an array of values from an input array.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of array\n * @param T $array\n * @return value-of<T>[]\n */\nfunction getValues($array) {\n    return array_values($array);\n}\n```\n\n----------------------------------------\n\nTITLE: Template Trait Usage in PHP\nDESCRIPTION: Demonstrates how to use a templated trait with a specific type using @use annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T\n */\ntrait MyTrait {}\n\nclass Foo {\n    /**\n     * @use MyTrait<int>\n     */\n    use MyTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: Static Access to S3 Client (PHP)\nDESCRIPTION: This snippet shows the usage of facade classes for static access to clients, exemplified by `S3::putObject([...])`. This provides a more concise way to interact with AWS services for simple operations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n\"S3::putObject([...])\"\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Magic Method Calls in PHP\nDESCRIPTION: This PHP snippet demonstrates the use of the __call magic method in class A, which is designed to handle calls to undefined or non-existent methods. It includes an annotation for a method, assisting in method declaration. When an undefined magic method is invoked, __call intercepts the call and returns a default string. This setup uses no external dependencies and expects undefined method names as inputs, providing a string as output.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedMagicMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * @method bar():string\n */\nclass A {\n    public function __call(string $name, array $args) {\n        return \"cool\";\n    }\n}\n(new A)->foo();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Method Detection in PHP Class\nDESCRIPTION: Shows an example of a class with two methods where one method (bar) is potentially unused. The code illustrates how Psalm's --find-dead-code feature identifies methods that have no detected calls. Methods that are intentionally part of the public API can be excluded from this warning using @psalm-api annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUnusedMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo() : void {}\n    public function bar() : void {}\n}\n(new A)->foo();\n```\n\n----------------------------------------\n\nTITLE: Getting Restart Settings from XdebugHandler\nDESCRIPTION: Static method to retrieve the settings used for the process restart, which can be utilized with PHP sub-processes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$settings = XdebugHandler::getRestartSettings();\n/**\n * $settings: array (if the current process was restarted,\n * or called with the settings from a previous restart), or null\n *\n *    'tmpIni'      => the temporary ini file used in the restart (string)\n *    'scannedInis' => if there were any scanned inis (bool)\n *    'scanDir'     => the original PHP_INI_SCAN_DIR value (false|string)\n *    'phprc'       => the original PHPRC value (false|string)\n *    'inis'        => the original inis from getAllIniFiles (array)\n *    'skipped'     => the skipped version from getSkippedVersion (string)\n */\n```\n\n----------------------------------------\n\nTITLE: Fixing Exception Class Extension in PHP\nDESCRIPTION: This change ensures that the `SebastianBergmann\\RecursionContext\\Exception` now properly extends `\\Throwable`, enhancing error handling in the component. It had been identified as a necessary fix in version 4.0.4.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/recursion-context/ChangeLog.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"SebastianBergmann\\RecursionContext\\Exception\" now correctly extends \"\\Throwable\"\n```\n\n----------------------------------------\n\nTITLE: Example of Forbidden PHP Function Usage\nDESCRIPTION: Demonstrates a var_dump() call that would trigger Psalm's ForbiddenCode warning due to security concerns.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ForbiddenCode.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nvar_dump(\"bah\");\n```\n\n----------------------------------------\n\nTITLE: Null Check Assertions\nDESCRIPTION: Demonstrates how to use @psalm-assert-if-true for null checking.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/adding_assertions.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @psalm-assert-if-true null $value\n */\nfunction isNull($value): bool {\n  return ($value === null);\n}\n```\n\n----------------------------------------\n\nTITLE: Using JWKs for JWT Decoding in PHP\nDESCRIPTION: Demonstrates how to use JSON Web Key Sets (JWKS) for JWT decoding.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Firebase\\JWT\\JWK;\nuse Firebase\\JWT\\JWT;\n\n$jwks = ['keys' => []];\n\nJWT::decode($payload, JWK::parseKeySet($jwks));\n```\n\n----------------------------------------\n\nTITLE: Using T[K] Utility Type in PHP with Psalm\nDESCRIPTION: This snippet demonstrates how to use the T[K] utility type to get the value corresponding to a specified key in an array, with type inference.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T as array\n * @template TKey as string\n * @param T $arr\n * @param TKey $k\n * @return T[TKey]\n */\nfunction a(array $arr, string $k): mixed {\n  assert(isset($arr[$k]));\n  return $arr[$k];\n}\n\n$a = a(['test' => 123], 'test');\n/** @psalm-trace $a */; // 123\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operator to Fix PossiblyFalseOperand in PHP\nDESCRIPTION: This snippet shows an alternative way to fix the PossiblyFalseOperand error using a ternary operator. It provides a concise solution that replaces false with an empty string if no comma is found.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyFalseOperand.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction echoCommaPosition(string $str) : void {\n    echo 'The comma is located at ' . (strpos($str, ',') ?: ''); \n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullPropertyAssignment Error in PHP\nDESCRIPTION: This code snippet illustrates how a NullPropertyAssignment error occurs in PHP. It attempts to set a property 'foo' on a null value, which is not allowed and will result in an error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = null;\n$a->foo = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MissingTemplateParam Error with ArrayAccess Interface in PHP\nDESCRIPTION: This code snippet demonstrates the MissingTemplateParam error by showing a class that implements ArrayAccess but doesn't properly extend all required template parameters. The annotation @template-implements ArrayAccess<int> is incomplete as ArrayAccess requires two type parameters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingTemplateParam.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template-implements ArrayAccess<int>\n */\nclass SomeIterator implements ArrayAccess\n{\n    public function offsetSet($offset, $value) {\n    }\n\n    public function offsetExists($offset) {\n        return false;\n    }\n\n    public function offsetUnset($offset) {\n    }\n\n    public function offsetGet($offset) {\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Class with Attribute in PHP\nDESCRIPTION: The code snippet defines a PHP class named Video using a Pure attribute imported from the Foo\\Bar namespace. Attributes provide metadata about classes, and this snippet showcases how to associate a class with additional semantic information using attributes. Ensure the Foo\\Bar namespace and the Pure attribute are available in the project dependencies.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedAttributeClass.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Foo\\Bar\\Pure;\n\n#[Pure]\nclass Video {}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extensions in psalm.xml\nDESCRIPTION: XML configuration to register custom FileChecker implementations for specific file extensions in psalm.xml.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/checking_non_php_files.md#2025-04-21_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<fileExtensions>\n    <extension name=\".php\" />\n    <extension name=\".phpt\" checker=\"path/to/TemplateChecker.php\" />\n</fileExtensions>\n```\n\n----------------------------------------\n\nTITLE: Creating DocBlock Factory Instance\nDESCRIPTION: Demonstrates how to instantiate a DocBlockFactory using the createInstance factory method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/reflection-docblock/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$factory  = \\phpDocumentor\\Reflection\\DocBlockFactory::createInstance();\n```\n\n----------------------------------------\n\nTITLE: Template Covariance Problem Example in PHP\nDESCRIPTION: Example showing how passing a Collection<Dog> to a function expecting Collection<Animal> can lead to type safety issues if the collection is modified.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Animal {}\nclass Dog extends Animal {}\nclass Cat extends Animal {}\n\n/**\n * @template T\n */\nclass Collection {\n    /**\n     * @var array<int, T>\n     */\n    public array $list;\n\n    /**\n     * @param array<int, T> $list\n     */\n    public function __construct(array $list) {\n        $this->list = $list;\n    }\n\n    /**\n     * @param T $t\n     */\n    public function add($t) : void {\n        $this->list[] = $t;\n    }\n}\n\n/**\n * @param Collection<Animal> $collection\n */\nfunction addAnimal(Collection $collection) : void {\n    $collection->add(new Cat());\n}\n\n/**\n * @param Collection<Dog> $dog_collection\n */\nfunction takesDogList(Collection $dog_collection) : void {\n    addAnimal($dog_collection);\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Integer Parameter Default in PHP\nDESCRIPTION: Example demonstrating an invalid parameter default where a boolean false is assigned as default to an integer parameter, causing a type mismatch error in Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidParamDefault.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(int $i = false) : void {}\n```\n\n----------------------------------------\n\nTITLE: Emitting Invalid Array Access Error in PHP\nDESCRIPTION: This snippet demonstrates the emission of an error when attempting to access an array offset of a non-array value. It attempts to access the first element of an integer, which leads to an invalid operation. The snippet serves to illustrate the nature of the error that arises from such misuse of array access.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidArrayAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = 5;\necho $arr[0];\n\n```\n\n----------------------------------------\n\nTITLE: PHP Dead Code Detection Example\nDESCRIPTION: Example showing how Psalm's type system can detect unreachable code through precise type analysis.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/plugins_type_system.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$first = firstChar(\"sdf\");\nif (true === $first) {\n  echo \"This is actually dead code\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating key-of Utility Type in PHP with Psalm\nDESCRIPTION: This snippet shows how to use the key-of utility type with a template parameter to return an array of keys from an input array.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of array\n * @param T $array\n * @return list<key-of<T>>\n */\nfunction getKeys($array) {\n    return array_keys($array);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting array of values from a header - PHP\nDESCRIPTION: This snippet retrieves the array of values from a specified header in both the request and response.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// getting value from request headers\n$request->getHeader('Content-Type'); // will return: [\"text/html\", \"charset=UTF-8\"]\n// getting value from response headers\n$response->getHeader('My-Custom-Header'); // will return:  [\"My Custom Message\",  \"The second message\"]\n```\n\n----------------------------------------\n\nTITLE: Type-Exact Checking with @psalm-check-type-exact\nDESCRIPTION: Shows how to verify if a variable matches a specific type using the exact type checker annotation. This example demonstrates checking if a variable is of type 'int'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/CheckType.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @psalm-check-type-exact $x = int */\n$x = 2; // Checked variable $x = int does not match $x = 2\n```\n\n----------------------------------------\n\nTITLE: Vulnerable PHP Echo Statement with JavaScript Integration\nDESCRIPTION: Example of a vulnerable implementation where user input from GET parameter is insufficiently sanitized before being embedded in JavaScript code. The strip_tags function alone doesn't prevent quote-based XSS attacks.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedTextWithQuotes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$param = strip_tags($_GET['param']);\n?>\n\n<script>\n    console.log('<?=$param?>')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Protected Method Example - PHP\nDESCRIPTION: Example showing incorrect usage that triggers an InaccessibleMethod error by attempting to access a protected method 'foo()' directly from outside the class scope. The protected method is only accessible within the class and its descendants.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InaccessibleMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    protected function foo() : void {}\n}\necho (new A)->foo();\n```\n\n----------------------------------------\n\nTITLE: InvalidReturnType Fix Example\nDESCRIPTION: Shows how Psalter corrects incorrect return types in both docblocks and type hints\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/fixing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @return int\n */\nfunction foo() {\n  return \"hello\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @return string\n */\nfunction foo() {\n  return \"hello\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo() : int {\n  return \"hello\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo() : string {\n  return \"hello\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MethodSignatureMismatch Error in PHP Inheritance\nDESCRIPTION: This code snippet illustrates a MethodSignatureMismatch error in PHP. Class B extends class A, but the foo() method in class B has a different parameter type (string) compared to the foo() method in class A (int), which causes the error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MethodSignatureMismatch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo(int $i) : void {}\n}\nclass B extends A {\n    public function foo(string $i) : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Return Type Implementation in PHP Class Inheritance\nDESCRIPTION: Shows the correct implementation following Liskov substitution principle. Parent class method includes both possible return types (bool|string) while child class maintains specific return type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImplementedReturnTypeMismatch.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @return bool|string */\n    public function foo() {\n        return true;\n    }\n}\nclass B extends A {\n    /** @return string */\n    public function foo()  {\n        return \"hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Psalm Plugins\nDESCRIPTION: Command to show a list of all local Psalm plugins, both enabled and disabled, using the psalm-plugin tool.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/using_plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-plugin show\n```\n\n----------------------------------------\n\nTITLE: Mutations with Variables in PHP\nDESCRIPTION: Illustrates how to use variables within GraphQL mutations, similar to queries, allowing dynamic input to the GraphQL server. This code snippet demonstrates creating and running a mutation with variable inputs.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$mutation = (new Mutation('createCompany'))\n    ->setVariables([new Variable('company', 'CompanyInputObject', true)])\n    ->setArguments(['companyObject' => '$company']);\n\n$variables = ['company' => ['name' => 'Tech Company', 'type' => 'Testing', 'size' => 'Medium']];\n$client->runQuery(\n    $mutation, true, $variables\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nmutation($company: CompanyInputObject!) {\n  createCompany(companyObject: $company)\n}\n{\"company\":{\"name\":\"Tech Company\",\"type\":\"Testing\",\"size\":\"Medium\"}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class-String Type Annotations in PHP\nDESCRIPTION: This code snippet illustrates the use of class-string type annotations in PHP, showing how to specify and enforce class types and their subclasses as parameters. It demonstrates the difference between using class-string<Type> and Type::class annotations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/value_types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A {}\nclass AChild extends A {}\nclass B {}\nclass BChild extends B {}\n\n/**\n * @param class-string<A>|class-string<B> $s\n */\nfunction foo(string $s) : void {}\n\n/**\n * @param A::class|B::class $s\n */\nfunction bar(string $s) : void {}\n\nfoo(A::class); // works\nfoo(AChild::class); // works\nfoo(B::class); // works\nfoo(BChild::class); // works\nbar(A::class); // works\nbar(AChild::class); // fails\nbar(B::class); // works\nbar(BChild::class); // fails\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Named Parameter Call Failure\nDESCRIPTION: Shows how calling a method with named parameters can result in a fatal error when parameter names do not match the original method signature\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParamNameMismatch.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction callFoo(A $a) {\n    $a->foo(str: \"hello\");\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Stream Seeking with NoSeekStream\nDESCRIPTION: Shows how to wrap any stream with NoSeekStream to disable seeking functionality, enforcing sequential reading.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n$original = Psr7\\Utils::streamFor('foo');\n$noSeek = new Psr7\\NoSeekStream($original);\n\necho $noSeek->read(3);\n// foo\nvar_export($noSeek->isSeekable());\n// false\n$noSeek->seek(0);\nvar_export($noSeek->read(3));\n// NULL\n```\n\n----------------------------------------\n\nTITLE: Using class-string-map Utility Type in PHP with Psalm\nDESCRIPTION: This example demonstrates the usage of class-string-map to create a map of class strings to their instances, allowing for type-safe retrieval of objects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-consistent-constructor\n */\nclass Foo {}\n\n/**\n * @psalm-consistent-constructor\n */\nclass Bar extends Foo {}\n\nclass A {\n  /** @var class-string-map<T as Foo, T> */\n  private static array $map = [];\n\n  /**\n   * @template U as Foo\n   * @param class-string<U> $class\n   * @return U\n   */\n  public static function get(string $class) : Foo {\n    if (isset(self::$map[$class])) {\n      return self::$map[$class];\n    }\n\n    self::$map[$class] = new $class();\n    return self::$map[$class];\n  }\n}\n\n$foo = A::get(Foo::class);\n$bar = A::get(Bar::class);\n\n/** @psalm-trace $foo */; // Foo\n/** @psalm-trace $bar */; // Bar\n```\n\n----------------------------------------\n\nTITLE: Defining Duplicate Methods in PHP Class\nDESCRIPTION: Example of an invalid PHP class definition where a method named 'foo' is defined twice. This demonstrates a code pattern that would trigger a duplicate method error during compilation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo() {}\n    public function foo() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Taint Graph Visualization with Psalm and DOT\nDESCRIPTION: Commands for generating and converting a taint analysis graph visualization using Psalm and the DOT language\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npsalm --taint-analysis --dump-taint-graph=taints.dot\ndot -Tsvg -o taints.svg taints.dot\n```\n\n----------------------------------------\n\nTITLE: Creating Context from Reflector\nDESCRIPTION: Example showing context creation using ContextFactory with a Reflector object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$contextFactory = new \\phpDocumentor\\Reflection\\Types\\ContextFactory();\n$context = $contextFactory->createFromReflector(new ReflectionMethod('\\My\\Example\\Classy', '__construct'));\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Data Example\nDESCRIPTION: Sample data structure being validated against the defined schema.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'processRefund' => true,\n    'refundAmount' => 17,\n];\n\n$normalized = $processor->process($schema, $data); // OK, it passes\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MixedArgumentTypeCoercion with Array Parameters in PHP\nDESCRIPTION: This snippet shows a scenario where Psalm may emit a MixedArgumentTypeCoercion error. The function 'foo' accepts an array and passes it to 'takesStringArray', which expects an array of strings. Psalm cannot guarantee that the array passed to 'foo' contains only strings.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedArgumentTypeCoercion.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(array $a) : void {\n    takesStringArray($a);\n}\n\n/** @param string[] $a */\nfunction takesStringArray(array $a) : void {}\n```\n\n----------------------------------------\n\nTITLE: Example PHP code with implode parameters error\nDESCRIPTION: A PHP code snippet demonstrating incorrect parameter order in an implode function call that Psalm would flag as an error. The example shows passing an array as the first parameter when a string is expected.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$a = ['foo', 'bar'];\necho implode($a, ' ');\n```\n\n----------------------------------------\n\nTITLE: Initializing Parent and Child Classes with Parameter Mismatch\nDESCRIPTION: Demonstrates a PHP class inheritance scenario where child method parameter names differ from the parent method, potentially causing named parameter call issues\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParamNameMismatch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo(string $str, bool $b = false) : void {}\n}\n\nclass AChild extends A {\n    public function foo(string $string, bool $b = false) : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Object Properties in Psalm (PHP)\nDESCRIPTION: Shows how to denote optional properties in object type annotations using Psalm. The '?' suffix indicates that the 'optional' property is not required.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/object_types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @param object{optional?: string} */\n```\n\n----------------------------------------\n\nTITLE: VSCode XDebug Configuration\nDESCRIPTION: Launch configuration for debugging PHP with XDebug in VSCode\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docker/local/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"configurations\": [\n    {\n        \"name\": \"Listen for XDebug on Docker\",\n        \"type\": \"php\",\n        \"request\": \"launch\",\n        \"port\": 9000,\n        \"hostname\": \"0.0.0.0\",\n        \"stopOnEntry\": true,\n        \"pathMappings\": {\n            \"/var/www/webpagetest\": \"${workspaceFolder}\" \n    },\n    \"log\": true\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating IfThisIsMismatch Error with Generic Class in PHP\nDESCRIPTION: Shows how @psalm-if-this-is annotation validates generic type parameters and throws an IfThisIsMismatch error when the actual type doesn't match the expected type. The example uses a generic class 'a' with a type parameter T and demonstrates both valid and invalid usage.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/IfThisIsMismatch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T\n */\nclass a {\n    /**\n     * @var T\n     */\n    private $data;\n    /**\n     * @param T $data\n     */\n    public function __construct($data) {\n        $this->data = $data;\n    }\n    /**\n     * @psalm-if-this-is a<int>\n     */\n    public function test(): void {\n    }\n}\n\n$i = new a(123);\n$i->test();\n\n$i = new a(\"test\");\n// IfThisIsMismatch - Class is not a<int> as required by psalm-if-this-is\n$i->test();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Problem When Extending the Class\nDESCRIPTION: This example illustrates the fatal error that occurs when a child class with a modified constructor signature tries to use the parent's getInstance method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeInstantiation.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function getInstance() : self\n    {\n        return new static();\n    }\n}\n\nclass AChild extends A {\n    public function __construct(string $some_required_param) {}\n}\n\nAChild::getInstance(); // fatal error\n```\n\n----------------------------------------\n\nTITLE: Using ReplaceFilter for Element Replacement in DeepCopy PHP\nDESCRIPTION: Shows how to use ReplaceFilter to replace entire elements during copying.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\TypeFilter\\ReplaceFilter;\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\n\n$copier = new DeepCopy();\n$callback = function (MyClass $myClass) {\n  return get_class($myClass);\n};\n$copier->addTypeFilter(new ReplaceFilter($callback), new TypeMatcher('MyClass'));\n\n$copy = $copier->copy([new MyClass, 'some string', new MyClass]);\n\n// $copy will contain ['MyClass', 'some string', 'MyClass']\n```\n\n----------------------------------------\n\nTITLE: TTI Calculation Rules\nDESCRIPTION: Defines the calculation rules for both Time to Consistently Interactive and Time to First CPU Idle metrics, including interactive window definition of 50ms threshold over 5 second periods.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Metrics/TimeToInteractive.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Interactive Window\nThe browser's main thread is considered \"interactive\" when it is not blocked for more than **50ms** by any single task so it will be able to respond to user input within 50ms.  An interactive window is a period of **at least 5 seconds** where there are no main-thread tasks that take more than 50ms.\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests\nDESCRIPTION: Command to run PHPUnit tests using the version installed via Composer dependencies.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ ./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DuplicateEnumCase Error in PHP Enum\nDESCRIPTION: This code snippet shows an example of a PHP enum with duplicate cases, which triggers the DuplicateEnumCase error. The enum 'Status' has two identical cases named 'Open'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateEnumCase.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status \n{\n    case Open;\n    case Open;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe HTML Echo in PHP\nDESCRIPTION: Example showing unsafe handling of user input that could lead to XSS vulnerability. The code directly echoes user input from GET parameter without sanitization, which is a security risk.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedHtml.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$name = $_GET[\"name\"];\n\nprintName($name);\n\nfunction printName(string $name) {\n    echo $name;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Forbidden Functions in Psalm XML\nDESCRIPTION: Shows how to configure custom forbidden functions in psalm.xml configuration file. This example adds 'dd' and 'var_dump' to the list of forbidden functions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ForbiddenCode.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<psalm>\n    <!-- other configs -->\n\n    <forbiddenFunctions>\n        <function name=\"dd\"/>\n        <function name=\"var_dump\"/>\n    </forbiddenFunctions>\n</psalm>\n```\n\n----------------------------------------\n\nTITLE: Creating Context from Namespace\nDESCRIPTION: Example showing context creation using ContextFactory with namespace and file contents.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$contextFactory = new \\phpDocumentor\\Reflection\\Types\\ContextFactory();\n$context = $contextFactory->createForNamespace('\\My\\Example', file_get_contents('My/Example/Classy.php'));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NoValue with exit() in PHP\nDESCRIPTION: Shows how a function marked with @return never that calls exit() leads to a NoValue scenario. Psalm identifies that the variable $a will never contain any type because foo() won't return normally.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NoValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @return never\n */\nfunction foo() : void {\n    exit();\n}\n\n$a = foo(); // Psalm knows $a will never contain any type because foo() won't return\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URI Relativization in PHP with Guzzle PSR-7\nDESCRIPTION: Example showing how to use UriResolver::relativize() to convert absolute URIs to relative references based on a base URI. This is useful for generating relative links in documents or creating self-contained downloadable archives.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$base = new Uri('http://example.com/a/b/');\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/c'));  // prints 'c'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/x/y'));  // prints '../x/y'.\necho UriResolver::relativize($base, new Uri('http://example.com/a/b/?q')); // prints '?q'.\necho UriResolver::relativize($base, new Uri('http://example.org/a/b/'));   // prints '//example.org/a/b/'.\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/environment with Composer\nDESCRIPTION: This command adds the sebastian/environment library as a project dependency using Composer. It ensures that the library is available for the project's runtime environment, enabling runtime-specific execution paths.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/environment/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"composer require sebastian/environment\"\n```\n\n----------------------------------------\n\nTITLE: Installing Type Resolver with Composer\nDESCRIPTION: Command to install the type-resolver library using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require phpdocumentor/type-resolver\n```\n\n----------------------------------------\n\nTITLE: Installing php-invoker with Composer\nDESCRIPTION: This command adds php-invoker as a local, per-project dependency using Composer. This means the library will be installed in the project's vendor directory and can be used by the project's code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-invoker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require phpunit/php-invoker\n```\n\n----------------------------------------\n\nTITLE: Checking Skipped Xdebug Version\nDESCRIPTION: Static method to retrieve the version of Xdebug that was skipped during the restart process.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$version = XdebugHandler::getSkippedVersion();\n# $version: '3.1.1' (for example), or an empty string\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-ignore-nullable-return to Handle Nullable Returns in PHP\nDESCRIPTION: Shows how to use @psalm-ignore-nullable-return to tell Psalm to ignore the possibility of a function returning null. Useful for edge cases where you have high confidence in non-null values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Foo {}\nfunction takesFoo(Foo $f): void {}\n\n/** @psalm-ignore-nullable-return */\nfunction getFoo(): ?Foo {\n  return rand(0, 10000) > 1 ? new Foo() : null;\n}\n\ntakesFoo(getFoo());\n```\n\n----------------------------------------\n\nTITLE: Accessing Array with Nullable Integer Parameter in PHP\nDESCRIPTION: Example function that demonstrates the PossiblyNullArrayOffset issue by attempting to access an array element using a nullable integer parameter. The function accepts an optional integer parameter and tries to use it as an array index, which could potentially cause an error if null is passed.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfunction foo(?int $a) : void {\n    echo [1, 2, 3, 4][$a];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating InvalidFunctionCall Error in PHP\nDESCRIPTION: This code example shows how an InvalidFunctionCall error is triggered by attempting to call a numeric variable as a function. The code assigns 5 to variable $a and then incorrectly tries to execute it as a function call.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = 5;\n$b = $a();\n```\n\n----------------------------------------\n\nTITLE: PHP Class Inheritance Example\nDESCRIPTION: Example showing inheritance and return type specifications in PHP classes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass StandardCar {\n    /**\n     * @return list{'motor', 'brakes', 'wheels'}\n     */\n    public function getSystems(): array {\n        return ['motor', 'brakes', 'wheels'];\n    }\n}\n\nclass PremiumCar extends StandardCar {\n    /**\n     * @return list{'motor', 'brakes', 'wheels', 'rear parking sensor'}\n     */\n    public function getSystems(): array {\n        return ['motor', 'brakes', 'wheels', 'rear parking sensor'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Class and Interface Mixed Inheritance Ambiguity in PHP\nDESCRIPTION: Shows ambiguous constant inheritance when a class extends another class and implements an interface, both defining the same constant. Class Baz inherits CONSTANT from both the Bar class and Foo interface.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/AmbiguousConstantInheritance.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ninterface Foo\n{\n    /** @var non-empty-string */\n    public const CONSTANT='foo';\n}\n\nclass Bar\n{\n    /** @var non-empty-string */\n    public const CONSTANT='bar';\n}\n\nclass Baz extends Bar implements Foo {}\n```\n\n----------------------------------------\n\nTITLE: Behavior of SebastianBergmann\\Version::getVersion() Method\nDESCRIPTION: This section outlines the behavior of the getVersion() method in the SebastianBergmann\\Version class based on the input parameters and repository status. It details how the output varies depending on the format of the release and the Git repository status.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/version/README.md#2025-04-21_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Generic Instantiation in PHP\nDESCRIPTION: Example showing a generic Container class with the potential for type safety issues due to the use of 'new static' in a method that returns a new instance.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeGenericInstantiation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T\n * @psalm-consistent-constructor\n */\nclass Container {\n    /**\n     * @var T\n     */\n    public $t;\n\n    /**\n     * @param T $t\n     */\n    public function __construct($t) {\n        $this->t = $t;\n    }\n\n    /**\n     * @template U\n     * @param U $u\n     * @return static<U>\n     */\n    public function getInstance($u) : static\n    {\n        return new static($u);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PHP Templates as a Workaround for NonInvariantDocblockPropertyType\nDESCRIPTION: Shows how to use PHP templates to properly handle property type differences between parent and child classes, maintaining type safety through the inheritance chain.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NonInvariantDocblockPropertyType.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T of string|null\n */\nabstract class A {\n    /** @var T */\n    public $foo = 'hello';\n}\n\n/**\n * @extends A<string>\n */\nclass AChild extends A {\n    /** @var string */\n    public $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MissingDependency Error in PHP\nDESCRIPTION: This code snippet illustrates how a MissingDependency error can occur when extending a non-existent class. It also shows how to suppress this error using the @psalm-suppress annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingDependency.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-suppress UndefinedClass\n */\nclass A extends B {}\n\n$a = new A();\n```\n\n----------------------------------------\n\nTITLE: Installing league/commonmark via Composer\nDESCRIPTION: Command to install the league/commonmark package using Composer package manager. Requires PHP 7.4+ with mbstring extension.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require league/commonmark\n```\n\n----------------------------------------\n\nTITLE: Kernel Interface Methods\nDESCRIPTION: Core kernel interface methods that have been deprecated or removed across versions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-kernel/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nKernel::init()\nKernel::isClassInActiveBundle()\nKernel::getRootDir()\nKernel::getEnvParameters()\nKernel::getProjectDir()\n```\n\n----------------------------------------\n\nTITLE: Variadic Function Arguments Causing Duplicate Keys\nDESCRIPTION: Example demonstrating how variadic arguments in PHP functions can lead to duplicate array keys when @no-named-arguments is not specified.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateArrayKey.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo($bar, ...$baz): array\n{\n    return [$bar, ...$baz]; // $baz is array<array-key, mixed> since it can have named arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyFalseOperand Error in PHP\nDESCRIPTION: This snippet shows a function that may cause a PossiblyFalseOperand error by directly using the result of strpos() in a string concatenation, without checking if it returned false.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyFalseOperand.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction echoCommaPosition(string $str) : void {\n    echo 'The comma is located at ' . strpos($str, ','); \n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Custom Plugin Issues in Psalm Configuration\nDESCRIPTION: This XML snippet outlines how to suppress custom issues emitted by plugins within the Psalm configuration. Issues are suppressed within specific directories or files.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/authoring_plugins.md#2025-04-21_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<PluginIssue name=\"NoFloatAssignment\">\n    <errorLevel type=\"suppress\">\n        <directory name=\"tests\" />\n    </errorLevel>\n</PluginIssue>\n```\n\n----------------------------------------\n\nTITLE: Validating String Length with Maximum Constraint in PHP\nDESCRIPTION: This snippet utilizes the Expect library to enforce a constraint that validates a string's length, ensuring it does not exceed 20 characters. The Expect::string()->max(20) method establishes this requirement, which can be useful in scenarios where input length must be controlled.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/schema/readme.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// string, maximum 20 characters\nExpect::string()->max(20);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullArrayAccess Exception in PHP\nDESCRIPTION: This code snippet illustrates how a NullArrayAccess exception is triggered by attempting to access an array index on a null variable. It initializes a variable as null and then tries to echo the first element of this null 'array', which results in the exception.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullArrayAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = null;\necho $arr[0];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Duplicate Constants in PHP Class\nDESCRIPTION: This code example shows an invalid PHP class definition where the same constant 'A' is declared twice with different values. This will cause a compilation error as PHP does not allow duplicate constant declarations within the same class scope.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateConstant.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass C {\n    public const A = 1;\n    public const A = 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Annotation References in Interfaces\nDESCRIPTION: This snippet updates the return annotation references in interfaces from `@return self` to `@return static`, aligning more closely with the semantics of the specification. It enhances code clarity and adherence to standards.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Updated all `@return self` annotation references in interfaces to use\n// `@return static`, which more closely follows the semantics of the\n// specification.\n```\n\n----------------------------------------\n\nTITLE: Installing Object Enumerator as Project Dependency\nDESCRIPTION: Composer command to add the object enumerator library as a project-level dependency for production use\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-enumerator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sebastian/object-enumerator\n```\n\n----------------------------------------\n\nTITLE: Running PHP_CodeSniffer on a file\nDESCRIPTION: This snippet shows how to run PHP_CodeSniffer on a specific PHP file to check it against the default PEAR coding standard. It requires PHP_CodeSniffer to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n\"phpcs /path/to/code/myfile.php\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Deprecation Notices with Symfony in PHP\nDESCRIPTION: The `trigger_deprecation()` function is used to generate silenced deprecation notices in PHP applications. It requires the package name, version, and a message with optional parameters for formatting. The notices can be logged when using Symfony's ErrorHandler. The function can be overridden in applications where ignoring deprecation is desired.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/deprecation-contracts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntrigger_deprecation('symfony/blockchain', '8.9', 'Using \"%s\" is deprecated, use \"%s\" instead.', 'bitcoin', 'fabcoin');\n```\n\n----------------------------------------\n\nTITLE: Configuring Psalm Language Server in Emacs with eglot\nDESCRIPTION: This Emacs Lisp snippet sets up the Psalm Language Server for PHP development using eglot. Dependencies include eglot and php-mode. The configuration adds Psalm Language Server to the eglot server programs list and ensures it's activated for PHP mode.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/language_server.md#2025-04-21_snippet_0\n\nLANGUAGE: Emacs Lisp\nCODE:\n```\n(when (file-exists-p \"vendor/bin/psalm-language-server\")\n  (progn\n    (require 'php-mode)\n    (require 'eglot)\n    (add-to-list 'eglot-server-programs '(php-mode . (\"php\" \"vendor/bin/psalm-language-server\")))\n    (add-hook 'php-mode-hook 'eglot-ensure)\n    (advice-add 'eglot-eldoc-function :around\n                (lambda (oldfun)\n                  (let ((help (help-at-pt-kbd-string)))\n                    (if help (message \"%s\" help) (funcall oldfun)))))\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyNullOperand Warning in PHP Function\nDESCRIPTION: Example showing how using a nullable integer parameter in an arithmetic operation can trigger the PossiblyNullOperand warning. The function accepts an optional integer and attempts to add 5 to it, which could cause issues if null is passed.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullOperand.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(?int $a) : void {\n    echo $a + 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Query Strings with GuzzleHttp\\Psr7\\Query::parse\nDESCRIPTION: This method parses a query string into an associative array. If multiple values are found for the same key, the value of that key becomes an array. It does not parse nested PHP-style arrays.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n`public static function parse(string $str, int|bool $urlEncoding = true): array`\n```\n\n----------------------------------------\n\nTITLE: Solving MixedAssignment with Docblock in PHP\nDESCRIPTION: This example illustrates how to fix the MixedAssignment issue by adding a docblock to specify the variable type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedAssignment.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @var string */\n$a = $GLOBALS['foo'];\n```\n\n----------------------------------------\n\nTITLE: Creating a No-operation Inflector in PHP\nDESCRIPTION: Demonstrates how to create an inflector that doesn't perform any operation for pluralization and singularization.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\Inflector;\nuse Doctrine\\Inflector\\NoopWordInflector;\n\n$inflector = new Inflector(new NoopWordInflector(), new NoopWordInflector());\n```\n\n----------------------------------------\n\nTITLE: Example Representation of Templated Class Instance in PHP\nDESCRIPTION: Demonstration of how Psalm interprets a template instantiation, showing a conceptual representation of a specialized MyContainer for integers.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass One_off_instance_of_MyContainer {\n  /** @var int */\n  private $value;\n\n  /** @param int $value */\n  public function __construct($value) {\n    $this->value = $value;\n  }\n\n  /** @return int */\n  public function getValue() {\n    return $this->value;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Google Application Credentials Environment Variable\nDESCRIPTION: PHP code to set the GOOGLE_APPLICATION_CREDENTIALS environment variable pointing to the JSON credentials file.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/auth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nputenv('GOOGLE_APPLICATION_CREDENTIALS=/path/to/my/credentials.json');\n```\n\n----------------------------------------\n\nTITLE: Creating a Rule Exception in PHP\nDESCRIPTION: This snippet defines the exception class for a custom validator rule in Respect\\Validation. It extends the `ValidationException` class and defines the default error messages for both affirmative and negative validation modes. These messages are used by `assert()` and `check()` methods.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/validation/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/*\n * This file is part of Respect/Validation.\n * (c) Alexandre Gomes Gaigalas <alexandre@gaigalas.net>\n *\n * For the full copyright and license information, please view the LICENSE file\n * that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace Respect\\Validation\\Exceptions;\n\n/**\n * @author Your Name <youremail@yourdomain.tld>\n */\nfinal class HelloWorldException extends ValidationException\n{\n    /**\n     * {@inheritDoc}\n     */\n    protected $defaultTemplates = [\n        self::MODE_DEFAULT => [\n            self::STANDARD => '{{name}} must be a Hello World',\n        ],\n        self::MODE_NEGATIVE => [\n            self::STANDARD => '{{name}} must not be a Hello World',\n        ]\n    ];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyNullArgument Error in PHP\nDESCRIPTION: This snippet shows a basic example of how the PossiblyNullArgument error can occur in PHP. It defines a function that expects a string argument and calls it with a value that could be null.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string $s): void {}\nfoo(rand(0, 1) ? \"hello\" : null);\n```\n\n----------------------------------------\n\nTITLE: Class References in Symfony HTTP Kernel\nDESCRIPTION: List of fully qualified class names used across the HTTP Kernel component showing key classes and their namespaces.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-kernel/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSymfony\\Component\\HttpKernel\\Controller\\ArgumentResolverInterface\nSymfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\nSymfony\\Component\\HttpKernel\\DataCollector\\RequestDataCollector\nSymfony\\Component\\HttpKernel\\EventListener\\FragmentListener\nSymfony\\Component\\HttpKernel\\DependencyInjection\\ContainerAwareHttpKernel\n```\n\n----------------------------------------\n\nTITLE: Conditional Class Definition in PHP\nDESCRIPTION: This snippet demonstrates a conditional class definition pattern in PHP. While this code is valid, it's strongly discouraged as it makes static analysis difficult for tools like Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateClass.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (rand(0, 1)) {\n    class A {\n        public function __construct(string $s) {}\n    }\n} else {\n    class A {\n        public function __construct(object $o) {}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Argument in PHP\nDESCRIPTION: This PHP snippet demonstrates an invalid argument error when calling a function with a mismatched type. The function 'foo' expects an argument of type 'A', but the function 'callFoo' is incorrectly documented to accept a string. This results in a runtime fatal error. The solution involves ensuring the docblock matches the function signature, or directly using the correct function signature.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {}\n\nfunction foo(A $a) : void {}\n\n/**\n * @param string $s\n */\nfunction callFoo($s) : void {\n    foo($s);\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming and Moving Classes with Psalm\nDESCRIPTION: This command demonstrates how to rename a class and move it to a different namespace simultaneously using Psalm's refactoring tool.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/refactoring.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-refactor --rename \"Ns1\\Foo\" --to \"Ns2\\Bar\\Baz\"\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependencies\nDESCRIPTION: Commands to install Composer and update project dependencies. This involves downloading the Composer installer and running the update command.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cd Instantiator\n$ curl -s https://getcomposer.org/installer | php\n$ php composer.phar update\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MixedStringOffsetAssignment Error in PHP\nDESCRIPTION: This code snippet demonstrates a case where Psalm will emit a MixedStringOffsetAssignment error. The error occurs when assigning a value to a string offset using a variable for which Psalm cannot determine the type, such as a value from $GLOBALS.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedStringOffsetAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n\"hello\"[0] = $GLOBALS['foo'];\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Dependency\nDESCRIPTION: Demonstrates how to install the sebastian/diff library using Composer package manager, with options for project or development dependencies\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/diff/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sebastian/diff\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev sebastian/diff\n```\n\n----------------------------------------\n\nTITLE: Casting Array to Integer in PHP\nDESCRIPTION: This code snippet demonstrates an attempt to cast an array to an integer in PHP. It uses a simple array containing a string element and casts it to an integer, which is generally risky due to the unpredictability of the resulting value. No external dependencies are required. Inputs are PHP arrays, and the expected output is an integer representation of the array, which might not be meaningful or reliable.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RiskyCast.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$foo = (int) array( 'hello' );\n```\n\n----------------------------------------\n\nTITLE: Installing Sodium Compat via Composer\nDESCRIPTION: Command to install Sodium Compat using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require paragonie/sodium_compat\n```\n\n----------------------------------------\n\nTITLE: Basic Type Resolution in PHP\nDESCRIPTION: Example showing how to resolve compound types using TypeResolver class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/type-resolver/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$typeResolver = new \\phpDocumentor\\Reflection\\TypeResolver();\n$type = $typeResolver->resolve('string|integer');\n```\n\n----------------------------------------\n\nTITLE: Generating Stub Files\nDESCRIPTION: This command generates stub files for a specified library. It outputs stub files that override third-party type information. Ensure that the library is installed as a dev-dependency.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/authoring_plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm --generate-stubs=stubs/chronos.phpstub\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Named Argument Error in PHP\nDESCRIPTION: Shows a function definition with specific parameter types and a function call using incorrectly named arguments, which will trigger an error\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidNamedArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nfunction takesArguments(string $name, int $age) : void {}\\n\\ntakesArguments(name: \"hello\", ag: 5);\n```\n\n----------------------------------------\n\nTITLE: Assigning Nullable Value to Non-null Property in PHP\nDESCRIPTION: Example showing a type mismatch where a function attempts to assign a potentially null string parameter to a class property that is typed as a non-null string. This creates a type safety issue as the property foo is declared to always contain a string value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyNullPropertyAssignmentValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string */\n    public $foo = \"bar\";\n}\n\nfunction assignToA(?string $s) {\n    $a = new A();\n    $a->foo = $s;\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Object Properties in PHP\nDESCRIPTION: This PHP code defines a class `A` with public properties `$foo` and `$bar`. The function `takesA` accepts an instance of `A` and iterates over its properties using a `foreach` loop. This demonstrates how PHP allows direct iteration over an object's properties, which might not always be the intended behavior.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RawObjectIteration.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string|null */\n    public $foo;\n\n    /** @var string|null */\n    public $bar;\n}\n\nfunction takesA(A $a) {\n    foreach ($a as $property) {}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect @var Usage in PHP Function Docblock\nDESCRIPTION: This code snippet shows an example of a PossiblyInvalidDocblockTag error. The @var tag is incorrectly used in a function docblock where @param would be more appropriate. This misuse can lead to confusion and potential issues with static analysis tools.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidDocblockTag.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @var int $param */\nfunction foo($param): void {}\n```\n\n----------------------------------------\n\nTITLE: Fixed PHP Function with Exception\nDESCRIPTION: Alternative solution that throws an exception when no comma is found instead of returning a default value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/FalsableReturnStatement.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction getCommaPosition(string $a) : int {\n    $pos = strpos($a, ',');\n\n    if ($pos === false) {\n        throw new Exception('This is unexpected');\n    }\n\n    return $pos;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Class Inheritance and Dependency Scanning in PHP\nDESCRIPTION: This snippet shows a PHP class that extends a vendor class and uses another vendor class as a parameter. It illustrates how Psalm performs deep and shallow scanning of files based on their usage and inheritance.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/contributing/how_psalm_works.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\nuse Vendor\\VendorClass;\nuse Vendor\\OtherVendorClass;\n\nclass A extends VendorClass\n{\n    public function foo(OtherVendorClass $c): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Assignment Typehints in PHP with Psalm\nDESCRIPTION: Shows how to use @var annotations as assignment typehints to provide type information for variables when Psalm cannot infer types from third-party functions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/typing_in_psalm.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace YourCode {\n  function bar() : int {\n    /** @var int */\n    $a = \\ThirdParty\\foo();\n    return $a;\n  }\n}\nnamespace ThirdParty {\n  function foo() {\n    return mt_rand(0, 100);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Magic Property Assignment in PHP\nDESCRIPTION: This PHP code snippet demonstrates the use of magic methods to handle the assignment of undefined properties. The `__set` method allows the class to define custom behavior when assigning values to properties that are not explicitly defined in the object. There are no specific dependencies, but the class must implement the magic method for property assignment to prevent errors. Expected input includes the property name and value, while the output is the assignment without errors, providing flexibility in handling object properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedMagicPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * @property string $bar\n */\nclass A {\n    /** @param mixed $value */\n    public function __set(string $name, $value) {}\n}\n$a = new A();\n$a->foo = \"bar\";\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Singular and Plural Rules in PHP\nDESCRIPTION: Shows how to set up custom singular and plural rules using the InflectorFactory.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\Inflector\\InflectorFactory;\nuse Doctrine\\Inflector\\Rules\\Pattern;\nuse Doctrine\\Inflector\\Rules\\Patterns;\nuse Doctrine\\Inflector\\Rules\\Ruleset;\nuse Doctrine\\Inflector\\Rules\\Substitution;\nuse Doctrine\\Inflector\\Rules\\Substitutions;\nuse Doctrine\\Inflector\\Rules\\Transformation;\nuse Doctrine\\Inflector\\Rules\\Transformations;\nuse Doctrine\\Inflector\\Rules\\Word;\n\n$inflector = InflectorFactory::create()\n    ->withSingularRules(\n        new Ruleset(\n            new Transformations(\n                new Transformation(new Pattern('/^(bil)er$/i'), '\\1'),\n                new Transformation(new Pattern('/^(inflec|contribu)tors$/i'), '\\1ta')\n            ),\n            new Patterns(new Pattern('singulars')),\n            new Substitutions(new Substitution(new Word('spins'), new Word('spinor')))\n        )\n    )\n    ->withPluralRules(\n        new Ruleset(\n            new Transformations(\n                new Transformation(new Pattern('^(bil)er$'), '\\1'),\n                new Transformation(new Pattern('^(inflec|contribu)tors$'), '\\1ta')\n            ),\n            new Patterns(new Pattern('noflect'), new Pattern('abtuse')),\n            new Substitutions(\n                new Substitution(new Word('amaze'), new Word('amazable')),\n                new Substitution(new Word('phone'), new Word('phonezes'))\n            )\n        )\n    )\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Defining and Importing Types in PHP\nDESCRIPTION: This code snippet illustrates how to define a class in one namespace and import it into another namespace using 'use'. It also includes a Psalm import type annotation to indicate a potentially invalid type. The snippet aims to showcase type validation issues that can arise with Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidTypeImport.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace A;\n\nclass Types {}\n\nnamespace B;\nuse A\\Types;\n/** @psalm-import-type UnknownType from Types */\nclass C {}\n```\n\n----------------------------------------\n\nTITLE: JSON Service Description Example\nDESCRIPTION: This JSON snippet shows the equivalent service description in JSON format.  It defines operations such as `list_groups`, `search_groups`, `create_group`, `delete_group`, `get_group`, and `update_group`. Each operation specifies the HTTP method, URI, a summary, and parameters with details about their location, description, type, and whether they are required.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\":       \"Zendesk REST API v2\",\n    \"apiVersion\": \"2012-12-31\",\n    \"description\":\"Provides access to Zendesk views, groups, tickets, ticket fields, and users\",\n    \"operations\": {\n        \"list_groups\":  {\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"groups.json\",\n            \"summary\":   \"Get a list of groups\"\n        },\n        \"search_groups\":{\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"search.json?query=\\\"{query} type:group\\\"\",\n            \"summary\":   \"Uses a search query to get a list of groups\",\n            \"parameters\":{\n                \"query\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Zendesk Search Query\",\n                    \"type\":       \"string\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"create_group\": {\n            \"httpMethod\":\"POST\",\n            \"uri\":       \"groups.json\",\n            \"summary\":   \"Create a group\",\n            \"parameters\":{\n                \"data\":        {\n                    \"type\":       \"array\",\n                    \"location\":   \"body\",\n                    \"description\":\"Group JSON\",\n                    \"filters\":    \"json_encode\",\n                    \"required\":   true\n                },\n                \"Content-Type\":{\n                    \"type\":    \"string\",\n                    \"location\":\"header\",\n                    \"static\":  \"application/json\"\n                }\n            }\n        },\n        \"delete_group\": {\n            \"httpMethod\":\"DELETE\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Delete a group\",\n            \"parameters\":{\n                \"id\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to delete by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"get_group\":    {\n            \"httpMethod\":\"GET\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Get a ticket\",\n            \"parameters\":{\n                \"id\":{\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to get by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                }\n            }\n        },\n        \"update_group\": {\n            \"httpMethod\":\"PUT\",\n            \"uri\":       \"groups/{id}.json\",\n            \"summary\":   \"Update a group\",\n            \"parameters\":{\n                \"id\":          {\n                    \"location\":   \"uri\",\n                    \"description\":\"Group to update by ID\",\n                    \"type\":       \"integer\",\n                    \"required\":   true\n                },\n                \"data\":        {\n                    \"type\":       \"array\",\n                    \"location\":   \"body\",\n                    \"description\":\"Group JSON\",\n                    \"filters\":    \"json_encode\",\n                    \"required\":   true\n                },\n                \"Content-Type\":{\n                    \"type\":    \"string\",\n                    \"location\":\"header\",\n                    \"static\":  \"application/json\"\n                }\n            }\n        }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deprecated Method Usage Example in PHP\nDESCRIPTION: Demonstrates a class with a deprecated method marked with @deprecated annotation and its subsequent usage. This example shows how deprecated methods are defined and called, which should be avoided in production code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DeprecatedMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @deprecated */\n    public function foo() : void {}\n}\n(new A())->foo();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Possibly Invalid Cast in PHP\nDESCRIPTION: This code snippet illustrates a scenario where a potentially invalid cast may occur in PHP. It defines two classes, A and B, where B implements the __toString method. The code then attempts to cast an instance of either A or B to a string, which may result in an invalid cast if class A is selected.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidCast.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B {\n    public function __toString() {\n        return 'hello';\n    }\n}\n$c = (string) (rand(0, 1) ? new A() : new B());\n```\n\n----------------------------------------\n\nTITLE: Overriding Assignment Typehints in PHP\nDESCRIPTION: Illustrates that assignment typehints in Psalm are not binding and can be overridden by new assignments without causing issues.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/typing_in_psalm.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @var string|null */\n$a = foo();\n$a = 6; // $a is now typed as an int\n```\n\n----------------------------------------\n\nTITLE: Installing Code Unit Reverse Lookup as Development Dependency - PHP\nDESCRIPTION: This code snippet illustrates how to add the Code Unit Reverse Lookup library as a development-time dependency to your PHP project using Composer. This is useful for running tests without necessarily including the library in the production environment. The --dev flag ensures that the library is classified as a development requirement in composer.json.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/code-unit-reverse-lookup/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require --dev sebastian/code-unit-reverse-lookup\n```\n\n----------------------------------------\n\nTITLE: Assigning Property to Mixed Type in PHP\nDESCRIPTION: This example demonstrates a situation where Psalm emits a MixedPropertyAssignment error. The function takes a parameter typed as mixed and attempts to assign a property to it without knowing if the variable is an object that supports property assignment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @param mixed $a */\nfunction foo($a) : void {\n    $a->foo = \"bar\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing object-reflector as a development dependency\nDESCRIPTION: This snippet shows how to install sebastian/object-reflector as a development-time dependency using Composer.  This is useful for tools only needed during development, like testing frameworks.  The --dev flag ensures it's only required in the development environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require --dev sebastian/object-reflector\n```\n\n----------------------------------------\n\nTITLE: Correcting Function Argument Type in PHP\nDESCRIPTION: This PHP code illustrates the corrected function usage where the function 'callFoo' now correctly expects an argument of type 'A', aligning with the function 'foo'. This correction prevents the fatal error by ensuring compatibility between the functions' type expectations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidArgument.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {}\n\nfunction foo(A $a) : void {}\n\nfunction callFoo(A $a) : void {\n    foo($a);\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Match Methods Usage\nDESCRIPTION: Examples of using strict boolean match methods for type-safe pattern matching\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/pcre/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Preg;\n\nif (Preg::isMatch('{fo+}', $string, $matches)) // bool\nif (Preg::isMatchAll('{fo+}', $string, $matches)) // bool\n```\n\n----------------------------------------\n\nTITLE: Installing DeepCopy with Composer in PHP\nDESCRIPTION: Command to install the DeepCopy library using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require myclabs/deep-copy\n```\n\n----------------------------------------\n\nTITLE: Fixed Type Match in Backed Enum\nDESCRIPTION: Shows correct implementation where the case value type matches the enum's backing type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: string \n{\n    case Open = \"open\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyInvalidFunctionCall Warning in PHP\nDESCRIPTION: This code snippet shows a scenario where a variable $a is randomly assigned either an integer or a callable function. Subsequently, attempting to call $a as a function may result in an invalid function call if $a is an integer. This ambiguity triggers the PossiblyInvalidFunctionCall warning in static analysis tools.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = rand(0, 1) ? 5 : function() : int { return 5; };\n$b = $a();\n```\n\n----------------------------------------\n\nTITLE: Handling Uninitialized Properties in PHP Constructor\nDESCRIPTION: This PHP class example demonstrates a situation where a class property 'foo' is accessed in the constructor without prior initialization. It highlights the importance of initializing properties before using them. The sample uses the 'strlen' function to access the uninitialized property, showing how this can lead to unintended behavior. There are no external dependencies besides PHP itself. The key parameter involved is the 'foo' property of the class which is utilized before assignment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UninitializedProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string */\n    public $foo;\n\n    public function __construct() {\n        echo strlen($this->foo);\n        $this->foo = \\\"foo\\\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Property Access in PHP\nDESCRIPTION: This code snippet demonstrates the use of the `__get` magic method in PHP to handle access to undefined properties. When an attempt is made to access a property that doesn't exist on the object, the `__get` method is called, allowing custom logic to be executed. In this case, it returns the string \"cool\".\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedMagicPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @property string $bar\n */\nclass A {\n    public function __get(string $name) {\n        return \"cool\";\n    }\n}\n$a = new A();\necho $a->foo;\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnresolvableInclude in PHP with Psalm\nDESCRIPTION: This PHP code snippet demonstrates a scenario that can lead to the `UnresolvableInclude` error in Psalm. The `requireFile` function attempts to include a file specified by a string variable. If Psalm cannot determine the exact file path at analysis time, it may emit an `UnresolvableInclude` error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnresolvableInclude.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction requireFile(string $s) : void {\n    require_once $s;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Less Specific Return Type Implementation in PHP\nDESCRIPTION: This PHP code snippet showcases a situation where a class `D` implements an interface `I`.  The interface specifies that the `foo` method should return an array of objects of type `B`. However, the implementing class `D`'s `foo` method returns an array of objects of type `A`, which is a more general type, potentially violating the contract defined by the interface. This is an example of a less specific implemented return type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/LessSpecificImplementedReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B extends A {}\ninterface I {\n    /** @return B[] */\n    public function foo();\n}\nclass D implements I {\n    /** @return A[] */\n    public function foo() {\n        return [new A, new A];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a String Processing Function in PHP\nDESCRIPTION: This function takes a string as input, searches for the letter 'a', and echoes the substring starting from the first occurrence of 'a'. It demonstrates basic string manipulation and the use of PHP's built-in functions such as strpos and substr.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyFalseArgument.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(string $s) : void {\n    $a_pos = strpos($s, \"a\");\n    echo substr($s, $a_pos);\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Negated Assertions in Psalm for PHP\nDESCRIPTION: These snippets show how to use negated assertions in Psalm to indicate that a variable is not of a specific type or class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/assertion_syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert !int $foo */\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert !SomeObjectType $bar  */\n```\n\n----------------------------------------\n\nTITLE: PHP Function with Invalid Return Type Example\nDESCRIPTION: Demonstrates a PHP function that incorrectly returns a string when an integer return type is declared. The function foo() is declared to return an int but contains a conditional branch that returns a string, causing a type mismatch error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : int {\n    if (rand(0, 1)) {\n        return \"hello\";\n    }\n\n    return 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Importing Type Aliases in PHP with Psalm\nDESCRIPTION: This example shows how to define a type alias using @psalm-type and import it in another class using @psalm-import-type, demonstrating type reuse.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @psalm-type PhoneType = array{phone: string}\n */\nclass Phone {\n    /**\n     * @psalm-return PhoneType\n     */\n    public function toArray(): array {\n        return [\"phone\" => \"Nokia\"];\n    }\n}\n\n<?php\n/**\n * @psalm-import-type PhoneType from Phone\n */\nclass User {\n    /**\n     * @psalm-return PhoneType\n     */\n    public function toArray(): array {\n        return array_merge([], (new Phone())->toArray());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Less Specific Return Type in PHP\nDESCRIPTION: This PHP code snippet defines a function `foo()` that is designed to return either an integer or null. However, the implementation of the function ensures that it will always return an integer value (5). The discrepancy between the declared return type `?int` (nullable integer) and the actual return value triggers a `LessSpecificReturnType` issue.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/LessSpecificReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : ?int {\n    return 5;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullPropertyFetch Error in PHP\nDESCRIPTION: This code snippet shows an example of trying to access a property 'foo' on a null value, which will result in a NullPropertyFetch error. The variable $a is set to null, and then an attempt is made to access the 'foo' property on it.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = null;\necho $a->foo;\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid __toString Return in PHP Class\nDESCRIPTION: This snippet defines a PHP class with an __toString method that improperly returns a boolean instead of a string. The InvalidToString issue is flagged by tools like Psalm due to the misuse of return type. This can lead to runtime errors when objects are converted to strings.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidToString.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    public function __toString() {\n        /** @psalm-suppress InvalidReturnStatement */\n        return true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PluginIssue Class for WebPageTest Plugins in TypeScript\nDESCRIPTION: This class represents an issue that can be emitted by WebPageTest plugins. It includes properties for the issue name, description, and severity level. The class is designed to be instantiated and used within plugin implementations to report problems or noteworthy events.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PluginIssue.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport class PluginIssue {\n  constructor(\n    public name: string,\n    public description: string,\n    public severity: 'info' | 'warning' | 'error' = 'info'\n  ) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Original INI Files with XdebugHandler\nDESCRIPTION: Static method to get all original PHP INI file locations, which is useful in a restarted process where standard PHP functions would return incorrect values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\XdebugHandler\\XdebugHandler;\n\n$files = XdebugHandler::getAllIniFiles();\n\n# $files[0] always exists, it could be an empty string\n$loadedIni = array_shift($files);\n$scannedInis = $files;\n```\n\n----------------------------------------\n\nTITLE: Detecting Less Specific Return in PHP\nDESCRIPTION: This PHP code defines two classes, `A` and `B`, where `B` extends `A`. The function `foo` is declared to return an instance of class `B`, but the return statement attempts to return an instance of class `A`. This causes a static analysis tool to flag a `LessSpecificReturnStatement` error because the returned type is not as specific as the declared return type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/LessSpecificReturnStatement.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B extends A {}\n\nfunction foo() : B {\n    return new A(); // emitted here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/environment as a development dependency\nDESCRIPTION: This command adds the sebastian/environment library as a development-time dependency using Composer. This is typically used for running test suites and other development-related tasks, ensuring the library is available only during development.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/environment/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"composer require --dev sebastian/environment\"\n```\n\n----------------------------------------\n\nTITLE: Implementing DroppingStream to Limit Data\nDESCRIPTION: Shows how to use DroppingStream to automatically discard data once a stream exceeds a specific size limit.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n// Create an empty stream\n$stream = Psr7\\Utils::streamFor();\n\n// Start dropping data when the stream has more than 10 bytes\n$dropping = new Psr7\\DroppingStream($stream, 10);\n\n$dropping->write('01234567890123456789');\necho $stream; // 0123456789\n```\n\n----------------------------------------\n\nTITLE: XML Baseline Configuration with Unused Entry\nDESCRIPTION: An XML configuration file that demonstrates an unused baseline entry. The file includes an UnusedVariable section with a code element that identifies '$a' as a variable that should be suppressed, but is not being used for suppression.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedBaselineEntry.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<files>\n    <file src=\"example.php\">\n        <UnusedVariable>\n            <!-- The following entry is unused and should be removed. -->\n            <code>$a</code>\n        </UnusedVariable>\n    </file>\n</files>\n```\n\n----------------------------------------\n\nTITLE: Installing Nette Utils via Composer\nDESCRIPTION: This snippet shows how to install the Nette Utils package using Composer, which is the recommended installation method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nette/utils/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require nette/utils\n```\n\n----------------------------------------\n\nTITLE: Valid Inheritance of Return Type\nDESCRIPTION: This PHP snippet demonstrates a valid scenario where class `B` extends class `A`, and the `@return` annotation in the function's docblock specifies type `B`, while the function `foo`'s return type hint is `A`. Because `B` is a subclass of `A`, this is considered valid, and no error is emitted. It showcases a class `A` and `B` extending `A` and a function `foo` with return type `A` but returns a new instance of `B`.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MismatchingDocblockReturnType.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B extends A {}\n/**\n * @return B // emitted here\n */\nfunction foo() : A {\n    return new B();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine Inflector with Composer\nDESCRIPTION: Shows how to install the Doctrine Inflector library using Composer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ composer require doctrine/inflector\n```\n\n----------------------------------------\n\nTITLE: Handling Possibly Undefined Method Calls in PHP\nDESCRIPTION: This snippet illustrates how to create instances of two classes and attempt to call a method that may not exist on one of them. It uses a ternary operator to decide which class to instantiate based on a random number. If the method 'bar' is called on an instance of class 'B', which does not define this method, it may trigger an undefined method error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function bar() : void {}\n}\nclass B {}\n\na = rand(0, 1) ? new A : new B;\n$a->bar();\n```\n\n----------------------------------------\n\nTITLE: Using Classify Method in PHP\nDESCRIPTION: Demonstrates the classify method to convert 'model_name' to 'ModelName'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->classify('model_name'); // ModelName\n```\n\n----------------------------------------\n\nTITLE: Internal Class Named Argument Configuration\nDESCRIPTION: Demonstrates how Psalm configuration can control named argument usage for internal classes, providing more granular control over parameter calling\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParamNameMismatch.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @internal\n */\nclass A {\n    public function foo(string $str, bool $b = false) : void {}\n}\n\nclass AChild extends A {\n    public function foo(string $string, bool $b = false) : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SARIF Report Using Psalm CLI\nDESCRIPTION: Command line instruction for generating a SARIF format security analysis report using Psalm\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npsalm --report=results.sarif\n```\n\n----------------------------------------\n\nTITLE: Installing PHP-JWT via Composer\nDESCRIPTION: Use Composer to install the PHP-JWT library and optionally the sodium_compat package for PHP versions below 7.2 or without libsodium.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require firebase/php-jwt\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require paragonie/sodium_compat\n```\n\n----------------------------------------\n\nTITLE: Loading credentials from environment variables in AWS SDK for PHP\nDESCRIPTION: This snippet explains how the AWS SDK for PHP can load credentials from environment variables, `AWS_ACCESS_KEY_ID` and `AWS_SECRET_KEY`. This is useful in environments like AWS Elastic Beanstalk where these variables are automatically configured.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n\"[SDK] Added the ability to load credentials from environmental variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_KEY`.\n  This is compatible with AWS Elastic Beanstalk environment configurations\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Parameter Name Mismatch\nDESCRIPTION: Resolves the parameter name mismatch by ensuring child method uses identical parameter names to the parent method\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParamNameMismatch.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function foo(string $str, bool $b = false) : void {}\n}\n\nclass AChild extends A {\n    public function foo(string $str, bool $b = false) : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Object Properties in Psalm (PHP)\nDESCRIPTION: Demonstrates how to specify object properties and their expected types using Psalm annotations. The function takes an object with a 'foo' property of type string and returns it.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/object_types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @param object{foo: string} $obj */\nfunction takesObject(object $obj) : string {\n    return $obj->foo;\n}\n\ntakesObject((object) [\"foo\" => \"hello\"]);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Parameter Type Override in PHP\nDESCRIPTION: Shows an incorrect implementation where a child class E changes the parameter type from string to int, violating the Liskov substitution principle.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImplementedParamTypeMismatch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass D {\n    /** @param string $a */\n    public function foo($a): void {}\n}\n\nclass E extends D {\n    /** @param int $a */\n    public function foo($a): void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Psalter via Command Line\nDESCRIPTION: Shows the two ways to execute Psalter - either directly or through Psalm's binary\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/fixing.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalter [args]\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm --alter [args]\n```\n\n----------------------------------------\n\nTITLE: Fixing ArgumentTypeCoercion with Type Checking in PHP\nDESCRIPTION: This solution adds a type check before calling the function to ensure the argument is of the correct type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ArgumentTypeCoercion.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction takesA(A $a) : void {\n    if ($a instanceof B) {\n        takesB($a);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Mixed Array to String Array Property in PHP\nDESCRIPTION: This snippet defines a class 'A' with a property 'takesStringArray' which is explicitly typed as an array of strings. The function 'foo' takes parameters of type A and array, demonstrating the potential type coercion issue when assigning an array to a strongly-typed property. The function has no return value, and its main purpose is to illustrate the risk of type mismatches when using strict type declarations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedPropertyTypeCoercion.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string[] */\n    public $takesStringArray = [];\n}\n\nfunction foo(A $a, array $arr) : void {\n    $a->takesStringArray = $arr;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic System Configuration Commands\nDESCRIPTION: Initial system setup commands including user management, sudo configuration, and basic system settings\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo passwd root\nexit\ndeluser -remove-home pi\nadduser <username>\nvisudo\n<username> ALL=(ALL:ALL) ALL\nsudo reboot\n```\n\n----------------------------------------\n\nTITLE: Emitting InvalidTemplateParam in PHP for Template Type Constraints\nDESCRIPTION: This snippet defines a base class with a template type parameter and attempts to extend it with an incompatible type. It serves as an example of how template type constraints work in PHP and demonstrates what happens when those constraints are not satisfied.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidTemplateParam.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T of object\n */\nclass Base {}\n\n/** @template-extends Base<int> */\nclass SpecializedByInheritance extends Base {}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests for Psalm (Bash)\nDESCRIPTION: This command runs the integration tests for the Psalm project using Composer. It's a crucial step before submitting a pull request to ensure code quality and prevent regressions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/contributing/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer tests\n```\n\n----------------------------------------\n\nTITLE: Creating Credentials with AWS STS Client (PHP)\nDESCRIPTION: This snippet shows the `createCredentials` method in AWS STS client. It simplifies the creation of credential objects from STS operations result.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n\"createCredentials\"\n```\n\n----------------------------------------\n\nTITLE: Installing PHP_CodeSniffer using PEAR\nDESCRIPTION: This snippet demonstrates how to install PHP_CodeSniffer using the PEAR installer, making the `phpcs` and `phpcbf` commands immediately available.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n\"pear install PHP_CodeSniffer\"\n```\n\n----------------------------------------\n\nTITLE: Using dump() Function in PHP with VarDumper Component\nDESCRIPTION: The VarDumper component provides a 'dump()' function that can be used instead of PHP's native 'var_dump()'. It offers enhanced capabilities for inspecting arbitrary PHP variables.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ndump($variable);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deprecated Function Usage in PHP\nDESCRIPTION: Example showing how a deprecated function is defined and called in PHP. The function 'foo' is marked with @deprecated annotation indicating it will be removed in future versions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DeprecatedFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @deprecated */\nfunction foo() : void {}\nfoo();\n```\n\n----------------------------------------\n\nTITLE: Using Capitalize Method in PHP\nDESCRIPTION: Demonstrates the capitalize method with configurable word delimiters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$string = 'top-o-the-morning to all_of_you!';\n\necho $inflector->capitalize($string); // Top-O-The-Morning To All_of_you!\n\necho $inflector->capitalize($string, '-_ '); // Top-O-The-Morning To All_Of_You!\n```\n\n----------------------------------------\n\nTITLE: Suppressing Unused Parameter Warnings in PHP\nDESCRIPTION: This snippet shows how to suppress warnings for unused parameters in a PHP class method by prefixing the parameter name with an underscore. The method retains its functionality while avoiding the unused parameter warning from the Psalm tool.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUnusedParam.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A {\n    public function foo(int $a, int $_b) : int {\n        return $a + 4;\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Carbon Composer Installation Configuration\nDESCRIPTION: JSON configuration for installing Carbon via Composer, specifying version requirement.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nesbot/carbon/readme.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require\": {\n        \"nesbot/carbon\": \"^2.16\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Command Attribute for PHP 8\nDESCRIPTION: This snippet illustrates the usage of the `#[AsCommand]` attribute in PHP 8 to declare console commands, simplifying command registration. This annotation replaces the need to define the command in services.yaml.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/console/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\" * Add `#[AsCommand]` attribute for declaring commands on PHP 8\"\n```\n\n----------------------------------------\n\nTITLE: Installing League Config via Composer\nDESCRIPTION: Command to install the league/config package using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/config/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require league/config\n```\n\n----------------------------------------\n\nTITLE: Problematic PHP Reference Usage Example\nDESCRIPTION: This code demonstrates a reference usage pattern that Psalm cannot properly track, where a reference is made to an array offset of another array offset.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsupportedReferenceUsage.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @var non-empty-list<int> */\n$bar = [1, 2, 3];\n/** @var non-empty-list<int> */\n$baz = [1, 2, 3];\n\n$foo = &$bar[$baz[0]];\n```\n\n----------------------------------------\n\nTITLE: Defining an Interface That Extends a Class - PHP\nDESCRIPTION: This snippet illustrates how to define an interface in PHP that extends a defined class. It shows the relationship between the class and the interface, highlighting the concept of inheritance.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedInterface.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass C {}\n\ninterface I extends C {}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NoValue with function arguments in PHP\nDESCRIPTION: Illustrates how passing a never-returning function as an argument creates a NoValue scenario. The foo() function will never be called because shutdown() will terminate execution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NoValue.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction shutdown(): never {die('Application closed unexpectedly');}\nfunction foo(string $_a): void{}\n\nfoo(shutdown()); // foo() will never be called\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Using 'new self' Instead of 'new static'\nDESCRIPTION: First solution to fix the unsafe generic instantiation by using 'new self' instead of 'new static', which ensures type safety by only creating instances of the base class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeGenericInstantiation.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T\n * @psalm-consistent-constructor\n */\nclass Container {\n    /**\n     * @var T\n     */\n    public $t;\n\n    /**\n     * @param T $t\n     */\n    public function __construct($t) {\n        $this->t = $t;\n    }\n\n    /**\n     * @template U\n     * @param U $u\n     * @return self<U>\n     */\n    public function getInstance($u) : self\n    {\n        return new self($u);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Singularize Method in PHP\nDESCRIPTION: Demonstrates the singularize method to convert a word to its singular form.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->singularize('browsers'); // browser\n```\n\n----------------------------------------\n\nTITLE: Startup Script for ADB Watch and Agent\nDESCRIPTION: Shell script to launch ADB watch and WebPageTest agent in detached screen sessions\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\nPATH=/home/<username>/perl5/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/games:/usr/games\nNODE_PATH=/usr/lib/nodejs:/usr/lib/node_modules:/usr/share/javascript\nscreen -dmS adbwatch python ~/webpagetest/agent/js/adbwatch.py\nsleep 10\nscreen -dmS agent ~/agent.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Properties and Iterating in PHP\nDESCRIPTION: This code snippet defines a PHP class 'A' with nullable string properties 'foo' and 'bar'. It includes a function 'takesA' that accepts an instance of class 'A', potentially modifies it to be an array, and iterates over the properties of the object.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossibleRawObjectIteration.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string|null */\n    public $foo;\n\n    /** @var string|null */\n    public $bar;\n}\n\nfunction takesA(A $a) {\n    if (rand(0, 1)) {\n        $a = [1, 2, 3];\n    }\n\n    foreach ($a as $property) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using false in String Concatenation - PHP\nDESCRIPTION: Demonstrates an incorrect usage of the false boolean value in a string concatenation operation with an integer. This operation is considered problematic as false does not have a meaningful representation in this context.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/FalseOperand.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\necho 5 . false; \n```\n\n----------------------------------------\n\nTITLE: Installing Doctrine Instantiator via Composer\nDESCRIPTION: Command to install the Doctrine Instantiator library using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/docs/en/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ composer require doctrine/instantiator\n```\n\n----------------------------------------\n\nTITLE: Fixed Integer Backed Enum\nDESCRIPTION: Shows correct implementation of an integer-backed enum with proper value type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: int\n{\n    case Open = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHP File Iterator via Composer\nDESCRIPTION: Command to install PHP File Iterator as a regular project dependency using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-file-iterator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require phpunit/php-file-iterator\n```\n\n----------------------------------------\n\nTITLE: Adding headers to response - PHP\nDESCRIPTION: This snippet demonstrates how to add a custom header to an HTTP response using the PSR-7 interface.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/docs/PSR7-Usage.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$response->withHeader('My-Custom-Header', 'My Custom Message');\n```\n\n----------------------------------------\n\nTITLE: Installing Portable ASCII via Composer in PHP\nDESCRIPTION: Command to install the Portable ASCII library using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require voku/portable-ascii\n```\n\n----------------------------------------\n\nTITLE: Parsing Diff with Parser in PHP\nDESCRIPTION: Demonstrates how to use the Parser class to parse a git diff into an object graph, showing advanced diff parsing capabilities\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/diff/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse SebastianBergmann\\Diff\\Parser;\nuse SebastianBergmann\\Git;\n\n$git = new Git('/usr/local/src/money');\n\n$diff = $git->getDiff(\n  '948a1a07768d8edd10dcefa8315c1cbeffb31833',\n  'c07a373d2399f3e686234c4f7f088d635eb9641b'\n);\n\n$parser = new Parser;\n\nprint_r($parser->parse($diff));\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CloudFront Client API Version (PHP)\nDESCRIPTION: This code snippet demonstrates how to configure the Amazon CloudFront client to use a specific API version. It sets the `version` option to `2012-05-05` when instantiating the client, effectively reverting to the older API.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"$client = new Aws\\CloudFront\\CloudFrontClient([\\n    'version' => '2012-05-05',\\n    // other configuration options\\n]);\"\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Device Permissions for ADB\nDESCRIPTION: Add user permissions and udev rules to enable USB device access for multiple Android device manufacturers\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo gpasswd -a <username> plugdev\n```\n\nLANGUAGE: shell\nCODE:\n```\nSUBSYSTEM==\"usb\", ATTR{idVendor}==\"0502\", MODE=\"0666\", GROUP=\"plugdev\", OWNER=\"<username>\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyFalsePropertyAssignmentValue Error in PHP\nDESCRIPTION: This code snippet illustrates a scenario where the PossiblyFalsePropertyAssignmentValue error can occur. It defines a class A with a property 'foo' typed as int, and a function that attempts to assign the result of strpos() to this property, which can potentially be false.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyFalsePropertyAssignmentValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var int */\n    public $foo = 0;\n}\n\nfunction assignToA(string $s) {\n    $a = new A();\n    $a->foo = strpos($s, \"haystack\");\n}\n```\n\n----------------------------------------\n\nTITLE: PHP 8 Support\nDESCRIPTION: This snippet announces the addition of support for PHP 8 in this component. It broadens the range of environments where the object reflector can be utilized.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/ChangeLog.md#2025-04-21_snippet_2\n\nLANGUAGE: none\nCODE:\n```\n### Added\n\n* This component is now supported on PHP 8\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Loop Invalidation in PHP\nDESCRIPTION: This code demonstrates a problematic pattern where the loop counter variable $i is reassigned inside the loop body, invalidating the loop's conditional logic. Setting $i to 5 inside the loop disrupts the normal incrementation pattern, potentially causing unexpected behavior.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/LoopInvalidation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfor ($i = 0; $i < 10; $i++) {\n    $i = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Null Reference Error in PHP\nDESCRIPTION: This code snippet shows how attempting to call a method on a null object leads to a null reference error. It assigns null to a variable and then tries to call a method on it, which would result in a runtime error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullReference.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = null;\n$a->foo();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DuplicateFunction Error in PHP\nDESCRIPTION: This code snippet shows an example of the DuplicateFunction error in PHP. It defines three functions, with 'foo' being defined twice, which would trigger the error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : void {}\nfunction bar() : void {}\nfunction foo() : void {}\n```\n\n----------------------------------------\n\nTITLE: Using TypeMatcher in DeepCopy PHP\nDESCRIPTION: Demonstrates how to use TypeMatcher to match elements by their type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\TypeMatcher\\TypeMatcher;\n\n// Will apply a filter to any object that is an instance of Doctrine\\Common\\Collections\\Collection\n$matcher = new TypeMatcher('Doctrine\\Common\\Collections\\Collection');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NonInvariantPropertyType Issue in PHP Class Inheritance\nDESCRIPTION: This code snippet shows an example of the NonInvariantPropertyType issue. Class B extends class A, but changes the type of the $foo property from string to ?string (nullable string). This can cause compile errors in PHP with typed properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NonInvariantPropertyType.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    public string $foo = 'hello';\n}\n\nclass B extends A {\n    public ?string $foo;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing PHP_CodeSniffer using Git Clone\nDESCRIPTION: This snippet demonstrates how to install PHP_CodeSniffer by cloning the source code from Git and running the `phpcs` and `phpcbf` commands directly from the clone.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n\"git clone https://github.com/squizlabs/PHP_CodeSniffer.git\ncd PHP_CodeSniffer\nphp bin/phpcs -h\nphp bin/phpcbf -h\"\n```\n\n----------------------------------------\n\nTITLE: Mapping File Extension to Mimetype with GuzzleHttp\\Psr7\\MimeType::fromExtension\nDESCRIPTION: This method maps a file extension to a mimetype. It takes a file extension string as input and returns the corresponding mimetype string or null if no matching mimetype is found.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n`public static function fromExtension(string $extension): string|null`\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring ifplugd\nDESCRIPTION: Reconfigures the ifplugd package to bring up usb0 automatically.  This involves skipping the static interface configuration and adding \"usb0\" to the dynamic interface list. It's a step in configuring reverse-tethered networking for WebPageTest mobile agents.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n\"sudo dpkg-reconfigure ifplugd\"\n```\n\n----------------------------------------\n\nTITLE: Defining Clone Method in PHP\nDESCRIPTION: The code demonstrates a PHP class with a '__clone' method that incorrectly specifies a return type. The '__clone', '__construct', and '__destruct' methods in PHP should not have return types. This snippet is a representation of a violation that is caught by a style or static analysis tool.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MethodSignatureMustOmitReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    public function __clone() : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Amazon S3 UploadBuilder in PHP\nDESCRIPTION: This code snippet demonstrates how to use the UploadBuilder to upload content directly to Amazon S3. It addresses a fixed issue where uploads failed when using a custom iterator that needs to be rewound.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Example usage of UploadBuilder with a custom iterator\n$uploader = UploadBuilder::newInstance()\n    ->setClient($s3Client)\n    ->setSource($customIterator)\n    ->setBucket('my-bucket')\n    ->setKey('my-object-key')\n    ->build();\n\n$uploader->upload();\n```\n\n----------------------------------------\n\nTITLE: Cloning WebPageTest Repository\nDESCRIPTION: Command to clone the WebPageTest repository from GitHub\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docker/local/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/catchpoint/WebPageTest.git\n```\n\n----------------------------------------\n\nTITLE: Type Mismatch in Backed Enum\nDESCRIPTION: Shows incorrect type usage where the case value type doesn't match the enum's backing type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: string\n{\n    case Open = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Stringifier Namespace in PHP\nDESCRIPTION: This code snippet demonstrates how to import the `stringify` function from the Respect\\Stringifier namespace in PHP. Importing the function allows for easier use of the stringify functionality.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/stringifier/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse function Respect\\Stringifier\\stringify;\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using League Config in PHP\nDESCRIPTION: Demonstrates how to define configuration schema, set values, and access configuration using the Configuration class. Shows schema definition, value setting, and retrieval with validation and dot notation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/config/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse League\\Config\\Configuration;\nuse Nette\\Schema\\Expect;\n\n// Define your configuration schema\n$config = new Configuration([\n    'database' => Expect::structure([\n        'driver' => Expect::anyOf('mysql', 'postgresql', 'sqlite')->required(),\n        'host' => Expect::string()->default('localhost'),\n        'port' => Expect::int()->min(1)->max(65535),\n        'ssl' => Expect::bool(),\n        'database' => Expect::string()->required(),\n        'username' => Expect::string()->required(),\n        'password' => Expect::string()->nullable(),\n    ]),\n    'logging' => Expect::structure([\n        'enabled' => Expect::bool()->default($_ENV['DEBUG'] == true),\n        'file' => Expect::string()->deprecated(\"use logging.path instead\"),\n        'path' => Expect::string()->assert(function ($path) { return \\is_writeable($path); })->required(),\n    ]),\n]);\n\n// Set the values, either all at once with `merge()`:\n$config->merge([\n    'database' => [\n        'driver' => 'mysql',\n        'port' => 3306,\n        'database' => 'mydb',\n        'username' => 'user',\n        'password' => 'secret',\n    ],\n]);\n\n// Or one-at-a-time with `set()`:\n$config->set('logging.path', '/var/log/myapp.log');\n\n// You can now retrieve those values with `get()`.\n// Validation and defaults will be applied for you automatically\n$config->get('database');        // Fetches the entire \"database\" section as an array\n$config->get('database.driver'); // Fetch a specific nested value with dot notation\n$config->get('database/driver'); // Fetch a specific nested value with slash notation\n$config->get('database.host');   // Returns the default value \"localhost\"\n$config->get('logging.path');    // Guaranteed to be writeable thanks to the assertion in the schema\n\n// If validation fails an `InvalidConfigurationException` will be thrown:\n$config->set('database.driver', 'mongodb');\n$config->get('database.driver'); // InvalidConfigurationException\n\n// Attempting to fetch a non-existent key will result in an `InvalidConfigurationException`\n$config->get('foo.bar');\n\n// You could avoid this by checking whether that item exists:\n$config->exists('foo.bar'); // Returns `false`\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling Psalm Plugins\nDESCRIPTION: Installs a Psalm plugin as a development dependency and enables it. Replace <plugin/package> with the actual plugin package name.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev <plugin/package> && vendor/bin/psalm-plugin enable <plugin/package>\n```\n\n----------------------------------------\n\nTITLE: Basic Carbon DateTime Usage in PHP\nDESCRIPTION: Demonstrates core Carbon functionality including creating dates, adding/subtracting time periods, comparisons, localization, and formatting. Shows various methods for datetime manipulation and human-readable outputs.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nesbot/carbon/readme.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Carbon\\Carbon;\n\nprintf(\"Right now is %s\", Carbon::now()->toDateTimeString());\nprintf(\"Right now in Vancouver is %s\", Carbon::now('America/Vancouver'));  //implicit __toString()\n$tomorrow = Carbon::now()->addDay();\n$lastWeek = Carbon::now()->subWeek();\n$nextSummerOlympics = Carbon::createFromDate(2016)->addYears(4);\n\n$officialDate = Carbon::now()->toRfc2822String();\n\n$howOldAmI = Carbon::createFromDate(1975, 5, 21)->age;\n\n$noonTodayLondonTime = Carbon::createFromTime(12, 0, 0, 'Europe/London');\n\n$internetWillBlowUpOn = Carbon::create(2038, 01, 19, 3, 14, 7, 'GMT');\n\n// Don't really want this to happen so mock now\nCarbon::setTestNow(Carbon::createFromDate(2000, 1, 1));\n\n// comparisons are always done in UTC\nif (Carbon::now()->gte($internetWillBlowUpOn)) {\n    die();\n}\n\n// Phew! Return to normal behaviour\nCarbon::setTestNow();\n\nif (Carbon::now()->isWeekend()) {\n    echo 'Party!';\n}\n// Over 200 languages (and over 500 regional variants) supported:\necho Carbon::now()->subMinutes(2)->diffForHumans(); // '2 minutes ago'\necho Carbon::now()->subMinutes(2)->locale('zh_CN')->diffForHumans(); // '2分钟前'\necho Carbon::parse('2019-07-23 14:51')->isoFormat('LLLL'); // 'Tuesday, July 23, 2019 2:51 PM'\necho Carbon::parse('2019-07-23 14:51')->locale('fr_FR')->isoFormat('LLLL'); // 'mardi 23 juillet 2019 14:51'\n\n// ... but also does 'from now', 'after' and 'before'\n// rolling up to seconds, minutes, hours, days, months, years\n\n$daysSinceEpoch = Carbon::createFromTimestamp(0)->diffInDays();\n```\n\n----------------------------------------\n\nTITLE: Template Injection Syntax Change in Guzzle 2.5.0\nDESCRIPTION: A backward compatibility change showing the transition from double-braces \"{{ }}\" to single-braces \"{}\" syntax for injecting into command or UriTemplates.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* [BC] No longer supporting \"{{ }}\" for injecting into command or UriTemplates.  Use \"{}\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Possibly False Iterator in PHP\nDESCRIPTION: Shows an example where a variable could either be an array or false based on a random condition, which creates a potentially unsafe iteration scenario. The foreach loop could fail if $arr is false.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyFalseIterator.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = rand(0, 1) ? [1, 2, 3] : false;\nforeach ($arr as $a) {}\n```\n\n----------------------------------------\n\nTITLE: Composer Installation Command\nDESCRIPTION: Command to install the Webmozart Assert package using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/webmozart/assert/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require webmozart/assert\n```\n\n----------------------------------------\n\nTITLE: Assigning Property to Non-Object in PHP\nDESCRIPTION: This code example shows an invalid operation where a property 'bar' is being assigned to a string variable '$a'. This will trigger an error since strings are not objects and cannot have properties assigned to them.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = \"foo\";\n$a->bar = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Emitting Mixed Return Statement in PHP\nDESCRIPTION: This snippet defines a PHP function that returns a global variable but may cause a type determination issue, hence leading to a MixedReturnStatement emission. The function is intended to illustrate the problem of returning a global variable without a clear type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedReturnStatement.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : int {\n    return $GLOBALS['foo']; // emitted here\n}\n\n```\n\n----------------------------------------\n\nTITLE: Emitting ImpureStaticVariable Warning in PHP\nDESCRIPTION: This PHP code snippet demonstrates the emission of an ImpureStaticVariable warning by using a static variable in a function marked as pure using the @psalm-pure annotation. The function `addCumulative` contains a static variable that accumulates the input parameter `left`. Because the function is marked pure, any stateful operations like static variables should be avoided to maintain purity. The input is an integer, and the output is the same integer value. There are no external dependencies, but proper understanding of static variables and purity is required.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureStaticVariable.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @psalm-pure */\nfunction addCumulative(int $left) : int {\n    /** @var int */\n    static $i = 0;\n    $i += $left;\n    return $left;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ConstructorSignatureMismatch Error in PHP\nDESCRIPTION: This code snippet shows an example of a ConstructorSignatureMismatch error. Class A has a constructor with an int parameter and is annotated with @psalm-consistent-constructor. Class B extends A but its constructor has a string parameter, causing a mismatch.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ConstructorSignatureMismatch.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * @psalm-consistent-constructor\n */\nclass A {\n    public function __construct(int $i) {}\n}\nclass B extends A {\n    public function __construct(string $s) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using DoctrineCollectionFilter in DeepCopy PHP\nDESCRIPTION: Shows how to use DoctrineCollectionFilter for copying Doctrine entities with collections.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineCollectionFilter;\nuse DeepCopy\\Matcher\\PropertyTypeMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineCollectionFilter(), new PropertyTypeMatcher('Doctrine\\Common\\Collections\\Collection'));\n\n$copy = $copier->copy($object);\n```\n\n----------------------------------------\n\nTITLE: Using KeepFilter in DeepCopy PHP\nDESCRIPTION: Demonstrates how to use KeepFilter to keep specific properties untouched during copying.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\KeepFilter;\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new KeepFilter(), new PropertyMatcher('MyClass', 'category'));\n\n$copy = $copier->copy($object);\n// $copy->category has not been touched\n```\n\n----------------------------------------\n\nTITLE: Changelog for Symfony Finder Component\nDESCRIPTION: A chronological record of changes made to the Symfony Finder component across multiple versions, including feature additions, deprecations, and breaking changes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/finder/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCHANGELOG\n=========\n\n5.4.0\n-----\n\n * Deprecate `Comparator::setTarget()` and `Comparator::setOperator()`\n * Add a constructor to `Comparator` that allows setting target and operator\n * Finder's iterator has now `Symfony\\Component\\Finder\\SplFileInfo` inner type specified\n * Add recursive .gitignore files support\n\n5.0.0\n-----\n\n * added `$useNaturalSort` argument to `Finder::sortByName()`\n\n4.3.0\n-----\n\n * added Finder::ignoreVCSIgnored() to ignore files based on rules listed in .gitignore\n\n4.2.0\n-----\n\n * added $useNaturalSort option to Finder::sortByName() method\n * the `Finder::sortByName()` method will have a new `$useNaturalSort`\n   argument in version 5.0, not defining it is deprecated\n * added `Finder::reverseSorting()` to reverse the sorting\n\n4.0.0\n-----\n\n * removed `ExceptionInterface`\n * removed `Symfony\\Component\\Finder\\Iterator\\FilterIterator`\n\n3.4.0\n-----\n\n * deprecated `Symfony\\Component\\Finder\\Iterator\\FilterIterator`\n * added Finder::hasResults() method to check if any results were found\n\n3.3.0\n-----\n\n * added double-star matching to Glob::toRegex()\n\n3.0.0\n-----\n\n * removed deprecated classes\n\n2.8.0\n-----\n\n * deprecated adapters and related classes\n\n2.5.0\n-----\n * added support for GLOB_BRACE in the paths passed to Finder::in()\n\n2.3.0\n-----\n\n * added a way to ignore unreadable directories (via Finder::ignoreUnreadableDirs())\n * unified the way subfolders that are not executable are handled by always throwing an AccessDeniedException exception\n\n2.2.0\n-----\n\n * added Finder::path() and Finder::notPath() methods\n * added finder adapters to improve performance on specific platforms\n * added support for wildcard characters (glob patterns) in the paths passed\n   to Finder::in()\n\n2.1.0\n-----\n\n * added Finder::sortByAccessedTime(), Finder::sortByChangedTime(), and\n   Finder::sortByModifiedTime()\n * added Countable to Finder\n * added support for an array of directories as an argument to\n   Finder::exclude()\n * added searching based on the file content via Finder::contains() and\n   Finder::notContains()\n * added support for the != operator in the Comparator\n * [BC BREAK] filter expressions (used for file name and content) are no more\n   considered as regexps but glob patterns when they are enclosed in '*' or '?'\n```\n\n----------------------------------------\n\nTITLE: Fetching Undefined Properties with Psalm in PHP\nDESCRIPTION: The snippet demonstrates how PHP, using the Psalm static analysis tool, handles situations where a property is accessed on a variable with a type that cannot be inferred. It highlights potential issues of accessing undefined properties on dynamically typed variables. The expected input is a variable of mixed type, and the function does not return any output. There are no specific dependencies, but using the Psalm tool is suggested for type checking.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @param mixed $a */\nfunction foo($a) : void {\n    echo $a->foo;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using AWS S3 Facade for Static Method Access in PHP\nDESCRIPTION: Example of using the newly added facade classes for S3 that enable static method access to AWS services without instantiating a client directly.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n`S3::putObject([...])`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Duplicate Array Key Issue in PHP\nDESCRIPTION: Example showing how duplicate array keys can occur in PHP associative arrays, where the last value for a duplicate key overwrites previous values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateArrayKey.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = [\n    'a' => 'one',\n    'b' => 'two',\n    'c' => 'this text will be overwritten by the next line',\n    'c' => 'three',\n];\n```\n\n----------------------------------------\n\nTITLE: Namespace Case Mismatch - PHP\nDESCRIPTION: Shows a case sensitivity error in namespace reference where the namespace 'OneTwo' is referenced as 'Onetwo'. Even though the class name 'Three' has correct casing, the namespace reference is incorrect.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidClass.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace OneTwo {\n    class Three {}\n}\n\nnamespace {\n    use Onetwo\\Three;\n    //     ^ (\"t\" instead of \"T\")\n\n    $three = new Three();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Integer Check with Psalm Assertion in PHP\nDESCRIPTION: This snippet demonstrates how to create a custom function to check if a value is an integer, using Psalm's assertion annotation to indicate the expected type.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/assertion_syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/** @psalm-assert-if-true int $x */\nfunction custom_is_int($x) {\n  return is_int($x);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring UnifiedDiffOutputBuilder in PHP\nDESCRIPTION: Demonstrates how to use UnifiedDiffOutputBuilder with custom headers and line number configuration for generating diffs\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/diff/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse SebastianBergmann\\Diff\\Differ;\nuse SebastianBergmann\\Diff\\Output\\UnifiedDiffOutputBuilder;\n\n$builder = new UnifiedDiffOutputBuilder(\n    \"--- Original\\n+++ New\\n\", // custom header\n    false                      // do not add line numbers to the diff \n);\n\n$differ = new Differ($builder);\nprint $differ->diff('foo', 'bar');\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 2.3.4\nDESCRIPTION: Changelog entry documenting changes and fixes to the embed extension in version 2.3.4.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.3.4] - 2022-07-17\n\n### Changed\n\n- Made a number of small tweaks to the embed extension's parsing behavior to fix #898:\n    - Changed `EmbedStartParser` to always capture embed-like lines in container blocks, regardless of parent block type\n    - Changed `EmbedProcessor` to also remove `Embed` blocks that aren't direct children of the `Document`\n    - Increased the priority of `EmbedProcessor` to `1010`\n\n### Fixed\n\n- Fixed `EmbedExtension` not parsing embeds following a list block (#898)\n```\n\n----------------------------------------\n\nTITLE: Converting HTTP Message to String\nDESCRIPTION: Demonstrates using the Message::toString static method to convert a PSR-7 HTTP message to a string representation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$request = new GuzzleHttp\\Psr7\\Request('GET', 'http://example.com');\necho GuzzleHttp\\Psr7\\Message::toString($request);\n```\n\n----------------------------------------\n\nTITLE: Installing Sebastian Type Library - Production Dependency\nDESCRIPTION: Composer command to add the sebastian/type library as a production dependency for a PHP project\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/type/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require sebastian/type\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/code-unit as a development dependency\nDESCRIPTION: This code snippet demonstrates how to install the `sebastian/code-unit` library as a development-time dependency using Composer. This is useful when the library is only needed during development, such as for running tests.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/code-unit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev sebastian/code-unit\n```\n\n----------------------------------------\n\nTITLE: Invalid Case Value in Pure Enum\nDESCRIPTION: Demonstrates incorrect usage of value assignment in a pure enum. Pure enums should not have explicit values assigned to their cases.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status \n{\n    case Open = \"open\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHP Code with Potential Unused Variable\nDESCRIPTION: A simple PHP code snippet that outputs 'Hello, World!'. This example demonstrates code where a variable is declared and used, contrasting with the unused variable being described in the UnusedBaselineEntry documentation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedBaselineEntry.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$a = 'Hello, World!';\necho $a;\n```\n\n----------------------------------------\n\nTITLE: Emitting Unevaluated Code Warning in PHP with Psalm\nDESCRIPTION: This snippet demonstrates a PHP function where a line of code will not be executed due to the `return` statement preceding it. When using Psalm with the `--find-dead-code` option, it will emit a warning for such unreachable code. This helps in identifying and cleaning up dead code in a codebase.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnevaluatedCode.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nfunction foo() : void {\n    return;\n    $a = \"foo\";\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MixedFunctionCall Issue in PHP\nDESCRIPTION: This code snippet illustrates a scenario where Psalm would emit a MixedFunctionCall error. It shows a variable with a mixed type being called as a function, which Psalm cannot statically analyze for correctness.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @var mixed */\n$a = $GLOBALS['foo'];\n$a();\n```\n\n----------------------------------------\n\nTITLE: Configuring traffic shaping\nDESCRIPTION: Illustrates the command-line to pidriver.sh for configuring traffic shaping on a device using the ipfw_config.py script. This includes specifying the server, down_pipe, up_pipe, and action.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n\"--trafficShaper \\\"python,ipfw_config.py,--server,192.168.0.199,--down_pipe,15,--up_pipe,315,--action\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using PHP XDG Base Directory Methods\nDESCRIPTION: Example demonstrating how to use the XDG class methods to retrieve various directory paths and configurations. Shows usage of both single directory getters and methods that return arrays of directories.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/dnoegel/php-xdg-base-dir/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$xdg = new \\XdgBaseDir\\Xdg();\n\necho $xdg->getHomeDir();\necho $xdg->getHomeConfigDir();\necho $xdg->getHomeDataDir();\necho $xdg->getHomeCacheDir();\necho $xdg->getRuntimeDir();\n\nprint_r($xdg->getDataDirs()); // returns array\nprint_r($xdg->getConfigDirs()); // returns array\n```\n\n----------------------------------------\n\nTITLE: Declaring Enum with Invalid Backing Type\nDESCRIPTION: Demonstrates an enum definition using an array as a backing type, which is not allowed in PHP. Only int and string are permitted as enum backing types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumBackingType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nenum Status: array \\n{\\n   case None = [];\\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Classes Between Namespaces with Psalm\nDESCRIPTION: This command moves all classes from one namespace to another using Psalm's refactoring tool. It demonstrates how to move entire namespaces and individual classes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/refactoring.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-refactor --move \"Ns1\\*\" --into \"Some\\Other\\Namespace\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-refactor --move \"Ns1\\Foo\" --into \"Ns2\"\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-internal to Restrict Access to Internal Elements in PHP\nDESCRIPTION: Shows how to use @psalm-internal to mark classes, properties, or functions as internal to a specific namespace. This controls which parts of the codebase can access these elements.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace A\\B {\n    /**\n    * @internal\n    * @psalm-internal A\\B\n    */\n    class Foo { }\n}\n\nnamespace A\\B\\C {\n    class Bat {\n        public function batBat(): void {\n            $a = new \\A\\B\\Foo();  // this is fine\n        }\n    }\n}\n\nnamespace A\\C {\n    class Bat {\n        public function batBat(): void {\n            $a = new \\A\\B\\Foo();  // error\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Doctrine Repository\nDESCRIPTION: Command to clone the Doctrine instantiator repository from GitHub.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone git://github.com/doctrine/instantiator.git\n```\n\n----------------------------------------\n\nTITLE: Invalid Class Initialization Using String in PHP\nDESCRIPTION: This PHP snippet demonstrates an invalid class initialization where a string is passed instead of a class reference. The snippet will throw an error when executed due to the configuration setting that does not allow strings to stand in for classes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidStringClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Foo {}\n$a = \"Foo\";\nnew $a();\n```\n\n----------------------------------------\n\nTITLE: Setting Credentials on a Client (PHP)\nDESCRIPTION: This snippet shows the use of `$client->setCredentials()` to easily change the credentials that a client uses. This allows dynamic credential updates.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\"$client->setCredentials()\"\n```\n\n----------------------------------------\n\nTITLE: Direct Class Instantiation Case Mismatch - PHP\nDESCRIPTION: Demonstrates an error case where a class is instantiated using incorrect letter casing. The class 'Foo' is defined with capital 'F' but instantiated with lowercase 'foo'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Foo {}\n(new foo());\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit toString Conversion Issue in PHP\nDESCRIPTION: Shows a problematic case where an object with __toString method is implicitly converted to string when passed to a function requiring a string parameter. This pattern may cause issues and is considered bad practice.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImplicitToStringCast.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function __toString() {\n        return \"foo\";\n    }\n}\n\nfunction takesString(string $s) : void {}\n\ntakesString(new A);\n```\n\n----------------------------------------\n\nTITLE: Suppressing Unused Variable Warning in PHP\nDESCRIPTION: Shows how to suppress the unused variable warning by prefixing the variable name with an underscore. This is a common convention to indicate that a variable is intentionally unused.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedVariable.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$_a = 22;\n```\n\n----------------------------------------\n\nTITLE: Example of Taint Issue Without Specialization in PHP\nDESCRIPTION: Demonstrates a false-positive case where Psalm incorrectly flags untainted input as tainted because the function doesn't use taint specialization.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction takesInput(string $s) : string {\n    return $s;\n}\n\necho htmlentities(takesInput($_GET[\"name\"]));\necho takesInput(\"hello\"); // Psalm detects tainted HTML here\n```\n\n----------------------------------------\n\nTITLE: Software Installation Commands\nDESCRIPTION: Commands for installing required dependencies including Python packages, NodeJS, and development tools\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get upgrade\nsudo apt-get -y --force-yes install git screen libtiff5-dev libjpeg-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk python-pip libtiff5-dev libjpeg-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk python-dev libavutil-dev libmp3lame-dev libx264-dev yasm git autoconf automake build-essential libass-dev libfreetype6-dev libtheora-dev libtool libvorbis-dev pkg-config texi2html zlib1g-dev libtext-unidecode-perl android-tools-adb imagemagick python-numpy python-scipy\nsudo pip install psutil pillow pyssim ujson\ncurl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -\nsudo apt-get install -y nodejs\nsudo npm install -g lighthouse\n```\n\n----------------------------------------\n\nTITLE: Guzzle 6 Middleware-based Request Modification\nDESCRIPTION: Example showing how to modify requests in Guzzle 6 using the middleware system. Guzzle 6 replaced the event system with a middleware stack that works with immutable PSR-7 request objects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Middleware;\n// Create a handler stack that has all of the default middlewares attached\n$handler = GuzzleHttp\\HandlerStack::create();\n// Push the handler onto the handler stack\n$handler->push(Middleware::mapRequest(function (RequestInterface $request) {\n    // Notice that we have to return a request object\n    return $request->withHeader('X-Foo', 'Bar');\n}));\n// Inject the handler into the client\n$client = new GuzzleHttp\\Client(['handler' => $handler]);\n```\n\n----------------------------------------\n\nTITLE: Manual Installation via Source\nDESCRIPTION: Code snippet showing how to include Sodium Compat when installed from source.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"/path/to/sodium_compat/autoload.php\";\n```\n\n----------------------------------------\n\nTITLE: MissingReturnType Fix Example\nDESCRIPTION: Demonstrates how Psalter adds return type hints for PHP 7.0 and docblock annotations for PHP 5.6\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/fixing.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo() {\n  return \"hello\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction foo() : string {\n  return \"hello\";\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @return string\n */\nfunction foo() {\n  return \"hello\";\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Magic Method Implementation in PHP Enum\nDESCRIPTION: Example showing incorrect usage of __toString magic method in a PHP enum. PHP enums are not allowed to implement most magic methods including __get, __toString, and others. The code demonstrates a Status enum that incorrectly tries to define a __toString method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nenum Status: string {\n    case Open = 'open';\n    case Closed = 'closed';\n\n    public function __toString(): string {\n        return \"SomeStatus\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixed Pure Enum Without Value\nDESCRIPTION: Demonstrates the correct implementation of a pure enum without value assignment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status \n{\n    case Open;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing an Undefined Constant in PHP\nDESCRIPTION: This PHP code snippet demonstrates referencing an undefined constant, `FOO_BAR`. In PHP versions before 8.0, this would result in a notice and the constant name being treated as a string. In PHP 8.0 and later, this will trigger a more strict error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedConstant.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\necho FOO_BAR;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Used and Unused Private Methods in PHP with Psalm Analysis\nDESCRIPTION: This example illustrates a class with both a used private method (foo) and an unused private method (bar). When analyzed with Psalm's '--find-dead-code' option, the 'bar' method would trigger an UnusedMethod error. The example also shows that method usage through class instantiation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function __construct() {\n        $this->foo();\n    }\n    private function foo() : void {}\n    private function bar() : void {}\n}\n$a = new A();\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using a Deprecated Trait in PHP\nDESCRIPTION: This snippet demonstrates how to declare a deprecated trait using the @deprecated annotation and how it is used in a class. It serves as an example of what should be avoided in code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DeprecatedTrait.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @deprecated */\ntrait T {}\nclass A {\n    use T;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Immutable Interface Without @psalm-immutable Annotation in PHP\nDESCRIPTION: This snippet demonstrates a class implementing an immutable interface without properly declaring itself as immutable. The MutableImplementation class fails to include the @psalm-immutable annotation, leading to potential immutability violations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingImmutableAnnotation.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @psalm-immutable */\ninterface SomethingImmutable {\n    public function someInteger() : int;\n}\n\nclass MutableImplementation implements SomethingImmutable {\n    private int $counter = 0;\n    public function someInteger() : int {\n        return ++$this->counter;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Library via Composer - Development Dependency\nDESCRIPTION: This code snippet shows how to add the sebastian/complexity library as a development dependency using Composer, useful for running tests without including it in the production environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/complexity/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\"composer require --dev sebastian/complexity\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecated Warnings in Guzzle\nDESCRIPTION: This snippet enables E_USER_DEPRECATED warnings to notify users of deprecated methods being used in the Guzzle library. It provides a means to assist with migration to newer methods.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\\Guzzle\\Common\\Version::$emitWarnings = true;\n```\n\n----------------------------------------\n\nTITLE: Installing PHP GraphQL Client via Composer\nDESCRIPTION: Command to install the PHP GraphQL client package using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require gmostafa/php-graphql-client\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MoreSpecificImplementedParamType in PHP Class Inheritance\nDESCRIPTION: This example shows how a child class (E) overrides a parent class (D) method but narrows the parameter type through a PHPDoc annotation. While the method signature remains the same (accepting type A), the implementation in class E expects more specific types (B or C) that have the 'bar' method available.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MoreSpecificImplementedParamType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B extends A {\n    public function bar(): void {}\n}\nclass C extends A {\n    public function bar(): void {}\n}\n\nclass D {\n    public function foo(A $a): void {}\n}\n\nclass E extends D {\n    /** @param B|C $a */\n    public function foo(A $a): void {\n        $a->bar();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Guzzle Service Description - Command to Operation (After)\nDESCRIPTION: This PHP snippet illustrates the updated way of using `Guzzle\\Service\\Description\\ServiceDescription` with the `OperationInterface`. It demonstrates how to get operations, check for an operation's existence, retrieve a specific operation, and add a new operation using the `OperationInterface`. The term 'Command' is replaced by 'Operation'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n$sd = new ServiceDescription();\n$sd->getOperations();           // @returns OperationInterface[]\n$sd->hasOperation($name);\n$sd->getOperation($name);       // @returns OperationInterface|null\n$sd->addOperation($operation);  // @param OperationInterface $operation\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Circular Reference in PHP Class Inheritance\nDESCRIPTION: This code snippet shows an example of circular reference in PHP class inheritance. Class A extends class B, while class B extends class A, creating a circular dependency that will cause a compilation error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/CircularReference.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A extends B {}\nclass B extends A {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnsafeInstantiation in PHP with 'new static()'\nDESCRIPTION: This example shows a class A that has a getInstance method returning a new instance using 'new static()', which can cause problems when the class is extended.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnsafeInstantiation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function getInstance() : self\n    {\n        return new static();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnusedClosureParam Error in PHP Closures\nDESCRIPTION: This example shows a closure with an unused parameter ($b) that would trigger the UnusedClosureParam error when Psalm's --find-dead-code option is enabled. The closure only uses the $a parameter but also accepts $b.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedClosureParam.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = function (int $a, int $b) : int {\n    return $a + 4;\n};\n\n/**\n * @param callable(int,int):int $c\n */\nfunction foo(callable $c) : int {\n    return $c(2, 4);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Conditional Type Implementation in PHP\nDESCRIPTION: An example of a userland implementation of PHP's numeric addition that uses conditional types to specify the return type based on the input type. This demonstrates how Psalm infers the result type when the function is called with different argument types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/conditional_types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T of int|float\n * @param T $a\n * @param T $b\n * @return int|float\n * @psalm-return (T is int ? int : float)\n */\nfunction add($a, $b) {\n    return $a + $b;\n}\n```\n\n----------------------------------------\n\nTITLE: Workaround: @no-named-arguments Annotation\nDESCRIPTION: Uses a Psalm annotation to prevent named parameter calls on a specific method, bypassing the parameter name mismatch issue\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParamNameMismatch.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @no-named-arguments */\n    public function foo(string $str, bool $b = false) : void {}\n}\n\nclass AChild extends A {\n    public function foo(string $string, bool $b = false) : void {}\n}\n```\n\n----------------------------------------\n\nTITLE: CacheStorageInterface::delete signature change\nDESCRIPTION: Demonstrates how the signature for `CacheStorageInterface::delete` has changed. The new signature takes the `RequestInterface` object as input instead of just the key.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n\"`CacheStorageInterface::delete($key)` has changed to `delete(RequestInterface $request);`\"\n```\n\n----------------------------------------\n\nTITLE: Checking Variable Type in PHP\nDESCRIPTION: This snippet checks whether the variable '$a' has an impossible type or value condition. It compares a string '$a' initialized to 'hello' against an integer value '5', which will never evaluate to true, illustrating type checking behavior in PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TypeDoesNotContainType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = \"hello\";\nif ($a === 5) {}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ExtensionRequirementViolation in PHP Traits\nDESCRIPTION: Shows how the ExtensionRequirementViolation error is triggered when class B uses trait T without extending the required class A. The trait T specifies that any using class must extend class A through the @psalm-require-extends annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ExtensionRequirementViolation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A { }\n\n/**\n * @psalm-require-extends A\n */\ntrait T { }\n\nclass B {\n  // ExtensionRequirementViolation is emitted, as T requires\n  // the using class B to extend A, which is not the case\n  use T; \n}\n```\n\n----------------------------------------\n\nTITLE: Including Phar Archive\nDESCRIPTION: PHP code to include the verified Phar archive in your application.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once \"/path/to/sodium-compat.phar\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MixedInferredReturnType Error in PHP\nDESCRIPTION: This example shows a function that declares an integer return type but returns a value from $GLOBALS['foo'] which has an unknown or mixed type. Psalm cannot guarantee the global variable will contain an integer, leading to a potential type mismatch at runtime.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedInferredReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : int {\n    return $GLOBALS['foo'];\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnusedConstructor Error in PHP with Psalm\nDESCRIPTION: This example shows a class with a private constructor that is never used, which would trigger the UnusedConstructor error when running Psalm with the --find-dead-code flag. The class provides a static factory method but the constructor itself is not called anywhere.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedConstructor.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    private function __construct() {}\n\n    public static function createInstance() : void {}\n}\nA::createInstance();\n```\n\n----------------------------------------\n\nTITLE: Invalid Property Definition on PHP Enum Example\nDESCRIPTION: This code snippet demonstrates an invalid PHP pattern where a property is defined on an enum type. PHP does not allow user-defined properties on enums, which would trigger the 'NoEnumProperties' validation check.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NoEnumProperties.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status {\n    public $prop;\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Stream to String with GuzzleHttp\\Psr7\\Utils::copyToString\nDESCRIPTION: This method copies the contents of a stream into a string until the given number of bytes have been read. It accepts a StreamInterface object and an optional maximum length, returning the resulting string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n`public static function copyToString(StreamInterface $stream, int $maxLen = -1): string`\n```\n\n----------------------------------------\n\nTITLE: Handling Class Constant Type Conflicts in PHP\nDESCRIPTION: This PHP code snippet illustrates a situation where a child class does not match the constant type specified in a parent class, leading to an error when invoking functions dependent on these constants. It demonstrates the need for type annotations to guide tools like Psalm in correctly understanding constant types. Required environment includes PHP and Psalm for static analysis. The code uses classes Foo and Bar, each defining a constant with different types, affecting function behavior. The `Bar::bar()` call results in an error due to mismatched expectations on `str_split` parameters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidClassConstantType.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass Foo\n{\n    /** @var int<1,max> */\n    public const CONSTANT = 3;\n\n    public static function bar(): array\n    {\n        return str_split(\"foobar\", static::CONSTANT);\n    }\n}\n\nclass Bar extends Foo\n{\n    /** @var int<min,-1> */\n    public const CONSTANT = -1;\n}\n\nBar::bar(); // Error: str_split argument 2 must be greater than 0\n\n```\n\n----------------------------------------\n\nTITLE: Maintaining Function Purity in PHP\nDESCRIPTION: This PHP code snippet corrects a previous impure example by eliminating the assignment inside the function, thus adhering to the purity constraint. The function now returns the unmodified reference value, maintaining its pure annotation by avoiding side effects or state changes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureByReferenceAssignment.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * @psalm-pure\n */\nfunction foo(string \\&$a): string {\n    return $a;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Psalm Language Server in Sublime Text\nDESCRIPTION: The JSON configuration for Sublime Text integrates Psalm Language Server using the LSP plugin. It specifies the command to start the server and the applicable file types. The plugin must be enabled for this setup to function.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/language_server.md#2025-04-21_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"clients\": {\n    \"psalm\": {\n        \"command\": [\"php\", \"vendor/bin/psalm-language-server\"],\n        \"selector\": \"source.php | embedding.php\",\n        \"enabled\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Composer XdebugHandler via Composer\nDESCRIPTION: Command to install the latest version of composer/xdebug-handler package using Composer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/xdebug-handler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require composer/xdebug-handler\n```\n\n----------------------------------------\n\nTITLE: Detecting PHP Docblock Parameter Type Mismatch\nDESCRIPTION: Illustrates a scenario where the documented parameter type in the docblock does not match the actual function parameter type hint\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MismatchingDocblockParamType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @param int $b\n */\nfunction foo(string $b) : void {}\n```\n\n----------------------------------------\n\nTITLE: Using Cookie builder methods (PHP)\nDESCRIPTION: Introduces fluent interface methods for building Cookie objects, such as withValue(), withDomain(), withExpires(), etc.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-foundation/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$cookie = Cookie::create('name')\n    ->withValue('value')\n    ->withDomain('example.com')\n    ->withExpires(time() + 3600)\n    ->withSecure(true);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating InvalidGlobal Error in PHP\nDESCRIPTION: Shows an example of code that triggers the InvalidGlobal error by using the global keyword to access a variable. This pattern may need to be suppressed if the file is included from a non-global scope.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidGlobal.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nglobal $e;\n```\n\n----------------------------------------\n\nTITLE: Adding Undefined Property to PHP Class Instance\nDESCRIPTION: Shows how PHP allows dynamically adding properties to an object that were not originally defined in the class definition. This demonstrates PHP's loose typing and dynamic property assignment capabilities.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedPropertyAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nclass A {}\\n$a = new A();\\n$a->foo = \"bar\";\n```\n\n----------------------------------------\n\nTITLE: Installing Resource Operations via Composer - Development Dependency\nDESCRIPTION: This code snippet demonstrates how to add the resource operations library as a development-time dependency in a PHP project using Composer. This is useful for running tests without including the library in the production build.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/resource-operations/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require --dev sebastian/resource-operations\n```\n\n----------------------------------------\n\nTITLE: Runtime Performance Check\nDESCRIPTION: Code to check if sodium_compat will be slow at runtime using the polyfill_is_fast() method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif (ParagonIE_Sodium_Compat::polyfill_is_fast()) {\n    // Use libsodium now\n    $process->execute();\n} else {\n    // Defer to a cron job or other sort of asynchronous process\n    $process->enqueue();\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON request body to array (PHP)\nDESCRIPTION: Adds Request::toArray() method to parse a JSON request body into an array.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-foundation/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$request = Request::createFromGlobals();\n$data = $request->toArray();\n```\n\n----------------------------------------\n\nTITLE: CacheStorageInterface::fetch signature change\nDESCRIPTION: Demonstrates how the signature for `CacheStorageInterface::fetch` has changed. The new signature takes the `RequestInterface` object as input instead of just the key.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n\"`CacheStorageInterface::fetch($key)` has changed to `fetch(RequestInterface $request);`\"\n```\n\n----------------------------------------\n\nTITLE: Emitting Event on Null Check for Non-Nullable Type in PHP\nDESCRIPTION: This PHP snippet checks whether a non-nullable type is mistakenly compared to null, potentially emitting a TypeDoesNotContainNull event. It highlights the risks of inadvertently treating not null-typed variables as potentially null, ensuring more robust type safety. The code checks a string variable against null, though non-nullable types should not allow such comparisons.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TypeDoesNotContainNull.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = \\\"hello\\\";\nif ($a === null) {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ParadoxicalCondition in PHP Function\nDESCRIPTION: This PHP function demonstrates a paradoxical condition where the second if statement can never be reached due to identical conditions in both if and elseif clauses. This triggers the ParadoxicalCondition issue.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParadoxicalCondition.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo($a, $b) : void {\n    if ($a && $b) {\n        echo \"a\";\n    } elseif ($a && $b) {\n        echo \"cannot happen\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reference Constraint Conflict in PHP\nDESCRIPTION: Example showing how using by-reference variables with different types in conditional branches creates type conflicts. The code demonstrates assigning an integer and string reference to the same variable in different branches, which causes issues with type inference.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ConflictingReferenceConstraint.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n class A {\n    /** @var int */\n    private $foo;\n\n    public function __construct(int &$foo) {\n        $this->foo = &$foo;\n    }\n}\n\nclass B {\n    /** @var string */\n    private $bar;\n\n    public function __construct(string &$bar) {\n        $this->bar = &$bar;\n    }\n}\n\nif (rand(0, 1)) {\n    $v = 5;\n    $c = (new A($v)); // $v is constrained to an int\n} else {\n    $v = \"hello\";\n    $c = (new B($v)); // $v is constrained to a string\n}\n\n$v = 8;\n```\n\n----------------------------------------\n\nTITLE: PHPUnit 8.5 Changelog Entry Format\nDESCRIPTION: Standard format used for documenting changes in PHPUnit 8.5 releases, following Keep a CHANGELOG principles.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/phpunit/ChangeLog-8.5.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [8.5.27] - 2022-06-19\n\n### Fixed\n\n* [#4950](https://github.com/sebastianbergmann/phpunit/issues/4950): False error on `atMost()` invocation rule without call\n* [#4962](https://github.com/sebastianbergmann/phpunit/issues/4962): Ukraine banner unreadable on white background\n```\n\n----------------------------------------\n\nTITLE: Instantiating Undefined PHP Class\nDESCRIPTION: Attempts to create an instance of a class 'A' that has not been defined, which will result in a runtime error or exception\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = new A();\n```\n\n----------------------------------------\n\nTITLE: Tracing Undefined Variable with Psalm in PHP\nDESCRIPTION: This snippet demonstrates tracing a non-existing variable `$x` using the `@psalm-trace` annotation in PHP. Psalm will flag this as an error because the variable is not defined, aiding in debugging and code analysis. The suggestion is to either define the variable or remove the Psalm trace directive.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedTrace.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @psalm-trace $x */\necho 'Hello World!';\n\n```\n\n----------------------------------------\n\nTITLE: Guzzle Exponential Backoff Plugin (Before)\nDESCRIPTION: This PHP snippet demonstrates how to use the `ExponentialBackoffPlugin` in older Guzzle versions. It creates a new instance of the plugin with a maximum number of retries and an array of failure codes, including default failure codes and a custom 429 code.  `Guzzle\\Http\\Plugin\\ExponentialBackoffPlugin` is used.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Http\\Plugin\\ExponentialBackoffPlugin;\n\n$backoffPlugin = new ExponentialBackoffPlugin($maxRetries, array_merge(\n        ExponentialBackoffPlugin::getDefaultFailureCodes(), array(429)\n    ));\n\n$client->addSubscriber($backoffPlugin);\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Undefined Docblock Class in PHP\nDESCRIPTION: This PHP code snippet defines a function `foo` that takes a parameter `$a`. The docblock for the parameter specifies that it should be an instance of the class `DoesNotExist`. However, the `DoesNotExist` class is not defined anywhere in the code, which will trigger the UndefinedDocblockClass error during static analysis.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedDocblockClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @param DoesNotExist $a\n */\nfunction foo($a) : void {}\n\n```\n\n----------------------------------------\n\nTITLE: Assigning Passed-by-Reference Variables in PHP\nDESCRIPTION: This snippet demonstrates a PHP function marked as pure, which incorrectly assigns a new value to a passed-by-reference variable. The function attempts to modify its parameter directly, which contradicts its pure annotation, indicating it should have no side effects. The snippet highlights the improper coding practice, suggesting a focus on function purity.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureByReferenceAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/**\n * @psalm-pure\n */\nfunction foo(string \\&$a): string {\n    $a = \"B\";\n    return $a;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-immutable for Taint Specialization in Classes in PHP\nDESCRIPTION: Shows how the @psalm-immutable annotation can be used on classes to achieve taint specialization, since immutability is a form of purity enforcement in Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @psalm-immutable\n */\nclass User {\n    public string $name;\n\n    public function __construct(string $name) {\n        $this->name = $name;\n    }\n}\n\n/**\n * @psalm-taint-specialize\n */\nfunction echoUserName(User $user) {\n    echo $user->name; // No error\n}\n\n$user1 = new User(\"Keith\");\n$user2 = new User($_GET[\"name\"]);\n\nechoUserName($user1);\n```\n\n----------------------------------------\n\nTITLE: Installing PHP File Iterator as Dev Dependency\nDESCRIPTION: Command to install PHP File Iterator as a development-only dependency using Composer package manager, suitable for test environments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-file-iterator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpunit/php-file-iterator\n```\n\n----------------------------------------\n\nTITLE: Detecting Redundant String Cast in PHP Function\nDESCRIPTION: Demonstrates a PHP function with a redundant string type cast that can be flagged by static analysis tools. The function takes a string parameter and returns a string, making the explicit (string) cast unnecessary.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantCastGivenDocblockType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @param  string $s\n */\nfunction foo($s) : string {\n    return (string) $s;\n}\n```\n\n----------------------------------------\n\nTITLE: PHP IDN Function References\nDESCRIPTION: References to the core PHP IDN conversion functions that this polyfill implements - idn_to_ascii for converting internationalized domain names to ASCII and idn_to_utf8 for converting to UTF-8.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/polyfill-intl-idn/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`idn_to_ascii`\n`idn_to_utf8`\n```\n\n----------------------------------------\n\nTITLE: Casting Object to String in PHP\nDESCRIPTION: This PHP code snippet demonstrates attempting to cast an object of class 'A' to a string.  This will result in an error because objects cannot directly be converted to strings. The code defines a simple class `A`, instantiates it, and then attempts to cast the instance to a string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidCast.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {}\n$a = new A();\n$b = (string)$a;\n```\n\n----------------------------------------\n\nTITLE: Referencing a Non-Existent Function in PHP\nDESCRIPTION: This snippet illustrates an error scenario where a function 'foo()' is called but not defined, resulting in an 'UndefinedFunction' error. The purpose of the snippet is to demonstrate how undefined functions are handled in PHP. There are no external dependencies, and the snippet expects to execute within a PHP environment where error handling for undefined functions is active.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedFunction.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfoo();\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating InvalidOperand Error with Object String Concatenation in PHP\nDESCRIPTION: Creates a simple class A and attempts to concatenate an instance of it with a string using the concatenation operator. This operation will fail because the object cannot be automatically converted to a string without implementing __toString() method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidOperand.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\necho (new A) . ' ';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NullArrayOffset Error in PHP\nDESCRIPTION: This code snippet illustrates how a NullArrayOffset error is triggered in PHP. It creates an array with string keys and attempts to access an element using null as the key, which results in the error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NullArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = ['' => 5, 'foo' => 1];\necho $arr[null];\n```\n\n----------------------------------------\n\nTITLE: Creating a BufferStream with Size Limit\nDESCRIPTION: Shows how to create a BufferStream with a specified high water mark (maximum buffer size) to control memory usage.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Psr7;\n\n// When more than 1024 bytes are in the buffer, it will begin returning\n// false to writes. This is an indication that writers should slow down.\n$buffer = new Psr7\\BufferStream(1024);\n```\n\n----------------------------------------\n\nTITLE: Setting Alias via Setter Method in QueryBuilder for PHP GraphQL\nDESCRIPTION: Shows how to set an alias using the setter method when constructing a GraphQL query with QueryBuilder.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n$builder = (new QueryBuilder('companies'))\n    ->setAlias('CompanyAlias')\n    ->selectField('name')\n    ->selectField('serialNumber');\n\n$gql = $builder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Accessing Undefined Array Offset on Global Variable in PHP\nDESCRIPTION: This example demonstrates a case where Psalm would emit a MixedArrayAccess error. The code attempts to access an array offset on $GLOBALS['foo'], but Psalm cannot determine the type of this global variable at analysis time.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedArrayAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\necho $GLOBALS['foo'][0];\n```\n\n----------------------------------------\n\nTITLE: Incorrect Return Type Implementation in PHP Class Inheritance\nDESCRIPTION: Demonstrates incorrect implementation where child class return type does not match parent class. This violates the Liskov substitution principle by changing return type from bool to string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImplementedReturnTypeMismatch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @return bool */\n    public function foo() {\n        return true;\n    }\n}\nclass B extends A {\n    /** @return string */\n    public function foo()  {\n        return \"hello\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Impure Variable in Pure Method - PHP Class Example\nDESCRIPTION: Shows a PHP class definition where a method marked as @psalm-pure returns $this, which could be considered impure since the class contains mutable state (public property $a). This demonstrates a potential purity violation in type checking.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureVariable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public int $a = 5;\n\n    /**\n     * @psalm-pure\n     */\n    public function foo() : self {\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Object Enumerator as Development Dependency\nDESCRIPTION: Composer command to add the object enumerator library as a development-time dependency for testing and development purposes\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-enumerator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev sebastian/object-enumerator\n```\n\n----------------------------------------\n\nTITLE: Cloning String Primitive in PHP\nDESCRIPTION: Demonstrates an invalid attempt to clone a string primitive value in PHP. This operation will trigger an InvalidClone exception since primitive types are not cloneable objects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidClone.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = \"hello\";\n$b = clone $a;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MissingFile Exception in PHP\nDESCRIPTION: This code snippet demonstrates how to trigger a MissingFile exception by attempting to require a non-existent PHP file. The 'require' function is used to include an external file, but since 'nonexistent.php' does not exist, it will result in a fatal error.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingFile.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire(\"nonexistent.php\");\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 5.1.0 Changes in Markdown\nDESCRIPTION: Lists the addition of RdKafka support in version 5.1.0 of the VarDumper component.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n5.1.0\n-----\n\n * added `RdKafka` support\n```\n\n----------------------------------------\n\nTITLE: Setting Alias in QueryBuilder Constructor for PHP GraphQL\nDESCRIPTION: Demonstrates how to set an alias using the QueryBuilder constructor when creating a GraphQL query.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$builder = (new QueryBuilder('companies', 'CompanyAlias'))\n    ->selectField('name')\n    ->selectField('serialNumber');\n\n$gql = $builder->getQuery();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating InvalidMethodCall Exception in PHP\nDESCRIPTION: Shows an example that triggers an InvalidMethodCall exception by attempting to call a method 'foo()' on an integer variable. This code will fail because integers are primitive types and don't support method calls.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidMethodCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = 5;\n$a->foo();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating LessSpecificClassConstantType Error in PHP\nDESCRIPTION: This example shows how a less specific constant type in a child class can cause runtime errors. The parent class Foo defines a constant with a specific type constraint (int<1,max>), while the child class Bar overrides it with a less specific type (int) that allows negative values, causing str_split() to fail.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/LessSpecificClassConstantType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Foo\n{\n    /** @var int<1,max> */\n    public const CONSTANT = 3;\n\n    public static function bar(): array\n    {\n        return str_split(\"foobar\", static::CONSTANT);\n    }\n}\n\nclass Bar extends Foo\n{\n    /** @var int */\n    public const CONSTANT = -1;\n}\n\nBar::bar(); // Error: str_split argument 2 must be greater than 0\n```\n\n----------------------------------------\n\nTITLE: Emitting InaccessibleProperty Error - PHP\nDESCRIPTION: This snippet demonstrates the error emitted when attempting to access a protected property 'foo' from an instance of class 'A'. The property is defined as protected, making it inaccessible from outside the class's scope, which results in an error during execution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InaccessibleProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @return string */\n    protected $foo;\n}\necho (new A)->foo;\n\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Linux\nDESCRIPTION: These commands are used to execute the PHPUnit tests within a Linux environment. They assume that PHPUnit is installed either globally or via Composer. The `vendor/bin/phpunit` command directly invokes the PHPUnit executable, while `composer phpunit` uses a Composer script to run the tests.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/validation/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ vendor/bin/phpunit\n```\n\nLANGUAGE: sh\nCODE:\n```\n$ composer phpunit\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of 'continue' Outside Loop in PHP\nDESCRIPTION: This code snippet shows an example of using a 'continue' statement outside of a loop context, which is incorrect and will cause a compilation error in PHP 5.6 and above.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ContinueOutsideLoop.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = 5;\ncontinue;\n```\n\n----------------------------------------\n\nTITLE: Installing object-reflector with Composer\nDESCRIPTION: This snippet shows how to install the sebastian/object-reflector library as a project dependency using Composer.  It fetches the package and its dependencies from Packagist and adds them to the project's vendor directory and composer.json file.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require sebastian/object-reflector\n```\n\n----------------------------------------\n\nTITLE: Missing Value in Backed Enum\nDESCRIPTION: Shows incorrect implementation of a backed enum where a required value is missing for the case.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: string \n{\n    case Open;    \n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NonInvariantDocblockPropertyType Error in PHP\nDESCRIPTION: Example showing a parent class with a nullable string property and a child class that incorrectly narrows the type to just string in its docblock, causing a type system violation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NonInvariantDocblockPropertyType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var null|string */\n    public $foo = 'hello';\n}\n\nclass AChild extends A {\n    /** @var string */\n    public $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Guzzle 5 Event-based Request Modification\nDESCRIPTION: Example showing how requests were modified in Guzzle 5 using the event system. The event system allowed modifying requests by attaching listeners to the 'before' event.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse GuzzleHttp\\Event\\BeforeEvent;\n$client = new GuzzleHttp\\Client();\n// Get the emitter and listen to the before event.\n$client->getEmitter()->on('before', function (BeforeEvent $e) {\n    // Guzzle v5 events relied on mutation\n    $e->getRequest()->setHeader('X-Foo', 'Bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Unaccent Method in PHP\nDESCRIPTION: Demonstrates how to use the unaccent method to remove accents from a string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/inflector/docs/en/index.rst#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\necho $inflector->unaccent('año'); // ano\n```\n\n----------------------------------------\n\nTITLE: Creating a Command in Guzzle Client\nDESCRIPTION: This snippet demonstrates how to create a command using Guzzle's client. It shows the recommended way to set request headers and response handling for a command after deprecations of previous methods.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$command = $client->getCommand('foo', array(\n            'command.request_options' => array(\n                'headers' => array('Test' => '123'),\n                'save_as' => '/path/to/file'\n            )\n        ));\n```\n\n----------------------------------------\n\nTITLE: Creating GraphQL Query with Variables in PHP\nDESCRIPTION: Shows how to use variables in a GraphQL query to allow for dynamic requests, including optional variables with default values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setVariables(\n        [\n            new Variable('name', 'String', true),\n            new Variable('limit', 'Int', false, 5)\n        ]\n    )\n    ->setArguments(['name' => '$name', 'first' => '$limit'])\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Emitting Undefined Method Error in PHP Class\nDESCRIPTION: This snippet demonstrates the occurrence of an Undefined Method error when calling a method that does not exist within a PHP class. It requires no external dependencies and serves as a simple illustration of PHP's error behavior when invoking a non-existent method. The demonstrated behavior is typical of PHP object-oriented programming, where a class is defined and an undefined method is attempted to be called.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {}\nA::foo();\n\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying Psalm Configuration in PHP Plugins\nDESCRIPTION: This PHP snippet demonstrates how to access and modify the global Psalm configuration within a plugin. It retrieves the singleton instance of the `Psalm\\Config` class and modifies the `globals` array to add or update the type definition for a global variable, such as `$GLOBALS`.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$config = \\Psalm\\Config::getInstance();\nif (!isset($config->globals['$GLOBALS'])) {\n    $config->globals['$GLOBALS'] = 'array{data: array<string, string>}';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Table of Contents Tree in restructuredtext\nDESCRIPTION: This directive sets up the documentation table of contents tree with a maximum depth of 3 levels and includes only the index page. The toctree directive is a core Sphinx feature for organizing documentation structure.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/docs/en/sidebar.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n    :depth: 3\n\n    index\n```\n\n----------------------------------------\n\nTITLE: Defining an Impure Function in PHP\nDESCRIPTION: This snippet defines a function 'impure' that modifies its input array and maintains a static counter. The function increments the counter each time it is called, adding a value to the array based on the counter's current value, thus demonstrating impure behavior. It serves as an example of side effects in a function.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ImpureFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction impure(array $a) : array {\n    /** @var int */\n    static $i = 0;\n\n    ++$i;\n\n    $a[$i] = 1;\n\n    return $a;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Emitted Warning for Undefined Global Variable in PHP\nDESCRIPTION: This PHP code snippet demonstrates a scenario where a warning may be emitted due to accessing a global variable that might not be defined. The script uses the 'rand' function to randomly decide whether to initialize a variable, 'a', which is then accessed without a check. The dependency here includes the PHP runtime environment. If 'rand(0, 1)' returns 1, 'a' is initialized; otherwise, accessing 'a' results in an undefined warning.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedGlobalVariable.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif (rand(0, 1)) {\n  $a = 5;\n}\necho $a;\n```\n\n----------------------------------------\n\nTITLE: Invalid PHP Attribute Target Example\nDESCRIPTION: Shows incorrect usage of a PHP attribute where a Table attribute meant for classes is incorrectly applied to a function. The Table attribute is explicitly declared for class targets only (TARGET_CLASS), but is misused on a function declaration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidAttribute.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Foo;\n\n#[\\Attribute(\\Attribute::TARGET_CLASS)]\nclass Table {\n    public function __construct(public string $name) {}\n}\n\n#[Table(\"videos\")]\nfunction foo() : void {}\n```\n\n----------------------------------------\n\nTITLE: Downloading PHPUnit PHAR File - Bash\nDESCRIPTION: This snippet provides commands to download the PHPUnit PHP Archive (PHAR) file, which contains all required dependencies. The user must replace 'X.Y' with the desired version number. The output command confirms the installed version of PHPUnit.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/phpunit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wget https://phar.phpunit.de/phpunit-X.Y.phar\n\n$ php phpunit-X.Y.phar --version\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Illegal Interface Constant Override in PHP\nDESCRIPTION: This code snippet illustrates an illegal operation in PHP versions before 8.1 where a child interface (Bar) attempts to override a constant (BAR) declared in its parent interface (Foo). This practice became legal starting from PHP 8.1.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/OverriddenInterfaceConstant.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ninterface Foo\n{\n    public const BAR='baz';\n}\n\ninterface Bar extends Foo\n{\n    public const BAR='foobar';\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Enum with Duplicate Case Values - Issue Example\nDESCRIPTION: Example showing problematic enum implementation where multiple cases share the same string value 'open', which is not allowed in PHP backed enums.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateEnumCaseValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: string \n{\n    case Open = \"open\";\n    case Closed = \"open\";\n}\n```\n\n----------------------------------------\n\nTITLE: Installing RandomLib via Composer\nDESCRIPTION: Command to install the RandomLib package using Composer package manager\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/random-lib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ composer require paragonie/random-lib\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 4.0.0 Changes in Markdown\nDESCRIPTION: Details breaking changes and removals in version 4.0.0, including changes to method signatures and removed methods.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n4.0.0\n-----\n\n * support for passing `\\ReflectionClass` instances to the `Caster::castObject()`\n   method has been dropped, pass class names as strings instead\n * the `Data::getRawData()` method has been removed\n * the `VarDumperTestTrait::assertDumpEquals()` method expects a 3rd `$filter = 0`\n   argument and moves `$message = ''` argument at 4th position.\n * the `VarDumperTestTrait::assertDumpMatchesFormat()` method expects a 3rd `$filter = 0`\n   argument and moves `$message = ''` argument at 4th position.\n```\n\n----------------------------------------\n\nTITLE: Installing ReflectionDocBlock via Composer\nDESCRIPTION: Command to install the ReflectionDocBlock package using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpdocumentor/reflection-docblock/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require phpdocumentor/reflection-docblock\n```\n\n----------------------------------------\n\nTITLE: MixedReturnTypeCoercion with Variadic Arguments in PHP\nDESCRIPTION: This example shows how the error occurs with variadic arguments when @no-named-arguments is not specified. The function declares it returns a list of integers, but $args could be array<array-key, int> since it might include named arguments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedReturnTypeCoercion.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @return list<int> */\nfunction foo(int ...$args): array {\n    return $args; // $args is array<array-key, int> since it can have named arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Multiple Inheritance Ambiguity in PHP\nDESCRIPTION: Demonstrates ambiguous constant inheritance when an interface extends multiple interfaces that define the same constant. The interface Baz inherits CONSTANT from both Foo and Bar interfaces, creating an ambiguous inheritance situation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/AmbiguousConstantInheritance.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ninterface Foo\n{\n    /** @var non-empty-string */\n    public const CONSTANT='foo';\n}\n\ninterface Bar\n{\n    /**\n     * @var non-empty-string\n     */\n    public const CONSTANT='bar';\n}\n\ninterface Baz extends Foo, Bar {}\n```\n\n----------------------------------------\n\nTITLE: CacheStorageInterface::cache signature change\nDESCRIPTION: Demonstrates how the signature for `CacheStorageInterface::cache` has changed. The new signature takes the `RequestInterface` object as input instead of just a key and the ttl.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n\"`CacheStorageInterface::cache($key, Response $response, $ttl = null)` has changed to `cache(RequestInterface\n  $request, Response $response);`\"\n```\n\n----------------------------------------\n\nTITLE: PHP Dynamic Array Type Example\nDESCRIPTION: Example showing how Psalm types arrays with dynamic keys generated in a loop.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/plugins_type_system.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$a = [];\nforeach (range(1,1) as $_) $a[(string)rand(0,1)] = rand(0,1); // array<string,int>\n```\n\n----------------------------------------\n\nTITLE: Normalizing HTTP Headers with GuzzleHttp\\Psr7\\Header::normalize\nDESCRIPTION: This method converts an array of header values, which may contain comma-separated headers, into an array of headers with no comma-separated values. It is deprecated in favor of `Header::splitList()` due to a cleaner API and improved documentation. The input can be a string or array, and the output is an array of header values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/psr7/README.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n`public static function normalize(string|array $header): array`\n```\n\n----------------------------------------\n\nTITLE: Creating Full Form GraphQL Query in PHP\nDESCRIPTION: Shows the full form of a GraphQL query for retrieving company data, demonstrating nested Query objects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query())\n    ->setSelectionSet(\n        [\n            (new Query('companies'))\n                ->setSelectionSet(\n                    [\n                        'name',\n                        'serialNumber'\n                    ]\n                )\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Assigning a Value to an Array Element in PHP\nDESCRIPTION: This snippet demonstrates the assignment of a value to the first index of an array that is conditionally assigned. It highlights how PHP can handle different types of values (integer vs. array) and shows how it may lead to unexpected results.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidArrayAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = rand(0, 1) ? 5 : [4, 3, 2, 1];\n$arr[0] = \"hello\";\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Property Across Namespaces in PHP\nDESCRIPTION: This code snippet demonstrates the behavior of accessing a property marked as internal from a different namespace in PHP. It defines two namespaces, A and B, with class Foo containing an internal property and class Bat attempting to access it. This illustrates how internal properties are scoped and how they can lead to accessibility issues when namespaces are involved.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InternalProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace A {\n    class Foo {\n        /**\n         * @internal\n         * @var ?int\n         */\n        public $foo;\n    }\n}\n\nnamespace B {\n    class Bat {\n        public function batBat() : void {\n            echo (new \\A\\Foo)->foo;\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: PHP Return Type Restriction Example\nDESCRIPTION: Demonstration of return type restrictions and their implications in PHP code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction getOne(): int // declared type: int\n{ \n    return 1; // inferred type: 1 (int literal)\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return 1\n */\nfunction getOne(): int \n{ \n    return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring PHP Function with Resource Type\nDESCRIPTION: Defines a PHP function named foo that takes a resource parameter and returns void, showcasing PHP type hinting and function signature\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ReservedWord.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\nfunction foo(resource $res) : void {}\n```\n\n----------------------------------------\n\nTITLE: Defining Class with Property Initialization Check - PHP\nDESCRIPTION: This code defines a PHP class 'A' with an uninitialized property 'bar' and a method 'getBar' that checks if 'bar' is set before returning its value. This check is considered redundant if properties are assumed to be initialized by tools like Psalm. The snippet demonstrates potential pitfalls of not initializing properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantPropertyInitializationCheck.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    class A {\n        public string $bar;\n        public function getBar() : string {\n            if (isset($this->bar)) {\n                return $this->bar;\n            }\n            return \"hello\";\n        }\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Using Variable Annotations with Psalm in PHP\nDESCRIPTION: This snippet demonstrates how to annotate a variable with a type when using Psalm for static analysis in PHP. The variable `$a` is assigned the return value of the function `foo`, which is typed as a string. The annotation allows for clearer code intentions but may be unnecessary if the type can be inferred by Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnnecessaryVarAnnotation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : string {\n    return \"hello\";\n}\n\n/** @var string */\n$a = foo();\n```\n\n----------------------------------------\n\nTITLE: Including PHPStats Library in PHP\nDESCRIPTION: Example of how to include the PHPStats library in a PHP project using the PHAR file.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/PHPStats/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ninclude('PHPStats.phar');\n```\n\n----------------------------------------\n\nTITLE: Installing Sebastian Type Library - Development Dependency\nDESCRIPTION: Composer command to add the sebastian/type library as a development-only dependency for testing and development purposes\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/type/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require --dev sebastian/type\n```\n\n----------------------------------------\n\nTITLE: Instantiating PHP Interface\nDESCRIPTION: Demonstrates the incorrect attempt to create an object from a PHP interface, which is not allowed and will trigger a runtime error\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InterfaceInstantiation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n\\ninterface I {}\\nnew I();\n```\n\n----------------------------------------\n\nTITLE: Using PropertyMatcher in DeepCopy PHP\nDESCRIPTION: Shows how to use PropertyMatcher to match specific properties of specific classes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\Matcher\\PropertyMatcher;\n\n// Will apply a filter to the property \"id\" of any objects of the class \"MyClass\"\n$matcher = new PropertyMatcher('MyClass', 'id');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Array Offset Access in PHP\nDESCRIPTION: Example showing how accessing an array offset on a variable that could be either an array or string can lead to runtime errors. The code uses rand() to randomly assign either an array or string, then attempts array access which may be invalid.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = rand(0, 1) ? [\"a\" => 5] : \"hello\";\necho $arr[0];\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Code Coverage via Composer\nDESCRIPTION: Commands to install the php-code-coverage library using Composer as either a regular or development dependency.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-code-coverage/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require phpunit/php-code-coverage\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpunit/php-code-coverage\n```\n\n----------------------------------------\n\nTITLE: Version History Documentation in Markdown\nDESCRIPTION: A structured changelog documenting all notable changes including bug fixes, additions, and modifications to the PHP Code Coverage library following Keep a CHANGELOG principles.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-code-coverage/ChangeLog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ChangeLog\n\nAll notable changes are documented in this file using the [Keep a CHANGELOG](http://keepachangelog.com/) principles.\n\n## [9.2.15] - 2022-03-07\n\n### Fixed\n\n* [#885](https://github.com/sebastianbergmann/php-code-coverage/issues/885): Files that have only `\\r` (CR, 0x0d) EOL characters are not handled correctly\n* [#907](https://github.com/sebastianbergmann/php-code-coverage/issues/907): Line with only `return [` is not recognized as executable\n```\n\n----------------------------------------\n\nTITLE: Installing Constant-Time Encoding Library via Composer\nDESCRIPTION: Command to install the constant-time encoding library using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/constant_time_encoding/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require paragonie/constant_time_encoding\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MoreSpecificReturnType Error in PHP with Psalm\nDESCRIPTION: This code example illustrates a situation where Psalm emits the MoreSpecificReturnType error. The function declares it returns class B (a subclass), but actually returns an instance of class A (the parent class). The error is suppressed using @psalm-suppress annotation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MoreSpecificReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B extends A {}\nfunction foo() : B {\n    /** @psalm-suppress LessSpecificReturnStatement */\n    return new A();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Iterable Type in PHP\nDESCRIPTION: Demonstrates the usage of the iterable pseudo-type in PHP, which can have type parameters similar to arrays.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/other_types.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\niterable<string, Foo>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NoValue with contradictory assertions in PHP\nDESCRIPTION: Shows how suppressing a type check but making a contradictory assertion creates a NoValue situation. There is no possible type that $a can have because the assertion always fails.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NoValue.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$a = [];\n/** @psalm-suppress TypeDoesNotContainType */\nassert(!empty($a));\n\ncount($a); // Assert above always fail. There is no possible type that $a can have here\n```\n\n----------------------------------------\n\nTITLE: Guzzle Log Plugin Configuration (After)\nDESCRIPTION: This PHP snippet demonstrates how to configure the `LogPlugin` in newer versions of Guzzle using `ClosureLogAdapter` and `MessageFormatter`. It showcases how to add a subscriber to the client that logs messages with a specific format defined by `MessageFormatter`. `Guzzle\\Log\\ClosureLogAdapter`, `Guzzle\\Log\\MessageFormatter`, and `Guzzle\\Plugin\\Log\\LogPlugin` are used.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Log\\ClosureLogAdapter;\nuse Guzzle\\Log\\MessageFormatter;\nuse Guzzle\\Plugin\\Log\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $format is a string indicating desired message format -- @see MessageFormatter\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $format = MessageFormatter::DEBUG_FORMAT);\n\n```\n\n----------------------------------------\n\nTITLE: Token Update Callback Implementation\nDESCRIPTION: Example of implementing a callback function for token updates using Monolog for logging\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$logger = new Monolog\\Logger();\n$tokenCallback = function ($cacheKey, $accessToken) use ($logger) {\n  $logger->debug(sprintf('new access token received at cache key %s', $cacheKey));\n};\n$client->setTokenCallback($tokenCallback);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested GraphQL Queries in PHP\nDESCRIPTION: Shows how to create nested queries to retrieve complex data structures including companies, their branches, and associated contracts.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber',\n            (new Query('branches'))\n                ->setSelectionSet(\n                    [\n                        'address',\n                        (new Query('contracts'))\n                            ->setSelectionSet(['date'])\n                    ]\n                )\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Invalid Property Type Assignment in PHP Class\nDESCRIPTION: Demonstrates an invalid property assignment where an stdClass object is assigned to a property that is typed to only accept string or null values. This will trigger an InvalidPropertyAssignmentValue error since the value type does not match the property's type declaration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidPropertyAssignmentValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var string|null */\n    public $foo;\n}\n$a = new A();\n$a->foo = new stdClass();\n```\n\n----------------------------------------\n\nTITLE: Installing Code Unit Reverse Lookup as Project Dependency - PHP\nDESCRIPTION: This code snippet demonstrates how to add the Code Unit Reverse Lookup library as a dependency to your PHP project using Composer. This library is used to determine which function or method a line of code belongs to. The command will add the library to your project's composer.json file, ensuring it is available during runtime.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/code-unit-reverse-lookup/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require sebastian/code-unit-reverse-lookup\n```\n\n----------------------------------------\n\nTITLE: Running Custom Plugins with Psalter\nDESCRIPTION: Example of running Psalter with a custom plugin to convert qualified classnames to shorter aliased versions\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/manipulating_code/fixing.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalter --plugin=vendor/vimeo/psalm/examples/plugins/ClassUnqualifier.php --dry-run\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Agent Configuration\nDESCRIPTION: Docker compose configuration for WPT agent with traffic shaping capabilities and environment settings\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docker/local/README.md#2025-04-21_snippet_1\n\nLANGUAGE: docker-compose\nCODE:\n```\n#### DOCKER WPTAGENT - comment this out to run a standalone agent ####\n  agent:\n    cap_add: #### Allows traffic shapping\n      - NET_ADMIN\n    build:\n      context: .\n      dockerfile: docker/local/Dockerfile-wptagent\n    environment:\n      - SERVER_URL=http://web/work/\n      - LOCATION=Test\n      - KEY=123456789\n    init: true\n  #### ####\n```\n\n----------------------------------------\n\nTITLE: Template Argument Assertions\nDESCRIPTION: Demonstrates using @psalm-this-out and @psalm-if-this-is for template argument assertions and state changes in generic classes.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/adding_assertions.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @template T\n */\nclass a {\n    /**\n     * @var list<T>\n     */\n    private array $data;\n    /**\n     * @param T $data\n     */\n    public function __construct($data) {\n        $this->data = [$data];\n    }\n    /**\n     * @template NewT\n     * \n     * @param NewT $data\n     * \n     * @psalm-this-out self<T|NewT>\n     * \n     * @return void\n     */\n    public function addData($data) {\n        /** @var self<T|NewT> $this */\n        $this->data []= $data;\n    }\n    /**\n     * @template NewT\n     * \n     * @param NewT $data\n     * \n     * @psalm-this-out self<NewT>\n     * \n     * @return void\n     */\n    public function setData($data) {\n        /** @var self<NewT> $this */\n        $this->data = [$data];\n    }\n    /**\n     * @psalm-if-this-is a<int>\n     */\n    public function test(): void {\n    }\n}\n\n$i = new a(123);\n// OK - $i is a<123>\n$i->test();\n\n$i->addData(321);\n// OK - $i is a<123|321>\n$i->test();\n\n$i->setData(\"test\");\n// IfThisIsMismatch - Class is not a<int> as required by psalm-if-this-is\n$i->test();\n```\n\n----------------------------------------\n\nTITLE: Editing WebPageTest Settings Configuration\nDESCRIPTION: Command to edit the WebPageTest settings.ini configuration file using vim\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/EC2/Server AMI.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo vim /var/www/webpagetest/www/settings/settings.ini\n```\n\n----------------------------------------\n\nTITLE: Tracing with Psalm in PHP\nDESCRIPTION: This snippet uses Psalm's trace feature to report the type of a variable in PHP. The purpose is for debugging, allowing developers to ensure type correctness while diagnosing issues. It depends on the Psalm static analysis tool, and the output would typically be used to verify the variable type matches expected values. Avoid using in production due to potential performance impacts.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/Trace.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n/** @psalm-trace $x */\n$x = getmypid();\n\n```\n\n----------------------------------------\n\nTITLE: Installing CPU Core Counter Package via Composer\nDESCRIPTION: This snippet shows how to install the CPU Core Counter package using Composer. It requires running the composer command in a terminal.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/fidry/cpu-core-counter/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncomposer require fidry/cpu-core-counter\n```\n\n----------------------------------------\n\nTITLE: Emitting Mismatching Docblock Property Type in PHP\nDESCRIPTION: This code snippet illustrates a scenario where the docblock type annotation of a property does not match its declared type in PHP. The snippet includes a class definition and demonstrates the mismatch between a docblock indicating an array type and a string type definition for the property. Such discrepancies can lead to confusion and runtime errors, so it is essential to ensure type consistency.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MismatchingDocblockPropertyType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass A {\n    /** @var array */\n    public string $s = [];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Licensor Line of Business Example\nDESCRIPTION: Example of how to specify a line of business that remains protected from competition even after product discontinuation\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/LICENSE.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLicensor Line of Business: YoyodyneCMS Content Management System (http://example.com/cms)\n```\n\n----------------------------------------\n\nTITLE: Example Markdown Changelog\nDESCRIPTION: A markdown formatted changelog documenting version history from 1.0.0 to 1.6.1, including feature additions, bug fixes, and improvements to character mapping for various languages.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/voku/portable-ascii/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n### 1.6.1 (2021-01-24)\n\n- revert: prefer \"Russian - Passport (2013), ICAO\" instead of \"Russian - GOST 7.79-2000(B)\"\n- revert: fix \"Ukrainian\" char-mapping (thanks to @Andr1yk0)\n- revert: fix \"Persian\" char-mapping (thanks to @frost-cyber)\n\n### 1.6.0 (2021-01-24)\n\n- prefer \"Russian - Passport (2013), ICAO\" instead of \"Russian - GOST 7.79-2000(B)\"\n- fix \"Ukrainian\" char-mapping (thanks to @Andr1yk0) \n- fix \"Persian\" char-mapping (thanks to @frost-cyber) \n- fix \"ASCII::normalize_whitespace()\" -> \"CARRIAGE RETURN\" is more like \"<br>\" and no \"\\n\"\n- add \"ASCII::to_ascii_remap()\" -> this method will return broken characters and is only for special cases\n```\n\n----------------------------------------\n\nTITLE: Installing PHP LSP Package via Composer\nDESCRIPTION: Command to install the Language Server Protocol package for PHP using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/felixfbecker/language-server-protocol/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require felixfbecker/language-server-protocol\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NoValue with throw in PHP\nDESCRIPTION: Shows how returning a throw expression results in a NoValue because the function will never actually return. Psalm detects that the return expression is never used.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NoValue.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo() : void {\n    return throw new Exception(''); //Psalm detected the return expression is never used\n}\n```\n\n----------------------------------------\n\nTITLE: Installing global-state with Composer (Production)\nDESCRIPTION: This snippet shows how to install the sebastian/global-state library as a regular dependency using Composer. This will include the library in the project's dependencies and make it available in the production environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/global-state/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require sebastian/global-state\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyInvalidPropertyAssignmentValue Error in PHP\nDESCRIPTION: This code snippet illustrates a situation where a possibly invalid value is assigned to a typed property. It defines two classes with differently typed 'bb' properties and attempts to assign a string array to a randomly chosen instance, which may cause a type mismatch.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidPropertyAssignmentValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var int[] */\n    public $bb = [];\n}\n\nclass B {\n    /** @var string[] */\n    public $bb;\n}\n\n$c = rand(0, 1) ? new A : new B;\n$c->bb = [\"hello\", \"world\"];\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 3.4.0 Changes in Markdown\nDESCRIPTION: Lists additions and deprecations in version 3.4.0, including a new method for setting minimum tree depth.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n3.4.0\n-----\n\n * added `AbstractCloner::setMinDepth()` function to ensure minimum tree depth\n * deprecated `MongoCaster`\n```\n\n----------------------------------------\n\nTITLE: Creating Simple GraphQL Query in PHP\nDESCRIPTION: Demonstrates how to create a basic GraphQL query to retrieve company names and serial numbers using the Query class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query('companies'))\n    ->setSelectionSet(\n        [\n            'name',\n            'serialNumber'\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Regex Class Usage Examples\nDESCRIPTION: Examples of using the more verbose Regex class with result objects instead of by-ref arguments\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/pcre/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Composer\\Pcre\\Regex;\n\n$bool = Regex::isMatch('{fo+}', $string);\n\n$result = Regex::match('{fo+}', $string);\nif ($result->matched) { something($result->matches); }\n\n$result = Regex::matchWithOffsets('{fo+}', $string);\nif ($result->matched) { something($result->matches); }\n\n$result = Regex::matchAll('{fo+}', $string);\nif ($result->matched && $result->count > 3) { something($result->matches); }\n\n$newString = Regex::replace('{fo+}', 'bar', $string)->result;\n$newString = Regex::replaceCallback('{fo+}', function ($match) { return strtoupper($match[0]); }, $string)->result;\n$newString = Regex::replaceCallbackArray(['{fo+}' => fn ($match) => strtoupper($match[0])], $string)->result;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PossiblyInvalidIterator Warning in PHP\nDESCRIPTION: This code snippet shows a situation where a PossiblyInvalidIterator warning might be emitted in PHP. It assigns either an array or a string to a variable based on a random condition, then attempts to iterate over that variable using a foreach loop.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidIterator.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$arr = rand(0, 1) ? [1, 2, 3] : \"hello\";\nforeach ($arr as $a) {}\n```\n\n----------------------------------------\n\nTITLE: Accessing Deprecated Property Example - PHP\nDESCRIPTION: Example showing a PHP class with a deprecated property marked with @deprecated annotation. The property 'foo' is declared as nullable string but assigned an integer value, which demonstrates improper usage of a deprecated class member.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DeprecatedProperty.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /**\n     * @deprecated\n     * @var ?string\n     */\n    public $foo;\n}\n(new A())->foo = 5;\n```\n\n----------------------------------------\n\nTITLE: Parser Debug Build Command\nDESCRIPTION: Command to build the parser with debug symbols and output file generation enabled\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nikic/php-parser/grammar/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp grammar/rebuildParsers.php --debug\n```\n\n----------------------------------------\n\nTITLE: Running WPT Agent Tests\nDESCRIPTION: Commands for running standalone WPT agent tests and connecting to WebPageTest server\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docker/local/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 wptagent.py -vvvv --xvfb --testurl www.google.com --shaper none\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 wptagent.py -vvvv --xvfb --testurl www.google.com\n```\n\nLANGUAGE: bash\nCODE:\n```\npython3 wptagent.py -vvvv --xvfb --server  http://127.0.0.1:80/work/ --location Test --key 123456789\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Sealed Array Support with properties-of in PHP using Psalm\nDESCRIPTION: This snippet shows how to use properties-of with final classes to return sealed arrays, and demonstrates the difference between sealed and unsealed arrays.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/type_syntax/utility_types.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T\n * @param T $object\n * @return properties-of<T>\n */\nfunction asArray($object): array {\n  return get_object_vars($object);\n}\n\n\nclass A {\n  public string $foo = 'foo!';\n  public int $bar = 42;\n}\n\nfinal class B extends A {\n  public float $baz = 2.1;\n}\n\n$a = asArray(new A);\n/** @psalm-trace $a */; // array{foo: string, bar: int, ...}\n\n$b = asArray(new B);\n/** @psalm-trace $b */; // array{foo: string, bar: int, baz: float}\n```\n\n----------------------------------------\n\nTITLE: Correcting @throws Annotation in moveTo() Method\nDESCRIPTION: This update corrects the `@throws` annotation for the `UploadedFileInterface::moveTo()` method, ensuring that it references the correct method parameter instead of an incorrect name, enhancing error documentation accuracy.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n// Updated a `@throws` annotation for the `UploadedFileInterface::moveTo()`\n// method to correctly reference the method parameter (it was referencing an\n// incorrect parameter name previously).\n```\n\n----------------------------------------\n\nTITLE: Updating PHP Version Constraint in composer.json\nDESCRIPTION: This snippet showcases the change made to the PHP version constraint within the composer.json file for a PHP project. The version constraint was updated from '^7.3 || ^8.0' to '>=7.3' to include all versions 7.3 and above. This update ensures compatibility with the specified PHP versions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/cli-parser/ChangeLog.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"* Changed PHP version constraint in `composer.json` from `^7.3 || ^8.0` to `>=7.3`\"\n```\n\n----------------------------------------\n\nTITLE: Installing PSR-3 Logger Interface Using Composer\nDESCRIPTION: This Bash command installs the PSR-3 logger via Composer, a dependency manager for PHP. Ensure Composer is installed before executing this command. The command adds the psr/log package to your project, which contains the PSR-3 logger interface.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/log/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require psr/log\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests for Firebase JWT\nDESCRIPTION: This snippet demonstrates how to run the PHPUnit tests for the Firebase PHP JWT library. It involves installing PHPUnit using PEAR and then executing the tests using the `phpunit` command with the specified configuration file.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/firebase/php-jwt/README.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pear install PHPUnit\n$ phpunit --configuration phpunit.xml.dist\nPHPUnit 3.7.10 by Sebastian Bergmann.\n.....\nTime: 0 seconds, Memory: 2.50Mb\nOK (5 tests, 5 assertions)\n```\n\n----------------------------------------\n\nTITLE: Using DoctrineProxyFilter in DeepCopy PHP\nDESCRIPTION: Shows how to use DoctrineProxyFilter to handle Doctrine proxy classes during copying.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\DeepCopy;\nuse DeepCopy\\Filter\\Doctrine\\DoctrineProxyFilter;\nuse DeepCopy\\Matcher\\Doctrine\\DoctrineProxyMatcher;\n\n$copier = new DeepCopy();\n$copier->addFilter(new DoctrineProxyFilter(), new DoctrineProxyMatcher());\n\n$copy = $copier->copy($object);\n\n// $copy should now contain a clone of all entities, including those that were not yet fully loaded.\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Class from Different Namespace - PHP\nDESCRIPTION: This snippet demonstrates the creation of an internal class within namespace A and its instantiation in namespace B. It highlights the implications of accessing internal classes and how they can be restricted to prevent misuse, focusing on code organization and encapsulation principles.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InternalClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace A {\n    /**\n     * @internal\n     */\n    class Foo { }\n}\n\nnamespace B {\n    class Bat {\n        public function batBat(): void {\n            $a = new \\A\\Foo();\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Required Copyright Notice Example\nDESCRIPTION: Example of a required copyright notice format that must be included with software distribution\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/LICENSE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRequired Notice: Copyright Yoyodyne, Inc. (http://example.com)\n```\n\n----------------------------------------\n\nTITLE: Using Stringifier Function in PHP\nDESCRIPTION: This code snippet shows a basic usage example of the `stringify` function. It echoes the string representation of the provided value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/stringifier/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho stringify($value);\n```\n\n----------------------------------------\n\nTITLE: Using Positional Arguments with @no-named-arguments Function (Correct Example)\nDESCRIPTION: This code demonstrates the proper way to call a function annotated with @no-named-arguments by using positional arguments instead of named arguments. This ensures compatibility if parameter names change.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NamedArgumentNotAllowed.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @no-named-arguments */\nfunction foo(int $a, int $b): int {\n\treturn $a + $b;\n}\n\nfoo(0, 1);\n\n```\n\n----------------------------------------\n\nTITLE: Correcting Return Type for getHeaders() Method\nDESCRIPTION: The return annotation for the `MessageInterface::getHeaders()` method is updated to indicate that it returns a nested array of strings, denoted as `string[][]`. This ensures better type safety and understanding of method usage.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n// Updated the `MessageInterface::getHeaders()` return annotation to use the\n// value `string[][]`, indicating the format is a nested array of strings.\n```\n\n----------------------------------------\n\nTITLE: Invalid Backing Type in Enum\nDESCRIPTION: Shows incorrect usage of an invalid backing type (array) in an enum case.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidEnumCaseValue.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nenum Status: int {\n    case Open = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Data Configuration\nDESCRIPTION: Sample configuration for AWS EC2 instance user data including API keys and headless mode settings\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/EC2/Server AMI.md#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nec2_key=AKIAJKP75OFSROV5GWEQ\nec2_secret=<secret for the key>\napi_key=MyAPIKey\nheadless=0\n```\n\n----------------------------------------\n\nTITLE: Accessing PHP Class Example\nDESCRIPTION: Example showing the fully qualified namespace path for the PDO Session Handler class in Symfony\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-foundation/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n\\Symfony\\Component\\HttpFoundation\\Session\\Storage\\Handler\\PdoSessionHandler\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Closure with Return Type\nDESCRIPTION: Demonstrates a PHP closure with an annotated return type, showing explicit type information for the function parameter and return value\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingClosureParamType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = function($a): string {\n    return \"foo\";\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Interface in PHP\nDESCRIPTION: This PHP code defines an interface `I` with a method `foo` and a class `A` that implements `I`. The class `A` does not define the `foo` method, leading to an error. This setup is used to demonstrate how interface implementation can lead to errors if all methods are not defined. Interfaces require all methods to be implemented by any class that implements them.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnimplementedInterfaceMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\ninterface I {\n    public function foo() : void;\n}\nclass A implements I {}\n```\n\n----------------------------------------\n\nTITLE: KMYACC Environment Variable Usage\nDESCRIPTION: Example of using the KMYACC environment variable to specify an alternative kmyacc binary location\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nikic/php-parser/grammar/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nKMYACC=/path/to/kmyacc php grammar/rebuildParsers.php\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Composer\nDESCRIPTION: Command to install development dependencies for phpseclib using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpseclib/phpseclib/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Adding Support for PHP 8\nDESCRIPTION: This functionality introduces support for PHP 8 in version 4.0.2, ensuring that the component is compatible with the latest PHP features and syntax.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/recursion-context/ChangeLog.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"This component is now supported on PHP 8\"\n```\n\n----------------------------------------\n\nTITLE: Correcting @link Annotation for RFC Reference\nDESCRIPTION: This change updates the `@link` annotation for the `RequestInterface::withRequestTarget()` method to correctly point to the relevant section of RFC 7230, improving documentation accuracy for users.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Updated the `@link` annotation for `RequestInterface::withRequestTarget()`\n// to point to the correct section of RFC 7230.\n```\n\n----------------------------------------\n\nTITLE: Debugging with Charles Web Proxy\nDESCRIPTION: Configuration for debugging API calls using Charles Web Proxy\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/apiclient/README.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// FOR DEBUGGING ONLY\n$httpClient = new GuzzleHttp\\Client([\n    'proxy' => 'localhost:8888', // by default, Charles runs on localhost port 8888\n    'verify' => false, // otherwise HTTPS requests will fail.\n]);\n\n$client = new Google\\Client();\n$client->setHttpClient($httpClient);\n```\n\n----------------------------------------\n\nTITLE: Example of Taint Issues in Classes Without Specialization in PHP\nDESCRIPTION: Shows a case where Psalm incorrectly flags untainted class properties as tainted because the class doesn't use taint specialization, even when used with specialized functions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/security_analysis/avoiding_false_positives.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass User {\n    public string $name;\n\n    public function __construct(string $name) {\n        $this->name = $name;\n    }\n}\n\n/**\n * @psalm-taint-specialize\n */\nfunction echoUserName(User $user) {\n    echo $user->name; // Error, detected tainted input\n}\n\n$user1 = new User(\"Keith\");\n$user2 = new User($_GET[\"name\"]);\n\nechoUserName($user1);\n```\n\n----------------------------------------\n\nTITLE: PREG_UNMATCHED_AS_NULL Example\nDESCRIPTION: Example demonstrating the behavior of PREG_UNMATCHED_AS_NULL flag in pattern matching\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/pcre/README.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npreg_match('/(a)(b)*(c)(d)*/', 'ac', $matches, $flags);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating EmptyArrayAccess Error in PHP\nDESCRIPTION: This code snippet shows how to trigger an EmptyArrayAccess error by attempting to access an element of an empty array. It creates an empty array and then tries to access its first element, which will result in an error or warning depending on PHP configuration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/EmptyArrayAccess.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = [];\n$b = $a[0];\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony ErrorHandler Component with Composer\nDESCRIPTION: Command to install the Symfony ErrorHandler component using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/error-handler/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfony/error-handler\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MixedArrayAssignment Error in PHP\nDESCRIPTION: This code example demonstrates a case that would trigger the MixedArrayAssignment error in Psalm. It attempts to assign a string value to an array offset of the global variable 'foo', but Psalm cannot determine the type of $GLOBALS['foo'].\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedArrayAssignment.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$GLOBALS['foo'][0] = \"5\";\n```\n\n----------------------------------------\n\nTITLE: Building Parser Command\nDESCRIPTION: Command to rebuild the PHP parsers using the rebuildParsers.php script. Supports environment variables and debug options.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nikic/php-parser/grammar/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp grammar/rebuildParsers.php\n```\n\n----------------------------------------\n\nTITLE: Composer Installation Command\nDESCRIPTION: Command line instruction for installing Prophecy dependencies via Composer.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpspec/prophecy/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$> composer install --prefer-dist\n```\n\n----------------------------------------\n\nTITLE: Adding rndis command-line flag\nDESCRIPTION: Adds the rndis command-line flag to the pidriver.sh command in agent.sh. This configures the agent to set up rndis on the phone. The IP addresses need to be modified to match the network.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n\"--rndis444 \\\"192.168.0.yy/24,192.168.0.1,192.168.0.1,192.168.0.1\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Class Detection in PHP\nDESCRIPTION: Example code showing an unused class (B) alongside a used class (A). When running Psalm with the `--find-dead-code` flag, it would flag class B as unused since it's defined but never instantiated or referenced.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass B {}\n$a = new A();\n```\n\n----------------------------------------\n\nTITLE: Using an Undefined Trait in PHP\nDESCRIPTION: This PHP code snippet defines a class `A` and attempts to use a trait named `T`. Since `T` is not defined anywhere in the scope, PHP will throw an error when this code is executed. This demonstrates a common pitfall when working with traits in PHP and highlights the importance of ensuring that all used traits are properly defined and accessible.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedTrait.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n    use T;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating PHP Code References\nDESCRIPTION: Code reference changes showing the migration from functions.php to Utils class implementations with camelCase methods.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nGuzzleHttp\\json_decode -> GuzzleHttp\\Utils::jsonDecode\nGuzzleHttp\\get_path -> GuzzleHttp\\Utils::getPath\nGuzzleHttp\\set_path -> GuzzleHttp\\Utils::setPath\nGuzzleHttp\\batch -> GuzzleHttp\\Pool::batch\n```\n\n----------------------------------------\n\nTITLE: Copying SSH Key\nDESCRIPTION: Copies the SSH key to the FreeBSD bridge as the root user.  This allows the Pi to ssh as root to the FreeBSD bridge using certificate credentials, enabling automatic traffic shaping configuration.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n\"ssh-copy-id root@192.168.0.199\"\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 4.2.0 Changes in Markdown\nDESCRIPTION: Details the addition of environment variable support for selecting output format in version 4.2.0.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n4.2.0\n-----\n\n * support selecting the format to use by setting the environment variable `VAR_DUMPER_FORMAT` to `html` or `cli`\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmarks\nDESCRIPTION: Command to execute the benchmark tool that compares league/commonmark performance against other popular parsers.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./tests/benchmark/benchmark.php\n```\n\n----------------------------------------\n\nTITLE: Installing Library via Composer - Standard Dependency\nDESCRIPTION: This code snippet demonstrates how to require the sebastian/complexity library for standard usage in a PHP project, ensuring the library is available in the runtime environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/complexity/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"composer require sebastian/complexity\"\n```\n\n----------------------------------------\n\nTITLE: Using Named Arguments with @no-named-arguments Function (Incorrect Example)\nDESCRIPTION: This code demonstrates incorrect usage where named arguments are provided to a function annotated with @no-named-arguments. This is problematic because the annotation indicates that parameter names may change in future versions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/NamedArgumentNotAllowed.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @no-named-arguments */\nfunction foo(int $a, int $b): int {\n\treturn $a + $b;\n}\n\nfoo(a: 0, b: 1);\n\n```\n\n----------------------------------------\n\nTITLE: Installing Respect\\Stringifier with Composer\nDESCRIPTION: This code snippet shows how to install the Respect\\Stringifier library using Composer. Composer is a dependency management tool for PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/stringifier/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require respect/stringifier\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Static Invocation in PHP\nDESCRIPTION: This PHP code defines a class 'A' with a public property 'foo' and a method 'bar'. The 'bar' method attempts to access the '$this' context, which is only available in instance methods. The code then tries to call the 'bar' method statically using the class name and scope resolution operator (A::bar()), which leads to an error because 'bar' is an instance method and requires an object instance to be invoked correctly.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidStaticInvocation.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @var ?string */\n    public $foo;\n\n    public function bar() : void {\n        echo $this->foo;\n    }\n}\n\nA::bar();\n```\n\n----------------------------------------\n\nTITLE: Installing PCRE Library with Composer\nDESCRIPTION: Command to install the latest version of composer/pcre library using Composer package manager\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/pcre/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require composer/pcre\n```\n\n----------------------------------------\n\nTITLE: Installing php-invoker as a development dependency with Composer\nDESCRIPTION: This command adds php-invoker as a development-time dependency using Composer. This is useful when the library is only needed for development tasks such as running tests.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-invoker/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require --dev phpunit/php-invoker\n```\n\n----------------------------------------\n\nTITLE: Guzzle Log Plugin Configuration (Before)\nDESCRIPTION: This PHP snippet illustrates how to configure the `LogPlugin` in older versions of Guzzle using `ClosureLogAdapter`. It shows how to add a subscriber to the client that logs messages with a specified verbosity level.  `Guzzle\\Common\\Log\\ClosureLogAdapter` and `Guzzle\\Http\\Plugin\\LogPlugin` are used.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Common\\Log\\ClosureLogAdapter;\nuse Guzzle\\Http\\Plugin\\LogPlugin;\n\n/** @var \\Guzzle\\Http\\Client */\n$client;\n\n// $verbosity is an integer indicating desired message verbosity level\n$client->addSubscriber(new LogPlugin(new ClosureLogAdapter(function($m) { echo $m; }, $verbosity = LogPlugin::LOG_VERBOSE);\n\n```\n\n----------------------------------------\n\nTITLE: Requiring a Library for Generating Stubs\nDESCRIPTION: This command installs a library as a development dependency, which is a prerequisite for generating stubs. Ensure that Composer is properly set up in your environment.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/authoring_plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev cakephp/chronos\n```\n\n----------------------------------------\n\nTITLE: Composer Installation Configuration\nDESCRIPTION: JSON configuration for installing Prophecy via Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpspec/prophecy/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"require-dev\": {\n        \"phpspec/prophecy\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating DuplicateParam Error in PHP Function Definition\nDESCRIPTION: This code snippet shows a PHP function definition with a duplicate parameter name, which causes a fatal error. The function 'foo' has two parameters both named '$b' with different types.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateParam.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nfunction foo(int $b, string $b) {}\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Property Access in PHP\nDESCRIPTION: This snippet shows access to an undefined property 'foo' in a PHP class. No dependencies are required other than PHP itself. The key aspect is demonstrating the runtime warning triggered by such an access. Input is not required, and there are no outputs, but a warning will be emitted when running this code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {}\n$a = new A();\necho $a->foo;\n\n```\n\n----------------------------------------\n\nTITLE: XML Service Description Example\nDESCRIPTION: This XML snippet defines a service description for a client, outlining various commands like listing, searching, creating, deleting, getting, and updating groups. Each command specifies the HTTP method, URI, and parameters, including their types, locations (query string, body, or header), and whether they are required.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<client>\n    <commands>\n        <!-- Groups -->\n        <command name=\"list_groups\" method=\"GET\" uri=\"groups.json\">\n            <doc>Get a list of groups</doc>\n        </command>\n        <command name=\"search_groups\" method=\"GET\" uri='search.json?query=\"{{query}} type:group\"'>\n            <doc>Uses a search query to get a list of groups</doc>\n            <param name=\"query\" type=\"string\" required=\"true\" />\n        </command>\n        <command name=\"create_group\" method=\"POST\" uri=\"groups.json\">\n            <doc>Create a group</doc>\n            <param name=\"data\" type=\"array\" location=\"body\" filters=\"json_encode\" doc=\"Group JSON\"/>\n            <param name=\"Content-Type\" location=\"header\" static=\"application/json\"/>\n        </command>\n        <command name=\"delete_group\" method=\"DELETE\" uri=\"groups/{{id}}.json\">\n            <doc>Delete a group by ID</doc>\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n        </command>\n        <command name=\"get_group\" method=\"GET\" uri=\"groups/{{id}}.json\">\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n        </command>\n        <command name=\"update_group\" method=\"PUT\" uri=\"groups/{{id}}.json\">\n            <doc>Update a group</doc>\n            <param name=\"id\" type=\"integer\" required=\"true\"/>\n            <param name=\"data\" type=\"array\" location=\"body\" filters=\"json_encode\" doc=\"Group JSON\"/>\n            <param name=\"Content-Type\" location=\"header\" static=\"application/json\"/>\n        </command>\n    </commands>\n</client>\n\n```\n\n----------------------------------------\n\nTITLE: Pre-loading Beta Class File in PHP\nDESCRIPTION: Example demonstrating how to pre-emptively load the Beta class file for improved performance.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/PHPStats/README.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ninclude('phar://PHPStats.phar/lib/ProbabilityDistribution/Beta.php');\n```\n\n----------------------------------------\n\nTITLE: Basic Psalm XML Configuration Examples\nDESCRIPTION: Examples of common Psalm XML configuration elements including reportInfo, autoloader, and cache settings.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<psalm\n  reportInfo=\"[bool]\"\n>\n\n<psalm\n  allowNamedArgumentCalls=\"[bool]\"\n>\n\n<psalm\n   triggerErrorExits=\"[string]\"\n>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 2.3.5\nDESCRIPTION: Changelog entry documenting a bug fix related to InlineParserEngine in version 2.3.5.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.3.5] - 2022-07-29\n\n### Fixed\n\n- Fixed error using `InlineParserEngine` when no inline parsers are registered in the `Environment` (#908)\n```\n\n----------------------------------------\n\nTITLE: Running PHP Tests for League Config\nDESCRIPTION: Command to run the test suite for the league/config package.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/config/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ composer test\n```\n\n----------------------------------------\n\nTITLE: Setting up Psalm Language Server in Vim with coc.nvim\nDESCRIPTION: This JSON configuration file for coc.nvim integrates Psalm Language Server. It includes the command, relevant filetypes, and root patterns necessary for activation based on file structure.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/language_server.md#2025-04-21_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n\"languageserver\": {\n  \"psalmls\": {\n    \"command\": \"vendor/bin/psalm-language-server\",\n    \"filetypes\": [\"php\"],\n    \"rootPatterns\": [\"psalm.xml\", \"psalm.xml.dist\"],\n    \"requireRootPattern\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample XML Output from Tokenized PHP Code\nDESCRIPTION: This XML snippet shows the structure of the output generated by the XMLSerializer. It represents a single line of PHP code, broken down into individual tokens with their respective types and values.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/theseer/tokenizer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<source xmlns=\"https://github.com/theseer/tokenizer\">\n <line no=\"1\">\n  <token name=\"T_OPEN_TAG\">&lt;?php </token>\n  <token name=\"T_DECLARE\">declare</token>\n  <token name=\"T_OPEN_BRACKET\">(</token>\n  <token name=\"T_STRING\">strict_types</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_EQUAL\">=</token>\n  <token name=\"T_WHITESPACE\"> </token>\n  <token name=\"T_LNUMBER\">1</token>\n  <token name=\"T_CLOSE_BRACKET\">)</token>\n  <token name=\"T_SEMICOLON\">;</token>\n </line>\n</source>\n```\n\n----------------------------------------\n\nTITLE: Verifying Phar Archive\nDESCRIPTION: Bash commands to verify the PHP Archive (Phar) signature using GPG.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Getting our public key from the keyserver:\ngpg --fingerprint 7F52D5C61D1255C731362E826B97A1C2826404DA\nif [ $? -ne 0 ]; then\n    echo -e \"\\033[33mDownloading PGP Public Key...\\033[0m\"\n    gpg  --keyserver pgp.mit.edu --recv-keys 7F52D5C61D1255C731362E826B97A1C2826404DA\n    # Security <security@paragonie.com>\n    gpg --fingerprint 7F52D5C61D1255C731362E826B97A1C2826404DA\n    if [ $? -ne 0 ]; then\n        echo -e \"\\033[31mCould not download PGP public key for verification\\033[0m\"\n        exit 1\n    fi\nfi\n\n# Verifying the PHP Archive\ngpg --verify sodium-compat.phar.sig sodium-compat.phar\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 2.7.0 Changes in Markdown\nDESCRIPTION: Details the deprecation of a method in the Cloner\\Data class in version 2.7.0.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n2.7.0\n-----\n\n * deprecated `Cloner\\Data::getLimitedClone()`. Use `withMaxDepth`, `withMaxItemsPerDepth` or `withRefHandles` instead.\n```\n\n----------------------------------------\n\nTITLE: Archive Exports\nDESCRIPTION: This snippet indicates that tests and related files are now ignored during archive exports. It helps to reduce the size of the distributed package by excluding unnecessary development files.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/ChangeLog.md#2025-04-21_snippet_3\n\nLANGUAGE: none\nCODE:\n```\n### Changed\n\n* Tests etc. are now ignored for archive exports\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Duplicate Class Definition in PHP\nDESCRIPTION: This code snippet shows an example of defining a class 'A' twice, which will result in a compilation error in PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DuplicateClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\nclass A {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating UnusedReturnValue Issue in PHP\nDESCRIPTION: This example shows a private method 'foo()' that returns a string, but the return value is never used anywhere in the code. When running Psalm with the --find-dead-code flag, it will flag this as an UnusedReturnValue issue.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnusedReturnValue.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    public function __construct() {\n        $this->foo();\n    }\n    private function foo() : string {\n        return \"hello\";\n    }\n}\n\nnew A();\n```\n\n----------------------------------------\n\nTITLE: Composer PHP Version Constraint Update\nDESCRIPTION: Updated PHP version compatibility in composer.json to support PHP 7.3 and above, providing broader version support for the library\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-invoker/ChangeLog.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"php\": \">=7.3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Psalm Baseline in XML Config\nDESCRIPTION: This XML snippet shows how to configure a baseline file in Psalm's configuration. The errorBaseline attribute specifies the path to the baseline file.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/dealing_with_code_issues.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\"?>\n<psalm\n       ...\n       errorBaseline=\"./path/to/your-baseline.xml\"\n>\n   ...\n</psalm>\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/recursion-context with Composer\nDESCRIPTION: This snippet shows how to install the `sebastian/recursion-context` library as a regular dependency using Composer. This will add the library to the project's dependencies and make it available for use in the project's code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/recursion-context/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require sebastian/recursion-context\n```\n\n----------------------------------------\n\nTITLE: Stream Interface Method Update\nDESCRIPTION: Changes to stream interface method signatures removing the maxLen parameter and updating constructor options.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nGuzzleHttp\\Stream\\StreamInterface::getContents() // removed maxLen parameter\nGuzzleHttp\\Stream\\Stream::__construct(resource $stream, array $options = [])\nGuzzleHttp\\Stream\\Stream::factory($resource, array $options = [])\nGuzzleHttp\\Stream\\Utils::create($resource, array $options = [])\n```\n\n----------------------------------------\n\nTITLE: Installing Instantiator Library via Composer in PHP\nDESCRIPTION: This command installs the Instantiator library using Composer, specifying version ~1.0.3.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp composer.phar require \"doctrine/instantiator:~1.0.3\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests Command\nDESCRIPTION: Command to run the test suite for league/commonmark which includes testing against the latest supported CommonMark spec.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ composer test\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Property Access in PHP\nDESCRIPTION: Shows an example of attempting to access a property 'bar' on a string variable '$a', which is invalid in PHP and will trigger an error. This operation is not allowed because strings are not objects and do not have properties.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidPropertyFetch.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = \"foo\";\necho $a->bar;\n```\n\n----------------------------------------\n\nTITLE: Installing getallheaders for PHP < 5.6\nDESCRIPTION: Composer command to install the getallheaders library for PHP versions earlier than 5.6\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/ralouphie/getallheaders/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncomposer require ralouphie/getallheaders \"^2\"\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 4.3.0 Changes in Markdown\nDESCRIPTION: Lists the addition of DsCaster for supporting the Ds extension in version 4.3.0.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n4.3.0\n-----\n\n * added `DsCaster` to support dumping the contents of data structures from the Ds extension\n```\n\n----------------------------------------\n\nTITLE: Changing directory\nDESCRIPTION: Changes the current directory to the home directory. This command is executed to get the user to the agents home directory.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"cd ~\"\n```\n\n----------------------------------------\n\nTITLE: Event Dispatcher Component\nDESCRIPTION: Event dispatcher related classes and changes showing evolution of event handling.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-kernel/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nTraceableEventDispatcher\nContainerAwareTraceableEventDispatcher\nRegisterListenersPass\n```\n\n----------------------------------------\n\nTITLE: Calling Undefined Interface Method in PHP\nDESCRIPTION: The snippet demonstrates what happens when calling a method 'bar()' on an interface 'I' which does not define this method. The function 'foo' takes an instance of the interface 'I' and attempts to call the non-existent method 'bar', illustrating an interface usage error in PHP. There are no external dependencies, but an understanding of PHP interfaces is necessary. The input is an interface and a function call within the PHP language; the expected behavior is an error message from PHP regarding the undefined method.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UndefinedInterfaceMethod.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ninterface I {}\n\nfunction foo(I $i) {\n    $i->bar();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Selenium Package for Python\nDESCRIPTION: Command to install the Selenium package using pip package manager for Python 2.7\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/Microsoft Edge.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install selenium\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Format\nDESCRIPTION: Structured changelog entries following Semantic Versioning format, with version numbers, dates, and categorized changes\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/semver/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [3.3.2] 2022-04-01\n\n  * Fixed handling of non-string values (#134)\n\n### [3.3.1] 2022-03-16\n\n  * Fixed possible cache key clash in the CompilingMatcher memoization (#132)\n```\n\n----------------------------------------\n\nTITLE: Installing global-state with Composer (Development)\nDESCRIPTION: This snippet shows how to install the sebastian/global-state library as a development dependency using Composer. This means the library will only be installed in the development environment, useful for testing and debugging.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/global-state/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require --dev sebastian/global-state\n```\n\n----------------------------------------\n\nTITLE: Setting session options via DSN (PHP)\nDESCRIPTION: Allows setting session options using a DSN (Data Source Name) string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/http-foundation/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$sessionOptions = ['dsn' => 'redis://localhost:6379'];\nSession::getInstance()->start($sessionOptions);\n```\n\n----------------------------------------\n\nTITLE: Adding default name to Command\nDESCRIPTION: This snippet describes how the `$defaultName` property can be used to register commands at compile time. The command can be registered using the `AddConsoleCommandPass`.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/console/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n\" * added static `Command::$defaultName/getDefaultName()`, allowing for\n   commands to be registered at compile time in the application command loader.\n   Setting the `$defaultName` property avoids the need for filling the `command`\n   attribute on the `console.command` tag when using `AddConsoleCommandPass`.\"\n```\n\n----------------------------------------\n\nTITLE: Emitting ParentNotFound Error in PHP\nDESCRIPTION: The snippet illustrates an error case in PHP where the `parent::` keyword is used within a method of a class that does not have a parent class, leading to a `ParentNotFound` error. This code relies on PHP's object-oriented features. No input parameters are required, and the code does not successfully execute due to the error, so there is no valid output.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/ParentNotFound.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nclass A {\n  public function foo() : void {\n    parent::foo();\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: PHP Invoker Feature: Timeout Invocation Check\nDESCRIPTION: Added new method `canInvokeWithTimeout()` to verify system requirements for executing time-limited function calls, improving error handling and compatibility\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpunit/php-invoker/ChangeLog.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function canInvokeWithTimeout()\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key\nDESCRIPTION: Generates an SSH key for the Pi user. This is the first step in setting up passwordless SSH access to the FreeBSD bridge for traffic shaping control from the Pi.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n\"ssh-keygen\"\n```\n\n----------------------------------------\n\nTITLE: Running PHP Unit Tests\nDESCRIPTION: Command to execute the PHPUnit test suite for the library.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/dnoegel/php-xdg-base-dir/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ phpunit\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations for Parameters in PHP\nDESCRIPTION: In version 4.0.3, type annotations for input and output parameters were added to improve code readability and maintainability. This change is documented as a pull request referenced by #21.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/recursion-context/ChangeLog.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"[#21](https://github.com/sebastianbergmann/recursion-context/pull/21): Add type annotations for in/out parameters\"\n```\n\n----------------------------------------\n\nTITLE: Updated Method Signatures in PHP CommonMark 2.0\nDESCRIPTION: Code examples showing renamed and modified method signatures for core CommonMark classes. Changes affect configuration options, rendering interfaces, and core functionality.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nCommonMarkConverter::convertToHtml() // Now returns RenderedContentInterface\n\nSlugNormalizer::normalizer() // Now accepts context with prefix and max length\n\nInlineParserInterface::getMatchDefinition() // Replaces getCharacters()\n\nEnvironmentBuilderInterface::addBlockParserFactory() // Replaces ConfigurableEnvironmentInterface::addBlockParser()\n\nNodeRendererInterface // Replaces both BlockRendererInterface and InlineRendererInterface\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Build Commands\nDESCRIPTION: Commands for downloading, building and installing FFmpeg from source\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~\ngit clone https://github.com/FFmpeg/FFmpeg.git ffmpeg\ncd ffmpeg\n./configure --arch=armel --target-os=linux --enable-gpl --enable-libx264 --enable-nonfree\nmake -j4\nsudo make install\ncd ~\nrm -rf ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Configuring network interfaces\nDESCRIPTION: Configures the /etc/network/interfaces file for static IP address assignment and bridge configuration. This includes setting the IP address, netmask, DNS, and bridge ports. This configuration is crucial for reverse-tethered networking with a Raspberry Pi for WebPageTest mobile agents.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n\"auto lo usb0 eth0\n\nallow-hotplug usb0\niface usb0 inet manual\n  post-up brctl addif br0 usb0\n\nauto br0\niface br0 inet static\n  address 192.168.0.xx\n  network 192.168.0.0\n  netmask 255.255.255.0\n  broadcast 192.168.0.255\n  gateway 192.168.0.1\n  dns-nameservers 192.168.0.1\n  bridge_ports eth0 usb0\n  bridge_fd 0\n  bridge_stp off\n  bridge_waitport 0 usb0\"\n```\n\n----------------------------------------\n\nTITLE: Installing Lines of Code Library via Composer - Standard Dependency\nDESCRIPTION: This snippet demonstrates how to add the 'sebastian/lines-of-code' library as a standard dependency to a PHP project using Composer. Required for applications that utilize line counting functionality in their codebase.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/lines-of-code/README.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```\ncomposer require sebastian/lines-of-code\n```\n```\n\n----------------------------------------\n\nTITLE: Deprecated PHP Constants and Enum Cases Usage Example\nDESCRIPTION: Demonstrates the use of deprecated constants in a PHP class and enum, marked with @deprecated PHPDoc tag. The example shows both a deprecated class constant 'FOO' and a deprecated enum case 'B', which should be avoided in code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DeprecatedConstant.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {\n    /** @deprecated */\n    const FOO = 'foo';\n}\n\necho A::FOO;\n\nenum B {\n    /** @deprecated */\n    case B;\n}\n\necho B::B;\n```\n\n----------------------------------------\n\nTITLE: Disabling Psalm Plugin\nDESCRIPTION: Command to disable an installed Psalm plugin using the psalm-plugin tool. This deactivates the plugin for use with Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/plugins/using_plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/psalm-plugin disable plugin-vendor/plugin-package\n```\n\n----------------------------------------\n\nTITLE: Uploading to Amazon S3 with Multipart Upload (PHP)\nDESCRIPTION: This snippet demonstrates the `$s3->upload()` method which automatically uses a multipart upload if the object exceeds a specified size. It simplifies the process of large file uploads by abstracting the multipart upload logic.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n\"$s3->upload();\"\n```\n\n----------------------------------------\n\nTITLE: Updating Parameter Annotation for withUploadedFiles() Method\nDESCRIPTION: The parameter annotation for `ServerRequestInterface::withUploadedFiles()` is updated to include the parameter name (`$uploadedFiles`), promoting better parameter context and clarity.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/psr/http-message/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n// Updated the `ServerRequestInterface::withUploadedFiles()` parameter annotation\n// to add the parameter name (`$uploadedFiles`).\n```\n\n----------------------------------------\n\nTITLE: Stopping the running agent\nDESCRIPTION: Stops the currently running WebPageTest agent using screen.  This involves attaching to the screen session named 'agent' and sending a ctrl-c command.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"screen -r agent\"\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using a Deprecated Class in PHP\nDESCRIPTION: This snippet demonstrates how to declare a deprecated class using the @deprecated docblock tag and shows an instance of that class being created. It illustrates the syntax for marking a class as deprecated and how it might still be instantiated in code.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/DeprecatedClass.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/** @deprecated */\nclass A {}\nnew A();\n```\n\n----------------------------------------\n\nTITLE: Composer version constraint change\nDESCRIPTION: This snippet details a change in the `composer.json` file, where the PHP version constraint was modified from `^7.3 || ^8.0` to `>=7.3`. This expands the compatible PHP versions for the library.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/ChangeLog.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n### Changed\n\n* Changed PHP version constraint in `composer.json` from `^7.3 || ^8.0` to `>=7.3`\n```\n\n----------------------------------------\n\nTITLE: Defining a Constant and a Method in PHP\nDESCRIPTION: This snippet defines a PHP class 'Foo' that includes a constant 'BAR' and a method 'bar' which returns a value from the constant. The snippet highlights the use of @return type hinting for better type safety and documentation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/UnresolvableConstant.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Foo\n{\n    public const BAR = ['bar'];\n\n    /**\n     * @return value-of<self::BAT>\n     */\n    public function bar(): string\n    {\n        return self::BAR[0];\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing ifplugd and bridge-utils packages\nDESCRIPTION: Installs the ifplugd and bridge-utils packages. This is a necessary step to configure the Raspberry Pi to provide wired network connectivity to the phone (reverse-tethering) for WebPageTest mobile agent setup.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n\"sudo apt-get install ifplugd bridge-utils\"\n```\n\n----------------------------------------\n\nTITLE: Starting the agent\nDESCRIPTION: Starts the WebPageTest agent by executing the agent.sh script.  This assumes the current directory is the agent's home directory.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n\"./agent.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing Lines of Code Library via Composer - Development Dependency\nDESCRIPTION: This snippet shows how to add the 'sebastian/lines-of-code' library as a development-time dependency, suitable for use in local testing environments or CI pipelines for PHP projects.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/lines-of-code/README.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n```\ncomposer require --dev sebastian/lines-of-code\n```\n```\n\n----------------------------------------\n\nTITLE: Exception class update\nDESCRIPTION: This snippet describes that the `SebastianBergmann\\ObjectReflector\\Exception` class now correctly extends `\\Throwable`. It fixes an inheritance issue, ensuring the exception class behaves as expected in error handling scenarios.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/ChangeLog.md#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n### Fixed\n\n* `SebastianBergmann\\ObjectReflector\\Exception` now correctly extends `\\Throwable`\n```\n\n----------------------------------------\n\nTITLE: Instantiating Beta Distribution Class in PHP\nDESCRIPTION: Example showing how to create a new instance of the Beta distribution class using proper namespace.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/PHPStats/README.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$beta = new \\PHPStats\\ProbabilityDistribution\\Beta(6,20);\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 4.1.0 Changes in Markdown\nDESCRIPTION: Lists significant additions in version 4.1.0, including new server-related classes and commands for handling dumps.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n4.1.0\n-----\n\n * added a `ServerDumper` to send serialized Data clones to a server\n * added a `ServerDumpCommand` and `DumpServer` to run a server collecting\n   and displaying dumps on a single place with multiple formats support\n * added `CliDescriptor` and `HtmlDescriptor` descriptors for `server:dump` CLI and HTML formats support\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Description for Curve25519 Data Structures\nDESCRIPTION: Markdown documentation explaining the purpose of the PHP implementation and referencing the original C structures in libsodium's curve25519_ref10.h\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/sodium_compat/src/Core/Curve25519/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Curve25519 Data Structures\\n\\nThese are PHP implementation of the [structs used in the ref10 curve25519 code](https://github.com/jedisct1/libsodium/blob/master/src/libsodium/include/sodium/private/curve25519_ref10.h).\n```\n\n----------------------------------------\n\nTITLE: Installing PHP XDG Base Directory via Composer\nDESCRIPTION: Command to install the XDG Base Directory package using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/dnoegel/php-xdg-base-dir/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require dnoegel/php-xdg-base-dir\n```\n\n----------------------------------------\n\nTITLE: Demonstrating a MixedOperand Error with GLOBALS\nDESCRIPTION: This example shows a common MixedOperand error where Psalm cannot determine the type of a GLOBALS array element being used in an addition operation with a string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedOperand.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\necho $GLOBALS['foo'] + \"hello\";\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Laravel Migration Phase 2\nDESCRIPTION: Proposed directory structure after the critical Laravel migration phase. Shows how the codebase will be organized with the Laravel root directory (possum) containing both legacy code and new Laravel components.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/adr/0004-adopt-laravel.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n.\n├── batchtool/\n├── bulktest/\n├── composer.json\n├── docker/\n├── docs/\n└── possum/ # aka [LARAVELROOT]\n    ├── app/\n    │   ├── wpt/ # old www code, delete at the end of phase 3\n    │   ├── Http/\n    │   │   └── Controllers/\n    │   ├── Models/\n    │   └── View/ # overall layouts here, e.g. guest vs logged in\n    ├── config/\n    ├── public/\n    │   ├── index.php # handled by Laravel now\n    │   ├── favicon.ico\n    │   └── assets/\n    │       └── images/\n    ├── resources/\n    │   ├── css/\n    │   ├── js/\n    │   └── views/ # templates go here\n    ├── routes/\n    │   └── web.php # routing happens here\n    ├── tests/ # moved from /www/tests\n    └── vendor/ # moved from /www/vendor\n```\n\n----------------------------------------\n\nTITLE: Configuring ipfw pipes and queues\nDESCRIPTION: Configures ipfw pipes and queues for traffic shaping.  This script iterates through a sequence of numbers, creating pipes and queues, and then adding rules to route traffic to those queues based on the destination IP address.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n\"for i in `seq 1 9`\ndo\n  ipfw pipe $i config delay 0ms noerror\n  ipfw pipe 30$i config delay 0ms noerror\n  ipfw queue $i config pipe $i queue 100 noerror mask dst-port 0xffff\n  ipfw queue 30$i config pipe 30$i queue 100 noerror mask src-port 0xffff\n  ipfw add queue $i ip from any to 192.168.201.$i out xmit em1\n  ipfw add queue 30$i ip from 192.168.201.$i to any out recv em1\ndone\nfor i in `seq 10 90`\ndo\n  ipfw pipe $i config delay 0ms noerror\n  ipfw pipe 3$i config delay 0ms noerror\n  ipfw queue $i config pipe $i queue 100 noerror mask dst-port 0xffff\n  ipfw queue 3$i config pipe 3$i queue 100 noerror mask src-port 0xffff\n  ipfw add queue $i ip from any to 192.168.201.$i out xmit em1\n  ipfw add queue 3$i ip from 192.168.201.$i to any out recv em1\ndone\n\nipfw add 60000 pass all from any to any\"\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests\nDESCRIPTION: Command to execute PHPUnit tests using the version installed via Composer dependencies.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/doctrine/instantiator/docs/en/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ ./vendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Invalid Parent Return Type Example in PHP\nDESCRIPTION: Demonstrates an invalid use of 'parent' as a return type in a class that doesn't extend another class. This will cause an InvalidParent error since Foo has no parent class to reference.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/InvalidParent.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass Foo {\n    public function f(): parent {}\n}\n```\n\n----------------------------------------\n\nTITLE: Version History Markdown Changelog\nDESCRIPTION: Markdown formatted changelog entries detailing version updates, new features, and bug fixes for AWS SDK versions between 2.6.2 and 2.7.4. Each entry includes specific service updates, improvements, and modifications.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 2.7.4 - 2014-11-12\n\n* Added support for the AWS Key Management Service (AWS KMS).\n* Added support for AWS CodeDeploy.\n* Added support for AWS Config.\n* Added support for AWS KMS encryption to the Amazon S3 client.\n* Added support for AWS KMS encryption to the Amazon EC2 client.\n* Added support for Amazon CloudWatch Logs delivery to the AWS CloudTrail\n  client.\n* Added the GetTemplateSummary operation to the AWS CloudFormation client.\n* Fixed an issue with sending signature version 4 Amazon S3 requests that\n  contained a 0 length body.\n\n## 2.7.3 - 2014-11-06\n\n* Added support for private DNS for Amazon Virtual Private Clouds, health check\n  failure reasons, and reusable delegation sets to the Amazon Route 53 client.\n* Updated the CloudFront model.\n* Added support for configuring push synchronization to the Cognito Sync client.\n* Updated docblocks in a few S3 and Glacier classes to improve IDE experience.\n\n## 3.0.0-beta.1 - 2014-10-14\n\n* New requirements on Guzzle 5 and PHP 5.5.\n* Event system now uses Guzzle 5 events and no longer utilizes Symfony2.\n* `version` and `region` are now required parameter for each client\n  constructor. You can op-into using the latest version of a service by\n  setting `version` to `latest`.\n* Removed `Aws\\S3\\ResumableDownload`.\n* More information to follow.\n\n## 2.7.2 - 2014-10-23\n\n* Updated AWS Identity and Access Management (IAM) to the latest version.\n* Updated Amazon Cognito Identity client to the latest version.\n* Added auto-renew support to the Amazon Route 53 Domains client.\n* Updated Amazon EC2 to the latest version.\n\n## 2.7.1 - 2014-10-16\n\n* Updated the Amazon RDS client to the 2014-09-01 API version.\n* Added support for advanced Japanese language processing to the Amazon\n  CloudSearch client.\n\n## 2.7.0 - 2014-10-08\n\n* Added document model support to the Amazon DynamoDB client, including support\n  for the new data types (`L`, `M`, `BOOL`, and `NULL`), nested attributes, and\n  expressions.\n* Deprecated the `Aws\\DynamoDb\\Model\\Attribute`, `Aws\\DynamoDb\\Model\\Item`,\n  and `Aws\\DynamoDb\\Iterator\\ItemIterator` classes, and the\n  `Aws\\DynamoDb\\DynamoDbClient::formatValue` and\n  `Aws\\DynamoDb\\DynamoDbClient::formatAttribute` methods, since they do not\n  support the new types in the DynamoDB document model. These deprecated classes\n  and methods still work reliably with `S`, `N`, `B`, `SS`, `NS`, and `BS`\n  attributes.\n* Updated the Amazon DynamoDB client to permanently disable client-side\n  parameter validation. This needed to be done in order to support the new\n  document model features.\n* Updated the Amazon EC2 client to sign requests with Signature V4.\n* Fixed an issue in the S3 service description to make the `VersionId`\n  work in `S3Client::restoreObject`.\n\n## 2.6.16 - 2014-09-11\n\n* Added support for tagging to the Amazon Kinesis client.\n* Added support for setting environment variables to the AWS OpsWorks client.\n* Fixed issue #334 to allow the `before_upload` callback to work in the\n  `S3Client::upload` method.\n* Fixed an issue in the Signature V4 signer that was causing an issue with some\n  CloudSearch Domain operations.\n\n## 2.6.15 - 2014-08-14\n\n* Added support for signing requests to the Amazon CloudSearch Domain client.\n* Added support for creating anonymous clients.\n\n## 2.6.14 - 2014-08-11\n\n* Added support for tagging to the Elastic Load Balancing client.\n\n## 2.6.13 - 2014-07-31\n\n* Added support for configurable idle timeouts to the Elastic Load Balancing\n  client.\n* Added support for Lifecycle Hooks, Detach Instances, and Standby to the\n  AutoScaling client.\n* Added support for creating Amazon ElastiCache for Memcached clusters with\n  nodes in multiple availability zones.\n* Added minor fixes to the Amazon EC2 model for ImportVolume,\n  DescribeNetworkInterfaceAttribute, and DeleteVpcPeeringConnection\n* Added support for getGeoLocation and listGeoLocations to the\n  Amazon Route 53 client.\n* Added support for Amazon Route 53 Domains.\n* Fixed an issue with deleting nested folders in the Amazon S3 stream wrapper.\n* Fixed an issue with the Amazon S3 sync abstraction to ensure that S3->S3\n  communication works correctly.\n* Added stricter validation to the Amazon SNS MessageValidator.\n\n## 2.6.12 - 2014-07-16\n\n* Added support for adding attachments to support case communications to the\n  AWS Support API client.\n* Added support for credential reports and password rotation features to the\n  AWS IAM client.\n* Added the `ap-northeast-1`, `ap-southeast-1`, and `ap-southeast-2` regions to\n  the Amazon Kinesis client.\n* Added a `listFilter` stream context option that can be used when using\n  `opendir()` and the Amazon S3 stream wrapper. This option is used to filter\n  out specific objects from the files yielded from the stream wrapper.\n* Fixed #322 so that the download sync builder ignores objects that have a\n  `GLACIER` storage class.\n* Fixed an issue with the S3 SSE-C logic so that HTTPS is only required when\n  the SSE-C parameters are provided.\n* Updated the Travis configuration to include running HHVM tests.\n\n## 2.6.11 - 2014-07-09\n\n* Added support for **Amazon Cognito Identity**.\n* Added support for **Amazon Cognito Sync**.\n* Added support for **Amazon CloudWatch Logs**.\n* Added support for editing existing health checks and associating health checks\n  with tags to the Amazon Route 53 client.\n* Added the ModifySubnetAttribute operation to the Amazon EC2 client.\n\n## 2.6.10 - 2014-07-02\n\n* Added the `ap-northeast-1`, `ap-southeast-1`, and `sa-east-1` regions to the\n  Amazon CloudTrail client.\n* Added the `eu-west-1` and `us-west-2` regions to the Amazon Kinesis client.\n* Fixed an issue with the SignatureV4 implementation when used with Amazon S3.\n* Fixed an issue with a test that was causing failures when run on EC2 instances\n  that have associated Instance Metadata credentials.\n\n## 2.6.9 - 2014-06-26\n\n* Added support for the CloudSearchDomain client, which allows you to search and\n  upload documents to your CloudSearch domains.\n* Added support for delivery notifications to the Amazon SES client.\n* Updated the CloudFront client to support the 2014-05-31 API.\n* Merged PR #316 as a better solution for issue #309.\n\n## 2.6.8 - 2014-06-20\n\n* Added support for closed captions to the Elastic Transcoder client.\n* Added support for IAM roles to the Elastic MapReduce client.\n* Updated the S3 PostObject to ease customization.\n* Fixed an issue in some EC2 waiters by merging PR #306.\n* Fixed an issue with the DynamoDB `WriteRequestBatch` by merging PR #310.\n* Fixed issue #309, where the `url_stat()` logic in the S3 Stream Wrapper was\n  affected by a change in PHP 5.5.13.\n\n## 2.6.7 - 2014-06-12\n\n* Added support for Amazon S3 server-side encryption using customer-provided\n  encryption keys.\n* Updated Amazon SNS to support message attributes.\n* Updated the Amazon Redshift model to support new cluster parameters.\n* Updated PHPUnit dev dependency to 4.* to work around a PHP serializing bug.\n\n## 2.6.6 - 2014-05-29\n\n* Added support for the [Desired Partition Count scaling\n  option](http://aws.amazon.com/releasenotes/2440176739861815) to the\n  CloudSearch client. Hebrew is also now a supported language.\n* Updated the STS service description to the latest version.\n* [Docs] Updated some of the documentation about credential profiles.\n* Fixed an issue with the regular expression in the `S3Client::isValidBucketName`\n  method. See #298.\n\n## 2.6.5 - 2014-05-22\n\n* Added cross-region support for the Amazon EC2 CopySnapshot operation.\n* Added AWS Relational Database (RDS) support to the AWS OpsWorks client.\n* Added support for tagging environments to the AWS Elastic Beanstalk client.\n* Refactored the signature version 4 implementation to be able to pre-sign\n  most operations.\n\n## 2.6.4 - 2014-05-20\n\n* Added support for lifecycles on versioning enabled buckets to the Amazon S3\n  client.\n* Fixed an Amazon S3 sync issue which resulted in unnecessary transfers when no\n  `$keyPrefix` argument was utilized.\n* Corrected the `CopySourceIfMatch` and `CopySourceIfNoneMatch` parameter for\n  Amazon S3 to not use a timestamp shape.\n* Corrected the sending of Amazon S3 PutBucketVersioning requests that utilize\n  the `MFADelete` parameter.\n\n## 2.6.3 - 2014-05-14\n\n* Added the ability to modify Amazon SNS topic settings to the UpdateStack\n  operation of the AWS CloudFormation client.\n* Added support for the us-west-1, ap-southeast-2, and eu-west-1 regions to the\n  AWS CloudTrail client.\n* Removed no longer utilized AWS CloudTrail shapes from the model.\n\n## 2.6.2 - 2014-05-06\n\n* Added support for Amazon SQS message attributes.\n* Fixed Amazon S3 multi-part uploads so that manually set ContentType values are not overwritten.\n* No longer recalculating file sizes when an Amazon S3 socket timeout occurs because this was causing issues with\n  multi-part uploads and it is very unlikely ever the culprit of a socket timeout.\n* Added better environment variable detection.\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: Comprehensive changelog documenting version history from 0.1 through 1.10, including additions, removals, changes and fixes for a GraphQL PHP client library.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/Changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nThe change log describes what is \"Added\", \"Removed\", \"Changed\" or \"Fixed\"\nbetween each release.\n\n## Tech Debt\n\n- Refactor the query conversion to string to separate the process of\nconstructing a new query and adding a nested subfield\n\n## Unreleased\n\n## 1.10\n\n### Added\n\n- Added support for MutationBuilder\n\n### Removed\n\n- Removed EmptySelectionSetException being thrown from QueryBuilder if selection set is empty\n\n## 1.9.2:\n\n### Removed\n\n- Removed support for GET requests by throwing exception when request type is set to GET\n\n## 1.9.1:\n\n### Changed\n\n- Modified variable identification logic in string literals\n\n## 1.9:\n\n### Added\n\n- Added PHP8 support\n\n## 1.8:\n\n### Changed\n\n- Updated Query class to allow for an alias\n- Updated QueryBuilder class to allow for an alias\n\n## 1.7:\n\n### Added\n\n- Added ability to set request http method type in client\n- Added Guzzle7 to composer.json\n- Added PHP7.4 to travis test environments\n\n## 1.6.1:\n\n### Changed:\n\n- Removed empty braces added in the selection set when no fields are selected\n\n## 1.6:\n\n### Added:\n\n- Added ability to inject and use PSR-18 compatible HTTP client in sending requests to GraphQL server\n\n## 1.5:\n\n### Added\n\n- Ability to create multiple queries in one object using Query class\n- Ability to create multiple queries in one object using QueryBuilder class\n\n## 1.4:\n\n### Added\n\n- Support for passing guzzle httpOptions that overrides the authorizationHeaders\n\n### Changed\n\n- Replaced all new line characters \"\\n\" with PHP_EOL\n\n## 1.3: 2019-08-03\n\n### Added\n\n- Support for inline fragments\n\n## 1.2: 2019-07-24\n\n### Added\n\n- Variables support for queries and mutations\n- Operation name during in queries\n\n### Fixed\n\n- Issue in mutation string generation when no selection set is provided\n\n## 1.1: 2019-04-26\n\n### Added\n\n- Mutation class for running mutation operations\n- Examples in the README for running\n    - Mutation operation\n    - Raw string queries\n- New badges to README to show downloads count, license, and latest version\n- Changelog\n\n### Changed\n\n- `Client::runQuery` method now accepts `QueryBuilderInterface` as well as\n`Query`\n\n\n## 1.0: 2019-04-19\n\n### Removed\n\n- Moved all schema generation logic to a separate repository\n\n\n## 0.6: 2019-04-09\n\n### Added\n\n- Generate ArgumentsObject classes for all argument lists on fields\n- Ability to override default schema writing director with a custom one\n- Ability to generate classes with custom namespaces\n- Pushed code coverage to 100%\n\n### Changed\n\n- Refactored schema class generation mechanism to traverse the API schema from\nthe root queryType\n- Refactored QueryObject class to accommodate changes in the schema generation\n    - Removed arguments from QueryObject classes and moved them to\n    ArgumentsObjects\n    - Modified how generation works to accommodate ArgumentsObjects nested\n    within QueryObjects\n    - Added ArgumentsObject argument to all field selector methods\n- Refactored Query class\n    - Added the ability to set Query object name to 'query'\n\n\n\n## 0.5: 2019-03-25\n\n### Added\n\n- Query builder functionality\n\n### Changed\n\n- Minimum PHP version form 7.2 to 7.1\n\n### Fixed\n\n- Throw QueryError on 400 response\n- Throw QueryError in missing scenario (specifying result as array)\n\n### Removed\n\n- composer.lock from version control\n\n\n## 0.4: 2019-03-25\n\n### Added\n\n- Support for Travis CI\n- Installation section to README\n- Codacy support for analyzing code\n- Raised code coverage\n- Generator script to composer file to add it composer bin\n\n### Changed\n\n- Upgraded to PHP7 (7.2 minimum version)\n\n\n## 0.3.4: 2019-03-02\n\n### Fixed\n\n- Issue in README examples\n\n\n## 0.3.3: 2019-03-02\n\n### Fixed:\n\n- Issue in package root directory name\n\n\n## 0.3.2: 2019-03-02\n\n### Fixed:\n\n- Autoload issue in schema classes generation\n\n\n## 0.3.1: 2019-03-02\n\n### Fixed:\n\n- Issue in input object generation\n\n\n## 0.3: 2019-03-02\n\n### Added:\n\n- Generation of filters and arguments depending on type\n- Input object setters for input object arguments\n\n\n## 0.2: 2019-02-16\n\n### Added\n\n- Auto schema generation using GraphQL inspection ability\n- Throw QueryError if syntax errors are detected by the GraphQL server\n- Unit tests to cover basic functionality\n\n\n## 0.1.4: 2019-01-18\n\n### Added\n\n- Ability to run raw string queries\n- Set default content type\n\n### Fixed\n\n- String values do not get wrapped in quotations in the arguments construction\n\n\n## 0.1.3: 2018-10-10\n\n### Fixed\n\n- Fixed issue in generating query when no arguments are provided\n\n\n## 0.1.2: 2018-10-07\n\n### Fixed\n\n- Typo in namespace declaration\n\n## 0.1.1: 2018-10-07\n\n\n### Changed\n\n- Upgrade Guzzle from 5.x to 6.x\n\n\n## 0.1: 2018-10-07\n\n- First release\n```\n\n----------------------------------------\n\nTITLE: Checking Coding Standards with PHP_CodeSniffer\nDESCRIPTION: This snippet outlines the commands to navigate to the PHP_CodeSniffer directory and check for coding standard errors. It ensures that the contributions meet the necessary coding standards before submission. This requires PHP_CodeSniffer to be installed and configured properly.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n    cd PHP_CodeSniffer\n    php bin/phpcs\n```\n\n----------------------------------------\n\nTITLE: Cloning Global Variable in PHP\nDESCRIPTION: This PHP code snippet attempts to clone a global variable whose type may not be known. The snippet assumes that the global variable 'a' is defined and accessible in the current scope. Cloning is used to create a duplicate instance of 'a', which is expected to be an object or compatible value.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MixedClone.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = clone $GLOBALS[\"a\"];\n\n```\n\n----------------------------------------\n\nTITLE: CSS Variables Reference Link\nDESCRIPTION: Link to Mozilla documentation for CSS custom properties (variables) implementation.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/adr/0002-design-system-v0.1.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[see: CSS Variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties)\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Windows\nDESCRIPTION: These commands are used to execute the PHPUnit tests within a Windows environment. They are similar to the Linux commands but use Windows-style path separators. The `vendor\\bin\\phpunit` command directly invokes the PHPUnit executable, while `composer phpunit` uses a Composer script to run the tests.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/respect/validation/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n> vendor\\bin\\phpunit\n```\n\nLANGUAGE: sh\nCODE:\n```\n> composer phpunit\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry for Version 2.3.6\nDESCRIPTION: Changelog entry documenting a bug fix for unquoted attribute parsing in version 2.3.6.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/league/commonmark/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [2.3.6] - 2022-10-30\n\n### Fixed\n\n- Fixed unquoted attribute parsing when closing curly brace is followed by certain characters (like a `.`) (#943)\n```\n\n----------------------------------------\n\nTITLE: Flushing ipfw rules and pipes\nDESCRIPTION: Flushes the existing ipfw rules and pipes. This ensures a clean slate for configuring traffic shaping on a FreeBSD bridge for WebPageTest agents.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n\"ipfw -q flush\nipfw -q pipe flush\"\n```\n\n----------------------------------------\n\nTITLE: Installing Resource Operations via Composer - Regular Dependency\nDESCRIPTION: This code snippet shows how to add the resource operations library as a regular dependency to your PHP project using Composer. It is necessary for utilizing built-in functions that operate on resources.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/resource-operations/README.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ncomposer require sebastian/resource-operations\n```\n\n----------------------------------------\n\nTITLE: Changing PHP Version Constraint in composer.json\nDESCRIPTION: This update in version 4.0.3 altered the PHP version constraint in `composer.json` from `^7.3 || ^8.0` to `>=7.3`, allowing for a broader range of PHP versions to be used with the component.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/recursion-context/ChangeLog.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"Changed PHP version constraint in `composer.json` from `^7.3 || ^8.0` to `>=7.3`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Anonymous Function without Return Type in PHP\nDESCRIPTION: Creates an anonymous function that returns a string value without specifying an explicit return type. This can trigger linting warnings or type checking issues in strict PHP environments.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/MissingClosureReturnType.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$a = function() {\n    return \"foo\";\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Semver Package\nDESCRIPTION: Command to install the latest version of composer/semver package using Composer package manager.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/composer/semver/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require composer/semver\n```\n\n----------------------------------------\n\nTITLE: Ignoring Tests for Archive Exports in PHP\nDESCRIPTION: In version 4.0.1, tests and related files are now excluded from archive exports to streamline the build process and reduce package size.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/recursion-context/ChangeLog.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"Tests etc. are now ignored for archive exports\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Crawler Access Rules in robots.txt for WebPageTest\nDESCRIPTION: This robots.txt file sets access rules for web crawlers, disallowing access to specific directories and files while allowing access to the root directory. It also includes a special rule for the Mediapartners-Google bot.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /result/\nDisallow: /testlog/\nDisallow: /testlog.php\nDisallow: /forums/attachment.php\nDisallow: /forums/member.php\nDisallow: /forums/memberlist.php\nDisallow: /forums/calendar.php\nDisallow: /forums/misc.php\nDisallow: /results/\nDisallow: /apc/\nDisallow: /work/\nAllow: /\n\nUser-agent: Mediapartners-Google\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Attribute Handling Fix\nDESCRIPTION: This snippet refers to a bug fix related to handling attributes with non-string names. The fix addresses an issue where attributes with non-string names were not processed correctly, improving the accuracy of object reflection.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/ChangeLog.md#2025-04-21_snippet_5\n\nLANGUAGE: none\nCODE:\n```\n* Fixed [#1](https://github.com/sebastianbergmann/object-reflector/issues/1): Attributes with non-string names are not handled correctly\n```\n\n----------------------------------------\n\nTITLE: Installing Psalm Phar via Composer\nDESCRIPTION: Installs the Psalm Phar file as a development dependency using Composer. An alternative method to download and use the Phar version of Psalm.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev psalm/phar\n```\n\n----------------------------------------\n\nTITLE: Defining CNN URL Mappings for Web Testing\nDESCRIPTION: Maps different page types to specific CNN URLs for testing purposes. Includes the main landing page, world news section, and an example article page with query parameters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/settings/benchmarks/sample/cnn_mobile.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nLanding Page\thttp://www.cnn.com/\nWorld News\thttp://www.cnn.com/WORLD/index.html\nArticle Page\thttp://www.cnn.com/2014/05/09/world/europe/ukraine-crisis/index.html?c=world\n```\n\n----------------------------------------\n\nTITLE: Object Attributes Implementation Change\nDESCRIPTION: This snippet describes a change in the implementation of `ObjectReflector::getattributes()` to use a `(array)` cast instead of `ReflectionObject`. This modification may offer performance improvements or address compatibility issues with specific PHP versions.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/ChangeLog.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n### Changed\n\n* Changed implementation of `ObjectReflector::getattributes()` to use `(array)` cast instead of `ReflectionObject`\n```\n\n----------------------------------------\n\nTITLE: PHP Version Support Removal\nDESCRIPTION: This snippet notes the removal of support for PHP 7.0, PHP 7.1, and PHP 7.2. This change likely reflects a decision to focus on newer PHP versions and may involve the adoption of features unavailable in older releases.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/object-reflector/ChangeLog.md#2025-04-21_snippet_4\n\nLANGUAGE: none\nCODE:\n```\n### Removed\n\n* This component is no longer supported on PHP 7.0, PHP 7.1, and PHP 7.2\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK via Zip Download Example in Markdown\nDESCRIPTION: A markdown reference to a new Zip download option for installing the AWS SDK for PHP. This download option was added in version 2.3.2.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Zip Download](http://pear.amazonwebservices.com/get/aws.zip)\n```\n\n----------------------------------------\n\nTITLE: Running Tests for DeepCopy PHP Library\nDESCRIPTION: Command to run the test suite for the DeepCopy library.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 5.2.0 Changes in Markdown\nDESCRIPTION: Details updates in version 5.2.0, including support for PHPUnit color options and environment variable configurations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n5.2.0\n-----\n\n * added support for PHPUnit `--colors` option\n * added `VAR_DUMPER_FORMAT=server` env var value support\n * prevent replacing the handler when the `VAR_DUMPER_FORMAT` env var is set\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for DebugClassLoader in Symfony 5.4\nDESCRIPTION: Configuration option for DebugClassLoader to enforce return type declarations by setting the SYMFONY_PATCH_TYPE_DECLARATIONS environment variable to 'force=2'.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/error-handler/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSYMFONY_PATCH_TYPE_DECLARATIONS='force=2'\n```\n\n----------------------------------------\n\nTITLE: Guzzle Service Description - Command to Operation (Before)\nDESCRIPTION: This PHP snippet demonstrates the old way of using `Guzzle\\Service\\Description\\ServiceDescription` to manage commands in Guzzle. It shows how to get commands, check for a command's existence, retrieve a specific command, and add a new command using the `ApiCommandInterface`.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/UPGRADING.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse Guzzle\\Service\\Description\\ServiceDescription;\n\n$sd = new ServiceDescription();\n$sd->getCommands();     // @returns ApiCommandInterface[]\n$sd->hasCommand($name);\n$sd->getCommand($name); // @returns ApiCommandInterface|null\n$sd->addCommand($command); // @param ApiCommandInterface $command\n\n```\n\n----------------------------------------\n\nTITLE: Documenting VarDumper 4.4.0 Changes in Markdown\nDESCRIPTION: Details significant updates in version 4.4.0, including new test traits, casters, and support for environment variables.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/symfony/var-dumper/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n4.4.0\n-----\n\n * added `VarDumperTestTrait::setUpVarDumper()` and `VarDumperTestTrait::tearDownVarDumper()`\n   to configure casters & flags to use in tests\n * added `ImagineCaster` and infrastructure to dump images\n * added the stamps of a message after it is dispatched in `TraceableMessageBus` and `MessengerDataCollector` collected data\n * added `UuidCaster`\n * made all casters final\n * added support for the `NO_COLOR` env var (https://no-color.org/)\n```\n\n----------------------------------------\n\nTITLE: Deprecated CurlAuthPlugin Usage\nDESCRIPTION: This snippet shows the deprecated usage of CurlAuthPlugin.  It illustrates the recommended replacement, which involves setting authentication options directly via `request.options/auth`. This provides a clearer and more consistent way to handle authentication within Guzzle.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/guzzlehttp/guzzle/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n\"`$client->getConfig()->setPath('request.options/auth', array('user', 'pass', 'Basic|Digest');`\"\n```\n\n----------------------------------------\n\nTITLE: Defining Version Links in Markdown\nDESCRIPTION: This snippet defines version comparison links using Markdown syntax. It allows for easy navigation between different versions of the project on GitHub.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/theseer/tokenizer/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[1.1.3]: https://github.com/theseer/tokenizer/compare/1.1.2...1.1.3\n[1.1.2]: https://github.com/theseer/tokenizer/compare/1.1.1...1.1.2\n[1.1.1]: https://github.com/theseer/tokenizer/compare/1.1.0...1.1.1\n[1.1.0]: https://github.com/theseer/tokenizer/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/theseer/tokenizer/compare/b2493e57de80c1b7414219b28503fa5c6b4d0a98...1.0.0\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionHandlerInterface for DynamoDB in PHP\nDESCRIPTION: This code snippet shows how the DynamoDB Session Handler was updated to implement the SessionHandlerInterface of PHP 5.4 when available, improving compatibility and functionality.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Aws\\DynamoDb\\Session\\SessionHandler;\n\n$sessionHandler = SessionHandler::factory(array(\n    'table_name' => 'sessions',\n    'hash_key' => 'id',\n    'session_lifetime' => 3600,\n    'consistent_read' => true,\n    'locking_strategy' => null,\n    'batch_config' => array(),\n    'max_lock_wait_time' => 10,\n    'min_lock_retry_microtime' => 10000,\n    'max_lock_retry_microtime' => 50000,\n));\n\n// Register the session handler\nsession_set_save_handler($sessionHandler, true);\n```\n\n----------------------------------------\n\nTITLE: Handling Tainted Callable in PHP\nDESCRIPTION: This PHP snippet demonstrates the use of potentially unsafe user input to invoke a function. The code accepts a string from a GET request and attempts to execute it if it is callable. This pattern can lead to security vulnerabilities, such as executing arbitrary code. The code does not handle validation or sanitization, thus allowing risky operations based on user inputs.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedCallable.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\n$name = $_GET[\"name\"];\n\nevalCode($name);\n\nfunction evalCode(string $name) {\n    if (is_callable($name)) {\n        $name();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Shell Commands with Unvalidated User Input in PHP\nDESCRIPTION: Example of a security vulnerability where user-supplied input from $_GET is passed directly to PHP's exec() function without validation or sanitization. This creates a critical security risk allowing arbitrary command execution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedShell.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$command = $_GET[\"command\"];\n\nrunCode($command);\n\nfunction runCode(string $command) {\n    exec($command);\n}\n```\n\n----------------------------------------\n\nTITLE: Removing avahi-daemon and dhcpcd5 packages\nDESCRIPTION: Removes the avahi-daemon and dhcpcd5 packages.  This is part of the initial setup for configuring the Raspberry Pi for reverse-tethered networking for WebPageTest mobile agents.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n\"sudo apt-get remove avahi-daemon dhcpcd5\"\n```\n\n----------------------------------------\n\nTITLE: Detecting Redundant Array and String Transformation Functions\nDESCRIPTION: This PHP snippet shows unnecessary function calls on arrays and strings that do not change the underlying data. Using `array_values()` on an already simple array and `strtolower()` on a single array element are considered redundant operations.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/RedundantFunctionCall.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$a = ['already', 'a', 'list'];\n\n$redundant = array_values($a);\n$alreadyLower = strtolower($redundant[0]);\n```\n\n----------------------------------------\n\nTITLE: Unsafe User Input Evaluation in PHP using eval()\nDESCRIPTION: Example of an insecure implementation where unvalidated user input from GET parameters is passed directly to PHP's eval() function through a wrapper function. This creates a serious security vulnerability allowing arbitrary code execution.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/TaintedEval.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$name = $_GET[\"name\"];\n\nevalCode($name);\n\nfunction evalCode(string $name) {\n    eval($name);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing sebastian/cli-parser with Composer\nDESCRIPTION: This snippet demonstrates how to install the 'sebastian/cli-parser' library using Composer. This library parses command-line arguments in PHP projects. The snippet shows two installation methods: as a regular dependency and as a development-time dependency, allowing flexibility based on project requirements.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/sebastian/cli-parser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require sebastian/cli-parser\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev sebastian/cli-parser\n```\n\n----------------------------------------\n\nTITLE: Downloading PHP_CodeSniffer using Curl/Wget\nDESCRIPTION: This snippet demonstrates how to download the PHP_CodeSniffer Phar files using either curl or wget. It also shows how to test the downloaded PHAR files using the php command.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/squizlabs/php_codesniffer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"# Download using curl\ncurl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar\ncurl -OL https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar\n\n# Or download using wget\nwget https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar\nwget https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar\n\n# Then test the downloaded PHARs\nphp phpcs.phar -h\nphp phpcbf.phar -h\"\n```\n\n----------------------------------------\n\nTITLE: Running CI Checks for phpseclib\nDESCRIPTION: Series of commands to run continuous integration checks including installing global dependencies, code style checks, static analysis, and unit tests.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpseclib/phpseclib/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer global require php:^8.1 squizlabs/php_codesniffer friendsofphp/php-cs-fixer vimeo/psalm\nphpcs --standard=build/php_codesniffer.xml\nphp-cs-fixer fix --config=build/php-cs-fixer.php --diff --dry-run --using-cache=no\npsalm --config=build/psalm.xml --no-cache --long-progress --report-show-info=false --output-format=text\nvendor/bin/phpunit --verbose --configuration tests/phpunit.xml\n```\n\n----------------------------------------\n\nTITLE: Restarting Nginx Server\nDESCRIPTION: Command to restart the Nginx service after configuration changes\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/EC2/Server AMI.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Defining a Function in PHP\nDESCRIPTION: This function takes an array of strings indexed by integers and outputs the first element of the array. It requires a parameter of type array with integer keys, ensuring type safety. The function encapsulates the behavior of accessing array elements in a controlled manner.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyUndefinedIntArrayOffset.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n/**\n * @param array<int, string> $arr\n */\nfunction foo(array $arr) : void {\n    echo $arr[0];\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Psalm from command line to detect errors\nDESCRIPTION: A bash command showing how to run Psalm on a PHP file, along with the resulting error output that identifies an InvalidArgument issue where an array was provided instead of a string.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n> ./vendor/bin/psalm implode_strings.php\nERROR: InvalidArgument - somefile.php:3:14 - Argument 1 of implode expects `string`, `array` provided (see https://psalm.dev/004)\n```\n\n----------------------------------------\n\nTITLE: List of Website URLs\nDESCRIPTION: A comprehensive list of website URLs for various e-commerce and business websites. The list includes retail stores, specialty shops, and service providers across different industries.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/bulktest/urls-2kcommerce.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://www.godiva.com/\nhttp://www.harrietcarter.com/\nhttp://www.bodycentral.com/\nhttp://welectronics.com\nhttp://www.dickies.com/\nhttp://www.callawaygolfpreowned.com/\nhttp://www.bizhosting.com/\nhttp://www.importtuner.com/\nhttp://www.oldride.com/\nhttp://www.tix.com/Default.asp\n[...continued...]\n```\n\n----------------------------------------\n\nTITLE: Using @psalm-suppress to Ignore Issues in PHP\nDESCRIPTION: Demonstrates how to use @psalm-suppress to make Psalm ignore specific issues in function docblocks or inline. This is useful when you need to suppress known issues that you've verified are safe.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/supported_annotations.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @psalm-suppress PossiblyNullOperand\n */\nfunction addString(?string $s) {\n    echo \"hello \" . $s;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction addString(?string $s) {\n    /** @psalm-suppress PossiblyNullOperand */\n    echo \"hello \" . $s;\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Mixed Type Parameter in PHP\nDESCRIPTION: Example showing a function that attempts to clone a parameter that could be either a class instance or a string. This can lead to a PossiblyInvalidClone error since strings are not cloneable objects in PHP.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/running_psalm/issues/PossiblyInvalidClone.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass A {}\n\n/**\n * @param A|string $a\n */\nfunction foo($a) {\n    return clone $a;\n}\n```\n\n----------------------------------------\n\nTITLE: WebPageTest Agent Launch Script\nDESCRIPTION: Shell script to continuously run WebPageTest agent with auto-update and test limit functionality\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\ncd ~/webpagetest/agent/js\nwhile :\ndo\n    git pull origin master\n    ./pidriver.sh -m debug --serverUrl <www.myserver.org> --location <testLocation> --apiKey <locationAPIKey> --name <MobileDeviceFriendlyName> --browser android:<DeviceID> --tcpdumpBinary ~/webpagetest/agent/js/tcpdump --maxtemp 36 --checknet yes --processvideo yes --exitTests 10\n    echo \"Exited, restarting\"\n    sleep 1\ndone\n```\n\n----------------------------------------\n\nTITLE: Using Individual Base64 and Base32 Classes\nDESCRIPTION: Example showing how to use specific encoding classes (Base64 and Base32) directly instead of the main Encoding class.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/paragonie/constant_time_encoding/README.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse ParagonIE\\ConstantTime\\Base64;\nuse ParagonIE\\ConstantTime\\Base32;\n\n$data = random_bytes(32);\necho Base64::encode($data), \"\\n\";\necho Base32::encode($data), \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple GraphQL Queries in PHP\nDESCRIPTION: Demonstrates how to create multiple queries within a single GraphQL request, retrieving data for both companies and countries.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/gmostafa/php-graphql-client/README.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$gql = (new Query())\n    ->setSelectionSet(\n        [\n            (new Query('companies'))\n            ->setSelectionSet(\n                [\n                    'name',\n                    'serialNumber'\n                ]\n            ),\n            (new Query('countries'))\n            ->setSelectionSet(\n                [\n                    'name',\n                    'code',\n                ]\n            )\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Method Stubbing with Return Values\nDESCRIPTION: Examples of method stubbing with different return value approaches including callbacks.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpspec/prophecy/README.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user->getName()->willReturn(null);\n\n// For PHP 5.4\n$user->setName('everzet')->will(function () {\n    $this->getName()->willReturn('everzet');\n});\n\n// For PHP 5.3\n$user->setName('everzet')->will(function ($args, $user) {\n    $user->getName()->willReturn('everzet');\n});\n\n// Or\n$user->setName('everzet')->will(function ($args) use ($user) {\n    $user->getName()->willReturn('everzet');\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading an Amazon S3 Bucket (PHP)\nDESCRIPTION: This snippet shows the use of `$s3->downloadBucket()` for downloading an entire Amazon S3 bucket to a local directory. It simplifies the process of fetching all objects from a bucket.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n\"$s3->downloadBucket();\"\n```\n\n----------------------------------------\n\nTITLE: System Optimization Commands\nDESCRIPTION: Commands for configuring watchdog, swap file, and system parameters for improved stability\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/Private Instances/MobileAgentRaspberryPi.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho \"bcm2835_wdt\" | sudo tee -a /etc/modules\nsudo apt-get install watchdog\nsudo update-rc.d watchdog defaults\nsudo modprobe bcm2835_wdt\nsudo systemctl start watchdog\nsudo systemctl status watchdog\nsudo systemctl enable watchdog\n```\n\n----------------------------------------\n\nTITLE: Setting AWS SDK Guzzle Dependency in PHP\nDESCRIPTION: Composer dependency specification for the Guzzle HTTP client library required by the AWS SDK. Version constraints changed across different SDK releases.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n`\">=3.4.3,<4\"`\n```\n\n----------------------------------------\n\nTITLE: Template Covariance Declaration in PHP\nDESCRIPTION: Example showing how to declare a template parameter as covariant to allow passing subtypes in read-only contexts.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template-covariant T\n */\nclass Collection {\n    /** @var array<int, T> */\n    public array $list = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Templated Classes with Template Parameters in PHP\nDESCRIPTION: Shows how to extend a templated class with another templated class, preserving the template parameters.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/vimeo/psalm/docs/annotating_code/templated_annotations.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * @template T1\n */\nclass ParentClass {}\n\n/**\n * @template T2\n * @extends ParentClass<T2>\n */\nclass ChildClass extends ParentClass {}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS SDK Region Configuration in PHP\nDESCRIPTION: Reference to configuring specific AWS regions for services like Amazon Redshift, demonstrating the syntax for setting regional endpoints.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/www/lib/aws_v3/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n`ap-northeast-1` region\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests for ArrayToXml\nDESCRIPTION: This command shows how to run PHPUnit tests for the ArrayToXml library using Composer's vendor binary.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/spatie/array-to-xml/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Object Type Definition in Prophecy\nDESCRIPTION: Demonstrates how to specify class extension and interface implementation for a prophecy.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/phpspec/prophecy/README.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$prophecy->willExtend('stdClass');\n$prophecy->willImplement('SessionHandlerInterface');\n```\n\n----------------------------------------\n\nTITLE: Parser Build with Temporary Grammar Preservation\nDESCRIPTION: Command to build the parser while keeping the preprocessed grammar file for inspection\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/nikic/php-parser/grammar/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp grammar/rebuildParsers.php --keep-tmp-grammar\n```\n\n----------------------------------------\n\nTITLE: Installing Google Auth Library via Composer\nDESCRIPTION: Commands to install Composer and the Google Auth Library for PHP using the command line.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/google/auth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install Composer\ncurl -sS https://getcomposer.org/installer | php\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer.phar require google/auth\n```\n\n----------------------------------------\n\nTITLE: Using PropertyNameMatcher in DeepCopy PHP\nDESCRIPTION: Demonstrates how to use PropertyNameMatcher to match properties by name.\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/vendor/myclabs/deep-copy/README.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse DeepCopy\\Matcher\\PropertyNameMatcher;\n\n// Will apply a filter to any property of any objects named \"id\"\n$matcher = new PropertyNameMatcher('id');\n```\n\n----------------------------------------\n\nTITLE: Agent Log File Location\nDESCRIPTION: Path to the EC2 agent creation log file\nSOURCE: https://github.com/catchpoint/webpagetest/blob/master/docs/EC2/Server AMI.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n/var/www/webpagetest/www/ec2/log\n```"
  }
]