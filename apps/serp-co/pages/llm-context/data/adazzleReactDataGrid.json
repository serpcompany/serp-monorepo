[
  {
    "owner": "adazzle",
    "repo": "react-data-grid",
    "content": "TITLE: Basic React Data Grid Implementation Example\nDESCRIPTION: A simple example demonstrating how to use the DataGrid component with basic columns and rows configuration.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'react-data-grid/lib/styles.css';\n\nimport { DataGrid } from 'react-data-grid';\n\nconst columns = [\n  { key: 'id', name: 'ID' },\n  { key: 'title', name: 'Title' }\n];\n\nconst rows = [\n  { id: 0, title: 'Example' },\n  { id: 1, title: 'Demo' }\n];\n\nfunction App() {\n  return <DataGrid columns={columns} rows={rows} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Row Selection Functionality\nDESCRIPTION: Complete example showing how to implement row selection with custom selection handling and row selection disabling conditions.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DataGrid, SelectColumn } from 'react-data-grid';\n\nconst rows: readonly Rows[] = [...];\n\nconst columns: readonly Column<Row>[] = [\n  SelectColumn,\n  // other columns\n];\n\nfunction MyGrid() {\n  const [selectedRows, setSelectedRows] = useState((): ReadonlySet<number> => new Set());\n\n  return (\n    <DataGrid\n      rowKeyGetter={rowKeyGetter}\n      columns={columns}\n      rows={rows}\n      selectedRows={selectedRows}\n      isRowSelectionDisabled={isRowSelectionDisabled}\n      onSelectedRowsChange={setSelectedRows}\n    />\n  );\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction isRowSelectionDisabled(row: Row) {\n  return !row.isActive;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Row State with onRowsChange\nDESCRIPTION: Example demonstrating how to use state management with the onRowsChange callback to handle row data updates.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DataGrid } from 'react-data-grid';\n\nfunction MyGrid() {\n  const [rows, setRows] = useState(initialRows);\n\n  return <DataGrid columns={columns} rows={rows} onRowsChange={setRows} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Column Sorting in React Data Grid\nDESCRIPTION: Example demonstrating how to implement and control column sorting functionality, including handling sort state changes.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from 'react';\nimport { DataGrid, SelectColumn } from 'react-data-grid';\n\nconst rows: readonly Rows[] = [...];\n\nconst columns: readonly Column<Row>[] = [\n  {\n    key: 'name',\n    name: 'Name',\n    sortable: true\n  },\n  // other columns\n];\n\nfunction MyGrid() {\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>([]);\n\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      sortColumns={sortColumns}\n      onSortColumnsChange={setSortColumns}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing rowKeyGetter for Row Identification\nDESCRIPTION: Example showing how to implement the rowKeyGetter prop to provide unique identifiers for rows, which is required for row selection functionality.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataGrid } from 'react-data-grid';\n\ninterface Row {\n  id: number;\n  name: string;\n}\n\nfunction rowKeyGetter(row: Row) {\n  return row.id;\n}\n\nfunction MyGrid() {\n  return <DataGrid columns={columns} rows={rows} rowKeyGetter={rowKeyGetter} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Accessibility Properties in React Data Grid\nDESCRIPTION: Demonstrates setting ARIA attributes on the grid for accessibility, and how to target the grid in tests using role and name.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyGrid() {\n  return <DataGrid aria-label=\"my-grid\" columns={columns} rows={rows} />;\n}\n\nfunction MyGridTest() {\n  const grid = screen.getByRole('grid', { name: 'my-grid' });\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Row Rendering in React Data Grid\nDESCRIPTION: Demonstrates how to use the renderRow prop to customize row rendering, adding a context provider around the default Row component.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataGrid, RenderRowProps, Row } from 'react-data-grid';\n\nfunction myRowRenderer(key: React.Key, props: RenderRowProps<Row>) {\n  return (\n    <MyContext key={key} value={123}>\n      <Row {...props} />\n    </MyContext>\n  );\n}\n\nfunction MyGrid() {\n  return <DataGrid columns={columns} rows={rows} renderers={{ renderRow: myRowRenderer }} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Column Options\nDESCRIPTION: Example showing how to set default options for all columns in the grid, such as minimum width, resizability, sortability, and draggability.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyGrid() {\n  return (\n    <DataGrid\n      columns={columns}\n      rows={rows}\n      defaultColumnOptions={{\n        minWidth: 100,\n        resizable: true,\n        sortable: true,\n        draggable: true\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Column Widths with State\nDESCRIPTION: Example of controlling column widths using React state, including the ability to reset widths when data changes.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst [columnWidths, setColumnWidths] = useState((): ColumnWidths => new Map());\n\nfunction addNewRow() {\n  setRows(...);\n  // reset column widths after adding a new row\n  setColumnWidths(new Map());\n}\n\nreturn <DataGrid columnWidths={columnWidths} onColumnWidthsChange={setColumnWidths} ../>\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Click Events in React Data Grid\nDESCRIPTION: Demonstrates how to use the onCellClick callback to handle cell clicks with custom logic. The example shows preventing default selection behavior for cells in the 'id' column.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onCellClick(args: CellClickArgs<R, SR>, event: CellMouseEvent) {\n  if (args.column.key === 'id') {\n    event.preventGridDefault();\n  }\n}\n\n<DataGrid rows={rows} columns={columns} onCellClick={onCellClick} />;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Row Classes in React Data Grid\nDESCRIPTION: Shows how to use the rowClass prop to apply different CSS classes to alternate rows in the grid.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DataGrid } from 'react-data-grid';\n\nfunction MyGrid() {\n  return <DataGrid columns={columns} rows={rows} rowClass={rowClass} />;\n}\n\nfunction rowClass(row: Row, rowIdx: number) {\n  return rowIdx % 2 === 0 ? 'even' : 'odd';\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Cell Double-Click Events in React Data Grid\nDESCRIPTION: Demonstrates using the onCellDoubleClick callback to customize double-click behavior on cells. The example prevents the default editor opening for 'id' column cells.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onCellDoubleClick(args: CellClickArgs<R, SR>, event: CellMouseEvent) {\n  if (args.column.key === 'id') {\n    event.preventGridDefault();\n  }\n}\n\n<DataGrid rows={rows} columns={columns} onCellDoubleClick={onCellDoubleClick} />;\n```\n\n----------------------------------------\n\nTITLE: Handling Context Menu Events in React Data Grid\nDESCRIPTION: Shows how to use the onCellContextMenu callback to handle right-click events on cells, with an example of preventing the default cell selection for the 'id' column.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onCellContextMenu(args: CellClickArgs<R, SR>, event: CellMouseEvent) {\n  if (args.column.key === 'id') {\n    event.preventGridDefault();\n  }\n}\n\n<DataGrid rows={rows} columns={columns} onCellContextMenu={onCellContextMenu} />;\n```\n\n----------------------------------------\n\nTITLE: Opening Cell Editor on Single Click in React Data Grid\nDESCRIPTION: Shows how to customize cell click handling to open the cell editor on a single click instead of the default double-click behavior.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onCellClick(args: CellClickArgs<R, SR>, event: CellMouseEvent) {\n  if (args.column.key === 'id') {\n    event.preventGridDefault();\n    args.selectCell(true);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Column Sorting to Single Column\nDESCRIPTION: Code snippet showing how to limit column sorting to a single column by modifying the onSortColumnsChange function.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nonSortColumnsChange(sortColumns: SortColumn[]) {\n  setSortColumns(sortColumns.slice(-1));\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Cell Editing on Enter Key in React Data Grid\nDESCRIPTION: Demonstrates using the onCellKeyDown callback to prevent the default Enter key behavior that starts cell editing in select mode.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onCellKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n  if (args.mode === 'SELECT' && event.key === 'Enter') {\n    event.preventGridDefault();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preventing Tab Navigation in React Data Grid\nDESCRIPTION: Shows how to use the onCellKeyDown callback to prevent the default Tab key navigation behavior in select mode.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nfunction onCellKeyDown(args: CellKeyDownArgs<R, SR>, event: CellKeyboardEvent) {\n  if (args.mode === 'SELECT' && event.key === 'Tab') {\n    event.preventGridDefault();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Data Grid using npm or yarn\nDESCRIPTION: Command line instructions for installing the react-data-grid package using either npm or yarn package managers.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-data-grid\n# or\nyarn add react-data-grid\n```\n\n----------------------------------------\n\nTITLE: Importing React Data Grid styles\nDESCRIPTION: Code snippet showing how to import the default styles for react-data-grid in a React application.\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'react-data-grid/lib/styles.css';\n```\n\n----------------------------------------\n\nTITLE: Migrating Component Formatter Prop in React Data Grid\nDESCRIPTION: Example showing how to migrate from using React elements to using components in column formatters\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nconst column = {\n  key: 'example',\n  name: 'Example',\n- formatter: <CustomFormatter length={5} />\n+ formatter: (props) => <CustomFormatter {...props} length={5} />\n};\n```\n\n----------------------------------------\n\nTITLE: Checking NPM Authentication\nDESCRIPTION: Commands to verify and authenticate with npm using the adazzle account\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm login\\nnpm whoami\n```\n\n----------------------------------------\n\nTITLE: Publishing Beta Version\nDESCRIPTION: Commands to increment version number with beta tag and publish to npm registry\nSOURCE: https://github.com/adazzle/react-data-grid/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm version prerelease --preid=beta -m \"Publish %s\"\\nnpm publish --tag beta\n```"
  }
]