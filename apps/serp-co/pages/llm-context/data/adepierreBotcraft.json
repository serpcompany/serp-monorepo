[
  {
    "owner": "adepierre",
    "repo": "botcraft",
    "content": "TITLE: Building Botcraft Library with CMake\nDESCRIPTION: Commands to clone, configure, and build the Botcraft library using CMake. This configuration enables encryption and compression support, builds examples and tests, but disables OpenGL rendering.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/adepierre/Botcraft.git\ncd Botcraft\nmkdir build\ncd build\ncmake -DBOTCRAFT_GAME_VERSION=latest -DCMAKE_BUILD_TYPE=Release -DBOTCRAFT_BUILD_EXAMPLES=ON -DBOTCRAFT_BUILD_TESTS=ON -DBOTCRAFT_BUILD_TESTS_ONLINE=ON -DBOTCRAFT_COMPRESSION=ON -DBOTCRAFT_ENCRYPTION=ON -DBOTCRAFT_USE_OPENGL_GUI=OFF ..\ncmake --build . --config Release\n# Run all tests (optional)\nctest -C Release\n```\n\n----------------------------------------\n\nTITLE: Basic Botcraft Bot Example\nDESCRIPTION: A simple example of a Botcraft bot that connects to a server and responds to chat messages. This demonstrates the core functionality of creating and running a Minecraft bot.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.12.2/previous_custom_files.txt#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport botcraft\n\nbot = botcraft.Bot(\"127.0.0.1\", 25565, \"MyBot\")\nif not bot.connect():\n    # Connection failed for some reason\n    print(\"Connection failed\")\n    quit()\n\nfor i in range(100):\n    bot.tick()\n    \n    if i == 50:\n        bot.say(\"Hello world!\")\n\n    received = bot.get_next_received_chat_message()\n    if received != \"\":\n        # Answer to any chat message\n        bot.say(\"I received: \" + received)\n```\n\n----------------------------------------\n\nTITLE: Configuring Botcraft CMake Build with Minecraft Version Selection\nDESCRIPTION: The main CMakeLists.txt file that sets up the Botcraft project build system. It defines numerous build options, handles dependency management, configures protocol version selection based on Minecraft game version, and organizes various project components.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.19)\n\nproject(Botcraft)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\nset(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\ncmake_policy(SET CMP0074 NEW)\n\n# All cmake options\noption(BOTCRAFT_USE_OPENGL_GUI \"Activate if you want to use OpenGL renderer\" OFF)\noption(BOTCRAFT_USE_IMGUI \"Activate if you want to use display information on screen with ImGui\" OFF)\noption(BOTCRAFT_COMPRESSION \"Activate if compression is enabled on the server\" ON)\noption(BOTCRAFT_ENCRYPTION \"Activate if you want to connect to a server in online mode\" ON)\noption(BOTCRAFT_BUILD_EXAMPLES \"Set to compile examples with the library\" ON)\noption(BOTCRAFT_BUILD_TESTS \"Activate if you want to build tests\" OFF)\noption(BOTCRAFT_BUILD_TESTS_ONLINE \"Activate if you want to enable additional on server tests (requires Java)\" OFF)\noption(BOTCRAFT_WINDOWS_BETTER_SLEEP \"Set to true to use better thread sleep on Windows\" ON)\noption(BOTCRAFT_USE_PRECOMPILED_HEADERS \"Set to true to precompile botcraft headers, reducing compilation time with MSVC and Clang, ignored on GCC\" ON)\noption(BOTCRAFT_BUILD_DOC \"Build documentation (requires Doxygen)\" ON)\n\noption(BOTCRAFT_FORCE_LOCAL_ZLIB \"Set to true to force using a local install of zlib even if already present on the system\" OFF)\noption(BOTCRAFT_FORCE_LOCAL_OPENSSL \"Set to true to force using a local install of openssl even if already present on the system\" OFF)\noption(BOTCRAFT_FORCE_LOCAL_GLFW \"Set to true to force using a local install of glfw even if already present on the system\" OFF)\noption(BOTCRAFT_FORCE_LOCAL_GLAD \"Set to true to force using a local install of glad even if already present on the system\" OFF)\noption(BOTCRAFT_FORCE_LOCAL_CATCH \"Set to true to force using a local install of catch2 even if already present on the system\" OFF)\noption(BOTCRAFT_INSTALL_MC_ASSETS \"Install Minecraft assets next to custom ones\" ON)\n\n# Only change them if you *really* know what you are doing, not supported and very untested, will probably break something\noption(PROTOCOLCRAFT_STATIC \"If ON, will build protocolcraft as a static library instead of a dynamic one\" OFF)\nmark_as_advanced(PROTOCOLCRAFT_STATIC)\noption(BOTCRAFT_STATIC \"If ON, will build botcraft as a static library instead of a dynamic one\" OFF)\nmark_as_advanced(BOTCRAFT_STATIC)\n\nset(BOTCRAFT_OUTPUT_DIR \"${CMAKE_SOURCE_DIR}\" CACHE PATH \"Base output build path\")\n\n# Version selection stuffs\nset(BOTCRAFT_GAME_VERSION \"latest\" CACHE STRING \"Each version of the game uses a specific protocol. Make sure this matches the version of your server.\")\nset(GameVersionValues \"1.12.2;1.13;1.13.1;1.13.2;1.14;1.14.1;1.14.2;1.14.3;1.14.4;1.15;1.15.1;1.15.2;1.16;1.16.1;1.16.2;1.16.3;1.16.4;1.16.5;1.17;1.17.1;1.18;1.18.1;1.18.2;1.19;1.19.1;1.19.2;1.19.3;1.19.4;1.20;1.20.1;1.20.2;1.20.3;1.20.4;1.20.5;1.21;1.21.1;1.21.2;1.21.3;1.21.4;1.21.5;latest\")\nset(ProtocolVersionValues \"340;393;401;404;477;480;485;490;498;573;575;578;735;736;751;753;754;754;755;756;757;757;758;759;760;760;761;762;763;763;764;765;765;766;766;767;767;768;768;769;770\")\nset_property(CACHE BOTCRAFT_GAME_VERSION PROPERTY STRINGS ${GameVersionValues})\n\nif(BOTCRAFT_GAME_VERSION STREQUAL \"latest\")\n    list(GET GameVersionValues -2 BOTCRAFT_GAME_VERSION)\nendif()\n\nlist(FIND GameVersionValues ${BOTCRAFT_GAME_VERSION} game_version_index)\nlist(GET ProtocolVersionValues ${game_version_index} PROTOCOL_VERSION)\nmessage(STATUS \"Selected game version: \" ${BOTCRAFT_GAME_VERSION} \" || Protocol: \" ${PROTOCOL_VERSION})\n\n# Automatically retrieve client/server URLs for the selected game version\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/mc_urls.cmake\")\nget_mc_version_urls(${BOTCRAFT_GAME_VERSION})\n\nfile(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/version.txt\" ${BOTCRAFT_GAME_VERSION})\nfile(WRITE \"${CMAKE_CURRENT_BINARY_DIR}/protocol.txt\" ${PROTOCOL_VERSION})\n\n# Installation stuff\ninclude(GNUInstallDirs)\n\n# Do all the assets related stuffs\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/assets.cmake\")\n\n# Add Asio\ninclude(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/asio.cmake\")\n\n# Add ZLIB\nif(BOTCRAFT_COMPRESSION)\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/zlib.cmake\")\nendif(BOTCRAFT_COMPRESSION)\n\n# Add OpenSSL\nif(BOTCRAFT_ENCRYPTION)\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/openssl.cmake\")\nendif(BOTCRAFT_ENCRYPTION)\n\nif(BOTCRAFT_USE_OPENGL_GUI)\n    # Add OpenGL\n    find_package(OpenGL REQUIRED)\n\n    # Add glad\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/glad.cmake\")\n\n    #Add GLFW\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/glfw.cmake\")\n\n    # Add GLM\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/glm.cmake\")\n\n    # Add stb_image\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/stb_image.cmake\")\n\n    # Add rectpack2D\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/rectpack2D.cmake\")\n\n    if(BOTCRAFT_USE_IMGUI)\n        # Add Dear Imgui\n        include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/imgui.cmake\")\n    endif()\nendif()\n\n# Check pthreads\nfind_package(Threads)\n\nadd_subdirectory(protocolCraft)\nadd_subdirectory(botcraft)\nif(BOTCRAFT_BUILD_EXAMPLES)\n    add_subdirectory(Examples)\nendif()\n\n# Add tests if enabled\nif (BOTCRAFT_BUILD_TESTS)\n    include(CTest)\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/catch2.cmake\")\n\n    if(BOTCRAFT_BUILD_TESTS_ONLINE AND BOTCRAFT_COMPRESSION)\n        # Add subprocess\n        include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/subprocess.cmake\")\n\n        # Check if JRE is present to run the test server\n        if(BOTCRAFT_GAME_VERSION VERSION_LESS \"1.17\")\n            find_package(Java 8 QUIET COMPONENTS Runtime)\n        elseif(BOTCRAFT_GAME_VERSION VERSION_LESS \"1.20.5\")\n            find_package(Java 17 QUIET COMPONENTS Runtime)\n        else()\n            find_package(Java 21 QUIET COMPONENTS Runtime)\n        endif()\n\n        if(NOT Java_FOUND)\n            message(WARNING \"Java not found. Online tests will be built, but won't be able to run on this machine. You can disable online tests by setting BOTCRAFT_BUILD_TESTS_ONLINE to OFF\")\n        endif()\n\n        # Make sure server.jar is present\n        download_mc_server(${VERSION_SERVER_URL} \"${BOTCRAFT_OUTPUT_DIR}/bin/test_server_files/server_jars/server_${BOTCRAFT_GAME_VERSION}.jar\")\n    elseif(BOTCRAFT_BUILD_TESTS_ONLINE)\n        message(WARNING \"Online tests require BOTCRAFT_COMPRESSION\")\n    endif()\n\n    add_subdirectory(tests)\nendif()\n\n# Add doc generation if enabled\nif (BOTCRAFT_BUILD_DOC)\n    include(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/doxygen.cmake\")\nendif(BOTCRAFT_BUILD_DOC)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro for Example Project Setup\nDESCRIPTION: This macro simplifies the setup of example projects by defining common build settings, include directories, and output paths. It sets C++17 as the standard, configures debug and release postfixes, and handles platform-specific settings for MSVC and other compilers.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmacro(add_example include_folders source_files)\n    add_executable(${PROJECT_NAME} ${source_files})\n    target_include_directories(${PROJECT_NAME} PUBLIC ${include_folders})\n    target_link_libraries(${PROJECT_NAME} botcraft)\n    set_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)\n\n    set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Examples)\n    set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX \"_d\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RELWITHDEBINFO_POSTFIX \"_rd\")\n    if(MSVC)\n        # To avoid having folder for each configuration when building with Visual\n        set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n\n        set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n        set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\n    else()\n        set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    endif(MSVC)\n\n    install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring Botcraft Installation\nDESCRIPTION: Sets up installation rules for Botcraft, including library files, headers, CMake config files, and asset files. It also handles platform-specific installations for Windows and Linux.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/botcraft/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(GNUInstallDirs)\n\ninstall(TARGETS botcraft\n    EXPORT botcraft-targets\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n)\n\nif (NOT BOTCRAFT_INSTALL_MC_ASSETS)\n    if (WIN32)\n        install(FILES\n            \"${CMAKE_CURRENT_BINARY_DIR}/download_mc_assets.bat\"\n            DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n        )\n    else()\n        install(FILES\n            \"${CMAKE_CURRENT_BINARY_DIR}/download_mc_assets.sh\"\n            DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n        )\n    endif (WIN32)\nendif(NOT BOTCRAFT_INSTALL_MC_ASSETS)\n\ninstall(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/include/botcraft\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n)\n\ninstall(FILES\n    \"${CMAKE_CURRENT_BINARY_DIR}/include/botcraft/Version.hpp\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/botcraft\"\n)\n\ninstall(EXPORT botcraft-targets\n    FILE botcraft-targets.cmake\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/botcraft\"\n)\n\ninclude(CMakePackageConfigHelpers)\n\nconfigure_package_config_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/botcraft-config.cmake.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake/botcraft-config.cmake\"\n    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/botcraft\"\n)\n\ninstall(\n    FILES\n        \"${CMAKE_CURRENT_BINARY_DIR}/cmake/botcraft-config.cmake\"\n    DESTINATION\n        \"${CMAKE_INSTALL_LIBDIR}/cmake/botcraft\"\n)\n\nexport(EXPORT botcraft-targets\n    FILE \"${CMAKE_CURRENT_BINARY_DIR}/cmake/botcraft-targets.cmake\"\n)\n\n# Copy asset files into install binary folder\nif (BOTCRAFT_INSTALL_MC_ASSETS)\n    install(DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin/Assets/${BOTCRAFT_GAME_VERSION}\"\n        DESTINATION \"${CMAKE_INSTALL_BINDIR}/Assets\"\n    )\nelse()\n    install(DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin/Assets/${BOTCRAFT_GAME_VERSION}\"\n        DESTINATION \"${CMAKE_INSTALL_BINDIR}/Assets\"\n        PATTERN \"minecraft\" EXCLUDE\n    )\nendif(BOTCRAFT_INSTALL_MC_ASSETS)\n\n# Copy Mingw libstdc++ dll\nif(WIN32 AND MINGW)\n    install(FILES\n        \"${BOTCRAFT_OUTPUT_DIR}/bin/libstdc++-6.dll\"\n        DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Advanced Pathfinding Example with Botcraft\nDESCRIPTION: Example demonstrating how to use Botcraft's pathfinding capabilities to navigate to specific coordinates in the Minecraft world. Shows how to handle blockers and path following.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.12.2/previous_custom_files.txt#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport botcraft\n\nbot = botcraft.Bot(\"127.0.0.1\", 25565, \"MyBot\")\nif not bot.connect():\n    # Connection failed for some reason\n    print(\"Connection failed\")\n    quit()\n\ntarget_position = botcraft.Position(100, 65, 100)\n\n# Start pathfinding, using A* and creating the path asynchronously\nbot.pathfinding.set_target(target_position, \"sprint\", False)\nbot.pathfinding.compute_path_async()\n\nwhile True:\n    bot.tick()\n    \n    # Check if async computation of path has ended\n    if not bot.pathfinding.is_computing_path():\n        # Path has been computed\n        if bot.pathfinding.get_path_status() == \"found\":\n            # If path is found, just follow it\n            # Will return True when the target position is reached or if\n            # path following was interrupted (e.g. attacked by a mob)\n            if bot.pathfinding.follow_path():\n                # Target position reached\n                break\n        else:\n            # Path not found, maybe try a different position?\n            break\n```\n\n----------------------------------------\n\nTITLE: Defining ProtocolCraft Public Headers in CMake\nDESCRIPTION: This CMake snippet defines the public header files for the ProtocolCraft library, organizing them by protocol phase (Handshaking, Login, Play) and message direction (Clientbound, Serverbound). The structure represents Minecraft's networking protocol implementation.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/protocolCraft/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(protocolCraft)\n\nset(protocolCraft_PUBLIC_HDR\n    include/protocolCraft/AllClientboundMessages.hpp\n    include/protocolCraft/AllMessages.hpp\n    include/protocolCraft/AllServerboundMessages.hpp\n    include/protocolCraft/BaseMessage.hpp\n    include/protocolCraft/BinaryReadWrite.hpp\n    include/protocolCraft/enums.hpp\n    include/protocolCraft/GenericHandler.hpp\n    include/protocolCraft/Handler.hpp\n    include/protocolCraft/Message.hpp\n    include/protocolCraft/MessageFactory.hpp\n    include/protocolCraft/NetworkType.hpp\n\n    include/protocolCraft/Messages/Handshaking/Serverbound/ServerboundClientIntentionPacket.hpp\n\n\n    include/protocolCraft/Messages/Login/Clientbound/ClientboundCookieRequestPacket.hpp\n    include/protocolCraft/Messages/Login/Clientbound/ClientboundCustomQueryPacket.hpp\n    include/protocolCraft/Messages/Login/Clientbound/ClientboundGameProfilePacket.hpp\n    include/protocolCraft/Messages/Login/Clientbound/ClientboundHelloPacket.hpp\n    include/protocolCraft/Messages/Login/Clientbound/ClientboundLoginCompressionPacket.hpp\n    include/protocolCraft/Messages/Login/Clientbound/ClientboundLoginDisconnectPacket.hpp\n    include/protocolCraft/Messages/Login/Clientbound/ClientboundLoginFinishedPacket.hpp\n\n    include/protocolCraft/Messages/Login/Serverbound/ServerboundCookieResponsePacket.hpp\n    include/protocolCraft/Messages/Login/Serverbound/ServerboundCustomQueryAnswerPacket.hpp\n    include/protocolCraft/Messages/Login/Serverbound/ServerboundCustomQueryPacket.hpp\n    include/protocolCraft/Messages/Login/Serverbound/ServerboundHelloPacket.hpp\n    include/protocolCraft/Messages/Login/Serverbound/ServerboundKeyPacket.hpp\n    include/protocolCraft/Messages/Login/Serverbound/ServerboundLoginAcknowledgedPacket.hpp\n\n\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAddEntityPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAddExperienceOrbPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAddGlobalEntityPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAddMobPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAddPaintingPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAddPlayerPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAddVibrationSignalPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAnimatePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundAwardStatsPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBlockBreakAckPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBlockChangedAckPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBlockDestructionPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBlockEntityDataPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBlockEventPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBlockUpdatePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBossEventPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundBundlePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundChangeDifficultyPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundChatPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundChatPreviewPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundChunkBatchFinishedPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundChunkBatchStartPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundChunksBiomesPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundClearTitlesPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCommandsPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCommandSuggestionsPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundContainerAckPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundContainerClosePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundContainerSetContentPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundContainerSetDataPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundContainerSetSlotPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCookieRequestPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCooldownPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCustomChatCompletionsPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCustomPayloadPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCustomReportDetailsPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundCustomSoundPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundDamageEventPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundDebugSamplePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundDeleteChatPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundDisconnectPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundDisguisedChatPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundEntityEventPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundEntityPositionSyncPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundExplodePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundForgetLevelChunkPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundGameEventPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundHorseScreenOpenPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundHurtAnimationPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundInitializeBorderPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundKeepAlivePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundLevelChunkPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundLevelChunkWithLightPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundLevelEventPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundLevelParticlesPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundLightUpdatePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundLoginPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMapItemDataPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMerchantOffersPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMoveEntityPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMoveEntityPacketPos.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMoveEntityPacketPosRot.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMoveEntityPacketRot.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMoveMinecartPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundMoveVehiclePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundOpenBookPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundOpenScreenPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundOpenSignEditorPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPingPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlaceGhostRecipePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerAbilitiesPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerChatHeaderPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerChatPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerCombatEndPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerCombatEnterPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerCombatKillPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerCombatPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerInfoPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerInfoRemovePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerInfoUpdatePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerLookAtPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerPositionPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPlayerRotationPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundPongResponsePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundProjectilePowerPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundRecipeBookAddPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundRecipeBookRemovePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundRecipeBookSettingsPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundRecipePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundRemoveEntitiesPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundRemoveEntityPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundRemoveMobEffectPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundResourcePackPacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundResetScorePacket.hpp\n    include/protocolCraft/Messages/Play/Clientbound/ClientboundResourcePackPopPacket.hpp\n```\n\n----------------------------------------\n\nTITLE: Configuring Botcraft Dependencies and Includes\nDESCRIPTION: Sets up dependencies for Botcraft, including protocolCraft, Asio, threads, and optional GUI libraries. It also configures include directories and compile definitions.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/botcraft/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(botcraft\n    PUBLIC\n        \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n        \"$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}/include>\"\n        \"$<INSTALL_INTERFACE:include>\"\n    PRIVATE\n        \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/private_include>\"\n)\n\ntarget_compile_definitions(botcraft PRIVATE ASSETS_PATH=\"${ASSET_DIR}\")\n\nif (NOT BOTCRAFT_STATIC)\n    # Add DL lib for linux compilation\n    target_link_libraries(botcraft PUBLIC ${CMAKE_DL_LIBS})\nendif()\n\n# Add protocolCraft\ntarget_link_libraries(botcraft PUBLIC protocolCraft)\n\nif (WIN32 AND BOTCRAFT_WINDOWS_BETTER_SLEEP)\n    target_link_libraries(botcraft PRIVATE winmm.lib)\n    target_compile_definitions(botcraft PRIVATE BETTER_SLEEP=1)\nendif()\n\n# Add Asio\ntarget_link_libraries(botcraft PRIVATE asio)\ntarget_compile_definitions(botcraft PRIVATE ASIO_STANDALONE)\n\n# Add threads support\ntarget_link_libraries(botcraft PUBLIC Threads::Threads)\n\n# Add graphical dependencies\nif(BOTCRAFT_USE_OPENGL_GUI)\n    target_link_libraries(botcraft PRIVATE glfw glad glm rectpack2D OpenGL::GL stb_image)\n    if(BOTCRAFT_USE_IMGUI)\n        target_link_libraries(botcraft PRIVATE imgui)\n        target_compile_definitions(botcraft PRIVATE USE_IMGUI=1)\n    endif()\n    target_compile_definitions(botcraft PUBLIC USE_GUI=1)\nendif(BOTCRAFT_USE_OPENGL_GUI)\n\nif(BOTCRAFT_COMPRESSION)\n    target_link_libraries(botcraft PRIVATE ZLIB::ZLIB)\n    target_compile_definitions(botcraft PRIVATE USE_COMPRESSION=1)\nendif(BOTCRAFT_COMPRESSION)\n\nif(BOTCRAFT_ENCRYPTION)\n    target_link_libraries(botcraft PRIVATE OpenSSL::SSL)\n    target_link_libraries(botcraft PRIVATE OpenSSL::Crypto)\n    target_compile_definitions(botcraft PRIVATE USE_ENCRYPTION=1)\nendif(BOTCRAFT_ENCRYPTION)\n```\n\n----------------------------------------\n\nTITLE: Configuring HelloWorld Example Project in CMake\nDESCRIPTION: This CMake snippet sets up the source files and include directories for a HelloWorld example project. It defines the project name, specifies the main source file, and uses a custom 'add_example' function to create the build target.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/0_HelloWorld/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(0_HelloWorld)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: CMake Project Structure Definition\nDESCRIPTION: CMake configuration showing the organization of header files and source files for the Botcraft project. Defines public headers, private headers, and source files with their respective paths.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/botcraft/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(botcraft_PRIVATE_HDR\n    private_include/botcraft/Network/Authentifier.hpp\n    private_include/botcraft/Network/AESEncrypter.hpp\n    private_include/botcraft/Network/Compression.hpp\n    private_include/botcraft/Network/TCP_Com.hpp\n\n    private_include/botcraft/Network/DNS/DNSMessage.hpp\n    private_include/botcraft/Network/DNS/DNSQuestion.hpp\n    private_include/botcraft/Network/DNS/DNSResourceRecord.hpp\n    private_include/botcraft/Network/DNS/DNSSrvData.hpp\n\n    private_include/botcraft/Utilities/StringUtilities.hpp\n\n    private_include/botcraft/Game/World/Section.hpp\n)\n\nset(botcraft_SRC\n    src/AI/BaseNode.cpp\n    src/AI/BehaviourClient.cpp\n    src/AI/Blackboard.cpp\n    src/AI/SimpleBehaviourClient.cpp\n\n    src/AI/Tasks/BaseTasks.cpp\n    src/AI/Tasks/DigTask.cpp\n    src/AI/Tasks/EntitiesTasks.cpp\n    src/AI/Tasks/InventoryTasks.cpp\n    src/AI/Tasks/PathfindingTask.cpp\n\n    src/Game/AssetsManager.cpp\n    src/Game/ConnectionClient.cpp\n    src/Game/Enums.cpp\n    src/Game/ManagersClient.cpp\n    src/Game/Model.cpp\n\n    src/Game/World/Biome.cpp\n    src/Game/World/Blockstate.cpp\n    src/Game/World/Chunk.cpp\n    src/Game/World/Section.cpp\n    src/Game/World/World.cpp\n\n    src/Game/Inventory/Window.cpp\n    src/Game/Inventory/InventoryManager.cpp\n    src/Game/Inventory/Item.cpp\n\n    src/Game/Entities/EntityAttribute.cpp\n    src/Game/Entities/EntityManager.cpp\n    src/Game/Entities/LocalPlayer.cpp\n    src/Game/Entities/entities/UnknownEntity.cpp\n\n    src/Game/Entities/entities/animal/allay/AllayEntity.cpp\n    src/Game/Entities/entities/AreaEffectCloudEntity.cpp\n    src/Game/Entities/entities/animal/armadillo/ArmadilloEntity.cpp\n    src/Game/Entities/entities/decoration/ArmorStandEntity.cpp\n    src/Game/Entities/entities/decoration/BlockAttachedEntity.cpp\n    src/Game/Entities/entities/projectile/ArrowEntity.cpp\n    src/Game/Entities/entities/animal/axolotl/AxolotlEntity.cpp\n    src/Game/Entities/entities/ambient/BatEntity.cpp\n    src/Game/Entities/entities/animal/BeeEntity.cpp\n    src/Game/Entities/entities/monster/BlazeEntity.cpp\n    src/Game/Entities/entities/monster/BoggedEntity.cpp\n    src/Game/Entities/entities/vehicle/BoatEntity.cpp\n    src/Game/Entities/entities/monster/breeze/BreezeEntity.cpp\n    src/Game/Entities/entities/vehicle/ChestBoatEntity.cpp\n    src/Game/Entities/entities/animal/CatEntity.cpp\n    src/Game/Entities/entities/animal/camel/CamelEntity.cpp\n    src/Game/Entities/entities/monster/CaveSpiderEntity.cpp\n    src/Game/Entities/entities/animal/ChickenEntity.cpp\n    src/Game/Entities/entities/animal/CodEntity.cpp\n    src/Game/Entities/entities/animal/CowEntity.cpp\n    src/Game/Entities/entities/monster/CreeperEntity.cpp\n    src/Game/Entities/entities/animal/DolphinEntity.cpp\n    src/Game/Entities/entities/animal/horse/DonkeyEntity.cpp\n    src/Game/Entities/entities/projectile/DragonFireballEntity.cpp\n    src/Game/Entities/entities/DisplayBlockDisplayEntity.cpp\n    src/Game/Entities/entities/DisplayEntity.cpp\n    src/Game/Entities/entities/DisplayItemDisplayEntity.cpp\n    src/Game/Entities/entities/DisplayTextDisplayEntity.cpp\n    src/Game/Entities/entities/monster/DrownedEntity.cpp\n    src/Game/Entities/entities/monster/ElderGuardianEntity.cpp\n    src/Game/Entities/entities/boss/enderdragon/EndCrystalEntity.cpp\n    src/Game/Entities/entities/boss/enderdragon/EnderDragonEntity.cpp\n    src/Game/Entities/entities/monster/EnderManEntity.cpp\n    src/Game/Entities/entities/monster/EndermiteEntity.cpp\n    src/Game/Entities/entities/monster/EvokerEntity.cpp\n    src/Game/Entities/entities/projectile/EvokerFangsEntity.cpp\n    src/Game/Entities/entities/ExperienceOrbEntity.cpp\n    src/Game/Entities/entities/projectile/EyeOfEnderEntity.cpp\n    src/Game/Entities/entities/item/FallingBlockEntity.cpp\n    src/Game/Entities/entities/projectile/FireworkRocketEntity.cpp\n    src/Game/Entities/entities/animal/FoxEntity.cpp\n    src/Game/Entities/entities/animal/frog/FrogEntity.cpp\n    src/Game/Entities/entities/monster/GhastEntity.cpp\n    src/Game/Entities/entities/monster/GiantEntity.cpp\n    src/Game/Entities/entities/decoration/GlowItemFrameEntity.cpp\n    src/Game/Entities/entities/GlowSquidEntity.cpp\n    src/Game/Entities/entities/animal/goat/GoatEntity.cpp\n    src/Game/Entities/entities/monster/GuardianEntity.cpp\n    src/Game/Entities/entities/monster/hoglin/HoglinEntity.cpp\n    src/Game/Entities/entities/animal/horse/HorseEntity.cpp\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules for ProtocolCraft Library\nDESCRIPTION: Configures installation rules for the ProtocolCraft library, including targets, headers, and CMake package files.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/protocolCraft/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Installation stuff\ninclude(GNUInstallDirs)\n\ninstall(TARGETS protocolCraft\n    EXPORT protocolCraft-targets\n    ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n    LIBRARY DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n)\n\ninstall(DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}/include/protocolCraft\"\n    DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n)\n\ninstall(EXPORT protocolCraft-targets\n    # lowercase as required by find_package\n    FILE protocolcraft-targets.cmake\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/protocolCraft\"\n)\n\ninclude(CMakePackageConfigHelpers)\n\nconfigure_package_config_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/protocolCraft-config.cmake.in\"\n    # lowercase as required by find_package\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake/protocolcraft-config.cmake\"\n    INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/protocolCraft\"\n)\n\ninstall(\n    FILES\n        \"${CMAKE_CURRENT_BINARY_DIR}/cmake/protocolcraft-config.cmake\"\n    DESTINATION\n        \"${CMAKE_INSTALL_LIBDIR}/cmake/protocolCraft\"\n)\n\nexport(EXPORT protocolCraft-targets\n    # lowercase as required by find_package\n    FILE \"${CMAKE_CURRENT_BINARY_DIR}/cmake/protocolcraft-targets.cmake\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Botcraft Public Headers in CMake\nDESCRIPTION: This snippet sets up the list of public header files for the Botcraft project. It includes headers for AI components, game mechanics, world representation, and a comprehensive list of entity types.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/botcraft/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(botcraft)\n\nset(botcraft_PUBLIC_HDR\n    include/botcraft/AI/BaseNode.hpp\n    include/botcraft/AI/BehaviourClient.hpp\n    include/botcraft/AI/BehaviourTree.hpp\n    include/botcraft/AI/Blackboard.hpp\n    include/botcraft/AI/SimpleBehaviourClient.hpp\n    include/botcraft/AI/Status.hpp\n    include/botcraft/AI/TemplatedBehaviourClient.hpp\n\n    include/botcraft/AI/Tasks/AllTasks.hpp\n    include/botcraft/AI/Tasks/BaseTasks.hpp\n    include/botcraft/AI/Tasks/DigTask.hpp\n    include/botcraft/AI/Tasks/EntitiesTasks.hpp\n    include/botcraft/AI/Tasks/InventoryTasks.hpp\n    include/botcraft/AI/Tasks/PathfindingTask.hpp\n\n    include/botcraft/Game/AssetsManager.hpp\n    include/botcraft/Game/ManagersClient.hpp\n    include/botcraft/Game/ConnectionClient.hpp\n    include/botcraft/Game/Enums.hpp\n    include/botcraft/Game/Model.hpp\n    include/botcraft/Game/Vector3.hpp\n\n    include/botcraft/Game/World/Biome.hpp\n    include/botcraft/Game/World/Blockstate.hpp\n    include/botcraft/Game/World/Chunk.hpp\n    include/botcraft/Game/World/World.hpp\n\n    include/botcraft/Game/Entities/EntityAttribute.hpp\n    include/botcraft/Game/Entities/EntityManager.hpp\n    include/botcraft/Game/Entities/GlobalPos.hpp\n    include/botcraft/Game/Entities/LocalPlayer.hpp\n    include/botcraft/Game/Entities/VillagerData.hpp\n    include/botcraft/Game/Entities/entities/UnknownEntity.hpp\n\n    include/botcraft/Game/Entities/entities/animal/allay/AllayEntity.hpp\n    include/botcraft/Game/Entities/entities/AreaEffectCloudEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/armadillo/ArmadilloEntity.hpp\n    include/botcraft/Game/Entities/entities/decoration/ArmorStandEntity.hpp\n    include/botcraft/Game/Entities/entities/decoration/BlockAttachedEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ArrowEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/axolotl/AxolotlEntity.hpp\n    include/botcraft/Game/Entities/entities/ambient/BatEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/BeeEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/BlazeEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/BoggedEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/BoatEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/breeze/BreezeEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/ChestBoatEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/CatEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/camel/CamelEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/CaveSpiderEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/ChickenEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/CodEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/CowEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/CreeperEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/DolphinEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/horse/DonkeyEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/DragonFireballEntity.hpp\n    include/botcraft/Game/Entities/entities/DisplayBlockDisplayEntity.hpp\n    include/botcraft/Game/Entities/entities/DisplayEntity.hpp\n    include/botcraft/Game/Entities/entities/DisplayItemDisplayEntity.hpp\n    include/botcraft/Game/Entities/entities/DisplayTextDisplayEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/DrownedEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/ElderGuardianEntity.hpp\n    include/botcraft/Game/Entities/entities/boss/enderdragon/EndCrystalEntity.hpp\n    include/botcraft/Game/Entities/entities/boss/enderdragon/EnderDragonEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/EnderManEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/EndermiteEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/EvokerEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/EvokerFangsEntity.hpp\n    include/botcraft/Game/Entities/entities/ExperienceOrbEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/EyeOfEnderEntity.hpp\n    include/botcraft/Game/Entities/entities/item/FallingBlockEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/FireworkRocketEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/FoxEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/frog/FrogEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/GhastEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/GiantEntity.hpp\n    include/botcraft/Game/Entities/entities/decoration/GlowItemFrameEntity.hpp\n    include/botcraft/Game/Entities/entities/GlowSquidEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/goat/GoatEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/GuardianEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/hoglin/HoglinEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/horse/HorseEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/HuskEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/IllusionerEntity.hpp\n    include/botcraft/Game/Entities/entities/InteractionEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/IronGolemEntity.hpp\n    include/botcraft/Game/Entities/entities/item/ItemEntity.hpp\n    include/botcraft/Game/Entities/entities/decoration/ItemFrameEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/LargeFireballEntity.hpp\n    include/botcraft/Game/Entities/entities/decoration/LeashFenceKnotEntity.hpp\n    include/botcraft/Game/Entities/entities/LightningBoltEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/horse/LlamaEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/LlamaSpitEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/MagmaCubeEntity.hpp\n    include/botcraft/Game/Entities/entities/MarkerEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/MinecartEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/MinecartChestEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/MinecartCommandBlockEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/MinecartFurnaceEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/MinecartHopperEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/MinecartSpawnerEntity.hpp\n    include/botcraft/Game/Entities/entities/vehicle/MinecartTNTEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/horse/MuleEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/MushroomCowEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/OcelotEntity.hpp\n    include/botcraft/Game/Entities/entities/decoration/PaintingEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/PandaEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/ParrotEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/PhantomEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/PigZombieEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/PigEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/piglin/PiglinEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/piglin/PiglinBruteEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/PillagerEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/PolarBearEntity.hpp\n    include/botcraft/Game/Entities/entities/item/PrimedTntEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/PufferfishEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/RabbitEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/RavagerEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/SalmonEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/SheepEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/sheep/SheepEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/ShulkerEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ShulkerBulletEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/SilverfishEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/SkeletonEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/horse/SkeletonHorseEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/SlimeEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/SmallFireballEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/sniffer/SnifferEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/SnowGolemEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/SnowballEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/SpectralArrowEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/SpiderEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/SquidEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/StrayEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/StriderEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/frog/TadpoleEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ThrownEggEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ThrownEnderpearlEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ThrownExperienceBottleEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ThrownLingeringPotionEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ThrownPotionEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ThrownSplashPotionEntity.hpp\n    include/botcraft/Game/Entities/entities/projectile/ThrownTridentEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/horse/TraderLlamaEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/TropicalFishEntity.hpp\n    include/botcraft/Game/Entities/entities/animal/TurtleEntity.hpp\n    include/botcraft/Game/Entities/entities/monster/VexEntity.hpp\n    include/botcraft/Game/Entities/entities/npc/VillagerEntity.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring WorldEater Example Project in CMake\nDESCRIPTION: Defines the project structure by specifying source files and include directories for the WorldEater example. Sets up variables for source files including both header and implementation files, configures include paths, and creates the example target using custom add_example function.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/7_WorldEaterExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(7_WorldEaterExample)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/include/WorldEaterClient.hpp\n    ${PROJECT_SOURCE_DIR}/include/WorldEaterSubTrees.hpp\n    ${PROJECT_SOURCE_DIR}/include/WorldEaterTasks.hpp\n    ${PROJECT_SOURCE_DIR}/include/WorldEaterUtilities.hpp\n\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n    ${PROJECT_SOURCE_DIR}/src/WorldEaterClient.cpp\n    ${PROJECT_SOURCE_DIR}/src/WorldEaterSubTrees.cpp\n    ${PROJECT_SOURCE_DIR}/src/WorldEaterTasks.cpp\n    ${PROJECT_SOURCE_DIR}/src/WorldEaterUtilities.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n    ${PROJECT_SOURCE_DIR}/include\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring DispenserFarmExample Project in CMake\nDESCRIPTION: This CMake script sets up the DispenserFarmExample project by defining source files and include directories. It then adds the project as an example to the Botcraft framework using a custom add_example function.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/6_DispenserFarmExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(6_DispenserFarmExample)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/include/DispenserFarmTasks.hpp\n\n    ${PROJECT_SOURCE_DIR}/src/DispenserFarmTasks.cpp\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n    ${PROJECT_SOURCE_DIR}/include\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring User Controlled Example in CMake\nDESCRIPTION: Sets up source files and include directories for the user-controlled client example, then calls the add_example function to include it in the build. The configuration specifies both header and implementation files needed for the example.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/1_UserControlledExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(1_UserControlledExample)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/include/UserControlledClient.hpp\n\n    ${PROJECT_SOURCE_DIR}/src/UserControlledClient.cpp\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n    ${PROJECT_SOURCE_DIR}/include\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ChatCommandExample Project in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the ChatCommandExample project. It defines the source files, include directories, and adds the example to the build using a custom add_example function.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/2_ChatCommandExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(2_ChatCommandExample)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/include/ChatCommandClient.hpp\n\n    ${PROJECT_SOURCE_DIR}/src/ChatCommandClient.cpp\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n    ${PROJECT_SOURCE_DIR}/include\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for MobHitter Example in Botcraft\nDESCRIPTION: This CMake code configures the MobHitter example project by specifying source files, header files, and include directories. It then calls a custom 'add_example' function to add the project to the build system.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/5_MobHitterExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(5_MobHitterExample)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/include/MobHitterTasks.hpp\n\n    ${PROJECT_SOURCE_DIR}/src/MobHitterTasks.cpp\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n    ${PROJECT_SOURCE_DIR}/include\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SimpleAFKExample CMake Project\nDESCRIPTION: Sets up the CMake project configuration for the SimpleAFKExample, defining source files and include folders. The configuration includes only the main.cpp source file and no additional include directories before calling the add_example function.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/3_SimpleAFKExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(3_SimpleAFKExample)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MapCreator Example Project in CMake\nDESCRIPTION: Sets up the project configuration for the MapCreator example in Botcraft. It defines source files, include directories, and adds the example to the build process.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/4_MapCreatorExample/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(4_MapCreatorExample)\n\nset(${PROJECT_NAME}_SOURCE_FILES\n    ${PROJECT_SOURCE_DIR}/include/MapCreationTasks.hpp\n    ${PROJECT_SOURCE_DIR}/include/CustomBehaviourTree.hpp\n\n    ${PROJECT_SOURCE_DIR}/src/MapCreationTasks.cpp\n    ${PROJECT_SOURCE_DIR}/src/main.cpp\n)\nset(${PROJECT_NAME}_INCLUDE_FOLDERS\n    ${PROJECT_SOURCE_DIR}/include\n)\n\nadd_example(\"${${PROJECT_NAME}_INCLUDE_FOLDERS}\" \"${${PROJECT_NAME}_SOURCE_FILES}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of OpenGL GUI Components in C++\nDESCRIPTION: This code snippet conditionally includes OpenGL GUI-related header and source files if the BOTCRAFT_USE_OPENGL_GUI flag is set. It adds renderer components to the project build.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/botcraft/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOTCRAFT_USE_OPENGL_GUI)\n    list(APPEND botcraft_PUBLIC_HDR\n            include/botcraft/Renderer/RenderingManager.hpp\n            include/botcraft/Renderer/Enums.hpp\n            include/botcraft/Renderer/Face.hpp\n            include/botcraft/Renderer/Transformation.hpp\n    )\n\n    list(APPEND botcraft_PRIVATE_HDR\n            private_include/botcraft/Renderer/Atlas.hpp\n            private_include/botcraft/Renderer/BehaviourRenderer.hpp\n            private_include/botcraft/Renderer/BlockRenderable.hpp\n            private_include/botcraft/Renderer/Camera.hpp\n            private_include/botcraft/Renderer/Chunk.hpp\n            private_include/botcraft/Renderer/Entity.hpp\n            private_include/botcraft/Renderer/ImageSaver.hpp\n            private_include/botcraft/Renderer/Shader.hpp\n            private_include/botcraft/Renderer/TransparentChunk.hpp\n            private_include/botcraft/Renderer/WorldRenderer.hpp\n    )\n\n    list(APPEND botcraft_SRC\n            src/Renderer/Atlas.cpp\n            src/Renderer/BehaviourRenderer.cpp\n            src/Renderer/BlockRenderable.cpp\n            src/Renderer/Camera.cpp\n            src/Renderer/Chunk.cpp\n            src/Renderer/Entity.cpp\n            src/Renderer/RenderingManager.cpp\n            src/Renderer/Face.cpp\n            src/Renderer/ImageSaver.cpp\n            src/Renderer/Shader.cpp\n            src/Renderer/Transformation.cpp\n            src/Renderer/TransparentChunk.cpp\n    )\n```\n\n----------------------------------------\n\nTITLE: Configuring ProtocolCraft Library Dependencies and Definitions\nDESCRIPTION: Sets up version definitions, include directories, and optional dependencies like ZLIB for the ProtocolCraft library.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/protocolCraft/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Set version\ntarget_compile_definitions(protocolCraft PUBLIC PROTOCOL_VERSION=${PROTOCOL_VERSION})\n\n# Add include folders\ntarget_include_directories(protocolCraft\n    PUBLIC\n        \"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\"\n        \"$<INSTALL_INTERFACE:include>\"\n)\n\nif(BOTCRAFT_COMPRESSION)\n    target_link_libraries(protocolCraft PRIVATE ZLIB::ZLIB)\n    target_compile_definitions(protocolCraft PRIVATE USE_COMPRESSION=1)\nendif(BOTCRAFT_COMPRESSION)\n\nif (NOT PROTOCOLCRAFT_STATIC)\n    # Add DL lib for linux compilation\n    target_link_libraries(protocolCraft PUBLIC ${CMAKE_DL_LIBS})\nendif()\n\n# Setup detailed parsing preprocessor variable\nif(PROTOCOLCRAFT_DETAILED_PARSING)\n    target_compile_definitions(protocolCraft PUBLIC PROTOCOLCRAFT_DETAILED_PARSING=1)\nendif(PROTOCOLCRAFT_DETAILED_PARSING)\n```\n\n----------------------------------------\n\nTITLE: Configuring ProtocolCraft Library Build\nDESCRIPTION: Sets up the ProtocolCraft library build, including static/shared options, C++ standard, and compiler-specific flags.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/protocolCraft/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(PROTOCOLCRAFT_STATIC)\n    add_library(protocolCraft STATIC ${protocolCraft_SRC} ${protocolCraft_PUBLIC_HDR})\nelse()\n    add_library(protocolCraft SHARED ${protocolCraft_SRC} ${protocolCraft_PUBLIC_HDR})\nendif(PROTOCOLCRAFT_STATIC)\nset_property(TARGET protocolCraft PROPERTY CXX_STANDARD 17)\nset_property(TARGET protocolCraft PROPERTY POSITION_INDEPENDENT_CODE ON)\nset_target_properties(protocolCraft PROPERTIES DEBUG_POSTFIX \"_d\")\nset_target_properties(protocolCraft PROPERTIES RELWITHDEBINFO_POSTFIX \"_rd\")\n\nif (MSVC)\n    target_compile_options(protocolCraft PRIVATE \"/bigobj\")\n    set_target_properties(protocolCraft PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\nendif (MSVC)\n```\n\n----------------------------------------\n\nTITLE: Configuring Botcraft Library Build\nDESCRIPTION: Sets up the Botcraft library build, including static/shared library configuration, C++ standard, and compiler-specific options. It also configures precompiled headers and output directories.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/botcraft/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOTCRAFT_STATIC)\n    add_library(botcraft STATIC ${botcraft_SRC} ${botcraft_PUBLIC_HDR} ${botcraft_PRIVATE_HDR})\nelse()\n    add_library(botcraft SHARED ${botcraft_SRC} ${botcraft_PUBLIC_HDR} ${botcraft_PRIVATE_HDR})\nendif(BOTCRAFT_STATIC)\nset_property(TARGET botcraft PROPERTY CXX_STANDARD 17)\nset_target_properties(botcraft PROPERTIES DEBUG_POSTFIX \"_d\")\nset_target_properties(botcraft PROPERTIES RELWITHDEBINFO_POSTFIX \"_rd\")\n\n# Enable precompiled headers, except on GCC because it's hurting performances\nif (BOTCRAFT_USE_PRECOMPILED_HEADERS AND NOT CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\")\n    target_precompile_headers(botcraft PRIVATE\n        include/botcraft/Game/Entities/entities/Entity.hpp\n        ${protocolCraft_SOURCE_DIR}/include/protocolCraft/AllMessages.hpp\n    )\nendif()\n\nif(MSVC)\n    # To avoid having folder for each configuration when building with Visual\n    set_target_properties(botcraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(botcraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(botcraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(botcraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/lib\")\nelse()\n    set_target_properties(botcraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(botcraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/lib\")\nendif(MSVC)\n\nif (MSVC)\n    target_compile_options(botcraft PRIVATE \"/bigobj\")\n    set_target_properties(botcraft PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\nendif (MSVC)\n```\n\n----------------------------------------\n\nTITLE: Configuring Botcraft Online Tests Project in CMake\nDESCRIPTION: Defines a CMake project for Botcraft online tests, setting up source files, header files, and creating an executable with appropriate compile options and dependencies. The configuration includes special handling for Visual Studio projects and ensures proper test execution.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/tests/botcraft_online/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(botcraft_online_tests)\n\nset(HDR_FILES\n    include/MinecraftServer.hpp\n    include/TestManager.hpp\n    include/Utils.hpp\n)\n\nset(SRC_FILES\n    src/main.cpp\n\n    src/MinecraftServer.cpp\n    src/TestManager.cpp\n    src/Utils.cpp\n\n    src/tests/base_tasks.cpp\n    src/tests/dig.cpp\n    src/tests/entities.cpp\n    src/tests/inventory.cpp\n    src/tests/pathfinding.cpp\n    src/tests/physics.cpp\n    src/tests/self-tests.cpp\n    src/tests/world.cpp\n)\n\nadd_executable(${PROJECT_NAME} ${HDR_FILES} ${SRC_FILES})\nset_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE Catch2::Catch2)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE botcraft)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE subprocess)\ntarget_include_directories(${PROJECT_NAME} PRIVATE \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\nget_filename_component(BOTCRAFT_ROOT_SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../..\" ABSOLUTE)\ntarget_compile_definitions(${PROJECT_NAME} PRIVATE BASE_SOURCE_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/src/tests\")\nif(BOTCRAFT_COMPRESSION)\n    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_COMPRESSION=1)\nendif(BOTCRAFT_COMPRESSION)\n\nset_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Tests)\n\n# To have a nice files structure in Visual Studio\nif(MSVC)\n    foreach(source IN LISTS HDR_FILES)\n        get_filename_component(source_path_header \"${source}\" PATH)\n        string(REPLACE \"include\" \"Header Files\" source_path_header \"${source_path_header}\")\n        string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path_header}\")\n        source_group(\"${source_path_msvc}\" FILES \"${source}\")\n    endforeach()\n\n    foreach(source IN LISTS SRC_FILES)\n        get_filename_component(source_path \"${source}\" PATH)\n        string(REPLACE \"src\" \"Source Files\" source_path \"${source_path}\")\n        string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path}\")\n        source_group(\"${source_path_msvc}\" FILES \"${source}\")\n    endforeach()\nendif()\n\n\n# Output the test executable next to the examples and library files\nif(MSVC)\n    # To avoid having folder for each configuration when building with Visual\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n\n    set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\nelse()\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/lib\")\nendif(MSVC)\n\n# Manual add_test instead of catch_discover_tests because otherwise each test is launched by a separate process\n# i.e. a separate server instance. And we want everything to happen on the same server.\nadd_test(\n  NAME ${PROJECT_NAME}\n  COMMAND $<TARGET_FILE:${PROJECT_NAME}>\n  WORKING_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\"\n)\n\n# Copy runtime files to bin output folder\nif(NOT IS_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin/test_server_files/runtime\")\n    message(STATUS \"Copying runtime online test files to bin folder...\")\nendif()\nfile(COPY \"${CMAKE_CURRENT_SOURCE_DIR}/runtime\" DESTINATION \"${BOTCRAFT_OUTPUT_DIR}/bin/test_server_files\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Source Files and Executable\nDESCRIPTION: Defines the source files for the test suite and creates an executable target with C++17 standard and required dependencies.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/tests/botcraft/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(botcraft_tests)\n\nset(SRC_FILES\n    src/aabb.cpp\n    src/behaviour_tree.cpp\n    src/blackboard.cpp\n    src/blockstate.cpp\n    src/items.cpp\n    src/world.cpp\n\n    src/init.cpp\n)\n\nadd_executable(${PROJECT_NAME} ${SRC_FILES})\nset_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE Catch2::Catch2WithMain)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE botcraft)\nset_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Up protocolCraft Test Executable in CMake\nDESCRIPTION: This CMake script configures the test executable for the protocolCraft library. It specifies the source files, sets the C++ standard to 17, links against Catch2 and protocolCraft, and configures output directories based on the build platform.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/tests/protocolCraft/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(protocolCraft_tests)\n\nset(SRC_FILES\n    src/constexpr_string_processing.cpp\n    src/json.cpp\n    src/nbt.cpp\n    src/serialization.cpp\n    src/templates.cpp\n)\n\nadd_executable(${PROJECT_NAME} ${SRC_FILES})\nset_property(TARGET ${PROJECT_NAME} PROPERTY CXX_STANDARD 17)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE Catch2::Catch2WithMain)\ntarget_link_libraries(${PROJECT_NAME} PRIVATE protocolCraft)\nset_target_properties(${PROJECT_NAME} PROPERTIES FOLDER Tests)\n\nif(BOTCRAFT_COMPRESSION)\n    target_compile_definitions(${PROJECT_NAME} PRIVATE USE_COMPRESSION=1)\nendif(BOTCRAFT_COMPRESSION)\n\n# Output the test executable next to the examples and library files\nif(MSVC)\n    # To avoid having folder for each configuration when building with Visual\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n\n    set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\nelse()\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/lib\")\nendif(MSVC)\ncatch_discover_tests(${PROJECT_NAME} WORKING_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up GLAD Library in CMake\nDESCRIPTION: This CMake script configures the build and installation of the GLAD OpenGL loader library. It defines source files, headers, build target properties, and installation instructions for both the library and its CMake configuration files.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/3rdparty/glad/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1)\n\nproject(glad C)\n\nset_property(GLOBAL PROPERTY USE_FOLDERS ON)\n\nset(GLAD_SOURCES \n${CMAKE_CURRENT_SOURCE_DIR}/src/glad.c)\n\nset(GLAD_HEADERS \n${CMAKE_CURRENT_SOURCE_DIR}/include/glad/glad.h\n${CMAKE_CURRENT_SOURCE_DIR}/include/KHR/khrplatform.h)\n                 \nadd_library(glad STATIC ${GLAD_HEADERS} ${GLAD_SOURCES})\ntarget_include_directories(glad PUBLIC\n\t\t\t\t\t\t   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>\n\t\t\t\t\t\t   $<INSTALL_INTERFACE:include>)\n\ninstall(DIRECTORY include DESTINATION \".\")\ninstall(TARGETS glad\n\t\tEXPORT glad-targets\n\t\tLIBRARY DESTINATION lib\n\t\tARCHIVE DESTINATION lib)\n\t\t\ninstall(EXPORT glad-targets\n\t\tDESTINATION lib/cmake/glad)\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\n\t\"cmake/gladConfig.cmake.in\" \"${CMAKE_CURRENT_BINARY_DIR}/gladConfig.cmake\"\n\tINSTALL_DESTINATION \"lib/cmake/glad\"\n)\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/gladConfig.cmake\" DESTINATION \"lib/cmake/glad\")\n```\n\n----------------------------------------\n\nTITLE: Building Botcraft Documentation with CMake\nDESCRIPTION: Command to build the Doxygen documentation for Botcraft using CMake. This step is optional and generates the project's documentation.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake --build . --target doc_doxygen\n```\n\n----------------------------------------\n\nTITLE: Installing Botcraft with pip\nDESCRIPTION: Command to install Botcraft using pip. This is the simplest way to get started with the framework.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.12.2/previous_custom_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install botcraft\n```\n\n----------------------------------------\n\nTITLE: Adding Botcraft Example Subdirectories\nDESCRIPTION: This section adds subdirectories for various Botcraft examples. It includes conditional compilation for the DispenserFarmExample based on the Minecraft protocol version, ensuring compatibility with versions 1.14 and above.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Examples/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(0_HelloWorld)\nadd_subdirectory(1_UserControlledExample)\nadd_subdirectory(2_ChatCommandExample)\nadd_subdirectory(3_SimpleAFKExample)\nadd_subdirectory(4_MapCreatorExample)\nadd_subdirectory(5_MobHitterExample)\nif (PROTOCOL_VERSION STRGREATER \"470\") # 1.14+\n    add_subdirectory(6_DispenserFarmExample)\nendif()\nadd_subdirectory(7_WorldEaterExample)\n```\n\n----------------------------------------\n\nTITLE: CMake Source Files Configuration\nDESCRIPTION: CMake configuration listing source files for the protocolCraft library, organized by category including base messaging, types, and utilities.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/protocolCraft/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(protocolCraft_SRC\n    src/BaseMessage.cpp\n    src/BinaryReadWrite.cpp\n    src/MessageFactory.cpp\n    src/NetworkType.cpp\n\n    src/Types/Chat/Chat.cpp\n\n    src/Types/CommandNode/BrigadierProperty.cpp\n\n    src/Types/Components/DataComponents.cpp\n\n    src/Types/Components/Subtypes/ConsumeEffects/ConsumeEffect.cpp\n\n    src/Types/NBT/NBT.cpp\n    src/Types/NBT/Tag.cpp\n\n    src/Types/Particles/Particle.cpp\n\n    src/Types/Recipes/Recipe.cpp\n    src/Types/Recipes/RecipeDisplay.cpp\n    src/Types/Recipes/SlotDisplay.cpp\n\n    src/Types/Vibrations/PositionSource.cpp\n\n    src/Utilities/GZip.cpp\n    src/Utilities/Json.cpp\n\n    src/Utilities/Plugins/PluginLoader.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio File Structure for ProtocolCraft\nDESCRIPTION: Sets up a organized file structure for Visual Studio by grouping source files and headers into appropriate folders.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/protocolCraft/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    foreach(source IN LISTS protocolCraft_PUBLIC_HDR)\n        get_filename_component(source_path_header \"${source}\" PATH)\n        string(REPLACE \"include/protocolCraft\" \"Header Files/public\" source_path_header \"${source_path_header}\")\n        string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path_header}\")\n        source_group(\"${source_path_msvc}\" FILES \"${source}\")\n    endforeach()\n\n    foreach(source IN LISTS protocolCraft_SRC)\n        get_filename_component(source_path \"${source}\" PATH)\n        string(REPLACE \"src\" \"Source Files\" source_path \"${source_path}\")\n        string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path}\")\n        source_group(\"${source_path_msvc}\" FILES \"${source}\")\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Visual Studio File Structure\nDESCRIPTION: Sets up a nice file structure in Visual Studio by organizing source files into appropriate folders. This improves project navigation and management in the IDE.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/botcraft/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    foreach(source IN LISTS botcraft_PUBLIC_HDR)\n        get_filename_component(source_path_header \"${source}\" PATH)\n        string(REPLACE \"include/botcraft\" \"Header Files/public\" source_path_header \"${source_path_header}\")\n        string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path_header}\")\n        source_group(\"${source_path_msvc}\" FILES \"${source}\")\n    endforeach()\n\n    foreach(source IN LISTS botcraft_PRIVATE_HDR)\n        get_filename_component(source_path_header \"${source}\" PATH)\n        string(REPLACE \"private_include/botcraft\" \"Header Files/private\" source_path_header \"${source_path_header}\")\n        string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path_header}\")\n        source_group(\"${source_path_msvc}\" FILES \"${source}\")\n    endforeach()\n\n    foreach(source IN LISTS botcraft_SRC)\n        get_filename_component(source_path \"${source}\" PATH)\n        string(REPLACE \"src\" \"Source Files\" source_path \"${source_path}\")\n        string(REPLACE \"/\" \"\\\\\" source_path_msvc \"${source_path}\")\n        source_group(\"${source_path_msvc}\" FILES \"${source}\")\n    endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories for ProtocolCraft Library\nDESCRIPTION: Configures output directories for the ProtocolCraft library, handling different build configurations and platforms.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/protocolCraft/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    # To avoid having folder for each configuration when building with Visual\n    set_target_properties(protocolCraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(protocolCraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(protocolCraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(protocolCraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/lib\")\nelse()\n    set_target_properties(protocolCraft PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES LIBRARY_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(protocolCraft PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/lib\")\nendif(MSVC)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories for Visual Studio\nDESCRIPTION: Configures output directories for different build configurations when building with Visual Studio, ensuring binaries and libraries are placed in the correct locations.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/tests/botcraft/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n    # To avoid having folder for each configuration when building with Visual\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_DEBUG \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELEASE \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL \"${BOTCRAFT_OUTPUT_DIR}/lib\")\n\n    set_property(TARGET ${PROJECT_NAME} PROPERTY VS_DEBUGGER_WORKING_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES MSVC_RUNTIME_LIBRARY \"MultiThreaded\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories for Non-Visual Studio Platforms\nDESCRIPTION: Configures output directories for builds on non-Visual Studio platforms and sets up Catch2 test discovery.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/tests/botcraft/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n    set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES LIBRARY_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/lib\")\nendif(MSVC)\ncatch_discover_tests(${PROJECT_NAME} WORKING_DIRECTORY \"${BOTCRAFT_OUTPUT_DIR}/bin\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Botcraft Project Build with CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the Botcraft project. It adds the main 'botcraft' subdirectory, conditionally includes 'botcraft_online' for tests if specific conditions are met, and adds the 'protocolCraft' subdirectory.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/tests/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(botcraft)\nif(BOTCRAFT_BUILD_TESTS_ONLINE AND BOTCRAFT_COMPRESSION)\n    add_subdirectory(botcraft_online)\nendif()\nadd_subdirectory(protocolCraft)\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Block Model Files\nDESCRIPTION: Directory structure showing custom block model JSON files across multiple Minecraft versions. Includes models for decorative blocks, storage blocks, and interactive blocks.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.20.6/previous_custom_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.12.2\\custom\\models\\block\\light_blue_shulker_box.json\n1.13\\custom\\models\\block\\light_blue_wall_banner.json\n1.13\\custom\\models\\block\\light_gray_banner.json\n1.13\\custom\\models\\block\\light_gray_bed_foot.json\n1.13\\custom\\models\\block\\light_gray_bed_head.json\n1.13\\custom\\models\\block\\light_gray_shulker_box.json\n1.13\\custom\\models\\block\\light_gray_wall_banner.json\n1.13\\custom\\models\\block\\lime_banner.json\n1.13\\custom\\models\\block\\lime_bed_foot.json\n1.13\\custom\\models\\block\\lime_bed_head.json\n1.12.2\\custom\\models\\block\\lime_shulker_box.json\n1.13\\custom\\models\\block\\lime_wall_banner.json\n1.13\\custom\\models\\block\\magenta_banner.json\n1.13\\custom\\models\\block\\magenta_bed_foot.json\n1.13\\custom\\models\\block\\magenta_bed_head.json\n1.12.2\\custom\\models\\block\\magenta_shulker_box.json\n1.13\\custom\\models\\block\\magenta_wall_banner.json\n1.19.3\\custom\\models\\block\\mangrove_hanging_sign.json\n1.19.3\\custom\\models\\block\\mangrove_wall_hanging_sign.json\n1.19.3\\custom\\models\\block\\oak_hanging_sign.json\n1.14\\custom\\models\\block\\oak_sign.json\n1.19.3\\custom\\models\\block\\oak_wall_hanging_sign.json\n1.14\\custom\\models\\block\\oak_wall_sign.json\n1.13\\custom\\models\\block\\orange_banner.json\n1.13\\custom\\models\\block\\orange_bed_foot.json\n1.13\\custom\\models\\block\\orange_bed_head.json\n1.12.2\\custom\\models\\block\\orange_shulker_box.json\n1.13\\custom\\models\\block\\orange_wall_banner.json\n1.19.3\\custom\\models\\block\\piglin_head.json\n1.19.3\\custom\\models\\block\\piglin_wall_head.json\n1.13\\custom\\models\\block\\pink_banner.json\n1.13\\custom\\models\\block\\pink_bed_foot.json\n1.13\\custom\\models\\block\\pink_bed_head.json\n1.12.2\\custom\\models\\block\\pink_shulker_box.json\n1.13\\custom\\models\\block\\pink_wall_banner.json\n1.13\\custom\\models\\block\\player_head.json\n1.13\\custom\\models\\block\\player_wall_head.json\n1.13\\custom\\models\\block\\purple_banner.json\n1.13\\custom\\models\\block\\purple_bed_foot.json\n1.13\\custom\\models\\block\\purple_bed_head.json\n1.12.2\\custom\\models\\block\\purple_shulker_box.json\n1.13\\custom\\models\\block\\purple_wall_banner.json\n1.13\\custom\\models\\block\\red_banner.json\n1.13\\custom\\models\\block\\red_bed_foot.json\n1.13\\custom\\models\\block\\red_bed_head.json\n1.12.2\\custom\\models\\block\\red_shulker_box.json\n1.13\\custom\\models\\block\\red_wall_banner.json\n1.13\\custom\\models\\block\\shulker_box.json\n1.13\\custom\\models\\block\\skeleton_skull.json\n1.13\\custom\\models\\block\\skeleton_wall_skull.json\n1.19.3\\custom\\models\\block\\spruce_hanging_sign.json\n1.14\\custom\\models\\block\\spruce_sign.json\n1.19.3\\custom\\models\\block\\spruce_wall_hanging_sign.json\n1.14\\custom\\models\\block\\spruce_wall_sign.json\n1.12.2\\custom\\models\\block\\trapped_chest.json\n1.19.3\\custom\\models\\block\\warped_hanging_sign.json\n1.16\\custom\\models\\block\\warped_sign.json\n1.19.3\\custom\\models\\block\\warped_wall_hanging_sign.json\n1.16\\custom\\models\\block\\warped_wall_sign.json\n1.13\\custom\\models\\block\\white_banner.json\n1.13\\custom\\models\\block\\white_bed_foot.json\n1.13\\custom\\models\\block\\white_bed_head.json\n1.12.2\\custom\\models\\block\\white_shulker_box.json\n1.13\\custom\\models\\block\\white_wall_banner.json\n1.13\\custom\\models\\block\\wither_skeleton_skull.json\n1.13\\custom\\models\\block\\wither_skeleton_wall_skull.json\n1.13\\custom\\models\\block\\yellow_banner.json\n1.13\\custom\\models\\block\\yellow_bed_foot.json\n1.13\\custom\\models\\block\\yellow_bed_head.json\n1.12.2\\custom\\models\\block\\yellow_shulker_box.json\n1.13\\custom\\models\\block\\yellow_wall_banner.json\n1.13\\custom\\models\\block\\zombie_head.json\n1.13\\custom\\models\\block\\zombie_wall_head.json\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Block Model File Paths\nDESCRIPTION: Directory structure showing the organization of Minecraft block model JSON files across different game versions. Files are organized by version number and block type, including colored variants of banners, beds, and shulker boxes, as well as various sign types and mob heads.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.20.2/previous_custom_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.12.2\\custom\\models\\block\\light_blue_shulker_box.json\n1.13\\custom\\models\\block\\light_blue_wall_banner.json\n1.13\\custom\\models\\block\\light_gray_banner.json\n1.13\\custom\\models\\block\\light_gray_bed_foot.json\n1.13\\custom\\models\\block\\light_gray_bed_head.json\n1.13\\custom\\models\\block\\light_gray_shulker_box.json\n1.13\\custom\\models\\block\\light_gray_wall_banner.json\n1.13\\custom\\models\\block\\lime_banner.json\n1.13\\custom\\models\\block\\lime_bed_foot.json\n1.13\\custom\\models\\block\\lime_bed_head.json\n1.12.2\\custom\\models\\block\\lime_shulker_box.json\n1.13\\custom\\models\\block\\lime_wall_banner.json\n1.13\\custom\\models\\block\\magenta_banner.json\n1.13\\custom\\models\\block\\magenta_bed_foot.json\n1.13\\custom\\models\\block\\magenta_bed_head.json\n1.12.2\\custom\\models\\block\\magenta_shulker_box.json\n1.13\\custom\\models\\block\\magenta_wall_banner.json\n1.19.3\\custom\\models\\block\\mangrove_hanging_sign.json\n1.19.3\\custom\\models\\block\\mangrove_wall_hanging_sign.json\n1.19.3\\custom\\models\\block\\oak_hanging_sign.json\n1.14\\custom\\models\\block\\oak_sign.json\n1.19.3\\custom\\models\\block\\oak_wall_hanging_sign.json\n1.14\\custom\\models\\block\\oak_wall_sign.json\n1.13\\custom\\models\\block\\orange_banner.json\n1.13\\custom\\models\\block\\orange_bed_foot.json\n1.13\\custom\\models\\block\\orange_bed_head.json\n1.12.2\\custom\\models\\block\\orange_shulker_box.json\n1.13\\custom\\models\\block\\orange_wall_banner.json\n1.19.3\\custom\\models\\block\\piglin_head.json\n1.19.3\\custom\\models\\block\\piglin_wall_head.json\n1.13\\custom\\models\\block\\pink_banner.json\n1.13\\custom\\models\\block\\pink_bed_foot.json\n1.13\\custom\\models\\block\\pink_bed_head.json\n1.12.2\\custom\\models\\block\\pink_shulker_box.json\n1.13\\custom\\models\\block\\pink_wall_banner.json\n1.13\\custom\\models\\block\\player_head.json\n1.13\\custom\\models\\block\\player_wall_head.json\n1.13\\custom\\models\\block\\purple_banner.json\n1.13\\custom\\models\\block\\purple_bed_foot.json\n1.13\\custom\\models\\block\\purple_bed_head.json\n1.12.2\\custom\\models\\block\\purple_shulker_box.json\n1.13\\custom\\models\\block\\purple_wall_banner.json\n1.13\\custom\\models\\block\\red_banner.json\n1.13\\custom\\models\\block\\red_bed_foot.json\n1.13\\custom\\models\\block\\red_bed_head.json\n1.12.2\\custom\\models\\block\\red_shulker_box.json\n1.13\\custom\\models\\block\\red_wall_banner.json\n1.13\\custom\\models\\block\\shulker_box.json\n1.13\\custom\\models\\block\\skeleton_skull.json\n1.13\\custom\\models\\block\\skeleton_wall_skull.json\n1.19.3\\custom\\models\\block\\spruce_hanging_sign.json\n1.14\\custom\\models\\block\\spruce_sign.json\n1.19.3\\custom\\models\\block\\spruce_wall_hanging_sign.json\n1.14\\custom\\models\\block\\spruce_wall_sign.json\n1.12.2\\custom\\models\\block\\trapped_chest.json\n1.19.3\\custom\\models\\block\\warped_hanging_sign.json\n1.16\\custom\\models\\block\\warped_sign.json\n1.19.3\\custom\\models\\block\\warped_wall_hanging_sign.json\n1.16\\custom\\models\\block\\warped_wall_sign.json\n1.13\\custom\\models\\block\\white_banner.json\n1.13\\custom\\models\\block\\white_bed_foot.json\n1.13\\custom\\models\\block\\white_bed_head.json\n1.12.2\\custom\\models\\block\\white_shulker_box.json\n1.13\\custom\\models\\block\\white_wall_banner.json\n1.13\\custom\\models\\block\\wither_skeleton_skull.json\n1.13\\custom\\models\\block\\wither_skeleton_wall_skull.json\n1.13\\custom\\models\\block\\yellow_banner.json\n1.13\\custom\\models\\block\\yellow_bed_foot.json\n1.13\\custom\\models\\block\\yellow_bed_head.json\n1.12.2\\custom\\models\\block\\yellow_shulker_box.json\n1.13\\custom\\models\\block\\yellow_wall_banner.json\n1.13\\custom\\models\\block\\zombie_head.json\n1.13\\custom\\models\\block\\zombie_wall_head.json\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Block Model Files\nDESCRIPTION: Directory structure showing block model JSON files organized by Minecraft version and block type. Includes files for colored blocks, decorative items, and mob-related blocks.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.20/previous_custom_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.13\\custom\\models\\block\\light_blue_wall_banner.json\n1.13\\custom\\models\\block\\light_gray_banner.json\n1.13\\custom\\models\\block\\light_gray_bed_foot.json\n1.13\\custom\\models\\block\\light_gray_bed_head.json\n1.13\\custom\\models\\block\\light_gray_shulker_box.json\n1.13\\custom\\models\\block\\light_gray_wall_banner.json\n1.13\\custom\\models\\block\\lime_banner.json\n1.13\\custom\\models\\block\\lime_bed_foot.json\n1.13\\custom\\models\\block\\lime_bed_head.json\n1.12.2\\custom\\models\\block\\lime_shulker_box.json\n1.13\\custom\\models\\block\\lime_wall_banner.json\n1.13\\custom\\models\\block\\magenta_banner.json\n1.13\\custom\\models\\block\\magenta_bed_foot.json\n1.13\\custom\\models\\block\\magenta_bed_head.json\n1.12.2\\custom\\models\\block\\magenta_shulker_box.json\n1.13\\custom\\models\\block\\magenta_wall_banner.json\n1.19.3\\custom\\models\\block\\mangrove_hanging_sign.json\n1.19.3\\custom\\models\\block\\mangrove_wall_hanging_sign.json\n1.19.3\\custom\\models\\block\\oak_hanging_sign.json\n1.14\\custom\\models\\block\\oak_sign.json\n1.19.3\\custom\\models\\block\\oak_wall_hanging_sign.json\n1.14\\custom\\models\\block\\oak_wall_sign.json\n1.13\\custom\\models\\block\\orange_banner.json\n1.13\\custom\\models\\block\\orange_bed_foot.json\n1.13\\custom\\models\\block\\orange_bed_head.json\n1.12.2\\custom\\models\\block\\orange_shulker_box.json\n1.13\\custom\\models\\block\\orange_wall_banner.json\n1.19.3\\custom\\models\\block\\piglin_head.json\n1.19.3\\custom\\models\\block\\piglin_wall_head.json\n1.13\\custom\\models\\block\\pink_banner.json\n1.13\\custom\\models\\block\\pink_bed_foot.json\n1.13\\custom\\models\\block\\pink_bed_head.json\n1.12.2\\custom\\models\\block\\pink_shulker_box.json\n1.13\\custom\\models\\block\\pink_wall_banner.json\n1.13\\custom\\models\\block\\player_head.json\n1.13\\custom\\models\\block\\player_wall_head.json\n1.13\\custom\\models\\block\\purple_banner.json\n1.13\\custom\\models\\block\\purple_bed_foot.json\n1.13\\custom\\models\\block\\purple_bed_head.json\n1.12.2\\custom\\models\\block\\purple_shulker_box.json\n1.13\\custom\\models\\block\\purple_wall_banner.json\n1.13\\custom\\models\\block\\red_banner.json\n1.13\\custom\\models\\block\\red_bed_foot.json\n1.13\\custom\\models\\block\\red_bed_head.json\n1.12.2\\custom\\models\\block\\red_shulker_box.json\n1.13\\custom\\models\\block\\red_wall_banner.json\n1.13\\custom\\models\\block\\shulker_box.json\n1.13\\custom\\models\\block\\skeleton_skull.json\n1.13\\custom\\models\\block\\skeleton_wall_skull.json\n1.19.3\\custom\\models\\block\\spruce_hanging_sign.json\n1.14\\custom\\models\\block\\spruce_sign.json\n1.19.3\\custom\\models\\block\\spruce_wall_hanging_sign.json\n1.14\\custom\\models\\block\\spruce_wall_sign.json\n1.12.2\\custom\\models\\block\\trapped_chest.json\n1.19.3\\custom\\models\\block\\warped_hanging_sign.json\n1.16\\custom\\models\\block\\warped_sign.json\n1.19.3\\custom\\models\\block\\warped_wall_hanging_sign.json\n1.16\\custom\\models\\block\\warped_wall_sign.json\n1.13\\custom\\models\\block\\white_banner.json\n1.13\\custom\\models\\block\\white_bed_foot.json\n1.13\\custom\\models\\block\\white_bed_head.json\n1.12.2\\custom\\models\\block\\white_shulker_box.json\n1.13\\custom\\models\\block\\white_wall_banner.json\n1.13\\custom\\models\\block\\wither_skeleton_skull.json\n1.13\\custom\\models\\block\\wither_skeleton_wall_skull.json\n1.13\\custom\\models\\block\\yellow_banner.json\n1.13\\custom\\models\\block\\yellow_bed_foot.json\n1.13\\custom\\models\\block\\yellow_bed_head.json\n1.12.2\\custom\\models\\block\\yellow_shulker_box.json\n1.13\\custom\\models\\block\\yellow_wall_banner.json\n1.13\\custom\\models\\block\\zombie_head.json\n1.13\\custom\\models\\block\\zombie_wall_head.json\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Block Model Files\nDESCRIPTION: Directory structure showing block model JSON files organized by Minecraft version. Files include models for decorative blocks like beds, banners, and mob heads.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.19.1/previous_custom_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.13\\custom\\models\\block\\white_bed_foot.json\n1.13\\custom\\models\\block\\white_bed_head.json\n1.12.2\\custom\\models\\block\\white_shulker_box.json\n1.13\\custom\\models\\block\\white_wall_banner.json\n1.13\\custom\\models\\block\\wither_skeleton_skull.json\n1.13\\custom\\models\\block\\wither_skeleton_wall_skull.json\n1.13\\custom\\models\\block\\yellow_banner.json\n1.13\\custom\\models\\block\\yellow_bed_foot.json\n1.13\\custom\\models\\block\\yellow_bed_head.json\n1.12.2\\custom\\models\\block\\yellow_shulker_box.json\n1.13\\custom\\models\\block\\yellow_wall_banner.json\n1.13\\custom\\models\\block\\zombie_head.json\n1.13\\custom\\models\\block\\zombie_wall_head.json\n```\n\n----------------------------------------\n\nTITLE: Minecraft Block Model File Paths\nDESCRIPTION: Directory listing showing paths to various Minecraft block model JSON files, organized by version. Files include models for beds, banners, skulls, and shulker boxes in versions 1.12.2 and 1.13.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.16.5/previous_custom_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.13\\custom\\models\\block\\white_bed_head.json\n1.12.2\\custom\\models\\block\\white_shulker_box.json\n1.13\\custom\\models\\block\\white_wall_banner.json\n1.13\\custom\\models\\block\\wither_skeleton_skull.json\n1.13\\custom\\models\\block\\wither_skeleton_wall_skull.json\n1.13\\custom\\models\\block\\yellow_banner.json\n1.13\\custom\\models\\block\\yellow_bed_foot.json\n1.13\\custom\\models\\block\\yellow_bed_head.json\n1.12.2\\custom\\models\\block\\yellow_shulker_box.json\n1.13\\custom\\models\\block\\yellow_wall_banner.json\n1.13\\custom\\models\\block\\zombie_head.json\n1.13\\custom\\models\\block\\zombie_wall_head.json\n```\n\n----------------------------------------\n\nTITLE: Minecraft Block Model File Paths\nDESCRIPTION: Directory structure showing paths to block model JSON files for various Minecraft blocks, organized by game version.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.16.3/previous_custom_files.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1.13\\custom\\models\\block\\white_bed_head.json\n1.12.2\\custom\\models\\block\\white_shulker_box.json\n1.13\\custom\\models\\block\\white_wall_banner.json\n1.13\\custom\\models\\block\\wither_skeleton_skull.json\n1.13\\custom\\models\\block\\wither_skeleton_wall_skull.json\n1.13\\custom\\models\\block\\yellow_banner.json\n1.13\\custom\\models\\block\\yellow_bed_foot.json\n1.13\\custom\\models\\block\\yellow_bed_head.json\n1.12.2\\custom\\models\\block\\yellow_shulker_box.json\n1.13\\custom\\models\\block\\yellow_wall_banner.json\n1.13\\custom\\models\\block\\zombie_head.json\n1.13\\custom\\models\\block\\zombie_wall_head.json\n```\n\n----------------------------------------\n\nTITLE: Model Definition for Wall-Mounted Zombie Head in Minecraft 1.13\nDESCRIPTION: JSON model configuration for wall-mounted zombie head block in Minecraft version 1.13. This file specifies how the wall-mounted variant of the zombie head should be rendered.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.15.2/previous_custom_files.txt#2025-04-23_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Model Definition for Zombie Head in Minecraft 1.13\nDESCRIPTION: JSON model configuration for zombie head block in Minecraft version 1.13. This file defines the model structure and textures for the placeable zombie head block.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.15.2/previous_custom_files.txt#2025-04-23_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Model Definition for Yellow Wall Banner in Minecraft 1.13\nDESCRIPTION: JSON model configuration for yellow wall banner block in Minecraft version 1.13. This file specifies how the wall-mounted yellow banner should be rendered.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.15.2/previous_custom_files.txt#2025-04-23_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Model Definition for Yellow Shulker Box in Minecraft 1.12.2\nDESCRIPTION: JSON model configuration for yellow shulker box block in Minecraft version 1.12.2. This file defines the model structure and textures for the yellow shulker box block.\nSOURCE: https://github.com/adepierre/botcraft/blob/master/Assets/1.15.2/previous_custom_files.txt#2025-04-23_snippet_0\n\n"
  }
]