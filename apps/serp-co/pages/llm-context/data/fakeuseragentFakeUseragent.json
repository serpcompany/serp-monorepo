[
  {
    "owner": "fake-useragent",
    "repo": "fake-useragent",
    "content": "TITLE: Basic Usage of fake-useragent for Random and Specific User-Agents - Python\nDESCRIPTION: Demonstrates usage of the UserAgent class from fake_useragent for generating random or browser-specific user-agent strings. Requires fake-useragent installed. Shows property and dictionary-style access to obtain user-agents for random browsers, Chrome, Firefox, Safari, Opera, Edge, and more. Expects no inputs; outputs are user-agent strings printed to stdout. Requires Python 3.9+.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_2\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent()\n\n# Get a random browser user-agent string\nprint(ua.random)\n# Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0\n\n# Or get user-agent string from a specific browser\nprint(ua.chrome)\n# Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\nprint(ua.google)\n# Mozilla/5.0 (iPhone; CPU iPhone OS 18_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) GSA/343.0.695551749 Mobile/15E148 Safari/604.1\nprint(ua['Chrome'])\n# Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\nprint(ua.firefox)\n# Mozilla/5.0 (Android 14; Mobile; rv:133.0) Gecko/133.0 Firefox/133.0\nprint(ua.ff)\n# Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:132.0) Gecko/20100101 Firefox/132.0\nprint(ua.safari)\n# Mozilla/5.0 (iPhone; CPU iPhone OS 17_6_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.6 Mobile/15E148 Safari/604.1 Ddg/17.6\nprint(ua.opera)\n# Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36 OPR/114.0.0.0\nprint(ua.edge)\n# Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36 Edg/125.0.0.0\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Browsers for Random User-Agents with fake-useragent - Python\nDESCRIPTION: Shows how to limit random user-agent selection to a specific subset of browsers using the browsers argument of UserAgent. Only browsers listed in the provided array will be returned by ua.random. Requires fake-useragent and Python 3.9+. Input: none; Output: user-agent string from Edge or Chrome.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_3\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent(browsers=['Edge', 'Chrome'])\nua.random\n\n```\n\n----------------------------------------\n\nTITLE: Limiting User-Agents by Operating System with fake-useragent - Python\nDESCRIPTION: Demonstrates filtering random user-agents by specified OS using the os argument. Only user-agents with the given OS (here, 'Linux') will be returned. The OS name is case-sensitive. Requires Python 3.9+ and fake-useragent. Input: none; Output: Linux user-agent string.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_4\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent(os='Linux')\nua.random\n\n```\n\n----------------------------------------\n\nTITLE: Filtering User-Agents by Platform with fake-useragent - Python\nDESCRIPTION: Shows how to restrict random user-agent generation to a particular platform type using the platforms argument of UserAgent. The example returns only mobile device user-agents. Platforms are case-sensitive. Requires Python 3.9+ and fake-useragent. Output: mobile user-agent string.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_5\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent(platforms='mobile')\nua.random\n\n```\n\n----------------------------------------\n\nTITLE: Filtering User-Agents for Desktop Devices with fake-useragent - Python\nDESCRIPTION: Demonstrates selecting user-agents from desktop devices using the platforms argument. Returns a random desktop user-agent string. Requires Python 3.9+ and fake-useragent. Input: none; Output: desktop user-agent string.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_6\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent(platforms='desktop')\nua.random\n\n```\n\n----------------------------------------\n\nTITLE: Enforcing Minimum User-Agent Version in fake-useragent - Python\nDESCRIPTION: Shows how to get user-agents with a minimum browser version by setting min_version. Only user-agents with a version equal to or greater than min_version (here, 120.0) will be generated. Requires Python 3.9+ and fake-useragent. Output: user-agent string with version >= 120.0.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_7\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent(min_version=120.0)\nua.random\n\n```\n\n----------------------------------------\n\nTITLE: Accessing User-Agent Dictionaries with fake-useragent - Python\nDESCRIPTION: Demonstrates retrieval of raw user-agent information as Python dictionaries using get properties (e.g., getRandom, getFirefox) and getBrowser method. Outputs include fields such as percent, useragent, system, browser, version, and os. Data structure may change in future versions. Requires fake-useragent and Python 3.9+. Input: none; Output: full user-agent dictionary objects.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_8\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent()\n\n# Random user-agent dictionary (object)\nua.getRandom\n# {'percent': 0.8, 'useragent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36 Edg/116.0.1938.76', 'system': 'Edge 116.0 Win10', 'browser': 'edge', 'version': 116.0, 'os': 'win10'}\n\n# More get properties:\nua.getFirefox\n# {'percent': 0.3, 'useragent': 'Mozilla/5.0 (Windows NT 10.0; rv:109.0) Gecko/20100101 Firefox/118.0', 'system': 'Firefox 118.0 Win10', 'browser': 'firefox', 'version': 118.0, 'os': 'win10'}\nua.getChrome\nua.getSafari\nua.getEdge\n\n# And a method with an argument.\n# This is exactly the same as using: ua.getFirefox\nua.getBrowser('firefox')\n\n```\n\n----------------------------------------\n\nTITLE: Custom Fallback User-Agent in fake-useragent - Python\nDESCRIPTION: Illustrates using the fallback parameter in UserAgent to provide a custom string if a user-agent cannot be generated. Ensures a predictable value in rare failure cases. Requires fake-useragent and Python 3.9+. Output: the fallback string when generation fails.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_9\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\n\nua = UserAgent(fallback='your favorite Browser')\n# in case if something went wrong, one more time it is REALLY!!! rare case\nua.random == 'your favorite Browser'\n\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Browsers in fake-useragent - Python\nDESCRIPTION: Shows behavior when requesting an unknown browser property. Outputs an error message and may fall back to a default user-agent string. Requires fake-useragent; demonstrates error handling for unrecognized attributes. No additional inputs required.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_10\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\nua = UserAgent()\nprint(ua.unknown)\n#Error occurred during getting browser: randm, but was suppressed with fallback.\n#Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36 Edg/122.0.0.0\n\n```\n\n----------------------------------------\n\nTITLE: Protecting Attributes with safe_attrs in fake-useragent - Python\nDESCRIPTION: Demonstrates the use of safe_attrs parameter to prevent overriding special attributes by the UserAgent's __getattr__ method. Intended for advanced or rare cases, such as compatibility with dependency injection tools. Only use if needed for library compatibility. Requires fake-useragent and Python 3.9+.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_11\n\nLANGUAGE: py\nCODE:\n```\nfrom fake_useragent import UserAgent\n\nua = UserAgent(safe_attrs=('__injections__',))\n\n```\n\n----------------------------------------\n\nTITLE: Checking fake-useragent Version in Python\nDESCRIPTION: Shows how to check the installed version of fake-useragent from within a Python script or console. Imports the module and prints the version; output is written to stdout. Requires Python 3.9+ and fake-useragent installed.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_14\n\nLANGUAGE: py\nCODE:\n```\nimport fake_useragent\n\nprint(fake_useragent.__version__)\n\n```\n\n----------------------------------------\n\nTITLE: Installing fake-useragent with pip3 for Multiple Python Versions - Shell\nDESCRIPTION: Installs fake-useragent using pip3, which is useful on systems with multiple Python versions. Run this from the shell if pip3 corresponds to Python 3.9 or higher. No additional requirements. No inputs/outputs beyond installation results.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip3 install fake-useragent\n\n```\n\n----------------------------------------\n\nTITLE: Installing fake-useragent via pip - Shell\nDESCRIPTION: Installs the fake-useragent package using pip from the shell. No additional dependencies required. Compatible with Python 3.9 or higher. Use in terminal/command-line environments. No inputs/outputs beyond console installation feedback.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install fake-useragent\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading fake-useragent via pip - Shell\nDESCRIPTION: Updates fake-useragent to the latest available version using pip in the shell. Requires pip and suitable system permissions. No additional dependencies required; input/output is command-line only.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\npip install --upgrade fake-useragent\n\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of fake-useragent via pip - Shell\nDESCRIPTION: Demonstrates how to install a specific version of fake-useragent (e.g., 2.0.3) with pip. Useful for reproducing environments or troubleshooting. Replace the version number as needed. Run in shell; no output except install progress.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\npip install fake-useragent==2.0.3\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment - Shell\nDESCRIPTION: Demonstrates creating and activating a Python virtual environment using the virtualenv module and source command. Ensures isolated package installations for development. Compatible with Unix-like shells; requires virtualenv installed.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\npython -m virtualenv env\nsource env/bin/activate\n\n```\n\n----------------------------------------\n\nTITLE: Defining Python Project Dependencies with pip - Plaintext\nDESCRIPTION: This snippet is a pip requirements file that enumerates all external Python package dependencies required for the project. Each line specifies a package and its exact version, ensuring deterministic installations. This format is essential for reproducible environments using tools like pip and virtualenv, and no direct code execution is present. The file must be named requirements.txt or similar and used with pip install -r.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nattrs==25.3.0\\nblack==25.1.0\\nbuild==1.2.2.post1\\ncachetools==5.5.0\\nchardet==5.2.0\\nclick==8.1.8\\ncolorama==0.4.6\\ncoverage==7.8.0\\ndistlib==0.3.9\\nexceptiongroup==1.2.2\\nfastjsonschema==2.21.1\\nfilelock==3.17.0\\nimportlib-resources==6.5.2\\niniconfig==2.0.0\\nisort==5.13.2\\nmypy-extensions==1.0.0\\npackaging==24.2\\npathspec==0.12.1\\npep517==0.13.1\\nplatformdirs==4.3.6\\npluggy==1.5.0\\npy==1.11.0\\npyparsing==3.2.3\\npyproject-api==1.9.0\\npyproject_hooks==1.2.0\\npytest==8.3.5\\npytest-cov==6.0.0\\nruff==0.11.4\\nsix==1.17.0\\ntomli==2.2.1\\ntox==4.14.1\\ntyping_extensions==4.13.2\\nvalidate-pyproject==0.24.1\\nvirtualenv==20.25.1\\nzipp==3.21.0\n```\n\n----------------------------------------\n\nTITLE: Installing fake-useragent in Editable Mode (Development Install) - Shell\nDESCRIPTION: Shows how to install fake-useragent as an editable package for local development using pip with the -e option. Run from the root of the package directory. No additional prerequisites except pip.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .\n\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies using pip requirements format\nDESCRIPTION: This configuration file lists Python package dependencies intended for installation using pip. It includes a reference to `requirements.txt`, specifies an editable installation of the current directory (`-e .`), and pins specific versions for `ua-parser`, `ua-parser-builtins`, `ua-parser-rs`, and `requests`. This format is standard for managing dependencies in Python projects, ensuring consistent environments.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/requirements_converter.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements.txt\n-e .\nua-parser==1.0.0\nua-parser-builtins==0.18.0.post1\nua-parser-rs==0.1.2\nrequests==2.32.3\n```\n\n----------------------------------------\n\nTITLE: Running Tests for fake-useragent - Shell\nDESCRIPTION: Explains installing required test dependencies from requirements.txt and running tests using tox. Ensures proper functioning of the package via automated suites. Requires pip and tox installed.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\ntox\n\n```\n\n----------------------------------------\n\nTITLE: Running Ruff Linter and Fixing Imports for fake-useragent - Shell\nDESCRIPTION: Instructs on installing linter dependencies and using ruff to check and auto-fix import issues. Ensures code style consistency. Requires pip, ruff, and a requirements.txt file with ruff specified.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\nruff check --select=\"I\" --fix .\n\n```\n\n----------------------------------------\n\nTITLE: Fixing Code Formatting with Black for fake-useragent - Shell\nDESCRIPTION: Shows how to install black and apply automatic code formatting corrections across the codebase. Promotes code consistency. Requires pip, black, and requirements.txt in the working directory.\nSOURCE: https://github.com/fake-useragent/fake-useragent/blob/main/README.md#_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\npip install -r requirements.txt\nblack .\n\n```"
  }
]