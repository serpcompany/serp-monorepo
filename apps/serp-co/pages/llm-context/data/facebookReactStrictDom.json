[
  {
    "owner": "facebook",
    "repo": "react-strict-dom",
    "content": "TITLE: Rendering a Cross-Platform Button with React Strict DOM in JSX\nDESCRIPTION: This snippet demonstrates how to create a simple button component using React Strict DOM's html export. It shows the stricter HTML element usage and event handling.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nfunction MyButton() {\n  const onClick = (e) => {};\n\n  return (\n    <html.button onClick={onClick}>\n      A cross-platform button\n    </html.button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Styling a Cross-Platform Button with React Strict DOM CSS in JSX\nDESCRIPTION: This example illustrates how to create and apply styles to a button using React Strict DOM's css.create method. It showcases the built-in styling system with pseudo-state support.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/index.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\n\nconst styles = css.create({\n  button: {\n    backgroundColor: {\n      default: 'white',\n      ':hover': 'lightgray'\n    },\n    padding: 10\n  }\n});\n\nfunction MyButton() {\n  return (\n    <html.button style={styles.button}>\n      A cross-platform button\n    </html.button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Style Arrays with React Strict DOM in JSX\nDESCRIPTION: Demonstrates how to use the css and html imports from react-strict-dom to create and apply static and dynamic styles to components. The example shows style creation with css.create, conditional styling, and dynamic style functions that accept parameters.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/packages/react-strict-dom/README.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\n\nconst styles = css.create({\n  root: {\n    marginBlock: '1rem'\n  },\n  cond: {\n    borderWidth: '5px'\n  },\n  opacity: (value) => ({\n    opacity: value\n  })\n})\n\nexport default function App(props) {\n  const opacity = useOpacity();\n  return (\n    <html.div\n      {...props}\n      style={[\n        styles.root,\n        cond && styles.cond,\n        styles.opacity(opacity)\n      ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Styles in React Strict DOM\nDESCRIPTION: Demonstrates how to create basic styles using css.create with fontSize, lineHeight and color properties.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  base: {\n    fontSize: 16,\n    lineHeight: 1.5,\n    color: 'rgb(60,60,60)',\n  },\n  highlighted: {\n    color: 'rebeccapurple',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of css.create in React Strict DOM\nDESCRIPTION: This snippet demonstrates the basic usage of css.create to define both static and dynamic styles. It shows how to create style objects that can be passed to the style prop of html.* elements.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  foo: {\n    backgroundColor: 'red'\n  },\n  bar: (color, padding) => ({\n    color: color,\n    padding: padding\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Using HTML Components in React Strict DOM\nDESCRIPTION: Example showing how to use HTML components from the `html` export in React Strict DOM. This demonstrates the basic component structure for creating nested HTML elements.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/01-common.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => {\n  return (\n    <html.main>\n      <html.h1>Title</html.h1>\n      <html.div>\n        <html.p>\n          Paragraph of <html.span>text</html.span> element\n        </html.p>\n      </html.div>\n    </html.main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for React Strict DOM with Expo\nDESCRIPTION: Babel configuration setup for optimizing builds and enabling static CSS extraction for web. Includes platform detection and development mode settings.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/02-environment-setup.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst reactStrictPreset = require('react-strict-dom/babel-preset');\n\nfunction getPlatform(caller) {\n  // This information is populated by Expo\n  return caller && caller.platform;\n}\n\nfunction getIsDev(caller) {\n  // This information is populated by Expo\n  if (caller?.isDev != null) return caller.isDev;\n  // https://babeljs.io/docs/options#envname\n  return (\n    process.env.BABEL_ENV === 'development' ||\n    process.env.NODE_ENV === 'development'\n  );\n}\n\nmodule.exports = function (api) {\n  // If not using Expo, set these values manually or by other means\n  const platform = api.caller(getPlatform);\n  const dev = api.caller(getIsDev);\n\n  return {\n    plugins: [],\n    presets: [\n      // Expo's babel preset\n      'babel-preset-expo',\n      // React Strict DOM's babel preset\n      [reactStrictPreset, {\n        debug: dev,\n        dev,\n        platform\n      }]\n    ]\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Styles with CSS in React Strict DOM\nDESCRIPTION: Example showing how to create and apply styles using the `css` export in React Strict DOM. Demonstrates conditional styling by combining styles in an array, where later styles override earlier ones.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/01-common.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\n\nconst styles = css.create({\n  avatar: {...},\n  highlighted: {...}\n});\n\n<html.img\n  style={[\n    styles.avatar,\n    highlighted && styles.highlighted\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying CSS Themes in React Strict DOM\nDESCRIPTION: This example demonstrates how to import variables, create theme objects for colors and spacing, combine them, and apply them to a component. The theme will affect the entire subtree of the component it's applied to.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/02-createTheme.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from 'react-strict-dom';\nimport { colors, spacing } from './vars.stylex.js';\n\nconst themeColors = css.createTheme(colors, {\n  accent: 'red',\n  textPrimary: 'black',\n  textSecondary: 'brown',\n});\n\nconst themeSpacing = css.createTheme(spacing, {\n  small: '0.25rem',\n  large: '0.5rem'\n});\n\nconst theme = [ themeColors, themeSpacing ];\n\nconst Theme = (props) => <html.div {...props} style={theme} />\n```\n\n----------------------------------------\n\nTITLE: Handling Click Events in a Button Component\nDESCRIPTION: Example of creating a Button component that responds to click events using React Strict DOM's event handling system, which works across platforms.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/03-creating-components.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nexport function Button() {\n  return (\n    <html.button\n      onClick={(e) => {}}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables with css.defineVars\nDESCRIPTION: Creates style variables that can be imported and used within css.create() and css.createTheme() calls. Variables must be defined as named exports in files with a *.stylex.js or *.stylex.ts extension.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/03-defineVars.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nexport const colors = css.defineVars({\n  accent: 'blue',\n  background: 'white',\n  line: 'gray',\n  textPrimary: 'black',\n  textSecondary: '#333',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting Style Rules\nDESCRIPTION: This snippet shows how to create style rules and export them for use in other components. Style rules are referenced by their key name in the styles object.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css.create({\n  foo: {\n    backgroundColor: 'red'\n  }\n});\n\nexport const foo = styles.foo;\n```\n\n----------------------------------------\n\nTITLE: Merging Styles in React Strict DOM\nDESCRIPTION: Shows how to merge multiple styles in a deterministic way using arrays.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\n\nconst styles = css.create({\n  root: { ... }\n});\n\nconst Foo = (props) => (\n  <html.div style={[ props.style, styles.root ]} />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Profile Component with Cross-Platform Image Element\nDESCRIPTION: Example of a Profile component that renders a cross-platform image element using React Strict DOM. This component will automatically be translated to appropriate elements on web and native platforms.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/03-creating-components.md#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nexport function Profile() {\n  return (\n    <html.img\n      alt={user.name}\n      src={user.avatarSrc}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dark Mode Theme Variables in React Strict DOM\nDESCRIPTION: This snippet shows how to define CSS variables with both default and dark mode values using css.defineVars. It uses a media query to specify different color values for dark mode.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/05-theming-components.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst darkMode = '@media (prefers-color-scheme: dark)';\n\nexport const colors = css.defineVars({\n  primaryText: {\n    default: 'black',\n    [darkMode]: 'white'\n  },\n  secondaryText: {\n    default: '#333',\n    [darkMode]: '#ccc'\n  },\n  accent: {\n    default: 'blue',\n    [darkMode]: 'lightblue'\n  },\n  background: {\n    default: 'white',\n    [darkMode]: 'black'\n  },\n  lineColor: {\n    default: 'gray',\n    [darkMode]: 'lightgray'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Button Component in React Strict DOM\nDESCRIPTION: Demonstrates how to import and use the html.button component from react-strict-dom to create an interactive element with a click handler.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/03-button.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => <html.button onClick={() => {}} />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Themes with css.createTheme in React Strict DOM\nDESCRIPTION: This snippet shows how to create custom themes by overriding default theme variables using css.createTheme. It defines new color values for both default and dark mode.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/05-theming-components.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\nimport { colors, spacing } from './tokens.stylex';\n\nconst darkMode = '@media (prefers-color-scheme: dark)';\n\nconst themeColors = css.createTheme(colors, {\n  primaryText: {default: 'purple', [darkMode]: 'lightpurple'},\n  secondaryText: {default: 'pink', [darkMode]: 'hotpink'},\n  accent: 'red',\n  background: {default: '#555', [darkMode]: 'black'},\n  lineColor: 'red',\n});\n\nconst themeSpacing = css.createTheme(spacing, {\n  ...\n});\n\nexport const theme = [ themeColors, themeSpacing ];\n```\n\n----------------------------------------\n\nTITLE: Rendering an Input Element with React Strict DOM\nDESCRIPTION: Example showing how to import and use the html.input component to create a basic text input with a placeholder and onInput event handler.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/05-input.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => (\n  <html.input\n    onInput={() => {}}\n    placeholder=\"Placeholder text\"\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Theme Component in React Strict DOM\nDESCRIPTION: This snippet shows how to create a reusable Theme component that allows easy theme switching. It uses css.create for styles and applies the selected theme to its children.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/05-theming-components.md#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\nimport { marsTheme } from './marsTheme';\nimport { venusTheme } from './venusTheme';\n\nconst styles = css.create({\n  displayContents: {\n    display: 'contents'\n  }\n});\n\nconst Theme = (props) => {\n  const theme = props.name === 'venus' ? venusTheme : marsTheme;\n  return (\n    <html.div\n      children={props.children}\n      style={[ theme, styles.displayContents ]}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Variables for Theming in React Strict DOM\nDESCRIPTION: This snippet demonstrates how to define CSS variables using css.defineVars in React Strict DOM. It creates a set of color tokens that can be used as a default theme throughout the application.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/05-theming-components.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nexport const tokens = css.defineVars({\n  primaryText: 'black',\n  secondaryText: '#333',\n  accent: 'blue',\n  background: 'white',\n  lineColor: 'gray'\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Style Rule\nDESCRIPTION: This snippet demonstrates how to define a basic style rule with a name and declaration object containing property-value pairs.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css.create({\n  // style rule's name is \"foo\"\n  foo: {\n    // declaration\n    backgroundColor: 'red'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Theme Variables in Component Styles with React Strict DOM\nDESCRIPTION: This snippet demonstrates how to use previously defined theme variables in component styles using css.create. It imports color variables and applies them to a container style.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/05-theming-components.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\nimport { colors } from './tokens.stylex';\n\nconst styles = css.create({\n  container: {\n    color: colors.primaryText,\n    backgroundColor: colors.background,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Pseudo-states in React Strict DOM\nDESCRIPTION: Demonstrates how to handle different element states using pseudo-classes for interactive styling.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  button: {\n    backgroundColor: {\n      default: 'lightblue',\n      ':hover': 'blue',\n      ':active': 'darkblue',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Themes to Components in React Strict DOM\nDESCRIPTION: This snippet demonstrates how to apply custom themes to components using the style prop. It combines theme styles with component-specific styles.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/05-theming-components.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\nimport { colors, spacing } from './tokens.stylex';\nimport { theme } from './theme';\n\nconst styles = css.create({\n  container: {\n    color: colors.primaryText,\n    backgroundColor: colors.background,\n    padding: spacing.medium,\n  },\n});\n\nconst Foo = () => (\n  <html.div style={[ theme, styles.container ]} />\n);\n```\n\n----------------------------------------\n\nTITLE: React Strict DOM Basic HTML Component Usage\nDESCRIPTION: Example of using a React Strict DOM component with className prop, demonstrating the basic syntax for styling components.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p className=\"text-xl\">React Strict DOM provides cross-platform components based on HTML.</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Style Rules with Functions\nDESCRIPTION: This snippet shows how to define a function rule that returns a style declaration object when called. This is used for dynamic styles that depend on runtime data.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css.create({\n  bar: (color: string, padding: number) => ({\n    color: color,\n    padding: padding\n  })\n});\n\nstyles.bar(color, padding)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Styles in React Strict DOM\nDESCRIPTION: Shows how to create dynamic styles that can be calculated at runtime based on parameters.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\n\nconst styles = css.create({\n  size: (height: number, width: number) => ({\n    height * 0.9,\n    width\n  })\n});\n\nfunction MyComponent() {\n  const {height, width} = useContainerSize();\n\n  return <html.div style={styles.size(height, width))} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Style Usage in React Strict DOM\nDESCRIPTION: Demonstrates how to apply styles to HTML elements using the style prop.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\n\nconst styles = css.create({\n  root: { ... }\n});\n\nconst Foo = () => (\n  <html.div style={styles.root} />\n);\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Function Rules in Components\nDESCRIPTION: This snippet demonstrates how to implement dynamic function rules in a component render. It shows extracting values from props and passing them to the dynamic style function.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  dynamic: (r, g, b) => ({\n    color: `rgb(${r}, ${g}, ${b})`,\n  }),\n});\n\n// in a component render\nconst { red, green, blue } = getColorsFromData(props.data)\nstyles.dynamic(red, green, blue)\n```\n\n----------------------------------------\n\nTITLE: Rendering an Image with React StrictDOM in JSX\nDESCRIPTION: This code snippet demonstrates how to import and use the <html.img> component from React StrictDOM to render an image with lazy loading, an onLoad event handler, and a srcSet for responsive images.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/04-img.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => (\n  <html.img\n    loading=\"lazy\"\n    onLoad={() => {}}\n    srcSet=\"https://srcSet-2x.jpg 2x\"\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Pseudo-State Styling\nDESCRIPTION: This snippet demonstrates how to use object-based style values to define stateful conditions like hover, focus, and active states for a style property.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css.create({\n  root: {\n    color: {\n      default: 'black',\n      ':hover': 'red',\n      ':focus': 'green',\n      ':active': 'blue',\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and Using html.a Link Component in React Strict DOM\nDESCRIPTION: This code demonstrates how to import the html module from react-strict-dom and create a link component using html.a with an href attribute. The href parameter would contain the URL destination.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/02-a.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => <html.a href={...} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Query Styling\nDESCRIPTION: This snippet shows how to use media queries within style value objects to apply different styles based on viewport size or color scheme preferences.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css.create({\n  root: {\n    color: {\n      default: 'black',\n      '@media (prefers-color-scheme:dark)': 'white'\n    },\n    width: {\n      default: '100%',\n      '@media (min-width:320px)': '800px',\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Named CSS Variables\nDESCRIPTION: Example showing how to define named variables that can be referenced elsewhere by their key name. The value must be a valid style value (number, string, object value, or null).\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/03-defineVars.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const colors = css.defineVars({\n  textPrimary: 'black',\n  textSecondary: '#333',\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing DOM Elements with Ref Callback\nDESCRIPTION: Example of using a ref callback to access the underlying DOM element for measuring its size and position, with proper cleanup handling.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/03-creating-components.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n<html.div ref={(node) => {\n  const rect = node.getBoundingClientRect;\n  return () => {\n    // cleanup\n  }\n}}>\n```\n\n----------------------------------------\n\nTITLE: Supporting Various Style Value Types\nDESCRIPTION: This snippet shows the different value types supported in style declarations, including strings, numbers, objects, css.firstThatWorks() results, and null values.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css.create({\n  foo: {\n    backgroundColor: 'white',\n    borderWidth: 10,\n    color: {\n      default: 'gray',\n      ':hover': 'black'\n    },\n    position: css.firstThatWorks('sticky', 'absolute'),\n    textDecorationLine: null\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using css.firstThatWorks for Fallback Styles in React Strict DOM\nDESCRIPTION: This snippet demonstrates how to use the css.firstThatWorks function to define fallback values for the 'position' property. It creates a styles object with a 'header' class that will use 'sticky' positioning if supported, falling back to 'absolute' if not.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/04-firstThatWorks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  header: {\n    position: css.firstThatWorks('sticky', 'absolute'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Textarea Component in React Strict DOM\nDESCRIPTION: This example demonstrates how to import and use the <html.textarea> component from react-strict-dom. The component is configured with an onInput event handler, placeholder text, and a specific number of rows.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/11-textarea.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => (\n  <html.textarea\n    onInput={() => {}}\n    placeholder=\"Placeholder text\"\n    rows={3}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Using Imperative DOM and Web APIs with React Strict DOM in JSX\nDESCRIPTION: This snippet shows how to use imperative DOM and Web APIs in React Strict DOM. It demonstrates accessing the parent element of a button using a ref callback.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/index.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nfunction MyButton() {\n  const elementCallback = (node) => {\n    const parent = node.parentElement;\n    // ...\n  };\n\n  return (\n    <html.button ref={elementCallback}>\n      A cross-platform button\n    </html.button>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Fallback Styles in React Strict DOM\nDESCRIPTION: Demonstrates how to implement fallback values for properties that might not be supported across all platforms.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  header: {\n    position: css.firstThatWorks('sticky', 'fixed'),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables in Component Styles\nDESCRIPTION: Demonstrates how to import and use previously defined style variables within component styles. Variables are referenced by their property names from the imported object.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/03-defineVars.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { colors } from './vars.stylex.js';\n\nconst styles = css.create({\n  text: {\n    color: colors.textPrimary\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Document API Usage Example\nDESCRIPTION: Demonstrates the recommended way to access the document API through Node.getRootNode() method to ensure compatibility with multi-window environments.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/04-other/03-document.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nNode.getRootNode()\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Queries in React Strict DOM\nDESCRIPTION: Shows how to create responsive styles using media queries for different screen sizes.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  base: {\n    width: {\n      default: 800,\n      '@media (max-width: 800px)': '100%',\n      '@media (min-width: 1540px)': 1366,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example of using className in React Strict DOM\nDESCRIPTION: Demonstrates how to use the className prop to apply styles in React Strict DOM components.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/index.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<p className=\"text-xl\">React Strict DOM provides a built-in way to create and use styles, variables, and themes.</p>\n```\n\n----------------------------------------\n\nTITLE: Conditional Styling in React Strict DOM\nDESCRIPTION: Demonstrates how to apply styles conditionally using JavaScript expressions.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<html.div\n  style={[\n    styles.root,\n    props.isHighlighted && styles.highlighted,\n    isActive ? styles.active : styles.inactive,\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using <html.label> Component with Form Fields in React Strict DOM\nDESCRIPTION: This example demonstrates how to link a label to an input field using the 'for' prop. It uses React's useId hook to generate a unique ID for associating the label with the input.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/06-label.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\nimport { useId } from 'react';\n\nconst Foo = () => {\n  const id = useId();\n  return (\n    <>\n      <html.label for={id} />\n      <html.input id={id} />\n    </>\n  );\n);\n```\n\n----------------------------------------\n\nTITLE: Variant Styles in React Strict DOM\nDESCRIPTION: Shows how to implement variant-based styling using object property lookups.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nimport { css, html } from 'react-strict-dom';\n\nconst colorVariantStyles = css.create({\n  red: {\n    color: 'rgb(200, 0, 0)',\n  },\n  green: {\n    color: 'rgb(0, 200, 0)',\n  }\n});\n\nconst sizeVariantStyles = css.create({\n  small: {\n    fontSize: '0.75rem',\n  },\n  large: {\n    fontSize: '1.5rem',\n  }\n});\n\nexport function Foo({ color, size, ...props }) {\n  return (\n    <html.span\n      {...props}\n      style={[\n        colorVariantStyles[color]\n        sizeVariantStyles[size]\n      ]}\n    />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering List Item Component with React Strict DOM\nDESCRIPTION: Demonstrates how to use the html.li component within an unordered list using React Strict DOM. The example shows basic implementation of a list item element inside an html.ul container.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/07-li.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => (\n  <html.ul>\n    <html.li />\n  </html.ul>\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing OptGroup Component in React Strict DOM\nDESCRIPTION: Demonstrates how to use the <html.optgroup> component within a select element to create grouped options. The example shows creating a color options group with a single 'Red' option.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/08-optgroup.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => (\n  <html.select>\n    <html.optgroup label=\"Colors\">\n      <html.option>Red</html.option>\n    </html.optgroup>\n  </html.select>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Option Component in React Strict DOM\nDESCRIPTION: Example showing how to import and use the <html.option> component within a <html.select> element in React Strict DOM to create a dropdown item.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/09-option.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => (\n  <html.select>\n    <html.option>Red</html.option>\n  </html.select>\n);\n```\n\n----------------------------------------\n\nTITLE: Window API Access Example\nDESCRIPTION: Demonstrates the proper way to access the window API in React Strict DOM to support multi-window environments.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/04-other/04-window.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nNode.getRootNode().defaultView\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Select Component with React Strict DOM\nDESCRIPTION: This example demonstrates how to create a basic select dropdown with an option using the html.select component from React Strict DOM.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/03-html/10-select.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { html } from 'react-strict-dom';\n\nconst Foo = () => (\n  <html.select>\n    <html.option>Red</html.option>\n  </html.select>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Native Platform Dependencies\nDESCRIPTION: Command to install the required peer dependencies for using React Strict DOM on native platforms. This requires using the new React Native architecture.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/01-installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react react-native\n```\n\n----------------------------------------\n\nTITLE: Overriding Style Variables with Theme Creation\nDESCRIPTION: This example demonstrates how to override default variable values when creating a theme. Each key in the overrides object must match the key of the object provided to defineVars.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/02-createTheme.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { colors } from './vars.stylex.js';\n\nconst themeColors = css.createTheme(colors, {\n  accent: 'red',\n  textPrimary: 'black',\n  textSecondary: 'brown',\n})\n```\n\n----------------------------------------\n\nTITLE: Using the Theme Component in a React Strict DOM Application\nDESCRIPTION: This snippet demonstrates how to use the Theme component to apply a theme to a part of the application. It wraps a ProfilePage component with the Theme component, passing the active theme name as a prop.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/05-theming-components.md#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ProfilePage } from './ProfilePage';\nimport { Theme } from './Theme';\n\nconst App = () => (\n  <Theme name={app.activeTheme}>\n    <ProfilePage user={user} />\n  </Theme>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing the HTML module from React Strict DOM\nDESCRIPTION: Basic import statement for the html object from React Strict DOM package, which is needed to create cross-platform components.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/03-creating-components.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { html } from 'react-strict-dom';\n```\n\n----------------------------------------\n\nTITLE: Generating Static CSS from Collected Style Rules\nDESCRIPTION: Example showing how to collect style rules during Babel transformation and generate a static CSS file using the preset's generateStyles method. This pattern is essential for optimizing styles on web builds.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/01-babel/01-preset.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport reactStrictBabelPreset from 'react-strict-dom/babel-preset';\n\nconst styleRules = {};\n\nfunction transform() {\n  const { code, metadata } = await babel.transformAsync(sourceCode, babelConfig);\n  if (metadata.stylex != null && metadata.stylex.length > 0) {\n    // collect styles from files\n    styleRules[id] = metadata.stylex;\n  }\n  // ...\n}\n\nfunction bundle() {\n  const rules = Object.values(styleRules).flat();\n  // generate CSS string from all collected styles\n  const css = reactStrictBabelPreset.generateStyles(rules);\n  // ...write css to file\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Strict DOM Core Package\nDESCRIPTION: Command to install the main React Strict DOM package in an existing React project.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/01-installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-strict-dom\n```\n\n----------------------------------------\n\nTITLE: Referencing Variable Definitions for Theme Creation\nDESCRIPTION: This snippet shows how to reference style variables defined with defineVars when creating a theme. The first argument to createTheme must be the return value of a defineVars call.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/02-createTheme.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { colors } from './vars.stylex.js';\n\nconst themeColors = css.createTheme(colors, { ... })\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel Preset for React Strict DOM\nDESCRIPTION: Basic configuration example for the React Strict DOM Babel preset. This shows how to import the preset and configure it with debug mode enabled.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/01-babel/01-preset.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport reactStrictBabelPreset from 'react-strict-dom/babel-preset';\n\nexport default function babelConfig() {\n  return {\n    presets: [\n      [reactStrictBabelPreset, { debug: true }]\n    ]\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Style Variables for Theming\nDESCRIPTION: This example shows how to define style variables with css.defineVars that can later be overridden with themes. Each variable is defined with a default value.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/02-createTheme.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nexport const colors = css.defineVars({\n  accent: 'blue',\n  textPrimary: 'black',\n  textSecondary: '#333',\n});\n```\n\n----------------------------------------\n\nTITLE: Metro Bundler Configuration for Package Exports\nDESCRIPTION: Metro configuration for Expo and React Native to enable package exports support and handle dependencies resolution.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/02-environment-setup.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Learn more https://docs.expo.dev/guides/monorepos\nconst { getDefaultConfig } = require('expo/metro-config');\n\n// Find the project and workspace directories\nconst projectRoot = __dirname;\n\nconst config = getDefaultConfig(projectRoot);\n// 1. Enable Metro support for symlinks and package exports\nconfig.resolver.unstable_enablePackageExports = true;\n// 2. Only for npm monorepos: force Metro to resolve (sub)dependencies only from the `nodeModulesPaths`\n// config.resolver.disableHierarchicalLookup = true;\n\nmodule.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Implementing React Native Component with React Strict DOM Props\nDESCRIPTION: Demonstrates how to use the compat.native component to translate React Strict DOM props into React Native props. The example shows a Foo component that wraps a React Native Text component while maintaining accessibility and prop compatibility.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/04-other/02-compat.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { compat } from 'react-strict-dom';\nimport { Text } from 'react-native';\n\nexport component Foo(...props: FooProps) {\n  return (\n    <compat.native\n      {...props}\n      aria-label=\"label\"\n      as=\"text\"\n    >\n      {(nativeProps: React.PropsOf<Text>)) => (\n        <Text {...nativeProps} />\n      )}\n    </compat.native>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Web Platform Dependencies\nDESCRIPTION: Command to install the required peer dependencies for using React Strict DOM on web platforms.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/01-installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react react-dom\n```\n\n----------------------------------------\n\nTITLE: Implementing Pseudo-elements in React Strict DOM\nDESCRIPTION: Shows how to use pseudo-elements, specifically the ::placeholder pseudo-element for styling input placeholders.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/04-styling-components.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { css } from 'react-strict-dom';\n\nconst styles = css.create({\n  input: {\n    '::placeholder': {\n      color: '#999',\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Expo Projects\nDESCRIPTION: TypeScript configuration for Expo projects using React Strict DOM, setting moduleResolution to bundler.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/02-environment-setup.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"expo/tsconfig.base\",\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"moduleResolution\": \"bundler\"\n  },\n  ...}\n```\n\n----------------------------------------\n\nTITLE: Nesting Pseudo-States Within Media Queries\nDESCRIPTION: This snippet demonstrates how to nest pseudo-states within media queries to create complex responsive and interactive styles.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/02-css/01-create.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst styles = css.create({\n  root: {\n    color: {\n      default: 'black',\n      ':hover': 'darkgray',\n      '@media (prefers-color-scheme:dark)': {\n        default: 'white',\n        ':hover': 'lightgray'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration for Style Extraction\nDESCRIPTION: PostCSS setup for extracting React Strict DOM styles to static CSS for web builds using postcss-react-strict-dom plugin.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/02-environment-setup.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: {\n    'postcss-react-strict-dom': {\n      include: [\n        // Include source files to watch for style changes\n        'src/**/*.{js,jsx,mjs,ts,tsx}',\n        // List any installed node_modules that include UI built with React Strict DOM\n        'node_modules/<package-name>/*.js'\n      ]\n    },\n    autoprefixer: {}\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Flow Types for data-* Props\nDESCRIPTION: Workaround for defining Flow types for data-* props in React Strict DOM by creating a custom ReactStrictDOMDataProps type in a Flow libdef file.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/03-creating-components.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// flow-typed/react-strict-dom.js\ndeclare type ReactStrictDOMDataProps = {\n  'data-imgperflogname'?: string,\n  'data-impression-id'?: number,\n};\n```\n\n----------------------------------------\n\nTITLE: StyleX CSS Directive Setup\nDESCRIPTION: CSS file setup with StyleX directive for React Strict DOM style generation during builds.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/02-environment-setup.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n/* This directive is used by the react-strict-dom postcss plugin. */\n/* It is automatically replaced with generated CSS during builds. */\n@stylex;\n```\n\n----------------------------------------\n\nTITLE: Installing PostCSS Plugin for Style Extraction\nDESCRIPTION: Command to install the PostCSS plugin required for extracting styles to static CSS when using React Strict DOM for web.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/01-installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev postcss-react-strict-dom\n```\n\n----------------------------------------\n\nTITLE: App Entry Point Configuration\nDESCRIPTION: Entry point setup for Expo app with React Strict DOM, including necessary CSS and Fast Refresh imports.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/02-environment-setup.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Required for CSS to work on Expo Web.\nimport './stylex.css';\n// Required for Fast Refresh to work on Expo Web\nimport '@expo/metro-runtime';\n\nimport { registerRootComponent } from 'expo';\nimport App from './App';\n\nregisterRootComponent(App);\n```\n\n----------------------------------------\n\nTITLE: Suppressing React Strict DOM Logs on React Native\nDESCRIPTION: Configuration for suppressing specific warning or error logs from React Strict DOM when running on React Native, using LogBox.ignoreLogs with regex patterns.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/03-creating-components.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { LogBox } from 'react-native';\n\nLogBox.ignoreLogs([\n  // Specific errors\n  '[error] React Strict DOM: css.keyframes() is not supported',\n  // Specific warnings\n  '[warn] React Strict DOM: unsupported prop \"onInvalid\"',\n  '[warn] React Strict DOM: unsupported style value in \"display:inline-flex\"',\n  // All warnings of a certain kind\n  /\\[warn\\] React Strict DOM: unsupported style property .*/,\n  // All warnings\n  /\\[warn\\] React Strict DOM: .*/,\n  // All logs\n  /\\[log\\] React Strict DOM: .*/,\n]);\n```\n\n----------------------------------------\n\nTITLE: Extending Flow Types for Translation Strings\nDESCRIPTION: Example of overriding the Stringish type in Flow to support translation frameworks like Fbt, enabling proper type checking for internationalized strings.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/learn/03-creating-components.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// flow-typed/stringish.js\ndeclare type Stringish = string | Fbt;\n```\n\n----------------------------------------\n\nTITLE: Web API Compatibility Table in Markdown\nDESCRIPTION: A markdown table showing the implementation status of core Web APIs across Android and iOS platforms, including features like AbortController, Blob, Crypto, and various EventTarget methods.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/04-other/01-common-min-api.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Web APIs | Android | iOS | Issue # |\n| ---- | ---- | ---- | ---- |\n| AbortController | ❌ | ❌ | |\n| AbortSignal | ❌ | ❌ | |\n| Blob | ✅ | ✅ | |\n| Crypto | ❌ | ❌ | |\n| CustomEvent() constructor| ❌ | ❌ | |\n| Event() constructor| ❌ | ❌ | |\n| EventTarget.addEventListener() | ❌ | ❌ | [#37](https://github.com/facebook/react-strict-dom/issues/37) |\n| EventTarget.dispatchEvent() | ❌ | ❌ | [#37](https://github.com/facebook/react-strict-dom/issues/37) |\n| EventTarget.removeEventListener() | ❌ | ❌ | [#37](https://github.com/facebook/react-strict-dom/issues/37) |\n| fetch | ✅ Partial | ✅ Partial | |\n| FileReader | ✅ | ✅ | |\n| URL | ❌ | ❌ | |\n```\n\n----------------------------------------\n\nTITLE: Comparing Benchmark Results\nDESCRIPTION: Command to compare benchmark results between two runs. This allows contributors to see the impact of their changes on performance metrics.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compare -w benchmarks -- <path-to-base.json> <path-to-patch.json>\n```\n\n----------------------------------------\n\nTITLE: Running Jest Tests in Watch Mode\nDESCRIPTION: Command to run Jest unit tests in watch mode, which automatically reruns tests when files are changed. This is useful during active development.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run jest -- --watch\n```\n\n----------------------------------------\n\nTITLE: Running Development Build for react-strict-dom Package\nDESCRIPTION: This command runs the development build task for the react-strict-dom package with file watching enabled. It demonstrates a practical example of running a workspace-specific task.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/03-workspaces-and-tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -w react-strict-dom\n```\n\n----------------------------------------\n\nTITLE: Running Workspace-specific Tasks with npm in React Strict DOM\nDESCRIPTION: This command demonstrates the syntax for running a task for a specific workspace. It uses the -w flag to specify which workspace the command should target.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/03-workspaces-and-tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run <task-name> -w <workspace-name>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Strict DOM\nDESCRIPTION: Command to install all required dependencies for the project after updating the repository.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Creating Patches for Node Modules\nDESCRIPTION: Command to create a patch for a modified node module. This allows contributors to make changes to dependencies that are tracked in the repository.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx patch-package <package-name>\n```\n\n----------------------------------------\n\nTITLE: Building React Strict DOM in Watch Mode\nDESCRIPTION: Command to build the react-strict-dom package with automatic rebuilding on changes. This is used for integration testing with example apps.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -w react-strict-dom\n```\n\n----------------------------------------\n\nTITLE: Git Operations for Branch Creation in React Strict DOM\nDESCRIPTION: Commands for checking out the main branch, pulling latest changes, and creating a new feature branch. This is the first step in the contribution workflow.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull <remote> main\n```\n\n----------------------------------------\n\nTITLE: Running All Tests for React Strict DOM\nDESCRIPTION: Command to run the complete test suite, including unit tests, type checking, and linting. This should be run before submitting a patch.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Updating Branch with Latest Main Changes\nDESCRIPTION: Series of commands to update a feature branch with the latest changes from main. This helps prevent merge conflicts during the review process.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull <remote> main\ngit checkout <branch-name>\ngit rebase main\n```\n\n----------------------------------------\n\nTITLE: Running Flow Type Checking\nDESCRIPTION: Command to run Flow static type checking on the codebase. This helps catch type-related errors before runtime.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnpm run flow\n```\n\n----------------------------------------\n\nTITLE: Checking out a Pull Request locally in Git\nDESCRIPTION: Commands to fetch and checkout a pull request from GitHub as a local branch. This allows reviewers to examine and modify patches before merging.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/05-merge-patch.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch origin pull/<PR_NUMBER>/head:pr-<PR_NUMBER>\ngit checkout pr-<PR_NUMBER>\n```\n\n----------------------------------------\n\nTITLE: Cloning React Strict DOM Repository for Meta Employees\nDESCRIPTION: Command for Meta employees to directly clone the React Strict DOM repository and navigate to the project directory.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/02-clone-repo.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:facebook/react-strict-dom.git\ncd react-strict-dom\n```\n\n----------------------------------------\n\nTITLE: Running Root-level Tasks with npm in React Strict DOM\nDESCRIPTION: This command shows how to run a task defined in the root package.json that typically applies across all workspaces. In this example, it runs the Flow type checking across the entire repository.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/03-workspaces-and-tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run flow\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote for Forked React Strict DOM Repository\nDESCRIPTION: Command to add an upstream remote pointing to the original React Strict DOM repository, allowing forked repositories to stay updated with upstream changes.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/02-clone-repo.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream git@github.com:facebook/react-strict-dom.git\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Bash\nDESCRIPTION: Command to check the currently installed version of Node.js on your development machine. For React Strict DOM, version 20.11 or higher is required.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/01-install-node.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ node --version\nv20.17.0\n```\n\n----------------------------------------\n\nTITLE: Running Examples App in Development Mode\nDESCRIPTION: Command to start the examples app for integration testing. This allows testing React Strict DOM changes in a real application context.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -w examples\n```\n\n----------------------------------------\n\nTITLE: Locating Node.js Installation Path in Bash\nDESCRIPTION: Command to find the installation path of Node.js to ensure it matches your PATH environment variable. This helps verify that you're using the correct Node.js installation.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/01-install-node.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ which node\n/usr/local/bin/node\n```\n\n----------------------------------------\n\nTITLE: Adding a co-author to a Git commit message\nDESCRIPTION: Example of how to format a commit message to include co-author information when significant changes have been made to someone else's patch.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/05-merge-patch.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n<commit-msg>\n>\n>\nCo-authored-by: NAME <NAME@EXAMPLE.COM>\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Website Locally\nDESCRIPTION: Command to start the documentation website in development mode. This allows contributors to preview documentation changes.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -w website\n```\n\n----------------------------------------\n\nTITLE: Document Interface Inheritance\nDESCRIPTION: Shows the inheritance structure of the document interface, which extends from Node and EventTarget interfaces.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/04-other/03-document.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ndocument inherits from the `Node` and `EventTarget` interfaces\n```\n\n----------------------------------------\n\nTITLE: globalThis API Compatibility Table in Markdown\nDESCRIPTION: A markdown table detailing the implementation status of globalThis APIs across Android and iOS platforms, including methods like atob, btoa, timing functions, and performance API methods.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/04-other/01-common-min-api.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| globalThis | Android | iOS | Issue # |\n| ---- | ---- | ---- | ---- |\n| globalThis.atob() | ✅ | ✅ | |\n| globalThis.btoa() | ✅ | ✅ | |\n| globalThis.clearInterval() | ✅ | ✅ | |\n| globalThis.clearTimeout() | ✅ | ✅ | |\n| globalThis.console | ✅ | ✅ | |\n| globalThis.crypto | ❌ | ❌ | |\n| globalThis.fetch() | ✅ | ✅ | |\n| globalThis.performance.clearMarks() | ✅ | ✅ | |\n| globalThis.performance.clearMeasures() | ✅ | ✅ | |\n| globalThis.performance.getEntries() | ✅ | ✅ | |\n| globalThis.performance.getEntriesByName() | ✅ | ✅ | |\n| globalThis.performance.getEntriesByType() | ✅ | ✅ | |\n| globalThis.performance.mark | ✅ | ✅ | |\n| globalThis.performance.measure() | ✅ | ✅ | |\n| globalThis.performance.now() | ✅ | ✅ | |\n| globalThis.performance.timeOrigin | ❌ | ❌ | |\n| globalThis.queueMicrotask() | ✅ | ✅ | |\n| globalThis.setInterval() | ✅ | ✅ | |\n| globalThis.setTimeout() | ✅ | ✅ | |\n```\n\n----------------------------------------\n\nTITLE: Running Performance Benchmarks\nDESCRIPTION: Commands to run performance and size benchmarks for React Strict DOM. These help detect performance regressions or improvements from changes.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run perf -w benchmarks\nnpm run size -w benchmarks\n```\n\n----------------------------------------\n\nTITLE: API Reference Markdown Structure\nDESCRIPTION: Markdown structure defining the navigation and organization of React Strict DOM API documentation, including sections for babel configuration, CSS styling, HTML components, and other utilities.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/api/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_position: -1\n---\n\n# API reference\n\n<p className=\"text-xl\">This section provides detailed reference documentation for working with React Strict DOM.</p>\n\n## babel\n\n* [preset](/api/babel-preset) - Configure babel for web builds.\n\n## css\n\n* [**css**](/api/css/) - An overview of working with styles.\n* [css.create](/api/css/create) - How to create styles.\n* [css.createTheme](/api/css/createTheme) - How to create themes.\n* [css.defineVars](/api/css/defineVars) - How to define variables.\n* [css.firstThatWorks](/api/css/firstThatWorks) - How to declare fallback values.\n\n## html\n\n* [**html**](/api/html/) - An overview of working with components.\n* [html.*](/api/html/common) - Common components and props.\n* [html.a](/api/html/a) - Anchor component.\n* [html.button](/api/html/button) - Button component.\n* [html.img](/api/html/img) - Image component.\n* [html.input](/api/html/input) - Input component.\n* [html.label](/api/html/label) - Form label component.\n* [html.li](/api/html/li) - List item component.\n* [html.optgroup](/api/html/optgroup) - Option group component.\n* [html.option](/api/html/option) - Option component.\n* [html.select](/api/html/select) - Option select component.\n* [html.textarea](/api/html/textarea) - Textarea component\n\n## other\n\n* [Common Web API](/api/other/common-min-api)\n* [compat](/api/other/compat)\n* [document](/api/other/document)\n* [window](/api/other/window)\n```\n\n----------------------------------------\n\nTITLE: Cloning Forked React Strict DOM Repository for External Contributors\nDESCRIPTION: Commands for external contributors to clone their forked React Strict DOM repository and navigate to the project directory. Replace <username> with your GitHub username.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/02-clone-repo.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<username>/react-strict-dom.git\ncd react-strict-dom\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in React Strict DOM\nDESCRIPTION: Command to create and checkout a new feature branch from main. This isolates development work from the main codebase.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <branch-name>\n```\n\n----------------------------------------\n\nTITLE: Checking npm Version in Bash\nDESCRIPTION: Command to check the currently installed version of npm on your development machine. For React Strict DOM, npm version 10 or higher is required.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/01-install-node.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm --version\n10.8.2\n```\n\n----------------------------------------\n\nTITLE: Pushing Branch to Remote Repository\nDESCRIPTION: Command to push the local branch to a remote repository. This is used when creating a new pull request.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit push <remote> <branch>\n```\n\n----------------------------------------\n\nTITLE: Amending a commit in Git\nDESCRIPTION: Command to amend an existing commit, useful when modifying patches before merging.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/05-merge-patch.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --amend\n```\n\n----------------------------------------\n\nTITLE: Force Pushing Updated Branch\nDESCRIPTION: Command to force push an updated branch to a remote repository. This is used after rebasing a branch that's already been pushed.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit push -f <remote> <branch>\n```\n\n----------------------------------------\n\nTITLE: Interactive Rebase for Commit Cleanup\nDESCRIPTION: Command to perform an interactive rebase on the last 5 commits. This allows squashing, reordering, or rewording commits before submitting a pull request.\nSOURCE: https://github.com/facebook/react-strict-dom/blob/main/apps/website/docs/contribute/01-development/04-author-patch.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i HEAD^5\n```"
  }
]