[
  {
    "owner": "joke2k",
    "repo": "django-environ",
    "content": "TITLE: Defining Environment Variables in .env for django-environ\nDESCRIPTION: Example `.env` file demonstrating how to define various configuration settings (like database, cache, Redis URLs, debug status, and secret key) as environment variables for use with `django-environ` in a Django project. This file should contain sensitive or environment-specific information and typically not be checked into version control.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/docs/quickstart.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=on\nSECRET_KEY=your-secret-key\nDATABASE_URL=psql://user:un-githubbedpassword@127.0.0.1:8458/database\nSQLITE_URL=sqlite:///my-local-sqlite.db\nCACHE_URL=memcache://127.0.0.1:11211,127.0.0.1:11212,127.0.0.1:11213\nREDIS_URL=rediscache://127.0.0.1:6379/1?client_class=django_redis.client.DefaultClient&password=ungithubbed-secret\n```\n\n----------------------------------------\n\nTITLE: Installing Unstable django-environ from GitHub\nDESCRIPTION: This command installs the latest unreleased development version of django-environ directly from the `develop` branch on GitHub. This version is a work-in-progress and might not be as stable as the released versions. It uses pip with either a git URL or a direct archive URL.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/docs/install.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -e git://github.com/joke2k/django-environ.git#egg=django-environ\n```\n\nLANGUAGE: console\nCODE:\n```\n$ pip install --upgrade https://github.com/joke2k/django-environ.git/archive/develop.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing django-environ with pip\nDESCRIPTION: This command installs the latest stable version of django-environ from PyPI using pip. It is recommended to run this command within a virtual environment to avoid conflicts with other Python packages.  No additional configuration in Django's `INSTALLED_APPS` is required after installation.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/docs/install.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ python -m pip install django-environ\n```\n\n----------------------------------------\n\nTITLE: Creating a Template .env.dist File for django-environ\nDESCRIPTION: Example `.env.dist` file serving as a template to document required environment variables for a Django project using `django-environ`. It includes comments explaining each variable's purpose (like DEBUG status, robot permissions, secret key, admin/manager emails, and server email) and placeholder values. This file is intended to be committed to version control as a reference for developers.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/docs/quickstart.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# SECURITY WARNING: don't run with the debug turned on in production!\nDEBUG=True\n\n# Should robots.txt allow everything to be crawled?\nALLOW_ROBOTS=False\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY=secret\n\n# A list of all the people who get code error notifications.\nADMINS=\"John Doe <john@example.com>, Mary <mary@example.com>\"\n\n# A list of all the people who should get broken link notifications.\nMANAGERS=\"Blake <blake@cyb.org>, Alice Judge <alice@cyb.org>\"\n\n# By default, Django will send system email from root@localhost.\n# However, some mail providers reject all email from this address.\nSERVER_EMAIL=webmaster@example.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Django with Environment Variables using django-environ\nDESCRIPTION: This code demonstrates how to set up a Django application using django-environ to load and parse environment variables from a .env file. It shows configuration for debugging, secret key, databases, and caches with appropriate type casting and default values.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/README.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport environ\nimport os\n\nenv = environ.Env(\n    # set casting, default value\n    DEBUG=(bool, False)\n)\n\n# Set the project base directory\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Take environment variables from .env file\nenviron.Env.read_env(os.path.join(BASE_DIR, '.env'))\n\n# False if not in os.environ because of casting above\nDEBUG = env('DEBUG')\n\n# Raises Django's ImproperlyConfigured\n# exception if SECRET_KEY not in os.environ\nSECRET_KEY = env('SECRET_KEY')\n\n# Parse database connection url strings\n# like psql://user:pass@127.0.0.1:8458/db\nDATABASES = {\n    # read os.environ['DATABASE_URL'] and raises\n    # ImproperlyConfigured exception if not found\n    #\n    # The db() method is an alias for db_url().\n    'default': env.db(),\n\n    # read os.environ['SQLITE_URL']\n    'extra': env.db_url(\n        'SQLITE_URL',\n        default='sqlite:////tmp/my-tmp-sqlite.db'\n    )\n}\n\nCACHES = {\n    # Read os.environ['CACHE_URL'] and raises\n    # ImproperlyConfigured exception if not found.\n    #\n    # The cache() method is an alias for cache_url().\n    'default': env.cache(),\n\n    # read os.environ['REDIS_URL']\n    'redis': env.cache_url('REDIS_URL')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring django-environ to recognize prefixed variables in settings.py\nDESCRIPTION: This snippet demonstrates how to configure the django-environ library to work with prefixed environment variables. It imports environ, creates an Env instance, sets the prefix to 'DJANGO_', and then accesses the TEST variable without needing to specify the prefix.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/docs/tips.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# settings.py file contents\nimport environ\n\n\nenv = environ.Env()\nenv.prefix = 'DJANGO_'\n\nenv.str('TEST')  # foo\n```\n\n----------------------------------------\n\nTITLE: Setting up environment variables with DJANGO_ prefix in .env file\nDESCRIPTION: This snippet shows how to structure a .env file with environment variables that use the DJANGO_ prefix. The file contains a single variable DJANGO_TEST with the value 'foo'.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/docs/tips.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# .env file contents\nDJANGO_TEST=\"foo\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Dictionaries using django-environ.Env in Python\nDESCRIPTION: Demonstrates how to use the environ.Env class to parse environment variable strings into dictionary objects of various types, including nested casting with custom value types. Requires 'django-environ' to be installed. The 'parse_value' method is called with type specifications, producing dictionaries where values are automatically cast. Inputs are strings formatted as key-value pairs separated by commas or semicolons. Outputs are Python dicts with appropriate value types. Ensure environment strings follow supported formatting for correct parsing.\nSOURCE: https://github.com/joke2k/django-environ/blob/main/docs/types.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport environ\n\nenv = environ.Env()\n\n# {'key': 'val', 'foo': 'bar'}\nenv.parse_value('key=val,foo=bar', dict)\n\n# {'key': 'val', 'foo': 1.1, 'baz': True}\nenv.parse_value(\n    'key=val;foo=1.1;baz=True',\n    dict(value=str, cast=dict(foo=float,baz=bool))\n)\n```"
  }
]