[
  {
    "owner": "dani-garcia",
    "repo": "vaultwarden",
    "content": "TITLE: Running Vaultwarden with Docker CLI\nDESCRIPTION: This snippet shows how to pull and run the Vaultwarden container using the Docker CLI. It includes setting environment variables, mounting a volume for persistent storage, setting a restart policy, and publishing ports. Replace `docker` with `podman` if using Podman.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull vaultwarden/server:latest\ndocker run --detach --name vaultwarden \\\n  --env DOMAIN=\"https://vw.domain.tld\" \\\n  --volume /vw-data/:/data/ \\\n  --restart unless-stopped \\\n  --publish 80:80 \\\nvaultwarden/server:latest\n```\n\n----------------------------------------\n\nTITLE: Running Vaultwarden with Docker Compose\nDESCRIPTION: This snippet defines a Docker Compose configuration for running the Vaultwarden container. It specifies the image, container name, restart policy, environment variables, volume mounts, and port mappings. This configuration is saved in a `compose.yaml` file.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  vaultwarden:\n    image: vaultwarden/server:latest\n    container_name: vaultwarden\n    restart: unless-stopped\n    environment:\n      DOMAIN: \"https://vw.domain.tld\"\n    volumes:\n      - ./vw-data/:/data/\n    ports:\n      - 80:80\n```\n\n----------------------------------------\n\nTITLE: Creating a local container registry\nDESCRIPTION: This command creates and runs a local container registry using Docker, making it directly reachable on localhost. This allows pushing and pulling images without relying on external registries.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Create a local container registry directly reachable on the localhost\ndocker run -d --name registry --network host registry:2\n```\n\n----------------------------------------\n\nTITLE: Creating and using a buildx builder instance\nDESCRIPTION: These commands create and configure a new buildx builder instance named `vaultwarden` that connects to the host network. It also validates that the builder is running correctly. This only needs to be done once.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Create and use a new buildx builder instance which connects to the host network\ndocker buildx create --name vaultwarden --use --driver-opt network=host\n\n# Validate it runs\ndocker buildx inspect --bootstrap\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU binfmt support on Arch Linux\nDESCRIPTION: This command installs the necessary packages on Arch Linux to enable QEMU binfmt support, allowing emulation of different architectures during container builds.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npacman -S qemu-user-static qemu-user-static-binfmt\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU binfmt support on Ubuntu/Debian\nDESCRIPTION: This command installs the necessary packages on Ubuntu or Debian to enable QEMU binfmt support, allowing the emulation of different architectures during container builds.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt install binfmt-support qemu-user-static\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU binfmt support using Docker container\nDESCRIPTION: This command uses a Docker container (tonistiigi/binfmt) to install and activate QEMU binfmt support, enabling emulation of ARM64 and ARM architectures. It requires Docker and the `--privileged` flag.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# To install and activate\ndocker run --privileged --rm tonistiigi/binfmt --install arm64,arm\n# To uninstall\ndocker run --privileged --rm tonistiigi/binfmt --uninstall 'qemu-*'\n```\n\n----------------------------------------\n\nTITLE: Building Multi Arch Alpine container using bake.sh\nDESCRIPTION: This command uses the `bake.sh` script to build a Multi Arch Alpine container and pushes it to a local registry. It requires the initialization steps for buildx to be completed and is run from within the docker directory.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nCONTAINER_REGISTRIES=\"localhost:5000/vaultwarden/server\" \\\n./bake.sh alpine-multi\n```\n\n----------------------------------------\n\nTITLE: Building a Debian container using docker buildx bake\nDESCRIPTION: This command builds a Debian container using `docker buildx bake` with the default configuration specified in `docker/docker-bake.hcl`.  It triggers a Debian build using the host's architecture.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Default bake triggers a Debian build using the hosts architecture\ndocker buildx bake --file docker/docker-bake.hcl\n```\n\n----------------------------------------\n\nTITLE: Running a baked Debian ARM64 image\nDESCRIPTION: This command runs a baked Debian ARM64 image using Docker. It disables the admin token, enables volatile storage, maps port 8080, and specifies the platform as linux/arm64. It requires the image to be built and tagged as `vaultwarden/server:testing-arm64`.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it \\\n  -e DISABLE_ADMIN_TOKEN=true \\\n  -e I_REALLY_WANT_VOLATILE_STORAGE=true \\\n  -p8080:80 --platform=linux/arm64 \\\n  vaultwarden/server:testing-arm64\n```\n\n----------------------------------------\n\nTITLE: Building a Debian ARM64 container with debug profile\nDESCRIPTION: This command builds a Debian ARM64 container using `docker buildx bake` with a debug cargo profile. It also sets the `SOURCE_COMMIT` variable. Requires `docker/docker-bake.hcl`.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nCARGO_PROFILE=dev \\\nSOURCE_COMMIT=\"$(git rev-parse HEAD)\" \\\ndocker buildx bake --file docker/docker-bake.hcl debian-arm64\n```\n\n----------------------------------------\n\nTITLE: Building a Debian container using bake.sh from repo root\nDESCRIPTION: This command uses the `bake.sh` script to build a Debian container.  It's run from the repo root directory.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker/bake.sh\n```\n\n----------------------------------------\n\nTITLE: Running a podman built Debian ARM64 image\nDESCRIPTION: This command runs a Debian ARM64 image built with podman. It disables the admin token, enables volatile storage, maps port 8080, and specifies the platform as linux/arm64. The image name starts with `localhost/`.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npodman run --rm -it \\\n  -e DISABLE_ADMIN_TOKEN=true \\\n  -e I_REALLY_WANT_VOLATILE_STORAGE=true \\\n  -p8080:80 --platform=linux/arm64 \\\n  localhost/vaultwarden/server:testing-arm64\n```\n\n----------------------------------------\n\nTITLE: Building an Alpine ARMv6 container with release profile\nDESCRIPTION: This command builds an Alpine ARMv6 container as a release build using `docker buildx bake`.  It also sets the `SOURCE_COMMIT` variable. Requires `docker/docker-bake.hcl`.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSOURCE_COMMIT=\"$(git rev-parse HEAD)\" \\\ndocker buildx bake --file docker/docker-bake.hcl alpine-armv6\n```\n\n----------------------------------------\n\nTITLE: Building Alpine Multi-Architecture container with debug profile\nDESCRIPTION: This command builds an Alpine multi-architecture container using `docker buildx bake` with a debug profile and pushes it to a local registry.  It sets the `CARGO_PROFILE`, `SOURCE_COMMIT`, and `CONTAINER_REGISTRIES` variables. Requires QEMU binfmt support and a running local registry.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Start a buildx bake using a debug build\nCARGO_PROFILE=dev \\\nSOURCE_COMMIT=\"$(git rev-parse HEAD)\" \\\nCONTAINER_REGISTRIES=\"localhost:5000/vaultwarden/server\" \\\ndocker buildx bake --file docker/docker-bake.hcl alpine-multi\n```\n\n----------------------------------------\n\nTITLE: Building Alpine arm64 container using podman-bake.sh\nDESCRIPTION: This command uses the `podman-bake.sh` script to build an Alpine arm64 container with only sqlite support and mimalloc enabled.  It sets the DB environment variable.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nDB=\"sqlite,enable_mimalloc\" \\\n./podman-bake.sh alpine-arm64\n```\n\n----------------------------------------\n\nTITLE: Building a container using bake.sh with extra arguments\nDESCRIPTION: This command uses the `bake.sh` script with extra arguments, in this example, to print what bake will use.  It's run from the repo root directory.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker/bake.sh alpine-all --print\n```\n\n----------------------------------------\n\nTITLE: Building a Debian container using podman-bake.sh from repo root\nDESCRIPTION: This command uses the `podman-bake.sh` script to build a Debian container.  It's run from the repo root directory.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ndocker/podman-bake.sh\n```\n\n----------------------------------------\n\nTITLE: Building a container using podman-bake.sh with extra arguments\nDESCRIPTION: This command uses the `podman-bake.sh` script with extra arguments, in this example, to disable cache.  It's run from the directory containing the script.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n./podman-bake.sh alpine-arm64 --no-cache\n```\n\n----------------------------------------\n\nTITLE: Installing QEMU binfmt support on Fedora\nDESCRIPTION: This command installs the qemu-user-static package on Fedora, enabling QEMU binfmt support for emulating different architectures during container builds.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/docker/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndnf install qemu-user-static\n```\n\n----------------------------------------\n\nTITLE: Adding GNU AGPL License Notices to Source Files\nDESCRIPTION: This code snippet shows how to add copyright and licensing information to the beginning of each source file in a new program. This is necessary to ensure that the program is distributed under the terms of the GNU Affero General Public License version 3. It includes placeholders for the program's name, year, and author's name.\nSOURCE: https://github.com/dani-garcia/vaultwarden/blob/main/LICENSE.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as published\nby the Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.\n```"
  }
]