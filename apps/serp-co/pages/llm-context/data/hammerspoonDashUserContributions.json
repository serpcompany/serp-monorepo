[
  {
    "owner": "hammerspoon",
    "repo": "dash-user-contributions",
    "content": "TITLE: Building Terraform Docset using Bash\nDESCRIPTION: This code snippet demonstrates how to clone the Terraform docset repository and build the docset using Make. It requires bash, git, GNU Make, and Python 3.9 as prerequisites.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Terraform/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:roberth-k/dash-docset-terraform.git\ncd dash-docset-terraform\nmake docset\n```\n\n----------------------------------------\n\nTITLE: Running Python Script to Generate Man Pages\nDESCRIPTION: This code snippet shows how to run the Python script for generating Linux man pages. It specifies the output directory and input resources required for the process. It includes parameters that control the operation of the script and mentions the order of arguments being significant. The script requires Python 3 and a specific directory structure for resources.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Linux_Man_Pages/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"python3 mandocset.py -o Linux -p resourse/man-pages-4.09/ resourse/man-pages-posix-2013-a/ -i etc/tux.png -I etc/tux@2x.png -f\"\n```\n\n----------------------------------------\n\nTITLE: Pandoc Docset Generation Script\nDESCRIPTION: This script is used to generate the Pandoc docset. It's the first step in creating the documentation set for Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pandoc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\"Pandoc-to-dash.py\"\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Requirements\nDESCRIPTION: This code installs the required packages to generate local documentation for Boto3. It ensures both the requirements for documentation and the latest version of Boto3 are set up.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npip install -r requirements-docs.txt\npip install --upgrade boto3\n```\n\n----------------------------------------\n\nTITLE: Info.plist File Structure for Docset\nDESCRIPTION: This XML snippet details the structure of the Info.plist file required for the PhysicsFS documentation set, defining identifiers and family names for integration with Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PhysicsFS/README.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>CFBundleIdentifier</key>\n    <string>physfs</string>\n    <key>CFBundleName</key>\n    <string>PhysicsFS</string>\n    <key>DocSetPlatformFamily</key>\n    <string>physfs</string>\n    <key>DashDocSetFamily</key>\n    <string>doxy</string>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Generating io.js Documentation and Dash Docset\nDESCRIPTION: Step-by-step shell commands to clone the io.js docset repository, generate API documentation, and create a Dash-compatible docset. The process involves cloning the repository, copying template files, generating docs, and building the final docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/io.js/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# change to io.js project\n$ cd io.js\n\n$ git clone git@github.com:fundon/iojs-docset.git dash\n$ cp dash/template.html doc/template.html\n\n# generate io.js API docs\n$ make doc\n\n$ rm -rf dash/io.js.docset/Contents/Resources/Documents/iojs.org/api/\n$ cp -R out/doc/api/* dash/io.js.docset/Contents/Resources/Documents/iojs.org/api/\n# generate io.js docset\n$ cd dash\n$ make\n```\n\n----------------------------------------\n\nTITLE: Building Nengo Documentation\nDESCRIPTION: Command to build the Nengo documentation using Sphinx with verbose output and warnings as errors.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/nengo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsphinx-build -vW docs docs/_build\n```\n\n----------------------------------------\n\nTITLE: Installing Required Python Modules\nDESCRIPTION: This section lists the Python modules required to build the Bokeh documentation using Sphinx. These modules include sphinx, pandas, scipy, colorcet, bokeh, nodejs and networkx. You must have these packages installed before running the make command.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bokeh/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsphinx==3.2.1\npandas==1.1.1\nscipy==1.5.2\ncolorcet==2.0.2\nbokeh==2.2.1\nnodejs==10.13.0\nnetworkx==2.5\n```\n\n----------------------------------------\n\nTITLE: Generating Hammerspoon Documentation with Shell Commands\nDESCRIPTION: Series of shell commands to clone the Hammerspoon repository and generate documentation. Uses bundler for dependency management and make for build automation. The process extracts documentation from source code and converts it to HTML via JSON.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Hammerspoon/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git://github.com/Hammerspoon/hammerspoon\ncd hammerspoon/scripts/docs/\nbundle install\ncd ..\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Modifying Info.plist for Requests-HTML Docset\nDESCRIPTION: Adds a key-value pair to the Info.plist file of the Requests-HTML docset to specify the dash index file path. This is a step in the process of building the docset using doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Requests-html/README.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>dashIndexFilePath</key>\\n<string>index.html</string>\n```\n\n----------------------------------------\n\nTITLE: Generating Scrapy Dash Docset using Make and doc2dash\nDESCRIPTION: This snippet details how to generate a Scrapy docset for Dash. It involves using `make` to build the HTML documentation, `doc2dash` to convert the documentation into a Dash docset, and `tar` to package the docset. It assumes `make` and `doc2dash` are installed and configured correctly.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Scrapy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake -C docs/ html\ndoc2dash docs/build/html/ -n Scrapy -u https://docs.scrapy.org/en/latest/ -I index.html -i tests/sample_data/test_site/files/images/scrapy.png -f\ntar --exclude='.DS_Store' -czf Scrapy.tgz Scrapy.docset\ncp Scrapy.tgz ../Dash-User-Contributions/docsets/Scrapy/\n\n```\n\n----------------------------------------\n\nTITLE: Building Jakarta EE 10 Docset Using Javadocset\nDESCRIPTION: Command to compile the Jakarta EE 10 Javadoc documentation into a Dash docset format using the javadocset tool.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Jakarta_EE_10/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njavadocset 'Jakarta EE 10' jakarta.jakartaee-api-10.0.0-javadoc\n```\n\n----------------------------------------\n\nTITLE: Executing Android KTX Docset Generation Script in Ruby\nDESCRIPTION: This command runs the Ruby script to generate the Android KTX docset for Dash. The script requires Ruby and the sqlite3 gem to be installed, and has been tested on macOS.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Android_KTX/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n./android-ktx-dash-docset.rb\n```\n\n----------------------------------------\n\nTITLE: Generating VMware vCloud Director API Docset using Scrapy\nDESCRIPTION: This command uses Scrapy to crawl and generate the VMware vCloud Director API docset. It requires Scrapy to be installed and should be run in the root directory of the cloned repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/vCloud_Director/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscrapy crawl vcd_api\n```\n\n----------------------------------------\n\nTITLE: Building Boto3 Documentation\nDESCRIPTION: This snippet shows the command to run the complete build process for the Boto3 documentation. The make command updates the documentation files after fetching the master branch.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake all\n```\n\n----------------------------------------\n\nTITLE: Converting Documentation to Docset using doc2dash\nDESCRIPTION: Command to convert HTML documentation to a Dash docset format using doc2dash tool, specifying the icon and name for the PyTorch-Geometric documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyTorch-Geometric/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash --icon ./html/icon@2x.png --name Pytorch-Geometric ./html\n```\n\n----------------------------------------\n\nTITLE: Generating and Packaging Celery Docset\nDESCRIPTION: This bash script is used to generate the HTML files with Sphinx, ensure CSS overrides for Dash compatibility, and create a docset package using doc2dash. It finalizes by creating a tarball of the generated docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Celery/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n# optional:\n# make clean\n\nmake html\n\n# ensure dash CSS overrides are included\nif ! grep -q '/*dash*/' _build/html/_static/celery.css; then\n    cat << EOF >> _build/html/_static/celery.css\n    /*dash*/\n    div.related {\n        width: auto !important;\n    }\n\n    div.document {\n        width: auto !important;\n    }\n\n    div.body {\n        min-width: auto !important;\n        max-width: auto !important;\n    }\n\n    div.footer {\n        width: auto !important;\n    }\nEOF\nfi\n\n# Find latest tag for URL\ntag=$(git describe --tags --match \"v*\" --abbrev=0 || echo latest)\n\n# generate Dash docset and install it in global location\ndoc2dash -Afj -nCelery -Iindex.html -uhttp://docs.celeryproject.org/en/${tag}/ _build/html\n\n# create tarball\ncd ~/Library/Application\\ Support/doc2dash/DocSets\ntar --exclude='.DS_Store' -cvzf Celery.tgz Celery.docset\n\n```\n\n----------------------------------------\n\nTITLE: Generating Dash Docset using doc2dash (Shell)\nDESCRIPTION: This command demonstrates how to use doc2dash to generate a Dash docset from the built HTML documentation. It includes options for specifying the icon, URL, name, and output destination.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/transformers/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash -i PATH_TO_ICON@2x.png -u https://huggingface.co/transformers/index.html# -n transformers -j -f -v -d DESTINATION_PATH_FOR_DOCSET_build/html/\n```\n\n----------------------------------------\n\nTITLE: Generating LLVM Dash Docset using Python\nDESCRIPTION: This snippet demonstrates the command to generate the LLVM Dash docset. It uses a Python script named 'llvm-to-dash.py' to create the docset. The script likely handles the conversion of LLVM documentation to the Dash format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LLVM/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython llvm-to-dash.py\n```\n\n----------------------------------------\n\nTITLE: Generating Kafka Docset for Dash Using Javadocset\nDESCRIPTION: Shell commands to create a Kafka documentation docset by cloning the Kafka repository, building Javadoc documentation, and converting it to Dash format using javadocset tool. The process includes downloading required tools, building Kafka from source, and generating aggregated Javadoc.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/kafka/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir kafka-docset\ncd kafka-docset\nwget http://kapeli.com/javadocset.zip\nunzip javadocset.zip\ngit clone https://github.com/confluentinc/kafka.git\ncd kafka\ngradle\n./gradlew aggregatedJavadoc\ncd ..\n./javadocset Kafka ./kafka/build/docs/javadoc/\n```\n\n----------------------------------------\n\nTITLE: Generating Apache RocketMQ Docset Using Shell Commands\nDESCRIPTION: A series of shell commands to create a Dash-compatible docset for Apache RocketMQ documentation. The script downloads required tools, clones the RocketMQ repository, generates JavaDoc documentation, and packages it into a docset format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_RocketMQ/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf rocketmq-docset\nmkdir rocketmq-docset rocketmq-docset/src rocketmq-docset/tools rocketmq-docset/generated\n\ncd rocketmq-docset\ncd tools\nwget --quiet http://kapeli.com/javadocset.zip\nunzip javadocset.zip\ncd ../src/\ngit clone https://github.com/apache/incubator-rocketmq\ncd ../generated\njavadoc -sourcepath ../src/incubator-rocketmq/client/src/main/java -subpackages org.apache.rocketmq -d ./javadocs\nmkdir docset\ncd docset\n../../tools/javadocset Apache_RocketMQ ../javadocs\ntar --exclude='.DS_Store' -czf Apache_RocketMQ.tgz\nApache_RocketMQ.docset\n\ncd ..\necho -e \"\\n\"\necho -e \"Generated javadocs are in ./rocketmq-docset/generated/javadocs\"\necho -e \"Generated docset is ./rocketmq-docset/generated/docset/Apache_RocketMQ.docset\"\necho -e \"Targzipped docset is ./rocketmq-docset/generated/docset/Apache_RocketMQ.tgz\"\necho -e \"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Sphinx\nDESCRIPTION: This snippet provides the shell command to build HTML documentation for PyMongo using Sphinx. It specifies the directory and options for the build process.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyMongo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake -C mongo-python-driver/doc SPHINXOPTS=\"-D html_theme_options.nosidebar=1\" html\n```\n\n----------------------------------------\n\nTITLE: Building imbalanced-learn Docset with doc2dash\nDESCRIPTION: Commands to generate the imbalanced-learn docset. This creates a documentation file, runs doc2dash to convert HTML documentation to a docset format, and packages it as a compressed archive.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/imbalanced-learn/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake file\ndoc2dash -n imbalanced-learn -i imbalanced-learn-master/doc/_static/img/logo.png -I imbalanced-learn-master/doc/_build/html/index.html -v imbalanced-learn-master/doc/_build/html\ntar cvzf imbalanced-learn.tgz imbalanced-learn.docset\n```\n\n----------------------------------------\n\nTITLE: Generating SymPy Dash docset using doc2dash in Command Prompt\nDESCRIPTION: This command uses doc2dash to create the SymPy Dash docset. It specifies the docset name, output directory, enables JavaScript, sets the icon, and defines the documentation URL and version.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/SymPy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\ndoc2dash -n SymPy -d SymPy.docset.X.Y --enable-js -i \"sympy-docs-html-X.Y/_static/sympylogo.png\" -uhttp://docs.sympy.org/latest/index.html -v sympy-docs-html-X.Y\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen for Dash Docset Generation\nDESCRIPTION: Configuration settings to add to the DPDK Doxygen configuration file to enable docset generation. These settings disable the index, remove the treeview, and enable docset generation format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DPDK/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGENERATE_DOCSET   = YES\nDISABLE_INDEX     = YES\nGENERATE_TREEVIEW = NO\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation\nDESCRIPTION: This command builds the HTML documentation for Chassis using the `make html` command within the `docs` directory.  It relies on a `Makefile` configured for building the documentation. The generated HTML files will be used as input for doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Chassis/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"make html\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running AutoHotkey Docset Generator\nDESCRIPTION: Commands for cloning the repository with documentation submodule, installing Python dependencies, and running the docset generator script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/AutoHotkey/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recursive https://github.com/vaz-ar/Autohotkey.docset\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\nahk_docset.py\n```\n\n----------------------------------------\n\nTITLE: Generating PyPDF Docset with doc2dash\nDESCRIPTION: These commands are used to build the HTML documentation, convert it to a Dash docset using `doc2dash`, and then archive the docset into a `.tgz` file. The `make html` command builds the HTML documentation from the source files. The `doc2dash` command converts the generated HTML into a Dash docset. Finally, `tar` command creates a compressed archive of the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyPDF/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmake html\ndoc2dash -v -n PyPDF -i pypdf-main/docs/_build/html/_static/logo.png -I pypdf-main/docs/_build/html/index.html pypdf-main/docs/_build/html\ntar cvzf PyPDF.tgz PyPDF.docset\n```\n\n----------------------------------------\n\nTITLE: Generate Peewee Dash Docset\nDESCRIPTION: This bash script clones the Peewee repository, builds the HTML documentation using Sphinx, and then converts the HTML documentation into a Dash docset using `doc2dash`. The generated docset is named 'Peewee', and the index page is specified as 'html/index.html'.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Peewee/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/coleifer/peewee peewee\ncd peewee/docs/\nmake html\ncd _build\ndoc2dash --name Peewee --index-page html/index.html html\n```\n\n----------------------------------------\n\nTITLE: Building a Conda Docset with doc2dash\nDESCRIPTION: This snippet demonstrates how to build a docset for Conda using doc2dash. It includes commands to execute file generation and convert documentation. Before running, download the needed documentation, unpack it, and install any required packages as specified in the source configuration. The command produces a Dash-compatible docset archive (Conda.tgz).\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Conda/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake file\ndoc2dash -n Conda -i conda-main/docs/html/_static/conda-logo.png -I conda-main/docs/_build/html/index.html -v conda-main/docs/_build/html\ntar cvzf Conda.tgz Conda.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Seaborn Docset (Method 1)\nDESCRIPTION: This snippet clones the seaborn-dash-docset repository from GitHub, navigates into the cloned directory, and uses Nox to execute the build process defined within the repository. The `nox --tags build` command triggers a build process, generating the Seaborn docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Seaborn/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngh repo clone paw-lu/seaborn-dash-docset\ncd seaborn-dash-docset\nnox --tags build\n```\n\n----------------------------------------\n\nTITLE: Generating Dash Docset\nDESCRIPTION: This command generates the Dash docset using `doc2dash`. The `-A` flag specifies the input directory containing the HTML files. The `-n` flag sets the docset name to \"Chassis\". The `-f` flag forces overwriting if a docset already exists. The `-I` flag specifies the index file (entry point) for the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Chassis/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"doc2dash -A _build/dirhtml/ -n Chassis -f -I index.html\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx for Faker Documentation\nDESCRIPTION: This Python snippet sets up the configuration for building Faker's documentation using Sphinx. It specifies the use of 'autoapi.extension' and sets several theme options for HTML output.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Faker.py/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nextensions = ['autoapi.extension']\nautoapi_dirs = [\"../../faker-master\"]\n\nhtml_theme = \"alabaster\"\n\nhtml_theme_options = dict(\n    logo_only=True,\n    nosidebar=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Pygments Documentation\nDESCRIPTION: Commands to build HTML documentation and create a docset using doc2dash with custom parameters including icon, index page, and documentation URL.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pygments/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd pygments-main/doc/\nmake html\ncd _build/html\ndoc2dash -n Pygments -u http://pygments.org -v -A -i ./_static/logo_only.png -f -I index.html -j .\n```\n\n----------------------------------------\n\nTITLE: Building Nox Dash Docset using Command Line\nDESCRIPTION: Commands to clone the nox-dash-docset repository and build the documentation using Nox. Requires git, GitHub CLI, and Nox to be installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/nox/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ gh repo clone paw-lu/nox-dash-docset\n\n$ cd nox-dash-docset\n\n$ nox --tags build\n```\n\n----------------------------------------\n\nTITLE: Creating a compressed archive of the docset\nDESCRIPTION: This command uses the `tar` utility to create a compressed archive of the Blender docset. The `--exclude='.DS_Store'` option excludes `.DS_Store` files, `-cvzf` specifies create, verbose, gzip, and file, `bpy.tgz` is the name of the archive, and `bpy.docset` is the directory to be archived.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Blender/README.md#2025-04-16_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n```shell\ntar --exclude='.DS_Store' -cvzf bpy.tgz bpy.docset\n```\n```\n\n----------------------------------------\n\nTITLE: Convert and Archive PyMC Documentation for Dash\nDESCRIPTION: This snippet converts documentation to a Dash docset, sets the icon and index page, and then archives the docset using tar.  The `doc2dash` command converts the HTML documentation, specifying the icon and index. The `tar` command creates a compressed archive of the resulting docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pymc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ndoc2dash -v -n pymc -i docs/logos/PyMC.png -I $(pwd)/docs/build/index.html docs/build\ntar cvzf pymc.tgz pymc.docset\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Dash Docset\nDESCRIPTION: Using doc2dash to create a Dash-compatible documentation set\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash --name MLflow \\\n  --icon mlflow-1.png \\\n  --force \\\n  --index-page index.html \\\n  --enable-js \\\n  --online-redirect-url https://www.mlflow.org/docs/latest/index.html \\\n  --add-to-dash \\\n  build/html\n```\n\n----------------------------------------\n\nTITLE: Building Documentation from Source - Python\nDESCRIPTION: This snippet outlines the steps for cloning the Optuna repository, installing necessary dependencies, and building the HTML documentation from the source. It requires Python 3.7 and assumes you have make installed to compile the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Optuna/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Python 3.7\ngit clone https://github.com/29Takuya/dash-docset-optuna.git && cd dash-docset-optuna\ngit clone https://github.com/optuna/optuna.git && cd optuna\npip install -U \".[document]\"\ncd docs && make html\ncd ../..\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation\nDESCRIPTION: This is the command to navigate to the docs directory of Dask and generate HTML documentation using a Makefile.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Dask/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd dask/docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Modifying Docset Platform Family in Info.plist\nDESCRIPTION: XML configuration snippet to set the DocSetPlatformFamily key to 'pyg' in the Info.plist file of the generated docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyTorch-Geometric/README.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>DocSetPlatformFamily</key>\n<string>pyg</string>\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Version Tag\nDESCRIPTION: Selecting a specific version tag for documentation generation\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: Building Documentation and Docset\nDESCRIPTION: Commands to build the HTML documentation and generate the Dash docset\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PytorchLightning/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake html\ndoc2dash -n PytorchLightning -I index.html -v -j -u \"https://pytorch-lightning.readthedocs.io/en/stable/\" -a -f build/html\n```\n\n----------------------------------------\n\nTITLE: Generating Six Docset with httrack and doc2dash\nDESCRIPTION: This snippet downloads the Six Python library documentation using httrack and converts it to a Dash docset using doc2dash. It first downloads the documentation from pythonhosted.org, and then uses doc2dash to create the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Six/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nhttrack \"http://pythonhosted.org/six/\" -O \"pythonhosted\" \"+*pythonhosted.org/six/*\" -v\ndoc2dash -v -n Six pythonhosted/pythonhosted.org/six/\n```\n\n----------------------------------------\n\nTITLE: Packaging Parse iOS SDK Docset using Shell Commands\nDESCRIPTION: This snippet uses shell commands to package the Parse iOS SDK docset into a tarball, excluding any unwanted files. It is necessary to have a xar file of the docset, which can be downloaded, and then this command creates a gzipped tarball named Parse-iOS-SDK.tgz. Ensure all file paths and versions are accurately updated before the tar command is executed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Parse_iOS_SDK/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf Parse-iOS-SDK.tgz Parse-iOS-SDK-<docset version>.docset\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for ThinkJS - Shell\nDESCRIPTION: This script outlines the steps to clone the ThinkJS documentation repository, install necessary npm dependencies, and generate the documentation in both Chinese and English languages. Prerequisites include having npm installed on the system. The key commands include checking out the repository, installing dependencies using 'npm install', and then generating language-specific documentation using 'npm start' for Chinese and 'npm run compile-en' for English.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ThinkJS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone https://github.com/lizheming/dash-thinkjs\n$ cd dash-thinkjs\n\n// Install dependencies\n$ npm install\n\n// Generate zh-cn version\n$ npm start\n\n// Generate en version\n$ npm run compile-en\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Atom Docset\nDESCRIPTION: Commands for cloning the repository, installing dependencies, and building the Atom documentation for Dash. Requires Node.js >= v8.0.0, httrack, and Yarn/npm.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Atom/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Converting to Dash Docset\nDESCRIPTION: Utilizes javadocset to convert the generated Javadoc into a Dash-compatible documentation set. Creates a searchable docset for the Dash documentation browser.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Guava/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ javadocset Guava guava/target/site/apidocs\n```\n\n----------------------------------------\n\nTITLE: Installing and Building More-itertools Documentation\nDESCRIPTION: A sequence of shell commands to clone the more-itertools repository, set up a Python virtual environment, install dependencies, and generate the documentation using Sphinx and doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/more_itertools/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:more-itertools/more-itertools.git\ncd more-itertools\ngit checkout v8.13.0\npython -m venv venv\nsource venv/bin/activate\npip install doc2dash Sphinx sphinx-rtd-theme==0.5.1\ncd docs\nmake clean html\ndoc2dash --index-page index.html --online-redirect-url https://more-itertools.readthedocs.io/en/stable/ _build/html/\n```\n\n----------------------------------------\n\nTITLE: Installing Python Documentation Requirements\nDESCRIPTION: Installing necessary Python dependencies for MLflow documentation generation\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npip install -r dev/small-requirements.txt\npip install -r dev/extra-ml-requirements.txt\npip install -r dev-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Celery Docset\nDESCRIPTION: This snippet provides the console commands for installing the necessary Python packages to generate the Celery docset. The dependencies include Sphinx and doc2dash, which are required for document generation and formatting.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Celery/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install -U -r requirements/docs.txt\n$ pip install doc2dash\n$ pip install -U sphinx>=1.7.1\n```\n\n----------------------------------------\n\nTITLE: Installing PyQtGraph from Conda\nDESCRIPTION: This snippet shows how to install the latest released version of PyQtGraph from conda-forge using conda. This is an alternative installation method that can be useful when managing environments with Conda.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pyqtgraph/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"conda install -c conda-forge pyqtgraph\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Docset - Node.js with NPM\nDESCRIPTION: This snippet shows how to use NPM to install the necessary dependencies and build the RethinkDB JavaScript Driver Docset. Similar to Yarn, this command installs the required packages and executes the build process, placing the generated docset in the build/ directory. Prerequisite: Node.js must be installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RethinkDBJS/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Info.plist Configuration for SDL Docset\nDESCRIPTION: This plist file configures the SDL docset for Dash, specifying the bundle identifier, name, docset family, and platform family. These settings are crucial for Dash to correctly recognize and integrate the SDL documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/SDL/README.md#2025-04-16_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<!DOCTYPE plist PUBLIC \\\"-//Apple//DTD PLIST 1.0//EN\\\" \\\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\\">\n<plist version=\\\"1.0\\\">\n<dict>\n    <key>CFBundleIdentifier</key>\n    <string>org.libsdl.sdl20</string>\n    <key>CFBundleName</key>\n    <string>SDL</string>\n    <key>DashDocSetFamily</key>\n    <string>doxy</string>\n    <key>DocSetPlatformFamily</key>\n    <string>sdl</string>\n</dict>\n</plist>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Environment with Anaconda\nDESCRIPTION: This snippet shows how to create a new Anaconda environment named 'dask_docs', using the conda-forge channel and a requirements file, to compile Dask docs.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Dask/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nconda create -n dask_docs -c conda-forge --file requirements-docs.txt\n```\n\n----------------------------------------\n\nTITLE: Building Editorial Docset with doc2dash\nDESCRIPTION: Provides commands for using doc2dash to convert Editorial documentation into a Dash docset, along with handling specific file operations and requirements (e.g., renaming and relocating folders).\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Editorial/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -fv --name Editorial -d build -i icon.png --index-page index.html editorial-docs\ncd _build \\\n  && tar --exclude='.DS_Store' -cvzf Editorial.tgz Editorial.docset\n\n# or to install to Dash's default directory for docsets:\ndoc2dash -fv --name Editorial -i icon.png --index-page index.html -A editorial-docs\n\n```\n\n----------------------------------------\n\nTITLE: Manual Apache Avro Docset Generation Commands in Bash\nDESCRIPTION: A series of shell commands to download Avro documentation and javadocset tool, extract the files, and generate a Dash docset. The process creates directories, downloads required files, and packages the final docset as a compressed archive.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Avro/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf avro-docset\nmkdir avro-docset avro-docset/src avro-docset/tools avro-docset/generated\n\ncd avro-docset/tools\nwget --quiet http://kapeli.com/javadocset.zip\nunzip javadocset.zip\ncd ../src/ \nwget --quiet http://www-eu.apache.org/dist/avro/avro-1.8.2/avro-doc-1.8.2.tar.gz\ntar xfz avro-doc-1.8.2.tar.gz\ncd ../generated\n../tools/javadocset Avro ../src/avro-doc-1.8.2/api/java\ntar --exclude='.DS_Store' -czf Avro.tgz Avro.docset\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Docset Generation Script\nDESCRIPTION: This bash script downloads Spring Boot API documentation, creates a directory structure, generates a docset using Docker, adds icons and information, and packages the docset for distribution. It uses `wget` to recursively download the documentation and `docker` to run a Go-based tool (`javadocset`) for generating the docset from the javadoc. The script relies on the availability of Docker and Go.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Spring_Boot/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n\n# download docs\nwget --recursive --page-requisites --convert-links --no-parent https://docs.spring.io/spring-boot/docs/current/api/overview-summary.html\ncd docs.spring.io/spring-boot/docs/current/api\n# create distribution-directory\nmkdir Spring_Boot\n# generate structure, docSet.dsidx and info.plist using docker-image containing go (required for javadocset-script)\ndocker run -it --rm -v /home/user/Desktop/dashdocsets/docs.spring.io/spring-boot/docs/current/api/:/go/src/spring-boot golang:alpine\ngo get github.com/william8th/javadocset\njavadocset Spring_Boot src/spring-boot\nmv Spring_Boot.docset/ src/spring-boot/Spring_Boot\nexit\nsudo chown -R user:user Spring_Boot/Spring_Boot.docset/\n# add icons and infos\nadd icons to Spring_Boot/Spring_Boot.docset/\nadd docset.json and README.md to Spring_Boot/\n# package and cleanup -> push to git-repo\ntar -cvzf Spring_Boot/Spring_Boot.tgz Spring_Boot/Spring_Boot.docset/\nrm -r Spring_Boot/Spring_Boot.docset/\n\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Beam Python Documentation and Converting to Dash Docset\nDESCRIPTION: Process for cloning the Apache Beam repository, setting up a Python environment, installing dependencies, customizing the Sphinx theme, generating documentation, and converting it to Dash docset format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Beam_Python/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:apache/beam.git --depth=1\ncd beam\npython3 -m venv .venv\nsource .venv/bin/activate\ncd sdks/python\npip install -r build-requirements.txt\npip install -e \".[docs,interactive,test,gcp,dataframe]\"\npip install doc2dash sphinx_rtd_theme\n# Replace sphinx_rtd_theme so we can hide sidebar and footer.\nsed -i -e \"s/html_theme = 'sphinx_rtd_theme'/html_theme = 'alabaster'; html_theme_options = {'nosidebar': True}; html_show_copyright = False; html_show_sphinx = False/\" scripts/generate_pydoc.sh\nscripts/generate_pydoc.sh\ncd ../../../\ndoc2dash beam/sdks/python/target/docs/_build --name=\"Apache Beam Python\" --index-page=index.html --force --icon=icon.png\nrm -rf beam\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building JSDoc Docset\nDESCRIPTION: Commands for installing required dependencies and building the JSDoc docset using jake build tool. Requires global installation of jake and local package dependencies.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/JSDoc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g jake\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\njake build\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Commons Math Docset\nDESCRIPTION: Command to generate a Dash-compatible docset from Apache Commons Math javadoc using the javadocset tool. The command takes two parameters: the docset name and the path to the javadoc files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Commons_Math/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./javadocset Apache_Commons_Math apidocs\n```\n\n----------------------------------------\n\nTITLE: Running Jazzy to Generate Docset for Constraid Framework\nDESCRIPTION: This code snippet provides the command necessary to execute the Jazzy tool for generating the Constraid docset. It includes important parameters to customize the output such as author attribution and module versioning.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Constraid/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njazzy -c -a \"UpTech Works, LLC\" -u http://upte.ch -m Constraid --module-version 2.0.2\n```\n\n----------------------------------------\n\nTITLE: Running Node.js Script to Replace Images in RxJava Docset\nDESCRIPTION: This shell script runs a Node.js script designed to replace all images in the RxJava docset with offline versions. It requires Node.js to be installed on the system. The script doesn't take additional parameters directly via the command line and expects the RxJava.docset file to exist in the specified format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RxJava/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode offline-images RxJava.docset\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx for Celery Docset\nDESCRIPTION: This Python snippet adds specific HTML theme options to the Sphinx configuration in 'docs/conf.py'. This ensures that the HTML output of Sphinx is suitable for conversion to a Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Celery/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nglobals().update(conf.build_config(\n    html_theme_options={\n        'nosidebar': True,\n    },\n    html_title='',\n\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation with Make\nDESCRIPTION: Command to build HTML documentation for Wagtail in the docs directory\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Wagtail/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Generating the Docset\nDESCRIPTION: Generates the Dash docset using `doc2dash`.  It sets the docset name, icon, index page, enables JavaScript, and configures online redirection.  It also adds the docset to Dash by default.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"doc2dash --name bonobo \\\n  --icon icon@2x.png \\\n  --force \\\n  --index-page index.html \\\n  --enable-js \\\n  --online-redirect-url https://docs.bonobo-project.org/en/master/ \\\n  --add-to-dash \\\n  _build/html\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dash Docset using doc2dash\nDESCRIPTION: Complete doc2dash command for generating the Dash docset with custom parameters including icon, version, and documentation URL\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/papermill/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -n \"papermill\" -d \"/Users/angelo/Library/ApplicationSupport/doc2dash/DocSets/papermill/2-1-1\" -i \"/Users/angelo/Pictures/Icons/dash/papermill/icon@2x.png\" -v -j -u \"https://papermill.readthedocs.io/en/latest/\" -I \"index.html\" ./ -a -f\n```\n\n----------------------------------------\n\nTITLE: Neovim Docset Generation Script\nDESCRIPTION: This entry represents the Python script (neovim.py) responsible for generating the Neovim docset. The script downloads Neovim documentation from the official releases and automates docset creation. The script is located at https://github.com/h-hg/dash-docset/blob/main/neovim.py.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Neovim/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nNo code provided, only a link to the script.\n```\n\n----------------------------------------\n\nTITLE: Building Intel x86_64 Assembly Docset\nDESCRIPTION: Shell script reference for generating the Intel x86_64 assembly instruction set documentation as a Dash docset. The script is located in the x86_64_asm directory of the repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/IntelASMx86/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\n----------------------------------------\n\nTITLE: Installing and Generating Google Closure Docset\nDESCRIPTION: Shell commands for generating a Google Closure docset. The process involves cloning a repository with submodules, running make to build the docset, and opening the generated docset file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/goog/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\nLANGUAGE: shell\nCODE:\n```\nopen goog.docset\n```\n\n----------------------------------------\n\nTITLE: Generating Bullet Docset for Dash\nDESCRIPTION: This snippet describes how to generate the Bullet docset for Dash. It requires curl and doxygen to be installed.  The VERSION variable should be set to the desired Bullet version.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bullet/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n\"Ensure `curl` and `doxygen` are installed, then run `VERSION=x.y.z make`.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashing JSON for openFrameworks Docset\nDESCRIPTION: JSON configuration file for dashing tool that specifies how to build the docset index. Defines package name, selectors, icons and other metadata for the openFrameworks documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/openFrameworks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"openFrameworks\",\n    \"package\": \"openFrameworks\",\n    \"index\": \"index.html\",\n    \"selectors\": {\n        \"dt a\": \"Command\",\n        \"title\": \"Package\"\n    },\n    \"ignore\": [\n        \"ABOUT\"\n    ],\n    \"icon32x32\": \"oF_logo_32x32.png\",\n    \"allowJS\": false,\n    \"ExternalURL\": \"http://openframeworks.cc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Commons Collections Docset using javadocset\nDESCRIPTION: This command uses the javadocset tool to generate a Dash docset for Apache Commons Collections. It requires downloading the javadoc from the Apache Commons website and using the javadocset tool from Kapeli's GitHub repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Commons_Collections/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./javadocset Apache_Commons_Collections apidocs\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation with Doc2Dash\nDESCRIPTION: This command generates documentation for pytest using 'doc2dash'. It includes the online redirect URL for the latest documentation and specifies the icon to be used. This is executed in the HTML build directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pytest/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash -A -n pytest --online-redirect-url https://docs.pytest.org/en/latest/contents.html -i icon@2x.png html/ -f\n```\n\n----------------------------------------\n\nTITLE: Building and Packaging NS-3 Docset with Bash Commands\nDESCRIPTION: Series of bash commands to build NS-3 documentation, create a Docset, and package it for Dash. Requires NS-3 source code, Doxygen, and Make to be installed. Process includes configuring Doxygen, building documentation, and packaging the final docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ns-3/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./waf --doxygen-no-build\ncp /path/to/icon* org.nsnam.ns3.docset\ncp /path/to/Info.plist org.nsnam.ns3.docset/Contents/\nmv /path/to/org.nsnam.ns3.docset ns-3.docset\ntar --exclude='.DS_Store' -cvzf ns-3.tgz ns-3.docset\n```\n\n----------------------------------------\n\nTITLE: Generating Docset with doc2dash\nDESCRIPTION: This command generates the docset using `doc2dash`.  It specifies the docset name, URL, icon, and the HTML directory to use as source.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/click/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndoc2dash -a -n click -u https://click.palletsprojects.com/en/<version>/ -i icon\\@2x.png html/\n```\n\n----------------------------------------\n\nTITLE: Installing Statsmodels Dependencies\nDESCRIPTION: Installs required Python packages for Statsmodels using pip and the requirements files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/statsmodels/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -f requirement.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install -f requirement-doc.txt\n```\n\n----------------------------------------\n\nTITLE: Building the AWS CLI v2 Dash Docset\nDESCRIPTION: This snippet provides the commands to clone the repository, navigate to the directory, and build the AWS CLI v2 Dash docset using GNU Make. The version number needs to be adjusted to match the desired AWS CLI version. The final docset and its compressed archive are created in the .build directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/AWS_CLI/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:roberth-k/dash-docset-aws-cli.git\ncd dash-docset-aws-cli\nmake .build/2.0.29/AWS-CLI.tgz\n```\n\n----------------------------------------\n\nTITLE: Building GraphQL Specification Docset with Ruby\nDESCRIPTION: Ruby script that downloads the GraphQL specification HTML, processes it by removing sidebar elements, resizes the icon, and builds the docset using Dashing. Requires Ruby, Nokogiri, curl, ImageMagick, and Dashing.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/graphql/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'nokogiri'\n\n`curl http://facebook.github.io/graphql/ -o index.html`\n`curl -O http://facebook.github.io/graphql/spec.css`\n`curl -O http://facebook.github.io/graphql/highlight.css`\n`curl -L https://github.com/facebook/graphql/raw/master/resources/GraphQL%20Logo.png >icon.png`\n`convert icon.png -resize 32x32 icon.png`\n\ndoc = Nokogiri::HTML(File.read('index.html'))\n\ndoc.css('.spec-sidebar').remove\ndoc.css('.spec-sidebar-toggle').remove\n\nFile.open('index.html', 'w') { |f| f.puts doc.to_html }\n\n`dashing build`\n\n`tar --exclude='.DS_Store' -cvzf graphql.tgz graphql.docset`\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation and Dash Docset for Shapely\nDESCRIPTION: Commands to generate HTML documentation using Sphinx and create a Dash docset using doc2dash. This process involves navigating to the docs directory, building HTML docs, and then converting them to a Dash docset format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/shapely/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docs && make html\n```\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -A html/ -n shapely\n```\n\n----------------------------------------\n\nTITLE: Generating Scikit-learn Documentation with doc2dash\nDESCRIPTION: This snippet shows how to use the doc2dash tool to create Dash documentation from Scikit-learn HTML files. It requires a downloaded copy of the Scikit-learn documentation and other specified dependencies. The command generates a docset suitable for Dash and compresses it into a tarball. Required inputs include paths to various files and folders, while the outputs are a Dash-compatible docset and a compressed tarball.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Scikit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ndoc2dash -n scikit-learn -i scikit-learn-docs/_static/scikit-learn-logo-small.png -I scikit-learn-docs/index.html scikit-learn-docs -v\ntar cvzf scikit-learn.tgz scikit-learn.docset\n```\n\n----------------------------------------\n\nTITLE: Setting up Solidity Docset using Bash\nDESCRIPTION: This bash script, `setup.sh`, installs necessary dependencies, fetches the Ethereum repository, builds HTML documentation, and populates the docset database. It requires access to GitHub and a Bash environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Solidity/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash setup.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Deno Docset with Deno CLI\nDESCRIPTION: This snippet demonstrates how to generate a Deno API docset using Deno CLI commands. It requires Deno installed on the system with necessary permissions such as network, write, and read access. The key command shown executes a script from a remote URL, optionally specifying a Deno version. The expected output is a docset file for the specified version, generated in compliance with the given script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Deno/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# Generate docset for newest available deno\n$ deno run --allow-net --allow-write=deno.docset --allow-read=. --no-check \"https://raw.githubusercontent.com/aiotter/deno_api_docset/master/main.ts\"\n\n# Generate docset for deno 1.20.2\n$ deno run --allow-net --allow-write=deno.docset --allow-read=. --no-check \"https://raw.githubusercontent.com/aiotter/deno_api_docset/master/main.ts\" v1.20.2\n```\n\n----------------------------------------\n\nTITLE: Running makedoc.sh to Generate Docset\nDESCRIPTION: This shell script compiles the Wand documentation into a Dash-compatible docset format. It requires the doc2dash tool and must be run in the root directory of the forked project. The output docset can be automatically opened in Dash if desired.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Wand/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./makedoc.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Google API Key in Sphinx\nDESCRIPTION: This section addresses an error related to a missing Google API key during the Bokeh documentation build process. It instructs the user to modify the `conf.py` file within the `sphinx/source` directory to bypass the Google API key requirement by setting `bokeh_missing_google_api_key_ok=True`.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bokeh/README.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nSet GOOGLE_API_KEY to a valid API key, or set bokeh_missing_google_api_key_ok=True in conf.py to build anyway (with broken GMaps)\n```\n\n----------------------------------------\n\nTITLE: Converting to Docset\nDESCRIPTION: This command runs `doc2dash` to convert the generated Sphinx HTML documentation into a docset format, suitable for Dash documentation browser.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/dolfin/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -n Dolfin -d path/to/output/directory path/to/sphinx/html\n```\n\n----------------------------------------\n\nTITLE: Running Dashing Script (Node.js)\nDESCRIPTION: This command executes the dashing.js Node.js script, which prepares the environment for building the Docset. Node.js must be installed on the system to execute this script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode ../dashing.js\n```\n\n----------------------------------------\n\nTITLE: Building Documentation Set with Yarn\nDESCRIPTION: This snippet details the command to build the documentation set using Yarn. It requires prior setup of dependencies as specified in the prerequisites. Running this command outputs the built documentation set.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WebExtensions/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Building Docset using Bash\nDESCRIPTION: This Bash script clones the Mastodon documentation repository and builds the docset using the generate.sh script. It requires Bash, Hugo, and SQLite to function properly. The script should be run manually from a terminal to set up the docset environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mastodon/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@gitlab.com:jaller94/dash-mastodon-documentation.git\ncd dash-matrix-spec\nbash generate.sh\n```\n\n----------------------------------------\n\nTITLE: Running javadocset to Compile Docset\nDESCRIPTION: This command utilizes the javadocset tool to compile the extracted Javadoc files into a Dash-compatible documentation set for the Vaadin framework. Ensure you replace <path to extracted Javadoc folder> with the actual path for the Javadoc files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Vaadin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./javadocset Vaadin <path to extracted Javadoc folder>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for XGBoost Documentation\nDESCRIPTION: These commands navigate to the doc directory, install required pip dependencies, and doc2dash for docset generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xgboost/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd doc\npython -m pip install -r requirements.txt\npython -m pip install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation\nDESCRIPTION: Navigate to the `docs` directory within the MXNet repository and use the `make html` command to generate the HTML documentation. This documentation will be used to create the Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MXNet/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\ncd docs && make html\n```\n\n----------------------------------------\n\nTITLE: Converting Documentation to Dash Format\nDESCRIPTION: This shell command uses 'doc2dash' to convert the generated HTML documentation for CVXPY into a Dash-compatible docset named 'cvxpy'. It requires 'doc2dash' to be installed in the user's environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/cvxpy/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash -n cvxpy html\n\n```\n\n----------------------------------------\n\nTITLE: Downloading and Processing Org Mode Docs using Shell Commands\nDESCRIPTION: This snippet provides shell commands to download Org Mode documentation from the web, organize it into a specified directory structure, and compress it into a tar.gz file. It relies on various Unix commands like wget, mkdir, mv, and tar. Python 3 with Beautifulsoup4 is also required for further processing.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Org_Mode/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ wget -c -L -r -k -np -i - <<LIST\nhttp://orgmode.org/manual/index.html\nhttp://orgmode.org/org-manual.css\nhttp://orgmode.org/org-keys.js\nLIST\n$ mkdir -p Org_Mode.docset/Contents/Resources/Documents/\n$ mv orgmode.org Org_Mode.docset/Contents/Resources/Documents/orgmode\n$ $ pip install beautifulsoup4\n$ python ./gen_org_doc.py Org_Mode.docset/Contents/Resources\n$ tar --exclude='.DS_Store' -cvzf Org_Mode.tgz Org_Mode.docset\n```\n\n----------------------------------------\n\nTITLE: Generating Requests Docset Using Command Line\nDESCRIPTION: This snippet provides a series of command-line instructions to generate and package a docset for the Requests library. It first navigates to the 'docs' directory and builds HTML documentation using 'make'. Then, it uses the 'doc2dash' tool to create a docset, specifying the icon and index file. Finally, it packages the docset into a gzipped tarball for distribution. Dependencies include: 'make', 'doc2dash', and 'tar' installed on the user's machine.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Requests/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ncd docs & make html\ndoc2dash -n Requests -i _static/requests-sidebar.png -f -I index.html -v _build/html && tar cvzf Requests.tgz Requests.docset\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to docset with doc2dash\nDESCRIPTION: This command uses the doc2dash tool to convert the generated HTML documentation into a docset. The `-n Blender` option specifies the name of the docset as 'Blender', and `build/html` is the directory containing the HTML files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Blender/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n```shell\ndoc2dash -n Blender build/html\n```\n```\n\n----------------------------------------\n\nTITLE: Converting to Docset with doc2dash - Python\nDESCRIPTION: This snippet demonstrates the process of converting the generated HTML documentation to a docset using the doc2dash tool. It allows optional installation of doc2dash with Python 3.8 and requires specified parameters for proper conversion, including the destination path and online redirect URL.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Optuna/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# (optional) Switch to Python 3.8 to use the latest doc2dash release\npip install doc2dash\ndoc2dash \\\n  --name Optuna \\\n  --destination . \\\n  --force \\\n  --index-page index.html \\\n  --online-redirect-url https://optuna.readthedocs.io \\\n  ./optuna/docs/build/html\ncp ./icon/*.png Optuna.docset/\ntar --exclude='.DS_Store' -cvzf Optuna.tgz Optuna.docset\n```\n\n----------------------------------------\n\nTITLE: Generating and Opening Google Cloud Python Documentation\nDESCRIPTION: This snippet details the Makefile modifications required to automate the generation and opening of the Google Cloud Python documentation. It requires Sphinx and its dependencies. The `sphinx-build` command generates the documentation, while `open` opens the resulting HTML file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Google_Cloud_Client-Python/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\n.PHONY: all default\n default: all\n all: build open\n build:\n\tsphinx-build . _build\n open:\n\topen _build/index.html\n```\n\n----------------------------------------\n\nTITLE: Generating Pywikibot Docset via Shell Script\nDESCRIPTION: This snippet outlines the steps to generate a Pywikibot docset. It involves cloning the `pywikibot_docset` repository, navigating into the directory, and executing the `generate.sh` script to create the docset. The generated docset can then be used for offline documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pywikibot/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/inductiveload/pywikibot_docset\ncd pywikibot_docset\n./generate.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Javadoc with Maven\nDESCRIPTION: Uses Apache Maven to generate Javadoc for the Guava library. This step creates the API documentation that will be converted into a Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Guava/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mvn javadoc:javadoc\n```\n\n----------------------------------------\n\nTITLE: Installing Beautiful Soup for Documentation Generation - Bash\nDESCRIPTION: This snippet provides the command to install the Beautiful Soup library, which is required for generating PyGame documentation. It utilizes the package manager 'pip' to fetch and install the library.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyGame/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install beautifulsoup4\n```\n\n----------------------------------------\n\nTITLE: Building Marshmallow Documentation with Tox\nDESCRIPTION: Command to build the Marshmallow documentation using tox in watch mode.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/marshmallow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntox -e watch-docs\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation\nDESCRIPTION: Generating HTML documentation for MLflow project\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building libuv Documentation\nDESCRIPTION: A series of commands to clone the libuv repository, navigate to the docs directory, checkout the latest stable version, and generate HTML documentation using Sphinx and doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/libuv/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/libuv/libuv\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd libuv/docs\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout v1.41.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake html SPHINXOPTS=\"-D html_title='' -D html_theme_options.nosidebar=True\"\n```\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -n \"libuv\" -I \"index.html\" -u \"http://docs.libuv.org/en/stable/\" \"build/html\"\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Nifi Docset with Gulp\nDESCRIPTION: Commands to install dependencies and generate the Apache Nifi docset using a gulp task. Requires Node.js and npm to be installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Nifi/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ngulp -p nifi\n```\n\n----------------------------------------\n\nTITLE: Generating Xarray Docset using Bash Commands\nDESCRIPTION: This bash script generates the HTML documentation using 'make', creates a Dash docset using 'doc2dash', and packages it into a tarball. It specifies the docset name, icon, and index file for the Xarray documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xarray/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\ndoc2dash -v -n xarray -i xarray-main/doc/_build/html/_static/dataset-diagram-square-logo -I xarray-main/doc/_build/html/index.html xarray-main/doc/_build/html\ntar cvzf xarray.tgz xarray.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Screeps Documentation Bash Script\nDESCRIPTION: This Bash script clones the official Screeps documentation from GitHub, installs necessary dependencies via npm, and generates static sites. This setup is necessary for creating a Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Screeps/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/screeps/docs screeps-docs\ncd screeps-docs\nnpm install\ncd api\nnpm install\ncd ..\nnpm run generate\ncd api\nnpm run generate\ncd ../..\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to Dash Docset\nDESCRIPTION: Command to convert the downloaded HTML documentation into a Dash-compatible docset format using doc2dash tool.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pydoop/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash -v -n Pydoop pydoop.sourceforge.net/docs/\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Commons CSV Docset with javadocset\nDESCRIPTION: Command to generate a Dash docset for Apache Commons CSV using the javadocset tool. It takes the docset name 'Apache_Commons_CSV' and the javadoc directory 'apidocs' as parameters.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Commons_CSV/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./javadocset Apache_Commons_CSV apidocs\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Requirements for iPython\nDESCRIPTION: Command to install necessary Python dependencies for building the iPython documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/iPython/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -U -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Executing Python Script for Docset Generation\nDESCRIPTION: This snippet provides a command to execute the Python script 'clang-to-dash.py' to generate the docset for Clang. It details the simplicity of the operation, requiring only a single command to run the script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Clang/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"\"\"\n\tpython clang-to-dash.py\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Generating Cassandra Docset with Shell Commands\nDESCRIPTION: This shell script downloads the Cassandra documentation archive, extracts it, converts it into a Dash docset using a modified html2dash script, and then compresses the output. Dependencies include wget for downloading files, unzip for extraction, a custom html2dash script for conversion, and tar for compression. No parameters are used, and the expected output is a Cassandra.tgz file. The script assumes internet connectivity and access to required tools.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Cassandra/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwget http://docs.datastax.com/en/cassandra/3.0/zip/cassandra30.zip\nunzip cassandra30.zip -d cassandra\n./html2dash.py --name Cassandra --key cassandra cassandra\ntar --exclude='.DS_Store' -cvzf Cassandra.tgz Cassandra.docset\n```\n\n----------------------------------------\n\nTITLE: Running Docset Creation Commands - Shell\nDESCRIPTION: This snippet contains the shell commands required to create a docset for the NetworkX Python package. It utilizes the doc2dash command for converting documentation into a docset format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/NetworkX/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ndoc2dash -n NetworkX -i networkx-gh-pages/icon.png -I networkx-gh-pages/index.html -f ./networkx-gh-pages\n```\n\nLANGUAGE: Shell\nCODE:\n```\ntar cvzf NetworkX.tgz NetworkX.docset\n```\n\n----------------------------------------\n\nTITLE: Building AVR Libc Documentation\nDESCRIPTION: Configures and builds the AVR Libc documentation using Doxygen. This generates a docset in the doc/api directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/AVR_Libc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./configure --build=`./config.guess` --host=avr\ncd doc/api/\nmake dox-docset\n```\n\n----------------------------------------\n\nTITLE: Creating ScalaFX Docset\nDESCRIPTION: This command line instruction is used to create the ScalaFX docset. It utilizes the `mkScalaDocset` tool, specifying 'scalafx' as the docset name and providing the path to the generated scaladoc API documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ScalaFX/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./mkScalaDocset scalafx </path/to/.../scalafx/target/scala-2.10/api>\n```\n\n----------------------------------------\n\nTITLE: Archiving Kornia Docset with tar\nDESCRIPTION: Command to create a compressed tar archive of the Kornia docset while excluding macOS .DS_Store files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/kornia/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf kornia.tgz kornia.docset\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies and doc2dash\nDESCRIPTION: This command installs the project's dependencies from the `docs/requirements.txt` file and installs doc2dash. `pip install -r docs/requirements.txt` installs all the required packages for building the documentation, while `pip install doc2dash` installs the tool used to generate the Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPS/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install -r docs/requirements.txt; pip install doc2dash; make -C docs html\"\n```\n\n----------------------------------------\n\nTITLE: Generating Seaborn Docset (Method 2)\nDESCRIPTION: This snippet uses `doc2dash` to convert the HTML documentation of Seaborn into a Dash docset, specifying the icon and index page. Then, it creates a compressed archive of the generated docset using `tar`. This is one of the methods to build the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Seaborn/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -v -n seaborn -i seaborn.github.io-master/_static/logo-tall-lightbg.png -I seaborn.github.io-master/index.html seaborn.github.io-master\ntar cvzf seaborn.tgz seaborn.docset\n```\n\n----------------------------------------\n\nTITLE: Generating ggplot2 Documentation with staticdocs in R\nDESCRIPTION: Commands to generate local ggplot2 documentation using the staticdocs R package. Shows two variations: one using just the package name and another using a specific path to the package source.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ggplot2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nstaticdocs::build_site(ggplot2)\n```\n\nLANGUAGE: r\nCODE:\n```\nstaticdocs::build_site(devtools::as.package(\"/path/to/ggplot2\"))\n```\n\n----------------------------------------\n\nTITLE: Generating Docset with Doc2dash\nDESCRIPTION: This snippet generates a docset for the mrjob library using Doc2dash. It specifies the name of the docset as 'Mrjob' and the source directory as 'mrjob/pythonhosted.org/mrjob/'. Ensure Doc2dash is installed before executing.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mrjob/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -v -n Mrjob mrjob/pythonhosted.org/mrjob/\n```\n\n----------------------------------------\n\nTITLE: Converting HTML to Dash Docset using doc2dash in Bash\nDESCRIPTION: This bash command utilizes doc2dash to convert the generated HTML documentation into a Dash docset named 'fiona'. Requires doc2dash to be installed beforehand.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Fiona/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -A html/ -n fiona\n```\n\n----------------------------------------\n\nTITLE: Generating Docset for Apache Storm\nDESCRIPTION: This snippet demonstrates the command to generate a docset for Apache Storm using the javadocset tool. It requires that the Javadoc API folder is correctly specified.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Storm/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njavadocset storm ./storm-core/target/site/apidocs\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Requirements File\nDESCRIPTION: This snippet uses pip to install all necessary packages specified in the requirements.txt file within a virtual environment. No additional parameters are required beyond setting up the virtual environment. The expected outcome is that all dependencies are installed successfully.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/confluent-kafka-python/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Building FreeBSD Handbook Docset\nDESCRIPTION: This script builds the FreeBSD Handbook docset.  It requires golang, dashing and recode to be installed and available in the system's PATH.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/FreeBSD_Handbook/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\n./make-doc\n\n```\n\n----------------------------------------\n\nTITLE: Generating Java Documentation with Gradle\nDESCRIPTION: Gradle command to generate Java documentation for WPILib, which creates documentation files in a specific directory\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPILib/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew generateJavaDocs\n```\n\n----------------------------------------\n\nTITLE: Generating uWSGI Docset for Dash\nDESCRIPTION: This snippet demonstrates the process of creating a uWSGI docset for the Dash documentation browser. It involves cloning the uWSGI documentation repository, building the HTML files, and using doc2dash to convert them into a Dash-compatible format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/uWSGI/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/unbit/uwsgi-docs.git\n$ make html\n$ cd _build\n$ doc2dash -n uWSGI -j -u https://uwsgi-docs.readthedocs.io/en/latest/ html\n```\n\n----------------------------------------\n\nTITLE: Executing Tox to Build Documentation with New Config\nDESCRIPTION: This shell command is for executing 'tox' to build the documentation for pytest after the theme patch has been applied. It runs in the 'doc/en/_build' directory and assumes that tox has been installed via pip.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pytest/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ntox -e docs\n```\n\n----------------------------------------\n\nTITLE: Generating Astropy Docset\nDESCRIPTION: Command to generate Dash docset from HTML documentation using doc2dash\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Astropy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -v -n Astropy -I index.html -u http://docs.astropy.org/en/stable/ $SRCDIR/astropy/docs/_build/html\n```\n\n----------------------------------------\n\nTITLE: Generating Drupal Console Documentation for Dash\nDESCRIPTION: Command to generate Drupal Console documentation for Dash using the Drupal Console CLI tool. This should be run with the latest version of Drupal Console.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DrupalConsole/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndrupal generate:doc:dash --path ~/DrupalConsoleDash/docsets/DrupalConsole\n```\n\n----------------------------------------\n\nTITLE: Generating GLM Docset with Shell Script\nDESCRIPTION: This shell script automates the process of generating a Dash docset for the GLM library. It clones the GLM repository, configures Doxygen to generate docset-compatible output, builds the documentation, and copies the necessary files into the docset. It also modifies the generated HTML to use the local `manual.pdf` instead of the online link.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/OpenGL_Mathematics/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n#!/bin/bash\n\nGLM_VERSION='0.9.9.8'\n\nrm -rf glm\nrm -rf glm.docset\ngit clone https://github.com/g-truc/glm.git --branch $GLM_VERSION --depth 1 -c advice.detachedHead=false\n\n# modify doxygen config\n# https://kapeli.com/docsets#doxygen\ncd glm/doc\ngsed -i -e 's/GENERATE_DOCSET[[:space:]]*= NO/GENERATE_DOCSET = YES/g' man.doxy\ngsed -i -e 's/DISABLE_INDEX[[:space:]]*= NO/DISABLE_INDEX = YES/g' man.doxy\ngsed -i -e 's/SEARCHENGINE[[:space:]]*= YES/SEARCHENGINE = NO/g' man.doxy\n# GENERATE_TREEVIEW is already set to NO\n\ndoxygen man.doxy\ncd html\n# replace xcode docsetutil with homebrew docsetutil\ngsed -i 's/$(XCODE_INSTALL)\\/usr\\/bin\\/docsetutil/docsetutil/g' Makefile\nmake\nmv org.doxygen.Project.docset ../../../glm.docset\n\ncd ../../..\ncp glm-Info.plist glm.docset/Contents/Info.plist\ncp glm/doc/manual.pdf glm.docset/Contents/Resources/Documents/manual.pdf\ngsed -i 's/https:\\/\\/github.com\\/g-truc\\/glm\\/blob\\/master\\/manual.md/manual.pdf/g' glm.docset/Contents/Resources/Documents/index.html\n\ncp glm-icon-16x16.png glm.docset/icon.png\ncp glm-icon-32x32.png glm.docset/icon@2x.png\n```\n\n----------------------------------------\n\nTITLE: Building Docset with doc2dash Bash Command\nDESCRIPTION: This Bash snippet uses the 'doc2dash' command to convert built HTML files from the PEPs repository into a docset, suitable for use with certain documentation viewers. It assumes the PEPs repository and its dependencies have been installed and built with 'make render'. The command sets the index page and specifies an icon, along with configuring an online redirect URL for when the docset is accessed from the web.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PEPs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash --index-page index.html --icon build/_static/py.png --online-redirect-url https://peps.python.org/ build\n```\n\n----------------------------------------\n\nTITLE: Running Generate Script for Concourse CI Docset - Bash\nDESCRIPTION: This snippet executes the generateAll.sh script, which is essential for generating the Concourse CI documentation set. It requires the Bash shell and several supporting tools including tar and Python.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/concourse-ci/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash generateAll.sh\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML for Module Documentation - Python\nDESCRIPTION: This snippet reads the 'modules.html' file, extracts headings and their associated paths, and inserts this data into the SQLite database while ignoring entries that do not have a corresponding description list.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/TorchMetrics/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ndocpath = 'torchmetrics.docset/Contents/Resources/Documents'\n\n# modules.html\nrel_docpath = 'references/modules.html'\npage = open(os.path.join(docpath, rel_docpath)).read()\nsoup = BeautifulSoup(page, features='html')\n\nfor h in soup.find_all('h3'):\n    if h.findNextSibling('dl') is None:\n        continue\n\n    name = h.find(text=True, recursive=False)\n    path = rel_docpath + h.find('a').attrs['href']\n\n    cur.execute('INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (?,?,?)', (name, 'Module', path))\n    print('name: %s, type: %s, path: %s' % (name, type, path))\n```\n\n----------------------------------------\n\nTITLE: Creating and Building Docset with Dashing\nDESCRIPTION: This sequence of shell commands describes how to create and build a docset using the Dashing tool. It first initializes the creation process and then requires editing the `dashing.json` configuration file before building the docset. The process assumes that Go is installed and configured.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Neo4j/README.rst#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndashing create\n> edit dashing.json (see below) \ndashing build\n```\n\n----------------------------------------\n\nTITLE: SQL Fix for Class Name Formatting\nDESCRIPTION: SQL query to remove the 'class ' prefix from class entries in the searchindex table, required to pass the Docset Contribution Checklist.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Poco/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nupdate searchindex name = replace(name, 'class ','');\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash Using pip\nDESCRIPTION: This snippet shows the command to install the doc2dash tool, which is required to convert the generated documentation into a docset format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/bpy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Cloning and Generating PlantUML Docset for Dash\nDESCRIPTION: A series of commands to clone the PlantUML docset repository, install dependencies, and generate the docset. Requires Node.js, npm, and sqlite3 as prerequisites.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PlantUML/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n./bin/generate\n```\n\n----------------------------------------\n\nTITLE: Cloning Pytorch Lightning Repository\nDESCRIPTION: Commands for cloning the Pytorch Lightning repository and checking out version 1.0.8\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PytorchLightning/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/PyTorchLightning/pytorch-lightning.git\ncd pytorch-lightning\ngit fetch --all --tags --prune\ngit checkout tags/1.0.8 -b 1.0.8\n```\n\n----------------------------------------\n\nTITLE: Generating DPDK Documentation with Doxygen\nDESCRIPTION: Command to run Doxygen using the API configuration file to generate the HTML documentation for DPDK. This creates the documentation from which the Dash docset will be built.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DPDK/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoxygen doc/api/doxy-api.conf\n```\n\n----------------------------------------\n\nTITLE: Dashing Configuration for Diesel Docset\nDESCRIPTION: This JSON configuration file is used by Dashing to generate the Diesel docset. It specifies the docset name, package, index file, selectors for different documentation types (functions, traits, macros), files to ignore, the icon, disabling Javascript, and external URL.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/diesel/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Diesel\",\n    \"package\": \"diesel\",\n    \"index\": \"index.html\",\n    \"selectors\": {\n        \".methods .fnname\": {\n           \"type\":\"Function\",\n           \"matchpath\":\"diesel/.*\\.html\"\n        },\n        \"h1 .trait\": {\n          \"type\":\"Trait\",\n           \"matchpath\":\"diesel/.*\\.html\"\n        },\n        \"h1 .macro\": {\n          \"type\":\"Macro\",\n           \"matchpath\":\"diesel/.*\\.html\"\n        }\n    },\n    \"ignore\": [\n        \"ABOUT\"\n    ],\n    \"icon32x32\": \"logo.png\",\n    \"allowJS\": false,\n    \"ExternalURL\": \"http://docs.diesel.rs/diesel/index.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning, Building, and Tagging PyMC Dash Docset\nDESCRIPTION: This snippet clones the paw-lu/pymc-dash-docset repository, navigates into the cloned directory, and then uses Nox to execute tasks tagged as 'build'. This builds the documentation for the PyMC library into a Dash docset using the configurations and tools defined within the repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pymc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ngh repo clone paw-lu/pymc-dash-docset\ncd pymc-dash-docset\nnox --tags build\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Index Page in Info.plist\nDESCRIPTION: This step is required to set the index page for the generated Dash docset.  It sets the `dashIndexFilePath` in the `Info.plist` file to `index.html`, ensuring that Dash correctly identifies the main page of the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyGraphviz/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n`dashIndexFilePath: index.html`\n```\n\n----------------------------------------\n\nTITLE: Cloning Dask GitHub Repository\nDESCRIPTION: This snippet provides the commands to clone the Dask GitHub repository, fetch all tags, and checkout a specific version (2.15.0). This is required to work with a stable release of Dask.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Dask/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/dask/dask.git\ngit fetch --all --tags\ngit checkout tags/2.15.0 -b 2.15.0\n```\n\n----------------------------------------\n\nTITLE: Cloning XGBoost Repository and Checking Out Specific Version\nDESCRIPTION: These commands clone the XGBoost repository, fetch all tags, and checkout a specific version (v1.2.0) for docset generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xgboost/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/dmlc/xgboost.git\ncd xgboost\ngit fetch --all --tags --prune\ngit checkout tags/v1.2.0 -b v1.2.0\n```\n\n----------------------------------------\n\nTITLE: Building QGIS Documentation with CMake and Make\nDESCRIPTION: Commands to create and navigate to a build directory, and then use CMake and Make to generate the API documentation. The configuration enables additional features like 3D and server support. Dependencies include CMake and Make, and the QGIS source code.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/QGIS/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build\ncd build\ncmake ../ -DWITH_APIDOC=TRUE -DWITH_3D=TRUE -DWITH_SERVER=TRUE\nmake apidoc\n```\n\n----------------------------------------\n\nTITLE: Building Altair Documentation\nDESCRIPTION: This code snippet demonstrates the commands to navigate to the doc directory, clean the build, generate HTML documentation, and navigate to the output directory. This sequence builds the Altair documentation from the source code.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/altair/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"cd doc/  # if not already in the doc directory\nmake clean-all\nmake html\ncd _build/html\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Mjolnir Documentation using Bash\nDESCRIPTION: This snippet provides a series of Bash commands to clone the Mjolnir documentation repository, install dependencies using Bundler, and build the documentation using Make. The commands must be executed in a terminal environment that has Git and Ruby with Bundler installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mjolnir/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/mjolnir-io/mjolnir-docs\n$ cd mjolnir-docs\n$ bundle install\n$ make\n```\n\n----------------------------------------\n\nTITLE: Building Docs with Nox\nDESCRIPTION: This command uses Nox to execute the build process defined in the `noxfile.py` (not shown). The `--tags build` option specifies that only sessions tagged with `build` should be run, effectively building the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/arviz/README.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nox --tags build\n```\n\n----------------------------------------\n\nTITLE: Creating Dash Docset with doc2dash\nDESCRIPTION: This snippet shows the command to convert the generated HTML documentation into a Dash docset using doc2dash. It sets the name of the docset and points to the index page.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyMongo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndoc2dash -fv --name PyMongo --index-page index.html mongo-python-driver/doc/_build/html\n```\n\n----------------------------------------\n\nTITLE: Generating Docset with Bash Scripts\nDESCRIPTION: This bash script clones the discord.py repository, builds HTML documentation with make, converts it to a docset using doc2dash, and executes a Python formatter script. Dependencies include git, make, doc2dash, and Python 3. The script does not cater to alternative environments or configurations.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/discord.py/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Rapptz/discord.py\ncd discord.py\ncd docs\nmake html #build html docs\ndoc2dash -n discord.py -d . _build/html #convert to docset\npython3 formatter.py #run formatter script to remove navbar and sidebar\n```\n\n----------------------------------------\n\nTITLE: Building the Documentation\nDESCRIPTION: Executes the npm build command to process the scraped content and compile the Yarn Docset for use. This step finalizes the creation of the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Yarn/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n3. `npm run build`\n```\n\n----------------------------------------\n\nTITLE: Cloning and Checking Out iPython Repository in Bash\nDESCRIPTION: Commands for cloning the iPython repository and checking out the 7.14.0 tag for documentation generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/iPython/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/ipython/ipython.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --all --tags\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout tags/7.14.0 -b 7.14.0\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd ipython\n```\n\n----------------------------------------\n\nTITLE: Defining Selectors for Docset Generation - JSON\nDESCRIPTION: This snippet defines the JSON selectors used for extracting key elements (Command and Package) from the Should.js documentation. The selectors are necessary for the Dashing tool to correctly parse and structure the information into a docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Should.js/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"selectors\": {\n        \"h3 code\": \"Command\",\n        \"h2 code\": \"Package\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning CVXPY Repository and Building HTML\nDESCRIPTION: This shell script clones the CVXPY GitHub repository and navigates to the documentation directory to build HTML files using Python 2. It requires Git to be installed and assumes a functional Python 2 environment with build dependencies.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/cvxpy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/cvxgrp/cvxpy.git\ncd cvxpy/doc\n\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Bokeh Documentation\nDESCRIPTION: This shell script clones the Bokeh GitHub repository, checks out a specific version (2.2.1), navigates to the `sphinx` directory, and builds the HTML documentation using `make all`. This generates the necessary files for creating a Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bokeh/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/bokeh/bokeh.git\ngit checkout tags/2.2.1 -b 2.2.1\ncd sphinx\nmake all\n```\n\n----------------------------------------\n\nTITLE: Cloning MongoDB Native Node.js Driver Documentation Repository\nDESCRIPTION: Git command to clone the documentation repository for the MongoDB Native Node.js Driver from GitHub\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Node_MongoDB/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/gistia/node-mongodb-native-docset.git\n```\n\n----------------------------------------\n\nTITLE: Generating Phaser Docset with Shell Scripts\nDESCRIPTION: These shell commands are used to generate the Phaser docset. The `setup.sh` script likely handles environment configuration and dependency installation, while `run.sh` performs the actual docset generation process.  Ensure that GHC and Cabal are installed before running these scripts.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Phaser/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\n./setup.sh\n./run.sh\n\n```\n\n----------------------------------------\n\nTITLE: Creating Compressed Docset Archive\nDESCRIPTION: Bash command to create a compressed tar archive of the ggplot2 docset while excluding macOS .DS_Store files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ggplot2/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf ggplot2.tgz ggplot2.docset\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation\nDESCRIPTION: This snippet changes the directory to where the documentation files are located and then triggers the build process for HTML documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Packaging Apache Beam Python Docset for Distribution\nDESCRIPTION: Commands to compress the generated docset into a tarball for distribution, excluding macOS system files, followed by cleanup of the original docset folder.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Beam_Python/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf Apache_Beam_Python.tgz \"Apache Beam Python.docset\"\nrm -rf Apache\\ Beam\\ Python.docset/\n```\n\n----------------------------------------\n\nTITLE: Running Automated Docset Generation Script\nDESCRIPTION: Alternative command to run the automated script that performs all the docset generation steps.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_RocketMQ/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/generate-docset.sh\n```\n\n----------------------------------------\n\nTITLE: Generating ScalaFX Scaladoc\nDESCRIPTION: These are the steps to generate the scaladoc for ScalaFX. First, navigate to the specified file and remove the `<code>` and `</code>` tags from comments. Then, type 'doc' in the SBT console to generate the scaladoc.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ScalaFX/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\t* Navigate to src/main/scala/scalafx/concurrent/ScheduledService.scala and remove all <code> and </code> from the comments block\n\t* type 'doc' in SBT console (to generate scaladoc)\n```\n\n----------------------------------------\n\nTITLE: Converting to Docset with doc2dash\nDESCRIPTION: This snippet shows the command to convert the generated HTML documentation into a docset format using doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/bpy/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash -n bpy doc/python_api/sphinx-out\n```\n\n----------------------------------------\n\nTITLE: Building ggplot2 Docset with Dashing\nDESCRIPTION: Command to build the ggplot2 docset from the staticdocs-generated HTML documentation using the dashing tool.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ggplot2/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndashing build ggplot2\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Docset - Node.js with Yarn\nDESCRIPTION: This snippet demonstrates how to install dependencies and build the RethinkDB JavaScript Driver Docset using Yarn. The command initializes the Yarn package manager and runs the build process to generate the docset in the build/ directory. Prerequisite: Node.js must be installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RethinkDBJS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn\nyarb run build\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for Statsmodels Documentation\nDESCRIPTION: Creates a new Conda environment named 'statsmodels-docs' using packages from the conda-forge channel.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/statsmodels/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n statsmodels-docs -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Scraping Documentation\nDESCRIPTION: Runs npm to scrape the Yarn documentation, collecting necessary data from the Yarn source. This step prepares the content for building the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Yarn/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n2. `npm run scrape`\n```\n\n----------------------------------------\n\nTITLE: Generating MXNet Docset with doc2dash\nDESCRIPTION: Use the `doc2dash` tool to generate the MXNet docset from the generated HTML documentation. The `-v` flag enables verbose output, and `-n MXNet` specifies the name of the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MXNet/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ndoc2dash -v -n MXNet _build/html/\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and ReadTheDocs Theme\nDESCRIPTION: The snippet provides the command to install Sphinx and the ReadTheDocs theme, which are necessary for generating the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/bpy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install sphinx sphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: Generating the Docset with Dashing\nDESCRIPTION: This command runs the `dashing` script defined in the project's `package.json` file, which leverages the Dashing framework to generate the docset from the scraped documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LifterLMS/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"npm run-script dashing\"\n```\n\n----------------------------------------\n\nTITLE: Executing Documentation Build Script\nDESCRIPTION: Initial shell command to make the documentation build script executable and run it, preparing the LightGBM documentation for generation\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LightGBM/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo chmod +x doc_build.sh\\n./doc_build.sh\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation\nDESCRIPTION: This command uses `make html` to generate Sphinx HTML documentation for the Dolfin library from the source files in the `python/doc` directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/dolfin/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Cloning PySam Repository and Checking Out Release - Bash\nDESCRIPTION: This snippet clones the PySam repository from GitHub and checks out the specific version that corresponds to the PyPI version installed in the virtual environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pysam/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 https://github.com/pysam-developers/pysam/\ncd pysam\ngit fetch --tags\ngit checkout v0.15.1\n```\n\n----------------------------------------\n\nTITLE: Patching Sphinx Configuration for Pika Docset\nDESCRIPTION: This patch modifies the Sphinx configuration file (conf.py) to change the HTML theme to 'basic' and disable the sidebar, which improves the output for Dash docset generation. It ensures that the documentation is displayed correctly within the Dash environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pika/README.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 0de2264..3623d0b 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -29,6 +29,7 @@ add_module_names = True\n show_authors = True\n pygments_style = 'sphinx'\n modindex_common_prefix = ['pika']\n-html_theme = 'default'\n+html_theme = 'basic'\n+html_theme_options = {'nosidebar': True}\n html_static_path = ['_static']\n htmlhelp_basename = 'pikadoc'\n```\n\n----------------------------------------\n\nTITLE: Cloning Numba Repository using Git\nDESCRIPTION: This command clones the Numba repository from GitHub to a specified local directory. It utilizes the git clone command to retrieve the source code, allowing users to build the documentation locally.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Numba/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:numba/numba.git /path/you/want/to/clone/to\n```\n\n----------------------------------------\n\nTITLE: Building SML Docset Using Make\nDESCRIPTION: This shell command executes the 'make' command within the SML docset builder directory, triggering the build process for the documentation set.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Standard_ML/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Executing Nox Build\nDESCRIPTION: This command executes the Nox build process with the `--tags build` option. Nox is used to automate the building of the documentation and ensures consistent builds across different environments.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/polars/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ nox --tags build\n```\n\n----------------------------------------\n\nTITLE: Building HTML documentation and generating Dash docset\nDESCRIPTION: Commands to build the final HTML documentation and use doc2dash to convert it into a Dash docset named 'formencode.docset'.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/formencode/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make html\n$ cd _build\n$ doc2dash --name formencode --verbose --destination . --index-page html/index.html html/\n```\n\n----------------------------------------\n\nTITLE: Generate Docset using doc2dash - Bash\nDESCRIPTION: This snippet uses 'doc2dash' to convert the generated HTML documentation into a docset format. It specifies the name, index file, and URL for the psycopg2 documentation in the command.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/psycopg2/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndoc2dash -n psycopg2 -j -I index.html -u 'http://initd.org/psycopg/docs/' doc/html\n```\n\n----------------------------------------\n\nTITLE: Cloning Falcon Repository using Git\nDESCRIPTION: This command clones the Falcon repository from GitHub to your local machine. This is the first step in generating the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Falcon/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone https://github.com/falconry/falcon.git\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the canjs.com Repository and Checkouting gh-pages Branch\nDESCRIPTION: This snippet demonstrates how to clone the CanJS repository and switch to the gh-pages branch to prepare for documentation generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bitovi/canjs.com.git\ncd canjs.com\ngit checkout gh-pages\n```\n\n----------------------------------------\n\nTITLE: Creating plotnine Docset Bash\nDESCRIPTION: This sequence of commands generates an HTML version of the plotnine documentation, converts it into a docset using doc2dash, and compresses the output into a tarball. It requires a properly configured `Makefile`, the doc2dash tool, and relevant source files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/plotnine/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake html\ndoc2dash -n plotnine -i plotnine-main/doc/_build/html/_static/logo-32.png -I plotnine-main/doc/_build/html/index.html plotnine-main/doc/_build/html\ntar cvzf plotnine.tgz plotnine.docset\n```\n\n----------------------------------------\n\nTITLE: Building the docset with doc2dash\nDESCRIPTION: This snippet provides the command to build a Dash docset from the Pythonista documentation using the doc2dash utility. It includes parameters for specifying the name, documentation location, and icon image for the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pythonista/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -fv --name Pythonista -d _build -i icon.png --index-page index.html pythonista-docs\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd _build && tar --exclude='.DS_Store' -cvzf Pythonista.tgz Pythonista.docset\n```\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -fv --name Pythonista -i icon.png --index-page index.html -A pythonista-docs\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Tox\nDESCRIPTION: This command uses Tox to build the Click documentation. Tox is a generic virtualenv management and test command line tool.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/click/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ntox -e docs\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Sphinx\nDESCRIPTION: Creates a new directory for HTML output and uses Sphinx to build the documentation from the source. This command assumes the current directory is the root of the Boto repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir boto/docs/html\n$ sphinx-build source boto/docs/html\n```\n\n----------------------------------------\n\nTITLE: Installing Development Requirements\nDESCRIPTION: Installs the necessary Python packages for development and documentation generation using pip. The `requirements-dev.txt` file lists the required packages.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install -r requirements-dev.txt\"\n```\n\n----------------------------------------\n\nTITLE: Downloading and Resizing Apache Beam Logo for Dash Docset\nDESCRIPTION: Commands to download the Apache Beam logo and resize it to create icons for the Dash docset. Creates 16x16 and 32x32 (retina) versions of the icon.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Beam_Python/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://beam.apache.org/images/logos/full-color/nameless/beam-logo-full-color-nameless-100.png\nconvert beam-logo-full-color-nameless-100.png -resize 16x16 icon.png\nconvert beam-logo-full-color-nameless-100.png -resize 32x32 icon@2x.png\nrm beam-logo-full-color-nameless-100.png\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Required Modules\nDESCRIPTION: This command installs python-graphviz to avoid Graphviz-related errors during docset generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xgboost/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda install -c conda-forge python-graphviz\n```\n\n----------------------------------------\n\nTITLE: Running the JavaDocset Generation Script - Shell\nDESCRIPTION: This snippet shows the command to run the JavaDocset generation for IBM Maximo JavaDocs. The script generates a docset from the specified path containing the JavaDocs. Ensure to replace '/path/to/maximo/javadocs/' with the actual path where the HTML documentation is stored.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/IBM_Maximo_Javadocs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./javadocset IBM_Maximo_JavaDocs /path/to/maximo/javadocs/\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Database for UVM Documentation\nDESCRIPTION: This function initializes the SQLite database by deleting any existing database file and creating a new search index table. It sets up the necessary schema for storing information about various UVM components.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/UVM/README.md#2025-04-16_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc initDB() (*sql.DB, error) {\n  os.Remove(\"uvm.docset/Contents/Resources/docSet.dsidx\")\n  db, err := sql.Open(\"sqlite3\", \"./UVM/UVM.docset/Contents/Resources/docSet.dsidx\")\n  if err != nil {\n    return db, err\n  }\n\n  createClear := `\n    CREATE TABLE if not exists searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);\n    DELETE FROM searchIndex;\n    CREATE UNIQUE INDEX if not exists anchor ON searchIndex (name, type, path);`\n\n  _, err = db.Exec(createClear)\n  if err != nil {\n    return db, err\n  }\n  return db, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Azure ARM Docset Generator Repository\nDESCRIPTION: Command to clone the Azure ARM docset generator repository from GitHub to local machine.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Azure_Resource_Manager_Template_Reference/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/miladbeigi/azure-arm-docset-gen.git\n```\n\n----------------------------------------\n\nTITLE: Dashing Configuration for Neo4j\nDESCRIPTION: This JSON file `dashing.json` is used to configure the Dashing tool for creating a Neo4j docset. Key configurations include specification of the docset name, package details, index file, and selectors for HTML formatting, along with any directories to ignore in the build process.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Neo4j/README.rst#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Neo4j\",\n    \"package\": \"neo4j\",\n    \"index\": \"index.html\",\n    \"selectors\": {\n        \"h1.title\": \"Guide\",\n        \"h2.title\": \"Section\"\n    },\n    \"ignore\": [\n        \"ABOUT\"\n    ],\n    \"icon32x32\": \"common/images/icon.png\",\n    \"allowJS\": true,\n    \"ExternalURL\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for XGBoost Documentation\nDESCRIPTION: This command creates a Conda environment named 'xgboost-docs' with Python 3.7 from the conda-forge channel.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xgboost/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n xgboost-docs -c conda-forge python=3.7\n```\n\n----------------------------------------\n\nTITLE: Adding Groups to the SQLite Database from HTML Files\nDESCRIPTION: The function reads HTML files to extract methods, macros, interfaces, types, variables, constants, and classes, and stores this information in the SQLite database. It uses the HTML tokenizer for parsing and logging the number of entries added.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/UVM/README.md#2025-04-16_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc addGroup(db *sql.DB, fileName, theType string) error {\n  count := 0\n  file, err := os.Open(fileName)\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  // Find all classes\n  tokenizer := html.NewTokenizer(file)\n\n  inAThing := false\n  proceed := true\n  for proceed {\n    tt := tokenizer.Next()\n    switch tt {\n    case html.ErrorToken:\n      if tokenizer.Err() == io.EOF {\n        proceed = false\n        break\n      }\n      log.Fatalf(\"ERROR: '%s'\\n\", tokenizer.Err())\n    case html.StartTagToken:\n      t := tokenizer.Token()\n      for _, a := range t.Attr {\n        if t.Data == \"td\" && a.Key == \"class\" && a.Val == \"IEntry\" {\n          inAThing = true\n        }\n        if a.Key == \"href\" {\n          if inAThing {\n            parts := strings.Split(a.Val, \"#\")\n            if len(parts) < 2 {\n              return fmt.Errorf(\"Parts was < 2: %s\\n\", strings.Join(parts, \",\"))\n            }\n            // fmt.Printf(\"%s method %s\\n\", strings.Join(parts[1:], \"#\"), a.Val)\n            _, err := db.Exec(fmt.Sprintf(\"INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES ('%s', '%s', '%s')\", strings.Join(parts[1:], \"#\"), theType, \"files/\"+a.Val))\n            if err != nil {\n              return err\n            }\n            count++\n          }\n        }\n      }\n    case html.EndTagToken:\n      t := tokenizer.Token()\n      if t.Data == \"td\" { // End of a cell, reset inAThing\n        inAThing = false\n      }\n    }\n  }\n\n  fmt.Printf(\"Entered %d %ss from %s\\n\", count, theType, fileName)\n  return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Mediawiki Docset Repository\nDESCRIPTION: This shell command clones the specified git repository, which contains the necessary scripts and configurations for generating the Mediawiki docset. The repository includes scripts to build Docker containers, generate documentation using doxygen, and create the final docset archive.  The cloned repository is named `mediawiki_docset`.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mediawiki/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell Script\nCODE:\n```\n```\ngit clone https://github.com/inductiveload/mediawiki_docset\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for iPython Documentation\nDESCRIPTION: Command to create a conda environment for compiling the iPython documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/iPython/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n ipython-docs -c conda-forge\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository for MacPorts Guide\nDESCRIPTION: This command clones the specified Git repository and checks out the `dash` branch, which is required for generating the Dash documentation. It downloads the source code necessary for creating the documentation set.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MacPorts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"git clone -b dash https://github.com/amake/macports-guide.git\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Vault Docset - Shell Script\nDESCRIPTION: This snippet provides a command-line sequence to clone the Vault documentation generator repository from GitHub and build specific versions of the Vault documentation sets. It requires Git and a Unix-like command-line environment. The placeholders and commands work together to download and execute the build process for the docsets.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Vault/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/bartoszj/vault-dash-doc-generator.git\ncd vault-dash-doc-generator\n./build.sh <version>\n```\n\n----------------------------------------\n\nTITLE: Building path.py Documentation with Version\nDESCRIPTION: Executes the build script to generate documentation for a specific version of path.py. The version number is optional and can be omitted to build current state documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/path.py/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbash build.sh 8.2.1\n```\n\n----------------------------------------\n\nTITLE: Installing Sphinx and dash2doc in Bash\nDESCRIPTION: Installs the necessary tools, Sphinx and dash2doc, using pip. These tools are required to build and convert documentation for use in Dash. This command must be run in a terminal where Python is installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install sphinx dash2doc\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation with Sphinx in Bash\nDESCRIPTION: This code snippet is a bash command used to generate HTML documentation from Fiona's project using Sphinx. Requires Sphinx to be installed on the system.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Fiona/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd docs && make html\n```\n\n----------------------------------------\n\nTITLE: Installing PyQtGraph from PyPI\nDESCRIPTION: This snippet shows how to install the latest released version of PyQtGraph from PyPI using pip. It's a simple command that fetches and installs the package along with its dependencies.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pyqtgraph/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install pyqtgraph\"\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash for Docset Creation\nDESCRIPTION: Installs the doc2dash tool using pip, which is necessary for creating the Dash-compatible docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/statsmodels/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Clone Docset Files\nDESCRIPTION: Clones the Git repository containing the files necessary for generating the Google Apps Script docset. This command downloads the repository from GitHub to your local machine.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GoogleAppsScript/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"~ git clone git@github.com:almai/gas-docset.git\"\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites with Brew\nDESCRIPTION: These commands use Homebrew to install the necessary tools for generating the GLM docset, including `make`, `doxygen`, `docsetutil`, and `gsed`. `make` is used to build the project, `doxygen` generates documentation from source code, `docsetutil` creates the Dash docset, and `gsed` is the GNU Stream EDitor for modifying files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/OpenGL_Mathematics/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nbrew install make\nbrew install doxygen\nbrew install swiftdocorg/formulae/docsetutil\nbrew install gsed\n```\n\n----------------------------------------\n\nTITLE: Generating HTML documentation using make\nDESCRIPTION: This command uses the make utility to generate the HTML documentation for Blender. It assumes that the makefile is configured to build the documentation using Sphinx or a similar documentation generator.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Blender/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n```shell\nmake\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning ECharts Documentation Repository (Shell)\nDESCRIPTION: This shell command clones the ECharts documentation repository from GitHub. It requires Git to be installed on the system. The repository contains the source files needed for the Docset generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/ecomfe/echarts-doc.git\n```\n\n----------------------------------------\n\nTITLE: Building AioMultiprocess Docset with Shell Script\nDESCRIPTION: This snippet outlines the shell command to execute a script (build.sh) that builds the documentation for the AioMultiprocess project. This command must be run in the virtual environment after installing the required packages.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/aiomultiprocess/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Build Google Apps Script Docset\nDESCRIPTION: Builds the Google Apps Script docset using the Dashing tool. This command executes the docset generation process based on the configuration in `dashing.json`. The install path might need to be updated based on your system.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GoogleAppsScript/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"~ ~/go/bin/dashing build googleAppsScript\"\n```\n\n----------------------------------------\n\nTITLE: Running Script to Update Jazzy Documentation\nDESCRIPTION: This script is used to generate documentation for RxSwift using Jazzy. It assumes that both the RxSwift repository is cloned and Jazzy is installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RxSwift/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh ./scripts/update-jazzy-docs.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning the QGIS Repository in Shell\nDESCRIPTION: This shell command clones the QGIS repository from GitHub. There are no additional dependencies other than Git itself. The command requires an internet connection to access GitHub.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/QGIS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/qgis/QGIS.git\n```\n\n----------------------------------------\n\nTITLE: Creating Compressed Docset Archive after Generation\nDESCRIPTION: This code snippet shows the command used to create a compressed tarball of the generated Constraid docset after running Jazzy. It ensures that unnecessary files are excluded from the archive.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Constraid/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf Constraid.tgz Constraid.docset\n```\n\n----------------------------------------\n\nTITLE: Converting Built HTML to Docset with doc2dash in Shell\nDESCRIPTION: This command converts the generated HTML documentation to a Dash-compatible docset using doc2dash, specifying a name for the docset. Avoids using abbreviations as advised in the guidelines.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndoc2dash --name renpy -f ./build/html\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash with pip or conda\nDESCRIPTION: This snippet shows how to install the doc2dash tool using either pip or conda. Doc2dash is necessary for converting documentation into a Dash-compatible docset format. Ensure either pip or conda is available on your system before running the commands.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Conda/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install doc2dash\n# or\nconda install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation Using Sphinx\nDESCRIPTION: The command to build HTML documentation from the Sphinx documentation source files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/bpy/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsphinx-build doc/python_api/sphinx-in doc/python_api/sphinx-out\n```\n\n----------------------------------------\n\nTITLE: Generating Automaton Docset with javadocset\nDESCRIPTION: Command to generate the Automaton docset using javadocset tool. It takes two parameters: the desired docset name and the path to the Javadoc-generated API folder.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Automaton/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./javadocset <any docset name you want> <path to Javadoc-generated API folder>\n```\n\n----------------------------------------\n\nTITLE: Configuring no sidebar in aiohttp documentation\nDESCRIPTION: This code snippet modifies the HTML theme options in the aiohttp documentation config file to suppress the sidebar and related decorations. These configurations are added to the `html_theme_options` dictionary in `docs/conf.py`.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/aiohttp/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n    \"nosidebar\": True,\n    \"show_powered_by\": True,\n    \"show_related\": False,\n    \"show_relbars\": False,\n    \"github_button\": False,\n    \"github_banner\": False,\n\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash using pip\nDESCRIPTION: This command uses pip, the Python package installer, to install doc2dash. doc2dash is a tool used for converting documentation into a format suitable for use with Dash, an API documentation browser.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Blender/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n```shell\npip install doc2dash\n```\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash\nDESCRIPTION: This command installs the `doc2dash` tool using pip. The `--user` flag installs the package only for the current user, avoiding potential permission issues. `doc2dash` is a dependency for generating the Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Chassis/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install --user doc2dash\"\n```\n\n----------------------------------------\n\nTITLE: Converting Documentation to Dash Format\nDESCRIPTION: Command to convert the built documentation to Dash format using doc2dash. Includes setting name, icon, documentation URL and index file location.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/nengo/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -A -n nengo -i icon.png -u https://www.nengo.ai/nengo/ -I docs/_build/index.html -j docs/_build\n```\n\n----------------------------------------\n\nTITLE: Cloning Mori Docset Repository\nDESCRIPTION: Command to clone the Mori docset repository with its submodules using Git\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/mori/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recursive https://github.com/martinbalfanz/mori-docset.git\n```\n\n----------------------------------------\n\nTITLE: Building and Cleaning Docsets with Make\nDESCRIPTION: These shell commands execute Makefile targets to clean and build Dash docsets for version 0.12. The first command prepares the environment by cleaning up previous builds, and the second command performs the build with optional local installation using the DOC2DASH_OPTS environment variable. This requires the make utility and a valid Makefile configured for the docset project.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/llm/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake clean; make VERSION=0.12\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake clean; make DOC2DASH_OPTS=-A VERSION=0.12\n```\n\n----------------------------------------\n\nTITLE: Cloning Chassis Repository\nDESCRIPTION: This command clones the Chassis repository, including submodules, to a specified folder.  It uses the `--recursive` flag to ensure that submodules are also initialized and updated during the cloning process. The cloned repository is required for generating the Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Chassis/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone --recursive https://github.com/Chassis/Chassis.git <your-folder>\"\n```\n\n----------------------------------------\n\nTITLE: Patching Search Functionality in Jakarta EE 10 Docset\nDESCRIPTION: JavaScript code modification to fix broken search links caused by JDK-8215291 bug in the Javadoc search functionality.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Jakarta_EE_10/README.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n                if (item.m && ui.item.p == item.l) {\n```\n\n----------------------------------------\n\nTITLE: Archiving Pillow Docset for Dash (Shell)\nDESCRIPTION: This shell command archives the Pillow docset into a compressed tarball, excluding `.DS_Store` files. This command prepares the docset for distribution and use with Dash. The resulting `Pillow.tgz` file can be imported into Dash for offline access to the Pillow documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pillow/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n        tar --exclude='.DS_Store' -cvzf Pillow.tgz Pillow.docset\n```\n\n----------------------------------------\n\nTITLE: Installing Dashing\nDESCRIPTION: This command installs the Dashing framework using Homebrew, a package manager for macOS. Dashing is used to generate the docset from the scraped documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LifterLMS/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"brew install dashing\"\n```\n\n----------------------------------------\n\nTITLE: Executing Logstash Docset Generation Script\nDESCRIPTION: This command executes the `generate.sh` script. It assumes that the necessary dependencies (gnu-sed, git, sqlite3) are installed and configured correctly.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/logstash/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"./generate.sh\"\n```\n\n----------------------------------------\n\nTITLE: Building Structlog Docset with Tox in Python\nDESCRIPTION: This command uses Tox to build the Structlog documentation and convert it into a docset format. It requires Python 3.10 and Tox to be installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/structlog/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ntox -e docset\n```\n\n----------------------------------------\n\nTITLE: Generating GeoTools Docset using javadocset\nDESCRIPTION: This snippet demonstrates how to use the javadocset tool to convert GeoTools API documentation into a Dash docset. It requires the javadocset tool to be installed and assumes that the GeoTools API documentation is already downloaded and unzipped.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GeoTools/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ javadocset GeoTools apidocs\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements for Docset Generation - Bash\nDESCRIPTION: This snippet installs the necessary Python packages for creating the documentation set for psycopg2. It uses 'pip' to install 'virtualenv' and 'doc2dash' which are required prerequisites to run further commands.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/psycopg2/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install virtualenv doc2dash\n```\n\n----------------------------------------\n\nTITLE: Building Docset in Chinese\nDESCRIPTION: Use the Dashing tool to build the ECharts Docset in Chinese. The command specifies the input JSON configuration and the source directory for the Chinese documentation files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts_Chinese/README.md#2025-04-16_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n./dashing build echarts -f dashing-cn.json -s ./cn\n```\n\n----------------------------------------\n\nTITLE: Compressing Docset into .tgz Format\nDESCRIPTION: The snippet shows the command to compress the generated docset into a .tgz file while excluding certain files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/bpy/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf bpy.tgz bpy.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Running Make\nDESCRIPTION: This snippet provides commands for cloning the Salesforce Visualforce documentation repository and building the documentation using a makefile. It outlines the necessary steps for initial setup.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Salesforce_Visualforce/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/ViViDboarder/docset-sfdc\nmake\n```\n\n----------------------------------------\n\nTITLE: Executing Document Build and Packaging\nDESCRIPTION: These bash commands guide how to execute the document building process for Faker and subsequently package the output into a 'Faker.docset' tarball. This is crucial for creating a documentation set suitable for Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Faker.py/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd faker-master/docs && make file\nrm -rf faker-master/docs/html/_sources\ndoc2dash -v -n Faker -I _build/html/index.html _build/html\ntar cvzf Faker.tgz Faker.docset\n```\n\n----------------------------------------\n\nTITLE: Running Generate Script for Dash Docset\nDESCRIPTION: This snippet runs a shell script to convert the cloned repository into a Dash docset. It is assumed that homebrew is installed as a prerequisite.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Geb/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./generate.sh\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting up Fixup Script for Screeps\nDESCRIPTION: This process clones a fixup script and prepares the Screeps documentation by installing necessary Python packages, copying static documentation, and executing a link-fixing script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Screeps/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/malt3/screeps-dash-generator\ncd screeps-dash-generator\npython3 -m pip install --user beautifulsoup4\n# copy static docs here before modifying them\ncp -r ../screeps-docs/public .\n# fixup links and do some cosmetic changes\npython3 fixup-links.py --path public/\n# Copy dashing configuration into the webroot\ncp dashing.json public/\n```\n\n----------------------------------------\n\nTITLE: Generating the ki Docset\nDESCRIPTION: This shell script command executes the autogenerated script genDocset.sh within the cloned repository. It requires a Unix-like shell environment, the presence of sqlite3 command line utility, and Jekyll to successfully generate the ki.docset file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ki/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsh genDocset.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Tarball Archive of the Drupal Console Docset\nDESCRIPTION: Command to archive the Drupal Console docset into a compressed tarball, excluding macOS .DS_Store files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DrupalConsole/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf DrupalConsole.tgz DrupalConsole.docset\n```\n\n----------------------------------------\n\nTITLE: SPIR-V Docset Generation Script\nDESCRIPTION: This shell script automates the process of downloading the SPIR-V specification and associated images from the Khronos website.  It also mentions cloning a customized version of dashing for parsing SPIR-V specs.  The script is meant to be executed in a terminal environment to prepare the necessary files for docset generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/SPIRV/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Download spec from Khronos website\nwget https://www.khronos.org/registry/spir-v/specs/1.1/SPIRV.html\nmkdir images\nwget https://www.khronos.org/registry/spir-v/specs/1.1/images/SPIR_Nov14.svg\nwget https://www.khronos.org/registry/spir-v/specs/1.1/images/Khronos_Dec14.svg\n\n# Use dashing to generate\ngit clone -b vulkan git@github.com:antiagainst/dashing.git\n# The above has modifications for parsing SPIR-V spec.\n# Build it and use the dashing.json at examples/spirv/dashing.json\n# for building the docset.\n/path/to/dashing build\n```\n\n----------------------------------------\n\nTITLE: Converting Documentation to Dash Docset\nDESCRIPTION: Uses html2dash script to convert CQL documentation into a Dash-compatible docset with a specific name and key\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CQL/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./html2dash.py --name CQL --key cql cql\n```\n\n----------------------------------------\n\nTITLE: Generating Docset Archives for CanJS Versions\nDESCRIPTION: This section details the steps to generate documentation archives for each legacy version of CanJS. The steps include moving directories, symlinking, and compressing the resulting docset. It requires the grunt build tool and the Clean or Compress tools.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/about-this-repo.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <major.minor.version>\n```\n\nLANGUAGE: bash\nCODE:\n```\nmv can can.submodule\n```\n\nLANGUAGE: bash\nCODE:\n```\nln -s <path-to-canjs-repo> can\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrunt docjs\n```\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS-Store' -cvzf CanJS.tgz CanJS.docset\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Unnecessary Files in the Docset\nDESCRIPTION: This snippet contains commands to remove unwanted Jupyter notebook files from the generated docset to reduce its size.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyMC3/README.md#2025-04-16_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n(venv)% cd PyMC3.docset\n\n(venv)% fd --extension=ipynb | parallel trash\n\n(venv)% fd --extension=ipynb.txt | parallel trash\n\n(venv)% fd 'pymc-examples*' PyMC3.docset/Contents/Resources/Documents/_images | parallel trash\n```\n\n----------------------------------------\n\nTITLE: Generating XGBoost Dash Docset\nDESCRIPTION: This command uses doc2dash to generate the XGBoost Dash docset with specific parameters for name, destination, icon, and other options.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xgboost/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd _build/html\ndoc2dash -n \"XGBoost 1.2.0\" -d \"/Users/angelo/Library/ApplicationSupport/doc2dash/DocSets/xgboost/1-2-0\" -i \"/Users/angelo/Pictures/Icons/dash/xgboost/icon@2x.png\" -v -j -u \"https://xgboost.readthedocs.io/en/stable/\" -I \"index.html\" ./ -a -f\n```\n\n----------------------------------------\n\nTITLE: Building the Docset with Dashing\nDESCRIPTION: Command to build the Poco docset using dashing with a configuration file in the current directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Poco/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndashing build\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Commons Lang Docset using javadocset\nDESCRIPTION: This command uses the javadocset tool to generate the Apache Commons Lang docset from the downloaded javadoc. It specifies the output name as 'Apache_Commons_Lang' and uses the 'apidocs' directory as input.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Commons_Lang/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./javadocset Apache_Commons_Lang apidocs\n```\n\n----------------------------------------\n\nTITLE: Building Docset in English\nDESCRIPTION: Use the Dashing tool to build the ECharts Docset in English. The command specifies the input JSON configuration and the source directory for the English documentation files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts_Chinese/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n./dashing build echarts -f dashing-en.json -s ./en\n```\n\n----------------------------------------\n\nTITLE: Archiving the Boto3 Docset\nDESCRIPTION: This snippet shows the command to create a tar.gz archive of the Boto3 docset, excluding any unnecessary files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/Library/Application\\ Support/doc2dash/DocSets\ntar --exclude='.DS_Store' -cvzf /tmp/boto3.tgz boto3.docset\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Packages\nDESCRIPTION: This command installs the necessary NPM packages required for building the CanJS documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the ki Docset Repository\nDESCRIPTION: This command is used to clone the ki-docset Git repository along with its submodules. It requires Git to be installed and configured on the system. The repository contains all necessary files and configurations for generating the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ki/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone --recursive https://github.com/martinbalfanz/ki-docset.git\n```\n\n----------------------------------------\n\nTITLE: Generating Cascading docset with javadocset\nDESCRIPTION: This command uses the javadocset tool to generate a Dash docset for Cascading.  It specifies the docset name and the location of the Javadoc API folder.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Cascading/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"javadocset cascading ./javadoc\"\n```\n\n----------------------------------------\n\nTITLE: Main Execution for UVM Documentation Generation\nDESCRIPTION: The main function initializes the database and iterates over multiple HTML files, calling addGroup to extract and store documentation components in the SQLite database. It handles errors and prints a completion message upon success.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/UVM/README.md#2025-04-16_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\n  db, err := initDB()\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer db.Close()\n\n  //\n  // Add *ALL* the Methods\n  //\n  funcFiles := []string{\n    \"UVM/UVM.docset/Contents/Resources/Documents/index/Methods.html\",\n    \"UVM/UVM.docset/Contents/Resources/Documents/index/Methods2.html\",\n    \"UVM/UVM.docset/Contents/Resources/Documents/index/Methods3.html\",\n    \"UVM/UVM.docset/Contents/Resources/Documents/index/Methods4.html\",\n    \"UVM/UVM.docset/Contents/Resources/Documents/index/Methods5.html\",\n    \"UVM/UVM.docset/Contents/Resources/Documents/index/Methods6.html\",\n    \"UVM/UVM.docset/Contents/Resources/Documents/index/Methods7.html\",\n  }\n  for _, f := range funcFiles {\n    err = addGroup(db, f, \"Method\")\n    if err != nil {\n      log.Fatal(err)\n    }\n  }\n\n  err = addGroup(db, \"UVM/UVM.docset/Contents/Resources/Documents/index/Macros.html\", \"Macro\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  err = addGroup(db, \"UVM/UVM.docset/Contents/Resources/Documents/index/Ports.html\", \"Interface\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  err = addGroup(db, \"UVM/UVM.docset/Contents/Resources/Documents/index/Types.html\", \"Type\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  err = addGroup(db, \"UVM/UVM.docset/Contents/Resources/Documents/index/Variables.html\", \"Variable\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  err = addGroup(db, \"UVM/UVM.docset/Contents/Resources/Documents/index/Constants.html\", \"Constant\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  err = addGroup(db, \"UVM/UVM.docset/Contents/Resources/Documents/index/Classes.html\", \"Class\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  fmt.Println(\"Done.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Sphinx to Dash Docset Conversion\nDESCRIPTION: This Python script converts Sphinx HTML documentation into a Dash docset. It requires the HTML files fetched from the Sphinx documentation website as input. The script parses the HTML and generates the necessary entries for the Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Sphinx/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nPlease refer to the script at: [https://github.com/iamaziz/Sphinx-dash/blob/master/Sphinx-to-dash.py] for the Python code.\n```\n\n----------------------------------------\n\nTITLE: Setting the Index Page for Docset\nDESCRIPTION: This command is used to set the index page of the docset to 'index.html' in the Info.plist. This step is crucial for ensuring the docset's main page is correctly displayed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mrjob/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndashIndexFilePath: index.html\n```\n\n----------------------------------------\n\nTITLE: Archiving Docset Using Tar in Bash\nDESCRIPTION: Archives the generated docset into a tarball, excluding unwanted files like `.DS_Store`. This is a necessary step before contributing the docset to Dash User Contributions.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ~/Library/Application Support/doc2dash/DocSets\n$ tar --exclude='.DS_Store' -cvzf boto.tgz boto.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning and Syncing Git Repository using Shell Commands\nDESCRIPTION: This sequence of git commands clones the Dash-User-Contributions repository, synchronizes it with the upstream source, then creates a new branch for adding changes specific to the RenPy Engine docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/YourName/Dash-User-Contributions\ncd Dash-User-Contributions\ngit pull\ngit checkout -b \"renpy-engine-x.x.x\"\n```\n\n----------------------------------------\n\nTITLE: Generating JSON for Modern C++ Docset using Make\nDESCRIPTION: Command to generate the docset from HTML documentation by running make in the doc/docset directory after checking out the project.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/JSON_for_Modern_C++/README.md#2025-04-16_snippet_0\n\nLANGUAGE: make\nCODE:\n```\nmake -C doc/docset\n```\n\n----------------------------------------\n\nTITLE: Cloning PyMC3 Repository and Setting Up Environment\nDESCRIPTION: This snippet provides a series of shell commands to clone the PyMC3 GitHub repository, set up a Python virtual environment, and install dependencies needed for documentation generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyMC3/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n% gh repo clone pymc-devs/pymc3 -- --recurse-submodules\n\n% cd pymc3\n\n% python -m venv .venv\n\n% source .venv/bin/activate\n\n(venv)% python -m pip install .\n\n(venv)% python -m pip install -r requirements-dev.txt\n\n(venv)% latesttag=$(git describe --tags `git rev-list --tags --max-count=1`)\n\n(venv)% git checkout ${latesttag}\n\n(venv)% git submodule update --remote\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash using pip in Command Prompt\nDESCRIPTION: This command installs the doc2dash tool, which is required for generating the SymPy Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/SymPy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\npip install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Installing BeautifulSoup with Pip\nDESCRIPTION: The snippet demonstrates how to install BeautifulSoup, a Python library for parsing HTML, using pip. This is a prerequisite for running the Python script that generates the GNU Guile docset index.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GNU_Guile/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ pip install beautifulsoup4\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Hive Docset using Gulp and npm\nDESCRIPTION: This code snippet shows the commands to install dependencies and generate the Apache Hive docset using a custom Gulp task. It requires Node.js and assumes the user has cloned the repository containing the generation script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Hive/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\ngulp -p hive\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash\nDESCRIPTION: Installs the `doc2dash` tool using pip. This tool is essential for converting HTML documentation into a Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install doc2dash\"\n```\n\n----------------------------------------\n\nTITLE: Building HTML Documentation with Make in Shell\nDESCRIPTION: This simple shell command uses Make to build HTML documentation from source files. The output is used for creating the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Adding Dash-specific Metadata to Property List (XML)\nDESCRIPTION: This XML snippet shows the additional metadata to be added to the plist file in the Dash docset. It includes settings for fallback URL, docset keyword, and web search keyword.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/transformers/README.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>DashDocSetFallbackURL</key>\n<string>https://huggingface.co/transformers/</string>\n<key>DashDocSetKeyword</key>\n<string>transformers</string>\n<key>DashDocSetPluginKeyword</key>\n<string>transformers</string>\n<key>DashWebSearchKeyword</key>\n<string>transformers</string>\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash for Docset Generation\nDESCRIPTION: Instructions for installing doc2dash tool which is required to build the docset. It can be installed either via pip or conda package manager.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/imbalanced-learn/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install doc2dash\n# or\nconda install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Building Werkzeug Dash Docset\nDESCRIPTION: This shell script command builds the Sphinx documentation for Werkzeug with a specified option to remove the sidebar and then converts it into a Dash docset using doc2dash. It requires doc2dash and the Werkzeug documentation to be present.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Werkzeug/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake -C werkzeug/docs SPHINXOPTS=\"-D html_theme_options.nosidebar=1\" html \n\ndoc2dash -fv --name Werkzeug --index-page index.html werkzeug/docs/_build/html\n```\n\n----------------------------------------\n\nTITLE: Renaming Docset File using Move Command in Shell\nDESCRIPTION: This command renames the docset file within Windows command line or shell, aligning it to the specified naming conventions for further usage.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmv renpy.docset RenPy_Engine.docset\n```\n\n----------------------------------------\n\nTITLE: Patching Sphinx Configuration for Virtualenv Documentation (Python/Diff)\nDESCRIPTION: This patch modifies the Sphinx configuration file (conf.py) to use a basic HTML theme without a sidebar, which is more suitable for generating a docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/virtualenv/README.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 9332aa1..43f1e3d 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -87,14 +87,10 @@ extlinks = {\n # given in html_static_path.\n #html_style = 'default.css'\n \n-html_theme = 'default'\n-if not on_rtd:\n-    try:\n-        import sphinx_rtd_theme\n-        html_theme = 'sphinx_rtd_theme'\n-        html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n-    except ImportError:\n-        pass\n+html_theme = 'basic'\n+html_theme_options = {\n+    'nosidebar': True\n+}\n```\n\n----------------------------------------\n\nTITLE: Updating Info.plist for Dash Docset in XML\nDESCRIPTION: The XML snippet removes the CFBundleVersion key and adds a key to indicate that the docset is compatible with Dash. This modification is required for the Dash app to recognize the generated docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/QGIS/README.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<key>isDashDocset</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Patching Maven POM File with Javadoc Plugin Configuration\nDESCRIPTION: The code snippet is a git patch for the pom.xml file of the Balana project. It introduces a configuration for the 'maven-javadoc-plugin', which helps generate Javadocs without doclint errors. This plugin configuration specifies an additional parameter to suppress doclint checks. The input is a pom.xml file and the expected output is a modified pom.xml with new configurations. It requires git and Maven to be installed as dependencies.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/balana-core/README.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/pom.xml b/pom.xml\nindex 5e18607..7968e9c 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -132,6 +132,14 @@\n                         </instructions>\n                     </configuration>\n                 </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-javadoc-plugin</artifactId>\n+                <version>3.0.0-M1</version>\n+                <configuration>\n+                    <additionalparam>-Xdoclint:none</additionalparam>\n+                </configuration>\n+            </plugin>\n                 <plugin>\n                     <groupId>org.codehaus.mojo</groupId>\n                     <artifactId>buildnumber-maven-plugin</artifactId>\n```\n\n----------------------------------------\n\nTITLE: Running Build Script - Bash\nDESCRIPTION: This snippet describes how to execute the build script to generate the Enzyme docset. It assumes the user has cloned the repository and navigated into it, after which the script can be run with a simple command.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Enzyme/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"./generator/build.sh\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment and Installing Sphinx in Shell\nDESCRIPTION: This shell snippet establishes a Python virtual environment and installs Sphinx along with its themes, which are necessary for building HTML outputs from documentation files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd renpy/sphinx\npython39 -m venv venv\nvenv\\Scripts\\activate.bat\npip install sphinx==5.0.0 sphinx_rtd_theme sphinx_rtd_dark_mode future\n```\n\n----------------------------------------\n\nTITLE: Installing Requirements with Pip for AioMultiprocess Docset\nDESCRIPTION: This snippet provides the command for installing the necessary Python packages using pip from a requirements.txt file. It is a prerequisite for building the docset and ensures that all required libraries are available in the virtual environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/aiomultiprocess/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Docset Icon\nDESCRIPTION: Converting MLflow favicon to icon for Dash docset\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nconvert source/_static/favicon.ico mlflow.png\n```\n\n----------------------------------------\n\nTITLE: Setting Docset Index File\nDESCRIPTION: Configuration entry for Info.plist to specify the index page for the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pydoop/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndashIndexFilePath: index.html\n```\n\n----------------------------------------\n\nTITLE: Modifying Makefile for Airflow Documentation Build\nDESCRIPTION: A Makefile configuration for building the Airflow documentation using Sphinx. It defines targets for building and opening the generated documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Airflow/README.md#2025-04-16_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\n.PHONY: all default\n\ndefault: all\n\nall: build open\n\nbuild:\n\tsphinx-build . _build\n\nopen:\n\topen _build/index.html\n```\n\n----------------------------------------\n\nTITLE: Packaging Docset\nDESCRIPTION: Creating a compressed archive of the generated MLflow docset\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf MLflow.tgz MLflow.docset\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash Bash\nDESCRIPTION: These commands install the doc2dash tool using either pip or conda, which is required to create a docset from documentation files. Pip or conda must be installed prior to running these commands.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/plotnine/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install doc2dash\n```\n\nLANGUAGE: bash\nCODE:\n```\nconda install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Boto3 Build\nDESCRIPTION: This snippet sets the required environment variables for building the Boto3 documentation set. The BOTO3_SRC variable points to the source directory, and additional variables are needed for S3 bucket uploads.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BOTO3_SRC=/path/to/boto3\nexport BOTO3_BUCKET=your-bucket-name\nexport BOTO3_CF=your-cloudfront-distribution\n```\n\n----------------------------------------\n\nTITLE: Creating the Docset with doc2dash\nDESCRIPTION: This snippet demonstrates how to use the doc2dash tool to create a docset from the generated HTML documentation, including specifying the icon and online redirect URL.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyMC3/README.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n(venv)% doc2dash --icon logos/PyMC3.png --enable-js --online-redirect-url='https://docs.pymc.io/' --name='PyMC3' --index-page source/_build/html/index.html source/_build/html\n```\n\n----------------------------------------\n\nTITLE: Building MXNet Library\nDESCRIPTION: Follow the instructions provided in the MXNet documentation to build the MXNet library. This is a prerequisite for generating the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MXNet/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nfollow [instructions](http://mxnet.readthedocs.io/en/latest/how_to/build.html#build-mxnet-library)\n```\n\n----------------------------------------\n\nTITLE: Configure Sphinx Theme Options for Peewee\nDESCRIPTION: This snippet configures the Sphinx theme options in the `conf.py` file to remove the sidebar, which is beneficial for Dash docset presentation. It sets the `nosidebar` option to `true` within the `html_theme_options` dictionary.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Peewee/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhtml_theme_options = {\n    'nosidebar': 'true',\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Ghidra Docset Icon Files\nDESCRIPTION: Shell command to copy icon files into the generated Ghidra docset bundle\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Ghidra/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp icon.png icon@2x.png Ghidra.docset/\n```\n\n----------------------------------------\n\nTITLE: Cloning FormEncode repository and preparing documentation\nDESCRIPTION: Series of commands to clone the FormEncode repository, navigate to the docs directory, build the initial HTML documentation, and install the required Sphinx theme.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/formencode/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:formencode/formencode.git .\n$ cd docs\n$ make html\n$ pip install sphinxjp.themes.basicstrap\n```\n\n----------------------------------------\n\nTITLE: Running the Documentation Generation Script - Python\nDESCRIPTION: This snippet details the command to run the Python script 'generate.py' that generates documentation for PyGame. It is assumed that the script is appropriately located in the project directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyGame/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\npython generate.py\n```\n\n----------------------------------------\n\nTITLE: Generating Intel Intrinsics Docset Command\nDESCRIPTION: Command to run the Perl script that generates the IntelIntrinsics docset from XML data file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Intel_Intrinsics/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nintel-intrinsics-to-html.pl data-3.x.x.xml\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for PySam Docset - Bash\nDESCRIPTION: This snippet creates a directory for the PySam docset and navigates into it. It is the first step in setting up the project environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pysam/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/Workspace/zeal/pysam\ncd ~/Workspace/zeal/pysam\n```\n\n----------------------------------------\n\nTITLE: Building ECharts Docset in Chinese (Shell)\nDESCRIPTION: This command builds the ECharts Docset in Chinese using the dashing build script. Similar to the English build, it requires the setup of the dashing script and the presence of the Chinese configuration file (dashing-cn.json).\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./dashing build echarts -f dashing-cn.json -s ./cn\n```\n\n----------------------------------------\n\nTITLE: Converting SVG to PNG using svg2png in Shell\nDESCRIPTION: This snippet converts SVG files to PNG format, generating multiple sizes which are presumably used as icons within the docset. It requires svg2png executable from the indicated converter.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsvg2png -w 16 Input.svg\nsvg2png -w 32 Input.svg\n```\n\n----------------------------------------\n\nTITLE: Copying Nitrogen docset icon to docsets directory\nDESCRIPTION: This command copies the generated Nitrogen Dash docset icon file to the Dash-User-Contributions docsets directory for inclusion in Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Nitrogen/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"cp nitrogen_core/doc/dash/icon.png Dash-User-Contributions/docsets/Nitrogen\"\n```\n\n----------------------------------------\n\nTITLE: Applying HTML Theme Patch to pytest Documentation Configuration\nDESCRIPTION: This code snippet demonstrates a patch to change the HTML theme for pytest documentation from 'flask' to 'basic'. It also sets specific options for the new theme. The context is to be used in the configuration file 'conf.py' located in the 'doc/en' directory of the pytest project.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pytest/README.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/doc/en/conf.py b/doc/en/conf.py\nindex 2f3a2baf4..09d54749e 100644\n--- a/doc/en/conf.py\n+++ b/doc/en/conf.py\n@@ -140,12 +140,12 @@ html_theme_path = [\"_themes\"]\n\n # The theme to use for HTML and HTML Help pages.  See the documentation for\n # a list of builtin themes.\n-html_theme = \"flask\"\n+html_theme = \"basic\"\n\n # Theme options are theme-specific and customize the look and feel of a theme\n # further.  For a list of options available for each theme, see the\n # documentation.\n-# html_theme_options = {\"index_logo\": None}\n+html_theme_options = {\"nosidebar\": True}\n\n # Add any paths that contain custom themes here, relative to this directory.\n # html_theme_path = []\n```\n\n----------------------------------------\n\nTITLE: Creating and Compressing Kotlin Docset\nDESCRIPTION: This Bash snippet demonstrates how to create and compress a Kotlin docset. Dependencies include a pre-generated `kotlin.docset` directory and a UNIX-like environment with Bash and tar installed. The snippet creates a gzipped tarball named `kotlin.tgz` from the `kotlin.docset` directory, excluding `.DS_Store` files. Ensure that the directory `kotlin.docset` is prepared as needed before running the command. The output is a tarball file `kotlin.tgz`.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Kotlin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf kotlin.tgz kotlin.docset\n```\n\n----------------------------------------\n\nTITLE: Creating scikit-image Dash Docset with doc2dash\nDESCRIPTION: This script uses doc2dash to create a Dash docset from the scikit-image documentation build. It sets the name, icon, index page, and input directory for doc2dash before creating the docset. A compressed archive of the docset is then created using tar.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Scikit-image/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"cd doc\ndoc2dash -v -n scikit-image -i build/html/_static/logo.png -I scikit-image-0.22.0/doc/build/html/index.html build/html\ntar cvzf scikit-image.tgz scikit-image.docset\"\n```\n\n----------------------------------------\n\nTITLE: Extracting CQL Documentation\nDESCRIPTION: Unzips the downloaded CQL documentation file into a 'cql' directory for further processing\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CQL/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nunzip cql33.zip -d cql\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML for Function Documentation - Python\nDESCRIPTION: This snippet processes the 'functional.html' file similarly to the modules snippet, extracting function names and paths, then inserting them into the SQLite database with appropriate handling.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/TorchMetrics/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# functional.html\nrel_docpath = 'references/functional.html'\npage = open(os.path.join(docpath, rel_docpath)).read()\nsoup = BeautifulSoup(page, features='html')\n\nfor h in soup.find_all('h3'):\n    if h.findNextSibling('dl') is None:\n        continue\n\n    name = h.find(text=True, recursive=False)\n    path = rel_docpath + h.find('a').attrs['href']\n\n    cur.execute('INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES (?,?,?)', (name, 'func', path))\n    print('name: %s, type: %s, path: %s' % (name, type, path))\n```\n\n----------------------------------------\n\nTITLE: Generating PyGraphviz Docset using doc2dash\nDESCRIPTION: This command uses the `doc2dash` tool to generate a Dash docset from the PyGraphviz HTML documentation. The `-v` flag enables verbose output, and `-n PyGraphviz` sets the name of the docset to \"PyGraphviz\". The input directory is assumed to be `pygraphviz-documentation/`.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyGraphviz/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n`doc2dash -v -n PyGraphviz pygraphviz-documentation/`\n```\n\n----------------------------------------\n\nTITLE: Generating Android Gradle Plugin Dash Docset using Ruby\nDESCRIPTION: This Ruby script clones the android-gradle-plugin-dash-docset repository, downloads the latest Android Gradle Plugin documentation, and generates a Dash docset. It requires Ruby and the sqlite3 gem, and has been tested on macOS.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Android_Gradle_Plugin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n./android-gradle-plugin-dash-docset.rb\n```\n\n----------------------------------------\n\nTITLE: Running Scripts to Generate Odin Docset\nDESCRIPTION: This snippet details the execution of shell and Python scripts required to download package documentation and generate the Odin docset. It assumes the scripts are executed from the repository location.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Odin/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash download_pkgs_docs.sh\npython3 generate_odin_docset.py\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment and Installing Dependencies - Bash\nDESCRIPTION: This snippet creates a Python virtual environment and installs the required packages for building the docset, specifically PySam and doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pysam/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\npip install pysam doc2dash\n```\n\n----------------------------------------\n\nTITLE: Update Instructions in Markdown\nDESCRIPTION: Step-by-step instructions for updating the JAX docset in the Dash documentation system\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/jax/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n1. Use [dash-docset-jax](https://github.com/ppwwyyxx/dash-docset-jax)\n   to generate the latest docset, or obtain the latest from its `releases` page.\n2. Update `docset.json`.\n3. Add the new tgz file to this directory as well as `versions/{VERSION}/`\n   that match what's added in `docset.json`.\n```\n\n----------------------------------------\n\nTITLE: Configuring Dash Index File Path in Info.plist (XML)\nDESCRIPTION: This XML snippet shows how to configure the `Info.plist` file of a Dash docset to specify the index file path and fallback URL for the Pillow documentation.  It ensures Dash can properly navigate and link to the documentation pages.  This configuration is essential for Dash to correctly display the Pillow documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pillow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n        <key>dashIndexFilePath</key>\n        <string>index.html</string>\n        <key>DashDocSetFallbackURL</key>\n        <string>https://pillow.readthedocs.org</string>\n```\n\n----------------------------------------\n\nTITLE: Defining TensorFlow Probability Docset in Markdown\nDESCRIPTION: This Markdown snippet provides a title and description for the TensorFlow Probability docset. It includes information about the docset creator and explains the purpose and capabilities of TensorFlow Probability as a library for probabilistic reasoning and statistical analysis.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/TensorFlow_Probability/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nTensorFlow Probability Docset\n=============================\n\nBuilt by [Fucen Zeng](https://github.com/zfc09)\n\n## Docset Description\nTensorFlow Probability is a library for probabilistic reasoning and statistical analysis. It is a Python library built on TensorFlow that makes it easy to combine probabilistic models and deep learning on modern hardware (TPU, GPU). It's for data scientists, statisticians, ML researchers, and practitioners who want to encode domain knowledge to understand data and make predictions.\n```\n\n----------------------------------------\n\nTITLE: Optimizing Icons\nDESCRIPTION: Optimizes the generated icons using `optipng` to reduce their file size. This improves the performance of the Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"optipng -o 9 icon.png icon@2x.png\"\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash for Documentation Building\nDESCRIPTION: This code snippet provides commands to install the doc2dash tool, which is necessary for converting documentation into Dash's docset format. Users can choose between using pip or conda for installation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CausalPy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install doc2dash\n# or\nconda install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version from PyPI\nDESCRIPTION: This snippet shows how to install the latest development version of PyQtGraph from GitHub using pip and git.  This provides access to the newest features and bug fixes but may be less stable.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pyqtgraph/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install git+https://github.com/pyqtgraph/pyqtgraph@master\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dash Docset for Marshmallow\nDESCRIPTION: Command to convert Marshmallow documentation to Dash docset format with custom icon and index page.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/marshmallow/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -A --name marshmallow -i docs/_static/marshmallow-logo.png -I index.html -u https://marshmallow.readthedocs.io/ docs/_build\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Database for dfply Documentation\nDESCRIPTION: This section refers to executing SQL commands from a gist to create an SQLite database file for Dash documentation. It emphasizes that the SQL was manually written based on a specific version of the dfply documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/dfply/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- SQL commands should be found in the provided gist for creating docSet.dsidx\n-- Refer to: https://gist.github.com/tonyduan/8a41d115c5822fef8d3a84c8ece8011c\n```\n\n----------------------------------------\n\nTITLE: Version Reference in Markdown\nDESCRIPTION: Shows the version number of the python-telegram-bot documentation\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Python_Telegram_Bot/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n12.0.0b1\n```\n\n----------------------------------------\n\nTITLE: Adding Pyramid Documentation to Dash\nDESCRIPTION: Command to add built Pyramid documentation to Dash application using doc2dash. Includes options for forcing overwrite and adding an icon.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pyramid/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/doc2dash -A -n Pyramid -d /path/to/cloned/repo/Dash-User-Contributions/docsets/Pyramid -f -i /path/to/cloned/repo/Dash-User-Contributions/docsets/Pyramid/icon.png /path/to/cloned/pyramid/repo/docs/_build/html\n```\n\n----------------------------------------\n\nTITLE: Running the Apache Avro Docset Generation Script in Bash\nDESCRIPTION: A simple command to run a pre-made script that performs all the required steps for generating the Apache Avro docset. This is an alternative to manually entering the series of commands shown in the previous snippet.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Avro/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscripts/generate-docset.sh\n```\n\n----------------------------------------\n\nTITLE: Building Invoke Dash Docset with Console Commands\nDESCRIPTION: This snippet shows the console commands needed to clone the invoke-dash-docset repository and build the Invoke Dash docset. It requires Git, GitHub CLI, and Nox to be installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/invoke/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ gh repo clone paw-lu/invoke-dash-docset\n\n$ cd invoke-dash-docset\n\n$ nox --tags build\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Sphinx - Bash\nDESCRIPTION: This snippet navigates to the documentation directory and builds the HTML documentation using Sphinx with specific options to alter the default theme.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pysam/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd doc\nmake SPHINXOPTS=\"-D html_theme_options.nosidebar=true\" html\ncd ../..\n```\n\n----------------------------------------\n\nTITLE: Describing Xdebug Docset in Markdown\nDESCRIPTION: A brief Markdown description of the Xdebug docset project, mentioning its contents and the tool used for assembly.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xdebug/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# xdebug-docset\n\nDocset for Xdebug. Includes settings and functions. Also there is an icon. Assembled using [dashing](https://github.com/technosophos/dashing).\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Settings\nDESCRIPTION: Required Doxyfile configuration to enable docset generation\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Haiku_Book/README.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nGENERATE_DOCSET   = YES\n```\n\n----------------------------------------\n\nTITLE: Fetching Pydoop Documentation with HTTrack\nDESCRIPTION: Command to download the Pydoop documentation website using HTTrack web crawler with specific parameters for mrjob documentation inclusion.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pydoop/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhttrack \"http://pydoop.sourceforge.net/docs/\" -O \"handjob\" \"+*pythonhosted.org/mrjob/*\" -v\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Azure ARM Docset Generator\nDESCRIPTION: Make command to install required Python packages and download HTML documentation files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Azure_Resource_Manager_Template_Reference/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Docset Page Fixing Script\nDESCRIPTION: This Perl script, `fix-pages.pl`, is used to fix the generated pages within the Pandoc docset after initial generation and cleanup. It likely performs post-processing tasks such as adjusting links or correcting formatting.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pandoc/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Perl\nCODE:\n```\n\"fix-pages.pl\"\n```\n\n----------------------------------------\n\nTITLE: Complete SymPy Dash docset generation and packaging in Command Prompt\nDESCRIPTION: This command combines the docset generation and packaging steps into a single line, using version 1.12 as an example. It generates the docset using doc2dash, changes to the output directory, and creates the compressed archive.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/SymPy/README.md#2025-04-16_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\ndoc2dash -n SymPy -d SymPy.docset.1.12 --enable-js -i \"sympy-docs-html-1.12/_static/sympylogo.png\" -uhttp://docs.sympy.org/latest/index.html -v sympy-docs-html-1.12 && cd sympy-docs-html-1.12 && tar cvzf SymPy.tgz SymPy.docset\n```\n\n----------------------------------------\n\nTITLE: Updating to the Latest CanJS Version\nDESCRIPTION: Instructions for updating the Dash-User-Contributions with the latest version of CanJS after generating the necessary documentation and compressing it. It requires knowledge of version control and the proper structure of configuration files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/about-this-repo.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout <latest-tagged-version>\n```\n\nLANGUAGE: bash\nCODE:\n```\ngrunt docjs\n```\n\nLANGUAGE: bash\nCODE:\n```\nmv Sample_Docset.tgz CanJS.tgz\n```\n\n----------------------------------------\n\nTITLE: Generating Docset Index with doxytag2zealdb\nDESCRIPTION: Command line instruction for generating the docset index using doxytag2zealdb tool. Specifies tag file, database location, and includes parent scopes and function signatures.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/openFrameworks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoxytag2zealdb --tag ./openFrameworks.tag --db ./build/html/openFrameworks.docset/Contents/Resources/docSet.dsidx --include-parent-scopes --include-function-signatures\n```\n\n----------------------------------------\n\nTITLE: Generating Docset Database with doxytag2zealdb\nDESCRIPTION: These shell commands change directories and utilize doxytag2zealdb to generate an SQLite index database for the QGIS documentation. The tool requires the .tag file generated by Doxygen and has an optional dependency on Python's pip for installation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/QGIS/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd doc/api/html && make\ncd ../../../\ndoxytag2zealdb --tag doc/qgis.tag --db doc/api/html/QGIS_3.docset/Contents/Resources/docSet.dsidx  --include-parent-scopes --include-function-signatures\n```\n\n----------------------------------------\n\nTITLE: Generating XCTest Documentation via appledoc\nDESCRIPTION: This snippet provides the path used to generate the XCTest documentation using appledoc. It ensures that the documentation reflects the contents of the XCTest framework available in Xcode 7 Beta 2.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/XCTest/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Frameworks/XCTest.framework\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Settings for FLTK Docset\nDESCRIPTION: Modifies Doxygen configuration file to customize docset generation with specific FLTK settings, disabling index and tree view\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/FLTK/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nDOCSET_FEEDNAME        = \"FLTK Programming Manual\"\nDOCSET_BUNDLE_ID       = org.fltk.FLTK\nDOCSET_PUBLISHER_ID = org.fltk.FLTK\nDOCSET_PUBLISHER_NAME = FLTK\nDISABLE_INDEX = YES\nGENERATE_TREEVIEW      = NO\n```\n\n----------------------------------------\n\nTITLE: Changing directory to wemake-python-styleguide\nDESCRIPTION: This command changes the current directory to the wemake-python-styleguide directory.  This is necessary to execute subsequent commands within the project's root directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPS/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"cd wemake-python-styleguide\"\n```\n\n----------------------------------------\n\nTITLE: Verifying MLflow Version in Source Code\nDESCRIPTION: Checking and updating version information in key configuration files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nVERSION = 'X.Y.Z'\n```\n\n----------------------------------------\n\nTITLE: Version History in Markdown\nDESCRIPTION: Lists the version history of JAX docsets with generation dates and contributors\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/jax/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Version 0.1.67 generated on 05-09-20 (@nirum).\n- Version 0.3.21 generated on 10-10-22 (@ppwwyyxx).\n- Version 0.4.20 generated on 11-01-23 (@ppwwyyxx).\n```\n\n----------------------------------------\n\nTITLE: Markdown Links for Async.js Documentation\nDESCRIPTION: Markdown formatted links to the Async.js repository and docset generation script repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Async.js/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Async.js](https://github.com/caolan/async)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[Igor Kalashnikov](https://github.com/silentroach)\n```\n\n----------------------------------------\n\nTITLE: Packaging the Docset\nDESCRIPTION: This command creates a compressed archive (LifterLMS.tgz) of the generated docset (LifterLMS.docset), excluding the .DS_Store file.  This archive is suitable for contribution as a User-Contributed Docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LifterLMS/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"tar --exclude='.DS_Store' -cvzf LifterLMS.tgz LifterLMS.docset\"\n```\n\n----------------------------------------\n\nTITLE: Building NLTK Docset with doc2dash\nDESCRIPTION: This bash script uses doc2dash to create an NLTK docset for Dash. It requires downloading and unzipping the NLTK documentation from GitHub. The script specifies the docset name, icon, and index file, and generates a compressed file named 'NLTK.tgz'.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/NLTK/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -v -n NLTK -i nltk.github.com-master/_static/img/favicon-16x16.png -I nltk.github.com-master/index.html nltk.github.com-master\ntar cvzf NLTK.tgz NLTK.docset\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Header for JUCE Docset\nDESCRIPTION: Basic markdown header and links for the JUCE C++ framework Dash docset documentation, including a link to the framework website and docset generation script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/JUCE/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# JUCE Dash Docset\n\nDocset for the [JUCE](http://juce.com) C++ framework.\n\n[Docset generation script](https://github.com/modosc/juce-docset)\n```\n\n----------------------------------------\n\nTITLE: Updating Java Project Version\nDESCRIPTION: Locating and updating version in Maven project XML files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<version>X.Y.Z</version>\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Build Script\nDESCRIPTION: Execute the build script to generate documentation for the MongoDB Native Node.js Driver\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Node_MongoDB/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run build\n```\n\n----------------------------------------\n\nTITLE: Scraping LifterLMS Documentation\nDESCRIPTION: This command executes the `index.js` script using Node.js. The `index.js` script is responsible for scraping the LifterLMS developer documentation from https://developer.lifterlms.com.  This process gathers the necessary content to build the Dash docset. Be aware that this process takes a significant amount of time to complete.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LifterLMS/README.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n\"node index.js\"\n```\n\n----------------------------------------\n\nTITLE: Compressing Numba Docset with Tar\nDESCRIPTION: This command compresses the Numba docset into a gzipped tar archive, excluding .DS_Store files. It uses the tar command with the --exclude option to prevent unnecessary files from being included in the archive, and the -cvzf options to create a compressed archive.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Numba/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf Numba.tgz Numba.docset\n```\n\n----------------------------------------\n\nTITLE: Compressing Geb Docset using Tar\nDESCRIPTION: This command compresses the generated docset into a tarball format, excluding any .DS_Store files. The resulting file will be a compressed archive named Geb.tgz.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Geb/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tar --exclude='.DS_Store' -cvzf Geb.tgz build/manual/2.1/Geb.docset\n```\n\n----------------------------------------\n\nTITLE: Fixing Case-Sensitive Filename Conflicts\nDESCRIPTION: Commands to handle filename conflicts on case-insensitive systems using file renaming and SQL update\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Astropy/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmv Astropy.docset/Contents/Resources/Documents/api/astropy.units.function.logarithmic.{m_bol,m_bol_renamed}.html\n```\n\n----------------------------------------\n\nTITLE: Linking to Amazon Redshift Documentation in Markdown\nDESCRIPTION: This snippet demonstrates how to create markdown links for the Amazon Redshift Database Developer Guide and its maintenance repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/AWS_Redshift_Database_Developer_Guide/Readme.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Amazon Redshift Database Developer Guide]: https://docs.aws.amazon.com/redshift/latest/dg/welcome.html\n[tzing/dashify-aws-docs]: https://github.com/tzing/dashify-aws-docs\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment for Documentation\nDESCRIPTION: Command to create a Conda environment with required dependencies for building documentation\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/papermill/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n papermill-docs -c conda-forge --file docs/requirements-doc.txt python=3.7\n```\n\n----------------------------------------\n\nTITLE: Install dependencies and generate docsets for Powershell (<=6)\nDESCRIPTION: This snippet installs required Python packages and executes the `posh-to-dash.py` script to generate docsets for Powershell versions 6 and below. The script uses Selenium, Requests, and Beautiful Soup 4. It also includes commands to copy icons and create the final docset archive.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Powershell/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"pip install selenium requests bs4\\n\\npython posh-to-dash.py --verbose --temporary --output=Powershell/versions/6/Powershell.tgz --version=6\npython posh-to-dash.py --verbose --temporary --output=Powershell/versions/5.1/Powershell.tgz --version=5.1\npython posh-to-dash.py --verbose --temporary --output=Powershell/versions/5.0/Powershell.tgz --version=5.0\npython posh-to-dash.py --verbose --temporary --output=Powershell/versions/4.0/Powershell.tgz --version=4.0\npython posh-to-dash.py --verbose --temporary --output=Powershell/versions/3.0/Powershell.tgz --version=3.0\n\ncp static/icon.PNG Powershell/icon.png\ncp static/icon@2x.PNG Powershell/icon@2x.png\ncp Powershell/versions/6/Powershell.tgz Powershell/Powershell.tgz\n\"\n```\n\n----------------------------------------\n\nTITLE: Packaging the Docset\nDESCRIPTION: Packages the generated docset into a compressed tar archive.  Excludes `.DS_Store` files, which are macOS metadata files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"tar --exclude='.DS_Store' -cvzf bonobo.tgz bonobo.docset\"\n```\n\n----------------------------------------\n\nTITLE: Dashing Configuration for MiniZinc Docset\nDESCRIPTION: This JSON configuration file is used by Dashing to generate the MiniZinc docset. It defines the docset's name, package, index file, selectors for different types of documentation elements, ignore patterns, icon path, and external URL. The selectors use regular expressions to identify and categorize elements based on their HTML structure and content.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MiniZinc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"name\":\"MiniZinc\",\"package\":\"MiniZinc\",\"index\":\"index.html\",\"selectors\":{\"title\":{\"type\":\"Guide\",\"regexp\":\"\\\\s*— The MiniZinc Handbook 2.4.3\",\"replacement\":\"\"},\"h1\":{\"type\":\"Section\",\"regexp\":\"\\\\s*¶\",\"replacement\":\"\"},\"h2\":{\"type\":\"Section\",\"regexp\":\"\\\\s*¶\",\"replacement\":\"\"},\"h3\":{\"type\":\"Section\",\"regexp\":\"\\\\s*¶\",\"replacement\":\"\"},\"h4\":{\"type\":\"Section\",\"regexp\":\"\\\\s*¶\",\"replacement\":\"\"},\"h5\":{\"type\":\"Section\",\"regexp\":\"\\\\s*¶\",\"replacement\":\"\"},\"h6\":{\"type\":\"Section\",\"regexp\":\"\\\\s*¶\",\"replacement\":\"\"},\"dt code.descname\":\"Option\",\"div.highlight pre\":[{\"requiretext\":\"^annotation\",\"type\":\"Annotation\",\"regexp\":\"^annotation'?([^()':\\\\s]+)'?(\\\\((?:.|\\\\n|\\\\r)+)?\",\"replacement\":\"$1\",\"matchpath\":\"lib.*\\\\.html\"},{\"requiretext\":\"^(?:predicate|test)\",\"type\":\"Procedure\",\"regexp\":\"^(?:predicate|test)'?([^()':\\\\s]+)'?\\\\((?:.|\\\\n|\\\\r)+\",\"replacement\":\"$1\",\"matchpath\":\"lib.*\\\\.html\"},{\"requiretext\":\"^function\",\"type\":\"Function\",\"regexp\":\"^function[^()':]*:'?([^()':\\\\s]+)'?\\\\((?:.|\\\\n|\\\\r)+\",\"replacement\":\"$1\",\"matchpath\":\"lib.*\\\\.html\"},{\"requiretext\":\"^opt\",\"type\":\"Global\",\"regexp\":\"^opt[^()':]*:'?([^()':\\\\s]+)'?\",\"replacement\":\"$1\",\"matchpath\":\"lib.*\\\\.html\"}]},\"ignore\":[\"Index — The MiniZinc Handbook 2.4.3\",\"Index\",\"Symbols\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"Parameters\",\"Functions and Predicates\"],\"icon32x32\":\"../icon32x32.png\",\"allowJS\":true,\"ExternalURL\":\"https://www.minizinc.org/doc-2.4.3/en\"}\n```\n\n----------------------------------------\n\nTITLE: Generating mlpy Dash Docset\nDESCRIPTION: Command to convert the downloaded HTML documentation into a Dash docset format using doc2dash tool. Creates a docset named 'mlpy'.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/mlpy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -v -n mlpy mlpy.sourceforge.net/docs/3.5/\n```\n\n----------------------------------------\n\nTITLE: Generating Hy Documentation Docset\nDESCRIPTION: Executes the docset generation script by specifying the path to virtualenv. The script creates a virtual environment, installs required Python packages, downloads documentation pages, and generates the final docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Hy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ VENVBIN=/path/to/virtualenv ./run.sh\n```\n\n----------------------------------------\n\nTITLE: Downloading and Building Astropy Documentation\nDESCRIPTION: Commands for cloning Astropy repository and building HTML documentation using tox\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Astropy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd $SRCDIR; git clone https://github.com/astropy/astropy.git\ngit switch stable\ncd $SRCDIR/astropy; tox -e build_docs\n```\n\n----------------------------------------\n\nTITLE: Navigating to Directory\nDESCRIPTION: This command changes the current working directory to `polars-dash-docset`. It is necessary to move into the cloned repository directory to execute subsequent build commands.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/polars/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd polars-dash-docset\n```\n\n----------------------------------------\n\nTITLE: Commit Metadata for Phaser Archive\nDESCRIPTION: Tracking commit details including date and SHA1 hash for archive processing\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Phaser/Phaser.tgz.txt#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDate: 2017-04-02 20:21:14 +0000\nSHA1: 5a7b5330750ea686f759f9c8f0ec981d906a4017\n```\n\n----------------------------------------\n\nTITLE: Archiving Docset with Tar\nDESCRIPTION: This command archives the generated docset into a `.tgz` file. The `--exclude` option removes `.DS_Store` files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/click/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf click.tgz click.docset\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation\nDESCRIPTION: Generates the HTML documentation for the Bonobo project using the `make html` command within the `docs` directory. This relies on the Sphinx documentation generator.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"cd docs\nmake html\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Old Docset Archive\nDESCRIPTION: This snippet demonstrates how to replace the previous Boto3 tar.gz file with the newly created archive and update the repository accordingly.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd /path-to-repo/Dash-User-Contributions/docsets/Boto3\nmv /tmp/boto3.tgz .\n[[ -e boto3.tgz.txt ]] && git rm boto3.tgz.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dash User Contributions\nDESCRIPTION: This code snippet outlines steps for setting up the Dash-User-Contributions directory structure and updating configuration files. It is necessary to follow the defined steps carefully to ensure proper setup and referencing of archives and versions.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/about-this-repo.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* Copy `Sample_Docsets` into the `docsets` directory\n```\n\nLANGUAGE: markdown\nCODE:\n```\n* Rename `Sample_Docsets` to `CanJS`\n```\n\nLANGUAGE: markdown\nCODE:\n```\n* Update README.md and `docset.json` accordingly.\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Build Command for Pyro\nDESCRIPTION: This command builds the HTML version of the Pyro documentation and then converts it into a Dash docset format. It requires the Pyro project to be cloned locally and the necessary dependencies to be installed. The command outputs a compressed tarball of the Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pyro/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nmake html\ndoc2dash -n Pyro -i source/_static/img/pyro_logo.png -f -I index.html -v build/html && tar cvzf Pyro.tgz Pyro.docset\n```\n\n----------------------------------------\n\nTITLE: Compiling Statsmodels Documentation\nDESCRIPTION: Navigates to the docs directory and compiles the HTML documentation using make.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/statsmodels/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd docs/\nmake html\n```\n\n----------------------------------------\n\nTITLE: Docset Generation using Shell Script\nDESCRIPTION: This shell script generates a Dash docset for the GNU Emacs Common Lisp Emulation manual. It requires Python 3 and wget to be installed. The script creates a virtual environment, installs required Python packages, downloads web pages, and creates the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Emacs-CL/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"$ VENVBIN=/path/to/virtualenv ./run.sh\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Vulkan Specifications and Building Docset\nDESCRIPTION: This script downloads Vulkan specifications using wget and builds a docset using a customized version of Dashing. The Dashing tool needs modifications for parsing the Vulkan spec, which are available in the mentioned clone. Dependencies include wget, git, and the dashing tool in your GOPATH. The script downloads HTML pages for Vulkan chapters and an index, then constructs a .tgz archive of the docset excluding certain files. The key prerequisite is ensuring the Dashing executable is in your GOPATH/bin directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Vulkan/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Download the Vulkan spec\nwget https://registry.khronos.org/vulkan/specs/1.3-extensions/html/chap{1..59}.html https://registry.khronos.org/vulkan/specs/1.3-extensions/html/index.html\n\n# Use dashing to generate\ngit clone -b vulkan https://github.com/antiagainst/dashing.git\n# The above has modifications for parsing Vulkan spec.\n# Build it and use the dashing.json at examples/vulkan/dashing.json\n# for building the docset.\n$GOPATH/bin/dashing build\ntar --exclude='Makefile' --exclude='.DS_Store' -cvzf Vulkan.tgz vulkan.docset\n```\n\n----------------------------------------\n\nTITLE: Creating a Tar Archive of QGIS Docset\nDESCRIPTION: A shell command to archive the generated QGIS docset into a gzipped tar file, excluding unwanted files like '.DS_Store'. The resultant tar file can be distributed for usage with documentation browsers.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/QGIS/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd doc/api/html && tar cvzf QGIS.tgz --exclude='.DS_Store' QGIS_3.docset\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Set into Dash\nDESCRIPTION: This snippet provides the commands to remove any existing Boto3 docset and import new documentation compiled into the Dash application.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[[ -e ~/Library/Application\\ Support/doc2dash/DocSets/boto3.docset ]] && rm -r ~/Library/Application\\ Support/doc2dash/DocSets/boto3.docset\ndoc2dash -A build/html --name boto3\n```\n\n----------------------------------------\n\nTITLE: Archiving Dokuwiki Docset\nDESCRIPTION: Processes and archives a dokuwiki documentation set, preparing it for CDN distribution and removal from git repository\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DokuWiki/versions/3.0-frusterick-manners/dokuwiki-docset.tgz.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nArchive \"dokuwiki-docset.tgz\" was processed at this location, pushed to the CDN and completely removed from git.\n```\n\n----------------------------------------\n\nTITLE: Info.plist Fallback URL Configuration\nDESCRIPTION: XML snippet to add a fallback URL to the docset's Info.plist file, pointing to the online Hypothesis documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Hypothesis/README.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n   <key>DashDocSetFallbackURL</key>\n   <string>https://hypothesis.readthedocs.io/en/latest/</string>\n```\n\n----------------------------------------\n\nTITLE: Generating FileMaker Docset Using PHP\nDESCRIPTION: Illustrates running the PHP script required to generate the FileMaker docset. Ensure all prerequisites like dependencies and necessary files are in place before execution.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/FileMaker/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nphp generate\n```\n\n----------------------------------------\n\nTITLE: Generating Drush Docset with Shell Commands\nDESCRIPTION: This snippet outlines the shell commands needed to generate a Drush documentation set. It requires Git and Composer to be installed. The process involves cloning the repository, installing dependencies using Composer, and running PHP scripts for generating and building the documentation. Inputs include the repository URL and intended output directories.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Drush/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nclone repo\ncomposer install\nphp console.php generate\nphp console.php build\n```\n\n----------------------------------------\n\nTITLE: Cloning and Generating Docset using Bash\nDESCRIPTION: This Bash script is used to clone the repository containing the Matrix Docset and generate the documentation using a provided script. Dependencies include Bash, Hugo, and SQLite, which need to be installed beforehand. The script clones the repository and runs the `generate.sh` script to build the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Matrix/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@gitlab.com:jaller94/dash-matrix-spec.git\ncd dash-matrix-spec\nbash generate.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Online Redirection in Info.plist\nDESCRIPTION: Configure the `Info.plist` file to enable online redirection to the MXNet documentation website. This ensures that users can access the online documentation if the local docset is incomplete or outdated.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MXNet/README.md#2025-04-16_snippet_3\n\nLANGUAGE: plist\nCODE:\n```\nDashDocSetFallbackURL: http://mxnet.readthedocs.io/en/latest/\n```\n\n----------------------------------------\n\nTITLE: Building Docset\nDESCRIPTION: This command executes a build script, typically used to automate the configuration and generation of the docset. It requires the necessary build tools to be in place and outputs the built docset ready for use or deployment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/confluent-kafka-python/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Editing Info.plist for Fallback URL\nDESCRIPTION: This snippet shows the XML key-value pairs to be included in the Info.plist file to set the fallback URL for the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/bpy/README.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>dashIndexFilePath</key>\n<string>index.html</string>\n<key>DashDocSetFallbackURL</key>\n<string>https://docs.blender.org/api/current/index.html</string>\n```\n\n----------------------------------------\n\nTITLE: Cloning Papermill Repository and Checkout Version\nDESCRIPTION: Commands for cloning the Papermill repository and checking out version 2.1.1\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/papermill/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nteract/papermill.git\ngit fetch --all --tags\ngit checkout tags/2.1.1 -b 2.1.1\n```\n\n----------------------------------------\n\nTITLE: Creating Conda Environment\nDESCRIPTION: Commands to create and activate a Conda environment with Python 3.7 and NodeJS\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PytorchLightning/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n pytorch-lightning-docs python=3.7 nodejs\nconda activate pytorch-lightning-docs\n```\n\n----------------------------------------\n\nTITLE: Generating Esper Docset using javadocset\nDESCRIPTION: This command-line instruction shows how to use the `javadocset` tool to convert a Javadoc-generated API folder into a docset. The command takes two arguments: the desired name for the docset and the path to the directory containing the Javadoc-generated API documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Esper/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\n./javadocset <any docset name you want> <path to Javadoc-generated API folder>\n\n```\n\n----------------------------------------\n\nTITLE: Navigating to Python Documentation Directory\nDESCRIPTION: This command navigates to the `python/doc` directory of the Dolfin project, where the documentation is located before it is generated.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/dolfin/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd python/doc\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Stylesheet in Sphinx Configuration (Python)\nDESCRIPTION: This code snippet shows how to add a custom CSS stylesheet to hide the sidebar in the Sphinx configuration file. It's part of the process to customize the documentation for better readability in Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/transformers/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\napp.add_stylesheet('css/hidesidebar.css')\n```\n\n----------------------------------------\n\nTITLE: Fetching mlpy Documentation with HTTrack\nDESCRIPTION: Command to download the mlpy documentation website using HTTrack. Downloads version 3.5 documentation from mlpy.sourceforge.net.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/mlpy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttrack \"http://mlpy.sourceforge.net/docs/3.5/\" -O \"mlpy\" \"+*mlpy.sourceforge.net/docs/3.5/*\" -v\n```\n\n----------------------------------------\n\nTITLE: Converting Notebooks to HTML with Python\nDESCRIPTION: This Python script automates the downloading and conversion of Jupyter notebooks hosted on external addresses into HTML format. It recursively searches for HTML files, modifies external notebook links, and utilizes Jupyter's nbconvert tool for the conversion. It requires Python 3, the 'requests', 'bs4' (BeautifulSoup4), and 'tqdm' libraries.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/cvxpy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom glob import glob\nimport re\nimport urllib.request\nfrom requests import get\nimport bs4 as soup\nfrom tqdm import tqdm\n\nhtml_dir = '.../cvxpy/doc/build/html'\nnbv_addresses = []\nnames = []\nfor filename in glob(os.path.join(html_dir, '**/*.html'), recursive=True):\n    with open(filename, 'r') as content_file:\n        content = content_file.read()\n    nbv_inds = [m.start() for m in re.finditer('http://nbviewer.ipython.org', content)]\n    content_out = content\n    if nbv_inds:\n        for nbv_ind in tqdm(nbv_inds, desc='downloading and converting notebooks from ' + filename):\n            nbv_address = content[nbv_ind:content.find('\"', nbv_ind)]\n            \n            dest = os.path.split(filename)[0]\n            name = nbv_address[nbv_address.rfind('/') + 1:]\n            nb_fname = name.replace('.ipynb','.html')\n            \n            # download notebook\n            dl_address = nbv_address.replace('nbviewer.ipython.org/github', 'raw.githubusercontent.com')\n            dl_address = dl_address.replace('blob/','')\n            response = get(dl_address)\n                \n            # write ipnb file\n            nb_fullpath = os.path.join(dest, name)\n            with open(nb_fullpath, \"wb\") as file:\n                file.write(response.content)\n            \n            #convert notebook\n            os.system('jupyter nbconvert --to html -y --output-dir ' + dest + ' ' + nb_fullpath)\n            os.remove(nb_fullpath)\n            \n            content_out = content_out.replace(nbv_address, nb_fname)\n        \n        # write file with new paths\n        with open(filename, 'w') as content_file:\n            content_file.write(content_out)\n\n```\n\n----------------------------------------\n\nTITLE: Generating the ki Docset\nDESCRIPTION: This shell command runs the script genDocset.sh directly, assuming it has executable permissions. It is an alternative to using the 'sh' command to produce the ki.docset, leveraging Unix-like shell capabilities.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ki/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./genDocset.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Dash Docset with Doc2dash\nDESCRIPTION: Imports the HTML documentation into Dash using the `doc2dash` tool. This command specifies the output directory and name for the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ doc2dash -A boto/docs/html --name boto\n```\n\n----------------------------------------\n\nTITLE: Generating the Docset with Bash\nDESCRIPTION: This snippet outlines the functionality of the 'generate.bash' script which automates the download of HTML documentation and the creation of a docset. It is designed to ensure that only newer files are downloaded when run multiple times, facilitating incremental updates.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Framework7/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Generate the docset\nThis is simple as hell...!\n\nThe `generate.bash` script will download the HTML docs and related files, AND generate the docset. This is done specially for __you__ !\n\nIf you start the generate script multiple times, it will only download newer HTML files.\n```\n\n----------------------------------------\n\nTITLE: Installing and Running doc2dash\nDESCRIPTION: This snippet provides the command to install the doc2dash package along with additional packages, followed by running doc2dash with specific parameters to generate Dash docset for Dask.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Dask/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install doc2dash colorama soupsieve beautifulsoup4 attrs zope.interface\ndoc2dash -n \"dask\" -d \"/Users/angelo/Library/ApplicationSupport/doc2dash/DocSets/dask/2-15-0\" -i \"/Users/angelo/Pictures/Icons/dash/dask/icon@2x.png\" -v -j -u \"https://docs.dask.org/en/latest/\" -I \"index.html\" ./ -a -f\n```\n\n----------------------------------------\n\nTITLE: Configuring Info.plist for Dash Docset\nDESCRIPTION: Modifies Info.plist to add Dash-specific configuration keys for FLTK docset, including platform family and fallback URL\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/FLTK/README.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<key>DashDocSetFamily</key>\n<string>fltk</string>\n<key>DocSetPlatformFamily</key>\n<string>fltk</string>\n<key>DashDocSetFallbackURL</key>\n<string>http://www.fltk.org/doc-1.3/</string>\n<key>dashIndexFilePath</key>\n<string>index.html</string>\n```\n\n----------------------------------------\n\nTITLE: Archiving Docset\nDESCRIPTION: Command to create a compressed archive of the Wagtail docset, excluding macOS system files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Wagtail/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf Wagtail.tgz Wagtail.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning the wemake-python-styleguide repository using git\nDESCRIPTION: This command clones the wemake-python-styleguide repository from GitHub. It downloads the entire repository to your local machine, allowing you to access the source code and documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"git clone https://github.com/wemake-services/wemake-python-styleguide\"\n```\n\n----------------------------------------\n\nTITLE: Installing node dependencies\nDESCRIPTION: This command installs the required Node.js dependencies for the LifterLMS Dash docset project.  It uses npm (Node Package Manager) to fetch and install the dependencies listed in the project's package.json file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LifterLMS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"npm install\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for path.py Documentation Build\nDESCRIPTION: Installs required Python packages and fetches the build script for generating path.py documentation. Includes setuptools, sphinx theme, doc2dash and the path.py library itself as editable install.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/path.py/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install setuptools_scm rst.linker sphinx-readable-theme doc2dash jaraco.packaging\npip install -e git+https://github.com/jaraco/path.py.git#egg=path.py\ncurl -O https://raw.githubusercontent.com/Kapeli/Dash-User-Contributions/master/docsets/path.py/build.sh\n```\n\n----------------------------------------\n\nTITLE: Building Numba Documentation with Make\nDESCRIPTION: These commands navigate to the documentation directory within the cloned Numba repository, build the HTML documentation using the make command, and then navigate to the output directory. The make html command leverages the Sphinx documentation generator to create the documentation from the source files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Numba/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd numba/docs\nmake html\ncd _build/html\n# In this folder, execute\ndoc2dash -n Numba -u http://numba.pydata.org/numba-doc/<downloaded-numba-version>/ -v -A -i ../../_static/numba_blue_icon_rgb.png .\n```\n\n----------------------------------------\n\nTITLE: Installing and Generating Koa Docset\nDESCRIPTION: Commands to clone the Koa-Dash repository, install Python dependencies, and generate the Koa docset documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/koa/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Sorosliu1029/Koa-Dash.git\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd Koa-Dash\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npython generate.py\n```\n\n----------------------------------------\n\nTITLE: Building sqlite-utils Docset with Version Specification\nDESCRIPTION: This command cleans any existing build artifacts and generates a new sqlite-utils docset for version 3.36.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/sqlite-utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake clean; make VERSION=3.36\n```\n\n----------------------------------------\n\nTITLE: Building ECharts Docset in English (Shell)\nDESCRIPTION: This command builds the ECharts Docset in English using the dashing build script. It requires the dashing script to be properly set up and the necessary JSON configuration file (dashing-en.json) to be present in the specified path.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./dashing build echarts -f dashing-en.json -s ./en\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxyfile for ICU Docset Generation\nDESCRIPTION: Doxygen configuration settings to enable docset generation for ICU documentation with specific Dash requirements\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ICU/README.md#2025-04-16_snippet_0\n\nLANGUAGE: doxygen\nCODE:\n```\nGENERATE_DOCSET        = YES\nDOCSET_FEEDNAME        = \"ICU\"\nDOCSET_BUNDLE_ID       = org.icu-project.icu4c\n```\n\n----------------------------------------\n\nTITLE: Packaging the Dash docset into a compressed archive\nDESCRIPTION: This command creates a compressed archive of the Dash docset using `tar`. The `-czf WPS.tgz WPS.docset` options specify that the archive should be a gzipped tar file named `WPS.tgz` and that it should contain the `WPS.docset` directory. This resulting `.tgz` file is the final Dash docset that can be imported into Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPS/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n\"tar -czf WPS.tgz WPS.docset\"\n```\n\n----------------------------------------\n\nTITLE: Install and Start Docset Generator\nDESCRIPTION: This command installs the necessary node modules and starts the docset generation process. It assumes that Node.js and npm are already installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Three.js/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"npm install && npm start\"\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML with Pandoc\nDESCRIPTION: This shell command uses Pandoc to convert Markdown files into HTML format, applying a CSS theme for styling. It specifies input and output files along with metadata for the generated document.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/dfply/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npandoc --from markdown --to html --css theme.css --ascii README.md --output docs.html --standalone --metadata title=\"dfply documentation\"\n```\n\n----------------------------------------\n\nTITLE: Installing Utilities with Scoop and Pip in Shell\nDESCRIPTION: This shell script snippet installs Python, doc2dash, make, and trash using Scoop and Pip. These utilities are prerequisites for generating and managing the docsets for Renpy Engine.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nscoop install python39\npip install doc2dash\nscoop install make\nscoop install trash\n```\n\n----------------------------------------\n\nTITLE: Creating and activating a virtual environment for WPS\nDESCRIPTION: This command creates a virtual environment named 'wps' using `virtualenv` and then activates it. Using a virtual environment isolates the project's dependencies from the system's global Python installation, preventing conflicts. This ensures that the project has the specific versions of packages it requires without affecting other projects.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPS/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"python -m virtualenv ~/.virtualenvs/wps && . ~/.virtualenvs/wps/bin/activate\"\n```\n\n----------------------------------------\n\nTITLE: Executing Docset Generation with Python\nDESCRIPTION: This snippet shows how to execute a Python script to generate the Defold docset. It requires Python 2.7 to be installed. The script creates the Defold.tgz file and updates the docset.json file with the Defold version of the source files. No input parameters are needed, and the output is the updated docset files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Defold/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```\n./createdocset.py\n```\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building Elektra DocSet with CMake\nDESCRIPTION: This shell script snippet demonstrates how to clone the Elektra repository, configure the CMake build settings for generating a DocSet, and handle potential issues during the build process. It requires CMake and Git to be installed. The key step includes conditional adjustments to a Makefile if the initial build command fails due to missing `docsetutil` and enables manual invocation for archiving the DocSet.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Elektra/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Clone Elektra’s repository\ngit clone https://github.com/ElektraInitiative/libelektra.git\n\n# Change working directory to repository root\ncd libelektra\n\n# Build the DocSet\ncmake -DBUILD_DOCSET=ON -DBUILD_FULL=OFF -DBUILD_SHARED=OFF \\\n      -DBUILD_STATIC=OFF -DBUILD_TESTING=OFF -Bbuild\ncmake --build build\n\n# If the command before failed, then please edit `build/doc/html/Makefile`\n# and change the variable `XCODE_INSTALL` to the root of your\n# installation of `docsetutil`. For example, if you store `docsetutil` at\n# `~/Documents/Development/Applications/DocSetUtil/Developer`, then\n# change the variable to\n# `$(HOME)/Documents/Development/Applications/DocSetUtil/Developer`.\n# See also: https://github.com/Kapeli/Dash-User-Contributions/pull/1884\n\n# Only use the following four commands, if your version of Xcode\n# does not include `docsetutil` and you store `docsetutil` at\n# `~/Documents/Development/Applications/DocSetUtil/Developer/usr/bin`.\ncd build/doc/html\nsed -i'' -E 's~XCODE_INSTALL=.*~XCODE_INSTALL=\"$(HOME)/Documents/Development/Applications/DocSetUtil/Developer\"~' Makefile\nmake\ncd ../../..\n\n# Archive the DocSet\ncd build/doc/html\ntar --exclude='.DS_Store' -cvzf ~/Downloads/Elektra.tgz org.libelektra.docset\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Javadoc Plugin to Balana\nDESCRIPTION: This snippet shows how to modify the pom.xml of the Balana project to include the Maven Javadoc plugin. It adds a new plugin configuration allowing the generation of Javadocs with specific parameters. The modification requires that the 'pom.xml' file is altered to include the plugin, and assumes that Apache Maven is installed and configured.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/balana-utils/README.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/pom.xml b/pom.xml\nindex 5e18607..7968e9c 100644\n--- a/pom.xml\n+++ b/pom.xml\n@@ -132,6 +132,14 @@\n                         </instructions>\n                     </configuration>\n                 </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-javadoc-plugin</artifactId>\n+                <version>3.0.0-M1</version>\n+                <configuration>\n+                    <additionalparam>-Xdoclint:none</additionalparam>\n+                </configuration>\n+            </plugin>\n                 <plugin>\n                     <groupId>org.codehaus.mojo</groupId>\n                     <artifactId>buildnumber-maven-plugin</artifactId\n\n```\n\n----------------------------------------\n\nTITLE: Cloning Haiku Repository\nDESCRIPTION: Command to clone the main Haiku repository containing the documentation source files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Haiku_Book/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://git.haiku-os.org/haiku\n```\n\n----------------------------------------\n\nTITLE: Dashing Configuration for Hypothesis Docset\nDESCRIPTION: JSON configuration file for Dashing that defines how to build the Hypothesis documentation into a Dash docset. Specifies selectors for methods, attributes, categories, and sections.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Hypothesis/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Hypothesis\",\n    \"package\": \"hypothesis\",\n    \"index\": \"index.html\",\n    \"selectors\": {\n        \"dl.function code.descname\": \"Method\",\n        \"dl.attribute code.descname\": \"Attribute\",\n        \"div.section h1\": {\n            \"type\": \"Category\",\n            \"regexp\": \"¶\",\n            \"replacement\": \"\"\n        },\n        \"div.section h2\": {\n            \"type\": \"Section\",\n            \"matchpath\": \"examples|data|details|development|django|healthchecks|index|packaging|quick|settings|stateful|usage\",\n            \"regexp\": \"¶\",\n            \"replacement\": \"\"\n        }\n    },\n    \"ignore\": [\n        \"ABOUT\"\n    ],\n    \"icon32x32\": \"\",\n    \"allowJS\": false,\n    \"ExternalURL\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Jupyter Book Docset with doj2dash\nDESCRIPTION: Command sequence for building and packaging a Dash docset from Jupyter Book documentation. Steps include building docs with jupyter-book, cleaning unnecessary files, converting to dash format with doj2dash, and creating a compressed archive.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/jupyter-book/README.md#2025-04-16_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\ncd jupyter-book-master/docs && jupyter-book build .\nrm -rf _downloads && rm -rf _sources\ndoj2dash -n jupyter-book -i _build/icon.png -f -I _build/html/index.html _build/html\ntar cvzf jupyter-book.tgz jupyter-book.docset\n```\n\n----------------------------------------\n\nTITLE: Downloading CQL Documentation Zip\nDESCRIPTION: Downloads the CQL 3.3 documentation ZIP file from DataStax official website using wget command\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CQL/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget http://docs.datastax.com/en/cql/3.3/zip/cql33.zip\n```\n\n----------------------------------------\n\nTITLE: Modifying Info.plist for fallback URL\nDESCRIPTION: These lines show how to edit the `Info.plist` file of the docset to set the fallback URL for the Blender Manual. This ensures that if a documentation entry is not found in the docset, it will redirect to the online Blender API documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Blender/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n```shell\n<key>dashIndexFilePath</key>\n<string>index.html</string>\n<key>DashDocSetFallbackURL</key>\n<string>https://docs.blender.org/api/current/index.html</string>\n```\n```\n\n----------------------------------------\n\nTITLE: Running the DITA Docset Indexer Script\nDESCRIPTION: Instructions for running the Python script to generate the index for the DITA docset. The script should be executed from the same directory as the DITA.docset bundle and doesn't require any arguments.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DITA/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndita_docset_indexer.py\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash Tool\nDESCRIPTION: This bash command is used to install doc2dash, a conversion tool, via pip or conda. It is a necessary dependency for building the Faker documentation set.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Faker.py/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install doc2dash\n# or\nconda install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Installing Python Packages with Conda/Pip\nDESCRIPTION: This code snippet lists the Python packages required to build the Altair documentation. These packages need to be installed in the Anaconda environment using either `conda` or `pip` package managers.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/altair/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"jsonschema\npandas\nentrypoints\ntoolz\nrecommonmark\nvega_datasets\naltair_saver\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Pygments Repository\nDESCRIPTION: Command to clone the Pygments source code repository from Bitbucket using Mercurial.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pygments/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhg clone ssh://hg@bitbucket.org/birkenfeld/pygments-main\n```\n\n----------------------------------------\n\nTITLE: Building Javadocs Script for Heron using Bash\nDESCRIPTION: This snippet highlights the command needed to generate Javadocs for the Heron project. It depends on the Heron codebase and involves executing a shell script. The output will be the generated Javadocs that can be utilized as documentation references for the Heron project.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Heron/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/twitter/heron\ncd heron\n./website/scripts/javadocs.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Docset - Bash\nDESCRIPTION: This snippet generates the Dash docset using the doc2dash command with specified parameters for the name and URL of the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pysam/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -n pysam -u https://pysam.readthedocs.io/en/stable/ \npysam/doc/_build/html\n```\n\n----------------------------------------\n\nTITLE: Modifying Sphinx Configuration for Dash in Python\nDESCRIPTION: This code snippet shows the changes required in the `docs/conf.py` file of the Click documentation to make it suitable for display in Dash. It switches the HTML theme from 'click' to 'basic' and disables the sidebar.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/click/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n\n-html_theme = \"click\"\n-html_theme_options = {\"index_sidebar_logo\": False}\n+html_theme = \"basic\"\n+html_theme_options = {\"nosidebar\": True}\n\n```\n\n----------------------------------------\n\nTITLE: Running tox job to generate the documentation\nDESCRIPTION: This command runs the tox job specified with `-e dash`.  This command generates the documentation and packages it into the dash format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Falcon/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"tox -e dash\"\n```\n\n----------------------------------------\n\nTITLE: Processing Geb Archive in Hammerspoon Contributions\nDESCRIPTION: Details of archive processing including filename, timestamp, and commit hash\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Geb/Geb.tgz.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nArchive \"Geb.tgz\" was processed at this location, pushed to the CDN and completely removed from git.\n```\n\nLANGUAGE: text\nCODE:\n```\nDate: 2018-03-14 22:30:21 +0000\n```\n\nLANGUAGE: text\nCODE:\n```\nSHA1: 222e335403c1c65e27b9d0c764b312912938232f\n```\n\n----------------------------------------\n\nTITLE: Building Neo4j Documentation using Maven\nDESCRIPTION: This shell command is used to clean and build the Neo4j documentation using Maven, necessitating the installation of Java and Maven on your system. It executes within the Neo4j manual directory and prepares the documentation for further processing.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Neo4j/README.rst#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -DdocsBuild -e\n```\n\n----------------------------------------\n\nTITLE: Generating pymatgen Docsets using Invoke\nDESCRIPTION: This command is used to generate the documentation set for pymatgen. The 'invoke make-dash' command is part of a series of steps executed in a terminal. This process is tested on Mac OS X and requires prior installation of pyinvoke.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pymatgen/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\ninvoke make-dash\n```\n\n----------------------------------------\n\nTITLE: Installing Dashing for Docset Generation\nDESCRIPTION: Command to install the latest version of dashing using Go 1.11+. This is necessary as older versions of Go might introduce bugs in the build process.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Poco/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/technosophos/dashing\n```\n\n----------------------------------------\n\nTITLE: Cloning Javadocset Repository using Git\nDESCRIPTION: This snippet demonstrates how to clone the javadocset generation repository from GitHub using the git command. It requires Git to be installed on the machine.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Storm/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:Kapeli/javadocset.git\n```\n\n----------------------------------------\n\nTITLE: Installing ChromeDriver and Selenium\nDESCRIPTION: This code snippet shows the commands to install ChromeDriver using Homebrew and downgrade Selenium to version 4.2 using Conda. This is necessary to resolve compatibility issues during documentation building.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/altair/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"brew install chromedriver\nconda install selenium==4.2.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Environment and Generating Documentation - Bash\nDESCRIPTION: This snippet details the commands required to create a Python virtual environment and generate HTML documentation for psycopg2 using 'make' commands. It ensures that the setup is contained within an isolated environment.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/psycopg2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# Create virtualenv\nmake env\n\n# Generate html documentations\nmake docs\n```\n\n----------------------------------------\n\nTITLE: Edit Dashing Configuration\nDESCRIPTION: Opens the `dashing.json` file in the vim editor for configuration.  This file contains settings for the docset generation process. You can modify the defaults as needed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GoogleAppsScript/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"~ vim dashing.json\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Documentation Directory\nDESCRIPTION: Command to change directory to the user documentation folder\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Haiku_Book/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd /docs/user/\n```\n\n----------------------------------------\n\nTITLE: Building AWS CDK Python Dash Docset Locally\nDESCRIPTION: This shell script sequence shows how to clone the repository, install dependencies, and generate the AWS CDK Python docset for Dash. It requires bash, curl, wget, tar, zip, jq, and Python 3 to be installed on the system.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/AWS_CDK_Python/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ git clone https://github.com/yo-ga/dash-docset-aws-cdk-python\n$ cd dash-docset-aws-cdk-python\n$ pip3 install -r requirements.txt\n$ bash ./scripts/generate_docset.sh\n```\n\n----------------------------------------\n\nTITLE: Archiving Nette Framework Contribution\nDESCRIPTION: Details the processing of a Nette Framework archive for Hammerspoon Dash user contributions, including date of processing and SHA1 hash verification\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Nette_Framework/versions/2.3.8/nettefw.tgz.txt#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nArchive \"nettefw.tgz\"\n```\n\nLANGUAGE: text\nCODE:\n```\nDate: 2016-01-27 16:59:29 +0000\n```\n\nLANGUAGE: text\nCODE:\n```\nSHA1: 570bc97155b421cf4ce86425b43a9d78bd45bdbb\n```\n\n----------------------------------------\n\nTITLE: CMake Build Commands for Eigen Docset\nDESCRIPTION: This snippet outlines the important CMake build commands to compile the Eigen library documentation. The commands include downloading the Eigen source, preparing the build directory, running CMake configuration, and invoking make to generate the documentation output.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Eigen/README.md#2025-04-16_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n1. Download and unpack Eigen source, e.g. http://bitbucket.org/eigen/eigen/get/3.2.4.tar.gz\n2. Make a new directory called ``build/`` in extracted directory\n3. Go to the newly created directory and run ``cmake ../.``\n4. Go to the ``doc/`` directory\n5. Update ``Doxyfile`` :\n6. Run ``make``\n7. Goto generated ``html`` directory\n8. Run ``make``\n```\n\n----------------------------------------\n\nTITLE: Archiving the CanJS Documentation\nDESCRIPTION: This snippet provides the commands to navigate to the correct directory and archive the generated CanJS documentation into a tar.gz file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd 2.1 # or whichever directory is the latest major.minor version of CanJS\ntar --exclude='.DS_Store' -cvzf CanJS.tgz CanJS.docset\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash for Docset Creation\nDESCRIPTION: Command to install the doc2dash tool used to convert HTML documentation to a Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/iPython/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Copying SDK Documentation to Docset - Shell\nDESCRIPTION: This snippet uses a shell command to copy the Pebble API reference documentation into the local Dash docset directory. Ensure that the $PEBBLE_SDK environment variable is set to the Pebble SDK's path. The input is the source directory, and the output is the copied files in the specified docset directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pebble/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp -r $PEBBLE_SDK/Documentation/pebble-api-reference/* ./Pebble.docset/Contents/Resources/Documents/\n```\n\n----------------------------------------\n\nTITLE: Downloading AWS SDK Icons\nDESCRIPTION: This snippet downloads the necessary AWS Python SDK icons and places them into the Boto3 docset directory to enhance the visual representation in Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto3/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd /path-to-repo/Dash-User-Contributions/docsets/Boto3/\ncurl -O https://s3.amazonaws.com/angrychimp.net/dash/boto3.docset/icon.png\ncurl -O https://s3.amazonaws.com/angrychimp.net/dash/boto3.docset/icon%402x.png\n```\n\n----------------------------------------\n\nTITLE: Generating Mockito Docset using Shell Commands\nDESCRIPTION: This shell script outlines the process to generate a Mockito documentation set (docset) for Dash using wget to clone the online documentation, sed for modifying paths, and Docker to run a Go-based script. The process includes creating directories, copying necessary files, and finally packaging them into a tar.gz archive. Prerequisites include having Docker and Go configured, and access to a terminal on a Unix-based system.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mockito/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# download docs\nwget --recursive --page-requisites --convert-links --no-parent https://javadoc.io/static/org.mockito/mockito-core/3.1.0/overview-summary.html\ncd javadoc.io/static/org.mockito/mockito-core/3.1.0\n# create distribution-directory\nmkdir Mockito\n# workaround index-files/-paths: ../ is required to navigate in pages but not in generated docset-index (see also 'package and cleanup')\ncp index-files index-files_sav\nsed -i -- 's|\\.\\.\\/||gp' index-files/index-*.html\n# generate structure, docSet.dsidx and info.plist using docker-image containing go (required for javadocset-script)\ndocker run -it --rm -v /home/user/Desktop/dashdocsets/javadoc.io/static/org.mockito/mockito-core/3.1.0/:/go/src/mockito golang:alpine\ngo get github.com/william8th/javadocset\njavadocset Mockito src/mockito\nmv Mockito.docset/ src/mockito/Mockito\nexit\nsudo chown -R user:user Mockito/Mockito.docset/\n# workaround org/-files: they are not copied (but required) hierarchically\nrm -r Mockito/Mockito.docset/Contents/Resources/Documents/org\ncp org Mockito/Mockito.docset/Contents/Resources/Documents/\n# add icons and infos\nadd icons to  Mockito/Mockito.docset/\nadd docset.json and README.md to Mockito/\n# package and cleanup -> push to git-repo\nrm -r Mockito/Mockito.docset/Contents/Resources/Documents/index-files\nmv Mockito/Mockito.docset/Contents/Resources/Documents/index-files_sav Mockito/Mockito.docset/Contents/Resources/Documents/index-files\ntar -cvzf Mockito/Mockito.tgz Mockito/Mockito.docset/\nrm -r Mockito/Mockito.docset/\n```\n\n----------------------------------------\n\nTITLE: Generating Icons\nDESCRIPTION: Generates the icons for the docset from the Bonobo logo. Uses ImageMagick's `convert` command to resize the original image to 16x16 and 32x32 pixels.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"convert -resize 16x16 _static/bonobo.png icon.png\nconvert -resize 32x32 _static/bonobo.png icon@2x.png\"\n```\n\n----------------------------------------\n\nTITLE: Cloning PyQGIS\nDESCRIPTION: This snippet clones the PyQGIS repository from GitHub, specifically fetching only the latest commit to minimize download size.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyQGIS/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/qgis/pyqgis.git  --depth=1\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: This snippet executes a script to build the documentation for PyQGIS and then converts the generated HTML documentation to a Dash-compatible format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyQGIS/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/build-docs.sh\ndoc2dash -n PyQGIS_3 build/master/html/\n```\n\n----------------------------------------\n\nTITLE: Creating Docset Archive\nDESCRIPTION: Command to create a compressed archive of the Pyramid docset, excluding .DS_Store files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pyramid/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd /Users/USERNAME/Library/Application\\ Support/doc2dash/DocSets\ntar --exclude='.DS_Store' -cvzf Pyramid.tgz Pyramid.docset\n```\n\n----------------------------------------\n\nTITLE: Configuring Dash Docset Metadata with plist\nDESCRIPTION: This plist file configures the metadata for the GLM Dash docset. It specifies the bundle identifier, name, fallback URL, keyword, index file path, and other properties that Dash uses to identify and display the docset. The `DocSetPlatformFamily` is set to `usercontribGLM` to indicate that it is a user-contributed docset for GLM.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/OpenGL_Mathematics/README.md#2025-04-16_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\"\n\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n     <key>CFBundleIdentifier</key>\n     <string>glm</string>\n     <key>CFBundleName</key>\n     <string>OpenGL Mathematics</string>\n     <key>DashDocSetFallbackURL</key>\n\t<string>https://glm.g-truc.net/0.9.9/api/</string>\n     <key>DashDocSetFamily</key>\n     <string>doxy</string>\n     <key>DashDocSetKeyword</key>\n\t<string>glm</string>\n\t<key>DashDocSetPluginKeyword</key>\n\t<string>glm</string>\n\t<key>DashWebSearchKeyword</key>\n\t<string>glm</string>\n     <key>DocSetPlatformFamily</key>\n\t<string>usercontribGLM</string>\n     <key>dashIndexFilePath</key>\n     <string>index.html</string>\n     <key>isDashDocset</key>\n\t<false/>\n     <key>isJavaScriptEnabled</key>\n\t<false/>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash using pip\nDESCRIPTION: Command to install doc2dash, a tool that converts documentation to the Dash docset format. This is a prerequisite for generating the FormEncode docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/formencode/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Setting up Virtual Environment for path.py Docset\nDESCRIPTION: Creates and activates a Python virtual environment for building the path.py documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/path.py/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvirtualenv path.py-docset\ncd path.py-docset\nsource bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Commands to install doc2dash and required Sphinx packages using pip\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PytorchLightning/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install doc2dash\npython -m pip install sphinx recommonmark sphinx_autodoc_typehints sphinx_copybutton sphinx_paramlinks sphinx_togglebutton\n```\n\n----------------------------------------\n\nTITLE: Running the Ada Docset Generator Script\nDESCRIPTION: Command to execute the Python script that generates the Ada 2012 Standard Docset. This script processes the content from the ada-docset repository and creates a Dash-compatible documentation set.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Ada/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./adadocset.py\n```\n\n----------------------------------------\n\nTITLE: Checking Out Bonobo Version\nDESCRIPTION: Checks out a specific version of the Bonobo source code using a Git tag.  `x.y.z` represents the version number, such as `0.6.4`. Creates a new branch named `dash` from the tagged version.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"git checkout -b dash x.y.z\"\n```\n\n----------------------------------------\n\nTITLE: Copying Nitrogen docset to docsets directory\nDESCRIPTION: This command copies the generated Nitrogen Dash docset TGZ file to the Dash-User-Contributions docsets directory for inclusion in Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Nitrogen/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"cp nitrogen_core/doc/dash/Nitrogen.tgz Dash-User-Contributions/docsets/Nitrogen\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Doxyfile for Eigen Docset Generation\nDESCRIPTION: This snippet provides the necessary modifications to the Doxyfile to generate a docset for the Eigen 3.2.7 library. Ensure that specific flags such as DOCSET_BUNDLE_ID, GENERATE_DOCSET, and DISABLE_INDEX are set accordingly to customize the output and features of the generated documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Eigen/README.md#2025-04-16_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nDOCSET_BUNDLE_ID  = eigen\n      /*...*/\n      GENERATE_DOCSET   = YES\n      /*...*/\n      DISABLE_INDEX     = YES\n      /*...*/\n      SEARCHENGINE      = NO\n      /*...*/\n      GENERATE_TREEVIEW = NO\n```\n\n----------------------------------------\n\nTITLE: Cloning QGIS Repository\nDESCRIPTION: This snippet clones the QGIS Git repository from GitHub. It is the first step required to obtain the source code for building the project.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyQGIS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/qgis/QGIS.git\n```\n\n----------------------------------------\n\nTITLE: Generating HaxeFlixel Docset with DashDox in Neko\nDESCRIPTION: Command to generate a Dash docset from HaxeFlixel documentation using the DashDox script. Parameters include the docset name, HTML/XML documentation paths, icon file, and output directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/HaxeFlixel/README.md#2025-04-16_snippet_0\n\nLANGUAGE: neko\nCODE:\n```\nMain.n -name HaxeFlixel -html-doc /path/to/flixel-docs/api -xml-doc /path/to/flixel-docs/api/dox-gen  -icon /tmp/haxeflixel.png -out .\n```\n\n----------------------------------------\n\nTITLE: Cloning Bonobo Repository\nDESCRIPTION: Clones the Bonobo project's source code repository from GitHub. This is the first step in generating the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bonobo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"https://github.com/python-bonobo/bonobo.git\ncd bonobo\"\n```\n\n----------------------------------------\n\nTITLE: Applying AVR Libc Documentation Patch\nDESCRIPTION: Applies a patch file to modify the AVR Libc source for Dash documentation generation. The patch should be saved in the source directory before execution.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/AVR_Libc/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npatch -p1 < avr-libc-dash.patch\n```\n\n----------------------------------------\n\nTITLE: Processing Archive for Dash User Contributions\nDESCRIPTION: Processes and archives Bullet Physics documentation for Hammerspoon project, including archiving, CDN push, and git removal\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bullet/versions/2.82/org.bulletphysics.docset.tgz.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nArchive \"org.bulletphysics.docset.tgz\" was processed at this location, pushed to the CDN and completely removed from git.\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies with Composer\nDESCRIPTION: Demonstrates how to install necessary PHP dependencies for generating the docset using Composer.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/FileMaker/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Doxygen Configuration\nDESCRIPTION: These settings configure Doxygen to generate a docset suitable for Dash. It disables indexing, search engine functionality, and treeview generation, while also enabling docset generation and disabling full path names.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/SDL/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Doxygen\nCODE:\n```\n\"GENERATE_DOCSET   = YES\nDISABLE_INDEX     = YES\nSEARCHENGINE      = NO\nGENERATE_TREEVIEW = NO\nFULL_PATH_NAMES   = NO\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Dolfin Repository\nDESCRIPTION: This snippet provides the command to clone the Dolfin project repository from Bitbucket, which is the first step in generating documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/dolfin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://bitbucket.org/fenics-project/dolfin\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Using Grunt\nDESCRIPTION: This command runs Grunt to generate the documentation for the master version of CanJS after all prerequisites are satisfied.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngrunt docjs\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository Recursively\nDESCRIPTION: This command clones the threejs-dash-gen repository from GitHub with the recursive flag. The recursive flag ensures that any submodules within the repository are also cloned.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Three.js/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"git clone --recursive https://github.com/toruta39/threejs-dash-gen\"\n```\n\n----------------------------------------\n\nTITLE: Adding Icons to Docset\nDESCRIPTION: Command to copy icon files to the docset directory\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Astropy/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp icon*.png Astropy.docset\n```\n\n----------------------------------------\n\nTITLE: Updating Docset Index Database\nDESCRIPTION: SQL command to update the search index path after file renaming\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Astropy/README.md#2025-04-16_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE searchIndex SET path = 'api/astropy.units.function.logarithmic.m_bol_renamed.html#astropy.units.function.logarithmic.m_bol' WHERE name = 'astropy.units.function.logarithmic.m_bol'\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites for Airflow Docset Generation\nDESCRIPTION: Commands to install the required dependencies for generating the Airflow docset, including Sphinx and its extensions, as well as doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Airflow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install sphinx-rtd-theme sphinx-autoapi sphinxcontrib-httpdomain sphinx-argparse\nsudo pip install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Documentation\nDESCRIPTION: This snippet includes command-line instructions to navigate to the documentation source directory and build the HTML documentation for the PyMC3 project.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyMC3/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n(venv)% cd docs/source\n\n(venv)% make html\n\n(venv)% cd ..\n```\n\n----------------------------------------\n\nTITLE: Cloning Guava Repository\nDESCRIPTION: Demonstrates how to clone the Guava libraries repository from Google Code using Git. Provides the initial setup for generating documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Guava/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://code.google.com/p/guava-libraries/\n$ cd guava-libraries\n```\n\n----------------------------------------\n\nTITLE: Building Azure ARM Docset\nDESCRIPTION: Make command to generate the final Dash-compatible docset from the processed HTML files.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Azure_Resource_Manager_Template_Reference/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Pip for Python\nDESCRIPTION: This snippet installs the necessary Python packages 'bs4' and 'lxml' using pip. These packages are required for web scraping and XML parsing when generating the Odin docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Odin/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install bs4\npip3 install lxml\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript in Info.plist (Optional)\nDESCRIPTION: Optionally enable JavaScript in the `Info.plist` file to support dynamic content within the docset. This may be necessary for certain interactive elements in the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MXNet/README.md#2025-04-16_snippet_4\n\nLANGUAGE: plist\nCODE:\n```\nisJavaScriptEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Cloning Repositories for Initial Setup\nDESCRIPTION: This snippet includes commands to clone necessary repositories important for setting up the contribution environment for CanJS. It requires proper git configurations and access to the specified repositories.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/about-this-repo.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<github-username>/Dash-User-Contributions\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bitovi/canjs.com\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bitovi/canjs\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init --recursive\n```\n\n----------------------------------------\n\nTITLE: Generating Statsmodels Dash Docset\nDESCRIPTION: Uses doc2dash to create the Dash docset from the compiled HTML documentation, specifying various options such as name, destination, icon, and URL.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/statsmodels/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -n \"statsmodels 0.14.0\" -d \"~/Library/ApplicationSupport/doc2dash/DocSets/statsmodels/0-14-0\" -i \"~/Pictures/Icons/dash/statsmodels/icon@2x.png\" -v -j -u \"https://www.statsmodels.org/\" -I \"index.html\" ./ -a -f\n```\n\n----------------------------------------\n\nTITLE: Updating Local Copy of DITA Specification with wget\nDESCRIPTION: Command to update the local copy of the DITA specification using wget. This downloads the HTML content while ignoring PDF and ZIP files that aren't appropriate for inclusion in the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DITA/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwget -k -r -p -np --ignore \"*.pdf\" --ignore \"*.zip\" http://docs.oasis-open.org/dita/dita/v1.3/errata01/os/complete/part3-all-inclusive/dita-v1.3-errata01-os-part3-all-inclusive-complete.html\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository\nDESCRIPTION: This command uses the GitHub CLI (`gh`) to clone the `paw-lu/arviz-dash-docset` repository to your local machine. This is the first step in building the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/arviz/README.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ gh repo clone paw-lu/arviz-dash-docset\n```\n\n----------------------------------------\n\nTITLE: Running GNU Guile Docset Index Generation Script\nDESCRIPTION: This command executes a Python script named gen_guile_doc.py which generates the index for the GNU Guile documentation. The script requires Python 3 and the BeautifulSoup library. It should be run in the context of the GNU_Guile.docset's Contents/Resources directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GNU_Guile/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ python3 gen_guile_doc.py GNU_Guile.docset/Contents/Resources\n```\n\n----------------------------------------\n\nTITLE: Cloning eCharts Documentation Repository\nDESCRIPTION: Clone the official eCharts documentation repository from GitHub, which is necessary for accessing the source files required for generating the Docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts_Chinese/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/ecomfe/echarts-doc\n```\n\n----------------------------------------\n\nTITLE: Compressing GeoTools Docset with tar\nDESCRIPTION: This snippet shows how to use the tar command to compress the generated GeoTools docset into a .tgz file while excluding hidden files like '.DS_Store'. This is useful for packaging the docset for distribution or storage.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GeoTools/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ tar --exclude='.DS_Store' -cvzf GeoTools.tgz GeoTools.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning javadocset repository\nDESCRIPTION: This command clones the javadocset repository from GitHub, which is necessary for generating Dash docsets from Java documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Cascading/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"git clone git@github.com:Kapeli/javadocset.git\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Statsmodels Repository\nDESCRIPTION: Clones the Statsmodels repository from GitHub, specifically the v0.14.0 branch.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/statsmodels/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --branch=v0.14.0 https://github.com/statsmodels/statsmodels\n```\n\n----------------------------------------\n\nTITLE: Install Dashing\nDESCRIPTION: Installs the Dashing tool, which is used to build the Google Apps Script docset. This command uses the `go get` command to download and install Dashing from its GitHub repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GoogleAppsScript/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"~ go get -u github.com/technosophos/dashing\"\n```\n\n----------------------------------------\n\nTITLE: Cloning the Drupal Console Dash User Contributions Repository\nDESCRIPTION: Command to clone a forked repository of Dash-User-Contributions for contributing to Drupal Console documentation. Replace <YOUR-USER> with your GitHub username.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DrupalConsole/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<YOUR-USER>/Dash-User-Contributions ~/DrupalConsoleDash\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx in Python Conf File\nDESCRIPTION: Modifies the Sphinx configuration file to set `html_use_index` to True, ensuring an index is generated for the documentation. This requires editing `conf.py` located in the Boto documentation source directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Boto/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhtml_use_index = True\n```\n\n----------------------------------------\n\nTITLE: Installing pyinvoke Dependency\nDESCRIPTION: This snippet shows the installation of the 'invoke' package using pip, which is necessary to generate the documentation set. The installation is done through Python's package manager, pip.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pymatgen/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npip install invoke\n```\n\n----------------------------------------\n\nTITLE: Copying Retina Icon to Dash Docset\nDESCRIPTION: Command to copy the high-resolution (2x) icon to the Dash docset directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pyramid/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp /path/to/cloned/repo/Dash-User-Contributions/docsets/Pyramid/icon@2x.png /Users/USERNAME/Library/Application\\ Support/doc2dash/DocSets/Pyramid.docset/icon@2x.png\n```\n\n----------------------------------------\n\nTITLE: Creating Compressed Docset Archive\nDESCRIPTION: Creates a compressed tar archive of the CQL docset, excluding macOS system files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CQL/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf CQL.tgz CQL.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning MLflow Repository\nDESCRIPTION: Initial steps to clone the MLflow source code and checkout a specific version\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MLflow/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/mlflow/mlflow.git\ncd mlflow\n```\n\n----------------------------------------\n\nTITLE: Fetching HTML with Httrack\nDESCRIPTION: This snippet uses Httrack to download HTML documentation for mrjob from pythonhosted.org. It sets the output directory to 'mrjob' and limits the fetching to the specified domain. Httrack needs to be installed on your system.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mrjob/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttrack \\\"https://pythonhosted.org/mrjob/\\\" -O \\\"mrjob\\\" \\\"+*pythonhosted.org/mrjob/*\\\" -v\n```\n\n----------------------------------------\n\nTITLE: Generating JUnit5 Docset Using Docker and Bash\nDESCRIPTION: Shell script commands to download JUnit5 documentation, process it using Docker and javadocset, and package it as a docset. Includes steps for file manipulation, index processing, and final packaging.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/JUnit5/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# download docs\nwget --recursive --page-requisites --convert-links --no-parent https://junit.org/junit5/docs/current/api/\ncd junit.org/junit5/docs/current/api\n# create distribution-directory\nmkdir JUnit5\n# workaround index-files/-paths: ../ is required to navigate in pages but not in generated docset-index (see also 'package and cleanup')w\ncp index-files index-files_sav\nsed -i -- 's|\\.\\./||gp' index-files/index-*.html\n# generate structure, docSet.dsidx and info.plist using docker-image containing go (required for javadocset-script)\ndocker run -it --rm -v junit.org/junit5/docs/current/api:/go/src/junit5 golang\ngo get github.com/william8th/javadocset\njavadocset JUnit5 src/junit5\nmv JUnit5.docset/ src/junit5/JUnit5\nexit\nsudo chown -R user:user JUnit5/JUnit5.docset/\n# add icons and infos\nadd icons to JUnit5/JUnit5.docset/\nadd docset.json and README.md to JUnit5/\n# package and cleanup -> push to git-repo\nrm -r JUnit5/JUnit5.docset/Contents/Resources/Documents/index-files\nmv JUnit5/JUnit5.docset/Contents/Resources/Documents/index-files_sav JUnit5/JUnit5.docset/Contents/Resources/Documents/index-files\ntar -cvzf JUnit5.tgz JUnit5/JUnit5.docset/\nrm - r JUnit5/JUnit5.docset/\n```\n\n----------------------------------------\n\nTITLE: Change Directory\nDESCRIPTION: Changes the current working directory to the cloned gas-docset directory. This is necessary to execute the subsequent commands within the correct context.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GoogleAppsScript/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n\"~ cd gas-docset\"\n```\n\n----------------------------------------\n\nTITLE: Adding Index File Path to Info.plist in Toyplot Docset\nDESCRIPTION: This XML snippet shows how to add the index file path to the Info.plist file of the generated Toyplot docset. This step is necessary to fix the index page of the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/toyplot/README.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<key>dashIndexFilePath</key>\\n<string>index.html</string>\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository\nDESCRIPTION: This command clones the specified Git repository, `paw-lu/polars-dash-docset`, to the local machine. It uses the GitHub CLI tool (`gh`) to perform the cloning operation, allowing for easy access to the source code required for building the Polars Dash docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/polars/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gh repo clone paw-lu/polars-dash-docset\n```\n\n----------------------------------------\n\nTITLE: Generating Arc Lisp Docset using Bash\nDESCRIPTION: This script clones the Arc Lisp documentation repository and generates the docset. It requires sqlite3 and racket to be installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Arc_Lisp/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/svetlyak40wt/arclanguage.github.io\ncd arclanguate.github.io/_ref\n./generate.sh\n```\n\n----------------------------------------\n\nTITLE: Switching to Desired Version Branch using Git\nDESCRIPTION: This command switches to the specified version branch of the Falcon repository. Replace `<version_branch>` with the actual branch name you want to use (e.g., `main`, `1.0`, `3.0`).\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Falcon/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"git checkout <version_branch>\"\n```\n\n----------------------------------------\n\nTITLE: Running Maven Javadoc Command\nDESCRIPTION: This snippet shows the command needed to generate Javadoc documentation for a Java project using Maven. It assumes Maven is properly configured and Apache Storm's source code is in the current directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Storm/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn javadocs:javadocs\n```\n\n----------------------------------------\n\nTITLE: Navigating to Generated Content\nDESCRIPTION: Command to change directory to the generated doxygen HTML output location\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Haiku_Book/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd ../../generated/doxygen/html/\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Chassis Folder\nDESCRIPTION: This command changes the current directory to the cloned Chassis repository. This step is necessary to perform subsequent operations within the Chassis project structure, such as building the documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Chassis/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"cd <your-folder>\"\n```\n\n----------------------------------------\n\nTITLE: Building aiohttp documentation using doc2dash\nDESCRIPTION: This shell command builds the aiohttp documentation set using the doc2dash tool. It creates a Dash docset named aiohttp, using the specified resources and HTML files from the provided path.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/aiohttp/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndoc2dash -jv -n aiohttp -I index.html -u https://aiohttp.readthedocs.io/en/stable/ <path to HTML doc folder of aiohttp>\n```\n\n----------------------------------------\n\nTITLE: Generating Bambi Docset for Dash\nDESCRIPTION: Commands to create the Bambi docset using doc2dash. It specifies the docset name, icon, index file, and verbosity level. The resulting docset is then compressed into a .tgz file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bambi/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -n Bambi -i bambi-gh-pages/logos/favicon.png -I bambi-gh-pages/index.html -v bambi-gh-pages\ntar cvzf Bambi.tgz Bambi.docset\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Search Index Entries with jQuery for NPM Documentation\nDESCRIPTION: jQuery code snippet that traverses getting-started documentation links and generates SQL INSERT statements for the Dash search index. Creates entries of type 'Guide' with the link text and href as search index data.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/npm/README.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar str='';\n$('#getting-started>.pageColumns>li>a').each(function(i,e) {\n    str += \"INSERT OR IGNORE INTO searchIndex(name, type, path) VALUES \";\n    str += \"('Getting Started - \"+$(e).text()+\"', 'Guide', '\"+$(e).attr('href')+\"');\\n\";\n});\nconsole.log(str);\n```\n\n----------------------------------------\n\nTITLE: Committing Changes and Closing Database - Python\nDESCRIPTION: This final snippet commits the changes made during the database operations and closes the database connection, ensuring data integrity and resource management.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/TorchMetrics/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nconn.commit()\nconn.close()\n```\n\n----------------------------------------\n\nTITLE: Updating Doxyfile Configuration for Docset Generation\nDESCRIPTION: This snippet outlines necessary changes to the Doxyfile to enable documentation generation for PhysicsFS, including disabling indexing and setting the docset properties.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PhysicsFS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDISABLE_INDEX     = YES\nSEARCHENGINE      = NO\nGENERATE_TREEVIEW = NO\nFULL_PATH_NAMES   = NO\n# The following should be appended at the end of the file:\nGENERATE_DOCSET = YES\nDOCSET_FEEDNAME = \"PhysicsFS\"\nDOCSET_BUNDLE_ID = physfs\n```\n\n----------------------------------------\n\nTITLE: Downloading Poco SDK Documentation\nDESCRIPTION: wget command to recursively download the Poco documentation website while preserving links for offline use.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Poco/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwget -c -r -np -k -L -p https://pocoproject.org/docs/\n```\n\n----------------------------------------\n\nTITLE: Installing tox using pip\nDESCRIPTION: This command installs the `tox` package using pip, the Python package installer. tox is a generic virtual environment management and test command line tool.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Falcon/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"pip install tox\"\n```\n\n----------------------------------------\n\nTITLE: Packaging SymPy Dash docset using tar in Command Prompt\nDESCRIPTION: This command compresses the generated SymPy Dash docset into a .tgz archive file for distribution.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/SymPy/README.md#2025-04-16_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\ntar cvzf SymPy.tgz SymPy.docset\n```\n\n----------------------------------------\n\nTITLE: Changing Directory\nDESCRIPTION: This command changes the current directory to the newly cloned `arviz-dash-docset` directory.  This is necessary to execute subsequent build commands within the project's root.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/arviz/README.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cd arviz-dash-docset\n```\n\n----------------------------------------\n\nTITLE: Compressing the aiohttp docset\nDESCRIPTION: This shell command compresses the aiohttp documentation set into a tarball. The command excludes the '.DS_Store' files during the compression process and packages the aiohttp.docset directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/aiohttp/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf aiohttp.tgz aiohttp.docset\n```\n\n----------------------------------------\n\nTITLE: Navigating to Docset Directory\nDESCRIPTION: Navigate into the 'public/documents/dash' directory, which is necessary before running commands to generate the Docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts_Chinese/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd public/documents/dash\n```\n\n----------------------------------------\n\nTITLE: Installing doc2dash Dependency for Bambi Docset Generation\nDESCRIPTION: Commands to install doc2dash, a tool required for converting documentation to Dash format. It can be installed using either pip or conda package managers.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bambi/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install doc2dash\n# or\nconda install doc2dash\n```\n\n----------------------------------------\n\nTITLE: Navigating to SML Docset Builder Directory\nDESCRIPTION: This shell command changes the directory to the cloned SML docset builder. This step is necessary before running the build process.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Standard_ML/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd SML-docset-builder\n```\n\n----------------------------------------\n\nTITLE: Executing Dashing Script\nDESCRIPTION: Run the 'dashing.js' Node.js script located in the parent directory. This script is responsible for processing and preparing the documentation files needed to build the Docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts_Chinese/README.md#2025-04-16_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnode ../dashing.js\n```\n\n----------------------------------------\n\nTITLE: Compressing and Excluding Files with Tar Command in Shell\nDESCRIPTION: This shell command compresses the RenPy_Engine docset directory into a .tgz file excluding specified files, making it ready for submission or storage.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf RenPy_Engine.tgz RenPy_Engine.docset\n```\n\n----------------------------------------\n\nTITLE: Markdown Header and Description for JDA Documentation\nDESCRIPTION: Markdown formatted documentation header and description explaining JDA's purpose as a Discord API wrapper and providing relevant links to documentation and GitHub repositories.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/JDA/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nJDA\\n=======================\\n\\n# What\\n[JDA](https://github.com/DV8FromTheWorld/JDA) is a popular Java wrapper for the [Discord](https://discord.com) [REST api](https://discord.com/developers/docs/intro). The documentation can be found online [here](https://ci.dv8tion.net/job/JDA/javadoc/).\\n\\n# Who\\n* I am a random user of JDA on [GitHub](https://github.com/MetalTurtle18) (so this docset is not \"official\").\\n* JDA is maintained by the community\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Submodules\nDESCRIPTION: This code snippet initializes and updates Git submodules required for the CanJS documentation generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule init\ngit submodule update\n```\n\n----------------------------------------\n\nTITLE: Applying PyQGIS Patch\nDESCRIPTION: This command applies a patch to the cloned PyQGIS directory to modify its content before the documentation build process. The patch file is assumed to be located in the current directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyQGIS/README.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npatch -ruN  < pyqgis.patch\n```\n\n----------------------------------------\n\nTITLE: Editing Doxyfile Template for QGIS Documentation\nDESCRIPTION: This portion of the Doxyfile template sets various configurations for generating the QGIS documentation. The parameters include docset-specific details such as the project name, publisher id, and settings for indexing and generating tags. Modification of these values is necessary to customize the documentation build process.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/QGIS/README.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nGENERATE_DOCSET        = YES\nPROJECT_NAME           = \"QGIS\"\nDOCSET_FEEDNAME        = \"QGIS\"\nDOCSET_BUNDLE_ID       = QGIS_3\nDOCSET_PUBLISHER_ID    = com.QGIS\nDOCSET_PUBLISHER_NAME  = QGIS\nDISABLE_INDEX          = YES\nSEARCHENGINE           = NO\nGENERATE_TAGFILE       = qgis.tag\n```\n\n----------------------------------------\n\nTITLE: Creating Tar Archive\nDESCRIPTION: This command creates a compressed tarball of the completed PyQGIS documentation set while excluding unwanted files such as '.DS_Store'.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyQGIS/README.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntar cvzf PyQGIS.tgz --exclude='.DS_Store' PyQGIS_3.docset\n```\n\n----------------------------------------\n\nTITLE: Install Go via Brew\nDESCRIPTION: Installs the Go programming language using the Homebrew package manager on MacOS. Go is a prerequisite for Dashing, which is used to generate the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/GoogleAppsScript/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"~ brew install go\"\n```\n\n----------------------------------------\n\nTITLE: Creating Docset Archive\nDESCRIPTION: Command to create a compressed archive of the docset while excluding system files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Astropy/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf Astropy.tgz Astropy.docset\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for MongoDB Driver Documentation Build\nDESCRIPTION: Navigate to the cloned repository and install project dependencies using Yarn package manager\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Node_MongoDB/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd node-mongodb-native-docset\\nyarn\n```\n\n----------------------------------------\n\nTITLE: Verifying the compressed aiohttp docset\nDESCRIPTION: This command verifies the integrity of the compressed aiohttp docset by downloading a verification package and running a verification script from that package. The command should be run at the root of the repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/aiohttp/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# run the command at the root of this repo\nwget http://kapeli.com/feeds/zzz/docsetcontrib.tgz && tar -xzf docsetcontrib.tgz && ./docsetcontrib --verify\n```\n\n----------------------------------------\n\nTITLE: Building QGIS\nDESCRIPTION: The snippet creates a build directory and configures the QGIS project using CMake with specific flags to enable 3D support and server capabilities.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyQGIS/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmkdir build\ncd build\ncmake ../ -DWITH_3D=TRUE -DWITH_SERVER=TRUE\n```\n\n----------------------------------------\n\nTITLE: Running PyQtGraph examples\nDESCRIPTION: This snippet shows how to launch the PyQtGraph examples application.  Running the examples is the easiest way to learn how to use the library.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pyqtgraph/README.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\"python -m pyqtgraph.examples\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Sphinx Configuration for Xarray Docset Generation in Python\nDESCRIPTION: This code snippet modifies the Sphinx configuration to use the 'alabaster' theme and remove the sidebar. It sets the HTML theme options to display only the logo and disable the sidebar.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/xarray/README.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nhtml_theme = 'alabaster'\n\nhtml_theme_options = dict(\n    logo_only=True,\n    nosidebar=True,\n)\n```\n\n----------------------------------------\n\nTITLE: Stripping Irrelevant Resources using Perl\nDESCRIPTION: This snippet indicates the use of Perl to remove unnecessary JavaScript and online resources from the downloaded documentation, enhancing its usability and focus.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MODX/README.md#2025-04-16_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n# Stripped from (most) irrelevant javascript and online resources using some perl search & replace magic.\n```\n\n----------------------------------------\n\nTITLE: Copying Icon for Documentation Build\nDESCRIPTION: This shell command copies the icon image to the current documentation build directory. This is a necessary step to ensure the documentation can reference the icon correctly during the build process.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pytest/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd doc/en/_build\ncp .../icon@2x.png .\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen to Generate Box2D Docset\nDESCRIPTION: The snippet provides configuration settings for Doxygen's Doxyfile needed to generate the Box2D documentation set. Prerequisites include having Doxygen installed and a downloaded copy of the Box2D source. The essential settings include enabling docset generation, disabling the index, and other related options. The configuration targets building a docset for Dash, identified as org.box2d.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Box2D/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nGENERATE_DOCSET   = YES\n/*...*/\nDISABLE_INDEX     = YES\n/*...*/\nSEARCHENGINE      = NO\n/*...*/\nGENERATE_TREEVIEW = NO\n/*...*/\nDOCSET_BUNDLE_ID  = org.box2d\n```\n\n----------------------------------------\n\nTITLE: Displaying ARM Docset Project Information in Markdown\nDESCRIPTION: This markdown snippet presents key information about the ARM docset project, including authors, generation tool, and links for bug reporting and feature requests.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Arm_A-Profile_System_Registers/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ARM docset\n\n* Authors: [liu lei](https://github.com/leolovenet/) and [Laine Taffin Altman](https://github.com/pthariensflame)\n* Generated using: [dash-armref](https://github.com/leolovenet/Dash-ARMRef)\n\n## Bugs & feature requests\n\nYou can raise an issue in the [dash-armref](https://github.com/leolovenet/Dash-ARMRef) repository.\n\nFeature suggestions are welcome; if the docset hasn't been updated for the latest version of [The A-Profile Exploration Tools](https://developer.arm.com/Architectures/A-Profile%20Architecture#Software-Download), feel free to raise an issue!\n```\n\n----------------------------------------\n\nTITLE: Processing Phaser Archive in Dash-User-Contributions\nDESCRIPTION: Archival and CDN deployment of Phaser library files with git management\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Phaser/Phaser.tgz.txt#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nArchive \"Phaser.tgz\" was processed at this location, pushed to the CDN and completely removed from git.\n```\n\n----------------------------------------\n\nTITLE: Generating OTRS Docset with Perl\nDESCRIPTION: This snippet demonstrates the command to generate a docset for OTRS using the Perl_Docset tool. It provides the necessary command with input and output parameters for the process.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/OTRS/README.md#2025-04-16_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\n./perl_docset -input _PATHTOOTRSPACKAGE_ -o OTRS.docset\n```\n\n----------------------------------------\n\nTITLE: Custom CSS for aiohttp documentation\nDESCRIPTION: This CSS snippet is intended to style the HTML documentation of aiohttp. It adjusts the layout by changing margins, hiding certain elements, and ensuring the footer and body are well styled. It should be placed in the `docs/_build/html/_static/custom.css` file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/aiohttp/README.md#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* copy and paste the content below into\n * docs/_build/html/_static/custom.css\n */\ndiv.footer {width:auto; max-width:940px} div.document {max-width:none; width: auto} div.related {display:none;} div.sphinxsidebar {display:none;} a.headerlink {display:none;} div.bodywrapper {margin: 0 0 0 0px;}\ndiv.body {max-width:none !important;}\n\npre {padding: 7px 10px !important;margin: 15px 0 !important;overflow:auto;}\ndiv.admonition {margin:20px 0; padding:10px 10px;}\n\n```\n\n----------------------------------------\n\nTITLE: Installing Go and Dashing for redux-saga Docset\nDESCRIPTION: This snippet provides the Bash commands needed to install Go, clone the redux-saga docset repository, and start the Dashing build process for the docset. It requires a MacOS environment for installation and assumes basic proficiency with command line operations.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/redux-saga/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install go. On MacOS execute...\n~ brew install go\n# Install Dashing.\n~ go get -u github.com/technosophos/dashing\n# Clone files for Docset.\n~ git clone git@github.com:dmitrytut/redux-saga-docset.git\n# Change into folder.\n~ cd redux-saga-docset/docs\n# Edit dashing.json or leave the defaults. (For further information please visit https://github.com/technosophos/dashing).\n~ vim dashing.json\n# Start generation (depending on the install path of Dashing).\n~ ~/go/bin/dashing build redux-saga\n```\n\n----------------------------------------\n\nTITLE: Referencing Build Script for Odoo v9 Docset\nDESCRIPTION: Refers to a build script named build.sh that handles docset generation for Odoo v9 documentation. The script requires having all necessary pip dependencies for Odoo pre-installed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/odoo_9/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild.sh\n```\n\n----------------------------------------\n\nTITLE: Building Nitrogen Dash docset\nDESCRIPTION: This command builds the Dash docset for the Nitrogen framework. It assumes you are in the `nitrogen_core` directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Nitrogen/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n\"make dash\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dashing for GraphQL Specification Docset\nDESCRIPTION: JSON configuration file for Dashing that defines the docset name, package identifier, index file, CSS selectors for parsing content, and icon specifications. The selectors identify headings as Guide and Section entries in the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/graphql/README.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"GraphQL Specification\",\n    \"package\": \"graphql\",\n    \"index\": \"index.html\",\n    \"selectors\": {\n        \"h2\": {\n          \"type\": \"Guide\",\n          \"regexp\": \"([A-Z0-9.][0-9.]*)(.*)\",\n          \"replacement\": \"$1 $2\"\n        },\n        \"h3\": {\n          \"type\": \"Section\",\n          \"regexp\": \"([A-Z0-9.][0-9.]*)(.*)\",\n          \"replacement\": \"$1 $2\"\n        }\n    },\n    \"icon32x32\": \"icon.png\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Requirements and Building Documentation\nDESCRIPTION: Commands for installing Azure requirements and building HTML documentation\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/papermill/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install requirements-azure.txt\ncd papermill/docs\nmake html\n```\n\n----------------------------------------\n\nTITLE: Creating a Tar Archive for the Docset\nDESCRIPTION: This command packages the generated docset into a compressed tarball while excluding any .DS_Store files. It is crucial for distributing the docset for use in Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Vaadin/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf Vaadin.tgz Vaadin.docset\n```\n\n----------------------------------------\n\nTITLE: Installing Lightning Sphinx Theme\nDESCRIPTION: Commands for installing the custom Pytorch Lightning Sphinx theme\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PytorchLightning/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/PyTorchLightning/lightning_sphinx_theme.git\ncd lightning_sphinx_theme\npython setup.py install\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Building Consul Docsets with Shell Script\nDESCRIPTION: This shell script clones the `consul-dash-doc-generator` repository, navigates into its directory, and executes the `build.sh` script with a specified version as an argument. This process is used to generate a Dash docset for Consul documentation. The user needs to provide the desired Consul version when running the script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Consul/README.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/bartoszj/consul-dash-doc-generator.git\ncd consul-dash-doc-generator\n./build.sh <version>\n```\n\n----------------------------------------\n\nTITLE: Generating Docset Using Bash Script\nDESCRIPTION: This snippet clones the PouchDB docset repository, installs necessary Ruby dependencies using Bundler, and executes Rake to generate the Dash docset. Required dependencies include Ruby, wget, and imagemagick. The expected outcome is the generation of the PouchDB docset at the specified location. Ensure all dependencies are installed beforehand.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PouchDB/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/backspace/pouchdb-docset\ncd pouchdb-docset\nbundle install\nrake\n```\n\n----------------------------------------\n\nTITLE: Modifying makedoc.sh to Disable JavaScript\nDESCRIPTION: This process involves editing the 'makedoc.sh' script to disable JavaScript for search functionality within the docset. The modification ensures that the docset is compatible with Dash's simplified search requirements.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Wand/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nif plutil ... -bool False ...\n```\n\n----------------------------------------\n\nTITLE: Generating Pebble SDK Docset - Ruby\nDESCRIPTION: This snippet demonstrates how to generate SQLite commands using Ruby and pipe them through sqlite3 to update the Pebble docset's database. Ruby and sqlite3 need to be installed as prerequisites. The generate script produces commands that modify the docset database, taking no inputs but affecting the database state.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pebble/README.md#2025-04-16_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nruby generate-pebble-sdk-docset.rb | sqlite3 ./Pebble.docset/Contents/Resources/docSet.dsidx\n```\n\n----------------------------------------\n\nTITLE: Generating the Dash docset using doc2dash\nDESCRIPTION: This command uses `doc2dash` to generate a Dash docset from the HTML documentation.  `-n WPS` sets the name of the docset to \"WPS\", `-i docs/_static/logo.png` specifies the icon for the docset, and `docs/_build/html/` is the directory containing the HTML documentation to convert.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPS/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\"doc2dash -n WPS -i docs/_static/logo.png docs/_build/html/\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Dependencies with Yarn\nDESCRIPTION: This snippet provides the commands to clone the repository and install its dependencies using Yarn. Required dependencies include Node (version 14 or above) and Yarn. The inputs involve running shell commands and the output is a working environment ready for building documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WebExtensions/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:private-face/webextensions-docset.git\ncd webextensions-docset\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Generating OpenGL GLSL Docset\nDESCRIPTION: This Ruby script is responsible for generating the OpenGL GLSL 4.30 extensions docset. It pulls data from the specified OpenGL documentation site and processes it to create a format suitable for Dash. Prerequisites include Ruby environment and access to the mentioned data source.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/OpenGL_GLSL/README.md#2025-04-16_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass GenerateDocset\n  def initialize(source)\n    @source = source\n  end\n\n  def extract_data\n    # Logic to extract data from the source\n  end\n\n  def create_docset\n    # Logic to create the docset structure\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Navigating to Document Directory (Shell)\nDESCRIPTION: This shell command changes the current directory to the Dash Docset documents directory (public/documents/dash). It's necessary to be in this directory to run the subsequent Node.js script for building the Docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ECharts/README.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd public/documents/dash\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Table for Document Indexing - Python\nDESCRIPTION: This snippet establishes a connection to a SQLite database and creates a table for indexing documentation paths from HTML files. It handles potential errors in table creation gracefully.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/TorchMetrics/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n#!/usr/local/bin/python\n\nimport os, re, sqlite3\nfrom bs4 import BeautifulSoup, NavigableString, Tag\n\nimport pdb\n\nconn = sqlite3.connect('torchmetrics.docset/Contents/Resources/docSet.dsidx')\ncur = conn.cursor()\n\ntry: cur.execute('DROP TABLE searchIndex;')\nexcept: pass\ncur.execute('CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);')\ncur.execute('CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);')\n```\n\n----------------------------------------\n\nTITLE: Adding Fallback URL to Info.plist\nDESCRIPTION: This XML snippet needs to be added to the `Contents/Info.plist` file within the generated docset. The `DashDocSetFallbackURL` key specifies the URL that Dash will use as a fallback if it cannot find the requested documentation locally.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/pika/README.md#2025-04-16_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n   <key>DashDocSetFallbackURL</key>\n   <string>http://pika.readthedocs.io</string>\n```\n\n----------------------------------------\n\nTITLE: Modifying Sphinx Configuration Patch for Hypothesis Docs\nDESCRIPTION: Diff patch that modifies the Sphinx configuration to use a basic HTML theme without sidebar for local documentation builds.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Hypothesis/README.md#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/docs/conf.py b/docs/conf.py\nindex b705f57..2831c4a 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -68,9 +68,10 @@ intersphinx_mapping = {\n # -- Options for HTML output ----------------------------------------------\n\n if not on_rtd:  # only import and set the theme if we're building docs locally\n-    import sphinx_rtd_theme\n-    html_theme = 'sphinx_rtd_theme'\n-    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n+    html_theme = 'basic'\n+    html_theme_options = {\n+        'nosidebar': True\n+    }\n\n html_static_path = ['_static']\n```\n\n----------------------------------------\n\nTITLE: Generating the Mediawiki Docset\nDESCRIPTION: This shell script executes the docset generation process, taking the branch name as an argument. The script automates the process of constructing Docker containers, building a modified doxygen, fetching and installing doxygen2docset, patching the Doxyfile, building the documentation, and archiving the docset. Only the `master` branch is currently supported.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Mediawiki/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell Script\nCODE:\n```\n```\n./generate.sh master\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Dashing and Building Docset for Screeps\nDESCRIPTION: Illustrates the installation of the dashing tool needed to build a Dash-compatible documentation set, along with the optional step of copying an icon into the resulting docset folder.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Screeps/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# first install go using your normal package manager, then\ngo get -u github.com/technosophos/dashing\n# alternatively, on macos, you can also use brew:\n# brew install dashing\n# now build the docset:\ncd public\ndashing build Screeps\n# The resulting docset is written to Screeps.docset\n# (Optional: Copy Icon into the docset folder)\ncp ../icon@2x.png Screeps.docset/icon.png\n```\n\n----------------------------------------\n\nTITLE: Generating UIKit Dash Documentation\nDESCRIPTION: This code snippet describes the steps to generate Dash user contributions for UIKit using a Ruby script. It requires Ruby (tested on v2.1.0) with the json, nokogiri, and sqlite3 gems installed.  The process involves cloning a specific GitHub repository and then executing the `generate.rb` Ruby script.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/UIKit/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nRun `ruby generate.rb`\n```\n\n----------------------------------------\n\nTITLE: Building and Packaging CausalPy Documentation\nDESCRIPTION: This snippet details the commands needed to build the CausalPy documentation and convert it into a Dash docset. The process involves executing a make file command followed by using doc2dash to convert and package the docset. The final command creates a gzipped tarball of the generated docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CausalPy/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake file\ndoc2dash -n CausalPy -i source/_static/logo.png -I build/html/index.html -v build/html\ntar cvzf CausalPy.tgz CausalPy.docset\n```\n\n----------------------------------------\n\nTITLE: Adding Fallback URL to Docset Info.plist (XML)\nDESCRIPTION: This XML snippet adds a fallback URL to the docset's Info.plist file, ensuring that users can access the online documentation if needed.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/virtualenv/README.md#2025-04-16_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n   <key>DashDocSetFallbackURL</key>\n   <string>https://virtualenv.pypa.io/en/stable/</string>\n```\n\n----------------------------------------\n\nTITLE: Downloading Documentation using wget\nDESCRIPTION: This snippet outlines the command to download a complete set of documentation from rtfm.modx.com using wget. It includes various flags to ensure that the download is thorough and structured correctly.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/MODX/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n``wget --recursive --no-host-directories --no-host-directories --no-clobber --no-directories --page-requisites --html-extension --convert-links --restrict-file-names=windows --domains rtfm.modx.com --no-parent rtfm.modx.com``\n```\n\n----------------------------------------\n\nTITLE: Adding Index File Path to Info.plist (XML)\nDESCRIPTION: This XML snippet specifies the index file path for the Numba docset, which is used by Dash to determine the entry point for the documentation. The dashIndexFilePath key is set to index.html, indicating that the index.html file should be used as the main page.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Numba/README.md#2025-04-16_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<key>dashIndexFilePath</key>\n<string>index.html</string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Info.plist Docset Metadata\nDESCRIPTION: XML snippet to add index file path and fallback URL to the docset configuration\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Wagtail/README.md#2025-04-16_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<key>dashIndexFilePath</key>\n<string>index.html</string>\n<key>DashDocSetFallbackURL</key>\n<string>http://docs.wagtail.io/en/[version]/</string>\n```\n\n----------------------------------------\n\nTITLE: Converting Documentation to Dash Docset with doc2dash\nDESCRIPTION: Example doc2dash command with options to create an iPython docset compatible with Dash, including setting the name, destination directory, icon, and other parameters.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/iPython/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -n \"iPython\" -d \"/Users/angelo/Library/ApplicationSupport/doc2dash/DocSets/ipython/7-14-0\" -i \"/Users/angelo/Pictures/Icons/dash/ipython/ipython-text/icon@2x.png\" -v -j -u \"https://ipython.readthedocs.io/en/stable/\" -I \"index.html\" ./ -a -f\n```\n\n----------------------------------------\n\nTITLE: Pyramid Docset Configuration\nDESCRIPTION: JSON configuration file for the Pyramid docset, including version information and author details.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pyramid/README.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"Pyramid\",\n    \"version\": \"1.6.1\",\n    \"archive\": \"Pyramid.tgz\",\n    \"author\": {\n        \"name\": \"Steve Piercy\",\n        \"link\": \"https://twitter.com/steve_piercy\"\n    },\n    \"aliases\": [],\n    \"specific_versions\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Docset Archive to Repository\nDESCRIPTION: Command to move the generated archive to the local Dash-User-Contributions repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Pyramid/README.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmv Pyramid.tgz /path/to/cloned/repo/Dash-User-Contributions/docsets/Pyramid/Pyramid.tgz\n```\n\n----------------------------------------\n\nTITLE: Generating and Adding Airflow Docset to Dash\nDESCRIPTION: Commands to clone the Airflow repository, build the documentation, and generate the docset using doc2dash. The final command adds the generated docset to Dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Airflow/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/apache/airflow.git\n$ cd docs\n$ make\n$ doc2dash -n Airflow --icon img/logos/airflow_64x64_emoji_transparent.png --add-to-dash -d ~/Library/Application\\ Support/Dash/User\\ Contributed/Airflow _build/\n```\n\n----------------------------------------\n\nTITLE: Building AWS CDK Docset using Bash\nDESCRIPTION: Commands to clone the repository and build the AWS CDK docset. Requires bash, git, GNU Make, GNU Coreutils, and Python 3.10. The resulting docset will be available in the .build/latest directory.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/AWS_CDK/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:roberth-k/dash-docset-aws-cdk.git\ncd dash-docset-aws-cdk\nmake\n```\n\n----------------------------------------\n\nTITLE: Python Package Reference in Markdown\nDESCRIPTION: References the python-telegram-bot package name\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Python_Telegram_Bot/README.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npython-telegram-bot\n```\n\n----------------------------------------\n\nTITLE: Running Blender to Generate Docs with Sphinx\nDESCRIPTION: This snippet lists the command to run Blender in the background and execute a Python script that generates Sphinx documentation files from the Blender's Python API.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/bpy/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nblender --background --factory-startup -noaudio -python doc/python_api/sphinx_doc_gen.py\n```\n\n----------------------------------------\n\nTITLE: Archiving Docset into a Compressed File - Bash\nDESCRIPTION: This command archives the generated docset into a .tgz file, excluding any unwanted files like '.DS_Store'. This ensures that the docset can be easily distributed or stored.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/psycopg2/README.md#2025-04-16_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf psycopg2.tgz psycopg2.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Nengo Core\nDESCRIPTION: Commands to clone the Nengo Core repository from GitHub and install required dependencies. Includes installing the package in editable mode with all extras and setting up pre-commit hooks.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/nengo/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/nengo/nengo.git\ncd nengo\npip install -e '.[all]' --user\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Mypy Documentation\nDESCRIPTION: Markdown heading and list containing metadata about the Mypy docset contributor and documentation links\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/mypy/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[mypy](https://github.com/python/mypy)\n=======================\n\n* Created by [NeuroForLunch](https://github.com/NeuroForLunch)\n* [@NeuroForLunch](https://twitter.com/NeuroForLunch)\n* This docset was created using doc2dash\n* Visit the online version at https://mypy.readthedocs.io\n```\n\n----------------------------------------\n\nTITLE: Archiving Docset for Dash Contribution in Bash\nDESCRIPTION: This command creates a gzipped tar archive of the docset, excluding .DS_Store files. It's used to package the docset for submission to the Dash-User-Contributions repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntar --exclude='.DS_Store' -cvzf <docset name>.tgz <docset name>.docset\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub Repository in Shell\nDESCRIPTION: This shell snippet stages changes, commits them with a message, and then pushes the updates to the user's fork of the Dash-User-Contributions repository on GitHub.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\ngit commit -m \"renpy-engine-x.x.x\"\ngit push origin\n```\n\n----------------------------------------\n\nTITLE: Archiving Vulkan Documentation\nDESCRIPTION: Archive processing and distribution record for Vulkan documentation files\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Vulkan/versions/1.0.56/Vulkan.tgz.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nArchive \"Vulkan.tgz\" was processed at this location, pushed to the CDN and completely removed from git.\n```\n\n----------------------------------------\n\nTITLE: Generating Apache Commons Text Docset using javadocset\nDESCRIPTION: Command to generate a Dash docset from Apache Commons Text javadoc documentation using the javadocset tool. Takes the docset name 'Apache_Commons_Text' and the 'apidocs' directory as input parameters.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Apache_Commons_Text/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./javadocset Apache_Commons_Text apidocs\n```\n\n----------------------------------------\n\nTITLE: Fixing a Bug with 1.1.x Tagged Versions\nDESCRIPTION: This snippet describes the steps to fix a known bug in the 1.1.x tagged versions of CanJS due to issues in a support file.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nRemove single-line comments from the .jshintrc file, then re-run:\ngrant docjs\n```\n\n----------------------------------------\n\nTITLE: Generating Docset using Python script\nDESCRIPTION: This snippet describes how to generate the docset by executing the `make_docset.py` script after cloning the repository. The script uses `doc2dash` to generate the documentation in the appropriate format.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PyMuPDF/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n``make_docset.py``\n```\n\n----------------------------------------\n\nTITLE: Deleting Branch and Files in Shell\nDESCRIPTION: These shell commands delete a local git branch and a file using trash, a shell command to remove files by moving them to trash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/RenPy_Engine/README.md#2025-04-16_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngit branch -d renpy-engine-x.x.x\ngit push origin --delete renpy-engine-x.x.x\ntrash RenPy_Engine.docset\n```\n\n----------------------------------------\n\nTITLE: Cloning Docset Generation Repository for FileMaker\nDESCRIPTION: Illustrates how to clone the specific repository needed for FileMaker docset generation. Ensure you have appropriate access rights to the repository.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/FileMaker/README.md#2025-04-16_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone git@github.com:iNtergrated/FileMaker-Dash-Docset.git\n```\n\n----------------------------------------\n\nTITLE: Initializing Hapi.js Docset Structure in Markdown\nDESCRIPTION: Markdown structure defining the Hapi.js docset contribution, including contributor information, repository links, and basic setup instructions.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Hapi/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhapi.docset\n===========\n\n* Contributed by: Timo Behrmann (https://twitter.com/z0mt3c)\n* Generator repository: https://github.com/z0mt3c/hapi.docset (seperate branches for joi.docset and hapi.docset)\n* Instructions are documented within the repo\n```\n\n----------------------------------------\n\nTITLE: Version and Timestamp Tracking\nDESCRIPTION: Captures metadata for the archive processing, including date of processing and SHA1 hash for version control\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/DokuWiki/versions/3.0-frusterick-manners/dokuwiki-docset.tgz.txt#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDate: 2017-05-16 20:21:21 +0000\nSHA1: 46de169ba3aa0f1913bd51cdd05934a58ee8f053\n```\n\n----------------------------------------\n\nTITLE: Building and Installing sqlite-utils Docset Locally\nDESCRIPTION: This command cleans existing artifacts, builds the sqlite-utils docset for version 3.36, and installs it locally using the -A option for doc2dash.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/sqlite-utils/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake clean; make DOC2DASH_OPTS=-A VERSION=3.36\n```\n\n----------------------------------------\n\nTITLE: Generating Dash Docset with doc2dash\nDESCRIPTION: Command to convert LightGBM HTML documentation into a Dash-compatible docset, using a custom icon and specifying the documentation source directory\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/LightGBM/README.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndoc2dash -n LightGBM -i icon.png -A LightGBM/docs/_build/html\n```\n\n----------------------------------------\n\nTITLE: Cloning WPILib Repository Shallow Clone\nDESCRIPTION: Git command to clone the allwpilib repository with minimal history for faster and more space-efficient download\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/WPILib/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 github.com/wpilibsuite/allwpilib.git\n```\n\n----------------------------------------\n\nTITLE: Checking Out Specific Branch for FileMaker Version\nDESCRIPTION: Shows how to checkout a branch for a specific version of FileMaker after cloning the repository. Replace 'FileMaker-16' with your specific version branch.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/FileMaker/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncheckout FileMaker-16\n```\n\n----------------------------------------\n\nTITLE: Generating Bottle Dash Docset\nDESCRIPTION: This command uses doc2dash to generate a Dash docset for Bottle. It specifies the docset name, icon, source directory, and index page.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Bottle/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndoc2dash -f -n \"Bottle\" -i favicon.png -a html -I index.html\n```\n\n----------------------------------------\n\nTITLE: Installing and Building MS SQL Server Docset\nDESCRIPTION: Commands for initializing and updating git submodules, and generating HTML and documentation files using make commands.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ms_sql/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule init\ngit submodule update --recursive --remote\nmake genhtml\nmake gendocs\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository for SML Docset Builder\nDESCRIPTION: This shell command clones the SML docset builder repository from GitHub. It is a prerequisite for building the Standard ML documentation set.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Standard_ML/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/toy/SML-docset-builder.git\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for a Specific Version\nDESCRIPTION: This section describes how to switch to a specific version of CanJS and generate its documentation using Grunt.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/CanJS/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd /path/to/canjs.com/can\ngit checkout v2.0.7 # or another tagged version number\ncd ..\ngrant docjs\n```\n\n----------------------------------------\n\nTITLE: Processing Archive Metadata\nDESCRIPTION: Details of an archive processing event, including timestamp, filename, and SHA1 hash\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Nette_Framework/versions/2.2.11/nettefw.tgz.txt#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nArchive \"nettefw.tgz\" was processed at this location, pushed to the CDN and completely removed from git.\n\nDate: 2016-01-27 17:17:24 +0000\nSHA1: ac1a805b02d02266c2769224b697cc4a0dc4fe87\n```\n\n----------------------------------------\n\nTITLE: Make Command for Generating Docset File\nDESCRIPTION: This snippet runs the make command to generate the HTML documentation and the docset file from the generated documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PhysicsFS/README.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ncd docs/html && make\n```\n\n----------------------------------------\n\nTITLE: Cloning Yarn Docset Repository\nDESCRIPTION: Clones the Yarn Docset repository from GitHub. This is the initial step to obtain the source code needed for further processing.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Yarn/README.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. clone https://github.com/payers1/yarn-docset\n```\n\n----------------------------------------\n\nTITLE: Running igraph Dash docset generation script in Python\nDESCRIPTION: Command to run the Python script that generates the igraph Dash docset. The script requires Python 3, BeautifulSoup, and an internet connection to download the latest igraph release.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/igraph/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nigraph_dash_docset.py\n```\n\n----------------------------------------\n\nTITLE: CMake Command for Generating Documentation\nDESCRIPTION: This snippet provides the command to create a build directory and process CMake to generate the documentation for the PhysicsFS project.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/PhysicsFS/README.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdir build && cd build && cmake .. && make docs\n```\n\n----------------------------------------\n\nTITLE: Generating Ghidra Docset with Javadocset\nDESCRIPTION: Command to generate a Dash-compatible docset using the javadocset tool, with the Ghidra API documentation path as input\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Ghidra/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\njavadocset Ghidra \"/private/var/folders/.../GhidraAPI_javadoc/9.1.2/api/\"\n```\n\n----------------------------------------\n\nTITLE: Scraping libGDX Javadocs Using HTTrack\nDESCRIPTION: Command to download and scrape the libGDX nightly API documentation using HTTrack web crawler.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/libgdx/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttrack http://libgdx.badlogicgames.com/nightlies/docs/api/\n```\n\n----------------------------------------\n\nTITLE: Generating P5.js Docset Index\nDESCRIPTION: Commands to navigate to the scripts directory and execute the docset generation script for P5.js documentation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/p5js/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cd scripts\n$ node scripts/generateDocset\n```\n\n----------------------------------------\n\nTITLE: Installing Missing R Package Dependencies\nDESCRIPTION: Command to install a missing R package dependency when staticdocs fails during documentation generation.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/ggplot2/README.md#2025-04-16_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ninstall.packages(\"SOME_PACKAGE\")\n```\n\n----------------------------------------\n\nTITLE: Building iPython HTML Documentation\nDESCRIPTION: Commands to navigate to the docs directory and build the HTML documentation for iPython.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/iPython/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd docs\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake html\n```\n\n----------------------------------------\n\nTITLE: Setting Dash Docset Index File\nDESCRIPTION: Configuration entry for Info.plist to specify the index page for the docset.\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/mlpy/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndashIndexFilePath: index.html\n```\n\n----------------------------------------\n\nTITLE: Converting Documentation to Dash Docset\nDESCRIPTION: Command to convert HTML documentation to a Dash-compatible docset using doc2dash\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/Wagtail/README.md#2025-04-16_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ndoc2dash -n Wagtail html\n```\n\n----------------------------------------\n\nTITLE: Generating Mori Docset\nDESCRIPTION: Command to generate the Mori docset using the shell script\nSOURCE: https://github.com/Hammerspoon/Dash-User-Contributions/blob/master/docsets/mori/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh genDocset.sh\n```"
  }
]