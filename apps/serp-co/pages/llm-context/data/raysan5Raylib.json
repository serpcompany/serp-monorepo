[
  {
    "owner": "raysan5",
    "repo": "raylib",
    "content": "TITLE: Creating Basic Window with Raylib in C\nDESCRIPTION: Demonstrates how to create a basic window using raylib, initialize graphics, and display text. The example creates an 800x450 window and renders the text 'Congrats! You created your first window!' in light gray color.\nSOURCE: https://github.com/raysan5/raylib/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include \"raylib.h\"\n\nint main(void)\n{\n    InitWindow(800, 450, \"raylib [core] example - basic window\");\n\n    while (!WindowShouldClose())\n    {\n        BeginDrawing();\n            ClearBackground(RAYWHITE);\n            DrawText(\"Congrats! You created your first window!\", 190, 200, 20, LIGHTGRAY);\n        EndDrawing();\n    }\n\n    CloseWindow();\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Image Loading and Generation Functions in C using Raylib\nDESCRIPTION: Functions for loading images from various sources (files, memory, textures, screen) and generating images with different patterns. These functions return an Image struct and have various input parameters.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_59\n\nLANGUAGE: C\nCODE:\n```\nImage LoadImage(const char *fileName);\nImage LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize);\nImage LoadImageAnim(const char *fileName, int *frames);\nImage LoadImageAnimFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int *frames);\nImage LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);\nImage LoadImageFromTexture(Texture2D texture);\nImage LoadImageFromScreen(void);\nbool IsImageValid(Image image);\nvoid UnloadImage(Image image);\nbool ExportImage(Image image, const char *fileName);\nunsigned char *ExportImageToMemory(Image image, const char *fileType, int *fileSize);\nbool ExportImageAsCode(Image image, const char *fileName);\nImage GenImageColor(int width, int height, Color color);\nImage GenImageGradientLinear(int width, int height, int direction, Color start, Color end);\nImage GenImageGradientRadial(int width, int height, float density, Color inner, Color outer);\nImage GenImageGradientSquare(int width, int height, float density, Color inner, Color outer);\n```\n\n----------------------------------------\n\nTITLE: Building Individual Examples in CMake\nDESCRIPTION: Iterates through each example source file to create executable targets. Extracts the example name from the source file, creates an executable, links with raylib and math libraries as needed, and handles resource file paths especially for Web platform.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Do each example\nforeach (example_source ${example_sources})\n    # Create the basename for the example\n    get_filename_component(example_name ${example_source} NAME)\n    string(REPLACE \".c\" \"\" example_name ${example_name})\n\n    # Setup the example\n    add_executable(${example_name} ${example_source})\n\n    target_link_libraries(${example_name} raylib)\n    if (NOT WIN32)\n        target_link_libraries(${example_name} m)\n    endif()\n\n    string(REGEX MATCH \".*/.*/\" resources_dir ${example_source})\n    string(APPEND resources_dir \"resources\")\n\n    if (${PLATFORM} MATCHES \"Web\" AND EXISTS ${resources_dir})\n        # The local resources path needs to be mapped to /resources virtual path\n        string(APPEND resources_dir \"@resources\")\n        set_target_properties(${example_name} PROPERTIES LINK_FLAGS \"--preload-file ${resources_dir}\")\n    endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: 3D Drawing Functions in Raylib (C)\nDESCRIPTION: Functions for drawing 3D primitives such as lines, points, circles, triangles, and cubes. These functions allow for rendering basic 3D shapes in Raylib's 3D environment.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_70\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);\nvoid DrawPoint3D(Vector3 position, Color color);\nvoid DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color);\nvoid DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color);\nvoid DrawCube(Vector3 position, float width, float height, float length, Color color);\nvoid DrawCubeWires(Vector3 position, float width, float height, float length, Color color);\n```\n\n----------------------------------------\n\nTITLE: Collision Detection in RayLib (C)\nDESCRIPTION: Functions for detecting collisions between 3D objects and ray casting in 3D space. These include sphere-sphere collision, box-box collision, ray collision against various primitives, and provide detailed collision information.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_83\n\nLANGUAGE: C\nCODE:\n```\nbool CheckCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2);\nbool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);\nbool CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius);\nRayCollision GetRayCollisionSphere(Ray ray, Vector3 center, float radius);\nRayCollision GetRayCollisionBox(Ray ray, BoundingBox box);\nRayCollision GetRayCollisionMesh(Ray ray, Mesh mesh, Matrix transform);\nRayCollision GetRayCollisionTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);\nRayCollision GetRayCollisionQuad(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3, Vector3 p4);\n```\n\n----------------------------------------\n\nTITLE: Generating 3D Meshes in RayLib (C)\nDESCRIPTION: Collection of functions for creating various 3D mesh primitives including polygons, planes, cubes, spheres, cylinders, and more. These functions help in procedural geometry generation for 3D rendering and are fundamental for creating basic 3D scenes.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_80\n\nLANGUAGE: C\nCODE:\n```\nMesh GenMeshPoly(int sides, float radius);\nMesh GenMeshPlane(float width, float length, int resX, int resZ);\nMesh GenMeshCube(float width, float height, float length);\nMesh GenMeshSphere(float radius, int rings, int slices);\nMesh GenMeshHemiSphere(float radius, int rings, int slices);\nMesh GenMeshCylinder(float radius, float height, int slices);\nMesh GenMeshCone(float radius, float height, int slices);\nMesh GenMeshTorus(float radius, float size, int radSeg, int sides);\nMesh GenMeshKnot(float radius, float size, int radSeg, int sides);\nMesh GenMeshHeightmap(Image heightmap, Vector3 size);\nMesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);\n```\n\n----------------------------------------\n\nTITLE: Building raylib Project for Desktop using CMake\nDESCRIPTION: These commands use CMake to generate build files and compile the project for desktop platforms. It creates a 'build' directory and executes the build process.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CMake/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B build\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Loading and Managing 3D Models with Raylib\nDESCRIPTION: Functions for loading 3D models from files or meshes, checking model validity, unloading models from memory, and calculating model bounding boxes.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_75\n\nLANGUAGE: C\nCODE:\n```\nModel LoadModel(const char *fileName);\n\nModel LoadModelFromMesh(Mesh mesh);\n\nbool IsModelValid(Model model);\n\nvoid UnloadModel(Model model);\n\nBoundingBox GetModelBoundingBox(Model model);\n```\n\n----------------------------------------\n\nTITLE: Collision Detection Functions in C using Raylib\nDESCRIPTION: A set of functions for checking collisions between various shapes including rectangles, circles, lines, points, and polygons. These functions return a boolean indicating whether a collision occurred.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_58\n\nLANGUAGE: C\nCODE:\n```\nbool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);\nbool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);\nbool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);\nbool CheckCollisionCircleLine(Vector2 center, float radius, Vector2 p1, Vector2 p2);\nbool CheckCollisionPointRec(Vector2 point, Rectangle rec);\nbool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);\nbool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);\nbool CheckCollisionPointLine(Vector2 point, Vector2 p1, Vector2 p2, int threshold);\nbool CheckCollisionPointPoly(Vector2 point, const Vector2 *points, int pointCount);\nbool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint);\nRectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);\n```\n\n----------------------------------------\n\nTITLE: Measuring Text Dimensions in Raylib (C)\nDESCRIPTION: Functions for measuring text width and size using default or custom fonts. Includes options for different font sizes and character spacing.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_67\n\nLANGUAGE: C\nCODE:\n```\nint MeasureText(const char *text, int fontSize);\nVector2 MeasureTextEx(Font font, const char *text, float fontSize, float spacing);\n```\n\n----------------------------------------\n\nTITLE: Input Handling Functions in Raylib\nDESCRIPTION: Functions for handling keyboard and gamepad input, including key states, character input, and gamepad button detection.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_42\n\nLANGUAGE: C\nCODE:\n```\nbool IsKeyPressed(int key);                      // Check if key pressed once\nbool IsKeyDown(int key);                           // Check if key is being pressed\nint GetKeyPressed(void);                           // Get key pressed (keycode)\nconst char *GetKeyName(int key);                   // Get key name for current layout\nbool IsGamepadAvailable(int gamepad);              // Check gamepad availability\n```\n\n----------------------------------------\n\nTITLE: Drawing 3D Models with Raylib\nDESCRIPTION: Functions for rendering 3D models with various options including standard rendering, wireframe rendering, point cloud rendering, and extended parameter configurations.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_76\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawModel(Model model, Vector3 position, float scale, Color tint);\n\nvoid DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);\n\nvoid DrawModelWires(Model model, Vector3 position, float scale, Color tint);\n\nvoid DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);\n\nvoid DrawModelPoints(Model model, Vector3 position, float scale, Color tint);\n\nvoid DrawModelPointsEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);\n```\n\n----------------------------------------\n\nTITLE: Analyzing and Exporting 3D Mesh Data with Raylib\nDESCRIPTION: Functions for computing mesh properties (bounding box, tangents) and exporting mesh data to files, either in a standard format or as C code arrays.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_79\n\nLANGUAGE: C\nCODE:\n```\nBoundingBox GetMeshBoundingBox(Mesh mesh);\n\nvoid GenMeshTangents(Mesh *mesh);\n\nbool ExportMesh(Mesh mesh, const char *fileName);\n\nbool ExportMeshAsCode(Mesh mesh, const char *fileName);\n```\n\n----------------------------------------\n\nTITLE: Image Color Adjustment in Raylib\nDESCRIPTION: This snippet covers Raylib functions for adjusting image colors, including tinting, inversion, grayscale conversion, and adjusting contrast and brightness. These functions modify the color values of the image data in-place.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_64\n\nLANGUAGE: C\nCODE:\n```\nvoid ImageColorTint(Image *image, Color color);  // Modify image color: tint\nvoid ImageColorInvert(Image *image);  // Modify image color: invert\nvoid ImageColorGrayscale(Image *image);  // Modify image color: grayscale\nvoid ImageColorContrast(Image *image, float contrast);  // Modify image color: contrast (-100 to 100)\nvoid ImageColorBrightness(Image *image, int brightness);  // Modify image color: brightness (-255 to 255)\nvoid ImageColorReplace(Image *image, Color color, Color replace);  // Modify image color: replace color\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Control Flow Statement Formatting in C\nDESCRIPTION: This snippet illustrates the proper formatting for control flow statements in C, including if, while, for, and switch statements. It emphasizes the use of spaces after keywords and proper indentation.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONVENTIONS.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nif (condition) value = 0;\n\nwhile (!WindowShouldClose())\n{\n\n}\n\nfor (int i = 0; i < NUM_VALUES; i++) printf(\"%i\", i);\n\n// Be careful with the switch formatting!\nswitch (value)\n{\n    case 0:\n    {\n\n    } break;\n    case 2: break;\n    default: break;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing 3D Mesh Data with Raylib\nDESCRIPTION: Functions for handling mesh operations like uploading to GPU, updating buffer data, unloading from memory, and drawing meshes with materials and transformations.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_78\n\nLANGUAGE: C\nCODE:\n```\nvoid UploadMesh(Mesh *mesh, bool dynamic);\n\nvoid UpdateMeshBuffer(Mesh mesh, int index, const void *data, int dataSize, int offset);\n\nvoid UnloadMesh(Mesh mesh);\n\nvoid DrawMesh(Mesh mesh, Material material, Matrix transform);\n\nvoid DrawMeshInstanced(Mesh mesh, Material material, const Matrix *transforms, int instances);\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Project Definition for Raylib\nDESCRIPTION: Establishes the minimum required CMake version (3.25) and defines the project name as 'raylib'. The comment explains that this configuration avoids warnings when including raylib using CMake fetch content.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.25)\n#this change avoid the warning that appear when we include raylib using Cmake fatch content \nproject(raylib)\n```\n\n----------------------------------------\n\nTITLE: Drawing Basic 3D Primitives with Raylib\nDESCRIPTION: Functions for rendering simple 3D primitives including planes, rays, and grids, which are useful for reference and debugging in 3D space.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_74\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawPlane(Vector3 centerPos, Vector2 size, Color color);\n\nvoid DrawRay(Ray ray, Color color);\n\nvoid DrawGrid(int slices, float spacing);\n```\n\n----------------------------------------\n\nTITLE: Checking Mouse Button Press in C\nDESCRIPTION: Function to check if a specific mouse button has been pressed once. It takes a button identifier as a parameter and returns a boolean value.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_46\n\nLANGUAGE: C\nCODE:\n```\nbool IsMouseButtonPressed(int button);\n```\n\n----------------------------------------\n\nTITLE: Image Generation and Transformations in Raylib\nDESCRIPTION: This snippet lists function declarations for generating and manipulating images in Raylib, including pattern generation, noise generation, text-to-image conversion, and basic image transformations.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_60\n\nLANGUAGE: C\nCODE:\n```\nImage GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2);  // Generate image: checked\nImage GenImageWhiteNoise(int width, int height, float factor);  // Generate image: white noise\nImage GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale);  // Generate image: perlin noise\nImage GenImageCellular(int width, int height, int tileSize);  // Generate image: cellular algorithm, bigger tileSize means bigger cells\nImage GenImageText(int width, int height, const char *text);  // Generate image: grayscale image from text data\nImage ImageCopy(Image image);  // Create an image duplicate (useful for transformations)\nImage ImageFromImage(Image image, Rectangle rec);  // Create an image from another image piece\nImage ImageFromChannel(Image image, int selectedChannel);  // Create an image from a selected channel of another image (GRAYSCALE)\nImage ImageText(const char *text, int fontSize, Color color);  // Create an image from text (default font)\nImage ImageTextEx(Font font, const char *text, float fontSize, float spacing, Color tint);  // Create an image from text (custom sprite font)\n```\n\n----------------------------------------\n\nTITLE: Setting Main Build Configuration Options\nDESCRIPTION: Defines boolean options for building examples, customizing the build, and enabling various sanitizers for debugging.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Configuration options\noption(BUILD_EXAMPLES \"Build the examples.\" ${RAYLIB_IS_MAIN})\noption(CUSTOMIZE_BUILD \"Show options for customizing your Raylib library build.\" OFF)\noption(ENABLE_ASAN \"Enable AddressSanitizer (ASAN) for debugging (degrades performance)\" OFF)\noption(ENABLE_UBSAN \"Enable UndefinedBehaviorSanitizer (UBSan) for debugging\" OFF)\noption(ENABLE_MSAN \"Enable MemorySanitizer (MSan) for debugging (not recommended to run with ASAN)\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Model Animation Functions in RayLib (C)\nDESCRIPTION: Functions for loading, updating, and managing model animations. These handle animation loading from files, updating model animation poses, skinning with bone matrices, and validating animations against models.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_82\n\nLANGUAGE: C\nCODE:\n```\nModelAnimation *LoadModelAnimations(const char *fileName, int *animCount);\nvoid UpdateModelAnimation(Model model, ModelAnimation anim, int frame);\nvoid UpdateModelAnimationBones(Model model, ModelAnimation anim, int frame);\nvoid UnloadModelAnimation(ModelAnimation anim);\nvoid UnloadModelAnimations(ModelAnimation *animations, int animCount);\nbool IsModelAnimationValid(Model model, ModelAnimation anim);\n```\n\n----------------------------------------\n\nTITLE: Window Properties Manipulation Functions in Raylib\nDESCRIPTION: Functions for setting window appearance and behavior properties. These allow customizing window title, icon, position, size, opacity, and monitor placement.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nvoid SetWindowIcon(Image image);\nvoid SetWindowIcons(Image *images, int count);\nvoid SetWindowTitle(const char *title);\nvoid SetWindowPosition(int x, int y);\nvoid SetWindowMonitor(int monitor);\nvoid SetWindowMinSize(int width, int height);\nvoid SetWindowMaxSize(int width, int height);\nvoid SetWindowSize(int width, int height);\nvoid SetWindowOpacity(float opacity);\nvoid SetWindowFocused(void);\n```\n\n----------------------------------------\n\nTITLE: Audio System and Sound Loading in RayLib (C)\nDESCRIPTION: Functions for initializing the audio system, loading sounds and waves, and controlling audio playback. These handle audio device initialization, volume control, and loading sound data from files or memory.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_84\n\nLANGUAGE: C\nCODE:\n```\nvoid InitAudioDevice(void);\nvoid CloseAudioDevice(void);\nbool IsAudioDeviceReady(void);\nvoid SetMasterVolume(float volume);\nfloat GetMasterVolume(void);\nWave LoadWave(const char *fileName);\nWave LoadWaveFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);\nbool IsWaveValid(Wave wave);\nSound LoadSound(const char *fileName);\nSound LoadSoundFromWave(Wave wave);\nSound LoadSoundAlias(Sound source);\nbool IsSoundValid(Sound sound);\n```\n\n----------------------------------------\n\nTITLE: Raylib Application Compilation and Execution Script\nDESCRIPTION: A comprehensive batch script that sets up the environment, cleans previous builds, compiles a Raylib program with proper linking flags, and executes the resulting application. Includes flags for OpenGL, GDI, and WinMM libraries.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n::raylib_compile_execute\necho > Setup required Environment\necho ---------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\w64devkit\\bin\nENV_SET PATH=$(COMPILER_PATH)\nSET CC=gcc\nSET CFLAGS=$(RAYLIB_PATH)\\src\\raylib.rc.data -s -static -O2 -std=c99 -Wall -I$(RAYLIB_PATH)\\src -Iexternal -DPLATFORM_DESKTOP\nSET LDFLAGS=-lraylib -lopengl32 -lgdi32 -lwinmm\ncd $(CURRENT_DIRECTORY)\necho\necho > Clean latest build\necho ---------------------\ncmd /c IF EXIST $(NAME_PART).exe del /F $(NAME_PART).exe\necho\necho > Saving Current File\necho -----------------------\nnpp_save\necho\necho > Compile program\necho -------------------\n$(CC) --version\n$(CC) -o $(NAME_PART).exe $(FILE_NAME) $(CFLAGS) $(LDFLAGS)\necho\necho > Reset Environment\necho ---------------------\nENV_UNSET PATH\necho\necho > Execute program\necho -------------------\ncmd /c IF EXIST $(NAME_PART).exe $(NAME_PART).exe\n```\n\n----------------------------------------\n\nTITLE: Image Flipping and Rotation in Raylib\nDESCRIPTION: This snippet covers Raylib functions for flipping and rotating images. These functions perform geometric transformations on the image data, modifying the original image in-place.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_63\n\nLANGUAGE: C\nCODE:\n```\nvoid ImageFlipVertical(Image *image);  // Flip image vertically\nvoid ImageFlipHorizontal(Image *image);  // Flip image horizontally\nvoid ImageRotate(Image *image, int degrees);  // Rotate image by input angle in degrees (-359 to 359)\nvoid ImageRotateCW(Image *image);  // Rotate image clockwise 90deg\nvoid ImageRotateCCW(Image *image);  // Rotate image counter-clockwise 90deg\n```\n\n----------------------------------------\n\nTITLE: Drawing 3D Spheres with Raylib\nDESCRIPTION: Functions for drawing various types of spheres in 3D space, including solid spheres, wireframe spheres, and spheres with configurable detail levels.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_71\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawSphere(Vector3 centerPos, float radius, Color color);\n\nvoid DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color);\n\nvoid DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color);\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Example Exclusions for Android in CMake\nDESCRIPTION: Excludes examples that are not compatible with the Android platform. Removes 3D, complex graphics, and other examples that may not work well on Android devices due to performance or API limitations.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (${PLATFORM} MATCHES \"Android\")\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/others/rlgl_standalone.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/others/standard_lighting.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_3d_picking.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_vr_simulator.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_3d_camera_free.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_3d_camera_first_person.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_world_screen.c)\n\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_mesh_picking.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_cubicmap.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_skybox.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_mesh_picking.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_mesh_generation.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_heightmap.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_billboard.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_rlgl_solar_system.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_rlgl_full_solar_system.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_solar_system.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_obj_viewer.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_animation.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_first_person_maze.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/models/models_magicavoxel_loading.c)\n\n\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/shaders/shaders_custom_uniform.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/shaders/shaders_model_shader.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/shaders/shaders_view_depth.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/shaders/shaders_postprocessing.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/shaders/shaders_raymarching.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/shaders/shaders_palette_switch.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/shaders/shaders_basic_lighting.c)\n```\n\n----------------------------------------\n\nTITLE: Updating Sound Buffer in C with raylib\nDESCRIPTION: This function updates a sound buffer with new data. It takes a Sound object, a pointer to the new data, and the number of samples to update.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_85\n\nLANGUAGE: C\nCODE:\n```\nvoid UpdateSound(Sound sound, const void *data, int sampleCount);\n```\n\n----------------------------------------\n\nTITLE: UTF-8 Text Handling in Raylib (C)\nDESCRIPTION: Functions for loading, unloading, and processing UTF-8 encoded text. Includes codepoint manipulation and conversion between UTF-8 and codepoints.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_68\n\nLANGUAGE: C\nCODE:\n```\nchar *LoadUTF8(const int *codepoints, int length);\nvoid UnloadUTF8(char *text);\nint *LoadCodepoints(const char *text, int *count);\nvoid UnloadCodepoints(int *codepoints);\nint GetCodepointCount(const char *text);\nint GetCodepoint(const char *text, int *codepointSize);\nconst char *CodepointToUTF8(int codepoint, int *utf8Size);\n```\n\n----------------------------------------\n\nTITLE: Drawing 3D Capsules with Raylib\nDESCRIPTION: Functions for rendering capsules (cylinders with hemispherical ends) in 3D space, in both solid and wireframe modes with configurable detail levels.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_73\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawCapsule(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color);\n\nvoid DrawCapsuleWires(Vector3 startPos, Vector3 endPos, float radius, int slices, int rings, Color color);\n```\n\n----------------------------------------\n\nTITLE: Excluding Thread-Dependent Examples in CMake\nDESCRIPTION: Removes examples that require pthread support if the system doesn't have pthreads or stdatomic.h header. Specifically excludes the core_loading_thread.c example when these dependencies are not available.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_USE_PTHREADS_INIT OR NOT HAVE_STDATOMIC_H)\n    # Items requiring pthreads\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_loading_thread.c)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Material Management in RayLib (C)\nDESCRIPTION: Functions for loading, validating, configuring and unloading materials in RayLib. These functions allow for material creation, texture assignment to specific material map types, and managing model mesh materials.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_81\n\nLANGUAGE: C\nCODE:\n```\nMaterial *LoadMaterials(const char *fileName, int *materialCount);\nMaterial LoadMaterialDefault(void);\nbool IsMaterialValid(Material material);\nvoid UnloadMaterial(Material material);\nvoid SetMaterialTexture(Material *material, int mapType, Texture2D texture);\nvoid SetModelMeshMaterial(Model *model, int meshId, int materialId);\n```\n\n----------------------------------------\n\nTITLE: Converting World Space to Screen Space in C\nDESCRIPTION: Function to get the screen space position for a 3D world space position. It takes a 3D position and camera as parameters and returns a 2D Vector.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nVector2 GetWorldToScreen(Vector3 position, Camera camera);\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies for Raylib Build Configuration\nDESCRIPTION: Configures CMake policies that control variable expansion in conditionals (CMP0054) and visibility presets for static libraries (CMP0063). These settings ensure proper handling of platform variables and symbol visibility during the build process.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Avoid excessive expansion of variables in conditionals. In particular, if\n# \"PLATFORM\" is \"DRM\" then:\n#\n# if (${PLATFORM} MATCHES \"DRM\")\n#\n# may expand e.g to:\n#\n# if (/usr/lib/aarch64-linux-gnu/libdrm.so MATCHES \"DRM\")\n#\n# See https://cmake.org/cmake/help/latest/policy/CMP0054.html\ncmake_policy(SET CMP0054 NEW)\n\n# Makes a hidden visibility preset on a static lib respected\n# This is used to hide glfw's symbols from the library exports when building an so/dylib\n# See https://cmake.org/cmake/help/latest/policy/CMP0063.html\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Window and Monitor Information Functions in Raylib\nDESCRIPTION: Functions for retrieving window, rendering, and monitor information. These provide access to window handle, current screen/render dimensions, and connected monitor details.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nvoid *GetWindowHandle(void);\nint GetScreenWidth(void);\nint GetScreenHeight(void);\nint GetRenderWidth(void);\nint GetRenderHeight(void);\nint GetMonitorCount(void);\n```\n\n----------------------------------------\n\nTITLE: Image Color Data Management in Raylib\nDESCRIPTION: This snippet covers Raylib functions for loading, handling, and unloading color data from images. These functions help extract color information from images and manage the related memory resources.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_65\n\nLANGUAGE: C\nCODE:\n```\nColor *LoadImageColors(Image image);  // Load color data from image as a Color array (RGBA - 32bit)\nColor *LoadImagePalette(Image image, int maxPaletteSize, int *colorCount);  // Load colors palette from image as a Color array (RGBA - 32bit)\nvoid UnloadImageColors(Color *colors);  // Unload color data loaded with LoadImageColors()\nvoid UnloadImagePalette(Color *colors);  // Unload colors palette loaded with LoadImagePalette()\nRectangle GetImageAlphaBorder(Image image, float threshold);  // Get image alpha border rectangle\nColor GetImageColor(Image image, int x, int y);  // Get image pixel color at (x, y) position\n```\n\n----------------------------------------\n\nTITLE: Image Filtering and Resizing in Raylib\nDESCRIPTION: This snippet covers Raylib's image filtering and resizing functions, including Gaussian blur, kernel convolution, and various scaling algorithms. These functions modify the dimensions and appearance of images.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_62\n\nLANGUAGE: C\nCODE:\n```\nvoid ImageBlurGaussian(Image *image, int blurSize);  // Apply Gaussian blur using a box blur approximation\nvoid ImageKernelConvolution(Image *image, const float *kernel, int kernelSize);  // Apply custom square convolution kernel to image\nvoid ImageResize(Image *image, int newWidth, int newHeight);  // Resize image (Bicubic scaling algorithm)\nvoid ImageResizeNN(Image *image, int newWidth, int newHeight);  // Resize image (Nearest-Neighbor scaling algorithm)\nvoid ImageResizeCanvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill);  // Resize canvas and fill with color\nvoid ImageMipmaps(Image *image);  // Compute all mipmap levels for a provided image\nvoid ImageDither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp);  // Dither image data to 16bpp or lower (Floyd-Steinberg dithering)\n```\n\n----------------------------------------\n\nTITLE: Drawing a Circle in C\nDESCRIPTION: Function to draw a color-filled circle. It takes center X and Y coordinates, radius as a float, and a Color structure.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_55\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawCircle(int centerX, int centerY, float radius, Color color);\n```\n\n----------------------------------------\n\nTITLE: Determining if Raylib is the Main Project\nDESCRIPTION: Checks if raylib is being built as the main project or as a dependency. Sets the RAYLIB_IS_MAIN variable to TRUE if it's the main project, FALSE otherwise. This allows for conditional configuration based on how raylib is being used.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# RAYLIB_IS_MAIN determines whether the project is being used from root\n# or if it is added as a dependency (through add_subdirectory for example).\nif (\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n  set(RAYLIB_IS_MAIN TRUE)\nelse()\n  set(RAYLIB_IS_MAIN FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Loading Audio Stream in C with raylib\nDESCRIPTION: This function loads an audio stream for streaming raw audio PCM data. It takes the sample rate, sample size, and number of channels as parameters. It returns an AudioStream object.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_88\n\nLANGUAGE: C\nCODE:\n```\nAudioStream LoadAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels);\n```\n\n----------------------------------------\n\nTITLE: Drawing a Pixel in C\nDESCRIPTION: Function to draw a single pixel at specified coordinates with a given color. It takes X and Y positions as integers and a Color structure.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_53\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawPixel(int posX, int posY, Color color);\n```\n\n----------------------------------------\n\nTITLE: Including Compiler Flags and Build Options for Raylib\nDESCRIPTION: Imports compiler flag settings and CMake build options for the project. These includes set compiler flags, language standards, and register build options that are exposed to the CMake configuration interface.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Sets compiler flags and language standard\ninclude(CompilerFlags)\n\n# Registers build options that are exposed to cmake\ninclude(CMakeOptions.txt)\n```\n\n----------------------------------------\n\nTITLE: Drawing 3D Cylinders with Raylib\nDESCRIPTION: Functions for rendering cylinders and cones in 3D space, with options for solid and wireframe rendering, and custom positioning of cylinder bases and tops.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_72\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);\n\nvoid DrawCylinderEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);\n\nvoid DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);\n\nvoid DrawCylinderWiresEx(Vector3 startPos, Vector3 endPos, float startRadius, float endRadius, int sides, Color color);\n```\n\n----------------------------------------\n\nTITLE: Defining Camera3D Structure in C for Raylib\nDESCRIPTION: Defines the Camera3D struct used in Raylib for representing a camera in 3D space. It includes fields for position, target, up vector, field of view, and projection type.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nstruct Camera3D {\n  Vector3 position;  // Camera position\n  Vector3 target;    // Camera target it looks-at\n  Vector3 up;        // Camera up vector (rotation over its axis)\n  float fovy;        // Camera field-of-view aperture in Y (degrees) in perspective, used as near plane width in orthographic\n  int projection;    // Camera projection: CAMERA_PERSPECTIVE or CAMERA_ORTHOGRAPHIC\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Mouse Position in C\nDESCRIPTION: Function to set the mouse position to specific X and Y coordinates. It takes two integer parameters for the X and Y positions.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_48\n\nLANGUAGE: C\nCODE:\n```\nvoid SetMousePosition(int x, int y);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gamepad Axis Movement in C\nDESCRIPTION: Function to get the axis movement value for a specific gamepad axis. It takes gamepad and axis identifiers as parameters and returns a float value representing the movement.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_43\n\nLANGUAGE: C\nCODE:\n```\nfloat GetGamepadAxisMovement(int gamepad, int axis);\n```\n\n----------------------------------------\n\nTITLE: Compiling a Meson Project via Command Line in Bash\nDESCRIPTION: A sequence of commands to compile a project using the meson build system from the command line. It initializes the build directory, changes into it, builds the project, and installs it.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Builder/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmeson build\ncd build\nninja\nninja install\n```\n\n----------------------------------------\n\nTITLE: Defining CameraMode Enum in Raylib\nDESCRIPTION: Enum specifying camera control systems for 3D navigation. Includes free camera, orbital rotation, first-person and third-person perspectives, plus a custom mode for manual control.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nCameraMode {\n  CAMERA_CUSTOM: 0\n  CAMERA_FREE: 1\n  CAMERA_ORBITAL: 2\n  CAMERA_FIRST_PERSON: 3\n  CAMERA_THIRD_PERSON: 4\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Structure in C for Raylib\nDESCRIPTION: Defines the Model struct used in Raylib for representing 3D models. It includes fields for transform matrix, meshes, materials, bone information, and bind pose data.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nstruct Model {\n  Matrix transform;     // Local transform matrix\n  int meshCount;        // Number of meshes\n  int materialCount;    // Number of materials\n  Mesh * meshes;        // Meshes array\n  Material * materials; // Materials array\n  int * meshMaterial;   // Mesh material number\n  int boneCount;        // Number of bones\n  BoneInfo * bones;     // Bones information (skeleton)\n  Transform * bindPose; // Bones base transformation (pose)\n};\n```\n\n----------------------------------------\n\nTITLE: Image Format and Cropping Operations in Raylib\nDESCRIPTION: This snippet covers Raylib functions for image format conversion, power-of-two conversion, and various cropping operations. These functions modify images in-place to change their dimensions or format.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_61\n\nLANGUAGE: C\nCODE:\n```\nvoid ImageFormat(Image *image, int newFormat);  // Convert image data to desired format\nvoid ImageToPOT(Image *image, Color fill);  // Convert image to POT (power-of-two)\nvoid ImageCrop(Image *image, Rectangle crop);  // Crop an image to a defined rectangle\nvoid ImageAlphaCrop(Image *image, float threshold);  // Crop image depending on alpha value\nvoid ImageAlphaClear(Image *image, Color color, float threshold);  // Clear alpha channel to desired color\nvoid ImageAlphaMask(Image *image, Image alphaMask);  // Apply alpha mask to image\nvoid ImageAlphaPremultiply(Image *image);  // Premultiply alpha channel\n```\n\n----------------------------------------\n\nTITLE: Setting Gamepad Mappings in C\nDESCRIPTION: Function to set internal gamepad mappings using SDL_GameControllerDB. It takes a const char pointer for mappings and returns an integer status.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_44\n\nLANGUAGE: C\nCODE:\n```\nint SetGamepadMappings(const char *mappings);\n```\n\n----------------------------------------\n\nTITLE: Linux Joystick Implementation\nDESCRIPTION: Adds Linux-specific joystick implementation when X11 or Wayland backends are enabled on Linux systems. Also includes POSIX poll implementation for these backends.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_X11 OR GLFW_BUILD_WAYLAND)\n    if (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n        target_sources(glfw PRIVATE linux_joystick.h linux_joystick.c)\n    endif()\n    target_sources(glfw PRIVATE posix_poll.h posix_poll.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Drawing Mode Functions\nDESCRIPTION: Functions for managing different drawing modes including 2D, 3D, texture, shader, and blend modes.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nvoid BeginDrawing(void);\nvoid EndDrawing(void);\nvoid BeginMode2D(Camera2D camera);\nvoid EndMode2D(void);\nvoid BeginMode3D(Camera3D camera);\nvoid EndMode3D(void);\nvoid BeginTextureMode(RenderTexture2D target);\nvoid EndTextureMode(void);\n```\n\n----------------------------------------\n\nTITLE: Data Processing Functions in Raylib\nDESCRIPTION: Functions for data compression, encoding, and hash computation including DEFLATE, Base64, CRC32, MD5, and SHA1.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nunsigned char *CompressData(const unsigned char *data, int dataSize, int *compDataSize);\nunsigned char *DecompressData(const unsigned char *compData, int compDataSize, int *dataSize);\nchar *EncodeDataBase64(const unsigned char *data, int dataSize, int *outputSize);\nunsigned int ComputeCRC32(unsigned char *data, int dataSize);\nunsigned int *ComputeMD5(unsigned char *data, int dataSize);\n```\n\n----------------------------------------\n\nTITLE: Attaching Audio Stream Processor in C\nDESCRIPTION: This function attaches an audio stream processor to a specific stream. It processes frames with 2 samples as float values for stereo audio.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_89\n\nLANGUAGE: C\nCODE:\n```\nvoid AttachAudioStreamProcessor(AudioStream stream, AudioCallback processor)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Time, Thread, and Module Implementation\nDESCRIPTION: Adds platform-specific implementations for time, thread, and module functionality based on the target operating system. Uses different source files for macOS, Windows, and other Unix-like platforms.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# The time, thread and module code is shared between all backends on a given OS,\n# including the null backend, which still needs those bits to be functional\nif (APPLE)\n    target_sources(glfw PRIVATE cocoa_time.h cocoa_time.c posix_thread.h\n                                posix_module.c posix_thread.c)\nelseif (WIN32)\n    target_sources(glfw PRIVATE win32_time.h win32_thread.h win32_module.c\n                                win32_time.c win32_thread.c)\nelse()\n    target_sources(glfw PRIVATE posix_time.h posix_thread.h posix_module.c\n                                posix_time.c posix_thread.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Window Management Functions in Raylib\nDESCRIPTION: Core functions for initializing, closing, and checking window state. These functions are essential for setting up the application window and managing its lifecycle.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nvoid InitWindow(int width, int height, const char *title);\nvoid CloseWindow(void);\nbool WindowShouldClose(void);\nbool IsWindowReady(void);\nbool IsWindowFullscreen(void);\nbool IsWindowHidden(void);\nbool IsWindowMinimized(void);\nbool IsWindowMaximized(void);\nbool IsWindowFocused(void);\nbool IsWindowResized(void);\n```\n\n----------------------------------------\n\nTITLE: Detaching Audio Mixed Processor in C\nDESCRIPTION: This function detaches a previously attached audio stream processor from the entire audio pipeline.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_92\n\nLANGUAGE: C\nCODE:\n```\nvoid DetachAudioMixedProcessor(AudioCallback processor)\n```\n\n----------------------------------------\n\nTITLE: Source File Collection for Examples in CMake\nDESCRIPTION: Collects all source files (.c) and resource files from the example directories. Uses file globbing to find all relevant files and adds them to example_sources and example_resources lists for processing.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Collect all source files and resource files\n# into a CMake variable\nset(example_sources)\nset(example_resources)\nforeach (example_dir ${example_dirs})\n    # Get the .c files\n    file(GLOB sources ${example_dir}/*.c)\n    list(APPEND example_sources ${sources})\n\n    # Any any resources\n    file(GLOB resources ${example_dir}/resources/*)\n    list(APPEND example_resources ${resources})\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Text Manipulation Functions in Raylib (C)\nDESCRIPTION: Various functions for text manipulation including copying, comparing, formatting, and case conversion. These functions provide utility for string operations in Raylib applications.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_69\n\nLANGUAGE: C\nCODE:\n```\nint TextCopy(char *dst, const char *src);\nbool TextIsEqual(const char *text1, const char *text2);\nunsigned int TextLength(const char *text);\nconst char *TextFormat(const char *text, ...);\nchar *TextToUpper(const char *text);\nchar *TextToLower(const char *text);\nchar *TextToPascal(const char *text);\nchar *TextToSnake(const char *text);\nchar *TextToCamel(const char *text);\n```\n\n----------------------------------------\n\nTITLE: Enabling Gesture Detection in C\nDESCRIPTION: Function to enable a set of gestures using flags. It takes an unsigned integer parameter representing the gesture flags.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_50\n\nLANGUAGE: C\nCODE:\n```\nvoid SetGesturesEnabled(unsigned int flags);\n```\n\n----------------------------------------\n\nTITLE: File System Operations in Raylib\nDESCRIPTION: Core functions for file and directory management including path manipulation, directory creation, and file operations.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nconst char *GetWorkingDirectory(void);           // Get current working directory\nint MakeDirectory(const char *dirPath);             // Create directories\nbool ChangeDirectory(const char *dir);              // Change working directory\nbool IsPathFile(const char *path);                  // Check if path is file\nFilePathList LoadDirectoryFiles(const char *dirPath); // Load directory files\n```\n\n----------------------------------------\n\nTITLE: Setting Target FPS in C\nDESCRIPTION: Function to set the target FPS (maximum) for the application. It takes an integer parameter for the desired FPS.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nvoid SetTargetFPS(int fps);\n```\n\n----------------------------------------\n\nTITLE: Exporting Wave Data to File in C with raylib\nDESCRIPTION: This function exports wave data to a file. It returns a boolean indicating success or failure. It takes a Wave object and a file name as parameters.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_86\n\nLANGUAGE: C\nCODE:\n```\nbool ExportWave(Wave wave, const char *fileName);\n```\n\n----------------------------------------\n\nTITLE: Window State Management Functions in Raylib\nDESCRIPTION: Functions for checking and manipulating window state flags. These allow controlling aspects like windowed/fullscreen mode, borders, size limits, and other window properties.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nbool IsWindowState(unsigned int flag);\nvoid SetWindowState(unsigned int flags);\nvoid ClearWindowState(unsigned int flags);\nvoid ToggleFullscreen(void);\nvoid ToggleBorderlessWindowed(void);\nvoid MaximizeWindow(void);\nvoid MinimizeWindow(void);\nvoid RestoreWindow(void);\n```\n\n----------------------------------------\n\nTITLE: Drawing Spline Segments in C using Raylib\nDESCRIPTION: Functions for drawing different types of spline segments including Catmull-Rom, Quadratic Bezier, and Cubic Bezier. These functions take various Vector2 points, thickness, and color as parameters.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_56\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawSplineSegmentCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float thick, Color color);\nvoid DrawSplineSegmentBezierQuadratic(Vector2 p1, Vector2 c2, Vector2 p3, float thick, Color color);\nvoid DrawSplineSegmentBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float thick, Color color);\n```\n\n----------------------------------------\n\nTITLE: Loading File Data in C\nDESCRIPTION: Function to load file data as a byte array. It takes a filename and a pointer to store the data size, returning an unsigned char pointer.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_38\n\nLANGUAGE: C\nCODE:\n```\nunsigned char *LoadFileData(const char *fileName, int *dataSize);\n```\n\n----------------------------------------\n\nTITLE: Compiling C File with Optimization and Warnings\nDESCRIPTION: Shell command to compile a C source file with size optimization (-Os) and extra warning flags. The command uses CC variable for compiler and outputs an executable with .exe extension.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$(CC) -o $(NAME_PART).exe $(FILE_NAME) -Os -Wall -Wextra\n```\n\n----------------------------------------\n\nTITLE: Evaluating Spline Points in C using Raylib\nDESCRIPTION: Functions for evaluating points on different types of splines including Linear, B-Spline, Catmull-Rom, Quadratic Bezier, and Cubic Bezier. These functions take various Vector2 points and a float parameter t.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_57\n\nLANGUAGE: C\nCODE:\n```\nVector2 GetSplinePointLinear(Vector2 startPos, Vector2 endPos, float t);\nVector2 GetSplinePointBasis(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);\nVector2 GetSplinePointCatmullRom(Vector2 p1, Vector2 p2, Vector2 p3, Vector2 p4, float t);\nVector2 GetSplinePointBezierQuad(Vector2 p1, Vector2 c2, Vector2 p3, float t);\nVector2 GetSplinePointBezierCubic(Vector2 p1, Vector2 c2, Vector2 c3, Vector2 p4, float t);\n```\n\n----------------------------------------\n\nTITLE: Defining Gesture Enum in Raylib\nDESCRIPTION: Enum defining touch gesture types for input handling. Values are designed as bit flags that can be combined, covering simple taps, holds, drags, directional swipes, and pinch gestures.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nGesture {\n  GESTURE_NONE: 0\n  GESTURE_TAP: 1\n  GESTURE_DOUBLETAP: 2\n  GESTURE_HOLD: 4\n  GESTURE_DRAG: 8\n  GESTURE_SWIPE_RIGHT: 16\n  GESTURE_SWIPE_LEFT: 32\n  GESTURE_SWIPE_UP: 64\n  GESTURE_SWIPE_DOWN: 128\n  GESTURE_PINCH_IN: 256\n  GESTURE_PINCH_OUT: 512\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing rlgl Module in C\nDESCRIPTION: The rlgl module has been reviewed to simplify usage and automatically manage render-batch limits. It now only requires 6 low-level functions for drawing shapes.\nSOURCE: https://github.com/raysan5/raylib/blob/master/HISTORY.md#2025-04-18_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nrlBegin();\nrlEnd();\nrlVertex3f();\nrlTexCoord2f();\nrlNormal3f();\nrlSetTexture();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Building Examples for Raylib\nDESCRIPTION: Checks if the BUILD_EXAMPLES option is enabled and, if so, adds the 'examples' subdirectory to the build. Also outputs a status message indicating that building examples is enabled.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (${BUILD_EXAMPLES})\n  MESSAGE(STATUS \"Building examples is enabled\")\n  add_subdirectory(examples)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Raylib Type Aliases\nDESCRIPTION: Type alias definitions for common Raylib data structures including Quaternion, Texture2D, TextureCubemap, RenderTexture2D, and Camera types.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_11\n\nLANGUAGE: C\nCODE:\n```\ntypedef Vector4 Quaternion;\ntypedef Texture Texture2D;\ntypedef Texture TextureCubemap;\ntypedef RenderTexture RenderTexture2D;\ntypedef Camera3D Camera;\n```\n\n----------------------------------------\n\nTITLE: Image Drawing Operations in Raylib\nDESCRIPTION: This snippet covers basic drawing operations on images in Raylib, including clearing the background and drawing individual pixels. These functions modify image data directly for custom image generation or manipulation.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_66\n\nLANGUAGE: C\nCODE:\n```\nvoid ImageClearBackground(Image *dst, Color color);  // Clear image background with given color\nvoid ImageDrawPixel(Image *dst, int posX, int posY, Color color);  // Draw pixel within an image\n```\n\n----------------------------------------\n\nTITLE: Window State Management\nDESCRIPTION: Functions for controlling window states including initialization, configuration, and runtime management.\nSOURCE: https://github.com/raysan5/raylib/blob/master/HISTORY.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nSetConfigFlags()\nSetWindowState()\n```\n\n----------------------------------------\n\nTITLE: Setting Up GLFW Installation Rules\nDESCRIPTION: Configures installation rules for GLFW headers, CMake configuration files, and pkg-config files.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/CMakeLists.txt#2025-04-18_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_INSTALL)\n    install(DIRECTORY include/GLFW DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n            FILES_MATCHING PATTERN glfw3.h PATTERN glfw3native.h)\n\n    install(FILES \"${GLFW_BINARY_DIR}/src/glfw3Config.cmake\"\n                  \"${GLFW_BINARY_DIR}/src/glfw3ConfigVersion.cmake\"\n            DESTINATION \"${GLFW_CONFIG_PATH}\")\n\n    install(EXPORT glfwTargets FILE glfw3Targets.cmake\n            EXPORT_LINK_INTERFACE_LIBRARIES\n            DESTINATION \"${GLFW_CONFIG_PATH}\")\n    install(FILES \"${GLFW_BINARY_DIR}/src/glfw3.pc\"\n            DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining AudioStream Structure in C for Raylib\nDESCRIPTION: Defines the AudioStream struct used in Raylib for custom audio streams. It includes fields for internal buffer and processor pointers, sample rate, sample size, and channel count.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nstruct AudioStream {\n  rAudioBuffer * buffer;      // Pointer to internal data used by the audio system\n  rAudioProcessor * processor; // Pointer to internal data processor, useful for audio effects\n  unsigned int sampleRate;     // Frequency (samples per second)\n  unsigned int sampleSize;     // Bit depth (bits per sample): 8, 16, 32 (24 not supported)\n  unsigned int channels;       // Number of channels (1-mono, 2-stereo, ...)\n};\n```\n\n----------------------------------------\n\nTITLE: Visualizing 3D Bounding Boxes and Billboards with Raylib\nDESCRIPTION: Functions for drawing bounding boxes and billboards (2D textures that always face the camera) in 3D space with various positioning and rendering options.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_77\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawBoundingBox(BoundingBox box, Color color);\n\nvoid DrawBillboard(Camera camera, Texture2D texture, Vector3 position, float scale, Color tint);\n\nvoid DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector2 size, Color tint);\n\nvoid DrawBillboardPro(Camera camera, Texture2D texture, Rectangle source, Vector3 position, Vector3 up, Vector2 size, Vector2 origin, float rotation, Color tint);\n```\n\n----------------------------------------\n\nTITLE: File I/O Functions\nDESCRIPTION: Centralized file I/O functions for data and text handling, enabling custom I/O implementations and Virtual File Systems integration.\nSOURCE: https://github.com/raysan5/raylib/blob/master/HISTORY.md#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nLoadFileData()\nSaveFileData()\nLoadFileText()\nSaveFileText()\n```\n\n----------------------------------------\n\nTITLE: Attaching Audio Mixed Processor in C\nDESCRIPTION: This function attaches an audio stream processor to the entire audio pipeline. It processes frames with 2 samples as float values for stereo audio.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_91\n\nLANGUAGE: C\nCODE:\n```\nvoid AttachAudioMixedProcessor(AudioCallback processor)\n```\n\n----------------------------------------\n\nTITLE: Defining CameraProjection Enum in Raylib\nDESCRIPTION: Enum specifying camera projection types for 3D rendering. Offers a choice between perspective projection (with depth and foreshortening) and orthographic projection (no perspective distortion).\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nCameraProjection {\n  CAMERA_PERSPECTIVE: 0\n  CAMERA_ORTHOGRAPHIC: 1\n}\n```\n\n----------------------------------------\n\nTITLE: Overview of Raylib Shader Examples\nDESCRIPTION: Collection of shader examples demonstrating various rendering techniques like basic lighting, post-processing, ray marching, PBR materials, and custom uniforms. Examples are organized by complexity (1-4 stars) and include version compatibility information.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/README.md#2025-04-18_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Defining TraceLogCallback Function Signature in Raylib\nDESCRIPTION: Callback function signature for custom logging implementation. Allows redirecting trace log messages to user-defined handlers with support for log level filtering and variable arguments.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nvoid TraceLogCallback(int logLevel, const char *text, va_list args);\n```\n\n----------------------------------------\n\nTITLE: Enabling Testing for Raylib\nDESCRIPTION: Enables CMake's testing capabilities for the project. This simple command allows the project to define and run tests as part of the build process.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing()\n```\n\n----------------------------------------\n\nTITLE: Defining BlendMode Enum in Raylib\nDESCRIPTION: Enum defining pre-defined color blending modes that control how rendered objects blend with the background. Includes common modes like alpha blending, additive, multiplicative, and custom blending options.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nBlendMode {\n  BLEND_ALPHA: 0\n  BLEND_ADDITIVE: 1\n  BLEND_MULTIPLIED: 2\n  BLEND_ADD_COLORS: 3\n  BLEND_SUBTRACT_COLORS: 4\n  BLEND_ALPHA_PREMULTIPLY: 5\n  BLEND_CUSTOM: 6\n  BLEND_CUSTOM_SEPARATE: 7\n}\n```\n\n----------------------------------------\n\nTITLE: Overview of Raylib Audio Examples\nDESCRIPTION: Collection of audio examples showing different audio capabilities including module playing, music streaming, raw audio streaming, sound loading, and audio effects processing. Examples demonstrate both basic and advanced audio functionality.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/README.md#2025-04-18_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Updating Camera Position in C\nDESCRIPTION: Function to update the camera position for a selected mode. It takes a pointer to a Camera structure and an integer mode parameter.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_51\n\nLANGUAGE: C\nCODE:\n```\nvoid UpdateCamera(Camera *camera, int mode);\n```\n\n----------------------------------------\n\nTITLE: Defining Font Structure in C for Raylib\nDESCRIPTION: Defines the Font struct used in Raylib for storing font texture and glyph information. It includes fields for base size, glyph count, padding, texture atlas, and glyph data.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nstruct Font {\n  int baseSize;       // Base size (default chars height)\n  int glyphCount;     // Number of glyph characters\n  int glyphPadding;   // Padding around the glyph characters\n  Texture2D texture;  // Texture atlas containing the glyphs\n  Rectangle * recs;   // Rectangles in texture for the glyphs\n  GlyphInfo * glyphs; // Glyphs info data\n};\n```\n\n----------------------------------------\n\nTITLE: Wayland Protocol Generation Configuration\nDESCRIPTION: Sets up wayland-scanner to generate Wayland protocol headers and code files for various Wayland protocols. These are needed when building GLFW with Wayland support.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_WAYLAND)\n    include(CheckIncludeFiles)\n    include(CheckFunctionExists)\n    check_function_exists(memfd_create HAVE_MEMFD_CREATE)\n    if (HAVE_MEMFD_CREATE)\n        target_compile_definitions(glfw PRIVATE HAVE_MEMFD_CREATE)\n    endif()\n\n    find_program(WAYLAND_SCANNER_EXECUTABLE NAMES wayland-scanner)\n    if (NOT WAYLAND_SCANNER_EXECUTABLE)\n        message(FATAL_ERROR \"Failed to find wayland-scanner\")\n    endif()\n\n    macro(generate_wayland_protocol protocol_file)\n        set(protocol_path \"${GLFW_SOURCE_DIR}/deps/wayland/${protocol_file}\")\n\n        string(REGEX REPLACE \"\\\\.xml$\" \"-client-protocol.h\" header_file ${protocol_file})\n        string(REGEX REPLACE \"\\\\.xml$\" \"-client-protocol-code.h\" code_file ${protocol_file})\n\n        add_custom_command(OUTPUT ${header_file}\n            COMMAND \"${WAYLAND_SCANNER_EXECUTABLE}\" client-header \"${protocol_path}\" ${header_file}\n            DEPENDS \"${protocol_path}\"\n            VERBATIM)\n\n        add_custom_command(OUTPUT ${code_file}\n            COMMAND \"${WAYLAND_SCANNER_EXECUTABLE}\" private-code \"${protocol_path}\" ${code_file}\n            DEPENDS \"${protocol_path}\"\n            VERBATIM)\n\n        target_sources(glfw PRIVATE ${header_file} ${code_file})\n    endmacro()\n\n    generate_wayland_protocol(\"wayland.xml\")\n    generate_wayland_protocol(\"viewporter.xml\")\n    generate_wayland_protocol(\"xdg-shell.xml\")\n    generate_wayland_protocol(\"idle-inhibit-unstable-v1.xml\")\n    generate_wayland_protocol(\"pointer-constraints-unstable-v1.xml\")\n    generate_wayland_protocol(\"relative-pointer-unstable-v1.xml\")\n    generate_wayland_protocol(\"fractional-scale-v1.xml\")\n    generate_wayland_protocol(\"xdg-activation-v1.xml\")\n    generate_wayland_protocol(\"xdg-decoration-unstable-v1.xml\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CubemapLayout Enum in Raylib\nDESCRIPTION: Enum specifying different cubemap layout formats. These control how the six faces of a cubemap are arranged in a 2D texture, with options for automatic detection, vertical/horizontal lines, and cross layouts.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nCubemapLayout {\n  CUBEMAP_LAYOUT_AUTO_DETECT: 0\n  CUBEMAP_LAYOUT_LINE_VERTICAL: 1\n  CUBEMAP_LAYOUT_LINE_HORIZONTAL: 2\n  CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR: 3\n  CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE: 4\n}\n```\n\n----------------------------------------\n\nTITLE: Project Setup and Directory Configuration in CMake\nDESCRIPTION: Initializes the examples project and defines directories containing example code. Sets up the directory structure for organizing examples by category (audio, core, models, etc).\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(examples)\n\n# Directories that contain examples\nset(example_dirs\n    audio\n    core\n    models\n    others\n    shaders\n    shapes\n    text\n    textures\n    )\n```\n\n----------------------------------------\n\nTITLE: Getting Ray Trace from Screen Position in C\nDESCRIPTION: Function to get a ray trace from screen position (e.g., mouse) in a viewport. It takes position, camera, width, and height as parameters and returns a Ray.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nRay GetScreenToWorldRayEx(Vector2 position, Camera camera, int width, int height);\n```\n\n----------------------------------------\n\nTITLE: Enumerating Texture Filter Constants in Raylib\nDESCRIPTION: Constants defining different texture filtering modes available in raylib. These control how textures are sampled when scaled, ranging from nearest-neighbor (point) to high-quality anisotropic filtering.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nTEXTURE_FILTER_POINT: 0\nTEXTURE_FILTER_BILINEAR: 1\nTEXTURE_FILTER_TRILINEAR: 2\nTEXTURE_FILTER_ANISOTROPIC_4X: 3\nTEXTURE_FILTER_ANISOTROPIC_8X: 4\nTEXTURE_FILTER_ANISOTROPIC_16X: 5\n```\n\n----------------------------------------\n\nTITLE: Clipboard Management Functions\nDESCRIPTION: Functions for handling clipboard operations including text and image content.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nvoid SetClipboardText(const char *text);\nconst char *GetClipboardText(void);\nImage GetClipboardImage(void);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mouse Position in C\nDESCRIPTION: Function to get the current mouse position as a Vector2. It doesn't take any parameters and returns a Vector2 structure.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_47\n\nLANGUAGE: C\nCODE:\n```\nVector2 GetMousePosition(void);\n```\n\n----------------------------------------\n\nTITLE: Command Line Usage for Raylib Parser\nDESCRIPTION: Shows the command line interface help text and usage examples for the raylib parser tool. Includes options for input/output files, format selection, and other configuration parameters.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// raylib API parser                                                            //\n//                                                                              //\n// more info and bugs-report: github.com/raysan5/raylib/parser                  //\n//                                                                              //\n// Copyright (c) 2021-2025 Ramon Santamaria (@raysan5)                          //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n\nUSAGE:\n\n    > raylib_parser [--help] [--input <filename.h>] [--output <filename.ext>] [--format <type>]\n\nOPTIONS:\n\n    -h, --help                      : Show tool version and command line usage help\n\n    -i, --input <filename.h>        : Define input header file to parse.\n                                      NOTE: If not specified, defaults to: raylib.h\n\n    -o, --output <filename.ext>     : Define output file and format.\n                                      Supported extensions: .txt, .json, .xml, .h\n                                      NOTE: If not specified, defaults to: raylib_api.txt\n\n    -f, --format <type>             : Define output format for parser data.\n                                      Supported types: DEFAULT, JSON, XML, LUA\n\n    -d, --define <DEF>              : Define functions specifiers (i.e. RLAPI for raylib.h, RMAPI for raymath.h, etc.)\n                                      NOTE: If no specifier defined, defaults to: RLAPI\n\n    -t, --truncate <after>          : Define string to truncate input after (i.e. \"RLGL IMPLEMENTATION\" for rlgl.h)\n                                      NOTE: If not specified, the full input file is parsed.\n\n\nEXAMPLES:\n\n    > raylib_parser --input raylib.h --output api.json\n        Process <raylib.h> to generate <api.json>\n\n    > raylib_parser --output raylib_data.info --format XML\n        Process <raylib.h> to generate <raylib_data.info> as XML text data\n\n    > raylib_parser --input raymath.h --output raymath_data.info --format XML --define RMAPI\n        Process <raymath.h> to generate <raymath_data.info> as XML text data\n```\n\n----------------------------------------\n\nTITLE: Building and Running Raylib Core Basic Window Example with Meson\nDESCRIPTION: This command sequence demonstrates how to build and run the core_basic_window example using Meson and Ninja. It configures the build, compiles the project, and executes the resulting binary.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Builder/examples/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmeson build; cd build; ninja; ./core_basic_window\n```\n\n----------------------------------------\n\nTITLE: Matrix Structure Definition in C\nDESCRIPTION: Defines a 4x4 matrix structure using column-major order for OpenGL compatibility\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct Matrix {\n    float m0, m4, m8, m12;    // Matrix first row\n    float m1, m5, m9, m13;    // Matrix second row\n    float m2, m6, m10, m14;   // Matrix third row\n    float m3, m7, m11, m15;   // Matrix fourth row\n} Matrix;\n```\n\n----------------------------------------\n\nTITLE: Shader Management Functions\nDESCRIPTION: Functions for loading, handling, and manipulating shaders including uniform value settings.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nShader LoadShader(const char *vsFileName, const char *fsFileName);\nShader LoadShaderFromMemory(const char *vsCode, const char *fsCode);\nbool IsShaderValid(Shader shader);\nvoid SetShaderValue(Shader shader, int locIndex, const void *value, int uniformType);\nvoid UnloadShader(Shader shader);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Condition Checks and Boolean Values in C\nDESCRIPTION: This snippet shows the correct way to format condition checks in C, emphasizing the use of parentheses for conditions but not for boolean values.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONVENTIONS.md#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nif ((value > 1) && (value < 50) && valueActive)\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Touch Position in C\nDESCRIPTION: Function to get the touch position for a specific touch point index. It takes an integer index as a parameter and returns a Vector2 structure.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_49\n\nLANGUAGE: C\nCODE:\n```\nVector2 GetTouchPosition(int index);\n```\n\n----------------------------------------\n\nTITLE: Drawing Basic Shapes in Raylib (C)\nDESCRIPTION: Example demonstrating basic shape drawing functionality with difficulty level ⭐️☆☆☆, created in version 1.0 and updated to 4.2.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/README.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nshapes/shapes_basic_shapes.c\n```\n\n----------------------------------------\n\nTITLE: Resources Configuration for Windows Shared Library\nDESCRIPTION: Adds a Windows resource file to the GLFW library when building a shared library on Windows. This allows embedding version information and other metadata in the DLL.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32 AND GLFW_BUILD_SHARED_LIBRARY)\n    configure_file(glfw.rc.in glfw.rc @ONLY)\n    target_sources(glfw PRIVATE \"${CMAKE_CURRENT_BINARY_DIR}/glfw.rc\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Mesh Structure in C for Raylib\nDESCRIPTION: Defines the Mesh struct used in Raylib for storing vertex data and VAO/VBO information. It includes fields for vertex count, triangle count, various vertex attributes, and OpenGL buffer IDs.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nstruct Mesh {\n  int vertexCount;           // Number of vertices stored in arrays\n  int triangleCount;         // Number of triangles stored (indexed or not)\n  float * vertices;          // Vertex position (XYZ - 3 components per vertex) (shader-location = 0)\n  float * texcoords;         // Vertex texture coordinates (UV - 2 components per vertex) (shader-location = 1)\n  float * texcoords2;        // Vertex texture second coordinates (UV - 2 components per vertex) (shader-location = 5)\n  float * normals;           // Vertex normals (XYZ - 3 components per vertex) (shader-location = 2)\n  float * tangents;          // Vertex tangents (XYZW - 4 components per vertex) (shader-location = 4)\n  unsigned char * colors;    // Vertex colors (RGBA - 4 components per vertex) (shader-location = 3)\n  unsigned short * indices;  // Vertex indices (in case vertex data comes indexed)\n  float * animVertices;      // Animated vertex positions (after bones transformations)\n  float * animNormals;       // Animated normals (after bones transformations)\n  unsigned char * boneIds;   // Vertex bone ids, max 255 bone ids, up to 4 bones influence by vertex (skinning) (shader-location = 6)\n  float * boneWeights;       // Vertex bone weight, up to 4 bones influence by vertex (skinning) (shader-location = 7)\n  Matrix * boneMatrices;     // Bones animated transformation matrices\n  int boneCount;             // Number of bones\n  unsigned int vaoId;        // OpenGL Vertex Array Object id\n  unsigned int * vboId;      // OpenGL Vertex Buffer Objects id (default vertex data)\n};\n```\n\n----------------------------------------\n\nTITLE: Bouncing Ball Animation with Shapes in Raylib (C)\nDESCRIPTION: Implementation of a bouncing ball animation using basic shapes with difficulty level ⭐️☆☆☆, created and last updated in version 2.5.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/README.md#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nshapes/shapes_bouncing_ball.c\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared GLFW Library Build\nDESCRIPTION: Sets up platform-specific configurations for building GLFW as a shared library, including Windows DLL settings, MinGW-specific options, and Unix visibility settings.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif (GLFW_BUILD_SHARED_LIBRARY)\n    if (WIN32)\n        if (MINGW)\n            # Remove the dependency on the shared version of libgcc\n            # NOTE: MinGW-w64 has the correct default but MinGW needs this\n            target_link_libraries(glfw PRIVATE \"-static-libgcc\")\n\n            # Remove the lib prefix on the DLL (but not the import library)\n            set_target_properties(glfw PROPERTIES PREFIX \"\")\n\n            # Add a suffix to the import library to avoid naming conflicts\n            set_target_properties(glfw PROPERTIES IMPORT_SUFFIX \"dll.a\")\n        else()\n            # Add a suffix to the import library to avoid naming conflicts\n            set_target_properties(glfw PROPERTIES IMPORT_SUFFIX \"dll.lib\")\n        endif()\n        set (GLFW_LIB_NAME_SUFFIX \"dll\")\n\n        target_compile_definitions(glfw INTERFACE GLFW_DLL)\n    endif()\n\n    if (MINGW)\n        # Enable link-time exploit mitigation features enabled by default on MSVC\n        include(CheckCCompilerFlag)\n\n        # Compatibility with data execution prevention (DEP)\n        set(CMAKE_REQUIRED_FLAGS \"-Wl,--nxcompat\")\n        check_c_compiler_flag(\"\" _GLFW_HAS_DEP)\n        if (_GLFW_HAS_DEP)\n            target_link_libraries(glfw PRIVATE \"-Wl,--nxcompat\")\n        endif()\n\n        # Compatibility with address space layout randomization (ASLR)\n        set(CMAKE_REQUIRED_FLAGS \"-Wl,--dynamicbase\")\n        check_c_compiler_flag(\"\" _GLFW_HAS_ASLR)\n        if (_GLFW_HAS_ASLR)\n            target_link_libraries(glfw PRIVATE \"-Wl,--dynamicbase\")\n        endif()\n\n        # Compatibility with 64-bit address space layout randomization (ASLR)\n        set(CMAKE_REQUIRED_FLAGS \"-Wl,--high-entropy-va\")\n        check_c_compiler_flag(\"\" _GLFW_HAS_64ASLR)\n        if (_GLFW_HAS_64ASLR)\n            target_link_libraries(glfw PRIVATE \"-Wl,--high-entropy-va\")\n        endif()\n\n        # Clear flags again to avoid breaking later tests\n        set(CMAKE_REQUIRED_FLAGS)\n    endif()\n\n    if (UNIX)\n        # Hide symbols not explicitly tagged for export from the shared library\n        target_compile_options(glfw PRIVATE \"-fvisibility=hidden\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line in C\nDESCRIPTION: Function to draw a line between two points with a specified color. It takes start and end X and Y coordinates as integers and a Color structure.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_54\n\nLANGUAGE: C\nCODE:\n```\nvoid DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);\n```\n\n----------------------------------------\n\nTITLE: Defining NPatchLayout Enum in Raylib\nDESCRIPTION: Enum defining N-patch layout types for scalable UI elements. Includes nine-patch (scale corners, edges, and center) and three-patch layouts for both vertical and horizontal scaling.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nNPatchLayout {\n  NPATCH_NINE_PATCH: 0\n  NPATCH_THREE_PATCH_VERTICAL: 1\n  NPATCH_THREE_PATCH_HORIZONTAL: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Raylib Source Files\nDESCRIPTION: Defines the public headers and source files that comprise the Raylib library. Sets up core library files for compilation.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/CMakeLists.txt#2025-04-18_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(raylib_public_headers\n    raylib.h\n    rcamera.h\n    rlgl.h\n    raymath.h\n    )\n\nset(raylib_sources\n    raudio.c\n    rcore.c\n    rmodels.c\n    rshapes.c\n    rtext.c\n    rtextures.c\n    utils.c\n    )\n```\n\n----------------------------------------\n\nTITLE: Wayland Dependencies Configuration\nDESCRIPTION: Sets up the dependencies for the Wayland backend using pkg-config. Requires wayland-client, wayland-cursor, wayland-egl, and xkbcommon packages with minimum versions.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_WAYLAND)\n    include(FindPkgConfig)\n\n    pkg_check_modules(Wayland REQUIRED\n        wayland-client>=0.2.7\n        wayland-cursor>=0.2.7\n        wayland-egl>=0.2.7\n        xkbcommon>=0.5.0)\n\n    target_include_directories(glfw PRIVATE ${Wayland_INCLUDE_DIRS})\n\n    if (NOT CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n        find_package(EpollShim)\n        if (EPOLLSHIM_FOUND)\n            target_include_directories(glfw PRIVATE ${EPOLLSHIM_INCLUDE_DIRS})\n            target_link_libraries(glfw PRIVATE ${EPOLLSHIM_LIBRARIES})\n        endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Gamepad Vibration in C\nDESCRIPTION: Function to set gamepad vibration for both motors. It takes gamepad identifier, left and right motor intensities, and duration as parameters.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_45\n\nLANGUAGE: C\nCODE:\n```\nvoid SetGamepadVibration(int gamepad, float leftMotor, float rightMotor, float duration);\n```\n\n----------------------------------------\n\nTITLE: Defining TextureWrap Enum in Raylib\nDESCRIPTION: Enum defining texture wrapping modes that control how textures are sampled outside their normal coordinate range. Options include repeating, clamping, and mirrored variations.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nTextureWrap {\n  TEXTURE_WRAP_REPEAT: 0\n  TEXTURE_WRAP_CLAMP: 1\n  TEXTURE_WRAP_MIRROR_REPEAT: 2\n  TEXTURE_WRAP_MIRROR_CLAMP: 3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project with Raylib Dependency\nDESCRIPTION: Sets up a CMake project with Raylib as a dependency. It checks for an existing Raylib installation and fetches it if not found. The script also configures platform-specific settings for web and MacOS builds.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CMake/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.11) # FetchContent is available in 3.11+\nproject(example)\n\n# Generate compile_commands.json\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\n# Dependencies\nset(RAYLIB_VERSION 5.5)\nfind_package(raylib ${RAYLIB_VERSION} QUIET) # QUIET or REQUIRED\nif (NOT raylib_FOUND) # If there's none, fetch and build raylib\n  include(FetchContent)\n  FetchContent_Declare(\n    raylib\n    DOWNLOAD_EXTRACT_TIMESTAMP OFF\n    URL https://github.com/raysan5/raylib/archive/refs/tags/${RAYLIB_VERSION}.tar.gz\n  )\n  FetchContent_GetProperties(raylib)\n  if (NOT raylib_POPULATED) # Have we downloaded raylib yet?\n    set(FETCHCONTENT_QUIET NO)\n    FetchContent_MakeAvailable(raylib)\n    set(BUILD_EXAMPLES OFF CACHE BOOL \"\" FORCE) # don't build the supplied examples\n  endif()\nendif()\n\n# Our Project\n\nadd_executable(${PROJECT_NAME} core_basic_window.c)\n#set(raylib_VERBOSE 1)\ntarget_link_libraries(${PROJECT_NAME} raylib)\n\n# Web Configurations\nif (${PLATFORM} STREQUAL \"Web\")\n    set_target_properties(${PROJECT_NAME} PROPERTIES SUFFIX \".html\") # Tell Emscripten to build an example.html file.\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s USE_GLFW=3 -s ASSERTIONS=1 -s WASM=1 -s ASYNCIFY -s GL_ENABLE_GET_PROC_ADDRESS=1\")\nendif()\n\n# Checks if OSX and links appropriate frameworks (Only required on MacOS)\nif (APPLE)\n    target_link_libraries(${PROJECT_NAME} \"-framework IOKit\")\n    target_link_libraries(${PROJECT_NAME} \"-framework Cocoa\")\n    target_link_libraries(${PROJECT_NAME} \"-framework OpenGL\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining FontType Enum in Raylib\nDESCRIPTION: Enum specifying font types and their generation methods in raylib. Includes default font handling, bitmap fonts, and signed distance field (SDF) fonts for improved scaling.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nFontType {\n  FONT_DEFAULT: 0\n  FONT_BITMAP: 1\n  FONT_SDF: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Color Palette Visualization in Raylib (C)\nDESCRIPTION: Example showing color palette implementation using shapes with difficulty level ⭐️⭐️☆☆, created in version 1.0 and updated to 2.5.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/README.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nshapes/shapes_colors_palette.c\n```\n\n----------------------------------------\n\nTITLE: Defining File I/O Callback Function Signatures in Raylib\nDESCRIPTION: Callback function signatures for custom file I/O operations. Includes functions for loading and saving both binary and text data, allowing custom file system implementations.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nunsigned char *LoadFileDataCallback(const char *fileName, int *dataSize);\nbool SaveFileDataCallback(const char *fileName, void *data, int dataSize);\nchar *LoadFileTextCallback(const char *fileName);\nbool SaveFileTextCallback(const char *fileName, char *text);\n```\n\n----------------------------------------\n\nTITLE: Compiling raylib Project for Web using Emscripten and CMake\nDESCRIPTION: This snippet demonstrates how to compile the raylib project for web platforms using Emscripten SDK and CMake. It creates a build directory, configures CMake with web-specific options, and uses emmake to build the project.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CMake/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\nemcmake cmake .. -DPLATFORM=Web -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXECUTABLE_SUFFIX=\".html\"\nemmake make\n```\n\n----------------------------------------\n\nTITLE: Monitor and Window Functions\nDESCRIPTION: Functions for getting monitor information and window properties like position, size, DPI scale, etc.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nint GetCurrentMonitor(void);\nVector2 GetMonitorPosition(int monitor);\nint GetMonitorWidth(int monitor);\nint GetMonitorHeight(int monitor);\nint GetMonitorPhysicalWidth(int monitor);\nint GetMonitorPhysicalHeight(int monitor);\nint GetMonitorRefreshRate(int monitor);\nVector2 GetWindowPosition(void);\nVector2 GetWindowScaleDPI(void);\n```\n\n----------------------------------------\n\nTITLE: Web Platform Configuration in CMake\nDESCRIPTION: Configures build settings for Web platform using Emscripten. Sets optimization flags, enables WebAssembly and Asyncify, configures memory management, and sets up HTML output file with a custom shell template.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (${PLATFORM} MATCHES \"Web\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -Os\")\n    # Since WASM is used, ALLOW_MEMORY_GROWTH has no extra overheads\n    set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -s WASM=1 -s ASYNCIFY -s ALLOW_MEMORY_GROWTH=1 --shell-file ${CMAKE_SOURCE_DIR}/src/shell.html\")\n    set(CMAKE_EXECUTABLE_SUFFIX \".html\")\n\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/others/raylib_opengl_interop.c)\n\n    # Remove the -rdynamic flag because otherwise emscripten\n    # does not generate HTML+JS+WASM files, only a non-working\n    # and fat HTML\n    string(REPLACE \"-rdynamic\" \"\" CMAKE_SHARED_LIBRARY_LINK_C_FLAGS \"${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Raylib Source Compilation\nDESCRIPTION: Sets up the environment and compiles all raylib modules (rcore, rglfw, rshapes, etc.) into a static library. This script allows selecting the OpenGL API version and handles building the complete raylib library from source.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_tcc.txt#2025-04-18_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n::raylib_source_compile\necho > Choose compile options\necho -------------------------------------\necho Set desired OpenGL API version: 1.1, 2.1, 3.3, 4.3\nSET GRAPHIC_API=GRAPHICS_API_OPENGL_33\necho\necho > Setup required Environment\necho -----------------------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\tcc\nENV_SET PATH=$(COMPILER_PATH)\nSET CC=tcc\nSET AR=tcc -ar\nSET CFLAGS=-std=c99 -Wall -DPLATFORM_DESKTOP -DSTBI_NO_SIMD -DMA_NO_WASAPI -D$(GRAPHIC_API)\nSET RELEASE_PATH=$(COMPILER_PATH)\ncd $(RAYLIB_PATH)\\src\necho\necho > Clean latest build\necho -----------------------\ncmd /c del /F *.o\ncmd /c del /F libraylib.a\necho\necho > Compile raylib modules\necho -------------------------------------\n$(CC) -c rcore.c -Iexternal/glfw/include $(CFLAGS)\n$(CC) -c rglfw.c $(CFLAGS)\n$(CC) -c rshapes.c $(CFLAGS)\n$(CC) -c rtextures.c $(CFLAGS)\n$(CC) -c rtext.c $(CFLAGS)\n$(CC) -c rmodels.c $(CFLAGS)\n$(CC) -c raudio.c $(CFLAGS)\n$(CC) -c utils.c $(CFLAGS)\necho\necho > Generate raylib library\necho -------------------------------------\n$(AR) rcs libraylib.a rcore.o rglfw.o rshapes.o rtextures.o rtext.o rmodels.o raudio.o utils.o\necho\necho > Install raylib library\necho ---------------------------\ncmd /c copy raylib.h $(RELEASE_PATH)\\include /Y\ncmd /c copy libraylib.a $(RELEASE_PATH)\\lib /Y\necho\necho > Reset Environment\necho ---------------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Settings in CMake\nDESCRIPTION: Sets up basic project information including name, version numbers and build type configuration. Configures default build type to Debug if not specified.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nproject(raylib C)\nset(PROJECT_VERSION 5.5.0)\nset(API_VERSION 550)\n\ninclude(GNUInstallDirs)\ninclude(JoinPaths)\n\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    if(RAYLIB_IS_MAIN)\n        set(default_build_type Debug)\n    else()\n        message(WARNING \"Default build type is not set (CMAKE_BUILD_TYPE)\")\n    endif()\n\n    message(STATUS \"Setting build type to '${default_build_type}' as none was specified.\")\n\n    set(CMAKE_BUILD_TYPE \"${default_build_type}\" CACHE STRING \"Choose the type of build.\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS \"Debug\" \"Release\" \"MinSizeRel\" \"RelWithDebInfo\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Shapes Texture in C\nDESCRIPTION: Function to set the texture and rectangle to be used for shapes drawing. It takes a Texture2D and a Rectangle structure as parameters.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_52\n\nLANGUAGE: C\nCODE:\n```\nvoid SetShapesTexture(Texture2D texture, Rectangle source);\n```\n\n----------------------------------------\n\nTITLE: Thread Support Detection and Configuration in CMake\nDESCRIPTION: Checks for pthread support and stdatomic.h header availability. Configures compiler flags for threading support when available, including setting C11 standard and linking with pthread libraries as needed.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CheckIncludeFile)\nCHECK_INCLUDE_FILE(\"stdatomic.h\" HAVE_STDATOMIC_H)\nset(CMAKE_THREAD_PREFER_PTHREAD TRUE)\nfind_package(Threads)\nif (CMAKE_USE_PTHREADS_INIT AND HAVE_STDATOMIC_H)\n    add_if_flag_compiles(\"-std=c11\" CMAKE_C_FLAGS)\n    if (THREADS_HAVE_PTHREAD_ARG)\n        add_if_flag_compiles(\"-pthread\" CMAKE_C_FLAGS)\n    endif ()\n    if (CMAKE_THREAD_LIBS_INIT)\n        link_libraries(\"${CMAKE_THREAD_LIBS_INIT}\")\n    endif ()\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Cursor Control Functions\nDESCRIPTION: Functions for controlling cursor visibility, state, and position checking.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nvoid ShowCursor(void);\nvoid HideCursor(void);\nbool IsCursorHidden(void);\nvoid EnableCursor(void);\nvoid DisableCursor(void);\nbool IsCursorOnScreen(void);\n```\n\n----------------------------------------\n\nTITLE: Getting Random Value in Range in C\nDESCRIPTION: Function to get a random value between min and max (both included). It takes two integer parameters for the range.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nint GetRandomValue(int min, int max);\n```\n\n----------------------------------------\n\nTITLE: Handling Gesture-Dependent Examples in CMake\nDESCRIPTION: Removes examples that depend on the gesture system when gesture support is not available. This conditional block excludes touch and gesture input examples when the SUPPORT_GESTURES_SYSTEM flag is not defined.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (NOT SUPPORT_GESTURES_SYSTEM)\n    # Items requiring gestures system\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/textures/textures_mouse_painting.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_basic_screen_manager.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_input_gestures_web.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/core/core_input_gestures.c)\n```\n\n----------------------------------------\n\nTITLE: Unix-Specific Libraries Configuration\nDESCRIPTION: Links against Unix-specific libraries (rt, math, dl) on Unix platforms that aren't macOS. These libraries provide core functionality needed by GLFW on Unix systems.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif (UNIX AND NOT APPLE)\n    find_library(RT_LIBRARY rt)\n    mark_as_advanced(RT_LIBRARY)\n    if (RT_LIBRARY)\n        target_link_libraries(glfw PRIVATE \"${RT_LIBRARY}\")\n        list(APPEND glfw_PKG_LIBS \"-lrt\")\n    endif()\n\n    find_library(MATH_LIBRARY m)\n    mark_as_advanced(MATH_LIBRARY)\n    if (MATH_LIBRARY)\n        target_link_libraries(glfw PRIVATE \"${MATH_LIBRARY}\")\n        list(APPEND glfw_PKG_LIBS \"-lm\")\n    endif()\n\n    if (CMAKE_DL_LIBS)\n        target_link_libraries(glfw PRIVATE \"${CMAKE_DL_LIBS}\")\n        list(APPEND glfw_PKG_LIBS \"-l${CMAKE_DL_LIBS}\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining VrStereoConfig Structure in C for Raylib\nDESCRIPTION: Defines the VrStereoConfig struct used in Raylib for VR stereo rendering configuration. It includes fields for projection matrices, view offsets, lens centers, screen centers, and distortion scales.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nstruct VrStereoConfig {\n  Matrix[2] projection;       // VR projection matrices (per eye)\n  Matrix[2] viewOffset;       // VR view offset matrices (per eye)\n  float[2] leftLensCenter;    // VR left lens center\n  float[2] rightLensCenter;   // VR right lens center\n  float[2] leftScreenCenter;  // VR left screen center\n  float[2] rightScreenCenter; // VR right screen center\n  float[2] scale;             // VR distortion scale\n  float[2] scaleIn;           // VR distortion scale in\n};\n```\n\n----------------------------------------\n\nTITLE: GLFW Library Name and Version Configuration\nDESCRIPTION: Sets the output name and version properties for the GLFW library. Uses soname system on Unix-like systems for shared libraries. Configures position-independent code, C standard, and other build properties.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif (UNIX AND GLFW_BUILD_SHARED_LIBRARY)\n    # On Unix-like systems, shared libraries can use the soname system.\n    set(GLFW_LIB_NAME glfw)\nelse()\n    set(GLFW_LIB_NAME glfw3)\nendif()\nset(GLFW_LIB_NAME_SUFFIX \"\")\n\nset_target_properties(glfw PROPERTIES\n                      OUTPUT_NAME ${GLFW_LIB_NAME}\n                      VERSION ${GLFW_VERSION_MAJOR}.${GLFW_VERSION_MINOR}\n                      SOVERSION ${GLFW_VERSION_MAJOR}\n                      POSITION_INDEPENDENT_CODE ON\n                      C_STANDARD 99\n                      C_EXTENSIONS OFF\n                      DEFINE_SYMBOL _GLFW_BUILD_DLL\n                      FOLDER \"GLFW3\")\n```\n\n----------------------------------------\n\nTITLE: Example Project with Resources URL\nDESCRIPTION: The URL for an example raylib game template project with resources for Code::Blocks.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CodeBlocks/README.md#2025-04-18_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/electronstudio/raylib-game-template-codeblocks\n```\n\n----------------------------------------\n\nTITLE: Setting Up GLFW Installation Targets\nDESCRIPTION: Configures the installation of GLFW targets, specifying where binaries, archives, and libraries should be installed when the GLFW_INSTALL option is enabled.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif (GLFW_INSTALL)\n    install(TARGETS glfw\n            EXPORT glfwTargets\n            RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n            ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n            LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining AudioCallback Function Signature in Raylib\nDESCRIPTION: Callback function signature for custom audio processing. Allows direct manipulation of audio buffer data with specified frame count for implementing custom audio effects or generation.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nvoid AudioCallback(void *bufferData, unsigned int frames);\n```\n\n----------------------------------------\n\nTITLE: Raylib Compile and Execute Program\nDESCRIPTION: Sets up the environment, cleans previous builds, saves the current file, compiles a raylib program with required flags and libraries, and then executes the resulting program. Includes linking to OpenGL and Windows-specific libraries.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_tcc.txt#2025-04-18_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\n::raylib_compile_execute\necho > Setup required Environment\necho -----------------------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\tcc\nENV_SET PATH=$(COMPILER_PATH)\nSET CC=tcc\nSET CFLAGS=$(RAYLIB_PATH)\\src\\raylib.rc.data -std=c99 -Wall -I$(RAYLIB_PATH)\\src -Iexternal -DPLATFORM_DESKTOP\nSET LDFLAGS=-L$(RAYLIB_PATH)\\src -lmsvcrt -lraylib -lopengl32 -lgdi32 -lwinmm -lkernel32 -lshell32 -luser32 -Wl,-subsystem=gui\ncd $(CURRENT_DIRECTORY)\necho\necho > Clean latest build\necho -------------------------\ncmd /c IF EXIST $(NAME_PART).exe del /F $(NAME_PART).exe\necho\necho > Saving Current File\necho -------------------------\nnpp_save\necho\necho > Compile program\necho -----------------------\n$(CC) -o $(NAME_PART).exe $(FILE_NAME) $(CFLAGS) $(LDFLAGS)\necho\necho > Reset Environment\necho ---------------------------\nENV_UNSET PATH\necho\necho > Execute program\necho -----------------------\ncmd /c IF EXIST $(NAME_PART).exe $(NAME_PART).exe\n```\n\n----------------------------------------\n\nTITLE: Win32 Platform-Specific Sources\nDESCRIPTION: Adds Windows-specific source files and definitions to the GLFW library build when the Win32 backend is enabled. Includes implementation files for Windows platform functionality.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_WIN32)\n    target_compile_definitions(glfw PRIVATE _GLFW_WIN32)\n    target_sources(glfw PRIVATE win32_platform.h win32_joystick.h win32_init.c\n                                win32_joystick.c win32_monitor.c win32_window.c\n                                wgl_context.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshot in C\nDESCRIPTION: Function to take a screenshot of the current screen. The filename extension defines the format of the screenshot.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nvoid TakeScreenshot(const char *fileName);\n```\n\n----------------------------------------\n\nTITLE: Raylib Library Source Compilation Script\nDESCRIPTION: A batch script for compiling the Raylib library from source. Sets up OpenGL API version, compiles each Raylib module separately, creates the static library, and installs headers and library files to the appropriate MinGW directories.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\n::raylib_source_compile\necho > Choose compile options\necho -------------------------------\necho Set desired OpenGL API version: 1.1, 2.1, 3.3, 4.3\nSET GRAPHIC_API=GRAPHICS_API_OPENGL_33\necho\necho > Setup required Environment\necho ---------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\w64devkit\\bin\nENV_SET PATH=$(COMPILER_PATH)\nSET CC=gcc\nSET AR=ar\nSET CFLAGS=-std=c99 -Wall -DPLATFORM_DESKTOP -D$(GRAPHIC_API) -Wno-unused-parameter\nSET RELEASE_PATH=$(COMPILER_PATH)\\..\\x86_64-w64-mingw32\ncd $(RAYLIB_PATH)\\src\necho\necho > Clean latest build\necho ---------------------\ncmd /c del /F *.o\ncmd /c del /F libraylib.a\necho\necho > Compile raylib modules\necho -----------------------------\n$(CC) --version\n$(CC) -c rcore.c -Iexternal/glfw/include $(CFLAGS)\n$(CC) -c rglfw.c $(CFLAGS)\n$(CC) -c rshapes.c $(CFLAGS)\n$(CC) -c rtextures.c $(CFLAGS)\n$(CC) -c rtext.c $(CFLAGS)\n$(CC) -c rmodels.c $(CFLAGS)\n$(CC) -c raudio.c $(CFLAGS)\n$(CC) -c utils.c $(CFLAGS)\necho\necho > Generate raylib library\necho -----------------------------\n$(AR) rcs libraylib.a rcore.o rglfw.o rshapes.o rtextures.o rtext.o rmodels.o raudio.o utils.o\necho\necho > Install raylib library\necho -----------------------\ncmd /c copy raylib.h $(RELEASE_PATH)\\include /Y\ncmd /c copy rlgl.h $(RELEASE_PATH)\\include /Y\ncmd /c copy libraylib.a $(RELEASE_PATH)\\lib /Y\necho\necho > Reset Environment\necho ---------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Properties and Dependencies\nDESCRIPTION: Sets up library properties including version information, symbol visibility, and linking dependencies. Configures include directories and installation settings.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/CMakeLists.txt#2025-04-18_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(raylib PROPERTIES\n                      PUBLIC_HEADER \"${raylib_public_headers}\"\n                      VERSION ${PROJECT_VERSION}\n                      SOVERSION ${API_VERSION}\n                      )\n\nif (WITH_PIC OR BUILD_SHARED_LIBS)\n    set_property(TARGET raylib PROPERTY POSITION_INDEPENDENT_CODE ON)\nendif ()\n\nif (BUILD_SHARED_LIBS)\n    set_property(TARGET raylib PROPERTY C_VISIBILITY_PRESET hidden)\nendif ()\n\ntarget_link_libraries(raylib \"${LIBS_PRIVATE}\")\n\ntarget_include_directories(raylib\n                           PUBLIC\n                           $<INSTALL_INTERFACE:include>\n                           $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>\n                           PRIVATE\n                           ${CMAKE_CURRENT_SOURCE_DIR}\n                           ${OPENGL_INCLUDE_DIR}\n                           ${OPENAL_INCLUDE_DIR}\n                           )\n```\n\n----------------------------------------\n\nTITLE: X11 Platform-Specific Sources\nDESCRIPTION: Adds X11-specific source files and definitions to the GLFW library build when the X11 backend is enabled. Includes implementation files for X11 platform functionality on Unix systems.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_X11)\n    target_compile_definitions(glfw PRIVATE _GLFW_X11)\n    target_sources(glfw PRIVATE x11_platform.h xkb_unicode.h x11_init.c\n                                x11_monitor.c x11_window.c xkb_unicode.c\n                                glx_context.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Markdown Roadmap Documentation\nDESCRIPTION: Detailed version-by-version roadmap for raylib development, including completed features, planned improvements, and long-term goals. Covers versions from 1.4 through planned 5.x releases.\nSOURCE: https://github.com/raysan5/raylib/blob/master/ROADMAP.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# raylib roadmap\n\nHere is a wishlist with features and ideas to improve the library...\n\n**raylib 5.x**\n - [ ] `rcore`: Support additional platforms: iOS, Xbox Series S|X\n - [ ] `rcore_web`: Avoid GLFW dependency, functionality can be directly implemented using emscripten SDK\n - [ ] `rlgl`: Review GLSL shaders naming conventions for consistency\n...\n\n**raylib 1.4**\n - [x] TTF fonts support (using stb_truetype)\n - [x] Raycast system for 3D picking (including collisions detection)\n - [x] Floyd-Steinberg dithering on 16bit image format conversion\n...\n```\n\n----------------------------------------\n\nTITLE: Vector2 Structure Definition in C\nDESCRIPTION: Defines a 2D vector structure with x and y float components used for 2D positions and directions\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct Vector2 {\n    float x;    // Vector x component\n    float y;    // Vector y component\n} Vector2;\n```\n\n----------------------------------------\n\nTITLE: X11 Dependencies Configuration\nDESCRIPTION: Sets up the X11 dependencies and header paths for the X11 backend. Checks for required X11 extension headers like XRandR, Xinerama, Xkb, Xcursor, XInput, and XShape.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_X11)\n    find_package(X11 REQUIRED)\n    target_include_directories(glfw PRIVATE \"${X11_X11_INCLUDE_PATH}\")\n\n    # Check for XRandR (modern resolution switching and gamma control)\n    if (NOT X11_Xrandr_INCLUDE_PATH)\n        message(FATAL_ERROR \"RandR headers not found; install libxrandr development package\")\n    endif()\n    target_include_directories(glfw PRIVATE \"${X11_Xrandr_INCLUDE_PATH}\")\n\n    # Check for Xinerama (legacy multi-monitor support)\n    if (NOT X11_Xinerama_INCLUDE_PATH)\n        message(FATAL_ERROR \"Xinerama headers not found; install libxinerama development package\")\n    endif()\n    target_include_directories(glfw PRIVATE \"${X11_Xinerama_INCLUDE_PATH}\")\n\n    # Check for Xkb (X keyboard extension)\n    if (NOT X11_Xkb_INCLUDE_PATH)\n        message(FATAL_ERROR \"XKB headers not found; install X11 development package\")\n    endif()\n    target_include_directories(glfw PRIVATE \"${X11_Xkb_INCLUDE_PATH}\")\n\n    # Check for Xcursor (cursor creation from RGBA images)\n    if (NOT X11_Xcursor_INCLUDE_PATH)\n        message(FATAL_ERROR \"Xcursor headers not found; install libxcursor development package\")\n    endif()\n    target_include_directories(glfw PRIVATE \"${X11_Xcursor_INCLUDE_PATH}\")\n\n    # Check for XInput (modern HID input)\n    if (NOT X11_Xi_INCLUDE_PATH)\n        message(FATAL_ERROR \"XInput headers not found; install libxi development package\")\n    endif()\n    target_include_directories(glfw PRIVATE \"${X11_Xi_INCLUDE_PATH}\")\n\n    # Check for X Shape (custom window input shape)\n    if (NOT X11_Xshape_INCLUDE_PATH)\n        message(FATAL_ERROR \"X Shape headers not found; install libxext development package\")\n    endif()\n    target_include_directories(glfw PRIVATE \"${X11_Xshape_INCLUDE_PATH}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Loading Music Stream from Memory in C with raylib\nDESCRIPTION: This function loads a music stream from memory. It takes the file type, a pointer to the data, and the data size as parameters. It returns a Music object.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_87\n\nLANGUAGE: C\nCODE:\n```\nMusic LoadMusicStreamFromMemory(const char *fileType, const unsigned char *data, int dataSize);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Version Options\nDESCRIPTION: Defines an enumeration option for selecting the OpenGL version to use, ranging from OpenGL 4.3 down to OpenGL ES 2.0.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nenum_option(OPENGL_VERSION \"OFF;4.3;3.3;2.1;1.1;ES 2.0;ES 3.0\" \"Force a specific OpenGL Version?\")\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Options\nDESCRIPTION: Creates an enumeration option for selecting the target platform with several choices including Desktop, Web, Android, and others.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nenum_option(PLATFORM \"Desktop;Web;Android;Raspberry Pi;DRM;SDL\" \"Platform to build for.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Platform for Emscripten\nDESCRIPTION: Sets the default platform to 'Web' when using Emscripten compiler for WebAssembly/JavaScript builds.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(EMSCRIPTEN)\n    # When configuring web builds with \"emcmake cmake -B build -S .\", set PLATFORM to Web by default\n    SET(PLATFORM Web CACHE STRING \"Platform to build for.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence in C\nDESCRIPTION: Function to check if a file exists. It takes a filename as a parameter and returns a boolean value.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nbool FileExists(const char *fileName);\n```\n\n----------------------------------------\n\nTITLE: Color Constants Definition in C\nDESCRIPTION: Defines standard color constants using RGBA components in the range 0-255\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define LIGHTGRAY  CLITERAL(Color){ 200, 200, 200, 255 }\n#define GRAY      CLITERAL(Color){ 130, 130, 130, 255 }\n#define RED       CLITERAL(Color){ 230, 41, 55, 255 }\n```\n\n----------------------------------------\n\nTITLE: Function Definition Format Example\nDESCRIPTION: Shows the expected format for function definitions in the header file. Functions must be defined on a single line with return type, name, parameters, and description.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/README.md#2025-04-18_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n<retType> <name>(<paramType[0]> <paramName[0]>, <paramType[1]> <paramName[1]>);  <desc>\n```\n\n----------------------------------------\n\nTITLE: Including Required CMake Modules\nDESCRIPTION: Includes the necessary CMake modules for dependent options and enumeration options which are used to configure the build.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(CMakeDependentOption)\ninclude(EnumOption)\n```\n\n----------------------------------------\n\nTITLE: Highlighting C programming contribution opportunity in Markdown\nDESCRIPTION: A markdown code snippet highlighting C programming as a way to contribute to raylib, where contributors can write, review, test, or improve the code.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n- `C programming` - Can you write/review/test/improve the code? \n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Macros in C\nDESCRIPTION: Defines wrapper macros for standard memory allocation functions\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define RL_MALLOC(sz)       malloc(sz)\n#define RL_CALLOC(n,sz)    calloc(n,sz)\n#define RL_REALLOC(ptr,sz)  realloc(ptr,sz)\n#define RL_FREE(ptr)        free(ptr)\n```\n\n----------------------------------------\n\nTITLE: Enum Definition Format Example\nDESCRIPTION: Shows the expected format for enum definitions in the header file. Enums must include a description, optional value assignments, and optional value descriptions.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/README.md#2025-04-18_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n<desc>\ntypedef enum {\n    <valueName[0]> = <valueInteger[0]>, <valueDesc[0]>\n    <valueName[1]>,\n    <valueName[2]>, <valueDesc[2]>\n    <valueName[3]>  <valueDesc[3]>\n} <name>;\n```\n\n----------------------------------------\n\nTITLE: NppExec Compilation Scripts for raylib\nDESCRIPTION: A set of scripts for the NppExec plugin in Notepad++ to compile the raylib library and examples. These scripts are stored in the npes_saved.txt file.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\nnpes_saved.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Library Build Configuration\nDESCRIPTION: Configures the library build type (static or shared) and sets up platform-specific options. Includes special handling for web platform builds using Emscripten.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/CMakeLists.txt#2025-04-18_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(raylib ${raylib_sources} ${raylib_public_headers})\n\nif (NOT BUILD_SHARED_LIBS)\n    MESSAGE(STATUS \"Building raylib static library\")\n    add_library(raylib_static ALIAS raylib)\nelse()\n    MESSAGE(STATUS \"Building raylib shared library\")\n    target_compile_definitions(raylib\n                               PRIVATE $<BUILD_INTERFACE:BUILD_LIBTYPE_SHARED>\n                               INTERFACE $<INSTALL_INTERFACE:USE_LIBTYPE_SHARED>\n                               )\nendif()\n\nif (${PLATFORM} MATCHES \"Web\")\n    target_link_options(raylib PUBLIC \"-sUSE_GLFW=3\")\n    if(${GRAPHICS} MATCHES \"GRAPHICS_API_OPENGL_ES3\")\n        target_link_options(raylib PUBLIC \"-sMIN_WEBGL_VERSION=2\")\n        target_link_options(raylib PUBLIC \"-sMAX_WEBGL_VERSION=2\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation Macros\nDESCRIPTION: Memory allocation system using RL_MALLOC and RL_FREE macros to allow custom memory allocation mechanisms and better embedded device support.\nSOURCE: https://github.com/raysan5/raylib/blob/master/HISTORY.md#2025-04-18_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nRL_MALLOC\nRL_FREE\n```\n\n----------------------------------------\n\nTITLE: Code::Blocks Project File\nDESCRIPTION: The name of the Code::Blocks project file to open for the raylib template.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CodeBlocks/README.md#2025-04-18_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\ncore_basic_windows.cbp\n```\n\n----------------------------------------\n\nTITLE: Windows Resource File Compilation Script\nDESCRIPTION: A batch script for compiling Windows resource (.rc) files using windres. Sets up environment paths, compiles the resource file with optional architecture target options, then resets the environment.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n::resource_file_compilation\necho > Setup required Environment\necho ---------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\w64devkit\\bin\nENV_SET PATH=$(COMPILER_PATH)\nSET RESC=windres\ncd $(CURRENT_DIRECTORY)\necho\necho > Compile simple .rc file\necho ------------------------\n// Choose CPU architecture target: --target=pe-i386 (32bit) / --target=pe-x86-64 (64bit)\n//$(RESC) $(NAME_PART).rc -o $(NAME_PART).rc.data --target=pe-x86-64\n$(RESC) $(NAME_PART).rc -o $(NAME_PART).rc.data\necho\necho > Reset Environment\necho ---------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Creating Uninstall Target for Raylib\nDESCRIPTION: Configures and creates an 'uninstall' target if it doesn't already exist. This allows users to easily uninstall the library using the 'make uninstall' command, which executes the generated cmake_uninstall.cmake script.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Uninstall target\nif(NOT TARGET uninstall)\n  configure_file(\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/Uninstall.cmake\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake\"\n    IMMEDIATE @ONLY)\n\n  add_custom_target(uninstall\n    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: macOS Installation Guide URL\nDESCRIPTION: The URL for the raylib wiki page with instructions for installing raylib on macOS systems.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CodeBlocks/README.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/raysan5/raylib/wiki/Working-on-macOS\n```\n\n----------------------------------------\n\nTITLE: Highlighting Web Development contribution opportunity in Markdown\nDESCRIPTION: A markdown code snippet highlighting web development as a way to contribute to raylib, specifically helping with the project website.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n- `Web Development` - Can you help [with the website](https://github.com/raysan5/raylib.com)?\n```\n\n----------------------------------------\n\nTITLE: Using Command Line Arguments with Raylib Build Scripts\nDESCRIPTION: Examples of various command line arguments that can be used with the build scripts for different platforms. These commands demonstrate how to build release or debug builds, run the executable after compilation, and perform other common build tasks.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/scripts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbuild-windows.bat       # Build a release build, on Windows\n./build-linux.sh -c     # Build a release build, full recompile, on Linux\n./build-osx.sh -d -r    # Build a debug build and run, on macOS\nsh build-linux.sh -drqq # Build in debug, run, don't print at all, on Linux with `sh`\n```\n\n----------------------------------------\n\nTITLE: GNU/Linux Installation Guide URL\nDESCRIPTION: The URL for the raylib wiki page with instructions for installing raylib on GNU/Linux systems.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CodeBlocks/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/raysan5/raylib/wiki/Working-on-GNU-Linux\n```\n\n----------------------------------------\n\nTITLE: Gamepad Mappings Update Target Configuration\nDESCRIPTION: Creates a custom target for updating gamepad mappings from an upstream repository. This target uses CMake's script mode to generate a mappings.h file from mappings.h.in.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(update_mappings\n    COMMAND \"${CMAKE_COMMAND}\" -P \"${GLFW_SOURCE_DIR}/CMake/GenerateMappings.cmake\" mappings.h.in mappings.h\n    WORKING_DIRECTORY \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    COMMENT \"Updating gamepad mappings from upstream repository\"\n    SOURCES mappings.h.in \"${GLFW_SOURCE_DIR}/CMake/GenerateMappings.cmake\"\n    VERBATIM)\n\nset_target_properties(update_mappings PROPERTIES FOLDER \"GLFW3\")\n```\n\n----------------------------------------\n\nTITLE: Raylib IDE Support Matrix in Markdown\nDESCRIPTION: A markdown table showing IDE support matrix for raylib, including platform compatibility and availability of source code and examples. Covers multiple IDEs like 4coder, Builder, CMake, CodeBlocks, and others.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nIDE | Platform(s) | Source | Example(s)\n----| ------------| :-------: | :-----:\n[4coder](http://4coder.net/) | Windows | ❌ | ✔️\n[Builder](https://wiki.gnome.org/Apps/Builder) | Linux | ❌ | ✔️\n[CMake](https://cmake.org/) | Windows, Linux, macOS, Web | ✔️ | ✔️\n[CodeBlocks](http://www.codeblocks.org/) | Windows, Linux, macOS | ❌ | ✔️\n[Geany](https://www.geany.org/) | Windows, Linux | ✔️ | ✔️\n[Notepad++](https://notepad-plus-plus.org/) | Windows | ✔️ | ✔️\n[SublimeText](https://www.sublimetext.com/) | Windows, Linux, macOS | ✔️ | ✔️\n[VS2019](https://www.visualstudio.com) | Windows | ✔️ | ✔️\n[VSCode](https://code.visualstudio.com/) | Windows, macOS | ❌ | ✔️\nscripts | Windows, Linux, macOS | ✔️ | ✔️\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Module Path for Raylib\nDESCRIPTION: Adds the project's cmake directory to the CMake module path, making it easier to include custom CMake modules from that directory throughout the build configuration.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Directory for easier includes\n# Anywhere you see include(...) you can check <root>/cmake for that file\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing raylib Windows Installer URL\nDESCRIPTION: The URL for downloading the raylib Windows Installer package with MinGW compiler.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CodeBlocks/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/raysan5/raylib/releases/download/4.2.0/raylib_installer_v420.mingw.exe\n```\n\n----------------------------------------\n\nTITLE: Highlighting Platform Porting contribution opportunity in Markdown\nDESCRIPTION: A markdown code snippet highlighting platform porting as a way to contribute to raylib, where contributors can port, adapt, or compile raylib on other systems.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n- `Porting to other platforms` - Can you port/adapt/compile raylib on other systems?\n```\n\n----------------------------------------\n\nTITLE: Generating raylib Autocomplete XML for Notepad++\nDESCRIPTION: A tool called 'raylib_npp_parser' is used to generate the autocomplete XML file for Notepad++. It parses the raylib.h header file to extract function information and create the corresponding XML structure.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/README.md#2025-04-18_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\nc_raylib.xml\n```\n\n----------------------------------------\n\nTITLE: Markdown List of GLFW Contributors\nDESCRIPTION: A markdown-formatted list containing the names of all contributors to the GLFW project main repository, organized alphabetically.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/CONTRIBUTORS.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Acknowledgements\\n\\nGLFW exists because people around the world donated their time and lent their\\nskills.  This list only includes contributions to the main repository and\\nexcludes other invaluable contributions like language bindings and text and\\nvideo tutorials.\n```\n\n----------------------------------------\n\nTITLE: Detaching Audio Stream Processor in C\nDESCRIPTION: This function detaches a previously attached audio stream processor from a specific stream.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_90\n\nLANGUAGE: C\nCODE:\n```\nvoid DetachAudioStreamProcessor(AudioStream stream, AudioCallback processor)\n```\n\n----------------------------------------\n\nTITLE: Raylib Makefile Execution\nDESCRIPTION: Sets up the environment and executes a makefile for raylib projects. Allows selecting the target platform (DESKTOP, RPI, ANDROID, WEB) and compiles the project using make.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_tcc.txt#2025-04-18_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n::raylib_makefile\necho > Choose compile options\necho -------------------------------------\necho Set desired PLATFORM: DESKTOP, RPI, ANDROID, WEB\nSET PLATFORM=PLATFORM_DESKTOP\necho\necho > Setup required Environment\necho -----------------------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\tcc\nENV_SET PATH=$(COMPILER_PATH)\nSET MAKE=make\ncd $(CURRENT_DIRECTORY)\necho\necho WARNING: Makefile to be executed must be open and selected!\necho\necho > Execute makefile\necho -----------------------\n//$(MAKE) clean\n$(MAKE) PLATFORM=$(PLATFORM) -B\n// Build a single example using raylib/examples/Makefile\n//$(MAKE) core/core_basic_window PLATFORM=$(PLATFORM) -B\necho\necho > Reset Environment\necho ---------------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Structure Definition Format Example\nDESCRIPTION: Shows the expected format for structure definitions in the header file. Structures must include a description, name, and field definitions with types, names, and descriptions.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/README.md#2025-04-18_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n<desc>\ntypedef struct <name> {\n    <fieldType[0]> <fieldName[0]>;  <fieldDesc[0]>\n    <fieldType[1]> <fieldName[1]>;  <fieldDesc[1]>\n    <fieldType[2]> <fieldName[2]>;  <fieldDesc[2]>\n} <name>;\n```\n\n----------------------------------------\n\nTITLE: Raylib Makefile Execution Script\nDESCRIPTION: A batch script for running make with Raylib's makefiles. Allows setting the target platform (DESKTOP, RPI, ANDROID, WEB), cleans previous builds, and executes the selected makefile with appropriate parameters.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_4\n\nLANGUAGE: batch\nCODE:\n```\n::raylib_makefile\necho > Choose compile options\necho -------------------------------\necho Set desired PLATFORM: DESKTOP, RPI, ANDROID, WEB\nSET PLATFORM=PLATFORM_DESKTOP\necho\necho > Setup required Environment\necho ---------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\w64devkit\\bin\nENV_SET PATH=$(COMPILER_PATH)\nSET MAKE=mingw32-make\ncd $(CURRENT_DIRECTORY)\necho\necho WARNING: Makefile to be executed must be open and selected!\necho\necho > Clean latest build\necho ---------------------\ncmd /c del /F *.o\ncmd /c del /F libraylib.a\necho\necho > Execute makefile (generic)\necho -----------------------------\n$(MAKE) PLATFORM=$(PLATFORM) -B \necho\n//echo > Compile one specific example\n//$(MAKE) core/core_basic_window PLATFORM=$(PLATFORM) -B\necho\n//echo > Compile one specific example, using Web custom Makefile.Web\n//$(MAKE) -f Makefile.Web core/core_basic_window PLATFORM=$(PLATFORM) -B\necho\necho > Reset Environment\necho ---------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Basic C Compilation Script for Windows\nDESCRIPTION: A Windows batch script for compiling simple C files with GCC. Sets up necessary environment paths, saves the current file, compiles it with standard C99 and warning flags, then resets the environment.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n:: basic_c_compilation\necho > Setup required Environment\necho ---------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\w64devkit\\bin\nENV_SET PATH=$(COMPILER_PATH)\nSET CC=gcc\ncd $(CURRENT_DIRECTORY)\necho\necho > Saving Current File\necho -----------------------\nnpp_save\necho\necho > Compile simple C file\necho ------------------------\n$(CC) -o $(NAME_PART).exe $(FILE_NAME) -Wall -Wextra -std=c99\necho\necho > Reset Environment\necho ---------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Build Options\nDESCRIPTION: Sets options for position-independent code, shared library building, and audio module inclusion.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Shared library is always PIC. Static library should be PIC too if linked into a shared library\noption(WITH_PIC \"Compile static library as position-independent code\" OFF)\noption(BUILD_SHARED_LIBS \"Build raylib as a shared library\" OFF)\ncmake_dependent_option(USE_AUDIO \"Build raylib with audio module\" ON CUSTOMIZE_BUILD ON)\n```\n\n----------------------------------------\n\nTITLE: Handling Audio-Dependent Examples in CMake\nDESCRIPTION: Removes examples that depend on the raudio module when audio support is disabled. Excludes all audio examples plus other examples that require sound capabilities when SUPPORT_MODULE_RAUDIO is not defined.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# The audio examples fail to link if raylib is built without raudio\nif (NOT SUPPORT_MODULE_RAUDIO)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/audio/audio_mixed_processor.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/audio/audio_module_playing.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/audio/audio_music_stream.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/audio/audio_raw_stream.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/audio/audio_sound_loading.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/audio/audio_sound_multi.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/audio/audio_stream_effects.c)\n\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/others/embedded_files_loading.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/textures/textures_sprite_button.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/textures/textures_sprite_explosion.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic C Compilation with TCC Compiler\nDESCRIPTION: Sets up the environment, saves the current file in Notepad++, and compiles a basic C file using TCC compiler with standard flags.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_tcc.txt#2025-04-18_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\n:: basic_c_compilation\necho > Setup required Environment\necho -----------------------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\tcc\nENV_SET PATH=$(COMPILER_PATH)\nSET CC=tcc\ncd $(CURRENT_DIRECTORY)\necho\necho > Saving Current File\necho -------------------------\nnpp_save\necho\necho > Compile simple C file\necho ----------------------------\n$(CC) -o $(NAME_PART).exe $(FILE_NAME) -Wall -Wextra -std=c99\necho\necho > Reset Environment\necho ---------------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Setting GLFW Build Options\nDESCRIPTION: Configures options for building the bundled GLFW library with Wayland and X11 support.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# GLFW build options\noption(GLFW_BUILD_WAYLAND \"Build the bundled GLFW with Wayland support\" OFF)\noption(GLFW_BUILD_X11 \"Build the bundled GLFW with X11 support\" ON)\n```\n\n----------------------------------------\n\nTITLE: Copying Resource Files in CMake\nDESCRIPTION: Copies all example resource files to the resources directory in the build folder. This ensures that example programs can access their resource files (images, sounds, etc.) at runtime from a consistent location.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy all of the resource files to the destination\nfile(COPY ${example_resources} DESTINATION \"resources/\")\n```\n\n----------------------------------------\n\nTITLE: Validating raylib Data Structures in C\nDESCRIPTION: New functions have been added to validate raylib data structures, making it easier for users to ensure data has been correctly loaded.\nSOURCE: https://github.com/raysan5/raylib/blob/master/HISTORY.md#2025-04-18_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nIsImageReady();\nIsTextureReady();\nIsSoundReady();\n```\n\n----------------------------------------\n\nTITLE: Including External Libraries and Finding Raylib in CMake\nDESCRIPTION: Sets up include paths for external libraries and ensures Raylib is available for linking. Adds the external headers directory to the include path and finds the Raylib package if it's not already available as a target.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(BEFORE SYSTEM others/external/include)\n\nif (NOT TARGET raylib)\n    find_package(raylib 2.0 REQUIRED)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: System Capability Detection for Physac Examples in CMake\nDESCRIPTION: Checks for system capabilities required by the physac examples, specifically looking for CLOCK_MONOTONIC and QueryPerformanceCounter timing functions. Includes the physac directory only if the required timing functions are available.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_REQUIRED_DEFINITIONS -D_POSIX_C_SOURCE=199309L)\ninclude(CheckSymbolExists)\ncheck_symbol_exists(CLOCK_MONOTONIC time.h HAVE_CLOCK_MONOTONIC)\ncheck_symbol_exists(QueryPerformanceCounter windows.h HAVE_QPC)\nset(CMAKE_REQUIRED_DEFINITIONS)\n\nif (HAVE_QPC OR HAVE_CLOCK_MONOTONIC)\n    set(example_dirs ${example_dirs} physac)\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Raylib Source Directory\nDESCRIPTION: Adds the main source directory to the build. The second parameter 'raylib' sets the output directory name, ensuring libraries and other build outputs are placed in a directory named 'raylib'.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Main sources directory (the second parameter sets the output directory name to raylib)\nadd_subdirectory(src raylib)\n```\n\n----------------------------------------\n\nTITLE: Conditional Exclusion of RLGL Standalone Example in CMake\nDESCRIPTION: Removes the RLGL standalone example when building with shared libraries or targeting non-desktop platforms. This example is designed to work only with static libraries on desktop platforms.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# The rlgl_standalone example only targets desktop, without shared libraries.\nif (BUILD_SHARED_LIBS OR NOT ${PLATFORM} MATCHES \"Desktop\")\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/others/rlgl_standalone.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Validating Display System Configuration for Unix Platforms\nDESCRIPTION: Ensures that on Unix systems (excluding macOS and DRM platforms), at least one display system (Wayland or X11) is enabled. Raises a fatal error if both are disabled as at least one is required for the build to succeed.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeLists.txt#2025-04-18_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif (UNIX AND NOT APPLE AND NOT \"${PLATFORM}\" MATCHES \"DRM\")\n  if (NOT GLFW_BUILD_WAYLAND AND NOT GLFW_BUILD_X11)\n    MESSAGE(FATAL_ERROR \"Cannot disable both Wayland and X11\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: macOS OpenGL Deprecation Handling in CMake\nDESCRIPTION: Adds a definition to silence OpenGL deprecation warnings on macOS 10.14 (Mojave) and later. Shows a warning message to notify that OpenGL is deprecated starting with macOS Mojave.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (APPLE AND NOT CMAKE_SYSTEM STRLESS \"Darwin-18.0.0\")\n    add_definitions(-DGL_SILENCE_DEPRECATION)\n    MESSAGE(AUTHOR_WARNING \"OpenGL is deprecated starting with macOS 10.14 (Mojave)!\")\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Build Options\nDESCRIPTION: Configures platform-dependent build options for Win32, Cocoa, X11, and Wayland backends.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/CMakeLists.txt#2025-04-18_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_dependent_option(GLFW_BUILD_WIN32 \"Build support for Win32\" ON \"WIN32\" OFF)\ncmake_dependent_option(GLFW_BUILD_COCOA \"Build support for Cocoa\" ON \"APPLE\" OFF)\ncmake_dependent_option(GLFW_BUILD_X11 \"Build support for X11\" ON \"UNIX;NOT APPLE\" OFF)\ncmake_dependent_option(GLFW_BUILD_WAYLAND \"Build support for Wayland\" ON \"UNIX;NOT APPLE\" OFF)\n```\n\n----------------------------------------\n\nTITLE: DRM Platform Configuration in CMake\nDESCRIPTION: Configures build settings for the DRM platform (Direct Rendering Manager, typically used on Linux without X11). Removes examples that are not compatible with DRM, specifically standalone RLGL and OpenGL interop examples.\nSOURCE: https://github.com/raysan5/raylib/blob/master/examples/CMakeLists.txt#2025-04-18_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nelseif (\"${PLATFORM}\" STREQUAL \"DRM\")\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/others/rlgl_standalone.c)\n    list(REMOVE_ITEM example_sources ${CMAKE_CURRENT_SOURCE_DIR}/others/raylib_opengl_interop.c)\n```\n\n----------------------------------------\n\nTITLE: Defining Raylib Field Types\nDESCRIPTION: Definition of count and events fields for automation event handling in Raylib.\nSOURCE: https://github.com/raysan5/raylib/blob/master/parser/output/raylib_api.txt#2025-04-18_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nunsigned int count // Events entries count\nAutomationEvent * events // Events entries\n```\n\n----------------------------------------\n\nTITLE: Configuring GLFW Build Options\nDESCRIPTION: Defines build options for GLFW including shared libraries, examples, tests, documentation and installation targets.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/CMakeLists.txt#2025-04-18_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_SHARED_LIBS \"Build shared libraries\" OFF)\noption(GLFW_BUILD_EXAMPLES \"Build the GLFW example programs\" ${GLFW_STANDALONE})\noption(GLFW_BUILD_TESTS \"Build the GLFW test programs\" ${GLFW_STANDALONE})\noption(GLFW_BUILD_DOCS \"Build the GLFW documentation\" ON)\noption(GLFW_INSTALL \"Generate installation target\" ON)\n```\n\n----------------------------------------\n\nTITLE: Listing Modified Static Function Names in GLFW for Raylib Integration\nDESCRIPTION: Lists the static functions that have been renamed across different platforms to allow GLFW source files to be combined into a single file 'rglfw.c'. These functions share the same name in different platforms but have been renamed to avoid conflicts.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncreateKeyTables()\ntranslateKey()\nacquireMonitor()\nreleaseMonitor()\n```\n\n----------------------------------------\n\nTITLE: Initializing GLFW CMake Project\nDESCRIPTION: Sets up basic CMake project configuration for GLFW including version requirements, project name, and build policies.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4...3.28 FATAL_ERROR)\n\nproject(GLFW VERSION 3.4.0 LANGUAGES C)\n\nif (POLICY CMP0069)\n    cmake_policy(SET CMP0069 NEW)\nendif()\n\nif (POLICY CMP0077)\n    cmake_policy(SET CMP0077 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining GLFW Library Sources in CMake\nDESCRIPTION: Initial definition of the GLFW library target with its core source files that are common across all platforms. Sets up the basic library structure with header files and implementation files.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(glfw ${GLFW_LIBRARY_TYPE}\n                 \"${GLFW_SOURCE_DIR}/include/GLFW/glfw3.h\"\n                 \"${GLFW_SOURCE_DIR}/include/GLFW/glfw3native.h\"\n                 internal.h platform.h mappings.h\n                 context.c init.c input.c monitor.c platform.c vulkan.c window.c\n                 egl_context.c osmesa_context.c null_platform.h null_joystick.h\n                 null_init.c null_monitor.c null_window.c null_joystick.c)\n```\n\n----------------------------------------\n\nTITLE: Microsoft CRT Secure Warnings Suppression\nDESCRIPTION: Suppresses warnings about deprecated CRT functions by defining _CRT_SECURE_NO_WARNINGS when building with MSVC or MSVC-compatible compilers.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n# Workaround for the MS CRT deprecating parts of the standard library\nif (MSVC OR CMAKE_C_SIMULATE_ID STREQUAL \"MSVC\")\n    target_compile_definitions(glfw PRIVATE _CRT_SECURE_NO_WARNINGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cocoa (macOS) Platform-Specific Sources\nDESCRIPTION: Adds macOS Cocoa-specific source files and definitions to the GLFW library build when the Cocoa backend is enabled. Includes Objective-C implementation files for Cocoa platform functionality.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_COCOA)\n    target_compile_definitions(glfw PRIVATE _GLFW_COCOA)\n    target_sources(glfw PRIVATE cocoa_platform.h cocoa_joystick.h cocoa_init.m\n                                cocoa_joystick.m cocoa_monitor.m cocoa_window.m\n                                nsgl_context.m)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MSVC Runtime Library Settings\nDESCRIPTION: Handles Microsoft Visual C++ runtime library configuration, allowing for static or dynamic linking.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/CMakeLists.txt#2025-04-18_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif (MSVC AND NOT USE_MSVC_RUNTIME_LIBRARY_DLL)\n    if (CMAKE_VERSION VERSION_LESS 3.15)\n        foreach (flag CMAKE_C_FLAGS\n                      CMAKE_C_FLAGS_DEBUG\n                      CMAKE_C_FLAGS_RELEASE\n                      CMAKE_C_FLAGS_MINSIZEREL\n                      CMAKE_C_FLAGS_RELWITHDEBINFO)\n\n            if (flag MATCHES \"/MD\")\n                string(REGEX REPLACE \"/MD\" \"/MT\" ${flag} \"${${flag}}\")\n            endif()\n            if (flag MATCHES \"/MDd\")\n                string(REGEX REPLACE \"/MDd\" \"/MTd\" ${flag} \"${${flag}}\")\n            endif()\n\n        endforeach()\n    else()\n        set(CMAKE_MSVC_RUNTIME_LIBRARY \"MultiThreaded$<$<CONFIG:Debug>:Debug>\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions for Windows Builds\nDESCRIPTION: Sets UNICODE and _UNICODE compile definitions when building for Windows to ensure proper Unicode support.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif (GLFW_BUILD_WIN32)\n    target_compile_definitions(glfw PRIVATE UNICODE _UNICODE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring External GLFW Usage\nDESCRIPTION: Creates an enumeration option to determine whether to use the system's GLFW library or the embedded one.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nenum_option(USE_EXTERNAL_GLFW \"OFF;IF_POSSIBLE;ON\" \"Link raylib against system GLFW instead of embedded one\")\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Libraries Configuration\nDESCRIPTION: Configures platform-specific libraries that GLFW needs to link against. For Win32, it adds GDI32. For Cocoa (macOS), it adds Cocoa, IOKit, and CoreFoundation frameworks.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_WIN32)\n    list(APPEND glfw_PKG_LIBS \"-lgdi32\")\nendif()\n\nif (GLFW_BUILD_COCOA)\n    target_link_libraries(glfw PRIVATE \"-framework Cocoa\"\n                                       \"-framework IOKit\"\n                                       \"-framework CoreFoundation\")\n\n    set(glfw_PKG_DEPS \"\")\n    set(glfw_PKG_LIBS \"-framework Cocoa -framework IOKit -framework CoreFoundation\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Everything Option for CI\nDESCRIPTION: Sets an option to include all features that are disabled by default, intended for CI (Continuous Integration) usage.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\noption(INCLUDE_EVERYTHING \"Include everything disabled by default (for CI usage)\" OFF)\nset(OFF ${INCLUDE_EVERYTHING} CACHE INTERNAL \"Replace any OFF by default with \\${OFF} to have it covered by this option\")\n```\n\n----------------------------------------\n\nTITLE: GLFW Include Directories and Library Dependencies\nDESCRIPTION: Sets up include directories for GLFW's public and private headers, and links against the Threads library. Configures both build-time and install-time include paths.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(glfw PUBLIC\n                           \"$<BUILD_INTERFACE:${GLFW_SOURCE_DIR}/include>\"\n                           \"$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>\")\ntarget_include_directories(glfw PRIVATE\n                           \"${GLFW_SOURCE_DIR}/src\"\n                           \"${GLFW_BINARY_DIR}/src\")\ntarget_link_libraries(glfw PRIVATE Threads::Threads)\n```\n\n----------------------------------------\n\nTITLE: Legacy CMake Workaround for Objective-C Files\nDESCRIPTION: Applies a workaround for CMake versions older than 3.16 that don't natively support Objective-C .m files. Explicitly sets the language property for these files to C.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Workaround for CMake not knowing about .m files before version 3.16\nif (CMAKE_VERSION VERSION_LESS \"3.16\" AND APPLE)\n    set_source_files_properties(cocoa_init.m cocoa_joystick.m cocoa_monitor.m\n                                cocoa_window.m nsgl_context.m PROPERTIES\n                                LANGUAGE C)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Processing Configuration Header Flags\nDESCRIPTION: Parses a configuration header file and creates CMake options for each flag found, with values dependent on the CUSTOMIZE_BUILD option.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CMakeOptions.txt#2025-04-18_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(ParseConfigHeader)\n\nforeach(FLAG IN LISTS CONFIG_HEADER_FLAGS)\n    string(REGEX MATCH \"([^=]+)=(.+)\" _ ${FLAG})\n    cmake_dependent_option(${CMAKE_MATCH_1} \"\" ${CMAKE_MATCH_2} CUSTOMIZE_BUILD ${CMAKE_MATCH_2})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Windows Hybrid Graphics Configuration\nDESCRIPTION: Adds a compile definition for Windows hybrid graphics (switchable GPU systems) when enabled. This allows GLFW to work better on laptops with dual GPUs.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif (WIN32)\n    if (GLFW_USE_HYBRID_HPG)\n        target_compile_definitions(glfw PRIVATE _GLFW_USE_HYBRID_HPG)\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Wayland Platform-Specific Sources\nDESCRIPTION: Adds Wayland-specific source files and definitions to the GLFW library build when the Wayland backend is enabled. Includes implementation files for Wayland platform functionality.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (GLFW_BUILD_WAYLAND)\n    target_compile_definitions(glfw PRIVATE _GLFW_WAYLAND)\n    target_sources(glfw PRIVATE wl_platform.h xkb_unicode.h wl_init.c\n                                wl_monitor.c wl_window.c xkb_unicode.c)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Warnings for GLFW Based on Compiler Type\nDESCRIPTION: Sets appropriate warning flags for GLFW based on the compiler being used. MSVC gets '/W3' while GNU, Clang, and AppleClang receive '-Wall'.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# NOTE: The order matters here, Clang-CL matches both MSVC and Clang\nif (MSVC)\n    target_compile_options(glfw PRIVATE \"/W3\")\nelseif (CMAKE_C_COMPILER_ID STREQUAL \"GNU\" OR\n        CMAKE_C_COMPILER_ID STREQUAL \"Clang\" OR\n        CMAKE_C_COMPILER_ID STREQUAL \"AppleClang\")\n\n    target_compile_options(glfw PRIVATE \"-Wall\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Environment Path Reset\nDESCRIPTION: Command to unset/reset the PATH environment variable\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: MinGW Windows Version Definition Workaround\nDESCRIPTION: Sets the Windows version to 0x0501 (Windows XP) for MinGW builds to prevent compatibility issues with stddef.h inclusion order.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# HACK: When building on MinGW, WINVER and UNICODE need to be defined before\n# the inclusion of stddef.h (by glfw3.h), which is itself included before\n# win32_platform.h.  We define them here until a saner solution can be found\n# NOTE: MinGW-w64 and Visual C++ do /not/ need this hack.\nif (MINGW)\n    target_compile_definitions(glfw PRIVATE WINVER=0x0501)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Basic C++ Compilation Script for Windows\nDESCRIPTION: A batch script for compiling C++ files with g++. Sets up the Raylib environment path and compiler path, saves the current file in the editor, but doesn't complete the compilation command (appears to be truncated).\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_w64devkit.txt#2025-04-18_snippet_5\n\nLANGUAGE: batch\nCODE:\n```\n::basic_cpp_compilation\necho > Setup required Environment\necho ---------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\w64devkit\\bin\nENV_SET PATH=$(COMPILER_PATH)\nSET CC=g++\ncd $(CURRENT_DIRECTORY)\necho\necho > Saving Current File\necho -----------------------\nnpp_save\necho\n```\n\n----------------------------------------\n\nTITLE: Legacy MinGW XInput and DirectInput Workaround\nDESCRIPTION: Checks if DirectInput and XInput headers are available on MinGW, and if not, adds a custom include directory to provide the necessary headers.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\n# Workaround for legacy MinGW not providing XInput and DirectInput\nif (MINGW)\n    include(CheckIncludeFile)\n    check_include_file(dinput.h DINPUT_H_FOUND)\n    check_include_file(xinput.h XINPUT_H_FOUND)\n    if (NOT DINPUT_H_FOUND OR NOT XINPUT_H_FOUND)\n        target_include_directories(glfw PRIVATE \"${GLFW_SOURCE_DIR}/deps/mingw\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring pkg-config for GLFW\nDESCRIPTION: Sets up pkg-config information for GLFW by collecting dependencies and required libraries, then generating the appropriate configuration file.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(arg ${glfw_PKG_DEPS})\n    string(APPEND deps \" ${arg}\")\nendforeach()\nforeach(arg ${glfw_PKG_LIBS})\n    string(APPEND libs \" ${arg}\")\nendforeach()\n\nset(GLFW_PKG_CONFIG_REQUIRES_PRIVATE \"${deps}\" CACHE INTERNAL\n    \"GLFW pkg-config Requires.private\")\nset(GLFW_PKG_CONFIG_LIBS_PRIVATE \"${libs}\" CACHE INTERNAL\n    \"GLFW pkg-config Libs.private\")\n\nconfigure_file(\"${GLFW_SOURCE_DIR}/CMake/glfw3.pc.in\" glfw3.pc @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Highlighting Documentation contribution opportunity in Markdown\nDESCRIPTION: A markdown code snippet highlighting documentation, tutorials, and examples as ways to contribute to raylib.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n- `Documentation/Tutorials/Example` - Can you write some tutorials/examples?\n```\n\n----------------------------------------\n\nTITLE: Resource File Compilation with TCC\nDESCRIPTION: Sets up the environment and compiles a Windows resource file (.rc) using the windres tool. This is commonly used for compiling UI resource files in Windows applications.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/Notepad++/npes_saved_tcc.txt#2025-04-18_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\n::resource_file_compilation\necho > Setup required Environment\necho -----------------------------------------------\nSET RAYLIB_PATH=C:\\raylib\\raylib\nSET COMPILER_PATH=C:\\raylib\\tcc\nENV_SET PATH=$(COMPILER_PATH)\nSET RESC=windres\ncd $(CURRENT_DIRECTORY)\necho\necho > Compile simple .rc file\necho ----------------------------\n$(RESC) -DIDC_STATIC=-1 -O coff $(NAME_PART).rc -o $(NAME_PART).rc.data\necho\necho > Reset Environment\necho ---------------------------\nENV_UNSET PATH\n```\n\n----------------------------------------\n\nTITLE: Linux C99 Source Compatibility Fix\nDESCRIPTION: Ensures POSIX 2008 compatibility on Linux by defining _DEFAULT_SOURCE when compiling with C99 standard.\nSOURCE: https://github.com/raysan5/raylib/blob/master/src/external/glfw/src/CMakeLists.txt#2025-04-18_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\n# Workaround for -std=c99 on Linux disabling _DEFAULT_SOURCE (POSIX 2008 and more)\nif (CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n    target_compile_definitions(glfw PRIVATE _DEFAULT_SOURCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Brace Alignment in C\nDESCRIPTION: This snippet illustrates the proper alignment of braces for function definitions in C, following the raylib coding conventions.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONVENTIONS.md#2025-04-18_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid SomeFunction()\n{\n   // TODO: Do something here!\n}\n```\n\n----------------------------------------\n\nTITLE: Highlighting Testing contribution opportunity in Markdown\nDESCRIPTION: A markdown code snippet highlighting testing as a way to contribute to raylib, where contributors can find bugs in the library.\nSOURCE: https://github.com/raysan5/raylib/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n- `Testing` - Can you find some bugs in raylib?\n```\n\n----------------------------------------\n\nTITLE: Windows Compiler Path Configuration\nDESCRIPTION: The path to set for the compiler's installation directory in Code::Blocks on Windows.\nSOURCE: https://github.com/raysan5/raylib/blob/master/projects/CodeBlocks/README.md#2025-04-18_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nC:\\raylib\\MingGW\n```"
  }
]