[
  {
    "owner": "volatiletech",
    "repo": "sqlboiler",
    "content": "TITLE: SQLBoiler Query Example (Go)\nDESCRIPTION: This code snippet demonstrates how to query a database using SQLBoiler. It showcases various operations, including selecting all users, applying where clauses, limiting results, using joins, and handling relationships. It also shows usage with transactions.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  // Import this so we don't have to use qm.Limit etc.\n  . \"github.com/volatiletech/sqlboiler/v4/queries/qm\"\n)\n\n// Open handle to database like normal\ndb, err := sql.Open(\"postgres\", \"dbname=fun user=abc\")\nif err != nil {\n  return err\n}\n\n// If you don't want to pass in db to all generated methods\n// you can use boil.SetDB to set it globally, and then use\n// the G variant methods like so (--add-global-variants to enable)\nboil.SetDB(db)\nusers, err := models.Users().AllG(ctx)\n\n// Query all users\nusers, err := models.Users().All(ctx, db)\n\n// Panic-able if you like to code that way (--add-panic-variants to enable)\nusers := models.Users().AllP(db)\n\n// More complex query\nusers, err := models.Users(Where(\"age > ?\", 30), Limit(5), Offset(6)).All(ctx, db)\n\n// Ultra complex query\nusers, err := models.Users(\n  Select(\"id\", \"name\"),\n  InnerJoin(\"credit_cards c on c.user_id = users.id\"),\n  Where(\"age > ?\", 30),\n  AndIn(\"c.kind in ?\", \"visa\", \"mastercard\"),\n  Or(\"email like ?\", `%aol.com%`),\n  GroupBy(\"id\", \"name\"),\n  Having(\"count(c.id) > ?\", 2),\n  Limit(5),\n  Offset(6),\n).All(ctx, db)\n\n// Use any \"boil.Executor\" implementation (*sql.DB, *sql.Tx, data-dog mock db)\n// for any query.\ntx, err := db.BeginTx(ctx, nil)\nif err != nil {\n  return err\n}\nusers, err := models.Users().All(ctx, tx)\n\n// Relationships\nuser, err := models.Users().One(ctx, db)\nif err != nil {\n  return err\n}\nmovies, err := user.FavoriteMovies().All(ctx, db)\n\n// Eager loading\nusers, err := models.Users(Load(\"FavoriteMovies\")).All(ctx, db)\nif err != nil {\n  return err\n}\nfmt.Println(len(users.R.FavoriteMovies))\n\n```\n\n----------------------------------------\n\nTITLE: Query Mod System Usage in SQLBoiler (Go)\nDESCRIPTION: Examples showcasing the SQLBoiler query mod system, enabling flexible query modification. Includes raw SQL queries, column selection, FROM clause specification, WHERE clause building, JOINs, GROUP BY, ORDER BY, HAVING, LIMIT, OFFSET, locking and eager loading. Also, demonstrates both string-based and type-safe query construction.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_33\n\nLANGUAGE: go\nCODE:\n```\n// Dot import so we can access query mods directly instead of prefixing with \"qm.\"\nimport . \"github.com/volatiletech/sqlboiler/v4/queries/qm\"\n\n// Use a raw query against a generated struct (Pilot in this example)\n// If this query mod exists in your call, it will override the others.\n// \"?\" placeholders are not supported here, use \"$1, $2\" etc.\nSQL(\"select * from pilots where id=$1\", 10)\nmodels.Pilots(SQL(\"select * from pilots where id=$1\", 10)).All()\n\nSelect(\"id\", \"name\") // Select specific columns.\nSelect(models.PilotColumns.ID, models.PilotColumns.Name)\nFrom(\"pilots as p\") // Specify the FROM table manually, can be useful for doing complex queries.\nFrom(models.TableNames.Pilots + \" as p\")\n\n// WHERE clause building\nWhere(\"name=?\", \"John\")\nmodels.PilotWhere.Name.EQ(\"John\")\nAnd(\"age=?\", 24)\n// No equivalent type safe query yet\nOr(\"height=?\", 183)\n// No equivalent type safe query yet\n\nWhere(\"(name=? and age=?) or (age=?)\", \"John\", 5, 6)\n// Expr allows manual grouping of statements\nWhere(\n  Expr(\n    models.PilotWhere.Name.EQ(\"John\"),\n    Or2(models.PilotWhere.Age.EQ(5)),\n  ),\n  Or2(models.PilotAge),\n)\n\n// WHERE IN clause building\nWhereIn(\"(name, age) in ?\", \"John\", 24, \"Tim\", 33) // Generates: WHERE (\"name\",\"age\") IN (($1,$2),($3,$4))\nWhereIn(fmt.Sprintf(\"(%s, %s) in ?\", models.PilotColumns.Name, models.PilotColumns.Age), \"John\", 24, \"Tim\", 33)\nAndIn(\"weight in ?\", 84)\nAndIn(models.PilotColumns.Weight + \" in ?\", 84)\nOrIn(\"height in ?\", 183, 177, 204)\nOrIn(models.PilotColumns.Height + \" in ?\", 183, 177, 204)\n\nInnerJoin(\"pilots p on jets.pilot_id=?\", 10)\nInnerJoin(models.TableNames.Pilots + \" p on \" + models.TableNames.Jets + \".\" + models.JetColumns.PilotID + \"=?\", 10)\n\nGroupBy(\"name\")\nGroupBy(\"name like ? DESC, name\", \"John\")\nGroupBy(models.PilotColumns.Name)\nOrderBy(\"age, height\")\nOrderBy(models.PilotColumns.Age, models.PilotColumns.Height)\n\nHaving(\"count(jets) > 2\")\nHaving(fmt.Sprintf(\"count(%s) > 2\", models.TableNames.Jets)\n\nLimit(15)\nOffset(5)\n\n// Explicit locking\nFor(\"update nowait\")\n\n// Common Table Expressions\nWith(\"cte_0 AS (SELECT * FROM table_0 WHERE thing=$1 AND stuff=$2\")\n\n// Eager Loading -- Load takes the relationship name, ie the struct field name of the\n// Relationship struct field you want to load. Optionally also takes query mods to filter on that query.\nLoad(\"Languages\", Where(...)) // If it's a ToOne relationship it's in singular form, ToMany is plural.\nLoad(models.PilotRels.Languages, Where(...))\n```\n\n----------------------------------------\n\nTITLE: Selecting Data with SQLBoiler in Go\nDESCRIPTION: This snippet demonstrates how to select data from a database using SQLBoiler's query building and Find functionalities. It includes examples for selecting a single record and selecting specific columns from multiple records, with both standard and type-safe variants.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_52\n\nLANGUAGE: go\nCODE:\n```\n// Select one pilot\npilot, err := models.Pilots(qm.Where(\"name=?\", \"Tim\")).One(ctx, db)\n// Type safe variant\npilot, err := models.Pilots(models.PilotWhere.Name.EQ(\"Tim\")).One(ctx, db)\n\n// Select specific columns of many jets\njets, err := models.Jets(qm.Select(\"age\", \"name\")).All(ctx, db)\n// Type safe variant\njets, err := models.Jets(qm.Select(models.JetColumns.Age, models.JetColumns.Name)).All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with SQLBoiler in Go\nDESCRIPTION: This snippet demonstrates inserting data into a database using SQLBoiler, highlighting the use of different column lists (Infer, Whitelist, Blacklist, Greylist) to control which fields are inserted.  It explains the behavior of `boil.Infer` and scenarios where `Whitelist` or `Greylist` might be preferable.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_54\n\nLANGUAGE: go\nCODE:\n```\nvar p1 models.Pilot\np1.Name = \"Larry\"\nerr := p1.Insert(ctx, db, boil.Infer()) // Insert the first pilot with name \"Larry\"\n// p1 now has an ID field set to 1\n\nvar p2 models.Pilot\np2.Name = \"Boris\"\nerr := p2.Insert(ctx, db, boil.Infer()) // Insert the second pilot with name \"Boris\"\n// p2 now has an ID field set to 2\n\nvar p3 models.Pilot\np3.ID = 25\np3.Name = \"Rupert\"\nerr := p3.Insert(ctx, db, boil.Infer()) // Insert the third pilot with a specific ID\n// The id for this row was inserted as 25 in the database.\n\nvar p4 models.Pilot\np4.ID = 0\np4.Name = \"Nigel\"\nerr := p4.Insert(ctx, db, boil.Whitelist(\"id\", \"name\")) // Insert the fourth pilot with a zero value ID\n// The id for this row was inserted as 0 in the database.\n// Note: We had to use the whitelist for this, otherwise\n// SQLBoiler would presume you wanted to auto-increment\n```\n\n----------------------------------------\n\nTITLE: Updating Data with SQLBoiler in Go\nDESCRIPTION: This snippet illustrates how to update data in a database using SQLBoiler. It demonstrates updating a single object, a slice of objects, and a collection of rows, and covers the use of column lists (Infer, Whitelist, Blacklist, Greylist) to specify which columns to update.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_55\n\nLANGUAGE: go\nCODE:\n```\n// Find a pilot and update his name\npilot, _ := models.FindPilot(ctx, db, 1)\npilot.Name = \"Neo\"\nrowsAff, err := pilot.Update(ctx, db, boil.Infer())\n\n// Update a slice of pilots to have the name \"Smith\"\npilots, _ := models.Pilots().All(ctx, db)\nrowsAff, err := pilots.UpdateAll(ctx, db, models.M{\"name\": \"Smith\"})\n\n// Update all pilots in the database to to have the name \"Smith\"\nrowsAff, err := models.Pilots().UpdateAll(ctx, db, models.M{\"name\": \"Smith\"})\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Example - Go\nDESCRIPTION: Highlights the importance of eager loading to avoid N+1 query problems when retrieving related data. It compares a slow loop query pattern with the efficient eager loading approach using `Load()`.  It demonstrates loading the `Pilot` relationship for each `Jet` in a single query.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_44\n\nLANGUAGE: go\nCODE:\n```\n// Avoid this loop query pattern, it is slow.\njets, _ := models.Jets().All(ctx, db)\npilots := make([]models.Pilot, len(jets))\nfor i := 0; i < len(jets); i++ {\n  pilots[i] = jets[i].Pilot().OneP(ctx, db)\n}\n\n// Instead, use Eager Loading!\njets, _ := models.Jets(Load(\"Pilot\")).All(ctx, db)\n// Type safe relationship names exist too:\njets, _ := models.Jets(Load(models.JetRels.Pilot)).All(ctx, db)\n\n// Then access the loaded structs using the special Relation field\nfor _, j := range jets {\n  _ = j.R.Pilot\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Query Execution in SQLBoiler (Go)\nDESCRIPTION: Shows how to execute raw SQL queries using `queries.Raw()` and bind the results to a struct using `Bind()`.  Also demonstrates the alternative method to execute a raw query without binding.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nerr := queries.Raw(\"select * from pilots where id=$1\", 5).Bind(ctx, db, &obj)\n```\n\n----------------------------------------\n\nTITLE: Transaction Example - Go\nDESCRIPTION: Demonstrates how to use transactions with SQLBoiler. It shows starting a transaction, performing database operations (retrieving and deleting users), and then either committing or rolling back the transaction based on the outcome of the operations.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_50\n\nLANGUAGE: go\nCODE:\n```\ntx, err := db.BeginTx(ctx, nil)\nif err != nil {\n  return err\n}\n\nusers, _ := models.Pilots().All(ctx, tx)\nusers.DeleteAll(ctx, tx)\n\n// Rollback or commit\ntx.Commit()\ntx.Rollback()\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Record by Primary Key in Go\nDESCRIPTION: This snippet shows how to retrieve a single row from a database using its primary key with SQLBoiler's Find function. It includes examples for retrieving all columns and retrieving a subset of columns.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_53\n\nLANGUAGE: go\nCODE:\n```\n// Retrieve pilot with all columns filled\npilot, err := models.FindPilot(ctx, db, 1)\n\n// Retrieve a subset of column values\njet, err := models.FindJet(ctx, db, 1, \"name\", \"color\")\n```\n\n----------------------------------------\n\nTITLE: Querying with Starter Methods in SQLBoiler (Go)\nDESCRIPTION: Demonstrates how to use the generated starter methods (plural version of model name) in SQLBoiler to build and execute database queries using the query mod system. Includes examples for counting, selecting, and deleting records.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_31\n\nLANGUAGE: go\nCODE:\n```\n// SELECT COUNT(*) FROM pilots;\ncount, err := models.Pilots().Count(ctx, db)\n\n// SELECT * FROM \"pilots\" LIMIT 5;\npilots, err := models.Pilots(qm.Limit(5)).All(ctx, db)\n\n// DELETE FROM \"pilots\" WHERE \"id\"=$1;\nerr := models.Pilots(qm.Where(\"id=?\", 1)).DeleteAll(ctx, db)\n// type safe version of above\nerr := models.Pilots(models.PilotWhere.ID.EQ(1)).DeleteAll(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Deleting Data with SQLBoiler in Go\nDESCRIPTION: This snippet shows how to delete data from a database using SQLBoiler. It includes examples for deleting a single object, all objects, and a slice of objects.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_56\n\nLANGUAGE: go\nCODE:\n```\npilot, _ := models.FindPilot(db, 1)\n// Delete the pilot from the database\nrowsAff, err := pilot.Delete(ctx, db)\n\n// Delete all pilots from the database\nrowsAff, err := models.Pilots().DeleteAll(ctx, db)\n\n// Delete a slice of pilots from the database\npilots, _ := models.Pilots().All(ctx, db)\nrowsAff, err := pilots.DeleteAll(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Binding Raw SQL to Subset Struct - Go\nDESCRIPTION: Shows how to bind the result of a raw SQL query that selects a subset of data from the `jets` table into a custom struct `JetInfo`.  The query calculates the sum of ages and the count of records, which are then bound to the `AgeSum` and `Count` fields of the `JetInfo` struct, respectively.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_41\n\nLANGUAGE: go\nCODE:\n```\n// Custom struct for selecting a subset of data\ntype JetInfo struct {\n  AgeSum int `boil:\"age_sum\"`\n  Count int `boil:\"juicy_count\"`\n}\n\nvar info JetInfo\n\n// Use a raw query\nerr := queries.Raw(`select sum(age) as \"age_sum\", count(*) as \"juicy_count\" from jets`).Bind(ctx, db, &info)\n```\n\n----------------------------------------\n\nTITLE: Relationship Helper Methods Example - Go\nDESCRIPTION: Demonstrates how to use the generated helper methods to retrieve related data based on database relationships.  Specifically, it shows retrieving the pilot for a jet (to-one relationship) and retrieving the languages for a pilot (to-many relationship) using the generated `Pilot()` and `Languages()` methods.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_43\n\nLANGUAGE: go\nCODE:\n```\njet, _ := models.FindJet(ctx, db, 1)\n\n// \"to one\" relationship helper method.\n// This will retrieve the pilot for the jet.\npilot, err := jet.Pilot().One(ctx, db)\n\n// \"to many\" relationship helper method.\n// This will retrieve all languages for the pilot.\nlanguages, err := pilot.Languages().All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Adding a Before Insert Hook - Go\nDESCRIPTION: Shows how to define and register a before insert hook for a model. The `myHook` function is defined to perform custom logic before an insert operation, and it is then registered using `AddModelHook` to be executed before inserting `Pilot` models.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_49\n\nLANGUAGE: go\nCODE:\n```\n// Define my hook function\nfunc myHook(ctx context.Context, exec boil.ContextExecutor, p *Pilot) error {\n  // Do stuff\n  return nil\n}\n\n// Register my before insert hook for pilots\nmodels.AddPilotHook(boil.BeforeInsertHook, myHook)\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading Example - Go\nDESCRIPTION: Demonstrates nested eager loading, where relationships are loaded recursively.  In the example, each `Jet` will have its `Pilot` loaded, and each `Pilot` will have its `Languages` loaded, all in a single query. This avoids multiple round trips to the database.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_45\n\nLANGUAGE: go\nCODE:\n```\n// Example of a nested load.\n// Each jet will have its pilot loaded, and each pilot will have its languages loaded.\njets, _ := models.Jets(Load(\"Pilot.Languages\")).All(ctx, db)\n// Note that each level of a nested Load call will be loaded. No need to call Load() multiple times.\n\n// Type safe queries exist for this too!\njets, _ := models.Jets(Load(Rels(models.JetRels.Pilot, models.PilotRels.Languages))).All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Upserting Data with SQLBoiler in Go\nDESCRIPTION: This snippet demonstrates how to perform an upsert operation (insert or update if conflict) using SQLBoiler. It shows examples for different conflict resolution strategies and column selection methods.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_57\n\nLANGUAGE: go\nCODE:\n```\nvar p1 models.Pilot\np1.ID = 5\np1.Name = \"Gaben\"\n\n// INSERT INTO pilots (\"id\", \"name\") VALUES($1, $2)\n// ON CONFLICT DO NOTHING\nerr := p1.Upsert(ctx, db, false, nil, boil.Infer())\n\n// INSERT INTO pilots (\"id\", \"name\") VALUES ($1, $2)\n// ON CONFLICT (\"id\") DO UPDATE SET \"name\" = EXCLUDED.\"name\"\nerr := p1.Upsert(ctx, db, true, []string{\"id\"}, boil.Whitelist(\"name\"), boil.Infer())\n\n// Set p1.ID to a zero value. We will have to use the whitelist now.\np1.ID = 0\np1.Name = \"Hogan\"\n\n// INSERT INTO pilots (\"id\", \"name\") VALUES ($1, $2)\n// ON CONFLICT (\"id\") DO UPDATE SET \"name\" = EXCLUDED.\"name\"\nerr := p1.Upsert(ctx, db, true, []string{\"id\"}, boil.Whitelist(\"name\"), boil.Whitelist(\"id\", \"name\"))\n\n// Custom conflict_target expression:\n// INSERT INTO pilots (\"id\", \"name\") VALUES (9, 'Antwerp Design')\n// ON CONFLICT ON CONSTRAINT pilots_pkey DO NOTHING;\nconflictTarget := models.UpsertConflictTarget\nerr := p1.Upsert(ctx, db, false, nil, boil.Whitelist(\"id\", \"name\"), boil.None(), conflictTarget(\"ON CONSTRAINT pilots_pkey\"))\n\n// Custom UPDATE SET expression:\n// INSERT INTO pilots (\"id\", \"name\") VALUES (9, 'Antwerp Design')\n// ON CONFLICT (\"id\") DO UPDATE SET (id, name) = (sub-SELECT)\nupdateSet := models.UpsertUpdateSet\nerr := p1.Upsert(ctx, db, true, []string{\"id\"}, boil.Whitelist(\"id\", \"name\"), boil.None(), updateSet(\"(id, name) = (sub-SELECT)\"))\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Definitions in SQLBoiler (TOML)\nDESCRIPTION: This snippet demonstrates how to add foreign keys to models that are not defined in the database schema, using the `foreign_keys` configuration. It defines foreign keys for relationships between `jets`, `pilots`, and `pilot_languages` tables.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_15\n\nLANGUAGE: TOML\nCODE:\n```\n[foreign_keys.jet_pilots_fkey]\ntable = \"jets\"\ncolumn = \"pilot_id\"\nforeign_table = \"pilots\"\nforeign_column = \"id\"\n\n[foreign_keys.pilot_language_pilots_fkey]\ntable = \"pilot_languages\"\ncolumn = \"pilot_id\"\nforeign_table = \"pilots\"\nforeign_column = \"id\"\n\n[foreign_keys.pilot_language_languages_fkey]\ntable = \"pilot_languages\"\ncolumn = \"language_id\"\nforeign_table = \"languages\"\nforeign_column = \"id\"\n```\n\n----------------------------------------\n\nTITLE: Binding Query Builder Result to Custom Struct - Go\nDESCRIPTION: Illustrates binding the result of a query built using SQLBoiler's query builder to a custom struct `PilotAndJet`.  The query builder constructs a SELECT statement with a JOIN operation between `pilots` and `jets` tables, and then binds the result to the provided `PilotAndJet` struct.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_39\n\nLANGUAGE: go\nCODE:\n```\n// Custom struct using two generated structs\ntype PilotAndJet struct {\n  models.Pilot `boil:\",bind\"`\n  models.Jet   `boil:\",bind\"`\n}\n\nvar paj PilotAndJet\n// Use query building\nerr := models.NewQuery(\n  Select(\"pilots.id\", \"pilots.name\", \"jets.id\", \"jets.pilot_id\", \"jets.age\", \"jets.name\", \"jets.color\"),\n  From(\"pilots\"),\n  InnerJoin(\"jets on jets.pilot_id = pilots.id\"),\n).Bind(ctx, db, &paj)\n```\n\n----------------------------------------\n\nTITLE: Calling a simple function extension in Go\nDESCRIPTION: This snippet showcases how to call the simple function extension created in the previous snippet. It retrieves a user from the database using `Users().One(ctx, db)` and then calls the `modext.UserFirstTimeSetup` function, passing the context, database connection, and the retrieved user.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_23\n\nLANGUAGE: go\nCODE:\n```\nuser, err := Users().One(ctx, db)\n// elided error check\n\nerr = modext.UserFirstTimeSetup(ctx, db, user)\n// elided error check\n```\n\n----------------------------------------\n\nTITLE: Set To Many Relationship Example - Go\nDESCRIPTION: Demonstrates how to manage to-many relationships using methods like `SetLanguages()`, `AddLanguages()`, and `RemoveLanguages()`. It shows setting a group of language relationships for pilots, inserting new languages and assigning them to a pilot, adding another language to the existing set, and removing a group of relationships.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_48\n\nLANGUAGE: go\nCODE:\n```\n  pilots, _ := models.Pilots().All(ctx, db)\n  languages, _ := models.Languages().All(ctx, db)\n\n  // Set a group of language relationships\n  err := pilots.SetLanguages(db, false, &languages)\n\n  languages := []*models.Language{\n    {Language: \"Strayan\"},\n    {Language: \"Yupik\"},\n    {Language: \"Pawnee\"},\n  }\n\n  // Insert new a group of languages and assign them to a pilot\n  err := pilots.SetLanguages(ctx, db, true, languages...)\n\n  // Add another language relationship to the existing set of relationships\n  err := pilots.AddLanguages(ctx, db, false, &someOtherLanguage)\n\n  anotherLanguage := models.Language{Language: \"Archi\"}\n\n  // Insert and then add another language relationship\n  err := pilots.AddLanguages(ctx, db, true, &anotherLanguage)\n\n  // Remove a group of relationships\n  err := pilots.RemoveLanguages(ctx, db, languages...)\n```\n\n----------------------------------------\n\nTITLE: Extending SQLBoiler models with simple function in Go\nDESCRIPTION: This code snippet demonstrates extending SQLBoiler generated models with a simple function.  It defines a function `UserFirstTimeSetup` in a separate package `modext` that takes a `context.Context`, a database connection `*sql.DB`, and a `*models.User` as input. It returns an error if the setup fails.  This method promotes code organization and testability.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// Package modext is for SQLBoiler helper methods\npackage modext\n\n// UserFirstTimeSetup is an extension of the user model.\nfunc UserFirstTimeSetup(ctx context.Context, db *sql.DB, u *models.User) error { ... }\n```\n\n----------------------------------------\n\nTITLE: Complex Eager Loading Example - Go\nDESCRIPTION: Shows a more complex example of eager loading, including loading multiple relationships and using query modifiers. It demonstrates loading `Pets` and their `Vets`, `Pets` and their `Toys` with a WHERE clause, and a `Property` relationship for a collection of `Users`.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_46\n\nLANGUAGE: go\nCODE:\n```\nusers, _ := models.Users(\n  Load(\"Pets.Vets\"),\n  // the query mods passed in below only affect the query for Toys\n  // to use query mods against Pets itself, you must declare it separately\n  Load(\"Pets.Toys\", Where(\"toys.deleted = ?\", isDeleted)),\n  Load(\"Property\"),\n  Where(\"age > ?\", 23),\n).All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Generating Column Names in Go\nDESCRIPTION: This Go code shows how SQLBoiler generates constant structs for column names within each model. This allows for type-safe referencing of column names in queries and other database operations. The struct `MessageColumns` contains string constants for each column in the `Message` model.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_63\n\nLANGUAGE: Go\nCODE:\n```\n// Generated code from models package\nvar MessageColumns = struct {\n  ID         string\n  PurchaseID string\n}{\n  ID:         \"id\",\n  PurchaseID: \"purchase_id\",\n}\n\n// Usage example:\nfmt.Println(models.MessageColumns.ID)\n```\n\n----------------------------------------\n\nTITLE: Generated Go structs for the SQL Schema\nDESCRIPTION: This code shows the generated Go structs for the pilots, jets and languages schema. Includes relationship structs for accessing related data. `boil` tags specify database column names, `json` tags specify JSON field names, and `toml`/`yaml` specify TOML and YAML field names.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_28\n\nLANGUAGE: go\nCODE:\n```\ntype Pilot struct {\n  ID   int    `boil:\"id\" json:\"id\" toml:\"id\" yaml:\"id\"`\n  Name string `boil:\"name\" json:\"name\" toml:\"name\" yaml:\"name\"`\n\n  R *pilotR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n  L pilotR  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n\ntype pilotR struct {\n  Languages LanguageSlice\n  Jets      JetSlice\n}\n\ntype Jet struct {\n  ID      int    `boil:\"id\" json:\"id\" toml:\"id\" yaml:\"id\"`\n  PilotID int    `boil:\"pilot_id\" json:\"pilot_id\" toml:\"pilot_id\" yaml:\"pilot_id\"`\n  Age     int    `boil:\"age\" json:\"age\" toml:\"age\" yaml:\"age\"`\n  Name    string `boil:\"name\" json:\"name\" toml:\"name\" yaml:\"name\"`\n  Color   string `boil:\"color\" json:\"color\" toml:\"color\" yaml:\"color\"`\n\n  R *jetR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n  L jetR  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n\ntype jetR struct {\n  Pilot *Pilot\n}\n\ntype Language struct {\n  ID       int    `boil:\"id\" json:\"id\" toml:\"id\" yaml:\"id\"`\n  Language string `boil:\"language\" json:\"language\" toml:\"language\" yaml:\"language\"`\n\n  R *languageR `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n  L languageR  `boil:\"-\" json:\"-\" toml:\"-\" yaml:\"-\"`\n}\n\ntype languageR struct {\n  Pilots PilotSlice\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Enum Constants in Go\nDESCRIPTION: This Go code demonstrates how SQLBoiler generates constant variables for enum values defined in the database. Each enum value becomes a constant string, enabling type-safe use of enum values in Go code. The variable names are generated based on the enum type and value.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_61\n\nLANGUAGE: Go\nCODE:\n```\nconst (\n  WorkdayMonday    = \"monday\"\n  WorkdayTuesday   = \"tuesday\"\n  WorkdayWednesday = \"wednesday\"\n  WorkdayThursday  = \"thursday\"\n  WorkdayFriday    = \"friday\"\n)\n```\n\n----------------------------------------\n\nTITLE: Binding Raw SQL Query to Custom Struct - Go\nDESCRIPTION: Demonstrates binding the results of a raw SQL query to a custom struct named `PilotAndJet` that contains embedded `models.Pilot` and `models.Jet` structs. The query retrieves data from both the `pilots` and `jets` tables using a JOIN operation and assigns the results to the corresponding fields in the `PilotAndJet` struct.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_38\n\nLANGUAGE: go\nCODE:\n```\n// Custom struct using two generated structs\ntype PilotAndJet struct {\n  models.Pilot `boil:\",bind\"`\n  models.Jet   `boil:\",bind\"`\n}\n\nvar paj PilotAndJet\n// Use a raw query\nerr := queries.Raw(`\n  select pilots.id as \"pilots.id\", pilots.name as \"pilots.name\",\n  jets.id as \"jets.id\", jets.pilot_id as \"jets.pilot_id\",\n  jets.age as \"jets.age\", jets.name as \"jets.name\", jets.color as \"jets.color\"\n  from pilots inner join jets on jets.pilot_id=?`, 23,\n).Bind(ctx, db, &paj)\n```\n\n----------------------------------------\n\nTITLE: Binding Query Builder Result to Subset Struct - Go\nDESCRIPTION: Demonstrates selecting a subset of data using the query builder and binding it to a custom struct `JetInfo`. The `JetInfo` struct has fields representing the sum of ages and the count of records from the `jets` table. This showcases selecting aggregate functions directly into struct fields.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_40\n\nLANGUAGE: go\nCODE:\n```\n// Custom struct for selecting a subset of data\ntype JetInfo struct {\n  AgeSum int `boil:\"age_sum\"`\n  Count int `boil:\"juicy_count\"`\n}\n\nvar info JetInfo\n\n// Use query building\nerr := models.NewQuery(Select(\"sum(age) as age_sum\", \"count(*) as juicy_count\", From(\"jets\"))).Bind(ctx, db, &info)\n```\n\n----------------------------------------\n\nTITLE: Custom Query with From Query Mod in SQLBoiler (Go)\nDESCRIPTION: Illustrates how to construct a custom query using `models.NewQuery()` and the `qm.From()` query mod, allowing specification of the table for selection. It provides an example of selecting all rows from the 'pilots' table.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_32\n\nLANGUAGE: go\nCODE:\n```\n// Select all rows from the pilots table by using the From query mod.\nerr := models.NewQuery(db, qm.From(\"pilots\")).All(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Combined Where Query Example in SQLBoiler (Go)\nDESCRIPTION: Demonstrates the ability to construct complex WHERE clauses by combining different conditions within a single `Where` query mod. This avoids the need to break the query into multiple parts.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_34\n\nLANGUAGE: go\nCODE:\n```\nWhere(\"(name=? OR age=?) AND height=?\", \"John\", 24, 183)\n```\n\n----------------------------------------\n\nTITLE: Reloading Data with SQLBoiler in Go\nDESCRIPTION: This snippet shows how to reload an object or a slice of objects from the database to ensure they are synchronized with the latest data, using SQLBoiler's Reload and ReloadAll functions.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_58\n\nLANGUAGE: go\nCODE:\n```\npilot, _ := models.FindPilot(ctx, db, 1)\n\n// > Object becomes out of sync for some reason, perhaps async processing\n\n// Refresh the object with the latest data from the db\nerr := pilot.Reload(ctx, db)\n\n// Reload all objects in a slice\npilots, _ := models.Pilots().All(ctx, db)\nerr := pilots.ReloadAll(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Set To One Relationship Example - Go\nDESCRIPTION: Illustrates how to set a to-one relationship between two objects using the `SetPilot()` method. The example shows setting the pilot for an existing jet, inserting a new pilot and assigning it to a jet, and removing a relationship by setting the foreign key to NULL.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_47\n\nLANGUAGE: go\nCODE:\n```\n  jet, _ := models.FindJet(ctx, db, 1)\n  pilot, _ := models.FindPilot(ctx, db, 1)\n\n  // Set the pilot to an existing jet\n  err := jet.SetPilot(ctx, db, false, &pilot)\n\n  pilot = models.Pilot{\n    Name: \"Erlich\",\n  }\n\n  // Insert the pilot into the database and assign it to a jet\n  err := jet.SetPilot(ctx, db, true, &pilot)\n\n  // Remove a relationship. This method only exists for foreign keys that can be NULL.\n  err := jet.RemovePilot(ctx, db, &pilot)\n```\n\n----------------------------------------\n\nTITLE: Customizing automatic timestamp columns in TOML\nDESCRIPTION: This TOML configuration snippet shows how to customize the names of the automatically managed timestamp columns `created_at` and `updated_at` by setting the `auto-columns` map.  It maps the `created` field to `createdAt` and the `updated` field to `updatedAt`.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_30\n\nLANGUAGE: toml\nCODE:\n```\n[auto-columns]\n    created = \"createdAt\"\n    updated = \"updatedAt\"\n```\n\n----------------------------------------\n\nTITLE: Generating Where Clauses in Go\nDESCRIPTION: This Go code shows how SQLBoiler generates constant structs for building where clauses.  The structs provide type-safe ways to build SQL queries, including helpers for different data types. This allows for type-safe referencing of columns in where clause and avoids string manipulation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_64\n\nLANGUAGE: Go\nCODE:\n```\nvar MessageWhere = struct {\n  ID       whereHelperint\n  Text     whereHelperstring\n}{\n  ID:         whereHelperint{field: `id`},\n  PurchaseID: whereHelperstring{field: `purchase_id`},\n}\n\n// Usage example:\nmodels.Messages(models.MessageWhere.PurchaseID.EQ(\"hello\"))\n```\n\n----------------------------------------\n\nTITLE: Generating Relationship Names in Go\nDESCRIPTION: This Go code demonstrates how SQLBoiler generates constant structs for eager loading relationships. This allows for type-safe referencing of relationships in queries, such as eager loading related entities.  The `MessageRels` struct contains relationship names such as \"Purchase\".\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_65\n\nLANGUAGE: Go\nCODE:\n```\n// Generated code from models package\nvar MessageRels = struct {\n  Purchase string\n}{\n  Purchase: \"Purchase\",\n}\n\n// Usage example:\nfmt.Println(models.MessageRels.Purchase)\n```\n\n----------------------------------------\n\nTITLE: Function Variations Usage in SQLBoiler (Go)\nDESCRIPTION: Illustrates how to use the function variations generated by the `--add-global-variants` and `--add-panic-variants` flags. These variations include global (G), panic (P), and global & panic (GP) methods. The example focuses on the `Delete` method, demonstrating different ways to call it.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_35\n\nLANGUAGE: go\nCODE:\n```\n// Set the global db handle for G method variants.\nboil.SetDB(db)\n\npilot, _ := models.FindPilot(ctx, db, 1)\n\nerr := pilot.Delete(ctx, db) // Regular variant, takes a db handle (boil.Executor interface).\npilot.DeleteP(ctx, db)       // Panic variant, takes a db handle and panics on error.\nerr := pilot.DeleteG(ctx)    // Global variant, uses the globally set db handle (boil.SetDB()).\npilot.DeleteGP(ctx)          // Global&Panic variant, combines the global db handle and panic on error.\n\ndb.Begin()                   // Normal sql package way of creating a transaction\nboil.BeginTx(ctx, nil)       // Uses the global database handle set by boil.SetDB() (doesn't require flag)\n```\n\n----------------------------------------\n\nTITLE: Opening a database connection in Go\nDESCRIPTION: This snippet demonstrates how to open a database connection to a Postgres database using the `sql.Open` function. It specifies the database driver and connection string.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_29\n\nLANGUAGE: go\nCODE:\n```\n// Open handle to database like normal\ndb, err := sql.Open(\"postgres\", \"dbname=fun user=abc\")\nif err != nil {\n  return err\n}\n```\n\n----------------------------------------\n\nTITLE: SQLBoiler Configuration Example (TOML)\nDESCRIPTION: This TOML configuration file demonstrates how to configure SQLBoiler for PostgreSQL and MySQL databases. It shows how to set database connection parameters, schema, blacklist tables, and generic options like output directory and package name.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\noutput   = \"my_models\"\nwipe     = true\nno-tests = true\nadd-enum-types = true\n\n[psql]\n  dbname = \"dbname\"\n  host   = \"localhost\"\n  port   = 5432\n  user   = \"dbusername\"\n  pass   = \"dbpassword\"\n  schema = \"myschema\"\n  blacklist = [\"migrations\", \"other\"]\n\n[mysql]\n  dbname  = \"dbname\"\n  host    = \"localhost\"\n  port    = 3306\n  user    = \"dbusername\"\n  pass    = \"dbpassword\"\n  sslmode = \"false\"\n  tinyint_as_int = true\n\n[mssql]\n  dbname  = \"dbname\"\n  host    = \"localhost\"\n  port    = 1433\n  user    = \"dbusername\"\n  pass    = \"dbpassword\"\n  sslmode = \"disable\"\n  schema  = \"notdbo\"\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Data with SQLBoiler in Go\nDESCRIPTION: This snippet demonstrates how to check if a related object exists or if a specific record exists in the database using SQLBoiler's Exists function.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_59\n\nLANGUAGE: go\nCODE:\n```\njet, err := models.FindJet(ctx, db, 1)\n\n// Check if the pilot assigned to this jet exists.\nexists, err := jet.Pilot().Exists(ctx, db)\n\n// Check if the pilot with ID 5 exists\nexists, err := models.Pilots(Where(\"id=?\", 5)).Exists(ctx, db)\n```\n\n----------------------------------------\n\nTITLE: Finishers Usage Example in SQLBoiler (Go)\nDESCRIPTION: Demonstrates how to use SQLBoiler finishers (e.g., All, One, Count, UpdateAll, DeleteAll, Exists, Bind, Exec, QueryRow, Query) in combination with query building. Finishers execute the constructed query and return results.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_36\n\nLANGUAGE: go\nCODE:\n```\n// These are called like the following:\nmodels.Pilots().All(ctx, db)\n\nOne() // Retrieve one row as object (same as LIMIT(1))\nAll() // Retrieve all rows as objects (same as SELECT * FROM)\nCount() // Number of rows (same as COUNT(*))\nUpdateAll(models.M{\"name\": \"John\", \"age\": 23}) // Update all rows matching the built query.\nDeleteAll() // Delete all rows matching the built query.\nExists() // Returns a bool indicating whether the row(s) for the built query exists.\nBind(&myObj) // Bind the results of a query to your own struct object.\nExec() // Execute an SQL query that does not require any rows returned.\nQueryRow() // Execute an SQL query expected to return only a single row.\nQuery() // Execute an SQL query expected to return multiple rows.\n```\n\n----------------------------------------\n\nTITLE: Using go generate with SQLBoiler\nDESCRIPTION: This Go code snippet shows how to use the `go generate` command to integrate SQLBoiler into your Go application build process.  The `--flags-go-here` placeholder represents SQLBoiler flags.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n//go:generate sqlboiler --flags-go-here psql\n```\n\n----------------------------------------\n\nTITLE: Custom Struct Binding with Struct Tags - Go\nDESCRIPTION: Illustrates the use of struct tags to control how SQLBoiler binds data to struct fields.  It demonstrates features such as automatic TitleCase matching, specifying alternative column names, ignoring fields, and recursively searching for field names within nested structs using the `boil` tag.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_42\n\nLANGUAGE: go\nCODE:\n```\ntype CoolObject struct {\n  // Don't specify a name, Bind will TitleCase the column\n  // name, and try to match against this.\n  Frog int\n\n  // Specify an alternative name for the column, it will\n  // be titlecased for matching, can be whatever you like.\n  Cat int  `boil:\"kitten\"`\n\n  // Ignore this struct field, do not attempt to bind it.\n  Pig int  `boil:\"-\"`\n\n  // Instead of binding to this as a regular struct field\n  // (like other sql-able structs eg. time.Time)\n  // Recursively search inside the Dog struct for field names from the query.\n  Dog      `boil:\",bind\"`\n\n  // Same as the above, except specify a different table name\n  Mouse    `boil:\"rodent,bind\"`\n\n  // Ignore this struct field, do not attempt to bind it.\n  Bird     `boil:\"-\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Table Names in Go\nDESCRIPTION: This Go code shows how SQLBoiler generates constant structs for table names. This allows for type-safe referencing of table names in queries and other database operations. The struct `TableNames` contains string constants for each table in the database.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_62\n\nLANGUAGE: Go\nCODE:\n```\n// Generated code from models package\nvar TableNames = struct {\n  Messages  string\n  Purchases string\n}{\n  Messages:  \"messages\",\n  Purchases: \"purchases\",\n}\n\n// Usage example:\nfmt.Println(models.TableNames.Messages)\n```\n\n----------------------------------------\n\nTITLE: Generating Models from Tables (driver)\nDESCRIPTION: This command generates database models from existing tables using a specified driver. The [driver] placeholder should be replaced with the name of the database driver being used (e.g., \"mysql\", \"postgres\").\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./boil.sh gen [driver]\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Example - Go\nDESCRIPTION: Shows how to enable debug logging to print generated SQL statements and arguments.  The `boil.DebugMode` variable is set to `true` to enable logging, and optionally a custom writer can be set to redirect the output to a file instead of the standard output.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_51\n\nLANGUAGE: go\nCODE:\n```\nboil.DebugMode = true\n\n// Optionally set the writer as well. Defaults to os.Stdout\nfh, _ := os.Open(\"debug.txt\")\nboil.DebugWriter = fh\n```\n\n----------------------------------------\n\nTITLE: Type Overrides in SQLBoiler (TOML)\nDESCRIPTION: This example demonstrates how to override the types inferred by the SQLBoiler driver using the configuration file.  It shows how to match columns based on properties like type and nullability, and then replace the Go type with a custom type, along with specifying necessary imports.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_17\n\nLANGUAGE: TOML\nCODE:\n```\n[[types]]\n  # The match is a drivers.Column struct, and matches on almost all fields.\n  # Notable exception for the unique bool. Matches are done\n  # with \"logical and\" meaning it must match all specified matchers.\n  # Boolean values are only checked if all the string specifiers match first,\n  # and they must always match.\n  #\n  # Not shown here: db_type is the database type and a very useful matcher\n  # We can also whitelist tables for this replace by adding to the types.match:\n  # tables = ['users', 'videos']\n  #\n  # Note there is precedence for types.match, more specific things should appear\n  # further down in the config as once a matching rule is found it is executed\n  # immediately.\n  [types.match]\n    type = \"null.String\"\n    nullable = true\n\n  # The replace is what we replace the strings with. You cannot modify any\n  # boolean values in here. But we could change the Go type (the most useful thing)\n  # or the DBType or FullDBType etc. if for some reason we needed to.\n  [types.replace]\n    type = \"mynull.String\"\n\n  # These imports specified here overwrite the definition of the type's \"based_on_type\"\n  # list. The type entry that is replaced is the replaced type's \"type\" field.\n  # In the above example it would add an entry for mynull.String, if we did not\n  # change the type in our replacement, it would overwrite the null.String entry.\n  [types.imports]\n    third_party = ['\"github.com/me/mynull\"']\n```\n\n----------------------------------------\n\nTITLE: Relationship Aliases in SQLBoiler (TOML)\nDESCRIPTION: This TOML configuration demonstrates how to alias relationship names in SQLBoiler.  It changes the local side of the `videos_author_id_fkey` relationship on `videos` table to `AuthoredVideos` and the foreign side to `Author`.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[aliases.tables.videos.relationships.videos_author_id_fkey]\n# The local side would originally be inferred as AuthorVideos, which\n# is probably good enough to not want to mess around with this feature, avoid it where possible.\nlocal   = \"AuthoredVideos\"\n# Even if left unspecified, the foreign side would have been inferred correctly\n```\n\n----------------------------------------\n\nTITLE: Import Overrides in SQLBoiler (TOML)\nDESCRIPTION: This snippet demonstrates how to override the default imports used by SQLBoiler, allowing users to customize the standard and third-party packages included in the generated code. It provides examples for overriding imports globally, for specific files (singleton), and based on the type of data being used.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_18\n\nLANGUAGE: TOML\nCODE:\n```\n[imports.all]\n  standard = ['\"context\"']\n  third_party = ['\"github.com/my/package\"']\n\n# Changes imports for the boil_queries file\n[imports.singleton.\"boil_queries\"]\n  standard = ['\"context\"']\n  third_party = ['\"github.com/my/package\"']\n\n# Same syntax as all\n[imports.test]\n\n# Same syntax as singleton\n[imports.test_singleton]\n\n# Changes imports when a model contains null.Int32\n[imports.based_on_type.string]\n  standard = ['\"context\"']\n  third_party = ['\"github.com/my/package\"']\n```\n\n----------------------------------------\n\nTITLE: Table and Column Aliases in SQLBoiler\nDESCRIPTION: This TOML snippet shows how to define aliases for table and column names in SQLBoiler.  It remaps `team_names` table to `TeamNames` and `team_name` column to `OurTeamName`.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n# Although team_names works fine without configuration, we use it here for illustrative purposes\n[aliases.tables.team_names]\nup_plural     = \"TeamNames\"\nup_singular   = \"TeamName\"\ndown_plural   = \"teamNames\"\ndown_singular = \"teamName\"\n\n  # Columns can also be aliased.\n  [aliases.tables.team_names.columns]\n  team_name = \"OurTeamName\"\n```\n\n----------------------------------------\n\nTITLE: Inflections Configuration in SQLBoiler (TOML)\nDESCRIPTION: This configuration snippet shows how to customize the rules SQLBoiler uses for generating singular and plural variants of words, enabling control over pluralization and singularization, especially for words or suffixes used multiple times.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_16\n\nLANGUAGE: TOML\nCODE:\n```\n[inflections.plural]\n# Rules to convert a suffix to its plural form\nium = \"ia\"\n\n[inflections.plural_exact]\n# Rules to convert an exact word to its plural form\nstadium = \"stadia\"\n\n[inflections.singular]\n# Rules to convert a suffix to its singular form\nia = \"ium\"\n\n[inflections.singular_exact]\n# Rules to convert an exact word to its singular form\nstadium = \"stadium\"\n\n[inflections.irregular]\n# The singular -> plural mapping of an exact word that doen't follow conventional rules\nradius = \"radii\"\n```\n\n----------------------------------------\n\nTITLE: Alias Relationship Naming in SQLBoiler (TOML)\nDESCRIPTION: This snippet demonstrates how to rename relationships in SQLBoiler when dealing with foreign keys. It specifically shows how to change `Videos.Tags` to `Videos.Rags` in a many-to-many relationship using the `aliases.tables.video_tags.relationships.fk_video_id` configuration.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_11\n\nLANGUAGE: TOML\nCODE:\n```\n[aliases.tables.video_tags.relationships.fk_video_id]\nlocal   = \"Rags\"\nforeign = \"Videos\"\n```\n\n----------------------------------------\n\nTITLE: SQL Schema definition for pilots, jets and languages\nDESCRIPTION: This SQL code defines the schema for pilots, jets, and languages tables, including primary and foreign key constraints. The `pilot_languages` table represents a many-to-many relationship between pilots and languages.  This schema is used as an example for demonstrating SQLBoiler features.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE pilots (\n  id integer NOT NULL,\n  name text NOT NULL\n);\n\nALTER TABLE pilots ADD CONSTRAINT pilot_pkey PRIMARY KEY (id);\n\nCREATE TABLE jets (\n  id integer NOT NULL,\n  pilot_id integer NOT NULL,\n  age integer NOT NULL,\n  name text NOT NULL,\n  color text NOT NULL\n);\n\nALTER TABLE jets ADD CONSTRAINT jet_pkey PRIMARY KEY (id);\nALTER TABLE jets ADD CONSTRAINT jet_pilots_fkey FOREIGN KEY (pilot_id) REFERENCES pilots(id);\n\nCREATE TABLE languages (\n  id integer NOT NULL,\n  language text NOT NULL\n);\n\nALTER TABLE languages ADD CONSTRAINT language_pkey PRIMARY KEY (id);\n\n-- Join table\nCREATE TABLE pilot_languages (\n  pilot_id integer NOT NULL,\n  language_id integer NOT NULL\n);\n\n-- Composite primary key\nALTER TABLE pilot_languages ADD CONSTRAINT pilot_language_pkey PRIMARY KEY (pilot_id, language_id);\nALTER TABLE pilot_languages ADD CONSTRAINT pilot_language_pilots_fkey FOREIGN KEY (pilot_id) REFERENCES pilots(id);\nALTER TABLE pilot_languages ADD CONSTRAINT pilot_language_languages_fkey FOREIGN KEY (language_id) REFERENCES languages(id);\n```\n\n----------------------------------------\n\nTITLE: Alternative Alias Syntax in SQLBoiler (TOML)\nDESCRIPTION: This example showcases an alternative syntax for defining aliases in SQLBoiler using an array of tables in TOML. This method provides an option for those facing challenges with the standard TOML key syntax or Viper's key lowercasing behavior.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_12\n\nLANGUAGE: TOML\nCODE:\n```\n[[aliases.tables]]\nname          = \"team_names\"\nup_plural     = \"TeamNames\"\nup_singular   = \"TeamName\"\ndown_plural   = \"teamNames\"\ndown_singular = \"teamName\"\n\n  [[aliases.tables.columns]]\n  name  = \"team_name\"\n  alias = \"OurTeamName\"\n\n  [[aliases.tables.relationships]]\n  name    = \"fk_video_id\"\n  local   = \"Rags\"\n  foreign = \"Videos\"\n```\n\n----------------------------------------\n\nTITLE: Blacklist Configuration (TOML)\nDESCRIPTION: This TOML snippet shows how to use the blacklist feature to exclude specific tables and columns from code generation. The blacklist includes specific tables (migrations), specific columns (addresses.name) and also wildcard columns (*.secret_col)\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[psql]\n# Removes migrations table, the name column from the addresses table, and\n# secret_col of any table from being generated. Foreign keys that reference tables\n# or columns that are no longer generated because of whitelists or blacklists may\n# cause problems.\nblacklist = [\"migrations\", \"addresses.name\", \"*.secret_col\"]\n```\n\n----------------------------------------\n\nTITLE: Custom Struct Tag Case in SQLBoiler (TOML)\nDESCRIPTION: This configuration defines custom case styles for struct tags based on different formats. It allows users to specify different cases like camel case for JSON and snake case for YAML.  If a case is not defined, snake case is used by default.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_13\n\nLANGUAGE: TOML\nCODE:\n```\n[struct-tag-cases]\ntoml = \"snake\"\nyaml = \"camel\"\njson = \"camel\"\nboil = \"alias\"\n```\n\n----------------------------------------\n\nTITLE: Extending SQLBoiler models with empty struct methods in Go\nDESCRIPTION: This code snippet illustrates extending SQLBoiler generated models using empty struct methods.  It defines an empty struct `users` and a variable `Users` of that type. It then defines a method `FirstTimeSetup` on the `users` type, which takes a `context.Context`, a database connection `*sql.DB`, and a `*models.User` as input. It returns an error if the setup fails. This method provides better code organization when the number of extension methods grows.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_24\n\nLANGUAGE: go\nCODE:\n```\n// Package modext is for SQLBoiler helper methods\npackage modext\n\ntype users struct {}\n\nvar Users = users{}\n\n// FirstTimeSetup is an extension of the user model.\nfunc (users) FirstTimeSetup(ctx context.Context, db *sql.DB, u *models.User) error { ... }\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Type in PostgreSQL\nDESCRIPTION: This SQL statement creates a custom enum type named `workday` with a set of predefined values. It then defines a table `event_one` which uses this enum type for the `day` column, enforcing that only the defined enum values can be stored in this column.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_60\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE TYPE workday AS ENUM('monday', 'tuesday', 'wednesday', 'thursday', 'friday');\n\nCREATE TABLE event_one (\n  id     serial PRIMARY KEY NOT NULL,\n  name   VARCHAR(255),\n  day    workday NOT NULL\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Struct Tag Case - Minimal Configuration (TOML)\nDESCRIPTION: This configuration defines custom case styles for struct tags only for JSON format. The system uses the snake case by default.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_14\n\nLANGUAGE: TOML\nCODE:\n```\n[struct-tag-cases]\njson = \"camel\"\n```\n\n----------------------------------------\n\nTITLE: Template Path Configuration (TOML)\nDESCRIPTION: This snippet shows how to configure the template paths in the TOML configuration file.  It is important to include default sqlboiler template path if you want to still generate default templates.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_21\n\nLANGUAGE: TOML\nCODE:\n```\ntemplates = [\n  \"/path/to/sqlboiler/templates\",\n  \"/path/to/sqlboiler/templates_test\",\n  \"/path/to/your_project/more_templates\"\n]\n```\n\n----------------------------------------\n\nTITLE: Extending SQLBoiler models with embedding in Go\nDESCRIPTION: This snippet demonstrates extending SQLBoiler generated models through embedding. It creates a new struct `modext.User` that embeds the generated `models.User` struct. It then calls the `FirstTimeSetup` method on the embedded struct. This method is discouraged due to potential breakages and inconsistencies.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_26\n\nLANGUAGE: go\nCODE:\n```\nuser, err := Users().One(ctx, db)\n// elided error check\n\nenhUser := modext.User{user}\nerr = ehnUser.FirstTimeSetup(ctx, db)\n// elided error check\n```\n\n----------------------------------------\n\nTITLE: Alternative Import Syntax in SQLBoiler (TOML)\nDESCRIPTION: This example shows an alternative syntax for defining import overrides in SQLBoiler, useful when Viper's key lowercasing interferes with configuration. It uses an array of tables to define the import overrides for singleton and based_on_type configurations.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_19\n\nLANGUAGE: TOML\nCODE:\n```\n[[imports.singleton]]\n  name = \"boil_queries\"\n  third_party = ['\"github.com/my/package\"']\n\n[[imports.based_on_type]]\n  name = \"null.Int64\"\n  third_party = ['\"github.com/my/int64\"']\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Driver Configuration (TOML)\nDESCRIPTION: This TOML snippet shows a driver-specific configuration example for PostgreSQL within the `sqlboiler.toml` file. It sets the `dbname` parameter.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[psql]\ndbname = \"your_database_name\"\n```\n\n----------------------------------------\n\nTITLE: SQLBoiler Command-Line Usage\nDESCRIPTION: This text snippet displays the usage information for the sqlboiler command-line utility, including available flags and examples.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nSQL Boiler generates a Go ORM from template files, tailored to your database schema.\nComplete documentation is available at http://github.com/volatiletech/sqlboiler\n\nUsage:\n  sqlboiler [flags] <driver>\n\nExamples:\nsqlboiler psql\n\nFlags:\n      --add-global-variants        Enable generation for global variants\n      --add-panic-variants         Enable generation for panic variants\n      --add-soft-deletes           Enable soft deletion by updating deleted_at timestamp\n      --add-enum-types             Enable generation of types for enums\n      --enum-null-prefix           Name prefix of nullable enum types (default \"Null\")\n  -c, --config string              Filename of config file to override default lookup\n  -d, --debug                      Debug mode prints stack traces on error\n  -h, --help                       help for sqlboiler\n      --no-auto-timestamps         Disable automatic timestamps for created_at/updated_at\n      --no-back-referencing        Disable back referencing in the loaded relationship structs\n      --no-context                 Disable context.Context usage in the generated code\n      --no-driver-templates        Disable parsing of templates defined by the database driver\n      --no-hooks                   Disable hooks feature for your models\n      --no-rows-affected           Disable rows affected in the generated API\n      --no-tests                   Disable generated go test files\n      --no-relation-getters        Disable generating getters for relationship tables\n  -o, --output string              The name of the folder to output to (default \"models\")\n  -p, --pkgname string             The name you wish to assign to your generated package (default \"models\")\n      --struct-tag-casing string   Decides the casing for go structure tag names. camel, title, alias or snake (default \"snake\")\n  -t, --tag strings                Struct tags to be included on your models in addition to json, yaml, toml\n      --tag-ignore strings         List of column names that should have tags values set to '-' (ignored during parsing)\n      --templates strings          A templates directory, overrides the embedded template folders in sqlboiler\n      --replace strings  An array of templates file and the actual template file to be replaces \n      --version                    Print the version\n      --strict-verify-mod-version  Prevent code generation, if project version of sqlboiler not match with executable\n      --wipe                       Delete the output folder (rm -rf) before generation to ensure sanity\n```\n\n----------------------------------------\n\nTITLE: Calling an empty struct method extension in Go\nDESCRIPTION: This snippet shows how to call the empty struct method extension created in the previous snippet. It retrieves a user from the database using `Users().One(ctx, db)` and then calls the `modext.Users.FirstTimeSetup` method, passing the context, database connection, and the retrieved user.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_25\n\nLANGUAGE: go\nCODE:\n```\nuser, err := Users().One(ctx, db)\n// elided error check\n\nerr = modext.Users.FirstTimeSetup(ctx, db, user)\n// elided error check\n```\n\n----------------------------------------\n\nTITLE: SQLBoiler Installation (Shell)\nDESCRIPTION: These shell commands demonstrate how to install SQLBoiler and its drivers using `go install` and `go get`. The commands differ slightly depending on the Go version used.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Go 1.16 and above:\ngo install github.com/volatiletech/sqlboiler/v4@latest\ngo install github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-psql@latest\n\n# Go 1.15 and below:\n# Install sqlboiler v4 and the postgresql driver (mysql, mssql, sqlite3 also available)\n# NOTE: DO NOT run this inside another Go module (like your project) as it will\n# pollute your go.mod with a bunch of stuff you don't want and your binary\n# will not get installed.\nGO111MODULE=on go get -u -t github.com/volatiletech/sqlboiler/v4\nGO111MODULE=on go get github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-psql\n```\n\n----------------------------------------\n\nTITLE: SQLBoiler Dependency Installation (Shell)\nDESCRIPTION: This shell snippet shows how to install SQLBoiler as a dependency in your Go project using `go get`.  It also installs the `null` package from `volatiletech`.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Do not forget the trailing /v4 and /v8 in the following commands\ngo get github.com/volatiletech/sqlboiler/v4\n# Assuming you're going to use the null package for its additional null types\ngo get github.com/volatiletech/null/v8\n```\n\n----------------------------------------\n\nTITLE: Generating Models and Running Tests (Shell)\nDESCRIPTION: This shell script demonstrates how to generate Go models using SQLBoiler for a PostgreSQL database and then run the generated tests.  It excludes the migrations table during model generation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# Generate our models and exclude the migrations table\n# When passing 'psql' here, it looks for a binary called\n# 'sqlboiler-psql' in your CWD and PATH. You can also pass\n# an absolute path to a driver if you desire.\nsqlboiler psql\n\n# Run the generated tests\ngo test ./models\n```\n\n----------------------------------------\n\nTITLE: Assigning ModelWhere/ColumnNames to Variable\nDESCRIPTION: This Go code demonstrates how to assign the ModelWhere or ColumnNames to a variable. Although there might be a performance penalty, the readability increase is worth it. Variables `cols` and `where` represent `UserColumns` and `UserWhere` respectively and make the code easier to read.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_66\n\nLANGUAGE: Go\nCODE:\n```\ncols := &models.UserColumns\nwhere := &models.UserWhere\n\nu, err := models.Users(where.Name.EQ(\"hello\"), qm.Or(cols.Age + \"=?\", 5))\n```\n\n----------------------------------------\n\nTITLE: Custom Templates in SQLBoiler\nDESCRIPTION: This section explains how to use custom templates with SQLBoiler to generate additional files, even those that are not Go code. It describes how to use the `--templates` flag, organize templates, and handle singleton files.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: SQLite3 Configuration in TOML\nDESCRIPTION: This code snippet demonstrates the configuration required for sqlboiler to connect to an SQLite3 database. It specifies the database file path using the 'dbname' key under the 'sqlite3' section.  An absolute path is recommended.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/drivers/sqlboiler-sqlite3/README.md#_snippet_0\n\nLANGUAGE: TOML\nCODE:\n```\n# Absolute path is recommended since the location\n# sqlite3 is being run can change.\n# For example generation time and model test time.\n[sqlite3]\ndbname = \"/path/to/file\"\n```\n\n----------------------------------------\n\nTITLE: Running SQLBoiler Tests\nDESCRIPTION: This command runs the SQLBoiler tests to verify the correctness of the code. This is essential before submitting any changes.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./boil.sh test\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Go\nDESCRIPTION: This bash command is used to run benchmarks for SQLBoiler using Go's built-in testing framework.  It executes all benchmarks in the current directory and also provides memory allocation statistics for each benchmark.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_67\n\nLANGUAGE: Bash\nCODE:\n```\ngo test -bench . -benchmem\n```\n\n----------------------------------------\n\nTITLE: Installing null Package (go)\nDESCRIPTION: This command installs the `github.com/volatiletech/null` package, which may be required to run the tests. This package provides support for nullable types in Go.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/volatiletech/null\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results - Select Subset\nDESCRIPTION: This benchmark compares the performance of different ORM libraries when selecting a subset of records from a table. The results show the number of iterations, nanoseconds per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_69\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkGORMSelectSubset/gorm-8      20000    69469 ns/op   30008 B/op   462 allocs/op\nBenchmarkGORPSelectSubset/gorp-8      50000    31102 ns/op    9141 B/op   318 allocs/op\nBenchmarkXORMSelectSubset/xorm-8      20000    64151 ns/op   15933 B/op   414 allocs/op\nBenchmarkKallaxSelectSubset/kallax-8 100000    16996 ns/op    6499 B/op   132 allocs/op\nBenchmarkBoilSelectSubset/boil-8     100000    13579 ns/op    3281 B/op    71 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results - Update\nDESCRIPTION: This benchmark compares the performance of different ORM libraries when updating records. The results show the number of iterations, nanoseconds per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_73\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkGORMUpdate/gorm-8           100000    18609 ns/op    9389 B/op   174 allocs/op\nBenchmarkGORPUpdate/gorp-8           500000     3180 ns/op    1536 B/op    35 allocs/op\nBenchmarkXORMUpdate/xorm-8           100000    13149 ns/op    5098 B/op   149 allocs/op\nBenchmarkKallaxUpdate/kallax-8       100000    22880 ns/op   11366 B/op   219 allocs/op\nBenchmarkBoilUpdate/boil-8          1000000     1810 ns/op     936 B/op    18 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results - Select All\nDESCRIPTION: This benchmark compares the performance of different ORM libraries when selecting all records from a table. The results show the number of iterations, nanoseconds per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_68\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkGORMSelectAll/gorm-8         20000   66500 ns/op   28998 B/op    455 allocs/op\nBenchmarkGORPSelectAll/gorp-8         50000   31305 ns/op    9141 B/op    318 allocs/op\nBenchmarkXORMSelectAll/xorm-8         20000   66074 ns/op   16317 B/op    417 allocs/op\nBenchmarkKallaxSelectAll/kallax-8    100000   18278 ns/op    7428 B/op    145 allocs/op\nBenchmarkBoilSelectAll/boil-8        100000   12759 ns/op    3145 B/op     67 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results - Insert\nDESCRIPTION: This benchmark compares the performance of different ORM libraries when inserting records. The results show the number of iterations, nanoseconds per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_72\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkGORMInsert/gorm-8           100000    15238 ns/op    8278 B/op   150 allocs/op\nBenchmarkGORPInsert/gorp-8           300000     4648 ns/op    1616 B/op    38 allocs/op\nBenchmarkXORMInsert/xorm-8           100000    12600 ns/op    6092 B/op   138 allocs/op\nBenchmarkKallaxInsert/kallax-8       100000    15115 ns/op    6003 B/op   126 allocs/op\nBenchmarkBoilInsert/boil-8          1000000     2249 ns/op     984 B/op    23 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results - Delete\nDESCRIPTION: This benchmark compares the performance of different ORM libraries when deleting records. The results show the number of iterations, nanoseconds per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_71\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkGORMDelete/gorm-8           200000    10356 ns/op    5059 B/op    98 allocs/op\nBenchmarkGORPDelete/gorp-8          1000000     1335 ns/op     352 B/op    13 allocs/op\nBenchmarkXORMDelete/xorm-8           200000    10796 ns/op    4146 B/op   122 allocs/op\nBenchmarkKallaxDelete/kallax-8       300000     5141 ns/op    2241 B/op    48 allocs/op\nBenchmarkBoilDelete/boil-8          2000000      796 ns/op     168 B/op     8 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results - Raw Bind\nDESCRIPTION: This benchmark compares the performance of different ORM libraries when using raw bind operations. The results show the number of iterations, nanoseconds per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_74\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkGORMRawBind/gorm-8           20000    65821 ns/op   30502 B/op   444 allocs/op\nBenchmarkGORPRawBind/gorp-8           50000    31300 ns/op    9141 B/op   318 allocs/op\nBenchmarkXORMRawBind/xorm-8           20000    62024 ns/op   15588 B/op   403 allocs/op\nBenchmarkKallaxRawBind/kallax-8      200000     7843 ns/op    4380 B/op    46 allocs/op\nBenchmarkSQLXRawBind/sqlx-8          100000    13056 ns/op    4572 B/op    55 allocs/op\nBenchmarkBoilRawBind/boil-8          200000    11519 ns/op    4638 B/op    55 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Benchmark Results - Select Complex\nDESCRIPTION: This benchmark compares the performance of different ORM libraries when performing complex selects. The results show the number of iterations, nanoseconds per operation, bytes per operation, and allocations per operation.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/README.md#_snippet_70\n\nLANGUAGE: text\nCODE:\n```\nBenchmarkGORMSelectComplex/gorm-8     20000    76284 ns/op   34566 B/op   521 allocs/op\nBenchmarkGORPSelectComplex/gorp-8     50000    31886 ns/op    9501 B/op   328 allocs/op\nBenchmarkXORMSelectComplex/xorm-8     20000    68430 ns/op   17694 B/op   464 allocs/op\nBenchmarkKallaxSelectComplex/kallax-8 50000    26095 ns/op   10293 B/op   212 allocs/op\nBenchmarkBoilSelectComplex/boil-8    100000    16403 ns/op    4205 B/op   102 allocs/op\n```\n\n----------------------------------------\n\nTITLE: Building SQLBoiler Executable (all)\nDESCRIPTION: This command builds the SQLBoiler executable for all drivers. It is necessary to run this command after making changes to the core or driver code to generate an updated executable.\nSOURCE: https://github.com/volatiletech/sqlboiler/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./boil.sh build all\n```"
  }
]