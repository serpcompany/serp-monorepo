[
  {
    "owner": "cheeriojs",
    "repo": "cheerio",
    "content": "TITLE: Loading HTML with Cheerio\nDESCRIPTION: Demonstrates how to load an HTML string into Cheerio. This creates a Cheerio object that can be used to manipulate and traverse the loaded HTML.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/intro.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<h2 class=\"title\">Hello world</h2>');\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Parsing with Cheerio's load Method\nDESCRIPTION: Demonstrates the basic way to parse an HTML document using the load method. This method takes a string containing the document and returns a Cheerio object for traversing and manipulating the document.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/loading.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n\nconst $ = cheerio.load('<h1>Hello, world!</h1>');\n\nconsole.log($('h1').text());\n// Output: Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Document with Cheerio in JavaScript\nDESCRIPTION: Basic example of importing Cheerio and loading an HTML document for element selection. This is the first step required before using any selectors.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n\n// Load the document using any of the methods described in the \"Loading Documents\" section.\nconst $ = cheerio.load('<html>...</html>');\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Content with Cheerio in JavaScript\nDESCRIPTION: This example shows how to load HTML content in Cheerio using both ESM/TypeScript and CommonJS import patterns. The loaded content is then accessible through the jQuery-like interface.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ESM or TypeScript:\nimport * as cheerio from 'cheerio';\n\n// In other environments:\nconst cheerio = require('cheerio');\n\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>');\n\n$.html();\n//=> <html><head></head><body><ul id=\"fruits\">...</ul></body></html>\n```\n\n----------------------------------------\n\nTITLE: Fetching and Extracting GitHub Release Data with Cheerio in JavaScript\nDESCRIPTION: This comprehensive example demonstrates fetching a web page, parsing it with Cheerio, and extracting structured data. It shows how to combine multiple extraction techniques to parse complex HTML structures.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n\nconst $ = await cheerio.fromURL(\n  'https://github.com/cheeriojs/cheerio/releases',\n);\n\nconst data = $.extract({\n  releases: [\n    {\n      selector: 'section',\n      value: {\n        name: 'h2',\n        date: {\n          selector: 'relative-time',\n          value: 'datetime',\n        },\n        notes: {\n          selector: '.markdown-body',\n          value: 'innerHTML',\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Selectors with Cheerio in JavaScript\nDESCRIPTION: This snippet demonstrates how to use jQuery-style selectors in Cheerio to find and manipulate elements within an HTML document. It shows examples of class selectors, descendant selectors, and attribute selectors.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('.apple', '#fruits').text();\n//=> Apple\n\n$('ul .pear').attr('class');\n//=> pear\n\n$('li[class=orange]').html();\n//=> Orange\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by Class Name in Cheerio\nDESCRIPTION: Shows how to select elements with a specific class name using the dot notation selector.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst $selected = $('.selected');\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by Attribute Value in Cheerio\nDESCRIPTION: Demonstrates selecting elements based on attribute values using attribute selectors.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst $selected = $('[data-selected=true]');\n```\n\n----------------------------------------\n\nTITLE: Using find to Select Elements in Cheerio\nDESCRIPTION: Demonstrates how to use the find method to select all <li> elements within a <ul> element. The find method takes a CSS selector as an argument and returns a new selection containing all matching elements within the current selection.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>`,\n);\n\nconst listItems = $('ul').find('li');\nrender(<>List item count: {listItems.length}</>);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Cheerio for HTML Parsing and Manipulation in JavaScript\nDESCRIPTION: This snippet demonstrates the core functionality of Cheerio by loading HTML content, modifying text and adding a class to an element, then outputting the updated HTML.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\nconst $ = cheerio.load('<h2 class=\"title\">Hello world</h2>');\n\n$('h2.title').text('Hello there!');\n$('h2').addClass('welcome');\n\n$.html();\n//=> <html><head></head><body><h2 class=\"title welcome\">Hello there!</h2></body></html>\n```\n\n----------------------------------------\n\nTITLE: Extracting Single Element Text with Cheerio in JavaScript\nDESCRIPTION: This example shows how to use the extract method to retrieve the text content of the first element matching a CSS selector. It demonstrates the basic usage of the extract method.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = $.extract({\n  red: '.red',\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Multiple Elements' Text with Cheerio in JavaScript\nDESCRIPTION: This snippet illustrates how to extract text content from all elements matching a CSS selector by wrapping the selector in an array. It returns an array of matching elements' text content.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = $.extract({\n  red: ['.red'],\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Attributes with Cheerio in JavaScript\nDESCRIPTION: This example demonstrates how to extract both text content and specific attributes from different elements using an object with selector and value properties. It shows more advanced usage of the extract method.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = $.extract({\n  red: '.red',\n  links: {\n    selector: 'a',\n    value: 'href',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Element Attributes and Properties in Cheerio\nDESCRIPTION: Examples of using attr() and prop() methods to get and set element attributes and properties\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the 'src' attribute of an image element\n$('img').attr('src', 'https://example.com/image.jpg');\n\n// Set the 'checked' property of a checkbox element\n$('input[type=\"checkbox\"]').prop('checked', true);\n\n// Get the 'href' attribute of a link element\nconst href = $('a').attr('href');\n\n// Get the 'disabled' property of a button element\nconst isDisabled = $('button').prop('disabled');\n```\n\n----------------------------------------\n\nTITLE: Managing CSS Classes in Cheerio\nDESCRIPTION: Shows how to add, remove, and toggle CSS classes on elements using addClass(), removeClass(), and toggleClass()\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a class to an element\n$('div').addClass('new-class');\n\n// Add multiple classes to an element\n$('div').addClass('new-class another-class');\n\n// Remove a class from an element\n$('div').removeClass('old-class');\n\n// Remove multiple classes from an element\n$('div').removeClass('old-class another-class');\n\n// Toggle a class on an element (add if it doesn't exist, remove if it does)\n$('div').toggleClass('active');\n```\n\n----------------------------------------\n\nTITLE: Selecting and Extracting Text with Cheerio\nDESCRIPTION: Shows how to select an HTML element using CSS selectors and extract its text content. This example selects an h2 element with class 'title' and retrieves its text.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/intro.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('h2.title').text(); // \"Hello world\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Text Content in Cheerio\nDESCRIPTION: Examples of getting and setting text content using the text() method\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the text content of an element\n$('h1').text('Hello, World!');\n\n// Get the text content of an element\nconst text = $('p').text();\n```\n\n----------------------------------------\n\nTITLE: Using contents to Select All Child Nodes in Cheerio\nDESCRIPTION: Demonstrates the contents method which selects all children of an element, including text and comment nodes. This example shows how to select all children of a <div> element, including text nodes.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<div>\n    Text <p>Paragraph</p>\n  </div>`,\n);\n\nconst contents = $('div').contents();\nrender(<>Contents count: {contents.length}</>);\n```\n\n----------------------------------------\n\nTITLE: Inserting Elements in Cheerio\nDESCRIPTION: Demonstrates various methods for inserting new elements using append(), prepend(), before(), and after()\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Append an element to the end of a parent element\n$('ul').append('<li>Item</li>');\n\n// Prepend an element to the beginning of a parent element\n$('ul').prepend('<li>Item</li>');\n\n// Insert an element before a target element\n$('li').before('<li>Item</li>');\n\n// Insert an element after a target element\n$('li').after('<li>Item</li>');\n```\n\n----------------------------------------\n\nTITLE: Using parent to Select Parent Elements in Cheerio\nDESCRIPTION: Shows how to use the parent method to select the parent element of a selection. This example selects the parent <ul> element of a <li> element and displays its tag name.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n  </ul>`,\n);\n\nconst list = $('li').parent();\nrender(<>{list.prop('tagName')}</>);\n```\n\n----------------------------------------\n\nTITLE: Using parents and parentsUntil to Select Ancestors in Cheerio\nDESCRIPTION: Demonstrates how to use parents and parentsUntil methods to select ancestor elements. The parents method selects all ancestors, while parentsUntil selects ancestors up to but not including a specified element.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<div>\n    <ul>\n      <li>Item 1</li>\n    </ul>\n  </div>`,\n);\n\nconst ancestors = $('li').parents();\nconst ancestorsUntil = $('li').parentsUntil('div');\n\nrender(\n  <>\n    <p>\n      Ancestor count (also includes \"body\" and \"html\" tags): {ancestors.length}\n    </p>\n    <p>Ancestor count (until \"div\"): {ancestorsUntil.length}</p>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Manipulating Elements with Cheerio\nDESCRIPTION: Demonstrates how to manipulate HTML elements using Cheerio. This example changes the text of an existing element and adds a new element to the document.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/intro.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$('h2.title').text('Hello there!');\n\n$('h2').after('<h3>How are you?</h3>');\n```\n\n----------------------------------------\n\nTITLE: Selecting Descendant Elements in Cheerio\nDESCRIPTION: Shows how to select elements that are descendants of other elements using space in the selector.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst $p = $('div p');\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Selectors in Cheerio\nDESCRIPTION: Demonstrates combining tag and class selectors to select elements that match multiple criteria.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst $selected = $('p.selected');\n```\n\n----------------------------------------\n\nTITLE: Selecting Direct Descendant Elements in Cheerio\nDESCRIPTION: Demonstrates selecting elements that are direct descendants of other elements using the child combinator.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst $p = $('div > p');\n```\n\n----------------------------------------\n\nTITLE: Importing Cheerio in JavaScript (ES6+)\nDESCRIPTION: Example of importing Cheerio in modern JavaScript environments using the ES6 import statement. This allows you to use Cheerio's functionality in your code.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/intro.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n```\n\n----------------------------------------\n\nTITLE: Using Content-Based Selectors in Cheerio\nDESCRIPTION: Shows how to use the :contains pseudo-class to select elements based on their text content.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst $p = $('p:contains(\"hello\")');\n```\n\n----------------------------------------\n\nTITLE: Loading HTML from a URL with fromURL Method\nDESCRIPTION: Shows how to load an HTML document directly from a URL using the asynchronous fromURL method.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/loading.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n\nconst $ = await cheerio.fromURL('https://example.com');\n```\n\n----------------------------------------\n\nTITLE: Using Position-Based Selectors in Cheerio\nDESCRIPTION: Demonstrates using jQuery-specific extensions to select elements based on their position in the document.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst $p = $('p:first');\n```\n\n----------------------------------------\n\nTITLE: Initializing Cheerio with HTML Content in JavaScript\nDESCRIPTION: This snippet demonstrates how to import Cheerio and load an HTML document for parsing. It sets up the environment for subsequent data extraction examples.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n\nconst $ = cheerio.load(`\n  <ul>\n    <li>One</li>\n    <li>Two</li>\n    <li class=\"blue sel\">Three</li>\n    <li class=\"red\">Four</li>\n  </ul>\n`);\n```\n\n----------------------------------------\n\nTITLE: Loading HTML Content with parse5 Custom Options in Cheerio\nDESCRIPTION: Example showing how to use Cheerio's load function with parse5 options to handle noscript tags. The scriptingEnabled option is set to false to parse the contents of noscript tags as HTML.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst cheerio = require('cheerio');\nconst $ = cheerio.load('<noscript><h1>Nested Tag!</h1></noscript>', {\n  scriptingEnabled: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Using children to Select Direct Child Elements in Cheerio\nDESCRIPTION: Shows how to use the children method to select all direct <li> children of a <ul> element. The children method returns a new selection containing only direct children of the current selection, optionally filtered by a selector.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>`,\n);\n\nconst listItems = $('ul').children('li');\nrender(<>List item count: {listItems.length}</>);\n```\n\n----------------------------------------\n\nTITLE: Using parse5's Fragment Mode in Cheerio\nDESCRIPTION: Shows how to use parse5's fragment mode by passing false as the third parameter to load(), which prevents wrapping content in html, head, and body tags.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Note that we are passing `false`, as we are not parsing a full document.\nconst $ = cheerio.load('<li>Apple</li><li>Banana</li>', {}, false);\n\n$.html(); // => '<li>Apple</li><li>Banana</li>'\n```\n\n----------------------------------------\n\nTITLE: Installing Cheerio via npm\nDESCRIPTION: Command to install Cheerio using npm package manager. This snippet shows how to add Cheerio as a dependency to your Node.js project.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/intro.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cheerio\n```\n\n----------------------------------------\n\nTITLE: Parsing XML with htmlparser2 in Cheerio\nDESCRIPTION: Shows how to configure Cheerio to parse XML content by setting the xml option to true when loading content with htmlparser2.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>', {\n  xml: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Text Content with Cheerio in JavaScript\nDESCRIPTION: This example shows how to extract the text content from an HTML document while removing all HTML tags, using Cheerio's text method on the selected nodes.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/Readme.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('This is <em>content</em>.');\n$('body').text();\n//=> This is content.\n```\n\n----------------------------------------\n\nTITLE: Customizing XML Parsing Options with htmlparser2 in Cheerio\nDESCRIPTION: Demonstrates how to pass custom XML parsing options to htmlparser2 through the xml option object when loading content in Cheerio.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>', {\n  xml: {\n    withStartIndices: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using eq to Select Elements by Index in Cheerio\nDESCRIPTION: Shows how to use the eq method to select an element at a specific index within a selection. This example selects the second <li> element (index 1) from a list and displays its text content.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>`,\n);\n\nconst secondItem = $('li').eq(1);\nrender(<>{secondItem.text()}</>);\n```\n\n----------------------------------------\n\nTITLE: Default XML Parsing Options in Cheerio\nDESCRIPTION: Shows the default options used when parsing XML with htmlparser2 in Cheerio, including xmlMode, decodeEntities, withStartIndices, and withEndIndices settings.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    xmlMode: true, // Enable htmlparser2's XML mode.\n    decodeEntities: true, // Decode HTML entities.\n    withStartIndices: false, // Add a `startIndex` property to nodes.\n    withEndIndices: false, // Add an `endIndex` property to nodes.\n}\n```\n\n----------------------------------------\n\nTITLE: Using first and last Methods with Cheerio\nDESCRIPTION: This example demonstrates Cheerio's first and last methods to select the first and last elements from a collection of elements. The code loads a list and extracts the text content of both the first and last li elements.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>`,\n);\n\nconst firstItem = $('li').first();\nconst lastItem = $('li').last();\n\nrender(\n  <>\n    <p>First: {firstItem.text()}</p>\n    <p>Last: {lastItem.text()}</p>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using htmlparser2 Directly with Cheerio\nDESCRIPTION: Demonstrates how to use htmlparser2 to parse a document separately and then pass the resulting DOM to Cheerio's load function, allowing complete control over the parsing process.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as htmlparser2 from 'htmlparser2';\nconst dom = htmlparser2.parseDocument(document, options);\n\nconst $ = cheerio.load(dom);\n```\n\n----------------------------------------\n\nTITLE: Extracting Element HTML with Cheerio in JavaScript\nDESCRIPTION: This snippet shows how to extract the outer HTML of all elements matching a selector. It demonstrates the use of the 'outerHTML' value in the extract method.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = $.extract({\n  red: [\n    {\n      selector: '.red',\n      value: 'outerHTML',\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using extract Method for Data Extraction in Cheerio 1.0\nDESCRIPTION: Demonstrates how to use the new extract method to fetch release information from GitHub, including selecting elements and extracting specific data attributes.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/blog/2024-08-07-version-1.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n\nconst $ = await cheerio.fromURL(\n  'https://github.com/cheeriojs/cheerio/releases',\n);\nconst data = $.extract({\n  releases: [\n    {\n      // First, we select individual release sections.\n      selector: 'section',\n      // Then, we extract the release date, name, and notes from each section.\n      value: {\n        // Selectors are executed within the context of the selected element.\n        name: 'h2',\n        date: {\n          selector: 'relative-time',\n          // The actual release date is stored in the `datetime` attribute.\n          value: 'datetime',\n        },\n        notes: {\n          selector: '.markdown-body',\n          // We are looking for the HTML content of the element.\n          value: 'innerHTML',\n        },\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Extracting Nested Data Structures with Cheerio in JavaScript\nDESCRIPTION: This example illustrates how to extract complex, nested data structures from an HTML document. It shows how to select multiple elements and extract different properties from each.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = $.extract({\n  ul1: {\n    selector: 'ul:first',\n    value: {\n      red: ['.red'],\n      blue: '.blue',\n    },\n  },\n  ul2: {\n    selector: 'ul:eq(2)',\n    value: {\n      sel: ['.sel'],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using insertAfter and insertBefore in Cheerio\nDESCRIPTION: Shows how to use insertAfter() and insertBefore() methods to insert elements relative to other elements\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = require('cheerio');\n\n// Insert an element after a target element\n$('<p>Inserted element</p>').insertAfter('h1');\n\n// Insert an element before a target element\n$('<p>Inserted element</p>').insertBefore('h1');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Functions with Cheerio's extract Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to use a custom function as the value property in the extract method. It allows for more complex data manipulation during extraction.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extract.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = $.extract({\n  links: [\n    {\n      selector: 'a',\n      value: (el, key) => {\n        const href = $(el).attr('href');\n        return `${key}=${href}`;\n      },\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using prependTo and appendTo in Cheerio\nDESCRIPTION: Examples of using prependTo() and appendTo() methods to insert elements into parent elements\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = require('cheerio');\n\n// Prepend an element to a parent element\n$('<p>Inserted element</p>').prependTo('div');\n\n// Append an element to a parent element\n$('<p>Inserted element</p>').appendTo('div');\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML with Cheerio in JavaScript\nDESCRIPTION: This example shows various ways to render HTML content with Cheerio, including the full document, outerHTML of a specific element, or just the text content of selected nodes.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.root().html();\n//=>  <html>\n//      <head></head>\n//      <body>\n//        <ul id=\"fruits\">\n//          <li class=\"apple\">Apple</li>\n//          <li class=\"orange\">Orange</li>\n//          <li class=\"pear\">Pear</li>\n//        </ul>\n//      </body>\n//    </html>\n```\n\n----------------------------------------\n\nTITLE: Using filter and not Methods with Cheerio\nDESCRIPTION: This example demonstrates how to use Cheerio's filter and not methods to select li elements based on whether they match a CSS class selector. The filter method retains elements matching the selector while not removes elements matching the selector.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li class=\"item\">Item 1</li>\n    <li>Item 2</li>\n  </ul>`,\n);\n\nconst matchingItems = $('li').filter('.item');\nconst nonMatchingItems = $('li').not('.item');\n\nrender(\n  <>\n    <p>Matching: {matchingItems.text()}</p>\n    <p>Non-matching: {nonMatchingItems.text()}</p>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Getting outerHTML of an Element with Cheerio in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve the outerHTML of a selected element using the prop method, which captures both the element and its content.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/Readme.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('.pear').prop('outerHTML');\n//=> <li class=\"pear\">Pear</li>\n```\n\n----------------------------------------\n\nTITLE: Using has Method with Cheerio\nDESCRIPTION: This example shows how to use Cheerio's has method to filter elements based on whether they contain other elements. The code selects li elements that contain a strong element, returning the count of matching items.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n    <li>\n      <strong>Item 2</strong>\n    </li>\n  </ul>`,\n);\n\nconst matchingItems = $('li').has('strong');\nrender(<>{matchingItems.length}</>);\n```\n\n----------------------------------------\n\nTITLE: Accessing Complex Properties in Cheerio\nDESCRIPTION: Demonstrates how to access complex element properties like style, src URLs, and HTML content\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Get the `style` object of an element\nconst style = $('div').prop('style');\n\n// Get the resolved `src` URL of an image element\n$('img').prop('src');\n\n// Get the outerHTML of an element\nconst outerHTML = $('div').prop('outerHTML');\n\n// Get the innerText of an element\nconst innerText = $('div').prop('innerText');\n```\n\n----------------------------------------\n\nTITLE: Using next and prev to Navigate Between Siblings in Cheerio\nDESCRIPTION: Demonstrates how to use next and prev methods to select adjacent sibling elements. This example selects the next sibling of the first <li> and the previous sibling of the second <li> element.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n  </ul>`,\n);\n\nconst nextItem = $('li:first').next();\nconst prevItem = $('li:eq(1)').prev();\n\nrender(\n  <>\n    <p>Next: {nextItem.text()}</p>\n    <p>Prev: {prevItem.text()}</p>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying HTML Content in Cheerio\nDESCRIPTION: Examples of getting and setting HTML content using the html() method\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the inner HTML of an element\n$('div').html('<p>Hello, World!</p>');\n\n// Get the inner HTML of an element\nconst html = $('div').html();\n```\n\n----------------------------------------\n\nTITLE: Using nextAll, prevAll, and siblings to Select Multiple Siblings in Cheerio\nDESCRIPTION: Shows how to use nextAll, prevAll, and siblings methods to select multiple sibling elements. This example selects all siblings after the first <li>, all siblings before the last <li>, and all siblings of the middle <li> element.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>[1]</li>\n    <li>[2]</li>\n    <li>[3]</li>\n  </ul>`,\n);\n\nconst nextAll = $('li:first').nextAll();\nconst prevAll = $('li:last').prevAll();\nconst siblings = $('li:eq(1)').siblings();\n\nrender(\n  <>\n    <p>Next All: {nextAll.text()}</p>\n    <p>Prev All: {prevAll.text()}</p>\n    <p>Siblings: {siblings.text()}</p>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing Elements in Cheerio\nDESCRIPTION: Examples of replacing elements using replaceWith() method\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Replace an element with another element\n$('li').replaceWith('<li>Item</li>');\n```\n\n----------------------------------------\n\nTITLE: Wrapping Elements in Cheerio\nDESCRIPTION: Shows how to wrap elements with wrap() method\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Wrap an element in a div\n$('p').wrap('<div></div>');\n```\n\n----------------------------------------\n\nTITLE: Removing Elements in Cheerio\nDESCRIPTION: Shows how to remove elements using remove() and empty() methods\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Remove an element from the document\n$('li').remove();\n\n// Remove an element's children from the document\n$('li').empty();\n```\n\n----------------------------------------\n\nTITLE: Wrapping Inner Content in Cheerio\nDESCRIPTION: Demonstrates wrapping inner HTML content using wrapInner() method\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Wrap the inner HTML of an element in a div\n$('div').wrapInner('<div></div>');\n```\n\n----------------------------------------\n\nTITLE: Using nextUntil and prevUntil to Select Siblings Until a Condition in Cheerio\nDESCRIPTION: Demonstrates how to use nextUntil and prevUntil methods to select sibling elements up to a specified element. These methods select all siblings after/before the current element up to but not including the specified element.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<ul>\n    <li>Item 1</li>\n    <li>Item 2</li>\n    <li>Item 3</li>\n  </ul>`,\n);\n\nconst nextUntil = $('li:first').nextUntil('li:last-child');\nconst prevUntil = $('li:last').prevUntil('li:first-child');\n\nrender(\n  <>\n    <p>Next: {nextUntil.text()}</p>\n    <p>Prev: {prevUntil.text()}</p>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Elements in Cheerio\nDESCRIPTION: Shows how to remove parent elements while keeping children using unwrap()\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/manipulation.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Unwrap an element\n$('p').unwrap();\n```\n\n----------------------------------------\n\nTITLE: Importing Cheerio in JavaScript (CommonJS)\nDESCRIPTION: Alternative method to import Cheerio using CommonJS require function. This is useful for older JavaScript environments or if you prefer using require.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/intro.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst cheerio = require('cheerio');\n```\n\n----------------------------------------\n\nTITLE: Using closest to Find Nearest Matching Ancestor in Cheerio\nDESCRIPTION: Shows how to use the closest method to select the nearest ancestor matching a given selector. This example finds the closest <ul> element from a <li> element and displays its tag name.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/traversing.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load(\n  `<div>\n    <ul>\n      <li>Item 1</li>\n    </ul>\n  </div>`,\n);\n\nconst list = $('li').closest('ul');\nrender(<>{list.prop('tagName')}</>);\n```\n\n----------------------------------------\n\nTITLE: Traversing the DOM with Cheerio\nDESCRIPTION: Illustrates how to traverse the DOM using Cheerio's find method. This example selects an element and then finds a child element within it to extract text.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/intro.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('h2.title').find('.subtitle').text();\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-insertion of HTML Structure Elements\nDESCRIPTION: Shows how to disable Cheerio's default behavior of introducing <html>, <head>, and <body> elements when they are not present in the original HTML.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/loading.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>', null, false);\n\n$.html();\n//=> '<ul id=\"fruits\">...</ul>'\n```\n\n----------------------------------------\n\nTITLE: Parsing Binary HTML with loadBuffer Method\nDESCRIPTION: Demonstrates how to use the loadBuffer method to parse a buffer containing an HTML document. This method is useful when dealing with binary data such as files or network responses.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/loading.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\nimport * as fs from 'fs';\n\nconst buffer = fs.readFileSync('document.html');\n\nconst $ = cheerio.loadBuffer(buffer);\n\nconsole.log($('title').text());\n// Output: Hello, world!\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML Streams with Unknown Encoding using decodeStream\nDESCRIPTION: Demonstrates how to parse an HTML document from a stream when the encoding is unknown using the decodeStream method, which runs the HTML encoding sniffing algorithm.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/loading.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\nimport * as fs from 'fs';\n\nconst writeStream = cheerio.decodeStream({}, (err, $) => {\n  if (err) {\n    // Handle error\n  }\n\n  console.log($('title').text());\n  // Output: Hello, world!\n});\n\nfs.createReadStream('document.html').pipe(writeStream);\n```\n\n----------------------------------------\n\nTITLE: Parsing HTML Streams with Known Encoding using stringStream\nDESCRIPTION: Shows how to parse an HTML document from a stream when the encoding is known using the stringStream method.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/loading.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio';\nimport * as fs from 'fs';\n\nconst writeStream = cheerio.stringStream({}, (err, $) => {\n  if (err) {\n    // Handle error\n  }\n\n  console.log($('title').text());\n  // Output: Hello, world!\n});\n\nfs.createReadStream('document.html', { encoding: 'utf8' }).pipe(writeStream);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pseudo-Classes in Cheerio\nDESCRIPTION: Demonstrates how to add custom pseudo-classes using the pseudos option in Cheerio. Shows implementation of both string-based and function-based pseudo-classes for element selection.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extending-cheerio.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<div class=\"foo\"></div><div data-bar=\"boo\"></div>', {\n  pseudos: {\n    // `:foo` is an alias for `div.foo`\n    foo: 'div.foo',\n    // `:bar(val)` is equivalent to `[data-bar=val s]`\n    bar: (el, val) => el.attribs['data-bar'] === val,\n  },\n});\n\n$(':foo').length; // 1\n$('div:bar(boo)').length; // 1\n$('div:bar(baz)').length; // 0\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cheerio Plugins\nDESCRIPTION: Shows how to extend Cheerio's prototype with custom plugin methods. The example adds a logHtml method to log the HTML content of selected elements.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extending-cheerio.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<html><body>Hello, <b>world</b>!</body></html>');\n$.prototype.logHtml = function () {\n  console.log(this.html());\n};\n\n$('body').logHtml(); // logs \"Hello, <b>world</b>!\" to the console\n```\n\n----------------------------------------\n\nTITLE: Deprecated Import Syntax in Cheerio\nDESCRIPTION: Shows the deprecated import syntax that no longer works in Cheerio 1.0, where static methods were previously available directly from the imported module.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/blog/2024-08-07-version-1.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport cheerio, { html } from 'cheerio';\n\nhtml(cheerio('<test></test>')); // ~ '<test></test>' -- NO LONGER WORKS\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Definition for Cheerio Plugin\nDESCRIPTION: Demonstrates how to add TypeScript type definitions for custom Cheerio plugin methods using module declaration and interface extension.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/extending-cheerio.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module 'cheerio' {\n  interface Cheerio<T> {\n    logHtml(this: Cheerio<T>): void;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Import and Usage Pattern for Cheerio 1.0\nDESCRIPTION: Demonstrates the correct way to import and use Cheerio in version 1.0, emphasizing the need to load documents before using methods.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/blog/2024-08-07-version-1.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as cheerio from 'cheerio';\n\ncheerio.load('<test></test>').html();\n```\n\n----------------------------------------\n\nTITLE: Using htmlparser2 for HTML Parsing in Cheerio\nDESCRIPTION: Shows how to configure Cheerio to use htmlparser2 for HTML parsing by setting xmlMode to false in the xml options object, which can be useful for invalid markup or performance-critical situations.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<ul id=\"fruits\">...</ul>', {\n  xml: {\n    // Disable `xmlMode` to parse HTML with htmlparser2.\n    xmlMode: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: XML Configuration in Cheerio 1.0\nDESCRIPTION: Shows how to provide htmlparser2 options under the new xml configuration key, which is the only place these options can be specified in Cheerio 1.0.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/blog/2024-08-07-version-1.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst $ = cheerio.load('<html>', {\n  xml: {\n    withStartIndices: true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cheerio's Slim Export with htmlparser2\nDESCRIPTION: Shows how to import Cheerio's slim version which exclusively uses htmlparser2 and avoids loading parse5, making it more lightweight for browser environments.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as cheerio from 'cheerio/slim';\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Components in JSX with Custom Height\nDESCRIPTION: JSX code block that renders the imported SVG components with a custom height of 200px. The components are centered using a center HTML tag and displayed together.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/src/pages/attribution.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DancingMan height=\"200px\" />\n<SparklingHeart height=\"200px\" />\n<Lightning height=\"200px\" />\n```\n\n----------------------------------------\n\nTITLE: Using parse5's Default Document Mode in Cheerio\nDESCRIPTION: Demonstrates how parse5 treats HTML fragments as complete documents by default, wrapping content in html, head, and body tags when loading fragments.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/advanced/configuring-cheerio.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $ = cheerio.load('<li>Apple</li><li>Banana</li>');\n\n$.html(); // => '<html><head></head><body><li>Apple</li><li>Banana</li></body></html>'\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements by Tag Name in Cheerio\nDESCRIPTION: Demonstrates how to select all paragraph elements in a document using the tag name selector.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst $p = $('p');\n```\n\n----------------------------------------\n\nTITLE: Selecting Elements with XML Namespaces in Cheerio\nDESCRIPTION: Shows how to select elements with XML namespaces by escaping the colon character in attribute selectors.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/docs/basics/selecting.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('[xml\\\\:id=\"main\"');\n```\n\n----------------------------------------\n\nTITLE: Installing Cheerio Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the Cheerio website project using Yarn package manager.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Installing Cheerio 1.0 via Package Manager\nDESCRIPTION: Command to upgrade to Cheerio 1.0 using npm or yarn package managers.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/blog/2024-08-07-version-1.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install cheerio@latest\n```\n\n----------------------------------------\n\nTITLE: Starting Cheerio Website Development Server\nDESCRIPTION: Command to start the local development server which provides live reload capabilities and opens a browser window automatically.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building Cheerio Website Static Content\nDESCRIPTION: Command to generate static website content in the build directory, ready for deployment to any static hosting service.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Assets in JSX for Cheerio Project\nDESCRIPTION: Import statements for SVG icons used on the Cheerio project website. These imports reference dancing man, sparkling heart, and lightning SVG files from the static image directory.\nSOURCE: https://github.com/cheeriojs/cheerio/blob/main/website/src/pages/attribution.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DancingMan from '../../static/img/1F57A.svg';\nimport SparklingHeart from '../../static/img/1F496.svg';\nimport Lightning from '../../static/img/26A1.svg';\n```"
  }
]